function out = model
%
% wood_frame_wall.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Porous_Media_Flow_Module/Heat_Transfer');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransferInBuildingMaterials', 'geom1');
model.physics('ht').model('comp1');
model.physics.create('mt', 'MoistureTransportInBuildingMaterials', 'geom1');
model.physics('mt').model('comp1');

model.multiphysics.create('ham1', 'HeatAndMoisture', 'geom1', 2);
model.multiphysics('ham1').set('Heat_physics', 'ht');
model.multiphysics('ham1').set('Moist_physics', 'mt');
model.multiphysics('ham1').selection.all;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/physics/mt', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/ham1', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('L', '800[mm]', 'Total length of wall');
model.param.set('t_il', '12.5[mm]', 'Interior layer thickness');
model.param.set('t_i', '120[mm]', 'Isolation thickness');
model.param.set('t_b', '15[mm]', 'Bracing thickness');
model.param.set('d_wf', '45[mm]', 'Wooden frame diameter');
model.param.set('h_ext', '25[W/(m^2*K)]', 'Heat transfer coefficient, exterior');
model.param.set('h_int', '8[W/(m^2*K)]', 'Heat transfer coefficient, interior');
model.param.set('T_ext', '0[degC]', 'Temperature, exterior');
model.param.set('T_int', '19[degC]', 'Temperature, interior');
model.param.set('beta_ext', '25e-8[s/m]', 'Moisture transport coefficient, exterior');
model.param.set('beta_int', '8e-8[s/m]', 'Moisture transport coefficient, interior');
model.param.set('phi_ext', '0.8', 'Relative humidity, exterior');
model.param.set('phi_int', '0.5', 'Relative humidity, interior');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'L' 't_il + t_i + t_b'});
model.geom('geom1').run('r1');
model.geom('geom1').feature('r1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('r1').setIndex('layer', 't_il', 0);
model.geom('geom1').feature('r1').setIndex('layername', 'Layer 2', 1);
model.geom('geom1').feature('r1').setIndex('layer', 't_i', 1);
model.geom('geom1').runPre('fin');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'d_wf' 't_i'});
model.geom('geom1').feature('r2').set('pos', {'L/4-d_wf/2' 't_il'});
model.geom('geom1').runPre('fin');
model.geom('geom1').create('copy1', 'Copy');
model.geom('geom1').feature('copy1').selection('input').set({'r2'});
model.geom('geom1').feature('copy1').set('displx', 'L/2');
model.geom('geom1').runPre('fin');

model.common.create('ampr1', 'AmbientProperties', 'comp1');

model.geom('geom1').run;

model.common('ampr1').set('T_amb', 'T_ext');
model.common('ampr1').set('phi_amb', 'phi_ext');

model.physics('ht').feature('bm1').set('MaterialType', 'VaporResistanceFactor');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf1').selection.set([7]);
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 'h_ext');
model.physics('ht').feature('hf1').set('Text_src', 'root.comp1.ampr1.T_amb');
model.physics('ht').create('hf2', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf2').selection.set([2]);
model.physics('ht').feature('hf2').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf2').set('h', 'h_int');
model.physics('ht').feature('hf2').set('Text', 'T_int');
model.physics('ht').feature('init1').set('Tinit', 'T_int');
model.physics('mt').feature('bm1').set('MaterialType', 'VaporResistanceFactor');
model.physics('mt').create('mf1', 'MoistureFlux', 1);
model.physics('mt').feature('mf1').selection.set([7]);
model.physics('mt').feature('mf1').set('MoistureFluxType', 'ConvectiveMoistureFluxPressures');
model.physics('mt').feature('mf1').set('betaext', 'beta_ext');
model.physics('mt').feature('mf1').set('TExtPressures_src', 'root.comp1.ampr1.T_amb');
model.physics('mt').feature('mf1').set('phiExtPressures_src', 'root.comp1.ampr1.phi_amb');
model.physics('mt').create('mf2', 'MoistureFlux', 1);
model.physics('mt').feature('mf2').selection.set([2]);
model.physics('mt').feature('mf2').set('MoistureFluxType', 'ConvectiveMoistureFluxPressures');
model.physics('mt').feature('mf2').set('betaext', 'beta_int');
model.physics('mt').feature('mf2').set('TExtPressures', 'T_int');
model.physics('mt').feature('mf2').set('phiExtPressures', 'phi_int');
model.physics('mt').feature('init1').set('phi_init', 'phi_int');
model.physics('mt').create('tmb1', 'ThinMoistureBarrier', 1);
model.physics('mt').feature('tmb1').selection.set([4 9 12 15 18]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('int3', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').label('Wood (pine)');
model.material('mat1').propertyGroup('def').func('int1').label('wc');
model.material('mat1').propertyGroup('def').func('int1').set('funcname', 'wc');
model.material('mat1').propertyGroup('def').func('int1').set('table', {'0' '0'; '0.55' '45'; '0.75' '80'; '0.97' '185'; '1' '870'});
model.material('mat1').propertyGroup('def').func('int1').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('int1').set('fununit', {'kg/m^3'});
model.material('mat1').propertyGroup('def').func('int1').set('argunit', {'1'});
model.material('mat1').propertyGroup('def').func('int2').label('Dw');
model.material('mat1').propertyGroup('def').func('int2').set('funcname', 'Dw');
model.material('mat1').propertyGroup('def').func('int2').set('table', {'0' '1.32e-13'; '0.65' '1.32e-13'; '1' '8.03e-11'});
model.material('mat1').propertyGroup('def').func('int2').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('int2').set('fununit', {'m^2/s'});
model.material('mat1').propertyGroup('def').func('int2').set('argunit', {'1'});
model.material('mat1').propertyGroup('def').func('an1').label('delta_p');
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'delta_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', 'max(7e-13*exp(2.84*phi),0)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'phi'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', 's');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'1'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'phi' '0' '1'});
model.material('mat1').propertyGroup('def').func('int3').label('k');
model.material('mat1').propertyGroup('def').func('int3').set('funcname', 'k');
model.material('mat1').propertyGroup('def').func('int3').set('table', {'0' '0.1'; '0.97' '0.15'; '1' '0.6'});
model.material('mat1').propertyGroup('def').func('int3').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('int3').set('fununit', {'W/(m*K)'});
model.material('mat1').propertyGroup('def').func('int3').set('argunit', {'1'});
model.material('mat1').propertyGroup('def').func('an2').label('mu_vrf');
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'mu_vrf');
model.material('mat1').propertyGroup('def').func('an2').set('expr', 'max(2.01E-7*T^0.81/p/delta_p(phi),0)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T' 'p' 'phi'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K' 'Pa' '1'});
model.material('mat1').propertyGroup('def').func('an2').set('plotaxis', {'off' 'off' 'on'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'293.15' '1e5' '0'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '293.15' '293.15'; 'p' '1e5' '1e5'; 'phi' '0' '1'});
model.material('mat1').propertyGroup('def').set('density', '532');
model.material('mat1').propertyGroup('def').set('heatcapacity', '2700');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(phi)' '0' '0' '0' 'k(phi)' '0' '0' '0' 'k(phi)'});
model.material('mat1').propertyGroup('def').set('diffusion', {'Dw(phi)' '0' '0' '0' 'Dw(phi)' '0' '0' '0' 'Dw(phi)'});
model.material('mat1').propertyGroup('def').set('watercontent', 'wc(phi)');
model.material('mat1').propertyGroup('def').set('vaporpermeability', {'delta_p(phi)' '0' '0' '0' 'delta_p(phi)' '0' '0' '0' 'delta_p(phi)'});
model.material('mat1').propertyGroup('def').set('vaporresistancefactor', {'mu_vrf(T,pA,phi)' '0' '0' '0' 'mu_vrf(T,pA,phi)' '0' '0' '0' 'mu_vrf(T,pA,phi)'});
model.material('mat1').propertyGroup('def').addInput('relativehumidity');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('int2', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').label('Cellulose board');
model.material('mat2').propertyGroup('def').func('int1').label('wc');
model.material('mat2').propertyGroup('def').func('int1').set('funcname', 'wc');
model.material('mat2').propertyGroup('def').func('int1').set('table', {'0' '0'; '0.83' '13'; '0.97' '33'; '1' '710'});
model.material('mat2').propertyGroup('def').func('int1').set('interp', 'piecewisecubic');
model.material('mat2').propertyGroup('def').func('int1').set('fununit', {'kg/m^3'});
model.material('mat2').propertyGroup('def').func('int1').set('argunit', {'1'});
model.material('mat2').propertyGroup('def').func('int2').label('Dw');
model.material('mat2').propertyGroup('def').func('int2').set('funcname', 'Dw');
model.material('mat2').propertyGroup('def').func('int2').set('table', {'0' '8.1e-11'; '0.8' '8.1e-11'; '1' '7.2e-8'});
model.material('mat2').propertyGroup('def').func('int2').set('interp', 'piecewisecubic');
model.material('mat2').propertyGroup('def').func('int2').set('fununit', {'m^2/s'});
model.material('mat2').propertyGroup('def').func('int2').set('argunit', {'1'});
model.material('mat2').propertyGroup('def').func('an2').label('delta_p');
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'delta_p');
model.material('mat2').propertyGroup('def').func('an2').set('expr', 'max(1.7e-11/33*(T-263.15)+8.3e-11,0)');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', 's');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'263.15'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '263.15' '296.15'});
model.material('mat2').propertyGroup('def').func('an1').label('k');
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'k');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '(0.0398-0.0365)/30*max(0,T-263.15)+0.0365');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'263.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'T' '263.15' '293.15'});
model.material('mat2').propertyGroup('def').set('density', '63');
model.material('mat2').propertyGroup('def').set('heatcapacity', '2000');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('diffusion', {'Dw(phi)' '0' '0' '0' 'Dw(phi)' '0' '0' '0' 'Dw(phi)'});
model.material('mat2').propertyGroup('def').set('watercontent', 'wc(phi)');
model.material('mat2').propertyGroup('def').set('vaporresistancefactor', {'2' '0' '0' '0' '2' '0' '0' '0' '2'});
model.material('mat2').propertyGroup('def').set('vaporpermeability', {'delta_p(T)' '0' '0' '0' 'delta_p(T)' '0' '0' '0' 'delta_p(T)'});
model.material('mat2').propertyGroup('def').addInput('relativehumidity');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup('def').func.create('int1', 'Interpolation');
model.material('mat3').propertyGroup('def').func.create('int2', 'Interpolation');
model.material('mat3').propertyGroup('def').func.create('int3', 'Interpolation');
model.material('mat3').label('Gypsum board');
model.material('mat3').propertyGroup('def').func('int1').label('wc');
model.material('mat3').propertyGroup('def').func('int1').set('funcname', 'wc');
model.material('mat3').propertyGroup('def').func('int1').set('table', {'0' '0'; '0.33' '5'; '0.75' '7'; '0.97' '18'; '1' '370'});
model.material('mat3').propertyGroup('def').func('int1').set('interp', 'piecewisecubic');
model.material('mat3').propertyGroup('def').func('int1').set('fununit', {'kg/m^3'});
model.material('mat3').propertyGroup('def').func('int1').set('argunit', {'1'});
model.material('mat3').propertyGroup('def').func('int2').label('Dw');
model.material('mat3').propertyGroup('def').func('int2').set('funcname', 'Dw');
model.material('mat3').propertyGroup('def').func('int2').set('table', {'0' '1.85e-10'; '0.8' '1.85e-10'; '1' '1.59e-7'});
model.material('mat3').propertyGroup('def').func('int2').set('interp', 'piecewisecubic');
model.material('mat3').propertyGroup('def').func('int2').set('fununit', {'m^2/s'});
model.material('mat3').propertyGroup('def').func('int2').set('argunit', {'1'});
model.material('mat3').propertyGroup('def').func('int3').label('k');
model.material('mat3').propertyGroup('def').func('int3').set('funcname', 'k');
model.material('mat3').propertyGroup('def').func('int3').set('table', {'0' '0.19'; '0.97' '0.21'; '1' '0.6'});
model.material('mat3').propertyGroup('def').func('int3').set('interp', 'piecewisecubic');
model.material('mat3').propertyGroup('def').func('int3').set('fununit', {'W/(m*K)'});
model.material('mat3').propertyGroup('def').func('int3').set('argunit', {'1'});
model.material('mat3').propertyGroup('def').set('density', '574');
model.material('mat3').propertyGroup('def').set('heatcapacity', '1100');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'k(phi)' '0' '0' '0' 'k(phi)' '0' '0' '0' 'k(phi)'});
model.material('mat3').propertyGroup('def').set('diffusion', {'Dw(phi)' '0' '0' '0' 'Dw(phi)' '0' '0' '0' 'Dw(phi)'});
model.material('mat3').propertyGroup('def').set('watercontent', 'wc(phi)');
model.material('mat3').propertyGroup('def').set('vaporresistancefactor', {'6.9' '0' '0' '0' '6.9' '0' '0' '0' '6.9'});
model.material('mat3').propertyGroup('def').set('vaporpermeability', {'2.9e-11' '0' '0' '0' '2.9e-11' '0' '0' '0' '2.9e-11'});
model.material('mat3').propertyGroup('def').addInput('relativehumidity');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').propertyGroup('def').func.create('int1', 'Interpolation');
model.material('mat4').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat4').label('Plastic coated paper');
model.material('mat4').propertyGroup('def').func('int1').label('mu_vrf');
model.material('mat4').propertyGroup('def').func('int1').set('funcname', 'mu_vrf');
model.material('mat4').propertyGroup('def').func('int1').set('table', {'0' '9900'; '0.35' '9900'; '1' '9290'});
model.material('mat4').propertyGroup('def').func('int1').set('interp', 'piecewisecubic');
model.material('mat4').propertyGroup('def').func('int1').set('fununit', {'1'});
model.material('mat4').propertyGroup('def').func('int1').set('argunit', {'1'});
model.material('mat4').propertyGroup('def').func('an1').label('delta_p');
model.material('mat4').propertyGroup('def').func('an1').set('funcname', 'delta_p');
model.material('mat4').propertyGroup('def').func('an1').set('expr', 'max(2.01E-7*T^0.81/p/mu_vrf(phi),0)');
model.material('mat4').propertyGroup('def').func('an1').set('args', {'T' 'p' 'phi'});
model.material('mat4').propertyGroup('def').func('an1').set('fununit', 's');
model.material('mat4').propertyGroup('def').func('an1').set('argunit', {'K' 'Pa' '1'});
model.material('mat4').propertyGroup('def').func('an1').set('plotaxis', {'on' 'off' 'on'});
model.material('mat4').propertyGroup('def').func('an1').set('plotfixedvalue', {'263' '1' '0'});
model.material('mat4').propertyGroup('def').func('an1').set('plotargs', {'T' '263' '293'; 'p' '1' '1'; 'phi' '0' '1'});
model.material('mat4').propertyGroup('def').set('density', '940');
model.material('mat4').propertyGroup('def').set('heatcapacity', '2000');
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'0.1' '0' '0' '0' '0.1' '0' '0' '0' '0.1'});
model.material('mat4').propertyGroup('def').set('vaporresistancefactor', {'mu_vrf(phi)' '0' '0' '0' 'mu_vrf(phi)' '0' '0' '0' 'mu_vrf(phi)'});
model.material('mat4').propertyGroup('def').set('vaporpermeability', {'delta_p(T,pA,phi)' '0' '0' '0' 'delta_p(T,pA,phi)' '0' '0' '0' 'delta_p(T,pA,phi)'});
model.material('mat4').propertyGroup('def').addInput('relativehumidity');
model.material('mat4').propertyGroup('def').addInput('temperature');
model.material('mat4').propertyGroup('def').addInput('pressure');
model.material('mat1').selection.set([4 6]);
model.material('mat2').selection.set([2 5 7]);
model.material('mat3').selection.set([1]);
model.material('mat4').selection.geom('geom1', 1);
model.material('mat4').selection.set([4 9 12 15 18]);
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').label('Wooden panel (OSB)');
model.material('mat5').selection.set([3]);
model.material('mat5').propertyGroup('def').func.create('int1', 'Interpolation');
model.material('mat5').propertyGroup('def').func('int1').label('k_eff');
model.material('mat5').propertyGroup('def').func('int1').set('funcname', 'k_eff');
model.material('mat5').propertyGroup('def').func('int1').setIndex('table', 0, 0, 0);
model.material('mat5').propertyGroup('def').func('int1').setIndex('table', 0.11, 0, 1);
model.material('mat5').propertyGroup('def').func('int1').setIndex('table', 0.97, 1, 0);
model.material('mat5').propertyGroup('def').func('int1').setIndex('table', 0.14, 1, 1);
model.material('mat5').propertyGroup('def').func('int1').setIndex('table', 1, 2, 0);
model.material('mat5').propertyGroup('def').func('int1').setIndex('table', 0.6, 2, 1);
model.material('mat5').propertyGroup('def').func('int1').set('interp', 'piecewisecubic');
model.material('mat5').propertyGroup('def').func('int1').set('extrap', 'linear');
model.material('mat5').propertyGroup('def').func('int1').setIndex('argunit', 1, 0);
model.material('mat5').propertyGroup('def').func('int1').setIndex('fununit', 'W/(m*K)', 0);
model.material('mat5').propertyGroup('def').func.create('int2', 'Interpolation');
model.material('mat5').propertyGroup('def').func('int2').label('Interpolation: Dw');
model.material('mat5').propertyGroup('def').func('int2').set('funcname', 'Dw');
model.material('mat5').propertyGroup('def').func('int2').setIndex('table', 0, 0, 0);
model.material('mat5').propertyGroup('def').func('int2').setIndex('table', '2.93e-12', 0, 1);
model.material('mat5').propertyGroup('def').func('int2').setIndex('table', 0.97, 1, 0);
model.material('mat5').propertyGroup('def').func('int2').setIndex('table', '2.93e-12', 1, 1);
model.material('mat5').propertyGroup('def').func('int2').setIndex('table', 1, 2, 0);
model.material('mat5').propertyGroup('def').func('int2').setIndex('table', '6.52e-10', 2, 1);
model.material('mat5').propertyGroup('def').func('int2').set('interp', 'piecewisecubic');
model.material('mat5').propertyGroup('def').func('int2').set('extrap', 'linear');
model.material('mat5').propertyGroup('def').func('int2').setIndex('argunit', 1, 0);
model.material('mat5').propertyGroup('def').func('int2').setIndex('fununit', 'm^2/s', 0);
model.material('mat5').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat5').propertyGroup('def').func('an1').label('Analytic: wc');
model.material('mat5').propertyGroup('def').func('an1').set('funcname', 'wc');
model.material('mat5').propertyGroup('def').func('an1').set('expr', '202.68*x^2 - 24.813*x + 6.1962');
model.material('mat5').propertyGroup('def').func('an1').setIndex('argunit', 1, 0);
model.material('mat5').propertyGroup('def').func('an1').set('fununit', 'kg/m^3');
model.material('mat5').propertyGroup('def').set('thermalconductivity', {'k_eff(mt.phi)'});
model.material('mat5').propertyGroup('def').set('density', {'646'});
model.material('mat5').propertyGroup('def').set('heatcapacity', {'1500'});
model.material('mat5').propertyGroup('def').set('diffusion', {'Dw(mt.phi)'});
model.material('mat5').propertyGroup('def').set('watercontent', {'wc(mt.phi)'});
model.material('mat5').propertyGroup('def').set('vaporresistancefactor', {'162'});

model.mesh('mesh1').autoMeshSize(1);

model.study('std1').label('Study 1 (Stationary, without vapor barrier)');
model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledphysics', {'mt/tmb1'});

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mt_phi').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').feature('fc1').set('damp', 0.7);
model.sol('sol1').feature('s1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('s1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('s1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('s1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat and moisture variables (ham1) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, heat and moisture variables (ham1)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').feature('fc1').set('damp', 0.7);
model.sol('sol1').feature('s1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('s1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('s1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('s1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'hnlin');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Temperature (ht)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Relative Humidity (mt)');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'MoistureTransportFactory/icom5/pdef1/pcond2/pg2');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'mt.phi');
model.result('pg2').feature('surf1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg2').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').set('unit', 'degC');
model.result('pg2').run;
model.result('pg2').create('ann1', 'Annotation');
model.result('pg2').create('ann2', 'Annotation');
model.result('pg2').create('ann3', 'Annotation');
model.result('pg2').create('ann4', 'Annotation');
model.result('pg2').create('ann5', 'Annotation');
model.result('pg2').create('ann6', 'Annotation');
model.result('pg2').create('ann7', 'Annotation');
model.result('pg2').run;
model.result('pg2').feature('ann1').set('text', 'Exterior');
model.result('pg2').feature('ann1').set('posxexpr', 'L/2');
model.result('pg2').feature('ann1').set('posyexpr', 't_il+3*t_i/2+t_b');
model.result('pg2').feature('ann1').set('showpoint', false);
model.result('pg2').feature('ann1').set('anchorpoint', 'center');
model.result('pg2').run;
model.result('pg2').feature('ann2').set('text', 'Interior');
model.result('pg2').feature('ann2').set('posxexpr', 'L/2');
model.result('pg2').feature('ann2').set('posyexpr', '-t_i/2');
model.result('pg2').feature('ann2').set('showpoint', false);
model.result('pg2').feature('ann2').set('anchorpoint', 'center');
model.result('pg2').run;
model.result('pg2').feature('ann3').set('text', 'Interior panel (gypsum)');
model.result('pg2').feature('ann3').set('posxexpr', 'L/2');
model.result('pg2').feature('ann3').set('posyexpr', 't_il/2');
model.result('pg2').feature('ann3').set('showpoint', false);
model.result('pg2').feature('ann3').set('color', 'black');
model.result('pg2').feature('ann3').set('anchorpoint', 'center');
model.result('pg2').run;
model.result('pg2').feature('ann4').set('text', 'Isolation (cellulose)');
model.result('pg2').feature('ann4').set('posxexpr', 'L/2');
model.result('pg2').feature('ann4').set('posyexpr', 't_il+t_i/2');
model.result('pg2').feature('ann4').set('showpoint', false);
model.result('pg2').feature('ann4').set('color', 'black');
model.result('pg2').feature('ann4').set('anchorpoint', 'center');
model.result('pg2').run;
model.result('pg2').feature('ann5').set('text', 'Exterior panel (OSB)');
model.result('pg2').feature('ann5').set('posxexpr', 'L/2');
model.result('pg2').feature('ann5').set('posyexpr', 't_il+t_i+t_b/2');
model.result('pg2').feature('ann5').set('showpoint', false);
model.result('pg2').feature('ann5').set('color', 'black');
model.result('pg2').feature('ann5').set('anchorpoint', 'center');
model.result('pg2').run;
model.result('pg2').feature('ann6').set('text', 'Wooden frame');
model.result('pg2').feature('ann6').set('posxexpr', 'L/4');
model.result('pg2').feature('ann6').set('posyexpr', 't_il+t_i/2');
model.result('pg2').feature('ann6').set('showpoint', false);
model.result('pg2').feature('ann6').set('color', 'black');
model.result('pg2').feature('ann6').set('anchorpoint', 'center');
model.result('pg2').run;
model.result('pg2').feature('ann7').set('text', 'Wooden frame');
model.result('pg2').feature('ann7').set('posxexpr', '3*L/4');
model.result('pg2').feature('ann7').set('posyexpr', 't_il+t_i/2');
model.result('pg2').feature('ann7').set('showpoint', false);
model.result('pg2').feature('ann7').set('color', 'black');
model.result('pg2').feature('ann7').set('anchorpoint', 'center');
model.result('pg2').run;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/ht', true);
model.study('std2').feature('stat').setSolveFor('/physics/mt', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/ham1', true);
model.study('std2').label('Study 2 (Stationary, with vapor barrier)');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_mt_phi').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('seDef', 'Segregated');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol2').feature('s1').feature('fc1').set('damp', 0.7);
model.sol('sol2').feature('s1').feature('fc1').set('jtech', 'onevery');
model.sol('sol2').feature('s1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol2').feature('s1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol2').feature('s1').feature('fc1').set('aaccdim', 5);
model.sol('sol2').feature('s1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol2').feature('s1').feature('fc1').set('aaccdelay', 1);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('d1').label('Direct, heat and moisture variables (ham1) (Merged)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol2').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('s1').feature('i1').label('AMG, heat and moisture variables (ham1)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol2').feature('s1').feature('fc1').set('damp', 0.7);
model.sol('sol2').feature('s1').feature('fc1').set('jtech', 'onevery');
model.sol('sol2').feature('s1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol2').feature('s1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol2').feature('s1').feature('fc1').set('aaccdim', 5);
model.sol('sol2').feature('s1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol2').feature('s1').feature('fc1').set('aaccdelay', 1);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('s1').feature.remove('seDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Temperature (ht) 1');
model.result('pg3').set('data', 'dset2');
model.result('pg3').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg3').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Relative Humidity (mt) 1');
model.result('pg4').set('data', 'dset2');
model.result('pg4').set('defaultPlotID', 'MoistureTransportFactory/icom5/pdef1/pcond2/pg2');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'mt.phi');
model.result('pg4').feature('surf1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg4').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result('pg3').run;
model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').label('Cut Line Wood (Solution 1)');
model.result.dataset('cln1').setIndex('genpoints', 'L/4', 0, 0);
model.result.dataset('cln1').setIndex('genpoints', 'L/4', 1, 0);
model.result.dataset('cln1').setIndex('genpoints', 0.15, 0, 1);
model.result.dataset.duplicate('cln2', 'cln1');
model.result.dataset('cln2').label('Cut Line Cellulose (Solution 1)');
model.result.dataset('cln2').setIndex('genpoints', 'L/2', 0, 0);
model.result.dataset('cln2').setIndex('genpoints', 'L/2', 1, 0);
model.result.dataset.duplicate('cln3', 'cln1');
model.result.dataset('cln3').label('Cut Line Wood (Solution 2)');
model.result.dataset('cln3').set('data', 'dset2');
model.result.dataset.duplicate('cln4', 'cln2');
model.result.dataset('cln4').label('Cut Line Cellulose (Solution 2)');
model.result.dataset('cln4').set('data', 'dset2');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Temperature Across the Wall (Comparison)');
model.result('pg5').set('data', 'none');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'Distance from exterior (m)');
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg5').feature('lngr1').set('linewidth', 'preference');
model.result('pg5').feature('lngr1').set('data', 'cln1');
model.result('pg5').feature('lngr1').set('unit', 'degC');
model.result('pg5').feature('lngr1').label('Wood (without vapor barrier)');
model.result('pg5').feature('lngr1').set('linecolor', 'red');
model.result('pg5').feature('lngr1').set('linewidth', 2);
model.result('pg5').feature('lngr1').set('legend', true);
model.result('pg5').feature('lngr1').set('autoplotlabel', true);
model.result('pg5').feature('lngr1').set('autosolution', false);
model.result('pg5').run;
model.result('pg5').feature.duplicate('lngr2', 'lngr1');
model.result('pg5').run;
model.result('pg5').feature('lngr2').label('Cellulose (without vapor barrier)');
model.result('pg5').feature('lngr2').set('data', 'cln2');
model.result('pg5').feature('lngr2').set('linecolor', 'blue');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature.duplicate('lngr3', 'lngr1');
model.result('pg5').run;
model.result('pg5').feature('lngr3').label('Wood (with vapor barrier)');
model.result('pg5').feature('lngr3').set('data', 'cln3');
model.result('pg5').feature('lngr3').set('linestyle', 'dashed');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature.duplicate('lngr4', 'lngr2');
model.result('pg5').run;
model.result('pg5').feature('lngr4').label('Cellulose (with vapor barrier)');
model.result('pg5').feature('lngr4').set('data', 'cln4');
model.result('pg5').feature('lngr4').set('linestyle', 'dashed');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').set('legendpos', 'lowerright');
model.result('pg5').run;
model.result('pg5').feature('lngr1').set('titletype', 'none');
model.result('pg5').run;
model.result('pg5').feature('lngr2').set('titletype', 'none');
model.result('pg5').run;
model.result('pg5').feature('lngr3').set('titletype', 'none');
model.result('pg5').run;
model.result('pg5').feature('lngr4').set('titletype', 'none');
model.result('pg5').run;
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Temperature across the wall');
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Relative Humidity Across the Wall (Comparison)');
model.result('pg6').run;
model.result('pg6').feature('lngr1').set('expr', 'mt.phi');
model.result('pg6').run;
model.result('pg6').feature('lngr2').set('expr', 'mt.phi');
model.result('pg6').run;
model.result('pg6').feature('lngr3').set('expr', 'mt.phi');
model.result('pg6').feature('lngr3').set('smooth', 'everywhere');
model.result('pg6').run;
model.result('pg6').feature('lngr4').set('expr', 'mt.phi');
model.result('pg6').feature('lngr4').set('smooth', 'everywhere');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').set('legendpos', 'lowerleft');
model.result('pg6').set('title', 'Relative humidity across the wall');
model.result('pg6').run;

model.physics.create('ht2', 'HeatTransferInBuildingMaterials', 'geom1');
model.physics('ht2').model('comp1');

model.study('std1').feature('stat').setSolveFor('/physics/ht2', true);
model.study('std2').feature('stat').setSolveFor('/physics/ht2', true);

model.physics.create('mt2', 'MoistureTransportInBuildingMaterials', 'geom1');
model.physics('mt2').model('comp1');

model.study('std1').feature('stat').setSolveFor('/physics/mt2', true);
model.study('std2').feature('stat').setSolveFor('/physics/mt2', true);

model.multiphysics.create('ham2', 'HeatAndMoisture', 'geom1', 2);

model.study('std1').feature('stat').setSolveFor('/multiphysics/ham2', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/ham2', true);

model.multiphysics('ham2').set('Heat_physics', 'ht2');
model.multiphysics('ham2').set('Moist_physics', 'mt2');
model.multiphysics('ham2').selection.all;
model.multiphysics('ham2').active(false);

model.physics('ht2').feature('bm1').setIndex('minput_relativehumidity_src', 'root.comp1.mt2.phi', 0);
model.physics('ht2').feature('bm1').set('delta_p_mat', 'userdef');
model.physics('ht2').feature('bm1').set('delta_p', [0 0 0 0 0 0 0 0 0]);
model.physics('ht2').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht2').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht2').feature('hf1').set('h', 'h_ext');
model.physics('ht2').feature('hf1').set('Text', 'T_ext');
model.physics('ht2').feature('hf1').selection.set([7]);
model.physics('ht2').create('hf2', 'HeatFluxBoundary', 1);
model.physics('ht2').feature('hf2').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht2').feature('hf2').set('h', 'h_int');
model.physics('ht2').feature('hf2').set('Text', 'T_int');
model.physics('ht2').feature('hf2').selection.set([2]);
model.physics('ht2').feature('init1').set('Tinit', 'T_int');
model.physics('mt2').feature('bm1').set('minput_temperature_src', 'root.comp1.T2');
model.physics('mt2').feature('bm1').set('minput_pressure', 'ht2.pA');
model.physics('mt2').feature('bm1').set('Dwmoist_mat', 'userdef');
model.physics('mt2').feature('bm1').set('MaterialType', 'VaporResistanceFactor');
model.physics('mt2').create('mf1', 'MoistureFlux', 1);
model.physics('mt2').feature('mf1').set('MoistureFluxType', 'ConvectiveMoistureFluxPressures');
model.physics('mt2').feature('mf1').set('betaext', 'beta_ext');
model.physics('mt2').feature('mf1').set('TExtPressures', 'T_ext');
model.physics('mt2').feature('mf1').set('phiExtPressures', 'phi_ext');
model.physics('mt2').feature('mf1').selection.set([7]);
model.physics('mt2').create('mf2', 'MoistureFlux', 1);
model.physics('mt2').feature('mf2').set('MoistureFluxType', 'ConvectiveMoistureFluxPressures');
model.physics('mt2').feature('mf2').set('betaext', 'beta_int');
model.physics('mt2').feature('mf2').set('TExtPressures', 'T_int');
model.physics('mt2').feature('mf2').set('phiExtPressures', 'phi_int');
model.physics('mt2').feature('mf2').selection.set([2]);
model.physics('mt2').feature('init1').set('phi_init', 'phi_int');

model.study.create('std3');
model.study('std3').create('stat', 'Stationary');
model.study('std3').feature('stat').setSolveFor('/physics/ht', true);
model.study('std3').feature('stat').setSolveFor('/physics/mt', true);
model.study('std3').feature('stat').setSolveFor('/physics/ht2', true);
model.study('std3').feature('stat').setSolveFor('/physics/mt2', true);
model.study('std3').feature('stat').setSolveFor('/multiphysics/ham1', true);
model.study('std3').feature('stat').setSolveFor('/multiphysics/ham2', true);
model.study('std3').feature('stat').setEntry('activate', 'ht', false);
model.study('std3').feature('stat').setEntry('activate', 'mt', false);
model.study('std3').feature('stat').setEntry('activateCoupling', 'ham1', false);
model.study('std3').label('Study 3 (Stationary, Glaser method)');

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'stat');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').feature('comp1_mt2_phi').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').set('control', 'stat');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').create('seDef', 'Segregated');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol3').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol3').feature('s1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol3').feature('s1').feature('fc1').set('damp', 0.7);
model.sol('sol3').feature('s1').feature('fc1').set('jtech', 'onevery');
model.sol('sol3').feature('s1').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('s1').feature('d1').label('Direct, heat transfer variables (ht2) (Merged)');
model.sol('sol3').feature('s1').create('i1', 'Iterative');
model.sol('sol3').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol3').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol3').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol3').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol3').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol3').feature('s1').feature('i1').label('AMG, moisture transport variables (mt2)');
model.sol('sol3').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', false);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('s1').create('i2', 'Iterative');
model.sol('sol3').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol3').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol3').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol3').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol3').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol3').feature('s1').feature('i2').label('AMG, heat transfer variables (ht2)');
model.sol('sol3').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol3').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol3').feature('s1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol3').feature('s1').feature('fc1').set('damp', 0.7);
model.sol('sol3').feature('s1').feature('fc1').set('jtech', 'onevery');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').feature('s1').feature.remove('seDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').label('Temperature (ht2)');
model.result('pg7').set('data', 'dset3');
model.result('pg7').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg7').feature.create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('solutionparams', 'parent');
model.result('pg7').feature('surf1').set('expr', 'T2');
model.result('pg7').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('data', 'parent');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').label('Relative Humidity (mt2)');
model.result('pg8').set('data', 'dset3');
model.result('pg8').set('defaultPlotID', 'MoistureTransportFactory/icom5/pdef1/pcond2/pg2');
model.result('pg8').feature.create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', 'mt2.phi');
model.result('pg8').feature('surf1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg8').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg8').feature('surf1').set('smooth', 'internal');
model.result('pg8').feature('surf1').set('data', 'parent');
model.result('pg7').run;
model.result.dataset.duplicate('cln5', 'cln3');
model.result.dataset.duplicate('cln6', 'cln4');
model.result.dataset('cln5').set('data', 'dset3');
model.result.dataset('cln5').label('Cut Line Wood (Solution 3)');
model.result.dataset('cln6').set('data', 'dset3');
model.result.dataset('cln6').label('Cut Line Cellulose (Solution 3)');
model.result('pg5').run;
model.result('pg5').feature('lngr3').active(false);
model.result('pg5').run;
model.result('pg5').feature('lngr4').active(false);
model.result('pg5').run;
model.result('pg5').feature.duplicate('lngr5', 'lngr1');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature.duplicate('lngr6', 'lngr2');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('lngr5').label('Wood (Glaser method)');
model.result('pg5').feature('lngr5').set('data', 'cln5');
model.result('pg5').feature('lngr5').set('expr', 'T2');
model.result('pg5').feature('lngr5').set('linestyle', 'dotted');
model.result('pg5').run;
model.result('pg5').feature('lngr6').label('Cellulose (Glaser method)');
model.result('pg5').feature('lngr6').set('data', 'cln6');
model.result('pg5').feature('lngr6').set('expr', 'T2');
model.result('pg5').feature('lngr6').set('linestyle', 'dotted');
model.result('pg5').run;
model.result('pg6').run;
model.result('pg6').feature('lngr3').active(false);
model.result('pg6').run;
model.result('pg6').feature('lngr4').active(false);
model.result('pg6').run;
model.result('pg6').feature.duplicate('lngr5', 'lngr1');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').feature.duplicate('lngr6', 'lngr2');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').feature('lngr5').label('Wood (Glaser method)');
model.result('pg6').feature('lngr5').set('data', 'cln5');
model.result('pg6').feature('lngr5').set('expr', 'mt2.phi');
model.result('pg6').feature('lngr5').set('linestyle', 'dotted');
model.result('pg6').run;
model.result('pg6').feature('lngr6').label('Cellulose (Glaser method)');
model.result('pg6').feature('lngr6').set('data', 'cln6');
model.result('pg6').feature('lngr6').set('expr', 'mt2.phi');
model.result('pg6').feature('lngr6').set('linestyle', 'dotted');
model.result('pg6').run;

model.common('ampr1').set('AmbientData', 'MeteorologicalData2021');
model.common('ampr1').set('ashrae2021WeatherStation', 'AroundLocation');
model.common('ampr1').set('ashrae2021LatitudeToNorth', '53.349');
model.common('ampr1').set('ashrae2021LongitudeToEast', '-6.260');
model.common('ampr1').set('ashrae2021StationAroundLocation', '039690');
model.common('ampr1').setIndex('ashrae2021ShortDate', 15, 0);
model.common('ampr1').setIndex('ashrae2021ShortDate', '04', 1);
model.common('ampr1').setIndex('ashrae2021LocalTime', 0, 0);

model.study.create('std4');
model.study('std4').create('time', 'Transient');
model.study('std4').feature('time').setSolveFor('/physics/ht', true);
model.study('std4').feature('time').setSolveFor('/physics/mt', true);
model.study('std4').feature('time').setSolveFor('/physics/ht2', true);
model.study('std4').feature('time').setSolveFor('/physics/mt2', true);
model.study('std4').feature('time').setSolveFor('/multiphysics/ham1', true);
model.study('std4').feature('time').setSolveFor('/multiphysics/ham2', true);
model.study('std4').label('Study 4 (Time Dependent, with vapor barrier)');
model.study('std4').feature('time').setEntry('activate', 'ht2', false);
model.study('std4').feature('time').setEntry('activate', 'mt2', false);
model.study('std4').feature('time').set('tunit', 'h');
model.study('std4').feature('time').set('tlist', 'range(0,1,48)');

model.sol.create('sol4');
model.sol('sol4').study('std4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std4');
model.sol('sol4').feature('st1').set('studystep', 'time');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').feature('comp1_mt_phi').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').set('control', 'time');
model.sol('sol4').create('t1', 'Time');
model.sol('sol4').feature('t1').set('tlist', 'range(0,1,48)');
model.sol('sol4').feature('t1').set('plot', 'off');
model.sol('sol4').feature('t1').set('plotgroup', 'pg1');
model.sol('sol4').feature('t1').set('plotfreq', 'tout');
model.sol('sol4').feature('t1').set('probesel', 'all');
model.sol('sol4').feature('t1').set('probes', {});
model.sol('sol4').feature('t1').set('probefreq', 'tsteps');
model.sol('sol4').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol4').feature('t1').set('atolmethod', {'comp1_mt2_phi' 'global' 'comp1_mt_phi' 'global' 'comp1_mt_tmb1_phiExtFace' 'global' 'comp1_T' 'global' 'comp1_T2' 'global'});
model.sol('sol4').feature('t1').set('atol', {'comp1_mt2_phi' '1e-3' 'comp1_mt_phi' '1e-3' 'comp1_mt_tmb1_phiExtFace' '1e-3' 'comp1_T' '1e-3' 'comp1_T2' '1e-3'});
model.sol('sol4').feature('t1').set('atolvaluemethod', {'comp1_mt2_phi' 'factor' 'comp1_mt_phi' 'factor' 'comp1_mt_tmb1_phiExtFace' 'factor' 'comp1_T' 'factor' 'comp1_T2' 'factor'});
model.sol('sol4').feature('t1').set('reacf', true);
model.sol('sol4').feature('t1').set('storeudot', true);
model.sol('sol4').feature('t1').set('endtimeinterpolation', true);
model.sol('sol4').feature('t1').set('maxorder', 2);
model.sol('sol4').feature('t1').set('control', 'time');
model.sol('sol4').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('t1').create('seDef', 'Segregated');
model.sol('sol4').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol4').feature('t1').feature('fc1').set('damp', 0.7);
model.sol('sol4').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol4').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol4').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol4').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol4').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol4').feature('t1').feature('fc1').set('ntolfact', 0.01);
model.sol('sol4').feature('t1').create('d1', 'Direct');
model.sol('sol4').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('t1').feature('d1').label('Direct, heat and moisture variables (ham1) (Merged)');
model.sol('sol4').feature('t1').create('i1', 'Iterative');
model.sol('sol4').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol4').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol4').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol4').feature('t1').feature('i1').set('maxlinit', 10000);
model.sol('sol4').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol4').feature('t1').feature('i1').label('AMG, heat and moisture variables (ham1)');
model.sol('sol4').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol4').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol4').feature('t1').feature('fc1').set('damp', 0.7);
model.sol('sol4').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol4').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol4').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol4').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol4').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol4').feature('t1').feature('fc1').set('ntolfact', 0.01);
model.sol('sol4').feature('t1').feature.remove('fcDef');
model.sol('sol4').feature('t1').feature.remove('seDef');
model.sol('sol4').attach('std4');
model.sol('sol4').feature('t1').set('consistent', false);
model.sol('sol4').runAll;

model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').label('Temperature (ht) 2');
model.result('pg9').set('data', 'dset4');
model.result('pg9').setIndex('looplevel', 49, 0);
model.result('pg9').set('data', 'dset4');
model.result('pg9').setIndex('looplevel', 49, 0);
model.result('pg9').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg9').feature.create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('showsolutionparams', 'on');
model.result('pg9').feature('surf1').set('solutionparams', 'parent');
model.result('pg9').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg9').feature('surf1').set('showsolutionparams', 'on');
model.result('pg9').feature('surf1').set('data', 'parent');
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').label('Relative Humidity (mt) 2');
model.result('pg10').set('data', 'dset4');
model.result('pg10').setIndex('looplevel', 49, 0);
model.result('pg10').set('data', 'dset4');
model.result('pg10').setIndex('looplevel', 49, 0);
model.result('pg10').set('defaultPlotID', 'MoistureTransportFactory/icom5/pdef1/pcond2/pg2');
model.result('pg10').feature.create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', 'mt.phi');
model.result('pg10').feature('surf1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg10').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg10').feature('surf1').set('smooth', 'internal');
model.result('pg10').feature('surf1').set('data', 'parent');
model.result('pg9').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Ambient Data');
model.result('pg11').set('data', 'dset4');
model.result('pg11').create('ptgr1', 'PointGraph');
model.result('pg11').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg11').feature('ptgr1').set('linewidth', 'preference');
model.result('pg11').feature('ptgr1').selection.set([4]);
model.result('pg11').feature('ptgr1').set('expr', 'ampr1.T_amb');
model.result('pg11').feature('ptgr1').set('unit', 'degC');
model.result('pg11').feature('ptgr1').set('legend', true);
model.result('pg11').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg11').feature('ptgr1').setIndex('legends', 'Temperature', 0);
model.result('pg11').run;
model.result('pg11').create('ptgr2', 'PointGraph');
model.result('pg11').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg11').feature('ptgr2').set('linewidth', 'preference');
model.result('pg11').feature('ptgr2').selection.set([4]);
model.result('pg11').feature('ptgr2').set('expr', 'ampr1.phi_amb');
model.result('pg11').feature('ptgr2').set('legend', true);
model.result('pg11').feature('ptgr2').set('legendmethod', 'manual');
model.result('pg11').feature('ptgr2').setIndex('legends', 'Relative humidity', 0);
model.result('pg11').run;
model.result('pg11').set('twoyaxes', true);
model.result('pg11').setIndex('plotonsecyaxis', true, 1, 1);
model.result('pg11').set('titletype', 'manual');
model.result('pg11').set('title', 'Ambient data over two days');
model.result('pg11').run;

model.probe.create('pdom1', 'DomainPoint');
model.probe('pdom1').model('comp1');
model.probe('pdom1').label('Domain Point Probe: Relative humidity (bracing)');
model.probe('pdom1').setIndex('coords2', 'L/2', 0);
model.probe('pdom1').setIndex('coords2', 't_il+t_i+t_b*0.95', 1);
model.probe('pdom1').feature('ppb1').set('expr', 'mt.phi');
model.probe('pdom1').feature('ppb1').genResult('sol4');

model.result.numerical('pev1').set('table', 'tbl1');
model.result.numerical('pev1').set('innerinput', 'all');
model.result.numerical('pev1').set('outerinput', 'all');
model.result.numerical('pev1').setResult;
model.result('pg12').feature('tblp1').set('plotcolumns', [2]);
model.result('pg12').feature('tblp1').set('xaxisdata', 'auto');
model.result('pg12').run;

model.probe.duplicate('pdom2', 'pdom1');
model.probe('pdom2').label('Domain Point Probe: Relative humidity (isolation)');
model.probe('pdom2').setIndex('coords2', 't_il+t_i*0.95', 1);
model.probe('pdom2').feature('ppb2').set('table', 'new');
model.probe('pdom2').feature('ppb2').genResult('sol4');

model.result.numerical('pev2').set('table', 'tbl2');
model.result.numerical('pev2').set('innerinput', 'all');
model.result.numerical('pev2').set('outerinput', 'all');
model.result.numerical('pev2').setResult;
model.result('pg12').feature('tblp2').set('plotcolumns', [2]);
model.result('pg12').feature('tblp2').set('xaxisdata', 'auto');
model.result('pg12').run;
model.result('pg12').set('window', 'window1');
model.result('pg12').run;
model.result('pg12').label('Relative Humidity Over Two Days');
model.result('pg12').set('titletype', 'manual');
model.result('pg12').set('title', 'Relative humidity over two days');
model.result('pg12').set('ylabelactive', true);
model.result('pg12').set('ylabel', 'Relative humidity (1)');
model.result('pg12').set('window', 'window1');
model.result('pg12').run;
model.result('pg12').feature('tblp1').set('legendmethod', 'manual');
model.result('pg12').feature('tblp1').setIndex('legends', 'Point: (0.4, 0.14675)', 0);
model.result('pg12').set('window', 'window1');
model.result('pg12').run;
model.result('pg12').feature('tblp2').set('legendmethod', 'manual');
model.result('pg12').feature('tblp2').setIndex('legends', 'Point: (0.4, 0.1265)', 0);
model.result('pg12').set('window', 'window1');
model.result('pg12').run;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Mass Balance');
model.result.numerical('gev1').set('data', 'dset4');
model.result.numerical('gev1').set('expr', {'mt.massBalance'});
model.result.numerical('gev1').set('descr', {'Mass balance'});
model.result.numerical('gev1').set('unit', {'kg/s'});
model.result.numerical('gev1').set('expr', {'mt.massBalance' 'mt.dwcInt'});
model.result.numerical('gev1').set('descr', {'Mass balance' 'Total accumulated moisture rate'});
model.result.numerical('gev1').set('expr', {'mt.massBalance' 'mt.dwcInt' 'mt.ntfluxInt'});
model.result.numerical('gev1').set('descr', {'Mass balance' 'Total accumulated moisture rate' 'Total net moisture rate'});
model.result.numerical('gev1').set('expr', {'mt.massBalance' 'mt.dwcInt' 'mt.ntfluxInt' 'mt.GInt'});
model.result.numerical('gev1').set('descr', {'Mass balance' 'Total accumulated moisture rate' 'Total net moisture rate' 'Total mass source'});
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').comments('Mass Balance');
model.result.numerical('gev1').set('table', 'tbl3');
model.result.numerical('gev1').setResult;
model.result.create('pg13', 'PlotGroup1D');
model.result('pg13').set('data', 'none');
model.result('pg13').create('tblp1', 'Table');
model.result('pg13').feature('tblp1').set('source', 'table');
model.result('pg13').feature('tblp1').set('table', 'tbl3');
model.result('pg13').feature('tblp1').set('linewidth', 'preference');
model.result('pg13').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg13').run;
model.result('pg13').run;
model.result('pg13').label('Mass Balance');
model.result('pg13').run;
model.result('pg13').feature('tblp1').set('legend', true);
model.result('pg13').feature('tblp1').set('linewidth', 2);
model.result.dataset.create('extr1', 'Extrude2D');
model.result.dataset('extr1').set('data', 'dset2');
model.result.dataset('extr1').set('zmax', '0.2');
model.result.create('pg14', 'PlotGroup3D');
model.result('pg14').run;

model.view('view2').camera.setIndex('position', -2, 0);
model.view('view2').camera.setIndex('position', 1.7, 1);
model.view('view2').camera.set('position', [-2 1.7 3.5]);
model.view('view2').camera.setIndex('up', 0.2, 0);
model.view('view2').camera.setIndex('up', 0.9, 1);
model.view('view2').camera.set('up', [0.2 0.9 -0.3]);

model.result('pg14').run;
model.result('pg14').label('Relative Humidity 3D');
model.result('pg14').create('surf1', 'Surface');
model.result('pg14').feature('surf1').label('Relative Humidity');
model.result('pg14').feature('surf1').set('expr', 'mt.phi');
model.result('pg14').feature('surf1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg14').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg14').run;
model.result('pg14').run;

model.title('Condensation Risk in a Wood-Frame Wall');

model.description('This tutorial shows how to simulate coupled heat and moisture transport in a 2D wood-frame wall, in order to evaluate the risk of condensation inside the wall. Different design and modeling approaches are compared under stationary outdoor conditions. In addition, the effect of the diurnal variation of outdoor humidity on the humidity distribution in the wall is computed.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('wood_frame_wall.mph');

model.modelNode.label('Components');

out = model;
