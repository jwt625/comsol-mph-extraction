function out = model
%
% accelerated_life_testing.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fatigue_Module/Strain_Life');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', [2 0.5]);
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', [0.5 0.25]);
model.geom('geom1').feature('r2').set('pos', [0 0.5]);
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', [2 0.5]);
model.geom('geom1').feature('r3').set('pos', [0 0.75]);
model.geom('geom1').run('r3');
model.geom('geom1').create('pt1', 'Point');
model.geom('geom1').feature('pt1').setIndex('p', 0.25, 0);
model.geom('geom1').feature('pt1').setIndex('p', 0.625, 1);
model.geom('geom1').run('pt1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.geom('geom1').run;

model.param.set('A_I', '8.03e-12[1/s]');
model.param.descr('A_I', 'Low stress creep rate coefficient');
model.param.set('n_I', '3');
model.param.descr('n_I', 'Low stress creep rate exponent');
model.param.set('A_II', '1.96e-23[1/s]');
model.param.descr('A_II', 'High stress creep rate coefficient');
model.param.set('n_II', '12');
model.param.descr('n_II', 'High stress creep rate exponent');
model.param.set('s_ref', '1[MPa]');
model.param.descr('s_ref', 'Reference stress');

model.func.create('int1', 'Interpolation');
model.func('int1').set('funcname', 'thermLC');
model.func('int1').setIndex('table', 0, 0, 0);
model.func('int1').setIndex('table', 25, 0, 1);
model.func('int1').setIndex('table', 15, 1, 0);
model.func('int1').setIndex('table', 100, 1, 1);
model.func('int1').setIndex('table', 30, 2, 0);
model.func('int1').setIndex('table', 100, 2, 1);
model.func('int1').setIndex('table', 45, 3, 0);
model.func('int1').setIndex('table', 25, 3, 1);
model.func('int1').setIndex('table', 60, 4, 0);
model.func('int1').setIndex('table', 25, 4, 1);
model.func('int1').setIndex('argunit', 'min', 0);
model.func('int1').setIndex('fununit', 'degC', 0);

model.physics('solid').feature('lemm1').set('CalculateDissipatedEnergy', true);
model.physics('solid').feature('lemm1').create('te1', 'ThermalExpansion', 2);
model.physics('solid').feature('lemm1').feature('te1').set('minput_temperature_src', 'userdef');
model.physics('solid').feature('lemm1').feature('te1').set('minput_temperature', 'thermLC(t)');
model.physics('solid').feature('lemm1').create('cmm1', 'Creep2', 2);
model.physics('solid').feature('lemm1').feature('cmm1').selection.set([2]);
model.physics('solid').feature('lemm1').feature('cmm1').set('A_nor_mat', 'userdef');
model.physics('solid').feature('lemm1').feature('cmm1').set('A_nor', 'A_I');
model.physics('solid').feature('lemm1').feature('cmm1').set('sigRef_nor_mat', 'userdef');
model.physics('solid').feature('lemm1').feature('cmm1').set('sigRef_nor', 's_ref');
model.physics('solid').feature('lemm1').feature('cmm1').set('n_nor_mat', 'userdef');
model.physics('solid').feature('lemm1').feature('cmm1').set('n_nor', 'n_I');
model.physics('solid').feature('lemm1').feature('cmm1').create('acr1', 'AdditionalCreep', 2);
model.physics('solid').feature('lemm1').feature('cmm1').feature('acr1').selection.set([2]);
model.physics('solid').feature('lemm1').feature('cmm1').feature('acr1').set('A_nor_mat', 'userdef');
model.physics('solid').feature('lemm1').feature('cmm1').feature('acr1').set('A_nor', 'A_II');
model.physics('solid').feature('lemm1').feature('cmm1').feature('acr1').set('sigRef_nor_mat', 'userdef');
model.physics('solid').feature('lemm1').feature('cmm1').feature('acr1').set('sigRef_nor', 's_ref');
model.physics('solid').feature('lemm1').feature('cmm1').feature('acr1').set('n_nor_mat', 'userdef');
model.physics('solid').feature('lemm1').feature('cmm1').feature('acr1').set('n_nor', 'n_II');
model.physics('solid').create('sym1', 'SymmetrySolid', 1);
model.physics('solid').feature('sym1').selection.set([11 12]);
model.physics('solid').create('fix1', 'Fixed', 0);
model.physics('solid').feature('fix1').selection.set([8]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('PCB');
model.material('mat1').selection.set([1]);
model.material('mat1').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat1').propertyGroup('Enu').set('E', {'22[GPa]'});
model.material('mat1').propertyGroup('Enu').set('nu', {'0.4'});
model.material('mat1').propertyGroup('def').set('density', {'1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'21e-6'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Solder');
model.material('mat2').selection.set([2]);
model.material('mat2').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat2').propertyGroup('Enu').set('E', {'50[GPa]'});
model.material('mat2').propertyGroup('Enu').set('nu', {'0.4'});
model.material('mat2').propertyGroup('def').set('density', {'1'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'21e-6'});
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Alumina');
model.material('mat3').selection.set([3]);
model.material('mat3').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat3').propertyGroup('Enu').set('E', {'300[GPa]'});
model.material('mat3').propertyGroup('Enu').set('nu', {'0.22'});
model.material('mat3').propertyGroup('def').set('density', {'1'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'8e-6'});

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('s_mises', 'sqrt(solid.sx^2+solid.sy^2+solid.sz^2-solid.sx*solid.sy-solid.sy*solid.sz-solid.sz*solid.sx+3*solid.sxy^2+3*solid.syz^2+3*solid.sxz^2+(1e-6[MPa])^2)');
model.variable('var1').set('alpha_I', '3/2*A_I/s_mises*(s_mises/s_ref)^n_I');
model.variable('var1').set('alpha_II', '3/2*A_II/s_mises*(s_mises/s_ref)^n_II');

model.physics.create('dode', 'DomainODE', 'geom1', {'u2'});
model.physics('dode').prop('EquationForm').set('form', 'Automatic');
model.physics.create('dode2', 'DomainODE', 'geom1', {'u3'});
model.physics('dode2').prop('EquationForm').set('form', 'Automatic');
model.physics.create('dode3', 'DomainODE', 'geom1', {'u4'});
model.physics('dode3').prop('EquationForm').set('form', 'Automatic');
model.physics('dode').selection.set([2]);
model.physics('dode').prop('Units').setIndex('CustomSourceTermUnit', '1/s', 0, 0);
model.physics('dode').field('dimensionless').field('ec_I');
model.physics('dode').field('dimensionless').component({'u2' 'ec_I2' 'ec_I3' 'ec_I4' 'ec_I5'});
model.physics('dode').field('dimensionless').component(1, 'ecx_I');
model.physics('dode').field('dimensionless').component(2, 'ecy_I');
model.physics('dode').field('dimensionless').component(3, 'ecz_I');
model.physics('dode').field('dimensionless').component(4, 'ecxy_I');
model.physics('dode').field('dimensionless').component(5, 'ece_I');
model.physics('dode').prop('ShapeProperty').set('shapeFunctionType', 'shgp');
model.physics('dode').prop('ShapeProperty').set('order', 4);
model.physics('dode').feature('dode1').setIndex('f', 'alpha_I*solid.sdevx', 0);
model.physics('dode').feature('dode1').setIndex('f', 'alpha_I*solid.sdevy', 1);
model.physics('dode').feature('dode1').setIndex('f', 'alpha_I*solid.sdevz', 2);
model.physics('dode').feature('dode1').setIndex('f', 'alpha_I*solid.sdevxy', 3);
model.physics('dode').feature('dode1').setIndex('f', '(2/3*(d(ecx_I,TIME)^2+d(ecy_I,TIME)^2+d(ecz_I,TIME)^2+2*(d(ecxy_I,TIME)^2))+(1e-20))^0.5', 4);
model.physics('dode2').selection.set([2]);
model.physics('dode2').prop('Units').setIndex('CustomSourceTermUnit', '1/s', 0, 0);
model.physics('dode2').field('dimensionless').field('ec_II');
model.physics('dode2').field('dimensionless').component({'u3' 'ec_II2' 'ec_II3' 'ec_II4' 'ec_II5'});
model.physics('dode2').field('dimensionless').component(1, 'ecx_II');
model.physics('dode2').field('dimensionless').component(2, 'ecy_II');
model.physics('dode2').field('dimensionless').component(3, 'ecz_II');
model.physics('dode2').field('dimensionless').component(4, 'ecxy_II');
model.physics('dode2').field('dimensionless').component(5, 'ece_II');
model.physics('dode2').prop('ShapeProperty').set('shapeFunctionType', 'shgp');
model.physics('dode2').prop('ShapeProperty').set('order', 4);
model.physics('dode2').feature('dode1').setIndex('f', 'alpha_II*solid.sdevx', 0);
model.physics('dode2').feature('dode1').setIndex('f', 'alpha_II*solid.sdevy', 1);
model.physics('dode2').feature('dode1').setIndex('f', 'alpha_II*solid.sdevz', 2);
model.physics('dode2').feature('dode1').setIndex('f', 'alpha_II*solid.sdevxy', 3);
model.physics('dode2').feature('dode1').setIndex('f', '(2/3*(d(ecx_II,TIME)^2+d(ecy_II,TIME)^2+d(ecz_II,TIME)^2+2*(d(ecxy_II,TIME)^2))+(1e-20))^0.5', 4);
model.physics('dode3').selection.set([2]);
model.physics('dode3').prop('Units').set('DependentVariableQuantity', 'energydensity');
model.physics('dode3').prop('Units').setIndex('CustomSourceTermUnit', 'J/(s*m^3)', 0, 0);
model.physics('dode3').field('dimensionless').field('Wc');
model.physics('dode3').field('dimensionless').component({'u4' 'Wc2'});
model.physics('dode3').field('dimensionless').component(1, 'Wc_I');
model.physics('dode3').field('dimensionless').component(2, 'Wc_II');
model.physics('dode3').prop('ShapeProperty').set('shapeFunctionType', 'shgp');
model.physics('dode3').prop('ShapeProperty').set('order', 4);
model.physics('dode3').feature('dode1').setIndex('f', 'd(ece_I,TIME)*s_mises', 0);
model.physics('dode3').feature('dode1').setIndex('f', 'd(ece_II,TIME)*s_mises', 1);

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([2]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([3]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 6);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([4]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 12);
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hauto', 4);
model.mesh('mesh1').run;

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/solid', true);
model.study('std1').feature('time').setSolveFor('/physics/dode', true);
model.study('std1').feature('time').setSolveFor('/physics/dode2', true);
model.study('std1').feature('time').setSolveFor('/physics/dode3', true);
model.study('std1').feature('time').set('tunit', 'min');
model.study('std1').feature('time').set('tlist', 'range(0,0.5,14.5) range(14.6,0.1,15.4) range(15.5,0.5,29.5) range(29.6,0.1,30.4) range(30.5,0.5,44.5) range(44.6,0.1,45.4) range(45.5,0.5,60)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.0023584952830141507');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.5,14.5) range(14.6,0.1,15.4) range(15.5,0.5,29.5) range(29.6,0.1,30.4) range(30.5,0.5,44.5) range(44.6,0.1,45.4) range(45.5,0.5,60)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsgenalpha', 'intermediate');
model.sol('sol1').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('rhoinf', 0.75);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 4);
model.sol('sol1').feature('t1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 4);
model.sol('sol1').feature('t1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('t1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.0023584952830141507');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.5,14.5) range(14.6,0.1,15.4) range(15.5,0.5,29.5) range(29.6,0.1,30.4) range(30.5,0.5,44.5) range(44.6,0.1,45.4) range(45.5,0.5,60)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsgenalpha', 'intermediate');
model.sol('sol1').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('rhoinf', 0.75);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 4);
model.sol('sol1').feature('t1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 4);
model.sol('sol1').feature('t1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 145, 0);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').set('resolution', 'normal');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('expr', {'u' 'v'});
model.result('pg1').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 145, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').label('Domain ODEs and DAEs');
model.result('pg2').feature('surf1').set('expr', 'ecx_I');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 145, 0);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').label('Domain ODEs and DAEs 2');
model.result('pg3').feature('surf1').set('expr', 'ecx_II');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 145, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').label('Domain ODEs and DAEs 3');
model.result('pg4').feature('surf1').set('expr', 'Wc_I');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').label('Creep strain I (dode)');
model.result('pg2').run;
model.result('pg2').feature('surf1').set('expr', 'ece_I');
model.result('pg3').run;
model.result('pg3').label('Creep strain II (dode2)');
model.result('pg3').run;
model.result('pg3').feature('surf1').set('expr', 'ece_II');
model.result('pg4').run;
model.result('pg4').label('Dissipated energy (dode3)');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Creep strain history');
model.result('pg5').create('ptgr1', 'PointGraph');
model.result('pg5').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg5').feature('ptgr1').set('linewidth', 'preference');
model.result('pg5').feature('ptgr1').selection.set([5]);
model.result('pg5').feature('ptgr1').set('expr', 'solid.eclGp11');
model.result('pg5').feature('ptgr1').set('legend', true);
model.result('pg5').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg5').feature('ptgr1').setIndex('legends', 'ec_x', 0);
model.result('pg5').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg5').run;
model.result('pg5').feature('ptgr2').set('expr', 'solid.eclGp22');
model.result('pg5').feature('ptgr2').setIndex('legends', 'ec_y', 0);
model.result('pg5').feature.duplicate('ptgr3', 'ptgr2');
model.result('pg5').run;
model.result('pg5').feature('ptgr3').set('expr', 'solid.eclGp33');
model.result('pg5').feature('ptgr3').setIndex('legends', 'ec_z', 0);
model.result('pg5').feature.duplicate('ptgr4', 'ptgr3');
model.result('pg5').run;
model.result('pg5').feature('ptgr4').set('expr', 'solid.eclGp12');
model.result('pg5').feature('ptgr4').setIndex('legends', 'ec_xy', 0);
model.result('pg5').run;
model.result('pg5').set('legendpos', 'lowerright');
model.result('pg5').set('titletype', 'none');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Creep strain (1)');
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').create('ptgr1', 'PointGraph');
model.result('pg6').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg6').feature('ptgr1').set('linewidth', 'preference');
model.result('pg6').feature('ptgr1').set('expr', 'solid.eceGp');
model.result('pg6').feature('ptgr1').selection.set([5]);
model.result('pg6').feature('ptgr1').set('legend', true);
model.result('pg6').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg6').feature('ptgr1').setIndex('legends', 'ec (solid)', 0);
model.result('pg6').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg6').run;
model.result('pg6').feature('ptgr2').set('expr', 'ece_I');
model.result('pg6').feature('ptgr2').setIndex('legends', 'ece_I (dode)', 0);
model.result('pg6').feature.duplicate('ptgr3', 'ptgr2');
model.result('pg6').run;
model.result('pg6').feature('ptgr3').set('expr', 'ece_II');
model.result('pg6').feature('ptgr3').setIndex('legends', 'ece_II (dode2)', 0);
model.result('pg6').feature.duplicate('ptgr4', 'ptgr3');
model.result('pg6').run;
model.result('pg6').feature('ptgr4').set('expr', 'ece_I+ece_II');
model.result('pg6').feature('ptgr4').setIndex('legends', 'ece_I+ece_II', 0);
model.result('pg6').feature('ptgr4').set('linestyle', 'dotted');
model.result('pg6').feature('ptgr4').set('linewidth', 4);
model.result('pg6').run;
model.result('pg6').label('Effective creep history');
model.result('pg6').set('legendpos', 'upperleft');
model.result('pg6').set('titletype', 'none');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'Effective creep strain (1)');
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Creep dissipation history');
model.result('pg7').run;
model.result('pg7').feature('ptgr1').set('expr', 'solid.Wc');
model.result('pg7').feature('ptgr1').setIndex('legends', 'Wc (solid)', 0);
model.result('pg7').run;
model.result('pg7').feature('ptgr2').set('expr', 'Wc_I');
model.result('pg7').feature('ptgr2').setIndex('legends', 'Wc_I (dode3)', 0);
model.result('pg7').run;
model.result('pg7').feature('ptgr3').set('expr', 'Wc_II');
model.result('pg7').feature('ptgr3').setIndex('legends', 'Wc_II (dode3)', 0);
model.result('pg7').run;
model.result('pg7').feature('ptgr4').set('expr', 'Wc_I+Wc_II');
model.result('pg7').feature('ptgr4').setIndex('legends', 'Wc_I+Wc_II', 0);
model.result('pg7').run;
model.result('pg7').set('ylabel', 'Creep dissipation (J/m^3)');
model.result('pg7').run;

model.physics.create('ftg', 'Fatigue', 'geom1');
model.physics('ftg').model('comp1');

model.study('std1').feature('time').setSolveFor('/physics/ftg', false);

model.physics('ftg').create('elif1', 'StrainLifeModel', 2);
model.physics('ftg').feature('elif1').selection.set([2]);
model.physics('ftg').feature('elif1').set('ftgElifCrit', 'CoffinManson');
model.physics('ftg').feature('elif1').set('strainTypeCM', 'User');
model.physics('ftg').feature('elif1').set('ftgUserExpr', '2*ecxy_II');
model.physics('ftg').feature('elif1').set('epsilonf_CM_mat', 'userdef');
model.physics('ftg').feature('elif1').set('epsilonf_CM', 0.587);
model.physics('ftg').feature('elif1').set('c_CM_mat', 'userdef');
model.physics('ftg').feature('elif1').set('c_CM', -0.61);
model.physics.create('ftg2', 'Fatigue', 'geom1');
model.physics('ftg2').model('comp1');

model.study('std1').feature('time').setSolveFor('/physics/ftg2', false);

model.physics('ftg2').create('ener1', 'EnergyBasedModel', 2);
model.physics('ftg2').feature('ener1').selection.set([2]);
model.physics('ftg2').feature('ener1').set('ftgEnerType', 'User');
model.physics('ftg2').feature('ener1').set('ftgUserExpr', 'Wc_II');
model.physics('ftg2').feature('ener1').set('Wf_Morrow_mat', 'userdef');
model.physics('ftg2').feature('ener1').set('Wf_Morrow', '74e6');
model.physics('ftg2').feature('ener1').set('m_Morrow_mat', 'userdef');
model.physics('ftg2').feature('ener1').set('m_Morrow', -0.79);

model.study.create('std2');
model.study('std2').create('ftge', 'Fatigue');
model.study('std2').feature('ftge').set('solnum', 'auto');
model.study('std2').feature('ftge').set('usesol', 'off');
model.study('std2').feature('ftge').setSolveFor('/physics/solid', false);
model.study('std2').feature('ftge').setSolveFor('/physics/dode', false);
model.study('std2').feature('ftge').setSolveFor('/physics/dode2', false);
model.study('std2').feature('ftge').setSolveFor('/physics/dode3', false);
model.study('std2').feature('ftge').setSolveFor('/physics/ftg', true);
model.study('std2').feature('ftge').setSolveFor('/physics/ftg2', true);
model.study('std2').feature('ftge').set('usesol', true);
model.study('std2').feature('ftge').set('notsolmethod', 'sol');
model.study('std2').feature('ftge').set('notstudy', 'std1');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'ftge');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'ftge');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').set('data', 'dset2');
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'ftg.ctf'});
model.result('pg8').feature('surf1').set('colortable', 'Rainbow');
model.result('pg8').feature('surf1').set('colortabletrans', 'none');
model.result('pg8').feature('surf1').set('colorscalemode', 'logarithmic');
model.result('pg8').feature('surf1').set('colortablerev', true);
model.result('pg8').feature('surf1').set('colortable', 'Traffic');
model.result('pg8').label('Cycles to Failure (ftg)');
model.result('pg8').feature('surf1').create('mrkr1', 'Marker');
model.result('pg8').feature('surf1').feature('mrkr1').set('precision', 3);
model.result('pg8').feature('surf1').feature('mrkr1').set('display', 'min');
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').set('data', 'dset2');
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', {'ftg2.ctf'});
model.result('pg9').feature('surf1').set('colortable', 'Rainbow');
model.result('pg9').feature('surf1').set('colortabletrans', 'none');
model.result('pg9').feature('surf1').set('colorscalemode', 'logarithmic');
model.result('pg9').feature('surf1').set('colortablerev', true);
model.result('pg9').feature('surf1').set('colortable', 'Traffic');
model.result('pg9').label('Cycles to Failure (ftg2)');
model.result('pg9').feature('surf1').create('mrkr1', 'Marker');
model.result('pg9').feature('surf1').feature('mrkr1').set('precision', 3);
model.result('pg9').feature('surf1').feature('mrkr1').set('display', 'min');
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').feature('surf1').feature('mrkr1').set('anchorpoint', 'lowerleft');
model.result('pg8').run;
model.result('pg9').run;
model.result('pg9').feature('surf1').feature('mrkr1').set('anchorpoint', 'lowerleft');
model.result('pg9').run;
model.result('pg6').run;

model.title('Accelerated Life Testing');

model.description('This example demonstrates how to evaluate fatigue driven by a specific strain or energy using a simple schematic representation of an electronic component. The required strain and energy variables are defined via ordinary differential equations and calculated during the simulation of the thermal load cycle.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('accelerated_life_testing.mph');

model.modelNode.label('Components');

out = model;
