function out = model
%
% modular_mixer_ke.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Mixer_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.param.set('H', '0.5[m]');
model.param.descr('H', 'Vessel height');
model.param.set('T', 'H');
model.param.descr('T', 'Vessel diameter');
model.param.set('alpha', '45[deg]');
model.param.descr('alpha', 'Pitch angle');
model.param.set('N_blades', '4');
model.param.descr('N_blades', 'Number of blades for pitched blade impeller');
model.param.set('B', '4');
model.param.descr('B', 'Number of baffles');
model.param.set('Da', '1/2*T');
model.param.descr('Da', 'Impeller diameter');
model.param.set('blade_width', 'Da/5');
model.param.descr('blade_width', 'Width of impeller blade');
model.param.set('bw', 'T/12');
model.param.descr('bw', 'Baffle width');
model.param.set('C', '1/4*H');
model.param.descr('C', 'Clearance');
model.param.set('shaft_diameter', '1/10*Da');
model.param.descr('shaft_diameter', 'Shaft diameter');

model.geom.load({'part1'}, 'Mixer_Module/Impellers,_Axial/pitched_blade_impeller.mph', {'part1'});
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'd_hu', 'blade_width*abs(cos(alpha))*1.1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'ap_ib', 'alpha');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'd_a_ib', 'blade_width*cos(alpha)*0.95');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'lr_cl_ib', '0.3[1]');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'lr_cu_ib', '0.3[1]');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'n_ib', 'N_blades');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'rf_ib', '0[m]');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'w_ib', 'blade_width');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'w_a_ib', '0[m]');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'w_o_ib', 'blade_width');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'w_cil_ib', 'blade_width*0.25');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'w_ciu_ib', 'blade_width*0.25');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'w_col_ib', '0[m]');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'd_im', 'Da');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'hp_im', '-blade_width*sin(alpha)/2');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'd_is', 'shaft_diameter');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'pa_cs_im', 1);
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'd_cs_im', 'Da*1.2');
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Impeller Domains');
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Control Domain');
model.geom('geom1').feature('pi1').setEntry('selkeepobj', 'pi1_csel3', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetoobj', 'pi1_csel3', 'csel1');
model.geom('geom1').feature('pi1').setEntry('selkeepobj', 'pi1_csel8', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetoobj', 'pi1_csel8', 'csel2');
model.geom('geom1').selection.create('csel3', 'CumulativeSelection');
model.geom('geom1').selection('csel3').label('Rotating Interior Wall');
model.geom('geom1').selection.create('csel4', 'CumulativeSelection');
model.geom('geom1').selection('csel4').label('Rotating Wall');
model.geom('geom1').selection.create('csel5', 'CumulativeSelection');
model.geom('geom1').selection('csel5').label('View Suppression');
model.geom('geom1').selection.create('csel6', 'CumulativeSelection');
model.geom('geom1').selection('csel6').label('Mesh');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel1.bnd', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel1.bnd', 'csel3');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel2.bnd', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel2.bnd', 'csel4');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel12.bnd', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel12.bnd', 'csel6');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel13.bnd', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel13.bnd', 'csel6');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel14.bnd', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel14.bnd', 'csel6');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel15.bnd', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel15.bnd', 'csel5');
model.geom('geom1').selection.create('csel7', 'CumulativeSelection');
model.geom('geom1').selection('csel7').label('Remove Edges');
model.geom('geom1').feature('pi1').setEntry('selkeepedg', 'pi1_sel1', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetoedg', 'pi1_sel1', 'csel7');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', true);
model.geom.load({'part2'}, 'Mixer_Module/Shafts/impeller_shaft.mph', {'part1'});
model.geom('geom1').run('pi1');
model.geom('geom1').create('pi2', 'PartInstance');
model.geom('geom1').feature('pi2').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi2').set('part', 'part2');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'hp_im', '-blade_width*sin(alpha)/2');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'd_is', 'shaft_diameter');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'l_is', 'H-C');
model.geom('geom1').feature('pi2').setEntry('selkeepobj', 'pi2_csel1', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetoobj', 'pi2_csel1', 'csel1');
model.geom('geom1').feature('pi2').setEntry('selkeepbnd', 'pi2_cylsel1', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetobnd', 'pi2_cylsel1', 'none');
model.geom('geom1').feature('pi2').setEntry('selkeepbnd', 'pi2_csel1.bnd', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetobnd', 'pi2_csel1.bnd', 'csel4');
model.geom('geom1').feature('pi2').setEntry('selkeepedg', 'pi2_sel1', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetoedg', 'pi2_sel1', 'csel7');
model.geom('geom1').feature('pi2').setEntry('selkeepedg', 'pi2_csel1.edg', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetoedg', 'pi2_csel1.edg', 'none');
model.geom('geom1').feature('pi2').set('selkeepnoncontr', true);
model.geom.load({'part3'}, 'Mixer_Module/Tanks/dished_bottom_tank.mph', {'part1'});
model.geom('geom1').run('pi2');
model.geom('geom1').create('pi3', 'PartInstance');
model.geom('geom1').feature('pi3').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi3').set('part', 'part3');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'n_ba', 'B');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'w_ba', 'bw');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'd_im', 'Da');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'd_ta', 'T');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'h_ta', 'H');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'hp_ta', '-C');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'rm_b_ta', 'T/10');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'bo_rd_ta', 'T*2');
model.geom('geom1').selection.create('csel8', 'CumulativeSelection');
model.geom('geom1').selection('csel8').label('Interior Wall');
model.geom('geom1').selection.create('csel9', 'CumulativeSelection');
model.geom('geom1').selection('csel9').label('Symmetry');
model.geom('geom1').feature('pi3').setEntry('selkeepobj', 'pi3_csel7', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetoobj', 'pi3_csel7', 'none');
model.geom('geom1').feature('pi3').setEntry('selkeepobj', 'pi3_csel1', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetoobj', 'pi3_csel1', 'csel2');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_sel5', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_sel5', 'csel5');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_unisel2', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_unisel2', 'none');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_csel7.bnd', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_csel7.bnd', 'csel8');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_csel1.bnd', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_csel1.bnd', 'none');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_csel2.bnd', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_csel2.bnd', 'csel9');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_csel3.bnd', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_csel3.bnd', 'none');
model.geom('geom1').feature('pi3').set('selkeepnoncontr', true);
model.geom('geom1').run('pi3');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').label('Rotating Fluid Domain');
model.geom('geom1').feature('dif1').selection('input').named('csel2');
model.geom('geom1').feature('dif1').selection('input2').named('csel1');
model.geom('geom1').feature('dif1').set('repairtoltype', 'relative');
model.geom('geom1').feature('dif1').set('selresult', true);
model.geom('geom1').feature('dif1').set('selresultshow', 'all');
model.geom('geom1').run('dif1');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('pos', [0.2 -0.2 -0.5]);
model.geom('geom1').feature('blk1').set('rot', 45);
model.geom('geom1').feature.duplicate('blk2', 'blk1');
model.geom('geom1').feature('blk2').set('pos', [-0.2 -0.2 -0.5]);
model.geom('geom1').run('blk2');
model.geom('geom1').create('dif2', 'Difference');
model.geom('geom1').feature('dif2').selection('input').set({'dif1'});
model.geom('geom1').feature('dif2').selection('input2').set({'blk1' 'blk2'});
model.geom('geom1').run('dif2');
model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').label('Flat Pressure Point');
model.geom('geom1').feature('sel1').selection('selection').init(0);
model.geom('geom1').feature('sel1').selection('selection').set('dif2', 19);
model.geom('geom1').selection.create('csel10', 'CumulativeSelection');
model.geom('geom1').selection('csel10').label('Pressure Point Constraint');
model.geom('geom1').feature('sel1').set('contributeto', 'csel10');
model.geom('geom1').run('fin');
model.geom('geom1').create('ige1', 'IgnoreEdges');
model.geom('geom1').feature('ige1').selection('input').named('csel7');
model.geom('geom1').run('ige1');
model.geom('geom1').create('mcf1', 'MeshControlFaces');
model.geom('geom1').feature('mcf1').selection('input').named('csel6');
model.geom('geom1').run('mcf1');

model.title(['Turbulent Modular Mixer ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Template File']);

model.description('This example is a template MPH-file used by the turbulent cases (k-epsilon and k-omega turbulence models) of the Modular Mixer models. The geometry is a combination of a pitched blade impeller and a dished bottom tank. The geometry subsequences to build the impeller and vessel are imported from the Part Libraries.');

model.label('modular_mixer_turbulent_geom.mph');

model.physics.create('spf', 'TurbulentFlowkeps', 'geom1');
model.physics('spf').model('comp1');

model.common.create('rot1', 'RotatingDomain', 'comp1');
model.common('rot1').set('rotationType', 'rotationalVelocity');
model.common('rot1').set('rotationalVelocityExpression', 'generalRevolutionsPerTime');
model.common('rot1').selection.all;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water, liquid');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');

model.physics('spf').create('iwbc1', 'InteriorWallBC', 2);
model.physics('spf').feature('iwbc1').selection.named('geom1_csel3_bnd');
model.physics('spf').create('iwbc2', 'InteriorWallBC', 2);
model.physics('spf').feature('iwbc2').selection.named('geom1_csel8_bnd');
model.physics('spf').create('sym1', 'Symmetry', 2);
model.physics('spf').feature('sym1').selection.named('geom1_csel9_bnd');
model.physics('spf').create('pfc1', 'PeriodicFlowCondition', 2);
model.physics('spf').feature('pfc1').selection.set([2 6 22 23]);
model.physics('spf').create('prpc1', 'PressurePointConstraint', 0);
model.physics('spf').feature('prpc1').selection.named('geom1_csel10_pnt');

model.common('rot1').selection.named('geom1_pi3_csel4_dom');
model.common('rot1').set('revolutionsPerTime', '20[rpm]');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('tau_riw', 'x*(spf.T_stress_uy+spf.T_stress_dy)-y*(spf.T_stress_ux+spf.T_stress_dx)');
model.variable('var1').descr('tau_riw', 'Torque per area (interior walls)');
model.variable('var1').set('tau_rw', 'x*(spf.T_stressy)-y*(spf.T_stressx)');
model.variable('var1').descr('tau_rw', 'Torque per area (rotating walls)');
model.variable('var1').set('P_riw', 'tau_riw*rot1.alphat');
model.variable('var1').descr('P_riw', 'Power draw per area (rotating interior walls)');
model.variable('var1').set('P_rw', 'tau_rw*rot1.alphat');
model.variable('var1').descr('P_rw', 'Power draw per area (rotating walls)');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.named('geom1_csel3_bnd');
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').selection.geom('geom1', 2);
model.cpl('intop2').selection.named('geom1_csel4_bnd');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 0.02);

model.view('view5').set('renderwireframe', true);

model.mesh('mesh1').feature('size1').selection.set([1 15 16 25]);
model.mesh('mesh1').run('size1');
model.mesh('mesh1').create('size2', 'Size');
model.mesh('mesh1').feature('size2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('size2').selection.set([3 17]);
model.mesh('mesh1').feature('size2').set('table', 'cfd');
model.mesh('mesh1').feature('size2').set('hauto', 4);
model.mesh('mesh1').feature('size2').set('custom', true);
model.mesh('mesh1').run('size2');
model.mesh('mesh1').create('size3', 'Size');
model.mesh('mesh1').feature('size3').selection.geom('geom1', 3);
model.mesh('mesh1').feature('size3').selection.set([3]);
model.mesh('mesh1').feature('size3').set('table', 'cfd');
model.mesh('mesh1').feature('size3').set('hauto', 3);
model.mesh('mesh1').feature('size3').set('custom', true);
model.mesh('mesh1').feature('size3').set('hmaxactive', true);
model.mesh('mesh1').feature('size3').set('hmax', 0.0114);
model.mesh('mesh1').feature('size3').set('hminactive', true);
model.mesh('mesh1').feature('size3').set('hmin', 0.00123);
model.mesh('mesh1').feature('size3').set('hgradactive', true);
model.mesh('mesh1').feature('size3').set('hgrad', 1.08);
model.mesh('mesh1').create('size4', 'Size');
model.mesh('mesh1').feature('size4').selection.geom('geom1', 2);
model.mesh('mesh1').feature('size4').selection.set([9]);

model.view('view6').set('renderwireframe', true);

model.mesh('mesh1').feature('size4').set('table', 'cfd');
model.mesh('mesh1').feature('size4').set('hauto', 2);
model.mesh('mesh1').run;

model.study.create('std1');
model.study('std1').create('frrot', 'FrozenRotor');
model.study('std1').feature('frrot').set('solnum', 'auto');
model.study('std1').feature('frrot').set('notsolnum', 'auto');
model.study('std1').feature('frrot').set('outputmap', {});
model.study('std1').feature('frrot').set('ngenAUX', '1');
model.study('std1').feature('frrot').set('goalngenAUX', '1');
model.study('std1').feature('frrot').set('ngenAUX', '1');
model.study('std1').feature('frrot').set('goalngenAUX', '1');
model.study('std1').feature('frrot').setSolveFor('/physics/spf', true);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'frrot');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'frrot');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables ()');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_k' 'comp1_ep'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.45);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, turbulence variables (spf)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'i2');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Turbulence Variables');
model.sol('sol1').feature('s1').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s1').feature('se1').set('subinitcfl', 3);
model.sol('sol1').feature('s1').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s1').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s1').feature('se1').set('subkdpid', 0.15);
model.sol('sol1').feature('s1').feature('se1').set('subkipid', 0.15);
model.sol('sol1').feature('s1').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s1').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s1').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s1').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s1').feature('se1').set('maxsegiter', 400);
model.sol('sol1').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.k 0 comp1.ep 0 ');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables ()');
model.sol('sol1').feature('s1').create('d2', 'Direct');
model.sol('sol1').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d2').label('Direct, turbulence variables (spf)');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Velocity (spf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('slc1', 'Slice');
model.result('pg1').feature('slc1').label('Slice');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('smooth', 'internal');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'none');
model.result.dataset.create('surf2', 'Surface');
model.result.dataset('surf2').label('Interior Walls');
model.result.dataset('surf2').set('data', 'none');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([1 3 10 11 12 13 14 16 17]);
model.result.dataset('surf2').set('data', 'dset1');
model.result.dataset('surf2').selection.geom('geom1', 2);
model.result.dataset('surf2').selection.set([9 15]);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Pressure (spf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond2/pg4');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('data', 'surf1');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('expr', 'p');
model.result('pg2').feature('surf1').set('colortable', 'Dipole');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'surf1');
model.result('pg2').feature('surf1').feature.create('tran1', 'Transparency');
model.result('pg2').feature.create('slit1', 'SurfaceSlit');
model.result('pg2').feature('slit1').set('data', 'surf2');
model.result('pg2').feature('slit1').set('showsolutionparams', 'on');
model.result('pg2').feature('slit1').set('upexpr', 'up(p)');
model.result('pg2').feature('slit1').set('downexpr', 'down(p)');
model.result('pg2').feature('slit1').set('titletype', 'none');
model.result('pg2').feature('slit1').set('smooth', 'internal');
model.result('pg2').feature('slit1').set('showsolutionparams', 'on');
model.result('pg2').feature('slit1').set('data', 'surf2');
model.result('pg2').feature('slit1').set('inheritplot', 'surf1');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Wall Resolution (spf)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond2/pg3');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Wall Resolution');
model.result('pg3').feature('surf1').set('data', 'surf1');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'spf.Delta_wPlus');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'surf1');
model.result('pg3').feature.create('slit1', 'SurfaceSlit');
model.result('pg3').feature('slit1').label('Wall Resolution, Interior Walls');
model.result('pg3').feature('slit1').set('data', 'surf2');
model.result('pg3').feature('slit1').set('showsolutionparams', 'on');
model.result('pg3').feature('slit1').set('upexpr', 'spf.Delta_wPlus_u');
model.result('pg3').feature('slit1').set('downexpr', 'spf.Delta_wPlus_d');
model.result('pg3').feature('slit1').set('smooth', 'internal');
model.result('pg3').feature('slit1').set('showsolutionparams', 'on');
model.result('pg3').feature('slit1').set('data', 'surf2');
model.result('pg3').feature('slit1').set('inheritplot', 'surf1');
model.result('pg1').run;
model.result.dataset.create('cpl1', 'CutPlane');
model.result.dataset('cpl1').set('planetype', 'general');
model.result.dataset('cpl1').setIndex('genpoints', -0.2, 0, 0);
model.result.dataset('cpl1').setIndex('genpoints', -0.2, 0, 1);
model.result.dataset('cpl1').setIndex('genpoints', -0.2, 1, 0);
model.result.dataset('cpl1').setIndex('genpoints', -0.2, 1, 1);
model.result.dataset('cpl1').setIndex('genpoints', 0.2, 1, 2);
model.result.dataset('cpl1').setIndex('genpoints', 0, 2, 1);
model.result.dataset.create('cpl2', 'CutPlane');
model.result('pg2').run;
model.result('pg2').feature('surf1').set('coloring', 'uniform');
model.result('pg2').feature('surf1').set('color', 'gray');
model.result('pg2').run;
model.result('pg2').feature('surf1').feature.remove('tran1');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature.remove('slit1');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').label('Velocity: Magnitude and Vectors');
model.result('pg2').create('surf2', 'Surface');
model.result('pg2').feature('surf2').set('data', 'cpl1');
model.result('pg2').feature('surf2').set('colortable', 'RainbowLight');
model.result('pg2').run;
model.result('pg2').create('arws1', 'ArrowSurface');
model.result('pg2').feature('arws1').set('data', 'cpl2');
model.result('pg2').feature('arws1').set('expr', {'0' 'v' 'w'});
model.result('pg2').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg2').feature('arws1').set('scaleactive', true);
model.result('pg2').feature('arws1').set('scale', 0.26);
model.result('pg2').feature('arws1').set('arrowcount', 500);
model.result('pg2').feature('arws1').set('color', 'white');
model.result('pg2').run;
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Velocity: magnitude and in-plane vectors');
model.result('pg2').set('view', 'view6');
model.result('pg2').run;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Torque');
model.result.numerical('gev1').setIndex('expr', '4*abs(intop1(tau_riw)+intop2(tau_rw))', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Torque');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').label('Power Draw');
model.result.numerical('gev2').setIndex('expr', '4*abs(intop1(P_riw)+intop2(P_rw))', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Power Draw');
model.result.numerical('gev2').set('table', 'tbl2');
model.result.numerical('gev2').setResult;
model.result('pg2').run;

model.title(['Modular Mixer ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Turbulent Mixing (k-epsilon)']);

model.description(['This example is built from a supplied geometry model file which contains geometry parts to build baffled flat and dished bottom mixers with either a pitched blade impeller or a Rushton turbine. The model features a simulation of turbulent flow in a dished bottom vessel with a pitched blade impeller using the k-epsilon model.' newline  newline 'The example uses the Frozen Rotor simulation method, for which the rotating parts are kept frozen in position together with the vessel wall and baffles, and the rotation is accounted for by the inclusion of centrifugal and Coriolis forces.']);

model.label('modular_mixer_ke.mph');

model.modelNode.label('Components');

out = model;
