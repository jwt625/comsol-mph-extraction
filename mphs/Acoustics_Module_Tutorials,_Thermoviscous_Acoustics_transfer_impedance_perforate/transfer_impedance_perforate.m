function out = model
%
% transfer_impedance_perforate.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Tutorials,_Thermoviscous_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ta', 'ThermoacousticsSinglePhysics', 'geom1');
model.physics('ta').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/ta', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('a', '0.3[mm]', 'Orifice radius');
model.param.set('tp', '1[mm]', 'Plate thickness');
model.param.set('Lx', '1.4[mm]', 'Hole to hole x-distance');
model.param.set('Ly', '2[mm]', 'Hole to hole y-distance');
model.param.set('Lz', '1[mm]', 'Air layer thickness');
model.param.set('fmin', '20[Hz]', 'Minimum study frequency');
model.param.set('fmax', '20000[Hz]', 'Maximum study frequency');
model.param.set('dvisc', '220[um]*sqrt(100[Hz]/fmax)', 'Minimum viscous boundary layer thickness');
model.param.set('sigma', 'a^2*pi/(Lx*Ly)', 'Porosity');
model.param.set('c0', '343[m/s]', 'Speed of sound');
model.param.set('rho0', '1.2[kg/m^3]', 'Density');
model.param.set('p0', '1[Pa]', 'Incoming mode');

model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').set('r', 'a');
model.geom('geom1').feature('cyl1').set('h', 'tp');
model.geom('geom1').feature('cyl1').set('pos', {'0' '0' '-tp/2'});
model.geom('geom1').feature('cyl1').set('layerside', false);
model.geom('geom1').feature('cyl1').set('layerbottom', true);
model.geom('geom1').feature('cyl1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('cyl1').setIndex('layer', 'tp/2', 0);
model.geom('geom1').run('cyl1');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'Lx/2' 'Ly/2' '2*Lz+tp'});
model.geom('geom1').feature('blk1').set('pos', {'0' '0' '-Lz-tp/2'});
model.geom('geom1').feature('blk1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('blk1').setIndex('layer', 'Lz', 0);
model.geom('geom1').feature('blk1').set('layertop', true);
model.geom('geom1').run('blk1');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'blk1' 'cyl1'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').init(3);
model.geom('geom1').feature('del1').selection('input').set('uni1', [1 2 7]);
model.geom('geom1').runPre('fin');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('Ztrans', '(intop_in(ta.p_t)-intop_out(ta.p_t))/intop_mid(w)/(rho0*c0)', 'Transfer impedance (COMSOL, normalized)');
model.variable('var1').set('Zn', '(intop_in(ta.p_t)/intop_in(ta.u_tz))/(c0*rho0)', 'Surface normal impedance (normalized)');
model.variable('var1').set('R', 'ta.port1.P_out/ta.port1.P_in', 'Reflection coefficient');
model.variable('var1').set('alpha', '1-abs(R)^2', 'Absorption coefficient');
model.variable('var1').set('ks', 'sqrt(-ta.rho0*ta.iomega/ta.mu)', 'Shear wave number (viscous)');
model.variable('var1').set('Z1', 'ta.iomega/(c0*sigma*(1-2/(ks*a)*besselj(1,ks*a)/besselj(0,ks*a)))', 'Cylinder impedance expression (linear contribution)');
model.variable('var1').set('EC', '16*a/(3*pi)*(1-1.4092*sigma^(1/2)+0.33818*sigma^(3/2)+0.06793*sigma^(5/2)-0.02287*sigma^(6/2)+0.03015*sigma^(7/2)-0.01641*sigma^(8/2))', 'End correction and hole-hole interaction (Fok function)');
model.variable('var1').set('Cd', '0.76', 'Discharge coefficient');
model.variable('var1').set('U', 'intop_mid(w)/intop_mid(1)', 'Average velocity in orifice');
model.variable('var1').set('Z2', '(1.2*(1-sigma^2))/(2*c0*(sigma*Cd)^2)*sqrt(0.5*U*conj(U))', 'Nonlinear contribution to the impedance');
model.variable('var1').set('Ztrans_ana', '((tp+EC)*Z1+Z2)', 'Transfer impedance (analytical, normalized)');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);

model.view('view1').set('renderwireframe', true);

model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.set([6 15]);
model.cpl('intop1').set('opname', 'intop_in');
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').selection.geom('geom1', 2);
model.cpl('intop2').selection.set([12 17]);
model.cpl('intop2').set('opname', 'intop_out');
model.cpl.create('intop3', 'Integration', 'geom1');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').selection.geom('geom1', 2);
model.cpl('intop3').selection.set([9]);
model.cpl('intop3').set('opname', 'intop_mid');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Symmetry');
model.selection('sel1').geom(2);
model.selection('sel1').set('groupcontang', true);
model.selection('sel1').add([1 2 4 5 7 8 10 11 18 19 20 21]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Wall');
model.selection('sel2').geom(2);
model.selection('sel2').set([14 15 16 17]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('ta').create('sym1', 'Symmetry', 2);
model.physics('ta').feature('sym1').selection.named('sel1');
model.physics('ta').create('port1', 'Port', 2);
model.physics('ta').feature('port1').selection.set([3]);
model.physics('ta').feature('port1').set('PortType', 'PlaneWave');
model.physics('ta').feature('port1').set('pamp', 'p0');
model.physics('ta').create('port2', 'Port', 2);
model.physics('ta').feature('port2').selection.set([13]);
model.physics('ta').feature('port2').set('PortType', 'PlaneWave');

model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([2 3]);
model.mesh('mesh1').feature('swe1').create('size1', 'Size');
model.mesh('mesh1').feature('swe1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmax', 'a/6');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'a');
model.mesh('mesh1').feature('size').set('hmin', 'dvisc/2');
model.mesh('mesh1').feature('size').set('hgrad', 1.3);
model.mesh('mesh1').feature('size').set('hnarrow', 4);
model.mesh('mesh1').run;
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(3);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('bl1').selection.set([2 3]);
model.mesh('mesh1').feature('bl1').set('smoothtransition', false);
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([14 16]);
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 4);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', '0.4*dvisc');
model.mesh('mesh1').run('bl1');
model.mesh('mesh1').create('swe2', 'Sweep');
model.mesh('mesh1').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('swe2').feature('dis1').set('elemcount', 8);
model.mesh('mesh1').feature('swe2').feature('dis1').set('elemratio', 2);
model.mesh('mesh1').feature('swe2').create('size1', 'Size');
model.mesh('mesh1').feature('swe2').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh1').feature('swe2').feature('size1').selection.set([17 21]);
model.mesh('mesh1').feature('swe2').feature('size1').set('custom', true);
model.mesh('mesh1').feature('swe2').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('swe2').feature('size1').set('hmax', 'dvisc');
model.mesh('mesh1').run('swe2');
model.mesh('mesh1').create('bl2', 'BndLayer');
model.mesh('mesh1').feature('bl2').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl2').set('smoothtransition', false);
model.mesh('mesh1').feature('bl2').feature('blp').selection.set([6 12 15 17]);
model.mesh('mesh1').feature('bl2').feature('blp').set('blnlayers', 4);
model.mesh('mesh1').feature('bl2').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl2').feature('blp').set('blhmin', '0.4*dvisc');
model.mesh('mesh1').run;

model.study('std1').feature('freq').set('plist', '{20, 25, 31.5, 40, 50, 63, 80, 100, 125, 160, 200, 250, 315, 400, 500, 630, 800, 1e3, 1.25e3, 1.6e3, 2e3, 2.5e3, 3.15e3, 4e3, 5e3, 6.3e3, 8e3, 1e4, 1.25e4, 1.6e4, 2e4}');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'{20, 25, 31.5, 40, 50, 63, 80, 100, 125, 160, 200, 250, 315, 400, 500, 630, 800, 1e3, 1.25e3, 1.6e3, 2e3, 2.5e3, 3.15e3, 4e3, 5e3, 6.3e3, 8e3, 1e4, 1.25e4, 1.6e4, 2e4}'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ta)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with Direct Precon.) (ta)');
model.sol('sol1').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_p' 'comp1_Sparam1' 'comp1_Sparam2'});
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').feature('i1').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with DD) (ta)');
model.sol('sol1').feature('s1').feature('i2').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('domdofmax', 200000);
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('userac', false);
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('usecoarse', 'aggregation');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_p' 'comp1_Sparam1' 'comp1_Sparam2'});
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s1').feature('i1').active(true);
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Acoustic Pressure (ta)');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 31, 0);
model.result('pg1').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg3');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').label('Multislice');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('colortable', 'Wave');
model.result('pg1').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').feature('mslc1').set('smooth', 'internal');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Acoustic Velocity (ta)');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 31, 0);
model.result('pg2').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg1');
model.result('pg2').feature.create('slc1', 'Slice');
model.result('pg2').feature('slc1').label('Slice');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('expr', 'ta.v_inst');
model.result('pg2').feature('slc1').set('smooth', 'internal');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('data', 'parent');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Temperature Variation (ta)');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 31, 0);
model.result('pg3').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg2');
model.result('pg3').feature.create('mslc1', 'Multislice');
model.result('pg3').feature('mslc1').label('Multislice');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('expr', 'ta.T_t');
model.result('pg3').feature('mslc1').set('colortable', 'ThermalWave');
model.result('pg3').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').feature('mslc1').set('smooth', 'internal');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('data', 'parent');
model.result('pg1').run;

model.view('view1').camera.set('zoomanglefull', 14.16778);
model.view('view1').camera.setIndex('position', -0.01681312546133995, 0);
model.view('view1').camera.setIndex('position', 0.010066915303468704, 1);
model.view('view1').camera.setIndex('position', -0.009796367958188057, 2);
model.view('view1').camera.setIndex('target', 3.499947488307953E-4, 0);
model.view('view1').camera.setIndex('target', 5.000103265047073E-4, 1);
model.view('view1').camera.setIndex('target', 3.725290298461914E-9, 2);
model.view('view1').camera.setIndex('up', 0.3146231472492218, 0);
model.view('view1').camera.setIndex('up', 0.8932512998580933, 1);
model.view('view1').camera.setIndex('up', -0.3211120069026947, 2);
model.view('view1').camera.setIndex('viewoffset', -0.06300516426563263, 0);
model.view('view1').camera.setIndex('viewoffset', 0.004488848149776459, 1);

model.result('pg1').run;
model.result('pg1').feature('mslc1').set('colorscalemode', 'linear');
model.result('pg1').feature('mslc1').set('xnumber', '2');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 14, 0);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').feature('mslc1').set('xnumber', '2');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 14, 0);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Transfer Impedance');
model.result('pg4').set('titletype', 'none');
model.result('pg4').set('xlabelactive', true);
model.result('pg4').set('xlabel', 'f (Hz)');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'Transfer Impedance (1)');
model.result('pg4').set('xlog', true);
model.result('pg4').set('ylog', true);
model.result('pg4').set('legendpos', 'upperleft');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').setIndex('expr', 'real(Ztrans)', 0);
model.result('pg4').feature('glob1').setIndex('unit', 1, 0);
model.result('pg4').feature('glob1').setIndex('descr', 'COMSOL model (real)', 0);
model.result('pg4').feature('glob1').setIndex('expr', 'imag(Ztrans)', 1);
model.result('pg4').feature('glob1').setIndex('unit', 1, 1);
model.result('pg4').feature('glob1').setIndex('descr', 'COMSOL model (imag)', 1);
model.result('pg4').feature('glob1').setIndex('expr', 'abs(Ztrans)', 2);
model.result('pg4').feature('glob1').setIndex('unit', 1, 2);
model.result('pg4').feature('glob1').setIndex('descr', 'COMSOL model (abs)', 2);
model.result('pg4').feature('glob1').set('linestyle', 'cycle');
model.result('pg4').feature('glob1').set('linecolor', 'blue');
model.result('pg4').run;
model.result('pg4').create('ptgr1', 'PointGraph');
model.result('pg4').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg4').feature('ptgr1').set('linewidth', 'preference');
model.result('pg4').feature('ptgr1').selection.set([5]);
model.result('pg4').feature('ptgr1').set('expr', 'real(Ztrans_ana)');
model.result('pg4').feature('ptgr1').set('linecolor', 'red');
model.result('pg4').feature('ptgr1').set('legend', true);
model.result('pg4').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg4').feature('ptgr1').setIndex('legends', 'Semianalytical model (real)', 0);
model.result('pg4').run;
model.result('pg4').create('ptgr2', 'PointGraph');
model.result('pg4').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg4').feature('ptgr2').set('linewidth', 'preference');
model.result('pg4').feature('ptgr2').selection.set([5]);
model.result('pg4').feature('ptgr2').set('expr', 'imag(Ztrans_ana)');
model.result('pg4').feature('ptgr2').set('linestyle', 'dotted');
model.result('pg4').feature('ptgr2').set('linecolor', 'red');
model.result('pg4').feature('ptgr2').set('legend', true);
model.result('pg4').feature('ptgr2').set('legendmethod', 'manual');
model.result('pg4').feature('ptgr2').setIndex('legends', 'Semianalytical model (imag)', 0);
model.result('pg4').run;
model.result('pg4').create('ptgr3', 'PointGraph');
model.result('pg4').feature('ptgr3').set('markerpos', 'datapoints');
model.result('pg4').feature('ptgr3').set('linewidth', 'preference');
model.result('pg4').feature('ptgr3').selection.set([5]);
model.result('pg4').feature('ptgr3').set('expr', 'abs(Ztrans_ana)');
model.result('pg4').feature('ptgr3').set('linestyle', 'dashed');
model.result('pg4').feature('ptgr3').set('linecolor', 'red');
model.result('pg4').feature('ptgr3').set('legend', true);
model.result('pg4').feature('ptgr3').set('legendmethod', 'manual');
model.result('pg4').feature('ptgr3').setIndex('legends', 'Semianalytical model (abs)', 0);
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Surface Normal Impedance');
model.result('pg5').set('titletype', 'label');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'f (Hz)');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Surface normal impedance (1)');
model.result('pg5').set('xlog', true);
model.result('pg5').set('showlegends', false);
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').setIndex('expr', 'abs(Zn)', 0);
model.result('pg5').feature('glob1').setIndex('unit', 1, 0);
model.result('pg5').feature('glob1').setIndex('descr', '', 0);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Absorption coefficient');
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'f (Hz)');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'Absorption coefficient (1)');
model.result('pg6').set('xlog', true);
model.result('pg6').set('showlegends', false);
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').setIndex('expr', 'alpha', 0);
model.result('pg6').feature('glob1').setIndex('unit', 1, 0);
model.result('pg6').feature('glob1').setIndex('descr', '', 0);
model.result('pg6').run;
model.result.dataset.create('mir1', 'Mirror3D');
model.result.dataset.create('mir2', 'Mirror3D');
model.result.dataset('mir2').set('data', 'mir1');
model.result.dataset('mir2').set('quickplane', 'xz');
model.result.dataset.create('mir3', 'Mirror3D');
model.result.dataset('mir3').set('data', 'mir2');
model.result.dataset('mir3').set('planetype', 'general');
model.result.dataset('mir3').set('genmethod', 'pointnormal');
model.result.dataset('mir3').set('genpnpoint', {'Lx/2' '0' '0'});
model.result.dataset('mir3').set('genpnvec', [1 0 0]);
model.result.dataset.create('mir4', 'Mirror3D');
model.result.dataset('mir4').set('data', 'mir3');
model.result.dataset('mir4').set('planetype', 'general');
model.result.dataset('mir4').set('genmethod', 'pointnormal');
model.result.dataset('mir4').set('genpnpoint', {'0' 'Ly/2' '0'});
model.result.dataset('mir4').set('genpnvec', [0 1 0]);
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').label('Mirror Plot: Velocity');
model.result('pg7').set('data', 'mir4');
model.result('pg7').setIndex('looplevel', 14, 0);
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').create('slc1', 'Slice');
model.result('pg7').feature('slc1').set('expr', 'ta.v_inst');
model.result('pg7').feature('slc1').set('quickxnumber', 2);
model.result('pg7').run;

model.title('Transfer Impedance of a Perforate');

model.description(['Perforates are plates with a distribution of small perforations or holes. They are used in muffler systems, sound absorbing panels, and in many other places as liners, where it is important to control attenuation precisely. As the perforations become smaller and smaller, viscous and thermal losses become more important. The attenuation behavior, which is also frequency dependent, can be controlled by selecting the perforate size and distribution in a plate.' newline  newline 'While perforates have been theoretically studied for many years, analytical or semianalytical models can only be applied for simple geometries. A numerical approach is necessary for systems where the holes have various cross sections, if the perforations are tapered, or if the distribution of holes is uneven.' newline  newline 'In this tutorial model, the effects are modeled in detail using the Thermoviscous Acoustics, Frequency Domain interface. While nonlinear loss mechanisms occur at high sound levels or in the presence of a flow (through or over the perforate), only the linear effects due to viscosity and thermal conduction are studied in this tutorial model. The transfer impedance, surface normal impedance, and attenuation coefficient of the system are determined.' newline  newline 'The transfer impedance is compared to a semianalytical model. You can apply the transfer impedance that is calculated in this detailed model to a larger system simulation using the interior impedance condition that exists in the Pressure Acoustics, Frequency Domain interface.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('transfer_impedance_perforate.mph');

model.modelNode.label('Components');

out = model;
