function out = model
%
% car_door.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Electrodeposition_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('cd', 'PrimaryCurrentDistribution', 'geom1');
model.physics('cd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/cd', true);

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'car_door.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', [1 1 0.7]);
model.geom('geom1').feature('blk1').set('pos', [-0.1 -0.03 0]);
model.geom('geom1').run('blk1');
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').set('r', 0.05);
model.geom('geom1').feature('cyl1').set('pos', [-0.1 -0.03 0.7]);
model.geom('geom1').feature('cyl1').set('axistype', 'y');
model.geom('geom1').run('cyl1');
model.geom('geom1').create('arr1', 'Array');
model.geom('geom1').feature('arr1').selection('input').set({'cyl1'});
model.geom('geom1').feature('arr1').set('fullsize', [3 1 1]);
model.geom('geom1').feature('arr1').set('displ', [0.5 0 0]);
model.geom('geom1').run('arr1');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'arr1' 'blk1'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').init(3);
model.geom('geom1').feature('del1').selection('input').set('uni1', [1 3 4 5 6 7]);
model.geom('geom1').run('del1');
model.geom('geom1').create('rot1', 'Rotate');
model.geom('geom1').feature('rot1').selection('input').set({'del1' 'imp1'});
model.geom('geom1').feature('rot1').set('rot', 90);
model.geom('geom1').feature('rot1').set('axistype', 'x');
model.geom('geom1').feature('fin').set('repairtoltype', 'relative');
model.geom('geom1').run('fin');

model.view('view1').set('transparency', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('sigma', '0.28[S/m]', 'Electrolyte conductivity');
model.param.set('E_cell', '250[V]', 'Cell voltage');
model.param.set('Ccap', '6e-5[kg/(s*A)]', 'Coulombic capacity');
model.param.set('rho', '1500[kg/m^3]', 'Paint density');
model.param.set('R_film', '5.0e8[ohm*cm]', 'Resistivity of paint film');
model.param.set('Meff', 'Ccap*F_const', 'Effective molar mass');
model.param.set('Eeq_O2', '1.23[V]', 'Equilibrium potential, O2 reaction vs hydrogen');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(2);
model.selection('sel1').set([2 33 34 84]);
model.selection('sel1').label('Anodes');
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').geom(2);
model.selection('sel2').set([7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 29 30 31 32 36 37 38 39 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 79 80 81 82 83]);
model.selection('sel2').label('Cathode');

model.physics('cd').feature('ice1').set('sigmal_mat', 'userdef');
model.physics('cd').feature('ice1').set('sigmal', {'sigma' '0' '0' '0' 'sigma' '0' '0' '0' 'sigma'});
model.physics('cd').create('es1', 'ElectrodeSurface', 2);
model.physics('cd').feature('es1').selection.named('sel1');
model.physics('cd').feature('es1').set('phisext0', 'E_cell');
model.physics('cd').feature('es1').feature('er1').set('Eeq', 'Eeq_O2');
model.physics('cd').create('tes1', 'ThinElectrodeSurface', 2);
model.physics('cd').feature('tes1').selection.named('sel2');
model.physics('cd').feature('tes1').setIndex('Species', 's1', 0, 0);
model.physics('cd').feature('tes1').setIndex('rhos', 8960, 0, 0);
model.physics('cd').feature('tes1').setIndex('Ms', 0.06355, 0, 0);
model.physics('cd').feature('tes1').setIndex('Species', 's1', 0, 0);
model.physics('cd').feature('tes1').setIndex('rhos', 8960, 0, 0);
model.physics('cd').feature('tes1').setIndex('Ms', 0.06355, 0, 0);
model.physics('cd').feature('tes1').setIndex('rhos', 'rho', 0, 0);
model.physics('cd').feature('tes1').setIndex('Ms', 'Meff', 0, 0);
model.physics('cd').feature('tes1').set('FilmResistanceType', 'ThicknessAndConductivity');
model.physics('cd').feature('tes1').set('sf0', '0.1[um]');
model.physics('cd').feature('tes1').set('sigmaf', '1/R_film');
model.physics('cd').feature('tes1').set('dsf_up_src', 'root.comp1.cd.sbtotu');
model.physics('cd').feature('tes1').set('dsf_down_src', 'root.comp1.cd.sbtotd');
model.physics('cd').feature('tes1').set('BoundaryConditionType', 'CurrentDensity');
model.physics('cd').feature('tes1').feature('er1').setIndex('Vib', 1, 0, 0);

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('hauto', 4);
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftet1').feature('size1').selection.set([7]);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hauto', 3);
model.mesh('mesh1').run;

model.view('view1').set('transparency', false);

model.study('std1').feature('time').set('tlist', 'range(0,5,120)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,5,120)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventout', true);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').label('Direct (cd)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('Algebraic Multigrid (cd)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_phil_lm'});
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_phil_lm'});
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').create('i2', 'Iterative');
model.sol('sol1').feature('t1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i2').label('Geometric Multigrid (cd)');
model.sol('sol1').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_phil_lm'});
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_phil_lm'});
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 25, 0);
model.result('pg1').label('Electrolyte Potential (cd)');
model.result('pg1').create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('expr', {'phil'});
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').set('expr', {'cd.Ilx' 'cd.Ily' 'cd.Ilz'});
model.result('pg1').feature('str1').set('posmethod', 'start');
model.result('pg1').feature('str1').set('pointtype', 'arrow');
model.result('pg1').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg1').feature('str1').set('color', 'gray');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 25, 0);
model.result('pg2').label('Electrolyte Current Density (cd)');
model.result('pg2').create('str1', 'Streamline');
model.result('pg2').feature('str1').set('expr', {'cd.Ilx' 'cd.Ily' 'cd.Ilz'});
model.result('pg2').feature('str1').set('posmethod', 'start');
model.result('pg2').feature('str1').set('pointtype', 'arrow');
model.result('pg2').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg2').feature('str1').set('color', 'gray');
model.result('pg2').feature('str1').create('col1', 'Color');
model.result('pg2').feature('str1').feature('col1').set('expr', 'root.comp1.cd.IlMag');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'abs(cd.itot)'});
model.result('pg2').feature('surf1').set('inheritplot', 'str1');
model.result('pg2').create('slit1', 'SurfaceSlit');
model.result('pg2').feature('slit1').set('upexpr', 'abs(root.comp1.cd.itotu)');
model.result('pg2').feature('slit1').set('downexpr', 'abs(root.comp1.cd.itotd)');
model.result('pg2').feature('slit1').set('inheritplot', 'str1');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 25, 0);
model.result('pg3').label('Electrode Potential with Respect to Ground (cd)');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'cd.phisext'});
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 25, 0);
model.result('pg4').label('Electrode Potential vs. Adjacent Reference (cd)');
model.result('pg4').create('str1', 'Streamline');
model.result('pg4').feature('str1').set('expr', {'cd.Ilx' 'cd.Ily' 'cd.Ilz'});
model.result('pg4').feature('str1').set('posmethod', 'start');
model.result('pg4').feature('str1').set('pointtype', 'arrow');
model.result('pg4').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg4').feature('str1').set('color', 'gray');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'cd.Evsref'});
model.result('pg4').create('slit1', 'SurfaceSlit');
model.result('pg4').feature('slit1').set('upexpr', 'root.comp1.cd.Evsrefu');
model.result('pg4').feature('slit1').set('downexpr', 'root.comp1.cd.Evsrefd');
model.result('pg4').feature('slit1').set('inheritplot', 'surf1');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 25, 0);
model.result('pg5').label('Total Electrode Thickness Change (cd)');
model.result('pg5').create('slit1', 'SurfaceSlit');
model.result('pg5').feature('slit1').set('upexpr', 'root.comp1.cd.sbtotu');
model.result('pg5').feature('slit1').set('downexpr', 'root.comp1.cd.sbtotd');
model.result('pg5').feature('slit1').set('upunit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg5').feature('slit1').set('downunit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg1').run;
model.result('pg4').run;
model.result('pg4').label('Electrode Potential vs. Adjacent Reference, All Electrodes');
model.result.duplicate('pg6', 'pg4');
model.result('pg6').run;
model.result('pg6').label('Electrode Potential vs. Adjacent Reference, Cathode Upside');
model.result('pg6').run;
model.result('pg6').feature('slit1').set('downexpr', 'root.comp1.cd.Evsrefu');
model.result('pg6').feature('slit1').set('inheritplot', 'none');
model.result('pg6').run;
model.result('pg6').feature('surf1').active(false);
model.result('pg6').run;
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Electrode Potential vs. Adjacent Reference, Cathode Downside');
model.result('pg7').run;
model.result('pg7').feature('slit1').set('upexpr', 'root.comp1.cd.Evsrefd');
model.result('pg7').feature('slit1').set('downexpr', 'root.comp1.cd.Evsrefd');
model.result('pg7').run;
model.result('pg5').run;
model.result('pg5').label('Total Film Thickness, Cathode');
model.result.duplicate('pg8', 'pg5');
model.result('pg8').run;
model.result('pg8').label('Total Film Thickness, Cathode Upside');
model.result('pg8').run;
model.result('pg8').feature('slit1').set('downexpr', 'root.comp1.cd.sbtotu');
model.result('pg8').run;
model.result('pg5').run;
model.result.duplicate('pg9', 'pg5');
model.result('pg9').run;
model.result('pg9').label('Total Film Thickness, Cathode Downside');
model.result('pg9').run;
model.result('pg9').feature('slit1').set('upexpr', 'root.comp1.cd.sbtotd');
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('Total Film Thickness Comparison');
model.result('pg10').set('ylabelactive', true);
model.result('pg10').set('ylabel', 'Total film thickness (\mu m)');
model.result('pg10').create('ptgr1', 'PointGraph');
model.result('pg10').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg10').feature('ptgr1').set('linewidth', 'preference');
model.result('pg10').feature('ptgr1').selection.set([139]);
model.result('pg10').feature('ptgr1').set('expr', 'cd.sbtotu');
model.result('pg10').feature('ptgr1').set('descr', 'Total film thickness change, up');
model.result('pg10').feature('ptgr1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg10').feature('ptgr1').set('legend', true);
model.result('pg10').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg10').feature('ptgr1').setIndex('legends', 'Upside', 0);
model.result('pg10').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg10').run;
model.result('pg10').feature('ptgr2').set('expr', 'cd.sbtotd');
model.result('pg10').feature('ptgr2').set('descr', 'Total film thickness change, down');
model.result('pg10').feature('ptgr2').setIndex('legends', 'Downside', 0);
model.result('pg10').run;
model.result('pg10').set('legendpos', 'upperleft');
model.result('pg10').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('plotgroup', 'pg9');
model.result.export('anim1').run;

model.title('Electrocoating of a Car Door');

model.description(['This example models electrocoating of paint onto a car door in a time-dependent simulation. The deposited paint is highly resistive which results in lowered local deposition rates for coated areas.' newline  newline 'A primary current distribution in combination with a film resistance is used to describe the charge transport in the electrolyte.' newline  newline 'The model is in 3D and uses an imported CAD geometry.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('car_door.mph');

model.modelNode.label('Components');

out = model;
