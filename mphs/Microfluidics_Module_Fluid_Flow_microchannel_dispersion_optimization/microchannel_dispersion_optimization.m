function out = model
%
% microchannel_dispersion_optimization.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Microfluidics_Module/Fluid_Flow');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ec', 'ConductiveMedia', 'geom1');
model.physics('ec').model('comp1');
model.physics.create('spf', 'CreepingFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics.create('tds', 'DilutedSpecies', 'geom1', {'c'});

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/ec', true);
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/physics/tds', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('r1', '50[um]', 'Inner radius');
model.param.set('r2', '150[um]', 'Outer radius');
model.param.set('L', '1000[um]', 'Rectangular channel length');
model.param.set('kk', '0.55228474', 'Bezier curve parameter');
model.param.set('RL', '200[um]', 'Recovery length');
model.param.set('IL', '700[um]', 'Integration length');
model.param.set('P1', '50[um]', 'Optimization parameter 1');
model.param.set('P2', '50[um]', 'Optimization parameter 2');
model.param.set('P3', '0.5', 'Optimization parameter 3');
model.param.set('P4', '0.5', 'Optimization parameter 4');
model.param.set('P5', '0.5', 'Optimization parameter 5');
model.param.label('Geometry parameters');
model.param.create('par2');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('V0', '20[V]', 'Electric potential');
model.param('par2').set('er_w', '80', 'Dielectric constant for water');
model.param('par2').set('ew', 'er_w*epsilon0_const', 'Permittivity of water');
model.param('par2').set('zeta', '-0.1[V]', 'Zeta potential at channel walls');
model.param('par2').set('sigma', '20[um]', 'Standard deviation of gaussian pulse');
model.param('par2').set('D', '1e-11[m^2/s]', 'Species diffusivity');
model.param('par2').set('rho0', '1000[kg/m^3]', 'Density');
model.param('par2').set('mu0', '1e-3[Pa*s]', 'Viscosity');
model.param('par2').set('L_av', '2*L+pi*(r2-r1)', 'Total average channel length');
model.param('par2').set('E_av', 'V0/L_av', 'Electric field based on avg. length');
model.param('par2').set('u_av', 'abs(ew*zeta*E_av/mu0)', 'Avg. slip velocity');
model.param('par2').set('Pe', 'u_av*(r2-r1)/D', 'Peclet number');
model.param('par2').set('Re', 'u_av*(r2-r1)*rho0/mu0', 'Reynolds number');
model.param('par2').set('xm', '-600[um]', 'Location of gaussian pulse');
model.param('par2').set('c0', '1[mol/m^3]', 'Initial peak concentration');
model.param('par2').label('Model parameters');

model.geom('geom1').create('cb1', 'CubicBezier');
model.geom('geom1').feature('cb1').setIndex('p', 'r2', 1, 0);
model.geom('geom1').feature('cb1').setIndex('p', 'kk*r2', 0, 1);
model.geom('geom1').feature('cb1').setIndex('p', 'r2', 1, 1);
model.geom('geom1').feature('cb1').setIndex('p', 'r2', 0, 2);
model.geom('geom1').feature('cb1').setIndex('p', 'kk*r2', 1, 2);
model.geom('geom1').feature('cb1').setIndex('p', 'r2', 0, 3);
model.geom('geom1').run('cb1');
model.geom('geom1').create('ls1', 'LineSegment');
model.geom('geom1').feature('ls1').set('specify1', 'coord');
model.geom('geom1').feature('ls1').set('specify2', 'coord');
model.geom('geom1').feature('ls1').set('coord1', {'r2' '0'});
model.geom('geom1').feature('ls1').set('coord2', {'P1' '0'});
model.geom('geom1').run('ls1');
model.geom('geom1').create('cb2', 'CubicBezier');
model.geom('geom1').feature('cb2').setIndex('p', 'P1', 1, 0);
model.geom('geom1').feature('cb2').setIndex('p', 'kk*P1', 0, 1);
model.geom('geom1').feature('cb2').setIndex('p', 'P1', 1, 1);
model.geom('geom1').feature('cb2').setIndex('p', 'P1', 0, 2);
model.geom('geom1').feature('cb2').setIndex('p', 'kk*P1', 1, 2);
model.geom('geom1').feature('cb2').setIndex('p', 'P1', 0, 3);
model.geom('geom1').run('cb2');
model.geom('geom1').create('cb3', 'CubicBezier');
model.geom('geom1').feature('cb3').setIndex('p', 'P1', 1, 0);
model.geom('geom1').feature('cb3').setIndex('p', '-20e-6', 0, 1);
model.geom('geom1').feature('cb3').setIndex('p', 'P1', 1, 1);
model.geom('geom1').feature('cb3').setIndex('p', '-40e-6', 0, 2);
model.geom('geom1').feature('cb3').setIndex('p', 'P2', 1, 2);
model.geom('geom1').feature('cb3').setIndex('p', '-RL', 0, 3);
model.geom('geom1').feature('cb3').setIndex('p', 'r1', 1, 3);
model.geom('geom1').feature('cb3').setIndex('w', 'P3', 0);
model.geom('geom1').feature('cb3').setIndex('w', 'P4', 1);
model.geom('geom1').feature('cb3').setIndex('w', 'P5', 2);
model.geom('geom1').run('cb3');
model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'table');
model.geom('geom1').feature('pol1').set('type', 'open');
model.geom('geom1').feature('pol1').set('source', 'vectors');
model.geom('geom1').feature('pol1').set('x', '-RL -L -L 0');
model.geom('geom1').feature('pol1').set('y', 'r1 r1 r2 r2');
model.geom('geom1').run('pol1');
model.geom('geom1').create('ccur1', 'ConvertToCurve');
model.geom('geom1').feature('ccur1').selection('input').set({'cb1' 'cb2' 'cb3' 'ls1' 'pol1'});
model.geom('geom1').run('ccur1');
model.geom('geom1').create('csol1', 'ConvertToSolid');
model.geom('geom1').feature('csol1').selection('input').set({'ccur1'});
model.geom('geom1').run('csol1');
model.geom('geom1').create('mir1', 'Mirror');
model.geom('geom1').feature('mir1').selection('input').set({'csol1'});
model.geom('geom1').feature('mir1').set('keep', true);
model.geom('geom1').feature('mir1').set('axis', [0 1]);
model.geom('geom1').run('mir1');
model.geom('geom1').create('pt1', 'Point');
model.geom('geom1').feature('pt1').setIndex('p', '-IL', 0);
model.geom('geom1').feature('pt1').setIndex('p', 'r1', 1);
model.geom('geom1').run('pt1');
model.geom('geom1').create('pt2', 'Point');
model.geom('geom1').feature('pt2').setIndex('p', '-IL', 0);
model.geom('geom1').feature('pt2').setIndex('p', 'r2', 1);
model.geom('geom1').run('pt2');
model.geom('geom1').create('pt3', 'Point');
model.geom('geom1').feature('pt3').setIndex('p', '-IL', 0);
model.geom('geom1').feature('pt3').setIndex('p', '-r2', 1);
model.geom('geom1').run('pt3');
model.geom('geom1').create('pt4', 'Point');
model.geom('geom1').feature('pt4').setIndex('p', '-IL', 0);
model.geom('geom1').feature('pt4').setIndex('p', '-r1', 1);
model.geom('geom1').run('pt4');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'2e-5' 'r2-r1'});
model.geom('geom1').feature('r1').set('pos', {'-4.5e-4' '-r2'});
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Water');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'1e-3'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'er_w'});
model.material('mat1').propertyGroup('def').set('density', {'rho0'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', {'mu0'});

model.physics('ec').create('gnd1', 'Ground', 1);
model.physics('ec').feature('gnd1').selection.set([1]);
model.physics('ec').create('pot1', 'ElectricPotential', 1);
model.physics('ec').feature('pot1').selection.set([4]);
model.physics('ec').feature('pot1').set('V0', 'V0');
model.physics('spf').create('open1', 'OpenBoundary', 1);
model.physics('spf').feature('open1').selection.set([1 4]);
model.physics('spf').feature('wallbc1').set('BoundaryCondition', 'ElectroosmoticVelocity');
model.physics('spf').feature('wallbc1').set('E_src', 'root.comp1.ec.tEx');
model.physics('spf').feature('wallbc1').set('ElectroosmoticOption', 'BuiltinExpression');
model.physics('spf').feature('wallbc1').set('zeta', 'zeta');
model.physics('spf').feature('wallbc1').set('epsilonr', 'er_w');
model.physics('tds').feature('cdm1').set('u_src', 'root.comp1.u');
model.physics('tds').feature('cdm1').set('D_c', {'D' '0' '0' '0' 'D' '0' '0' '0' 'D'});
model.physics('tds').feature('init1').setIndex('initc', 'cini', 0);
model.physics('tds').create('in1', 'Inflow', 1);
model.physics('tds').feature('in1').selection.set([4]);
model.physics('tds').feature('in1').setIndex('c0', 'cini', 0);
model.physics('tds').create('out1', 'Outflow', 1);
model.physics('tds').feature('out1').selection.set([1]);

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').label('Inner Curve');
model.cpl('intop1').selection.geom('geom1', 1);
model.cpl('intop1').selection.set([8 9 13 16 18 19 21 22]);
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').label('Outer Curve');
model.cpl('intop2').selection.geom('geom1', 1);
model.cpl('intop2').selection.set([7 10 12 15 20 23]);
model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.set([3]);
model.cpl('aveop1').label('Detector Surface');

model.func.create('gp1', 'GaussianPulse');
model.func('gp1').model('comp1');
model.func('gp1').set('location', 'xm');
model.func('gp1').set('sigma', 'sigma');
model.func('gp1').set('normalization', 'peak');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('cini', 'c0*gp1(x[1/m])*(y>0)');
model.variable('var1').descr('cini', 'Concentration Gaussian Pulse');
model.variable('var1').set('t_in', 'intop1(1/spf.U)');
model.variable('var1').descr('t_in', 'Time taken along inner curve');
model.variable('var1').set('t_out', 'intop2(1/spf.U)');
model.variable('var1').descr('t_out', 'Time taken along outer curve');
model.variable('var1').set('c_avg', 'aveop1(c)');
model.variable('var1').descr('c_avg', 'Average concentration at detector surface');

model.study('std1').label('Original Curved Channel Study');
model.study('std1').feature('stat').setEntry('activate', 'tds', false);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('tlist', 'range(0,0.1,3.5)');
model.study('std1').feature('time').setEntry('activate', 'ec', false);
model.study('std1').feature('time').setEntry('activate', 'spf', false);
model.study('std1').setGenPlots(false);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3 4]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3 4]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3 4]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').label('Direct (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.1,3.5)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.005);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, concentrations (tds)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 50);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, concentrations (tds)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').run;
model.result('pg1').label('Velocity and Electric Potential (Original Channel)');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', 'spf.U');
model.result('pg1').run;
model.result('pg1').create('con1', 'Contour');
model.result('pg1').feature('con1').set('number', 30);
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').run;
model.result('pg2').label('Concentration (Original Channel)');
model.result('pg2').setIndex('looplevel', 26, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'c');
model.result('pg2').feature('surf1').set('descr', 'Concentration');
model.result('pg2').run;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/ec', true);
model.study('std2').feature('stat').setSolveFor('/physics/spf', true);
model.study('std2').feature('stat').setSolveFor('/physics/tds', false);
model.study('std2').label('Shape Optimization Study');
model.study('std2').setGenPlots(false);
model.study('std2').create('opt', 'Optimization');
model.study('std2').feature('opt').set('optsolver', 'bobyqa');
model.study('std2').feature('opt').setIndex('optobj', 'abs(comp1.t_out-comp1.t_in)', 0);
model.study('std2').feature('opt').setIndex('descr', '', 0);
model.study('std2').feature('opt').setIndex('pname', 'c0', 0);
model.study('std2').feature('opt').setIndex('initval', '1[mol/m^3]', 0);
model.study('std2').feature('opt').setIndex('scale', 1, 0);
model.study('std2').feature('opt').setIndex('lbound', '', 0);
model.study('std2').feature('opt').setIndex('ubound', '', 0);
model.study('std2').feature('opt').setIndex('pname', 'c0', 0);
model.study('std2').feature('opt').setIndex('initval', '1[mol/m^3]', 0);
model.study('std2').feature('opt').setIndex('scale', 1, 0);
model.study('std2').feature('opt').setIndex('lbound', '', 0);
model.study('std2').feature('opt').setIndex('ubound', '', 0);
model.study('std2').feature('opt').setIndex('pname', 'D', 1);
model.study('std2').feature('opt').setIndex('initval', '1e-11[m^2/s]', 1);
model.study('std2').feature('opt').setIndex('scale', 1, 1);
model.study('std2').feature('opt').setIndex('lbound', '', 1);
model.study('std2').feature('opt').setIndex('ubound', '', 1);
model.study('std2').feature('opt').setIndex('pname', 'D', 1);
model.study('std2').feature('opt').setIndex('initval', '1e-11[m^2/s]', 1);
model.study('std2').feature('opt').setIndex('scale', 1, 1);
model.study('std2').feature('opt').setIndex('lbound', '', 1);
model.study('std2').feature('opt').setIndex('ubound', '', 1);
model.study('std2').feature('opt').setIndex('pname', 'E_av', 2);
model.study('std2').feature('opt').setIndex('initval', 'V0/L_av', 2);
model.study('std2').feature('opt').setIndex('scale', 1, 2);
model.study('std2').feature('opt').setIndex('lbound', '', 2);
model.study('std2').feature('opt').setIndex('ubound', '', 2);
model.study('std2').feature('opt').setIndex('pname', 'E_av', 2);
model.study('std2').feature('opt').setIndex('initval', 'V0/L_av', 2);
model.study('std2').feature('opt').setIndex('scale', 1, 2);
model.study('std2').feature('opt').setIndex('lbound', '', 2);
model.study('std2').feature('opt').setIndex('ubound', '', 2);
model.study('std2').feature('opt').setIndex('pname', 'er_w', 3);
model.study('std2').feature('opt').setIndex('initval', 80, 3);
model.study('std2').feature('opt').setIndex('scale', 1, 3);
model.study('std2').feature('opt').setIndex('lbound', '', 3);
model.study('std2').feature('opt').setIndex('ubound', '', 3);
model.study('std2').feature('opt').setIndex('pname', 'er_w', 3);
model.study('std2').feature('opt').setIndex('initval', 80, 3);
model.study('std2').feature('opt').setIndex('scale', 1, 3);
model.study('std2').feature('opt').setIndex('lbound', '', 3);
model.study('std2').feature('opt').setIndex('ubound', '', 3);
model.study('std2').feature('opt').setIndex('pname', 'ew', 4);
model.study('std2').feature('opt').setIndex('initval', 'er_w*epsilon0_const', 4);
model.study('std2').feature('opt').setIndex('scale', 1, 4);
model.study('std2').feature('opt').setIndex('lbound', '', 4);
model.study('std2').feature('opt').setIndex('ubound', '', 4);
model.study('std2').feature('opt').setIndex('pname', 'ew', 4);
model.study('std2').feature('opt').setIndex('initval', 'er_w*epsilon0_const', 4);
model.study('std2').feature('opt').setIndex('scale', 1, 4);
model.study('std2').feature('opt').setIndex('lbound', '', 4);
model.study('std2').feature('opt').setIndex('ubound', '', 4);
model.study('std2').feature('opt').setIndex('pname', 'P1', 0);
model.study('std2').feature('opt').setIndex('initval', '50[um]', 0);
model.study('std2').feature('opt').setIndex('scale', '50[um]', 0);
model.study('std2').feature('opt').setIndex('lbound', '50[um]', 0);
model.study('std2').feature('opt').setIndex('ubound', '130[um]', 0);
model.study('std2').feature('opt').setIndex('pname', 'P2', 1);
model.study('std2').feature('opt').setIndex('initval', '50[um]', 1);
model.study('std2').feature('opt').setIndex('scale', '50[um]', 1);
model.study('std2').feature('opt').setIndex('lbound', '50[um]', 1);
model.study('std2').feature('opt').setIndex('ubound', '130[um]', 1);
model.study('std2').feature('opt').setIndex('pname', 'P3', 2);
model.study('std2').feature('opt').setIndex('initval', 0.5, 2);
model.study('std2').feature('opt').setIndex('scale', 0.5, 2);
model.study('std2').feature('opt').setIndex('lbound', 0.01, 2);
model.study('std2').feature('opt').setIndex('ubound', 1, 2);
model.study('std2').feature('opt').setIndex('pname', 'P4', 3);
model.study('std2').feature('opt').setIndex('initval', 0.5, 3);
model.study('std2').feature('opt').setIndex('scale', 0.5, 3);
model.study('std2').feature('opt').setIndex('lbound', 0.01, 3);
model.study('std2').feature('opt').setIndex('ubound', 1, 3);
model.study('std2').feature('opt').setIndex('pname', 'P5', 4);
model.study('std2').feature('opt').setIndex('initval', 0.5, 4);
model.study('std2').feature('opt').setIndex('scale', 0.5, 4);
model.study('std2').feature('opt').setIndex('lbound', 0.01, 4);
model.study('std2').feature('opt').setIndex('ubound', 1, 4);

model.sol.create('sol3');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3 4]);

model.sol('sol3').study('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'stat');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'stat');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').create('seDef', 'Segregated');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol3').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol3').feature('s1').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('d1').label('Direct (Merged)');
model.sol('sol3').feature('s1').create('i1', 'Iterative');
model.sol('sol3').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol3').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol3').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol3').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol3').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol3').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol3').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol3').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').feature('s1').feature.remove('seDef');
model.sol('sol3').attach('std2');

model.batch.create('o1', 'Optimization');
model.batch('o1').study('std2');
model.batch('p1').study('std2');
model.batch('o1').attach('std2');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol3');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').attach('std2');
model.batch('p1').set('optimization', 'o1');
model.batch('p1').set('err', 'on');
model.batch('p1').set('control', 'opt');
model.batch('o1').set('parametricjobs', {'p1'});

model.sol.create('sol4');
model.sol('sol4').study('std2');
model.sol('sol4').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol4');
model.batch('o1').run('compute');

model.study('std2').feature('opt').set('probewindow', '');

model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').run;
model.result('pg3').label('Velocity and Electric Potential (Optimized Channel)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset3');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', 'spf.U');
model.result('pg3').feature('surf1').set('descr', 'Velocity magnitude');
model.result('pg3').run;
model.result('pg3').create('con1', 'Contour');
model.result('pg3').feature('con1').set('number', 30);
model.result('pg3').run;

model.study.create('std3');
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').setSolveFor('/physics/ec', false);
model.study('std3').feature('time').setSolveFor('/physics/spf', false);
model.study('std3').feature('time').setSolveFor('/physics/tds', true);

model.geom('geom1').run;

model.study('std3').label('Optimized Channel Verification');
model.study('std3').feature('time').set('tlist', 'range(0,0.1,3.5)');
model.study('std3').feature('time').set('usertol', true);
model.study('std3').feature('time').set('rtol', 0.001);
model.study('std3').feature('time').set('useinitsol', true);
model.study('std3').feature('time').set('initmethod', 'sol');
model.study('std3').feature('time').set('initstudy', 'std2');
model.study('std3').feature('time').set('usesol', true);
model.study('std3').feature('time').set('notsolmethod', 'sol');
model.study('std3').feature('time').set('notstudy', 'std2');
model.study('std3').setGenPlots(false);

model.sol.create('sol6');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3 4]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3 4]);

model.sol('sol6').study('std3');
model.sol('sol6').create('st1', 'StudyStep');
model.sol('sol6').feature('st1').set('study', 'std3');
model.sol('sol6').feature('st1').set('studystep', 'time');
model.sol('sol6').create('v1', 'Variables');
model.sol('sol6').feature('v1').set('control', 'time');
model.sol('sol6').create('t1', 'Time');
model.sol('sol6').feature('t1').set('tlist', 'range(0,0.1,3.5)');
model.sol('sol6').feature('t1').set('plot', 'off');
model.sol('sol6').feature('t1').set('plotgroup', 'pg1');
model.sol('sol6').feature('t1').set('plotfreq', 'tout');
model.sol('sol6').feature('t1').set('probesel', 'all');
model.sol('sol6').feature('t1').set('probes', {});
model.sol('sol6').feature('t1').set('probefreq', 'tsteps');
model.sol('sol6').feature('t1').set('rtol', 0.005);
model.sol('sol6').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol6').feature('t1').set('reacf', true);
model.sol('sol6').feature('t1').set('storeudot', true);
model.sol('sol6').feature('t1').set('endtimeinterpolation', true);
model.sol('sol6').feature('t1').set('maxorder', 2);
model.sol('sol6').feature('t1').set('stabcntrl', true);
model.sol('sol6').feature('t1').set('control', 'time');
model.sol('sol6').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol6').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol6').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol6').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol6').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol6').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol6').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol6').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol6').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol6').feature('t1').create('d1', 'Direct');
model.sol('sol6').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol6').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol6').feature('t1').feature('d1').label('Direct, concentrations (tds)');
model.sol('sol6').feature('t1').create('i1', 'Iterative');
model.sol('sol6').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol6').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol6').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol6').feature('t1').feature('i1').set('rhob', 400);
model.sol('sol6').feature('t1').feature('i1').set('maxlinit', 50);
model.sol('sol6').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol6').feature('t1').feature('i1').label('AMG, concentrations (tds)');
model.sol('sol6').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol6').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol6').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol6').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol6').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol6').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol6').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol6').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol6').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol6').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol6').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol6').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol6').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol6').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol6').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol6').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol6').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol6').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol6').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol6').feature('t1').feature.remove('fcDef');
model.sol('sol6').attach('std3');
model.sol('sol6').runAll;

model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').run;
model.result('pg4').label('Concentration (Optimized Channel)');
model.result('pg4').set('data', 'dset5');
model.result('pg4').setIndex('looplevel', 28, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'c');
model.result('pg4').feature('surf1').set('descr', 'Concentration');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Average Concentration in Detector');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').setIndex('expr', 'c_avg', 0);
model.result('pg5').feature('glob1').setIndex('unit', 'mol/m^3', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'Average concentration at detector surface', 0);
model.result('pg5').feature('glob1').set('legendmethod', 'manual');
model.result('pg5').feature('glob1').setIndex('legends', 'Original design', 0);
model.result('pg5').feature.duplicate('glob2', 'glob1');
model.result('pg5').run;
model.result('pg5').feature('glob2').set('data', 'dset5');
model.result('pg5').feature('glob2').set('titletype', 'none');
model.result('pg5').feature('glob2').setIndex('legends', 'Optimized design', 0);
model.result('pg5').run;
model.result('pg5').set('legendpos', 'upperleft');
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('plotgroup', 'pg2');
model.result.export('anim1').run;
model.result.export.create('anim2', 'Animation');
model.result.export('anim2').set('fontsize', '9');
model.result.export('anim2').set('colortheme', 'globaltheme');
model.result.export('anim2').set('customcolor', [1 1 1]);
model.result.export('anim2').set('background', 'color');
model.result.export('anim2').set('gltfincludelines', 'on');
model.result.export('anim2').set('title1d', 'on');
model.result.export('anim2').set('legend1d', 'on');
model.result.export('anim2').set('logo1d', 'on');
model.result.export('anim2').set('options1d', 'on');
model.result.export('anim2').set('title2d', 'on');
model.result.export('anim2').set('legend2d', 'on');
model.result.export('anim2').set('logo2d', 'on');
model.result.export('anim2').set('options2d', 'off');
model.result.export('anim2').set('title3d', 'on');
model.result.export('anim2').set('legend3d', 'on');
model.result.export('anim2').set('logo3d', 'on');
model.result.export('anim2').set('options3d', 'off');
model.result.export('anim2').set('axisorientation', 'on');
model.result.export('anim2').set('grid', 'on');
model.result.export('anim2').set('axes1d', 'on');
model.result.export('anim2').set('axes2d', 'on');
model.result.export('anim2').set('showgrid', 'on');
model.result.export('anim2').set('target', 'player');
model.result.export('anim2').set('plotgroup', 'pg4');
model.result.export('anim2').run;
model.result('pg3').run;

model.title('Optimizing Band Dispersion in an Electroosmotic Flow Through a Curved Microchannel');

model.description('As an analyte band flows through a curved channel in an electroosmotically driven flow, dispersion of the band occurs due to gradients in the fluid velocity across the channel. These velocity gradients result from differences in the electric field acting at the walls within the curved channels. This example shows how to optimize the channel velocity to minimize the dispersion of the analyte.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;

model.label('microchannel_dispersion_optimization.mph');

model.modelNode.label('Components');

out = model;
