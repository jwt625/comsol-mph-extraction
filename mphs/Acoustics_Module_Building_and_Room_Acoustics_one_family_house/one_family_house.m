function out = model
%
% one_family_house.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Building_and_Room_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ade', 'AcousticDiffusionEquation', 'geom1');
model.physics('ade').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/ade', true);

model.geom('geom1').insertFile('one_family_house_geom_sequence.mph', 'geom1');
model.geom('geom1').run('imp1');

model.view('view1').set('ssao', true);
model.view('view1').camera.set('zoomanglefull', 13);
model.view('view1').camera.set('position', [60 18.5 20]);
model.view('view1').camera.setIndex('target', 0, 0);
model.view('view1').camera.setIndex('target', 0, 1);
model.view('view1').camera.set('target', [0 0 2.55]);
model.view('view1').camera.set('up', [-0.26 -0.035 1]);
model.view('view1').camera.setIndex('up', 0.96, 2);
model.view('view1').camera.set('rotationpoint', [0 0 2.55]);
model.view('view1').camera.set('viewoffset', [0.018 0.0125]);

model.geom('geom1').run('fin');

model.view('view1').set('renderwireframe', true);

model.param.label('Parameters 1 - Source');
model.param.set('P_s', '0.1[W]');
model.param.descr('P_s', 'Source power');
model.param.create('par2');
model.param('par2').label('Parameters 2 - Indoor Boundaries');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('a_wall', '0.1', 'Wall absorption coefficient');
model.param('par2').set('a_ceiling', '0.15', 'Ceiling absorption coefficient');
model.param('par2').set('a_window', '0.05', 'Window absorption coefficient');
model.param('par2').set('a_stairs', '0.05', 'Stairs absorption coefficient');
model.param('par2').set('a_floor', '0.2', 'Wooden floor absorption coefficient');
model.param('par2').set('TL_heavy', '10[dB]', 'Transmission loss for heavy partitions');
model.param('par2').set('TL_light', '5[dB]', 'Transmission loss for light partitions');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('ade').selection.set([2 3 4 5 6 7 8 9 10 11 12]);
model.physics('ade').feature('room1').selection.set([5]);
model.physics('ade').feature('room1').feature('wall1').selection.all;
model.physics('ade').feature('room1').feature('wall1').set('alpha', 'a_wall');
model.physics('ade').feature('room1').create('wall2', 'Wall', 2);
model.physics('ade').feature('room1').feature('wall2').selection.named('geom1_sel1');
model.physics('ade').feature('room1').feature('wall2').set('alpha', 'a_window');
model.physics('ade').feature('room1').create('wall3', 'Wall', 2);
model.physics('ade').feature('room1').feature('wall3').selection.named('geom1_sel2');
model.physics('ade').feature('room1').feature('wall3').set('alpha', 'a_floor');
model.physics('ade').feature('room1').create('wall4', 'Wall', 2);
model.physics('ade').feature('room1').feature('wall4').selection.named('geom1_sel4');
model.physics('ade').feature('room1').feature('wall4').set('alpha', 'a_ceiling');
model.physics('ade').feature.duplicate('room2', 'room1');
model.physics('ade').feature('room2').selection.set([8]);
model.physics('ade').feature.duplicate('room3', 'room1');
model.physics('ade').feature('room3').selection.set([7]);
model.physics('ade').feature('room3').feature('wall3').selection.named('geom1_sel3');
model.physics('ade').feature('room3').feature('wall3').set('alpha', 'a_stairs');
model.physics('ade').feature.duplicate('room4', 'room1');
model.physics('ade').feature('room4').selection.set([9]);
model.physics('ade').feature.duplicate('room5', 'room1');
model.physics('ade').feature('room5').selection.set([4]);
model.physics('ade').feature.duplicate('room6', 'room1');
model.physics('ade').feature('room6').selection.set([3 10]);
model.physics('ade').feature.duplicate('room7', 'room1');
model.physics('ade').feature('room7').selection.set([2]);
model.physics('ade').feature.duplicate('room8', 'room1');
model.physics('ade').feature('room8').selection.set([6]);
model.physics('ade').feature.duplicate('room9', 'room1');
model.physics('ade').feature('room9').selection.set([12]);
model.physics('ade').feature.duplicate('room10', 'room1');
model.physics('ade').feature('room10').selection.set([11]);
model.physics('ade').create('mrctl1', 'MappedRoomCoupling', 2);
model.physics('ade').feature('mrctl1').selection.named('geom1_sel5');
model.physics('ade').feature('mrctl1').set('TL', 'TL_heavy');
model.physics('ade').feature.duplicate('mrctl2', 'mrctl1');
model.physics('ade').feature('mrctl2').selection.named('geom1_sel6');
model.physics('ade').feature.duplicate('mrctl3', 'mrctl2');
model.physics('ade').feature('mrctl3').selection.named('geom1_sel7');
model.physics('ade').feature.duplicate('mrctl4', 'mrctl3');
model.physics('ade').feature('mrctl4').selection.named('geom1_sel8');
model.physics('ade').feature.duplicate('mrctl5', 'mrctl4');
model.physics('ade').feature('mrctl5').selection.named('geom1_sel9');
model.physics('ade').feature.duplicate('mrctl6', 'mrctl5');
model.physics('ade').feature('mrctl6').selection.named('geom1_sel10');
model.physics('ade').feature.duplicate('mrctl7', 'mrctl6');
model.physics('ade').feature('mrctl7').selection.named('geom1_sel11');
model.physics('ade').feature.duplicate('mrctl8', 'mrctl7');
model.physics('ade').feature('mrctl8').selection.named('geom1_sel12');
model.physics('ade').feature('mrctl8').set('TL', 'TL_light');
model.physics('ade').feature.duplicate('mrctl9', 'mrctl8');
model.physics('ade').feature('mrctl9').selection.named('geom1_sel14');
model.physics('ade').create('rctl1', 'RoomCoupling', 2);
model.physics('ade').feature('rctl1').selection.named('geom1_sel13');
model.physics('ade').feature('rctl1').set('TL', 'TL_light');
model.physics('ade').feature('rctl1').set('bol_force_cont', true);
model.physics('ade').create('ps1', 'PointSource', 0);
model.physics('ade').feature('ps1').selection.set([49]);
model.physics('ade').feature('ps1').set('qp', 'P_s');

model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Stationary');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Sound Pressure Level (ade)');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'AcousticDiffusionEquation/phys1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').label('Multislice');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('expr', 'ade.Lp');
model.result('pg1').feature('mslc1').set('smooth', 'internal');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Sound Energy Density (ade)');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'AcousticDiffusionEquation/phys1/pdef1/pcond2/pg2');
model.result('pg2').feature.create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').label('Multislice');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('smooth', 'internal');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('data', 'parent');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Local Energy Flux (ade)');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'AcousticDiffusionEquation/phys1/pdef1/pcond2/pg3');
model.result('pg3').feature.create('arwv1', 'ArrowVolume');
model.result('pg3').feature('arwv1').label('Arrow Volume');
model.result('pg3').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg3').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('arwv1').set('color', 'black');
model.result('pg3').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg3').feature('arwv1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').label('Sound Pressure Level (ade) - Slices');
model.result('pg1').run;
model.result('pg1').feature('mslc1').set('xnumber', '0');
model.result('pg1').feature('mslc1').set('ynumber', '0');
model.result('pg1').feature('mslc1').set('znumber', '4');
model.result('pg1').run;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Sound Pressure Level (ade) - Boundaries');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'ade.Lp');
model.result('pg4').run;
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('mslc1').set('xnumber', '0');
model.result('pg2').feature('mslc1').set('ynumber', '2');
model.result('pg2').feature('mslc1').set('znumber', '3');
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('arwv1').active(false);
model.result('pg3').run;
model.result('pg3').create('str1', 'Streamline');
model.result('pg3').feature('str1').set('selnumber', 100);
model.result('pg3').feature('str1').selection.set([66 68 133 139]);
model.result('pg3').feature('str1').set('linetype', 'tube');
model.result('pg3').feature('str1').create('col1', 'Color');
model.result('pg3').run;
model.result('pg3').feature('str1').feature('col1').set('expr', 'sqrt(ade.Jx^2+ade.Jy^2+ade.Jz^2)');
model.result('pg3').feature('str1').feature('col1').set('colorscalemode', 'logarithmic');
model.result('pg3').run;
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').run;
model.result('pg5').label('Reverberation Time');
model.result('pg5').create('vol1', 'Volume');
model.result('pg5').feature('vol1').set('expr', 'ade.T60_EN');
model.result('pg5').feature('vol1').set('colortable', 'AuroraBorealis');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').run;
model.result('pg6').label('Model Thumbnail');
model.result('pg3').run;
model.result('pg6').run;
model.result('pg6').feature.copy('str1', 'pg3/str1');
model.result('pg6').run;
model.result('pg6').feature('str1').set('selnumber', 50);
model.result('pg6').run;
model.result('pg6').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg6').run;
model.result('pg6').create('slc1', 'Slice');
model.result('pg6').feature('slc1').set('expr', 'ade.Lp');
model.result('pg6').feature('slc1').set('quickplane', 'xy');
model.result('pg6').feature('slc1').set('quickzmethod', 'coord');
model.result('pg6').feature('slc1').set('quickz', 0.3);
model.result('pg6').feature('slc1').set('colorlegend', false);
model.result('pg6').run;
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').create('sel1', 'Selection');
model.result('pg6').feature('surf1').feature('sel1').selection.named('geom1_sel3');
model.result('pg6').run;
model.result('pg6').feature('surf1').set('expr', '1');
model.result('pg6').feature('surf1').set('colorlegend', false);
model.result('pg6').feature('surf1').set('coloring', 'uniform');
model.result('pg6').feature('surf1').set('color', 'gray');
model.result('pg6').feature.duplicate('surf2', 'surf1');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').feature('surf2').feature('sel1').selection.set([16 17 20 21 23 25 29 32 45 61 123 201]);
model.result('pg6').run;

model.study.create('std2');
model.study('std2').create('eigv', 'Eigenvalue');
model.study('std2').feature('eigv').setSolveFor('/physics/ade', true);
model.study('std2').feature('eigv').set('neigsactive', true);
model.study('std2').feature('eigv').set('neigs', 10);
model.study('std2').feature('eigv').set('shiftactive', true);
model.study('std2').feature('eigv').set('eigwhich', 'lr');
model.study('std2').label('Study 2 - Eigenvalue');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'eigv');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'eigv');
model.sol('sol2').create('e1', 'Eigenvalue');
model.sol('sol2').feature('e1').set('control', 'eigv');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').label('Sound Energy Density Modes (ade)');
model.result('pg7').set('data', 'dset2');
model.result('pg7').setIndex('looplevel', 1, 0);
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').set('data', 'dset2');
model.result('pg7').setIndex('looplevel', 1, 0);
model.result('pg7').set('defaultPlotID', 'AcousticDiffusionEquation/phys1/pdef1/pcond1/pg1');
model.result('pg7').feature.create('mslc1', 'Multislice');
model.result('pg7').feature('mslc1').label('Multislice');
model.result('pg7').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg7').feature('mslc1').set('smooth', 'internal');
model.result('pg7').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg7').feature('mslc1').set('data', 'parent');
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').set('data', 'dset2');
model.result.evaluationGroup('eg1').set('showlooplevelinput', {'off' 'off' 'off'});
model.result.evaluationGroup('eg1').set('data', 'dset2');
model.result.evaluationGroup('eg1').set('defaultPlotID', 'AcousticDiffusionEquation/phys1/pdef1/pcond1/eg1');
model.result.evaluationGroup('eg1').feature.create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').label('Reverberation Time');
model.result.evaluationGroup('eg1').feature('gev1').set('showsolutionparams', 'on');
model.result.evaluationGroup('eg1').feature('gev1').set('expr', {'ade.T60'});
model.result.evaluationGroup('eg1').feature('gev1').set('showsolutionparams', 'on');
model.result.evaluationGroup('eg1').feature('gev1').set('data', 'parent');
model.result('pg7').run;
model.result('pg7').set('looplevel', [3]);
model.result('pg7').run;
model.result('pg7').feature('mslc1').set('xnumber', '0');
model.result('pg7').feature('mslc1').set('ynumber', '0');
model.result('pg7').feature('mslc1').set('znumber', '2');
model.result('pg7').run;
model.result.evaluationGroup('eg1').label('Reverberation Time');
model.result.evaluationGroup('eg1').run;

model.study.create('std3');
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').setSolveFor('/physics/ade', true);
model.study('std3').feature('time').set('tlist', 'range(0,0.01,1)');
model.study('std3').feature('time').set('useadvanceddisable', true);
model.study('std3').feature('time').set('disabledphysics', {'ade/ps1'});
model.study('std3').feature('time').set('useinitsol', true);
model.study('std3').feature('time').set('initmethod', 'sol');
model.study('std3').feature('time').set('initstudy', 'std1');
model.study('std3').label('Study 3 - Transient');
model.study('std3').setGenPlots(false);

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'time');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'time');
model.sol('sol3').create('t1', 'Time');
model.sol('sol3').feature('t1').set('tlist', 'range(0,0.01,1)');
model.sol('sol3').feature('t1').set('plot', 'off');
model.sol('sol3').feature('t1').set('plotgroup', 'pg1');
model.sol('sol3').feature('t1').set('plotfreq', 'tout');
model.sol('sol3').feature('t1').set('probesel', 'all');
model.sol('sol3').feature('t1').set('probes', {});
model.sol('sol3').feature('t1').set('probefreq', 'tsteps');
model.sol('sol3').feature('t1').set('rtol', 0.001);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol3').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('eventtol', 0.01);
model.sol('sol3').feature('t1').set('reacf', true);
model.sol('sol3').feature('t1').set('storeudot', true);
model.sol('sol3').feature('t1').set('endtimeinterpolation', true);
model.sol('sol3').feature('t1').set('maxorder', 5);
model.sol('sol3').feature('t1').set('minorder', 1);
model.sol('sol3').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol3').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol3').feature('t1').set('control', 'time');
model.sol('sol3').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('t1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Energy Decay Curves (normalized)');
model.result('pg8').set('data', 'dset3');
model.result('pg8').set('titletype', 'manual');
model.result('pg8').set('title', 'Energy Decay Curves');
model.result('pg8').set('ylabelactive', true);
model.result('pg8').set('ylabel', 'Level (dB)');
model.result('pg8').create('ptgr1', 'PointGraph');
model.result('pg8').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg8').feature('ptgr1').set('linewidth', 'preference');
model.result('pg8').feature('ptgr1').selection.set([100 377 415]);
model.result('pg8').feature('ptgr1').set('expr', 'ade.Lp-with(''first'',ade.Lp)');
model.result('pg8').feature('ptgr1').set('linewidth', 2);
model.result('pg8').feature('ptgr1').set('legend', true);
model.result('pg8').feature('ptgr1').set('legendprefix', 'Point ');
model.result('pg8').run;

model.param.create('par3');
model.param('par3').label('Parameters 3 - Outdoor Boundaries');

% To import content from file, use:
% model.param('par3').loadFile('FILENAME');
model.param('par3').set('a_ground', '0.2', 'Ground absorption coefficient');
model.param('par3').set('s_ground', '0.15', 'Ground scattering coefficient');
model.param('par3').set('a_extwall', '0.1', 'Exterior wall absorption coefficient');
model.param('par3').set('s_extwall', '0.1', 'Exterior wall scattering coefficient');
model.param('par3').set('s_window', '0.1', 'Window scattering coefficient');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Radiating Window 1');
model.selection('sel1').geom(2);
model.selection('sel1').set([43]);
model.selection.duplicate('sel2', 'sel1');
model.selection('sel2').label('Radiating Window 2');
model.selection('sel2').set([110 146]);

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.named('sel1');
model.cpl.duplicate('intop2', 'intop1');
model.cpl('intop2').selection.named('sel2');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Variables 1 - Outdoor Radiation');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('Pwin1', 'intop1(ade.psq/ade.rho/ade.c)', 'Power on the inside of window 1');
model.variable('var1').set('Pwin2', 'intop2(ade.psq/ade.rho/ade.c)', 'Power on the inside of window 2');
model.variable('var1').set('TLwin', '20[dB]', 'Transmission loss of the windows');
model.variable('var1').set('tau', '10^(-TLwin/10)', 'Power transmission coefficient');
model.variable('var1').set('Prad1', 'Pwin1*tau', 'Power radiated from window 1');
model.variable('var1').set('Prad2', 'Pwin2*tau', 'Power radiated from window 2');

model.physics.create('rac', 'RayAcoustics', 'geom1');
model.physics('rac').model('comp1');

model.study('std1').feature('stat').setSolveFor('/physics/rac', false);
model.study('std2').feature('eigv').setSolveFor('/physics/rac', false);
model.study('std3').feature('time').setSolveFor('/physics/rac', false);

model.physics('rac').selection.set([1]);
model.physics('rac').prop('IntensityComputation').setIndex('IntensityComputation', 'ComputePower', 0);
model.physics('rac').feature('mp1').set('FluidModel', 'Atmosphere');
model.physics('rac').feature('mp1').set('minput_relativehumidity', 0.45);
model.physics('rac').create('relb1', 'ReleaseFromBoundary', 2);
model.physics('rac').feature('relb1').selection.named('sel1');
model.physics('rac').feature('relb1').setIndex('Nr', 200, 0);
model.physics('rac').feature('relb1').set('RayDirectionVector', 'Hemispherical');
model.physics('rac').feature('relb1').set('SpecifyInletTangentialNormal', true);
model.physics('rac').feature('relb1').setIndex('Nw', 500, 0);
model.physics('rac').feature('relb1').set('rax', [0 0 1]);
model.physics('rac').feature('relb1').set('Psrc', 'Prad1');
model.physics('rac').feature.duplicate('relb2', 'relb1');
model.physics('rac').feature('relb2').selection.named('sel2');
model.physics('rac').feature('relb2').set('Psrc', 'Prad2');
model.physics('rac').create('wall2', 'Wall', 2);
model.physics('rac').feature('wall2').label('Wall 2 - Ground');
model.physics('rac').feature('wall2').selection.set([3]);
model.physics('rac').feature('wall2').set('WallCondition', 'MixedDiffuseSpecular');
model.physics('rac').feature('wall2').set('gammas', '1-s_ground');
model.physics('rac').feature('wall2').set('alphas', 'a_ground');
model.physics('rac').feature('wall2').set('alphad', 'a_ground');
model.physics('rac').feature('wall2').create('spl1', 'SoundPressureLevelBoundary', 2);
model.physics('rac').create('wall3', 'Wall', 2);
model.physics('rac').feature('wall3').label('Wall 3 - Exterior Wall');
model.physics('rac').feature('wall3').selection.set([33 34 35 40 41 42 51 52 53 73 74 103 104 105 106 107 108 109 143 144 145 175 226]);
model.physics('rac').feature('wall3').set('WallCondition', 'MixedDiffuseSpecular');
model.physics('rac').feature('wall3').set('gammas', '1-s_extwall');
model.physics('rac').feature('wall3').set('alphas', 'a_extwall');
model.physics('rac').feature('wall3').set('alphad', 'a_extwall');
model.physics('rac').feature.duplicate('wall4', 'wall3');
model.physics('rac').feature('wall4').label('Wall 4 - Windows');
model.physics('rac').feature('wall4').selection.set([43 54 110 111 146]);
model.physics('rac').feature('wall4').set('gammas', '1-s_window');
model.physics('rac').feature('wall4').set('alphas', 'a_window');
model.physics('rac').feature('wall4').set('alphad', 'a_window');
model.physics('rac').create('wall5', 'Wall', 2);
model.physics('rac').feature('wall5').label('Wall 5 - Air');
model.physics('rac').feature('wall5').selection.set([1 2 4 5 259]);
model.physics('rac').feature('wall5').set('WallCondition', 'Disappear');

model.study.create('std4');
model.study('std4').create('rtrac', 'RayTracing');
model.study('std4').feature('rtrac').setSolveFor('/physics/ade', false);
model.study('std4').feature('rtrac').setSolveFor('/physics/rac', true);
model.study('std4').feature('rtrac').set('tunit', 's');
model.study('std4').feature('rtrac').set('tlist', '0 0.2');
model.study('std4').feature('rtrac').set('usesol', true);
model.study('std4').feature('rtrac').set('notsolmethod', 'sol');
model.study('std4').feature('rtrac').set('notstudy', 'std1');
model.study('std4').label('Study 4 - Ray Acoustics');

model.sol.create('sol4');
model.sol('sol4').study('std4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std4');
model.sol('sol4').feature('st1').set('studystep', 'rtrac');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'rtrac');
model.sol('sol4').create('t1', 'Time');
model.sol('sol4').feature('t1').set('tlist', '0 0.2');
model.sol('sol4').feature('t1').set('plot', 'off');
model.sol('sol4').feature('t1').set('plotgroup', 'pg1');
model.sol('sol4').feature('t1').set('plotfreq', 'tout');
model.sol('sol4').feature('t1').set('probesel', 'all');
model.sol('sol4').feature('t1').set('probes', {});
model.sol('sol4').feature('t1').set('probefreq', 'tsteps');
model.sol('sol4').feature('t1').set('rtol', 1.0E-5);
model.sol('sol4').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol4').feature('t1').set('reacf', false);
model.sol('sol4').feature('t1').set('storeudot', false);
model.sol('sol4').feature('t1').set('tstepsgenalpha', 'strict');
model.sol('sol4').feature('t1').set('endtimeinterpolation', true);
model.sol('sol4').feature('t1').set('timemethod', 'genalpha');
model.sol('sol4').feature('t1').set('estrat', 'exclude');
model.sol('sol4').feature('t1').set('control', 'rtrac');
model.sol('sol4').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol4').feature('t1').create('i1', 'Iterative');
model.sol('sol4').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol4').feature('t1').feature('fc1').set('linsolver', 'i1');
model.sol('sol4').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol4').feature('t1').feature.remove('fcDef');
model.sol('sol4').attach('std4');
model.sol('sol4').runAll;

model.result.dataset.create('ray1', 'Ray');
model.result.dataset('ray1').set('solution', 'sol4');
model.result.dataset('ray1').set('posdof', {'comp1.qx' 'comp1.qy' 'comp1.qz'});
model.result.dataset('ray1').set('geom', 'geom1');
model.result.dataset('ray1').set('rgeom', 'pgeom_rac');
model.result.dataset('ray1').set('rgeomspec', 'fromphysics');
model.result.dataset('ray1').set('physicsinterface', 'rac');
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').set('data', 'ray1');
model.result('pg9').setIndex('looplevel', 2, 0);
model.result('pg9').label('Ray Trajectories (rac)');
model.result('pg9').set('showlegendsunit', true);
model.result('pg9').create('rtrj1', 'RayTrajectories');
model.result('pg9').feature('rtrj1').set('linetype', 'line');
model.result('pg9').feature('rtrj1').set('extrasteps', 'none');
model.result('pg9').feature('rtrj1').create('col1', 'Color');
model.result('pg9').feature('rtrj1').feature('col1').set('expr', 't');
model.result('pg9').feature('rtrj1').create('filt1', 'RayTrajectoriesFilter');
model.result('pg9').run;
model.result('pg9').setIndex('looplevel', 'interp', 0);
model.result('pg9').set('interp', [0.003]);
model.result('pg9').run;
model.result('pg9').feature('rtrj1').set('linetype', 'none');
model.result('pg9').feature('rtrj1').set('pointtype', 'point');
model.result('pg9').run;
model.result('pg9').feature('rtrj1').feature('col1').set('expr', 'rac.Q');
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').run;
model.result('pg10').label('Outdoor SPL');
model.result('pg10').set('data', 'dset4');
model.result('pg10').set('showlegendsunit', true);
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', 'rac.wall2.spl1.Lp');
model.result('pg10').feature('surf1').set('rangecoloractive', true);
model.result('pg10').feature('surf1').set('rangecolormin', 65);
model.result('pg10').feature('surf1').set('rangecolormax', 115);
model.result('pg10').feature.duplicate('surf2', 'surf1');
model.result('pg10').run;
model.result('pg10').feature('surf2').set('data', 'dset1');
model.result('pg10').feature('surf2').set('expr', 'ade.Lp');
model.result('pg10').feature('surf2').set('titletype', 'none');
model.result('pg10').feature('surf2').set('colorlegend', false);
model.result('pg10').run;
model.result('pg6').run;

model.title('One-Family House Acoustics');

model.description(['This model shows an application of the Acoustic Diffusion Equation physics interface. The acoustics in a two-story one-family house consisting of 10' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'rooms is analyzed.' newline  newline 'The steady state sound pressure level and energy density distributions are analyzed for a monopole source located in the living room. The reverberation time T60 of the different coupled rooms is then studied using the eigenvalue solver. The transient energy decay is also found using a time-dependent study.' newline  newline 'Furthermore, the sound pressure level radiated outside the house is determined with a manual coupling to the Ray Acoustics interface.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('one_family_house.mph');

model.modelNode.label('Components');

out = model;
