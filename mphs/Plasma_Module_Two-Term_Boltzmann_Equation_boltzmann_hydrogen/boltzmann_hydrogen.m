function out = model
%
% boltzmann_hydrogen.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Plasma_Module/Two-Term_Boltzmann_Equation');

model.modelNode.create('comp1', true);

model.physics.create('be', 'BoltzmannEquation');
model.physics('be').model('comp1');

model.study.create('std1');
model.study('std1').create('ref', 'ReducedElectricFields');
model.study('std1').feature('ref').set('solnum', 'auto');
model.study('std1').feature('ref').set('notsolnum', 'auto');
model.study('std1').feature('ref').set('outputmap', {});
model.study('std1').feature('ref').setSolveFor('/physics/be', true);

model.param.set('Tgas', '300[K]');
model.param.descr('Tgas', 'Gas temperature');
model.param.set('p0', '25000[Pa]');
model.param.descr('p0', 'Gas pressure');
model.param.set('Ngas', 'p0/(k_B_const*Tgas)');
model.param.descr('Ngas', 'Gas density');
model.param.set('f0', '2.45[GHz]');
model.param.descr('f0', 'Excitation frequency');
model.param.set('w0', '2*pi*f0');
model.param.descr('w0', 'Angular frequency');
model.param.set('wsN', 'w0/Ngas');
model.param.descr('wsN', 'Reduced angular frequency');
model.param.set('EN', '50[Td]');
model.param.descr('EN', 'Reduced electric field');

model.physics('be').prop('EEDFSettings').set('eedf', 'BoltzmannTwoTerm');
model.physics('be').prop('EEDFSettings').set('oscillating', true);
model.physics('be').prop('EEDFSettings').set('omegaN', 'wsN');
model.physics('be').prop('EEDFSettings').set('emax', '200[V]');
model.physics('be').create('xsec1', 'CrossSectionImport', -1);
model.physics('be').feature('xsec1').set('Filepath', 'H2_marques_xsecs.txt');
model.physics('be').feature('xsec1').runCommand('importData');
model.physics('be').create('xsec2', 'CrossSectionImport', -1);
model.physics('be').feature('xsec2').set('Filepath', 'H_marques_xsecs.txt');
model.physics('be').feature('xsec2').runCommand('importData');
model.physics('be').feature('bmdl1').set('Tg', 'Tgas');
model.physics('be').feature('bmdl1').setIndex('x', 0.5, 0, 0);
model.physics('be').feature('bmdl1').setIndex('x', 0.5, 1, 0);
model.physics('be').feature('bmdl1').set('RateCoefPG', false);
model.physics('be').feature('bmdl1').set('TransportPropPG', false);
model.physics('be').feature('bmdl1').set('ebar', false);
model.physics('be').feature('init1').set('ebarinit', '3[V]');
model.physics('be').feature('init1').set('Td0', '35[Td]');

model.study('std1').label('HF Limit Stationary');
model.study('std1').setGenPlots(false);
model.study('std1').feature('ref').set('plist', '35.355[Td] 50[Td]');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'ref');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'ref');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'35.355[Td] 50[Td]'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'V*m^2'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'auto');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'ref');
model.sol('sol1').feature('s1').set('control', 'ref');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol1').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.75);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('ooc', 'auto');
model.sol('sol1').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol1').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.75);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').label('EEDF HF Limit vs. Time Averaged');
model.result('pg1').set('titletype', 'none');
model.result('pg1').create('lngr1', 'LineGraph');
model.result('pg1').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg1').feature('lngr1').set('linewidth', 'preference');
model.result('pg1').feature('lngr1').set('data', 'dset1');
model.result('pg1').feature('lngr1').setIndex('looplevelinput', 'manual', 0);
model.result('pg1').feature('lngr1').setIndex('looplevel', [1], 0);
model.result('pg1').feature('lngr1').selection.all;
model.result('pg1').feature('lngr1').set('expr', 'be.f');
model.result('pg1').feature('lngr1').set('xdata', 'expr');
model.result('pg1').feature('lngr1').set('xdataexpr', 'xe_be*root.comp1.be.emax');
model.result('pg1').feature('lngr1').set('legend', true);
model.result('pg1').feature('lngr1').set('legendmethod', 'manual');
model.result('pg1').feature('lngr1').setIndex('legends', 'HF Limit', 0);
model.result('pg1').feature('lngr1').set('linewidth', 3);
model.result('pg1').run;
model.result('pg1').set('xlabelactive', true);
model.result('pg1').set('xlabel', 'Energy (eV)');
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'EEDF (eV<sup>-3/2</sup>)');
model.result('pg1').set('ylog', true);
model.result('pg1').set('axislimits', true);
model.result('pg1').set('xmin', 0);
model.result('pg1').set('xmax', 20);
model.result('pg1').set('ymin', '1e-7');
model.result('pg1').set('ymax', 1);
model.result('pg1').run;

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/be', true);
model.study('std2').feature('time').set('tlist', 'range(0,(5/f0-0)/4,5/f0) range(5/f0,(6/f0-(5/f0))/24,6/f0)');
model.study('std2').feature('time').set('useinitsol', true);
model.study('std2').feature('time').set('initmethod', 'sol');
model.study('std2').feature('time').set('initstudy', 'std1');
model.study('std2').feature('time').set('solnum', 'from_list');
model.study('std2').feature('time').set('listsolnum', [2]);
model.study('std2').setGenPlots(false);

model.physics('be').prop('EEDFSettings').set('eedfTemporalBehavior', 'TimeDependentEEDF');
model.physics('be').feature('bmdl1').set('pA', 'p0');
model.physics('be').feature('bmdl1').set('Erd', 'EN*cos(2*pi*f0*t)');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_be_lam').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_be_F0').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_be_lam').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_be_F0').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_be_lam').set('scaleval', '1.0E-21');
model.sol('sol2').feature('v1').feature('comp1_be_F0').set('scaleval', '10');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,(5/f0-0)/4,5/f0) range(5/f0,(6/f0-(5/f0))/24,6/f0)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 1.0E-4);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'manual');
model.sol('sol2').feature('t1').set('atolglobalmethod', 'unscaled');
model.sol('sol2').feature('t1').set('atolglobal', 0.001);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'manual');
model.sol('sol2').feature('t1').set('eventtol', 0.01);
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('maxorder', 5);
model.sol('sol2').feature('t1').set('minorder', 1);
model.sol('sol2').feature('t1').set('initialstepbdfactive', true);
model.sol('sol2').feature('t1').set('initialstepbdf', '(1.0E-15)[s]');
model.sol('sol2').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol2').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').feature('aDef').set('complexfun', false);
model.sol('sol2').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('t1').feature('aDef').set('matherr', true);
model.sol('sol2').feature('t1').feature('aDef').set('blocksizeactive', false);
model.sol('sol2').feature('t1').feature('aDef').set('nullfun', 'auto');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('rstep', 10);
model.sol('sol2').feature('t1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 4);
model.sol('sol2').feature('t1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol2').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('t1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol2').feature('t1').feature('fc1').set('initstep', 1);
model.sol('sol2').feature('t1').feature('fc1').set('minsteprecovery', 0.75);
model.sol('sol2').feature('t1').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d1').set('ooc', 'auto');
model.sol('sol2').feature('t1').feature('d1').set('errorchk', 'auto');
model.sol('sol2').feature('t1').feature('d1').set('rhob', 1);
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('t1').feature('fc1').set('rstep', 10);
model.sol('sol2').feature('t1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 4);
model.sol('sol2').feature('t1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol2').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('t1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol2').feature('t1').feature('fc1').set('initstep', 1);
model.sol('sol2').feature('t1').feature('fc1').set('minsteprecovery', 0.75);
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.study('std2').label('Time Dependent');

model.result('pg1').run;
model.result('pg1').create('lngr2', 'LineGraph');
model.result('pg1').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg1').feature('lngr2').set('linewidth', 'preference');
model.result('pg1').feature('lngr2').set('data', 'dset2');
model.result('pg1').feature('lngr2').setIndex('looplevelinput', 'manual', 0);
model.result('pg1').feature('lngr2').setIndex('looplevel', [7 13], 0);
model.result('pg1').feature('lngr2').selection.all;
model.result('pg1').feature('lngr2').set('expr', 'be.f');
model.result('pg1').feature('lngr2').set('xdata', 'expr');
model.result('pg1').feature('lngr2').set('xdataexpr', 'xe_be*root.comp1.be.emax');
model.result('pg1').feature('lngr2').set('linestyle', 'dashed');
model.result('pg1').feature('lngr2').set('linecolor', 'black');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').create('lngr3', 'LineGraph');
model.result('pg1').feature('lngr3').set('markerpos', 'datapoints');
model.result('pg1').feature('lngr3').set('linewidth', 'preference');
model.result('pg1').feature('lngr3').set('data', 'dset2');
model.result('pg1').feature('lngr3').setIndex('looplevelinput', 'last', 0);
model.result('pg1').feature('lngr3').selection.all;
model.result('pg1').feature('lngr3').set('expr', 'timeavg(5/f0, 6/f0, be.f)');
model.result('pg1').feature('lngr3').set('xdata', 'expr');
model.result('pg1').feature('lngr3').set('xdataexpr', 'xe_be*root.comp1.be.emax');
model.result('pg1').feature('lngr3').set('linewidth', 3);
model.result('pg1').feature('lngr3').set('legend', true);
model.result('pg1').feature('lngr3').set('legendmethod', 'manual');
model.result('pg1').feature('lngr3').setIndex('legends', 'Time averaged', 0);
model.result('pg1').run;

model.physics('be').prop('EEDFSettings').set('eedfTemporalBehavior', 'StationaryEEDF');

model.study.create('std3');
model.study('std3').create('ref', 'ReducedElectricFields');
model.study('std3').feature('ref').set('plotgroup', 'Default');
model.study('std3').feature('ref').set('solnum', 'auto');
model.study('std3').feature('ref').set('notsolnum', 'auto');
model.study('std3').feature('ref').set('outputmap', {});
model.study('std3').feature('ref').setSolveFor('/physics/be', true);
model.study('std3').feature('ref').set('plist', 'range(10,10,500)[Td]');
model.study('std3').setGenPlots(false);
model.study('std3').label('HF Limit parameterization');

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'ref');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'ref');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').set('stol', 0.001);
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol3').feature('s1').feature('p1').set('plistarr', {'range(10,10,500)[Td]'});
model.sol('sol3').feature('s1').feature('p1').set('punit', {'V*m^2'});
model.sol('sol3').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol3').feature('s1').feature('p1').set('preusesol', 'auto');
model.sol('sol3').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol3').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol3').feature('s1').feature('p1').set('probes', {});
model.sol('sol3').feature('s1').feature('p1').set('control', 'ref');
model.sol('sol3').feature('s1').set('control', 'ref');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol3').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol3').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol3').feature('s1').feature('fc1').set('initstep', 1);
model.sol('sol3').feature('s1').feature('fc1').set('minsteprecovery', 0.75);
model.sol('sol3').feature('s1').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('d1').set('ooc', 'auto');
model.sol('sol3').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol3').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol3').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol3').feature('s1').feature('fc1').set('initstep', 1);
model.sol('sol3').feature('s1').feature('fc1').set('minsteprecovery', 0.75);
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('EEDFs');
model.result('pg2').set('data', 'dset3');
model.result('pg2').create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg2').feature('lngr1').set('linewidth', 'preference');
model.result('pg2').feature('lngr1').selection.all;
model.result('pg2').feature('lngr1').set('expr', 'be.f');
model.result('pg2').feature('lngr1').set('xdata', 'expr');
model.result('pg2').feature('lngr1').set('xdataexpr', 'xe_be*root.comp1.be.emax');
model.result('pg2').run;
model.result('pg2').set('titletype', 'none');
model.result('pg2').set('xlabelactive', true);
model.result('pg2').set('xlabel', 'Energy (eV)');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'EEDF (eV<sup>-3/2</sup>)');
model.result('pg2').set('ylog', true);
model.result('pg2').set('axislimits', true);
model.result('pg2').set('xmin', 0);
model.result('pg2').set('xmax', 200);
model.result('pg2').set('ymin', '1e-7');
model.result('pg2').set('ymax', 2);
model.result('pg2').set('showlegends', false);
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Electron Mean Energy vs. E/N');
model.result('pg3').set('data', 'dset3');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').setIndex('expr', 'be.ebar', 0);
model.result('pg3').feature('glob1').set('xdataparamunit', 'Td');
model.result('pg3').run;
model.result('pg3').set('titletype', 'none');
model.result('pg3').set('xlabelactive', true);
model.result('pg3').set('xlabel', 'E/N (Td)');
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'Mean electron energy (eV)');
model.result('pg3').run;
model.result('pg3').set('showlegends', false);
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Electron Mobility vs. Electron Mean Energy');
model.result('pg4').set('data', 'dset3');
model.result('pg4').set('titletype', 'none');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').setIndex('expr', 'be.muN', 0);
model.result('pg4').feature('glob1').set('xdata', 'expr');
model.result('pg4').feature('glob1').set('xdataexpr', 'be.ebar');
model.result('pg4').run;
model.result('pg4').set('xlabelactive', true);
model.result('pg4').set('xlabel', 'Mean electron energy (eV)');
model.result('pg4').set('axislimits', true);
model.result('pg4').set('xmin', 0);
model.result('pg4').set('xmax', 19);
model.result('pg4').set('ymin', 0);
model.result('pg4').set('ymax', '2e24');
model.result('pg4').set('showlegends', false);
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Ionization Rate Constants vs. Electron Mean Energy');
model.result('pg5').set('data', 'dset3');
model.result('pg5').set('titletype', 'none');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').setIndex('expr', 'be.k_21', 0);
model.result('pg5').feature('glob1').setIndex('expr', 'be.k_22', 1);
model.result('pg5').feature('glob1').setIndex('expr', 'be.k_29', 2);
model.result('pg5').feature('glob1').set('xdata', 'expr');
model.result('pg5').feature('glob1').set('xdataexpr', 'be.ebar');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'Mean electron energy (eV)');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Rate constant (m<sup>3</sup>/s)');
model.result('pg5').set('ylog', true);
model.result('pg5').set('legendpos', 'lowerright');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg3').run;
model.result('pg4').run;
model.result('pg5').run;

model.title('Hydrogen Boltzmann Analysis');

model.description('This model solves the Boltzmann equation in the two-term approximation for a background of molecular and atomic hydrogen. Electron mobility and source terms are computed by suitable integration of the electron energy distribution function over electron impact cross sections.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('boltzmann_hydrogen.mph');

model.modelNode.label('Components');

out = model;
