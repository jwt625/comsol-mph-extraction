function out = model
%
% cu_deposition_suppressor.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Electrodeposition_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('tcd', 'TertiaryCurrentDistributionNernstPlanck', 'geom1', {'cCu' 'cCl' 'cP'});
model.physics('tcd').prop('SpeciesProperties').set('ChargeTransportModel', 'SupportingElectrolyte');

model.multiphysics.create('ndbdg1', 'NonDeformingBoundaryDeformedGeometry', 'geom1', 1);
model.multiphysics('ndbdg1').set('Echem_physics', 'tcd');
model.multiphysics('ndbdg1').selection.all;
model.multiphysics.create('desdg1', 'DeformingElectrodeSurfaceDeformedGeometry', 'geom1', 1);
model.multiphysics('desdg1').set('Echem_physics', 'tcd');
model.multiphysics('desdg1').selection.all;

model.common.create('free1', 'DeformingDomainDeformedGeometry', 'comp1');
model.common('free1').set('smoothingType', 'hyperelastic');
model.common('free1').selection.all;

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/tcd', true);
model.study('std1').feature('cdi').setSolveFor('/multiphysics/ndbdg1', true);
model.study('std1').feature('cdi').setSolveFor('/multiphysics/desdg1', true);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('initialtime', '0');
model.study('std1').feature('time').set('solnum', 'auto');
model.study('std1').feature('time').set('notsolnum', 'auto');
model.study('std1').feature('time').set('outputmap', {});
model.study('std1').feature('time').setSolveFor('/physics/tcd', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/ndbdg1', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/desdg1', true);

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'15e-6' '25e-6'});
model.geom('geom1').feature('r1').set('pos', {'0' '20e-6'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'5e-6' '20e-6'});
model.geom('geom1').run('r2');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').set('intbnd', false);
model.geom('geom1').feature('uni1').selection('input').set({'r1' 'r2'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('fil1', 'Fillet');
model.geom('geom1').feature('fil1').selection('point').set('uni1', 5);
model.geom('geom1').feature('fil1').set('radius', '1e-6');
model.geom('geom1').run('fin');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('T0', '298[K]', 'System temperature');
model.param.set('Erev', '-0.38[V]', 'Reversible potential');
model.param.set('i0_0', '20[A/m^2]', 'Unsuppressed Cu exchange current density');
model.param.set('i0_1', '0.13[A/m^2]', 'Suppressed Cu exchange current density');
model.param.set('phis_cathode', '-0.12[V]+Erev', 'Cathode potential');
model.param.set('alpha_a', '1.5', 'Anodic transfer coefficient');
model.param.set('z_Cu', '2[1]', 'Charge, species Cu');
model.param.set('z_Cl', '-1[1]', 'Charge, species Cl');
model.param.set('D_Cu', '2.65e-6[cm^2/s]', 'Diffusivity, species Cu');
model.param.set('D_Cl', '9e-6[cm^2/s]', 'Diffusivity, species Cl');
model.param.set('D_P', '1e-6[cm^2/s]', 'Diffusivity, species Polyether');
model.param.set('c0_Cu', '0.88[mol/l]', 'Initial concentration, species Cu');
model.param.set('c0_Cl', '20e-6[mol/l]', 'Initial concentration, species Cl');
model.param.set('c0_P', '40e-6[mol/l]', 'Initial concentration, species Polyether');
model.param.set('sigmal', '7.5[S/m]', 'Electrolyte conductivity');
model.param.set('Gamma_Cl', '1.62e-5[mol/m^2]', 'Saturation chloride coverage');
model.param.set('Gamma_P', '9.2e-8[mol/m^2]', 'Saturation suppressor coverage');
model.param.set('kplus_Cl', '20[m^3/mol/s]', 'Chloride adsorption kinetics');
model.param.set('kminus_Cl', '1.5e7[1/m]', 'Chloride deactivation kinetics');
model.param.set('kplus_P', '2500[m^3/mol/s]', 'Suppressor adsorption kinetics');
model.param.set('kminus_P', '1e7[1/m]', 'Suppressor deactivation kinetics');
model.param.set('rho_Cu', '8960[kg/m^3]', 'Density of copper');
model.param.set('Mw_Cu', '0.06355[kg/mol]', 'Molar mass of copper');

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('i0ref', 'i0_0*(1-tcd.theta_es1_P)+i0_1*tcd.theta_es1_P', 'Reference exchange current density');
model.variable('var1').set('R_Cl', '-Gamma_Cl*kplus_Cl*cCl*(1-tcd.theta_es1_Cl)', 'Reaction rate of Cl');
model.variable('var1').set('R_P', '-Gamma_P*kplus_P*cP*(tcd.theta_es1_Cl-tcd.theta_es1_P)', 'Reaction rate of P');
model.variable('var1').set('Rad_Cl', 'Gamma_Cl*(kplus_Cl*cCl*(1-tcd.theta_es1_Cl)-kminus_Cl*tcd.theta_es1_Cl*tcd.vb_Cu)', 'Reaction rate of adsorbing-desorbing species, Cl');
model.variable('var1').set('Rad_P', 'Gamma_P*(kplus_P*cP*(tcd.theta_es1_Cl-tcd.theta_es1_P)-kminus_P*tcd.theta_es1_P*tcd.vb_Cu)', 'Reaction rate of adsorbing-desorbing species, P');

model.physics('tcd').feature('sp1').setIndex('z', 'z_Cu', 0);
model.physics('tcd').feature('sp1').setIndex('z', 'z_Cl', 1);
model.physics('tcd').feature('ice1').set('D_cCu', {'D_Cu' '0' '0' '0' 'D_Cu' '0' '0' '0' 'D_Cu'});
model.physics('tcd').feature('ice1').set('D_cCl', {'D_Cl' '0' '0' '0' 'D_Cl' '0' '0' '0' 'D_Cl'});
model.physics('tcd').feature('ice1').set('D_cP', {'D_P' '0' '0' '0' 'D_P' '0' '0' '0' 'D_P'});
model.physics('tcd').feature('ice1').set('sigmal_mat', 'userdef');
model.physics('tcd').feature('ice1').set('sigmal', {'sigmal' '0' '0' '0' 'sigmal' '0' '0' '0' 'sigmal'});
model.physics('tcd').create('es1', 'ElectrodeSurface', 1);
model.physics('tcd').feature('es1').selection.set([5 6 8]);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(1);
model.selection('sel1').label('Cathode');
model.selection('sel1').set([5 6 8]);

model.physics('tcd').feature('es1').selection.named('sel1');
model.physics('tcd').feature('es1').setIndex('Species', 's1', 0, 0);
model.physics('tcd').feature('es1').setIndex('rhos', 8960, 0, 0);
model.physics('tcd').feature('es1').setIndex('Ms', 0.06355, 0, 0);
model.physics('tcd').feature('es1').setIndex('Species', 's1', 0, 0);
model.physics('tcd').feature('es1').setIndex('rhos', 8960, 0, 0);
model.physics('tcd').feature('es1').setIndex('Ms', 0.06355, 0, 0);
model.physics('tcd').feature('es1').setIndex('Species', 'Cu', 0, 0);
model.physics('tcd').feature('es1').setIndex('rhos', 'rho_Cu', 0, 0);
model.physics('tcd').feature('es1').setIndex('Ms', 'Mw_Cu', 0, 0);
model.physics('tcd').feature('es1').set('Gamma', 'Gamma_Cl');
model.physics('tcd').feature('es1').setIndex('AdsorbingDesorbingSpecies', 'ads1', 0, 0);
model.physics('tcd').feature('es1').setIndex('Sigma', 1, 0, 0);
model.physics('tcd').feature('es1').setIndex('AdsorbingDesorbingSpecies', 'ads1', 0, 0);
model.physics('tcd').feature('es1').setIndex('Sigma', 1, 0, 0);
model.physics('tcd').feature('es1').setIndex('AdsorbingDesorbingSpecies', 'ads2', 1, 0);
model.physics('tcd').feature('es1').setIndex('Sigma', 1, 1, 0);
model.physics('tcd').feature('es1').setIndex('Sigma', 1, 1, 0);
model.physics('tcd').feature('es1').setIndex('AdsorbingDesorbingSpecies', 'ads2', 1, 0);
model.physics('tcd').feature('es1').setIndex('Sigma', 1, 1, 0);
model.physics('tcd').feature('es1').setIndex('AdsorbingDesorbingSpecies', 'Cl', 0, 0);
model.physics('tcd').feature('es1').setIndex('AdsorbingDesorbingSpecies', 'P', 1, 0);
model.physics('tcd').feature('es1').setIndex('Sigma', 'Gamma_Cl/Gamma_P', 1, 0);
model.physics('tcd').feature('es1').set('phisext0', 'phis_cathode');
model.physics('tcd').feature('es1').feature('er1').set('nm', 2);
model.physics('tcd').feature('es1').feature('er1').setIndex('Vi0', -1, 0);
model.physics('tcd').feature('es1').feature('er1').setIndex('Vib', 1, 0, 0);
model.physics('tcd').feature('es1').feature('er1').set('Eeq_ref', 'Erev');
model.physics('tcd').feature('es1').feature('er1').set('i0_ref', 'i0ref');
model.physics('tcd').feature('es1').feature('er1').set('alphaa', 'alpha_a');
model.physics('tcd').feature('es1').create('nfr1', 'NonFaradaicReactions', 1);
model.physics('tcd').feature('es1').feature('nfr1').setIndex('species', true, 1);
model.physics('tcd').feature('es1').feature('nfr1').setIndex('J0', 'R_Cl', 1);
model.physics('tcd').feature('es1').feature('nfr1').setIndex('species', true, 2);
model.physics('tcd').feature('es1').feature('nfr1').setIndex('J0', 'R_P', 2);
model.physics('tcd').feature('es1').feature('nfr1').setIndex('Rad', 'Rad_Cl', 0, 0);
model.physics('tcd').feature('es1').feature('nfr1').setIndex('Rad', 'Rad_P', 1, 0);
model.physics('tcd').create('eip1', 'ElectrolytePotential', 1);
model.physics('tcd').feature('eip1').selection.set([4]);
model.physics('tcd').create('conc1', 'Concentration', 1);
model.physics('tcd').feature('conc1').selection.set([4]);
model.physics('tcd').feature('conc1').setIndex('species', true, 0);
model.physics('tcd').feature('conc1').setIndex('c0', 'c0_Cu', 0);
model.physics('tcd').feature('conc1').setIndex('species', true, 1);
model.physics('tcd').feature('conc1').setIndex('c0', 'c0_Cl', 1);
model.physics('tcd').feature('conc1').setIndex('species', true, 2);
model.physics('tcd').feature('conc1').setIndex('c0', 'c0_P', 2);
model.physics('tcd').create('sym1', 'Symmetry', 1);
model.physics('tcd').feature('sym1').selection.set([2]);
model.physics('tcd').feature('init1').setIndex('initc', 'c0_Cu', 0);
model.physics('tcd').feature('init1').setIndex('initc', 'c0_Cl', 1);
model.physics('tcd').feature('init1').setIndex('initc', 'c0_P', 2);

model.multiphysics('ndbdg1').set('BoundaryCondition', 'ZeroNormalDisplacement');

model.common('cminpt').set('modified', {'temperature' 'T0'});

model.mesh('mesh1').autoMeshSize(2);
model.mesh('mesh1').run;

model.study('std1').feature('cdi').setEntry('activate', 'frame:material1', false);
model.study('std1').feature('time').set('tunit', 'min');
model.study('std1').feature('time').set('tlist', 'range(0,0.5,14.5)');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_material_disp').set('scaleval', '2.6031692223134476E-7');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_material_disp').set('scaleval', '2.6031692223134476E-7');
model.sol('sol1').feature('v2').feature('comp1_material_lm_nv').set('out', 'off');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.5,14.5)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventout', true);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('mumpsalloc', 1.4);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'dset1');
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('hasspacevars', true);
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 30, 0);
model.result('pg1').label('Electrolyte Potential (tcd)');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'phil'});
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').set('expr', {'tcd.Ilr' 'tcd.Ilz'});
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('recover', 'pprint');
model.result('pg1').feature('str1').set('pointtype', 'arrow');
model.result('pg1').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg1').feature('str1').set('color', 'gray');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'rev1');
model.result('pg2').setIndex('looplevel', 30, 0);
model.result('pg2').label('Electrolyte Potential, 3D (tcd)');
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('expr', {'phil'});
model.result('pg2').create('str1', 'Streamline');
model.result('pg2').feature('str1').set('revcoordsys', 'cylindrical');
model.result('pg2').feature('str1').set('expr', {'tcd.Ilr' 'tcd.Ilphi' 'tcd.Ilz'});
model.result('pg2').feature('str1').set('pointtype', 'arrow');
model.result('pg2').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg2').feature('str1').set('color', 'gray');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 30, 0);
model.result('pg3').label('Electrolyte Current Density (tcd)');
model.result('pg3').create('str1', 'Streamline');
model.result('pg3').feature('str1').set('expr', {'tcd.Ilr' 'tcd.Ilz'});
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('recover', 'pprint');
model.result('pg3').feature('str1').set('pointtype', 'arrow');
model.result('pg3').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('str1').set('color', 'gray');
model.result('pg3').feature('str1').create('col1', 'Color');
model.result('pg3').feature('str1').feature('col1').set('expr', 'root.comp1.tcd.IlMag');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'rev1');
model.result('pg4').setIndex('looplevel', 30, 0);
model.result('pg4').label('Electrolyte Current Density, 3D (tcd)');
model.result('pg4').create('str1', 'Streamline');
model.result('pg4').feature('str1').set('revcoordsys', 'cylindrical');
model.result('pg4').feature('str1').set('expr', {'tcd.Ilr' 'tcd.Ilphi' 'tcd.Ilz'});
model.result('pg4').feature('str1').set('pointtype', 'arrow');
model.result('pg4').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg4').feature('str1').set('color', 'gray');
model.result('pg4').feature('str1').create('col1', 'Color');
model.result('pg4').feature('str1').feature('col1').set('expr', 'root.comp1.tcd.IlMag');
model.result('pg3').create('line1', 'Line');
model.result('pg3').feature('line1').set('expr', {'abs(tcd.itot)'});
model.result('pg3').feature('line1').set('linetype', 'tube');
model.result('pg3').feature('line1').set('inherittubescale', false);
model.result('pg3').feature('line1').set('inheritplot', 'str1');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'abs(tcd.itot)'});
model.result('pg4').feature('surf1').set('inheritplot', 'str1');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 30, 0);
model.result('pg5').label('Electrode Potential with Respect to Ground (tcd)');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'rev1');
model.result('pg6').setIndex('looplevel', 30, 0);
model.result('pg6').label('Electrode Potential with Respect to Ground, 3D (tcd)');
model.result('pg5').create('line1', 'Line');
model.result('pg5').feature('line1').set('expr', {'tcd.phisext'});
model.result('pg5').feature('line1').set('linetype', 'tube');
model.result('pg5').feature('line1').set('inherittubescale', false);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'tcd.phisext'});
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 30, 0);
model.result('pg7').label('Electrode Potential vs. Adjacent Reference (tcd)');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'rev1');
model.result('pg8').setIndex('looplevel', 30, 0);
model.result('pg8').label('Electrode Potential vs. Adjacent Reference, 3D (tcd)');
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('expr', {'tcd.Ilr' 'tcd.Ilz'});
model.result('pg7').feature('str1').set('posmethod', 'uniform');
model.result('pg7').feature('str1').set('recover', 'pprint');
model.result('pg7').feature('str1').set('pointtype', 'arrow');
model.result('pg7').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg7').feature('str1').set('color', 'gray');
model.result('pg8').create('str1', 'Streamline');
model.result('pg8').feature('str1').set('revcoordsys', 'cylindrical');
model.result('pg8').feature('str1').set('expr', {'tcd.Ilr' 'tcd.Ilphi' 'tcd.Ilz'});
model.result('pg8').feature('str1').set('pointtype', 'arrow');
model.result('pg8').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg8').feature('str1').set('color', 'gray');
model.result('pg7').create('line1', 'Line');
model.result('pg7').feature('line1').set('expr', {'tcd.Evsref'});
model.result('pg7').feature('line1').set('linetype', 'tube');
model.result('pg7').feature('line1').set('inherittubescale', false);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'tcd.Evsref'});
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').set('data', 'dset1');
model.result('pg9').setIndex('looplevel', 30, 0);
model.result('pg9').label('Total Electrode Thickness Change (tcd)');
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').set('data', 'rev1');
model.result('pg10').setIndex('looplevel', 30, 0);
model.result('pg10').label('Total Electrode Thickness Change, 3D (tcd)');
model.result('pg9').create('line1', 'Line');
model.result('pg9').feature('line1').set('expr', {'tcd.sbtot'});
model.result('pg9').feature('line1').set('linetype', 'tube');
model.result('pg9').feature('line1').set('inherittubescale', false);
model.result('pg9').feature('line1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', {'tcd.sbtot'});
model.result('pg10').feature('surf1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result.create('pg11', 'PlotGroup2D');
model.result('pg11').set('data', 'dset1');
model.result('pg11').setIndex('looplevel', 30, 0);
model.result('pg11').label('Concentration, Cu (tcd)');
model.result('pg11').set('titletype', 'custom');
model.result('pg11').set('prefixintitle', 'Species Cu:');
model.result('pg11').set('expressionintitle', false);
model.result('pg11').set('typeintitle', true);
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('expr', {'cCu'});
model.result('pg11').create('str1', 'Streamline');
model.result('pg11').feature('str1').set('expr', {'tcd.tflux_cCur' 'tcd.tflux_cCuz'});
model.result('pg11').feature('str1').set('posmethod', 'uniform');
model.result('pg11').feature('str1').set('recover', 'pprint');
model.result('pg11').feature('str1').set('pointtype', 'arrow');
model.result('pg11').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg11').feature('str1').set('color', 'gray');
model.result.dataset.create('rev2', 'Revolve2D');
model.result.dataset('rev2').set('data', 'dset1');
model.result.dataset('rev2').set('revangle', 225);
model.result.dataset('rev2').set('startangle', -90);
model.result.dataset('rev2').set('hasspacevars', false);
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').set('data', 'rev2');
model.result('pg12').setIndex('looplevel', 30, 0);
model.result('pg12').label('Concentration, Cu, 3D (tcd)');
model.result('pg12').create('surf1', 'Surface');
model.result('pg12').feature('surf1').set('expr', {'cCu'});
model.result('pg12').set('titletype', 'custom');
model.result('pg12').set('typeintitle', false);
model.result('pg12').set('prefixintitle', 'Species Cu:');
model.result('pg12').set('expressionintitle', false);
model.result.create('pg13', 'PlotGroup2D');
model.result('pg13').set('data', 'dset1');
model.result('pg13').setIndex('looplevel', 30, 0);
model.result('pg13').label('Concentration, Cl (tcd)');
model.result('pg13').set('titletype', 'custom');
model.result('pg13').set('prefixintitle', 'Species Cl:');
model.result('pg13').set('expressionintitle', false);
model.result('pg13').set('typeintitle', true);
model.result('pg13').create('surf1', 'Surface');
model.result('pg13').feature('surf1').set('expr', {'cCl'});
model.result('pg13').create('str1', 'Streamline');
model.result('pg13').feature('str1').set('expr', {'tcd.tflux_cClr' 'tcd.tflux_cClz'});
model.result('pg13').feature('str1').set('posmethod', 'uniform');
model.result('pg13').feature('str1').set('recover', 'pprint');
model.result('pg13').feature('str1').set('pointtype', 'arrow');
model.result('pg13').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg13').feature('str1').set('color', 'gray');
model.result.create('pg14', 'PlotGroup3D');
model.result('pg14').set('data', 'rev2');
model.result('pg14').setIndex('looplevel', 30, 0);
model.result('pg14').label('Concentration, Cl, 3D (tcd)');
model.result('pg14').create('surf1', 'Surface');
model.result('pg14').feature('surf1').set('expr', {'cCl'});
model.result('pg14').set('titletype', 'custom');
model.result('pg14').set('typeintitle', false);
model.result('pg14').set('prefixintitle', 'Species Cl:');
model.result('pg14').set('expressionintitle', false);
model.result.create('pg15', 'PlotGroup2D');
model.result('pg15').set('data', 'dset1');
model.result('pg15').setIndex('looplevel', 30, 0);
model.result('pg15').label('Concentration, P (tcd)');
model.result('pg15').set('titletype', 'custom');
model.result('pg15').set('prefixintitle', 'Species P:');
model.result('pg15').set('expressionintitle', false);
model.result('pg15').set('typeintitle', true);
model.result('pg15').create('surf1', 'Surface');
model.result('pg15').feature('surf1').set('expr', {'cP'});
model.result('pg15').create('str1', 'Streamline');
model.result('pg15').feature('str1').set('expr', {'tcd.tflux_cPr' 'tcd.tflux_cPz'});
model.result('pg15').feature('str1').set('posmethod', 'uniform');
model.result('pg15').feature('str1').set('recover', 'pprint');
model.result('pg15').feature('str1').set('pointtype', 'arrow');
model.result('pg15').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg15').feature('str1').set('color', 'gray');
model.result.create('pg16', 'PlotGroup3D');
model.result('pg16').set('data', 'rev2');
model.result('pg16').setIndex('looplevel', 30, 0);
model.result('pg16').label('Concentration, P, 3D (tcd)');
model.result('pg16').create('surf1', 'Surface');
model.result('pg16').feature('surf1').set('expr', {'cP'});
model.result('pg16').set('titletype', 'custom');
model.result('pg16').set('typeintitle', false);
model.result('pg16').set('prefixintitle', 'Species P:');
model.result('pg16').set('expressionintitle', false);
model.result.create('pg17', 'PlotGroup2D');
model.result('pg17').set('data', 'dset1');
model.result('pg17').setIndex('looplevel', 30, 0);
model.result('pg17').label('Deformed Geometry');
model.result('pg17').create('mesh1', 'Mesh');
model.result('pg17').feature('mesh1').set('meshdomain', 'surface');
model.result('pg17').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg17').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg17').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg17').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg17').feature('mesh1').feature('sel1').selection.set([1]);
model.result('pg17').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg17').feature('mesh1').set('qualexpr', 'comp1.material.relVol');
model.result('pg17').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg1').run;
model.result.dataset.create('mir1', 'Mirror3D');
model.result.dataset('mir1').set('quickplane', 'xy');
model.result('pg14').run;
model.result('pg14').set('data', 'mir1');
model.result('pg14').create('con1', 'Contour');
model.result('pg14').feature('con1').set('expr', 'cCl');
model.result('pg14').feature('con1').set('descr', 'Concentration');
model.result('pg14').feature('con1').set('coloring', 'uniform');
model.result('pg14').feature('con1').set('color', 'black');
model.result('pg14').feature('con1').set('colorlegend', false);
model.result('pg14').run;
model.result.create('pg18', 'PlotGroup1D');
model.result('pg18').run;
model.result('pg18').label('Deposition Thickness');
model.result('pg18').set('titletype', 'label');
model.result('pg18').create('lngr1', 'LineGraph');
model.result('pg18').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg18').feature('lngr1').set('linewidth', 'preference');
model.result('pg18').feature('lngr1').selection.set([5]);
model.result('pg18').feature('lngr1').set('expr', 'tcd.sbtot');
model.result('pg18').feature('lngr1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg18').feature('lngr1').set('xdata', 'expr');
model.result('pg18').feature('lngr1').set('xdataexpr', 'z');
model.result('pg18').feature('lngr1').set('xdataunit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg18').feature('lngr1').set('xdatadescractive', true);
model.result('pg18').feature('lngr1').set('xdatadescr', 'Distance from the centre along vertical side of through-hole via');
model.result('pg18').run;
model.result('pg18').run;
model.result.duplicate('pg19', 'pg18');
model.result('pg19').run;
model.result('pg19').label('Surface Coverage, Cl (tcd)');
model.result('pg19').run;
model.result('pg19').feature('lngr1').set('expr', 'tcd.theta_es1_Cl');
model.result('pg19').run;

model.title('Copper Deposition in a Through-Hole Via');

model.description(['This model demonstrates the "butterfly" filling mechanism of a through-hole via during copper electrodeposition. Due to the presence of halide-suppressor additives in the electrolyte, electrodeposition occurs selectively at the center of the via, thus avoiding the formation of electrolyte enclosures.' newline  newline 'The Tertiary Current Distribution, Nernst Planck interface in combination with Deformed Geometry is used to track the moving boundary of the cathode surface. The model includes mass balances for electrolyte species and the adsorbed additives on the electrode surface, as well as an electrolyte charge balance assuming the presence of a supporting electrolyte.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('cu_deposition_suppressor.mph');

model.modelNode.label('Components');

out = model;
