function out = model
%
% continuous_casting_ale.m
%
% Model exported on May 26 2025, 21:29 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Thermal_Processing');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'WeaklyCompressible');
model.physics.create('ht', 'HeatTransferInFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics('ht').prop('ShapeProperty').set('order_temperature', '1');

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 2);
model.multiphysics('nitf1').set('Fluid_physics', 'spf');
model.multiphysics('nitf1').set('Heat_physics', 'ht');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/nitf1', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('T_m', '1356[K]', 'Melting temperature');
model.param.set('dH', '205[kJ/kg]', 'Latent heat of solidification');
model.param.set('Cp_s', '380[J/(kg*K)]', 'Heat capacity at constant pressure, solid phase');
model.param.set('Cp_l', '530[J/(kg*K)]', 'Heat capacity at constant pressure, liquid phase');
model.param.set('T_in', '1473[K]', 'Melt inlet temperature');
model.param.set('v_cast', '-1.6[mm/s]', 'Casting speed');
model.param.set('h_br', '25[W/(m^2*K)]', 'Heat transfer coefficient, brake ring');
model.param.set('h_mold', '800[W/(m^2*K)]', 'Heat transfer coefficient, mold');
model.param.set('h_air', '10[W/(m^2*K)]', 'Heat transfer coefficient, air exposure');
model.param.set('eps_s', '0.8', '             Surface emissivity, air exposure');

model.func.create('pw1', 'Piecewise');
model.func('pw1').model('comp1');
model.func('pw1').set('smooth', 'cont');
model.func('pw1').set('smoothzone', 0.01);
model.func('pw1').set('pieces', {'-1.58' '-0.5725' 'h_air'; '-0.5725' '-0.205' 'h_mold'; '-0.205' '-0.165' 'h_br'});
model.func('pw1').set('argunit', 'm');
model.func('pw1').set('fununit', 'W/m^2/K');
model.func.create('pw2', 'Piecewise');
model.func('pw2').model('comp1');
model.func('pw2').set('smooth', 'cont');
model.func('pw2').set('smoothzone', 0.01);
model.func('pw2').set('pieces', {'-1.58' '-0.5725' 'eps_s'; '-0.5725' '0' '0'});
model.func('pw2').set('argunit', 'm');
model.func('pw2').set('fununit', '1');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').set('h_rod', 'pw1(Z)');
model.variable('var1').descr('h_rod', 'Heat transfer coefficient along the rod');
model.variable('var1').set('eps_rod', 'pw2(Z)');
model.variable('var1').descr('eps_rod', 'Surface emissivity along the rod');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', [0.065 0.1]);
model.geom('geom1').feature('r1').set('pos', [0 -0.1]);
model.geom('geom1').run('fin');
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', [0.0625 0.025]);
model.geom('geom1').feature('r2').set('pos', [0 -0.125]);
model.geom('geom1').run('fin');
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', [0.11575 1.4075]);
model.geom('geom1').feature('r3').set('pos', [0 -1.5725]);
model.geom('geom1').feature('r3').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('r3').setIndex('layer', 0.04, 0);
model.geom('geom1').feature('r3').set('layerbottom', false);
model.geom('geom1').feature('r3').set('layertop', true);
model.geom('geom1').run('fin');
model.geom('geom1').run('r3');
model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'table');
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('pol1').setIndex('table', -0.125, 0, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 0);
model.geom('geom1').feature('pol1').setIndex('table', -0.165, 1, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0.11575, 2, 0);
model.geom('geom1').feature('pol1').setIndex('table', -0.165, 2, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0.0625, 3, 0);
model.geom('geom1').feature('pol1').setIndex('table', -0.125, 3, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 4, 0);
model.geom('geom1').feature('pol1').setIndex('table', -0.125, 4, 1);
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Solid Metal Alloy');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', {'0.0434'});
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'200'});
model.material('mat1').propertyGroup('def').set('density', {'8500'});
model.material('mat1').propertyGroup('def').set('heatcapacity', {'Cp_s'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Liquid Metal Alloy');
model.material('mat2').selection.set([2 3 4 5]);
model.material('mat2').propertyGroup('def').set('dynamicviscosity', {'0.0434'});
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'200'});
model.material('mat2').propertyGroup('def').set('density', {'8500'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'Cp_l'});

model.common.create('free1', 'DeformingDomainDeformedGeometry', 'comp1');
model.common('free1').selection.all;
model.common.create('sym1', 'SymmetryDeformedGeometry', 'comp1');
model.common('sym1').selection.set([1 3 5 7 9]);
model.common.create('pnmd1', 'PrescribedNormalMeshDisplacementDeformedGeometry', 'comp1');
model.common('pnmd1').selection.set([16 17]);
model.common.create('fix1', 'FixedBoundaryDeformedGeometry', 'comp1');
model.common('fix1').selection.set([2 11 12 13 14 15]);

model.physics('spf').selection.set([2 3 4 5]);
model.physics('spf').feature('init1').set('u_init', {'0' '0' 'v_cast'});
model.physics('spf').create('inl1', 'InletBoundary', 1);
model.physics('spf').feature('inl1').selection.set([11]);
model.physics('spf').feature('inl1').set('BoundaryCondition', 'Pressure');
model.physics('spf').create('out1', 'OutletBoundary', 1);
model.physics('spf').feature('out1').selection.set([4]);
model.physics('spf').feature('out1').set('BoundaryCondition', 'Velocity');
model.physics('spf').feature('out1').set('ComponentWise', 'VelocityFieldComponentWise');
model.physics('spf').feature('out1').set('u0', {'0' '0' 'v_cast'});

model.common.create('ampr1', 'AmbientProperties', 'comp1');
model.common('ampr1').set('T_amb', '300[K]');

model.physics('ht').feature('init1').set('Tinit', 'T_in');
model.physics('ht').create('solidtrm1', 'SolidWithTranslationalMotion', 2);
model.physics('ht').feature('solidtrm1').selection.set([1]);
model.physics('ht').feature('solidtrm1').feature('trm1').set('u', {'0' '0' 'v_cast'});
model.physics('ht').create('ifl1', 'Inflow', 1);
model.physics('ht').feature('ifl1').selection.set([11]);
model.physics('ht').feature('ifl1').set('Tustr', 'T_in');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf1').selection.set([16 17]);
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 'h_rod');
model.physics('ht').feature('hf1').set('Text_src', 'root.comp1.ampr1.T_amb');
model.physics('ht').create('sar1', 'SurfaceToAmbientRadiation', 1);
model.physics('ht').feature('sar1').selection.set([16 17]);
model.physics('ht').feature('sar1').set('epsilon_rad_mat', 'userdef');
model.physics('ht').feature('sar1').set('epsilon_rad', 'eps_rod');
model.physics('ht').feature('sar1').set('Tamb_src', 'root.comp1.ampr1.T_amb');
model.physics('ht').create('pci1', 'PhaseChangeInterface', 1);
model.physics('ht').feature('pci1').selection.set([4]);
model.physics('ht').feature('pci1').set('Tpc', 'T_m');
model.physics('ht').feature('pci1').set('L', 'dH');
model.physics('ht').feature('pci1').set('SolidSideType', 'Downside');

model.mesh('mesh1').autoMeshSize(3);
model.mesh('mesh1').run;

model.study('std1').feature('stat').setEntry('activate', 'spf', false);
model.study('std1').feature('stat').setEntry('activate', 'frame:material1', false);
model.study('std1').feature('stat').setEntry('activateCoupling', 'nitf1', false);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('tunit', 'h');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2 3 4 5]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2 3 4 5]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_material_disp').set('scaleval', '2.827223019147941E-4');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'sor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_ht_T_lm'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.4);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.6);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'soru');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_ht_T_lm'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('seconditer', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.4);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.6);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_material_disp').set('scaleval', '2.827223019147941E-4');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.1,1)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.005);
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_ht_T_lm' 'global' 'comp1_material_disp' 'global' 'comp1_material_lm_nv' 'global' 'comp1_nitf1_Uave' 'global' 'comp1_p' 'scaled'  ...
'comp1_T' 'global' 'comp1_u' 'global'});
model.sol('sol1').feature('t1').set('atol', {'comp1_ht_T_lm' '1e-3' 'comp1_material_disp' '1e-3' 'comp1_material_lm_nv' '1e-3' 'comp1_nitf1_Uave' '1e-3' 'comp1_p' '1e-3'  ...
'comp1_T' '1e-3' 'comp1_u' '1e-3'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_ht_T_lm' 'factor' 'comp1_material_disp' 'factor' 'comp1_material_lm_nv' 'factor' 'comp1_nitf1_Uave' 'factor' 'comp1_p' 'factor'  ...
'comp1_T' 'factor' 'comp1_u' 'factor'});
model.sol('sol1').feature('t1').set('atolfactor', {'comp1_ht_T_lm' '0.1' 'comp1_material_disp' '0.1' 'comp1_material_lm_nv' '0.1' 'comp1_nitf1_Uave' '0.1' 'comp1_p' '1'  ...
'comp1_T' '0.1' 'comp1_u' '0.1'});
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('rhoinf', 0.5);
model.sol('sol1').feature('t1').set('predictor', 'constant');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.01');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('se1', 'Segregated');
model.sol('sol1').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_material_disp' 'comp1_material_lm_nv'});
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subjtech', 'once');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').label('Material Frame Variables');
model.sol('sol1').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_u' 'comp1_p'});
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subjtech', 'once');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').label('Velocity u, Pressure p');
model.sol('sol1').feature('t1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('segvar', {'comp1_T' 'comp1_ht_T_lm'});
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subjtech', 'once');
model.sol('sol1').feature('t1').create('d2', 'Direct');
model.sol('sol1').feature('t1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d2').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('linsolver', 'd2');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').label('Temperature');
model.sol('sol1').feature('t1').feature('se1').set('ntolfact', 0.5);
model.sol('sol1').feature('t1').feature('se1').set('maxsegiter', 10);
model.sol('sol1').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol1').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol1').feature('t1').feature('se1').set('segaaccdelay', 0);
model.sol('sol1').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol1').feature('t1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('t1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 100);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').create('i2', 'Iterative');
model.sol('sol1').feature('t1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'sor');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_ht_T_lm'});
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('relax', 0.4);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.6);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'soru');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_ht_T_lm'});
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('seconditer', 2);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('relax', 0.4);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.6);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('damp', '0.9');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Velocity (spf)');
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 11, 0);
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Pressure (spf)');
model.result('pg2').set('dataisaxisym', 'off');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 11, 0);
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').label('Contour');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('expr', 'p');
model.result('pg2').feature('con1').set('number', 40);
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('smooth', 'internal');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('data', 'parent');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').label('Revolution 2D');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset1');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Velocity, 3D (spf)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'rev1');
model.result('pg3').setIndex('looplevel', 11, 0);
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond1/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Temperature (ht)');
model.result('pg4').set('dataisaxisym', 'off');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 11, 0);
model.result('pg4').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('solutionparams', 'parent');
model.result('pg4').feature('surf1').set('expr', 'T');
model.result('pg4').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Temperature and Fluid Flow (nitf1)');
model.result('pg5').set('dataisaxisym', 'off');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 11, 0);
model.result('pg5').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond4/pcond4/pcond1/pg2');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').label('Fluid Temperature');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('expr', 'nitf1.T');
model.result('pg5').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg5').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg5').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg5').feature('surf1').feature('sel1').selection.set([2 3 4 5]);
model.result('pg5').feature.create('surf2', 'Surface');
model.result('pg5').feature('surf2').label('Solid Temperature');
model.result('pg5').feature('surf2').set('showsolutionparams', 'on');
model.result('pg5').feature('surf2').set('solutionparams', 'parent');
model.result('pg5').feature('surf2').set('expr', 'nitf1.T');
model.result('pg5').feature('surf2').set('smooth', 'internal');
model.result('pg5').feature('surf2').set('showsolutionparams', 'on');
model.result('pg5').feature('surf2').set('data', 'parent');
model.result('pg5').feature('surf2').feature.create('sel1', 'Selection');
model.result('pg5').feature('surf2').feature('sel1').selection.geom('geom1', 2);
model.result('pg5').feature('surf2').feature('sel1').selection.set([1]);
model.result('pg5').feature('surf2').set('inheritplot', 'surf1');
model.result('pg5').feature.create('arws1', 'ArrowSurface');
model.result('pg5').feature('arws1').label('Fluid Flow');
model.result('pg5').feature('arws1').set('showsolutionparams', 'on');
model.result('pg5').feature('arws1').set('solutionparams', 'parent');
model.result('pg5').feature('arws1').set('expr', {'nitf1.ur' 'nitf1.uz'});
model.result('pg5').feature('arws1').set('xnumber', 30);
model.result('pg5').feature('arws1').set('ynumber', 30);
model.result('pg5').feature('arws1').set('arrowtype', 'cone');
model.result('pg5').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('arws1').set('showsolutionparams', 'on');
model.result('pg5').feature('arws1').set('data', 'parent');
model.result('pg5').feature('arws1').feature.create('col1', 'Color');
model.result('pg5').feature('arws1').feature('col1').set('showcolordata', 'off');
model.result('pg5').feature('arws1').feature.create('filt1', 'Filter');
model.result('pg5').feature('arws1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 11, 0);
model.result('pg6').label('Deformed Geometry');
model.result('pg6').create('mesh1', 'Mesh');
model.result('pg6').feature('mesh1').set('meshdomain', 'surface');
model.result('pg6').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg6').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg6').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg6').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg6').feature('mesh1').feature('sel1').selection.set([1 2 3 4 5]);
model.result('pg6').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg6').feature('mesh1').set('qualexpr', 'comp1.material.relVol');
model.result('pg6').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').set('unit', 'mm/s');

model.view('view1').axis.set('xmin', -0.3);
model.view('view1').axis.set('xmax', 0.4);
model.view('view1').axis.set('ymin', -0.6);
model.view('view1').axis.set('ymax', 0);
model.view('view1').set('locked', true);

model.result('pg1').run;
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').set('posmethod', 'magnitude');
model.result('pg1').feature('str1').set('mdist', [0.004 0.08]);
model.result('pg1').feature('str1').set('pointtype', 'arrow');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg3').run;
model.result('pg4').run;
model.result.duplicate('pg7', 'pg4');
model.result('pg7').run;
model.result('pg7').label('Temperature and Streamlines');
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('posmethod', 'magnitude');
model.result('pg7').feature('str1').set('mdist', [0.004 0.08]);
model.result('pg7').feature('str1').set('pointtype', 'arrow');
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').run;
model.result('pg8').label('Conductive Heat Flux');
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', 'ht.dfluxMag');
model.result('pg8').feature('surf1').set('descr', 'Conductive heat flux magnitude');
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').create('str1', 'Streamline');
model.result('pg8').feature('str1').set('posmethod', 'magnitude');
model.result('pg8').feature('str1').set('mdist', [0.004 0.08]);
model.result('pg8').feature('str1').set('pointtype', 'arrow');
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Conductive Heat Flux Through Outer Boundaries');
model.result('pg9').setIndex('looplevelinput', 'last', 0);
model.result('pg9').set('titletype', 'manual');
model.result('pg9').set('title', 'Conductive heat flux through outer boundaries');
model.result('pg9').set('xlabelactive', true);
model.result('pg9').set('xlabel', 'z-coordinate (m)');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Normal conductive heat flux (W/m<sup>2</sup>)');
model.result('pg9').create('lngr1', 'LineGraph');
model.result('pg9').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg9').feature('lngr1').set('linewidth', 'preference');
model.result('pg9').feature('lngr1').selection.set([16 17]);
model.result('pg9').feature('lngr1').set('expr', 'ht.ndflux');
model.result('pg9').feature('lngr1').set('descr', 'Normal conductive heat flux');
model.result('pg9').feature('lngr1').set('xdataexpr', 'z');
model.result('pg9').feature('lngr1').set('xdatadescr', 'z-coordinate');
model.result('pg9').feature('lngr1').set('resolution', 'norefine');
model.result('pg9').run;
model.result.dataset.create('rev2', 'Revolve2D');
model.result.dataset('rev2').set('startangle', -90);
model.result.dataset('rev2').set('revangle', 225);
model.result.dataset('rev2').set('data', 'dset1');
model.result.dataset('rev2').set('defaultPlotIDs', {'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond1/pg1|spf' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pcond2/pg2|ht' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pcond2/pg3|ht' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pcond2/pg4|ht'});
model.result.dataset('rev2').label('Revolution 2D 1');
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').label('Temperature (ht) 1');
model.result('pg10').set('data', 'rev2');
model.result('pg10').setIndex('looplevel', 11, 0);
model.result('pg10').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pcond2/pg2');
model.result('pg10').feature.create('vol1', 'Volume');
model.result('pg10').feature('vol1').set('solutionparams', 'parent');
model.result('pg10').feature('vol1').set('expr', 'T');
model.result('pg10').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg10').feature('vol1').set('smooth', 'internal');
model.result('pg10').feature('vol1').set('showsolutionparams', 'on');
model.result('pg10').feature('vol1').set('data', 'parent');
model.result('pg10').label('Temperature (ht) 1');
model.result('pg10').run;
model.result('pg10').label('Temperature 3D (ht)');
model.result('pg3').run;

model.title(['Continuous Casting ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Arbitrary Lagrangian' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Eulerian Method']);

model.description(['This example describes the cooling and solidification, from melt to solid metal, in a continuous casting process. The model includes nonisothermal properties, temperature distribution, flow field, and phase change. This example uses the arbitrary Lagrangian' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Eulerian method for modeling the phase change.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('continuous_casting_ale.mph');

model.modelNode.label('Components');

out = model;
