function out = model
%
% power_switch_multibody.m
%
% Model exported on May 26 2025, 21:24 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Electromagnetics_and_Mechanics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mf', 'InductionCurrents', 'geom1');
model.physics('mf').model('comp1');
model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('ccc', 'CoilCurrentCalculation');
model.study('std1').feature('ccc').set('CoilName', '1');
model.study('std1').feature('ccc').set('outputmap', {});
model.study('std1').feature('ccc').set('ngenAUX', '1');
model.study('std1').feature('ccc').set('goalngenAUX', '1');
model.study('std1').feature('ccc').set('ngenAUX', '1');
model.study('std1').feature('ccc').set('goalngenAUX', '1');
model.study('std1').feature('ccc').setSolveFor('/physics/mf', true);
model.study('std1').feature('ccc').setSolveFor('/physics/mbd', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('l1', '2[cm]', 'Geometrical parameter l1');
model.param.set('l2', '2[cm]', 'Geometrical parameter l2');
model.param.set('l3', '2[cm]', 'Geometrical parameter l3');
model.param.set('l4', '2[cm]', 'Geometrical parameter l4');
model.param.set('l5', '2[cm]', 'Geometrical parameter l5');
model.param.set('d1', '2[cm]', 'Geometrical parameter d1');
model.param.set('h1', '2[cm]', 'Geometrical parameter h1');
model.param.set('h2', '2[cm]', 'Geometrical parameter h2');
model.param.set('g1', '5[mm]', 'Geometrical parameter g1');
model.param.set('g2', '5[mm]', 'Geometrical parameter g2');
model.param.set('g3', '5[mm]', 'Geometrical parameter g3');
model.param.set('d0', '5[mm]', 'Geometrical parameter d0');
model.param.set('d2', '4[cm]', 'Geometrical parameter d2');
model.param.set('a_coil', '1[mm^2]', 'Coil wire section');
model.param.set('filling', '0.9', 'Coil filling factor');
model.param.set('mass', '400[g]', 'Plunger mass');
model.param.set('k0', '2[N/mm]', 'Spring constant');
model.param.set('x0', '5[mm]', 'Spring prestressed displacement');
model.param.set('maxdisp', '0.95*d0', 'Maximum displacement');
model.param.set('maxdisp', '0.9*d0');

model.geom.create('part1', 'Part', 2);
model.geom('part1').label('Core Section');
model.geom('part1').create('r1', 'Rectangle');
model.geom('part1').feature('r1').set('size', {'l1+g1+d1+g2+l2' '1'});
model.geom('part1').feature('r1').setIndex('size', 'h1+l3', 1);
model.geom('part1').feature('r1').set('pos', {'0' '-(h1+l3)'});
model.geom('part1').run('r1');
model.geom('part1').create('r2', 'Rectangle');
model.geom('part1').feature('r2').set('size', {'g1+d1+g2' 'h1'});
model.geom('part1').feature('r2').set('pos', {'l1' '-h1'});
model.geom('part1').run('r2');
model.geom('part1').create('dif1', 'Difference');
model.geom('part1').feature('dif1').selection('input').set({'r1'});
model.geom('part1').feature('dif1').selection('input2').set({'r2'});
model.geom('part1').run('dif1');
model.geom('part1').create('mir1', 'Mirror');
model.geom('part1').feature('mir1').set('pos', {'0' 'd0/2'});
model.geom('part1').feature('mir1').set('axis', [0 1]);
model.geom('part1').feature('mir1').selection('input').set({'dif1'});
model.geom('part1').feature('mir1').set('keep', true);
model.geom('part1').run('mir1');
model.geom.create('part2', 'Part', 2);
model.geom('part2').label('Coil Section');
model.geom('part2').create('r1', 'Rectangle');
model.geom('part2').feature('r1').set('size', {'d1' 'l5'});
model.geom('part2').feature('r1').set('pos', {'l1+g1' '0'});
model.geom('part2').run('r1');
model.geom('part2').create('c1', 'Circle');
model.geom('part2').feature('c1').set('r', 'g1+d1');
model.geom('part2').feature('c1').set('angle', 90);
model.geom('part2').feature('c1').set('pos', {'l1' 'l5'});
model.geom('part2').feature('c1').setIndex('layername', 'Layer 1', 0);
model.geom('part2').feature('c1').setIndex('layer', 'd1', 0);
model.geom('part2').run('c1');
model.geom('part2').create('r2', 'Rectangle');
model.geom('part2').feature('r2').set('size', {'l1' 'd1'});
model.geom('part2').feature('r2').set('pos', {'0' 'l5+g1'});
model.geom('part2').run('r2');
model.geom('part2').create('del1', 'Delete');
model.geom('part2').feature('del1').selection('input').init(2);
model.geom('part2').feature('del1').selection('input').set('c1', 1);
model.geom('part2').run('del1');
model.geom.create('part3', 'Part', 3);
model.geom('part3').label('Solid Parts');
model.geom('part3').create('wp1', 'WorkPlane');
model.geom('part3').feature('wp1').set('unite', true);
model.geom('part3').feature('wp1').set('quickplane', 'xz');
model.geom('part3').feature('wp1').geom.create('pi1', 'PartInstance');
model.geom('part3').feature('wp1').geom.feature('pi1').set('selkeepnoncontr', false);
model.geom('part3').feature('wp1').geom.feature('pi1').set('part', 'part1');
model.geom('part3').run('wp1');
model.geom('part3').feature.create('ext1', 'Extrude');
model.geom('part3').feature('ext1').set('workplane', 'wp1');
model.geom('part3').feature('ext1').selection('input').set({'wp1'});
model.geom('part3').feature('ext1').label('Nonlinear Core');
model.geom('part3').feature('ext1').set('selresult', true);
model.geom('part3').feature('ext1').set('selresultshow', 'all');
model.geom('part3').feature('ext1').setIndex('distance', 'l5', 0);
model.geom('part3').feature('ext1').set('reverse', true);
model.geom('part3').run('ext1');
model.geom('part3').create('sel1', 'ExplicitSelection');
model.geom('part3').feature('sel1').label('Upper Core');
model.geom('part3').feature('sel1').selection('selection').set('ext1', 2);
model.geom('part3').run('sel1');
model.geom('part3').create('wp2', 'WorkPlane');
model.geom('part3').feature('wp2').set('unite', true);
model.geom('part3').feature('wp2').set('quickz', '-h1');
model.geom('part3').feature('wp2').geom.create('pi1', 'PartInstance');
model.geom('part3').feature('wp2').geom.feature('pi1').set('selkeepnoncontr', false);
model.geom('part3').feature('wp2').geom.feature('pi1').set('part', 'part2');
model.geom('part3').run('wp2');
model.geom('part3').feature.create('ext2', 'Extrude');
model.geom('part3').feature('ext2').set('workplane', 'wp2');
model.geom('part3').feature('ext2').selection('input').set({'wp2'});
model.geom('part3').feature('ext2').label('Coil');
model.geom('part3').feature('ext2').set('selresult', true);
model.geom('part3').feature('ext2').set('selresultshow', 'all');
model.geom('part3').feature('ext2').setIndex('distance', 'd2', 0);
model.geom('part3').run('ext2');
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part3');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_ext1.dom', true);
model.geom('geom1').feature('pi1').setEntry('selshowdom', 'pi1_ext1.dom', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_ext1.dom', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_sel1', true);
model.geom('geom1').feature('pi1').setEntry('selshowdom', 'pi1_sel1', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_sel1', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_ext2.dom', true);
model.geom('geom1').feature('pi1').setEntry('selshowdom', 'pi1_ext2.dom', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_ext2.dom', 'none');
model.geom('geom1').runPre('fin');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'l1+g1+d1+g2+l2+2[cm]' '1' '1'});
model.geom('geom1').feature('blk1').setIndex('size', 'l5+g1+d1+g3+2[cm]', 1);
model.geom('geom1').feature('blk1').setIndex('size', 'h1+l3+d0+h2+l4+4[cm]', 2);
model.geom('geom1').feature('blk1').set('pos', {'0' '0' '-h1-l3-2[cm]'});
model.geom('geom1').run('blk1');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'blk1' 'pi1'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('pard1', 'PartitionDomains');
model.geom('geom1').feature('pard1').selection('domain').set('uni1', 1);
model.geom('geom1').feature('pard1').set('partitionwith', 'extendedfaces');

model.view('view1').set('renderwireframe', true);

model.geom('geom1').feature('pard1').selection('extendedface').set('uni1', [24 33 10 11 7]);
model.geom('geom1').run('pard1');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').set('quickoffsettype', 'vertex');
model.geom('geom1').feature('wp1').selection('offsetvertex').set('pard1', 34);
model.geom('geom1').feature('wp1').set('quickorigin', 'vertexproj');
model.geom('geom1').feature('wp1').selection('originvertex').set('pard1', 34);
model.geom('geom1').feature('wp1').geom.create('cro1', 'CrossSection');
model.geom('geom1').feature('wp1').geom.run('cro1');
model.geom('geom1').feature('wp1').geom.create('del1', 'Delete');
model.geom('geom1').feature('wp1').geom.feature('del1').selection('input').init(2);
model.geom('geom1').feature('wp1').geom.feature('del1').selection('input').set('cro1', [1 2 4 7]);
model.geom('geom1').feature('wp1').geom.run('del1');
model.geom('geom1').feature('wp1').geom.create('off1', 'Offset');
model.geom('geom1').feature('wp1').geom.feature('off1').selection('input').init(1);
model.geom('geom1').feature('wp1').geom.feature('off1').selection('input').set('del1', [2 3 5 8 9 10]);
model.geom('geom1').feature('wp1').geom.feature('off1').set('keep', false);
model.geom('geom1').feature('wp1').geom.feature('off1').set('distance', 'd0');
model.geom('geom1').feature('wp1').geom.run('off1');
model.geom('geom1').feature('wp1').geom.create('pol1', 'Polygon');
model.geom('geom1').feature('wp1').geom.feature('pol1').set('source', 'table');
model.geom('geom1').feature('wp1').geom.feature('pol1').set('type', 'open');
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'd1+2*d0', 0, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 1, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 1, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'd1+2*d0', 2, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 2, 1);
model.geom('geom1').feature('wp1').geom.run('pol1');
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').set('inputhandling', 'keep');
model.geom('geom1').feature('ext1').set('specify', 'vertices');
model.geom('geom1').feature('ext1').selection('vertex').set('pard1', 11);
model.geom('geom1').run('ext1');
model.geom('geom1').run('fin');
model.geom('geom1').create('cylsel1', 'CylinderSelection');
model.geom('geom1').feature('cylsel1').set('top', 'd0+h2+l4');
model.geom('geom1').feature('cylsel1').set('bottom', 'd0');
model.geom('geom1').feature('cylsel1').set('pos', {'0' 'l5+g1+d1+g3+2[cm]' '0'});
model.geom('geom1').run('cylsel1');
model.geom('geom1').create('cmd1', 'CompositeDomains');
model.geom('geom1').feature('cmd1').selection('input').named('cylsel1');
model.geom('geom1').run('cmd1');

model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Plunger');
model.selection('uni1').set('input', {'geom1_pi1_sel1' 'geom1_cylsel1'});
model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');
model.selection('box1').label('Fixed Domains');
model.selection('box1').set('zmax', '-d0');
model.selection.create('com1', 'Complement');
model.selection('com1').model('comp1');
model.selection('com1').label('Deformed Domains');
model.selection('com1').set('input', {'uni1' 'box1'});
model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Top Domain');
model.selection('sel1').set([5]);
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Domain in between');
model.selection('dif1').set('add', {'com1'});
model.selection('dif1').set('subtract', {'sel1'});
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Ext. boundaries to Deformed Domains');
model.selection('adj1').set('input', {'com1'});
model.selection.create('adj2', 'Adjacent');
model.selection('adj2').model('comp1');
model.selection('adj2').label('Ext. Boundaries to Plunger');
model.selection('adj2').set('input', {'uni1'});
model.selection.create('adj3', 'Adjacent');
model.selection('adj3').model('comp1');
model.selection('adj3').label('Ext. Boundaries to Fixed Domains');
model.selection('adj3').set('input', {'box1'});
model.selection.create('int1', 'Intersection');
model.selection('int1').model('comp1');
model.selection('int1').label('Fixed Boundaries at Plunger');
model.selection('int1').set('entitydim', 2);
model.selection('int1').set('input', {'adj1' 'adj3'});
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Top boundary');
model.selection('sel2').geom(2);
model.selection('sel2').set([16]);
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Fixed Boundaries');
model.selection('uni2').set('entitydim', 2);
model.selection('uni2').set('input', {'int1' 'sel2'});
model.selection.create('int2', 'Intersection');
model.selection('int2').model('comp1');
model.selection('int2').label('Moving Boundaries');
model.selection('int2').set('entitydim', 2);
model.selection('int2').set('input', {'adj1' 'adj2'});
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Side boundaries');
model.selection('sel3').geom(2);
model.selection('sel3').set('groupcontang', true);
model.selection('sel3').add([1 2 4 5 7 8 10 11 13 14 18 21 24 27 31 38 41 45 51 52 53 54 56 59 62 65 97 105 108 111 118 125 126 127 128 129]);
model.selection.create('adj4', 'Adjacent');
model.selection('adj4').model('comp1');
model.selection('adj4').label('Ext. Boundaries to cores');
model.selection('adj4').set('input', {'geom1_pi1_ext1_dom'});
model.selection.create('dif2', 'Difference');
model.selection('dif2').model('comp1');
model.selection('dif2').set('entitydim', 2);
model.selection('dif2').label('Boundary layer mesh');
model.selection('dif2').set('add', {'adj4'});
model.selection('dif2').set('subtract', {'sel3'});

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat1').label('Copper');
model.material('mat1').set('family', 'copper');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('emissivity', '0.5');
model.material('mat1').propertyGroup('def').set('density', '8940[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '126e9[Pa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.34');
model.material('mat1').propertyGroup('linzRes').set('rho0', '1.667e-8[ohm*m]');
model.material('mat1').propertyGroup('linzRes').set('alpha', '3.862e-3[1/K]');
model.material('mat1').propertyGroup('linzRes').set('Tref', '293.15[K]');
model.material('mat1').propertyGroup('linzRes').addInput('temperature');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('BHCurve', 'B-H Curve');
model.material('mat2').propertyGroup('BHCurve').func.create('BH', 'Interpolation');
model.material('mat2').propertyGroup.create('EffectiveBHCurve', 'Effective B-H Curve');
model.material('mat2').propertyGroup('EffectiveBHCurve').func.create('BHeff', 'Interpolation');
model.material('mat2').label('Soft Iron (With Losses)');
model.material('mat2').set('family', 'iron');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'1.12e7[S/m]' '0' '0' '0' '1.12e7[S/m]' '0' '0' '0' '1.12e7[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('BHCurve').label('B-H Curve');
model.material('mat2').propertyGroup('BHCurve').func('BH').label('Interpolation 1');
model.material('mat2').propertyGroup('BHCurve').func('BH').set('table', {'0' '0';  ...
'663.146' '1';  ...
'1067.5' '1.1';  ...
'1705.23' '1.2';  ...
'2463.11' '1.3';  ...
'3841.67' '1.4';  ...
'5425.74' '1.5';  ...
'7957.75' '1.6';  ...
'12298.3' '1.7';  ...
'20462.8' '1.8';  ...
'32169.6' '1.9';  ...
'61213.4' '2';  ...
'111408' '2.1';  ...
'188487.757' '2.2';  ...
'267930.364' '2.3';  ...
'347507.836' '2.4'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('extrap', 'linear');
model.material('mat2').propertyGroup('BHCurve').func('BH').set('fununit', {'T'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('argunit', {'A/m'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('defineinv', true);
model.material('mat2').propertyGroup('BHCurve').func('BH').set('defineprimfun', true);
model.material('mat2').propertyGroup('BHCurve').set('normB', 'BH(normHin)');
model.material('mat2').propertyGroup('BHCurve').set('normH', 'BH_inv(normBin)');
model.material('mat2').propertyGroup('BHCurve').set('Wpm', 'BH_prim(normHin)');
model.material('mat2').propertyGroup('BHCurve').descr('normHin', 'Magnetic field norm');
model.material('mat2').propertyGroup('BHCurve').descr('normBin', 'Magnetic flux density norm');
model.material('mat2').propertyGroup('BHCurve').addInput('magneticfield');
model.material('mat2').propertyGroup('BHCurve').addInput('magneticfluxdensity');
model.material('mat2').propertyGroup('EffectiveBHCurve').label('Effective B-H Curve');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').label('Interpolation 1');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('table', {'0' '0';  ...
'663.146' '1.000000051691021';  ...
'1067.5' '1.4936495124126294';  ...
'1705.23' '1.9415328461315795';  ...
'2463.11' '2.257765669366018';  ...
'3841.67' '2.609980642431287';  ...
'5425.74' '2.8664452090837504';  ...
'7957.75' '3.1441438097176118';  ...
'12298.3' '3.448538051654125';  ...
'20462.8' '3.7816711973679054';  ...
'32169.6' '4.058345590113038';  ...
'61213.4' '4.420646552950275';  ...
'111408' '4.721274089545955';  ...
'188487.757' '4.972148140718701';  ...
'267930.364' '5.145510860855953';  ...
'347507.836' '5.245510861426532'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('extrap', 'linear');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('fununit', {'T'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('argunit', {'A/m'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('defineinv', true);
model.material('mat2').propertyGroup('EffectiveBHCurve').set('normBeff', 'BHeff(normHeffin)');
model.material('mat2').propertyGroup('EffectiveBHCurve').set('normHeff', 'BHeff_inv(normBeffin)');
model.material('mat2').propertyGroup('EffectiveBHCurve').descr('normHeffin', 'Effective magnetic field norm');
model.material('mat2').propertyGroup('EffectiveBHCurve').descr('normBeffin', 'Effective magnetic flux density norm');
model.material('mat2').propertyGroup('EffectiveBHCurve').addInput('magneticfield');
model.material('mat2').propertyGroup('EffectiveBHCurve').addInput('magneticfluxdensity');
model.material('mat1').label('Coil Material');
model.material('mat1').selection.named('geom1_pi1_ext2_dom');
model.material('mat2').selection.named('geom1_pi1_ext1_dom');

model.mesh('mesh1').autoMeshSize(7);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.named('dif1');
model.mesh('mesh1').feature('swe1').create('size1', 'Size');
model.mesh('mesh1').feature('swe1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('swe1').feature('size1').selection.set([9 20 40 60 70 88 109 119]);
model.mesh('mesh1').feature('swe1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmax', 'd0*0.5');
model.mesh('mesh1').feature('swe1').feature('size1').set('hgradactive', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hgrad', 1.2);
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.set([3 6 8 11 13 14 16 17 19 21 24]);
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 2);
model.mesh('mesh1').feature('swe1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis2').selection.set([7 12 15 18 22 25]);
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(3);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('bl1').selection.named('geom1_pi1_ext1_dom');
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('dif2');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 7);
model.mesh('mesh1').feature('bl1').feature('blp').set('blstretch', 1.4);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', '0.2[mm]');
model.mesh('mesh1').run;

model.common.create('free1', 'DeformingDomain', 'comp1');
model.common('free1').selection.all;
model.common('free1').selection.named('com1');
model.common('free1').set('stiffeningFactor', '100');
model.common.create('pnmd1', 'PrescribedNormalMeshDisplacement', 'comp1');
model.common('pnmd1').selection.named('sel3');
model.common.create('disp1', 'PrescribedMeshDisplacement', 'comp1');
model.common('disp1').selection.named('uni2');
model.common.duplicate('disp2', 'disp1');
model.common('disp2').selection.named('int2');
model.common('disp2').set('prescribedMeshDisplacement', {'0' '0' 'disp'});

model.physics('mf').prop('ShapeProperty').set('order_magneticvectorpotential', 1);
model.physics('mf').create('coil1', 'Coil', 3);
model.physics('mf').feature('coil1').selection.named('geom1_pi1_ext2_dom');
model.physics('mf').feature('coil1').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil1').set('CoilType', 'Numeric');
model.physics('mf').feature('coil1').set('CoilExcitation', 'Voltage');
model.physics('mf').feature('coil1').set('VCoil', '10[V]');
model.physics('mf').feature('coil1').set('N', 'filling*d1*d2/a_coil');
model.physics('mf').feature('coil1').set('coilWindArea', 'a_coil');
model.physics('mf').feature('coil1').feature('ccc1').set('fl', 4);
model.physics('mf').feature('coil1').feature('ccc1').feature('ct1').selection.set([97]);
model.physics('mf').feature('coil1').feature('ccc1').create('cg1', 'CoilGround', 2);
model.physics('mf').feature('coil1').feature('ccc1').feature('cg1').selection.set([31]);
model.physics('mf').create('als1', 'AmperesLawSolid', 3);
model.physics('mf').feature('als1').set('ConstitutiveRelationBH', 'BHCurve');
model.physics('mf').feature('als1').selection.named('geom1_pi1_ext1_dom');
model.physics('mf').create('fcal1', 'ForceCalculation', 3);
model.physics('mf').feature('fcal1').selection.named('geom1_pi1_sel1');
model.physics('mf').create('gfa1', 'GaugeFixingA', 3);
model.physics('mbd').selection.named('uni1');
model.physics('mbd').create('rd1', 'RigidDomain', 3);
model.physics('mbd').feature('rd1').selection.named('uni1');
model.physics('mbd').feature('rd1').set('rho_mat', 'userdef');
model.physics('mbd').feature('rd1').create('mmi1', 'MassInertia', -1);
model.physics('mbd').feature('rd1').feature('mmi1').set('mt', 'mass');
model.physics('mbd').feature('rd1').create('af1', 'AppliedForce', -1);
model.physics('mbd').feature('rd1').feature('af1').set('Ft', {'0' '0' 'min(mf.Forcez_0+k0*(x0-disp),0)'});
model.physics('mbd').create('prj1', 'PrismaticJoint', -1);
model.physics('mbd').feature('prj1').set('Source', 'fixed');
model.physics('mbd').feature('prj1').set('Destination', 'rd1');
model.physics('mbd').feature('prj1').set('CenterOfJointType', 'UserDefined');
model.physics('mbd').feature('prj1').set('e', [0 0 1]);
model.physics('mbd').feature('prj1').create('lk1', 'Locking', -1);
model.physics('mbd').feature('prj1').feature('lk1').set('u_min', '-maxdisp');
model.physics('mbd').feature('prj1').feature('lk1').set('translationalLockingParameters', 'UserDefined');
model.physics('mbd').feature('prj1').feature('lk1').set('p_u1', '(0.01*mbd.prj1.lk1.Eequ)*mbd.diag/10');
model.physics('mbd').feature('prj1').feature('lk1').set('p_u2', 'mbd.prj1.lk1.p_u1*10[ms]/50');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('disp', 'mbd.rd1.w');
model.variable('var1').descr('disp', 'Plunger displacement');
model.variable('var1').set('vel', 'd(mbd.rd1.w,t)');
model.variable('var1').descr('vel', 'Velocity of plunger');

model.study('std1').label('Study 1 (Preprocessing)');
model.study('std1').setGenPlots(false);
model.study('std1').feature('ccc').setEntry('activate', 'frame:spatial1', false);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 5 6 7 8 11 12 13 14 15 16 17 18 19 21 22 24 25]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'ccc');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scaleval', '0.002362403002921152');
model.sol('sol1').feature('v1').set('control', 'ccc');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_mf_coil1_ccc1_s'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_mf_coil1_ccc1_p' 'comp1_mf_coil1_ccc1_lm'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').set('segterm', 'itertol');
model.sol('sol1').feature('s1').feature('se1').set('segiter', 6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').run;
model.result('pg1').label('Preprocessing: Normalized Air Gap Parameterization and Coil Direction');
model.result('pg1').set('titletype', 'label');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', '1');
model.result('pg1').feature('vol1').create('filt1', 'Filter');
model.result('pg1').run;
model.result('pg1').feature('vol1').feature('filt1').set('expr', 'y<x');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').selection.set([97]);
model.result('pg1').feature('str1').set('expr', {'mf.coil1.eCoilx' 'mf.coil1.eCoily' 'mf.coil1.eCoilz'});
model.result('pg1').feature('str1').set('descr', 'Coil direction (spatial frame)');
model.result('pg1').feature('str1').set('linetype', 'tube');
model.result('pg1').feature('str1').set('color', 'yellow');
model.result('pg1').run;

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/mf', true);
model.study('std2').feature('time').setSolveFor('/physics/mbd', true);
model.study('std2').label('Study 2 (Time Dependent)');
model.study('std2').feature('time').set('tlist', 'range(0,0.005,0.1) range(0.15,0.05,1)');
model.study('std2').feature('time').set('usesol', true);
model.study('std2').feature('time').set('notsolmethod', 'sol');
model.study('std2').feature('time').set('notstudy', 'std1');

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 5 6 7 8 11 12 13 14 15 16 17 18 19 21 22 24 25]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_jnt_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_jnt_disp').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.001691892431568864');
model.sol('sol2').feature('v1').feature('comp1_mbd_jnt_disp').set('scaleval', '0.001691892431568864');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scaleval', '0.002362403002921152');
model.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.16918924315688638');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,0.005,0.1) range(0.15,0.05,1)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('tout', 'tstepsclosest');
model.sol('sol2').feature('t1').set('rtol', 0.001);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol2').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('eventtol', 0.01);
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('estrat', 'exclude');
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('minorder', 1);
model.sol('sol2').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol2').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('t1').create('se1', 'Segregated');
model.sol('sol2').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_u' 'comp1_mbd_rd_disp' 'comp1_mbd_rd_rot' 'comp1_mbd_jnt_disp' 'comp1_mbd_prj1_lk1_i_umax' 'comp1_mbd_prj1_lk1_i_umin'});
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').label('Multibody Dynamics');
model.sol('sol2').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_A' 'comp1_mf_psi' 'comp1_mf_coil1_ICoil_ode'});
model.sol('sol2').feature('t1').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d1').label('Suggested Direct Solver (mf)');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').label('Magnetic Fields');
model.sol('sol2').feature('t1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').label('Spatial Frame Variables');
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').set('linsolver', 'fgmres');
model.sol('sol2').feature('t1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('t1').feature('i1').create('asamg1', 'AuxiliarySpaceAMG');
model.sol('sol2').feature('t1').feature('i1').feature('asamg1').set('interm', {'vanka'});
model.sol('sol2').feature('t1').feature('i1').feature('asamg1').set('vankavars', {'comp1_mf_psi'});
model.sol('sol2').feature('t1').feature('i1').feature('asamg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('t1').feature('i1').feature('asamg1').feature('pr').feature('so1').set('iter', 1);
model.sol('sol2').feature('t1').feature('i1').feature('asamg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('t1').feature('i1').feature('asamg1').feature('po').feature('so1').set('iter', 0);
model.sol('sol2').feature('t1').feature('i1').feature('asamg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('i1').feature('asamg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('v1').feature('comp1_A').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_A').set('scaleval', '1e-3');
model.sol('sol2').feature('v1').feature('comp1_mf_psi').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mf_coil1_ICoil_ode').set('scalemethod', 'manual');
model.sol('sol2').feature('t1').feature('dDef').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'manual');
model.sol('sol2').feature('t1').set('atolglobal', 0.01);
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol2').runAll;

model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Magnetic Flux Density Norm (mf)');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 39, 0);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 39, 0);
model.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond1/pg1');
model.result('pg2').feature.create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('solutionparams', 'parent');
model.result('pg2').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('mslc1').set('xcoord', 'mf.CPx');
model.result('pg2').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('mslc1').set('ycoord', 'mf.CPy');
model.result('pg2').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('mslc1').set('zcoord', 'mf.CPz');
model.result('pg2').feature('mslc1').set('colortable', 'Prism');
model.result('pg2').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg2').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('data', 'parent');
model.result('pg2').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg2').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('strmsl1').set('xcoord', 'mf.CPx');
model.result('pg2').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('strmsl1').set('ycoord', 'mf.CPy');
model.result('pg2').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('strmsl1').set('zcoord', 'mf.CPz');
model.result('pg2').feature('strmsl1').set('titletype', 'none');
model.result('pg2').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg2').feature('strmsl1').set('udist', 0.02);
model.result('pg2').feature('strmsl1').set('maxlen', 0.4);
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('inheritcolor', false);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('data', 'parent');
model.result('pg2').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg2').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg2').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg2').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg2').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg2').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg2').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg2').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Displacement (mbd)');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 39, 0);
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 39, 0);
model.result('pg3').set('defaultPlotID', 'displacement');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('expr', 'mbd.disp');
model.result('pg3').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature('surf1').feature.create('def1', 'Deform');
model.result('pg3').feature('surf1').feature('def1').label('Deformation');
model.result('pg3').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Velocity (mbd)');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 39, 0);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 39, 0);
model.result('pg4').set('defaultPlotID', 'velocity');
model.result('pg4').feature.create('vol1', 'Volume');
model.result('pg4').feature('vol1').label('Volume');
model.result('pg4').feature('vol1').set('expr', 'mod(dom,10)');
model.result('pg4').feature('vol1').set('unit', '1');
model.result('pg4').feature('vol1').set('colortable', 'Cyclic');
model.result('pg4').feature('vol1').set('colorlegend', false);
model.result('pg4').feature('vol1').set('data', 'parent');
model.result('pg4').feature('vol1').feature.create('def1', 'Deform');
model.result('pg4').feature('vol1').feature('def1').label('Deformation');
model.result('pg4').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg4').feature.create('arwl1', 'ArrowLine');
model.result('pg4').feature('arwl1').label('Arrow Line');
model.result('pg4').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY' 'mbd.u_tZ'});
model.result('pg4').feature('arwl1').set('placement', 'elements');
model.result('pg4').feature('arwl1').set('data', 'parent');
model.result('pg4').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg4').feature('arwl1').feature('def1').label('Deformation');
model.result('pg4').feature('arwl1').feature('def1').set('scaleactive', true);
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 39, 0);
model.result('pg5').label('Moving Mesh');
model.result('pg5').create('mesh1', 'Mesh');
model.result('pg5').feature('mesh1').set('meshdomain', 'volume');
model.result('pg5').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg5').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg5').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg5').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg5').feature('mesh1').feature('sel1').selection.set([3 4 5 6 7 8 9 11 12 13 14 15 16 17 18 19 21 22 24 25]);
model.result('pg5').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg5').feature('mesh1').set('qualexpr', 'comp1.spatial.relVol');
model.result('pg5').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg2').run;
model.result('pg1').run;
model.result('pg1').feature('vol1').set('data', 'dset2');
model.result('pg1').feature('vol1').setIndex('looplevel', 11, 0);
model.result('pg1').feature('vol1').set('expr', '(z-Z)/disp');
model.result('pg1').feature('vol1').create('sel1', 'Selection');
model.result('pg1').feature('vol1').feature('sel1').selection.named('com1');
model.result('pg2').run;
model.result('pg2').feature('mslc1').set('xcoord', 0);
model.result('pg2').feature('mslc1').set('ycoord', 0);
model.result('pg2').run;
model.result('pg2').feature('strmsl1').set('xcoord', 0);
model.result('pg2').feature('strmsl1').set('ycoord', 0);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 11, 0);
model.result('pg2').run;
model.result('pg2').label('Magnetic Flux Density Norm');
model.result('pg2').set('titletype', 'label');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').setIndex('looplevel', 21, 0);
model.result('pg2').run;
model.result.dataset.create('mir1', 'Mirror3D');
model.result.dataset('mir1').set('data', 'dset2');
model.result.dataset.create('cpl1', 'CutPlane');
model.result.dataset('cpl1').set('data', 'mir1');
model.result.dataset('cpl1').set('quickplane', 'xz');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').run;
model.result('pg6').label('Current Density and Magnetic Flux Lines');
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('showlegendsmaxmin', true);
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'mf.Jy');
model.result('pg6').feature('surf1').set('unit', 'A/mm^2');
model.result('pg6').feature('surf1').set('rangecoloractive', true);
model.result('pg6').feature('surf1').set('rangecolormin', -2);
model.result('pg6').feature('surf1').set('rangecolormax', 2);
model.result('pg6').feature('surf1').set('colortable', 'WaveLight');
model.result('pg6').run;
model.result.dataset('mir1').set('hasvar', true);
model.result('pg6').run;
model.result('pg6').feature('surf1').set('expr', 'mf.Jy*sign(mir1x)');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').create('str1', 'Streamline');
model.result('pg6').feature('str1').set('expr', {'mf.Bx' 'mf.Bz'});
model.result('pg6').feature('str1').set('startmethod', 'coord');
model.result('pg6').feature('str1').set('xcoord', 'range(-0.018,0.004,0.018)');
model.result('pg6').feature('str1').set('ycoord', 0);
model.result('pg6').feature('str1').set('looptol', 0.1);
model.result('pg6').feature('str1').create('col1', 'Color');
model.result('pg6').run;
model.result('pg6').feature('str1').feature('col1').set('rangecoloractive', true);
model.result('pg6').feature('str1').feature('col1').set('rangecolormax', 2);
model.result('pg6').run;
model.result('pg6').set('legendpos', 'alternating');
model.result('pg6').setIndex('looplevel', 3, 0);
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 11, 0);
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 21, 0);
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 29, 0);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').label('Core Losses');
model.result('pg7').set('data', 'dset2');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('edges', false);
model.result('pg7').set('showlegendsmaxmin', true);
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('expr', {'mf.Jx' 'mf.Jy' 'mf.Jz'});
model.result('pg7').feature('str1').selection.set([97]);
model.result('pg7').run;
model.result('pg7').create('vol1', 'Volume');
model.result('pg7').feature('vol1').set('data', 'dset2');
model.result('pg7').feature('vol1').setIndex('looplevel', 11, 0);
model.result('pg7').feature('vol1').set('expr', 'mf.Qrh');
model.result('pg7').feature('vol1').set('unit', 'W/dm^3');
model.result('pg7').feature('vol1').set('colortable', 'GrayBody');
model.result('pg7').feature('vol1').create('sel1', 'Selection');
model.result('pg7').feature('vol1').feature('sel1').selection.named('geom1_pi1_ext1_dom');
model.result('pg7').run;
model.result('pg7').feature.duplicate('vol2', 'vol1');
model.result('pg7').run;
model.result('pg7').feature('vol2').setIndex('looplevel', 21, 0);
model.result('pg7').feature('vol2').create('trn1', 'Translation');
model.result('pg7').run;
model.result('pg7').feature('vol2').feature('trn1').set('trans', [-0.1 0 0]);
model.result('pg7').run;
model.result('pg7').feature('vol2').set('inheritplot', 'vol1');
model.result('pg7').feature.duplicate('vol3', 'vol2');
model.result('pg7').run;
model.result('pg7').feature('vol3').setIndex('looplevel', 23, 0);
model.result('pg7').run;
model.result('pg7').feature('vol3').feature('trn1').set('trans', [-0.2 0 0]);
model.result('pg7').run;
model.result('pg7').create('tlan1', 'TableAnnotation');
model.result('pg7').feature('tlan1').set('source', 'localtable');
model.result('pg7').feature('tlan1').setIndex('localtablematrix', 0.03, 0, 0);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', 0, 0, 1);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', 0.07, 0, 2);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', '50 [ms]', 0, 3);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', -0.07, 1, 0);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', 0, 1, 1);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', 0.07, 1, 2);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', '100 [ms]', 1, 3);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', -0.17, 2, 0);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', 0, 2, 1);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', 0.07, 2, 2);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', '200 [ms]', 2, 3);
model.result('pg7').feature('tlan1').set('showpoint', false);
model.result('pg7').run;

model.view.create('view9', 3);
model.view('view9').set('showgrid', false);
model.view('view9').camera.setIndex('position', 1, 0);
model.view('view9').camera.setIndex('position', 1, 1);
model.view('view9').camera.set('position', [1 1 1]);
model.view('view9').camera.setIndex('target', 0, 0);
model.view('view9').camera.setIndex('target', 0, 1);
model.view('view9').camera.set('target', [0 0 0]);
model.view('view9').camera.setIndex('up', 0, 0);
model.view('view9').camera.setIndex('up', 0, 1);
model.view('view9').camera.set('up', [0 0 1]);
model.view('view9').camera.setIndex('rotationpoint', 0, 0);
model.view('view9').camera.setIndex('rotationpoint', 0, 1);
model.view('view9').camera.set('rotationpoint', [0 0 0]);
model.view('view9').camera.setIndex('viewoffset', 0, 0);
model.view('view9').camera.set('viewoffset', [0 0]);

model.result('pg7').run;
model.result('pg7').set('view', 'view9');
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').set('titletype', 'label');
model.result('pg8').label('Dynamics of the System Before Switching');
model.result('pg8').create('glob1', 'Global');
model.result('pg8').feature('glob1').set('markerpos', 'datapoints');
model.result('pg8').feature('glob1').set('linewidth', 'preference');
model.result('pg8').feature('glob1').set('data', 'dset2');
model.result('pg8').feature('glob1').setIndex('looplevelinput', 'interp', 0);
model.result('pg8').feature('glob1').setIndex('interp', 'range(0,0.005,0.05)', 0);
model.result('pg8').feature('glob1').setIndex('expr', 'mf.ICoil_1*mf.RCoil_1/mf.VCoil_1', 0);
model.result('pg8').feature('glob1').setIndex('unit', 1, 0);
model.result('pg8').feature('glob1').setIndex('descr', 'Current normalized to DC current', 0);
model.result('pg8').feature('glob1').setIndex('expr', '1+disp/maxdisp', 1);
model.result('pg8').feature('glob1').setIndex('unit', 1, 1);
model.result('pg8').feature('glob1').setIndex('descr', 'Normalized gap size', 1);
model.result('pg8').feature('glob1').setIndex('expr', '1-exp(-t/50[ms])', 2);
model.result('pg8').feature('glob1').setIndex('unit', '', 2);
model.result('pg8').feature('glob1').setIndex('descr', 'Ideal RL normalized current', 2);
model.result('pg8').run;
model.result('pg8').run;
model.result.duplicate('pg9', 'pg8');
model.result('pg9').run;
model.result('pg9').label('Dynamics of the System During Switching');
model.result('pg9').run;
model.result('pg9').feature('glob1').setIndex('interp', 'range(0,0.005,0.1)', 0);
model.result('pg9').feature('glob1').setIndex('unit', 1, 0);
model.result('pg9').feature('glob1').setIndex('descr', 'Current normalized to DC current', 0);
model.result('pg9').feature('glob1').setIndex('unit', 1, 1);
model.result('pg9').feature('glob1').setIndex('descr', 'Normalized gap size', 1);
model.result('pg9').feature('glob1').setIndex('expr', '4*mass*d(vel,t)*vel/at(1,mf.ICoil_1*mf.VCoil_1)', 2);
model.result('pg9').feature('glob1').setIndex('unit', 1, 2);
model.result('pg9').feature('glob1').setIndex('descr', 'Mechanical power, normalized to DC coil power', 2);
model.result('pg9').run;
model.result('pg9').run;
model.result.duplicate('pg10', 'pg9');
model.result('pg10').run;
model.result('pg10').label('Dynamics of the Completed System');
model.result('pg10').set('legendpos', 'middleright');
model.result('pg10').set('ylabelactive', true);
model.result('pg10').run;
model.result('pg10').feature('glob1').setIndex('looplevelinput', 'all', 0);
model.result('pg10').feature('glob1').setIndex('unit', 1, 0);
model.result('pg10').feature('glob1').setIndex('descr', 'Current normalized to DC current', 0);
model.result('pg10').feature('glob1').setIndex('unit', 1, 1);
model.result('pg10').feature('glob1').setIndex('descr', 'Normalized gap size', 1);
model.result('pg10').feature('glob1').setIndex('expr', '', 2);
model.result('pg10').feature('glob1').setIndex('unit', '', 2);
model.result('pg10').feature('glob1').setIndex('descr', 'Mechanical power, normalized to DC coil power', 2);
model.result.dataset.create('int1', 'Integral');
model.result.dataset('int1').set('intsurface', true);
model.result.dataset('int1').set('intvolume', true);
model.result.dataset('int1').set('data', 'dset2');
model.result.dataset('int1').set('showlevel', 'off');
model.result.dataset('int1').selection.geom('geom1', 3);
model.result.dataset('int1').selection.named('geom1_pi1_ext2_dom');
model.result('pg10').run;
model.result('pg10').create('glob2', 'Global');
model.result('pg10').feature('glob2').set('markerpos', 'datapoints');
model.result('pg10').feature('glob2').set('linewidth', 'preference');
model.result('pg10').feature('glob2').setIndex('expr', '4*mf.Qrh/at(1,mf.ICoil_1*mf.VCoil_1)', 0);
model.result('pg10').feature('glob2').setIndex('unit', '1/m^3', 0);
model.result('pg10').feature('glob2').setIndex('descr', '', 0);
model.result('pg10').feature('glob2').set('data', 'int1');
model.result('pg10').feature('glob2').setIndex('descr', 'Induction currents losses, normalized to DC coil power', 0);
model.result('pg10').run;
model.result('pg10').run;
model.result.duplicate('pg11', 'pg10');
model.result('pg11').run;
model.result('pg11').label('Locking Force');
model.result('pg11').set('data', 'dset2');
model.result('pg11').set('ylabelactive', false);
model.result('pg11').set('twoyaxes', true);
model.result('pg11').setIndex('plotonsecyaxis', true, 1, 1);
model.result('pg11').run;
model.result('pg11').feature('glob1').set('data', 'parent');
model.result('pg11').feature('glob1').set('expr', {});
model.result('pg11').feature('glob1').set('descr', {});
model.result('pg11').feature('glob1').setIndex('expr', 'mbd.prj1.lk1.F_u', 0);
model.result('pg11').feature('glob1').setIndex('unit', 'N', 0);
model.result('pg11').feature('glob1').setIndex('descr', 'Locking force', 0);
model.result('pg11').run;
model.result('pg11').feature('glob2').set('data', 'parent');
model.result('pg11').feature('glob2').set('expr', {});
model.result('pg11').feature('glob2').set('descr', {});
model.result('pg11').feature('glob2').setIndex('expr', '1+disp/maxdisp', 0);
model.result('pg11').feature('glob2').setIndex('unit', 1, 0);
model.result('pg11').feature('glob2').setIndex('descr', 'Normalized gap size', 0);
model.result('pg11').run;
model.result('pg3').run;
model.result('pg3').set('titletype', 'label');
model.result('pg3').label('Displacement Magnitude');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg4').run;
model.result('pg4').set('titletype', 'label');
model.result('pg4').label('Velocity');
model.result('pg7').run;
model.result('pg7').run;

model.title(['Electrodynamics of a Power Switch ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Multibody Version']);

model.description(['Electrical events, such as an overcurrent or overload, can seriously damage electrical circuits or power lines. To avoid expensive replacements of critical parts, electric switch circuit breakers can be installed. These mechanically interrupt the current flow or surge by moving a plunger as soon as a critical current is reached. In contrast to a fuse, which has to be replaced after it has been activated to protect the surrounding electrical components, a circuit breaker can be reset.' newline  newline 'The main purpose of this tutorial model is to explore the working principle and some possible solutions for modeling one class of circuit breaker: magnetic power switches. This is an electromechanical device in which iron plungers are moved by means of the magnetic attraction exerted by current flowing in coils surrounding it. Turning off the driving current resets the switch to its initial state.' newline  newline 'The model simulates rigid body dynamics under the influence of magnetic forces, induced currents, and spring/constraint arrangements that keep the plunger in its equilibrium position. A copper coil is placed on the central leg of a lower E-core, which is kept fixed. As current flows in the coil, an attractive force is exerted on the upper E-core (the moving plunger), which is held in place by a prestressed spring. When the force reaches a threshold value, the plunger moves toward the lower E-core, closing the air gap. The model illustrates how to properly simulate the movement and the closing time, which depends on the spring stiffness.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('power_switch_multibody.mph');

model.modelNode.label('Components');

out = model;
