function out = model
%
% tonpilz_transducer.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Piezoelectric_Devices');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics('solid').create('pzm1', 'PiezoelectricMaterialModel');
model.physics('solid').feature('pzm1').selection.all;
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics('es').create('ccnp1', 'ChargeConservationPiezo');
model.physics('es').feature('ccnp1').selection.all;

model.multiphysics.create('asb1', 'AcousticStructureBoundary', 'geom1', 2);
model.multiphysics('asb1').set('Acoustics_physics', 'acpr');
model.multiphysics('asb1').set('Structure_physics', 'solid');
model.multiphysics('asb1').selection.all;
model.multiphysics.create('pze1', 'PiezoelectricEffect', 'geom1', 3);
model.multiphysics('pze1').set('Solid_physics', 'solid');
model.multiphysics('pze1').set('Electrostatics_physics', 'es');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std1').feature('freq').setSolveFor('/physics/solid', true);
model.study('std1').feature('freq').setSolveFor('/physics/es', true);
model.study('std1').feature('freq').setSolveFor('/multiphysics/asb1', true);
model.study('std1').feature('freq').setSolveFor('/multiphysics/pze1', true);

model.view('view1').set('showgrid', false);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('Rwater', '40[mm]', 'Water domain radius');
model.param.set('Rpml', '10[mm]', 'PML layer thickness');
model.param.set('a', '25[mm]', 'Piston head radius');
model.param.set('Zeval', '-10[m]', 'Directivity evaluation distance');
model.param.set('Vrms', '1[V]', 'RMS drive voltage');
model.param.set('V0', 'sqrt(2)*Vrms', 'Zero-to-peak drive voltage');
model.param.set('f0min', '1[kHz]', 'Minimum operating frequency');
model.param.set('f0max', '40[kHz]', 'Maximum operating frequency');
model.param.set('f0step', '1[kHz]', 'Frequency step');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').set('quickplane', 'xz');
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', [4 2]);
model.geom('geom1').feature('wp1').geom.feature('r1').set('pos', [0 25]);
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').feature('wp1').geom.create('r2', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r2').set('size', [2 20]);
model.geom('geom1').feature('wp1').geom.feature('r2').set('pos', [0 5]);
model.geom('geom1').feature('wp1').geom.run('r2');
model.geom('geom1').feature('wp1').geom.create('r3', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r3').set('size', [6 10]);
model.geom('geom1').feature('wp1').geom.feature('r3').set('pos', [2 15]);
model.geom('geom1').feature('wp1').geom.run('r3');
model.geom('geom1').feature('wp1').geom.create('r4', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r4').set('size', [2 8]);
model.geom('geom1').feature('wp1').geom.feature('r4').set('pos', [4 7]);
model.geom('geom1').feature('wp1').geom.feature('r4').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('wp1').geom.feature('r4').setIndex('layer', 2, 0);
model.geom('geom1').feature('wp1').geom.feature('r4').setIndex('layername', 'Layer 2', 1);
model.geom('geom1').feature('wp1').geom.feature('r4').setIndex('layer', 2, 1);
model.geom('geom1').feature('wp1').geom.feature('r4').setIndex('layername', 'Layer 3', 2);
model.geom('geom1').feature('wp1').geom.feature('r4').setIndex('layer', 2, 2);
model.geom('geom1').feature('wp1').geom.run('r4');
model.geom('geom1').feature('wp1').geom.create('pol1', 'Polygon');
model.geom('geom1').feature('wp1').geom.feature('pol1').set('source', 'table');
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 0, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 1, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 5, 1, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 2, 2, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 5, 2, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 2, 3, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 7, 3, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 20, 4, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 7, 4, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'a', 5, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 5, 1);
model.geom('geom1').feature('wp1').geom.run('pol1');
model.geom('geom1').feature('wp1').geom.create('c1', 'Circle');
model.geom('geom1').feature('wp1').geom.feature('c1').set('r', 'Rwater+Rpml');
model.geom('geom1').feature('wp1').geom.feature('c1').set('angle', 90);
model.geom('geom1').feature('wp1').geom.feature('c1').set('rot', -90);
model.geom('geom1').feature('wp1').geom.feature('c1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('wp1').geom.feature('c1').setIndex('layer', 'Rpml', 0);
model.geom('geom1').feature('wp1').geom.run('c1');
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('rev1', 'Revolve');
model.geom('geom1').feature('rev1').set('angtype', 'specang');
model.geom('geom1').feature('rev1').set('angle2', 90);
model.geom('geom1').run('rev1');
model.geom('geom1').create('rot1', 'Rotate');
model.geom('geom1').feature('rot1').selection('input').set({'rev1'});
model.geom('geom1').feature('rot1').set('rot', 'range(90,90,270)');
model.geom('geom1').feature('rot1').set('keep', true);
model.geom('geom1').runPre('fin');

model.view('view1').set('renderwireframe', true);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Water domain - Inner');
model.selection('sel1').set([3 4 22 32]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Water domain - PML');
model.selection('sel2').set([1 2 21 31]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Aluminum');
model.selection('sel3').set([5 6 23 33]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Steel');
model.selection('sel4').set([7 8 17 18 19 20 24 29 30 34 35 36]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('+Z poled Piezo');
model.selection('sel5').set([9 10 13 14 25 27 37 39]);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('-Z poled Piezo');
model.selection('sel6').set([11 12 15 16 26 28 38 40]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Water domains');
model.selection('uni1').set('input', {'sel1' 'sel2'});
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Piezo domains');
model.selection('uni2').set('input', {'sel5' 'sel6'});
model.selection.create('com1', 'Complement');
model.selection('com1').model('comp1');
model.selection('com1').label('Solid domains');
model.selection('com1').set('input', {'uni1'});
model.selection.create('com2', 'Complement');
model.selection('com2').model('comp1');
model.selection('com2').label('Non-PML domains');
model.selection('com2').set('input', {'sel2'});
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').label('Ground boundaries');
model.selection('sel7').geom(2);
model.selection('sel7').set([28 29 38 39 45 46 93 99 103 145 151 155]);
model.selection.create('sel8', 'Explicit');
model.selection('sel8').model('comp1');
model.selection('sel8').label('Voltage boundaries');
model.selection('sel8').geom(2);
model.selection('sel8').set([33 34 43 44 96 102 148 154]);
model.selection.create('sel9', 'Explicit');
model.selection('sel9').model('comp1');
model.selection('sel9').label('Fixed boundaries');
model.selection('sel9').geom(2);
model.selection('sel9').set([19 20 88 164]);
model.selection.create('sel10', 'Explicit');
model.selection('sel10').model('comp1');
model.selection('sel10').label('Exterior Field boundaries');
model.selection('sel10').geom(2);
model.selection('sel10').set([9 10 82 125]);

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.named('sel10');
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').selection.geom('geom1', 2);
model.cpl('intop2').selection.set([14 15 85 128]);
model.cpl.create('intop3', 'Integration', 'geom1');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').selection.geom('geom1', 0);
model.cpl('intop3').selection.set([46]);

model.coordSystem.create('sys2', 'geom1', 'Rotated');
model.coordSystem('sys2').set('angle', {'0' 'pi' '0'});
model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.named('sel2');
model.coordSystem('pml1').set('ScalingType', 'Spherical');
model.coordSystem('pml1').set('stretchingType', 'rational');
model.coordSystem('pml1').set('PMLfactor', '0.5');
model.coordSystem('pml1').set('PMLgamma', '5');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water, liquid');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat2').label('Aluminum');
model.material('mat2').set('family', 'aluminum');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat2').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.33');
model.material('mat2').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat2').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat2').propertyGroup('Murnaghan').set('n', '-350[GPa]');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').label('Steel AISI 4340');
model.material('mat3').set('family', 'steel');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.28');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').propertyGroup.create('StrainCharge', 'Strain-charge form');
model.material('mat4').propertyGroup.create('StressCharge', 'Stress-charge form');
model.material('mat4').label('Lead Zirconate Titanate (PZT-4)');
model.material('mat4').set('family', 'custom');
model.material('mat4').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat4').set('customdiffuse', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat4').set('noise', true);
model.material('mat4').set('fresnel', 0.9);
model.material('mat4').set('roughness', 0.1);
model.material('mat4').set('metallic', 0);
model.material('mat4').set('pearl', 0);
model.material('mat4').set('diffusewrap', 0);
model.material('mat4').set('clearcoat', 0);
model.material('mat4').set('reflectance', 0);
model.material('mat4').propertyGroup('def').set('relpermittivity', {'762.5' '0' '0' '0' '762.5' '0' '0' '0' '663.2'});
model.material('mat4').propertyGroup('def').set('density', '7500[kg/m^3]');
model.material('mat4').propertyGroup('StrainCharge').set('sE', {'1.23e-011[1/Pa]' '-4.05e-012[1/Pa]' '-5.31e-012[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '-4.05e-012[1/Pa]' '1.23e-011[1/Pa]' '-5.31e-012[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '0[1/Pa]' '-5.31e-012[1/Pa]' '-5.31e-012[1/Pa]' '1.55e-011[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '3.9e-011[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '3.9e-011[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '3.27e-011[1/Pa]'});
model.material('mat4').propertyGroup('StrainCharge').set('dET', {'0[C/N]' '0[C/N]' '-1.23e-010[C/N]' '0[C/N]' '0[C/N]' '-1.23e-010[C/N]' '0[C/N]' '0[C/N]' '2.89e-010[C/N]' '0[C/N]'  ...
'4.96e-010[C/N]' '0[C/N]' '4.96e-010[C/N]' '0[C/N]' '0[C/N]' '0[C/N]' '0[C/N]' '0[C/N]'});
model.material('mat4').propertyGroup('StrainCharge').set('epsilonrT', {'1475' '0' '0' '0' '1475' '0' '0' '0' '1300'});
model.material('mat4').propertyGroup('StressCharge').set('cE', {'1.38999e+011[Pa]' '7.78366e+010[Pa]' '7.42836e+010[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '7.78366e+010[Pa]' '1.38999e+011[Pa]' '7.42836e+010[Pa]' '0[Pa]'  ...
'0[Pa]' '0[Pa]' '7.42836e+010[Pa]' '7.42836e+010[Pa]' '1.15412e+011[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]'  ...
'0[Pa]' '2.5641e+010[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '2.5641e+010[Pa]' '0[Pa]'  ...
'0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '3.0581e+010[Pa]'});
model.material('mat4').propertyGroup('StressCharge').set('eES', {'0[C/m^2]' '0[C/m^2]' '-5.20279[C/m^2]' '0[C/m^2]' '0[C/m^2]' '-5.20279[C/m^2]' '0[C/m^2]' '0[C/m^2]' '15.0804[C/m^2]' '0[C/m^2]'  ...
'12.7179[C/m^2]' '0[C/m^2]' '12.7179[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]'});
model.material('mat4').propertyGroup('StressCharge').set('epsilonrS', {'762.5' '0' '0' '0' '762.5' '0' '0' '0' '663.2'});
model.material('mat1').selection.named('uni1');
model.material('mat2').selection.named('sel3');
model.material('mat3').selection.named('sel4');
model.material('mat4').selection.named('uni2');

model.physics('acpr').selection.named('uni1');
model.physics('acpr').prop('ReferencePressure').set('ReferenceType', 'ReferencePressureWater');
model.physics('acpr').create('efc1', 'ExteriorFieldCalculation', 2);
model.physics('acpr').feature('efc1').selection.named('sel10');
model.physics('acpr').feature('efc1').setIndex('SymmetryCondition2', 1, 0);
model.physics('solid').selection.named('com1');
model.physics('solid').feature('pzm1').selection.named('sel5');
model.physics('solid').create('pzm2', 'PiezoelectricMaterialModel', 3);
model.physics('solid').feature('pzm2').selection.named('sel6');
model.physics('solid').feature('pzm2').set('coordinateSystem', 'sys2');
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.named('sel9');
model.physics('es').selection.named('uni2');
model.physics('es').create('gnd1', 'Ground', 2);
model.physics('es').feature('gnd1').selection.named('sel7');
model.physics('es').create('pot1', 'ElectricPotential', 2);
model.physics('es').feature('pot1').selection.named('sel8');
model.physics('es').feature('pot1').set('V0', 'V0');

model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.named('com2');
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.named('uni1');
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', '1500[m/s]/f0max/6');
model.mesh('mesh1').feature('ftet1').create('size2', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size2').selection.named('com1');
model.mesh('mesh1').feature('ftet1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hnarrowactive', true);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hnarrow', 2);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(3);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('bl1').selection.named('sel1');
model.mesh('mesh1').feature('bl1').set('smoothtransition', false);
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('sel10');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 1);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', '1500[m/s]/f0max/6/20');
model.mesh('mesh1').run;

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('rho0', 'intop3(acpr.rho)', 'Density of water at room temperature');
model.variable('var1').set('c0', 'intop3(acpr.c)', 'Speed of sound in water at room temperature');
model.variable('var1').set('Zaco', 'intop2(p)/intop2(acpr.iomega*(w+eps))/(rho0*c0)', 'Specific acoustic impedance');
model.variable('var1').set('pext_1', 'pext(0,0,-1)', 'Exterior field pressure at 1 m');
model.variable('var1').set('prms', 'sqrt(0.5*pext_1*conj(pext_1))[Pa]', 'RMS pressure at 1 m');
model.variable('var1').set('TVR', '20*log10(prms/Vrms/1[uPa/V])', 'Transmitting Voltage Response (TVR)');
model.variable('var1').set('pext_Zeval', 'pext(0,0,Zeval[1/m])', 'Exterior field pressure at Zeval');
model.variable('var1').set('Ifront', '0.5*pext_Zeval*conj(pext_Zeval)[Pa^2]/(rho0*c0)', 'On-axis intensity at Zeval');
model.variable('var1').set('Ptot', 'intop1(down(acpr.Ix)*acpr.nx+down(acpr.Iy)*acpr.ny+down(acpr.Iz)*acpr.nz)', 'Total radiated power');
model.variable('var1').set('Iave', 'Ptot/(4*pi*Zeval^2)', 'Average intensity of monopole source at Zeval');
model.variable('var1').set('Di', 'Ifront/Iave', 'Intensity directivity');
model.variable('var1').set('DI', '10*log10(Di)', 'Directivity index of Tonpilz transducer');
model.variable('var1').set('k0', '2*pi*freq/c0', 'Wave number');
model.variable('var1').set('DI_fl_pist', '10*log10((k0*a)^2/(1-2*besselj(1,2*k0*a)/(2*k0*a)))', 'Directivity index of flanged piston');
model.variable('var1').set('SPL_Zeval', 'intop3(subst(acpr.efc1.Lp_pext,x,0,y,0,z,Zeval))', 'SPL at Zeval');
model.variable('var1').set('SPL_rel', 'acpr.efc1.Lp_pext-SPL_Zeval', 'SPL relative to 0 dB at Zeval');

model.study('std1').feature('freq').set('punit', 'kHz');
model.study('std1').feature('freq').set('plist', 'range(f0min,f0step,f0max)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(f0min,f0step,f0max)'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'kHz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (pze1_asb1) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) (pze1_asb1)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('hybridvar', {'comp1_p'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').create('mg2', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('mg2').set('hybridvar', {'comp1_u' 'comp1_V'});
model.sol('sol1').feature('s1').feature('i1').feature('mg2').set('gmglevels', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg2').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg2').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 40, 0);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 40, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').label('Sound Pressure Level (acpr)');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 40, 0);
model.result('pg3').create('iso1', 'Isosurface');
model.result('pg3').feature('iso1').set('expr', {'acpr.p_t'});
model.result('pg3').feature('iso1').set('number', '10');
model.result('pg3').feature('iso1').set('colortable', 'Wave');
model.result('pg3').feature('iso1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').label('Acoustic Pressure, Isosurfaces (acpr)');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 40, 0);
model.result('pg4').set('edges', 'off');
model.result('pg4').set('view', 'new');
model.result('pg4').create('rp1', 'RadiationPattern');
model.result('pg4').feature('rp1').set('expr', {'acpr.efc1.Lp_pext'});
model.result('pg4').feature('rp1').set('thetadisc', 40);
model.result('pg4').feature('rp1').set('phidisc', 60);
model.result('pg4').feature('rp1').set('grid', 'fine');
model.result('pg4').feature('rp1').set('colortable', 'Rainbow');
model.result('pg4').feature('rp1').set('colorscalemode', 'linear');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').label('Exterior-Field Sound Pressure Level (acpr)');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'none');
model.result('pg5').create('rp1', 'RadiationPattern');
model.result('pg5').feature('rp1').set('data', 'dset1');
model.result('pg5').feature('rp1').set('expr', {'acpr.efc1.pext'});
model.result('pg5').feature('rp1').set('thetadisc', 40);
model.result('pg5').feature('rp1').set('phidisc', 60);
model.result('pg5').feature('rp1').set('colortable', 'Cividis');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').label('Exterior-Field Pressure (acpr)');
model.result.create('pg6', 'PolarGroup');
model.result('pg6').set('data', 'dset1');
model.result('pg6').create('rp1', 'RadiationPattern');
model.result('pg6').feature('rp1').set('expr', {'acpr.efc1.Lp_pext'});
model.result('pg6').feature('rp1').set('legend', true);
model.result('pg6').feature('rp1').set('phidisc', 180);
model.result('pg6').label('Exterior-Field Sound Pressure Level xy-plane (acpr)');
model.result('pg6').setIndex('looplevelinput', 'last', 0);
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 40, 0);
model.result('pg7').set('defaultPlotID', 'stress');
model.result('pg7').label('Stress (solid)');
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').create('vol1', 'Volume');
model.result('pg7').feature('vol1').set('expr', {'solid.misesGp_peak'});
model.result('pg7').feature('vol1').set('threshold', 'manual');
model.result('pg7').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg7').feature('vol1').set('colortable', 'Rainbow');
model.result('pg7').feature('vol1').set('colortabletrans', 'none');
model.result('pg7').feature('vol1').set('colorscalemode', 'linear');
model.result('pg7').feature('vol1').set('resolution', 'custom');
model.result('pg7').feature('vol1').set('refine', 2);
model.result('pg7').feature('vol1').set('colortable', 'Prism');
model.result('pg7').feature('vol1').create('def', 'Deform');
model.result('pg7').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg7').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').label('Electric Potential (es)');
model.result('pg8').set('frametype', 'spatial');
model.result('pg8').set('showlegendsmaxmin', true);
model.result('pg8').set('data', 'dset1');
model.result('pg8').setIndex('looplevel', 40, 0);
model.result('pg8').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond1/pg1');
model.result('pg8').feature.create('mslc1', 'Multislice');
model.result('pg8').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg8').feature('mslc1').set('solutionparams', 'parent');
model.result('pg8').feature('mslc1').set('expr', 'V');
model.result('pg8').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg8').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg8').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg8').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg8').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg8').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg8').feature('mslc1').set('colortable', 'Dipole');
model.result('pg8').feature('mslc1').set('colorscalemode', 'linear');
model.result('pg8').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg8').feature('mslc1').set('data', 'parent');
model.result('pg8').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg8').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg8').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg8').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});
model.result('pg8').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg8').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg8').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg8').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg8').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg8').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg8').feature('strmsl1').set('titletype', 'none');
model.result('pg8').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg8').feature('strmsl1').set('udist', 0.02);
model.result('pg8').feature('strmsl1').set('maxlen', 0.4);
model.result('pg8').feature('strmsl1').set('maxtime', Inf);
model.result('pg8').feature('strmsl1').set('inheritcolor', false);
model.result('pg8').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg8').feature('strmsl1').set('maxtime', Inf);
model.result('pg8').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg8').feature('strmsl1').set('maxtime', Inf);
model.result('pg8').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg8').feature('strmsl1').set('maxtime', Inf);
model.result('pg8').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg8').feature('strmsl1').set('maxtime', Inf);
model.result('pg8').feature('strmsl1').set('data', 'parent');
model.result('pg8').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg8').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg8').feature('strmsl1').feature('col1').set('expr', 'V');
model.result('pg8').feature('strmsl1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg8').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg8').feature('strmsl1').feature('col1').set('colorscalemode', 'linear');
model.result('pg8').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg8').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').label('Electric Field Norm (es)');
model.result('pg9').set('frametype', 'spatial');
model.result('pg9').set('showlegendsmaxmin', true);
model.result('pg9').set('data', 'dset1');
model.result('pg9').setIndex('looplevel', 40, 0);
model.result('pg9').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');
model.result('pg9').feature.create('mslc1', 'Multislice');
model.result('pg9').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg9').feature('mslc1').set('solutionparams', 'parent');
model.result('pg9').feature('mslc1').set('expr', 'es.normE');
model.result('pg9').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg9').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg9').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg9').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg9').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg9').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg9').feature('mslc1').set('colortable', 'Prism');
model.result('pg9').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg9').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg9').feature('mslc1').set('colorscalemode', 'linear');
model.result('pg9').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg9').feature('mslc1').set('data', 'parent');
model.result('pg9').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg9').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg9').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg9').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});
model.result('pg9').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg9').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg9').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg9').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg9').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg9').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg9').feature('strmsl1').set('titletype', 'none');
model.result('pg9').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg9').feature('strmsl1').set('udist', 0.02);
model.result('pg9').feature('strmsl1').set('maxlen', 0.4);
model.result('pg9').feature('strmsl1').set('maxtime', Inf);
model.result('pg9').feature('strmsl1').set('inheritcolor', false);
model.result('pg9').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg9').feature('strmsl1').set('maxtime', Inf);
model.result('pg9').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg9').feature('strmsl1').set('maxtime', Inf);
model.result('pg9').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg9').feature('strmsl1').set('maxtime', Inf);
model.result('pg9').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg9').feature('strmsl1').set('maxtime', Inf);
model.result('pg9').feature('strmsl1').set('data', 'parent');
model.result('pg9').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg9').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg9').feature('strmsl1').feature('col1').set('expr', 'es.normE');
model.result('pg9').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg9').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg9').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg9').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg9').feature('strmsl1').feature('col1').set('colorscalemode', 'linear');
model.result('pg9').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg9').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').run;
model.result('pg1').set('view', 'view1');
model.result('pg1').run;
model.result('pg1').feature.remove('surf1');
model.result('pg1').run;
model.result('pg1').create('mslc1', 'Multislice');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').set('view', 'view1');
model.result('pg2').run;
model.result('pg2').feature.remove('surf1');
model.result('pg2').run;
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('expr', 'acpr.Lp_t');
model.result('pg2').feature('mslc1').set('descr', 'Total sound pressure level');
model.result('pg2').feature('mslc1').set('colortable', 'Rainbow');
model.result('pg2').feature('mslc1').set('colorscalemode', 'linear');
model.result('pg2').run;
model.result('pg4').run;

model.view('view3').camera.set('zoomanglefull', 13);
model.view('view3').camera.setIndex('position', -20, 0);
model.view('view3').camera.setIndex('position', -40, 1);
model.view('view3').camera.set('position', [-20 -40 -10]);
model.view('view3').camera.setIndex('target', 0, 1);
model.view('view3').camera.setIndex('target', -1.5, 2);
model.view('view3').camera.setIndex('up', -0.1, 0);
model.view('view3').camera.setIndex('up', -0.1, 1);
model.view('view3').camera.set('up', [-0.1 -0.1 1]);
model.view('view3').camera.setIndex('rotationpoint', -1.5, 2);
model.view('view3').camera.setIndex('viewoffset', -0.05, 0);
model.view('view3').camera.set('viewoffset', [-0.05 0]);

model.result('pg4').run;
model.result('pg4').feature('rp1').set('expr', 'SPL_rel');
model.result('pg4').feature('rp1').set('anglerestr', 'manual');
model.result('pg4').feature('rp1').set('thetamin', 90);
model.result('pg4').feature('rp1').set('thetarange', 90);
model.result('pg4').feature('rp1').set('sphere', 'manual');
model.result('pg4').feature('rp1').set('radius', 'abs(Zeval)');
model.result('pg4').run;
model.result('pg5').run;
model.result('pg6').run;
model.result('pg6').label('Relative polar beam sensitivity');
model.result('pg6').setIndex('looplevelinput', 'manual', 0);
model.result('pg6').setIndex('looplevel', [1 10 40], 0);
model.result('pg6').run;
model.result('pg6').feature('rp1').set('expr', 'SPL_rel');
model.result('pg6').feature('rp1').set('anglerestr', 'manual');
model.result('pg6').feature('rp1').set('phimin', -90);
model.result('pg6').feature('rp1').set('phirange', 180);
model.result('pg6').feature('rp1').set('refdir', [0 0 -1]);
model.result('pg6').feature('rp1').set('normal', [0 1 0]);
model.result('pg6').feature('rp1').set('radius', 'abs(Zeval)');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg7').run;
model.result('pg7').label('Displacement');
model.result('pg7').set('view', 'view1');
model.result('pg7').run;
model.result('pg7').feature('vol1').set('expr', 'solid.disp');
model.result('pg7').feature('vol1').set('descr', 'Displacement magnitude');
model.result('pg7').run;
model.result('pg7').run;

model.view.create('view5', 'geom1');
model.view('view5').model('comp1');
model.view('view5').camera.set('zoomanglefull', 2.9);
model.view('view5').camera.setIndex('position', -390, 0);
model.view('view5').camera.setIndex('position', -740, 1);
model.view('view5').camera.set('position', [-390 -740 110]);
model.view('view5').camera.setIndex('up', 0.05, 0);
model.view('view5').camera.setIndex('up', 0.13, 1);
model.view('view5').camera.set('up', [0.05 0.13 0.99]);
model.view('view5').camera.setIndex('viewoffset', -0.12, 0);
model.view('view5').camera.set('viewoffset', [-0.12 -0.9]);

model.result('pg8').run;
model.result('pg8').set('view', 'view5');
model.result('pg8').run;
model.result.dataset.create('pc1', 'ParCurve3D');
model.result.dataset('pc1').set('exprz', '(1-s)*(-1.02*Rwater)-s*500[mm]');
model.result.dataset('pc1').set('global', true);
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('On-axis Pressure');
model.result('pg10').setIndex('looplevelinput', 'last', 0);
model.result('pg10').set('titletype', 'label');
model.result('pg10').set('xlabelactive', true);
model.result('pg10').set('xlabel', 'Distance from the transducer (mm)');
model.result('pg10').set('ylabelactive', true);
model.result('pg10').set('ylabel', 'Pressure (Pa)');
model.result('pg10').create('lngr1', 'LineGraph');
model.result('pg10').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg10').feature('lngr1').set('linewidth', 'preference');
model.result('pg10').feature('lngr1').selection.set([136]);
model.result('pg10').feature('lngr1').set('expr', 'p');
model.result('pg10').feature('lngr1').set('descr', 'Acoustic pressure');
model.result('pg10').feature('lngr1').set('xdata', 'expr');
model.result('pg10').feature('lngr1').set('xdataexpr', '-z');
model.result('pg10').feature('lngr1').set('legend', true);
model.result('pg10').feature('lngr1').set('legendmethod', 'manual');
model.result('pg10').feature('lngr1').setIndex('legends', 'Domain evaluation', 0);
model.result('pg10').run;
model.result('pg10').create('lngr2', 'LineGraph');
model.result('pg10').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg10').feature('lngr2').set('linewidth', 'preference');
model.result('pg10').feature('lngr2').set('data', 'pc1');
model.result('pg10').feature('lngr2').setIndex('looplevelinput', 'last', 0);
model.result('pg10').feature('lngr2').set('expr', 'pext(x,y,z)');
model.result('pg10').feature('lngr2').set('xdata', 'expr');
model.result('pg10').feature('lngr2').set('xdataexpr', '-z');
model.result('pg10').feature('lngr2').set('linecolor', 'cyclereset');
model.result('pg10').feature('lngr2').set('linestyle', 'dashed');
model.result('pg10').feature('lngr2').set('legend', true);
model.result('pg10').feature('lngr2').set('legendmethod', 'manual');
model.result('pg10').feature('lngr2').setIndex('legends', 'Exterior field evaluation', 0);
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Specific Acoustic Impedance');
model.result('pg11').set('titletype', 'label');
model.result('pg11').set('ylabelactive', true);
model.result('pg11').set('ylabel', 'Z/(\rho c)');
model.result('pg11').set('legendpos', 'upperleft');
model.result('pg11').create('glob1', 'Global');
model.result('pg11').feature('glob1').set('markerpos', 'datapoints');
model.result('pg11').feature('glob1').set('linewidth', 'preference');
model.result('pg11').feature('glob1').setIndex('expr', 'abs(Zaco)', 0);
model.result('pg11').feature('glob1').setIndex('unit', 1, 0);
model.result('pg11').feature('glob1').setIndex('descr', '', 0);
model.result('pg11').feature('glob1').setIndex('expr', 'real(Zaco)', 1);
model.result('pg11').feature('glob1').setIndex('unit', 1, 1);
model.result('pg11').feature('glob1').setIndex('descr', '', 1);
model.result('pg11').feature('glob1').setIndex('expr', 'imag(Zaco)', 2);
model.result('pg11').feature('glob1').setIndex('unit', 1, 2);
model.result('pg11').feature('glob1').setIndex('descr', '', 2);
model.result('pg11').feature('glob1').set('legendmethod', 'manual');
model.result('pg11').feature('glob1').setIndex('legends', 'Absolute value', 0);
model.result('pg11').feature('glob1').setIndex('legends', 'Real part', 1);
model.result('pg11').feature('glob1').setIndex('legends', 'Imaginary part', 2);
model.result('pg11').run;
model.result('pg11').run;
model.result.duplicate('pg12', 'pg11');
model.result('pg12').run;
model.result('pg12').label('Transmitting Voltage Response');
model.result('pg12').set('ylabel', 'TVR (dB rel. 1\mu Pa/V)');
model.result('pg12').set('legendpos', 'lowerright');
model.result('pg12').run;
model.result('pg12').feature('glob1').remove('unit', [1 2]);
model.result('pg12').feature('glob1').remove('descr', [1 2]);
model.result('pg12').feature('glob1').remove('expr', [1 2]);
model.result('pg12').feature('glob1').setIndex('expr', 'TVR', 0);
model.result('pg12').feature('glob1').setIndex('unit', '', 0);
model.result('pg12').feature('glob1').setIndex('descr', 'Transmitting Voltage Response (TVR)', 0);
model.result('pg12').feature('glob1').set('legend', false);
model.result('pg12').run;
model.result('pg11').run;
model.result.duplicate('pg13', 'pg11');
model.result('pg13').run;
model.result('pg13').label('Directivity Index (DI)');
model.result('pg13').set('ylabel', 'DI (dB)');
model.result('pg13').set('legendpos', 'lowerleft');
model.result('pg13').run;
model.result('pg13').feature('glob1').setIndex('expr', 'DI', 0);
model.result('pg13').feature('glob1').setIndex('unit', '', 0);
model.result('pg13').feature('glob1').setIndex('descr', 'Directivity index of Tonpilz transducer', 0);
model.result('pg13').feature('glob1').setIndex('expr', 'DI_fl_pist', 1);
model.result('pg13').feature('glob1').setIndex('unit', '', 1);
model.result('pg13').feature('glob1').setIndex('descr', 'Directivity index of flanged piston', 1);
model.result('pg13').feature('glob1').remove('unit', 2);
model.result('pg13').feature('glob1').remove('descr', 2);
model.result('pg13').feature('glob1').remove('expr', [2]);
model.result('pg13').feature('glob1').set('legendmethod', 'automatic');
model.result('pg13').run;
model.result('pg12').run;
model.result.duplicate('pg14', 'pg12');
model.result('pg14').run;
model.result('pg14').label('Total Radiated Power');
model.result('pg14').set('ylabelactive', false);
model.result('pg14').set('legendpos', 'upperleft');
model.result('pg14').run;
model.result('pg14').feature('glob1').setIndex('expr', 'Ptot', 0);
model.result('pg14').feature('glob1').setIndex('unit', 'mW', 0);
model.result('pg14').feature('glob1').setIndex('descr', 'Total radiated power', 0);
model.result('pg14').run;
model.result.dataset.create('grid1', 'Grid3D');
model.result.dataset('grid1').set('source', 'data');
model.result.dataset('grid1').set('parmax1', 0);
model.result.dataset('grid1').set('parmin2', -200);
model.result.dataset('grid1').set('parmax2', 200);
model.result.dataset('grid1').set('parmax3', -200);
model.result.dataset('grid1').set('res1', 2);
model.result.dataset('grid1').set('res2', 150);
model.result.dataset('grid1').set('res3', 150);
model.result.create('pg15', 'PlotGroup3D');
model.result('pg15').run;
model.result('pg15').label('Exterior Pressure Slice');
model.result('pg15').set('titletype', 'manual');
model.result('pg15').set('title', 'Slice Plot of Exterior Pressure Field');
model.result('pg15').set('paramindicator', '');
model.result('pg15').create('surf1', 'Surface');
model.result('pg15').feature('surf1').set('data', 'grid1');
model.result('pg15').feature('surf1').set('expr', 'if(sqrt(x^2+y^2+z^2)>Rwater,pext(x,y,z),NaN)');
model.result('pg15').run;
model.result.create('pg16', 'PlotGroup3D');
model.result('pg16').run;
model.result('pg16').label('Exterior SPL Slice');
model.result('pg16').set('titletype', 'manual');
model.result('pg16').set('title', 'Slice Plot of Exterior SPL');
model.result('pg16').set('paramindicator', '');
model.result('pg16').setIndex('looplevel', 20, 0);
model.result('pg16').create('surf1', 'Surface');
model.result('pg16').feature('surf1').set('data', 'grid1');
model.result('pg16').feature('surf1').setIndex('looplevel', 20, 0);
model.result('pg16').feature('surf1').set('expr', 'if(sqrt(x^2+y^2+z^2)>Rwater,acpr.efc1.Lp_pext,NaN)');
model.result('pg16').feature('surf1').set('colortable', 'Rainbow');
model.result('pg16').feature('surf1').set('colorscalemode', 'linear');
model.result('pg16').run;
model.result('pg16').create('slc1', 'Slice');
model.result('pg16').feature('slc1').set('expr', 'acpr.Lp_t');
model.result('pg16').feature('slc1').set('quickxnumber', 1);
model.result('pg16').feature('slc1').set('inheritplot', 'surf1');
model.result('pg16').feature('slc1').create('sel1', 'Selection');
model.result('pg16').feature('slc1').feature('sel1').selection.set([3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 22 23 24 25 26 27 28 29 30 32 33 34 35 36 37 38 39 40]);
model.result('pg16').run;
model.result('pg1').run;
model.result('pg1').feature('mslc1').create('sel1', 'Selection');
model.result('pg1').feature('mslc1').feature('sel1').selection.set([3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 22 23 24 25 26 27 28 29 30 32 33 34 35 36 37 38 39 40]);
model.result('pg1').run;

model.title('Piezoelectric Tonpilz Transducer');

model.description('A tonpilz transducer is used for relatively low frequency, high power sound emission. It is one of the popular transducer configuration for SONAR applications. The transducer consists of piezoceramic rings stacked between a head mass and a tail mass which are connected by a central bolt. In this example the frequency response of the transducer is studied to determine structural and acoustic response of the device such as deformation, stresses, radiated pressure, sound pressure level, exterior-field beam pattern, the transmitting voltage response (TVR) curve, and the directivity index (DI) of the sound beam.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('tonpilz_transducer.mph');

model.modelNode.label('Components');

out = model;
