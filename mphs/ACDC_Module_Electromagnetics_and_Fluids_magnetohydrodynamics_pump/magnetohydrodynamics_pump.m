function out = model
%
% magnetohydrodynamics_pump.m
%
% Model exported on May 26 2025, 21:24 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Electromagnetics_and_Fluids');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('mf', 'InductionCurrents', 'geom1');
model.physics('mf').model('comp1');
model.physics('mf').create('alf1', 'AmperesLawFluid');
model.physics('mf').feature('alf1').selection.all;
model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');

model.multiphysics.create('mhd1', 'Magnetohydrodynamics', 'geom1', 2);
model.multiphysics('mhd1').set('EMForce_physics', 'mf');
model.multiphysics('mhd1').set('FluidFlow_physics', 'spf');
model.multiphysics('mhd1').selection.all;

model.study.create('std1');
model.study('std1').create('fstat', 'FrequencyStationary');
model.study('std1').feature('fstat').set('freq', '1000');
model.study('std1').feature('fstat').set('solnum', 'auto');
model.study('std1').feature('fstat').set('notsolnum', 'auto');
model.study('std1').feature('fstat').set('outputmap', {});
model.study('std1').feature('fstat').set('ngenAUX', '1');
model.study('std1').feature('fstat').set('goalngenAUX', '1');
model.study('std1').feature('fstat').set('ngenAUX', '1');
model.study('std1').feature('fstat').set('goalngenAUX', '1');
model.study('std1').feature('fstat').setSolveFor('/physics/mf', true);
model.study('std1').feature('fstat').setSolveFor('/physics/spf', true);
model.study('std1').feature('fstat').setSolveFor('/multiphysics/mhd1', true);

model.param.set('N', '10');
model.param.descr('N', 'number or turns in coils');
model.param.set('I0', '1[A]');
model.param.descr('I0', 'coil current magnitude');
model.param.set('I1', 'I0*exp(-i*120[deg])');
model.param.descr('I1', 'phase 1');
model.param.set('I2', 'I0');
model.param.descr('I2', 'phase 2');
model.param.set('I3', 'I0*exp(i*120[deg])');
model.param.descr('I3', 'phase 3');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').repairTolType('relative');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', [175 200]);
model.geom('geom1').feature('r1').set('pos', [0 -100]);
model.geom('geom1').feature('r1').setIndex('layer', 50, 0);
model.geom('geom1').feature('r1').set('layerright', true);
model.geom('geom1').feature('r1').set('layerbottom', false);
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', [100 200]);
model.geom('geom1').feature('r2').set('pos', [0 -100]);
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', [20 200]);
model.geom('geom1').feature('r3').set('pos', [25 -100]);
model.geom('geom1').run('r3');
model.geom('geom1').create('r4', 'Rectangle');
model.geom('geom1').feature('r4').set('size', [20 40]);
model.geom('geom1').feature('r4').set('base', 'center');
model.geom('geom1').feature('r4').set('pos', [55 0]);
model.geom('geom1').run('r4');
model.geom('geom1').create('copy1', 'Copy');
model.geom('geom1').feature('copy1').selection('input').set({'r4'});
model.geom('geom1').feature('copy1').set('disply', '2*100/3');
model.geom('geom1').run('copy1');
model.geom('geom1').create('copy2', 'Copy');
model.geom('geom1').feature('copy2').selection('input').set({'r4'});
model.geom('geom1').feature('copy2').set('disply', '-2*100/3');
model.geom('geom1').run('copy2');

model.coordSystem.create('ie1', 'geom1', 'InfiniteElement');

model.geom('geom1').run;

model.coordSystem('ie1').selection.set([8]);
model.coordSystem('ie1').set('ScalingType', 'Cylindrical');

model.physics('spf').selection.set([2]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat1').label('Copper');
model.material('mat1').set('family', 'copper');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.35');
model.material('mat1').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat1').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat1').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat1').propertyGroup('linzRes').addInput('temperature');
model.material('mat1').selection.set([4 5 6]);
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Iron');
model.material('mat2').selection.set([1 3]);
model.material('mat2').propertyGroup('def').set('relpermeability', {'1e3'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1'});
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label(['Lithium, 200 ' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C']);
model.material('mat3').propertyGroup('def').set('electricconductivity', {'4[MS/m]' '0' '0' '0' '4[MS/m]' '0' '0' '0' '4[MS/m]'});
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'47' '0' '0' '0' '47' '0' '0' '0' '47'});
model.material('mat3').propertyGroup('def').set('dynamicviscosity', '6.12E-04');
model.material('mat3').propertyGroup('def').set('density', '510');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').selection.set([2]);

model.physics('mf').feature('alf1').selection.set([1 2 3]);
model.physics('mf').create('pc1', 'PeriodicCondition', 1);
model.physics('mf').feature('pc1').selection.set([2 3 5 6 8 21 26 27 29 30]);
model.physics('mf').create('coil1', 'Coil', 2);
model.physics('mf').feature('coil1').label('Multi- Turn Coil 1');
model.physics('mf').feature('coil1').selection.set([6]);
model.physics('mf').feature('coil1').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil1').set('ICoil', 'I1');
model.physics('mf').feature('coil1').set('N', 'N');
model.physics('mf').feature.duplicate('coil2', 'coil1');
model.physics('mf').feature('coil2').label('Multi- Turn Coil 2');
model.physics('mf').feature('coil2').selection.set([5]);
model.physics('mf').feature('coil2').set('ICoil', 'I2');
model.physics('mf').feature.duplicate('coil3', 'coil2');
model.physics('mf').feature('coil3').label('Multi- Turn Coil 3');
model.physics('mf').feature('coil3').selection.set([4]);
model.physics('mf').feature('coil3').set('ICoil', 'I3');
model.physics('spf').feature('fp1').set('minput_temperature_src', 'userdef');
model.physics('spf').feature('fp1').set('minput_temperature', 'T');
model.physics('spf').create('prpc1', 'PressurePointConstraint', 0);
model.physics('spf').feature('prpc1').selection.set([4]);
model.physics('spf').create('pfc1', 'PeriodicFlowCondition', 1);
model.physics('spf').feature('pfc1').selection.set([5 6]);

model.multiphysics('mhd1').selection.set([2]);

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('hauto', 3);
model.mesh('mesh1').run('size');
model.mesh('mesh1').feature('size1').set('hauto', 2);
model.mesh('mesh1').run('size1');
model.mesh('mesh1').feature.remove('size2');
model.mesh('mesh1').feature.remove('size3');
model.mesh('mesh1').feature('dis1').selection.set([5 6]);
model.mesh('mesh1').feature('dis1').set('elemcount', 40);
model.mesh('mesh1').feature('dis1').set('elemratio', 25);
model.mesh('mesh1').feature('dis1').set('symmetric', true);
model.mesh('mesh1').run('dis1');
model.mesh('mesh1').create('map2', 'Map');
model.mesh('mesh1').feature('map2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map2').selection.set([2]);
model.mesh('mesh1').feature('map2').set('adjustedgdistr', true);
model.mesh('mesh1').feature('map2').create('size1', 'Size');
model.mesh('mesh1').feature('map2').feature('size1').set('hauto', 1);
model.mesh('mesh1').feature.remove('cr1');
model.mesh('mesh1').feature('ftri1').selection.set([1 3 4 5 6 7]);
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').feature('map1').selection.remaining;
model.mesh('mesh1').run('map1');
model.mesh('mesh1').feature.remove('bl1');

model.study('std1').feature('fstat').set('freq', 50);
model.study('std1').feature('fstat').set('useparam', true);
model.study('std1').feature('fstat').setIndex('pname', 'N', 0);
model.study('std1').feature('fstat').setIndex('plistarr', '', 0);
model.study('std1').feature('fstat').setIndex('punit', '', 0);
model.study('std1').feature('fstat').setIndex('pname', 'N', 0);
model.study('std1').feature('fstat').setIndex('plistarr', '', 0);
model.study('std1').feature('fstat').setIndex('punit', '', 0);
model.study('std1').feature('fstat').setIndex('pname', 'I0', 0);
model.study('std1').feature('fstat').setIndex('plistarr', '0.1 1 5 10 15 20 25', 0);
model.study('std1').feature('fstat').set('pcontinuationmode', 'no');
model.study('std1').feature('fstat').set('preusesol', 'yes');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'fstat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'fstat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'fstat');
model.sol('sol1').feature('s1').set('control', 'fstat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').label('Direct (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature('ssDef').set('segvar', {'comp1_mf_PsiOrA'});
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subdamp', '0.5');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Magnetic Flux Density Norm (mf)');
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 7, 0);
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('surf1').set('colorcalibration', -0.8);
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature.create('str1', 'Streamline');
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('solutionparams', 'parent');
model.result('pg1').feature('str1').set('titletype', 'none');
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('udist', 0.03);
model.result('pg1').feature('str1').set('maxlen', 0.4);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('inheritcolor', false);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('data', 'parent');
model.result('pg1').feature('str1').selection.geom('geom1', 1);
model.result('pg1').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]);
model.result('pg1').feature('str1').set('inheritplot', 'surf1');
model.result('pg1').feature('str1').feature.create('col1', 'Color');
model.result('pg1').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg1').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg1').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg1').feature('str1').feature.create('filt1', 'Filter');
model.result('pg1').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').feature.create('con1', 'Contour');
model.result('pg1').feature('con1').set('showsolutionparams', 'on');
model.result('pg1').feature('con1').set('solutionparams', 'parent');
model.result('pg1').feature('con1').set('expr', 'r*mf.Aphi');
model.result('pg1').feature('con1').set('titletype', 'none');
model.result('pg1').feature('con1').set('number', 10);
model.result('pg1').feature('con1').set('levelrounding', false);
model.result('pg1').feature('con1').set('coloring', 'uniform');
model.result('pg1').feature('con1').set('colorlegend', false);
model.result('pg1').feature('con1').set('color', 'custom');
model.result('pg1').feature('con1').set('customcolor', [0.3764705955982208 0.3764705955982208 0.3764705955982208]);
model.result('pg1').feature('con1').set('resolution', 'fine');
model.result('pg1').feature('con1').set('inheritcolor', false);
model.result('pg1').feature('con1').set('showsolutionparams', 'on');
model.result('pg1').feature('con1').set('data', 'parent');
model.result('pg1').feature('con1').set('inheritplot', 'surf1');
model.result('pg1').feature('con1').feature.create('filt1', 'Filter');
model.result('pg1').feature('con1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset1');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Magnetic Flux Density Norm, Revolved Geometry (mf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'rev1');
model.result('pg2').setIndex('looplevel', 7, 0);
model.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond3/pg1');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').set('showsolutionparams', 'on');
model.result('pg2').feature('vol1').set('solutionparams', 'parent');
model.result('pg2').feature('vol1').set('colortable', 'Prism');
model.result('pg2').feature('vol1').set('colortabletrans', 'nonlinear');
model.result('pg2').feature('vol1').set('colorcalibration', -0.8);
model.result('pg2').feature('vol1').set('showsolutionparams', 'on');
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('solutionparams', 'parent');
model.result('pg2').feature('con1').set('expr', 'r*mf.Aphi');
model.result('pg2').feature('con1').set('titletype', 'none');
model.result('pg2').feature('con1').set('number', 10);
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('coloring', 'uniform');
model.result('pg2').feature('con1').set('colorlegend', false);
model.result('pg2').feature('con1').set('color', 'custom');
model.result('pg2').feature('con1').set('customcolor', [0.3764705955982208 0.3764705955982208 0.3764705955982208]);
model.result('pg2').feature('con1').set('resolution', 'fine');
model.result('pg2').feature('con1').set('inheritcolor', false);
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('data', 'parent');
model.result('pg2').feature('con1').set('inheritplot', 'vol1');
model.result('pg2').feature('con1').feature.create('filt1', 'Filter');
model.result('pg2').feature('con1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg2').feature('con1').feature('filt1').set('shownodespec', 'on');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Velocity (spf)');
model.result('pg3').set('dataisaxisym', 'off');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 7, 0);
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'spf.U');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Pressure (spf)');
model.result('pg4').set('dataisaxisym', 'off');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 7, 0);
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg4').feature.create('con1', 'Contour');
model.result('pg4').feature('con1').label('Contour');
model.result('pg4').feature('con1').set('showsolutionparams', 'on');
model.result('pg4').feature('con1').set('expr', 'p');
model.result('pg4').feature('con1').set('number', 40);
model.result('pg4').feature('con1').set('levelrounding', false);
model.result('pg4').feature('con1').set('smooth', 'internal');
model.result('pg4').feature('con1').set('showsolutionparams', 'on');
model.result('pg4').feature('con1').set('data', 'parent');
model.result.dataset('rev1').set('data', 'dset1');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Velocity, 3D (spf)');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('data', 'rev1');
model.result('pg5').setIndex('looplevel', 7, 0);
model.result('pg5').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond1/pg1');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').label('Surface');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('expr', 'spf.U');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg1').run;
model.result.dataset('dset1').set('frametype', 'material');
model.result('pg1').run;
model.result('pg1').set('frametype', 'material');
model.result('pg1').run;
model.result('pg1').feature.remove('str1');
model.result('pg1').run;
model.result('pg1').feature.remove('con1');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').run;
model.result('pg2').run;
model.result.remove('pg2');
model.result('pg3').run;
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').run;
model.result('pg5').run;
model.result('pg5').label('Velocity (spf) 1');
model.result('pg5').set('showlegendsmaxmin', true);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').run;
model.result('pg6').label('Velocity and Magnetic Flux Density');
model.result('pg6').set('edges', false);
model.result('pg6').set('showlegendsmaxmin', true);
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').create('con1', 'Contour');
model.result('pg6').feature('con1').set('expr', 'r*Aphi');
model.result('pg6').feature('con1').set('levelrounding', false);
model.result('pg6').feature('con1').set('coloring', 'uniform');
model.result('pg6').feature('con1').set('color', 'black');
model.result('pg6').feature('con1').set('colorlegend', false);
model.result('pg6').feature('con1').set('titletype', 'none');
model.result('pg6').run;
model.result('pg6').create('arws1', 'ArrowSurface');
model.result('pg6').feature('arws1').set('titletype', 'none');
model.result('pg6').feature('arws1').set('expr', {'u' 'w'});
model.result('pg6').feature('arws1').set('descr', 'Velocity field');
model.result('pg6').feature('arws1').set('arrowxmethod', 'coord');
model.result('pg6').feature('arws1').set('xcoord', 'range(25.1,18/10,44)');
model.result('pg6').feature('arws1').set('color', 'black');
model.result('pg6').run;
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('titletype', 'custom');
model.result('pg6').feature('surf1').set('typeintitle', false);
model.result('pg6').feature('surf1').set('expr', 'spf.U');
model.result('pg6').feature('surf1').set('descr', 'Velocity magnitude');
model.result('pg6').feature('surf1').set('colortable', 'Traffic');
model.result('pg6').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg6').run;
model.result('pg6').create('surf2', 'Surface');
model.result('pg6').feature('surf2').set('titletype', 'custom');
model.result('pg6').feature('surf2').set('typeintitle', false);
model.result('pg6').feature('surf2').set('colortable', 'RainbowLight');
model.result('pg6').feature('surf2').create('sel1', 'Selection');
model.result('pg6').feature('surf2').feature('sel1').selection.set([1 3 7]);
model.result('pg6').run;
model.result('pg6').create('surf3', 'Surface');
model.result('pg6').feature('surf3').set('expr', 'mf.Jphi');
model.result('pg6').feature('surf3').set('descr', 'Current density, phi-component');
model.result('pg6').feature('surf3').set('titletype', 'custom');
model.result('pg6').feature('surf3').set('typeintitle', false);
model.result('pg6').feature('surf3').set('colortable', 'Inferno');
model.result('pg6').feature('surf3').create('sel1', 'Selection');
model.result('pg6').feature('surf3').feature('sel1').selection.set([4 5 6]);
model.result('pg6').run;
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').run;
model.result('pg7').label('Lorentz Force and Current Density');
model.result('pg7').set('showlegendsmaxmin', true);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', 'mf.Jphi');
model.result('pg7').feature('surf1').set('descr', 'Current density, phi-component');
model.result('pg7').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg7').feature('surf1').set('colortable', 'WaveLight');
model.result('pg7').run;
model.result('pg7').create('con1', 'Contour');
model.result('pg7').feature('con1').set('expr', 'r*Aphi');
model.result('pg7').feature('con1').set('levelrounding', false);
model.result('pg7').feature('con1').set('coloring', 'uniform');
model.result('pg7').feature('con1').set('color', 'black');
model.result('pg7').feature('con1').set('colorlegend', false);
model.result('pg7').feature('con1').set('titletype', 'none');
model.result('pg7').run;
model.result('pg7').create('arws1', 'ArrowSurface');
model.result('pg7').feature('arws1').set('expr', {'mf.FLtzavr' 'mf.FLtzavz'});
model.result('pg7').feature('arws1').set('descr', 'Lorentz force contribution, time average');
model.result('pg7').feature('arws1').set('arrowxmethod', 'coord');
model.result('pg7').feature('arws1').set('xcoord', 'range(25.1,18/10,44)');
model.result('pg7').feature('arws1').set('ynumber', 30);
model.result('pg7').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg7').feature('arws1').set('color', 'black');
model.result('pg7').run;
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').run;
model.result('pg8').label('Velocity and Magnetic Flux Density, Revolved Geometry');
model.result('pg8').set('edges', false);
model.result('pg8').set('showlegendsunit', true);
model.result('pg8').create('vol1', 'Volume');
model.result('pg8').feature('vol1').set('expr', 'mf.normB/((dom!=2)*(dom!=8)*(dom!=7))');
model.result('pg8').feature('vol1').set('titletype', 'custom');
model.result('pg8').feature('vol1').set('typeintitle', false);
model.result('pg8').feature('vol1').set('descractive', true);
model.result('pg8').feature('vol1').set('descr', 'Magnetic flux density');
model.result('pg8').feature('vol1').set('colortable', 'AuroraBorealis');
model.result('pg8').run;
model.result('pg8').create('vol2', 'Volume');
model.result('pg8').feature('vol2').set('expr', 'abs(spf.U)');
model.result('pg8').feature('vol2').set('descractive', true);
model.result('pg8').feature('vol2').set('descr', 'Fluid velocity');
model.result('pg8').feature('vol2').set('titletype', 'custom');
model.result('pg8').feature('vol2').set('typeintitle', false);
model.result('pg8').feature('vol2').set('colortable', 'JupiterAuroraBorealis');
model.result('pg8').feature('vol2').set('colortabletrans', 'reverse');
model.result('pg8').feature('vol2').create('def1', 'Deform');
model.result('pg8').feature('vol2').feature('def1').set('revcoordsys', 'cylindrical');
model.result('pg8').run;
model.result('pg8').feature('vol2').feature('def1').set('expr', {'0' '0' 'abs(w)'});
model.result('pg8').feature('vol2').feature('def1').set('scaleactive', true);
model.result('pg8').feature('vol2').feature('def1').set('scale', 3);
model.result('pg8').run;
model.result('pg8').create('con1', 'Contour');
model.result('pg8').feature('con1').set('expr', 'Aphi*r');
model.result('pg8').feature('con1').set('levelrounding', false);
model.result('pg8').feature('con1').set('coloring', 'uniform');
model.result('pg8').feature('con1').set('color', 'black');
model.result('pg8').feature('con1').set('colorlegend', false);
model.result('pg8').feature('con1').set('titletype', 'none');
model.result('pg8').run;
model.result('pg8').run;

model.title('Magnetohydrodynamics Pump');

model.description('This introductory model illustrates the action of a magnetohydrodynamics pump. A moving magnetic field is created by three-phase coils, and the contrary induced magnetic field due to eddy currents in the liquid creates a repelling force on the liquid in the column, generating motion. This type of induction pump is used in for example high temperature cooling systems, where the lack of moving parts, and the pumped liquid being kept in a hermetically sealed system, are clear advantages.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('magnetohydrodynamics_pump.mph');

model.modelNode.label('Components');

out = model;
