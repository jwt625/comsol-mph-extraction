function out = model
%
% soec.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fuel_Cell_and_Electrolyzer_Module/Electrolyzers');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('we', 'WaterElectrolyzer', 'geom1');
model.physics('we').model('comp1');
model.physics('we').prop('H2GasMixture').set('H2O', '1');
model.physics('we').prop('H2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('we').prop('DefaultElectrodeReactionSettings').set('ElectrolyteType', 'SolidOxide');
model.physics('we').prop('DefaultElectrodeReactionSettings').set('OperationMode', 'Electrolyzer');
model.physics('we').prop('DefaultElectrodeReactionSettings').set('TRHE', '700[degC]');

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/we', true);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/we', true);

model.geom('geom1').insertFile('soec_geom_sequence.mph', 'geom1');
model.geom('geom1').run('difsel1');

model.param.label('Geometry Parameters');
model.param.create('par2');
model.param('par2').label('Physics Parameters');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('kappa', '1e-10[m^2]', 'Electrode permeability');
model.param('par2').set('por', '0.4', 'Gas pore volume fraction');
model.param('par2').set('por_l', '0.4', 'Electrolyte volume fraction');
model.param('par2').set('I_avg', '10^4[A/m^2]', 'Average current density');
model.param('par2').set('stoich', '1.2', 'Inlet steam stoichiometry');
model.param('par2').set('A_cell', 'W_cell*D_cell', 'Cell area');
model.param('par2').set('Mflux_in', 'stoich*18[g/mol]*I_avg*A_cell/(2*F_const)', 'Total inlet (steam) mass flux');
model.param('par2').set('T', '800[degC]', 'Cell temperature');
model.param('par2').set('sigmaeff_s', '465[S/m]', 'Electrode effective conductivity');
model.param('par2').set('i0_H2', '0.1[A/m^2]', 'Reference exchange current density, hydrogen reaction');
model.param('par2').set('i0_O2', '0.1[A/m^2]', 'Reference exchange current density, oxygen reaction');
model.param('par2').set('S', '1e9[m^2/m^3]', 'Electrode specific surface area');
model.param('par2').set('Rc', '1e-7[ohm*m^2]', 'Electrode-to-current-collector contact resistance');
model.param('par2').set('d_pore', '1e-6[m]', 'Pore diameter in gad diffusion electrode');

model.physics('we').selection.set([1 2 3]);
model.physics('we').prop('H2GasMixture').set('GasPhaseDiffusion', false);
model.physics('we').create('mem1', 'Membrane', 3);
model.physics('we').feature('mem1').selection.set([2]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('ElectrolyteConductivity', 'Electrolyte conductivity');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func.create('int1', 'Interpolation');
model.material('mat1').label('Yttria-Stabilized Zirconia, 8YSZ, (ZrO2)0.92-(Y2O3)0.08');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('funcname', 'log_sigmaT_vs_invT');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('table', {'0.8202666666666667' '2.2431906614786';  ...
'0.8526222222222222' '2.0972762645914402';  ...
'0.8912' '1.922178988326849';  ...
'0.9335111111111112' '1.7373540856031133';  ...
'0.9820444444444445' '1.5233463035019446';  ...
'1.0268444444444444' '1.319066147859922';  ...
'1.0766222222222224' '1.0856031128404666';  ...
'1.1463111111111113' '0.745136186770428';  ...
'1.2160000000000002' '0.3754863813229572';  ...
'1.296888888888889' '-0.03307392996108938';  ...
'1.384' '-0.5097276264591439';  ...
'1.4860444444444445' '-1.073929961089494';  ...
'1.6042666666666667' '-1.735408560311284';  ...
'1.7424000000000002' '-2.5136186770428006'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('argunit', {'1/K'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('sigmal', {'(10^(log_sigmaT_vs_invT(1000/T_reg))[S/cm*K])/T_reg' '0' '0' '0' '(10^(log_sigmaT_vs_invT(1000/T_reg))[S/cm*K])/T_reg' '0' '0' '0' '(10^(log_sigmaT_vs_invT(1000/T_reg))[S/cm*K])/T_reg'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('INFO_PREFIX:sigmal', ['Electrolytes for solid oxide fuel cells, J. Fergus, Journal of Power Sources 162 (2006) 30' native2unicode(hex2dec({'20' '13'}), 'unicode') '40.' newline  newline 'Conductivity values averaged from Figure 2.' newline ]);
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('T_reg', 'max(min(T,1/0.8203e-3),1/1.74e-3)');
model.material('mat1').propertyGroup('ElectrolyteConductivity').descr('T_reg', 'Temperature (regularized to valid range)');
model.material('mat1').propertyGroup('ElectrolyteConductivity').addInput('temperature');

model.physics('we').create('h2gde1', 'H2GasDiffusionElectrode', 3);
model.physics('we').feature('h2gde1').selection.named('geom1_blk3_dom');
model.physics('we').feature('h2gde1').set('sigmas', {'sigmaeff_s' '0' '0' '0' 'sigmaeff_s' '0' '0' '0' 'sigmaeff_s'});
model.physics('we').feature('h2gde1').set('epsl', 'por_l');
model.physics('we').feature('h2gde1').feature('h2gder1').set('i0_ref', 'i0_H2');
model.physics('we').feature('h2gde1').feature('h2gder1').set('Av', 'S');
model.physics('we').create('o2gde1', 'O2GasDiffusionElectrode', 3);
model.physics('we').feature('o2gde1').selection.named('geom1_blk1_dom');
model.physics('we').feature('o2gde1').set('sigmas', {'sigmaeff_s' '0' '0' '0' 'sigmaeff_s' '0' '0' '0' 'sigmaeff_s'});
model.physics('we').feature('o2gde1').set('epsl', 'por_l');
model.physics('we').feature('o2gde1').feature('o2gder1').set('i0_ref', 'i0_O2');
model.physics('we').feature('o2gde1').feature('o2gder1').set('Av', 'S');
model.physics('we').feature('ecph1').create('egnd1', 'ElectricGround', 2);
model.physics('we').feature('ecph1').feature('egnd1').selection.named('geom1_sel3');
model.physics('we').feature('ecph1').feature('egnd1').set('IncludeContactResistance', true);
model.physics('we').feature('ecph1').feature('egnd1').set('Rc', 'Rc');
model.physics('we').feature('ecph1').create('ec1', 'ElectrodeCurrent', 2);
model.physics('we').feature('ecph1').feature('ec1').set('ElectronicCurrentType', 'AverageCurrentDensity');
model.physics('we').feature('ecph1').feature('ec1').selection.named('geom1_sel4');
model.physics('we').feature('ecph1').feature('ec1').set('Ias', 'I_avg');
model.physics('we').feature('ecph1').feature('ec1').set('IncludeContactResistance', true);
model.physics('we').feature('ecph1').feature('ec1').set('Rc', 'Rc');

model.common('cminpt').set('modified', {'temperature' 'T'});

model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('size1').set('hmax', 'H_ch*0.8');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([5 6 7]);
model.mesh('mesh1').run('swe1');
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.set([4 8]);
model.mesh('mesh1').run('ftet1');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(3);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('bl1').selection.named('geom1_ext1_dom');
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('geom1_difsel1');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 2);
model.mesh('mesh1').feature('bl1').feature('blp').set('blstretch', 1.3);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', 'H_ch/10');
model.mesh('mesh1').run('bl1');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.named('geom1_sel3');
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').create('swe2', 'Sweep');
model.mesh('mesh1').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis1').selection.set([3]);
model.mesh('mesh1').feature('swe2').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('swe2').feature('dis1').set('elemratio', 2);
model.mesh('mesh1').feature('swe2').feature('dis1').set('reverse', true);
model.mesh('mesh1').feature('swe2').create('dis2', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis2').selection.set([2]);
model.mesh('mesh1').feature('swe2').feature('dis2').set('numelem', 2);
model.mesh('mesh1').feature('swe2').feature.duplicate('dis3', 'dis1');
model.mesh('mesh1').feature('swe2').feature('dis3').selection.set([1]);
model.mesh('mesh1').feature('swe2').feature('dis3').set('reverse', false);
model.mesh('mesh1').run;

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_we_ecph1_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_we_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_we_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_we_ecph1_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_we_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_we_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (we)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (we)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (we)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_we_ecph1_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_we_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_we_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_we_ecph1_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_we_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_we_phis').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-4);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').label('Direct (we)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('Algebraic Multigrid (we)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Geometric Multigrid (we)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').label('Electrode Potential with Respect to Ground (we)');
model.result('pg1').create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('expr', {'we.phis'});
model.result('pg1').create('arwv1', 'ArrowVolume');
model.result('pg1').feature('arwv1').set('expr', {'we.Isx' 'we.Isy' 'we.Isz'});
model.result('pg1').feature('arwv1').set('arrowbase', 'center');
model.result('pg1').feature('arwv1').set('color', 'gray');
model.result('pg1').feature('arwv1').create('filt1', 'Filter');
model.result('pg1').feature('arwv1').feature('filt1').set('expr', 'isdefined(root.comp1.we.phis)');
model.result('pg1').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').label('Electrolyte Potential (we)');
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('expr', {'we.phil'});
model.result('pg2').create('arwv1', 'ArrowVolume');
model.result('pg2').feature('arwv1').set('expr', {'we.Ilx' 'we.Ily' 'we.Ilz'});
model.result('pg2').feature('arwv1').set('arrowbase', 'center');
model.result('pg2').feature('arwv1').set('color', 'gray');
model.result('pg2').feature('arwv1').create('filt1', 'Filter');
model.result('pg2').feature('arwv1').feature('filt1').set('expr', 'isdefined(we.phil)');
model.result('pg2').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result('pg1').run;
model.result('pg1').run;

model.physics.create('fp', 'FreeAndPorousMediaFlow', 'geom1');
model.physics('fp').model('comp1');

model.study('std1').feature('cdi').setSolveFor('/physics/fp', true);
model.study('std1').feature('stat').setSolveFor('/physics/fp', true);

model.physics('fp').selection.set([3 4 5 6 7 8]);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(3);
model.selection('sel1').label('Gas domains');
model.selection('sel1').set([3 4 5 6 7 8]);

model.physics('fp').selection.named('sel1');
model.physics('fp').prop('PhysicalModelProperty').set('Compressibility', 'CompressibleMALT03');
model.physics('fp').create('porous1', 'PorousMedium', 3);
model.physics('fp').feature('porous1').selection.named('geom1_blk3_dom');
model.physics('fp').feature('porous1').feature('pm1').set('epsilon_p_mat', 'userdef');
model.physics('fp').feature('porous1').feature('pm1').set('epsilon_p', 'por');
model.physics('fp').feature('porous1').feature('pm1').set('kappa_mat', 'userdef');
model.physics('fp').feature('porous1').feature('pm1').set('kappa', {'kappa' '0' '0' '0' 'kappa' '0' '0' '0' 'kappa'});
model.physics('fp').create('inl1', 'InletBoundary', 2);
model.physics('fp').feature('inl1').selection.named('geom1_sel1');
model.physics('fp').feature('inl1').set('BoundaryCondition', 'MassFlow');
model.physics('fp').feature('inl1').set('mfr', 'Mflux_in');
model.physics('fp').create('out1', 'OutletBoundary', 2);
model.physics('fp').feature('out1').selection.named('geom1_sel2');
model.physics('fp').feature('out1').set('NormalFlow', true);

model.multiphysics.create('rfh1', 'ReactingFlowH2GasPhase', 'geom1', 3);

model.physics('we').selection.all;
model.physics('we').prop('H2GasMixture').set('GasPhaseDiffusion', true);
model.physics('we').create('h2fch1', 'H2FlowChannel', 3);
model.physics('we').feature('h2fch1').selection.named('geom1_ext1_dom');
model.physics('we').feature('h2gde1').set('epsg', 'por');
model.physics('we').feature('h2gde1').set('IncludePoreWallInteractions', true);
model.physics('we').feature('h2gde1').set('d_pore', 'd_pore');
model.physics('we').feature('h2gasph1').create('h2in1', 'H2Inlet', 2);
model.physics('we').feature('h2gasph1').feature('h2in1').selection.named('geom1_sel1');
model.physics('we').feature('h2gasph1').feature('h2in1').set('MixtureSpecification', 'MassFlowRates');
model.physics('we').feature('h2gasph1').feature('h2in1').set('J0H2O', 'Mflux_in');
model.physics('we').feature('h2gasph1').create('h2out1', 'H2Outlet', 2);
model.physics('we').feature('h2gasph1').feature('h2out1').selection.named('geom1_sel2');
model.physics('we').feature('h2gasph1').feature('init1').set('x0H2O', '0.95*(1-x/(W_cell*stoich))');

model.study('std1').feature('cdi').setEntry('activateCoupling', 'rfh1', false);
model.study('std1').feature('stat').setEntry('activate', 'we', false);
model.study('std1').feature('stat').setEntry('activateCoupling', 'rfh1', false);
model.study('std1').create('stat2', 'Stationary');

model.sol.remove('sol1');
model.sol.remove('sol2');
model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 4 5 6 7 8]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 4 5 6 7 8]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 4 5 6 7 8]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 4 5 6 7 8]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_we_ecph1_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_we_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_we_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_we_ecph1_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_we_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_we_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (we)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (we)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (we)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, fluid flow variables (fp)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, fluid flow variables (fp)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_fp_inl1_Pmf'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_fp_inl1_Pmf'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'stat2');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').feature('comp1_we_wH2O_H2').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_we_h2gasph1_h2in1_wbndH2O').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_we_ecph1_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_we_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_we_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_we_wH2O_H2').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_we_h2gasph1_h2in1_wbndH2O').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_we_ecph1_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_we_phil').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_we_phis').set('scaleval', '1');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('initsoluse', 'sol3');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'stat2');
model.sol('sol1').create('s3', 'Stationary');
model.sol('sol1').feature('s3').set('stol', 1.0E-4);
model.sol('sol1').feature('s3').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s3').create('se1', 'Segregated');
model.sol('sol1').feature('s3').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s3').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s3').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u' 'comp1_fp_inl1_Pmf'});
model.sol('sol1').feature('s3').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s3').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('d1').label('Direct, fluid flow variables (fp)');
model.sol('sol1').feature('s3').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s3').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s3').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s3').feature('se1').feature('ss2').set('segvar', {'comp1_we_phil' 'comp1_we_phis' 'comp1_we_wH2O_H2' 'comp1_we_ecph1_ec1_phis0' 'comp1_we_h2gasph1_h2in1_wbndH2O'});
model.sol('sol1').feature('s3').feature('se1').feature('ss2').set('subjtech', 'onevery');
model.sol('sol1').feature('s3').create('d2', 'Direct');
model.sol('sol1').feature('s3').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d2').label('Direct (we)');
model.sol('sol1').feature('s3').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s3').feature('se1').feature('ss2').label('Water Electrolyzer');
model.sol('sol1').feature('s3').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s3').feature('se1').set('subinitcfl', 5);
model.sol('sol1').feature('s3').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s3').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s3').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s3').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s3').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s3').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s3').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s3').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s3').feature('se1').set('maxsegiter', 200);
model.sol('sol1').feature('s3').create('i1', 'Iterative');
model.sol('sol1').feature('s3').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s3').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s3').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i1').label('AMG, fluid flow variables (fp)');
model.sol('sol1').feature('s3').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_fp_inl1_Pmf'});
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_fp_inl1_Pmf'});
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').create('i2', 'Iterative');
model.sol('sol1').feature('s3').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i2').label('Algebraic Multigrid (we)');
model.sol('sol1').feature('s3').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').create('i3', 'Iterative');
model.sol('sol1').feature('s3').feature('i3').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i3').label('Geometric Multigrid (we)');
model.sol('sol1').feature('s3').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature.remove('fcDef');
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s3').create('fc1', 'FullyCoupled');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').label('Electrode Potential with Respect to Ground (we)');
model.result('pg1').create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('expr', {'we.phis'});
model.result('pg1').create('arwv1', 'ArrowVolume');
model.result('pg1').feature('arwv1').set('expr', {'we.Isx' 'we.Isy' 'we.Isz'});
model.result('pg1').feature('arwv1').set('arrowbase', 'center');
model.result('pg1').feature('arwv1').set('color', 'gray');
model.result('pg1').feature('arwv1').create('filt1', 'Filter');
model.result('pg1').feature('arwv1').feature('filt1').set('expr', 'isdefined(root.comp1.we.phis)');
model.result('pg1').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').label('Electrolyte Potential (we)');
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('expr', {'we.phil'});
model.result('pg2').create('arwv1', 'ArrowVolume');
model.result('pg2').feature('arwv1').set('expr', {'we.Ilx' 'we.Ily' 'we.Ilz'});
model.result('pg2').feature('arwv1').set('arrowbase', 'center');
model.result('pg2').feature('arwv1').set('color', 'gray');
model.result('pg2').feature('arwv1').create('filt1', 'Filter');
model.result('pg2').feature('arwv1').feature('filt1').set('expr', 'isdefined(we.phil)');
model.result('pg2').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').label('Mole Fraction, H2, Streamline (we)');
model.result('pg3').set('titletype', 'custom');
model.result('pg3').set('typeintitle', true);
model.result('pg3').set('prefixintitle', 'Species H2:');
model.result('pg3').create('str1', 'Streamline');
model.result('pg3').feature('str1').set('expr', {'we.tfluxH2x' 'we.tfluxH2y' 'we.tfluxH2z'});
model.result('pg3').feature('str1').set('posmethod', 'start');
model.result('pg3').feature('str1').set('pointtype', 'arrow');
model.result('pg3').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('str1').set('color', 'gray');
model.result('pg3').feature('str1').create('col', 'Color');
model.result('pg3').feature('str1').feature('col').set('expr', 'we.xH2');
model.result('pg3').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').label('Mole Fraction, H2, Surface (we)');
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('prefixintitle', 'Species H2:');
model.result('pg4').set('expressionintitle', false);
model.result('pg4').set('typeintitle', false);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'we.xH2'});
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').label('Mole Fraction, H2O, Streamline (we)');
model.result('pg5').set('titletype', 'custom');
model.result('pg5').set('typeintitle', true);
model.result('pg5').set('prefixintitle', 'Species H2O:');
model.result('pg5').create('str1', 'Streamline');
model.result('pg5').feature('str1').set('expr', {'we.tfluxH2Ox' 'we.tfluxH2Oy' 'we.tfluxH2Oz'});
model.result('pg5').feature('str1').set('posmethod', 'start');
model.result('pg5').feature('str1').set('pointtype', 'arrow');
model.result('pg5').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('str1').set('color', 'gray');
model.result('pg5').feature('str1').create('col', 'Color');
model.result('pg5').feature('str1').feature('col').set('expr', 'we.xH2O');
model.result('pg5').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').label('Mole Fraction, H2O, Surface (we)');
model.result('pg6').set('titletype', 'custom');
model.result('pg6').set('prefixintitle', 'Species H2O:');
model.result('pg6').set('expressionintitle', false);
model.result('pg6').set('typeintitle', false);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'we.xH2O'});
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').label('Velocity (fp)');
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').set('data', 'dset1');
model.result('pg7').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg7').feature.create('slc1', 'Slice');
model.result('pg7').feature('slc1').label('Slice');
model.result('pg7').feature('slc1').set('showsolutionparams', 'on');
model.result('pg7').feature('slc1').set('expr', 'fp.U');
model.result('pg7').feature('slc1').set('smooth', 'internal');
model.result('pg7').feature('slc1').set('showsolutionparams', 'on');
model.result('pg7').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([7 8 9 10 13 14 15 17 18 21 23 24 25 26 28 30 31 32 33 35 37 38 39 40 41 43 44 47 49 51 52 55]);
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').label('Pressure (fp)');
model.result('pg8').set('data', 'surf1');
model.result('pg8').set('frametype', 'spatial');
model.result('pg8').set('data', 'surf1');
model.result('pg8').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond2/pcond1/pg4');
model.result('pg8').feature.create('surf1', 'Surface');
model.result('pg8').feature('surf1').label('Surface');
model.result('pg8').feature('surf1').set('showsolutionparams', 'on');
model.result('pg8').feature('surf1').set('expr', 'p');
model.result('pg8').feature('surf1').set('colortable', 'Dipole');
model.result('pg8').feature('surf1').set('smooth', 'internal');
model.result('pg8').feature('surf1').set('showsolutionparams', 'on');
model.result('pg8').feature('surf1').set('data', 'parent');
model.result('pg8').feature('surf1').feature.create('tran1', 'Transparency');
model.result('pg1').run;
model.result('pg7').run;
model.result('pg7').feature('slc1').set('quickplane', 'xy');
model.result('pg7').feature('slc1').set('quickzmethod', 'coord');
model.result('pg7').feature('slc1').set('quickz', 'H_cell-H_ch/2');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('expr', {'u' 'v' 'w'});
model.result('pg7').feature('str1').set('descr', 'Velocity field');
model.result('pg7').feature('str1').selection.named('geom1_sel1');
model.result('pg7').feature('str1').set('pointtype', 'arrow');
model.result('pg7').feature('str1').set('arrowdistr', 'equalinvtime');
model.result('pg7').feature('str1').set('color', 'black');
model.result('pg7').run;
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').run;
model.result('pg9').label('Density');
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', 'fp.rho');
model.result('pg9').feature('surf1').set('descr', 'Density');
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').run;
model.result('pg10').label('Viscosity');
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', 'fp.mu');
model.result('pg10').feature('surf1').set('descr', 'Dynamic viscosity');
model.result('pg10').run;
model.result('pg4').run;
model.result('pg6').run;
model.result.create('pg11', 'PlotGroup3D');
model.result('pg11').run;
model.result('pg11').label('Molar Fraction and Flux, H2');
model.result('pg11').set('edges', false);
model.result('pg11').create('str1', 'Streamline');
model.result('pg11').feature('str1').set('expr', {'we.tfluxH2x' 'we.tfluxH2y' 'we.tfluxH2z'});
model.result('pg11').feature('str1').set('descr', 'Total flux');
model.result('pg11').feature('str1').set('selnumber', 30);
model.result('pg11').feature('str1').selection.named('geom1_sel2');
model.result('pg11').feature('str1').set('pointtype', 'arrow');
model.result('pg11').feature('str1').set('arrowdistr', 'equalinvtime');
model.result('pg11').feature('str1').set('color', 'black');
model.result('pg11').feature('str1').create('sel1', 'Selection');
model.result('pg11').feature('str1').feature('sel1').selection.named('geom1_ext1_dom');
model.result('pg11').run;
model.result('pg11').create('vol1', 'Volume');
model.result('pg11').feature('vol1').set('expr', 'we.xH2');
model.result('pg11').feature('vol1').set('descr', 'Mole fraction');
model.result('pg11').feature('vol1').create('sel1', 'Selection');
model.result('pg11').feature('vol1').feature('sel1').selection.named('geom1_blk3_dom');

model.view('view1').set('showgrid', false);

model.result('pg11').run;
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').run;
model.result('pg12').label('Cross-Sectional Electrolyte Current Density');
model.result('pg12').set('edges', false);
model.result('pg12').create('slc1', 'Slice');
model.result('pg12').feature('slc1').set('expr', 'we.Ilz');
model.result('pg12').feature('slc1').set('descr', 'Electrolyte current density vector, z-component');
model.result('pg12').feature('slc1').set('quickplane', 'xy');
model.result('pg12').feature('slc1').set('quickzmethod', 'coord');
model.result('pg12').feature('slc1').set('quickz', 'H_gde+H_el/2');
model.result('pg12').run;

model.title('Solid Oxide Electrolyzer');

model.description('This example models a solid oxide electrolyzer cell wherein water vapor is reduced to form hydrogen gas on the cathode, and oxygen gas is evolved on the anode. The current distribution in the cell is coupled to the cathode mass transfer of hydrogen and water and momentum transport.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('soec.mph');

model.modelNode.label('Components');

out = model;
