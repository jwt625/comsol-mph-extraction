function out = model
%
% tweeter_shape_optimization.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Optimization');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('shell', 'Shell', 'geom1');
model.physics('shell').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics.create('cir', 'Circuit', 'geom1');
model.physics('cir').model('comp1');

model.multiphysics.create('asb1', 'AcousticStructureBoundary', 'geom1', 1);
model.multiphysics('asb1').set('Acoustics_physics', 'acpr');
model.multiphysics('asb1').set('Structure_physics', 'shell');
model.multiphysics('asb1').selection.all;

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std1').feature('freq').setSolveFor('/physics/shell', true);
model.study('std1').feature('freq').setSolveFor('/physics/solid', true);
model.study('std1').feature('freq').setSolveFor('/physics/cir', true);
model.study('std1').feature('freq').setSolveFor('/multiphysics/asb1', true);

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').insertFile('tweeter_shape_optimization_geom_sequence.mph', 'geom1');
model.geom('geom1').run('sel11');

model.param.label('Geometry Parameters');
model.param.create('par2');
model.param('par2').label('Model Parameters');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('c0', '343[m/s]', 'Speed of sound');
model.param('par2').set('fmax', '20[kHz]', 'Maximum frequency analyzed');
model.param('par2').set('fmax_optim', '20[kHz]', 'Maximum frequency optimized for');
model.param('par2').set('fmin', '0.5[kHz]', 'Minimum frequency analyzed');
model.param('par2').set('fmin_optim', '5[kHz]', 'Minimum frequency optimized for');
model.param('par2').set('lam0', 'c0/fmax', 'Minimum wavelength');
model.param('par2').set('nf', '150', 'Number of frequencies');
model.param('par2').set('nf_optim', '60', 'Number of frequencies in the optimization');
model.param('par2').set('V0', 'sqrt(2)[V]', 'Driving voltage');
model.param('par2').set('rf_pa', '5000[Pa*s/m^2]', 'Flow resistivity of the poroacoustic material');
model.param('par2').set('th_dome', '0.5[mm]', 'Thickness of the dome');
model.param('par2').set('th_former', '0.25[mm]', 'Thickness of the former');
model.param('par2').set('th_susp', '0.25[mm]', 'Thickness of the suspension');
model.param('par2').set('damp_susp', '0.2', 'Damping Ratio of the suspension');
model.param('par2').set('mesh_optim', '1[mm]', 'Maximum mesh size of the shape optimization and structural boundaries');
model.param('par2').set('target_spl', '75[dB]', 'Target sound pressure level');
model.param('par2').set('disp_dome', '3[mm]', 'Maximum displacement of the dome Free Shape Boundary');
model.param('par2').set('disp_wave', '6[mm]', 'Maximum displacement of the waveguide Free Shape Boundary');
model.param.create('par3');
model.param('par3').label('Thiele Small Parameters');

% To import content from file, use:
% model.param('par3').loadFile('FILENAME');
model.param('par3').set('BL', '3.2[T*m]', 'Force factor, flux density (B) times coil length (L)');
model.param('par3').set('R_E', '4[ohm]', 'Voice coil resistance');
model.param('par3').set('L_e', '0.1[mH]', 'Voice coil inductance (constant)');
model.param('par3').set('n_e', '0.7', 'Voice coil loss factor');
model.param('par3').set('V0rms', 'V0/sqrt(2)', 'Driving voltage (rms)');
model.param('par3').set('R_g', '0[ohm]', 'Driver output resistance');

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.named('geom1_sel2');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('L_E', '(L_e/(sin(n_e*pi/2)))*(acpr.omega[s/rad])^(n_e-1)');
model.variable('var1').descr('L_E', 'Voice coil inductance (frequency dependent)');
model.variable('var1').set('Rp_E', '(L_e/(cos(n_e*pi/2)))*(acpr.omega[s/rad])^(n_e)[ohm/H]');
model.variable('var1').descr('Rp_E', 'Resistance (losses in magnetic system)');
model.variable('var1').set('v0', 'aveop1(solid.u_tZ)');
model.variable('var1').descr('v0', 'Voice coil velocity');
model.variable('var1').set('obj_1', 'sum((comp1.Lp_pext_opt(sin(angle_eval/8*n), cos(angle_eval/8*n))-target_spl)^2, n, 0, 4)');
model.variable('var1').descr('obj_1', 'Optimization objective');

model.common.create('fsd1', 'FreeShapeDomain', 'comp1');
model.common('fsd1').selection.all;
model.common('fsd1').selection.set([2 3]);
model.common.create('fsb1', 'FreeShapeBoundary', 'comp1');
model.common('fsb1').selection.named('geom1_sel6');
model.common('fsb1').set('filterRadiusType', 'Medium');
model.common('fsb1').set('maximumDisplacement', 'disp_dome');
model.common.create('fsb2', 'FreeShapeBoundary', 'comp1');
model.common('fsb2').selection.named('geom1_sel10');
model.common('fsb2').set('filterRadiusType', 'Medium');
model.common('fsb2').set('maximumDisplacement', 'disp_wave');
model.common.create('fsr1', 'FreeShapeSymmetry', 'comp1');
model.common('fsr1').selection.named('geom1_sel7');

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.named('geom1_sel1');
model.coordSystem('pml1').set('stretchingType', 'rational');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Composite');
model.material('mat2').propertyGroup('def').set('youngsmodulus', '2[GPa]');
model.material('mat2').propertyGroup('def').set('poissonsratio', '0.42');
model.material('mat2').propertyGroup('def').set('density', '1200[kg/m^3]');
model.material('mat2').propertyGroup('def').set('lossfactor', '0.04');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Cloth');
model.material('mat3').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('youngsmodulus', '0.58[GPa]');
model.material('mat3').propertyGroup('def').set('poissonsratio', '0.3');
model.material('mat3').propertyGroup('def').set('density', '650[kg/m^3]');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').label('Coil');
model.material('mat4').propertyGroup('def').set('lossfactor', '0.05');
model.material('mat4').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('youngsmodulus', '110[GPa]');
model.material('mat4').propertyGroup('def').set('poissonsratio', '0.35');
model.material('mat4').propertyGroup('def').set('density', '4500[kg/m^3]');
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').label('Glass Fiber');
model.material('mat5').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat5').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat5').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat5').propertyGroup('def').set('youngsmodulus', '70[GPa]');
model.material('mat5').propertyGroup('def').set('poissonsratio', '0.33');
model.material('mat5').propertyGroup('def').set('density', '2000[kg/m^3]');
model.material('mat5').propertyGroup('def').set('lossfactor', '0.04');
model.material('mat5').selection.geom('geom1', 1);
model.material('mat5').selection.named('geom1_ls1_bnd');
model.material('mat1').selection.named('geom1_comsel1');
model.material('mat2').selection.geom('geom1', 1);
model.material('mat2').selection.named('geom1_sel6');
model.material('mat3').selection.geom('geom1', 1);
model.material('mat3').selection.named('geom1_sel8');
model.material('mat4').selection.named('geom1_sel2');

model.physics('acpr').selection.named('geom1_comsel1');
model.physics('acpr').create('nra1', 'NarrowRegionAcousticsModel', 2);
model.physics('acpr').feature('nra1').selection.named('geom1_sel3');
model.physics('acpr').feature('nra1').set('DuctType', 'Slit');
model.physics('acpr').feature('nra1').set('h', 'air_gap');
model.physics('acpr').create('pom1', 'PoroacousticsModel', 2);
model.physics('acpr').feature('pom1').selection.named('geom1_r3_dom');
model.physics('acpr').feature('pom1').set('Rf_mat', 'userdef');
model.physics('acpr').feature('pom1').set('Rf', 'rf_pa');
model.physics('acpr').feature('pom1').set('Constants', 'Miki');
model.physics('acpr').create('efc1', 'ExteriorFieldCalculation', 1);
model.physics('acpr').feature('efc1').selection.named('geom1_sel5');
model.physics('acpr').feature('efc1').setIndex('SymmetryCondition2', 1, 0);
model.physics('shell').selection.named('geom1_unisel1');
model.physics('shell').feature('emm1').create('dmp1', 'Damping', 1);
model.physics('shell').feature('emm1').feature('dmp1').set('DampingType', 'IsotropicLossFactor');
model.physics('shell').feature('emm1').create('dmp2', 'Damping', 1);
model.physics('shell').feature('emm1').feature('dmp2').selection.named('geom1_sel8');
model.physics('shell').feature('emm1').feature('dmp2').set('InputParameters', 'DampingRatios');
model.physics('shell').feature('emm1').feature('dmp2').set('f1', 'fmin');
model.physics('shell').feature('emm1').feature('dmp2').set('zeta1', 'damp_susp');
model.physics('shell').feature('emm1').feature('dmp2').set('f2', 'fmax');
model.physics('shell').feature('emm1').feature('dmp2').set('zeta2', 'damp_susp');
model.physics('shell').feature('to1').set('d', 'th_dome');
model.physics('shell').create('to2', 'ThicknessOffset', 1);
model.physics('shell').feature('to2').selection.named('geom1_ls1_bnd');
model.physics('shell').feature('to2').set('d', 'th_former');
model.physics('shell').create('to3', 'ThicknessOffset', 1);
model.physics('shell').feature('to3').selection.named('geom1_sel8');
model.physics('shell').feature('to3').set('d', 'th_susp');
model.physics('shell').create('fix1', 'Fixed', 0);
model.physics('shell').feature('fix1').selection.named('geom1_sel11');
model.physics('solid').selection.named('geom1_sel2');
model.physics('solid').create('bl1', 'BodyLoad', 2);
model.physics('solid').feature('bl1').selection.named('geom1_sel2');
model.physics('solid').feature('bl1').set('LoadType', 'TotalForce');
model.physics('solid').feature('bl1').set('Ftot', {'0' '0' 'BL*cir.R1_i'});
model.physics('cir').create('V1', 'VoltageSource', -1);
model.physics('cir').feature('V1').setIndex('Connections', 1, 0, 0);
model.physics('cir').feature('V1').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('V1').set('value', 'V0');
model.physics('cir').create('R1', 'Resistor', -1);
model.physics('cir').feature('R1').setIndex('Connections', 1, 0, 0);
model.physics('cir').feature('R1').setIndex('Connections', 2, 1, 0);
model.physics('cir').feature('R1').set('R', 'R_g');
model.physics('cir').create('R2', 'Resistor', -1);
model.physics('cir').feature('R2').setIndex('Connections', 2, 0, 0);
model.physics('cir').feature('R2').setIndex('Connections', 3, 1, 0);
model.physics('cir').feature('R2').set('R', 'R_E');
model.physics('cir').create('L1', 'Inductor', -1);
model.physics('cir').feature('L1').setIndex('Connections', 3, 0, 0);
model.physics('cir').feature('L1').setIndex('Connections', 4, 1, 0);
model.physics('cir').feature('L1').set('L', 'L_E');
model.physics('cir').create('R3', 'Resistor', -1);
model.physics('cir').feature('R3').setIndex('Connections', 3, 0, 0);
model.physics('cir').feature('R3').setIndex('Connections', 4, 1, 0);
model.physics('cir').feature('R3').set('R', 'Rp_E');
model.physics('cir').create('V2', 'VoltageSource', -1);
model.physics('cir').feature('V2').setIndex('Connections', 4, 0, 0);
model.physics('cir').feature('V2').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('V2').set('value', 'BL*v0');

model.multiphysics.create('asb2', 'AcousticStructureBoundary', 'geom1', 1);
model.multiphysics('asb2').selection.all;
model.multiphysics('asb2').set('Structure_physics', 'solid');
model.multiphysics.create('sshc1', 'SolidShellConnection2DAxis', 'geom1', -1);
model.multiphysics('sshc1').set('connectionSettings', 'sharedBnd');

model.mesh('mesh1').create('fq1', 'FreeQuad');
model.mesh('mesh1').feature('fq1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('fq1').selection.set([1 7 8 11]);
model.mesh('mesh1').feature('fq1').create('size1', 'Size');
model.mesh('mesh1').feature('fq1').feature('size1').selection.named('geom1_sel3');
model.mesh('mesh1').feature('fq1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('fq1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('fq1').feature('size1').set('hmax', 'air_gap');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'lam0/5');
model.mesh('mesh1').feature('size').set('hmin', 'r1_susp');
model.mesh('mesh1').run;
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').selection.set([2 3 4 6 9 10]);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh1').feature('ftri1').feature('size1').selection.named('geom1_sel6');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 'mesh_optim');
model.mesh('mesh1').feature('ftri1').feature.duplicate('size2', 'size1');
model.mesh('mesh1').feature('ftri1').feature('size2').selection.named('geom1_sel10');
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.named('geom1_sel1');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([37]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 6);
model.mesh('mesh1').run;
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('bl1').selection.set([3 4]);
model.mesh('mesh1').feature('bl1').set('smoothtransition', false);
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('geom1_sel5');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 1);
model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Initial Design');
model.study('std1').setGenPlots(false);
model.study('std1').feature('freq').set('plist', 'range(fmin,(fmax-fmin)/(nf-1),fmax)');
model.study('std1').feature('freq').set('probesel', 'none');
model.study('std1').feature('freq').setEntry('activate', 'frame:material1', false);
model.study('std1').feature('freq').setEntry('activate', 'comp1:shape', false);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2 3]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol1').feature('v1').feature('comp1_material_disp').set('scaleval', '3.977736793705687E-4');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(fmin,(fmax-fmin)/(nf-1),fmax)'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'none');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').selection.geom('geom1', 2);
model.result.dataset('dset1').selection.named('geom1_sel4');
model.result.dataset.duplicate('dset2', 'dset1');
model.result.dataset('dset2').label('Study 1 - Initial Design/Revolution');
model.result.dataset('dset2').selection.geom('geom1', 1);
model.result.dataset('dset2').selection.named('geom1_sel9');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').label('Revolution 2D - Initial Design');
model.result.dataset('rev1').set('data', 'dset2');
model.result.dataset('rev1').set('startangle', 90);
model.result.dataset('rev1').set('revangle', 90);
model.result.dataset('rev1').set('endcaps', false);
model.result.dataset('rev1').set('hasspacevars', true);
model.result.dataset.create('mir1', 'Mirror2D');
model.result.dataset('mir1').set('hasvar', true);
model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').label('On-axis Sound Pressure Level at 1 m');
model.result('pg1').set('titletype', 'label');
model.result('pg1').set('xlabelactive', true);
model.result('pg1').set('xlabel', 'freq (Hz)');
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'SPL (dB)');
model.result('pg1').set('legendpos', 'lowermiddle');
model.result('pg1').create('oct1', 'OctaveBand');
model.result('pg1').feature('oct1').set('quantity', 'bandpower');
model.result('pg1').feature('oct1').set('markerpos', 'datapoints');
model.result('pg1').feature('oct1').set('linewidth', 'preference');
model.result('pg1').feature('oct1').selection.geom('geom1');
model.result('pg1').feature('oct1').set('expr', 'pext(0,1[m])');
model.result('pg1').feature('oct1').set('descractive', true);
model.result('pg1').feature('oct1').set('descr', 'SPL at 1 m - Initial Design');
model.result('pg1').feature('oct1').set('quantity', 'continuous');
model.result('pg1').feature('oct1').set('legend', true);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').create('glob1', 'Global');
model.result('pg1').feature('glob1').set('markerpos', 'datapoints');
model.result('pg1').feature('glob1').set('linewidth', 'preference');
model.result('pg1').feature('glob1').setIndex('expr', 'target_spl', 0);
model.result('pg1').feature('glob1').setIndex('unit', 'dB', 0);
model.result('pg1').feature('glob1').setIndex('descr', '', 0);
model.result('pg1').feature('glob1').set('linestyle', 'dotted');
model.result('pg1').feature('glob1').set('linecolor', 'black');
model.result('pg1').feature('glob1').set('legend', false);
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Directivity');
model.result('pg2').set('titletype', 'label');
model.result('pg2').create('dir1', 'Directivity');
model.result('pg2').feature('dir1').set('linewidth', 'preference');
model.result('pg2').feature('dir1').set('normalization', 'none');
model.result('pg2').feature('dir1').set('expr', 'acpr.efc1.Lp_pext-target_spl');
model.result('pg2').feature('dir1').set('anglerestr', 'manual');
model.result('pg2').feature('dir1').set('phimin', -90);
model.result('pg2').feature('dir1').set('phirange', 90);
model.result('pg2').feature('dir1').set('radius', 1000);
model.result('pg2').feature('dir1').set('levelmethod', 'levels');
model.result('pg2').feature('dir1').set('levels', '-42 -30 -24 -18 -12 -6 -3 3 6 9');
model.result('pg2').feature('dir1').set('layout', 'frequencyy');
model.result('pg2').feature('dir1').set('colorlegend', false);
model.result('pg2').run;
model.result('pg2').feature.duplicate('dir2', 'dir1');
model.result('pg2').run;
model.result('pg2').feature('dir2').set('levels', '-6 -3 3 6');
model.result('pg2').feature('dir2').set('coloring', 'uniform');
model.result('pg2').feature('dir2').set('color', 'black');
model.result('pg2').feature('dir2').set('contourtype', 'lines');
model.result('pg2').feature('dir2').set('linewidth', 1);
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').run;
model.result('pg3').label('Sound Pressure Level');
model.result('pg3').set('data', 'mir1');
model.result('pg3').set('titletype', 'label');
model.result('pg3').set('edges', false);
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', 'acpr.Lp_t');
model.result('pg3').feature('surf1').set('colortable', 'Rainbow');
model.result('pg3').feature('surf1').set('colorscalemode', 'linear');
model.result('pg3').feature('surf1').create('filt1', 'Filter');
model.result('pg3').run;
model.result('pg3').feature('surf1').feature('filt1').set('expr', 'mir1x<0');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').create('line1', 'Line');
model.result('pg3').feature('line1').set('expr', '0');
model.result('pg3').feature('line1').set('coloring', 'uniform');
model.result('pg3').feature('line1').set('color', 'gray');
model.result('pg3').feature('line1').create('filt1', 'Filter');
model.result('pg3').run;
model.result('pg3').feature('line1').feature('filt1').set('expr', 'mir1x<0');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature.duplicate('line2', 'line1');
model.result('pg3').run;
model.result('pg3').feature('line2').set('linetype', 'tube');
model.result('pg3').feature('line2').set('color', 'black');
model.result('pg3').feature('line2').create('def1', 'Deform');
model.result('pg3').run;
model.result('pg3').feature('line2').feature('def1').set('scaleactive', true);
model.result('pg3').feature('line2').feature('def1').set('scale', 10000);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Geometry');
model.result('pg4').set('titletype', 'label');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', '0');
model.result('pg4').feature('surf1').set('coloring', 'uniform');
model.result('pg4').feature('surf1').set('color', 'gray');
model.result('pg4').feature('surf1').create('filt1', 'Filter');
model.result('pg4').run;
model.result('pg4').feature('surf1').feature('filt1').set('expr', '(rev1y>0)*(rev1x<0)');
model.result('pg4').run;

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std2').feature('freq').setSolveFor('/physics/shell', true);
model.study('std2').feature('freq').setSolveFor('/physics/solid', true);
model.study('std2').feature('freq').setSolveFor('/physics/cir', true);
model.study('std2').feature('freq').setSolveFor('/multiphysics/asb1', true);
model.study('std2').feature('freq').setSolveFor('/multiphysics/asb2', true);
model.study('std2').feature('freq').setSolveFor('/multiphysics/sshc1', true);
model.study('std2').label('Study 2 - Optimization');
model.study('std2').setGenPlots(false);
model.study('std2').create('sho', 'ShapeOptimization');
model.study('std2').feature('sho').set('mmamaxiter', 20);
model.study('std2').feature('sho').set('objectivesolution', 'max');
model.study('std2').feature('sho').setIndex('optobj', 'comp1.obj_1', 0);
model.study('std2').feature('sho').setIndex('descr', '', 0);
model.study('std2').feature('sho').set('probesel', 'none');
model.study('std2').feature('freq').set('plist', 'range(fmin_optim,(fmax_optim-fmin_optim)/(nf_optim-1),fmax_optim)');

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2 3]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_fsb1_d').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_fsb2_d').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_fsb1_d').set('scaleval', 'disp_dome');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol2').feature('v1').feature('comp1_fsb2_d').set('scaleval', 'disp_wave');
model.sol('sol2').feature('v1').feature('comp1_material_disp').set('scaleval', '3.977736793705687E-4');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('o1', 'Optimization');
model.sol('sol2').feature('o1').set('control', 'sho');
model.sol('sol2').feature('o1').create('s1', 'StationaryAttrib');
model.sol('sol2').feature('o1').feature('s1').set('stol', 0.001);
model.sol('sol2').feature('o1').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('o1').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('plistarr', {'range(fmin_optim,(fmax_optim-fmin_optim)/(nf_optim-1),fmax_optim)'});
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol2').feature('o1').feature('s1').set('control', 'freq');
model.sol('sol2').feature('o1').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('o1').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('o1').feature('s1').set('control', 'freq');
model.sol('sol2').feature('o1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('o1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('o1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol2').feature('o1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol2').feature('o1').feature('s1').create('seDef', 'Segregated');
model.sol('sol2').feature('o1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('o1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('o1').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('o1').feature('s1').feature.remove('seDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runFromTo('st1', 'v1');

model.result.dataset('dset3').selection.geom('geom1', 2);
model.result.dataset('dset3').selection.named('geom1_sel4');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').run;
model.result('pg5').label('Shape Optimization');
model.result('pg5').set('data', 'dset3');
model.result('pg5').run;
model.result('pg5').set('titletype', 'label');
model.result('pg5').set('edgecolor', 'gray');
model.result('pg5').set('frametype', 'geometry');
model.result('pg5').create('line1', 'Line');
model.result('pg5').feature('line1').set('expr', '1');
model.result('pg5').feature('line1').set('coloring', 'uniform');
model.result('pg5').feature('line1').set('color', 'black');
model.result('pg5').run;
model.result('pg5').create('arwl1', 'ArrowLine');
model.result('pg5').feature('arwl1').set('expr', {'fsd1.dRg' 'fsd1.dZg'});
model.result('pg5').feature('arwl1').set('placement', 'elements');
model.result('pg5').feature('arwl1').set('scaleactive', true);
model.result('pg5').feature('arwl1').set('arrowbase', 'head');
model.result('pg5').feature('arwl1').create('col1', 'Color');
model.result('pg5').run;
model.result('pg5').feature('arwl1').feature('col1').set('expr', 'fsd1.rel_disp');
model.result('pg5').feature('arwl1').feature('col1').set('rangecoloractive', true);
model.result('pg5').feature('arwl1').feature('col1').set('rangecolormax', 1);
model.result('pg5').feature('arwl1').feature('col1').set('colortable', 'Rainbow');
model.result('pg5').feature('arwl1').feature('col1').set('colorscalemode', 'linear');
model.result('pg5').run;

model.study('std2').feature('sho').set('plot', true);
model.study('std2').feature('sho').set('plotgroup', 'pg5');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2 3]);

model.sol('sol2').study('std2');
model.sol('sol2').feature.remove('o1');
model.sol('sol2').feature.remove('v1');
model.sol('sol2').feature.remove('st1');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_fsb1_d').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_fsb2_d').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_fsb1_d').set('scaleval', 'disp_dome');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol2').feature('v1').feature('comp1_fsb2_d').set('scaleval', 'disp_wave');
model.sol('sol2').feature('v1').feature('comp1_material_disp').set('scaleval', '3.977736793705687E-4');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('o1', 'Optimization');
model.sol('sol2').feature('o1').set('control', 'sho');
model.sol('sol2').feature('o1').create('s1', 'StationaryAttrib');
model.sol('sol2').feature('o1').feature('s1').set('stol', 0.001);
model.sol('sol2').feature('o1').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('o1').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('plistarr', {'range(fmin_optim,(fmax_optim-fmin_optim)/(nf_optim-1),fmax_optim)'});
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol2').feature('o1').feature('s1').set('control', 'freq');
model.sol('sol2').feature('o1').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('o1').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('o1').feature('s1').set('control', 'freq');
model.sol('sol2').feature('o1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('o1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('o1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol2').feature('o1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol2').feature('o1').feature('s1').create('seDef', 'Segregated');
model.sol('sol2').feature('o1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('o1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('o1').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('o1').feature('s1').feature.remove('seDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result('pg5').run;

model.study('std2').feature('sho').set('probewindow', '');
model.study.create('std3');
model.study('std3').create('freq', 'Frequency');
model.study('std3').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std3').feature('freq').setSolveFor('/physics/shell', true);
model.study('std3').feature('freq').setSolveFor('/physics/solid', true);
model.study('std3').feature('freq').setSolveFor('/physics/cir', true);
model.study('std3').feature('freq').setSolveFor('/multiphysics/asb1', true);
model.study('std3').feature('freq').setSolveFor('/multiphysics/asb2', true);
model.study('std3').feature('freq').setSolveFor('/multiphysics/sshc1', true);
model.study('std3').feature('freq').set('plist', 'range(fmin,(fmax-fmin)/(nf-1),fmax)');
model.study('std3').feature('freq').setEntry('activate', 'frame:material1', false);
model.study('std3').feature('freq').setEntry('activate', 'comp1:shape', false);
model.study('std3').feature('freq').set('usesol', true);
model.study('std3').feature('freq').set('notsolmethod', 'sol');
model.study('std3').feature('freq').set('notstudy', 'std2');
model.study('std3').setGenPlots(false);
model.study('std3').label('Study 3 - Optimized Design');

model.sol.create('sol3');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2 3]);

model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'freq');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol3').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol3').feature('v1').feature('comp1_material_disp').set('scaleval', '3.977736793705687E-4');
model.sol('sol3').feature('v1').set('control', 'freq');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').set('stol', 0.001);
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol3').feature('s1').feature('p1').set('plistarr', {'range(fmin,(fmax-fmin)/(nf-1),fmax)'});
model.sol('sol3').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol3').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol3').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol3').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol3').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol3').feature('s1').feature('p1').set('probes', {});
model.sol('sol3').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol3').feature('s1').set('linpmethod', 'sol');
model.sol('sol3').feature('s1').set('linpsol', 'zero');
model.sol('sol3').feature('s1').set('control', 'freq');
model.sol('sol3').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol3').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol3').feature('s1').create('seDef', 'Segregated');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').feature('s1').feature.remove('seDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.dataset('dset4').selection.geom('geom1', 2);
model.result.dataset('dset4').selection.named('geom1_sel4');
model.result.dataset.duplicate('dset5', 'dset4');
model.result.dataset('dset5').label('Study 3 - Optimized Design/Revolution');
model.result.dataset('dset5').selection.geom('geom1', 1);
model.result.dataset('dset5').selection.named('geom1_sel9');
model.result.dataset.create('rev2', 'Revolve2D');
model.result.dataset('rev2').label('Revolution 2D - Optimized Design');
model.result.dataset('rev2').set('data', 'dset5');
model.result.dataset('rev2').set('revangle', 90);
model.result.dataset('rev2').set('endcaps', false);
model.result.dataset('rev2').set('hasspacevars', true);
model.result('pg1').run;
model.result('pg1').feature.duplicate('oct2', 'oct1');
model.result('pg1').run;
model.result('pg1').feature('oct2').set('data', 'dset4');
model.result('pg1').feature('oct2').set('descr', 'SPL at 1 m - Optimized');
model.result('pg1').feature('oct2').set('linestyle', 'dashed');
model.result('pg2').run;
model.result('pg2').feature.duplicate('dir3', 'dir1');
model.result('pg2').run;
model.result('pg2').feature('dir3').set('data', 'dset4');
model.result('pg2').feature('dir3').set('phimin', 0);
model.result('pg2').feature('dir3').set('colorlegend', true);
model.result('pg2').run;
model.result('pg2').feature.duplicate('dir4', 'dir2');
model.result('pg2').run;
model.result('pg2').feature('dir4').set('data', 'dset4');
model.result('pg2').feature('dir4').set('phimin', 0);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').create('lnsg1', 'LineSegments');
model.result('pg2').feature('lnsg1').set('markerpos', 'datapoints');
model.result('pg2').feature('lnsg1').set('linewidth', 'preference');
model.result('pg2').feature('lnsg1').setIndex('xexpr', '-angle_eval/2', 0);
model.result('pg2').feature('lnsg1').setIndex('xunit', 'deg', 0);
model.result('pg2').feature('lnsg1').setIndex('xdescr', '', 0);
model.result('pg2').feature('lnsg1').setIndex('xexpr', 'angle_eval/2', 1);
model.result('pg2').feature('lnsg1').setIndex('xunit', 'deg', 1);
model.result('pg2').feature('lnsg1').setIndex('xdescr', '', 1);
model.result('pg2').feature('lnsg1').setIndex('xexpr', 'angle_eval/2', 2);
model.result('pg2').feature('lnsg1').setIndex('xunit', 'deg', 2);
model.result('pg2').feature('lnsg1').setIndex('xdescr', '', 2);
model.result('pg2').feature('lnsg1').setIndex('xexpr', '-angle_eval/2', 3);
model.result('pg2').feature('lnsg1').setIndex('xunit', 'deg', 3);
model.result('pg2').feature('lnsg1').setIndex('xdescr', '', 3);
model.result('pg2').feature('lnsg1').setIndex('xexpr', '-angle_eval/2', 4);
model.result('pg2').feature('lnsg1').setIndex('xunit', 'deg', 4);
model.result('pg2').feature('lnsg1').setIndex('xdescr', '', 4);
model.result('pg2').feature('lnsg1').setIndex('yexpr', 'fmin_optim', 0);
model.result('pg2').feature('lnsg1').setIndex('yunit', 'Hz', 0);
model.result('pg2').feature('lnsg1').setIndex('ydescr', 'Minimum frequency optimized for', 0);
model.result('pg2').feature('lnsg1').setIndex('yexpr', 'fmin_optim', 1);
model.result('pg2').feature('lnsg1').setIndex('yunit', 'Hz', 1);
model.result('pg2').feature('lnsg1').setIndex('ydescr', 'Minimum frequency optimized for', 1);
model.result('pg2').feature('lnsg1').setIndex('yexpr', 'fmax_optim', 2);
model.result('pg2').feature('lnsg1').setIndex('yunit', 'Hz', 2);
model.result('pg2').feature('lnsg1').setIndex('ydescr', 'Maximum frequency optimized for', 2);
model.result('pg2').feature('lnsg1').setIndex('yexpr', 'fmax_optim', 3);
model.result('pg2').feature('lnsg1').setIndex('yunit', 'Hz', 3);
model.result('pg2').feature('lnsg1').setIndex('ydescr', 'Maximum frequency optimized for', 3);
model.result('pg2').feature('lnsg1').setIndex('yexpr', 'fmin_optim', 4);
model.result('pg2').feature('lnsg1').setIndex('yunit', 'Hz', 4);
model.result('pg2').feature('lnsg1').setIndex('ydescr', 'Minimum frequency optimized for', 4);
model.result('pg2').feature('lnsg1').set('linestyle', 'dashed');
model.result('pg2').feature('lnsg1').set('linecolor', 'gray');
model.result('pg2').feature('lnsg1').set('linewidth', 1);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').create('lnsg2', 'LineSegments');
model.result('pg2').feature('lnsg2').set('markerpos', 'datapoints');
model.result('pg2').feature('lnsg2').set('linewidth', 'preference');
model.result('pg2').feature('lnsg2').setIndex('xexpr', 0, 0);
model.result('pg2').feature('lnsg2').setIndex('xunit', 1, 0);
model.result('pg2').feature('lnsg2').setIndex('xdescr', '', 0);
model.result('pg2').feature('lnsg2').setIndex('xexpr', 0, 1);
model.result('pg2').feature('lnsg2').setIndex('xunit', 1, 1);
model.result('pg2').feature('lnsg2').setIndex('xdescr', '', 1);
model.result('pg2').feature('lnsg2').setIndex('yexpr', 'fmin', 0);
model.result('pg2').feature('lnsg2').setIndex('yunit', 'Hz', 0);
model.result('pg2').feature('lnsg2').setIndex('ydescr', 'Minimum frequency analyzed', 0);
model.result('pg2').feature('lnsg2').setIndex('yexpr', 'fmax', 1);
model.result('pg2').feature('lnsg2').setIndex('yunit', 'Hz', 1);
model.result('pg2').feature('lnsg2').setIndex('ydescr', 'Maximum frequency analyzed', 1);
model.result('pg2').feature('lnsg2').set('linestyle', 'dashdot');
model.result('pg2').feature('lnsg2').set('linecolor', 'black');
model.result('pg2').feature('lnsg2').set('linewidth', 1);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').create('surf2', 'Surface');
model.result('pg3').feature('surf2').set('data', 'dset4');
model.result('pg3').feature('surf2').set('expr', 'acpr.Lp_t');
model.result('pg3').feature('surf2').set('inheritplot', 'surf1');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').create('line3', 'Line');
model.result('pg3').feature('line3').set('data', 'dset4');
model.result('pg3').feature('line3').set('expr', '0');
model.result('pg3').feature('line3').set('coloring', 'uniform');
model.result('pg3').feature('line3').set('color', 'gray');
model.result('pg3').run;
model.result('pg3').create('line4', 'Line');
model.result('pg3').feature('line4').set('data', 'dset4');
model.result('pg3').feature('line4').set('expr', '0');
model.result('pg3').feature('line4').set('linetype', 'tube');
model.result('pg3').feature('line4').set('inheritplot', 'line2');
model.result('pg3').feature('line4').create('def1', 'Deform');
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').create('surf2', 'Surface');
model.result('pg4').feature('surf2').set('data', 'rev2');
model.result('pg4').feature('surf2').set('expr', '0');
model.result('pg4').feature('surf2').set('coloring', 'uniform');
model.result('pg4').feature('surf2').set('color', 'custom');
model.result('pg4').feature('surf2').set('customcolor', [0.4117647111415863 0.4117647111415863 0.4117647111415863]);
model.result('pg4').feature('surf2').create('filt1', 'Filter');
model.result('pg4').run;
model.result('pg4').feature('surf2').feature('filt1').set('expr', '(rev2y>0)*(rev2x>0)');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').create('line1', 'Line');
model.result('pg4').feature('line1').set('data', 'rev2');
model.result('pg4').feature('line1').set('expr', '0');
model.result('pg4').feature('line1').set('coloring', 'uniform');
model.result('pg4').feature('line1').set('color', 'black');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').create('con1', 'Contour');
model.result('pg4').feature('con1').set('data', 'rev2');
model.result('pg4').feature('con1').set('expr', 'fsd1.rel_disp');
model.result('pg4').feature('con1').set('colortable', 'HeatCamera');
model.result('pg4').feature('con1').set('colorlegend', false);
model.result('pg4').run;
model.result('pg1').run;
model.result('pg1').set('xlog', false);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg5').run;
model.result('pg4').run;

model.view('view3').set('showgrid', false);
model.view('view3').set('showaxisorientation', false);

model.title('Tweeter Dome and Waveguide Shape Optimization');

model.description(['A tweeter is a high frequency driver used in loudspeaker systems. An ideal tweeter will produce a constant sound pressure level at a given distance in front of the driver independently of frequency, that is, a flat response. Ideally the tweeter will also, to a certain degree, maintain this flat response when the listening point is moved off axis. The complex interactions between the dome breakup and the beaming are inherent to the loudspeaker driver design. This in turn introduces deviations from the ideal radiation characteristics.' newline  newline 'This tutorial presents an example of shape optimization of the dome and the waveguide of the tweeter. By changing the shape of these two components, it is possible to tune the cone breakup and beaming effect so that the two cancel out through the frequency range and create a speaker that is closer to an ideal tweeter. The optimized design presents a flatter response curve through the range of frequencies and as well as improves the radiation pattern. This demonstrates the possibilities of optimization for these types of vibroacoustic problems.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('tweeter_shape_optimization.mph');

model.modelNode.label('Components');

out = model;
