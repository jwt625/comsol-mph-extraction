function out = model
%
% inas_nanowire_traps_hysteresis_density_gradient.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Semiconductor_Module/Transistors');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 1);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('semi', 'Semiconductor', 'geom1');
model.physics('semi').model('comp1');

model.study.create('std1');
model.study('std1').create('semie', 'SemiconductorEquilibrium');
model.study('std1').feature('semie').set('solnum', 'auto');
model.study('std1').feature('semie').set('notsolnum', 'auto');
model.study('std1').feature('semie').set('outputmap', {});
model.study('std1').feature('semie').set('ngenAUX', '1');
model.study('std1').feature('semie').set('goalngenAUX', '1');
model.study('std1').feature('semie').set('ngenAUX', '1');
model.study('std1').feature('semie').set('goalngenAUX', '1');
model.study('std1').feature('semie').setSolveFor('/physics/semi', true);

model.geom('geom1').lengthUnit('nm');

model.param.label('Parameters 1 - nanowire FET');
model.param.set('R0', '23[nm]');
model.param.descr('R0', 'Radius of nanowire');
model.param.set('L0', '1.6[um]');
model.param.descr('L0', 'Length of nanowire FET channel');
model.param.set('mun0', '4e4[cm^2/V/s]');
model.param.descr('mun0', 'Electron mobility');
model.param.set('mup0', '5e2[cm^2/V/s]');
model.param.descr('mup0', 'Hole mobility');
model.param.set('epsr0', '15.15');
model.param.descr('epsr0', 'Relative permittivity');
model.param.set('Eg00', '0.354[V]');
model.param.descr('Eg00', 'Band gap');
model.param.set('chi00', '4.9[V]');
model.param.descr('chi00', 'Electron affinity');
model.param.set('Nc0', '8.7e16[cm^-3]');
model.param.descr('Nc0', 'Conduction band effective density of state');
model.param.set('Nv0', '6.6e18[cm^-3]');
model.param.descr('Nv0', 'Valence band effective density of state');
model.param.set('T0', '300[K]');
model.param.descr('T0', 'Temperature');
model.param.set('d_ox0', '100[nm]');
model.param.descr('d_ox0', 'Thickness of gate oxide');
model.param.set('d_ox', 'd_ox0*acosh((d_ox0+R0)/R0)');
model.param.descr('d_ox', 'Effective thickness of gate oxide');
model.param.set('epsr_ox', '2.12');
model.param.descr('epsr_ox', 'Effective relative permittivity of gate oxide');
model.param.set('G_s', '50[uS]');
model.param.descr('G_s', 'Series conductance');
model.param('default').setShowInParamSel(false);
model.param.create('par2');
model.param('par2').label('Parameters 2 - surface traps');
model.param('par2').set('Ds_tot', '4e13[cm^-2]');
model.param('par2').descr('Ds_tot', 'Total trap density');
model.param('par2').set('Ds_f', '1.6e12[cm^-2]');
model.param('par2').descr('Ds_f', 'Fast trap density');
model.param('par2').set('Ds_s', 'Ds_tot-Ds_f');
model.param('par2').descr('Ds_s', 'Slow trap density');
model.param('par2').set('Ea0_f', '0[mV]');
model.param('par2').descr('Ea0_f', 'Emission barrier parameter of fast trap');
model.param('par2').set('Ea0_s', '700[mV]');
model.param('par2').descr('Ea0_s', 'Emission barrier parameter of slow trap');
model.param('par2').set('gamma0', '1e6[1/s]');
model.param('par2').descr('gamma0', 'Capture rate constant');
model.param('par2').set('Et0_a', '-400[mV]');
model.param('par2').descr('Et0_a', 'Center of acceptor trap energy level distribution below Ec (negative value means above Ec, that is, inside the conduction band)');
model.param('par2').set('Et0_d', '300[mV]');
model.param('par2').descr('Et0_d', 'Center of donor trap energy level distribution below Ec');
model.param('par2').set('sig0', '200[mV]');
model.param('par2').descr('sig0', 'Width of trap energy level distribution');
model.param('par2').set('gD0', '2');
model.param('par2').descr('gD0', 'Degeneracy factor');
model.param('par2').setShowInParamSel(false);

model.func.create('tri1', 'Triangle');
model.func('tri1').set('lower', 0);
model.func('tri1').set('upper', 1);
model.func('tri1').set('smoothactive', false);

model.param.create('par3');
model.param('par3').label('Parameters 3 - bias conditions');
model.param('par3').set('dVdt', '44[uV/s]');
model.param('par3').descr('dVdt', 'Voltage ramp rate');
model.param('par3').set('V0', '6[V]');
model.param('par3').descr('V0', 'Initial and final voltage of triangular voltage ramp');
model.param('par3').set('V1', '-4[V]');
model.param('par3').descr('V1', 'Peak (or valley) voltage of triangular voltage ramp');
model.param('par3').set('t', '0[s]');
model.param('par3').descr('t', 'Time parameter');
model.param('par3').set('t_max', '2*abs(V1-V0)/dVdt');
model.param('par3').descr('t_max', 'Duration of voltage ramp');
model.param('par3').set('Vg', 'V0+(V1-V0)*tri1(t/t_max)');
model.param('par3').descr('Vg', 'Gate voltage');

model.geom('geom1').create('i1', 'Interval');
model.geom('geom1').feature('i1').setIndex('coord', 'R0', 1);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('SemicondMaterial', 'Semiconductor_material');
model.material('mat1').propertyGroup('SemicondMaterial').set('mun', {'mun0'});
model.material('mat1').propertyGroup('SemicondMaterial').set('mup', {'mup0'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'epsr0'});
model.material('mat1').propertyGroup('SemicondMaterial').set('Eg0', {'Eg00'});
model.material('mat1').propertyGroup('SemicondMaterial').set('chi0', {'chi00'});
model.material('mat1').propertyGroup('SemicondMaterial').set('Nc', {'Nc0'});
model.material('mat1').propertyGroup('SemicondMaterial').set('Nv', {'Nv0'});

model.physics('semi').prop('d').set('d', 'L0');
model.physics('semi').prop('ModelProperties').set('CarrierStatistics', 'FermiDirac');
model.physics('semi').prop('ShapeProperty').set('Formulation', 'FEM2DG');
model.physics('semi').feature('smm1').set('minput_temperature', 'T0');
model.physics('semi').feature('smm1').set('meDG', {'me_const*0.03' '0' '0' '0' 'me_const*0.03' '0' '0' '0' 'me_const*0.03'});
model.physics('semi').feature('smm1').set('mhDG', {'me_const*0.4' '0' '0' '0' 'me_const*0.4' '0' '0' '0' 'me_const*0.4'});
model.physics('semi').create('mc1', 'MetalContact', 0);
model.physics('semi').feature('mc1').selection.set([1]);
model.physics('semi').create('gc1', 'GateContact', 0);
model.physics('semi').feature('gc1').selection.set([2]);
model.physics('semi').feature('gc1').set('V0', 'Vg');
model.physics('semi').feature('gc1').set('epsilon_ins', 'epsr_ox');
model.physics('semi').feature('gc1').set('d_ins', 'd_ox');
model.physics('semi').feature('gc1').set('DGexteriorBC', 'barrier');
model.physics('semi').feature('gc1').set('meOx', {'me_const*0.5' '0' '0' '0' 'me_const*0.5' '0' '0' '0' 'me_const*0.5'});
model.physics('semi').feature('gc1').set('meOxStar', {'me_const*0.22' '0' '0' '0' 'me_const*0.22' '0' '0' '0' 'me_const*0.22'});
model.physics('semi').feature('gc1').set('Phi_nOx', '3[V]');
model.physics('semi').feature('gc1').set('Phi_pOx', '3[V]');
model.physics('semi').create('tasr1', 'TrapAssistedSurfaceRecombination', 0);
model.physics('semi').feature('tasr1').selection.set([2]);
model.physics('semi').feature('tasr1').set('IncludeTraps', 'ExplicitTraps');
model.physics('semi').feature('tasr1').set('SpecifyDiscreteContinuous', 'SpecifyContinuousAndOrDiscreteLevels');
model.physics('semi').feature('tasr1').set('SpecifyTrapSpecies', true);
model.physics('semi').feature('tasr1').set('TrappingFormulationDG', 'Trap_occupancy');
model.physics('semi').feature('tasr1').create('ctb1', 'ContinuousEnergyLevelsBoundary', 0);
model.physics('semi').feature('tasr1').feature('ctb1').label('Continuous Energy Levels - fast acceptor');
model.physics('semi').feature('tasr1').feature('ctb1').set('TrapType', 'Acceptor');
model.physics('semi').feature('tasr1').feature('ctb1').set('Nt_b', 'Ds_f');
model.physics('semi').feature('tasr1').feature('ctb1').set('DistributionCenterPoint', 'FromConduction');
model.physics('semi').feature('tasr1').feature('ctb1').set('Et0in', 'Et0_a');
model.physics('semi').feature('tasr1').feature('ctb1').set('gswid', 'sig0');
model.physics('semi').feature('tasr1').feature('ctb1').set('gsd_d', 'gD0');
model.physics('semi').feature('tasr1').feature('ctb1').set('Edisc', 100);
model.physics('semi').feature('tasr1').feature('ctb1').set('Vxd_min_in', 'semi.tasr1.Ec0t-Et0_a-3*sig0');
model.physics('semi').feature('tasr1').feature('ctb1').set('Vxd_max_in', 'semi.tasr1.Ec0t-Et0_a+3*sig0');
model.physics('semi').feature('tasr1').feature('ctb1').set('ElectronCaptureProbabilitySelect', 'userdef');
model.physics('semi').feature('tasr1').feature('ctb1').set('HoleCaptureProbabilitySelect', 'userdef');
model.physics('semi').feature('tasr1').feature('ctb1').set('Cpin', '0[cm^3/s]');
model.physics('semi').feature('tasr1').feature.duplicate('ctb2', 'ctb1');
model.physics('semi').feature('tasr1').feature('ctb2').label('Continuous Energy Levels - fast donor');
model.physics('semi').feature('tasr1').feature('ctb2').set('TrapType', 'Donor');
model.physics('semi').feature('tasr1').feature('ctb2').set('Et0in', 'Et0_d');
model.physics('semi').feature('tasr1').feature('ctb2').set('Vxd_min_in', 'semi.tasr1.Ec0t-Et0_d-3*sig0');
model.physics('semi').feature('tasr1').feature('ctb2').set('Vxd_max_in', 'semi.tasr1.Ec0t-Et0_d+3*sig0');
model.physics('semi').feature('tasr1').feature.duplicate('ctb3', 'ctb1');
model.physics('semi').feature('tasr1').feature('ctb3').label('Continuous Energy Levels - slow acceptor');
model.physics('semi').feature('tasr1').feature('ctb3').set('Nt_b', 'Ds_s');
model.physics('semi').feature('tasr1').feature.duplicate('ctb4', 'ctb2');
model.physics('semi').feature('tasr1').feature('ctb4').label('Continuous Energy Levels - slow donor');
model.physics('semi').feature('tasr1').feature('ctb4').set('Nt_b', 'Ds_s');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Variables 1 - capture probabilities');
model.variable('var1').set('dE_fa', 'semi.tasr1.ctb1.Vxd-semi.tasr1.Ec0t');
model.variable('var1').descr('dE_fa', 'Fast acceptor trap energy level relative to conduction band edge');
model.variable('var1').set('dE_fd', 'semi.tasr1.ctb2.Vxd-semi.tasr1.Ec0t');
model.variable('var1').descr('dE_fd', 'Fast donor trap energy level relative to conduction band edge');
model.variable('var1').set('dE_sa', 'semi.tasr1.ctb3.Vxd-semi.tasr1.Ec0t');
model.variable('var1').descr('dE_sa', 'Slow acceptor trap energy level relative to conduction band edge');
model.variable('var1').set('dE_sd', 'semi.tasr1.ctb4.Vxd-semi.tasr1.Ec0t');
model.variable('var1').descr('dE_sd', 'Slow donor trap energy level relative to conduction band edge');
model.variable('var1').set('Eb_fa', 'dE_fa+max(-dE_fa,Ea0_f)');
model.variable('var1').descr('Eb_fa', 'Fast acceptor trap capture barrier');
model.variable('var1').set('Eb_fd', 'dE_fd+max(-dE_fd,Ea0_f)');
model.variable('var1').descr('Eb_fd', 'Fast donor trap capture barrier');
model.variable('var1').set('Eb_sa', 'dE_sa+max(-dE_sa,Ea0_s)');
model.variable('var1').descr('Eb_sa', 'Slow acceptor trap capture barrier');
model.variable('var1').set('Eb_sd', 'dE_sd+max(-dE_sd,Ea0_s)');
model.variable('var1').descr('Eb_sd', 'Slow donor trap capture barrier');
model.variable('var1').set('Nfac', '10');
model.variable('var1').descr('Nfac', 'Compensation factor for electron flux');
model.variable('var1').set('Cn_fa', 'gamma0/Nc0*exp(-Eb_fa*e_const/k_B_const/T0)*Nfac');
model.variable('var1').descr('Cn_fa', 'Fast acceptor trap electron capture probability');
model.variable('var1').set('Cn_fd', 'gamma0/Nc0*exp(-Eb_fd*e_const/k_B_const/T0)*Nfac');
model.variable('var1').descr('Cn_fd', 'Fast donor trap electron capture probability');
model.variable('var1').set('Cn_sa', 'gamma0/Nc0*exp(-Eb_sa*e_const/k_B_const/T0)*Nfac');
model.variable('var1').descr('Cn_sa', 'Slow acceptor trap electron capture probability');
model.variable('var1').set('Cn_sd', 'gamma0/Nc0*exp(-Eb_sd*e_const/k_B_const/T0)*Nfac');
model.variable('var1').descr('Cn_sd', 'Slow donor trap electron capture probability');

model.physics('semi').feature('tasr1').feature('ctb1').set('Cnin', 'Cn_fa');
model.physics('semi').feature('tasr1').feature('ctb2').set('Cnin', 'Cn_fd');
model.physics('semi').feature('tasr1').feature('ctb3').set('Cnin', 'Cn_sa');
model.physics('semi').feature('tasr1').feature('ctb4').set('Cnin', 'Cn_sd');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').label('Integration 1 - access trap variables at the gate');
model.cpl('intop1').selection.geom('geom1', 0);
model.cpl('intop1').selection.set([2]);
model.cpl('intop1').set('axisym', false);
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').label('Integration 2 - integrate over the cylinder');
model.cpl('intop2').selection.all;

model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Variables 2 - conductance');
model.variable('var2').set('NAm', '-intop1(semi.tasr1.ctb1.rho_tr+semi.tasr1.ctb3.rho_tr)/e_const');
model.variable('var2').descr('NAm', 'NA- : Ionized acceptor trap density');
model.variable('var2').set('NDp', 'intop1(semi.tasr1.ctb2.rho_tr+semi.tasr1.ctb4.rho_tr)/e_const');
model.variable('var2').descr('NDp', 'ND+ : Ionized donor trap density');
model.variable('var2').set('G_0', 'intop2(mun0*semi.N)*e_const*Ds_tot/(NDp+30*NAm)/L0');
model.variable('var2').descr('G_0', 'Channel conductance');
model.variable('var2').set('G', '1/(1/G_0+1/G_s)');
model.variable('var2').descr('G', 'Total conductance');

model.study('std1').label('Study 1 - two fast and one slow gate voltage ramps');
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'dVdt', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'V/s', 0);
model.study('std1').feature('param').setIndex('pname', 'dVdt', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'V/s', 0);
model.study('std1').feature('param').setIndex('plistarr', '44[uV/s] 27[mV/s] 27[mV/s]', 0);
model.study('std1').feature('param').setIndex('punit', 'mV/s', 0);
model.study('std1').feature('param').setIndex('pname', 'V0', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'V', 1);
model.study('std1').feature('param').setIndex('pname', 'V0', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'V', 1);
model.study('std1').feature('param').setIndex('plistarr', '6 -4 6', 1);
model.study('std1').feature('param').setIndex('punit', 'V', 1);
model.study('std1').feature('param').setIndex('pname', 'V1', 2);
model.study('std1').feature('param').setIndex('plistarr', '', 2);
model.study('std1').feature('param').setIndex('punit', 'V', 2);
model.study('std1').feature('param').setIndex('pname', 'V1', 2);
model.study('std1').feature('param').setIndex('plistarr', '', 2);
model.study('std1').feature('param').setIndex('punit', 'V', 2);
model.study('std1').feature('param').setIndex('plistarr', '-4 6 -4', 2);
model.study('std1').feature('param').setIndex('punit', 'V', 2);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('tlist', 'range(0,0.01,1)*t_max');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'semie');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_semi_tasr1_ctb2_ft').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_semi_tasr1_ctb1_ft').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_semi_tasr1_ctb3_ft').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_semi_tasr1_ctb4_ft').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_V').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_Efn_').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phi_p').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_Efp_').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phi_n').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_semi_tasr1_ctb2_ft').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_semi_tasr1_ctb1_ft').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_semi_tasr1_ctb3_ft').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_semi_tasr1_ctb4_ft').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_V').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_Efn_').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_phi_p').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_Efp_').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_phi_n').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_semi_tasr1_ctb2_ft').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_semi_tasr1_ctb1_ft').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_semi_tasr1_ctb3_ft').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_semi_tasr1_ctb4_ft').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_V').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_Efn_').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_phi_p').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_Efp_').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_phi_n').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'semie');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-6);
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', false);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').feature('aDef').set('assemtol', 0);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol1').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').set('mumpsalloc', 1.2);
model.sol('sol1').feature('s1').feature('d1').set('ooc', 'auto');
model.sol('sol1').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol1').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_semi_tasr1_ctb2_ft').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_semi_tasr1_ctb1_ft').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_semi_tasr1_ctb3_ft').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_semi_tasr1_ctb4_ft').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_V').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_Efn_').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phi_p').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_Efp_').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phi_n').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_semi_tasr1_ctb2_ft').set('resscalemethod', 'parent');
model.sol('sol1').feature('v2').feature('comp1_semi_tasr1_ctb1_ft').set('resscalemethod', 'parent');
model.sol('sol1').feature('v2').feature('comp1_semi_tasr1_ctb3_ft').set('resscalemethod', 'parent');
model.sol('sol1').feature('v2').feature('comp1_semi_tasr1_ctb4_ft').set('resscalemethod', 'parent');
model.sol('sol1').feature('v2').feature('comp1_V').set('resscalemethod', 'parent');
model.sol('sol1').feature('v2').feature('comp1_Efn_').set('resscalemethod', 'parent');
model.sol('sol1').feature('v2').feature('comp1_phi_p').set('resscalemethod', 'parent');
model.sol('sol1').feature('v2').feature('comp1_Efp_').set('resscalemethod', 'parent');
model.sol('sol1').feature('v2').feature('comp1_phi_n').set('resscalemethod', 'parent');
model.sol('sol1').feature('v2').feature('comp1_semi_tasr1_ctb2_ft').set('scaleval', '10');
model.sol('sol1').feature('v2').feature('comp1_semi_tasr1_ctb1_ft').set('scaleval', '10');
model.sol('sol1').feature('v2').feature('comp1_semi_tasr1_ctb3_ft').set('scaleval', '10');
model.sol('sol1').feature('v2').feature('comp1_semi_tasr1_ctb4_ft').set('scaleval', '10');
model.sol('sol1').feature('v2').feature('comp1_V').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_Efn_').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_phi_p').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_Efp_').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_phi_n').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.01,1)*t_max');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 5);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('complexfun', false);
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('t1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('t1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('t1').feature('aDef').set('assemtol', 0);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('rstep', 10);
model.sol('sol1').feature('t1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 4);
model.sol('sol1').feature('t1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('initstep', 1);
model.sol('sol1').feature('t1').feature('fc1').set('minsteprecovery', 0.75);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('t1').feature('d1').set('mumpsalloc', 1.2);
model.sol('sol1').feature('t1').feature('d1').set('ooc', 'off');
model.sol('sol1').feature('t1').feature('d1').set('errorchk', 'off');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('rstep', 10);
model.sol('sol1').feature('t1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 4);
model.sol('sol1').feature('t1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('initstep', 1);
model.sol('sol1').feature('t1').feature('fc1').set('minsteprecovery', 0.75);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'dVdt' 'V0' 'V1'});
model.batch('p1').set('plistarr', {'44[uV/s] 27[mV/s] 27[mV/s]' '6 -4 6' '-4 6 -4'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol3');
model.sol('sol3').study('std1');
model.sol('sol3').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol3');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').label('Energy Levels (semi)');
model.result('pg1').set('data', 'dset3');
model.result('pg1').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Energy Diagram');
model.result('pg1').set('ylabel', 'Energy (eV)');
model.result('pg1').set('data', 'dset3');
model.result('pg1').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond5/pg2');
model.result('pg1').feature.create('lngr1', 'LineGraph');
model.result('pg1').feature('lngr1').label('Conduction Band Energy Level');
model.result('pg1').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr1').set('expr', 'semi.Ec_e');
model.result('pg1').feature('lngr1').set('unit', 'eV');
model.result('pg1').feature('lngr1').set('linecolor', 'blue');
model.result('pg1').feature('lngr1').set('legend', true);
model.result('pg1').feature('lngr1').set('legendmethod', 'manual');
model.result('pg1').feature('lngr1').set('legends', {'Ec'});
model.result('pg1').feature('lngr1').set('resolution', 'norefine');
model.result('pg1').feature('lngr1').set('smooth', 'everywhere');
model.result('pg1').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr1').set('data', 'parent');
model.result('pg1').feature('lngr1').selection.geom('geom1', 1);
model.result('pg1').feature('lngr1').selection.set([1]);
model.result('pg1').feature.create('lngr2', 'LineGraph');
model.result('pg1').feature('lngr2').label('Electron Quasi-Fermi Energy Level');
model.result('pg1').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr2').set('expr', 'semi.Efn_e');
model.result('pg1').feature('lngr2').set('unit', 'eV');
model.result('pg1').feature('lngr2').set('linestyle', 'dashed');
model.result('pg1').feature('lngr2').set('linecolor', 'black');
model.result('pg1').feature('lngr2').set('legend', true);
model.result('pg1').feature('lngr2').set('legendmethod', 'manual');
model.result('pg1').feature('lngr2').set('legends', {'Efn'});
model.result('pg1').feature('lngr2').set('resolution', 'norefine');
model.result('pg1').feature('lngr2').set('smooth', 'everywhere');
model.result('pg1').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr2').set('data', 'parent');
model.result('pg1').feature('lngr2').selection.geom('geom1', 1);
model.result('pg1').feature('lngr2').selection.set([1]);
model.result('pg1').feature.create('lngr3', 'LineGraph');
model.result('pg1').feature('lngr3').label('Hole Quasi-Fermi Energy Level');
model.result('pg1').feature('lngr3').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr3').set('expr', 'semi.Efp_e');
model.result('pg1').feature('lngr3').set('unit', 'eV');
model.result('pg1').feature('lngr3').set('linestyle', 'dotted');
model.result('pg1').feature('lngr3').set('linecolor', 'black');
model.result('pg1').feature('lngr3').set('legend', true);
model.result('pg1').feature('lngr3').set('legendmethod', 'manual');
model.result('pg1').feature('lngr3').set('legends', {'Efp'});
model.result('pg1').feature('lngr3').set('resolution', 'norefine');
model.result('pg1').feature('lngr3').set('smooth', 'everywhere');
model.result('pg1').feature('lngr3').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr3').set('data', 'parent');
model.result('pg1').feature('lngr3').selection.geom('geom1', 1);
model.result('pg1').feature('lngr3').selection.set([1]);
model.result('pg1').feature.create('lngr4', 'LineGraph');
model.result('pg1').feature('lngr4').label('Valence Band Energy Level');
model.result('pg1').feature('lngr4').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr4').set('expr', 'semi.Ev_e');
model.result('pg1').feature('lngr4').set('unit', 'eV');
model.result('pg1').feature('lngr4').set('linecolor', 'green');
model.result('pg1').feature('lngr4').set('legend', true);
model.result('pg1').feature('lngr4').set('legendmethod', 'manual');
model.result('pg1').feature('lngr4').set('legends', {'Ev'});
model.result('pg1').feature('lngr4').set('resolution', 'norefine');
model.result('pg1').feature('lngr4').set('smooth', 'everywhere');
model.result('pg1').feature('lngr4').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr4').set('data', 'parent');
model.result('pg1').feature('lngr4').selection.geom('geom1', 1);
model.result('pg1').feature('lngr4').selection.set([1]);
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').label('Carrier Concentrations (semi)');
model.result('pg2').set('data', 'dset3');
model.result('pg2').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg2').set('ylabel', 'Carrier concentration (1/cm^3)');
model.result('pg2').set('ylog', true);
model.result('pg2').set('data', 'dset3');
model.result('pg2').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond5/pg3');
model.result('pg2').feature.create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').label('Electron Concentration');
model.result('pg2').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg2').feature('lngr1').set('expr', 'semi.N');
model.result('pg2').feature('lngr1').set('unit', '1/cm^3');
model.result('pg2').feature('lngr1').set('legend', true);
model.result('pg2').feature('lngr1').set('legendmethod', 'manual');
model.result('pg2').feature('lngr1').set('legends', {'electrons'});
model.result('pg2').feature('lngr1').set('resolution', 'norefine');
model.result('pg2').feature('lngr1').set('smooth', 'everywhere');
model.result('pg2').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg2').feature('lngr1').set('data', 'parent');
model.result('pg2').feature('lngr1').selection.geom('geom1', 1);
model.result('pg2').feature('lngr1').selection.set([1]);
model.result('pg2').feature.create('lngr2', 'LineGraph');
model.result('pg2').feature('lngr2').label('Hole Concentration');
model.result('pg2').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg2').feature('lngr2').set('expr', 'semi.P');
model.result('pg2').feature('lngr2').set('unit', '1/cm^3');
model.result('pg2').feature('lngr2').set('legend', true);
model.result('pg2').feature('lngr2').set('legendmethod', 'manual');
model.result('pg2').feature('lngr2').set('legends', {'holes'});
model.result('pg2').feature('lngr2').set('resolution', 'norefine');
model.result('pg2').feature('lngr2').set('smooth', 'everywhere');
model.result('pg2').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg2').feature('lngr2').set('data', 'parent');
model.result('pg2').feature('lngr2').selection.geom('geom1', 1);
model.result('pg2').feature('lngr2').selection.set([1]);
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').label('Electric Potential (semi)');
model.result('pg3').set('data', 'dset3');
model.result('pg3').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg3').set('ylabel', 'Electric potential (V)');
model.result('pg3').set('data', 'dset3');
model.result('pg3').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond5/pg4');
model.result('pg3').feature.create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg3').feature('lngr1').set('expr', 'V');
model.result('pg3').feature('lngr1').set('resolution', 'norefine');
model.result('pg3').feature('lngr1').set('smooth', 'everywhere');
model.result('pg3').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg3').feature('lngr1').set('data', 'parent');
model.result('pg3').feature('lngr1').selection.geom('geom1', 1);
model.result('pg3').feature('lngr1').selection.set([1]);
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').label('Quantum Potentials (semi)');
model.result('pg4').set('data', 'dset3');
model.result('pg4').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg4').set('data', 'dset3');
model.result('pg4').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond5/pcond1/pg1');
model.result('pg4').feature.create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').label('Quantum Potential, Electron');
model.result('pg4').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg4').feature('lngr1').set('expr', 'semi.VnDG');
model.result('pg4').feature('lngr1').set('smooth', 'internal');
model.result('pg4').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg4').feature('lngr1').set('data', 'parent');
model.result('pg4').feature('lngr1').selection.geom('geom1', 1);
model.result('pg4').feature('lngr1').selection.set([1]);
model.result('pg4').feature.create('lngr2', 'LineGraph');
model.result('pg4').feature('lngr2').label('Quantum Potential, Hole');
model.result('pg4').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg4').feature('lngr2').set('expr', 'semi.VpDG');
model.result('pg4').feature('lngr2').set('smooth', 'internal');
model.result('pg4').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg4').feature('lngr2').set('data', 'parent');
model.result('pg4').feature('lngr2').selection.geom('geom1', 1);
model.result('pg4').feature('lngr2').selection.set([1]);
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'dset3');
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').create('lngr2', 'LineGraph');
model.result('pg5').feature('lngr1').selection.all;
model.result('pg5').feature('lngr1').set('xdataexpr', 'R');
model.result('pg5').feature('lngr1').set('expr', 'semi.Nnetdop');
model.result('pg5').feature('lngr1').set('unit', '1/cm^3');
model.result('pg5').feature('lngr1').set('linecolor', 'red');
model.result('pg5').feature('lngr1').set('legend', true);
model.result('pg5').feature('lngr1').set('legendmethod', 'manual');
model.result('pg5').feature('lngr1').set('legends', {'P-type (Red)'});
model.result('pg5').feature('lngr1').feature.create('filt1', 'LineGraphFilter');
model.result('pg5').feature('lngr1').feature('filt1').set('expr', 'semi.Na-semi.Nd > 1[1/cm^3]');
model.result('pg5').feature('lngr2').selection.all;
model.result('pg5').feature('lngr2').set('xdataexpr', 'R');
model.result('pg5').feature('lngr2').set('expr', 'semi.Nnetdop');
model.result('pg5').feature('lngr2').set('unit', '1/cm^3');
model.result('pg5').feature('lngr2').set('linecolor', 'blue');
model.result('pg5').feature('lngr2').set('legend', true);
model.result('pg5').feature('lngr2').set('legendmethod', 'manual');
model.result('pg5').feature('lngr2').set('legends', {'N-type (Blue)'});
model.result('pg5').feature('lngr2').feature.create('filt1', 'LineGraphFilter');
model.result('pg5').feature('lngr2').feature('filt1').set('expr', 'semi.Nd-semi.Na > 1[1/cm^3]');
model.result('pg5').set('titletype', 'none');
model.result('pg5').set('legendpos', 'uppermiddle');
model.result('pg5').set('ylabel', 'Net Dopant Concentration \vert N<sub>d</sub> - N<sub>a</sub>\vert, 1/cm<sup>3</sup>');
model.result('pg5').set('ylog', true);
model.result('pg5').feature('lngr1').label('P-type');
model.result('pg5').feature('lngr2').label('N-type');
model.result('pg5').label('Net Dopant Concentration (semi)');
model.result('pg1').run;
model.result('pg5').run;
model.result.remove('pg5');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('G-Vg curves');
model.result('pg5').set('data', 'dset3');
model.result('pg5').set('titletype', 'label');
model.result('pg5').set('legendpos', 'upperleft');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').setIndex('expr', 'G', 0);
model.result('pg5').feature('glob1').setIndex('unit', 'uS', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'Total conductance', 0);
model.result('pg5').feature('glob1').set('xdata', 'expr');
model.result('pg5').feature('glob1').set('xdataexpr', 'Vg');
model.result('pg5').feature('glob1').set('autodescr', false);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Ef-Ec vs. Vg');
model.result('pg6').set('data', 'dset3');
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('legendpos', 'lowerright');
model.result('pg6').create('ptgr1', 'PointGraph');
model.result('pg6').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg6').feature('ptgr1').set('linewidth', 'preference');
model.result('pg6').feature('ptgr1').selection.set([2]);
model.result('pg6').feature('ptgr1').set('expr', 'semi.Efn-semi.Ec');
model.result('pg6').feature('ptgr1').set('descractive', true);
model.result('pg6').feature('ptgr1').set('descr', 'Efn-Ec');
model.result('pg6').feature('ptgr1').set('xdata', 'expr');
model.result('pg6').feature('ptgr1').set('xdataexpr', 'Vg');
model.result('pg6').feature('ptgr1').set('legend', true);
model.result('pg6').feature('ptgr1').set('autopoint', false);
model.result('pg6').run;

model.study.create('std2');
model.study('std2').create('semie', 'SemiconductorEquilibrium');
model.study('std2').feature('semie').set('plotgroup', 'Default');
model.study('std2').feature('semie').set('solnum', 'auto');
model.study('std2').feature('semie').set('notsolnum', 'auto');
model.study('std2').feature('semie').set('outputmap', {});
model.study('std2').feature('semie').set('ngenAUX', '1');
model.study('std2').feature('semie').set('goalngenAUX', '1');
model.study('std2').feature('semie').set('ngenAUX', '1');
model.study('std2').feature('semie').set('goalngenAUX', '1');
model.study('std2').feature('semie').setSolveFor('/physics/semi', true);
model.study('std2').label('Study 2 - Equilibrium');
model.study('std2').setGenPlots(false);
model.study('std2').feature('semie').set('useparam', true);
model.study('std2').feature('semie').setIndex('pname', 'dVdt', 0);
model.study('std2').feature('semie').setIndex('plistarr', '', 0);
model.study('std2').feature('semie').setIndex('punit', 'V/s', 0);
model.study('std2').feature('semie').setIndex('pname', 'dVdt', 0);
model.study('std2').feature('semie').setIndex('plistarr', '', 0);
model.study('std2').feature('semie').setIndex('punit', 'V/s', 0);
model.study('std2').feature('semie').setIndex('pname', 'Vg', 0);
model.study('std2').feature('semie').setIndex('plistarr', 'range(-4,1,6)', 0);
model.study('std2').feature('semie').setIndex('punit', 'V', 0);

model.sol.create('sol7');
model.sol('sol7').study('std2');
model.sol('sol7').create('st1', 'StudyStep');
model.sol('sol7').feature('st1').set('study', 'std2');
model.sol('sol7').feature('st1').set('studystep', 'semie');
model.sol('sol7').create('v1', 'Variables');
model.sol('sol7').feature('v1').feature('comp1_semi_tasr1_ctb2_ft').set('scalemethod', 'manual');
model.sol('sol7').feature('v1').feature('comp1_semi_tasr1_ctb1_ft').set('scalemethod', 'manual');
model.sol('sol7').feature('v1').feature('comp1_semi_tasr1_ctb3_ft').set('scalemethod', 'manual');
model.sol('sol7').feature('v1').feature('comp1_semi_tasr1_ctb4_ft').set('scalemethod', 'manual');
model.sol('sol7').feature('v1').feature('comp1_V').set('scalemethod', 'manual');
model.sol('sol7').feature('v1').feature('comp1_Efn_').set('scalemethod', 'manual');
model.sol('sol7').feature('v1').feature('comp1_phi_p').set('scalemethod', 'manual');
model.sol('sol7').feature('v1').feature('comp1_Efp_').set('scalemethod', 'manual');
model.sol('sol7').feature('v1').feature('comp1_phi_n').set('scalemethod', 'manual');
model.sol('sol7').feature('v1').feature('comp1_semi_tasr1_ctb2_ft').set('resscalemethod', 'parent');
model.sol('sol7').feature('v1').feature('comp1_semi_tasr1_ctb1_ft').set('resscalemethod', 'parent');
model.sol('sol7').feature('v1').feature('comp1_semi_tasr1_ctb3_ft').set('resscalemethod', 'parent');
model.sol('sol7').feature('v1').feature('comp1_semi_tasr1_ctb4_ft').set('resscalemethod', 'parent');
model.sol('sol7').feature('v1').feature('comp1_V').set('resscalemethod', 'parent');
model.sol('sol7').feature('v1').feature('comp1_Efn_').set('resscalemethod', 'parent');
model.sol('sol7').feature('v1').feature('comp1_phi_p').set('resscalemethod', 'parent');
model.sol('sol7').feature('v1').feature('comp1_Efp_').set('resscalemethod', 'parent');
model.sol('sol7').feature('v1').feature('comp1_phi_n').set('resscalemethod', 'parent');
model.sol('sol7').feature('v1').feature('comp1_semi_tasr1_ctb2_ft').set('scaleval', '10');
model.sol('sol7').feature('v1').feature('comp1_semi_tasr1_ctb1_ft').set('scaleval', '10');
model.sol('sol7').feature('v1').feature('comp1_semi_tasr1_ctb3_ft').set('scaleval', '10');
model.sol('sol7').feature('v1').feature('comp1_semi_tasr1_ctb4_ft').set('scaleval', '10');
model.sol('sol7').feature('v1').feature('comp1_V').set('scaleval', '1');
model.sol('sol7').feature('v1').feature('comp1_Efn_').set('scaleval', '1');
model.sol('sol7').feature('v1').feature('comp1_phi_p').set('scaleval', '1');
model.sol('sol7').feature('v1').feature('comp1_Efp_').set('scaleval', '1');
model.sol('sol7').feature('v1').feature('comp1_phi_n').set('scaleval', '1');
model.sol('sol7').feature('v1').set('control', 'semie');
model.sol('sol7').create('s1', 'Stationary');
model.sol('sol7').feature('s1').set('stol', 1.0E-6);
model.sol('sol7').feature('s1').create('p1', 'Parametric');
model.sol('sol7').feature('s1').feature.remove('pDef');
model.sol('sol7').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol7').feature('s1').feature('p1').set('control', 'semie');
model.sol('sol7').feature('s1').set('control', 'semie');
model.sol('sol7').feature('s1').feature('aDef').set('complexfun', false);
model.sol('sol7').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol7').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol7').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol7').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol7').feature('s1').feature('aDef').set('assemtol', 0);
model.sol('sol7').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol7').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol7').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol7').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol7').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol7').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol7').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol7').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol7').feature('s1').feature('fc1').set('initstep', 0.1);
model.sol('sol7').feature('s1').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol7').feature('s1').create('d1', 'Direct');
model.sol('sol7').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol7').feature('s1').feature('d1').set('mumpsalloc', 1.2);
model.sol('sol7').feature('s1').feature('d1').set('ooc', 'auto');
model.sol('sol7').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol7').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol7').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol7').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol7').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol7').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol7').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol7').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol7').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol7').feature('s1').feature('fc1').set('initstep', 0.1);
model.sol('sol7').feature('s1').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol7').feature('s1').feature.remove('fcDef');
model.sol('sol7').attach('std2');
model.sol('sol7').runAll;

model.result('pg6').run;
model.result('pg6').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg6').run;
model.result('pg6').feature('ptgr2').set('data', 'dset4');
model.result('pg6').feature('ptgr2').set('linestyle', 'dashed');
model.result('pg6').feature('ptgr2').set('linecolor', 'black');
model.result('pg6').feature('ptgr2').set('legendprefix', 'Equilibrium');
model.result('pg6').run;

model.title(['Surface-Trap-Induced Hysteresis in an InAs Nanowire FET ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' a Density-Gradient Analysis']);

model.description('This tutorial analyzes the hysteresis of the conductance-gate-voltage (G-Vg) curves of an InAs nanowire FET, using the density-gradient theory to add the effect of quantum confinement to the conventional drift-diffusion formulation, without a large increase of computational costs. The hysteresis is caused by the dynamic charging effects of fast and slow semiconductor-oxide interface traps of continuous energy distributions and of both donor and acceptor types. The capture probability is modeled as thermally activated with a barrier height that varies with the trap energy level. The qualitative behavior and the order of magnitude of the computed G-Vg curves under various voltage ramping conditions agree well with simulation and experiment results found in the literature.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;

model.label('inas_nanowire_traps_hysteresis_density_gradient.mph');

model.modelNode.label('Components');

out = model;
