function out = model
%
% concentric_tube_heat_exchanger.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Applications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'TurbulentFlowAlgebraicYplus', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'WeaklyCompressible');
model.physics.create('ht', 'HeatTransferInFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics('ht').prop('ShapeProperty').set('order_temperature', '1');
model.physics.create('spf2', 'TurbulentFlowAlgebraicYplus', 'geom1');
model.physics('spf2').model('comp1');

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 2);
model.multiphysics('nitf1').set('Fluid_physics', 'spf');
model.multiphysics('nitf1').set('Heat_physics', 'ht');

model.study.create('std1');
model.study('std1').create('wdi', 'WallDistanceInitialization');
model.study('std1').feature('wdi').set('solnum', 'auto');
model.study('std1').feature('wdi').set('notsolnum', 'auto');
model.study('std1').feature('wdi').set('outputmap', {});
model.study('std1').feature('wdi').set('ngenAUX', '1');
model.study('std1').feature('wdi').set('goalngenAUX', '1');
model.study('std1').feature('wdi').set('ngenAUX', '1');
model.study('std1').feature('wdi').set('goalngenAUX', '1');
model.study('std1').feature('wdi').setSolveFor('/physics/spf', true);
model.study('std1').feature('wdi').setSolveFor('/physics/ht', true);
model.study('std1').feature('wdi').setSolveFor('/physics/spf2', true);
model.study('std1').feature('wdi').setSolveFor('/multiphysics/nitf1', true);
model.study('std1').feature('wdi').setSolveFor('/physics/ht', false);
model.study('std1').feature('wdi').setSolveFor('/multiphysics/nitf1', false);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/physics/spf2', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/nitf1', true);

model.param.set('R1', '25[mm]');
model.param.descr('R1', 'Inner radius');
model.param.set('R2', '40[mm]');
model.param.descr('R2', 'Outer radius');
model.param.set('L', '10[m]');
model.param.descr('L', 'Length');
model.param.set('ds', '1[mm]');
model.param.descr('ds', 'Thin interface thickness');
model.param.set('dext', '1[mm]');
model.param.descr('dext', 'Outer tube thickness');
model.param.set('T1', '360[K]');
model.param.descr('T1', 'Inner inlet temperature');
model.param.set('T2', '300[K]');
model.param.descr('T2', 'Outer inlet temperature');
model.param.set('mfr1', '0.1[kg/s]');
model.param.descr('mfr1', 'Inner mass flow rate');
model.param.set('mfr2', '0.25[kg/s]');
model.param.descr('mfr2', 'Outer mass flow rate');
model.param.set('pA1', '2[bar]');
model.param.descr('pA1', 'Inner outlet absolute pressure');
model.param.set('pA2', '2[bar]');
model.param.descr('pA2', 'Outer outlet absolute pressure');
model.param.set('vol1', 'L*pi*R1^2');
model.param.descr('vol1', 'Inner tube volume');
model.param.set('vol2', 'L*pi*(R2^2-R1^2)');
model.param.descr('vol2', 'Outer tube volume');
model.param.set('vol0', 'vol1+vol2');
model.param.descr('vol0', 'Overall volume');
model.param.set('S', '2*pi*R1*L');
model.param.descr('S', 'Heat exchange surface');
model.param.set('beta', 'S/vol0');
model.param.descr('beta', 'Compactness');
model.param.set('rho0_tube', '7850[kg/m^3]');
model.param.descr('rho0_tube', 'Tube density');
model.param.set('k0_tube', '44.5[W/(m*K)]');
model.param.descr('k0_tube', 'Tube thermal conductivity');
model.param.set('rho0_inner', '1000[kg/m^3]');
model.param.descr('rho0_inner', 'Density, inner tube');
model.param.set('Cp0_inner', '4200[J/(kg*K)]');
model.param.descr('Cp0_inner', 'Heat capacity at constant pressure, inner tube');
model.param.set('k0_inner', '0.6[W/(m*K)]');
model.param.descr('k0_inner', 'Thermal conductivity, inner tube');
model.param.set('mu0_inner', '0.001[Pa*s]');
model.param.descr('mu0_inner', 'Dynamic viscosity, inner tube');
model.param.set('rho0_outer', '1000[kg/m^3]');
model.param.descr('rho0_outer', 'Density, outer tube');
model.param.set('Cp0_outer', '4200[J/(kg*K)]');
model.param.descr('Cp0_outer', 'Heat capacity at constant pressure, outer tube');
model.param.set('k0_outer', '0.6[W/(m*K)]');
model.param.descr('k0_outer', 'Thermal conductivity, outer tube');
model.param.set('mu0_outer', '0.001[Pa*s]');
model.param.descr('mu0_outer', 'Dynamic viscosity, outer tube');
model.param.set('rho_tube', '7850[kg/m^3]');
model.param.descr('rho_tube', 'Displayed tube density');
model.param.set('k_tube', '44.5[W/(m*K)]');
model.param.descr('k_tube', 'Displayed tube thermal conductivity');
model.param.set('rho_inner', '1000[kg/m^3]');
model.param.descr('rho_inner', 'Displayed density, inner tube');
model.param.set('Cp_inner', '4200[J/(kg*K)]');
model.param.descr('Cp_inner', 'Displayed heat capacity at constant pressure, inner tube');
model.param.set('k_inner', '0.6[W/(m*K)]');
model.param.descr('k_inner', 'Displayed thermal conductivity, inner tube');
model.param.set('mu_inner', '0.001[Pa*s]');
model.param.descr('mu_inner', 'Displayed dynamic viscosity, inner tube');
model.param.set('rho_outer', '1000[kg/m^3]');
model.param.descr('rho_outer', 'Displayed density, outer tube');
model.param.set('Cp_outer', '4200[J/(kg*K)]');
model.param.descr('Cp_outer', 'Displayed heat capacity at constant pressure, outer tube');
model.param.set('k_outer', '0.6[W/(m*K)]');
model.param.descr('k_outer', 'Displayed thermal conductivity, outer tube');
model.param.set('mu_outer', '0.001[Pa*s]');
model.param.descr('mu_outer', 'Displayed dynamic viscosity, outer tube');
model.param.set('Re_inner', 'mfr1*2*R1/(mu_inner*pi*R1^2)');
model.param.descr('Re_inner', 'Reynolds number, inner tube');
model.param.set('Re_outer', 'mfr2*(R2-R1)/(mu_outer*pi*(R2^2-R1^2))');
model.param.descr('Re_outer', 'Reynolds number, outer tube');
model.param.set('m_tube', 'rho_tube*2*pi*L*(R1*ds+R2*dext)');
model.param.descr('m_tube', 'Tube mass');

model.material.create('mat1', 'Common', '');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water, liquid');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material.create('mat2', 'Common', '');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').label('Transformer oil');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'243.0' '273.0' '4492.20229-64.7408879*T^1+0.349900959*T^2-8.40477E-4*T^3+7.57041667E-7*T^4'; '273.0' '373.0' '91.4524999-1.33227058*T^1+0.00777680216*T^2-2.27271368E-5*T^3+3.32419673E-8*T^4-1.94631023E-11*T^5'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'223.0' '293.0' '-117056.38+1816.76208*T^1-10.305786*T^2+0.0256691919*T^3-2.36742424E-5*T^4'; '293.0' '373.0' '-13408.1491+123.044152*T^1-0.335401786*T^2+3.125E-4*T^3'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('rho').set('pieces', {'223.0' '373.0' '1055.04607-0.581753034*T^1-6.40531689E-5*T^2'});
model.material('mat2').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'223.0' '373.0' '0.134299084-8.04973822E-5*T^1'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material.create('mat3', 'Common', '');
model.material('mat3').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat3').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat3').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat3').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat3').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat3').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat3').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat3').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat3').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat3').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat3').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat3').label('Air');
model.material('mat3').set('family', 'air');
model.material('mat3').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat3').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat3').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat3').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat3').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat3').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat3').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat3').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat3').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat3').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat3').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat3').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat3').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat3').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat3').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat3').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat3').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat3').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat3').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat3').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat3').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat3').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat3').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat3').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat3').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat3').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat3').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat3').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat3').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat3').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat3').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat3').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat3').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat3').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat3').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat3').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat3').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat3').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat3').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat3').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat3').propertyGroup('def').set('molarmass', '');
model.material('mat3').propertyGroup('def').set('bulkviscosity', '');
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat3').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat3').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat3').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat3').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat3').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat3').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat3').propertyGroup('def').addInput('temperature');
model.material('mat3').propertyGroup('def').addInput('pressure');
model.material('mat3').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat3').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat3').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat3').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat3').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat3').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat3').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat3').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat3').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat3').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat3').propertyGroup('idealGas').addInput('temperature');
model.material('mat3').propertyGroup('idealGas').addInput('pressure');
model.material('mat3').materialType('nonSolid');
model.material.create('mat4', 'Common', '');
model.material('mat4').label('User defined, inner fluid');
model.material('mat4').propertyGroup('def').set('dynamicviscosity', '');
model.material('mat4').propertyGroup('def').set('heatcapacity', '');
model.material('mat4').propertyGroup('def').set('density', '');
model.material('mat4').propertyGroup('def').set('thermalconductivity', '');
model.material('mat4').propertyGroup('def').set('dynamicviscosity', {'mu0_inner'});
model.material('mat4').propertyGroup('def').set('heatcapacity', {'Cp0_inner'});
model.material('mat4').propertyGroup('def').set('density', {'rho0_inner'});
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'k0_inner'});
model.material.create('mat5', 'Common', '');
model.material('mat5').label('User defined, outer fluid');
model.material('mat5').propertyGroup('def').set('dynamicviscosity', '');
model.material('mat5').propertyGroup('def').set('heatcapacity', '');
model.material('mat5').propertyGroup('def').set('density', '');
model.material('mat5').propertyGroup('def').set('thermalconductivity', '');
model.material('mat5').propertyGroup('def').set('dynamicviscosity', {'mu0_outer'});
model.material('mat5').propertyGroup('def').set('heatcapacity', {'Cp0_outer'});
model.material('mat5').propertyGroup('def').set('density', {'rho0_outer'});
model.material('mat5').propertyGroup('def').set('thermalconductivity', {'k0_outer'});
model.material.create('mat6', 'Common', '');
model.material('mat6').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat6').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat6').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat6').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat6').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat6').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat6').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat6').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat6').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat6').propertyGroup.create('Swift', 'Swift');
model.material('mat6').propertyGroup.create('Voce', 'Voce');
model.material('mat6').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat6').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat6').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat6').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat6').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat6').propertyGroup.create('Norton', 'Norton');
model.material('mat6').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat6').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat6').label('Structural steel');
model.material('mat6').set('family', 'custom');
model.material('mat6').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat6').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat6').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat6').set('noise', true);
model.material('mat6').set('fresnel', 0.9);
model.material('mat6').set('roughness', 0.3);
model.material('mat6').set('metallic', 0);
model.material('mat6').set('pearl', 0);
model.material('mat6').set('diffusewrap', 0);
model.material('mat6').set('clearcoat', 0);
model.material('mat6').set('reflectance', 0);
model.material('mat6').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat6').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat6').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat6').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat6').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat6').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat6').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat6').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat6').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat6').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat6').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat6').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat6').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat6').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat6').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat6').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat6').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat6').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat6').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat6').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat6').propertyGroup('Enu').addInput('temperature');
model.material('mat6').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat6').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat6').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat6').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat6').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat6').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat6').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat6').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat6').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat6').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat6').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat6').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat6').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat6').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat6').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat6').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat6').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat6').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat6').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat6').propertyGroup('Ludwik').addInput('temperature');
model.material('mat6').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat6').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat6').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat6').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat6').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat6').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat6').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat6').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat6').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat6').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat6').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat6').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat6').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat6').propertyGroup('Voce').addInput('temperature');
model.material('mat6').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat6').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat6').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat6').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat6').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat6').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat6').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat6').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat6').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat6').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat6').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat6').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat6').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat6').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat6').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat6').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat6').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat6').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat6').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat6').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat6').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat6').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat6').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat6').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');
model.material.create('mat7', 'Common', '');
model.material('mat7').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat7').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat7').label('Copper');
model.material('mat7').set('family', 'copper');
model.material('mat7').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat7').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat7').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat7').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat7').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat7').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat7').propertyGroup('Enu').set('nu', '0.35');
model.material('mat7').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat7').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat7').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat7').propertyGroup('linzRes').addInput('temperature');
model.material.create('mat8', 'Common', '');
model.material('mat8').label('User defined, tubes');
model.material('mat8').propertyGroup('def').set('density', '');
model.material('mat8').propertyGroup('def').set('thermalconductivity', '');
model.material('mat8').propertyGroup('def').set('density', {'rho0_tube'});
model.material('mat8').propertyGroup('def').set('thermalconductivity', {'k0_tube'});
model.material.create('lmat1', 'LayeredMaterial', '');
model.material('lmat1').setIndex('link', 'mat6', 0);
model.material('lmat1').setIndex('thickness', 'ds', 0);

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'R1' 'L'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'R2' 'L'});
model.geom('geom1').run('r2');
model.geom('geom1').create('pch1', 'ParameterCheck');
model.geom('geom1').feature('pch1').set('condition', 'R2-R1<5[mm]-eps');
model.geom('geom1').feature('pch1').set('message', 'The outer radius should be at least 5 mm greater than the inner radius.');
model.geom('geom1').run('pch1');
model.geom('geom1').create('pch2', 'ParameterCheck');
model.geom('geom1').feature('pch2').set('condition', 'Re_inner<=0||Re_inner>1e7||Re_outer<=0||Re_outer>1e7');
model.geom('geom1').feature('pch2').set('message', 'The Reynolds numbers should be strictly greater than 0 and less than 1.0e7.');
model.geom('geom1').run('fin');

model.view('view1').label('View: Scaled Geometry');
model.view('view1').set('locked', true);
model.view('view1').axis.set('xmin', '-R2/30');
model.view('view1').axis.set('xmax', 'R2+R2/30');
model.view('view1').axis.set('ymin', '-L/30');
model.view('view1').axis.set('ymax', 'L+L/30');
model.view('view1').axis.set('viewscaletype', 'automatic');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Inner Domain');
model.selection('sel1').set([1]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Outer Domain');
model.selection('sel2').set([2]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Lower Inner Boundary');
model.selection('sel3').geom(1);
model.selection('sel3').set([2]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Lower Outer Boundary');
model.selection('sel4').geom(1);
model.selection('sel4').set([5]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Upper Inner Boundary');
model.selection('sel5').geom(1);
model.selection('sel5').set([3]);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Upper Outer Boundary');
model.selection('sel6').geom(1);
model.selection('sel6').set([6]);
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').label('Interface');
model.selection('sel7').geom(1);
model.selection('sel7').set([4]);
model.selection.create('sel8', 'Explicit');
model.selection('sel8').model('comp1');
model.selection('sel8').label('Interface and Exterior Boundary');
model.selection('sel8').geom(1);
model.selection('sel8').set([4 7]);

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').label('Average: Inner Inlet');
model.cpl('aveop1').selection.geom('geom1', 1);
model.cpl('aveop1').selection.named('sel3');
model.cpl.create('aveop2', 'Average', 'geom1');
model.cpl('aveop2').set('axisym', true);
model.cpl('aveop2').label('Average: Inner Outlet');
model.cpl('aveop2').selection.geom('geom1', 1);
model.cpl('aveop2').selection.named('sel5');
model.cpl.create('aveop3', 'Average', 'geom1');
model.cpl('aveop3').set('axisym', true);
model.cpl('aveop3').label('Average: Outer Inlet');
model.cpl('aveop3').selection.geom('geom1', 1);
model.cpl('aveop3').selection.named('sel6');
model.cpl.create('aveop4', 'Average', 'geom1');
model.cpl('aveop4').set('axisym', true);
model.cpl('aveop4').label('Average: Outer Outlet');
model.cpl('aveop4').selection.geom('geom1', 1);
model.cpl('aveop4').selection.named('sel4');
model.cpl.create('aveop5', 'Average', 'geom1');
model.cpl('aveop5').set('axisym', true);
model.cpl('aveop5').label('Average: Interface');
model.cpl('aveop5').selection.geom('geom1', 1);
model.cpl('aveop5').selection.named('sel7');
model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').label('Integration: Inner Inlet');
model.cpl('intop1').selection.geom('geom1', 1);
model.cpl('intop1').selection.named('sel3');
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').label('Integration: Inner Outlet');
model.cpl('intop2').selection.geom('geom1', 1);
model.cpl('intop2').selection.named('sel5');
model.cpl.create('intop3', 'Integration', 'geom1');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').label('Integration: Outer Inlet');
model.cpl('intop3').selection.geom('geom1', 1);
model.cpl('intop3').selection.named('sel6');
model.cpl.create('intop4', 'Integration', 'geom1');
model.cpl('intop4').set('axisym', true);
model.cpl('intop4').label('Integration: Outer Outlet');
model.cpl('intop4').selection.geom('geom1', 1);
model.cpl('intop4').selection.named('sel4');
model.cpl.create('intop5', 'Integration', 'geom1');
model.cpl('intop5').set('axisym', true);
model.cpl('intop5').label('Integration: Interface');
model.cpl('intop5').selection.geom('geom1', 1);
model.cpl('intop5').selection.named('sel7');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('T1i', 'T1');
model.variable('var1').descr('T1i', 'Inner inlet temperature');
model.variable('var1').set('T1o', 'aveop2(T)');
model.variable('var1').descr('T1o', 'Inner outlet temperature');
model.variable('var1').set('T2i', 'T2');
model.variable('var1').descr('T2i', 'Outer inlet temperature');
model.variable('var1').set('T2o', 'aveop4(T)');
model.variable('var1').descr('T2o', 'Outer outlet temperature');
model.variable('var1').set('dT1', 'T1i-T2o');
model.variable('var1').descr('dT1', 'Temperature difference, inner inlet vs. outer outlet');
model.variable('var1').set('dT2', 'T1o-T2i');
model.variable('var1').descr('dT2', 'Temperature difference, inner outlet vs. outer inlet');
model.variable('var1').set('U', 'abs(aveop5(ht.ndflux)*log(dT1/(dT2+eps))/(dT1-dT2+eps))');
model.variable('var1').descr('U', 'Overall heat transfer coefficient');
model.variable('var1').set('A', 'intop5(1)');
model.variable('var1').descr('A', 'Interface surface');
model.variable('var1').set('E', 'abs(intop5(ht.ndflux)/(intop1(ht.rho*substval(ht.DeltaH,T,T1)*(-u*nr-w*nz))-intop2(ht.rho*substval(ht.DeltaH,T,T2)*(u*nr+w*nz))+eps))');
model.variable('var1').descr('E', 'Effectiveness');

model.material.create('matlnk1', 'Link', 'comp1');
model.material('matlnk1').selection.named('sel1');
model.material.create('matlnk2', 'Link', 'comp1');
model.material('matlnk2').selection.named('sel2');
model.material.create('matlnk3', 'Link', 'comp1');
model.material('matlnk3').selection.geom('geom1', 1);
model.material('matlnk3').selection.named('sel8');
model.material('matlnk3').set('link', 'mat6');
model.material.create('llmat1', 'LayeredMaterialLink', 'comp1');
model.material('llmat1').selection.named('sel7');

model.physics('ht').feature('init1').set('Tinit', 'T1');
model.physics('ht').create('init2', 'init', 2);
model.physics('ht').feature('init2').selection.named('sel2');
model.physics('ht').feature('init2').set('Tinit', 'T2');
model.physics('ht').create('sls1', 'SolidLayeredShell', 1);
model.physics('ht').feature('sls1').selection.named('sel7');
model.physics('ht').create('ifl1', 'Inflow', 1);
model.physics('ht').feature('ifl1').selection.named('sel3');
model.physics('ht').feature('ifl1').set('Tustr', 'T1');
model.physics('ht').create('ifl2', 'Inflow', 1);
model.physics('ht').feature('ifl2').selection.named('sel6');
model.physics('ht').feature('ifl2').set('Tustr', 'T2');
model.physics('ht').create('ofl1', 'ConvectiveOutflow', 1);
model.physics('ht').feature('ofl1').selection.named('sel5');
model.physics('ht').create('ofl2', 'ConvectiveOutflow', 1);
model.physics('ht').feature('ofl2').selection.named('sel4');
model.physics('spf').selection.named('sel1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'CompressibleMALT03');
model.physics('spf').prop('PhysicalModelProperty').set('pref', 0);
model.physics('spf').feature('init1').set('p_init', 'pA1');
model.physics('spf').create('inl1', 'InletBoundary', 1);
model.physics('spf').feature('inl1').selection.named('sel3');
model.physics('spf').feature('inl1').set('BoundaryCondition', 'MassFlow');
model.physics('spf').feature('inl1').set('mfr', 'mfr1');
model.physics('spf').create('out1', 'OutletBoundary', 1);
model.physics('spf').feature('out1').selection.named('sel5');
model.physics('spf').feature('out1').set('p0', 'pA1');
model.physics('spf2').selection.named('sel2');
model.physics('spf2').prop('PhysicalModelProperty').set('Compressibility', 'CompressibleMALT03');
model.physics('spf2').prop('PhysicalModelProperty').set('pref', 0);
model.physics('spf2').feature('init1').set('p_init', 'pA2');
model.physics('spf2').create('inl1', 'InletBoundary', 1);
model.physics('spf2').feature('inl1').selection.named('sel6');
model.physics('spf2').feature('inl1').set('BoundaryCondition', 'MassFlow');
model.physics('spf2').feature('inl1').set('mfr', 'mfr2');
model.physics('spf2').create('out1', 'OutletBoundary', 1);
model.physics('spf2').feature('out1').selection.named('sel4');
model.physics('spf2').feature('out1').set('p0', 'pA2');

model.multiphysics.create('nitf2', 'NonIsothermalFlow', 'geom1', 2);
model.multiphysics('nitf2').set('Fluid_physics', 'spf2');

model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh1').feature('size1').selection.named('sel8');
model.mesh('mesh1').feature('size1').set('table', 'cfd');
model.mesh('mesh1').feature('size').set('table', 'cfd');
model.mesh('mesh1').feature('size').set('hauto', 8);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(2);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').set('smoothmaxiter', 20);
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('sel8');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 2);
model.mesh('mesh1').feature('bl1').feature('blp').set('blhminfact', 5);
model.mesh('mesh1').run;

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'wdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'wdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-6);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, wall distance (spf) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, wall distance (spf2)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('se1', 'Segregated');
model.sol('sol1').feature('s2').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u' 'comp1_spf_inl1_Pmf'});
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('segvar', {'comp1_T' 'comp1_ht_TextFace' 'comp1_nitf1_TWall_d' 'comp1_nitf1_TWall_u' 'comp1_nitf2_TWall_d' 'comp1_nitf2_TWall_u'});
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('d2', 'Direct');
model.sol('sol1').feature('s2').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d2').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').label('Temperature');
model.sol('sol1').feature('s2').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('segvar', {'comp1_yPlus'});
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('subdamp', 0.45);
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('subiter', 3);
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('subtermconst', 'itertol');
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('subntolfact', 1);
model.sol('sol1').feature('s2').create('d3', 'Direct');
model.sol('sol1').feature('s2').feature('d3').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d3').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d3').label('Direct, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('linsolver', 'd3');
model.sol('sol1').feature('s2').feature('se1').feature('ss3').label('Turbulence Variables');
model.sol('sol1').feature('s2').feature('se1').create('ss4', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss4').set('segvar', {'comp1_p2' 'comp1_u2' 'comp1_spf2_inl1_Pmf'});
model.sol('sol1').feature('s2').feature('se1').feature('ss4').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('d4', 'Direct');
model.sol('sol1').feature('s2').feature('d4').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d4').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d4').label('Direct, fluid flow variables (spf2)');
model.sol('sol1').feature('s2').feature('se1').feature('ss4').set('linsolver', 'd4');
model.sol('sol1').feature('s2').feature('se1').feature('ss4').label('Velocity U2, Pressure P2');
model.sol('sol1').feature('s2').feature('se1').create('ss5', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss5').set('segvar', {'comp1_yPlus2'});
model.sol('sol1').feature('s2').feature('se1').feature('ss5').set('subdamp', 0.45);
model.sol('sol1').feature('s2').feature('se1').feature('ss5').set('subiter', 3);
model.sol('sol1').feature('s2').feature('se1').feature('ss5').set('subtermconst', 'itertol');
model.sol('sol1').feature('s2').feature('se1').feature('ss5').set('subntolfact', 1);
model.sol('sol1').feature('s2').create('d5', 'Direct');
model.sol('sol1').feature('s2').feature('d5').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d5').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d5').label('Direct, turbulence variables (spf2)');
model.sol('sol1').feature('s2').feature('se1').feature('ss5').set('linsolver', 'd5');
model.sol('sol1').feature('s2').feature('se1').feature('ss5').label('Turbulence Variables (2)');
model.sol('sol1').feature('s2').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s2').feature('se1').set('subinitcfl', 2);
model.sol('sol1').feature('s2').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s2').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s2').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s2').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s2').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s2').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s2').feature('se1').set('maxsegiter', 300);
model.sol('sol1').feature('s2').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s2').feature('se1').feature('ll1').set('lowerlimit', 'comp1.yPlus2 0 comp1.yPlus 0 comp1.T 0 ');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pmf'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pmf'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i2').set('rhob', 400);
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').create('i3', 'Iterative');
model.sol('sol1').feature('s2').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i3').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i3').set('rhob', 400);
model.sol('sol1').feature('s2').feature('i3').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i3').label('AMG, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').create('i4', 'Iterative');
model.sol('sol1').feature('s2').feature('i4').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i4').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i4').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i4').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i4').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i4').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i4').label('AMG, fluid flow variables (spf2)');
model.sol('sol1').feature('s2').feature('i4').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf2_inl1_Pmf'});
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf2_inl1_Pmf'});
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i4').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').create('i5', 'Iterative');
model.sol('sol1').feature('s2').feature('i5').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i5').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i5').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i5').set('rhob', 400);
model.sol('sol1').feature('s2').feature('i5').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i5').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i5').label('AMG, turbulence variables (spf2)');
model.sol('sol1').feature('s2').feature('i5').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i5').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i5').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i5').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i5').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i5').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i5').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i5').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i5').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i5').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i5').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Velocity (spf)');
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Pressure (spf)');
model.result('pg2').set('dataisaxisym', 'off');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').label('Contour');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('expr', 'p');
model.result('pg2').feature('con1').set('number', 40);
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('smooth', 'internal');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('data', 'parent');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').label('Revolution 2D');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset1');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Velocity, 3D (spf)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'rev1');
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond1/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.dataset.create('edg1', 'Edge2D');
model.result.dataset('edg1').label('Exterior Walls');
model.result.dataset('edg1').set('data', 'dset1');
model.result.dataset('edg1').selection.geom('geom1', 1);
model.result.dataset('edg1').selection.set([4]);
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Wall Resolution (spf)');
model.result('pg4').set('dataisaxisym', 'off');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset1');
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond2/pcond4/pg2');
model.result('pg4').feature.create('line1', 'Line');
model.result('pg4').feature('line1').label('Wall Resolution');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('expr', 'spf.Delta_wPlus');
model.result('pg4').feature('line1').set('linetype', 'tube');
model.result('pg4').feature('line1').set('smooth', 'internal');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('data', 'parent');
model.result('pg4').feature('line1').feature.create('hght1', 'Height');
model.result('pg4').feature('line1').feature('hght1').label('Height Expression');
model.result('pg4').feature('line1').feature('hght1').set('heightdata', 'expr');
model.result('pg4').feature('line1').feature('hght1').set('expr', 'spf.WRHeightExpr');
model.result.dataset.create('lshl1', 'LayeredMaterial');
model.result.dataset('lshl1').set('data', 'dset1');
model.result.dataset('lshl1').selection.geom('geom1', 1);
model.result.dataset('lshl1').selection.set([4]);
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Temperature (ht)');
model.result('pg5').set('dataisaxisym', 'off');
model.result('pg5').set('data', 'dset1');
model.result('pg5').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pg1');
model.result('pg5').selection.geom('geom1', 2);
model.result('pg5').selection.set([1 2]);
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').label('Domain');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('expr', 'T');
model.result('pg5').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg5').feature.create('surf2', 'Surface');
model.result('pg5').feature('surf2').label('Layered Shell');
model.result('pg5').feature('surf2').set('data', 'lshl1');
model.result('pg5').feature('surf2').set('showsolutionparams', 'on');
model.result('pg5').feature('surf2').set('solutionparams', 'parent');
model.result('pg5').feature('surf2').set('expr', 'T');
model.result('pg5').feature('surf2').set('titletype', 'none');
model.result('pg5').feature('surf2').set('smooth', 'internal');
model.result('pg5').feature('surf2').set('showsolutionparams', 'on');
model.result('pg5').feature('surf2').set('data', 'lshl1');
model.result('pg5').feature('surf2').set('inheritplot', 'surf1');
model.result('pg5').feature.create('line1', 'Line');
model.result('pg5').feature('line1').label('Layered Shell Edges');
model.result('pg5').feature('line1').set('data', 'lshl1');
model.result('pg5').feature('line1').set('showsolutionparams', 'on');
model.result('pg5').feature('line1').set('solutionparams', 'parent');
model.result('pg5').feature('line1').set('expr', '1');
model.result('pg5').feature('line1').set('titletype', 'none');
model.result('pg5').feature('line1').set('coloring', 'uniform');
model.result('pg5').feature('line1').set('color', 'fromtheme');
model.result('pg5').feature('line1').set('smooth', 'internal');
model.result('pg5').feature('line1').set('showsolutionparams', 'on');
model.result('pg5').feature('line1').set('data', 'lshl1');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').label('Velocity (spf2)');
model.result('pg6').set('dataisaxisym', 'off');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('data', 'dset1');
model.result('pg6').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').label('Surface');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('expr', 'spf2.U');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').label('Pressure (spf2)');
model.result('pg7').set('dataisaxisym', 'off');
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').set('data', 'dset1');
model.result('pg7').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg7').feature.create('con1', 'Contour');
model.result('pg7').feature('con1').label('Contour');
model.result('pg7').feature('con1').set('showsolutionparams', 'on');
model.result('pg7').feature('con1').set('expr', 'p2');
model.result('pg7').feature('con1').set('number', 40);
model.result('pg7').feature('con1').set('levelrounding', false);
model.result('pg7').feature('con1').set('smooth', 'internal');
model.result('pg7').feature('con1').set('showsolutionparams', 'on');
model.result('pg7').feature('con1').set('data', 'parent');
model.result.dataset('rev1').set('data', 'dset1');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').label('Velocity, 3D (spf2)');
model.result('pg8').set('frametype', 'spatial');
model.result('pg8').set('data', 'rev1');
model.result('pg8').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond1/pg1');
model.result('pg8').feature.create('surf1', 'Surface');
model.result('pg8').feature('surf1').label('Surface');
model.result('pg8').feature('surf1').set('showsolutionparams', 'on');
model.result('pg8').feature('surf1').set('expr', 'spf2.U');
model.result('pg8').feature('surf1').set('smooth', 'internal');
model.result('pg8').feature('surf1').set('showsolutionparams', 'on');
model.result('pg8').feature('surf1').set('data', 'parent');
model.result.dataset.create('edg2', 'Edge2D');
model.result.dataset('edg2').label('Exterior Walls 1');
model.result.dataset('edg2').set('data', 'dset1');
model.result.dataset('edg2').selection.geom('geom1', 1);
model.result.dataset('edg2').selection.set([4 7]);
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').label('Wall Resolution (spf2)');
model.result('pg9').set('dataisaxisym', 'off');
model.result('pg9').set('frametype', 'spatial');
model.result('pg9').set('data', 'dset1');
model.result('pg9').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond2/pcond4/pg2');
model.result('pg9').feature.create('line1', 'Line');
model.result('pg9').feature('line1').label('Wall Resolution');
model.result('pg9').feature('line1').set('showsolutionparams', 'on');
model.result('pg9').feature('line1').set('expr', 'spf2.Delta_wPlus');
model.result('pg9').feature('line1').set('linetype', 'tube');
model.result('pg9').feature('line1').set('smooth', 'internal');
model.result('pg9').feature('line1').set('showsolutionparams', 'on');
model.result('pg9').feature('line1').set('data', 'parent');
model.result('pg9').feature('line1').feature.create('hght1', 'Height');
model.result('pg9').feature('line1').feature('hght1').label('Height Expression');
model.result('pg9').feature('line1').feature('hght1').set('heightdata', 'expr');
model.result('pg9').feature('line1').feature('hght1').set('expr', 'spf2.WRHeightExpr');
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').label('Temperature and Fluid Flow (nitf1)');
model.result('pg10').set('dataisaxisym', 'off');
model.result('pg10').set('showlegendsunit', true);
model.result('pg10').set('data', 'dset1');
model.result('pg10').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond4/pcond4/pcond2/pg2');
model.result('pg10').feature.create('surf1', 'Surface');
model.result('pg10').feature('surf1').label('Fluid Temperature');
model.result('pg10').feature('surf1').set('showsolutionparams', 'on');
model.result('pg10').feature('surf1').set('solutionparams', 'parent');
model.result('pg10').feature('surf1').set('expr', 'nitf1.T');
model.result('pg10').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg10').feature('surf1').set('smooth', 'internal');
model.result('pg10').feature('surf1').set('showsolutionparams', 'on');
model.result('pg10').feature('surf1').set('data', 'parent');
model.result('pg10').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg10').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg10').feature('surf1').feature('sel1').selection.set([1]);
model.result('pg10').feature.create('arws1', 'ArrowSurface');
model.result('pg10').feature('arws1').label('Fluid Flow');
model.result('pg10').feature('arws1').set('showsolutionparams', 'on');
model.result('pg10').feature('arws1').set('solutionparams', 'parent');
model.result('pg10').feature('arws1').set('expr', {'nitf1.ur' 'nitf1.uz'});
model.result('pg10').feature('arws1').set('xnumber', 30);
model.result('pg10').feature('arws1').set('ynumber', 30);
model.result('pg10').feature('arws1').set('arrowtype', 'cone');
model.result('pg10').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg10').feature('arws1').set('showsolutionparams', 'on');
model.result('pg10').feature('arws1').set('data', 'parent');
model.result('pg10').feature('arws1').feature.create('col1', 'Color');
model.result('pg10').feature('arws1').feature('col1').set('showcolordata', 'off');
model.result('pg10').feature('arws1').feature.create('filt1', 'Filter');
model.result('pg10').feature('arws1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result.create('pg11', 'PlotGroup2D');
model.result('pg11').label('Temperature and Fluid Flow (nitf2)');
model.result('pg11').set('dataisaxisym', 'off');
model.result('pg11').set('showlegendsunit', true);
model.result('pg11').set('data', 'dset1');
model.result('pg11').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond4/pcond4/pcond2/pg2');
model.result('pg11').feature.create('surf1', 'Surface');
model.result('pg11').feature('surf1').label('Fluid Temperature');
model.result('pg11').feature('surf1').set('showsolutionparams', 'on');
model.result('pg11').feature('surf1').set('solutionparams', 'parent');
model.result('pg11').feature('surf1').set('expr', 'nitf2.T');
model.result('pg11').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg11').feature('surf1').set('smooth', 'internal');
model.result('pg11').feature('surf1').set('showsolutionparams', 'on');
model.result('pg11').feature('surf1').set('data', 'parent');
model.result('pg11').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg11').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg11').feature('surf1').feature('sel1').selection.set([2]);
model.result('pg11').feature.create('arws1', 'ArrowSurface');
model.result('pg11').feature('arws1').label('Fluid Flow');
model.result('pg11').feature('arws1').set('showsolutionparams', 'on');
model.result('pg11').feature('arws1').set('solutionparams', 'parent');
model.result('pg11').feature('arws1').set('expr', {'nitf2.ur' 'nitf2.uz'});
model.result('pg11').feature('arws1').set('xnumber', 30);
model.result('pg11').feature('arws1').set('ynumber', 30);
model.result('pg11').feature('arws1').set('arrowtype', 'cone');
model.result('pg11').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg11').feature('arws1').set('showsolutionparams', 'on');
model.result('pg11').feature('arws1').set('data', 'parent');
model.result('pg11').feature('arws1').feature.create('col1', 'Color');
model.result('pg11').feature('arws1').feature('col1').set('showcolordata', 'off');
model.result('pg11').feature('arws1').feature('col1').set('expr', 'spf2.U');
model.result('pg11').feature('arws1').feature.create('filt1', 'Filter');
model.result('pg11').feature('arws1').feature('filt1').set('expr', 'spf2.U>nitf2.Uave');
model.result('pg1').run;
model.result.create('pg12', 'PlotGroup1D');
model.result('pg12').run;
model.result('pg12').label('Temperature over Length');
model.result('pg12').set('titletype', 'manual');
model.result('pg12').set('title', 'Temperature over Length');
model.result('pg12').create('lngr1', 'LineGraph');
model.result('pg12').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg12').feature('lngr1').set('linewidth', 'preference');
model.result('pg12').feature('lngr1').selection.set([1]);
model.result('pg12').feature('lngr1').set('expr', 'T');
model.result('pg12').feature('lngr1').set('xdata', 'expr');
model.result('pg12').feature('lngr1').set('xdataexpr', 'z');
model.result('pg12').feature('lngr1').set('linecolor', 'custom');
model.result('pg12').feature('lngr1').set('customlinecolor', [0 0 1]);
model.result('pg12').feature('lngr1').set('linewidth', 3);
model.result('pg12').feature('lngr1').set('legend', true);
model.result('pg12').feature('lngr1').set('legendmethod', 'manual');
model.result('pg12').feature('lngr1').setIndex('legends', 'Inner tube', 0);
model.result('pg12').run;
model.result('pg12').run;
model.result('pg12').create('lngr2', 'LineGraph');
model.result('pg12').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg12').feature('lngr2').set('linewidth', 'preference');
model.result('pg12').feature('lngr2').selection.set([7]);
model.result('pg12').feature('lngr2').set('expr', 'T');
model.result('pg12').feature('lngr2').set('xdata', 'expr');
model.result('pg12').feature('lngr2').set('xdataexpr', 'z');
model.result('pg12').feature('lngr2').set('linecolor', 'custom');
model.result('pg12').feature('lngr2').set('customlinecolor', [0.03529411926865578 0.4627451002597809 0.03529411926865578]);
model.result('pg12').feature('lngr2').set('linewidth', 3);
model.result('pg12').feature('lngr2').set('legend', true);
model.result('pg12').feature('lngr2').set('legendmethod', 'manual');
model.result('pg12').feature('lngr2').setIndex('legends', 'Outer tube', 0);
model.result('pg12').run;
model.result.create('pg13', 'PlotGroup1D');
model.result('pg13').run;
model.result('pg13').label('Pressure over Length');
model.result('pg13').set('titletype', 'manual');
model.result('pg13').set('title', 'Pressure over Length');
model.result('pg13').set('legendpos', 'middleright');
model.result('pg13').create('lngr1', 'LineGraph');
model.result('pg13').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg13').feature('lngr1').set('linewidth', 'preference');
model.result('pg13').feature('lngr1').selection.set([1]);
model.result('pg13').feature('lngr1').set('expr', 'p');
model.result('pg13').feature('lngr1').set('descr', 'Pressure');
model.result('pg13').feature('lngr1').set('xdata', 'expr');
model.result('pg13').feature('lngr1').set('xdataexpr', 'z');
model.result('pg13').feature('lngr1').set('linecolor', 'custom');
model.result('pg13').feature('lngr1').set('customlinecolor', [0 0 1]);
model.result('pg13').feature('lngr1').set('linewidth', 3);
model.result('pg13').feature('lngr1').set('legend', true);
model.result('pg13').feature('lngr1').set('legendmethod', 'manual');
model.result('pg13').feature('lngr1').setIndex('legends', 'Inner tube', 0);
model.result('pg13').run;
model.result('pg13').run;
model.result('pg13').create('lngr2', 'LineGraph');
model.result('pg13').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg13').feature('lngr2').set('linewidth', 'preference');
model.result('pg13').feature('lngr2').selection.set([7]);
model.result('pg13').feature('lngr2').set('expr', 'p2');
model.result('pg13').feature('lngr2').set('descr', 'Pressure');
model.result('pg13').feature('lngr2').set('xdata', 'expr');
model.result('pg13').feature('lngr2').set('xdataexpr', 'z');
model.result('pg13').feature('lngr2').set('linecolor', 'custom');
model.result('pg13').feature('lngr2').set('customlinecolor', [0.03529411926865578 0.4627451002597809 0.03529411926865578]);
model.result('pg13').feature('lngr2').set('linewidth', 3);
model.result('pg13').feature('lngr2').set('legend', true);
model.result('pg13').feature('lngr2').set('legendmethod', 'manual');
model.result('pg13').feature('lngr2').setIndex('legends', 'Outer tube', 0);
model.result('pg13').run;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Log Mean Temperature Difference');
model.result.numerical('gev1').setIndex('expr', 'abs(dT1-dT2)/abs(log(dT1/(dT2+eps))+eps)', 0);
model.result.numerical('gev1').setIndex('descr', 'Log mean temperature difference (LMTD)', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Log Mean Temperature Difference');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').label('Overall Heat Transfer Coefficient');
model.result.numerical('gev2').setIndex('expr', 'U', 0);
model.result.numerical('gev2').setIndex('descr', 'Overall heat transfer coefficient', 0);
model.result.numerical('gev2').set('table', 'tbl1');
model.result.numerical('gev2').appendResult;
model.result.numerical.create('gev3', 'EvalGlobal');
model.result.numerical('gev3').label('Effectiveness');
model.result.numerical('gev3').setIndex('expr', 'E', 0);
model.result.numerical('gev3').setIndex('descr', 'Effectiveness', 0);
model.result.numerical('gev3').set('table', 'tbl1');
model.result.numerical('gev3').appendResult;
model.result.numerical.create('gev4', 'EvalGlobal');
model.result.numerical('gev4').label('Heat Transfer Units');
model.result.numerical('gev4').setIndex('expr', 'U*A*E*abs(T1-T2)/(abs(intop5(ht.ndflux))+eps)', 0);
model.result.numerical('gev4').setIndex('descr', 'Heat transfer units (NTU)', 0);
model.result.numerical('gev4').set('table', 'tbl1');
model.result.numerical('gev4').appendResult;
model.result.numerical.create('gev5', 'EvalGlobal');
model.result.numerical('gev5').label('Pressure Drop, Inner Tube');
model.result.numerical('gev5').setIndex('expr', 'aveop1(p)-aveop2(p)', 0);
model.result.numerical('gev5').setIndex('descr', 'Pressure drop, inner tube', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Pressure Drop, Inner Tube');
model.result.numerical('gev5').set('table', 'tbl2');
model.result.numerical('gev5').setResult;
model.result.numerical.create('gev6', 'EvalGlobal');
model.result.numerical('gev6').label('Pressure Drop, Outer Tube');
model.result.numerical('gev6').setIndex('expr', 'aveop3(p2)-aveop4(p2)', 0);
model.result.numerical('gev6').setIndex('descr', 'Pressure drop, outer tube', 0);
model.result.numerical('gev6').set('table', 'tbl2');
model.result.numerical('gev6').appendResult;
model.result('pg12').run;

model.title('Concentric Tube Heat Exchanger');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Selecting predefined or user-defined materials' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' User option to switch between laminar flow or turbulent flow' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Changing boundary conditions using methods' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Visualizing temperature dependent material properties as graph plots' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' User option to set the solver tolerance' newline  newline 'Finding the right dimensions for a heat exchanger is imperative to ensure its effectiveness. Other properties must also be considered in order to design a heat exchanger that is both of the right size and provides heated or cooled fluid of the right temperature.' newline  newline 'The app computes these quantities for a heat exchanger made of two concentric tubes. The fluids can flow either in parallel or in counter current flow.' newline  newline 'The fluid properties, heat transfer characteristics, and dimensions of the heat exchanger can all be varied. The Nonisothermal Flow multiphysics interface is used to model the heat transfer.']);

model.label('concentric_tube_heat_exchanger.mph');

model.result('pg12').run;

model.material('mat3').propertyGroup('def').func('rho').setIndex('plotaxis', false, 1);

model.param.set('rtol', '1e-3');
model.param.descr('rtol', 'Solver relative tolerance');

model.sol('sol1').updateSolution;

model.result('pg1').run;

model.sol('sol1').feature('s1').set('stol', 'rtol');
model.sol('sol1').feature('s2').set('stol', 'rtol');

model.material('mat1').propertyGroup('def').func('eta').createPlot('pg14');

model.result('pg14').run;
model.result('pg14').label('Material Property');
model.result('pg14').set('titletype', 'none');
model.result('pg14').set('xlabel', 'Temperature (K)');
model.result('pg14').run;
model.result('pg14').feature('plot1').set('expr', 'mat1.def.eta(root.T[K])');
model.result('pg14').feature('plot1').set('xdataexpr', 'root.T');
model.result('pg14').feature('plot1').set('lowerbound', '273.15[m]');
model.result('pg14').feature('plot1').set('upperbound', '553.75[m]');
model.result('pg14').feature('plot1').set('linewidth', 3);
model.result('pg14').run;
model.result('pg14').run;
model.result.dataset('eta_ds1').set('source', 'data');
model.result.dataset('eta_ds1').set('data', 'dset1');
model.result.numerical.create('meas1', 'MeasureSurface');
model.result.numerical('meas1').set('intvolume', true);
model.result.numerical('meas1').label('Inner Tube Volume');
model.result.numerical('meas1').selection.named('sel1');
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').comments('Inner Tube Volume');
model.result.numerical('meas1').set('table', 'tbl3');
model.result.numerical('meas1').setResult;
model.result.numerical.create('meas2', 'MeasureSurface');
model.result.numerical('meas2').set('intvolume', true);
model.result.numerical('meas2').label('Outer Tube Volume');
model.result.numerical('meas2').selection.named('sel2');
model.result.numerical('meas2').set('table', 'tbl3');
model.result.numerical('meas2').appendResult;
model.result.numerical.create('meas3', 'MeasureSurface');
model.result.numerical('meas3').set('intvolume', true);
model.result.numerical('meas3').label('Overall Volume');
model.result.numerical('meas3').selection.all;
model.result.numerical('meas3').set('table', 'tbl3');
model.result.numerical('meas3').appendResult;
model.result.numerical.create('int1', 'IntSurface');
model.result.numerical('int1').set('intvolume', true);
model.result.numerical('int1').label('Inner Fluid Mass');
model.result.numerical('int1').selection.named('sel1');
model.result.numerical('int1').set('expr', {'ht.rho'});
model.result.numerical('int1').set('descr', {'Density'});
model.result.numerical('int1').set('unit', {'kg'});
model.result.numerical('int1').setIndex('descr', 'Inner fluid mass', 0);
model.result.table.create('tbl4', 'Table');
model.result.table('tbl4').comments('Inner Fluid Mass');
model.result.numerical('int1').set('table', 'tbl4');
model.result.numerical('int1').setResult;
model.result.numerical.create('int2', 'IntSurface');
model.result.numerical('int2').set('intvolume', true);
model.result.numerical('int2').label('Outer Fluid Mass');
model.result.numerical('int2').selection.named('sel2');
model.result.numerical('int2').set('expr', {'ht.rho'});
model.result.numerical('int2').set('descr', {'Density'});
model.result.numerical('int2').set('unit', {'kg'});
model.result.numerical('int2').setIndex('descr', 'Outer fluid mass', 0);
model.result.numerical('int2').set('table', 'tbl4');
model.result.numerical('int2').appendResult;
model.result.numerical.create('int3', 'IntSurface');
model.result.numerical('int3').set('intvolume', true);
model.result.numerical('int3').label('Overall Fluid Mass');
model.result.numerical('int3').selection.all;
model.result.numerical('int3').set('expr', {'ht.rho'});
model.result.numerical('int3').set('descr', {'Density'});
model.result.numerical('int3').set('unit', {'kg'});
model.result.numerical('int3').setIndex('descr', 'Overall fluid mass', 0);
model.result.numerical('int3').set('table', 'tbl4');
model.result.numerical('int3').appendResult;
model.result.numerical.create('int4', 'IntLine');
model.result.numerical('int4').set('intsurface', true);
model.result.numerical('int4').label('Exchanged Power');
model.result.numerical('int4').selection.named('sel7');
model.result.numerical('int4').setIndex('expr', 'abs(ht.ndflux)', 0);
model.result.numerical('int4').setIndex('unit', 'W/m', 0);
model.result.numerical('int4').setIndex('descr', 'Exchanged power', 0);
model.result.numerical('int4').set('table', 'tbl1');
model.result.numerical('int4').appendResult;
model.result.numerical.create('meas4', 'MeasureLine');
model.result.numerical('meas4').set('intsurface', true);
model.result.numerical('meas4').label('Heat Exchange Surface');
model.result.numerical('meas4').selection.named('sel7');
model.result.numerical('meas4').set('table', 'tbl3');
model.result.numerical('meas4').appendResult;
model.result.numerical.create('gev7', 'EvalGlobal');
model.result.numerical('gev7').label('Density, Inner Fluid');
model.result.numerical('gev7').setIndex('expr', 'mat4.def.rho', 0);
model.result.numerical('gev7').setIndex('descr', 'Density, inner fluid', 0);
model.result.table.create('tbl5', 'Table');
model.result.table('tbl5').comments('Density, Inner Fluid');
model.result.numerical('gev7').set('table', 'tbl5');
model.result.numerical('gev7').setResult;
model.result.numerical.create('gev8', 'EvalGlobal');
model.result.numerical('gev8').label('Heat Capacity at Constant Pressure, Inner Fluid');
model.result.numerical('gev8').setIndex('expr', 'mat4.def.Cp', 0);
model.result.numerical('gev8').setIndex('descr', 'Heat capacity at constant pressure, inner fluid', 0);
model.result.numerical('gev8').set('table', 'tbl5');
model.result.numerical('gev8').appendResult;
model.result.numerical.create('gev9', 'EvalGlobal');
model.result.numerical('gev9').label('Thermal Conductivity, Inner Fluid');
model.result.numerical('gev9').setIndex('expr', 'mat4.def.k11', 0);
model.result.numerical('gev9').setIndex('descr', 'Thermal conductivity, inner fluid', 0);
model.result.numerical('gev9').set('table', 'tbl5');
model.result.numerical('gev9').appendResult;
model.result.numerical.create('gev10', 'EvalGlobal');
model.result.numerical('gev10').label('Dynamic Viscosity, Inner Fluid');
model.result.numerical('gev10').setIndex('expr', 'mat4.def.mu', 0);
model.result.numerical('gev10').setIndex('descr', 'Dynamic viscosity, inner fluid', 0);
model.result.numerical('gev10').set('table', 'tbl5');
model.result.numerical('gev10').appendResult;
model.result.numerical.create('gev11', 'EvalGlobal');
model.result.numerical('gev11').label('Density, Outer Fluid');
model.result.numerical('gev11').setIndex('expr', 'mat5.def.rho', 0);
model.result.numerical('gev11').setIndex('descr', 'Density, outer fluid', 0);
model.result.numerical('gev11').set('table', 'tbl5');
model.result.numerical('gev11').appendResult;
model.result.numerical.create('gev12', 'EvalGlobal');
model.result.numerical('gev12').label('Heat Capacity at Constant Pressure, Outer Fluid');
model.result.numerical('gev12').setIndex('expr', 'mat5.def.Cp', 0);
model.result.numerical('gev12').setIndex('descr', 'Heat capacity at constant pressure, outer fluid', 0);
model.result.numerical('gev12').set('table', 'tbl5');
model.result.numerical('gev12').appendResult;
model.result.numerical.create('gev13', 'EvalGlobal');
model.result.numerical('gev13').label('Thermal Conductivity, Outer Fluid');
model.result.numerical('gev13').setIndex('expr', 'mat5.def.k11', 0);
model.result.numerical('gev13').setIndex('descr', 'Thermal conductivity, outer fluid', 0);
model.result.numerical('gev13').set('table', 'tbl5');
model.result.numerical('gev13').appendResult;
model.result.numerical.create('gev14', 'EvalGlobal');
model.result.numerical('gev14').label('Dynamic Viscosity, Outer Fluid');
model.result.numerical('gev14').setIndex('expr', 'mat5.def.mu', 0);
model.result.numerical('gev14').setIndex('descr', 'Dynamic viscosity, outer fluid', 0);
model.result.numerical('gev14').set('table', 'tbl5');
model.result.numerical('gev14').appendResult;
model.result.numerical.create('gev15', 'EvalGlobal');
model.result.numerical('gev15').label('Density, Tubes');
model.result.numerical('gev15').setIndex('expr', 'mat6.def.rho', 0);
model.result.numerical('gev15').setIndex('descr', 'Density, tubes', 0);
model.result.table.create('tbl6', 'Table');
model.result.table('tbl6').comments('Density, Tubes');
model.result.numerical('gev15').set('table', 'tbl6');
model.result.numerical('gev15').setResult;
model.result.numerical.create('gev16', 'EvalGlobal');
model.result.numerical('gev16').label('Thermal Conductivity, Tubes');
model.result.numerical('gev16').setIndex('expr', 'mat6.def.k11', 0);
model.result.numerical('gev16').setIndex('descr', 'Thermal conductivity, tubes', 0);
model.result.numerical('gev16').set('table', 'tbl6');
model.result.numerical('gev16').appendResult;
model.result.numerical.create('gev17', 'EvalGlobal');
model.result.numerical('gev17').label('Compactness');
model.result.numerical('gev17').setIndex('expr', 'S/vol0', 0);
model.result.numerical('gev17').setIndex('descr', 'Compactness', 0);
model.result.numerical('gev17').set('table', 'tbl3');
model.result.numerical('gev17').appendResult;
model.result.numerical.create('gev18', 'EvalGlobal');
model.result.numerical('gev18').label('Reynolds Number, Inner Fluid');
model.result.numerical('gev18').setIndex('expr', 'mfr1*2*R1/intop1(spf.mu)', 0);
model.result.numerical('gev18').setIndex('descr', 'Reynolds number, inner fluid', 0);
model.result.table.create('tbl7', 'Table');
model.result.table('tbl7').comments('Reynolds Number, Inner Fluid');
model.result.numerical('gev18').set('table', 'tbl7');
model.result.numerical('gev18').setResult;
model.result.numerical.create('gev19', 'EvalGlobal');
model.result.numerical('gev19').label('Reynolds Number, Outer Fluid');
model.result.numerical('gev19').setIndex('expr', 'mfr2*(R2-R1)/intop3(spf2.mu)', 0);
model.result.numerical('gev19').setIndex('descr', 'Reynolds number, outer fluid', 0);
model.result.numerical('gev19').set('table', 'tbl7');
model.result.numerical('gev19').appendResult;
model.result('pg12').run;

model.setExpectedComputationTime('30 seconds');

model.result.report.create('rpt1', 'Report');
model.result.report('rpt1').set('format', 'docx');
model.result.report('rpt1').set('filename', 'user:///concentric_tube_heat_exchanger.docx');
model.result.report('rpt1').feature.create('tp1', 'TitlePage');
model.result.report('rpt1').feature('tp1').set('titleimage', 'none');
model.result.report('rpt1').feature.create('toc1', 'TableOfContents');
model.result.report('rpt1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').label('Global Definitions');
model.result.report('rpt1').feature('sec1').feature.create('root1', 'Model');
model.result.report('rpt1').feature('sec1').feature('root1').set('includename', false);
model.result.report('rpt1').feature('sec1').feature('root1').set('includepath', false);
model.result.report('rpt1').feature('sec1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').feature('sec1').label('Parameters');
model.result.report('rpt1').feature('sec1').feature('sec1').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').label('Parameters - Tube');
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 5, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 6, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 7, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 8, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 9, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 10, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 12, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 13, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 14, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 15, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 16, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 17, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 18, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 19, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 20, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 21, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 22, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 23, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 24, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 25, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 26, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 27, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 28, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 29, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 30, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 31, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 32, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 33, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 34, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 35, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 36, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 37, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 38, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 39, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature.create('param2', 'Parameter');
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').label('Parameters - Flow');
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 12, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 13, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 14, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 15, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 16, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 17, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 18, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 19, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 20, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 21, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 22, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 23, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 24, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 25, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 26, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 27, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 28, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 29, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 30, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 31, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 32, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 33, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 34, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 35, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 36, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 37, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 38, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param2').setIndex('children', false, 39, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature.create('param3', 'Parameter');
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').label('Parameters - Solver');
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 5, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 6, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 7, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 8, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 9, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 10, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 12, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 13, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 14, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 15, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 16, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 17, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 18, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 19, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 20, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 21, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 22, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 23, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 24, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 25, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 26, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 27, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 28, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 29, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 30, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 31, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 32, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 33, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 34, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 35, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 36, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 37, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param3').setIndex('children', false, 38, 1);
model.result.report('rpt1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').label('Embedded Model');
model.result.report('rpt1').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec1').label('Geometry');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('img1', 'Graphics');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('img1').set('source', 'external');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('img1').set('externalfile', 'embedded:///concentric_tube_heat_exchanger_geom.png');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('img1').set('caption', 'Geometry of the concentric tubes');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('geom1', 'Geometry');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('geom1').set('includeimage', false);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('geom1').set('includeunits', false);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('geom1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('geom1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('geom1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('geom1').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('geom1').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature('sec2').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec2').label('Materials');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec1').label('Inner Fluid');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec1').feature.create('mat1', 'Material');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec1').feature('mat1').set('noderef', 'matlnk1');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec1').feature('mat1').set('includeimage', false);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec1').feature('mat1').set('includeselection', false);
model.result.report('rpt1').feature('sec2').feature('sec2').feature.duplicate('sec2', 'sec1');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec2').label('Outer Fluid');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec2').feature('mat1').set('noderef', 'matlnk2');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.duplicate('sec3', 'sec2');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec3').label('Tubes');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec3').feature('mat1').set('noderef', 'matlnk3');
model.result.report('rpt1').feature('sec2').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec3').label('Mesh');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.create('mesh1', 'Mesh');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('mesh1').set('includeimage', false);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('mesh1').set('includestats', true);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('mesh1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('mesh1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('mesh1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('mesh1').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').label('Study');
model.result.report('rpt1').feature('sec3').feature.create('std1', 'Study');
model.result.report('rpt1').feature('sec3').feature('std1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec3').feature('std1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature.create('sec4', 'Section');
model.result.report('rpt1').feature('sec4').label('Results');
model.result.report('rpt1').feature('sec4').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec4').feature('sec1').label('Derived Values');
model.result.report('rpt1').feature('sec4').feature('sec1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec1').label('Characteristics');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec1').feature.create('mtbl1', 'Table');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec1').feature('mtbl1').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec1').feature('mtbl1').set('numberformat', 'custom');
model.result.report('rpt1').feature('sec4').feature('sec1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec2').label('Pressure Drops');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec2').feature.create('mtbl1', 'Table');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec2').feature('mtbl1').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec2').feature('mtbl1').set('noderef', 'tbl2');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec2').feature('mtbl1').set('numberformat', 'custom');
model.result.report('rpt1').feature('sec4').feature('sec1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec3').label('Dimensions');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec3').feature.create('mtbl1', 'Table');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec3').feature('mtbl1').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec3').feature('mtbl1').set('noderef', 'tbl3');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec3').feature('mtbl1').set('numberformat', 'custom');
model.result.report('rpt1').feature('sec4').feature('sec1').feature.create('sec4', 'Section');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec4').label('Masses');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec4').feature.create('mtbl1', 'Table');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec4').feature('mtbl1').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec4').feature('mtbl1').set('noderef', 'tbl4');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec4').feature('mtbl1').set('numberformat', 'custom');
model.result.report('rpt1').feature('sec4').feature('sec1').feature.create('sec5', 'Section');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec5').label('Reynolds Numbers');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec5').feature.create('mtbl1', 'Table');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec5').feature('mtbl1').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec5').feature('mtbl1').set('noderef', 'tbl7');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('sec5').feature('mtbl1').set('numberformat', 'custom');
model.result.report('rpt1').feature('sec4').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec4').feature('sec2').label('Plot Groups');
model.result.report('rpt1').feature('sec4').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec4').feature('sec2').feature('sec1').set('source', 'firstchild');
model.result.report('rpt1').feature('sec4').feature('sec2').feature('sec1').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('sec2').feature('sec1').feature('pg1').set('noderef', 'pg12');
model.result.report('rpt1').feature('sec4').feature('sec2').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec4').feature('sec2').feature('sec2').set('source', 'firstchild');
model.result.report('rpt1').feature('sec4').feature('sec2').feature('sec2').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('sec2').feature('sec2').feature('pg1').set('noderef', 'pg13');
model.result('pg12').run;

model.title('Concentric Tube Heat Exchanger');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Selecting predefined or user-defined materials' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' User option to switch between laminar flow or turbulent flow' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Changing boundary conditions using methods' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Visualizing temperature dependent material properties as graph plots' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' User option to set the solver tolerance' newline  newline 'Finding the right dimensions for a heat exchanger is imperative to ensure its effectiveness. Other properties must also be considered in order to design a heat exchanger that is both of the right size and provides heated or cooled fluid of the right temperature.' newline  newline 'The app computes these quantities for a heat exchanger made of two concentric tubes. The fluids can flow either in parallel or in counter current flow.' newline  newline 'The fluid properties, heat transfer characteristics, and dimensions of the heat exchanger can all be varied. The Nonisothermal Flow multiphysics interface is used to model the heat transfer.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('concentric_tube_heat_exchanger.mph');

model.modelNode.label('Components');

out = model;
