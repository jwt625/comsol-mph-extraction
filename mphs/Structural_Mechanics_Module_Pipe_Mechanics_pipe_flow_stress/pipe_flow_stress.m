function out = model
%
% pipe_flow_stress.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Pipe_Mechanics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('pfl', 'FlowInPipes', 'geom1');
model.physics('pfl').model('comp1');
model.physics('pfl').field('velocity').field('u_fluid');
model.physics.create('pipem', 'PipeMechanics', 'geom1');
model.physics('pipem').model('comp1');
model.physics('pipem').field('displacement').field('u_pipe');
model.physics('pipem').field('displacement').component({'u_pipe' 'v_pipe' 'w_pipe'});
model.physics('pipem').prop('StructuralTransientBehavior').set('StructuralTransientBehavior', 'Quasistatic');

model.multiphysics.create('fpipe1', 'FluidPipeInteraction', 'geom1', 1);
model.multiphysics('fpipe1').set('Fluid_physics', 'pfl');
model.multiphysics('fpipe1').set('Structure_physics', 'pipem');
model.multiphysics('fpipe1').set('CouplingType', 'FluidLoading');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/pfl', true);
model.study('std1').feature('stat').setSolveFor('/physics/pipem', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/fpipe1', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('Xb', '10[m]', 'Bend x-coordinate');
model.param.set('rb', '2[m]', 'Bend radius');
model.param.set('Xs', '5[m]', 'Support 1, x-coordinate');
model.param.set('Ys', '5[m]', 'Support 2, y-coordinate');
model.param.set('Yout', '10[m]', 'Outlet y-coordinate');
model.param.set('di', '9.2[cm]', 'Pipe inner diameter');
model.param.set('do', '10[cm]', 'Pipe outer diameter');
model.param.set('pin', '50[bar]', 'Pipe inlet pressure');
model.param.set('pout', '40[bar]', 'Pipe outlet pressure');

model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').geom.create('pol1', 'Polygon');
model.geom('geom1').feature('wp1').geom.feature('pol1').set('source', 'table');
model.geom('geom1').feature('wp1').geom.feature('pol1').set('type', 'open');
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 0, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'Xs', 1, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 1, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'Xb-rb', 2, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 2, 1);
model.geom('geom1').feature('wp1').geom.run('pol1');
model.geom('geom1').feature('wp1').geom.create('ca1', 'CircularArc');
model.geom('geom1').feature('wp1').geom.feature('ca1').set('r', 'rb');
model.geom('geom1').feature('wp1').geom.feature('ca1').set('center', {'Xb-rb' 'rb'});
model.geom('geom1').feature('wp1').geom.feature('ca1').set('angle1', 270);
model.geom('geom1').feature('wp1').geom.feature('ca1').set('angle2', 315);
model.geom('geom1').feature('wp1').geom.feature.duplicate('ca2', 'ca1');
model.geom('geom1').feature('wp1').geom.feature('ca2').set('angle1', 315);
model.geom('geom1').feature('wp1').geom.feature('ca2').set('angle2', 0);
model.geom('geom1').feature('wp1').geom.run('ca2');
model.geom('geom1').feature('wp1').geom.create('pol2', 'Polygon');
model.geom('geom1').feature('wp1').geom.feature('pol2').set('source', 'table');
model.geom('geom1').feature('wp1').geom.feature('pol2').set('type', 'open');
model.geom('geom1').feature('wp1').geom.feature('pol2').setIndex('table', 'Xb', 0, 0);
model.geom('geom1').feature('wp1').geom.feature('pol2').setIndex('table', 'rb', 0, 1);
model.geom('geom1').feature('wp1').geom.feature('pol2').setIndex('table', 'Xb', 1, 0);
model.geom('geom1').feature('wp1').geom.feature('pol2').setIndex('table', 'Ys', 1, 1);
model.geom('geom1').feature('wp1').geom.feature('pol2').setIndex('table', 'Xb', 2, 0);
model.geom('geom1').feature('wp1').geom.feature('pol2').setIndex('table', 'Yout', 2, 1);
model.geom('geom1').run('fin');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('hauto', 1);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 0.02);
model.mesh('mesh1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat2').label('Water, liquid');
model.material('mat2').set('family', 'water');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat2').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat2').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat2').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat2').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat2').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material('mat2').selection.all;

model.physics('pfl').feature('pipe1').set('shape', 'Round');
model.physics('pfl').feature('pipe1').set('innerd', 'di');
model.physics('pfl').feature('pipe1').set('frictionmodel', 6);
model.physics('pfl').feature('pipe1').set('roughness', 3);
model.physics('pipem').feature('fpm1').set('FluidMaterial', 'mat2');
model.physics('pipem').feature('fpm1').set('PipeMaterial', 'mat1');
model.physics('pipem').feature('pcs1').set('shape', 'Round');
model.physics('pipem').feature('pcs1').set('do_pipe', 'do');
model.physics('pipem').feature('pcs1').set('di_pipe', 'di');
model.physics('pipem').feature('pcs1').feature('so1').set('OrientationMethod', 'vector_beam');
model.physics('pipem').feature('pcs1').feature('so1').set('vector_beam', [-1 1 0]);
model.physics('pipem').feature('pcs1').create('bend1', 'BendCorrection', 1);
model.physics('pipem').feature('pcs1').feature('bend1').selection.set([3 4]);
model.physics('pipem').feature('pcs1').feature('bend1').set('kFi', '1.65/pipem.hFlex');
model.physics('pipem').feature('pcs1').feature('bend1').set('kFo', '1.65/pipem.hFlex');
model.physics('pipem').feature('pcs1').feature('bend1').set('SIFi', '0.9/(pipem.hFlex)^(2/3)');
model.physics('pipem').feature('pcs1').feature('bend1').set('SIFo', '0.75/(pipem.hFlex)^(2/3)');
model.physics('pipem').create('fix1', 'Fixed', 0);
model.physics('pipem').feature('fix1').selection.set([1 7]);
model.physics('pipem').create('pdr1', 'DispRot0', 0);
model.physics('pipem').feature('pdr1').selection.set([2 4 6]);
model.physics('pipem').feature('pdr1').setIndex('Direction', 'prescribed', 2);
model.physics('pipem').create('gacc1', 'GravityAcceleration', -1);
model.physics('pfl').feature('pr1').label('Pressure, inlet');
model.physics('pfl').feature('pr1').set('p0', 'pin');
model.physics('pfl').create('pr2', 'Pressure', 0);
model.physics('pfl').feature('pr2').label('Pressure, outlet');
model.physics('pfl').feature('pr2').selection.set([7]);
model.physics('pfl').feature('pr2').set('p0', 'pout');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_u_fluid' 'comp1_p'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subdtech', 'auto');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subinitstep', 0.1);
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subminstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subtermauto', 'tol');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('maxsubiter', 50);
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subntolfact', 1);
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Pipe Flow');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u_pipe'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdtech', 'auto');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('maxsubiter', 50);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Pipe Mechanics');
model.sol('sol1').feature('s1').feature('se1').set('segterm', 'iter');
model.sol('sol1').feature('s1').feature('se1').set('segiter', 1);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Pressure (pfl)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'pipeflow_FlowInPipes/phys1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('line1', 'Line');
model.result('pg1').feature('line1').set('linetype', 'tube');
model.result('pg1').feature('line1').set('radiusexpr', '0.5*pfl.dh');
model.result('pg1').feature('line1').set('smooth', 'internal');
model.result('pg1').feature('line1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (pfl)');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'pipeflow_FlowInPipes/phys1/pdef1/pcond2/pg2');
model.result('pg2').feature.create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').set('arrowcount', 20);
model.result('pg2').feature('arwl1').set('arrowlength', 'normalized');
model.result('pg2').feature('arwl1').set('data', 'parent');
model.result('pg2').feature('arwl1').feature.create('col1', 'Color');
model.result('pg2').feature('arwl1').feature('col1').set('showcolordata', 'off');
model.result('pg2').feature('arwl1').feature('col1').set('expr', 'pfl.U');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'stress');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('line1', 'Line');
model.result('pg3').feature('line1').set('expr', {'pipem.mises'});
model.result('pg3').feature('line1').set('threshold', 'manual');
model.result('pg3').feature('line1').set('thresholdvalue', 0.2);
model.result('pg3').feature('line1').set('colortable', 'Rainbow');
model.result('pg3').feature('line1').set('colortabletrans', 'none');
model.result('pg3').feature('line1').set('colorscalemode', 'linear');
model.result('pg3').label('Stress (pipem)');
model.result('pg3').feature('line1').set('colortable', 'Rainbow');
model.result('pg3').feature('line1').set('linetype', 'tube');
model.result('pg3').feature('line1').set('radiusexpr', 'pipem.re');
model.result('pg3').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg3').feature('line1').set('tuberadiusscale', 1);
model.result('pg3').feature('line1').create('def', 'Deform');
model.result('pg3').feature('line1').feature('def').set('expr', {'u_pipe' 'v_pipe' 'w_pipe'});
model.result('pg3').feature('line1').feature('def').set('descr', 'Displacement field');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('line1').set('unit', 'bar');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').set('showlegendsunit', true);
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('line1').set('unit', 'MPa');
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Displacement');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'Displacement [mm]');
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg4').feature('lngr1').set('linewidth', 'preference');
model.result('pg4').feature('lngr1').selection.all;
model.result('pg4').feature('lngr1').set('expr', 'w_pipe');
model.result('pg4').feature('lngr1').set('unit', 'mm');
model.result('pg4').feature('lngr1').set('titletype', 'none');
model.result('pg4').feature('lngr1').set('legend', true);
model.result('pg4').feature('lngr1').set('legendmethod', 'manual');
model.result('pg4').feature('lngr1').setIndex('legends', 'Vertical displacement', 0);
model.result('pg4').feature.duplicate('lngr2', 'lngr1');
model.result('pg4').run;
model.result('pg4').feature('lngr2').set('expr', 'u_pipe*pipem.beamsys.e_y1+v_pipe*pipem.beamsys.e_y2');
model.result('pg4').feature('lngr2').setIndex('legends', 'Inward Displacement', 0);
model.result('pg4').run;
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Bending Moment');
model.result('pg5').set('ylabel', 'Moment [N*m]');
model.result('pg5').run;
model.result('pg5').feature('lngr1').set('expr', 'pipem.Myl');
model.result('pg5').feature('lngr1').setIndex('legends', 'Out-of-plane bending moment', 0);
model.result('pg5').feature('lngr1').set('resolution', 'norefine');
model.result('pg5').run;
model.result('pg5').feature('lngr2').set('expr', 'pipem.Mzl');
model.result('pg5').feature('lngr2').setIndex('legends', 'In plane bending moment', 0);
model.result('pg5').feature('lngr2').set('resolution', 'norefine');
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Shear Force');
model.result('pg6').set('ylabel', 'Force [N]');
model.result('pg6').run;
model.result('pg6').feature('lngr1').set('expr', 'pipem.Tzl');
model.result('pg6').feature('lngr1').setIndex('legends', 'Out-of-plane shear force', 0);
model.result('pg6').run;
model.result('pg6').feature('lngr2').set('expr', 'pipem.Tyl');
model.result('pg6').feature('lngr2').setIndex('legends', 'In-plane shear force', 0);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Stress contributions');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Stress [MPa]');
model.result('pg7').set('legendpos', 'middleright');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr1').set('linewidth', 'preference');
model.result('pg7').feature('lngr1').selection.all;
model.result('pg7').feature('lngr1').set('expr', 'pipem.shm');
model.result('pg7').feature('lngr1').set('unit', 'MPa');
model.result('pg7').feature('lngr1').set('titletype', 'none');
model.result('pg7').feature('lngr1').set('legend', true);
model.result('pg7').feature('lngr1').set('legendmethod', 'manual');
model.result('pg7').feature('lngr1').setIndex('legends', 'Hoop stress', 0);
model.result('pg7').feature.duplicate('lngr2', 'lngr1');
model.result('pg7').run;
model.result('pg7').feature('lngr2').set('expr', 'pipem.sn');
model.result('pg7').feature('lngr2').setIndex('legends', 'Axial stress', 0);
model.result('pg7').feature.duplicate('lngr3', 'lngr2');
model.result('pg7').run;
model.result('pg7').feature('lngr3').set('expr', 'pipem.sb1');
model.result('pg7').feature('lngr3').setIndex('legends', 'Bending stress, in-plane', 0);
model.result('pg7').feature.duplicate('lngr4', 'lngr3');
model.result('pg7').run;
model.result('pg7').feature('lngr4').set('expr', 'pipem.sb2');
model.result('pg7').feature('lngr4').setIndex('legends', 'Bending stress, out-of-plane', 0);
model.result('pg7').feature.duplicate('lngr5', 'lngr4');
model.result('pg7').run;
model.result('pg7').feature('lngr5').set('expr', 'sqrt(pipem.txymax^2+pipem.txzmax^2)');
model.result('pg7').feature('lngr5').setIndex('legends', 'Shear stress', 0);
model.result('pg7').feature.duplicate('lngr6', 'lngr5');
model.result('pg7').run;
model.result('pg7').feature('lngr6').set('expr', 'pipem.mises');
model.result('pg7').feature('lngr6').setIndex('legends', 'von Mises stress', 0);
model.result('pg7').run;
model.result('pg3').run;

model.title('Coupled Analysis of Flow and Stress in a Pipe');

model.description('In this tutorial model, the flow in a pipe with a bend is computed using the Pipe Flow interface. The computed fluid flow load is used as input to a stress analysis in the Pipe Mechanics interface. Gravity loads from the pipe and fluid are also taken into account.');

model.label('pipe_flow_stress.mph');

model.modelNode.label('Components');

out = model;
