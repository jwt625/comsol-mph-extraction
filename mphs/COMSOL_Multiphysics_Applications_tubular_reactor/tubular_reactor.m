function out = model
%
% tubular_reactor.m
%
% Model exported on May 26 2025, 21:26 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/COMSOL_Multiphysics/Applications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('tds', 'DilutedSpecies', 'geom1', {'cA'});
model.physics.create('ht', 'HeatTransferInFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics.create('cb', 'CoefficientFormBoundaryPDE', 'geom1', {'Tj'});
model.physics('cb').prop('EquationForm').set('form', 'Automatic');
model.physics('cb').prop('Units').set('DependentVariableQuantity', 'temperature');
model.physics('cb').prop('Units').set('CustomSourceTermUnit', 'W/m');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/tds', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/physics/cb', true);

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', [0.1 1]);
model.geom('geom1').runPre('fin');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('E', '75362[J/mol]', 'Activation energy');
model.param.set('A', '16.96e12[1/h]', 'Frequency factor');
model.param.set('ke', '0.559[W/m/K]', 'Thermal conductivity');
model.param.set('Diff', '1e-9[m^2/s]', 'Diffusion coefficient');
model.param.set('Uk', '1300[W/m^2/K]', 'Overall heat-transfer coefficient');
model.param.set('dHrx', '-84666[J/mol]', 'Heat of reaction');
model.param.set('T0', '312[K]', 'Inlet temperature');
model.param.set('Ta0', '277[K]', 'Inlet temperature of the coolant');
model.param.set('v0', 'v_w0+v_po0+v_m0', 'Total flow rate');
model.param.set('cA0', 'n_po0/v0', 'Propylene oxide concentration, inlet');
model.param.set('cB0', 'n_w0/v0', 'Water concentration, inlet');
model.param.set('cMe0', 'n_m0/v0', 'Methanol concentration, inlet');
model.param.set('Cp0', '(Cp_po*cA0+Cp_m*cMe0+Cp_w*cB0)/rho0', 'Heat capacity at inlet');
model.param.set('rho0', '(cA0*M_po+cB0*M_w+cMe0*M_m)', 'Density at inlet');
model.param.set('Ra', '0.1[m]', 'Reactor radius');
model.param.set('L', '1[m]', 'Reactor length');
model.param.set('M_po', '58.095[g/mol]', 'Molar weight, propylene oxide');
model.param.set('M_m', '32.042[g/mol]', 'Molar weight, methanol');
model.param.set('M_w', '18[g/mol]', 'Molar weight, water');
model.param.set('rho_po_p', '830[kg/m^3]', 'Density, propylene oxide');
model.param.set('rho_m_p', '791.3[kg/m^3]', 'Density, methanol');
model.param.set('rho_w_p', '1000[kg/m^3]', 'Density, water');
model.param.set('Cp_po', '146.54[J/mol/K]', 'Specific heat, po');
model.param.set('Cp_m', '81.095[J/mol/K]', 'Specific heat, m');
model.param.set('Cp_w', '75.36[J/mol/K]', 'Specific heat, w');
model.param.set('Cp_pg', '192.59[J/mol/K]', 'Specific heat, pg');
model.param.set('v_ratio', '3.5', 'Ratio water flow rate / (prop+me) flow rate');
model.param.set('n_po0', '0.1[mol/s]', 'Molar flow rate po in');
model.param.set('n_m0', 'v_po0*rho_m_p/M_m', 'Molar flow rate m in');
model.param.set('v_po0', 'n_po0*M_po/rho_po_p', 'Volumetric flow rate po in');
model.param.set('v_m0', 'v_po0', 'Volumetric flow rate m in');
model.param.set('v_w0', 'v_ratio*(v_po0+v_m0)', 'Volumetric flow rate w in');
model.param.set('n_w0', 'rho_w_p*v_w0/M_w', 'Molar flow rate w in');
model.param.set('Cpc', '4180[J/(kg*K)]', 'Heat capacity, cooling fluid');
model.param.set('mc', '0.1[kg/s]', 'Mass flow rate, cooling fluid');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('u0', 'v0/(pi*Ra^2)', 'Average flow rate');
model.variable('var1').set('uz', '2*u0*(1-(r/Ra)^2)', 'Laminar flow profile');
model.variable('var1').set('xA', '(cA0-cA)/cA0', 'Conversion species A');
model.variable('var1').set('cB', 'cB0-cA0*xA', 'Concentration species B');
model.variable('var1').set('cC', 'cA0*xA', 'Concentration species C');
model.variable('var1').set('rA', '-A*exp(-E/R_const/T)*cA', 'Reaction rate');
model.variable('var1').set('Q', '(-rA)*(-dHrx)', 'Heat production term');
model.variable('var1').set('cpm', '(Cp_po*cA+Cp_m*cMe0+Cp_w*cB)/rho0', 'Mixture specific heat');

model.physics('tds').feature('cdm1').set('u', {'0' '0' 'uz'});
model.physics('tds').feature('cdm1').set('D_cA', {'Diff' '0' '0' '0' 'Diff' '0' '0' '0' 'Diff'});
model.physics('tds').feature('init1').setIndex('initc', 'cA0', 0);
model.physics('tds').create('reac1', 'Reactions', 2);
model.physics('tds').feature('reac1').selection.set([1]);
model.physics('tds').feature('reac1').setIndex('R_cA', 'rA', 0);
model.physics('tds').create('conc1', 'Concentration', 1);
model.physics('tds').feature('conc1').selection.set([2]);
model.physics('tds').feature('conc1').setIndex('species', true, 0);
model.physics('tds').feature('conc1').setIndex('c0', 'cA0', 0);
model.physics('tds').create('out1', 'Outflow', 1);
model.physics('tds').feature('out1').selection.set([3]);
model.physics('ht').feature('fluid1').set('u', {'0' '0' 'uz'});
model.physics('ht').feature('fluid1').set('k_mat', 'userdef');
model.physics('ht').feature('fluid1').set('k', {'ke' '0' '0' '0' 'ke' '0' '0' '0' 'ke'});
model.physics('ht').feature('fluid1').set('fluidType', 'gasLiquid');
model.physics('ht').feature('fluid1').set('rho_mat', 'userdef');
model.physics('ht').feature('fluid1').set('rho', 'rho0');
model.physics('ht').feature('fluid1').set('Cp_mat', 'userdef');
model.physics('ht').feature('fluid1').set('Cp', 'cpm');
model.physics('ht').feature('fluid1').set('gamma_not_IG_mat', 'userdef');
model.physics('ht').feature('init1').set('Tinit', 'T0');
model.physics('ht').create('hs1', 'HeatSource', 2);
model.physics('ht').feature('hs1').selection.set([1]);
model.physics('ht').feature('hs1').set('Q0', 'Q');
model.physics('ht').create('temp1', 'TemperatureBoundary', 1);
model.physics('ht').feature('temp1').selection.set([2]);
model.physics('ht').feature('temp1').set('T0', 'T0');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf1').selection.set([4]);
model.physics('ht').feature('hf1').set('q0_input', '-Uk*(T-Tj)');
model.physics('ht').create('ofl1', 'ConvectiveOutflow', 1);
model.physics('ht').feature('ofl1').selection.set([3]);
model.physics('cb').selection.set([4]);
model.physics('cb').feature('cfeq1').setIndex('c', [0 0 0 0], 0);
model.physics('cb').feature('cfeq1').setIndex('f', '2*pi*Ra*Uk*(T-Tj)', 0);
model.physics('cb').feature('cfeq1').setIndex('be', {'0' 'Cpc*mc'}, 0);
model.physics('cb').create('dir1', 'DirichletBoundary', 0);
model.physics('cb').feature('dir1').selection.set([3]);
model.physics('cb').feature('dir1').setIndex('r', 'Ta0', 0);

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([2 3]);
model.mesh('mesh1').feature('map1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis1').set('elemcount', 50);
model.mesh('mesh1').feature('map1').feature('dis1').set('elemratio', 0.01);
model.mesh('mesh1').feature('map1').feature('dis1').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map1').feature('dis1').set('reverse', true);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([1 4]);
model.mesh('mesh1').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis2').set('elemcount', 200);
model.mesh('mesh1').feature('map1').feature('dis2').set('elemratio', 0.01);
model.mesh('mesh1').feature('map1').feature('dis2').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map1').feature('dis2').set('reverse', true);
model.mesh('mesh1').run;

model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat').setEntry('activate', 'ht', false);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').label('Direct (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, concentrations (tds)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat2');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat2');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 0.001);
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct (Merged)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, concentrations (tds)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').label('Concentration (tds)');
model.result('pg1').set('titletype', 'custom');
model.result('pg1').set('prefixintitle', '');
model.result('pg1').set('expressionintitle', false);
model.result('pg1').set('typeintitle', true);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'cA'});
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').set('expr', {'tds.tflux_cAr' 'tds.tflux_cAz'});
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('recover', 'pprint');
model.result('pg1').feature('str1').set('pointtype', 'arrow');
model.result('pg1').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg1').feature('str1').set('color', 'gray');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'dset1');
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('hasspacevars', false);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'rev1');
model.result('pg2').label('Concentration, 3D (tds)');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'cA'});
model.result('pg2').set('titletype', 'custom');
model.result('pg2').set('typeintitle', false);
model.result('pg2').set('prefixintitle', '');
model.result('pg2').set('expressionintitle', false);
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Temperature (ht)');
model.result('pg3').set('dataisaxisym', 'off');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg3').feature('surf1').set('expr', 'T');
model.result('pg3').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').create('line1', 'Line');
model.result('pg4').label('Coefficient Form Boundary PDE');
model.result('pg4').feature('line1').set('expr', 'Tj');
model.result('pg1').run;
model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').setIndex('genpoints', 'Ra', 1, 0);
model.result.dataset('cln1').set('genparaactive', true);
model.result.dataset('cln1').set('genparadist', '0.5*L 1*L');
model.result.dataset.create('mir1', 'Mirror2D');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').run;
model.result('pg5').label('Temperature (Mirrored)');
model.result('pg5').set('data', 'mir1');
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Temperature Surface');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'Radial location (m)');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Axial location (m)');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', 'T');
model.result('pg5').feature('surf1').set('descr', 'Temperature');
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Conversion');
model.result('pg6').set('title', 'Conversion Surface');
model.result('pg6').run;
model.result('pg6').feature('surf1').set('expr', 'xA');
model.result('pg6').feature('surf1').set('descr', 'Conversion species A');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Temperature, 1D');
model.result('pg7').set('data', 'cln1');
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', 'Radial Temperature Profiles');
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', 'Radial location (m)');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Temperature (K)');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr1').set('linewidth', 'preference');
model.result('pg7').feature('lngr1').set('expr', 'T');
model.result('pg7').feature('lngr1').set('descr', 'Temperature');
model.result('pg7').feature('lngr1').set('linestyle', 'cycle');
model.result('pg7').feature('lngr1').set('linecolor', 'black');
model.result('pg7').feature('lngr1').set('legend', true);
model.result('pg7').feature('lngr1').set('legendmethod', 'manual');
model.result('pg7').feature('lngr1').setIndex('legends', 'Inlet', 0);
model.result('pg7').feature('lngr1').setIndex('legends', 'Half axial location', 1);
model.result('pg7').feature('lngr1').setIndex('legends', 'Outlet', 2);
model.result('pg7').run;
model.result('pg7').set('legendpos', 'lowerleft');
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('Conversion, 1D');
model.result('pg8').set('ylabel', 'Conversion');
model.result('pg8').run;
model.result('pg8').feature('lngr1').set('expr', 'xA');
model.result('pg8').feature('lngr1').set('descr', 'Conversion species A');
model.result('pg8').run;
model.result('pg8').set('legendpos', 'upperleft');
model.result('pg8').run;
model.result('pg4').run;
model.result('pg4').label('Temperature Cooling Jacket');
model.result('pg4').run;
model.result('pg4').feature('line1').set('linetype', 'tube');
model.result('pg4').feature('line1').set('radiusexpr', '3');
model.result('pg4').run;
model.result('pg2').run;
model.result('pg2').run;

model.title('Tubular Reactor with Nonisothermal Cooling Jacket');

model.description(['This example describes a tubular reactor where propylene oxide (A) reacts with water (B) to form propylene glycol (C): ' newline  newline 'A + B -> C' newline  newline 'Since water is the solvent and present in abundance, the reaction kinetics may be described as first order with respect to propylene oxide' newline  newline 'R = k*C_A' newline  newline 'Alternatively, a second-order reaction can also be implemented according to' newline  newline 'R = kf*C_A*C_B - kr*C_C' newline  newline 'The reaction is exothermic and a cooling jacket is used to cool the reactor. The reactor is modeled in 2D axisymmetry and the simulation results yield composition and temperature variations in both the radial and axial directions.']);

model.label('tubular_reactor.mph');

model.result('pg2').run;

model.setExpectedComputationTime('5 seconds');

model.result('pg8').run;
model.result('pg8').set('title', 'Radial Conversion Profiles');
model.result.report.create('rpt1', 'Report');
model.result.report('rpt1').set('templatesource', 'brief');
model.result.report('rpt1').set('format', 'docx');
model.result.report('rpt1').set('filename', 'user:///tubular.docx');
model.result.report('rpt1').set('pagebreaklevel', '2');
model.result.report('rpt1').set('enumlevel', 'none');
model.result.report('rpt1').set('imagesize', 'large');
model.result.report('rpt1').feature.create('tp1', 'TitlePage');
model.result.report('rpt1').feature('tp1').label('Tubular Reactor with Jacket');
model.result.report('rpt1').feature('tp1').set('includeauthor', false);
model.result.report('rpt1').feature('tp1').set('includecompany', false);
model.result.report('rpt1').feature('tp1').set('includeversion', false);
model.result.report('rpt1').feature('tp1').set('reportdate', 'none');
model.result.report('rpt1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').label('Software Information');
model.result.report('rpt1').feature('sec1').feature.create('root1', 'Model');
model.result.report('rpt1').feature('sec1').feature('root1').label('About the Software');
model.result.report('rpt1').feature('sec1').feature('root1').set('includeunitsystem', true);
model.result.report('rpt1').feature('sec1').feature.create('std1', 'Study');
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').label('Model Parameters');
model.result.report('rpt1').feature('sec2').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('param1').label('Parameters in the Embedded Model');
model.result.report('rpt1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').label('Results');
model.result.report('rpt1').feature('sec3').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('pg1').label('Temperature Surface');
model.result.report('rpt1').feature('sec3').feature('pg1').set('noderef', 'pg5');
model.result.report('rpt1').feature('sec3').feature.create('pg2', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('pg2').label('Conversion Surface');
model.result.report('rpt1').feature('sec3').feature('pg2').set('noderef', 'pg6');
model.result.report('rpt1').feature('sec3').feature.create('pg3', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('pg3').label('Temperature Profile');
model.result.report('rpt1').feature('sec3').feature('pg3').set('noderef', 'pg7');
model.result.report('rpt1').feature('sec3').feature.create('pg4', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('pg4').label('Conversion Profile');
model.result.report('rpt1').feature('sec3').feature('pg4').set('noderef', 'pg8');

model.title('Tubular Reactor with Jacket');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Emailing a report when the computation is finished' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' User-defined email server settings' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Playing a sound when the computation is completed' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Options to visualize plots tiled or tabbed' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Localization of the app' newline  newline 'The app exemplifies how students in chemical engineering can model nonideal tubular reactors (radial and axial variations) and investigate the impact of different operating conditions. It is also a great example of how teachers can build tailored interfaces for problems that challenge the students'' imaginations.' newline  newline 'The model describes a tubular reactor where propylene oxide (A) reacts with water (B) to form propylene glycol (C):' newline  newline 'A + B -> C' newline  newline 'Since water is the solvent and present in abundance, the reaction kinetics may be described as first order with respect to propylene oxide' newline  newline 'R = k*C_A' newline  newline 'Alternatively, a second-order reaction can also be implemented according to' newline  newline 'R = kf*C_A*C_B - kr*C_C' newline  newline 'The reaction is exothermic and a cooling jacket is used to cool the reactor. The reactor is modeled in 2D axisymmetry and the simulation results yield composition and temperature variations in both the radial and axial directions.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('tubular_reactor.mph');

model.modelNode.label('Components');

out = model;
