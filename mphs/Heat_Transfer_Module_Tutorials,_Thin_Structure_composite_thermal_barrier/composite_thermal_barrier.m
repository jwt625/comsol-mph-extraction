function out = model
%
% composite_thermal_barrier.m
%
% Model exported on May 26 2025, 21:29 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Tutorials,_Thin_Structure');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);

model.param.set('d_ceram1', '50[um]');
model.param.descr('d_ceram1', 'Thickness of layer 1');
model.param.set('d_ceram2', '75[um]');
model.param.descr('d_ceram2', 'Thickness of layer 2');
model.param.set('T_hot', '1220[degC]');
model.param.descr('T_hot', 'Hot temperature');

model.geom('geom1').lengthUnit('cm');
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').set('r', 2);
model.geom('geom1').feature('cyl1').set('h', 4);
model.geom('geom1').run('fin');
model.geom('geom1').run('cyl1');
model.geom('geom1').create('cyl2', 'Cylinder');
model.geom('geom1').feature('cyl2').set('r', 2);
model.geom('geom1').feature('cyl2').set('h', 'd_ceram1');
model.geom('geom1').feature('cyl2').set('pos', {'0' '0' '2-(d_ceram1+d_ceram2)/2'});
model.geom('geom1').run('fin');
model.geom('geom1').run('cyl2');
model.geom('geom1').create('cyl3', 'Cylinder');
model.geom('geom1').feature('cyl3').set('r', 2);
model.geom('geom1').feature('cyl3').set('h', 'd_ceram2');
model.geom('geom1').feature('cyl3').set('pos', {'0' '0' '2-(d_ceram1+d_ceram2)/2+d_ceram1'});
model.geom('geom1').run('fin');
model.geom('geom1').run('cyl3');
model.geom('geom1').create('ls1', 'LineSegment');
model.geom('geom1').feature('ls1').set('specify1', 'coord');
model.geom('geom1').feature('ls1').set('coord1', [0 -2 4]);
model.geom('geom1').feature('ls1').set('specify2', 'coord');
model.geom('geom1').feature('ls1').set('coord2', [0 2 4]);
model.geom('geom1').runPre('fin');

model.cpl.create('intop1', 'Integration', 'geom1');

model.geom('geom1').run;

model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.set([2 3]);
model.cpl('intop1').set('opname', 'intopBarrier');
model.cpl('intop1').label('Integration : Barrier');
model.cpl.duplicate('intop2', 'intop1');
model.cpl('intop2').selection.set([2]);
model.cpl('intop2').label('Integration : Layer 1');
model.cpl('intop2').set('opname', 'intopLayer1');
model.cpl.duplicate('intop3', 'intop1');
model.cpl('intop3').selection.set([3]);
model.cpl('intop3').label('Integration : Layer 2');
model.cpl('intop3').set('opname', 'intopLayer2');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('vol_barrier', 'intopBarrier(1)');
model.variable('var1').descr('vol_barrier', 'Volume of barrier');
model.variable('var1').set('vol_layer1', 'intopLayer1(1)');
model.variable('var1').descr('vol_layer1', 'Volume of layer 1');
model.variable('var1').set('vol_layer2', 'intopLayer2(1)');
model.variable('var1').descr('vol_layer2', 'Volume of layer 2');
model.variable('var1').set('T_int_barrier', 'intopBarrier(T)');
model.variable('var1').descr('T_int_barrier', 'Integral of temperature in thermal barrier');
model.variable('var1').set('T_int_layer1', 'intopLayer1(T)');
model.variable('var1').descr('T_int_layer1', 'Integral of temperature in layer 1');
model.variable('var1').set('T_int_layer2', 'intopLayer2(T)');
model.variable('var1').descr('T_int_layer2', 'Integral of temperature in layer 2');
model.variable('var1').set('T_ave_barrier', 'intopBarrier(T)/intopBarrier(1)');
model.variable('var1').descr('T_ave_barrier', 'Average of temperature in thermal barrier');
model.variable('var1').set('T_ave_layer1', 'intopLayer1(T)/intopLayer1(1)');
model.variable('var1').descr('T_ave_layer1', 'Average of temperature in layer 1');
model.variable('var1').set('T_ave_layer2', 'intopLayer2(T)/intopLayer2(1)');
model.variable('var1').descr('T_ave_layer2', 'Average of temperature in layer 2');
model.variable('var1').label('Variables: temperature in thermal barrier');

model.material.create('matlnk1', 'Link', 'comp1');
model.material.create('mat1', 'Common', '');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').label('Steel AISI 4340');
model.material('mat1').set('family', 'steel');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.28');
model.material('matlnk1').set('link', 'mat1');
model.material.create('matlnk2', 'Link', 'comp1');
model.material('matlnk2').selection.set([2]);
model.material.create('mat2', 'Common', '');
model.material('matlnk2').set('link', 'mat2');
model.material('mat2').label('Ceramic 1');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'1'});
model.material('mat2').propertyGroup('def').set('density', {'6000'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'320'});
model.material.create('matlnk3', 'Link', 'comp1');
model.material('matlnk3').selection.set([3]);
model.material.create('mat3', 'Common', '');
model.material('matlnk3').set('link', 'mat3');
model.material('mat3').label('Ceramic 2');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'0.5'});
model.material('mat3').propertyGroup('def').set('density', {'5800'});
model.material('mat3').propertyGroup('def').set('heatcapacity', {'280'});

model.physics('ht').create('temp1', 'TemperatureBoundary', 2);
model.physics('ht').feature('temp1').selection.set([3]);
model.physics('ht').create('temp2', 'TemperatureBoundary', 2);
model.physics('ht').feature('temp2').selection.set([13]);
model.physics('ht').feature('temp2').set('T0', 'T_hot');

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.set([13 18]);
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.set([2 3]);
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 2);
model.mesh('mesh1').run;

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Temperature (ht)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg1').feature.create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('solutionparams', 'parent');
model.result('pg1').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('vol1').set('smooth', 'internal');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').label('Temperature, 3D Approach');
model.result('pg1').run;
model.result('pg1').feature('vol1').set('unit', 'degC');
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Temperature Profile');
model.result('pg2').set('xlabelactive', true);
model.result('pg2').set('xlabel', 'Height (cm)');
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Temperature Profile');
model.result('pg2').set('legendpos', 'upperleft');
model.result('pg2').create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg2').feature('lngr1').set('linewidth', 'preference');
model.result('pg2').feature('lngr1').selection.set([15 17 19 21]);
model.result('pg2').feature('lngr1').set('unit', 'degC');
model.result('pg2').feature('lngr1').set('xdata', 'expr');
model.result('pg2').feature('lngr1').set('xdataexpr', 'z');
model.result('pg2').feature('lngr1').set('linewidth', 2);
model.result('pg2').feature('lngr1').set('legend', true);
model.result('pg2').feature('lngr1').set('legendmethod', 'manual');
model.result('pg2').feature('lngr1').setIndex('legends', 'Temperature, 3D approach', 0);
model.result('pg2').run;

model.modelNode.create('comp2', true);

model.geom.create('geom2', 3);
model.geom('geom2').model('comp2');

model.mesh.create('mesh2', 'geom2');

model.physics.create('ht2', 'HeatTransfer', 'geom2');
model.physics('ht2').model('comp2');

model.study('std1').feature('stat').setSolveFor('/physics/ht2', false);

model.geom('geom2').run;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/ht', false);
model.study('std2').feature('stat').setSolveFor('/physics/ht2', true);

model.geom('geom2').lengthUnit('cm');
model.geom('geom2').create('cyl1', 'Cylinder');
model.geom('geom2').feature('cyl1').set('r', 2);
model.geom('geom2').feature('cyl1').set('h', 4);
model.geom('geom2').feature('cyl1').setIndex('layername', 'Layer 1', 0);
model.geom('geom2').feature('cyl1').setIndex('layer', 2, 0);
model.geom('geom2').feature('cyl1').set('layerside', false);
model.geom('geom2').feature('cyl1').set('layerbottom', true);
model.geom('geom2').run('fin');
model.geom('geom2').run('cyl1');
model.geom('geom2').create('ls1', 'LineSegment');
model.geom('geom2').feature('ls1').set('specify1', 'coord');
model.geom('geom2').feature('ls1').set('coord1', [0 -2 4]);
model.geom('geom2').feature('ls1').set('specify2', 'coord');
model.geom('geom2').feature('ls1').set('coord2', [0 2 4]);
model.geom('geom2').run('fin');

model.view('view2').set('transparency', false);

model.cpl.create('intop4', 'Integration', 'geom2');
model.cpl('intop4').set('axisym', true);
model.cpl('intop4').label('Integration : Boundary');
model.cpl('intop4').set('opname', 'intopBnd');
model.cpl('intop4').selection.geom('geom2', 2);
model.cpl('intop4').selection.set([6]);

model.variable.create('var2');
model.variable('var2').model('comp2');
model.variable('var2').set('isLayer1', 'llmat1_xdim.atonly(dom==1)');
model.variable('var2').descr('isLayer1', 'Layer 1 identifier (=1 in layer 1, 0 elsewhere)');
model.variable('var2').set('isLayer2', 'llmat1_xdim.atonly(dom==2)');
model.variable('var2').descr('isLayer2', 'Layer 2 identifier (=1 in layer 2, 0 elsewhere)');
model.variable('var2').set('vol_barrier', 'intopBnd(ht2.sls2.xdintopall(1))', 'Volume of barrier');
model.variable('var2').descr('vol_barrier', 'Volume of thermal barrier');
model.variable('var2').set('vol_layer1', 'intopBnd(ht2.sls2.xdintopall(isLayer1))', 'Volume of layer 1');
model.variable('var2').descr('vol_layer1', 'Volume of layer 1');
model.variable('var2').set('vol_layer2', 'intopBnd(ht2.sls2.xdintopall(isLayer2))', 'Volume of layer 2');
model.variable('var2').descr('vol_layer2', 'Volume of layer 2');
model.variable('var2').set('T_int_barrier', 'intopBnd(ht2.sls2.xdintopall(T2))', 'Integral of temperature in thermal barrier');
model.variable('var2').descr('T_int_barrier', 'Integral of temperature in thermal barrier');
model.variable('var2').set('T_int_layer1', 'intopBnd(ht2.sls2.xdintopall(T2*isLayer1))', 'Integral of temperature in layer 1');
model.variable('var2').descr('T_int_layer1', 'Integral of temperature in layer 1');
model.variable('var2').set('T_int_layer2', 'intopBnd(ht2.sls2.xdintopall(T2*isLayer2))', 'Integral of temperature in layer 2');
model.variable('var2').descr('T_int_layer2', 'Integral of temperature in layer 2');
model.variable('var2').set('T_ave_barrier', 'T_int_barrier/vol_barrier', 'Average of temperature in thermal barrier');
model.variable('var2').descr('T_ave_barrier', 'Average of temperature in thermal barrier');
model.variable('var2').set('T_ave_layer1', 'T_int_layer1/vol_layer1', 'Average of temperature in layer 1');
model.variable('var2').descr('T_ave_layer1', 'Average of temperature in layer 1');
model.variable('var2').set('T_ave_layer2', 'T_int_layer2/vol_layer2', 'Average of temperature in layer 2');
model.variable('var2').descr('T_ave_layer2', 'Average of temperature in layer 2');
model.variable('var2').label('Variables: temperature in thermal barrier');

model.material.create('matlnk4', 'Link', 'comp2');
model.material.create('lmat1', 'LayeredMaterial', '');
model.material('lmat1').setIndex('link', 'mat2', 0);
model.material('lmat1').setIndex('thickness', 'd_ceram1', 0);
model.material('lmat1').setIndex('layername', 'Layer 2', 1);
model.material('lmat1').setIndex('link', 'mat2', 1);
model.material('lmat1').setIndex('rotation', '0.0', 1);
model.material('lmat1').setIndex('thickness', 'd_ceram1', 1);
model.material('lmat1').setIndex('meshPoints', 2, 1);
model.material('lmat1').setIndex('tag', 'lmat1_2', 1);
model.material('lmat1').setIndex('layername', 'Layer 2', 1);
model.material('lmat1').setIndex('link', 'mat2', 1);
model.material('lmat1').setIndex('rotation', '0.0', 1);
model.material('lmat1').setIndex('thickness', 'd_ceram1', 1);
model.material('lmat1').setIndex('meshPoints', 2, 1);
model.material('lmat1').setIndex('tag', 'lmat1_2', 1);
model.material('lmat1').setIndex('link', 'mat3', 1);
model.material('lmat1').setIndex('thickness', 'd_ceram2', 1);
model.material.create('llmat1', 'LayeredMaterialLink', 'comp2');
model.material('llmat1').selection.set([6]);

model.physics('ht2').create('sls1', 'SolidLayeredShell', 2);
model.physics('ht2').feature('sls1').selection.set([6]);
model.physics('ht2').create('sls2', 'SolidLayeredShell', 2);
model.physics('ht2').feature('sls2').selection.set([6]);
model.physics('ht2').feature('sls2').set('LayerType', 'General');
model.physics('ht2').create('temp1', 'TemperatureBoundary', 2);
model.physics('ht2').feature('temp1').selection.set([3]);
model.physics('ht2').create('temp2', 'TemperatureBoundary', 2);
model.physics('ht2').feature('temp2').selection.set([7]);
model.physics('ht2').feature('temp2').set('T0', 'T_hot');

model.study('std2').feature('stat').set('useadvanceddisable', true);
model.study('std2').feature('stat').set('disabledphysics', {'ht2/sls2'});

model.mesh('mesh2').create('ftri1', 'FreeTri');
model.mesh('mesh2').feature('ftri1').selection.set([7 10]);
model.mesh('mesh2').run('ftri1');
model.mesh('mesh2').create('swe1', 'Sweep');
model.mesh('mesh2').run;

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('d1').label('Direct, heat transfer variables (ht2)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol2').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('s1').feature('i1').label('AMG, heat transfer variables (ht2)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.dataset.create('lshl1', 'LayeredMaterial');
model.result.dataset('lshl1').set('data', 'dset3');
model.result.dataset('lshl1').selection.geom('geom2', 2);
model.result.dataset('lshl1').selection.set([6]);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Temperature (ht2)');
model.result('pg3').set('data', 'dset3');
model.result('pg3').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond2/pcond1/pg1');
model.result('pg3').selection.geom('geom2', 3);
model.result('pg3').selection.set([1 2]);
model.result('pg3').feature.create('vol1', 'Volume');
model.result('pg3').feature('vol1').label('Domain');
model.result('pg3').feature('vol1').set('showsolutionparams', 'on');
model.result('pg3').feature('vol1').set('solutionparams', 'parent');
model.result('pg3').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg3').feature('vol1').set('smooth', 'internal');
model.result('pg3').feature('vol1').set('showsolutionparams', 'on');
model.result('pg3').feature('vol1').set('data', 'parent');
model.result('pg3').feature.create('vol2', 'Volume');
model.result('pg3').feature('vol2').label('Layered Shell');
model.result('pg3').feature('vol2').set('data', 'lshl1');
model.result('pg3').feature('vol2').set('showsolutionparams', 'on');
model.result('pg3').feature('vol2').set('solutionparams', 'parent');
model.result('pg3').feature('vol2').set('titletype', 'none');
model.result('pg3').feature('vol2').set('smooth', 'internal');
model.result('pg3').feature('vol2').set('showsolutionparams', 'on');
model.result('pg3').feature('vol2').set('data', 'lshl1');
model.result('pg3').feature('vol2').set('inheritplot', 'vol1');
model.result('pg3').feature.create('line1', 'Line');
model.result('pg3').feature('line1').label('Layered Shell Edges');
model.result('pg3').feature('line1').set('data', 'lshl1');
model.result('pg3').feature('line1').set('showsolutionparams', 'on');
model.result('pg3').feature('line1').set('solutionparams', 'parent');
model.result('pg3').feature('line1').set('expr', '1');
model.result('pg3').feature('line1').set('titletype', 'none');
model.result('pg3').feature('line1').set('coloring', 'uniform');
model.result('pg3').feature('line1').set('color', 'fromtheme');
model.result('pg3').feature('line1').set('smooth', 'internal');
model.result('pg3').feature('line1').set('showsolutionparams', 'on');
model.result('pg3').feature('line1').set('data', 'lshl1');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('vol1').set('unit', 'degC');
model.result('pg3').run;
model.result('pg3').feature('vol2').set('unit', 'degC');
model.result('pg2').run;
model.result('pg2').create('lngr2', 'LineGraph');
model.result('pg2').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg2').feature('lngr2').set('linewidth', 'preference');
model.result('pg2').feature('lngr2').set('data', 'dset3');
model.result('pg2').feature('lngr2').selection.set([9 11]);
model.result('pg2').feature('lngr2').set('expr', 'T2');
model.result('pg2').feature('lngr2').set('descr', 'Temperature');
model.result('pg2').feature('lngr2').set('unit', 'degC');
model.result('pg2').feature('lngr2').set('xdata', 'expr');
model.result('pg2').feature('lngr2').set('xdataexpr', 'z');
model.result('pg2').feature('lngr2').set('linestyle', 'none');
model.result('pg2').feature('lngr2').set('linecolor', 'magenta');
model.result('pg2').feature('lngr2').set('linemarker', 'cycle');
model.result('pg2').feature('lngr2').set('markerpos', 'interp');
model.result('pg2').feature('lngr2').set('markers', 15);
model.result('pg2').feature('lngr2').set('legend', true);
model.result('pg2').feature('lngr2').set('legendmethod', 'manual');
model.result('pg2').feature('lngr2').setIndex('legends', 'Temperature, 2D Approach', 0);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').label('Temperature, 2D Approach');

model.study.create('std3');
model.study('std3').create('stat', 'Stationary');
model.study('std3').feature('stat').setSolveFor('/physics/ht', false);
model.study('std3').feature('stat').setSolveFor('/physics/ht2', true);
model.study('std3').feature('stat').set('useadvanceddisable', true);
model.study('std3').feature('stat').set('disabledphysics', {'ht2/sls1'});

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'stat');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'stat');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol3').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol3').feature('s1').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('s1').feature('d1').label('Direct, heat transfer variables (ht2)');
model.sol('sol3').feature('s1').create('i1', 'Iterative');
model.sol('sol3').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol3').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol3').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol3').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol3').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol3').feature('s1').feature('i1').label('AMG, heat transfer variables (ht2)');
model.sol('sol3').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol3').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.dataset.create('lshl2', 'LayeredMaterial');
model.result.dataset('lshl2').set('data', 'dset5');
model.result.dataset('lshl2').selection.geom('geom2', 2);
model.result.dataset('lshl2').selection.set([6]);
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Temperature (ht2)');
model.result('pg4').set('data', 'dset5');
model.result('pg4').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond2/pcond1/pg1');
model.result('pg4').selection.geom('geom2', 3);
model.result('pg4').selection.set([1 2]);
model.result('pg4').feature.create('vol1', 'Volume');
model.result('pg4').feature('vol1').label('Domain');
model.result('pg4').feature('vol1').set('showsolutionparams', 'on');
model.result('pg4').feature('vol1').set('solutionparams', 'parent');
model.result('pg4').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg4').feature('vol1').set('smooth', 'internal');
model.result('pg4').feature('vol1').set('showsolutionparams', 'on');
model.result('pg4').feature('vol1').set('data', 'parent');
model.result('pg4').feature.create('vol2', 'Volume');
model.result('pg4').feature('vol2').label('Layered Shell');
model.result('pg4').feature('vol2').set('data', 'lshl2');
model.result('pg4').feature('vol2').set('showsolutionparams', 'on');
model.result('pg4').feature('vol2').set('solutionparams', 'parent');
model.result('pg4').feature('vol2').set('titletype', 'none');
model.result('pg4').feature('vol2').set('smooth', 'internal');
model.result('pg4').feature('vol2').set('showsolutionparams', 'on');
model.result('pg4').feature('vol2').set('data', 'lshl2');
model.result('pg4').feature('vol2').set('inheritplot', 'vol1');
model.result('pg4').feature.create('line1', 'Line');
model.result('pg4').feature('line1').label('Layered Shell Edges');
model.result('pg4').feature('line1').set('data', 'lshl2');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('solutionparams', 'parent');
model.result('pg4').feature('line1').set('expr', '1');
model.result('pg4').feature('line1').set('titletype', 'none');
model.result('pg4').feature('line1').set('coloring', 'uniform');
model.result('pg4').feature('line1').set('color', 'fromtheme');
model.result('pg4').feature('line1').set('smooth', 'internal');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('data', 'lshl2');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').feature('vol1').set('unit', 'degC');
model.result('pg4').run;
model.result('pg4').feature('vol2').set('unit', 'degC');
model.result('pg2').run;
model.result('pg2').create('lngr3', 'LineGraph');
model.result('pg2').feature('lngr3').set('markerpos', 'datapoints');
model.result('pg2').feature('lngr3').set('linewidth', 'preference');
model.result('pg2').feature('lngr3').set('data', 'dset5');
model.result('pg2').feature('lngr3').selection.set([9 11]);
model.result('pg2').feature('lngr3').set('expr', 'T2');
model.result('pg2').feature('lngr3').set('unit', 'degC');
model.result('pg2').feature('lngr3').set('xdata', 'expr');
model.result('pg2').feature('lngr3').set('xdataexpr', 'z');
model.result('pg2').feature('lngr3').set('linestyle', 'none');
model.result('pg2').feature('lngr3').set('linecolor', 'fromtheme');
model.result('pg2').feature('lngr3').set('linewidth', 2);
model.result('pg2').feature('lngr3').set('linemarker', 'triangle');
model.result('pg2').feature('lngr3').set('markerpos', 'interp');
model.result('pg2').feature('lngr3').set('markers', 20);
model.result('pg2').feature('lngr3').set('legend', true);
model.result('pg2').feature('lngr3').set('legendmethod', 'manual');
model.result('pg2').feature('lngr3').setIndex('legends', 'Temperature, 2D with extra dimension approach', 0);
model.result('pg2').run;
model.result('pg4').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').placeAfter('plotgroup', 'pg3');
model.nodeGroup('grp1').add('plotgroup', 'pg4');
model.nodeGroup('grp1').label('2D With Extra Dimension Approach');

model.result('pg2').run;

model.nodeGroup.create('grp2', 'Results');
model.nodeGroup('grp2').set('type', 'plotgroup');
model.nodeGroup('grp2').placeAfter('plotgroup', 'pg1');
model.nodeGroup('grp2').add('plotgroup', 'pg2');
model.nodeGroup('grp2').label('Comparison of the Different Approaches');

model.result.create('pg5', 'PlotGroup3D');

model.nodeGroup('grp1').add('plotgroup', 'pg5');

model.result('pg5').run;
model.result('pg5').label('Temperature (Layers Surface)');
model.result('pg5').set('data', 'lshl2');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('unit', 'degC');
model.result('pg5').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg5').run;
model.result.dataset('lshl2').set('scale', 20);
model.result('pg5').run;
model.result('pg5').set('view', 'new');
model.result.create('pg6', 'PlotGroup3D');

model.nodeGroup('grp1').add('plotgroup', 'pg6');

model.result('pg6').run;
model.result('pg6').label('Temperature (Slices)');
model.result('pg6').set('data', 'dset5');
model.result('pg6').set('edges', false);
model.result('pg6').set('view', 'new');
model.result('pg6').create('lss1', 'LayeredMaterialSlice');
model.result('pg6').feature('lss1').set('unit', 'degC');
model.result('pg6').feature('lss1').set('locdef', 'interfaces');
model.result('pg6').feature('lss1').set('slicedisplacement', 'linear');
model.result('pg6').feature('lss1').set('orientationlinear', 'x');
model.result('pg6').feature('lss1').set('xseparation', 0.25);
model.result('pg6').feature('lss1').set('showdescriptions', true);
model.result('pg6').feature('lss1').set('descriptionseparation', 1);
model.result('pg6').feature('lss1').set('colortable', 'HeatCameraLight');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');

model.nodeGroup('grp2').add('plotgroup', 'pg7');

model.result('pg7').run;
model.result('pg7').label('Temperature (Through Thickness)');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr1').set('linewidth', 'preference');
model.result('pg7').feature('lngr1').selection.set([4 7]);
model.result('pg7').feature('lngr1').set('expr', 'z-(2[cm]-(d_ceram1+d_ceram2)/2)');
model.result('pg7').feature('lngr1').set('unit', 'm');
model.result('pg7').feature('lngr1').set('xdata', 'expr');
model.result('pg7').feature('lngr1').set('xdataunit', 'degC');
model.result('pg7').run;
model.result('pg7').create('thr1', 'ThroughThickness');
model.result('pg7').feature('thr1').set('markerpos', 'datapoints');
model.result('pg7').feature('thr1').set('linewidth', 'preference');
model.result('pg7').feature('thr1').set('data', 'dset5');
model.result('pg7').feature('thr1').selection.set([2]);
model.result('pg7').feature('thr1').set('expr', 'T2');
model.result('pg7').feature('thr1').set('unit', 'degC');
model.result('pg7').feature('thr1').set('linestyle', 'none');
model.result('pg7').feature('thr1').set('linemarker', 'cycle');
model.result('pg7').feature('thr1').set('markerpos', 'interp');
model.result('pg7').feature('thr1').set('includeinterfaces', 'all');
model.result('pg7').run;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').set('expr', {'T_ave_barrier'});
model.result.numerical('gev1').set('descr', {'Average of temperature in thermal barrier'});
model.result.numerical('gev1').set('unit', {'K'});
model.result.numerical('gev1').set('expr', {'T_ave_barrier' 'T_ave_layer1'});
model.result.numerical('gev1').set('descr', {'Average of temperature in thermal barrier' 'Average of temperature in layer 1'});
model.result.numerical('gev1').set('expr', {'T_ave_barrier' 'T_ave_layer1' 'T_ave_layer2'});
model.result.numerical('gev1').set('descr', {'Average of temperature in thermal barrier' 'Average of temperature in layer 1' 'Average of temperature in layer 2'});
model.result.numerical('gev1').setIndex('unit', 'degC', 0);
model.result.numerical('gev1').setIndex('unit', 'degC', 1);
model.result.numerical('gev1').setIndex('unit', 'degC', 2);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Global Evaluation 1');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').set('data', 'dset5');
model.result.numerical('gev2').set('expr', {'T_ave_barrier'});
model.result.numerical('gev2').set('descr', {'Average of temperature in thermal barrier'});
model.result.numerical('gev2').set('unit', {'K'});
model.result.numerical('gev2').set('expr', {'T_ave_barrier' 'T_ave_layer1'});
model.result.numerical('gev2').set('descr', {'Average of temperature in thermal barrier' 'Average of temperature in layer 1'});
model.result.numerical('gev2').set('expr', {'T_ave_barrier' 'T_ave_layer1' 'T_ave_layer2'});
model.result.numerical('gev2').set('descr', {'Average of temperature in thermal barrier' 'Average of temperature in layer 1' 'Average of temperature in layer 2'});
model.result.numerical('gev2').setIndex('unit', 'degC', 0);
model.result.numerical('gev2').setIndex('unit', 'degC', 1);
model.result.numerical('gev2').setIndex('unit', 'degC', 2);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Global Evaluation 2');
model.result.numerical('gev2').set('table', 'tbl2');
model.result.numerical('gev2').setResult;
model.result('pg1').run;

model.title('Composite Thermal Barrier');

model.description(['This example shows how to set up multiple sandwiched thin layers with different thermal conductivities in two different ways.' newline 'First, the composite is modeled as a 3D object. ' newline 'In the second approach the Thin Layer boundary condition is used to avoid resolving the thin domains.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('composite_thermal_barrier.mph');

model.modelNode.label('Components');

out = model;
