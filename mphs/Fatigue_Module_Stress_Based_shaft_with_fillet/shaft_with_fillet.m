function out = model
%
% shaft_with_fillet.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fatigue_Module/Stress_Based');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').geom.create('pol1', 'Polygon');
model.geom('geom1').feature('wp1').geom.feature('pol1').set('source', 'vectors');
model.geom('geom1').feature('wp1').geom.feature('pol1').set('x', '0 0 32 32 50 50 0');
model.geom('geom1').feature('wp1').geom.feature('pol1').set('y', '0 5 5 8 8 0 0');
model.geom('geom1').feature('wp1').geom.run('pol1');
model.geom('geom1').feature('wp1').geom.create('fil1', 'Fillet');
model.geom('geom1').feature('wp1').geom.feature('fil1').selection('pointinsketch').set('pol1', 3);
model.geom('geom1').feature('wp1').geom.feature('fil1').set('radius', 2);
model.geom('geom1').feature('wp1').geom.run('fil1');
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('rev1', 'Revolve');
model.geom('geom1').feature('rev1').set('angtype', 'full');
model.geom('geom1').feature('rev1').set('origfaces', false);
model.geom('geom1').feature('rev1').set('axis', [1 0]);
model.geom('geom1').run('rev1');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Selection for fatigue evaluation');
model.selection('sel1').geom(2);
model.selection('sel1').set('groupcontang', true);
model.selection('sel1').add([4 16]);

model.physics('solid').create('tl1', 'ThinLayer', 2);
model.physics('solid').feature('tl1').selection.named('sel1');
model.physics('solid').feature('tl1').set('lth', '1e-6[m]');
model.physics('solid').feature('tl1').set('thicknessApproximation', 'membrane');
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.set([21 22 23 24]);
model.physics('solid').create('rig1', 'RigidConnector', 2);
model.physics('solid').feature('rig1').selection.set([1 3 5 7]);
model.physics('solid').feature('rig1').create('rf1', 'RigidBodyForce', -1);
model.physics('solid').feature('rig1').feature('rf1').set('Ft', {'0' '0' '-1.94[kN]'});

model.group.create('lg1', 'LoadGroup');

model.physics('solid').feature('rig1').feature('rf1').set('loadGroup', 'lg1');
model.physics('solid').feature('rig1').create('rm1', 'RigidBodyMoment', -1);
model.physics('solid').feature('rig1').feature('rm1').set('Mt', {'28.7[N*m]' '0' '0'});

model.group.create('lg2', 'LoadGroup');

model.physics('solid').feature('rig1').feature('rm1').set('loadGroup', 'lg2');

model.group('lg1').label('Transverse force');
model.group('lg1').paramName('lgF');
model.group('lg2').label('Twisting moment');
model.group('lg2').paramName('lgM');

model.material.create('mat1', 'Common', '');
model.material.create('matlnk1', 'Link', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat1').propertyGroup('Enu').set('E', {'100[GPa]'});
model.material('mat1').propertyGroup('Enu').set('nu', {'0'});
model.material('mat1').propertyGroup('def').set('density', {'0'});
model.material.create('matlnk2', 'Link', 'comp1');
model.material('matlnk2').selection.geom('geom1', 2);
model.material('matlnk2').selection.named('sel1');

model.mesh('mesh1').autoMeshSize(4);
model.mesh('mesh1').run;
model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').set('hauto', 3);
model.mesh('mesh1').feature('ftet1').create('size2', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size2').selection.geom('geom1', 1);
model.mesh('mesh1').feature('ftet1').feature('size2').selection.set([13 14 16 18]);
model.mesh('mesh1').feature('ftet1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hmax', 0.5);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hgradactive', true);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hgrad', 1.2);
model.mesh('mesh1').run;

model.study('std1').feature('stat').set('useloadcase', true);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Transverse force', 0);
model.study('std1').feature('stat').setIndex('loadgroup', true, 0, 0);
model.study('std1').feature('stat').setIndex('loadcase', 'Twisting moment', 1);
model.study('std1').feature('stat').setIndex('loadgroup', true, 1, 1);
model.study('std1').label('Study 1 (Basic load cases)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_solid_unn').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_unn').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_solid_unn').set('scaleval', '0.001');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_disp').set('scaleval', '5.488169093604898E-4');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_rot').set('scaleval', '0.01');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.054881690936048985');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 2, 0);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('colortable', 'Rainbow');
model.result('pg1').feature('vol1').set('colortabletrans', 'none');
model.result('pg1').feature('vol1').set('colorscalemode', 'linear');
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').set('colortable', 'Prism');
model.result('pg1').feature('vol1').create('def', 'Deform');
model.result('pg1').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 2, 0);
model.result('pg2').set('defaultPlotID', 'stressThinLayer');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').label('Stress, Thin Layer (solid)');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg2').feature('surf1').set('threshold', 'manual');
model.result('pg2').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colortabletrans', 'none');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').feature('surf1').set('colortable', 'Prism');
model.result('pg2').feature('surf1').set('resolution', 'custom');
model.result('pg2').feature('surf1').set('refine', 2);
model.result('pg2').feature('surf1').create('sel1', 'Selection');
model.result('pg2').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg2').feature('surf1').feature('sel1').selection.set([2 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20]);
model.result('pg2').feature('surf1').create('def', 'Deform');
model.result('pg2').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg2').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').run;
model.result('pg2').feature('surf1').set('expr', 'solid.sGpxx');
model.result('pg2').feature('surf1').set('descr', 'Stress tensor, xx-component');
model.result('pg2').run;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/solid', true);
model.study('std2').feature('stat').set('useloadcase', true);
model.study('std2').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std2').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std2').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std2').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std2').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std2').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std2').feature('stat').setIndex('loadcase', 'Load case 3', 2);
model.study('std2').feature('stat').setIndex('loadgroup', false, 2, 0);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 2, 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 2, 1);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 2, 1);
model.study('std2').feature('stat').setIndex('loadcase', 'Load case 3', 2);
model.study('std2').feature('stat').setIndex('loadgroup', false, 2, 0);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 2, 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 2, 1);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 2, 1);
model.study('std2').feature('stat').setIndex('loadcase', 'No load', 0);
model.study('std2').feature('stat').setIndex('loadcase', '+F -M', 1);
model.study('std2').feature('stat').setIndex('loadgroup', true, 1, 0);
model.study('std2').feature('stat').setIndex('loadgroup', true, 1, 1);
model.study('std2').feature('stat').setIndex('loadgroupweight', '-1.0', 1, 1);
model.study('std2').feature('stat').setIndex('loadcase', '+F +M', 2);
model.study('std2').feature('stat').setIndex('loadgroup', true, 2, 0);
model.study('std2').feature('stat').setIndex('loadgroup', true, 2, 1);
model.study('std2').label('Study 2 (Combined load cases)');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_solid_unn').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_solid_rig_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_solid_rig_rot').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_solid_unn').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_solid_rig_disp').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_solid_rig_rot').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_solid_unn').set('scaleval', '0.001');
model.sol('sol2').feature('v1').feature('comp1_solid_rig_disp').set('scaleval', '5.488169093604898E-4');
model.sol('sol2').feature('v1').feature('comp1_solid_rig_rot').set('scaleval', '0.01');
model.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.054881690936048985');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol2').feature('s1').set('control', 'stat');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 3, 0);
model.result('pg3').set('defaultPlotID', 'stress');
model.result('pg3').label('Stress (solid) 1');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg3').feature('vol1').set('threshold', 'manual');
model.result('pg3').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg3').feature('vol1').set('colortable', 'Rainbow');
model.result('pg3').feature('vol1').set('colortabletrans', 'none');
model.result('pg3').feature('vol1').set('colorscalemode', 'linear');
model.result('pg3').feature('vol1').set('resolution', 'custom');
model.result('pg3').feature('vol1').set('refine', 2);
model.result('pg3').feature('vol1').set('colortable', 'Prism');
model.result('pg3').feature('vol1').create('def', 'Deform');
model.result('pg3').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg3').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 3, 0);
model.result('pg4').set('defaultPlotID', 'stressThinLayer');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').label('Stress, Thin Layer (solid) 1');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg4').feature('surf1').set('threshold', 'manual');
model.result('pg4').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg4').feature('surf1').set('colortable', 'Rainbow');
model.result('pg4').feature('surf1').set('colortabletrans', 'none');
model.result('pg4').feature('surf1').set('colorscalemode', 'linear');
model.result('pg4').feature('surf1').set('colortable', 'Prism');
model.result('pg4').feature('surf1').set('resolution', 'custom');
model.result('pg4').feature('surf1').set('refine', 2);
model.result('pg4').feature('surf1').create('sel1', 'Selection');
model.result('pg4').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg4').feature('surf1').feature('sel1').selection.set([2 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20]);
model.result('pg4').feature('surf1').create('def', 'Deform');
model.result('pg4').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg4').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').run;

model.physics.create('ftg', 'Fatigue', 'geom1');
model.physics('ftg').model('comp1');

model.study('std1').feature('stat').setSolveFor('/physics/ftg', false);
model.study('std2').feature('stat').setSolveFor('/physics/ftg', false);

model.physics('ftg').create('stre1', 'StressBasedModel', 2);
model.physics('ftg').feature('stre1').label('Findley');
model.physics('ftg').feature('stre1').selection.named('sel1');
model.physics('ftg').feature('stre1').set('fatigueInputPhysics', 'solid');
model.physics('ftg').feature('stre1').set('Q', 16);
model.physics('ftg').create('stre2', 'StressBasedModel', 2);
model.physics('ftg').feature('stre2').label('Matake');
model.physics('ftg').feature('stre2').selection.named('sel1');
model.physics('ftg').feature('stre2').set('fatigueHCFMultiaxModel', 'Matake');
model.physics('ftg').feature('stre2').set('fatigueInputPhysics', 'solid');
model.physics('ftg').feature('stre2').set('Q', 16);
model.physics('ftg').create('stre3', 'StressBasedModel', 2);
model.physics('ftg').feature('stre3').label('Dang Van');
model.physics('ftg').feature('stre3').selection.named('sel1');
model.physics('ftg').feature('stre3').set('fatigueHCFMultiaxModel', 'DangVan');
model.physics('ftg').feature('stre3').set('fatigueInputPhysics', 'solid');

model.material('mat1').propertyGroup.create('fatigueStressFindley', 'Findley[Fatigue]');
model.material('mat1').propertyGroup('fatigueStressFindley').set('k_Findley', {'0.23'});
model.material('mat1').propertyGroup('fatigueStressFindley').set('f_Findley', {'440[MPa]'});
model.material('mat1').propertyGroup.create('fatigueStressMatake', 'Matake[Fatigue]');
model.material('mat1').propertyGroup('fatigueStressMatake').set('k_Matake', {'0.33'});
model.material('mat1').propertyGroup('fatigueStressMatake').set('f_Matake', {'467[MPa]'});
model.material('mat1').propertyGroup.create('fatigueStressDangVan', 'Dang_Van[Fatigue]');
model.material('mat1').propertyGroup('fatigueStressDangVan').set('a_DangVan', {'0.5'});
model.material('mat1').propertyGroup('fatigueStressDangVan').set('b_DangVan', {'467[MPa]'});

model.study.create('std3');
model.study('std3').create('ftge', 'Fatigue');
model.study('std3').feature('ftge').set('solnum', 'auto');
model.study('std3').feature('ftge').set('usesol', 'off');
model.study('std3').feature('ftge').setSolveFor('/physics/solid', false);
model.study('std3').feature('ftge').setSolveFor('/physics/ftg', true);
model.study('std3').feature('ftge').set('usesol', true);
model.study('std3').feature('ftge').set('notsolmethod', 'sol');
model.study('std3').feature('ftge').set('notstudy', 'std2');
model.study('std3').label('Study 3 (Fatigue)');

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'ftge');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'ftge');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset3');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'ftg.fus'});
model.result('pg5').feature('surf1').set('colortable', 'Rainbow');
model.result('pg5').feature('surf1').set('colortabletrans', 'none');
model.result('pg5').feature('surf1').set('colorscalemode', 'linear');
model.result('pg5').feature('surf1').set('colortable', 'Traffic');
model.result('pg5').label('Fatigue Usage Factor (ftg)');
model.result('pg5').feature('surf1').create('mrkr1', 'Marker');
model.result('pg5').feature('surf1').feature('mrkr1').set('precision', 3);
model.result('pg5').feature('surf1').feature('mrkr1').set('display', 'max');
model.result('pg5').run;
model.result('pg5').label('Fatigue Usage Factor (Findley)');
model.result('pg5').run;
model.result('pg5').feature('surf1').set('expr', 'ftg.stre1.fus');
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Fatigue Usage Factor (Matake)');
model.result('pg6').run;
model.result('pg6').feature('surf1').set('expr', 'ftg.stre2.fus');
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Fatigue Usage Factor (Dang Van)');
model.result('pg7').run;
model.result('pg7').feature('surf1').set('expr', 'ftg.stre3.fus');
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Fatigue Usage Factor, 1D');
model.result('pg8').set('data', 'dset3');
model.result('pg8').set('titletype', 'manual');
model.result('pg8').set('title', 'Fatigue usage factor');
model.result('pg8').create('lngr1', 'LineGraph');
model.result('pg8').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg8').feature('lngr1').set('linewidth', 'preference');
model.result('pg8').feature('lngr1').selection.set([19]);
model.result('pg8').feature('lngr1').set('expr', 'ftg.stre1.fus');
model.result('pg8').feature('lngr1').set('descr', 'Fatigue usage factor');
model.result('pg8').feature('lngr1').set('legend', true);
model.result('pg8').feature('lngr1').set('legendmethod', 'manual');
model.result('pg8').feature('lngr1').setIndex('legends', 'Findley - tension', 0);
model.result('pg8').feature.duplicate('lngr2', 'lngr1');
model.result('pg8').run;
model.result('pg8').feature('lngr2').set('expr', 'ftg.stre2.fus');
model.result('pg8').feature('lngr2').setIndex('legends', 'Matake - tension', 0);
model.result('pg8').feature.duplicate('lngr3', 'lngr2');
model.result('pg8').run;
model.result('pg8').feature('lngr3').set('expr', 'ftg.stre3.fus');
model.result('pg8').feature('lngr3').setIndex('legends', 'Dang Van - tension', 0);
model.result('pg8').run;
model.result('pg8').create('lngr4', 'LineGraph');
model.result('pg8').feature('lngr4').set('markerpos', 'datapoints');
model.result('pg8').feature('lngr4').set('linewidth', 'preference');
model.result('pg8').feature('lngr4').selection.set([17]);
model.result('pg8').feature('lngr4').set('expr', 'ftg.stre1.fus');
model.result('pg8').feature('lngr4').set('descr', 'Fatigue usage factor');
model.result('pg8').feature('lngr4').set('linestyle', 'dashed');
model.result('pg8').feature('lngr4').set('linecolor', 'cyclereset');
model.result('pg8').feature('lngr4').set('legend', true);
model.result('pg8').feature('lngr4').set('legendmethod', 'manual');
model.result('pg8').feature('lngr4').setIndex('legends', 'Findley - compression', 0);
model.result('pg8').feature.duplicate('lngr5', 'lngr4');
model.result('pg8').run;
model.result('pg8').feature('lngr5').set('expr', 'ftg.stre2.fus');
model.result('pg8').feature('lngr5').set('linecolor', 'cycle');
model.result('pg8').feature('lngr5').setIndex('legends', 'Matake - compression', 0);
model.result('pg8').feature.duplicate('lngr6', 'lngr5');
model.result('pg8').run;
model.result('pg8').feature('lngr6').set('expr', 'ftg.stre3.fus');
model.result('pg8').feature('lngr6').setIndex('legends', 'Dang Van - compression', 0);
model.result('pg8').run;
model.result('pg8').run;

model.title('Fatigue Analysis of a Nonproportionally Loaded Shaft with a Fillet');

model.description('This example shows how to perform a High Cycle Fatigue (HCF) analysis with a nonproportional load history caused by a transversal force and a torque which are applied in different combinations. Three different fatigue models (Findley, Matake, and Dang Van) are compared.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('shaft_with_fillet.mph');

model.modelNode.label('Components');

out = model;
