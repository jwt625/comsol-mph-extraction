function out = model
%
% electrodialysis.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Electrochemistry_Module/Electrochemical_Engineering');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('tcd', 'TertiaryCurrentDistributionNernstPlanck', 'geom1', {'cNa' 'cCl'});

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/tcd', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('Vtot', '1.5[V]', 'Total potential drop over unit cell');
model.param.set('DNa', '2.5e-9[m^2/s]', 'Diffusion coefficient, Na');
model.param.set('DCl', '2e-9[m^2/s]', 'Diffusion coefficient, Cl');
model.param.set('T', '298.15[K]', 'Temperature');
model.param.set('cCl_0', '0.5[mol/dm^3]', 'Inlet concentration, Cl');
model.param.set('cMem', '1[mol/dm^3]', 'Membrane charge concentration');
model.param.set('v_avg', '0.005[m/s]', 'Channel average flow velocity');
model.param.set('L', '0.01[m]', 'Cell length');
model.param.set('W_ch', '1[mm]', 'Channel width');
model.param.set('W_m', '0.25[mm]', 'Membrane width');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'2*(W_ch+W_m)' '1'});
model.geom('geom1').feature('r1').setIndex('size', 'L', 1);
model.geom('geom1').feature('r1').set('pos', {'-(W_ch+W_m)' '0'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'(W_ch+2*W_m)' '1'});
model.geom('geom1').feature('r2').setIndex('size', 'L', 1);
model.geom('geom1').feature('r2').set('pos', {'-(W_ch+2*W_m)/2' '0'});
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', {'W_ch' 'L'});
model.geom('geom1').feature('r3').set('pos', {'-W_ch/2' '0'});
model.geom('geom1').run('r3');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Membrane (Cation Selective)');
model.selection('sel1').set([2]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Membrane (Anion Selective)');
model.selection('sel2').set([4]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Channels');
model.selection('sel3').set([1 3 5]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Inlets');
model.selection('sel4').geom(1);
model.selection('sel4').set([2 8 14]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Outlets');
model.selection('sel5').geom(1);
model.selection('sel5').set([3 9 15]);

model.func.create('an1', 'Analytic');
model.func('an1').model('comp1');
model.func('an1').set('funcname', 'vel');
model.func('an1').set('expr', '3*v_avg*(1-((t)/(W_ch/2))^2)');
model.func('an1').set('args', 't');
model.func('an1').setIndex('argunit', 'm', 0);
model.func('an1').set('fununit', 'm/s');
model.func('an1').setIndex('plotargs', -1, 0, 1);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').selection.geom('geom1', 2);
model.variable('var1').selection.set([3]);
model.variable('var1').set('vel', 'vel(x)');
model.variable('var1').descr('vel', 'Channel velocity (middle channel)');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').selection.geom('geom1', 2);
model.variable('var2').selection.set([1]);
model.variable('var2').set('vel', 'vel((x+W_ch+W_m))', 'Channel velocity (middle channel)');
model.variable('var2').descr('vel', 'Channel velocity (left channel)');
model.variable.create('var3');
model.variable('var3').model('comp1');
model.variable('var3').selection.geom('geom1', 2);
model.variable('var3').selection.set([5]);
model.variable('var3').set('vel', 'vel((x-W_ch-W_m))', 'Channel velocity (middle channel)');
model.variable('var3').descr('vel', 'Channel velocity (right channel)');

model.physics('tcd').feature('sp1').setIndex('z', 1, 0);
model.physics('tcd').feature('sp1').setIndex('z', -1, 1);
model.physics('tcd').feature('ice1').set('u', {'0' 'vel' '0'});
model.physics('tcd').feature('ice1').set('D_cNa', {'DNa' '0' '0' '0' 'DNa' '0' '0' '0' 'DNa'});
model.physics('tcd').feature('ice1').set('D_cCl', {'DCl' '0' '0' '0' 'DCl' '0' '0' '0' 'DCl'});
model.physics('tcd').create('iem1', 'IonExchangeMembrane', 2);
model.physics('tcd').feature('iem1').label('Ion Exchange Membrane (Cation Selective)');
model.physics('tcd').feature('iem1').selection.named('sel1');
model.physics('tcd').feature('iem1').set('rhofix', '-cMem*F_const');
model.physics('tcd').feature('iem1').set('D_cNa', {'DNa' '0' '0' '0' 'DNa' '0' '0' '0' 'DNa'});
model.physics('tcd').feature('iem1').set('D_cCl', {'DCl' '0' '0' '0' 'DCl' '0' '0' '0' 'DCl'});
model.physics('tcd').feature('iem1').set('epsl', 0.15);
model.physics('tcd').feature.duplicate('iem2', 'iem1');
model.physics('tcd').feature('iem2').label('Ion Exchange Membrane (Anion Selective)');
model.physics('tcd').feature('iem2').selection.named('sel2');
model.physics('tcd').feature('iem2').set('rhofix', 'cMem*F_const');
model.physics('tcd').create('pc1', 'PeriodicCondition', 1);
model.physics('tcd').feature('pc1').selection.set([1 16]);
model.physics('tcd').feature('pc1').set('deltaphil', '-Vtot');
model.physics('tcd').feature('pc1').set('ApplyForElectrodePhase', false);
model.physics('tcd').create('eip1', 'ElectrolytePotentialPoint', 0);
model.physics('tcd').feature('eip1').selection.set([1]);
model.physics('tcd').create('in1', 'Inflow', 1);
model.physics('tcd').feature('in1').selection.named('sel4');
model.physics('tcd').feature('in1').setIndex('c0', 'cCl_0', 1);
model.physics('tcd').feature('in1').set('BoundaryConditionType', 'FluxDanckwerts');
model.physics('tcd').create('out1', 'Outflow', 1);
model.physics('tcd').feature('out1').selection.named('sel5');
model.physics('tcd').feature('init1').setIndex('initc', 'cCl_0', 1);
model.physics('tcd').feature('init1').set('initphil', 'Vtot*x/L');

model.common('cminpt').set('modified', {'temperature' 'T'});

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([1]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 100);
model.mesh('mesh1').feature('map1').feature.duplicate('dis2', 'dis1');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([8 9]);
model.mesh('mesh1').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis2').set('elemcount', 100);
model.mesh('mesh1').feature('map1').feature('dis2').set('elemratio', 10);
model.mesh('mesh1').feature('map1').feature('dis2').set('symmetric', true);
model.mesh('mesh1').feature('map1').feature.duplicate('dis3', 'dis2');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([3 14]);
model.mesh('mesh1').feature('map1').feature('dis3').set('elemcount', 20);
model.mesh('mesh1').feature('map1').feature('dis3').set('symmetric', false);
model.mesh('mesh1').feature('map1').feature('dis3').set('reverse', true);
model.mesh('mesh1').feature('map1').feature.duplicate('dis4', 'dis3');
model.mesh('mesh1').feature('map1').feature('dis4').selection.set([2 15]);
model.mesh('mesh1').feature('map1').feature('dis4').set('reverse', false);
model.mesh('mesh1').feature('map1').feature.duplicate('dis5', 'dis4');
model.mesh('mesh1').feature('map1').feature('dis5').selection.set([6 12]);
model.mesh('mesh1').feature('map1').feature('dis5').set('elemratio', 2);
model.mesh('mesh1').feature('map1').feature('dis5').set('symmetric', true);
model.mesh('mesh1').run;

model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'Vtot', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'V', 0);
model.study('std1').feature('stat').setIndex('pname', 'Vtot', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'V', 0);
model.study('std1').feature('stat').setIndex('pname', 'cMem', 0);
model.study('std1').feature('stat').setIndex('plistarr', '0 500 1000', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (tcd)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (tcd)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (tcd)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s1').set('stol', '1e-5');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 3, 0);
model.result('pg1').label('Electrolyte Potential (tcd)');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'phil'});
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('recover', 'pprint');
model.result('pg1').feature('str1').set('pointtype', 'arrow');
model.result('pg1').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg1').feature('str1').set('color', 'gray');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 3, 0);
model.result('pg2').label('Electrolyte Current Density (tcd)');
model.result('pg2').create('str1', 'Streamline');
model.result('pg2').feature('str1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg2').feature('str1').set('posmethod', 'uniform');
model.result('pg2').feature('str1').set('recover', 'pprint');
model.result('pg2').feature('str1').set('pointtype', 'arrow');
model.result('pg2').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg2').feature('str1').set('color', 'gray');
model.result('pg2').feature('str1').create('col1', 'Color');
model.result('pg2').feature('str1').feature('col1').set('expr', 'root.comp1.tcd.IlMag');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 3, 0);
model.result('pg3').label('Concentration, Na (tcd)');
model.result('pg3').set('titletype', 'custom');
model.result('pg3').set('prefixintitle', 'Species Na:');
model.result('pg3').set('expressionintitle', false);
model.result('pg3').set('typeintitle', true);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'cNa'});
model.result('pg3').create('str1', 'Streamline');
model.result('pg3').feature('str1').set('expr', {'tcd.tflux_cNax' 'tcd.tflux_cNay'});
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('recover', 'pprint');
model.result('pg3').feature('str1').set('pointtype', 'arrow');
model.result('pg3').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('str1').set('color', 'gray');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 3, 0);
model.result('pg4').label('Concentration, Cl (tcd)');
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('prefixintitle', 'Species Cl:');
model.result('pg4').set('expressionintitle', false);
model.result('pg4').set('typeintitle', true);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'cCl'});
model.result('pg4').create('str1', 'Streamline');
model.result('pg4').feature('str1').set('expr', {'tcd.tflux_cClx' 'tcd.tflux_cCly'});
model.result('pg4').feature('str1').set('posmethod', 'uniform');
model.result('pg4').feature('str1').set('recover', 'pprint');
model.result('pg4').feature('str1').set('pointtype', 'arrow');
model.result('pg4').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg4').feature('str1').set('color', 'gray');
model.result('pg1').run;
model.result('pg3').run;
model.result('pg3').selection.geom('geom1', 2);
model.result('pg3').selection.named('sel3');
model.result('pg3').run;
model.result('pg3').feature('str1').set('posmethod', 'selection');
model.result('pg3').feature('str1').set('selnumber', 5);
model.result('pg3').feature('str1').selection.named('sel4');
model.result('pg3').run;
model.result('pg3').set('solutionintitle', false);
model.result('pg3').run;
model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').setIndex('genpoints', '-W_ch-W_m', 0, 0);
model.result.dataset('cln1').setIndex('genpoints', 'L/2', 0, 1);
model.result.dataset('cln1').setIndex('genpoints', 'W_ch+W_m', 1, 0);
model.result.dataset('cln1').setIndex('genpoints', 'L/2', 1, 1);
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Potential');
model.result('pg5').set('data', 'cln1');
model.result('pg5').setIndex('looplevelinput', 'last', 0);
model.result('pg5').set('titletype', 'none');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'Position');
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg5').feature('lngr1').set('linewidth', 'preference');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Concentrations');
model.result('pg6').set('data', 'cln1');
model.result('pg6').setIndex('looplevelinput', 'last', 0);
model.result('pg6').set('titletype', 'none');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'Position');
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg6').feature('lngr1').set('linewidth', 'preference');
model.result('pg6').feature('lngr1').set('expr', 'cNa');
model.result('pg6').feature('lngr1').set('legend', true);
model.result('pg6').feature('lngr1').set('legendmethod', 'manual');
model.result('pg6').feature('lngr1').setIndex('legends', 'Na<sup>+</sup>', 0);
model.result('pg6').run;
model.result('pg6').create('lngr2', 'LineGraph');
model.result('pg6').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg6').feature('lngr2').set('linewidth', 'preference');
model.result('pg6').feature('lngr2').set('expr', 'cCl');
model.result('pg6').feature('lngr2').set('legend', true);
model.result('pg6').feature('lngr2').set('legendmethod', 'manual');
model.result('pg6').feature('lngr2').setIndex('legends', 'Cl<sup>-</sup>', 0);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Fluxes, Na');
model.result('pg7').set('data', 'cln1');
model.result('pg7').setIndex('looplevelinput', 'last', 0);
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr1').set('linewidth', 'preference');
model.result('pg7').feature('lngr1').set('expr', 'tcd.tfluxx_cNa');
model.result('pg7').feature('lngr1').set('legend', true);
model.result('pg7').feature('lngr1').set('legendmethod', 'manual');
model.result('pg7').feature('lngr1').setIndex('legends', 'Total Flux', 0);
model.result('pg7').feature.duplicate('lngr2', 'lngr1');
model.result('pg7').run;
model.result('pg7').feature('lngr2').set('expr', 'tcd.mflux_cNax');
model.result('pg7').feature('lngr2').setIndex('legends', 'Migrative Flux', 0);
model.result('pg7').feature.duplicate('lngr3', 'lngr2');
model.result('pg7').run;
model.result('pg7').feature('lngr3').set('expr', 'tcd.dflux_cNax');
model.result('pg7').run;
model.result('pg7').feature('lngr3').setIndex('legends', 'Diffusive Flux', 0);
model.result('pg7').run;
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', 'Position');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Flux');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('legendpos', 'upperleft');
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').set('titletype', 'manual');
model.result('pg8').label('Fluxes, Cl');
model.result('pg8').run;
model.result('pg8').feature('lngr1').set('expr', 'tcd.tfluxx_cCl');
model.result('pg8').run;
model.result('pg8').feature('lngr2').set('expr', 'tcd.mflux_cClx');
model.result('pg8').run;
model.result('pg8').feature('lngr3').set('expr', 'tcd.dflux_cClx');
model.result('pg8').run;
model.result('pg8').set('title', 'Cl<sup>-</sup> flux, x-component (mol/(m<sup>2</sup>*s))');
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Electrolyte current density');
model.result('pg9').create('lngr1', 'LineGraph');
model.result('pg9').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg9').feature('lngr1').set('linewidth', 'preference');
model.result('pg9').feature('lngr1').selection.set([10]);
model.result('pg9').feature('lngr1').set('expr', 'tcd.nIl');
model.result('pg9').feature('lngr1').set('descr', 'Normal electrolyte current density');
model.result('pg9').feature('lngr1').set('xdata', 'expr');
model.result('pg9').feature('lngr1').set('xdataexpr', 'y');
model.result('pg9').feature('lngr1').set('legend', true);
model.result('pg9').run;

model.title('Desalination in an Electrodialysis Cell');

model.description('This example treats the removal of sodium chloride from a water solution (diluate) into another stream (concentrate). Typical applications of electrodialysis can be found in desalination of process streams, food, and juice products, biomedical engineering, to mention a few.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('electrodialysis.mph');

model.modelNode.label('Components');

out = model;
