function out = model
%
% strength_reduction_method.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Geomechanics_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);

model.param.label('Geometry and Solver Parameters');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('L1', '85[m]', 'Length parameter');
model.param.set('L2', '20[m]', 'Length parameter');
model.param.set('Lslope', 'H2/tan(alpha)', 'Length parameter');
model.param.set('H1', '20[m]', 'Height parameter');
model.param.set('H2', '10[m]', 'Height parameter');
model.param.set('alpha', '15[deg]', 'Slope angle');
model.param.set('FOS', '1[1]', 'Factor of safety');
model.param.create('par2');
model.param('par2').label('Material Parameters');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('E_soil', '20[MPa]', 'Young''s modulus');
model.param('par2').set('nu_soil', '0.3', 'Poisson''s ratio');
model.param('par2').set('rho_soil', '19[kN/m^3]/g_const', 'Soil density');
model.param('par2').set('c', '20[kPa]', 'Cohesion');
model.param('par2').set('phi', '25[deg]', 'Friction angle');
model.param('par2').set('psi', '0[deg]', 'Dilatation angle');
model.param('par2').paramCase.create('case1');
model.param('par2').paramCase.create('case2');
model.param('par2').paramCase('case2').set('psi', '25[deg]');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').set('beta_f', 'cos(atan(tan(phi)/FOS))*cos(atan(tan(psi)/FOS))/(1-sin(atan(tan(phi)/FOS))*sin(atan(tan(psi)/FOS)))');
model.variable('var1').descr('beta_f', 'Reduction factor');
model.variable('var1').set('c_r', 'beta_f*c');
model.variable('var1').descr('c_r', 'Reduced cohesion');
model.variable('var1').set('phi_r', 'atan(beta_f*tan(phi))');
model.variable('var1').descr('phi_r', 'Reduced friction angle');
model.variable('var1').set('c_p', 'c_r/FOS');
model.variable('var1').descr('c_p', 'Parameterized cohesion');
model.variable('var1').set('phi_p', 'atan(tan(phi_r)/FOS)');
model.variable('var1').descr('phi_p', 'Parameterized friction angle');

model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'vectors');
model.geom('geom1').feature('pol1').set('x', '0, L1,L1,L2+Lslope,L2,0');
model.geom('geom1').feature('pol1').set('y', '0, 0, H1+H2,H1+H2,H1,H1');
model.geom('geom1').run('pol1');
model.geom('geom1').create('pol2', 'Polygon');
model.geom('geom1').feature('pol2').set('source', 'table');
model.geom('geom1').feature('pol2').set('type', 'open');
model.geom('geom1').feature('pol2').set('source', 'vectors');
model.geom('geom1').feature('pol2').set('x', '0.8*L2,0.8*L2,1.3*L2+Lslope,1.3*L2+Lslope');
model.geom('geom1').feature('pol2').set('y', 'H1,H1/2,H1/2,H1+H2');
model.geom('geom1').run('pol2');
model.geom('geom1').run('fin');
model.geom('geom1').create('mcd1', 'MeshControlDomains');
model.geom('geom1').feature('mcd1').selection('input').set('fin', 2);
model.geom('geom1').run('mcd1');

model.physics('solid').feature('lemm1').set('reducedIntegration', true);
model.physics('solid').feature('lemm1').create('soil1', 'SoilModel', 2);
model.physics('solid').feature('lemm1').feature('soil1').set('YieldCriterion', 'MohrCoulomb');
model.physics('solid').feature('lemm1').feature('soil1').set('MohrCoulombFlowRule', 'AssociatedFlowRule');
model.physics('solid').feature('lemm1').feature('soil1').set('nonlocalPlasticModel', 'impGradient');
model.physics('solid').feature('lemm1').feature('soil1').set('lint', 0.05);
model.physics('solid').feature('lemm1').create('iss1', 'InitialStressandStrain', 2);
model.physics('solid').feature('lemm1').feature('iss1').set('Sil', {'withsol(''sol2'',solid.sxx)' 'withsol(''sol2'',solid.sxy)' 'withsol(''sol2'',solid.sxz)' 'withsol(''sol2'',solid.sxy)' 'withsol(''sol2'',solid.syy)' 'withsol(''sol2'',solid.syz)' 'withsol(''sol2'',solid.sxz)' 'withsol(''sol2'',solid.syz)' 'withsol(''sol2'',solid.szz)'});
model.physics('solid').create('gacc1', 'GravityAcceleration', -1);
model.physics('solid').create('roll1', 'Roller', 1);
model.physics('solid').feature('roll1').selection.set([1 6]);
model.physics('solid').create('fix1', 'Fixed', 1);
model.physics('solid').feature('fix1').selection.set([2]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Soil Material');
model.material('mat1').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat1').propertyGroup('Enu').set('E', {'E_soil'});
model.material('mat1').propertyGroup('Enu').set('nu', {'nu_soil'});
model.material('mat1').propertyGroup('def').set('density', {'rho_soil'});
model.material('mat1').propertyGroup.create('MohrCoulomb', 'Mohr_Coulomb_criterion');
model.material('mat1').propertyGroup('MohrCoulomb').set('cohesion', {'c_p'});
model.material('mat1').propertyGroup('MohrCoulomb').set('internalphi', {'phi_p'});

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([2]);
model.mesh('mesh1').feature('map1').create('size1', 'Size');
model.mesh('mesh1').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmax', 0.5);
model.mesh('mesh1').create('fq1', 'FreeQuad');
model.mesh('mesh1').feature('fq1').set('smoothcontrol', false);
model.mesh('mesh1').feature('size').set('hauto', 3);
model.mesh('mesh1').run;

model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledphysics', {'solid/lemm1/soil1' 'solid/lemm1/iss1'});
model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat2').set('useinitsol', true);
model.study('std1').feature('stat2').set('useparam', true);
model.study('std1').feature('stat2').setIndex('pname', 'alpha', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', 'rad', 0);
model.study('std1').feature('stat2').setIndex('pname', 'alpha', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', 'rad', 0);
model.study('std1').feature('stat2').setIndex('pname', 'FOS', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '1 4', 0);
model.study('std1').feature('stat2').setIndex('punit', '', 0);
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'alpha', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'rad', 0);
model.study('std1').feature('param').setIndex('pname', 'alpha', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'rad', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(15,10,45)', 0);
model.study('std1').feature('param').setIndex('punit', 'deg', 0);
model.study('std1').create('param2', 'Parametric');
model.study('std1').feature('param2').set('sweeptype', 'switch');
model.study('std1').feature('param2').setIndex('switchname', 'default', 0);
model.study('std1').feature('param2').setIndex('switchcase', 'all', 0);
model.study('std1').feature('param2').setIndex('switchlistarr', '', 0);
model.study('std1').feature('param2').setIndex('switchname', 'default', 0);
model.study('std1').feature('param2').setIndex('switchcase', 'all', 0);
model.study('std1').feature('param2').setIndex('switchlistarr', '', 0);
model.study('std1').feature('param2').setIndex('switchname', 'par2', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat2');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_solid_lemm1_soil1_epenl').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_solid_lemm1_soil1_epenl').set('resscalemethod', 'parent');
model.sol('sol1').feature('v2').feature('comp1_solid_lemm1_soil1_epenl').set('scaleval', '0.01');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat2');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('control', 'stat2');
model.sol('sol1').feature('s2').set('control', 'stat2');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s2').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'alpha'});
model.batch('p1').set('plistarr', {'range(15,10,45)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');
model.batch.create('p2', 'Parametric');
model.batch('p2').study('std1');
model.batch('p2').create('jo1', 'Jobseq');
model.batch('p2').feature('jo1').set('seq', 'p1');
model.batch('p2').set('pname', {});
model.batch('p2').set('plistarr', {});
model.batch('p2').set('sweeptype', 'switch');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std1');
model.batch('p2').set('control', 'param2');

model.sol('sol1').feature('s2').feature('p1').set('ponerror', 'skip');
model.sol('sol1').feature('s2').feature('p1').set('paramtuning', true);
model.sol('sol1').feature('s2').feature('p1').set('pinitstep', 0.2);
model.sol('sol1').feature('s2').feature('p1').set('pmaxstep', 0.2);
model.sol('sol1').feature('s2').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s2').feature('p1').set('pout', 'psteps');
model.sol('sol1').feature('s2').feature('p1').create('st1', 'StopCondition');

model.cpl.create('maxop1', 'Maximum', 'geom1');
model.cpl('maxop1').selection.set([1]);

model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopcondarr', 'comp1.maxop1(comp1.solid.disp)>Lslope/10', 0);
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 8);
model.sol.create('sol3');
model.sol('sol3').study('std1');
model.sol('sol3').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol3');
model.batch('p2').run('compute');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset3');
model.result('pg1').setIndex('looplevel', 10, 0);
model.result('pg1').setIndex('looplevel', 4, 1);
model.result('pg1').setIndex('looplevel', 2, 2);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').set('resolution', 'normal');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('expr', {'u' 'v'});
model.result('pg1').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg1').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').set('includeparameters', false);
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').set('data', 'dset3');
model.result.evaluationGroup('eg1').feature('gev1').setIndex('looplevelinput', 'manual', 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('looplevel', [1], 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('looplevelinput', 'last', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'alpha', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 'deg', 0);
model.result.evaluationGroup('eg1').feature.duplicate('gev2', 'gev1');
model.result.evaluationGroup('eg1').feature('gev2').setIndex('expr', 'FOS', 0);
model.result.evaluationGroup('eg1').feature('gev2').setIndex('unit', 1, 0);
model.result.evaluationGroup('eg1').feature.duplicate('gev3', 'gev2');
model.result.evaluationGroup('eg1').feature('gev3').setIndex('looplevel', [2], 2);
model.result.evaluationGroup('eg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('FOS vs. Slope Angle');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Factor of safety (1)');
model.result('pg2').create('tblp1', 'Table');
model.result('pg2').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg2').feature('tblp1').set('linewidth', 'preference');
model.result('pg2').feature('tblp1').set('source', 'evaluationgroup');
model.result('pg2').feature('tblp1').set('linemarker', 'circle');
model.result('pg2').feature('tblp1').set('legend', true);
model.result('pg2').feature('tblp1').set('legendmethod', 'manual');
model.result('pg2').feature('tblp1').setIndex('legends', 'Material case 1', 0);
model.result('pg2').feature('tblp1').setIndex('legends', 'Material case 2', 1);
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Displacement vs. FOS');
model.result('pg3').set('titletype', 'none');
model.result('pg3').set('legendpos', 'upperleft');
model.result('pg3').set('xlabelactive', true);
model.result('pg3').set('xlabel', 'Factor of safety (1)');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').set('data', 'dset3');
model.result('pg3').feature('glob1').setIndex('looplevelinput', 'manual', 2);
model.result('pg3').feature('glob1').setIndex('looplevel', [1], 2);
model.result('pg3').feature('glob1').setIndex('expr', 'maxop1(solid.disp)', 0);
model.result('pg3').feature('glob1').setIndex('descr', 'Displacement', 0);
model.result('pg3').feature('glob1').set('legendmethod', 'evaluated');
model.result('pg3').feature('glob1').set('legendpattern', '\alpha = eval(alpha,deg)<sup>\circ</sub>');
model.result('pg3').feature.duplicate('glob2', 'glob1');
model.result('pg3').run;
model.result('pg3').feature('glob2').setIndex('looplevel', [2], 2);
model.result('pg3').feature('glob2').set('linestyle', 'dashed');
model.result('pg3').feature('glob2').set('linecolor', 'cyclereset');
model.result('pg3').feature('glob2').set('legend', false);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 10, 0);
model.result('pg4').setIndex('looplevel', 4, 1);
model.result('pg4').setIndex('looplevel', 2, 2);
model.result('pg4').label('Equivalent Plastic Strain (solid)');
model.result('pg4').set('defaultPlotID', 'equivalentPlasticStrain');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'solid.epeGp'});
model.result('pg4').feature('surf1').set('inheritplot', 'none');
model.result('pg4').feature('surf1').set('resolution', 'normal');
model.result('pg4').feature('surf1').set('colortabletype', 'discrete');
model.result('pg4').feature('surf1').set('bandcount', 11);
model.result('pg4').feature('surf1').set('colortable', 'AuroraAustralisDark');
model.result('pg4').feature('surf1').set('descractive', true);
model.result('pg4').feature('surf1').set('descr', 'Equivalent plastic strain');
model.result('pg4').label('Equivalent Plastic Strain (solid)');
model.result('pg4').run;
model.result('pg4').label('Equivalent Plastic Strain (Case 1)');
model.result('pg4').set('data', 'none');
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('solutionintitle', false);
model.result('pg4').set('edges', false);
model.result('pg4').set('plotarrayenable', true);
model.result('pg4').set('arrayshape', 'square');
model.result('pg4').feature('surf1').set('arraydim', '2');
model.result('pg4').run;
model.result('pg4').feature('surf1').set('data', 'dset3');
model.result('pg4').feature('surf1').set('looplevel', [10 1 1]);
model.result('pg4').feature.duplicate('surf2', 'surf1');
model.result('pg4').feature('surf2').set('arraydim', '2');
model.result('pg4').run;
model.result('pg4').feature('surf2').set('looplevel', [10 2 1]);
model.result('pg4').feature('surf2').set('titletype', 'none');
model.result('pg4').feature('surf2').set('inheritplot', 'surf1');
model.result('pg4').feature.duplicate('surf3', 'surf2');
model.result('pg4').feature('surf3').set('arraydim', '2');
model.result('pg4').run;
model.result('pg4').feature('surf3').set('looplevel', [10 3 1]);
model.result('pg4').feature.duplicate('surf4', 'surf3');
model.result('pg4').feature('surf4').set('arraydim', '2');
model.result('pg4').run;
model.result('pg4').feature('surf4').set('looplevel', [10 4 1]);
model.result('pg4').run;
model.result('pg4').create('tlan1', 'TableAnnotation');
model.result('pg4').feature('tlan1').set('arraydim', '2');
model.result('pg4').feature('tlan1').set('source', 'localtable');
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 25, 0, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0, 0, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', '\[\alpha \;=\;15^\circ\]', 0, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 125, 1, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0, 1, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', '\[\alpha \;=\;25^\circ\]', 1, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 25, 2, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 55, 2, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', '\[\alpha \;=\;35^\circ\]', 2, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 125, 3, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 55, 3, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', '\[\alpha \;=\;45^\circ\]', 3, 2);
model.result('pg4').feature('tlan1').set('latexmarkup', true);
model.result('pg4').feature('tlan1').set('showpoint', false);
model.result('pg4').feature('surf1').set('arraydim', '2');
model.result('pg4').run;
model.result('pg4').feature('surf1').set('looplevel', [24 1 1]);
model.result('pg4').feature('surf1').set('rangecoloractive', true);
model.result('pg4').feature('surf1').set('rangecolormax', 0.25);
model.result('pg4').feature('surf1').set('bandcount', 5);
model.result('pg4').feature('surf2').set('arraydim', '2');
model.result('pg4').run;
model.result('pg4').feature('surf2').set('looplevel', [14 2 1]);
model.result('pg4').feature('surf3').set('arraydim', '2');
model.result('pg4').run;
model.result('pg4').feature('surf3').set('looplevel', [12 3 1]);
model.result('pg4').feature('surf4').set('arraydim', '2');
model.result('pg4').run;
model.result('pg4').feature('surf4').set('looplevel', [11 4 1]);
model.result('pg4').run;
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Equivalent Plastic Strain (Case 2)');
model.result('pg5').feature('surf1').set('arraydim', '2');
model.result('pg5').run;
model.result('pg5').feature('surf1').set('looplevel', [24 1 2]);
model.result('pg5').feature('surf2').set('arraydim', '2');
model.result('pg5').run;
model.result('pg5').feature('surf2').set('looplevel', [14 2 2]);
model.result('pg5').feature('surf3').set('arraydim', '2');
model.result('pg5').run;
model.result('pg5').feature('surf3').set('looplevel', [13 3 2]);
model.result('pg5').feature('surf4').set('arraydim', '2');
model.result('pg5').run;
model.result('pg5').feature('surf4').set('looplevel', [10 4 2]);
model.result('pg5').run;
model.result.dataset.create('extr1', 'Extrude2D');
model.result.dataset('extr1').set('data', 'dset3');
model.result.dataset('extr1').set('zmax', 'L1+L2');
model.result.dataset('extr1').set('planemap', 'xz');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').run;
model.result('pg6').label('Displacement');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').create('def1', 'Deform');
model.result('pg6').run;
model.result('pg6').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg6').feature('surf1').feature('def1').set('scale', 1);
model.result('pg6').run;

model.title('Strength Reduction Method for Slope Stability');

model.description(['The strength reduction method is a tool for finding the factor of safety (FOS) in geotechnical problems, particularly in slope stability. To determine the factor of safety of a slope, the strength properties of the Mohr' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Coulomb model are gradually reduced until failure occurs. A comparison between associative and nonassociative plastic flow is made.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;

model.result('pg5').feature('tlan1').set('xaxisdata', 'auto');
model.result('pg5').feature('tlan1').set('yaxisdata', 'auto');
model.result('pg4').feature('tlan1').set('xaxisdata', 'auto');
model.result('pg4').feature('tlan1').set('yaxisdata', 'auto');

model.label('strength_reduction_method.mph');

model.modelNode.label('Components');

out = model;
