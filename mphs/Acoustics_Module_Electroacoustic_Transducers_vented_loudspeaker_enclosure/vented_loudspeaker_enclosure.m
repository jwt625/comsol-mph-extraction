function out = model
%
% vented_loudspeaker_enclosure.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Electroacoustic_Transducers');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('pabe', 'PressureAcousticsBoundaryElements', 'geom1');
model.physics('pabe').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics.create('shell', 'Shell', 'geom1');
model.physics('shell').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std1').feature('freq').setSolveFor('/physics/pabe', true);
model.study('std1').feature('freq').setSolveFor('/physics/solid', true);
model.study('std1').feature('freq').setSolveFor('/physics/shell', true);

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'vented_loudspeaker_enclosure.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').create('rot1', 'Rotate');
model.geom('geom1').feature('rot1').selection('input').set({'imp1'});
model.geom('geom1').feature('rot1').set('rot', 180);
model.geom('geom1').run('fin');

model.view.create('view2', 'geom1');
model.view('view2').model('comp1');
model.view('view2').set('locked', true);
model.view('view2').set('rotcenlocked', true);
model.view('view2').camera.setIndex('position', 1505.2598876953125, 0);
model.view('view2').camera.setIndex('position', 2077.179931640625, 1);
model.view('view2').camera.set('target', [-116.375 85 -100]);
model.view('view2').camera.setIndex('target', -85, 1);
model.view('view2').camera.setIndex('up', -0.3086974024772644, 0);
model.view('view2').camera.setIndex('up', -0.4115965962409973, 1);
model.view('view2').camera.set('rotationpoint', [-116.375 85 -100]);
model.view('view2').camera.setIndex('rotationpoint', -85, 1);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('All Domains');
model.selection('sel1').all;
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Coil');

model.view('view2').set('renderwireframe', true);

model.selection('sel2').set([26]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Narrow Region Inner');
model.selection('sel3').set([29]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Narrow Region Outer');
model.selection('sel4').set([28]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Soft Iron');
model.selection('sel5').set([23 27]);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Ferrite');
model.selection('sel6').set([24]);
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').label('Enclosure');
model.selection('sel7').set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 19 20 21 30 31 32 33 34 35 36 37 38 39 40 41 42]);
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Air Domains');
model.selection('dif1').set('add', {'sel1'});
model.selection('dif1').set('subtract', {'sel2' 'sel5' 'sel6' 'sel7'});
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Structural Domains');
model.selection('uni1').set('input', {'sel2' 'sel5' 'sel6' 'sel7'});
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Swept Domains');
model.selection('uni2').set('input', {'sel2' 'sel3' 'sel4' 'sel7'});
model.selection.create('sel8', 'Explicit');
model.selection('sel8').model('comp1');
model.selection('sel8').label('All Boundaries');
model.selection('sel8').geom(2);
model.selection('sel8').all;
model.selection.create('sel9', 'Explicit');
model.selection('sel9').model('comp1');
model.selection('sel9').label('Composite');
model.selection('sel9').geom(2);
model.selection('sel9').set([199 200 201 202]);
model.selection.create('sel10', 'Explicit');
model.selection('sel10').model('comp1');
model.selection('sel10').label('Cloth');
model.selection('sel10').geom(2);
model.selection('sel10').set([173 174 175 176 177 178 179 180 181 182 183 184 187 188 191 192 193 194]);
model.selection.create('sel11', 'Explicit');
model.selection('sel11').model('comp1');
model.selection('sel11').label('Foam');
model.selection('sel11').geom(2);
model.selection('sel11').set([271 272 273 274]);
model.selection.create('sel12', 'Explicit');
model.selection('sel12').model('comp1');
model.selection('sel12').label('Glass Fiber');
model.selection('sel12').geom(2);
model.selection('sel12').set([115 116 121 122 141 142 163 164 171 172 195 196]);
model.selection.create('sel13', 'Explicit');
model.selection('sel13').model('comp1');
model.selection('sel13').label('Basket');
model.selection('sel13').geom(2);
model.selection('sel13').set([129 130 155 156 189 190 239 240 269 270]);
model.selection.create('sel14', 'Explicit');
model.selection('sel14').model('comp1');
model.selection('sel14').label('Other Mapped Boundaries');
model.selection('sel14').geom(2);
model.selection('sel14').set([124 150 151 239 240 259 260 261 262 263 264 266 268 269 270 275 276]);
model.selection.create('sel15', 'Explicit');
model.selection('sel15').model('comp1');
model.selection('sel15').label('Not Mapped Boundaries');
model.selection('sel15').geom(2);
model.selection('sel15').set([195 196]);
model.selection.create('uni3', 'Union');
model.selection('uni3').model('comp1');
model.selection('uni3').label('Shell Domains');
model.selection('uni3').set('entitydim', 2);
model.selection('uni3').set('input', {'sel9' 'sel10' 'sel11' 'sel12' 'sel13'});
model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');
model.selection('box1').label('Symmetry Boundaries');
model.selection('box1').set('entitydim', 2);
model.selection('box1').set('ymin', 0);
model.selection('box1').set('condition', 'inside');
model.selection.create('dif2', 'Difference');
model.selection('dif2').model('comp1');
model.selection('dif2').label('Boundaries out of Symmetry Plane');
model.selection('dif2').set('entitydim', 2);
model.selection('dif2').set('add', {'sel8'});
model.selection('dif2').set('subtract', {'box1'});
model.selection.create('dif3', 'Difference');
model.selection('dif3').model('comp1');
model.selection('dif3').label('Mapped Boundaries');
model.selection('dif3').set('entitydim', 2);
model.selection('dif3').set('add', {'sel10' 'sel11' 'sel12' 'sel14'});
model.selection('dif3').set('subtract', {'sel15'});
model.selection.create('box2', 'Box');
model.selection('box2').model('comp1');
model.selection('box2').label('Symmetry Edges');
model.selection('box2').set('entitydim', 1);
model.selection('box2').set('ymin', 0);
model.selection('box2').set('condition', 'inside');

model.func.create('int1', 'Interpolation');
model.func('int1').model('comp1');
model.func('int1').set('source', 'file');
model.func('int1').set('filename', 'vented_loudspeaker_enclosure_Rb.txt');
model.func('int1').importData;
model.func('int1').set('funcname', 'Rb');
model.func('int1').setIndex('argunit', 'Hz', 0);
model.func('int1').setIndex('fununit', 'ohm', 0);
model.func.create('int2', 'Interpolation');
model.func('int2').model('comp1');
model.func('int2').set('source', 'file');
model.func('int2').set('filename', 'vented_loudspeaker_enclosure_Lb.txt');
model.func('int2').importData;
model.func('int2').set('funcname', 'Lb');
model.func('int2').setIndex('argunit', 'Hz', 0);
model.func('int2').setIndex('fununit', 'H', 0);

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').set('opname', 'av_coil');
model.cpl('aveop1').selection.named('sel2');

model.param.set('V0', '3.55[V]');
model.param.descr('V0', 'Driving Voltage');
model.param.set('BL', '10.48[N/A]');
model.param.descr('BL', 'Force factor from loudspeaker driver model');
model.param.set('f_loss', '40[Hz]');
model.param.descr('f_loss', 'Frequency at which loss factor is given');
model.param.set('omega_loss', '2*pi*f_loss');
model.param.descr('omega_loss', 'Angular frequency at which loss factor is given');
model.param.set('fmax', '3.55[kHz]');
model.param.descr('fmax', 'Maximal study frequency');
model.param.set('c0', '343[m/s]');
model.param.descr('c0', 'Speed of sound in air');
model.param.set('lam0', 'c0/fmax');
model.param.descr('lam0', 'Minimum wave length');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('v0', 'av_coil(solid.u_tX)');
model.variable('var1').descr('v0', 'Coil velocity');
model.variable('var1').set('Zb', 'Rb(freq)+acpr.iomega*Lb(freq)');
model.variable('var1').descr('Zb', 'Blocked coil impedance');
model.variable('var1').set('Fe', 'BL*V0/Zb-v0*BL^2/Zb');
model.variable('var1').descr('Fe', 'Electric driving force');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat2').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat2').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat2').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat2').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat2').propertyGroup.create('Swift', 'Swift');
model.material('mat2').propertyGroup.create('Voce', 'Voce');
model.material('mat2').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat2').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat2').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('Norton', 'Norton');
model.material('mat2').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat2').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat2').label('Structural steel');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat2').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat2').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat2').set('noise', true);
model.material('mat2').set('fresnel', 0.9);
model.material('mat2').set('roughness', 0.3);
model.material('mat2').set('metallic', 0);
model.material('mat2').set('pearl', 0);
model.material('mat2').set('diffusewrap', 0);
model.material('mat2').set('clearcoat', 0);
model.material('mat2').set('reflectance', 0);
model.material('mat2').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat2').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat2').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat2').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat2').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat2').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat2').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat2').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat2').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat2').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat2').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat2').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat2').propertyGroup('Enu').addInput('temperature');
model.material('mat2').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat2').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat2').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat2').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat2').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat2').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat2').propertyGroup('Ludwik').addInput('temperature');
model.material('mat2').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat2').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat2').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat2').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat2').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat2').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat2').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat2').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat2').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat2').propertyGroup('Voce').addInput('temperature');
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat2').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat2').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat2').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat2').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat2').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat2').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat2').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat2').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat2').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat2').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat2').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat2').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat2').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat2').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat3').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat3').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat3').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat3').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat3').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat3').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat3').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat3').propertyGroup.create('Swift', 'Swift');
model.material('mat3').propertyGroup.create('Voce', 'Voce');
model.material('mat3').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat3').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat3').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat3').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat3').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat3').propertyGroup.create('Norton', 'Norton');
model.material('mat3').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat3').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat3').label('Structural steel 1');
model.material('mat3').set('family', 'custom');
model.material('mat3').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat3').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat3').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat3').set('noise', true);
model.material('mat3').set('fresnel', 0.9);
model.material('mat3').set('roughness', 0.3);
model.material('mat3').set('metallic', 0);
model.material('mat3').set('pearl', 0);
model.material('mat3').set('diffusewrap', 0);
model.material('mat3').set('clearcoat', 0);
model.material('mat3').set('reflectance', 0);
model.material('mat3').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat3').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat3').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat3').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat3').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat3').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat3').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat3').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat3').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat3').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat3').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat3').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat3').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat3').propertyGroup('Enu').addInput('temperature');
model.material('mat3').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat3').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat3').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat3').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat3').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat3').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat3').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat3').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat3').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat3').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat3').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat3').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat3').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat3').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat3').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat3').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat3').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat3').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat3').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat3').propertyGroup('Ludwik').addInput('temperature');
model.material('mat3').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat3').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat3').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat3').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat3').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat3').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat3').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat3').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat3').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat3').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat3').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat3').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat3').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat3').propertyGroup('Voce').addInput('temperature');
model.material('mat3').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat3').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat3').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat3').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat3').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat3').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat3').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat3').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat3').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat3').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat3').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat3').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat3').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat3').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat3').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat3').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat3').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat3').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat3').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat3').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat3').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat3').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat3').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat3').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').label('Composite');
model.material('mat4').propertyGroup('def').set('youngsmodulus', '2[GPa]');
model.material('mat4').propertyGroup('def').set('poissonsratio', '0.42');
model.material('mat4').propertyGroup('def').set('density', '1200[kg/m^3]');
model.material('mat4').propertyGroup('def').set('lossfactor', '0.04');
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').label('Cloth');
model.material('mat5').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat5').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat5').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat5').propertyGroup('def').set('youngsmodulus', '0.58[GPa]');
model.material('mat5').propertyGroup('def').set('poissonsratio', '0.3');
model.material('mat5').propertyGroup('def').set('density', '650[kg/m^3]');
model.material.create('mat6', 'Common', 'comp1');
model.material('mat6').label('Foam');
model.material('mat6').propertyGroup('def').set('youngsmodulus', '5[MPa]');
model.material('mat6').propertyGroup('def').set('poissonsratio', '0.4');
model.material('mat6').propertyGroup('def').set('density', '67[kg/m^3]');
model.material.create('mat7', 'Common', 'comp1');
model.material('mat7').label('Coil');
model.material('mat7').propertyGroup('def').set('lossfactor', '0.05');
model.material('mat7').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('youngsmodulus', '110[GPa]');
model.material('mat7').propertyGroup('def').set('poissonsratio', '0.35');
model.material('mat7').propertyGroup('def').set('density', '4500[kg/m^3]');
model.material.create('mat8', 'Common', 'comp1');
model.material('mat8').label('Glass Fiber');
model.material('mat8').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat8').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat8').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat8').propertyGroup('def').set('youngsmodulus', '70[GPa]');
model.material('mat8').propertyGroup('def').set('poissonsratio', '0.33');
model.material('mat8').propertyGroup('def').set('density', '2000[kg/m^3]');
model.material('mat8').propertyGroup('def').set('lossfactor', '0.04');
model.material.create('mat9', 'Common', 'comp1');
model.material('mat9').propertyGroup.create('RemanentFluxDensity', 'Remanent flux density');
model.material('mat9').label('Generic Ferrite');
model.material('mat9').propertyGroup('def').set('lossfactor', '0.01');
model.material('mat9').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat9').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat9').propertyGroup('def').set('poissonsratio', '0.3');
model.material('mat9').propertyGroup('def').set('youngsmodulus', '200[GPa]');
model.material('mat9').propertyGroup('def').set('density', '5000[kg/m^3]');
model.material('mat9').propertyGroup('RemanentFluxDensity').set('murec', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat9').propertyGroup('RemanentFluxDensity').set('normBr', '0.4[T]');
model.material.create('mat10', 'Common', 'comp1');
model.material('mat10').label('Fiberboard');
model.material('mat10').propertyGroup('def').set('density', '');
model.material('mat10').propertyGroup('def').set('poissonsratio', '');
model.material('mat10').propertyGroup('def').set('youngsmodulus', '');
model.material('mat10').propertyGroup('def').set('lossfactor', '');
model.material('mat10').propertyGroup('def').set('density', '900[kg/m^3]');
model.material('mat10').propertyGroup('def').set('poissonsratio', '0.3');
model.material('mat10').propertyGroup('def').set('youngsmodulus', '4[GPa]');
model.material('mat10').propertyGroup('def').set('lossfactor', '0.07');
model.material('mat1').selection.all;
model.material('mat1').selection.allVoids;
model.material('mat2').selection.named('sel5');
model.material('mat3').selection.geom('geom1', 2);
model.material('mat3').selection.named('sel13');
model.material('mat4').selection.geom('geom1', 2);
model.material('mat4').selection.named('sel9');
model.material('mat5').selection.geom('geom1', 2);
model.material('mat5').selection.named('sel10');
model.material('mat6').selection.geom('geom1', 2);
model.material('mat6').selection.named('sel11');
model.material('mat7').selection.named('sel2');
model.material('mat8').selection.geom('geom1', 2);
model.material('mat8').selection.named('sel12');
model.material('mat9').selection.named('sel6');
model.material('mat10').selection.named('sel7');

model.physics('acpr').selection.named('dif1');
model.physics('acpr').create('sym1', 'Symmetry', 2);
model.physics('acpr').feature('sym1').selection.named('box1');
model.physics('acpr').create('nra1', 'NarrowRegionAcousticsModel', 3);
model.physics('acpr').feature('nra1').selection.named('sel3');
model.physics('acpr').feature('nra1').set('DuctType', 'Slit');
model.physics('acpr').feature('nra1').set('h', '0.4[mm]');
model.physics('acpr').create('nra2', 'NarrowRegionAcousticsModel', 3);
model.physics('acpr').feature('nra2').selection.named('sel4');
model.physics('acpr').feature('nra2').set('DuctType', 'Slit');
model.physics('acpr').feature('nra2').set('h', '0.2[mm]');
model.physics('pabe').selection.set([]);
model.physics('pabe').selection.allVoids;
model.physics('pabe').prop('Symmetry').setIndex('sym2', 'even', 0);
model.physics('solid').selection.named('uni1');
model.physics('solid').create('sym1', 'SymmetrySolid', 2);
model.physics('solid').feature('sym1').selection.named('box1');
model.physics('solid').feature('lemm1').create('dmp1', 'Damping', 3);
model.physics('solid').feature('lemm1').feature('dmp1').set('DampingType', 'IsotropicLossFactor');
model.physics('solid').create('bl1', 'BodyLoad', 3);
model.physics('solid').feature('bl1').selection.named('sel5');
model.physics('solid').feature('bl1').set('LoadType', 'TotalForce');
model.physics('solid').feature('bl1').set('Ftot', {'-0.5*Fe' '0' '0'});
model.physics('solid').create('bl2', 'BodyLoad', 3);
model.physics('solid').feature('bl2').selection.named('sel2');
model.physics('solid').feature('bl2').set('LoadType', 'TotalForce');
model.physics('solid').feature('bl2').set('Ftot', {'0.5*Fe' '0' '0'});
model.physics('shell').selection.named('uni3');
model.physics('shell').feature('emm1').create('dmp1', 'Damping', 2);
model.physics('shell').feature('emm1').feature('dmp1').selection.named('uni3');
model.physics('shell').feature('emm1').feature('dmp1').set('DampingType', 'IsotropicLossFactor');
model.physics('shell').feature('emm1').create('dmp2', 'Damping', 2);
model.physics('shell').feature('emm1').feature('dmp2').selection.named('sel10');
model.physics('shell').feature('emm1').feature('dmp2').set('beta_dK', '0.14/omega_loss');
model.physics('shell').feature('emm1').create('dmp3', 'Damping', 2);
model.physics('shell').feature('emm1').feature('dmp3').selection.named('sel11');
model.physics('shell').feature('emm1').feature('dmp3').set('beta_dK', '0.46/omega_loss');
model.physics('shell').feature('to1').set('d', '1[mm]');
model.physics('shell').create('to2', 'ThicknessOffset', 2);
model.physics('shell').feature('to2').selection.named('sel10');
model.physics('shell').feature('to2').set('d', '0.4[mm]');
model.physics('shell').create('to3', 'ThicknessOffset', 2);
model.physics('shell').feature('to3').selection.named('sel11');
model.physics('shell').feature('to3').set('d', '1.5[mm]');
model.physics('shell').create('to4', 'ThicknessOffset', 2);
model.physics('shell').feature('to4').selection.named('sel12');
model.physics('shell').feature('to4').set('d', '0.2[mm]');
model.physics('shell').create('to5', 'ThicknessOffset', 2);
model.physics('shell').feature('to5').selection.named('sel13');
model.physics('shell').feature('to5').set('d', '0.8[mm]');
model.physics('shell').create('sym1', 'SymmetrySolid1', 1);
model.physics('shell').feature('sym1').selection.named('box2');

model.material('mat2').propertyGroup('def').set('lossfactor', {'0.01'});
model.material('mat3').propertyGroup('def').set('lossfactor', {'0.01'});

model.multiphysics.create('asb1', 'AcousticStructureBoundary', 'geom1', 2);
model.multiphysics('asb1').selection.all;
model.multiphysics.create('asb2', 'AcousticStructureBoundary', 'geom1', 2);
model.multiphysics('asb2').selection.all;
model.multiphysics('asb2').set('Structure_physics', 'shell');
model.multiphysics.create('asb3', 'AcousticStructureBoundary', 'geom1', 2);
model.multiphysics('asb3').selection.named('dif2');
model.multiphysics('asb3').set('Acoustics_physics', 'pabe');
model.multiphysics.create('asb4', 'AcousticStructureBoundary', 'geom1', 2);
model.multiphysics('asb4').selection.named('dif2');
model.multiphysics('asb4').set('Acoustics_physics', 'pabe');
model.multiphysics('asb4').set('Structure_physics', 'shell');
model.multiphysics.create('aab1', 'AcousticAcousticBoundary', 'geom1', 2);
model.multiphysics('aab1').selection.set([277]);
model.multiphysics.create('sshc1', 'SolidShellConnection', 'geom1', -1);
model.multiphysics('sshc1').set('connectionSettings', 'sharedBnd');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.named('dif3');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([165 270 309 310 311 312 314 340 346 348 462 479 481 485 489 510]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 2);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([328 329 498 499]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 10);
model.mesh('mesh1').feature('map1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([219 220 222 224 270 504 505]);
model.mesh('mesh1').feature('map1').create('dis4', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis4').selection.set([517 519]);
model.mesh('mesh1').feature('map1').feature('dis4').set('numelem', 3);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'lam0/4');
model.mesh('mesh1').feature('size').set('hmin', '2[mm]');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.named('uni2');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.set([1 2 3 4 5 6 8 10 30 31 32 33 34 35 36 37 38 39 40 41 42]);
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 2);
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').set('optlevel', 'high');
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftet1').feature('size1').selection.named('sel9');
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', '8[mm]');
model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Complete Study');
model.study('std1').setGenPlots(false);
model.study('std1').feature('freq').set('plist', '{20, 22.4, 25, 28, 31.5, 35.5, 40, 45, 50, 56, 63, 71, 80, 90, 100, 112, 125, 140, 160, 180, 200, 224, 250, 280, 315, 355, 400, 450, 500, 560, 630, 710, 800, 900, 1e3, 1.12e3, 1.25e3, 1.4e3, 1.6e3, 1.8e3, 2e3, 2.24e3, 2.5e3, 2.8e3, 3.15e3, 3.55e3}');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'{20, 22.4, 25, 28, 31.5, 35.5, 40, 45, 50, 56, 63, 71, 80, 90, 100, 112, 125, 140, 160, 180, 200, 224, 250, 280, 315, 355, 400, 450, 500, 560, 630, 710, 800, 900, 1e3, 1.12e3, 1.25e3, 1.4e3, 1.6e3, 1.8e3, 2e3, 2.24e3, 2.5e3, 2.8e3, 3.15e3, 3.55e3}'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').create('iDef', 'Iterative');
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 500);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with SAI and Direct Precon.) (aab1_asb4_asb1_sshc1_asb3_asb2) (Merged)');
model.sol('sol1').feature('s1').feature('i1').create('sai1', 'SAI');
model.sol('sol1').feature('s1').feature('i1').feature('sai1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('sai1').set('hybridvar', {'comp1_p2' 'comp1_pabe_p_down' 'comp1_pabe_p_up' 'comp1_pabe_bpam1_bemflux'});
model.sol('sol1').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_p'});
model.sol('sol1').feature('s1').feature('i1').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('hybridvar', {'comp1_u' 'comp1_u2' 'comp1_ar'});
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (aab1_asb4_asb1_sshc1_asb3_asb2)');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 200);
model.sol('sol1').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with Direct Precon.) (aab1_asb4_asb1_sshc1_asb3_asb2)');
model.sol('sol1').feature('s1').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('hybridvar', {'comp1_p' 'comp1_p2' 'comp1_pabe_p_down' 'comp1_pabe_p_up' 'comp1_pabe_bpam1_bemflux'});
model.sol('sol1').feature('s1').feature('i2').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dp2').set('hybridvar', {'comp1_u' 'comp1_u2' 'comp1_ar'});
model.sol('sol1').feature('s1').feature('i2').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('dp2').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').feature('s1').feature.remove('iDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runFromTo('st1', 'v1');
model.sol('sol1').feature('s1').feature('d1').active(true);
model.sol('sol1').runAll;

model.result.dataset.create('grid1', 'Grid3D');
model.result.dataset('grid1').set('source', 'data');
model.result.dataset('grid1').set('parmin1', '-500[mm]');
model.result.dataset('grid1').set('parmax1', '500[mm]');
model.result.dataset('grid1').set('parmin2', '-500[mm]');
model.result.dataset('grid1').set('parmax2', '-0.1[mm]');
model.result.dataset('grid1').set('parmin3', '-400[mm]');
model.result.dataset('grid1').set('parmax3', '300[mm]');
model.result.dataset('grid1').set('res1', 100);
model.result.dataset('grid1').set('res2', 100);
model.result.dataset('grid1').set('res3', 100);
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 46, 0);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result('pg1').run;
model.result('pg1').label('Acoustic Pressure');
model.result('pg1').set('titletype', 'label');
model.result('pg1').set('edges', false);
model.result('pg1').run;
model.result('pg1').feature('surf1').set('expr', 'if(isnan(acpr.p_t),pabe.p_t_bnd,acpr.p_t)');
model.result('pg1').feature('surf1').create('def1', 'Deform');
model.result('pg1').run;
model.result('pg1').feature('surf1').feature('def1').set('expr', {'if(isnan(shell.disp),u,u2)' 'v' 'w'});
model.result('pg1').feature('surf1').feature('def1').setIndex('expr', 'if(isnan(shell.disp),v,v2)', 1);
model.result('pg1').feature('surf1').feature('def1').setIndex('expr', 'if(isnan(shell.disp),w,w2)', 2);
model.result('pg1').run;
model.result('pg1').create('line1', 'Line');
model.result('pg1').feature('line1').set('expr', '0');
model.result('pg1').feature('line1').set('coloring', 'uniform');
model.result('pg1').feature('line1').set('color', 'black');
model.result('pg1').feature('line1').set('inheritplot', 'surf1');
model.result('pg1').feature('line1').set('inheritcolor', false);
model.result('pg1').feature('line1').set('inheritrange', false);
model.result('pg1').feature('line1').set('inherittubescale', false);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('line1').feature.copy('def1', 'pg1/surf1/def1');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('data', 'grid1');
model.result('pg1').feature('mslc1').set('expr', 'pabe.p_t');
model.result('pg1').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg1').feature('mslc1').set('xcoord', '-125[mm]');
model.result('pg1').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('mslc1').set('zcoord', 0);
model.result('pg1').feature('mslc1').set('inheritplot', 'surf1');

model.view('view2').set('showgrid', false);

model.result('pg1').run;
model.result('pg1').run;
model.result.duplicate('pg2', 'pg1');
model.result('pg2').run;
model.result('pg2').label('Sound Pressure Level');
model.result('pg2').run;
model.result('pg2').feature('surf1').set('expr', 'if(isnan(acpr.Lp),pabe.Lp_bnd,acpr.Lp)');
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').feature('surf1').set('resolution', 'extrafine');
model.result('pg2').run;
model.result('pg2').feature('mslc1').set('expr', 'pabe.Lp');
model.result('pg2').run;
model.result('pg2').run;
model.result.duplicate('pg3', 'pg2');
model.result('pg3').run;
model.result('pg3').label('Displacement');
model.result('pg3').run;
model.result('pg3').feature('surf1').set('expr', 'if(isnan(shell.disp),solid.disp,shell.disp)');
model.result('pg3').run;
model.result('pg3').feature.remove('mslc1');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 9, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 38, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 39, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 40, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 46, 0);
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Stress');
model.result('pg4').setIndex('looplevel', 18, 0);
model.result('pg4').selection.geom('geom1', 2);
model.result('pg4').selection.named('sel13');
model.result('pg4').set('applyselectiontodatasetedges', true);
model.result('pg4').run;
model.result('pg4').feature('surf1').set('expr', 'if(isnan(shell.mises),solid.mises,shell.mises)');
model.result('pg4').feature('surf1').set('unit', 'MPa');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg4').feature('surf1').feature('def1').set('scale', 350);
model.result('pg4').run;
model.result('pg4').feature('surf1').feature('def1').set('scaleactive', false);
model.result('pg2').set('applyselectiontodatasetedges', false);
model.result('pg2').run;
model.result.duplicate('pg5', 'pg2');
model.result('pg5').run;
model.result('pg5').label('Radiation Pattern');
model.result('pg5').run;
model.result('pg5').feature.remove('mslc1');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').create('rp1', 'RadiationPattern');
model.result('pg5').feature('rp1').set('expr', '1000[mm]');
model.result('pg5').feature('rp1').set('useradiusascolor', false);
model.result('pg5').feature('rp1').set('colorexpr', 'pabe.Lp');
model.result('pg5').feature('rp1').set('thetadisc', 160);
model.result('pg5').feature('rp1').set('phidisc', 320);
model.result('pg5').feature('rp1').set('anglerestr', 'manual');
model.result('pg5').feature('rp1').set('phirange', -180);
model.result('pg5').feature('rp1').set('sphere', 'manual');
model.result('pg5').feature('rp1').set('radius', '1000[mm]');
model.result('pg5').feature('rp1').set('grid', 'fine');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('surf1').set('colorlegend', false);
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').run;
model.result('pg5').setIndex('looplevel', 17, 0);
model.result('pg5').run;
model.result('pg5').setIndex('looplevel', 18, 0);
model.result('pg5').run;
model.result('pg5').setIndex('looplevel', 46, 0);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Sensitivity at 1 m.');
model.result('pg6').set('titletype', 'label');
model.result('pg6').create('oct1', 'OctaveBand');
model.result('pg6').feature('oct1').set('quantity', 'bandpower');
model.result('pg6').feature('oct1').set('markerpos', 'datapoints');
model.result('pg6').feature('oct1').set('linewidth', 'preference');
model.result('pg6').feature('oct1').selection.geom('geom1');
model.result('pg6').feature('oct1').set('expr', 'at3_spatial(1[m],0,0,pabe.p_t,''minc'')');
model.result('pg6').feature('oct1').set('quantity', 'continuous');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Directivity xy-plane');
model.result('pg7').set('titletype', 'label');
model.result('pg7').create('dir1', 'Directivity');
model.result('pg7').feature('dir1').set('linewidth', 'preference');
model.result('pg7').feature('dir1').set('expr', 'pabe.Lp_t');
model.result('pg7').feature('dir1').set('phidisc', 180);
model.result('pg7').feature('dir1').set('anglerestr', 'manual');
model.result('pg7').feature('dir1').set('phimin', -180);
model.result('pg7').feature('dir1').set('radius', '1000[mm]');
model.result('pg7').feature('dir1').set('levelmethod', 'levels');
model.result('pg7').feature('dir1').set('levels', '9 6 3 1.5 -1.5 -3 -6 -9 -12 -18 -24');
model.result('pg7').run;
model.result('pg7').set('xlog', true);
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('Directivity xz-plane');
model.result('pg8').run;
model.result('pg8').feature('dir1').set('normal', [0 -1 0]);
model.result('pg8').run;

model.study.create('std2');
model.study('std2').create('eig', 'Eigenfrequency');
model.study('std2').feature('eig').set('plotgroup', 'Default');
model.study('std2').feature('eig').set('chkeigregion', true);
model.study('std2').feature('eig').set('conrad', '1');
model.study('std2').feature('eig').set('conradynhm', '1');
model.study('std2').feature('eig').set('storefact', false);
model.study('std2').feature('eig').set('solnum', 'auto');
model.study('std2').feature('eig').set('notsolnum', 'auto');
model.study('std2').feature('eig').set('outputmap', {});
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').setSolveFor('/physics/acpr', false);
model.study('std2').feature('eig').setSolveFor('/physics/pabe', false);
model.study('std2').feature('eig').setSolveFor('/physics/solid', true);
model.study('std2').feature('eig').setSolveFor('/physics/shell', true);
model.study('std2').feature('eig').setSolveFor('/multiphysics/asb1', false);
model.study('std2').feature('eig').setSolveFor('/multiphysics/asb2', false);
model.study('std2').feature('eig').setSolveFor('/multiphysics/asb3', false);
model.study('std2').feature('eig').setSolveFor('/multiphysics/asb4', false);
model.study('std2').feature('eig').setSolveFor('/multiphysics/aab1', false);
model.study('std2').feature('eig').setSolveFor('/multiphysics/sshc1', true);
model.study('std2').feature('eig').set('neigsactive', true);
model.study('std2').feature('eig').set('neigs', 20);
model.study('std2').feature('eig').set('eigwhich', 'lr');
model.study('std2').label('Study 2 - Eigenfrequency');
model.study('std2').setGenPlots(false);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'eig');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol2').feature('v1').set('control', 'eig');
model.sol('sol2').create('e1', 'Eigenvalue');
model.sol('sol2').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol2').feature('e1').set('eigvfunscaleparam', '6.0E-7');
model.sol('sol2').feature('e1').set('control', 'eig');
model.sol('sol2').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result('pg3').run;
model.result.duplicate('pg9', 'pg3');
model.result('pg9').run;
model.result('pg9').label('Mode Shape');
model.result('pg9').set('data', 'dset2');
model.result('pg9').run;
model.result('pg9').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg9').run;
model.result('pg9').run;
model.result('pg9').run;
model.result('pg9').set('looplevel', [2]);
model.result('pg9').run;
model.result('pg9').set('looplevel', [6]);
model.result('pg9').run;
model.result('pg9').set('looplevel', [9]);
model.result('pg9').run;
model.result('pg5').run;

model.title('Loudspeaker Driver in a Vented Enclosure');

model.description(['This example of a boxed loudspeaker lets you apply a nominal driving voltage and extract the resulting sound pressure level in the outside room as a function of the frequency. The electromagnetic properties of the driver are supplied from the Loudspeaker Driver model (available with the AC/DC Module). The example uses the Acoustic' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Shell Interaction, Frequency Domain multiphysics interface and therefore requires the Structural Mechanics Module.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('vented_loudspeaker_enclosure.mph');

model.modelNode.label('Components');

out = model;
