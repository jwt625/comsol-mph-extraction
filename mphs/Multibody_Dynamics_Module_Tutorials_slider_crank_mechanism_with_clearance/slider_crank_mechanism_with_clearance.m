function out = model
%
% slider_crank_mechanism_with_clearance.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/mbd', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('m1', '0.3[kg]', 'Mass of crank');
model.param.set('m2', '0.21[kg]', 'Mass of connecting rod');
model.param.set('m3', '0.14[kg]', 'Mass of slider');
model.param.set('I1', '0.00001[kg*m^2]', 'Mass moment of inertia of crank');
model.param.set('I2', '0.00025[kg*m^2]', 'Mass moment of inertia of connecting rod');
model.param.set('C', '0.0005[m]', 'Clearance between journal and bearing');
model.param.set('omega', '5000*2*pi[rad]/60[s]', 'Angular velocity of crank');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'slider_crank_mechanism_with_clearance.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').run('fin');
model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').label('Support');
model.geom('geom1').feature('sel1').selection('selection').set('fin', 1);
model.geom('geom1').feature('sel1').set('color', 'custom');
model.geom('geom1').feature('sel1').set('customcolor', [0.501960813999176 0.501960813999176 0.501960813999176]);
model.geom('geom1').run('sel1');
model.geom('geom1').feature.duplicate('sel2', 'sel1');
model.geom('geom1').feature('sel2').label('Crank');
model.geom('geom1').feature('sel2').selection('selection').clear('fin');
model.geom('geom1').feature('sel2').selection('selection').set('fin', [2 3]);
model.geom('geom1').feature('sel2').set('customcolor', [0.8196078538894653 1 0.10980392247438431]);
model.geom('geom1').run('sel2');
model.geom('geom1').feature.duplicate('sel3', 'sel2');
model.geom('geom1').feature('sel3').label('Connecting Rod');
model.geom('geom1').feature('sel3').selection('selection').clear('fin');
model.geom('geom1').feature('sel3').selection('selection').set('fin', [4 5 6]);
model.geom('geom1').feature('sel3').set('customcolor', [1 0.501960813999176 0.501960813999176]);
model.geom('geom1').run('sel3');
model.geom('geom1').feature.duplicate('sel4', 'sel3');
model.geom('geom1').feature('sel4').label('Slider');
model.geom('geom1').feature('sel4').selection('selection').clear('fin');
model.geom('geom1').feature('sel4').selection('selection').set('fin', 7);
model.geom('geom1').feature('sel4').set('customcolor', [0 1 1]);
model.geom('geom1').run('sel4');
model.geom('geom1').create('unisel1', 'UnionSelection');
model.geom('geom1').feature('unisel1').label('Support and Crank');
model.geom('geom1').feature('unisel1').set('input', {'sel1' 'sel2'});
model.geom('geom1').run('unisel1');
model.geom('geom1').create('adjsel1', 'AdjacentSelection');
model.geom('geom1').feature('adjsel1').label('Connecting Rod Boundaries');
model.geom('geom1').feature('adjsel1').set('input', {'sel3'});
model.geom('geom1').run('adjsel1');
model.geom('geom1').create('sel5', 'ExplicitSelection');
model.geom('geom1').feature('sel5').label('Journal Boundaries');
model.geom('geom1').feature('sel5').selection('selection').init(2);
model.geom('geom1').feature('sel5').selection('selection').set('fin', [39 40 41 47 48]);
model.geom('geom1').run('sel5');
model.geom('geom1').create('difsel1', 'DifferenceSelection');
model.geom('geom1').feature('difsel1').label('Connecting Rod without Journal');
model.geom('geom1').feature('difsel1').set('entitydim', 2);
model.geom('geom1').feature('difsel1').set('add', {'adjsel1'});
model.geom('geom1').feature('difsel1').set('subtract', {'sel5'});

model.pair.create('p3', 'Identity', 'geom1');

model.geom('geom1').run;

model.pair('p3').source.named('geom1_sel5');
model.pair('p3').source.set([39 40 47 48]);
model.pair('p3').destination.set([54 55]);

model.func.create('step1', 'Step');
model.func('step1').model('comp1');
model.func('step1').set('location', '5e-4[s]');
model.func('step1').set('smooth', '1e-3');

model.physics('mbd').prop('AutoModeling').set('MassMI', true);
model.physics('mbd').prop('AutoModeling').runCommand('createRigidDomains');
model.physics('mbd').feature('rd1').label('Rigid Material: Support');
model.physics('mbd').feature('rd1').create('fix1', 'FixedConstraint', -1);
model.physics('mbd').feature('rd2').label('Rigid Material: Crank');
model.physics('mbd').feature('rd2').feature('mmi1').set('mt', 'm1');
model.physics('mbd').feature('rd2').feature('mmi1').set('mi', {'I1' '0' '0' '0' 'I1' '0' '0' '0' 'I1'});
model.physics('mbd').feature('rd3').label('Rigid Material: Connecting Rod');
model.physics('mbd').feature('rd3').feature('mmi1').set('mt', 'm2');
model.physics('mbd').feature('rd3').feature('mmi1').set('mi', {'I2' '0' '0' '0' 'I2' '0' '0' '0' 'I2'});
model.physics('mbd').feature('rd4').label('Rigid Material: Slider');
model.physics('mbd').feature('rd4').feature('mmi1').set('mt', 'm3');
model.physics('mbd').feature('rd4').create('pdr1', 'PrescribedDispRot', -1);
model.physics('mbd').feature('rd4').feature('pdr1').setIndex('Direction', true, 1);
model.physics('mbd').feature('rd4').feature('pdr1').setIndex('Direction', true, 2);
model.physics('mbd').feature('rd4').feature('pdr1').set('RotationType', 'ConstrainedRotationGroup');
model.physics('mbd').feature('rd4').feature('pdr1').setIndex('ConstrainedRotation', true, 0);
model.physics('mbd').feature('rd4').feature('pdr1').setIndex('ConstrainedRotation', true, 1);
model.physics('mbd').feature('rd4').feature('pdr1').setIndex('ConstrainedRotation', true, 2);
model.physics('mbd').prop('AutoModeling').runCommand('createJoints');
model.physics('mbd').feature('hgj1').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('hgj1').feature('pm1').set('PrescribedMotionThroughRotational', 'AngularVelocity');
model.physics('mbd').feature('hgj1').feature('pm1').set('omegap', 'omega*step1(t)');
model.physics('mbd').feature('hgj1').feature('pm1').set('WeakConstraints', true);
model.physics('mbd').prop('Results').set('ReferenceFrame', 'rd4');

model.mesh('mesh1').autoMeshSize(2);
model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('size1').selection.set([2 4]);
model.mesh('mesh1').feature('size1').set('hauto', 1);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').run;

model.study('std1').label('Study 1: Hinge Joint');
model.study('std1').feature('time').set('tlist', 'range(0,0.00001,0.025)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj1_pm1_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.002246385986423527');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj1_pm1_RM').set('scaleval', '1e8*(0.1*0.22463859864235272)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.22463859864235272');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.00001,0.025)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj1_pm1_RM').set('scaleval', '1e8*(0.1*0.22463859864235272)^3*1000');
model.sol('sol1').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Displacement (mbd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 2501, 0);
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (mbd)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 2501, 0);
model.result('pg2').set('defaultPlotID', 'velocity');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').label('Volume');
model.result('pg2').feature('vol1').set('expr', 'mod(dom,10)');
model.result('pg2').feature('vol1').set('unit', '1');
model.result('pg2').feature('vol1').set('colortable', 'Cyclic');
model.result('pg2').feature('vol1').set('colorlegend', false);
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg2').feature('vol1').feature.create('def1', 'Deform');
model.result('pg2').feature('vol1').feature('def1').label('Deformation');
model.result('pg2').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg2').feature.create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').label('Arrow Line');
model.result('pg2').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY' 'mbd.u_tZ'});
model.result('pg2').feature('arwl1').set('placement', 'elements');
model.result('pg2').feature('arwl1').set('data', 'parent');
model.result('pg2').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg2').feature('arwl1').feature('def1').label('Deformation');
model.result('pg2').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg1').run;

model.view('view1').set('showgrid', false);

model.result('pg1').run;
model.result('pg1').label('Displacement: Hinge Joint');
model.result('pg2').run;
model.result('pg2').label('Velocity: Hinge Joint');
model.result('pg1').run;
model.result.duplicate('pg3', 'pg1');
model.result('pg3').run;
model.result('pg3').label('Relative Displacement: Hinge Joint');
model.result('pg3').set('view', 'new');
model.result('pg3').set('frametype', 'material');
model.result('pg3').run;
model.result('pg3').feature('surf1').set('expr', 'mbd.disp_ref');
model.result('pg3').feature('surf1').set('descr', 'Displacement magnitude, reference frame');
model.result('pg3').feature('surf1').set('colortable', 'Spectrum');
model.result('pg3').feature('surf1').create('sel1', 'Selection');
model.result('pg3').run;
model.result('pg3').feature('surf1').feature('def1').set('expr', {'u_ref' 'v_ref' 'w_ref'});
model.result('pg3').feature('surf1').feature('def1').set('descr', 'Displacement field, reference frame (spatial frame)');
model.result('pg3').run;
model.result('pg3').feature('surf1').feature('sel1').selection.named('geom1_sel5');
model.result('pg3').run;
model.result('pg3').create('con1', 'Contour');
model.result('pg3').feature('con1').set('expr', 'mbd.disp_ref');
model.result('pg3').feature('con1').set('titletype', 'none');
model.result('pg3').feature('con1').set('colortable', 'Spectrum');
model.result('pg3').feature('con1').set('colorlegend', false);
model.result('pg3').feature('con1').create('def1', 'Deform');
model.result('pg3').run;
model.result('pg3').feature('con1').feature('def1').set('expr', {'u_ref' 'v_ref' 'w_ref'});
model.result('pg3').feature('con1').feature('def1').set('descr', 'Displacement field, reference frame (spatial frame)');
model.result('pg3').feature('con1').feature('def1').set('scaleactive', true);
model.result('pg3').feature('con1').feature('def1').set('scale', 1);
model.result('pg3').run;
model.result('pg3').feature('con1').create('sel1', 'Selection');
model.result('pg3').feature('con1').feature('sel1').selection.named('geom1_sel5');
model.result('pg3').run;
model.result('pg3').feature.duplicate('surf2', 'surf1');
model.result('pg3').run;
model.result('pg3').feature('surf2').set('expr', 'dom');
model.result('pg3').feature('surf2').set('descr', 'Entity index');
model.result('pg3').feature('surf2').set('titletype', 'none');
model.result('pg3').feature('surf2').set('coloring', 'uniform');
model.result('pg3').feature('surf2').set('color', 'custom');
model.result('pg3').feature('surf2').set('customcolor', [1 0.501960813999176 0.501960813999176]);
model.result('pg3').run;
model.result('pg3').feature('surf2').feature('sel1').selection.named('geom1_difsel1');
model.result('pg3').run;
model.result('pg3').create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('expr', 'dom');
model.result('pg3').feature('vol1').set('descr', 'Entity index');
model.result('pg3').feature('vol1').set('titletype', 'none');
model.result('pg3').feature('vol1').set('coloring', 'uniform');
model.result('pg3').feature('vol1').set('color', 'cyan');
model.result('pg3').feature('vol1').create('sel1', 'Selection');
model.result('pg3').feature('vol1').feature('sel1').selection.named('geom1_sel4');
model.result('pg3').run;
model.result('pg3').feature('vol1').create('tran1', 'Transparency');
model.result('pg3').run;
model.result('pg3').feature('vol1').feature('tran1').set('transparency', 0.75);
model.result('pg3').run;
model.result('pg3').feature('vol1').create('def1', 'Deform');
model.result('pg3').run;
model.result('pg3').feature('vol1').feature('def1').set('expr', {'u_ref' 'v_ref' 'w_ref'});
model.result('pg3').feature('vol1').feature('def1').set('descr', 'Displacement field, reference frame (spatial frame)');
model.result('pg3').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg3').feature('vol1').feature('def1').set('scale', 1);
model.result('pg3').run;
model.result('pg3').feature.duplicate('vol2', 'vol1');
model.result('pg3').run;
model.result('pg3').feature('vol2').set('coloring', 'colortable');
model.result('pg3').feature('vol2').set('colortable', 'TrafficLight');
model.result('pg3').feature('vol2').set('colorlegend', false);
model.result('pg3').run;
model.result('pg3').feature('vol2').feature('sel1').selection.set([]);
model.result('pg3').feature('vol2').feature('sel1').selection.named('geom1_unisel1');
model.result('pg3').run;
model.result('pg3').feature('vol2').feature.remove('tran1');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').run;

model.view('view2').set('showgrid', false);
model.view('view2').set('locked', true);
model.view('view2').camera.set('zoomanglefull', '4.7251982688903811');
model.view('view2').camera.setIndex('position', '-0.191074997186660771', 0);
model.view('view2').camera.setIndex('position', '-1.01299560070037841', 1);
model.view('view2').camera.setIndex('position', 0.6230092048645021, 2);
model.view('view2').camera.setIndex('target', 0.09608218073844911, 0);
model.view('view2').camera.setIndex('target', '-0.0273823738098144531', 1);
model.view('view2').camera.setIndex('target', '0.0070533752441406251', 2);
model.view('view2').camera.setIndex('up', '0.143914073705673221', 0);
model.view('view2').camera.setIndex('up', '0.493958145380020141', 1);
model.view('view2').camera.setIndex('up', '0.85749256610870361', 2);
model.view('view2').camera.setIndex('rotationpoint', '0.178479343652725221', 0);
model.view('view2').camera.setIndex('rotationpoint', '0.015010118484497071', 1);
model.view('view2').camera.setIndex('rotationpoint', '-0.0032202005386352541', 2);
model.view('view2').camera.setIndex('viewoffset', '-0.65249657630920411', 0);
model.view('view2').camera.setIndex('viewoffset', '-0.37386572360992431', 1);

model.physics('mbd').create('crj1', 'ClearanceJoint', -1);
model.physics('mbd').feature('crj1').set('Source', 'rd3');
model.physics('mbd').feature('crj1').set('SourcePoint', 'CentroidOfSelectedEntities');
model.physics('mbd').feature('crj1').feature('spb1').selection.named('geom1_sel5');
model.physics('mbd').feature('crj1').feature('spb1').selection.set([39 40 47 48]);
model.physics('mbd').feature('crj1').set('Destination', 'rd4');
model.physics('mbd').feature('crj1').set('c', 'C');
model.physics('mbd').feature('crj1').set('pj', 'mbd.crj1.Eequ*(0.1*mbd.diag)/100');

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/mbd', true);
model.study('std2').label('Study 2: Clearance Joint');
model.study('std2').feature('time').set('tlist', 'range(0,0.00001,0.025)');
model.study('std2').feature('time').set('useadvanceddisable', true);
model.study('std2').feature('time').set('disabledphysics', {'mbd/hgj3'});

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_hgj1_pm1_RM').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.002246385986423527');
model.sol('sol2').feature('v1').feature('comp1_mbd_hgj1_pm1_RM').set('scaleval', '1e8*(0.1*0.22463859864235272)^3');
model.sol('sol2').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.22463859864235272');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,0.00001,0.025)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 0.001);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol2').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('eventtol', 0.01);
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('minorder', 1);
model.sol('sol2').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol2').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol2').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol2').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol2').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol2').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('v1').feature('comp1_mbd_hgj1_pm1_RM').set('scaleval', '1e8*(0.1*0.22463859864235272)^3*1000');
model.sol('sol2').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol2').runAll;

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Displacement (mbd)');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 2501, 0);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 2501, 0);
model.result('pg4').set('defaultPlotID', 'displacement');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Surface');
model.result('pg4').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result('pg4').feature('surf1').feature.create('def1', 'Deform');
model.result('pg4').feature('surf1').feature('def1').label('Deformation');
model.result('pg4').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Velocity (mbd)');
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 2501, 0);
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 2501, 0);
model.result('pg5').set('defaultPlotID', 'velocity');
model.result('pg5').feature.create('vol1', 'Volume');
model.result('pg5').feature('vol1').label('Volume');
model.result('pg5').feature('vol1').set('expr', 'mod(dom,10)');
model.result('pg5').feature('vol1').set('unit', '1');
model.result('pg5').feature('vol1').set('colortable', 'Cyclic');
model.result('pg5').feature('vol1').set('colorlegend', false);
model.result('pg5').feature('vol1').set('data', 'parent');
model.result('pg5').feature('vol1').feature.create('def1', 'Deform');
model.result('pg5').feature('vol1').feature('def1').label('Deformation');
model.result('pg5').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg5').feature.create('arwl1', 'ArrowLine');
model.result('pg5').feature('arwl1').label('Arrow Line');
model.result('pg5').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY' 'mbd.u_tZ'});
model.result('pg5').feature('arwl1').set('placement', 'elements');
model.result('pg5').feature('arwl1').set('data', 'parent');
model.result('pg5').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg5').feature('arwl1').feature('def1').label('Deformation');
model.result('pg5').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg4').run;
model.result('pg4').label('Displacement: Clearance Joint');
model.result('pg5').run;
model.result('pg5').label('Velocity: Clearance Joint');
model.result('pg3').run;
model.result.duplicate('pg6', 'pg3');
model.result('pg6').run;
model.result('pg6').label('Relative Displacement: Clearance Joint');
model.result('pg6').set('data', 'dset2');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Slider Velocity');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('legendpos', 'upperleft');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').set('expr', {'mbd.rd4.u_tx'});
model.result('pg7').feature('glob1').set('descr', {'Rigid body velocity, x-component'});
model.result('pg7').feature('glob1').set('unit', {'m/s'});
model.result('pg7').feature('glob1').setIndex('unit', 'm/s', 0);
model.result('pg7').feature('glob1').setIndex('descr', 'Hinge joint', 0);
model.result('pg7').feature.duplicate('glob2', 'glob1');
model.result('pg7').run;
model.result('pg7').feature('glob2').set('data', 'dset2');
model.result('pg7').feature('glob2').setIndex('unit', 'm/s', 0);
model.result('pg7').feature('glob2').setIndex('descr', 'Clearance joint', 0);
model.result('pg7').run;
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Rigid body velocity (m/s)');
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('Slider Acceleration');
model.result('pg8').set('ylabel', 'Rigid body acceleration (m/s<sup>2</sup>)');
model.result('pg8').set('legendpos', 'upperright');
model.result('pg8').run;
model.result('pg8').feature('glob1').setIndex('expr', 'mbd.rd4.u_ttx', 0);
model.result('pg8').feature('glob1').setIndex('unit', 'm/s^2', 0);
model.result('pg8').feature('glob1').setIndex('descr', 'Hinge joint', 0);
model.result('pg8').run;
model.result('pg8').feature('glob2').setIndex('expr', 'mbd.rd4.u_ttx', 0);
model.result('pg8').feature('glob2').setIndex('unit', 'm/s^2', 0);
model.result('pg8').feature('glob2').setIndex('descr', 'Clearance joint', 0);
model.result('pg8').run;
model.result.duplicate('pg9', 'pg8');
model.result('pg9').run;
model.result('pg9').label('Reaction Moment');
model.result('pg9').set('ylabel', 'Reaction moment (N*m)');
model.result('pg9').run;
model.result('pg9').feature('glob1').setIndex('expr', 'mbd.hgj1.pm1.RM', 0);
model.result('pg9').feature('glob1').setIndex('unit', 'N*m', 0);
model.result('pg9').feature('glob1').setIndex('descr', 'Hinge joint', 0);
model.result('pg9').run;
model.result('pg9').feature('glob2').setIndex('expr', 'mbd.hgj1.pm1.RM', 0);
model.result('pg9').feature('glob2').setIndex('unit', 'N*m', 0);
model.result('pg9').feature('glob2').setIndex('descr', 'Clearance joint', 0);
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').run;
model.result('pg10').label('Journal Trajectory: Clearance Joint');
model.result('pg10').set('data', 'dset2');
model.result('pg10').set('titletype', 'label');
model.result('pg10').set('view', 'new');
model.result('pg10').set('edges', false);
model.result('pg10').create('pttraj1', 'PointTrajectories');
model.result('pg10').feature('pttraj1').set('plotdata', 'global');
model.result('pg10').feature('pttraj1').set('expr', {'mbd.crj1.dx' 'mbd.crj1.dy' 'mbd.crj1.dz'});
model.result('pg10').feature('pttraj1').set('linetype', 'tube');
model.result('pg10').feature('pttraj1').set('radiusexpr', '1e-8');
model.result('pg10').feature('pttraj1').set('tuberadiusscaleactive', true);
model.result('pg10').feature('pttraj1').set('tuberadiusscale', 500);
model.result('pg10').feature('pttraj1').create('col1', 'Color');
model.result('pg10').run;
model.result('pg10').feature('pttraj1').feature('col1').set('expr', 't');
model.result('pg10').feature('pttraj1').feature('col1').set('colortable', 'RainbowLight');
model.result('pg10').feature('pttraj1').feature('col1').set('colorlegend', false);
model.result.dataset.create('pc1', 'ParCurve3D');
model.result.dataset('pc1').set('data', 'dset2');
model.result.dataset('pc1').set('parmax1', '2*pi');
model.result.dataset('pc1').set('exprx', 'C*sin(s)');
model.result.dataset('pc1').set('exprz', 'C*cos(s)');
model.result('pg10').run;
model.result('pg10').create('line1', 'Line');
model.result('pg10').feature('line1').set('data', 'pc1');
model.result('pg10').feature('line1').set('expr', '1');
model.result('pg10').feature('line1').set('linetype', 'tube');
model.result('pg10').feature('line1').set('radiusexpr', '1e-8');
model.result('pg10').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg10').feature('line1').set('tuberadiusscale', 500);
model.result('pg10').feature('line1').set('coloring', 'uniform');
model.result('pg10').feature('line1').set('color', 'magenta');
model.result('pg10').run;

model.view('view3').set('showgrid', false);
model.view('view3').set('locked', true);
model.view('view3').camera.set('zoomanglefull', '17.1945991516113280');
model.view('view3').camera.setIndex('position', '-6.4744614064693451E-5', 0);
model.view('view3').camera.setIndex('position', '-0.0113180391490459441', 1);
model.view('view3').camera.setIndex('position', '-5.6613818742334841E-5', 2);
model.view('view3').camera.setIndex('target', '-6.4744614064693451E-5', 0);
model.view('view3').camera.setIndex('target', '5.0291419029235841E-8', 1);
model.view('view3').camera.setIndex('target', '-5.6613818742334841E-5', 2);
model.view('view3').camera.setIndex('up', '00', 0);
model.view('view3').camera.setIndex('up', '-4.3711388286737931E-8', 1);
model.view('view3').camera.setIndex('up', '01', 2);
model.view('view3').camera.setIndex('rotationpoint', '-6.4744614064693451E-5', 0);
model.view('view3').camera.setIndex('rotationpoint', 5.05775261672171E-8, 1);
model.view('view3').camera.setIndex('rotationpoint', '-5.6613818742334841E-5', 2);
model.view('view3').camera.setIndex('viewoffset', '00', 0);
model.view('view3').camera.set('viewoffset', {'00' '-0.0273865424096584321'});

model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Joint Force: Clearance Joint');
model.result('pg11').set('data', 'dset2');
model.result('pg11').set('titletype', 'label');
model.result('pg11').set('showlegends', false);
model.result('pg11').create('glob1', 'Global');
model.result('pg11').feature('glob1').set('markerpos', 'datapoints');
model.result('pg11').feature('glob1').set('linewidth', 'preference');
model.result('pg11').feature('glob1').set('expr', {'mbd.crj1.Fj'});
model.result('pg11').feature('glob1').set('descr', {'Joint force magnitude'});
model.result('pg11').feature('glob1').set('unit', {'N'});
model.result('pg11').run;
model.result.create('pg12', 'PolarGroup');
model.result('pg12').run;
model.result('pg12').label('Gap Distance: Clearance Joint');
model.result('pg12').set('data', 'dset2');
model.result('pg12').set('titletype', 'label');
model.result('pg12').set('showgrid', false);
model.result('pg12').set('showlegends', false);
model.result('pg12').create('glob1', 'Global');
model.result('pg12').feature('glob1').set('markerpos', 'datapoints');
model.result('pg12').feature('glob1').set('linewidth', 'preference');
model.result('pg12').feature('glob1').set('expr', {'mbd.crj1.gap'});
model.result('pg12').feature('glob1').set('descr', {'Gap distance'});
model.result('pg12').feature('glob1').set('unit', {'m'});
model.result('pg12').feature('glob1').set('xdata', 'expr');
model.result('pg12').feature('glob1').set('xdataexpr', 'mbd.hgj1.th');
model.result('pg12').feature('glob1').set('linewidth', 2);
model.result('pg12').feature.duplicate('glob2', 'glob1');
model.result('pg12').run;
model.result('pg12').feature('glob2').setIndex('expr', 0, 0);
model.result('pg12').feature('glob2').setIndex('unit', 1, 0);
model.result('pg12').feature('glob2').setIndex('descr', '', 0);
model.result('pg12').feature('glob2').set('linestyle', 'dotted');
model.result('pg12').feature('glob2').set('linecolor', 'magenta');
model.result('pg12').run;
model.result('pg12').feature('glob1').create('col1', 'Color');
model.result('pg12').run;
model.result('pg12').feature('glob1').feature('col1').set('expr', 't');
model.result('pg12').feature('glob1').feature('col1').set('colortable', 'RainbowLight');
model.result('pg12').run;
model.result('pg6').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').label('Displacement: Hinge Joint');
model.result.export('anim1').set('maxframes', 50);
model.result.export.duplicate('anim2', 'anim1');
model.result.export('anim2').showFrame;
model.result.export('anim2').label('Displacement: Clearance Joint');
model.result.export('anim2').set('plotgroup', 'pg4');
model.result.export('anim1').showFrame;
model.result.export.duplicate('anim3', 'anim1');
model.result.export('anim3').showFrame;
model.result.export('anim3').label('Relative Displacement: Hinge Joint');
model.result.export('anim3').set('plotgroup', 'pg3');
model.result.export.duplicate('anim4', 'anim3');
model.result.export('anim4').showFrame;
model.result.export('anim4').label('Relative Displacement: Clearance Joint');
model.result.export('anim4').set('plotgroup', 'pg6');
model.result.export.duplicate('anim5', 'anim4');
model.result.export('anim5').showFrame;
model.result.export('anim5').label('Journal Trajectory: Clearance Joint');
model.result.export('anim5').set('plotgroup', 'pg10');

model.study('std1').feature('time').set('useadvanceddisable', true);
model.study('std1').feature('time').set('disabledphysics', {'mbd/crj1'});

model.result('pg6').run;

model.title('Slider Crank Mechanism with Joint Clearance');

model.description(['This model simulates the dynamic behavior of a slider crank mechanism with a clearance joint. All the components of the mechanism are assumed rigid. Two hinge joints are used to connect the support, crank, and connecting rod to each other. To model a joint between connecting rod and slider, two different cases are considered. First case assumes the connecting rod' native2unicode(hex2dec({'20' '13'}), 'unicode') 'slider joint as a perfect hinge without any clearance. In the second case, a clearance joint is used which allows the connected components to move within the provided clearance distance. Transient analysis is performed to analyze the effect of joint clearance on slider velocity, slider acceleration, and crank moment.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('slider_crank_mechanism_with_clearance.mph');

model.modelNode.label('Components');

out = model;
