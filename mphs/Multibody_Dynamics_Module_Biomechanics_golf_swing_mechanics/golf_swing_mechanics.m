function out = model
%
% golf_swing_mechanics.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Biomechanics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/mbd', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('Ish', '0.8[kg*m^2]', 'Moment of inertia of shoulder');
model.param.set('Ia', '0.354[kg*m^2]', 'Moment of inertia of arm');
model.param.set('Ig', '0.01367[kg*m^2]', 'Moment of inertia of grip');
model.param.set('Ic', '0.02571[kg*m^2]', 'Moment of inertia of club');
model.param.set('Ma', '8.644[kg]', 'Mass of arm');
model.param.set('Mg', '1.8994[kg]', 'Mass of grip');
model.param.set('Mc', '0.2924[kg]', 'Mass of club');
model.param.set('ka', '5000[N*m/rad]', 'Arm stop stiffness');
model.param.set('kw', '1000[N*m/rad]', 'Wrist stop stiffness');
model.param.set('ks', '2000[N*m/rad]', 'Shaft joint stiffness');
model.param.set('ca', '5[N*m*s/rad]', 'Arm stop damping coefficient');
model.param.set('cw', '5[N*m*s/rad]', 'Wrist stop damping coefficient');
model.param.set('cs', '5[N*m*s/rad]', 'Shaft joint damping coefficient');
model.param.set('Tsh_max', '272.64[N*m]', 'Maximum shoulder torque');
model.param.set('Ta_max', '209.34[N*m]', 'Maximum arm torque');
model.param.set('Tw_max', '34.67[N*m]', 'Maximum wrist torque');
model.param.set('Ta_rate', '3326[N*m/s]', 'Rate of change of arm torque');
model.param.set('xb', '0.15[m]', 'Ball position, x-coordinate');
model.param.set('tw', '0.1[s]', 'Wrist torque switch time');
model.param.set('lambda', '100[1/s]', 'Switch rate parameter');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'golf_swing_mechanics.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('createpairs', false);
model.geom('geom1').run('fin');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 0);
model.cpl('intop1').selection.set([14]);

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('stop', '(intop1(x)>xb)*(intop1(y)<0)', 'Stop criterion');
model.variable('var1').set('Tsh', 'Tsh_max*tanh(lambda*t)', 'Applied shoulder torque');
model.variable('var1').set('Ta', 'min(Ta_max,Ta_rate*t)', 'Applied arm torque');
model.variable('var1').set('Tw', 'Tw_max*tanh(lambda*(t-tw))', 'Applied wrist torque');

model.physics('mbd').create('rd1', 'RigidDomain', 2);
model.physics('mbd').feature('rd1').label('Rigid Material: Shoulder');
model.physics('mbd').feature('rd1').selection.set([4]);
model.physics('mbd').feature('rd1').set('rho_mat', 'userdef');
model.physics('mbd').feature('rd1').create('mmi1', 'MassInertia', -1);
model.physics('mbd').feature('rd1').feature('mmi1').set('Iz', 'Ish');
model.physics('mbd').create('rd2', 'RigidDomain', 2);
model.physics('mbd').feature('rd2').label('Rigid Material: Arm');
model.physics('mbd').feature('rd2').selection.set([2]);
model.physics('mbd').feature('rd2').set('rho_mat', 'userdef');
model.physics('mbd').feature('rd2').create('mmi1', 'MassInertia', -1);
model.physics('mbd').feature('rd2').feature('mmi1').set('CenterOfMassType', 'CentroidOfSelectedEntities');
model.physics('mbd').feature('rd2').feature('mmi1').set('EntityLevel', 'Point');
model.physics('mbd').feature('rd2').feature('mmi1').set('mt', 'Ma');
model.physics('mbd').feature('rd2').feature('mmi1').set('Iz', 'Ia');
model.physics('mbd').feature('rd2').feature('mmi1').feature('cmp1').selection.set([8]);
model.physics('mbd').create('rd3', 'RigidDomain', 2);
model.physics('mbd').feature('rd3').label('Rigid Material: Grip');
model.physics('mbd').feature('rd3').selection.set([1]);
model.physics('mbd').feature('rd3').set('rho_mat', 'userdef');
model.physics('mbd').feature('rd3').create('mmi1', 'MassInertia', -1);
model.physics('mbd').feature('rd3').feature('mmi1').set('CenterOfMassType', 'CentroidOfSelectedEntities');
model.physics('mbd').feature('rd3').feature('mmi1').set('EntityLevel', 'Point');
model.physics('mbd').feature('rd3').feature('mmi1').set('mt', 'Mg');
model.physics('mbd').feature('rd3').feature('mmi1').set('Iz', 'Ig');
model.physics('mbd').feature('rd3').feature('mmi1').feature('cmp1').selection.set([3]);
model.physics('mbd').create('rd4', 'RigidDomain', 2);
model.physics('mbd').feature('rd4').label('Rigid Material: Club');
model.physics('mbd').feature('rd4').selection.set([3]);
model.physics('mbd').feature('rd4').set('rho_mat', 'userdef');
model.physics('mbd').feature('rd4').create('mmi1', 'MassInertia', -1);
model.physics('mbd').feature('rd4').feature('mmi1').set('CenterOfMassType', 'CentroidOfSelectedEntities');
model.physics('mbd').feature('rd4').feature('mmi1').set('EntityLevel', 'Point');
model.physics('mbd').feature('rd4').feature('mmi1').set('mt', 'Mc');
model.physics('mbd').feature('rd4').feature('mmi1').set('Iz', 'Ic');
model.physics('mbd').feature('rd4').feature('mmi1').feature('cmp1').selection.set([13]);

model.nodeGroup.create('grp1', 'Physics', 'mbd');
model.nodeGroup('grp1').placeAfter('init1');
model.nodeGroup('grp1').add('rd1');
model.nodeGroup('grp1').add('rd2');
model.nodeGroup('grp1').add('rd3');
model.nodeGroup('grp1').add('rd4');
model.nodeGroup('grp1').label('Rigid Materials');

model.physics('mbd').create('hgj1', 'HingeJoint', -1);
model.physics('mbd').feature('hgj1').label('Hinge Joint: Shoulder');
model.physics('mbd').feature('hgj1').set('Source', 'fixed');
model.physics('mbd').feature('hgj1').set('Destination', 'rd1');
model.physics('mbd').feature('hgj1').feature('cjb1').selection.set([13]);
model.physics('mbd').feature('hgj1').create('afm1', 'AppliedForceAndMoment', -1);
model.physics('mbd').feature('hgj1').feature('afm1').set('AppliedOnSelectedAttachment', 'Joint');
model.physics('mbd').feature('hgj1').feature('afm1').set('Ms', 'Tsh');
model.physics('mbd').create('hgj2', 'HingeJoint', -1);
model.physics('mbd').feature('hgj2').label('Hinge Joint: Arm');
model.physics('mbd').feature('hgj2').set('Source', 'rd1');
model.physics('mbd').feature('hgj2').set('Destination', 'rd2');
model.physics('mbd').feature('hgj2').feature('cjb1').selection.set([8]);
model.physics('mbd').feature('hgj2').create('sd1', 'SpringAndDamper', -1);
model.physics('mbd').feature('hgj2').feature('sd1').set('k_th', 'ka*(mbd.hgj2.th<0)');
model.physics('mbd').feature('hgj2').feature('sd1').set('c_th', 'ca*(mbd.hgj2.th<0)');
model.physics('mbd').feature('hgj2').create('afm1', 'AppliedForceAndMoment', -1);
model.physics('mbd').feature('hgj2').feature('afm1').set('AppliedOnSelectedAttachment', 'Joint');
model.physics('mbd').feature('hgj2').feature('afm1').set('Ms', 'Ta');
model.physics('mbd').create('hgj3', 'HingeJoint', -1);
model.physics('mbd').feature('hgj3').label('Hinge Joint: Wrist');
model.physics('mbd').feature('hgj3').set('Source', 'rd2');
model.physics('mbd').feature('hgj3').set('Destination', 'rd3');
model.physics('mbd').feature('hgj3').feature('cjb1').selection.set([1]);
model.physics('mbd').feature('hgj3').create('sd1', 'SpringAndDamper', -1);
model.physics('mbd').feature('hgj3').feature('sd1').set('k_th', 'kw*(mbd.hgj3.th<0)');
model.physics('mbd').feature('hgj3').feature('sd1').set('c_th', 'cw*(mbd.hgj3.th<0)');
model.physics('mbd').feature('hgj3').create('afm1', 'AppliedForceAndMoment', -1);
model.physics('mbd').feature('hgj3').feature('afm1').set('AppliedOnSelectedAttachment', 'Joint');
model.physics('mbd').feature('hgj3').feature('afm1').set('Ms', 'Tw');
model.physics('mbd').create('hgj4', 'HingeJoint', -1);
model.physics('mbd').feature('hgj4').label('Hinge Joint: Shaft');
model.physics('mbd').feature('hgj4').set('Source', 'rd3');
model.physics('mbd').feature('hgj4').set('Destination', 'rd4');
model.physics('mbd').feature('hgj4').feature('cjb1').selection.set([9]);
model.physics('mbd').feature('hgj4').create('sd1', 'SpringAndDamper', -1);
model.physics('mbd').feature('hgj4').feature('sd1').set('k_th', 'ks');
model.physics('mbd').feature('hgj4').feature('sd1').set('c_th', 'cs');

model.nodeGroup.create('grp2', 'Physics', 'mbd');
model.nodeGroup('grp2').placeAfter('init1');
model.nodeGroup('grp2').add('hgj1');
model.nodeGroup('grp2').add('hgj2');
model.nodeGroup('grp2').add('hgj3');
model.nodeGroup('grp2').add('hgj4');
model.nodeGroup('grp2').label('Hinge Joints');

model.variable('var1').set('Ta_eff', 'Ta-mbd.hgj2.sd1.Ms-mbd.hgj2.sd1.Md');
model.variable('var1').descr('Ta_eff', 'Effective arm torque');
model.variable('var1').set('Tw_eff', 'Tw-mbd.hgj3.sd1.Ms-mbd.hgj3.sd1.Md');
model.variable('var1').descr('Tw_eff', 'Effective wrist torque');

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'Ish', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'kg*m^2', 0);
model.study('std1').feature('param').setIndex('pname', 'Ish', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'kg*m^2', 0);
model.study('std1').feature('param').setIndex('pname', 'tw', 0);
model.study('std1').feature('param').setIndex('plistarr', '0.15 0.19 0.23', 0);
model.study('std1').feature('time').set('tlist', 'range(0,2e-3,0.26)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.01594265078728815');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*1.594265078728815');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,2e-3,0.26)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'tw'});
model.batch('p1').set('plistarr', {'0.15 0.19 0.23'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol('sol1').feature('t1').create('st1', 'StopCondition');
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', 'comp1.stop', 0);
model.sol('sol1').feature('t1').feature('st1').set('storestopcondsol', 'stepafter');
model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Displacement (mbd)');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 126, 0);
model.result('pg1').setIndex('looplevel', 3, 1);
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 126, 0);
model.result('pg1').setIndex('looplevel', 3, 1);
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Velocity (mbd)');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 126, 0);
model.result('pg2').setIndex('looplevel', 3, 1);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 126, 0);
model.result('pg2').setIndex('looplevel', 3, 1);
model.result('pg2').set('defaultPlotID', 'velocity');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('expr', 'mod(dom,10)');
model.result('pg2').feature('surf1').set('unit', '1');
model.result('pg2').feature('surf1').set('colortable', 'Cyclic');
model.result('pg2').feature('surf1').set('colorlegend', false);
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature('surf1').feature.create('def1', 'Deform');
model.result('pg2').feature('surf1').feature('def1').label('Deformation');
model.result('pg2').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg2').feature.create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').label('Arrow Line');
model.result('pg2').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY'});
model.result('pg2').feature('arwl1').set('placement', 'elements');
model.result('pg2').feature('arwl1').set('data', 'parent');
model.result('pg2').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg2').feature('arwl1').feature('def1').label('Deformation');
model.result('pg2').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').create('pttraj1', 'PointTrajectories');
model.result('pg1').feature('pttraj1').selection.set([1 9 14]);
model.result('pg1').feature('pttraj1').set('linetype', 'tube');
model.result('pg1').feature('pttraj1').create('col1', 'Color');
model.result('pg1').run;
model.result('pg1').feature('pttraj1').feature('col1').set('expr', 't');
model.result('pg1').feature('pttraj1').feature('col1').set('colorlegend', false);
model.result('pg1').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Club Head Speed');
model.result('pg3').set('data', 'dset2');
model.result('pg3').set('titletype', 'none');
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'Club head speed (m/s)');
model.result('pg3').set('legendpos', 'upperleft');
model.result('pg3').create('ptgr1', 'PointGraph');
model.result('pg3').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg3').feature('ptgr1').set('linewidth', 'preference');
model.result('pg3').feature('ptgr1').selection.set([14]);
model.result('pg3').feature('ptgr1').set('expr', 'mbd.vel');
model.result('pg3').feature('ptgr1').set('descr', 'Velocity magnitude');
model.result('pg3').feature('ptgr1').set('linewidth', 2);
model.result('pg3').feature('ptgr1').set('linemarker', 'cycle');
model.result('pg3').feature('ptgr1').set('markerpos', 'interp');
model.result('pg3').feature('ptgr1').set('legend', true);
model.result('pg3').feature('ptgr1').set('legendmethod', 'evaluated');
model.result('pg3').feature('ptgr1').set('legendpattern', 'tw=eval(tw,s) s');
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Driving Torques');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevelinput', 'manual', 1);
model.result('pg4').setIndex('looplevel', [2], 1);
model.result('pg4').set('titletype', 'none');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'Driving torque (N-m)');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').set('expr', {'Tsh'});
model.result('pg4').feature('glob1').set('descr', {'Applied shoulder torque'});
model.result('pg4').feature('glob1').set('unit', {'N*m'});
model.result('pg4').feature('glob1').set('expr', {'Tsh' 'Ta'});
model.result('pg4').feature('glob1').set('descr', {'Applied shoulder torque' 'Applied arm torque'});
model.result('pg4').feature('glob1').set('expr', {'Tsh' 'Ta' 'Tw'});
model.result('pg4').feature('glob1').set('descr', {'Applied shoulder torque' 'Applied arm torque' 'Applied wrist torque'});
model.result('pg4').feature('glob1').set('expr', {'Tsh' 'Ta' 'Tw' 'Ta_eff'});
model.result('pg4').feature('glob1').set('descr', {'Applied shoulder torque' 'Applied arm torque' 'Applied wrist torque' 'Effective arm torque'});
model.result('pg4').feature('glob1').set('expr', {'Tsh' 'Ta' 'Tw' 'Ta_eff' 'Tw_eff'});
model.result('pg4').feature('glob1').set('descr', {'Applied shoulder torque' 'Applied arm torque' 'Applied wrist torque' 'Effective arm torque' 'Effective wrist torque'});
model.result('pg4').feature('glob1').set('linewidth', 2);
model.result('pg4').feature('glob1').set('linemarker', 'cycle');
model.result('pg4').feature('glob1').set('markerpos', 'interp');
model.result('pg4').run;
model.result('pg4').set('axislimits', true);
model.result('pg4').set('ymin', -70);
model.result('pg4').set('ymax', 500);
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Relative Rotation');
model.result('pg5').set('ylabel', 'Relative rotation (deg)');
model.result('pg5').set('legendpos', 'upperleft');
model.result('pg5').run;
model.result('pg5').feature('glob1').set('expr', {'mbd.hgj2.th'});
model.result('pg5').feature('glob1').set('descr', {'Relative rotation'});
model.result('pg5').feature('glob1').set('unit', {'rad'});
model.result('pg5').feature('glob1').setIndex('unit', 'deg', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'Arm joint', 0);
model.result('pg5').feature('glob1').set('expr', {'mbd.hgj2.th' 'mbd.hgj3.th'});
model.result('pg5').feature('glob1').set('descr', {'Arm joint' 'Relative rotation'});
model.result('pg5').feature('glob1').setIndex('unit', 'deg', 1);
model.result('pg5').feature('glob1').setIndex('descr', 'Wrist joint', 1);
model.result('pg5').feature('glob1').set('expr', {'mbd.hgj2.th' 'mbd.hgj3.th' 'mbd.hgj4.th'});
model.result('pg5').feature('glob1').set('descr', {'Arm joint' 'Wrist joint' 'Relative rotation'});
model.result('pg5').feature('glob1').setIndex('unit', 'deg', 2);
model.result('pg5').feature('glob1').setIndex('descr', 'Shaft joint', 2);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Shoulder-arm-club Motion');
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg6').feature('lngr1').set('linewidth', 'preference');
model.result('pg6').feature('lngr1').set('data', 'dset2');
model.result('pg6').feature('lngr1').setIndex('looplevelinput', 'manual', 1);
model.result('pg6').feature('lngr1').setIndex('looplevel', [1], 1);
model.result('pg6').feature('lngr1').setIndex('looplevelinput', 'interp', 0);
model.result('pg6').feature('lngr1').setIndex('interp', 'range(0,2e-2,0.26)', 0);
model.result('pg6').feature('lngr1').selection.set([2 6 10 14]);
model.result('pg6').feature('lngr1').set('expr', 'y');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', 'x');
model.result('pg6').feature('lngr1').set('linecolor', 'black');
model.result('pg6').feature('lngr1').set('linewidth', 2);
model.result('pg6').run;
model.result('pg6').create('ptgr1', 'PointGraph');
model.result('pg6').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg6').feature('ptgr1').set('linewidth', 'preference');
model.result('pg6').feature('ptgr1').set('data', 'dset2');
model.result('pg6').feature('ptgr1').setIndex('looplevelinput', 'manual', 1);
model.result('pg6').feature('ptgr1').setIndex('looplevel', [1], 1);
model.result('pg6').feature('ptgr1').setIndex('looplevelinput', 'interp', 0);
model.result('pg6').feature('ptgr1').setIndex('interp', 'range(0,2e-2,0.26)', 0);
model.result('pg6').feature('ptgr1').selection.set([6 14 18]);
model.result('pg6').feature('ptgr1').set('expr', 'y');
model.result('pg6').feature('ptgr1').set('xdata', 'expr');
model.result('pg6').feature('ptgr1').set('xdataexpr', 'x');
model.result('pg6').feature('ptgr1').set('linecolor', 'red');
model.result('pg6').feature('ptgr1').set('linestyle', 'none');
model.result('pg6').feature('ptgr1').set('linemarker', 'point');
model.result('pg6').run;
model.result('pg6').feature.duplicate('lngr2', 'lngr1');
model.result('pg6').run;
model.result('pg6').feature('lngr2').setIndex('looplevel', [2], 1);
model.result('pg6').feature('lngr2').set('xdataexpr', 'x+2.5');
model.result('pg6').run;
model.result('pg6').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg6').run;
model.result('pg6').feature('ptgr2').setIndex('looplevel', [2], 1);
model.result('pg6').feature('ptgr2').set('xdataexpr', 'x+2.5');
model.result('pg6').run;
model.result('pg6').feature.duplicate('lngr3', 'lngr2');
model.result('pg6').run;
model.result('pg6').feature('lngr3').setIndex('looplevel', [3], 1);
model.result('pg6').feature('lngr3').set('xdataexpr', 'x+5');
model.result('pg6').run;
model.result('pg6').feature.duplicate('ptgr3', 'ptgr2');
model.result('pg6').run;
model.result('pg6').feature('ptgr3').setIndex('looplevel', [3], 1);
model.result('pg6').feature('ptgr3').set('xdataexpr', 'x+5');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').set('titletype', 'none');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'x-coordinate (m)');
model.result('pg6').set('preserveaspect', true);
model.result('pg6').run;

model.title('Mechanics of a Golf Swing');

model.description('The way you swing a golf club influences the outcome of the stroke. This example presents a multibody analysis of a golf swing aiming to maximize the club head speed just prior to the impact with the ball. The wrist torque, which has an important role to play in improving the outcome of the stroke, is varied parametrically to see its effect on the club head speed.');

model.label('golf_swing_mechanics.mph');

model.modelNode.label('Components');

out = model;
