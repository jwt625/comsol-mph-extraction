function out = model
%
% loudspeaker_driver.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Electroacoustic_Transducers');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('mf', 'InductionCurrents', 'geom1');
model.physics('mf').model('comp1');
model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.multiphysics.create('asb1', 'AcousticStructureBoundary', 'geom1', 1);
model.multiphysics('asb1').set('Acoustics_physics', 'acpr');
model.multiphysics('asb1').set('Structure_physics', 'solid');
model.multiphysics('asb1').selection.all;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/mf', true);
model.study('std1').feature('stat').setSolveFor('/physics/acpr', true);
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/asb1', true);

model.geom('geom1').insertFile('loudspeaker_driver_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');

model.param.set('N0', '100');
model.param.descr('N0', 'Number of turns in coil');
model.param.set('V0', '3.55[V]');
model.param.descr('V0', 'Peak driving voltage');
model.param.set('f_loss', '40[Hz]');
model.param.descr('f_loss', 'Frequency at which loss factor is given');
model.param.set('omega_loss', '2*pi*f_loss');
model.param.descr('omega_loss', 'Angular frequency at which loss factor is given');
model.param.set('fmax', '8[kHz]');
model.param.descr('fmax', 'Maximal study frequency');
model.param.set('c0', '343[m/s]');
model.param.descr('c0', 'Speed of sound in air');
model.param.set('lam0', 'c0/fmax');
model.param.descr('lam0', 'Minimum wave length');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Soft Iron');
model.selection('sel1').set([6 23]);
model.selection('sel1').set('color', '3');
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Composite');
model.selection('sel2').set([3 21]);
model.selection('sel2').set('color', '9');
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Cloth');
model.selection('sel3').set([20]);
model.selection('sel3').set('color', '7');
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Foam');
model.selection('sel4').set([25]);
model.selection('sel4').set('color', '10');
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Coil');
model.selection('sel5').set([17 18 19]);
model.selection('sel5').set('color', '8');
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Glass Fiber');
model.selection('sel6').set([9 10 11 12 13 14 15 16]);
model.selection('sel6').set('color', '10');
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').label('Generic Ferrite');
model.selection('sel7').set([24]);
model.selection('sel7').set('color', '17');
model.selection.create('sel8', 'Explicit');
model.selection('sel8').model('comp1');
model.selection('sel8').label('PML');
model.selection('sel8').set([1 5]);
model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');
model.selection('box1').label('All Domains');
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Air');
model.selection('dif1').set('add', {'box1'});
model.selection('dif1').set('subtract', {'sel1' 'sel2' 'sel3' 'sel4' 'sel5' 'sel6' 'sel7'});
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Structural Domains');
model.selection('uni1').set('input', {'sel2' 'sel3' 'sel4' 'sel5' 'sel6'});
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Composite and Glass Fiber');
model.selection('uni2').set('input', {'sel2' 'sel6'});
model.selection.create('box2', 'Box');
model.selection('box2').model('comp1');
model.selection('box2').label('Magnetic Domains');
model.selection('box2').set('xmin', '0 [mm]');
model.selection('box2').set('xmax', '50 [mm]');
model.selection('box2').set('ymin', '-90 [mm]');
model.selection('box2').set('ymax', '-42 [mm]');
model.selection.create('dif2', 'Difference');
model.selection('dif2').model('comp1');
model.selection('dif2').label('All Domains Without the PML');
model.selection('dif2').set('add', {'box1'});
model.selection('dif2').set('subtract', {'sel8'});

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.named('sel8');
model.coordSystem('pml1').set('PMLgamma', '3');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 1);
model.cpl('intop1').selection.set([93]);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('coil_power', 'mf.PCoil_1');
model.variable('var1').descr('coil_power', 'Coil power');
model.variable('var1').set('aco_eff', '-intop1(up(acpr.Ir)*nr+up(acpr.Iz)*nz)/coil_power');
model.variable('var1').descr('aco_eff', 'Acoustic efficiency');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('BHCurve', 'B-H Curve');
model.material('mat2').propertyGroup('BHCurve').func.create('BH', 'Interpolation');
model.material('mat2').propertyGroup.create('EffectiveBHCurve', 'Effective B-H Curve');
model.material('mat2').propertyGroup('EffectiveBHCurve').func.create('BHeff', 'Interpolation');
model.material('mat2').label('Soft Iron (With Losses)');
model.material('mat2').set('family', 'iron');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'1.12e7[S/m]' '0' '0' '0' '1.12e7[S/m]' '0' '0' '0' '1.12e7[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('BHCurve').label('B-H Curve');
model.material('mat2').propertyGroup('BHCurve').func('BH').label('Interpolation 1');
model.material('mat2').propertyGroup('BHCurve').func('BH').set('table', {'0' '0';  ...
'663.146' '1';  ...
'1067.5' '1.1';  ...
'1705.23' '1.2';  ...
'2463.11' '1.3';  ...
'3841.67' '1.4';  ...
'5425.74' '1.5';  ...
'7957.75' '1.6';  ...
'12298.3' '1.7';  ...
'20462.8' '1.8';  ...
'32169.6' '1.9';  ...
'61213.4' '2';  ...
'111408' '2.1';  ...
'188487.757' '2.2';  ...
'267930.364' '2.3';  ...
'347507.836' '2.4'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('extrap', 'linear');
model.material('mat2').propertyGroup('BHCurve').func('BH').set('fununit', {'T'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('argunit', {'A/m'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('defineinv', true);
model.material('mat2').propertyGroup('BHCurve').func('BH').set('defineprimfun', true);
model.material('mat2').propertyGroup('BHCurve').set('normB', 'BH(normHin)');
model.material('mat2').propertyGroup('BHCurve').set('normH', 'BH_inv(normBin)');
model.material('mat2').propertyGroup('BHCurve').set('Wpm', 'BH_prim(normHin)');
model.material('mat2').propertyGroup('BHCurve').descr('normHin', 'Magnetic field norm');
model.material('mat2').propertyGroup('BHCurve').descr('normBin', 'Magnetic flux density norm');
model.material('mat2').propertyGroup('BHCurve').addInput('magneticfield');
model.material('mat2').propertyGroup('BHCurve').addInput('magneticfluxdensity');
model.material('mat2').propertyGroup('EffectiveBHCurve').label('Effective B-H Curve');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').label('Interpolation 1');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('table', {'0' '0';  ...
'663.146' '1.000000051691021';  ...
'1067.5' '1.4936495124126294';  ...
'1705.23' '1.9415328461315795';  ...
'2463.11' '2.257765669366018';  ...
'3841.67' '2.609980642431287';  ...
'5425.74' '2.8664452090837504';  ...
'7957.75' '3.1441438097176118';  ...
'12298.3' '3.448538051654125';  ...
'20462.8' '3.7816711973679054';  ...
'32169.6' '4.058345590113038';  ...
'61213.4' '4.420646552950275';  ...
'111408' '4.721274089545955';  ...
'188487.757' '4.972148140718701';  ...
'267930.364' '5.145510860855953';  ...
'347507.836' '5.245510861426532'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('extrap', 'linear');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('fununit', {'T'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('argunit', {'A/m'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('defineinv', true);
model.material('mat2').propertyGroup('EffectiveBHCurve').set('normBeff', 'BHeff(normHeffin)');
model.material('mat2').propertyGroup('EffectiveBHCurve').set('normHeff', 'BHeff_inv(normBeffin)');
model.material('mat2').propertyGroup('EffectiveBHCurve').descr('normHeffin', 'Effective magnetic field norm');
model.material('mat2').propertyGroup('EffectiveBHCurve').descr('normBeffin', 'Effective magnetic flux density norm');
model.material('mat2').propertyGroup('EffectiveBHCurve').addInput('magneticfield');
model.material('mat2').propertyGroup('EffectiveBHCurve').addInput('magneticfluxdensity');
model.material('mat2').selection.named('sel1');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Composite');
model.material('mat3').propertyGroup('def').set('youngsmodulus', '2[GPa]');
model.material('mat3').propertyGroup('def').set('poissonsratio', '0.42');
model.material('mat3').propertyGroup('def').set('density', '1200[kg/m^3]');
model.material('mat3').propertyGroup('def').set('lossfactor', '0.04');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').label('Cloth');
model.material('mat4').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat4').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('youngsmodulus', '0.58[GPa]');
model.material('mat4').propertyGroup('def').set('poissonsratio', '0.3');
model.material('mat4').propertyGroup('def').set('density', '650[kg/m^3]');
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').label('Foam');
model.material('mat5').propertyGroup('def').set('youngsmodulus', '5[MPa]');
model.material('mat5').propertyGroup('def').set('poissonsratio', '0.4');
model.material('mat5').propertyGroup('def').set('density', '67[kg/m^3]');
model.material.create('mat6', 'Common', 'comp1');
model.material('mat6').label('Coil');
model.material('mat6').propertyGroup('def').set('lossfactor', '0.05');
model.material('mat6').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat6').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat6').propertyGroup('def').set('youngsmodulus', '110[GPa]');
model.material('mat6').propertyGroup('def').set('poissonsratio', '0.35');
model.material('mat6').propertyGroup('def').set('density', '4500[kg/m^3]');
model.material.create('mat7', 'Common', 'comp1');
model.material('mat7').label('Glass Fiber');
model.material('mat7').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat7').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('youngsmodulus', '70[GPa]');
model.material('mat7').propertyGroup('def').set('poissonsratio', '0.33');
model.material('mat7').propertyGroup('def').set('density', '2000[kg/m^3]');
model.material('mat7').propertyGroup('def').set('lossfactor', '0.04');
model.material.create('mat8', 'Common', 'comp1');
model.material('mat8').propertyGroup.create('RemanentFluxDensity', 'Remanent flux density');
model.material('mat8').label('Generic Ferrite');
model.material('mat8').propertyGroup('def').set('lossfactor', '0.01');
model.material('mat8').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat8').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat8').propertyGroup('def').set('poissonsratio', '0.3');
model.material('mat8').propertyGroup('def').set('youngsmodulus', '200[GPa]');
model.material('mat8').propertyGroup('def').set('density', '5000[kg/m^3]');
model.material('mat8').propertyGroup('RemanentFluxDensity').set('murec', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat8').propertyGroup('RemanentFluxDensity').set('normBr', '0.4[T]');
model.material('mat3').selection.named('sel2');
model.material('mat4').selection.named('sel3');
model.material('mat5').selection.named('sel4');
model.material('mat6').selection.named('sel5');
model.material('mat7').selection.named('sel6');
model.material('mat8').selection.named('sel7');

model.physics('mf').selection.named('box2');
model.physics('mf').create('als1', 'AmperesLawSolid', 2);
model.physics('mf').feature('als1').label(['Amp' native2unicode(hex2dec({'00' 'e8'}), 'unicode') 're''s Law in Solids - Generic Ferrite']);
model.physics('mf').feature('als1').selection.named('sel7');
model.physics('mf').feature('als1').set('ConstitutiveRelationBH', 'RemanentFluxDensity');
model.physics('mf').feature('als1').set('e_crel_BH_RemanentFluxDensity', [0 0 1]);
model.physics('mf').create('als2', 'AmperesLawSolid', 2);
model.physics('mf').feature('als2').label(['Amp' native2unicode(hex2dec({'00' 'e8'}), 'unicode') 're''s Law in Solids - Soft Iron']);
model.physics('mf').feature('als2').selection.named('sel1');
model.physics('mf').feature('als2').set('ConstitutiveRelationBH', 'BHCurve');
model.physics('mf').create('als3', 'AmperesLawSolid', 2);
model.physics('mf').feature('als3').selection.named('uni1');
model.physics('mf').feature('als3').label(['Amp' native2unicode(hex2dec({'00' 'e8'}), 'unicode') 're''s Law in Solids - Nonconductive Solids']);
model.physics('mf').create('coil1', 'Coil', 2);
model.physics('mf').feature('coil1').selection.named('sel5');
model.physics('mf').feature('coil1').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil1').set('N', 'N0');
model.physics('mf').feature('coil1').set('coilWindArea', '3.5e-8[m^2]');
model.physics('mf').feature('coil1').set('CoilExcitation', 'Voltage');
model.physics('mf').feature('coil1').set('VCoil', 'linper(V0)');
model.physics('acpr').selection.named('dif1');
model.physics('acpr').create('efc1', 'ExteriorFieldCalculation', 1);
model.physics('acpr').feature('efc1').selection.set([93]);
model.physics('acpr').feature('efc1').setIndex('SymmetryCondition2', 1, 0);
model.physics('acpr').create('nra1', 'NarrowRegionAcousticsModel', 2);
model.physics('acpr').feature('nra1').selection.set([8]);
model.physics('acpr').feature('nra1').set('DuctType', 'Slit');
model.physics('acpr').feature('nra1').set('h', '0.4[mm]');
model.physics('acpr').feature.duplicate('nra2', 'nra1');
model.physics('acpr').feature('nra2').selection.set([22]);
model.physics('acpr').feature('nra2').set('h', '0.2[mm]');
model.physics('solid').selection.named('uni1');
model.physics('solid').feature('lemm1').create('dmp1', 'Damping', 2);
model.physics('solid').feature('lemm1').feature('dmp1').selection.set([]);
model.physics('solid').feature('lemm1').feature('dmp1').selection.named('uni2');
model.physics('solid').feature('lemm1').feature('dmp1').set('DampingType', 'IsotropicLossFactor');
model.physics('solid').feature('lemm1').create('dmp2', 'Damping', 2);
model.physics('solid').feature('lemm1').feature('dmp2').selection.set([]);
model.physics('solid').feature('lemm1').feature('dmp2').selection.named('sel3');
model.physics('solid').feature('lemm1').feature('dmp2').set('beta_dK', '0.14/omega_loss');
model.physics('solid').feature('lemm1').create('dmp3', 'Damping', 2);
model.physics('solid').feature('lemm1').feature('dmp3').selection.set([]);
model.physics('solid').feature('lemm1').feature('dmp3').selection.named('sel4');
model.physics('solid').feature('lemm1').feature('dmp3').set('beta_dK', '0.46/omega_loss');
model.physics('solid').create('fix1', 'Fixed', 1);
model.physics('solid').feature('fix1').selection.set([81 85]);

model.multiphysics.create('mmcpl1', 'Magnetomechanics', 'geom1', 2);
model.multiphysics('mmcpl1').set('OnlyLorentz', true);
model.multiphysics('mmcpl1').selection.named('sel5');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([1 3 5 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 25]);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'lam0/5');
model.mesh('mesh1').feature('size').set('hmin', '0.5[mm]');
model.mesh('mesh1').feature('size').set('hgrad', 1.15);
model.mesh('mesh1').feature('map1').create('size1', 'Size');
model.mesh('mesh1').feature('map1').feature('size1').selection.set([9 13 14 15 16 20]);
model.mesh('mesh1').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmax', '2[mm]');
model.mesh('mesh1').feature('map1').create('size2', 'Size');
model.mesh('mesh1').feature('map1').feature('size2').selection.set([3 21 25]);
model.mesh('mesh1').feature('map1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size2').set('hmax', '4[mm]');
model.mesh('mesh1').feature('map1').create('size3', 'Size');
model.mesh('mesh1').feature('map1').feature('size3').selection.set([8 10 11 12 17 18 19 22]);
model.mesh('mesh1').feature('map1').feature('size3').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size3').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size3').set('hmax', '0.5[mm]');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([22 38 41 45]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 2);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([87 88]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 8);
model.mesh('mesh1').run('map1');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(2);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('bl1').selection.set([4 6 23]);
model.mesh('mesh1').feature('bl1').set('smoothtransition', false);
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([12 53 95 96 97 98]);
model.mesh('mesh1').feature('bl1').create('blp1', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').feature('blp1').selection.set([93]);
model.mesh('mesh1').feature('bl1').feature('blp1').set('blnlayers', 1);
model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Magnetic Fields');
model.study('std1').setGenPlots(false);
model.study('std1').feature('stat').setEntry('activate', 'solid', false);
model.study('std1').create('frlin', 'Frequencylinearized');
model.study('std1').feature('frlin').set('plist', '1 2 3 4 5 6 7 8 9 {10, 10.6, 11.2, 11.8, 12.5, 13.2, 14, 15, 16, 17, 18, 19, 20, 21.2, 22.4, 23.6, 25, 26.5, 28, 30, 31.5, 33.5, 35.5, 37.5, 40, 42.5, 45, 47.5, 50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3, 1.06e3, 1.12e3, 1.18e3, 1.25e3, 1.32e3, 1.4e3, 1.5e3, 1.6e3, 1.7e3, 1.8e3, 1.9e3, 2e3, 2.12e3, 2.24e3, 2.36e3, 2.5e3, 2.65e3, 2.8e3, 3e3, 3.15e3, 3.35e3, 3.55e3, 3.75e3, 4e3, 4.25e3, 4.5e3, 4.75e3, 5e3, 5.3e3, 5.6e3, 6e3, 6.3e3, 6.7e3, 7.1e3, 7.5e3, 8e3}');
model.study('std1').feature('frlin').setEntry('activate', 'acpr', false);
model.study('std1').feature('frlin').setEntry('activate', 'solid', false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'frlin');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'frlin');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s2').feature('p1').set('plistarr', {'1 2 3 4 5 6 7 8 9 {10, 10.6, 11.2, 11.8, 12.5, 13.2, 14, 15, 16, 17, 18, 19, 20, 21.2, 22.4, 23.6, 25, 26.5, 28, 30, 31.5, 33.5, 35.5, 37.5, 40, 42.5, 45, 47.5, 50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3, 1.06e3, 1.12e3, 1.18e3, 1.25e3, 1.32e3, 1.4e3, 1.5e3, 1.6e3, 1.7e3, 1.8e3, 1.9e3, 2e3, 2.12e3, 2.24e3, 2.36e3, 2.5e3, 2.65e3, 2.8e3, 3e3, 3.15e3, 3.35e3, 3.55e3, 3.75e3, 4e3, 4.25e3, 4.5e3, 4.75e3, 5e3, 5.3e3, 5.6e3, 6e3, 6.3e3, 6.7e3, 7.1e3, 7.5e3, 8e3}'});
model.sol('sol1').feature('s2').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s2').feature('p1').set('probes', {});
model.sol('sol1').feature('s2').feature('p1').set('control', 'frlin');
model.sol('sol1').feature('s2').set('nonlin', 'linper');
model.sol('sol1').feature('s2').set('storelinpoint', true);
model.sol('sol1').feature('s2').set('linpsolnum', 'all');
model.sol('sol1').feature('s2').set('control', 'frlin');
model.sol('sol1').feature('s2').set('linpmethod', 'sol');
model.sol('sol1').feature('s2').set('linpsol', 'sol1');
model.sol('sol1').feature('s2').set('linpsoluse', 'sol2');
model.sol('sol1').feature('s2').set('control', 'frlin');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s2').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s2').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s2').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').run;
model.result('pg1').label('Static Magnetic Field');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').set('data', 'dset2');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', 'mf.normH');
model.result('pg1').feature('surf1').set('descr', 'Magnetic field norm');
model.result('pg1').feature('surf1').set('colortable', 'Thermal');
model.result('pg1').run;
model.result('pg1').run;
model.result.duplicate('pg2', 'pg1');
model.result('pg2').run;
model.result('pg2').label('Effective Relative Permeability');
model.result('pg2').run;
model.result('pg2').feature('surf1').set('expr', 'mf.normB/(mu0_const*mf.normH)');
model.result('pg2').feature('surf1').set('descractive', true);
model.result('pg2').feature('surf1').set('descr', 'Effective relative permeability');
model.result('pg2').run;
model.result.numerical.create('av1', 'AvSurface');
model.result.numerical('av1').set('intvolume', true);
model.result.numerical('av1').set('data', 'dset2');
model.result.numerical('av1').selection.named('sel5');
model.result.numerical('av1').setIndex('expr', '-mf.Br*N0*2*pi*r', 0);
model.result.numerical('av1').setIndex('unit', 'N/A', 0);
model.result.numerical('av1').setIndex('descr', 'BL', 0);
model.result.numerical('av1').set('intvolume', false);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Surface Average 1');
model.result.numerical('av1').set('table', 'tbl1');
model.result.numerical('av1').setResult;
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').run;
model.result('pg3').label('Induced Current Density');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', 'mf.Jiphi');
model.result('pg3').feature('surf1').set('descr', 'Conduction current density, phi-component');
model.result('pg3').feature('surf1').set('colortable', 'Prism');
model.result('pg3').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Blocked Coil Inductance');
model.result('pg4').set('titletype', 'label');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').setIndex('expr', 'mf.LCoil_1', 0);
model.result('pg4').feature('glob1').setIndex('unit', 'mH', 0);
model.result('pg4').feature('glob1').setIndex('descr', 'Coil inductance', 0);
model.result('pg4').set('xlog', true);
model.result('pg4').run;
model.result.export.create('plot1', 'pg4', 'glob1', 'Plot');

model.study.create('std2');
model.study('std2').feature.copy('stat1', 'std1/stat');
model.study('std2').feature.copy('frlin1', 'std1/frlin');
model.study('std2').label('Study 2 - Complete Model');
model.study('std2').setGenPlots(false);
model.study('std2').feature('frlin1').setEntry('activate', 'acpr', true);
model.study('std2').feature('frlin1').setEntry('activate', 'solid', true);

model.sol.create('sol3');
model.sol('sol3').study('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'stat1');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'stat1');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('jtech', 'once');
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol3').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('s1').feature('fc1').set('jtech', 'once');
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol3').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').create('su1', 'StoreSolution');
model.sol('sol3').create('st2', 'StudyStep');
model.sol('sol3').feature('st2').set('study', 'std2');
model.sol('sol3').feature('st2').set('studystep', 'frlin1');
model.sol('sol3').create('v2', 'Variables');
model.sol('sol3').feature('v2').set('initmethod', 'sol');
model.sol('sol3').feature('v2').set('initsol', 'sol3');
model.sol('sol3').feature('v2').set('initsoluse', 'sol4');
model.sol('sol3').feature('v2').set('notsolmethod', 'sol');
model.sol('sol3').feature('v2').set('notsol', 'sol3');
model.sol('sol3').feature('v2').set('control', 'frlin1');
model.sol('sol3').create('s2', 'Stationary');
model.sol('sol3').feature('s2').set('stol', 0.001);
model.sol('sol3').feature('s2').create('p1', 'Parametric');
model.sol('sol3').feature('s2').feature.remove('pDef');
model.sol('sol3').feature('s2').feature('p1').set('pname', {'freq'});
model.sol('sol3').feature('s2').feature('p1').set('plistarr', {'1 2 3 4 5 6 7 8 9 {10, 10.6, 11.2, 11.8, 12.5, 13.2, 14, 15, 16, 17, 18, 19, 20, 21.2, 22.4, 23.6, 25, 26.5, 28, 30, 31.5, 33.5, 35.5, 37.5, 40, 42.5, 45, 47.5, 50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3, 1.06e3, 1.12e3, 1.18e3, 1.25e3, 1.32e3, 1.4e3, 1.5e3, 1.6e3, 1.7e3, 1.8e3, 1.9e3, 2e3, 2.12e3, 2.24e3, 2.36e3, 2.5e3, 2.65e3, 2.8e3, 3e3, 3.15e3, 3.35e3, 3.55e3, 3.75e3, 4e3, 4.25e3, 4.5e3, 4.75e3, 5e3, 5.3e3, 5.6e3, 6e3, 6.3e3, 6.7e3, 7.1e3, 7.5e3, 8e3}'});
model.sol('sol3').feature('s2').feature('p1').set('punit', {'Hz'});
model.sol('sol3').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol3').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol3').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol3').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol3').feature('s2').feature('p1').set('plotgroup', 'pg1');
model.sol('sol3').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol3').feature('s2').feature('p1').set('probes', {});
model.sol('sol3').feature('s2').feature('p1').set('control', 'frlin1');
model.sol('sol3').feature('s2').set('nonlin', 'linper');
model.sol('sol3').feature('s2').set('storelinpoint', true);
model.sol('sol3').feature('s2').set('linpsolnum', 'all');
model.sol('sol3').feature('s2').set('control', 'frlin1');
model.sol('sol3').feature('s2').set('linpmethod', 'sol');
model.sol('sol3').feature('s2').set('linpsol', 'sol3');
model.sol('sol3').feature('s2').set('linpsoluse', 'sol4');
model.sol('sol3').feature('s2').set('control', 'frlin1');
model.sol('sol3').feature('s2').feature('aDef').set('complexfun', true);
model.sol('sol3').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s2').feature('aDef').set('matherr', true);
model.sol('sol3').feature('s2').feature('aDef').set('blocksizeactive', false);
model.sol('sol3').feature('s2').create('seDef', 'Segregated');
model.sol('sol3').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s2').feature('fc1').set('ntolfact', 1);
model.sol('sol3').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol3').feature('s2').feature('fc1').set('jtech', 'onevery');
model.sol('sol3').feature('s2').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('s2').feature('fc1').set('ntolfact', 1);
model.sol('sol3').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol3').feature('s2').feature('fc1').set('jtech', 'onevery');
model.sol('sol3').feature('s2').feature.remove('fcDef');
model.sol('sol3').feature('s2').feature.remove('seDef');
model.sol('sol3').feature('v2').set('notsolnum', 'auto');
model.sol('sol3').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol3').attach('std2');
model.sol('sol3').runAll;

model.result.dataset('dset3').selection.geom('geom1', 2);
model.result.dataset('dset3').selection.named('dif2');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'dset3');
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('hasspacevars', false);
model.result.dataset('rev1').set('defaultPlotIDs', {'pg7|acpr' 'pg8|acpr'});
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'rev1');
model.result('pg5').setIndex('looplevel', 126, 0);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg5').feature('surf1').set('colortable', 'Wave');
model.result('pg5').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').label('Acoustic Pressure, 3D (acpr)');
model.result('pg5').label('Acoustic Pressure, 3D (acpr)');
model.result('pg5').run;
model.result('pg5').create('con1', 'Contour');
model.result('pg5').feature('con1').set('expr', 'acpr.p_t');
model.result('pg5').feature('con1').set('coloring', 'uniform');
model.result('pg5').feature('con1').set('color', 'gray');
model.result('pg5').feature('con1').set('colorlegend', false);
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'rev1');
model.result('pg6').setIndex('looplevel', 126, 0);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg6').feature('surf1').set('colortable', 'Rainbow');
model.result('pg6').feature('surf1').set('colorscalemode', 'linear');
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').label('Sound Pressure Level, 3D (acpr)');
model.result('pg6').label('Sound Pressure Level, 3D (acpr)');
model.result('pg6').run;

model.view('view2').set('showgrid', false);

model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Sensitivity');
model.result('pg7').set('data', 'dset3');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', 'Frequency (Hz)');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'SPL (dB)');
model.result('pg7').set('legendpos', 'lowermiddle');
model.result('pg7').create('oct1', 'OctaveBand');
model.result('pg7').feature('oct1').set('quantity', 'bandpower');
model.result('pg7').feature('oct1').set('markerpos', 'datapoints');
model.result('pg7').feature('oct1').set('linewidth', 'preference');
model.result('pg7').feature('oct1').selection.geom('geom1');
model.result('pg7').feature('oct1').set('expr', 'pext(0,1[m])');
model.result('pg7').run;
model.result('pg7').feature('oct1').set('quantity', 'bandaveragepsd');
model.result('pg7').feature('oct1').set('bandtype', 'octave3');
model.result('pg7').feature('oct1').set('type', 'outline');
model.result('pg7').feature.duplicate('oct2', 'oct1');
model.result('pg7').run;
model.result('pg7').feature('oct2').set('quantity', 'continuous');
model.result('pg7').run;
model.result('pg7').feature('oct2').set('linewidth', 2);
model.result('pg7').feature('oct2').set('legend', true);
model.result('pg7').feature('oct2').set('legendmethod', 'manual');
model.result('pg7').feature('oct2').setIndex('legends', 'Complete Study', 0);
model.result('pg7').run;
model.result('pg7').set('axislimits', true);
model.result('pg7').set('xmin', 15);
model.result('pg7').set('ymin', 64);
model.result('pg7').set('ymax', 92);
model.result('pg7').set('legendpos', 'lowerright');
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Total Electric Impedance');
model.result('pg8').set('data', 'dset3');
model.result('pg8').set('titletype', 'label');
model.result('pg8').set('xlabelactive', true);
model.result('pg8').set('xlabel', 'Frequency (Hz)');
model.result('pg8').set('ylabelactive', true);
model.result('pg8').set('ylabel', 'Z (\Omega)');
model.result('pg8').create('glob1', 'Global');
model.result('pg8').feature('glob1').set('markerpos', 'datapoints');
model.result('pg8').feature('glob1').set('linewidth', 'preference');
model.result('pg8').feature('glob1').setIndex('expr', 'abs(mf.ZCoil_1)', 0);
model.result('pg8').feature('glob1').setIndex('unit', '', 0);
model.result('pg8').feature('glob1').setIndex('descr', 'abs(Z)', 0);
model.result('pg8').feature('glob1').setIndex('expr', 'real(mf.ZCoil_1)', 1);
model.result('pg8').feature('glob1').setIndex('unit', '', 1);
model.result('pg8').feature('glob1').setIndex('descr', 'real(Z)', 1);
model.result('pg8').feature('glob1').setIndex('expr', 'imag(mf.ZCoil_1)', 2);
model.result('pg8').feature('glob1').setIndex('unit', '', 2);
model.result('pg8').feature('glob1').setIndex('descr', 'imag(Z)', 2);
model.result('pg8').run;
model.result('pg8').set('xlog', true);
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').run;
model.result('pg9').label('Displacement');
model.result('pg9').set('showlegendsunit', true);
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', 'solid.disp');
model.result('pg9').feature('surf1').create('def1', 'Deform');
model.result('pg9').feature('surf1').feature('def1').set('revcoordsys', 'cylindrical');
model.result('pg9').run;
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('Directivity Plot');
model.result('pg10').set('data', 'dset3');
model.result('pg10').set('titletype', 'label');
model.result('pg10').create('dir1', 'Directivity');
model.result('pg10').feature('dir1').set('linewidth', 'preference');
model.result('pg10').feature('dir1').set('anglerestr', 'manual');
model.result('pg10').feature('dir1').set('phidisc', 360);
model.result('pg10').feature('dir1').set('phimin', -90);
model.result('pg10').feature('dir1').set('phirange', 180);
model.result('pg10').feature('dir1').set('radius', '1[m]');
model.result('pg10').feature('dir1').set('levelmethod', 'levels');
model.result('pg10').feature('dir1').set('levels', '-15 -12 -9 -6 -3 -2 -1 1 2 3');
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Coil Power and Efficiency');
model.result('pg11').set('titletype', 'label');
model.result('pg11').set('data', 'dset3');
model.result('pg11').set('twoyaxes', true);
model.result('pg11').set('legendpos', 'middleleft');
model.result('pg11').create('glob1', 'Global');
model.result('pg11').feature('glob1').set('markerpos', 'datapoints');
model.result('pg11').feature('glob1').set('linewidth', 'preference');
model.result('pg11').feature('glob1').setIndex('expr', 'coil_power', 0);
model.result('pg11').feature('glob1').setIndex('unit', 'W', 0);
model.result('pg11').feature('glob1').setIndex('descr', 'Coil power', 0);
model.result('pg11').run;
model.result('pg11').create('glob2', 'Global');
model.result('pg11').feature('glob2').set('markerpos', 'datapoints');
model.result('pg11').feature('glob2').set('linewidth', 'preference');
model.result('pg11').feature('glob2').set('plotonsecyaxis', true);
model.result('pg11').feature('glob2').setIndex('expr', 'aco_eff', 0);
model.result('pg11').feature('glob2').setIndex('unit', '%', 0);
model.result('pg11').feature('glob2').setIndex('descr', 'Acoustic efficiency', 0);
model.result('pg11').set('xlog', true);
model.result('pg11').run;

model.study.create('std3');
model.study('std3').feature.copy('stat1', 'std2/stat1');
model.study('std3').feature.copy('frlin1', 'std2/frlin1');
model.study('std3').feature('frlin1').set('useadvanceddisable', true);
model.study('std3').feature('frlin1').set('disabledphysics', {'acpr/nra1' 'acpr/nra2'});
model.study('std3').label('Study 3 - Complete Model, Without Narrow Region Acoustics');
model.study('std3').setGenPlots(false);

model.sol.create('sol5');
model.sol('sol5').study('std3');
model.sol('sol5').create('st1', 'StudyStep');
model.sol('sol5').feature('st1').set('study', 'std3');
model.sol('sol5').feature('st1').set('studystep', 'stat1');
model.sol('sol5').create('v1', 'Variables');
model.sol('sol5').feature('v1').set('control', 'stat1');
model.sol('sol5').create('s1', 'Stationary');
model.sol('sol5').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol5').feature('s1').feature('fc1').set('jtech', 'once');
model.sol('sol5').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol5').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol5').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol5').feature('s1').feature('fc1').set('jtech', 'once');
model.sol('sol5').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol5').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol5').feature('s1').feature.remove('fcDef');
model.sol('sol5').create('su1', 'StoreSolution');
model.sol('sol5').create('st2', 'StudyStep');
model.sol('sol5').feature('st2').set('study', 'std3');
model.sol('sol5').feature('st2').set('studystep', 'frlin1');
model.sol('sol5').create('v2', 'Variables');
model.sol('sol5').feature('v2').set('initmethod', 'sol');
model.sol('sol5').feature('v2').set('initsol', 'sol5');
model.sol('sol5').feature('v2').set('initsoluse', 'sol6');
model.sol('sol5').feature('v2').set('notsolmethod', 'sol');
model.sol('sol5').feature('v2').set('notsol', 'sol5');
model.sol('sol5').feature('v2').set('control', 'frlin1');
model.sol('sol5').create('s2', 'Stationary');
model.sol('sol5').feature('s2').set('stol', 0.001);
model.sol('sol5').feature('s2').create('p1', 'Parametric');
model.sol('sol5').feature('s2').feature.remove('pDef');
model.sol('sol5').feature('s2').feature('p1').set('pname', {'freq'});
model.sol('sol5').feature('s2').feature('p1').set('plistarr', {'1 2 3 4 5 6 7 8 9 {10, 10.6, 11.2, 11.8, 12.5, 13.2, 14, 15, 16, 17, 18, 19, 20, 21.2, 22.4, 23.6, 25, 26.5, 28, 30, 31.5, 33.5, 35.5, 37.5, 40, 42.5, 45, 47.5, 50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3, 1.06e3, 1.12e3, 1.18e3, 1.25e3, 1.32e3, 1.4e3, 1.5e3, 1.6e3, 1.7e3, 1.8e3, 1.9e3, 2e3, 2.12e3, 2.24e3, 2.36e3, 2.5e3, 2.65e3, 2.8e3, 3e3, 3.15e3, 3.35e3, 3.55e3, 3.75e3, 4e3, 4.25e3, 4.5e3, 4.75e3, 5e3, 5.3e3, 5.6e3, 6e3, 6.3e3, 6.7e3, 7.1e3, 7.5e3, 8e3}'});
model.sol('sol5').feature('s2').feature('p1').set('punit', {'Hz'});
model.sol('sol5').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol5').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol5').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol5').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol5').feature('s2').feature('p1').set('plotgroup', 'pg1');
model.sol('sol5').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol5').feature('s2').feature('p1').set('probes', {});
model.sol('sol5').feature('s2').feature('p1').set('control', 'frlin1');
model.sol('sol5').feature('s2').set('nonlin', 'linper');
model.sol('sol5').feature('s2').set('storelinpoint', true);
model.sol('sol5').feature('s2').set('linpsolnum', 'all');
model.sol('sol5').feature('s2').set('control', 'frlin1');
model.sol('sol5').feature('s2').set('linpmethod', 'sol');
model.sol('sol5').feature('s2').set('linpsol', 'sol5');
model.sol('sol5').feature('s2').set('linpsoluse', 'sol6');
model.sol('sol5').feature('s2').set('control', 'frlin1');
model.sol('sol5').feature('s2').feature('aDef').set('complexfun', true);
model.sol('sol5').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol5').feature('s2').feature('aDef').set('matherr', true);
model.sol('sol5').feature('s2').feature('aDef').set('blocksizeactive', false);
model.sol('sol5').feature('s2').create('seDef', 'Segregated');
model.sol('sol5').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol5').feature('s2').feature('fc1').set('ntolfact', 1);
model.sol('sol5').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol5').feature('s2').feature('fc1').set('jtech', 'onevery');
model.sol('sol5').feature('s2').feature('fc1').set('linsolver', 'dDef');
model.sol('sol5').feature('s2').feature('fc1').set('ntolfact', 1);
model.sol('sol5').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol5').feature('s2').feature('fc1').set('jtech', 'onevery');
model.sol('sol5').feature('s2').feature.remove('fcDef');
model.sol('sol5').feature('s2').feature.remove('seDef');
model.sol('sol5').feature('v2').set('notsolnum', 'auto');
model.sol('sol5').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol5').attach('std3');
model.sol('sol5').runAll;

model.result('pg7').run;
model.result('pg7').feature('oct2').set('data', 'dset5');
model.result('pg7').feature('oct2').setIndex('legends', 'Complete Study - Without Narrow Region Acoustics', 0);
model.result('pg7').feature('oct2').set('linestyle', 'dotted');
model.result('pg7').feature.duplicate('oct3', 'oct2');
model.result('pg7').run;
model.result('pg7').feature('oct3').set('data', 'parent');
model.result('pg7').feature('oct3').setIndex('legends', 'Complete Study', 0);
model.result('pg7').feature('oct3').set('linestyle', 'solid');
model.result('pg7').run;
model.result.dataset.create('mir1', 'Mirror2D');
model.result.dataset('mir1').set('data', 'dset5');
model.result.create('pg12', 'PlotGroup2D');
model.result('pg12').run;
model.result('pg12').label('Acoustic Pressure - Without Narrow Region Acoustics');
model.result('pg12').set('showlegendsunit', true);
model.result('pg12').set('data', 'mir1');
model.result('pg12').setIndex('looplevel', 81, 0);
model.result('pg12').create('surf1', 'Surface');
model.result('pg12').feature('surf1').set('expr', 'acpr.p_t');
model.result('pg12').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg12').feature('surf1').set('colortable', 'Wave');
model.result('pg12').run;
model.result('pg12').feature.duplicate('surf2', 'surf1');
model.result('pg12').run;
model.result('pg12').feature('surf2').set('data', 'dset5');
model.result('pg12').feature('surf2').setIndex('looplevel', 82, 0);
model.result('pg12').feature('surf2').set('titletype', 'none');
model.result('pg12').feature('surf2').set('inheritplot', 'surf1');
model.result('pg12').run;
model.result('pg12').create('ann1', 'Annotation');
model.result('pg12').feature('ann1').set('text', 'Pressure at 630 Hz');
model.result('pg12').feature('ann1').set('posxexpr', '10[mm]');
model.result('pg12').feature('ann1').set('posyexpr', '20[mm]');
model.result('pg12').feature('ann1').set('showpoint', false);
model.result('pg12').feature.duplicate('ann2', 'ann1');
model.result('pg12').run;
model.result('pg12').feature('ann2').set('posxexpr', '-140[mm]');
model.result('pg12').feature('ann2').set('text', 'Pressure at 600 Hz');
model.result('pg12').run;
model.result('pg12').create('line1', 'Line');
model.result('pg12').feature('line1').set('expr', '0');
model.result('pg12').feature('line1').set('data', 'mir1');
model.result('pg12').feature('line1').set('titletype', 'none');
model.result('pg12').feature('line1').set('coloring', 'uniform');
model.result('pg12').feature('line1').set('color', 'black');
model.result('pg12').run;

model.study.create('std4');
model.study('std4').create('eig', 'Eigenfrequency');
model.study('std4').feature('eig').set('plotgroup', 'Default');
model.study('std4').feature('eig').set('chkeigregion', true);
model.study('std4').feature('eig').set('conrad', '1');
model.study('std4').feature('eig').set('conradynhm', '1');
model.study('std4').feature('eig').set('storefact', false);
model.study('std4').feature('eig').set('linpsolnum', 'auto');
model.study('std4').feature('eig').set('solnum', 'auto');
model.study('std4').feature('eig').set('notsolnum', 'auto');
model.study('std4').feature('eig').set('outputmap', {});
model.study('std4').feature('eig').set('ngenAUX', '1');
model.study('std4').feature('eig').set('goalngenAUX', '1');
model.study('std4').feature('eig').set('ngenAUX', '1');
model.study('std4').feature('eig').set('goalngenAUX', '1');
model.study('std4').feature('eig').setSolveFor('/physics/mf', false);
model.study('std4').feature('eig').setSolveFor('/physics/acpr', false);
model.study('std4').feature('eig').setSolveFor('/physics/solid', true);
model.study('std4').feature('eig').setSolveFor('/multiphysics/asb1', false);
model.study('std4').feature('eig').setSolveFor('/multiphysics/mmcpl1', false);
model.study('std4').label('Study 4 - Eigenfrequency');
model.study('std4').feature('eig').set('neigsactive', true);
model.study('std4').feature('eig').set('neigs', 10);
model.study('std4').feature('eig').set('eigwhich', 'lr');

model.sol.create('sol7');
model.sol('sol7').study('std4');
model.sol('sol7').create('st1', 'StudyStep');
model.sol('sol7').feature('st1').set('study', 'std4');
model.sol('sol7').feature('st1').set('studystep', 'eig');
model.sol('sol7').create('v1', 'Variables');
model.sol('sol7').feature('v1').set('control', 'eig');
model.sol('sol7').create('e1', 'Eigenvalue');
model.sol('sol7').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol7').feature('e1').set('eigvfunscaleparam', '4.02E-7');
model.sol('sol7').feature('e1').set('control', 'eig');
model.sol('sol7').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol7').attach('std4');
model.sol('sol7').runAll;

model.result.create('pg13', 'PlotGroup2D');
model.result('pg13').set('data', 'dset7');
model.result('pg13').setIndex('looplevel', 1, 0);
model.result('pg13').set('defaultPlotID', 'modeShape');
model.result('pg13').label('Mode Shape (solid)');
model.result('pg13').set('showlegends', false);
model.result('pg13').create('surf1', 'Surface');
model.result('pg13').feature('surf1').set('expr', {'solid.disp'});
model.result('pg13').feature('surf1').set('threshold', 'manual');
model.result('pg13').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg13').feature('surf1').set('colortable', 'Rainbow');
model.result('pg13').feature('surf1').set('colortabletrans', 'none');
model.result('pg13').feature('surf1').set('colorscalemode', 'linear');
model.result('pg13').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg13').feature('surf1').create('def', 'Deform');
model.result('pg13').feature('surf1').feature('def').set('expr', {'u' 'w'});
model.result('pg13').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.dataset.create('dset7solidrev', 'Revolve2D');
model.result.dataset('dset7solidrev').set('data', 'dset7');
model.result.dataset('dset7solidrev').set('revangle', 225);
model.result.dataset('dset7solidrev').set('startangle', -90);
model.result.dataset('dset7solidrev').set('hasspacevars', true);
model.result.dataset('dset7solidrev').set('modenumber', 'solid.mk');
model.result.create('pg14', 'PlotGroup3D');
model.result('pg14').set('data', 'dset7solidrev');
model.result('pg14').setIndex('looplevel', 1, 0);
model.result('pg14').set('defaultPlotID', 'modeShape3D');
model.result('pg14').label('Mode Shape, 3D (solid)');
model.result('pg14').set('showlegends', false);
model.result('pg14').create('surf1', 'Surface');
model.result('pg14').feature('surf1').set('expr', {'solid.disp'});
model.result('pg14').feature('surf1').set('threshold', 'manual');
model.result('pg14').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg14').feature('surf1').set('colortable', 'Rainbow');
model.result('pg14').feature('surf1').set('colortabletrans', 'none');
model.result('pg14').feature('surf1').set('colorscalemode', 'linear');
model.result('pg14').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg14').feature('surf1').create('def', 'Deform');
model.result.dataset('dset7solidrev').set('hasspacevars', true);
model.result('pg14').feature('surf1').feature('def').set('revcoordsys', 'cylindrical');
model.result('pg14').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg14').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg14').feature('surf1').feature('def').set('descractive', true);
model.result.evaluationGroup.create('std4EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std4EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_solid');
model.result.evaluationGroup('std4EvgFrq').set('data', 'dset7');
model.result.evaluationGroup('std4EvgFrq').label('Eigenfrequencies (Study 4 - Eigenfrequency)');
model.result.evaluationGroup('std4EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std4EvgFrq').run;
model.result('pg13').run;
model.result.dataset('dset7').selection.geom('geom1', 2);
model.result.dataset('dset7').selection.named('uni1');
model.result('pg14').run;

model.view('view4').set('showgrid', false);

model.result('pg14').stepNext(0);
model.result('pg14').run;
model.result('pg14').stepNext(0);
model.result('pg14').run;
model.result('pg14').stepNext(0);
model.result('pg14').run;
model.result('pg14').stepNext(0);
model.result('pg14').run;
model.result('pg1').run;

model.view.create('view5', 2);
model.view('view5').set('locked', true);
model.view('view5').axis.set('xmin', -10);
model.view('view5').axis.set('xmax', 60);
model.view('view5').axis.set('ymin', -90);
model.view('view5').axis.set('ymax', -50);

model.result('pg1').run;
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 38, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 88, 0);
model.result('pg3').run;
model.result('pg6').run;
model.result('pg1').run;

model.title(['Loudspeaker Driver ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Frequency-Domain Analysis']);

model.description(['This example shows how to model a loudspeaker driver of the dynamic cone type, common for low and medium frequencies. The analysis is carried out in the frequency domain and thus represents the linear behavior of the driver. The model analysis includes the total electric impedance and the on-axis sound pressure level at a nominal driving voltage, as functions of the frequency. The spatial characteristics of the driver are depicted in a directivity plot.' newline  newline 'The tutorial model is set up using a combination of the Magnetic Fields interface and the Acoustic' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Structure Interaction multiphysics interface. The first analysis solves only the electromagnetic part of the problem when the driver is at rest. From here, the driving force factor and the blocked voice coil impedance can be extracted and exported for further use. The next analysis is of the full model, including the relevant multiphysics interactions like acoustic' native2unicode(hex2dec({'20' '13'}), 'unicode') 'structure interaction and the electromagnetic force acting on the voice coil. This study also includes thermal and viscous damping in the air gap between the voice coil and pole pieces. An eigenfrequency analysis is also carried out in order to identify the cone modes and break up frequencies.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;

model.label('loudspeaker_driver.mph');

model.modelNode.label('Components');

out = model;
