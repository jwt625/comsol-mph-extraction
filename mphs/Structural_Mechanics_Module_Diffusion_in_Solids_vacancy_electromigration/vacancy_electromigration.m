function out = model
%
% vacancy_electromigration.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Diffusion_in_Solids');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics.create('ts', 'TransportInSolids', 'geom1', {'c'});
model.physics.create('ec', 'ConductiveMedia', 'geom1');
model.physics('ec').model('comp1');
model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');
model.physics.create('dode', 'DomainODE', 'geom1', {'u2'});
model.physics('dode').prop('EquationForm').set('form', 'Automatic');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/solid', true);
model.study('std1').feature('time').setSolveFor('/physics/ts', true);
model.study('std1').feature('time').setSolveFor('/physics/ec', true);
model.study('std1').feature('time').setSolveFor('/physics/ht', true);
model.study('std1').feature('time').setSolveFor('/physics/dode', true);

model.param.set('Height', '15[um]');
model.param.descr('Height', 'Height');
model.param.set('Thick', '1[m]');
model.param.descr('Thick', 'Out-of-plane thickness');
model.param.set('Width', '50[um]');
model.param.descr('Width', 'Width');
model.param.label('Geometric Parameters');
model.param.create('par2');
model.param('par2').set('Cv0', '6020[um^-3]');
model.param('par2').descr('Cv0', 'Initial vacancy concentration');
model.param('par2').set('Cv0moles', 'Cv0/N_A_const');
model.param('par2').descr('Cv0moles', 'Initial vacancy concentration (mol/m^3)');
model.param('par2').set('Dv', '2.7e-6[cm^2/s]');
model.param('par2').descr('Dv', 'Diffusivity');
model.param('par2').set('taus', '1.8e-3[s]');
model.param('par2').descr('taus', 'Vacancy relaxation time');
model.param('par2').set('f', '.6');
model.param('par2').descr('f', 'Average vacancy relaxation ratio');
model.param('par2').label('Transport Parameters');
model.param.create('par3');
model.param('par3').set('Jden', '0.01[A/um^2]');
model.param('par3').descr('Jden', 'Current density');
model.param('par3').set('Va', '1.66e7[pm^3]');
model.param('par3').descr('Va', 'Atomic volume');
model.param('par3').set('Znum', '4');
model.param('par3').descr('Znum', 'Effective charge number');
model.param('par3').set('Zref', '50[ohm]');
model.param('par3').descr('Zref', 'Reference impedance');
model.param('par3').set('rho_res', '0.03132 [ohm*um]');
model.param('par3').descr('rho_res', 'Reference resistivity');
model.param('par3').set('alpha_res', '0.0036367 [1/K]');
model.param('par3').descr('alpha_res', 'Resistivity temperature coefficient');
model.param('par3').label('Electric Currents Parameters');
model.param.create('par4');
model.param('par4').set('Qstar', '.00094[eV]');
model.param('par4').descr('Qstar', 'Heat of transport');
model.param('par4').set('T0', '473[K]');
model.param('par4').descr('T0', 'Initial temperature');
model.param('par4').set('Tref', '293.15[K]');
model.param('par4').descr('Tref', 'Reference temperature');
model.param('par4').label('Heat Transfer Parameters');

model.func.create('int1', 'Interpolation');
model.func('int1').set('source', 'file');
model.func('int1').set('filename', 'vacancy_electromigration_hydrostatic_stress.txt');
model.func('int1').set('interp', 'piecewisecubic');
model.func('int1').setIndex('fununit', 'N/cm^2', 0);
model.func('int1').setIndex('argunit', 'um', 0);
model.func('int1').label('Hydrostatic Stress at t=70[s]');
model.func.create('int2', 'Interpolation');
model.func('int2').set('source', 'file');
model.func('int2').set('filename', 'vacancy_electromigration_hydrostatic_stress_steady.txt');
model.func('int2').set('interp', 'piecewisecubic');
model.func('int2').setIndex('fununit', 'N/cm^2', 0);
model.func('int2').setIndex('argunit', 'um', 0);
model.func('int2').label('Steady State Hydrostatic Stress');
model.func.create('int3', 'Interpolation');
model.func('int3').set('source', 'file');
model.func('int3').set('filename', 'vacancy_electromigration_anode_stress.txt');
model.func('int3').set('interp', 'piecewisecubic');
model.func('int3').setIndex('fununit', 'N/cm^2', 0);
model.func('int3').setIndex('argunit', 's', 0);
model.func('int3').label('Stress vs. Time, Anode');
model.func.create('int4', 'Interpolation');
model.func('int4').set('source', 'file');
model.func('int4').set('filename', 'vacancy_electromigration_cathode_stress.txt');
model.func('int4').set('interp', 'piecewisecubic');
model.func('int4').setIndex('fununit', 'N/cm^2', 0);
model.func('int4').setIndex('argunit', 's', 0);
model.func('int4').label('Stress vs. Time, Cathode');
model.func.create('int5', 'Interpolation');
model.func('int5').set('source', 'file');
model.func('int5').set('filename', 'vacancy_electromigration_cathode_concentration.txt');
model.func('int5').setIndex('fununit', 1, 0);
model.func('int5').setIndex('argunit', 's', 0);
model.func('int5').label('Concentration vs. Time, Cathode');
model.func.create('int6', 'Interpolation');
model.func('int6').set('source', 'file');
model.func('int6').set('filename', 'vacancy_electromigration_anode_concentration.txt');
model.func('int6').setIndex('fununit', 1, 0);
model.func('int6').setIndex('argunit', 's', 0);
model.func('int6').label('Concentration vs. Time, Anode');

model.nodeGroup.create('grp1', 'GlobalDefinitions');
model.nodeGroup('grp1').set('type', 'func');
model.nodeGroup('grp1').add('func', 'int1');
model.nodeGroup('grp1').add('func', 'int2');
model.nodeGroup('grp1').add('func', 'int3');
model.nodeGroup('grp1').add('func', 'int4');
model.nodeGroup('grp1').add('func', 'int5');
model.nodeGroup('grp1').add('func', 'int6');
model.nodeGroup('grp1').label('Reference Values');

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'Width' 'Height'});
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').label('Aluminum');
model.material('mat1').set('family', 'aluminum');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat1').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.33');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-350[GPa]');

model.physics('ht').prop('PhysicalModelProperty').set('dz', 'Thick');
model.physics('ht').prop('PhysicalModelProperty').set('Tref', 'Tref');
model.physics('ht').feature('init1').set('Tinit', 'T0');
model.physics('ht').create('temp1', 'TemperatureBoundary', 1);
model.physics('ht').feature('temp1').selection.set([1 4]);
model.physics('ht').feature('temp1').set('T0', 'T0');

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('hstress', '-solid.pm', 'Hydrostatic stress');
model.variable('var1').set('Cveq', 'Cv0*exp((1-f)*Va*hstress/(k_B_const*T))', 'Equilibrium vacancy concentration');
model.variable('var1').set('G', '-((c-Cveq)/taus)', 'Rosenberg-Ohring recombination');
model.variable('var1').set('strate', '(G-cTIME)*Va*f+(1-f)*G*Va', 'Strain rate');
model.variable('var1').set('PFluxX', '-e_const*Znum*(Dv/(k_B_const*T))*ec.Ex*c', 'Flux due to electric field, x direction');
model.variable('var1').set('PFluxY', '-e_const*Znum*(Dv/(k_B_const*T))*ec.Ey*c', 'Flux due to electric field, y direction');
model.variable('var1').set('SFluxX', '-(Dv/(k_B_const*T))*d(hstress,x)*Va*f*c', 'Flux due to stress gradient, x direction');
model.variable('var1').set('SFluxY', '-(Dv/(k_B_const*T))*d(hstress,y)*Va*f*c', 'Flux due to stress gradient, y direction');
model.variable('var1').set('TFluxX', '-(Dv/(k_B_const*T^2))*Tx*Qstar*c', 'Flux due to temperature gradient, x direction');
model.variable('var1').set('TFluxY', '-(Dv/(k_B_const*T^2))*Ty*Qstar*c', 'Flux due to temperature gradient, y direction');

model.physics('ec').prop('d').set('d', 'Thick');
model.physics('ec').feature('cucn1').setIndex('materialType', 'solid', 0);
model.physics('ec').feature('cucn1').set('ConstitutiveRelationJcE', 'LinearizedResistivity');
model.physics('ec').feature('cucn1').set('rho0_mat', 'userdef');
model.physics('ec').feature('cucn1').set('rho0', 'rho_res');
model.physics('ec').feature('cucn1').set('Tref_mat', 'userdef');
model.physics('ec').feature('cucn1').set('Tref', 'Tref');
model.physics('ec').feature('cucn1').set('alpha_mat', 'userdef');
model.physics('ec').feature('cucn1').set('alpha', 'alpha_res');
model.physics('ec').create('gnd1', 'Ground', 1);
model.physics('ec').feature('gnd1').selection.set([1]);
model.physics('ec').feature('gnd1').label('Ground (Anode)');
model.physics('ec').create('ncd1', 'NormalCurrentDensity', 1);
model.physics('ec').feature('ncd1').selection.set([4]);
model.physics('ec').feature('ncd1').set('nJ', 'Jden');
model.physics('ec').feature('ncd1').label('Normal Current Density (Cathode)');
model.physics('ts').prop('dz').set('dz', 'Thick');
model.physics('ts').prop('TransportedQuantity').set('physicalQuantity', 'numberdensity');
model.physics('ts').prop('ShapeProperty').set('order_transportedQuantity', 1);
model.physics('ts').feature('solid1').set('D_c', {'Dv' '0' '0' '0' 'Dv' '0' '0' '0' 'Dv'});
model.physics('ts').feature('init1').setIndex('initc', 'Cv0', 0);
model.physics('ts').create('src1', 'Source', 2);
model.physics('ts').feature('src1').selection.set([1]);
model.physics('ts').feature('src1').setIndex('S', 'G', 0);
model.physics('ts').feature('solid1').create('extfl1', 'ExternalFlux', 2);
model.physics('ts').feature('solid1').feature('extfl1').setIndex('J0_spatial', {'PFluxX' '0' '0'}, 0);
model.physics('ts').feature('solid1').feature('extfl1').setIndex('J0_spatial', {'PFluxX' 'PFluxY' '0'}, 0);
model.physics('ts').feature('solid1').feature('extfl1').label('Flux Due to Electric Field');
model.physics('ts').feature('solid1').create('extfl2', 'ExternalFlux', 2);
model.physics('ts').feature('solid1').feature('extfl2').setIndex('J0_spatial', {'SFluxX' '0' '0'}, 0);
model.physics('ts').feature('solid1').feature('extfl2').setIndex('J0_spatial', {'SFluxX' 'SFluxY' '0'}, 0);
model.physics('ts').feature('solid1').feature('extfl2').label('Flux Due to Stress Gradient');
model.physics('ts').feature('solid1').create('extfl3', 'ExternalFlux', 2);
model.physics('ts').feature('solid1').feature('extfl3').setIndex('J0_spatial', {'TFluxX' '0' '0'}, 0);
model.physics('ts').feature('solid1').feature('extfl3').setIndex('J0_spatial', {'TFluxX' 'TFluxY' '0'}, 0);
model.physics('ts').feature('solid1').feature('extfl3').label('Flux Due to Temperature Gradient');
model.physics('dode').prop('ShapeProperty').set('shapeFunctionType', 'shlag');
model.physics('dode').field('dimensionless').field('ev');
model.physics('dode').field('dimensionless').component(1, 'ev');
model.physics('dode').prop('Units').setIndex('CustomSourceTermUnit', '1/s', 0, 0);
model.physics('dode').feature('dode1').setIndex('f', 'strate', 0);
model.physics('solid').prop('d').set('d', 'Thick');
model.physics('solid').prop('StructuralTransientBehavior').set('StructuralTransientBehavior', 'Quasistatic');
model.physics('solid').create('fix1', 'Fixed', 1);
model.physics('solid').feature('fix1').selection.set([1 2 3 4]);
model.physics('solid').feature('lemm1').create('eiel1', 'ExternalStrain', 2);
model.physics('solid').feature('lemm1').feature('eiel1').set('StrainInput', 'StrainTensor');
model.physics('solid').feature('lemm1').feature('eiel1').set('eext', {'ev/3' '0' '0' '0' 'ev/3' '0' '0' '0' 'ev/3'});

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([1 4]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 15);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([2 3]);
model.mesh('mesh1').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis2').set('elemcount', 50);
model.mesh('mesh1').feature('map1').feature('dis2').set('elemratio', 4);
model.mesh('mesh1').feature('map1').feature('dis2').set('symmetric', true);
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tlist', '0 40 50 60 70 80 range(500,500,3500) 24000 25200 26000 range(40000,10000,190000) range(200000,100000,1400000)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*5.2201532544552744E-5');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', '0 40 50 60 70 80 range(500,500,3500) 24000 25200 26000 range(40000,10000,190000) range(200000,100000,1400000)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_c' 'global' 'comp1_ev' 'global' 'comp1_T' 'global' 'comp1_u' 'global' 'comp1_V' 'global'});
model.sol('sol1').feature('t1').set('atol', {'comp1_c' '1e-3' 'comp1_ev' '1e-3' 'comp1_T' '1e-3' 'comp1_u' '1e-3' 'comp1_V' '1e-3'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_c' 'factor' 'comp1_ev' 'factor' 'comp1_T' 'factor' 'comp1_u' 'factor' 'comp1_V' 'factor'});
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').label('Direct (Merged)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 45, 0);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').set('resolution', 'normal');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('expr', {'u' 'v'});
model.result('pg1').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 45, 0);
model.result('pg2').label('Transported Quantity (ts)');
model.result('pg2').set('titletype', 'custom');
model.result('pg2').set('prefixintitle', '');
model.result('pg2').set('expressionintitle', false);
model.result('pg2').set('typeintitle', true);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'ts.c'});
model.result('pg2').create('str1', 'Streamline');
model.result('pg2').feature('str1').set('expr', {'ts.tflux_cx' 'ts.tflux_cy'});
model.result('pg2').feature('str1').set('posmethod', 'uniform');
model.result('pg2').feature('str1').set('recover', 'pprint');
model.result('pg2').feature('str1').set('pointtype', 'arrow');
model.result('pg2').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg2').feature('str1').set('color', 'gray');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Electric Potential (ec)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 45, 0);
model.result('pg3').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond2/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg3').feature('surf1').set('expr', 'V');
model.result('pg3').feature('surf1').set('colortable', 'Dipole');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature.create('str1', 'Streamline');
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('solutionparams', 'parent');
model.result('pg3').feature('str1').set('expr', {'ec.Ex' 'ec.Ey'});
model.result('pg3').feature('str1').set('titletype', 'none');
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('udist', 0.02);
model.result('pg3').feature('str1').set('maxlen', 0.4);
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('inheritcolor', false);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('data', 'parent');
model.result('pg3').feature('str1').selection.geom('geom1', 1);
model.result('pg3').feature('str1').selection.set([1 2 3 4]);
model.result('pg3').feature('str1').set('inheritplot', 'surf1');
model.result('pg3').feature('str1').feature.create('col1', 'Color');
model.result('pg3').feature('str1').feature('col1').set('expr', 'V');
model.result('pg3').feature('str1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg3').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg3').feature('str1').feature.create('filt1', 'Filter');
model.result('pg3').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Electric Field Norm (ec)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 45, 0);
model.result('pg4').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond2/pg1');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('solutionparams', 'parent');
model.result('pg4').feature('surf1').set('expr', 'ec.normE');
model.result('pg4').feature('surf1').set('colortable', 'Prism');
model.result('pg4').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('surf1').set('colorcalibration', -0.8);
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result('pg4').feature.create('str1', 'Streamline');
model.result('pg4').feature('str1').set('showsolutionparams', 'on');
model.result('pg4').feature('str1').set('solutionparams', 'parent');
model.result('pg4').feature('str1').set('expr', {'ec.Ex' 'ec.Ey'});
model.result('pg4').feature('str1').set('titletype', 'none');
model.result('pg4').feature('str1').set('posmethod', 'uniform');
model.result('pg4').feature('str1').set('udist', 0.02);
model.result('pg4').feature('str1').set('maxlen', 0.4);
model.result('pg4').feature('str1').set('maxtime', Inf);
model.result('pg4').feature('str1').set('inheritcolor', false);
model.result('pg4').feature('str1').set('showsolutionparams', 'on');
model.result('pg4').feature('str1').set('maxtime', Inf);
model.result('pg4').feature('str1').set('showsolutionparams', 'on');
model.result('pg4').feature('str1').set('maxtime', Inf);
model.result('pg4').feature('str1').set('showsolutionparams', 'on');
model.result('pg4').feature('str1').set('maxtime', Inf);
model.result('pg4').feature('str1').set('showsolutionparams', 'on');
model.result('pg4').feature('str1').set('maxtime', Inf);
model.result('pg4').feature('str1').set('data', 'parent');
model.result('pg4').feature('str1').selection.geom('geom1', 1);
model.result('pg4').feature('str1').selection.set([1 2 3 4]);
model.result('pg4').feature('str1').set('inheritplot', 'surf1');
model.result('pg4').feature('str1').feature.create('col1', 'Color');
model.result('pg4').feature('str1').feature('col1').set('expr', 'ec.normE');
model.result('pg4').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg4').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg4').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg4').feature('str1').feature.create('filt1', 'Filter');
model.result('pg4').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Temperature (ht)');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 45, 0);
model.result('pg5').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('expr', 'T');
model.result('pg5').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 45, 0);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').label('Domain ODEs and DAEs');
model.result('pg6').feature('surf1').set('expr', 'ev');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('surf1').set('expr', 'c/Cv0');
model.result('pg2').run;
model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').setIndex('genpoints', 7.5, 0, 1);
model.result.dataset('cln1').setIndex('genpoints', 100, 1, 0);
model.result.dataset('cln1').setIndex('genpoints', 7.5, 1, 1);
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').set('data', 'cln1');
model.result('pg7').setIndex('looplevelinput', 'manual', 0);
model.result('pg7').setIndex('looplevel', [5], 0);
model.result('pg7').run;
model.result('pg7').label('Hydrostatic Stress (Centerline) at 70 s');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Hydrostatic stress (N/cm<sup>2</sup>)');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr1').set('linewidth', 'preference');
model.result('pg7').feature('lngr1').set('expr', '-solid.pm');
model.result('pg7').feature('lngr1').set('unit', 'N/cm^2');
model.result('pg7').feature('lngr1').set('legend', true);
model.result('pg7').feature('lngr1').set('legendmethod', 'manual');
model.result('pg7').feature('lngr1').setIndex('legends', 'Model Results', 0);
model.result('pg7').feature('lngr1').label('Model Results');
model.result('pg7').run;
model.result('pg7').create('lngr2', 'LineGraph');
model.result('pg7').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr2').set('linewidth', 'preference');
model.result('pg7').feature('lngr2').set('expr', 'int1(x)');
model.result('pg7').feature('lngr2').set('unit', 'N/cm^2');
model.result('pg7').feature('lngr2').set('linestyle', 'dashed');
model.result('pg7').feature('lngr2').set('linemarker', 'circle');
model.result('pg7').feature('lngr2').set('markerpos', 'interp');
model.result('pg7').feature('lngr2').set('legend', true);
model.result('pg7').feature('lngr2').set('legendmethod', 'manual');
model.result('pg7').feature('lngr2').setIndex('legends', 'Reference', 0);
model.result('pg7').feature('lngr2').label('Results for Validation');
model.result('pg7').run;
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').setIndex('looplevelinput', 'last', 0);
model.result('pg8').label('Hydrostatic Stress at Steady State (Centerline)');
model.result('pg8').run;
model.result('pg8').feature('lngr2').set('expr', 'int2(x)');
model.result('pg8').run;
model.result.dataset.create('cpt1', 'CutPoint2D');
model.result.dataset('cpt1').set('pointx', 0);
model.result.dataset('cpt1').set('pointy', 7.5);
model.result.dataset('cpt1').label('Cut Point 2D, Anode');
model.result.dataset.duplicate('cpt2', 'cpt1');
model.result.dataset('cpt2').set('pointx', 50);
model.result.dataset('cpt2').label('Cut Point 2D, Cathode');
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Hydrostatic Stress vs. Time');
model.result('pg9').set('titletype', 'label');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Hydrostatic stress (N/cm<sup>2</sup>)');
model.result('pg9').set('legendpos', 'middleright');
model.result('pg9').create('ptgr1', 'PointGraph');
model.result('pg9').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg9').feature('ptgr1').set('linewidth', 'preference');
model.result('pg9').feature('ptgr1').set('data', 'cpt1');
model.result('pg9').feature('ptgr1').set('expr', '-solid.pm');
model.result('pg9').feature('ptgr1').set('unit', 'N/cm^2');
model.result('pg9').feature('ptgr1').set('xdataparamunit', 'd');
model.result('pg9').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg9').feature('ptgr1').setIndex('legends', 'Model Results, Anode', 0);
model.result('pg9').feature('ptgr1').set('legend', true);
model.result('pg9').feature('ptgr1').label('Model Results Anode');
model.result('pg9').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg9').run;
model.result('pg9').feature('ptgr2').set('data', 'cpt2');
model.result('pg9').feature('ptgr2').setIndex('legends', 'Model Results, Cathode', 0);
model.result('pg9').feature('ptgr2').label('Model Results Cathode');
model.result('pg9').run;
model.result('pg9').create('glob1', 'Global');
model.result('pg9').feature('glob1').set('markerpos', 'datapoints');
model.result('pg9').feature('glob1').set('linewidth', 'preference');
model.result('pg9').feature('glob1').set('xdataparamunit', 'd');
model.result('pg9').feature('glob1').setIndex('expr', 'int3(t)', 0);
model.result('pg9').feature('glob1').setIndex('unit', 'N/cm^2', 0);
model.result('pg9').feature('glob1').setIndex('descr', 'Reference, Anode', 0);
model.result('pg9').feature('glob1').setIndex('expr', 'int4(t)', 1);
model.result('pg9').feature('glob1').setIndex('unit', 'N/cm^2', 1);
model.result('pg9').feature('glob1').setIndex('descr', 'Reference, Cathode', 1);
model.result('pg9').feature('glob1').set('linestyle', 'dashed');
model.result('pg9').feature('glob1').set('linemarker', 'circle');
model.result('pg9').feature('glob1').set('markerpos', 'interp');
model.result('pg9').feature('glob1').label('Reference');
model.result('pg9').run;
model.result('pg9').run;
model.result.duplicate('pg10', 'pg9');
model.result('pg10').run;
model.result('pg10').label('Normalized Concentrations vs. Time');
model.result('pg10').set('ylabel', 'Normalized concentration (1)');
model.result('pg10').run;
model.result('pg10').feature('ptgr1').set('expr', 'ts.c/Cv0');
model.result('pg10').run;
model.result('pg10').feature('ptgr2').set('expr', 'ts.c/Cv0');
model.result('pg10').run;
model.result('pg10').feature('glob1').setIndex('expr', 'int5(t)', 0);
model.result('pg10').feature('glob1').setIndex('descr', 'Reference, Anode', 0);
model.result('pg10').feature('glob1').setIndex('expr', 'int6(t)', 1);
model.result('pg10').run;
model.result('pg2').run;
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Normalized Concentration at Steady State');
model.result('pg2').run;
model.result('pg1').run;
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'von Mises stress at steady state (N/m<sup>2</sup>)');
model.result('pg1').set('paramindicator', '');
model.result('pg1').run;

model.title('Vacancy Electromigration in IC Interconnect Lines');

model.description('As integrated circuit (IC) technology advances, with circuits becoming more powerful and compact, it is increasingly important to identify and prevent any causes of circuit failure. One particularly critical factor contributing to circuit failure is electromigration within the interconnects of the circuit, stemming from the accumulation of vacancies within the metal. Electromigration denotes the migration of vacancies within the metal, driven by electric fields, concentration, hydrostatic stress, and temperature gradients. This example illustrates how this highly coupled phenomenon can be modeled and analyzed in COMSOL Multiphysics.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('vacancy_electromigration.mph');

model.modelNode.label('Components');

out = model;
