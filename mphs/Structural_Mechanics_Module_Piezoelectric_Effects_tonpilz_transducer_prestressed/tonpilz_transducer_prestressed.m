function out = model
%
% tonpilz_transducer_prestressed.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Piezoelectric_Effects');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('pabe', 'PressureAcousticsBoundaryElements', 'geom1');
model.physics('pabe').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics('solid').create('pzm1', 'PiezoelectricMaterialModel');
model.physics('solid').feature('pzm1').selection.all;
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics('es').create('ccnp1', 'ChargeConservationPiezo');
model.physics('es').feature('ccnp1').selection.all;

model.multiphysics.create('pze1', 'PiezoelectricEffect', 'geom1', 3);
model.multiphysics('pze1').set('Solid_physics', 'solid');
model.multiphysics('pze1').set('Electrostatics_physics', 'es');

model.study.create('std1');
model.study('std1').create('bolt', 'BoltPretension');
model.study('std1').feature('bolt').set('solnum', 'auto');
model.study('std1').feature('bolt').set('notsolnum', 'auto');
model.study('std1').feature('bolt').set('outputmap', {});
model.study('std1').feature('bolt').set('ngenAUX', '1');
model.study('std1').feature('bolt').set('goalngenAUX', '1');
model.study('std1').feature('bolt').set('ngenAUX', '1');
model.study('std1').feature('bolt').set('goalngenAUX', '1');
model.study('std1').feature('bolt').setSolveFor('/physics/pabe', true);
model.study('std1').feature('bolt').setSolveFor('/physics/solid', true);
model.study('std1').feature('bolt').setSolveFor('/physics/es', true);
model.study('std1').feature('bolt').setSolveFor('/multiphysics/pze1', true);

model.view('view1').set('showgrid', false);

model.geom('geom1').lengthUnit('mm');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('rho0', '1000[kg/m^3]', 'Density of water');
model.param.set('c0', '1480[m/s]', 'Speed of sound in water');
model.param.set('Zeval', '-10[m]', 'Directivity evaluation distance');
model.param.set('Vrms', '1[V]', 'RMS drive voltage');
model.param.set('V0', 'sqrt(2)*Vrms', 'Zero-to-peak drive voltage');
model.param.set('f0min', '30[kHz]', 'Minimum operating frequency');
model.param.set('f0max', '110[kHz]', 'Maximum operating frequency');
model.param.set('f0step', '1[kHz]', 'Frequency step');
model.param.set('F_pre', '3.1[kN]', 'Bolt prestress force');
model.param.set('w_depth', '500[m]', 'Depth of the water');
model.param.set('eta_struct', '0.01', 'Damping ratio of the structural components');

model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').set('quickplane', 'xz');
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', {'6[mm]' '10[mm]'});
model.geom('geom1').feature('wp1').geom.feature('r1').set('pos', {'2[mm]' '15[mm]'});
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').feature('wp1').geom.create('r2', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r2').set('size', {'2[mm]' '8[mm]'});
model.geom('geom1').feature('wp1').geom.feature('r2').set('pos', {'4[mm]' '7[mm]'});
model.geom('geom1').feature('wp1').geom.feature('r2').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('wp1').geom.feature('r2').setIndex('layer', 2, 0);
model.geom('geom1').feature('wp1').geom.feature('r2').setIndex('layername', 'Layer 2', 1);
model.geom('geom1').feature('wp1').geom.feature('r2').setIndex('layer', 2, 1);
model.geom('geom1').feature('wp1').geom.feature('r2').setIndex('layername', 'Layer 3', 2);
model.geom('geom1').feature('wp1').geom.feature('r2').setIndex('layer', 2, 2);
model.geom('geom1').feature('wp1').geom.run('r2');
model.geom('geom1').feature('wp1').geom.create('pol1', 'Polygon');
model.geom('geom1').feature('wp1').geom.feature('pol1').set('source', 'table');
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', '-5[mm]', 0, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 1, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', '5[mm]', 1, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', '2[mm]', 2, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', '5[mm]', 2, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', '2[mm]', 3, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', '7[mm]', 3, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', '9[mm]', 4, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', '7[mm]', 4, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', '20[mm]', 5, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', '-3[mm]', 5, 1);
model.geom('geom1').feature('wp1').geom.run('pol1');
model.geom('geom1').feature('wp1').geom.create('qb1', 'QuadraticBezier');
model.geom('geom1').feature('wp1').geom.feature('qb1').setIndex('p', '-20[mm]', 0, 0);
model.geom('geom1').feature('wp1').geom.feature('qb1').setIndex('p', '-3[mm]', 1, 0);
model.geom('geom1').feature('wp1').geom.feature('qb1').setIndex('p', '-5[mm]', 1, 1);
model.geom('geom1').feature('wp1').geom.feature('qb1').setIndex('p', '20[mm]', 0, 2);
model.geom('geom1').feature('wp1').geom.feature('qb1').setIndex('p', '-3[mm]', 1, 2);
model.geom('geom1').feature('wp1').geom.run('qb1');
model.geom('geom1').feature('wp1').geom.create('uni1', 'Union');
model.geom('geom1').feature('wp1').geom.feature('uni1').selection('input').set({'pol1' 'qb1'});
model.geom('geom1').feature('wp1').geom.run('uni1');
model.geom('geom1').feature('wp1').geom.create('del1', 'Delete');
model.geom('geom1').feature('wp1').geom.feature('del1').selection('input').set('uni1', [1 2 8]);
model.geom('geom1').feature('wp1').geom.run('del1');
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('rev1', 'Revolve');
model.geom('geom1').feature('rev1').set('workplane', 'wp1');
model.geom('geom1').feature('rev1').selection('input').set({'wp1'});
model.geom('geom1').feature('rev1').set('angtype', 'full');
model.geom('geom1').run('rev1');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'20[mm]' '20[mm]' '1'});
model.geom('geom1').feature('blk1').setIndex('size', '60[mm]', 2);
model.geom('geom1').feature('blk1').set('base', 'center');
model.geom('geom1').feature('blk1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('blk1').setIndex('layer', '30[mm]', 0);
model.geom('geom1').run('blk1');
model.geom('geom1').create('int1', 'Intersection');
model.geom('geom1').feature('int1').selection('input').set({'blk1' 'rev1'});
model.geom('geom1').run('int1');
model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').label('Aluminum');
model.geom('geom1').feature('sel1').selection('selection').set('int1', [1 2]);
model.geom('geom1').run('sel1');
model.geom('geom1').create('sel2', 'ExplicitSelection');
model.geom('geom1').feature('sel2').label('Steel Part');
model.geom('geom1').feature('sel2').selection('selection').set('int1', 3);
model.geom('geom1').feature('sel2').set('selkeep', false);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Steel');
model.geom('geom1').feature('sel2').set('contributeto', 'csel1');
model.geom('geom1').run('sel2');
model.geom('geom1').create('sel3', 'ExplicitSelection');
model.geom('geom1').feature('sel3').label('+Z poled Piezo');
model.geom('geom1').feature('sel3').selection('selection').set('int1', [4 6]);
model.geom('geom1').run('sel3');
model.geom('geom1').create('sel4', 'ExplicitSelection');
model.geom('geom1').feature('sel4').label('-Z poled Piezo');
model.geom('geom1').feature('sel4').selection('selection').set('int1', [5 7]);
model.geom('geom1').run('sel4');
model.geom('geom1').create('sel5', 'ExplicitSelection');
model.geom('geom1').feature('sel5').label('Ground boundaries');
model.geom('geom1').feature('sel5').selection('selection').init(2);

model.view('view1').set('renderwireframe', true);

model.geom('geom1').feature('sel5').selection('selection').set('int1', [22 23 30 31 36 37 63 67 70 90 94 97]);
model.geom('geom1').run('sel5');
model.geom('geom1').create('sel6', 'ExplicitSelection');
model.geom('geom1').feature('sel6').label('Voltage boundaries');
model.geom('geom1').feature('sel6').selection('selection').init(2);
model.geom('geom1').feature('sel6').selection('selection').set('int1', [26 27 34 35 65 69 92 96]);
model.geom('geom1').run('sel6');
model.geom('geom1').create('sel7', 'ExplicitSelection');
model.geom('geom1').feature('sel7').label('Submerged boundaries');
model.geom('geom1').feature('sel7').selection('selection').init(2);
model.geom('geom1').feature('sel7').selection('selection').set('int1', [1 2 3 8 10 56 81 111 113]);
model.geom('geom1').run('sel7');
model.geom('geom1').create('sel8', 'ExplicitSelection');
model.geom('geom1').feature('sel8').label('Spring foundation boundaries');
model.geom('geom1').feature('sel8').selection('selection').init(2);
model.geom('geom1').feature('sel8').selection('selection').set('int1', [14 15 59 104]);
model.geom('geom1').run('sel8');
model.geom('geom1').create('sel9', 'ExplicitSelection');
model.geom('geom1').feature('sel9').label('Piezo Domains');
model.geom('geom1').feature('sel9').selection('selection').set('int1', [4 5 6 7]);
model.geom.load({'part1'}, 'Structural_Mechanics_Module/Bolts/simple_bolt_no_thread.mph', {'part1'});
model.geom('geom1').run('sel9');
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'hdia', '8[mm]');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'hthic', '2[mm]');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'ndia', '4[mm]');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'blen', '20[mm]');
model.geom('geom1').feature('pi1').set('workplanepart', 'wp1');
model.geom('geom1').feature('pi1').set('displ', [0 0 25]);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_sel1', 'csel1');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_adjsel1', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_adjsel1', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_sel2', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel2', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_sel3', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel3', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_sel4', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel4', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_sel5', true);
model.geom('geom1').feature('pi1').setEntry('selshowbnd', 'pi1_sel5', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel5', 'none');
model.geom('geom1').run('pi1');
model.geom('geom1').create('comsel1', 'ComplementSelection');
model.geom('geom1').feature('comsel1').label('Excluded BEM boundaries');
model.geom('geom1').feature('comsel1').set('entitydim', 2);
model.geom('geom1').feature('comsel1').set('input', {'sel7'});
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('imprint', true);
model.geom('geom1').run('fin');
model.geom('geom1').create('sel10', 'ExplicitSelection');
model.geom('geom1').feature('sel10').label('Source Boundaries');
model.geom('geom1').feature('sel10').selection('selection').init(2);
model.geom('geom1').feature('sel10').selection('selection').set('fin', [144 145 148 153 155 156 166 176 186 189 215 219 221 225 226 229]);
model.geom('geom1').run('sel10');
model.geom('geom1').create('sel11', 'ExplicitSelection');
model.geom('geom1').feature('sel11').label('Destination Boundaries');
model.geom('geom1').feature('sel11').selection('selection').init(2);
model.geom('geom1').feature('sel11').selection('selection').set('fin', [50 51 52 53 54 55 62 66 91 92 102 107 126 129 130 133]);
model.geom('geom1').run;

model.pair('ap1').manualSelection(true);
model.pair('ap1').source.named('geom1_sel10');
model.pair('ap1').destination.named('geom1_sel11');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.named('geom1_sel7');
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').selection.geom('geom1', 2);
model.cpl('intop2').selection.set([36 37 84 116]);
model.cpl.create('intop3', 'Integration', 'geom1');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').selection.geom('geom1', 2);
model.cpl('intop3').selection.set([6]);

model.func.create('int1', 'Interpolation');
model.func('int1').model('comp1');
model.func('int1').label('c33 factor');
model.func('int1').set('funcname', 'c33_factor');
model.func('int1').setIndex('table', 30, 0, 0);
model.func('int1').setIndex('table', 0.95, 0, 1);
model.func('int1').setIndex('table', 50, 1, 0);
model.func('int1').setIndex('table', 1, 1, 1);
model.func('int1').setIndex('table', 90, 2, 0);
model.func('int1').setIndex('table', 1.02, 2, 1);
model.func('int1').set('interp', 'piecewisecubic');
model.func('int1').setIndex('argunit', 'MPa', 0);
model.func('int1').setIndex('fununit', 1, 0);
model.func.create('int2', 'Interpolation');
model.func('int2').model('comp1');
model.func('int2').label('Loss factor');
model.func('int2').set('funcname', 'loss_factor');
model.func('int2').setIndex('table', 30, 0, 0);
model.func('int2').setIndex('table', 1.25, 0, 1);
model.func('int2').setIndex('table', 50, 1, 0);
model.func('int2').setIndex('table', 1, 1, 1);
model.func('int2').setIndex('table', 90, 2, 0);
model.func('int2').setIndex('table', 0.7, 2, 1);
model.func('int2').set('interp', 'piecewisecubic');
model.func('int2').setIndex('argunit', 'MPa', 0);
model.func('int2').setIndex('fununit', 1, 0);
model.func.create('int3', 'Interpolation');
model.func('int3').model('comp1');
model.func('int3').label('d33 factor');
model.func('int3').set('funcname', 'd33_factor');
model.func('int3').setIndex('table', 30, 0, 0);
model.func('int3').setIndex('table', 0.96, 0, 1);
model.func('int3').setIndex('table', 50, 1, 0);
model.func('int3').setIndex('table', 1, 1, 1);
model.func('int3').setIndex('table', 90, 2, 0);
model.func('int3').setIndex('table', 1.01, 2, 1);
model.func('int3').set('interp', 'piecewisecubic');
model.func('int3').setIndex('argunit', 'MPa', 0);
model.func('int3').setIndex('fununit', 1, 0);

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('Zaco', 'intop1(p)/intop1(pabe.iomega*(w+eps))/(rho0*c0)', 'Specific acoustic impedance');
model.variable('var1').set('pext_1', 'at3_spatial(0,0,-1[m],pabe.p_t,''minc'')', 'Acoustic pressure at 1 m');
model.variable('var1').set('prms', 'sqrt(0.5*pext_1*conj(pext_1))', 'RMS pressure at 1 m');
model.variable('var1').set('TVR', '20*log10(prms/Vrms/1[uPa/V])', 'Transmitting Voltage Response (TVR)');
model.variable('var1').set('pext_Zeval', 'at3_spatial(0,0,Zeval,pabe.p_t,''minc'')', 'Acoustic pressure at Zeval');
model.variable('var1').set('Ifront', '0.5*pext_Zeval*conj(pext_Zeval)/(rho0*c0)', 'On-axis intensity at Zeval');
model.variable('var1').set('Ptot', '-intop1(pabe.I_bndx*pabe.nx+pabe.I_bndy*pabe.ny+pabe.I_bndz*pabe.nz)', 'Total radiated power');
model.variable('var1').set('Iave', 'Ptot/(4*pi*Zeval^2)', 'Average intensity of monopole source at Zeval');
model.variable('var1').set('Di', 'Ifront/Iave', 'Intensity directivity');
model.variable('var1').set('DI', '10*log10(Di)', 'Directivity index of tonpilz transducer');
model.variable('var1').set('k0', '2*pi*freq/c0', 'Wave number');
model.variable('var1').set('pzt_stress', 'F_pre/intop2(1)', 'Nominal compressive stress at the PZT');
model.variable('var1').set('a', 'sqrt(intop3(1)/pi)', 'Radius of the equivalent flanged piston');
model.variable('var1').set('DI_fl_pist', '10*log10((k0*a)^2/(1-2*besselj(1,2*k0*a)/(2*k0*a)))', 'Directivity index of flanged piston');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water, liquid');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat2').label('Aluminum');
model.material('mat2').set('family', 'aluminum');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat2').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.33');
model.material('mat2').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat2').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat2').propertyGroup('Murnaghan').set('n', '-350[GPa]');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').label('Steel AISI 4340');
model.material('mat3').set('family', 'steel');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.28');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').propertyGroup.create('StrainCharge', 'Strain-charge form');
model.material('mat4').propertyGroup.create('StressCharge', 'Stress-charge form');
model.material('mat4').label('Lead Zirconate Titanate (PZT-4)');
model.material('mat4').set('family', 'custom');
model.material('mat4').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat4').set('customdiffuse', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat4').set('noise', true);
model.material('mat4').set('fresnel', 0.9);
model.material('mat4').set('roughness', 0.1);
model.material('mat4').set('metallic', 0);
model.material('mat4').set('pearl', 0);
model.material('mat4').set('diffusewrap', 0);
model.material('mat4').set('clearcoat', 0);
model.material('mat4').set('reflectance', 0);
model.material('mat4').propertyGroup('def').set('relpermittivity', {'762.5' '0' '0' '0' '762.5' '0' '0' '0' '663.2'});
model.material('mat4').propertyGroup('def').set('density', '7500[kg/m^3]');
model.material('mat4').propertyGroup('StrainCharge').set('sE', {'1.23e-011[1/Pa]' '-4.05e-012[1/Pa]' '-5.31e-012[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '-4.05e-012[1/Pa]' '1.23e-011[1/Pa]' '-5.31e-012[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '0[1/Pa]' '-5.31e-012[1/Pa]' '-5.31e-012[1/Pa]' '1.55e-011[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '3.9e-011[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '3.9e-011[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '3.27e-011[1/Pa]'});
model.material('mat4').propertyGroup('StrainCharge').set('dET', {'0[C/N]' '0[C/N]' '-1.23e-010[C/N]' '0[C/N]' '0[C/N]' '-1.23e-010[C/N]' '0[C/N]' '0[C/N]' '2.89e-010[C/N]' '0[C/N]'  ...
'4.96e-010[C/N]' '0[C/N]' '4.96e-010[C/N]' '0[C/N]' '0[C/N]' '0[C/N]' '0[C/N]' '0[C/N]'});
model.material('mat4').propertyGroup('StrainCharge').set('epsilonrT', {'1475' '0' '0' '0' '1475' '0' '0' '0' '1300'});
model.material('mat4').propertyGroup('StressCharge').set('cE', {'1.38999e+011[Pa]' '7.78366e+010[Pa]' '7.42836e+010[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '7.78366e+010[Pa]' '1.38999e+011[Pa]' '7.42836e+010[Pa]' '0[Pa]'  ...
'0[Pa]' '0[Pa]' '7.42836e+010[Pa]' '7.42836e+010[Pa]' '1.15412e+011[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]'  ...
'0[Pa]' '2.5641e+010[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '2.5641e+010[Pa]' '0[Pa]'  ...
'0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '3.0581e+010[Pa]'});
model.material('mat4').propertyGroup('StressCharge').set('eES', {'0[C/m^2]' '0[C/m^2]' '-5.20279[C/m^2]' '0[C/m^2]' '0[C/m^2]' '-5.20279[C/m^2]' '0[C/m^2]' '0[C/m^2]' '15.0804[C/m^2]' '0[C/m^2]'  ...
'12.7179[C/m^2]' '0[C/m^2]' '12.7179[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]'});
model.material('mat4').propertyGroup('StressCharge').set('epsilonrS', {'762.5' '0' '0' '0' '762.5' '0' '0' '0' '663.2'});
model.material('mat1').selection.set([]);
model.material('mat1').selection.allVoids;
model.material('mat2').selection.named('geom1_sel1');
model.material('mat3').selection.named('geom1_csel1_dom');
model.material('mat4').selection.named('geom1_sel9');

model.physics('pabe').selection.set([]);
model.physics('pabe').selection.allVoids;
model.physics('pabe').prop('ReferencePressure').set('ReferenceType', 'ReferencePressureWater');
model.physics('pabe').prop('Symmetry').setIndex('sym3', 'even', 0);
model.physics('pabe').create('eb1', 'ExcludedBoundary', 2);
model.physics('pabe').feature('eb1').selection.named('geom1_comsel1');
model.physics('pabe').feature('bpam1').set('FluidModel', 'OceanAttenuation');
model.physics('pabe').feature('bpam1').set('minput_depth', 'w_depth');
model.physics('solid').feature('pzm1').selection.named('geom1_sel3');
model.physics('solid').feature('pzm1').create('mdmp1', 'MechanicalDamping', 3);
model.physics('solid').feature.duplicate('pzm2', 'pzm1');
model.physics('solid').feature('pzm2').selection.named('geom1_sel4');

model.coordSystem.create('sys2', 'geom1', 'Rotated');
model.coordSystem('sys2').set('angle', {'0' 'pi' '0'});

model.physics('solid').feature('pzm2').set('coordinateSystem', 'sys2');
model.physics('solid').create('spf1', 'SpringFoundation2', 2);
model.physics('solid').feature('spf1').selection.named('geom1_sel8');
model.physics('solid').feature('spf1').set('SpringType', 'kTot');
model.physics('solid').feature('spf1').set('kTot', {'10000[N/m]' '0' '0' '0' '10000[N/m]' '0' '0' '0' '10000[N/m]'});
model.physics('solid').create('pblt1', 'BoltPrestress', -1);
model.physics('solid').feature('pblt1').set('F_pre', 'F_pre');
model.physics('solid').feature('pblt1').feature('sblt1').selection.named('geom1_pi1_sel5');
model.physics('solid').create('cont1', 'Continuity', 2);
model.physics('solid').feature('cont1').set('pairs', {'ap1'});
model.physics('solid').feature('lemm1').create('dmp1', 'Damping', 3);
model.physics('solid').feature('lemm1').feature('dmp1').set('InputParameters', 'DampingRatios');
model.physics('solid').feature('lemm1').feature('dmp1').set('f1', 'f0min');
model.physics('solid').feature('lemm1').feature('dmp1').set('zeta1', 'eta_struct');
model.physics('solid').feature('lemm1').feature('dmp1').set('f2', 'f0max');
model.physics('solid').feature('lemm1').feature('dmp1').set('zeta2', 'eta_struct');
model.physics('es').selection.named('geom1_sel9');
model.physics('es').create('gnd1', 'Ground', 2);
model.physics('es').feature('gnd1').selection.named('geom1_sel5');
model.physics('es').create('term1', 'Terminal', 2);
model.physics('es').feature('term1').selection.named('geom1_sel6');
model.physics('es').feature('term1').set('TerminalType', 'Voltage');
model.physics('es').feature('term1').set('V0', 'linper(V0)');

model.multiphysics.create('asb1', 'AcousticStructureBoundary', 'geom1', 2);
model.multiphysics('asb1').selection.named('geom1_sel7');

model.material('mat4').label('Lead Zirconate Titanate (PZT-4) (with constitutive model)');
model.material('mat4').propertyGroup('StressCharge').set('cE', {'1.38999e+011[Pa]' '7.78366e+010[Pa]' '1.38999e+011[Pa]' '7.42836e+010[Pa]' '7.42836e+010[Pa]' '1.15412e+011[Pa]*c33_factor(pzt_stress)' '0[Pa]' '0[Pa]' '0[Pa]' '2.5641e+010[Pa]'  ...
'0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '2.5641e+010[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]'  ...
'3.0581e+010[Pa]'});
model.material('mat4').propertyGroup('StressCharge').set('eES', {'0[C/m^2]' '0[C/m^2]' '-5.20279[C/m^2]' '0[C/m^2]' '0[C/m^2]' '-5.20279[C/m^2]' '0[C/m^2]' '0[C/m^2]' '15.0804[C/m^2]*d33_factor(pzt_stress)' '0[C/m^2]'  ...
'12.7179[C/m^2]' '0[C/m^2]' '12.7179[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]'});
model.material('mat4').propertyGroup('StressCharge').set('eta_cE', {'0.01*loss_factor(pzt_stress)'});

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.set([3 8 22 23 70 77 97 109]);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', '6[mm]');
model.mesh('mesh1').feature('size').set('hmin', '1[mm]');
model.mesh('mesh1').feature('size').set('hcurve', 0.3);
model.mesh('mesh1').run;
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([1 4 5 6 7]);
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.named('geom1_sel9');
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 2);
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftet1').feature('size1').selection.named('geom1_sel5');
model.mesh('mesh1').run;

model.study('std1').create('frlin', 'Frequencylinearized');
model.study('std1').feature('frlin').set('punit', 'kHz');
model.study('std1').feature('frlin').set('plist', '1 2 5 10 20 range(f0min,f0step,f0max)');
model.study('std1').feature('frlin').set('geometricNonlinearity', true);
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'rho0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'kg/m^3', 0);
model.study('std1').feature('param').setIndex('pname', 'rho0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'kg/m^3', 0);
model.study('std1').feature('param').setIndex('pname', 'F_pre', 0);
model.study('std1').feature('param').setIndex('plistarr', '1.9 4.4', 0);
model.study('std1').feature('param').setIndex('punit', 'kN', 0);
model.study('std1').setGenPlots(false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'bolt');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_solid_pblt1_sblt1_d_pre').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_pblt1_sblt1_d_pre').set('scaleval', '1e-4');
model.sol('sol1').feature('v1').set('control', 'bolt');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (pze1) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (pze1)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'frlin');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_solid_pblt1_sblt1_d_pre').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_solid_pblt1_sblt1_d_pre').set('scaleval', '1e-4');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'frlin');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s2').feature('p1').set('plistarr', {'1 2 5 10 20 range(f0min,f0step,f0max)'});
model.sol('sol1').feature('s2').feature('p1').set('punit', {'kHz'});
model.sol('sol1').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s2').feature('p1').set('probes', {});
model.sol('sol1').feature('s2').feature('p1').set('control', 'frlin');
model.sol('sol1').feature('s2').set('nonlin', 'linper');
model.sol('sol1').feature('s2').set('storelinpoint', true);
model.sol('sol1').feature('s2').set('linpsolnum', 'all');
model.sol('sol1').feature('s2').set('control', 'frlin');
model.sol('sol1').feature('s2').set('linpmethod', 'sol');
model.sol('sol1').feature('s2').set('linpsol', 'sol1');
model.sol('sol1').feature('s2').set('linpsoluse', 'sol2');
model.sol('sol1').feature('s2').set('control', 'frlin');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('iDef', 'Iterative');
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 500);
model.sol('sol1').feature('s2').feature('i1').label('Suggested Iterative Solver (GMRES with SAI and Direct Precon.) (pze1_asb1) (Merged)');
model.sol('sol1').feature('s2').feature('i1').create('sai1', 'SAI');
model.sol('sol1').feature('s2').feature('i1').feature('sai1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i1').feature('sai1').set('hybridvar', {'comp1_p' 'comp1_pabe_p_down' 'comp1_pabe_p_up' 'comp1_pabe_bpam1_bemflux'});
model.sol('sol1').feature('s2').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_solid_pblt1_sblt1_d_pre' 'comp1_V'});
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s2').feature('d1').label('Suggested Direct Solver (pze1_asb1)');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i2').set('itrestart', 200);
model.sol('sol1').feature('s2').feature('i2').label('Suggested Iterative Solver (GMRES with Direct Precon.) (pze1_asb1)');
model.sol('sol1').feature('s2').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('dp1').set('hybridvar', {'comp1_p' 'comp1_pabe_p_down' 'comp1_pabe_p_up' 'comp1_pabe_bpam1_bemflux'});
model.sol('sol1').feature('s2').feature('i2').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i2').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('dp2').set('hybridvar', {'comp1_u' 'comp1_solid_pblt1_sblt1_d_pre' 'comp1_V'});
model.sol('sol1').feature('s2').feature('i2').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('dp2').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').feature('s2').feature.remove('iDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'F_pre'});
model.batch('p1').set('plistarr', {'1.9 4.4'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol3');
model.sol('sol3').study('std1');
model.sol('sol3').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol3');
model.batch('p1').run('compute');

model.result.dataset.create('grid1', 'Grid3D');
model.result.dataset('grid1').set('source', 'data');
model.result.dataset('grid1').set('data', 'dset3');
model.result.dataset('grid1').set('parmin1', '-50[mm]');
model.result.dataset('grid1').set('parmax1', 0);
model.result.dataset('grid1').set('parmin2', '-50[mm]');
model.result.dataset('grid1').set('parmax2', '50[mm]');
model.result.dataset('grid1').set('parmax3', '-150[mm]');
model.result.dataset('grid1').set('res1', 40);
model.result.dataset('grid1').set('res2', 80);
model.result.dataset('grid1').set('res3', 120);
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').run;
model.result('pg1').label('Static Stress from Pretension');
model.result('pg1').set('data', 'dset3');
model.result('pg1').set('titletype', 'label');
model.result('pg1').set('edges', false);
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', 'solid.sz');
model.result('pg1').feature('vol1').set('unit', 'MPa');
model.result('pg1').feature('vol1').set('evalmethod', 'linpoint');
model.result('pg1').feature('vol1').set('rangecoloractive', true);
model.result('pg1').feature('vol1').set('rangecolormin', -100);
model.result('pg1').feature('vol1').set('rangecolormax', 400);
model.result('pg1').feature('vol1').create('filt1', 'Filter');
model.result('pg1').run;
model.result('pg1').feature('vol1').feature('filt1').set('expr', 'x>-0.01[mm]');
model.result('pg1').run;
model.result('pg1').feature('vol1').create('def1', 'Deform');
model.result('pg1').run;
model.result('pg1').feature('vol1').feature('def1').set('evalmethod', 'linpoint');
model.result('pg1').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg1').feature('vol1').feature('def1').set('scale', 120);
model.result('pg1').run;
model.result('pg1').create('line1', 'Line');
model.result('pg1').feature('line1').set('expr', '0');
model.result('pg1').feature('line1').set('evalmethod', 'linpoint');
model.result('pg1').feature('line1').set('titletype', 'none');
model.result('pg1').feature('line1').set('coloring', 'uniform');
model.result('pg1').feature('line1').set('color', 'black');
model.result('pg1').feature('line1').set('inheritplot', 'vol1');
model.result('pg1').feature('line1').set('inheritcolor', false);
model.result('pg1').feature('line1').set('inheritrange', false);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('line1').feature.copy('def1', 'pg1/vol1/def1');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('line1').feature.copy('filt1', 'pg1/vol1/filt1');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 1, 1);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').run;
model.result.duplicate('pg2', 'pg1');
model.result('pg2').run;
model.result('pg2').label('Static Deformation from Pretension');
model.result('pg2').run;
model.result('pg2').feature('vol1').set('expr', 'w');
model.result('pg2').feature('vol1').set('rangecolormin', -0.015);
model.result('pg2').feature('vol1').set('rangecolormax', 0.025);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 1, 1);
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('Acoustic Pressure');
model.result('pg3').set('data', 'grid1');
model.result('pg3').setIndex('looplevel', 19, 0);
model.result('pg3').set('edges', false);
model.result('pg3').create('mslc1', 'Multislice');
model.result('pg3').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg3').feature('mslc1').set('xcoord', 0);
model.result('pg3').feature('mslc1').set('colortable', 'Wave');
model.result('pg3').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').create('line1', 'Line');
model.result('pg3').feature('line1').set('data', 'dset3');
model.result('pg3').feature('line1').set('solutionparams', 'parent');
model.result('pg3').feature('line1').set('expr', '0');
model.result('pg3').feature('line1').set('titletype', 'none');
model.result('pg3').feature('line1').set('coloring', 'uniform');
model.result('pg3').feature('line1').set('color', 'black');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('data', 'dset3');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg3').feature('surf1').set('expr', 'pabe.p_t_bnd');
model.result('pg3').feature('surf1').set('inheritplot', 'mslc1');
model.result('pg3').run;
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Sound Pressure Level');
model.result('pg4').run;
model.result('pg4').feature('mslc1').set('expr', 'pabe.Lp');
model.result('pg4').feature('mslc1').set('colortable', 'Rainbow');
model.result('pg4').feature('mslc1').set('colorscalemode', 'linear');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').feature('surf1').set('expr', 'pabe.Lp_bnd');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').run;
model.result('pg5').label('Voltage');
model.result('pg5').set('data', 'dset3');
model.result('pg5').selection.geom('geom1', 3);
model.result('pg5').selection.named('geom1_sel9');
model.result('pg5').create('vol1', 'Volume');
model.result('pg5').feature('vol1').set('expr', 'V');
model.result('pg5').feature('vol1').create('filt1', 'Filter');
model.result('pg5').run;
model.result('pg5').feature('vol1').feature('filt1').set('expr', 'x>-0.01[mm]');
model.result('pg5').run;
model.result('pg2').run;
model.result.duplicate('pg6', 'pg2');
model.result('pg6').run;
model.result('pg6').label('Dynamic Deformation');
model.result('pg6').run;
model.result('pg6').feature('vol1').set('evalmethod', 'harmonic');
model.result('pg6').feature('vol1').set('rangecoloractive', false);
model.result('pg6').run;
model.result('pg6').feature('vol1').feature('def1').set('evalmethod', 'harmonic');
model.result('pg6').feature('vol1').feature('def1').set('scaleactive', false);
model.result('pg6').run;
model.result('pg6').feature('line1').feature('def1').set('evalmethod', 'harmonic');
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 18, 0);
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 19, 0);
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 86, 0);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Specific Acoustic Impedance');
model.result('pg7').set('data', 'dset3');
model.result('pg7').setIndex('looplevelinput', 'manual', 1);
model.result('pg7').setIndex('looplevel', [2], 1);
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', 'f (kHz)');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Z/(\rho c)');
model.result('pg7').set('legendpos', 'upperleft');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').setIndex('expr', 'abs(Zaco)', 0);
model.result('pg7').feature('glob1').setIndex('unit', 1, 0);
model.result('pg7').feature('glob1').setIndex('descr', '', 0);
model.result('pg7').feature('glob1').setIndex('expr', 'real(Zaco)', 1);
model.result('pg7').feature('glob1').setIndex('unit', 1, 1);
model.result('pg7').feature('glob1').setIndex('descr', '', 1);
model.result('pg7').feature('glob1').setIndex('expr', 'imag(Zaco)', 2);
model.result('pg7').feature('glob1').setIndex('unit', 1, 2);
model.result('pg7').feature('glob1').setIndex('descr', '', 2);
model.result('pg7').feature('glob1').set('legendmethod', 'manual');
model.result('pg7').feature('glob1').setIndex('legends', 'Absolute value', 0);
model.result('pg7').feature('glob1').setIndex('legends', 'Real part', 1);
model.result('pg7').feature('glob1').setIndex('legends', 'Imaginary part', 2);
model.result('pg7').feature('glob1').set('xdata', 'expr');
model.result('pg7').feature('glob1').set('xdataexpr', 'freq');
model.result('pg7').feature('glob1').set('xdataunit', 'kHz');
model.result('pg7').feature('glob1').set('linewidth', 2);
model.result('pg7').feature('glob1').set('linestyle', 'cycle');
model.result('pg7').run;
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('Transmitting Voltage Response (TVR)');
model.result('pg8').setIndex('looplevelinput', 'all', 1);
model.result('pg8').set('ylabel', 'TVR (dB rel. 1\mu Pa/V)');
model.result('pg8').set('legendpos', 'lowerright');
model.result('pg8').run;
model.result('pg8').feature('glob1').set('expr', {'TVR'});
model.result('pg8').feature('glob1').set('descr', {'Transmitting Voltage Response (TVR)'});
model.result('pg8').feature('glob1').set('unit', {''});
model.result('pg8').feature('glob1').set('legendmethod', 'automatic');
model.result('pg8').run;
model.result('pg7').run;
model.result.duplicate('pg9', 'pg7');
model.result('pg9').run;
model.result('pg9').label('Directivity Index (DI)');
model.result('pg9').set('ylabel', 'DI (dB)');
model.result('pg9').run;
model.result('pg9').feature('glob1').set('expr', {'DI'});
model.result('pg9').feature('glob1').set('descr', {'Directivity index of tonpilz transducer'});
model.result('pg9').feature('glob1').set('unit', {''});
model.result('pg9').feature('glob1').set('expr', {'DI' 'DI_fl_pist'});
model.result('pg9').feature('glob1').set('descr', {'Directivity index of tonpilz transducer' 'Directivity index of flanged piston'});
model.result('pg9').feature('glob1').set('legendmethod', 'automatic');
model.result('pg9').run;
model.result('pg9').run;
model.result.duplicate('pg10', 'pg9');
model.result('pg10').run;
model.result('pg10').label('Total Radiated Power');
model.result('pg10').setIndex('looplevelinput', 'all', 1);
model.result('pg10').set('ylabel', 'Ptot (mW)');
model.result('pg10').set('legendpos', 'upperright');
model.result('pg10').run;
model.result('pg10').feature('glob1').set('expr', {'Ptot'});
model.result('pg10').feature('glob1').set('descr', {'Total radiated power'});
model.result('pg10').feature('glob1').set('unit', {'W'});
model.result('pg10').feature('glob1').setIndex('unit', 'mW', 0);
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Electric Impedance');
model.result('pg11').set('data', 'dset3');
model.result('pg11').set('titletype', 'label');
model.result('pg11').set('twoyaxes', true);
model.result('pg11').set('ylog', true);
model.result('pg11').create('glob1', 'Global');
model.result('pg11').feature('glob1').set('markerpos', 'datapoints');
model.result('pg11').feature('glob1').set('linewidth', 'preference');
model.result('pg11').feature('glob1').setIndex('expr', 'abs(1/es.Y11)', 0);
model.result('pg11').feature('glob1').setIndex('unit', ['ohm' ], 0);
model.result('pg11').feature('glob1').setIndex('descr', '|Z<sub>el</sub>|', 0);
model.result('pg11').feature('glob1').set('linewidth', 1);
model.result('pg11').feature.duplicate('glob2', 'glob1');
model.result('pg11').run;
model.result('pg11').feature('glob2').set('plotonsecyaxis', true);
model.result('pg11').feature('glob2').setIndex('expr', 'arg(1/es.Y11)', 0);
model.result('pg11').feature('glob2').setIndex('unit', 'deg', 0);
model.result('pg11').feature('glob2').setIndex('descr', 'Angle', 0);
model.result('pg11').feature('glob2').set('linestyle', 'dotted');
model.result('pg11').feature('glob2').set('linecolor', 'cyclereset');
model.result('pg11').run;
model.result.dataset.create('grid2', 'Grid1D');
model.result.dataset('grid2').set('source', 'data');
model.result.dataset('grid2').set('parmin1', 30);
model.result.dataset('grid2').set('parmax1', 90);
model.result.create('pg12', 'PlotGroup1D');
model.result('pg12').run;
model.result('pg12').label('Variation of properties');
model.result('pg12').set('titletype', 'label');
model.result('pg12').set('ylabelactive', true);
model.result('pg12').set('ylabel', 'Factor (1)');
model.result('pg12').set('legendpos', 'lowerright');
model.result('pg12').create('lngr1', 'LineGraph');
model.result('pg12').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg12').feature('lngr1').set('linewidth', 'preference');
model.result('pg12').feature('lngr1').set('data', 'grid2');
model.result('pg12').feature('lngr1').setIndex('looplevelinput', 'last', 0);
model.result('pg12').feature('lngr1').set('expr', 'c33_factor(x[1/mm][MPa])');
model.result('pg12').feature('lngr1').set('xdata', 'expr');
model.result('pg12').feature('lngr1').set('xdataexpr', 'x[1/mm][MPa]');
model.result('pg12').feature('lngr1').set('xdatadescractive', true);
model.result('pg12').feature('lngr1').set('xdatadescr', 'Pretension');
model.result('pg12').feature('lngr1').set('xdataunit', 'MPa');
model.result('pg12').feature('lngr1').set('legend', true);
model.result('pg12').feature('lngr1').set('autosolution', false);
model.result('pg12').feature('lngr1').set('autodescr', true);
model.result('pg12').feature('lngr1').set('linewidth', 1);
model.result('pg12').run;
model.result('pg12').feature.duplicate('lngr2', 'lngr1');
model.result('pg12').run;
model.result('pg12').feature('lngr2').set('expr', 'loss_factor(x[1/mm][MPa])');
model.result('pg12').feature.duplicate('lngr3', 'lngr2');
model.result('pg12').run;
model.result('pg12').feature('lngr3').set('expr', 'd33_factor(x[1/mm][MPa])');
model.result('pg12').run;
model.result('pg12').run;
model.result('pg12').create('ann1', 'Annotation');
model.result('pg12').feature('ann1').set('showpoint', false);
model.result('pg12').feature('ann1').set('posxexpr', 30);
model.result('pg12').run;
model.result('pg6').run;
model.result.duplicate('pg13', 'pg6');
model.result('pg13').run;
model.result('pg13').label('Thumbnail');
model.result('pg13').run;
model.result('pg13').feature('vol1').set('colortable', 'ThermalDark');
model.result('pg13').feature('vol1').set('colortabletrans', 'reverse');
model.result('pg13').run;
model.result('pg13').create('mslc1', 'Multislice');
model.result('pg13').feature('mslc1').set('data', 'grid1');
model.result('pg13').feature('mslc1').set('solutionparams', 'parent');
model.result('pg13').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg13').feature('mslc1').set('xcoord', 0);
model.result('pg13').feature('mslc1').set('colortable', 'Wave');
model.result('pg13').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg13').run;
model.result('pg13').run;
model.result.create('pg14', 'PlotGroup3D');
model.result('pg14').run;
model.result('pg14').set('titletype', 'none');
model.result('pg14').create('vol1', 'Volume');
model.result('pg14').feature('vol1').set('expr', '0');
model.result('pg14').feature('vol1').set('coloring', 'uniform');
model.result('pg14').feature('vol1').set('color', 'gray');
model.result('pg14').feature('vol1').set('resolution', 'extrafine');
model.result('pg14').feature('vol1').create('sel1', 'Selection');
model.result('pg14').feature('vol1').feature('sel1').selection.set([3 8 9 10 17 24 25]);
model.result('pg14').run;
model.result('pg14').run;
model.result('pg14').feature.duplicate('vol2', 'vol1');
model.result('pg14').run;
model.result('pg14').feature('vol2').set('color', 'green');
model.result('pg14').run;
model.result('pg14').feature('vol2').feature('sel1').selection.set([4 5 6 7]);
model.result('pg14').run;
model.result('pg14').feature.duplicate('vol3', 'vol1');
model.result('pg14').run;
model.result('pg14').feature('vol3').set('color', 'custom');
model.result('pg14').feature('vol3').set('customcolor', [0.32549020648002625 0.3294117748737335 0.41960784792900085]);
model.result('pg14').run;
model.result('pg14').feature('vol3').feature('sel1').selection.set([1 2]);
model.result('pg14').run;
model.result('pg14').create('line1', 'Line');
model.result('pg14').feature('line1').set('expr', '0');
model.result('pg14').feature('line1').set('coloring', 'uniform');
model.result('pg14').feature('line1').set('color', 'black');
model.result('pg14').feature('line1').set('resolution', 'extrafine');
model.result('pg14').run;
model.result('pg14').run;
model.result.remove('pg14');
model.result('pg13').run;

model.title('Piezoelectric Tonpilz Transducer with a Prestressed Bolt');

model.description('A tonpilz transducer is used for relatively low frequency, high power sound emission. It is one of the popular transducer configuration for SONAR applications. The transducer consists of piezoceramic rings stacked between a head mass and a tail mass which are connected by a central bolt. This example shows how to incorporate the effect of a pretension in the bolt and how to add a constitutive model for the effect on the piezoelectric material. The bolt geometry is imported from the Part Libraries. The frequency response shows the structural and acoustic effects such as deformation, stresses, radiated power, sound pressure level, the transmitting voltage response (TVR) curve, and the directivity index (DI) of the sound beam.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;

model.label('tonpilz_transducer_prestressed.mph');

model.modelNode.label('Components');

out = model;
