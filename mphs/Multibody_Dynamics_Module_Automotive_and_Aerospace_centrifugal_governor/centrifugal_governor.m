function out = model
%
% centrifugal_governor.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Automotive_and_Aerospace');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/mbd', true);

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'centrifugal_governor.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('createpairs', false);
model.geom('geom1').run('fin');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('k', '3000[N/m]');
model.variable('var1').descr('k', 'Spring constant');
model.variable('var1').set('c', '10[N*s/m]');
model.variable('var1').descr('c', 'Damping coefficient');
model.variable('var1').set('rpm', '1000*step1(t)');
model.variable('var1').descr('rpm', 'RPM of the spindle');
model.variable('var1').set('omega', '(2*pi*rpm/60)[rad/s]');
model.variable('var1').descr('omega', 'Angular velocity of the spindle');
model.variable('var1').set('N', 'rpm/60[s]*t');
model.variable('var1').descr('N', 'Revolutions of the spindle');

model.func.create('step1', 'Step');
model.func('step1').model('comp1');
model.func('step1').set('location', '0.125[s]');
model.func('step1').set('from', 1);
model.func('step1').set('to', 2);
model.func('step1').set('smooth', 0.01);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.physics('mbd').prop('InitialValues').set('omega_Init', {'0' '0' 'omega'});
model.physics('mbd').create('att1', 'Attachment', 2);
model.physics('mbd').feature('att1').selection.set([119 120 127 129]);
model.physics('mbd').create('att2', 'Attachment', 2);
model.physics('mbd').feature('att2').selection.set([89 90 92 93]);
model.physics('mbd').create('att3', 'Attachment', 2);
model.physics('mbd').feature('att3').selection.set([101 102 104 105]);
model.physics('mbd').create('att4', 'Attachment', 2);
model.physics('mbd').feature('att4').selection.set([191 192 193 195]);
model.physics('mbd').create('att5', 'Attachment', 2);
model.physics('mbd').feature('att5').selection.set([210 211 212 214]);
model.physics('mbd').create('att6', 'Attachment', 2);
model.physics('mbd').feature('att6').selection.set([166 167 168 170 177 178]);
model.physics('mbd').create('att7', 'Attachment', 2);
model.physics('mbd').feature('att7').selection.set([138 139 141 142]);
model.physics('mbd').create('att8', 'Attachment', 2);
model.physics('mbd').feature('att8').selection.set([149 150 151 153]);
model.physics('mbd').create('att9', 'Attachment', 2);
model.physics('mbd').feature('att9').selection.set([36 37 39 41]);
model.physics('mbd').create('att10', 'Attachment', 2);
model.physics('mbd').feature('att10').selection.set([111 112 114 115]);
model.physics('mbd').create('att11', 'Attachment', 2);
model.physics('mbd').feature('att11').selection.set([16 17 18 19 22 24]);
model.physics('mbd').create('att12', 'Attachment', 2);
model.physics('mbd').feature('att12').selection.set([48 49 50 52]);
model.physics('mbd').create('att13', 'Attachment', 2);
model.physics('mbd').feature('att13').selection.set([66 67 69 71]);
model.physics('mbd').create('att14', 'Attachment', 2);
model.physics('mbd').feature('att14').selection.set([77 78 80 81]);

model.nodeGroup.create('grp1', 'Physics', 'mbd');
model.nodeGroup('grp1').placeAfter('init1');
model.nodeGroup('grp1').add('att1');
model.nodeGroup('grp1').add('att2');
model.nodeGroup('grp1').add('att3');
model.nodeGroup('grp1').add('att4');
model.nodeGroup('grp1').add('att5');
model.nodeGroup('grp1').add('att6');
model.nodeGroup('grp1').add('att7');
model.nodeGroup('grp1').add('att8');
model.nodeGroup('grp1').add('att9');
model.nodeGroup('grp1').add('att10');
model.nodeGroup('grp1').add('att11');
model.nodeGroup('grp1').add('att12');
model.nodeGroup('grp1').add('att13');
model.nodeGroup('grp1').add('att14');
model.nodeGroup('grp1').label('Attachments');

model.physics('mbd').create('prj1', 'PrismaticJoint', -1);
model.physics('mbd').feature('prj1').set('Source', 'att1');
model.physics('mbd').feature('prj1').set('Destination', 'att2');
model.physics('mbd').feature('prj1').set('e', [0 0 1]);
model.physics('mbd').feature('prj1').create('sd1', 'SpringAndDamper', -1);
model.physics('mbd').feature('prj1').feature('sd1').set('k_u', 'k');
model.physics('mbd').feature('prj1').feature('sd1').set('c_u', 'c');
model.physics('mbd').create('hgj1', 'HingeJoint', -1);
model.physics('mbd').feature('hgj1').set('Source', 'att3');
model.physics('mbd').feature('hgj1').set('Destination', 'att4');
model.physics('mbd').feature('hgj1').set('e', [0 1 0]);
model.physics('mbd').feature.duplicate('hgj2', 'hgj1');
model.physics('mbd').feature('hgj2').set('Source', 'att5');
model.physics('mbd').feature('hgj2').set('Destination', 'att6');
model.physics('mbd').feature.duplicate('hgj3', 'hgj2');
model.physics('mbd').feature('hgj3').set('Source', 'att7');
model.physics('mbd').feature('hgj3').set('Destination', 'att8');
model.physics('mbd').feature.duplicate('hgj4', 'hgj3');
model.physics('mbd').feature('hgj4').set('Source', 'att9');
model.physics('mbd').feature('hgj4').set('Destination', 'att10');
model.physics('mbd').feature.duplicate('hgj5', 'hgj4');
model.physics('mbd').feature('hgj5').set('Source', 'att11');
model.physics('mbd').feature('hgj5').set('Destination', 'att12');
model.physics('mbd').feature.duplicate('hgj6', 'hgj5');
model.physics('mbd').feature('hgj6').set('Source', 'att13');
model.physics('mbd').feature('hgj6').set('Destination', 'att14');
model.physics('mbd').feature.duplicate('hgj7', 'hgj6');
model.physics('mbd').feature('hgj7').set('Source', 'fixed');
model.physics('mbd').feature('hgj7').set('Destination', 'att1');
model.physics('mbd').feature('hgj7').set('e', [0 0 1]);
model.physics('mbd').feature('hgj7').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('hgj7').feature('pm1').set('PrescribedMotionThroughRotational', 'AngularVelocity');
model.physics('mbd').feature('hgj7').feature('pm1').set('omegap', 'omega');

model.nodeGroup.create('grp2', 'Physics', 'mbd');
model.nodeGroup('grp2').placeAfter('init1');
model.nodeGroup('grp2').add('prj1');
model.nodeGroup('grp2').add('hgj1');
model.nodeGroup('grp2').add('hgj2');
model.nodeGroup('grp2').add('hgj3');
model.nodeGroup('grp2').add('hgj4');
model.nodeGroup('grp2').add('hgj5');
model.nodeGroup('grp2').add('hgj6');
model.nodeGroup('grp2').add('hgj7');
model.nodeGroup('grp2').label('Joints');

model.mesh('mesh1').autoMeshSize(6);

model.study('std1').feature('time').set('tlist', 'range(0,0.001,0.25)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scaleval', '0.002108460406808381');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_disp').set('scaleval', '0.002108460406808381');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.2108460406808381');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.001,0.25)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'manual');
model.sol('sol1').feature('t1').set('tstepsbdf', 'free');
model.sol('sol1').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol1').feature('t1').set('maxstepbdf', 0.005);
model.sol('sol1').feature('t1').set('consistent', false);
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Displacement (mbd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 251, 0);
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (mbd)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 251, 0);
model.result('pg2').set('defaultPlotID', 'velocity');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').label('Volume');
model.result('pg2').feature('vol1').set('expr', 'mod(dom,10)');
model.result('pg2').feature('vol1').set('unit', '1');
model.result('pg2').feature('vol1').set('colortable', 'Cyclic');
model.result('pg2').feature('vol1').set('colorlegend', false);
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg2').feature('vol1').feature.create('def1', 'Deform');
model.result('pg2').feature('vol1').feature('def1').label('Deformation');
model.result('pg2').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg2').feature.create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').label('Arrow Line');
model.result('pg2').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY' 'mbd.u_tZ'});
model.result('pg2').feature('arwl1').set('placement', 'elements');
model.result('pg2').feature('arwl1').set('data', 'parent');
model.result('pg2').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg2').feature('arwl1').feature('def1').label('Deformation');
model.result('pg2').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 161, 0);
model.result('pg1').create('pttraj1', 'PointTrajectories');
model.result('pg1').feature('pttraj1').selection.set([1]);
model.result('pg1').feature('pttraj1').set('linetype', 'tube');
model.result('pg1').feature('pttraj1').create('col1', 'Color');
model.result('pg1').run;
model.result('pg1').feature('pttraj1').feature('col1').set('expr', 't');
model.result('pg1').feature('pttraj1').feature('col1').set('colorlegend', false);
model.result('pg1').run;
model.result('pg1').run;
model.result.duplicate('pg3', 'pg1');
model.result('pg3').run;
model.result('pg3').label('Stress');
model.result('pg3').run;
model.result('pg3').feature('surf1').set('expr', 'mbd.misesGp');
model.result('pg3').feature('surf1').set('descr', 'von Mises stress');
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Relative Displacement');
model.result('pg4').set('titletype', 'label');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').set('expr', {'mbd.prj1.u'});
model.result('pg4').feature('glob1').set('descr', {'Relative displacement'});
model.result('pg4').feature('glob1').set('unit', {'m'});
model.result('pg4').feature('glob1').set('titletype', 'none');
model.result('pg4').feature('glob1').set('legend', false);
model.result('pg4').feature('glob1').set('linewidth', 2);
model.result('pg4').feature('glob1').set('xdata', 'expr');
model.result('pg4').feature('glob1').set('xdataexpr', 'N');
model.result('pg4').run;
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Phase Portrait');
model.result('pg5').set('titletype', 'label');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').set('expr', {'mbd.prj1.u_t'});
model.result('pg5').feature('glob1').set('descr', {'Relative velocity'});
model.result('pg5').feature('glob1').set('unit', {'m/s'});
model.result('pg5').feature('glob1').set('titletype', 'manual');
model.result('pg5').feature('glob1').set('title', 'Phase portrait');
model.result('pg5').feature('glob1').set('legend', false);
model.result('pg5').feature('glob1').set('linewidth', 2);
model.result('pg5').feature('glob1').set('xdata', 'expr');
model.result('pg5').feature('glob1').set('xdataexpr', 'mbd.prj1.u');
model.result('pg5').run;
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Spring and Damping Forces');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'Force (N)');
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('legendpos', 'upperleft');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').setIndex('expr', 'mbd.prj1.sd1.Fs', 0);
model.result('pg6').feature('glob1').setIndex('unit', 'N', 0);
model.result('pg6').feature('glob1').setIndex('descr', 'Spring force', 0);
model.result('pg6').feature('glob1').setIndex('expr', 'mbd.prj1.sd1.Fd', 1);
model.result('pg6').feature('glob1').setIndex('unit', 'N', 1);
model.result('pg6').feature('glob1').setIndex('descr', 'Damping force', 1);
model.result('pg6').feature('glob1').set('xdata', 'expr');
model.result('pg6').feature('glob1').set('xdataexpr', 'N');
model.result('pg6').feature('glob1').set('linewidth', 2);
model.result('pg6').feature('glob1').set('linemarker', 'cycle');
model.result('pg6').feature('glob1').set('markerpos', 'interp');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Joint Forces');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Force (N)');
model.result('pg7').set('legendpos', 'upperleft');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').set('expr', {'mbd.hgj3.Fx'});
model.result('pg7').feature('glob1').set('descr', {'Joint force, x-component'});
model.result('pg7').feature('glob1').set('unit', {'N'});
model.result('pg7').feature('glob1').set('expr', {'mbd.hgj3.Fx' 'mbd.hgj3.Fy'});
model.result('pg7').feature('glob1').set('descr', {'Joint force, x-component' 'Joint force, y-component'});
model.result('pg7').feature('glob1').set('expr', {'mbd.hgj3.Fx' 'mbd.hgj3.Fy' 'mbd.hgj3.Fz'});
model.result('pg7').feature('glob1').set('descr', {'Joint force, x-component' 'Joint force, y-component' 'Joint force, z-component'});
model.result('pg7').feature('glob1').set('xdata', 'expr');
model.result('pg7').feature('glob1').set('xdataexpr', 'N');
model.result('pg7').feature('glob1').set('linewidth', 2);
model.result('pg7').feature('glob1').set('linemarker', 'cycle');
model.result('pg7').feature('glob1').set('markerpos', 'interp');
model.result('pg7').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').set('plotgroup', 'pg3');
model.result.export('anim1').set('maxframes', 100);
model.result('pg1').run;
model.result('pg1').run;

model.title('Spring-Loaded Centrifugal Governor');

model.description('This example illustrates the modeling of a spring-loaded centrifugal governor. The components in the mechanism are modeled as flexible elements. The connections between different components are modeled using hinge joints and prismatic joint. The spring and dashpot on the prismatic joint are used to control the motion of the mechanism.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('centrifugal_governor.mph');

model.modelNode.label('Components');

out = model;
