function out = model
%
% naca0012_airfoil.m
%
% Model exported on May 26 2025, 21:26 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/CFD_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ipf', 'IncompressiblePotentialFlow', 'geom1');
model.physics('ipf').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/ipf', true);

model.physics.create('spf', 'TurbulentFlowSST', 'geom1');
model.physics('spf').model('comp1');

model.study('std1').feature('stat').setSolveFor('/physics/spf', true);

model.geom('geom1').run;

model.param.set('U_inf', '50[m*s^-1]');
model.param.descr('U_inf', 'Free-stream velocity');
model.param.set('rho_inf', '1.2043[kg*m^-3]');
model.param.descr('rho_inf', 'Free-stream density');
model.param.set('mu_inf', '1.81397e-5[kg*m^-1*s^-1]');
model.param.descr('mu_inf', 'Free-stream dynamic viscosity');
model.param.set('L', '180[m]');
model.param.descr('L', 'Domain reference length');
model.param.set('c', '1.8[m]');
model.param.descr('c', 'Chord length');
model.param.set('k_inf', '0.1*mu_inf*U_inf/(rho_inf*L)');
model.param.descr('k_inf', 'Free-stream turbulent kinetic energy');
model.param.set('om_inf', '10*U_inf/L');
model.param.descr('om_inf', 'Free-stream specific dissipation rate');
model.param.set('alpha', '0');
model.param.descr('alpha', 'Angle of attack');

model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 'L');
model.geom('geom1').feature('c1').set('angle', 90);
model.geom('geom1').feature('c1').set('rot', 90);
model.geom('geom1').run('c1');
model.geom('geom1').create('pc1', 'ParametricCurve');
model.geom('geom1').feature('pc1').set('coord', {'c*s' 'c*0.594689181*(0.298222773*sqrt(s)-0.127125232*s-0.357907906*s^2+0.291984971*s^3-0.105174696*s^4)'});
model.geom('geom1').feature('pc1').set('pos', {'-c' '0'});
model.geom('geom1').run('pc1');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'c1' 'pc1'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').init(2);
model.geom('geom1').feature('del1').selection('input').set('uni1', 2);
model.geom('geom1').runPre('fin');
model.geom('geom1').run('del1');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'L' 'L'});
model.geom('geom1').run('r1');
model.geom('geom1').create('mir1', 'Mirror');
model.geom('geom1').feature('mir1').set('keep', true);
model.geom('geom1').feature('mir1').selection('input').set({'del1' 'r1'});
model.geom('geom1').feature('mir1').set('axis', [0 1]);
model.geom('geom1').run('mir1');
model.geom('geom1').run('fin');
model.geom('geom1').create('mce1', 'MeshControlEdges');
model.geom('geom1').feature('mce1').selection('input').set('fin', [1 2 4 5]);
model.geom('geom1').run('mce1');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('dermethod', 'manual');
model.material('mat1').propertyGroup('def').func('rho').set('argders', {'pA' 'd(pA*0.02897/R_const/T,pA)'; 'T' 'd(pA*0.02897/R_const/T,T)'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('dermethod', 'manual');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').label('Analytic ');
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('NonlinearModel').set('BA', '(def.gamma+1)/2');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('ipf').prop('PressureProperty').set('UScale', 'U_inf');
model.physics('ipf').create('velbc1', 'Velocity', 1);
model.physics('ipf').feature('velbc1').selection.set([1]);
model.physics('ipf').feature('velbc1').set('Uin', '-nx*U_inf*cos(alpha*pi/180)-ny*U_inf*sin(alpha*pi/180)');
model.physics('ipf').create('open1', 'OpenBoundary', 1);
model.physics('ipf').feature('open1').selection.set([2]);
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'CompressibleMALT03');
model.physics('spf').prop('TurbulenceModelProperty').set('WallTreatment', 'LowReynoldsNumber');
model.physics('spf').feature('fp1').set('LengthScaleSpecification', 'Manual');
model.physics('spf').feature('fp1').set('lref', 0.2);
model.physics('spf').create('inl1', 'InletBoundary', 1);
model.physics('spf').feature('inl1').selection.set([1]);
model.physics('spf').feature('inl1').set('RANSVarOption', 'SpecifyTurbulenceVariables');
model.physics('spf').feature('inl1').set('k0', 'k_inf');
model.physics('spf').feature('inl1').set('om0', 'om_inf');
model.physics('spf').feature('inl1').set('ComponentWise', 'VelocityFieldComponentWise');
model.physics('spf').feature('inl1').set('u0', {'U_inf*cos(alpha*pi/180)' 'U_inf*sin(alpha*pi/180)' '0'});
model.physics('spf').feature('init1').set('u_init', {'ipf.u' 'ipf.v' '0'});
model.physics('spf').feature('init1').set('p_init', 'ipf.p');
model.physics('spf').feature('init1').set('k_init', 'k_inf');
model.physics('spf').feature('init1').set('om_init', 'om_inf');
model.physics('spf').create('open1', 'OpenBoundary', 1);
model.physics('spf').feature('open1').selection.set([2]);
model.physics('spf').feature('open1').set('RANSVarOption', 'SpecifyTurbulenceVariables');
model.physics('spf').feature('open1').set('k0', 'k_inf');
model.physics('spf').feature('open1').set('om0', 'om_inf');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([3]);
model.mesh('mesh1').feature('map1').set('smoothcontrol', false);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([11]);
model.mesh('mesh1').feature('map1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis1').set('elemcount', 100);
model.mesh('mesh1').feature('map1').feature('dis1').set('elemratio', 15000000);
model.mesh('mesh1').feature('map1').feature('dis1').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map1').feature('dis1').set('reverse', true);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([7]);
model.mesh('mesh1').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis2').set('elemcount', 25);
model.mesh('mesh1').feature('map1').feature('dis2').set('elemratio', 25);
model.mesh('mesh1').feature('map1').feature('dis2').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([12]);
model.mesh('mesh1').feature('map1').feature('dis3').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis3').set('elemcount', 25);
model.mesh('mesh1').feature('map1').feature('dis3').set('elemratio', 480000);
model.mesh('mesh1').feature('map1').feature('dis3').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map1').feature('dis3').set('reverse', true);
model.mesh('mesh1').feature('map1').create('dis4', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis4').selection.set([2]);
model.mesh('mesh1').feature('map1').feature('dis4').set('numelem', 100);
model.mesh('mesh1').create('map2', 'Map');
model.mesh('mesh1').feature('map2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map2').selection.set([1 4]);
model.mesh('mesh1').feature('map2').set('smoothcontrol', false);
model.mesh('mesh1').feature('map2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis1').selection.set([9 10 11]);
model.mesh('mesh1').feature('map2').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('map2').feature('dis1').set('elemcount', 100);
model.mesh('mesh1').feature('map2').feature('dis1').set('elemratio', 15000000);
model.mesh('mesh1').feature('map2').feature('dis1').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map2').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis2').selection.set([3 4]);
model.mesh('mesh1').feature('map2').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map2').feature('dis2').set('elemcount', 256);
model.mesh('mesh1').feature('map2').feature('dis2').set('elemratio', 256);
model.mesh('mesh1').feature('map2').feature('dis2').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map2').feature('dis2').set('symmetric', true);
model.mesh('mesh1').create('map3', 'Map');
model.mesh('mesh1').feature('map3').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map3').selection.set([2]);
model.mesh('mesh1').feature('map3').set('smoothcontrol', false);
model.mesh('mesh1').feature('map3').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map3').feature('dis1').selection.set([10]);
model.mesh('mesh1').feature('map3').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('map3').feature('dis1').set('elemcount', 100);
model.mesh('mesh1').feature('map3').feature('dis1').set('elemratio', 15000000);
model.mesh('mesh1').feature('map3').feature('dis1').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map3').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map3').feature('dis2').selection.set([1]);
model.mesh('mesh1').feature('map3').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map3').feature('dis2').set('elemcount', 25);
model.mesh('mesh1').feature('map3').feature('dis2').set('elemratio', 25);
model.mesh('mesh1').feature('map3').feature('dis2').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map3').feature('dis2').set('reverse', true);
model.mesh('mesh1').feature('map3').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map3').feature('dis3').selection.set([8]);
model.mesh('mesh1').feature('map3').feature('dis3').set('numelem', 100);
model.mesh('mesh1').run;

model.study('std1').feature('stat').setEntry('activate', 'spf', false);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, potential flow (ipf)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, potential flow (ipf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Velocity from Potential Flow Solution (ipf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'potential_flow/IncompressiblePotentialFlow_ResultDefaults/icom1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').run;

model.view('view1').axis.set('xmin', -2.5);
model.view('view1').axis.set('xmax', 0.5);
model.view('view1').axis.set('ymin', -1.1);
model.view('view1').axis.set('ymax', 1.1);
model.view('view1').set('locked', true);

model.result('pg1').run;
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').set('posmethod', 'start');
model.result('pg1').feature('str1').set('startmethod', 'coord');
model.result('pg1').feature('str1').set('xcoord', 0);
model.result('pg1').feature('str1').set('ycoord', 'range(-2,0.025,2)');
model.result('pg1').run;
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Velocity magnitude and streamlines for potential-flow solution');
model.result('pg1').run;

model.study.create('std2');
model.study('std2').create('wdi', 'WallDistanceInitialization');
model.study('std2').feature('wdi').set('plotgroup', 'Default');
model.study('std2').feature('wdi').set('solnum', 'auto');
model.study('std2').feature('wdi').set('notsolnum', 'auto');
model.study('std2').feature('wdi').set('outputmap', {});
model.study('std2').feature('wdi').set('ngenAUX', '1');
model.study('std2').feature('wdi').set('goalngenAUX', '1');
model.study('std2').feature('wdi').set('ngenAUX', '1');
model.study('std2').feature('wdi').set('goalngenAUX', '1');
model.study('std2').feature('wdi').setSolveFor('/physics/ipf', true);
model.study('std2').feature('wdi').setSolveFor('/physics/spf', true);
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').set('plotgroup', 'Default');
model.study('std2').feature('stat').set('solnum', 'auto');
model.study('std2').feature('stat').set('notsolnum', 'auto');
model.study('std2').feature('stat').set('outputmap', {});
model.study('std2').feature('stat').set('ngenAUX', '1');
model.study('std2').feature('stat').set('goalngenAUX', '1');
model.study('std2').feature('stat').set('ngenAUX', '1');
model.study('std2').feature('stat').set('goalngenAUX', '1');
model.study('std2').feature('stat').setSolveFor('/physics/ipf', true);
model.study('std2').feature('stat').setSolveFor('/physics/spf', true);
model.study('std2').feature('wdi').set('usesol', true);
model.study('std2').feature('wdi').set('notsolmethod', 'sol');
model.study('std2').feature('wdi').set('notstudy', 'std1');
model.study('std2').feature('stat').setEntry('activate', 'ipf', false);
model.study('std2').feature('stat').set('useinitsol', true);
model.study('std2').feature('stat').set('initstudy', 'std1');
model.study('std2').feature('stat').set('useparam', true);
model.study('std2').feature('stat').setIndex('pname', 'U_inf', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'm/s', 0);
model.study('std2').feature('stat').setIndex('pname', 'U_inf', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'm/s', 0);
model.study('std2').feature('stat').setIndex('pname', 'alpha', 0);
model.study('std2').feature('stat').setIndex('plistarr', '0,2,4,6,8,10,12,14', 0);

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'wdi');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'wdi');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 1.0E-6);
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('d1').label('Direct, wall distance (spf)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol2').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('s1').feature('i1').label('AMG, wall distance (spf)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').create('st2', 'StudyStep');
model.sol('sol2').feature('st2').set('study', 'std2');
model.sol('sol2').feature('st2').set('studystep', 'stat');
model.sol('sol2').create('v2', 'Variables');
model.sol('sol2').feature('v2').set('initmethod', 'sol');
model.sol('sol2').feature('v2').set('initsol', 'sol2');
model.sol('sol2').feature('v2').set('notsolmethod', 'sol');
model.sol('sol2').feature('v2').set('notsol', 'sol2');
model.sol('sol2').feature('v2').set('control', 'stat');
model.sol('sol2').create('s2', 'Stationary');
model.sol('sol2').feature('s2').create('p1', 'Parametric');
model.sol('sol2').feature('s2').feature.remove('pDef');
model.sol('sol2').feature('s2').feature('p1').set('control', 'stat');
model.sol('sol2').feature('s2').set('control', 'stat');
model.sol('sol2').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s2').create('se1', 'Segregated');
model.sol('sol2').feature('s2').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('s2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('s2').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u'});
model.sol('sol2').feature('s2').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol2').feature('s2').create('d1', 'Direct');
model.sol('sol2').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s2').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol2').feature('s2').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol2').feature('s2').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol2').feature('s2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('s2').feature('se1').feature('ss2').set('segvar', {'comp1_k' 'comp1_om'});
model.sol('sol2').feature('s2').feature('se1').feature('ss2').set('subdamp', 0.45);
model.sol('sol2').feature('s2').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol2').feature('s2').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol2').feature('s2').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol2').feature('s2').create('d2', 'Direct');
model.sol('sol2').feature('s2').feature('d2').set('linsolver', 'pardiso');
model.sol('sol2').feature('s2').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s2').feature('d2').label('Direct, turbulence variables (spf)');
model.sol('sol2').feature('s2').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol2').feature('s2').feature('se1').feature('ss2').label('Turbulence Variables');
model.sol('sol2').feature('s2').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol2').feature('s2').feature('se1').set('subinitcfl', 2);
model.sol('sol2').feature('s2').feature('se1').set('submincfl', 10000);
model.sol('sol2').feature('s2').feature('se1').set('subkppid', 0.65);
model.sol('sol2').feature('s2').feature('se1').set('subkdpid', 0.05);
model.sol('sol2').feature('s2').feature('se1').set('subkipid', 0.05);
model.sol('sol2').feature('s2').feature('se1').set('subcfltol', 0.1);
model.sol('sol2').feature('s2').feature('se1').set('segcflaa', true);
model.sol('sol2').feature('s2').feature('se1').set('segcflaacfl', 9000);
model.sol('sol2').feature('s2').feature('se1').set('segcflaafact', 1);
model.sol('sol2').feature('s2').feature('se1').set('maxsegiter', 300);
model.sol('sol2').feature('s2').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol2').feature('s2').feature('se1').feature('ll1').set('lowerlimit', 'comp1.k 0 comp1.om 0 ');
model.sol('sol2').feature('s2').create('i1', 'Iterative');
model.sol('sol2').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol2').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol2').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('s2').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol2').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s2').create('i2', 'Iterative');
model.sol('sol2').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol2').feature('s2').feature('i2').set('prefuntype', 'left');
model.sol('sol2').feature('s2').feature('i2').set('itrestart', 50);
model.sol('sol2').feature('s2').feature('i2').set('rhob', 20);
model.sol('sol2').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol2').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol2').feature('s2').feature('i2').label('AMG, turbulence variables (spf)');
model.sol('sol2').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol2').feature('s2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s2').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('s2').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('s2').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol2').feature('s2').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('s2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('s2').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('s2').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s2').feature.remove('fcDef');
model.sol('sol2').feature('v2').set('notsolnum', 'auto');
model.sol('sol2').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol2').feature('v2').set('solnum', 'auto');
model.sol('sol2').feature('v2').set('solvertype', 'solnum');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.dataset('dset2').set('geom', 'geom1');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Velocity (spf)');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 8, 0);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 8, 0);
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('expr', 'spf.U');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Pressure (spf)');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 8, 0);
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 8, 0);
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg3').feature.create('con1', 'Contour');
model.result('pg3').feature('con1').label('Contour');
model.result('pg3').feature('con1').set('showsolutionparams', 'on');
model.result('pg3').feature('con1').set('expr', 'p');
model.result('pg3').feature('con1').set('number', 40);
model.result('pg3').feature('con1').set('levelrounding', false);
model.result('pg3').feature('con1').set('smooth', 'internal');
model.result('pg3').feature('con1').set('showsolutionparams', 'on');
model.result('pg3').feature('con1').set('data', 'parent');
model.result.dataset.create('edg1', 'Edge2D');
model.result.dataset('edg1').label('Exterior Walls');
model.result.dataset('edg1').set('data', 'dset2');
model.result.dataset('edg1').selection.geom('geom1', 1);
model.result.dataset('edg1').selection.set([3 4]);
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Wall Resolution (spf)');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 8, 0);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 8, 0);
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond2/pcond4/pg2');
model.result('pg4').feature.create('line1', 'Line');
model.result('pg4').feature('line1').label('Wall Resolution');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('expr', 'spf.Delta_wPlus');
model.result('pg4').feature('line1').set('linetype', 'tube');
model.result('pg4').feature('line1').set('smooth', 'internal');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('data', 'parent');
model.result('pg4').feature('line1').feature.create('hght1', 'Height');
model.result('pg4').feature('line1').feature('hght1').label('Height Expression');
model.result('pg4').feature('line1').feature('hght1').set('heightdata', 'expr');
model.result('pg4').feature('line1').feature('hght1').set('expr', 'spf.WRHeightExpr');
model.result('pg2').run;
model.result.numerical.create('int1', 'IntLine');
model.result.numerical('int1').set('intsurface', true);
model.result.numerical('int1').selection.set([3 4]);
model.result.numerical('int1').setIndex('expr', 'p/(1/2*rho_inf*U_inf^2)/c*(spf.nymesh*cos(alpha*pi/180)-spf.nxmesh*sin(alpha*pi/180))', 0);
model.result.numerical('int1').set('data', 'dset2');
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Line Integration 1');
model.result.numerical('int1').set('table', 'tbl1');
model.result.numerical('int1').setResult;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'none');
model.result('pg5').create('tblp1', 'Table');
model.result('pg5').feature('tblp1').set('source', 'table');
model.result('pg5').feature('tblp1').set('table', 'tbl1');
model.result('pg5').feature('tblp1').set('linewidth', 'preference');
model.result('pg5').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg5').run;
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').importData('naca0012_airfoil_Ladson_CL.dat');
model.result('pg5').run;
model.result('pg5').create('tblp2', 'Table');
model.result('pg5').feature('tblp2').set('markerpos', 'datapoints');
model.result('pg5').feature('tblp2').set('linewidth', 'preference');
model.result('pg5').feature('tblp2').set('table', 'tbl2');
model.result('pg5').feature('tblp2').set('linestyle', 'none');
model.result('pg5').feature('tblp2').set('linecolor', 'blue');
model.result('pg5').feature('tblp2').set('linemarker', 'point');
model.result('pg5').run;
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Lift vs. angle of attack');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', '\alpha');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'CL');
model.result('pg5').run;
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').importData('naca0012_airfoil_Gregory_OReilly_Cp.dat');
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').set('data', 'none');
model.result('pg6').create('tblp1', 'Table');
model.result('pg6').feature('tblp1').set('source', 'table');
model.result('pg6').feature('tblp1').set('table', 'tbl3');
model.result('pg6').feature('tblp1').set('linewidth', 'preference');
model.result('pg6').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg6').run;
model.result('pg6').feature('tblp1').set('linestyle', 'none');
model.result('pg6').feature('tblp1').set('linecolor', 'blue');
model.result('pg6').feature('tblp1').set('linemarker', 'point');
model.result('pg6').run;
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg6').feature('lngr1').set('linewidth', 'preference');
model.result('pg6').feature('lngr1').set('data', 'dset2');
model.result('pg6').feature('lngr1').setIndex('looplevelinput', 'manual', 0);
model.result('pg6').feature('lngr1').setIndex('looplevel', [6], 0);
model.result('pg6').feature('lngr1').selection.set([3 4]);
model.result('pg6').feature('lngr1').set('expr', '-p/(1/2*rho_inf*U_inf^2)');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', '(x+c)/c');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').set('titletype', 'none');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', '(x-xLE)/c');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', '-cp');
model.result('pg6').run;
model.result('pg2').run;
model.result('pg2').set('view', 'view1');
model.result('pg2').create('str1', 'Streamline');
model.result('pg2').feature('str1').set('expr', {'u' 'v'});
model.result('pg2').feature('str1').set('posmethod', 'start');
model.result('pg2').feature('str1').set('startmethod', 'coord');
model.result('pg2').feature('str1').set('xcoord', 0);
model.result('pg2').feature('str1').set('ycoord', 'range(-2,0.025,2)');
model.result('pg2').run;

model.title('Flow Around an Inclined NACA 0012 Airfoil');

model.description(['This example simulates the flow around an inclined NACA 0012 airfoil at different angles of attack using the SST turbulence model. The results show good agreement with the experimental lift data of Ladson and the pressure data of Gregory and O' native2unicode(hex2dec({'20' '19'}), 'unicode') 'Reilly.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('naca0012_airfoil.mph');

model.modelNode.label('Components');

out = model;
