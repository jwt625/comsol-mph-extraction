function out = model
%
% cosserat_torsion.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Material_Models');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);

model.param.label('General Parameters');
model.param.set('R0', '1[mm]');
model.param.descr('R0', 'Radius');
model.param.set('L0', '10[mm]');
model.param.descr('L0', 'Length');
model.param.set('E0', '1e6[MPa]');
model.param.descr('E0', 'Young''s modulus');
model.param.set('Nu0', '0.3');
model.param.descr('Nu0', 'Poisson''s ratio');
model.param.set('Theta0', '14[deg]');
model.param.descr('Theta0', 'Applied rotation');
model.param.set('mu0', 'E0/(2*(1+Nu0))');
model.param.descr('mu0', 'Shear modulus');
model.param.create('par2');
model.param('par2').label('Cosserat Parameters');
model.param('par2').set('muC', '0.01*mu0');
model.param('par2').descr('muC', 'Cosserat couple modulus');
model.param('par2').set('LcR0', '100');
model.param('par2').descr('LcR0', 'Internal length scale parameter');
model.param('par2').set('gammaC', 'mu0*(LcR0*R0)^2');
model.param('par2').descr('gammaC', 'Third microrotation parameter');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').set('r', 'R0');
model.geom('geom1').feature('cyl1').set('h', 'L0');
model.geom('geom1').run('cyl1');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat1').propertyGroup('Enu').set('E', {'E0'});
model.material('mat1').propertyGroup('Enu').set('nu', {'Nu0'});
model.material('mat1').propertyGroup('def').set('density', {'1'});

model.physics.create('w', 'WeakFormPDE', 'geom1', {'a1' 'a2' 'a3'});

model.study('std1').feature('stat').setSolveFor('/physics/w', true);

model.physics('w').prop('EquationForm').set('form', 'Automatic');
model.physics('w').field('dimensionless').field('a');
model.physics('w').prop('ShapeProperty').set('order', 1);
model.physics('w').prop('ShapeProperty').set('frame', 'material');
model.physics('w').label('Microrotation Field');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Macrorotation Vector');
model.variable('var1').set('w1', 'solid.curlUX');
model.variable('var1').descr('w1', 'Curl of displacement, 1 component');
model.variable('var1').set('w2', 'solid.curlUY');
model.variable('var1').descr('w2', 'Curl of displacement, 2 component');
model.variable('var1').set('w3', 'solid.curlUZ');
model.variable('var1').descr('w3', 'Curl of displacement, 3 component');
model.variable('var1').set('r1', 'w1/2');
model.variable('var1').descr('r1', 'Macrorotation vector, 1 component');
model.variable('var1').set('r2', 'w2/2');
model.variable('var1').descr('r2', 'Macrorotation vector, 2 component');
model.variable('var1').set('r3', 'w3/2');
model.variable('var1').descr('r3', 'Macrorotation vector, 3 component');

model.common.create('mat1', 'Matrix', 'comp1');
model.common('mat1').setIndex('matrix', 0, 0, 0);
model.common('mat1').setIndex('matrix', '-r3', 0, 1);
model.common('mat1').setIndex('matrix', 'r2', 0, 2);
model.common('mat1').setIndex('matrix', 'r3', 1, 0);
model.common('mat1').setIndex('matrix', 0, 1, 1);
model.common('mat1').setIndex('matrix', '-r1', 1, 2);
model.common('mat1').setIndex('matrix', '-r2', 2, 0);
model.common('mat1').setIndex('matrix', 'r1', 2, 1);
model.common('mat1').setIndex('matrix', 0, 2, 2);
model.common('mat1').label('Macrorotation');
model.common('mat1').set('name', 'W');
model.common.create('mat2', 'Matrix', 'comp1');
model.common('mat2').label('Microrotation');
model.common('mat2').set('name', 'A');
model.common('mat2').setIndex('matrix', 0, 0, 0);
model.common('mat2').setIndex('matrix', '-a3', 0, 1);
model.common('mat2').setIndex('matrix', 'a2', 0, 2);
model.common('mat2').setIndex('matrix', 'a3', 1, 0);
model.common('mat2').setIndex('matrix', 0, 1, 1);
model.common('mat2').setIndex('matrix', '-a1', 1, 2);
model.common('mat2').setIndex('matrix', '-a2', 2, 0);
model.common('mat2').setIndex('matrix', 'a1', 2, 1);
model.common('mat2').setIndex('matrix', 0, 2, 2);
model.common.create('mat3', 'Matrix', 'comp1');
model.common('mat3').setIndex('matrix', 'gammaC*a1X', 0, 0);
model.common('mat3').setIndex('matrix', 'gammaC*a1Y', 0, 1);
model.common('mat3').setIndex('matrix', 'gammaC*a1Z', 0, 2);
model.common('mat3').setIndex('matrix', 'gammaC*a2X', 1, 0);
model.common('mat3').setIndex('matrix', 'gammaC*a2Y', 1, 1);
model.common('mat3').setIndex('matrix', 'gammaC*a2Z', 1, 2);
model.common('mat3').setIndex('matrix', 'gammaC*a3X', 2, 0);
model.common('mat3').setIndex('matrix', 'gammaC*a3Y', 2, 1);
model.common('mat3').setIndex('matrix', 'gammaC*a3Z', 2, 2);
model.common('mat3').label('Stress Moment Tensor');
model.common('mat3').set('name', 'M');
model.common.create('mat4', 'Matrix', 'comp1');
model.common('mat4').label('Asymmetric Stress Tensor');
model.common('mat4').set('name', 'Pc');
model.common('mat4').setIndex('matrix', '2*muC*(W11-A11)', 0, 0);
model.common('mat4').setIndex('matrix', '2*muC*(W12-A12)', 0, 1);
model.common('mat4').setIndex('matrix', '2*muC*(W13-A13)', 0, 2);
model.common('mat4').setIndex('matrix', '2*muC*(W21-A21)', 1, 0);
model.common('mat4').setIndex('matrix', '2*muC*(W22-A22)', 1, 1);
model.common('mat4').setIndex('matrix', '2*muC*(W23-A23)', 1, 2);
model.common('mat4').setIndex('matrix', '2*muC*(W31-A31)', 2, 0);
model.common('mat4').setIndex('matrix', '2*muC*(W32-A32)', 2, 1);
model.common('mat4').setIndex('matrix', '2*muC*(W33-A33)', 2, 2);

model.physics('solid').feature('lemm1').create('exs1', 'ExternalStress', 3);
model.physics('solid').feature('lemm1').feature('exs1').set('StressInputType', 'StressTensorNominal');
model.physics('solid').feature('lemm1').feature('exs1').set('Pext', {'Pc11' 'Pc21' 'Pc31' 'Pc12' 'Pc22' 'Pc32' 'Pc13' 'Pc23' 'Pc33'});
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.set([3]);
model.physics('solid').create('rig1', 'RigidConnector', 2);
model.physics('solid').feature('rig1').selection.set([4]);
model.physics('solid').feature('rig1').set('CenterOfRotationType', 'CentroidOfSelectedEntities');
model.physics('solid').feature('rig1').setIndex('Direction', true, 0);
model.physics('solid').feature('rig1').setIndex('Direction', true, 1);
model.physics('solid').feature('rig1').setIndex('Direction', true, 2);
model.physics('solid').feature('rig1').set('RotationType', 'PrescribedRotationGroup');
model.physics('solid').feature('rig1').set('Omega', [0 0 1]);
model.physics('solid').feature('rig1').set('phi0', 'Theta0');
model.physics('solid').feature('rig1').set('WeakConstraints', true);
model.physics('solid').feature('rig1').feature('crb1').selection.set([4]);
model.physics('w').feature('wfeq1').setIndex('weak', 'Pc11*test(A11)+Pc12*test(A12)+Pc13*test(A13)-M11*test(a1X)-M12*test(a1Y)-M13*test(a1Z)', 0);
model.physics('w').feature('wfeq1').setIndex('weak', 'Pc21*test(A21)+Pc22*test(A22)+Pc23*test(A23)-M21*test(a2X)-M22*test(a2Y)-M23*test(a2Z)', 1);
model.physics('w').feature('wfeq1').setIndex('weak', 'Pc31*test(A31)+Pc32*test(A32)+Pc33*test(A33)-M31*test(a3X)-M32*test(a3Y)-M33*test(a3Z)', 2);
model.physics('w').create('dir1', 'DirichletBoundary', 2);
model.physics('w').feature('dir1').selection.set([3]);

model.mesh('mesh1').create('fq1', 'FreeQuad');
model.mesh('mesh1').feature('fq1').selection.set([3]);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 30);
model.mesh('mesh1').feature('size').set('hauto', 3);
model.mesh('mesh1').run;

model.study('std1').setGenPlots(false);
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'E0', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'Pa', 0);
model.study('std1').feature('stat').setIndex('pname', 'E0', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'Pa', 0);
model.study('std1').feature('stat').setIndex('pname', 'LcR0', 0);
model.study('std1').feature('stat').setIndex('plistarr', '1e-3 1e-2 range(0.1,0.1,1) range(2,1,10) range(20,10,100) 500 1e3 1e4', 0);
model.study('std1').feature('stat').setIndex('punit', '', 0);
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'E0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'Pa', 0);
model.study('std1').feature('param').setIndex('pname', 'E0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'Pa', 0);
model.study('std1').feature('param').setIndex('pname', 'muC', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'Pa', 0);
model.study('std1').feature('param').setIndex('plistarr', '0.01*mu0 mu0 10*mu0', 0);
model.study('std1').feature('param').setIndex('punit', 'Pa', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rig1_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rig1_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_disp').set('scaleval', '1.0392304845413263E-4');
model.sol('sol1').feature('v1').feature('comp1_solid_rig1_RF').set('scaleval', '1e8*(0.1*0.010392304845413263)^2');
model.sol('sol1').feature('v1').feature('comp1_solid_rig1_RM').set('scaleval', '1e8*(0.1*0.010392304845413263)^3');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_rot').set('scaleval', '0.01');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.010392304845413263');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_u' 'comp1_solid_rig1_RF' 'comp1_solid_rig1_RM' 'comp1_solid_rig_disp' 'comp1_solid_rig_rot'});
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Solid Mechanics');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_a1' 'comp1_a2' 'comp1_a3'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Microrotation Field');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'muC'});
model.batch('p1').set('plistarr', {'0.01*mu0 mu0 10*mu0'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').label('Torque vs. Lc');
model.result('pg1').set('data', 'dset2');
model.result('pg1').set('xlabelactive', true);
model.result('pg1').set('xlabel', 'L<sub>c</sub>/R<sub>0</sub>');
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'Reaction moment z [N*m]');
model.result('pg1').set('xlog', true);
model.result('pg1').set('legendpos', 'upperleft');
model.result('pg1').create('glob1', 'Global');
model.result('pg1').feature('glob1').set('markerpos', 'datapoints');
model.result('pg1').feature('glob1').set('linewidth', 'preference');
model.result('pg1').feature('glob1').set('expr', {'solid.rig1.RMz'});
model.result('pg1').feature('glob1').set('descr', {'Reaction moment, z-component'});
model.result('pg1').feature('glob1').set('unit', {'N*m'});
model.result('pg1').feature('glob1').set('legendmethod', 'manual');
model.result('pg1').feature('glob1').setIndex('legends', '\mu<sub>C</sub> = 0.01\mu; \theta = 14\deg', 0);
model.result('pg1').feature('glob1').setIndex('legends', '\mu<sub>C</sub> = \mu; \theta = 14\deg', 1);
model.result('pg1').feature('glob1').setIndex('legends', '\mu<sub>C</sub> = 10\mu; \theta = 14\deg', 2);
model.result('pg1').feature('glob1').set('linemarker', 'circle');
model.result('pg1').run;
model.result('pg1').run;
model.result.duplicate('pg2', 'pg1');
model.result('pg2').run;
model.result('pg2').label('Torque vs. Lc, muC = 0.01mu');
model.result('pg2').setIndex('looplevelinput', 'first', 1);
model.result('pg2').run;
model.result('pg2').create('ptgr1', 'PointGraph');
model.result('pg2').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg2').feature('ptgr1').set('linewidth', 'preference');
model.result('pg2').feature('ptgr1').selection.set([4]);
model.result('pg2').feature('ptgr1').set('expr', 'LcR0*0.003+13');
model.result('pg2').feature('ptgr1').set('xdata', 'expr');
model.result('pg2').feature('ptgr1').set('xdataexpr', '0.1');
model.result('pg2').feature('ptgr1').set('linecolor', 'black');
model.result('pg2').feature('ptgr1').set('titletype', 'none');
model.result('pg2').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg2').run;
model.result('pg2').feature('ptgr2').set('xdataexpr', '10');
model.result('pg2').run;
model.result('pg2').create('tlan1', 'TableAnnotation');
model.result('pg2').feature('tlan1').set('source', 'localtable');
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 0.01, 0, 0);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 20, 0, 1);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 'Zone I', 0, 2);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 1, 1, 0);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 20, 1, 1);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 'Zone II', 1, 2);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 100, 2, 0);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 20, 2, 1);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 'Zone III', 2, 2);
model.result('pg2').feature('tlan1').set('showpoint', false);
model.result('pg2').feature('tlan1').set('showframe', true);
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('Macrorotation, r3');
model.result('pg3').set('data', 'none');
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Macrorotation: r3 [deg], (\mu<sub>C</sub>=\mu)');
model.result('pg3').set('paramindicator', '');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('plotarrayenable', true);
model.result('pg3').create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('arraydim', '1');
model.result('pg3').feature('vol1').set('data', 'dset2');
model.result('pg3').feature('vol1').setIndex('looplevel', 1, 0);
model.result('pg3').feature('vol1').setIndex('looplevel', 2, 1);
model.result('pg3').feature('vol1').set('expr', 'r3');
model.result('pg3').feature('vol1').set('unit', 'deg');
model.result('pg3').feature('vol1').set('colortable', 'Prism');
model.result('pg3').feature.duplicate('vol2', 'vol1');
model.result('pg3').feature('vol2').set('arraydim', '1');
model.result('pg3').run;
model.result('pg3').feature('vol2').setIndex('looplevel', 16, 0);
model.result('pg3').feature('vol2').set('titletype', 'none');
model.result('pg3').feature('vol2').set('inheritplot', 'vol1');
model.result('pg3').feature.duplicate('vol3', 'vol2');
model.result('pg3').feature('vol3').set('arraydim', '1');
model.result('pg3').run;
model.result('pg3').feature('vol3').setIndex('looplevel', 33, 0);
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').create('ann1', 'Annotation');
model.result('pg3').feature('ann1').set('arraydim', '1');
model.result('pg3').feature('ann1').set('data', 'dset2');
model.result('pg3').feature('ann1').set('poszexpr', 'L0/2');
model.result('pg3').feature('ann1').set('latexmarkup', true);
model.result('pg3').feature('ann1').set('text', '\textbf{ZONE 1}');
model.result('pg3').feature('ann1').set('showpoint', false);
model.result('pg3').feature('ann1').set('anchorpoint', 'uppermiddle');
model.result('pg3').feature('ann1').set('manualindexing', true);
model.result('pg3').feature.duplicate('ann2', 'ann1');
model.result('pg3').feature('ann2').set('arraydim', '1');
model.result('pg3').run;
model.result('pg3').feature('ann2').set('text', '\textbf{ZONE 2}');
model.result('pg3').feature('ann2').set('arrayindex', 1);
model.result('pg3').feature.duplicate('ann3', 'ann2');
model.result('pg3').feature('ann3').set('arraydim', '1');
model.result('pg3').run;
model.result('pg3').feature('ann3').set('text', '\textbf{ZONE 3}');
model.result('pg3').feature('ann3').set('arrayindex', 2);
model.result('pg3').run;

model.view('view2').set('showgrid', false);

model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Microrotation, a3');
model.result('pg4').set('title', 'Microrotation: a3 [deg], (\mu<sub>C</sub>=\mu)');
model.result('pg4').feature('vol1').set('arraydim', '1');
model.result('pg4').run;
model.result('pg4').feature('vol1').set('expr', 'a3');
model.result('pg4').feature('vol2').set('arraydim', '1');
model.result('pg4').run;
model.result('pg4').feature('vol2').set('expr', 'a3');
model.result('pg4').feature('vol3').set('arraydim', '1');
model.result('pg4').run;
model.result('pg4').feature('vol3').set('expr', 'a3');
model.result('pg4').run;

model.view('view3').set('showgrid', false);

model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').run;
model.result('pg5').label('Displacement, Arrow Plot');
model.result('pg5').set('titletype', 'custom');
model.result('pg5').set('solutionintitle', false);
model.result('pg5').create('arwv1', 'ArrowVolume');
model.result('pg5').run;
model.result('pg5').set('plotarrayenable', true);
model.result('pg5').feature('arwv1').set('arraydim', '1');
model.result('pg5').run;
model.result('pg5').feature('arwv1').set('data', 'dset2');
model.result('pg5').feature('arwv1').setIndex('looplevel', 2, 1);
model.result('pg5').feature('arwv1').setIndex('looplevel', 1, 0);
model.result('pg5').feature('arwv1').set('znumber', 10);
model.result('pg5').feature('arwv1').set('scaleactive', true);
model.result('pg5').feature('arwv1').set('scale', 3);
model.result('pg5').run;
model.result('pg5').feature.duplicate('arwv2', 'arwv1');
model.result('pg5').feature('arwv2').set('arraydim', '1');
model.result('pg5').run;
model.result('pg5').feature('arwv2').setIndex('looplevel', 16, 0);
model.result('pg5').feature('arwv2').set('titletype', 'none');
model.result('pg5').feature('arwv2').set('inheritplot', 'arwv1');
model.result('pg5').feature.duplicate('arwv3', 'arwv2');
model.result('pg5').feature('arwv3').set('arraydim', '1');
model.result('pg5').run;
model.result('pg5').feature('arwv3').setIndex('looplevel', 33, 0);
model.result('pg5').run;
model.result('pg5').create('tlan1', 'TableAnnotation');
model.result('pg5').feature('tlan1').set('arraydim', '1');
model.result('pg5').feature('tlan1').set('latexmarkup', true);
model.result('pg5').feature('tlan1').set('source', 'localtable');
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 0, 0, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 0, 0, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '-L0/10', 0, 2);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '$L_\textrm{C}/R_\textrm{0}$ = 1e-3', 0, 3);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '2.5*R0', 1, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 0, 1, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '-L0/10', 1, 2);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '$L_\textrm{C}/R_\textrm{0}$ = 5', 1, 3);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '5*R0', 2, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 0, 2, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '-L0/10', 2, 2);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '$L_\textrm{C}/R_\textrm{0}$ = 1e4', 2, 3);
model.result('pg5').feature('tlan1').set('showframe', true);
model.result('pg5').run;

model.view('view1').set('showgrid', false);

model.title('Torsion of an Isotropic Cosserat Elastic Cylinder');

model.description('This model demonstrates how to extend the built-in linear elastic material model to a Cosserat elastic material through the addition of the microrotation degrees of freedom. A cylindrical bar under pure torsion is analyzed and the effect of the Cosserat length scale parameter on the response is observed.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;

model.label('cosserat_torsion.mph');

model.modelNode.label('Components');

out = model;
