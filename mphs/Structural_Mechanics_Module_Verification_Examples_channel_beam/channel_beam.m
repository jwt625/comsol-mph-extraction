function out = model
%
% channel_beam.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('beam', 'HermitianBeam', 'geom1');
model.physics('beam').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/beam', true);

model.param.set('h1', '25[mm]');
model.param.descr('h1', 'Flange width');
model.param.set('h2', '50[mm]');
model.param.descr('h2', 'Section height');
model.param.set('t1', '5[mm]');
model.param.descr('t1', 'Web thickness');
model.param.set('t2', '6[mm]');
model.param.descr('t2', 'Flange thickness');
model.param.set('L', '1[m]');
model.param.descr('L', 'Beam length');
model.param.set('Eb', '200[GPa]');
model.param.descr('Eb', 'Young''s modulus');
model.param.set('nub', '0.25');
model.param.descr('nub', 'Poisson''s ratio');
model.param.set('rhob', '8000[kg/m^3]');
model.param.descr('rhob', 'Density');
model.param.set('FX', '10e3[N]');
model.param.descr('FX', 'Force in X direction');
model.param.set('FY', '50[N]');
model.param.descr('FY', 'Force in Y direction');
model.param.set('FZ', '100[N]');
model.param.descr('FZ', 'Force in Z direction');
model.param.set('MX', '-10[N*m]');
model.param.descr('MX', 'Moment in X direction');

model.group.create('lg1', 'LoadGroup');
model.group('lg1').label('Load Group: Edge');
model.group('lg1').paramName('lgE');
model.group.create('lg2', 'LoadGroup');
model.group('lg2').label('Load Group: Point');
model.group('lg2').paramName('lgP');

model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'table');
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 2);
model.geom('geom1').feature('pol1').setIndex('table', 'L', 1, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 2);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat1').propertyGroup('Enu').set('E', {'Eb'});
model.material('mat1').propertyGroup('Enu').set('nu', {'nub'});
model.material('mat1').propertyGroup('def').set('density', {'rhob'});

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('Gb', 'Eb/(2*(1+nub))');
model.variable('var1').descr('Gb', 'Shear Modulus');
model.variable('var1').set('A', '4.9e-4[m^2]');
model.variable('var1').descr('A', 'Cross section area');
model.variable('var1').set('Iyy', '2.77e-8[m^4]');
model.variable('var1').descr('Iyy', 'Area moment of inertia, y-component');
model.variable('var1').set('Izz', '1.69e-7[m^4]');
model.variable('var1').descr('Izz', 'Area moment of inertia, z-component');
model.variable('var1').set('Jbeam', '5.18e-9[m^4]');
model.variable('var1').descr('Jbeam', 'Torsion constant');
model.variable('var1').set('Wt', '8.64e-7[m^3]');
model.variable('var1').descr('Wt', 'Torsion section modulus');
model.variable('var1').set('ey', '0[m]');
model.variable('var1').descr('ey', 'Shear center relative to centroid, y-coordinate');
model.variable('var1').set('ez', '0.0148[m]');
model.variable('var1').descr('ez', 'Shear center relative to centroid, z-coordinate');
model.variable('var1').set('muy', '2.44');
model.variable('var1').descr('muy', 'Max shear stress factor in local y direction');
model.variable('var1').set('muz', '2.38');
model.variable('var1').descr('muz', 'Maximum shear stress factor in local z direction');
model.variable('var1').set('y1', '-0.025[m]');
model.variable('var1').descr('y1', 'Evaluation point 1, local y-coordinate');
model.variable('var1').set('z1', '-0.0164[m]');
model.variable('var1').descr('z1', 'Evaluation point 1, local z-coordinate');
model.variable('var1').set('y2', '0.025[m]');
model.variable('var1').descr('y2', 'Evaluation point 2, local y-coordinate');
model.variable('var1').set('z2', '-0.0164[m]');
model.variable('var1').descr('z2', 'Evaluation point 2, local z-coordinate');
model.variable('var1').set('y3', '0.025[m]');
model.variable('var1').descr('y3', 'Evaluation point 3, local y-coordinate');
model.variable('var1').set('z3', '0.0086[m]');
model.variable('var1').descr('z3', 'Evaluation point 3, local z-coordinate');
model.variable('var1').set('y4', '-0.025[m]');
model.variable('var1').descr('y4', 'Evaluation point 4, local y-coordinate');
model.variable('var1').set('z4', '0.0086[m]');
model.variable('var1').descr('z4', 'Evaluation point 4, local z-coordinate');

model.func.create('an1', 'Analytic');
model.func('an1').model('comp1');
model.func('an1').set('funcname', 'sigmabx');
model.func('an1').set('expr', '-FZ*L*y/comp1.Izz+FY*L*z/comp1.Iyy');
model.func('an1').set('args', 'y, z');
model.func('an1').setIndex('plotargs', '-h2/2', 0, 1);
model.func('an1').setIndex('plotargs', 'h2/2', 0, 2);
model.func('an1').setIndex('plotargs', '-h1/2', 1, 1);
model.func('an1').setIndex('plotargs', 'h1/2', 1, 2);
model.func('an1').setIndex('argunit', 'm', 0);
model.func('an1').setIndex('argunit', 'm', 1);
model.func('an1').set('fununit', 'N/m^2');
model.func('an1').label('sigmabx');

model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').set('deltaX', 'FX*L/(Eb*A)');
model.variable('var2').descr('deltaX', 'X displacement');
model.variable('var2').set('deltaY', 'FY*L^3/(3*Eb*Iyy)');
model.variable('var2').descr('deltaY', 'Y displacement');
model.variable('var2').set('deltaZ', 'FZ*L^3/(3*Eb*Izz)');
model.variable('var2').descr('deltaZ', 'Z displacement');
model.variable('var2').set('thetaX', 'MX*L/(Gb*Jbeam)');
model.variable('var2').descr('thetaX', 'Twist');
model.variable('var2').set('sigmax_Fx', 'FX/A');
model.variable('var2').descr('sigmax_Fx', 'Stress due to axial load');
model.variable('var2').set('tausy_max', 'muy*FZ/A');
model.variable('var2').descr('tausy_max', 'Maximum shear stress due y force');
model.variable('var2').set('tausz_max', '-muz*FY/A');
model.variable('var2').descr('tausz_max', 'Maximum shear stress due to z force');
model.variable('var2').set('taut_max', 'abs(MX)/Wt');
model.variable('var2').descr('taut_max', 'Shear stress due to torsion');
model.variable('var2').set('tauxz_max', 'abs(tausz_max)+taut_max');
model.variable('var2').descr('tauxz_max', 'Maximum shear stress, z-component');
model.variable('var2').set('tauxy_max', 'abs(tausy_max)+taut_max');
model.variable('var2').descr('tauxy_max', 'Maximum shear stress, y-component');
model.variable('var2').set('sigx1', 'sigmax_Fx+sigmabx(y1,z1)');
model.variable('var2').descr('sigx1', 'Normal stress at point 1');
model.variable('var2').set('sigx2', 'sigmax_Fx+sigmabx(y2,z2)');
model.variable('var2').descr('sigx2', 'Normal stress at point 2');
model.variable('var2').set('sigx3', 'sigmax_Fx+sigmabx(y3,z3)');
model.variable('var2').descr('sigx3', 'Normal stress at point 3');
model.variable('var2').set('sigx4', 'sigmax_Fx+sigmabx(y4,z4)');
model.variable('var2').descr('sigx4', 'Normal stress at point 4');
model.variable('var2').set('sigx_max', 'max(max(max(sigx1,sigx2),sigx3),sigx4)');
model.variable('var2').descr('sigx_max', 'Maximum normal stress in cross section');
model.variable('var2').set('sig_mises', 'sqrt(sigx_max^2+3*tauxy_max^2+3*tauxz_max^2)');
model.variable('var2').descr('sig_mises', 'Maximum von Mises stress');
model.variable('var2').set('deltaZ_g', '-rhob*g_const*A*L^4/(8*Eb*Izz)');
model.variable('var2').descr('deltaZ_g', 'Z displacement due to gravity load');
model.variable('var2').set('thetaX_g', 'rhob*g_const*A*ez*L^2/(2*Gb*Jbeam)');
model.variable('var2').descr('thetaX_g', 'Twist due to gravity load');

model.physics('beam').feature('csd1').set('SectionType', 'U_Profile');
model.physics('beam').feature('csd1').set('hy_U', 'h2');
model.physics('beam').feature('csd1').set('hz_U', 'h1');
model.physics('beam').feature('csd1').set('ty_U', 't2');
model.physics('beam').feature('csd1').set('tz_U', 't1');
model.physics('beam').feature('csd1').feature('so1').set('OrientationMethod', 'vector_beam');
model.physics('beam').feature('csd1').feature('so1').set('vector_beam', [0 0 1]);
model.physics('beam').create('gacc1', 'GravityAcceleration', -1);
model.physics('beam').feature('gacc1').set('loadGroup', 'lg1');
model.physics('beam').create('fix1', 'Fixed', 0);
model.physics('beam').feature('fix1').selection.set([1]);
model.physics('beam').create('pl1', 'PointLoad', 0);
model.physics('beam').feature('pl1').selection.set([2]);
model.physics('beam').feature('pl1').set('Fp', {'FX' 'FY' 'FZ'});
model.physics('beam').feature('pl1').set('Mp', {'MX' '0' '0'});
model.physics('beam').feature('pl1').set('loadGroup', 'lg2');

model.study('std1').feature('stat').set('useloadcase', true);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Point load', 0);
model.study('std1').feature('stat').setIndex('loadgroup', true, 0, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Edge load', 1);
model.study('std1').feature('stat').setIndex('loadgroup', true, 1, 0);
model.study('std1').label('Stationary Study: Beam');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 2, 0);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('line1', 'Line');
model.result('pg1').feature('line1').set('expr', {'beam.mises'});
model.result('pg1').feature('line1').set('threshold', 'manual');
model.result('pg1').feature('line1').set('thresholdvalue', 0.2);
model.result('pg1').feature('line1').set('colortable', 'Rainbow');
model.result('pg1').feature('line1').set('colortabletrans', 'none');
model.result('pg1').feature('line1').set('colorscalemode', 'linear');
model.result('pg1').label('Stress (beam)');
model.result('pg1').feature('line1').set('colortable', 'Rainbow');
model.result('pg1').feature('line1').set('linetype', 'tube');
model.result('pg1').feature('line1').set('radiusexpr', 'beam.re');
model.result('pg1').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg1').feature('line1').set('tuberadiusscale', 1);
model.result('pg1').feature('line1').set('tubeendcaps', false);
model.result('pg1').feature('line1').create('def', 'Deform');
model.result('pg1').feature('line1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('line1').feature('def').set('descr', 'Displacement field');
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').run;
model.result.numerical.create('pev1', 'EvalPoint');
model.result.numerical('pev1').label('Case1: Displacement/Rotation');
model.result.numerical('pev1').setIndex('looplevelinput', 'first', 0);
model.result.numerical('pev1').selection.set([2]);
model.result.numerical('pev1').set('expr', {'u'});
model.result.numerical('pev1').set('descr', {'Displacement field, X-component'});
model.result.numerical('pev1').set('unit', {'m'});
model.result.numerical('pev1').set('expr', {'u' 'deltaX'});
model.result.numerical('pev1').set('descr', {'Displacement field, X-component' 'X displacement'});
model.result.numerical('pev1').set('expr', {'u' 'deltaX' 'v'});
model.result.numerical('pev1').set('descr', {'Displacement field, X-component' 'X displacement' 'Displacement field, Y-component'});
model.result.numerical('pev1').set('expr', {'u' 'deltaX' 'v' 'deltaY'});
model.result.numerical('pev1').set('descr', {'Displacement field, X-component' 'X displacement' 'Displacement field, Y-component' 'Y displacement'});
model.result.numerical('pev1').set('expr', {'u' 'deltaX' 'v' 'deltaY' 'w'});
model.result.numerical('pev1').set('descr', {'Displacement field, X-component' 'X displacement' 'Displacement field, Y-component' 'Y displacement' 'Displacement field, Z-component'});
model.result.numerical('pev1').set('expr', {'u' 'deltaX' 'v' 'deltaY' 'w' 'deltaZ'});
model.result.numerical('pev1').set('descr', {'Displacement field, X-component' 'X displacement' 'Displacement field, Y-component' 'Y displacement' 'Displacement field, Z-component' 'Z displacement'});
model.result.numerical('pev1').set('expr', {'u' 'deltaX' 'v' 'deltaY' 'w' 'deltaZ' 'thx'});
model.result.numerical('pev1').set('descr', {'Displacement field, X-component' 'X displacement' 'Displacement field, Y-component' 'Y displacement' 'Displacement field, Z-component' 'Z displacement' 'Rotation field, X-component'});
model.result.numerical('pev1').set('expr', {'u' 'deltaX' 'v' 'deltaY' 'w' 'deltaZ' 'thx' 'thetaX'});
model.result.numerical('pev1').set('descr', {'Displacement field, X-component' 'X displacement' 'Displacement field, Y-component' 'Y displacement' 'Displacement field, Z-component' 'Z displacement' 'Rotation field, X-component' 'Twist'});
model.result.numerical('pev1').setIndex('descr', 'delta_x computed', 0);
model.result.numerical('pev1').setIndex('descr', 'delta_x analytical', 1);
model.result.numerical('pev1').setIndex('descr', 'delta_y computed', 2);
model.result.numerical('pev1').setIndex('descr', 'delta_y analytical', 3);
model.result.numerical('pev1').setIndex('descr', 'delta_z computed', 4);
model.result.numerical('pev1').setIndex('descr', 'delta_z analytical', 5);
model.result.numerical('pev1').setIndex('descr', 'theta_x computed', 6);
model.result.numerical('pev1').setIndex('descr', 'theta_x analytical', 7);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Case1: Displacement/Rotation');
model.result.numerical('pev1').set('table', 'tbl1');
model.result.numerical('pev1').setResult;
model.result.table('tbl1').label('Case1: Displacement/Rotation');
model.result.numerical.create('pev2', 'EvalPoint');
model.result.numerical('pev2').label('Case2: Displacement/Rotation');
model.result.numerical('pev2').selection.set([2]);
model.result.numerical('pev2').setIndex('looplevelinput', 'last', 0);
model.result.numerical('pev2').set('expr', {'w'});
model.result.numerical('pev2').set('descr', {'Displacement field, Z-component'});
model.result.numerical('pev2').set('unit', {'m'});
model.result.numerical('pev2').set('expr', {'w' 'deltaZ_g'});
model.result.numerical('pev2').set('descr', {'Displacement field, Z-component' 'Z displacement due to gravity load'});
model.result.numerical('pev2').set('expr', {'w' 'deltaZ_g' 'thx'});
model.result.numerical('pev2').set('descr', {'Displacement field, Z-component' 'Z displacement due to gravity load' 'Rotation field, X-component'});
model.result.numerical('pev2').set('expr', {'w' 'deltaZ_g' 'thx' 'thetaX_g'});
model.result.numerical('pev2').set('descr', {'Displacement field, Z-component' 'Z displacement due to gravity load' 'Rotation field, X-component' 'Twist due to gravity load'});
model.result.numerical('pev2').setIndex('descr', 'delta_z computed', 0);
model.result.numerical('pev2').setIndex('descr', 'delta_z analytical', 1);
model.result.numerical('pev2').setIndex('descr', 'theta_x computed', 2);
model.result.numerical('pev2').setIndex('descr', 'theta_x analytical', 3);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Case2: Displacement/Rotation');
model.result.numerical('pev2').set('table', 'tbl2');
model.result.numerical('pev2').setResult;
model.result.table('tbl2').label('Case2: Displacement/Rotation');
model.result.numerical.create('pev3', 'EvalPoint');
model.result.numerical('pev3').selection.set([2]);
model.result.numerical('pev3').setIndex('looplevelinput', 'first', 0);
model.result.numerical('pev3').label('Axial Stress from Fx');
model.result.numerical('pev3').set('expr', {'beam.s1'});
model.result.numerical('pev3').set('descr', {'Normal stress at first evaluation point'});
model.result.numerical('pev3').set('unit', {'N/m^2'});
model.result.numerical('pev3').set('expr', {'beam.s1' 'beam.s2'});
model.result.numerical('pev3').set('descr', {'Normal stress at first evaluation point' 'Normal stress at second evaluation point'});
model.result.numerical('pev3').set('expr', {'beam.s1' 'beam.s2' 'beam.s3'});
model.result.numerical('pev3').set('descr', {'Normal stress at first evaluation point' 'Normal stress at second evaluation point' 'Normal stress at third evaluation point'});
model.result.numerical('pev3').set('expr', {'beam.s1' 'beam.s2' 'beam.s3' 'beam.s4'});
model.result.numerical('pev3').set('descr', {'Normal stress at first evaluation point' 'Normal stress at second evaluation point' 'Normal stress at third evaluation point' 'Normal stress at fourth evaluation point'});
model.result.numerical('pev3').setIndex('unit', 'MPa', 0);
model.result.numerical('pev3').setIndex('descr', 'first point', 0);
model.result.numerical('pev3').setIndex('unit', 'MPa', 1);
model.result.numerical('pev3').setIndex('descr', 'second point', 1);
model.result.numerical('pev3').setIndex('unit', 'MPa', 2);
model.result.numerical('pev3').setIndex('descr', 'third point', 2);
model.result.numerical('pev3').setIndex('unit', 'MPa', 3);
model.result.numerical('pev3').setIndex('descr', 'fourth point', 3);
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').comments('Axial Stress from Fx');
model.result.numerical('pev3').set('table', 'tbl3');
model.result.numerical('pev3').setResult;
model.result.table('tbl3').label('Normal Stress from Fx');
model.result.numerical.create('pev4', 'EvalPoint');
model.result.numerical('pev4').label('Total Bending Stress');
model.result.numerical('pev4').setIndex('looplevelinput', 'first', 0);
model.result.numerical('pev4').selection.set([1]);
model.result.numerical('pev4').set('expr', {'beam.sb1'});
model.result.numerical('pev4').set('descr', {'Bending stress at first evaluation point'});
model.result.numerical('pev4').set('unit', {'N/m^2'});
model.result.numerical('pev4').set('expr', {'beam.sb1' 'sigmabx(y, z)'});
model.result.numerical('pev4').set('descr', {'Bending stress at first evaluation point' 'sigmabx'});
model.result.numerical('pev4').set('expr', {'beam.sb1' 'sigmabx(y, z)' 'beam.sb2'});
model.result.numerical('pev4').set('descr', {'Bending stress at first evaluation point' 'sigmabx' 'Bending stress at second evaluation point'});
model.result.numerical('pev4').set('expr', {'beam.sb1' 'sigmabx(y, z)' 'beam.sb2' 'sigmabx(y, z)'});
model.result.numerical('pev4').set('descr', {'Bending stress at first evaluation point' 'sigmabx' 'Bending stress at second evaluation point' 'sigmabx'});
model.result.numerical('pev4').set('expr', {'beam.sb1' 'sigmabx(y, z)' 'beam.sb2' 'sigmabx(y, z)' 'beam.sb3'});
model.result.numerical('pev4').set('descr', {'Bending stress at first evaluation point' 'sigmabx' 'Bending stress at second evaluation point' 'sigmabx' 'Bending stress at third evaluation point'});
model.result.numerical('pev4').set('expr', {'beam.sb1' 'sigmabx(y, z)' 'beam.sb2' 'sigmabx(y, z)' 'beam.sb3' 'sigmabx(y, z)'});
model.result.numerical('pev4').set('descr', {'Bending stress at first evaluation point' 'sigmabx' 'Bending stress at second evaluation point' 'sigmabx' 'Bending stress at third evaluation point' 'sigmabx'});
model.result.numerical('pev4').set('expr', {'beam.sb1' 'sigmabx(y, z)' 'beam.sb2' 'sigmabx(y, z)' 'beam.sb3' 'sigmabx(y, z)' 'beam.sb4'});
model.result.numerical('pev4').set('descr', {'Bending stress at first evaluation point' 'sigmabx' 'Bending stress at second evaluation point' 'sigmabx' 'Bending stress at third evaluation point' 'sigmabx' 'Bending stress at fourth evaluation point'});
model.result.numerical('pev4').set('expr', {'beam.sb1' 'sigmabx(y, z)' 'beam.sb2' 'sigmabx(y, z)' 'beam.sb3' 'sigmabx(y, z)' 'beam.sb4' 'sigmabx(y, z)'});
model.result.numerical('pev4').set('descr', {'Bending stress at first evaluation point' 'sigmabx' 'Bending stress at second evaluation point' 'sigmabx' 'Bending stress at third evaluation point' 'sigmabx' 'Bending stress at fourth evaluation point' 'sigmabx'});
model.result.numerical('pev4').setIndex('unit', 'MPa', 0);
model.result.numerical('pev4').setIndex('descr', 'first point, computed', 0);
model.result.numerical('pev4').setIndex('expr', 'sigmabx(y1, z1)', 1);
model.result.numerical('pev4').setIndex('unit', 'MPa', 1);
model.result.numerical('pev4').setIndex('descr', 'first point, analytical', 1);
model.result.numerical('pev4').setIndex('unit', 'MPa', 2);
model.result.numerical('pev4').setIndex('descr', 'second point, computed', 2);
model.result.numerical('pev4').setIndex('expr', 'sigmabx(y2, z2)', 3);
model.result.numerical('pev4').setIndex('unit', 'MPa', 3);
model.result.numerical('pev4').setIndex('descr', 'second point, analytical', 3);
model.result.numerical('pev4').setIndex('unit', 'MPa', 4);
model.result.numerical('pev4').setIndex('descr', 'third point, computed', 4);
model.result.numerical('pev4').setIndex('expr', 'sigmabx(y3, z3)', 5);
model.result.numerical('pev4').setIndex('unit', 'MPa', 5);
model.result.numerical('pev4').setIndex('descr', 'third point, analytical', 5);
model.result.numerical('pev4').setIndex('unit', 'MPa', 6);
model.result.numerical('pev4').setIndex('descr', 'fourth point, computed', 6);
model.result.numerical('pev4').setIndex('expr', 'sigmabx(y4, z4)', 7);
model.result.numerical('pev4').setIndex('unit', 'MPa', 7);
model.result.numerical('pev4').setIndex('descr', 'fourth point, analytical', 7);
model.result.table.create('tbl4', 'Table');
model.result.table('tbl4').comments('Total Bending Stress');
model.result.numerical('pev4').set('table', 'tbl4');
model.result.numerical('pev4').setResult;
model.result.table('tbl4').label('Total Bending Stress');
model.result.numerical.create('pev5', 'EvalPoint');
model.result.numerical('pev5').label('Shear Stress');
model.result.numerical('pev5').setIndex('looplevelinput', 'first', 0);
model.result.numerical('pev5').selection.set([1]);
model.result.numerical('pev5').set('expr', {'beam.tsymax'});
model.result.numerical('pev5').set('descr', {'Max shear stress from shear force, y direction'});
model.result.numerical('pev5').set('unit', {'N/m^2'});
model.result.numerical('pev5').set('expr', {'beam.tsymax' 'tausy_max'});
model.result.numerical('pev5').set('descr', {'Max shear stress from shear force, y direction' 'Maximum shear stress due y force'});
model.result.numerical('pev5').set('expr', {'beam.tsymax' 'tausy_max' 'beam.tszmax'});
model.result.numerical('pev5').set('descr', {'Max shear stress from shear force, y direction' 'Maximum shear stress due y force' 'Max shear stress from shear force, z direction'});
model.result.numerical('pev5').set('expr', {'beam.tsymax' 'tausy_max' 'beam.tszmax' 'tausz_max'});
model.result.numerical('pev5').set('descr', {'Max shear stress from shear force, y direction' 'Maximum shear stress due y force' 'Max shear stress from shear force, z direction' 'Maximum shear stress due to z force'});
model.result.numerical('pev5').set('expr', {'beam.tsymax' 'tausy_max' 'beam.tszmax' 'tausz_max' 'beam.ttmax'});
model.result.numerical('pev5').set('descr', {'Max shear stress from shear force, y direction' 'Maximum shear stress due y force' 'Max shear stress from shear force, z direction' 'Maximum shear stress due to z force' 'Max torsional shear stress'});
model.result.numerical('pev5').set('expr', {'beam.tsymax' 'tausy_max' 'beam.tszmax' 'tausz_max' 'beam.ttmax' 'taut_max'});
model.result.numerical('pev5').set('descr', {'Max shear stress from shear force, y direction' 'Maximum shear stress due y force' 'Max shear stress from shear force, z direction' 'Maximum shear stress due to z force' 'Max torsional shear stress' 'Shear stress due to torsion'});
model.result.numerical('pev5').set('expr', {'beam.tsymax' 'tausy_max' 'beam.tszmax' 'tausz_max' 'beam.ttmax' 'taut_max' 'beam.txymax'});
model.result.numerical('pev5').set('descr', {'Max shear stress from shear force, y direction' 'Maximum shear stress due y force' 'Max shear stress from shear force, z direction' 'Maximum shear stress due to z force' 'Max torsional shear stress' 'Shear stress due to torsion' 'Max shear stress, y direction'});
model.result.numerical('pev5').set('expr', {'beam.tsymax' 'tausy_max' 'beam.tszmax' 'tausz_max' 'beam.ttmax' 'taut_max' 'beam.txymax' 'tauxy_max'});
model.result.numerical('pev5').set('descr', {'Max shear stress from shear force, y direction' 'Maximum shear stress due y force' 'Max shear stress from shear force, z direction' 'Maximum shear stress due to z force' 'Max torsional shear stress' 'Shear stress due to torsion' 'Max shear stress, y direction' 'Maximum shear stress, y-component'});
model.result.numerical('pev5').set('expr', {'beam.tsymax' 'tausy_max' 'beam.tszmax' 'tausz_max' 'beam.ttmax' 'taut_max' 'beam.txymax' 'tauxy_max' 'beam.txzmax'});
model.result.numerical('pev5').set('descr', {'Max shear stress from shear force, y direction' 'Maximum shear stress due y force' 'Max shear stress from shear force, z direction' 'Maximum shear stress due to z force' 'Max torsional shear stress' 'Shear stress due to torsion' 'Max shear stress, y direction' 'Maximum shear stress, y-component' 'Max shear stress, z direction'});
model.result.numerical('pev5').set('expr', {'beam.tsymax' 'tausy_max' 'beam.tszmax' 'tausz_max' 'beam.ttmax' 'taut_max' 'beam.txymax' 'tauxy_max' 'beam.txzmax' 'tauxz_max'});
model.result.numerical('pev5').set('descr', {'Max shear stress from shear force, y direction' 'Maximum shear stress due y force' 'Max shear stress from shear force, z direction' 'Maximum shear stress due to z force' 'Max torsional shear stress' 'Shear stress due to torsion' 'Max shear stress, y direction' 'Maximum shear stress, y-component' 'Max shear stress, z direction' 'Maximum shear stress, z-component'});
model.result.numerical('pev5').setIndex('unit', 'MPa', 0);
model.result.numerical('pev5').setIndex('descr', 'Max shear stress from shear force, y direction (Computed)', 0);
model.result.numerical('pev5').setIndex('unit', 'MPa', 1);
model.result.numerical('pev5').setIndex('descr', 'Max shear stress from shear force, y direction (Analytical)', 1);
model.result.numerical('pev5').setIndex('unit', 'MPa', 2);
model.result.numerical('pev5').setIndex('descr', 'Max shear stress from shear force, z direction (Computed)', 2);
model.result.numerical('pev5').setIndex('unit', 'MPa', 3);
model.result.numerical('pev5').setIndex('descr', 'Max shear stress from shear force, z direction (Analytical)', 3);
model.result.numerical('pev5').setIndex('unit', 'MPa', 4);
model.result.numerical('pev5').setIndex('descr', 'Max torsional shear stress (Computed)', 4);
model.result.numerical('pev5').setIndex('unit', 'MPa', 5);
model.result.numerical('pev5').setIndex('descr', 'Max torsional shear stress (Analytical)', 5);
model.result.numerical('pev5').setIndex('unit', 'MPa', 6);
model.result.numerical('pev5').setIndex('descr', 'Max shear stress, y direction (Computed)', 6);
model.result.numerical('pev5').setIndex('unit', 'MPa', 7);
model.result.numerical('pev5').setIndex('descr', 'Max shear stress, y direction (Analytical)', 7);
model.result.numerical('pev5').setIndex('unit', 'MPa', 8);
model.result.numerical('pev5').setIndex('descr', 'Max shear stress, z direction (Computed)', 8);
model.result.numerical('pev5').setIndex('unit', 'MPa', 9);
model.result.numerical('pev5').setIndex('descr', 'Max shear stress, z direction (Analytical)', 9);
model.result.table.create('tbl5', 'Table');
model.result.table('tbl5').comments('Shear Stress');
model.result.numerical('pev5').set('table', 'tbl5');
model.result.numerical('pev5').setResult;
model.result.table('tbl5').label('Shear Stress');

model.study.create('std2');
model.study('std2').create('eig', 'Eigenfrequency');
model.study('std2').feature('eig').set('plotgroup', 'Default');
model.study('std2').feature('eig').set('chkeigregion', true);
model.study('std2').feature('eig').set('conrad', '1');
model.study('std2').feature('eig').set('conradynhm', '1');
model.study('std2').feature('eig').set('storefact', false);
model.study('std2').feature('eig').set('solnum', 'auto');
model.study('std2').feature('eig').set('notsolnum', 'auto');
model.study('std2').feature('eig').set('outputmap', {});
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').setSolveFor('/physics/beam', true);

model.common.create('mpf1', 'ParticipationFactors', 'comp1');

model.study('std2').label('Eigenfrequency Study: Beam');
model.study('std2').feature('eig').set('neigsactive', true);
model.study('std2').feature('eig').set('neigs', 20);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'eig');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'eig');
model.sol('sol2').create('e1', 'Eigenvalue');
model.sol('sol2').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol2').feature('e1').set('eigvfunscaleparam', '1.0E-6');
model.sol('sol2').feature('e1').set('control', 'eig');
model.sol('sol2').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').set('defaultPlotID', 'modeShape');
model.result('pg2').set('showlegends', false);
model.result('pg2').create('line1', 'Line');
model.result('pg2').feature('line1').set('expr', {'beam.disp'});
model.result('pg2').feature('line1').set('threshold', 'manual');
model.result('pg2').feature('line1').set('thresholdvalue', 0.2);
model.result('pg2').feature('line1').set('colortable', 'Rainbow');
model.result('pg2').feature('line1').set('colortabletrans', 'none');
model.result('pg2').feature('line1').set('colorscalemode', 'linear');
model.result('pg2').label('Mode Shape (beam)');
model.result('pg2').feature('line1').set('colortable', 'AuroraBorealis');
model.result('pg2').feature('line1').set('linetype', 'tube');
model.result('pg2').feature('line1').set('radiusexpr', 'beam.re');
model.result('pg2').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg2').feature('line1').set('tuberadiusscale', 1);
model.result('pg2').feature('line1').set('tubeendcaps', false);
model.result('pg2').feature('line1').create('def', 'Deform');
model.result('pg2').feature('line1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg2').feature('line1').feature('def').set('descr', 'Displacement field');
model.result.evaluationGroup.create('std2EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std2EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_beam');
model.result.evaluationGroup('std2EvgFrq').set('data', 'dset2');
model.result.evaluationGroup('std2EvgFrq').label('Eigenfrequencies (Eigenfrequency Study: Beam)');
model.result.evaluationGroup('std2EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std2EvgFrq').run;
model.result.evaluationGroup.create('std2mpf1', 'EvaluationGroup');
model.result.evaluationGroup('std2mpf1').set('data', 'dset2');
model.result.evaluationGroup('std2mpf1').label('Participation Factors (Eigenfrequency Study: Beam)');
model.result.evaluationGroup('std2mpf1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormX', 0);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 0);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, X-translation', 0);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormY', 1);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Y-translation', 1);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormZ', 2);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Z-translation', 2);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormX', 3);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 3);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, X-rotation', 3);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormY', 4);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 4);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Y-rotation', 4);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormZ', 5);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 5);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Z-rotation', 5);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLX', 6);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg', 6);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, X-translation', 6);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLY', 7);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg', 7);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Y-translation', 7);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLZ', 8);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg', 8);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Z-translation', 8);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRX', 9);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 9);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, X-rotation', 9);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRY', 10);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 10);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Y-rotation', 10);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRZ', 11);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 11);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Z-rotation', 11);
model.result.evaluationGroup('std2mpf1').run;
model.result('pg2').run;
model.result('pg2').set('looplevel', [2]);
model.result('pg2').run;
model.result.dataset.create('cpt1', 'CutPoint3D');
model.result.dataset('cpt1').set('pointx', 0);
model.result.dataset('cpt1').set('pointy', 0);
model.result.dataset('cpt1').set('pointz', 0);
model.result.numerical.create('pev6', 'EvalPoint');
model.result.numerical('pev6').label('Section Forces');
model.result.numerical('pev6').set('data', 'cpt1');
model.result.numerical('pev6').setIndex('expr', 'beam.Nxl', 0);
model.result.numerical('pev6').setIndex('descr', 'N', 0);
model.result.numerical('pev6').setIndex('expr', 'beam.Mzl', 1);
model.result.numerical('pev6').setIndex('descr', 'M1', 1);
model.result.numerical('pev6').setIndex('expr', 'beam.Tyl', 2);
model.result.numerical('pev6').setIndex('descr', 'T2', 2);
model.result.numerical('pev6').setIndex('expr', 'beam.Myl', 3);
model.result.numerical('pev6').setIndex('descr', 'M2', 3);
model.result.numerical('pev6').setIndex('expr', 'beam.Tzl', 4);
model.result.numerical('pev6').setIndex('descr', 'T1', 4);
model.result.numerical('pev6').setIndex('expr', 'beam.Mxl', 5);
model.result.numerical('pev6').setIndex('descr', 'Mt', 5);
model.result.table.create('tbl6', 'Table');
model.result.table('tbl6').comments('Section Forces');
model.result.numerical('pev6').set('table', 'tbl6');
model.result.numerical('pev6').setResult;
model.result.table('tbl6').label('Section Forces');

model.modelNode.create('comp2', true);

model.geom.create('geom2', 2);
model.geom('geom2').model('comp2');

model.mesh.create('mesh2', 'geom2');

model.physics.create('bcs', 'BeamCrossSection', 'geom2');
model.physics('bcs').model('comp2');

model.study('std1').feature('stat').setSolveFor('/physics/bcs', false);
model.study('std2').feature('eig').setSolveFor('/physics/bcs', false);

model.geom('geom2').run;

model.study.create('std3');
model.study('std3').create('stat', 'Stationary');
model.study('std3').feature('stat').setSolveFor('/physics/beam', false);
model.study('std3').feature('stat').setSolveFor('/physics/bcs', true);
model.study('std3').label('Stationary Study: Beam Cross Section');

model.geom.load({'part1'}, 'Structural_Mechanics_Module\Beams\Generic\C_beam_generic.mph', {'part1'});
model.geom('geom2').create('pi1', 'PartInstance');
model.geom('geom2').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom2').feature('pi1').set('part', 'part1');
model.geom('geom2').feature('pi1').setEntry('inputexpr', 'd', 'h2');
model.geom('geom2').feature('pi1').setEntry('inputexpr', 'b', 'h1');
model.geom('geom2').feature('pi1').setEntry('inputexpr', 'tw', 't1');
model.geom('geom2').feature('pi1').setEntry('inputexpr', 'tf', 't2');
model.geom('geom2').feature('pi1').setEntry('inputexpr', 'r1', '2[mm]');
model.geom('geom2').feature('pi1').setEntry('inputexpr', 'r2', 0);
model.geom('geom2').feature('pi1').setEntry('inputexpr', 'slope', 0);
model.geom('geom2').feature('pi1').setEntry('inputexpr', 'u', 0);
model.geom('geom2').run('fin');

model.physics('bcs').feature('hcs1').set('E_mat', 'userdef');
model.physics('bcs').feature('hcs1').set('nu_mat', 'userdef');

% Started method call EvaluateSectionForces 1

model.result.dataset('cpt1').set('pointx', '0');

model.physics('bcs').feature('hcs1').set('N', '10000.000000000016');
model.physics('bcs').feature('hcs1').set('M1', '99.99999999981353');
model.physics('bcs').feature('hcs1').set('T2', '99.99999999978343');
model.physics('bcs').feature('hcs1').set('M2', '49.99999999995472');
model.physics('bcs').feature('hcs1').set('T1', '-49.999999999933834');
model.physics('bcs').feature('hcs1').set('Mt', '-9.99999999999996');

% Finished method call EvaluateSectionForces 1

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'stat');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'stat');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').feature('aDef').set('complexfun', false);
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol3').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol3').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol3').feature('s1').feature('aDef').set('nullfun', 'flnullorth');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Bending Moment M1 (bcs)');
model.result('pg3').set('data', 'dset4');
model.result('pg3').set('defaultPlotID', 'bendingMomentM1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg3').feature('surf1').set('expr', 'bcs.sM1');
model.result('pg3').feature('surf1').set('colortable', 'Wave');
model.result('pg3').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Shear Force T2 (bcs)');
model.result('pg4').set('data', 'dset4');
model.result('pg4').set('defaultPlotID', 'shearForceT2');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('solutionparams', 'parent');
model.result('pg4').feature('surf1').set('expr', 'bcs.restT2');
model.result('pg4').feature('surf1').set('colortable', 'Prism');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result('pg4').feature.create('arws1', 'ArrowSurface');
model.result('pg4').feature('arws1').set('showsolutionparams', 'on');
model.result('pg4').feature('arws1').set('solutionparams', 'parent');
model.result('pg4').feature('arws1').set('expr', {'bcs.tT2x' 'bcs.tT2y'});
model.result('pg4').feature('arws1').set('xnumber', 60);
model.result('pg4').feature('arws1').set('ynumber', 60);
model.result('pg4').feature('arws1').set('color', 'black');
model.result('pg4').feature('arws1').set('showsolutionparams', 'on');
model.result('pg4').feature('arws1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Bending Moment M2 (bcs)');
model.result('pg5').set('data', 'dset4');
model.result('pg5').set('defaultPlotID', 'bendingMomentM2');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('expr', 'bcs.sM2');
model.result('pg5').feature('surf1').set('colortable', 'Wave');
model.result('pg5').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').label('Shear Force T1 (bcs)');
model.result('pg6').set('data', 'dset4');
model.result('pg6').set('defaultPlotID', 'shearForceT1');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('solutionparams', 'parent');
model.result('pg6').feature('surf1').set('expr', 'bcs.restT1');
model.result('pg6').feature('surf1').set('colortable', 'Prism');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result('pg6').feature.create('arws1', 'ArrowSurface');
model.result('pg6').feature('arws1').set('showsolutionparams', 'on');
model.result('pg6').feature('arws1').set('solutionparams', 'parent');
model.result('pg6').feature('arws1').set('expr', {'bcs.tT1x' 'bcs.tT1y'});
model.result('pg6').feature('arws1').set('xnumber', 60);
model.result('pg6').feature('arws1').set('ynumber', 60);
model.result('pg6').feature('arws1').set('color', 'black');
model.result('pg6').feature('arws1').set('showsolutionparams', 'on');
model.result('pg6').feature('arws1').set('data', 'parent');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').label('Torsion (bcs)');
model.result('pg7').set('data', 'dset4');
model.result('pg7').set('defaultPlotID', 'torsion');
model.result('pg7').feature.create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('solutionparams', 'parent');
model.result('pg7').feature('surf1').set('expr', 'bcs.restMt');
model.result('pg7').feature('surf1').set('colortable', 'Prism');
model.result('pg7').feature('surf1').set('smooth', 'internal');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('data', 'parent');
model.result('pg7').feature.create('arws1', 'ArrowSurface');
model.result('pg7').feature('arws1').set('showsolutionparams', 'on');
model.result('pg7').feature('arws1').set('solutionparams', 'parent');
model.result('pg7').feature('arws1').set('expr', {'bcs.tMtx' 'bcs.tMty'});
model.result('pg7').feature('arws1').set('xnumber', 60);
model.result('pg7').feature('arws1').set('ynumber', 60);
model.result('pg7').feature('arws1').set('color', 'black');
model.result('pg7').feature('arws1').set('showsolutionparams', 'on');
model.result('pg7').feature('arws1').set('data', 'parent');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').label('Equivalent Stress (bcs)');
model.result('pg8').set('data', 'dset4');
model.result('pg8').set('defaultPlotID', 'stress');
model.result('pg8').feature.create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('showsolutionparams', 'on');
model.result('pg8').feature('surf1').set('solutionparams', 'parent');
model.result('pg8').feature('surf1').set('expr', 'bcs.mises');
model.result('pg8').feature('surf1').set('colortable', 'Prism');
model.result('pg8').feature('surf1').set('smooth', 'internal');
model.result('pg8').feature('surf1').set('showsolutionparams', 'on');
model.result('pg8').feature('surf1').set('data', 'parent');
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').set('data', 'dset4');
model.result.evaluationGroup('eg1').label('Section Properties (bcs)');
model.result.evaluationGroup('eg1').set('defaultPlotID', 'sectionPropertiesTable');
model.result.evaluationGroup('eg1').set('transpose', true);
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').label('Homogeneous Cross Section 1');
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'comp2.bcs.hcs1.A', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Area', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'comp2.bcs.hcs1.I1', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Largest principal moment of inertia', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'comp2.bcs.hcs1.ei1', 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Shear center location, principal axes system, 1 component', 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'comp2.bcs.hcs1.mu2', 3);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Maximum shear stress factor, principal axes system, 2 component', 3);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'comp2.bcs.hcs1.kappa2', 4);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Shear correction factor, principal axes system, 2 component', 4);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'comp2.bcs.hcs1.I2', 5);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Smallest principal moment of inertia', 5);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'comp2.bcs.hcs1.ei2', 6);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Shear center location, principal axes system, 2 component', 6);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'comp2.bcs.hcs1.mu1', 7);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Maximum shear stress factor, principal axes system, 1 component', 7);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'comp2.bcs.hcs1.kappa1', 8);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Shear correction factor, principal axes system, 1 component', 8);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'comp2.bcs.hcs1.J', 9);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Torsional constant', 9);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'comp2.bcs.hcs1.Wt', 10);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Torsional section modulus', 10);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'comp2.bcs.hcs1.alpha', 11);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Angle from first local axis to first principal axis', 11);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'comp2.bcs.hcs1.h1', 12);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Section height in first principal direction', 12);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'comp2.bcs.hcs1.h2', 13);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Section height in second principal direction', 13);
model.result.evaluationGroup('eg1').run;
model.result('pg3').run;
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').run;
model.result('pg5').run;
model.result('pg5').run;
model.result('pg6').run;
model.result('pg6').run;
model.result('pg7').run;
model.result('pg7').run;
model.result('pg8').run;
model.result('pg8').run;

model.physics('beam').create('csd2', 'CrossSectionBeam', 1);
model.physics('beam').feature('csd2').selection.set([1]);
model.physics('beam').feature('csd2').set('area', 'comp2.bcs.hcs1.A');
model.physics('beam').feature('csd2').set('Izz', 'comp2.bcs.hcs1.I1');
model.physics('beam').feature('csd2').set('ez', 'comp2.bcs.hcs1.ei1');
model.physics('beam').feature('csd2').set('Iyy', 'comp2.bcs.hcs1.I2');
model.physics('beam').feature('csd2').set('ey', 'comp2.bcs.hcs1.ei2');
model.physics('beam').feature('csd2').set('J_beam', 'comp2.bcs.hcs1.J');
model.physics('beam').feature('csd2').set('hy', 'comp2.bcs.hcs1.h2');
model.physics('beam').feature('csd2').set('hz', 'comp2.bcs.hcs1.h1');
model.physics('beam').feature('csd2').set('Wt', 'comp2.bcs.hcs1.Wt');
model.physics('beam').feature('csd2').set('muy', 'comp2.bcs.hcs1.mu2');
model.physics('beam').feature('csd2').set('muz', 'comp2.bcs.hcs1.mu1');
model.physics('beam').feature('csd2').feature('so1').set('point_beam', [0 0 1]);

model.study.create('std4');
model.study('std4').create('stat', 'Stationary');
model.study('std4').feature('stat').setSolveFor('/physics/beam', true);
model.study('std4').feature('stat').setSolveFor('/physics/bcs', false);
model.study('std4').setGenPlots(false);
model.study('std4').label('Stationary Study: Beam (Inputs from Beam Cross Section)');
model.study('std4').feature('stat').set('usesol', true);
model.study('std4').feature('stat').set('notsolmethod', 'sol');
model.study('std4').feature('stat').set('notstudy', 'std3');
model.study('std4').feature('stat').set('useloadcase', true);
model.study('std4').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std4').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std4').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std4').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std4').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std4').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std4').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std4').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std4').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std4').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std4').feature('stat').setIndex('loadcase', 'Point Load', 0);
model.study('std4').feature('stat').setIndex('loadgroup', true, 0, 1);

model.sol.create('sol4');
model.sol('sol4').study('std4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std4');
model.sol('sol4').feature('st1').set('studystep', 'stat');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'stat');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').create('p1', 'Parametric');
model.sol('sol4').feature('s1').feature.remove('pDef');
model.sol('sol4').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol4').feature('s1').set('control', 'stat');
model.sol('sol4').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').attach('std4');
model.sol('sol4').runAll;

model.result.numerical.create('pev7', 'EvalPoint');
model.result.numerical('pev7').label('von Mises Stress');
model.result.numerical('pev7').setIndex('looplevelinput', 'first', 0);
model.result.numerical('pev7').selection.set([1]);
model.result.numerical('pev7').set('expr', {'beam.mises'});
model.result.numerical('pev7').set('descr', {'von Mises stress'});
model.result.numerical('pev7').set('unit', {'N/m^2'});
model.result.numerical('pev7').setIndex('unit', 'MPa', 0);
model.result.table.create('tbl7', 'Table');
model.result.table('tbl7').comments('von Mises Stress');
model.result.numerical('pev7').set('table', 'tbl7');
model.result.numerical('pev7').setResult;
model.result.numerical('pev7').set('data', 'dset5');
model.result.numerical('pev7').set('table', 'tbl7');
model.result.numerical('pev7').appendResult;
model.result.table('tbl7').label('von Mises Stress');

model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledphysics', {'beam/csd2'});
model.study('std2').feature('eig').set('useadvanceddisable', true);
model.study('std2').feature('eig').set('disabledphysics', {'beam/csd2'});

model.result('pg8').run;

model.title('Channel Beam');

model.description('This benchmark demonstrates how to use the Structural Mechanics Module''s Beam interface. It calculates the deformation, section forces, and stresses in a cantilever beam as well as a number of eigenfrequencies. It also illustrates how to use the Beam Cross Section interface to evaluate stresses and compute beam cross-section data.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('channel_beam.mph');

model.modelNode.label('Components');

out = model;
