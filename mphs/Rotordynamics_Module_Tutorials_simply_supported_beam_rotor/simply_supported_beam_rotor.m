function out = model
%
% simply_supported_beam_rotor.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Rotordynamics_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('rotbm', 'BeamRotor', 'geom1');
model.physics('rotbm').model('comp1');

model.study.create('std1');
model.study('std1').create('eig', 'Eigenfrequency');
model.study('std1').feature('eig').setSolveFor('/physics/rotbm', true);

model.param.set('Ow', '0[rpm]');
model.param.descr('Ow', 'Angular speed of the shaft');
model.param.set('d_s', '0.1[m]');
model.param.descr('d_s', 'Diameter of the shaft');
model.param.set('l1', '0.2[m]');
model.param.descr('l1', 'Distance between the left end of the shaft and the first disk');
model.param.set('l2', '0.3[m]');
model.param.descr('l2', 'Distance between the first and second disk');
model.param.set('l3', '0.5[m]');
model.param.descr('l3', 'Distance between the second and third disk');
model.param.set('l4', '0.3[m]');
model.param.descr('l4', 'Distance between the third disk and the right end of the shaft');
model.param.set('m_d1', '14.58[kg]');
model.param.descr('m_d1', 'Mass of the first disk');
model.param.set('Jd_d1', '0.064[kg*m^2]');
model.param.descr('Jd_d1', 'Diametral moment of inertia of the first disk');
model.param.set('Jp_d1', '0.123[kg*m^2]');
model.param.descr('Jp_d1', 'Polar moment of inertia of the first disk');
model.param.set('m_d2', '45.94[kg]');
model.param.descr('m_d2', 'Mass of the second disk');
model.param.set('Jd_d2', '0.498[kg*m^2]');
model.param.descr('Jd_d2', 'Diametral moment of inertia of the second disk');
model.param.set('Jp_d2', '0.976[kg*m^2]');
model.param.descr('Jp_d2', 'Polar moment of inertia of the second disk');
model.param.set('m_d3', '55.13[kg]');
model.param.descr('m_d3', 'Mass of the first disk');
model.param.set('Jd_d3', '0.602[kg*m^2]');
model.param.descr('Jd_d3', 'Diametral moment of inertia of the third disk');
model.param.set('Jp_d3', '1.171[kg*m^2]');
model.param.descr('Jp_d3', 'Polar moment of inertia of the third disk');
model.param.set('k1yy', '7e7[N/m]');
model.param.descr('k1yy', 'Stiffness of the first bearing in local y direction');
model.param.set('k1zz', '5e7[N/m]');
model.param.descr('k1zz', 'Stiffness of the first bearing in local z direction');
model.param.set('c1yy', '7000[N*s/m]');
model.param.descr('c1yy', 'Damping constant of the first bearing in local y direction');
model.param.set('c1zz', '4000[N*s/m]');
model.param.descr('c1zz', 'Damping constant of the first bearing in local z direction');
model.param.set('k2yy', '6e7[N/m]');
model.param.descr('k2yy', 'Stiffness of the second bearing in local y direction');
model.param.set('k2zz', '4e7[N/m]');
model.param.descr('k2zz', 'Stiffness of the second bearing in local z direction');
model.param.set('c2yy', '6000[N*s/m]');
model.param.descr('c2yy', 'Damping constant of the second bearing in local y direction');
model.param.set('c2zz', '5000[N*s/m]');
model.param.descr('c2zz', 'Damping constant of the second bearing in local z direction');
model.param.set('mu_l', '0.072[Pa*s]');
model.param.descr('mu_l', 'Viscosity of the lubricant');
model.param.set('C', '1e-4[m]');
model.param.descr('C', 'Clearance in the bearing');

model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'vectors');
model.geom('geom1').feature('pol1').set('x', '0 l1 l1+l2 l1+l2+l3 l1+l2+l3+l4');
model.geom('geom1').feature('pol1').set('y', 0);
model.geom('geom1').feature('pol1').set('z', 0);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Steel');
model.material('mat1').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat1').propertyGroup('Enu').set('E', {'2e11[N/m^2]'});
model.material('mat1').propertyGroup('Enu').set('nu', {'0.33'});
model.material('mat1').propertyGroup('def').set('density', {'7800[kg/m^3]'});

model.physics('rotbm').prop('RotorProperties').set('rpt', 'Ow');
model.physics('rotbm').feature('rcs1').set('do_circ', 'd_s');
model.physics('rotbm').create('disk1', 'Disk', 0);
model.physics('rotbm').feature('disk1').selection.set([2]);
model.physics('rotbm').feature('disk1').set('mass', 'm_d1');
model.physics('rotbm').feature('disk1').set('Ip', 'Jp_d1');
model.physics('rotbm').feature('disk1').set('Id', 'Jd_d1');
model.physics('rotbm').create('disk2', 'Disk', 0);
model.physics('rotbm').feature('disk2').selection.set([3]);
model.physics('rotbm').feature('disk2').set('mass', 'm_d2');
model.physics('rotbm').feature('disk2').set('Ip', 'Jp_d2');
model.physics('rotbm').feature('disk2').set('Id', 'Jd_d2');
model.physics('rotbm').create('disk3', 'Disk', 0);
model.physics('rotbm').feature('disk3').selection.set([4]);
model.physics('rotbm').feature('disk3').set('mass', 'm_d3');
model.physics('rotbm').feature('disk3').set('Ip', 'Jp_d3');
model.physics('rotbm').feature('disk3').set('Id', 'Jd_d3');
model.physics('rotbm').create('jrb1', 'JournalBearing', 0);
model.physics('rotbm').feature('jrb1').selection.set([1]);
model.physics('rotbm').feature('jrb1').set('BearingModel', 'kTot');
model.physics('rotbm').feature('jrb1').set('k_u', {'k1yy' '0' '0' 'k1zz'});
model.physics('rotbm').feature('jrb1').set('c_u', {'c1yy' '0' '0' 'c1zz'});
model.physics('rotbm').create('jrb2', 'JournalBearing', 0);
model.physics('rotbm').feature('jrb2').selection.set([5]);
model.physics('rotbm').feature('jrb2').set('BearingModel', 'kTot');
model.physics('rotbm').feature('jrb2').set('k_u', {'k2yy' '0' '0' 'k2zz'});
model.physics('rotbm').feature('jrb2').set('c_u', {'c2yy' '0' '0' 'c2zz'});

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'Ow', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '1/s', 0);
model.study('std1').feature('param').setIndex('pname', 'Ow', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '1/s', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(0,500,35000)', 0);
model.study('std1').feature('param').setIndex('punit', 'rpm', 0);
model.study('std1').feature('eig').set('neigsactive', true);
model.study('std1').feature('eig').set('neigs', 20);
model.study('std1').label('Study: Eigenfrequency');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'eig');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*1.3');
model.sol('sol1').feature('v1').set('control', 'eig');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('control', 'eig');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'Ow'});
model.batch('p1').set('plistarr', {'range(0,500,35000)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 71, 1);
model.result('pg1').set('defaultPlotID', 'whirl');
model.result('pg1').label('Whirl (rotbm)');
model.result('pg1').create('wp1', 'Whirl');
model.result('pg1').feature('wp1').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('wp1').set('descr', 'Displacement field');
model.result('pg1').feature('wp1').set('nplanes', '1');
model.result('pg1').feature('wp1').set('nrings', '10');
model.result('pg1').feature('wp1').set('colortable', 'TrafficLight');
model.result('pg1').feature('wp1').set('ringcolor', 'blue');
model.result('pg1').feature('wp1').selection.geom('geom1', 1);
model.result('pg1').feature('wp1').selection.set([1 2 3 4]);
model.result('pg1').feature('wp1').selection.inherit(false);
model.result.evaluationGroup.create('std1EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std1EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_rotbm');
model.result.evaluationGroup('std1EvgFrq').set('data', 'dset2');
model.result.evaluationGroup('std1EvgFrq').label('Eigenfrequencies (Study: Eigenfrequency)');
model.result.evaluationGroup('std1EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std1EvgFrq').run;
model.result('pg1').create('line1', 'Line');
model.result('pg1').feature('line1').set('expr', {'1'});
model.result('pg1').feature('line1').set('linetype', 'tube');
model.result('pg1').feature('line1').set('radiusexpr', {'rotbm.re '});
model.result('pg1').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg1').feature('line1').set('tuberadiusscale', 1);
model.result('pg1').feature('line1').set('tubeendcaps', false);
model.result('pg1').feature('line1').set('coloring', 'uniform');
model.result('pg1').feature('line1').set('color', 'custom');
model.result('pg1').feature('line1').set('customcolor', [0.9803921580314636 0.7843137383460999 0.7058823704719543]);
model.result('pg1').feature('line1').set('threshold', 'manual');
model.result('pg1').feature('line1').set('thresholdvalue', 0.2);
model.result('pg1').feature('line1').set('titletype', 'none');
model.result('pg1').feature('line1').label('Rotor');
model.result('pg1').feature('line1').create('def', 'Deform');
model.result('pg1').feature('line1').feature('def').set('scaleactive', true);
model.result('pg1').feature('line1').feature('def').set('scale', '1');
model.result('pg1').feature('line1').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj1', 'PointTrajectories');
model.result('pg1').feature('pttraj1').set('plotdata', 'points');
model.result('pg1').feature('pttraj1').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj1').selection.set([2]);
model.result('pg1').feature('pttraj1').selection.inherit(false);
model.result('pg1').feature('pttraj1').set('linetype', 'none');
model.result('pg1').feature('pttraj1').set('expr', {'X' 'Y' 'Z'});
model.result('pg1').feature('pttraj1').set('pointtype', 'ellipse');
model.result('pg1').feature('pttraj1').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj1').set('custompointcolor', [0.8039215803146362 0.5215686559677124 0.24705882370471954]);
model.result('pg1').feature('pttraj1').set('semimajorexpr', {'0.5*rotbm.disk1.de*rotbm.e20x ' '0.5*rotbm.disk1.de*rotbm.e20y ' '0.5*rotbm.disk1.de*rotbm.e20z '});
model.result('pg1').feature('pttraj1').set('semiminorexpr', {'0.5*rotbm.disk1.de*rotbm.e30x ' '0.5*rotbm.disk1.de*rotbm.e30y ' '0.5*rotbm.disk1.de*rotbm.e30z '});
model.result('pg1').feature('pttraj1').set('ellipsecount', 1);
model.result('pg1').feature('pttraj1').set('ellipsearrowscaleactive', true);
model.result('pg1').feature('pttraj1').set('ellipsearrowtype', 'none');
model.result('pg1').feature('pttraj1').set('titletype', 'none');
model.result('pg1').feature('pttraj1').label('Disk 1');
model.result('pg1').feature('pttraj1').create('def', 'Deform');
model.result('pg1').feature('pttraj1').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj1').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj1').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj2', 'PointTrajectories');
model.result('pg1').feature('pttraj2').set('plotdata', 'points');
model.result('pg1').feature('pttraj2').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj2').selection.set([3]);
model.result('pg1').feature('pttraj2').selection.inherit(false);
model.result('pg1').feature('pttraj2').set('linetype', 'none');
model.result('pg1').feature('pttraj2').set('expr', {'X' 'Y' 'Z'});
model.result('pg1').feature('pttraj2').set('pointtype', 'ellipse');
model.result('pg1').feature('pttraj2').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj2').set('custompointcolor', [0.8039215803146362 0.5215686559677124 0.24705882370471954]);
model.result('pg1').feature('pttraj2').set('semimajorexpr', {'0.5*rotbm.disk2.de*rotbm.e20x ' '0.5*rotbm.disk2.de*rotbm.e20y ' '0.5*rotbm.disk2.de*rotbm.e20z '});
model.result('pg1').feature('pttraj2').set('semiminorexpr', {'0.5*rotbm.disk2.de*rotbm.e30x ' '0.5*rotbm.disk2.de*rotbm.e30y ' '0.5*rotbm.disk2.de*rotbm.e30z '});
model.result('pg1').feature('pttraj2').set('ellipsecount', 1);
model.result('pg1').feature('pttraj2').set('ellipsearrowscaleactive', true);
model.result('pg1').feature('pttraj2').set('ellipsearrowtype', 'none');
model.result('pg1').feature('pttraj2').set('titletype', 'none');
model.result('pg1').feature('pttraj2').label('Disk 2');
model.result('pg1').feature('pttraj2').create('def', 'Deform');
model.result('pg1').feature('pttraj2').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj2').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj2').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj3', 'PointTrajectories');
model.result('pg1').feature('pttraj3').set('plotdata', 'points');
model.result('pg1').feature('pttraj3').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj3').selection.set([4]);
model.result('pg1').feature('pttraj3').selection.inherit(false);
model.result('pg1').feature('pttraj3').set('linetype', 'none');
model.result('pg1').feature('pttraj3').set('expr', {'X' 'Y' 'Z'});
model.result('pg1').feature('pttraj3').set('pointtype', 'ellipse');
model.result('pg1').feature('pttraj3').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj3').set('custompointcolor', [0.8039215803146362 0.5215686559677124 0.24705882370471954]);
model.result('pg1').feature('pttraj3').set('semimajorexpr', {'0.5*rotbm.disk3.de*rotbm.e20x ' '0.5*rotbm.disk3.de*rotbm.e20y ' '0.5*rotbm.disk3.de*rotbm.e20z '});
model.result('pg1').feature('pttraj3').set('semiminorexpr', {'0.5*rotbm.disk3.de*rotbm.e30x ' '0.5*rotbm.disk3.de*rotbm.e30y ' '0.5*rotbm.disk3.de*rotbm.e30z '});
model.result('pg1').feature('pttraj3').set('ellipsecount', 1);
model.result('pg1').feature('pttraj3').set('ellipsearrowscaleactive', true);
model.result('pg1').feature('pttraj3').set('ellipsearrowtype', 'none');
model.result('pg1').feature('pttraj3').set('titletype', 'none');
model.result('pg1').feature('pttraj3').label('Disk 3');
model.result('pg1').feature('pttraj3').create('def', 'Deform');
model.result('pg1').feature('pttraj3').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj3').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj3').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj4', 'PointTrajectories');
model.result('pg1').feature('pttraj4').set('plotdata', 'points');
model.result('pg1').feature('pttraj4').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj4').selection.set([1]);
model.result('pg1').feature('pttraj4').selection.inherit(false);
model.result('pg1').feature('pttraj4').set('linetype', 'none');
model.result('pg1').feature('pttraj4').set('pointtype', 'arrow');
model.result('pg1').feature('pttraj4').set('expr', {'X-1.0*rotbm.re*rotbm.jrb1.e3gx ' 'Y-1.0*rotbm.re*rotbm.jrb1.e3gy ' 'Z-1.0*rotbm.re*rotbm.jrb1.e3gz '});
model.result('pg1').feature('pttraj4').set('arrowexpr', {'rotbm.re*rotbm.jrb1.e3gx ' 'rotbm.re*rotbm.jrb1.e3gy ' 'rotbm.re*rotbm.jrb1.e3gz '});
model.result('pg1').feature('pttraj4').set('arrowtype', 'arrowhead');
model.result('pg1').feature('pttraj4').set('arrowbase', 'head');
model.result('pg1').feature('pttraj4').set('arrowscale', '10');
model.result('pg1').feature('pttraj4').set('arrowscaleactive', true);
model.result('pg1').feature('pttraj4').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj4').set('custompointcolor', [0.5882353186607361 0.8627451062202454 0.5882353186607361]);
model.result('pg1').feature('pttraj4').set('titletype', 'none');
model.result('pg1').feature('pttraj4').label('Journal Bearing 1');
model.result('pg1').feature('pttraj4').create('def', 'Deform');
model.result('pg1').feature('pttraj4').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj4').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj4').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj5', 'PointTrajectories');
model.result('pg1').feature('pttraj5').set('plotdata', 'points');
model.result('pg1').feature('pttraj5').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj5').selection.set([5]);
model.result('pg1').feature('pttraj5').selection.inherit(false);
model.result('pg1').feature('pttraj5').set('linetype', 'none');
model.result('pg1').feature('pttraj5').set('pointtype', 'arrow');
model.result('pg1').feature('pttraj5').set('expr', {'X-1.0*rotbm.re*rotbm.jrb2.e3gx ' 'Y-1.0*rotbm.re*rotbm.jrb2.e3gy ' 'Z-1.0*rotbm.re*rotbm.jrb2.e3gz '});
model.result('pg1').feature('pttraj5').set('arrowexpr', {'rotbm.re*rotbm.jrb2.e3gx ' 'rotbm.re*rotbm.jrb2.e3gy ' 'rotbm.re*rotbm.jrb2.e3gz '});
model.result('pg1').feature('pttraj5').set('arrowtype', 'arrowhead');
model.result('pg1').feature('pttraj5').set('arrowbase', 'head');
model.result('pg1').feature('pttraj5').set('arrowscale', '10');
model.result('pg1').feature('pttraj5').set('arrowscaleactive', true);
model.result('pg1').feature('pttraj5').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj5').set('custompointcolor', [0.5882353186607361 0.8627451062202454 0.5882353186607361]);
model.result('pg1').feature('pttraj5').set('titletype', 'none');
model.result('pg1').feature('pttraj5').label('Journal Bearing 2');
model.result('pg1').feature('pttraj5').create('def', 'Deform');
model.result('pg1').feature('pttraj5').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj5').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj5').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').run;
model.result('pg1').set('looplevel', [3 71]);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('wp1').set('nplanes', 6);
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset2');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('unit', {''});
model.result('pg2').feature('glob1').set('expr', {'rotbm.omegaf'});
model.result('pg2').feature('glob1').set('descr', {'Forward angular frequency'});
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').feature('glob1').set('xdataexpr', 'rotbm.Ovg');
model.result('pg2').feature('glob1').set('xdataunit', 'rad/s');
model.result('pg2').feature('glob1').label('Forward Whirl Mode');
model.result('pg2').feature('glob1').set('linestyle', 'dashed');
model.result('pg2').feature('glob1').set('linecolor', 'blue');
model.result('pg2').feature('glob1').set('linewidth', 3);
model.result('pg2').feature('glob1').set('legend', false);
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'outer');
model.result('pg2').feature('glob1').create('gmrk1', 'GraphMarker');
model.result('pg2').feature('glob1').feature('gmrk1').set('displaymode', 'intersection');
model.result('pg2').feature('glob1').feature('gmrk1').set('intersectionline', 'identity');
model.result('pg2').feature('glob1').feature('gmrk1').set('precision', 4);
model.result('pg2').feature('glob1').feature('gmrk1').set('labelprefix', 'f: ');
model.result('pg2').feature('glob1').feature('gmrk1').set('pointradius', 4);
model.result('pg2').feature('glob1').feature('gmrk1').set('color', 'custom');
model.result('pg2').feature('glob1').feature('gmrk1').set('customcolor', [1 0.501960813999176 0.250980406999588]);
model.result('pg2').feature('glob1').feature('gmrk1').set('anchorpoint', 'lowermiddle');
model.result('pg2').set('defaultPlotID', 'campbell');
model.result('pg2').label('Campbell Plot (rotbm)');
model.result('pg2').create('glob2', 'Global');
model.result('pg2').feature('glob2').set('expr', {'rotbm.omegab'});
model.result('pg2').feature('glob2').set('xdata', 'expr');
model.result('pg2').feature('glob2').set('xdataexpr', 'rotbm.Ovg');
model.result('pg2').feature('glob2').set('xdataunit', 'rad/s');
model.result('pg2').feature('glob2').set('linestyle', 'dotted');
model.result('pg2').feature('glob2').set('linecolor', 'blue');
model.result('pg2').feature('glob2').set('linewidth', 3);
model.result('pg2').feature('glob2').set('legend', false);
model.result('pg2').feature('glob2').label('Backward Whirl Mode');
model.result('pg2').feature('glob2').set('xdatasolnumtype', 'outer');
model.result('pg2').feature('glob2').create('gmrk1', 'GraphMarker');
model.result('pg2').feature('glob2').feature('gmrk1').set('displaymode', 'intersection');
model.result('pg2').feature('glob2').feature('gmrk1').set('intersectionline', 'identity');
model.result('pg2').feature('glob2').feature('gmrk1').set('precision', 4);
model.result('pg2').feature('glob2').feature('gmrk1').set('labelprefix', 'b: ');
model.result('pg2').feature('glob2').feature('gmrk1').set('pointradius', 4);
model.result('pg2').feature('glob2').feature('gmrk1').set('color', 'custom');
model.result('pg2').feature('glob2').feature('gmrk1').set('customcolor', [0.7490196228027344 0.1411764770746231 0.3686274588108063]);
model.result('pg2').feature('glob2').feature('gmrk1').set('anchorpoint', 'uppermiddle');
model.result('pg2').create('glob3', 'Global');
model.result('pg2').feature('glob3').set('expr', {'rotbm.omegan'});
model.result('pg2').feature('glob3').set('xdata', 'expr');
model.result('pg2').feature('glob3').set('xdataexpr', 'rotbm.Ovg');
model.result('pg2').feature('glob3').set('xdataunit', 'rad/s');
model.result('pg2').feature('glob3').set('linecolor', 'blue');
model.result('pg2').feature('glob3').set('linewidth', 3);
model.result('pg2').feature('glob3').set('legend', false);
model.result('pg2').feature('glob3').label('Planar or Torsional Mode');
model.result('pg2').feature('glob3').set('xdatasolnumtype', 'outer');
model.result('pg2').feature('glob3').create('gmrk1', 'GraphMarker');
model.result('pg2').feature('glob3').feature('gmrk1').set('displaymode', 'intersection');
model.result('pg2').feature('glob3').feature('gmrk1').set('intersectionline', 'identity');
model.result('pg2').feature('glob3').feature('gmrk1').set('precision', 4);
model.result('pg2').feature('glob3').feature('gmrk1').set('labelprefix', 't,p: ');
model.result('pg2').feature('glob3').feature('gmrk1').set('pointradius', 4);
model.result('pg2').feature('glob3').feature('gmrk1').set('color', 'custom');
model.result('pg2').feature('glob3').feature('gmrk1').set('customcolor', [0.03529411926865578 0.4627451002597809 0.03529411926865578]);
model.result('pg2').feature('glob3').feature('gmrk1').set('anchorpoint', 'uppermiddle');
model.result('pg2').create('glob4', 'Global');
model.result('pg2').feature('glob4').set('expr', {'if(rotbm.Ovg<=1.4*rotbm.omega,rotbm.Ovg,NaN)'});
model.result('pg2').feature('glob4').set('data', 'dset2');
model.result('pg2').feature('glob4').set('xdata', 'expr');
model.result('pg2').feature('glob4').set('xdataexpr', 'rotbm.Ovg');
model.result('pg2').feature('glob4').set('xdataunit', 'rad/s');
model.result('pg2').feature('glob4').set('linecolor', 'red');
model.result('pg2').feature('glob4').set('linewidth', 3);
model.result('pg2').feature('glob4').label('omega=Omega');
model.result('pg2').feature('glob4').set('xdatasolnumtype', 'outer');
model.result('pg2').feature('glob4').set('solutionparams', 'manual');
model.result('pg2').feature('glob4').setIndex('looplevelinput', 'last', 0);
model.result('pg2').feature('glob4').set('legend', true);
model.result('pg2').feature('glob4').set('legendmethod', 'manual');
model.result('pg2').feature('glob4').setIndex('legends', '\omega=\Omega', 0);
model.result('pg2').set('ylabel', 'Angular frequency (rad/s)');
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Campbell plot');
model.result('pg2').label('Campbell Plot (rotbm)');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('glob1').setIndex('expr', 'rotbm.omegaf*60/(2*pi)', 0);
model.result('pg2').feature('glob1').setIndex('descr', 'Forward Whirl Frequency (RPM)', 0);
model.result('pg2').feature('glob1').set('xdataexpr', 'rotbm.Ovg*60/(2*pi)');
model.result('pg2').run;
model.result('pg2').feature('glob2').setIndex('expr', 'rotbm.omegab*60/(2*pi)', 0);
model.result('pg2').feature('glob2').setIndex('descr', 'Backward Whirl Frequency (RPM)', 0);
model.result('pg2').feature('glob2').set('xdataexpr', 'rotbm.Ovg*60/(2*pi)');
model.result('pg2').run;
model.result('pg2').feature('glob3').setIndex('expr', 'rotbm.omegan*60/(2*pi)', 0);
model.result('pg2').feature('glob3').setIndex('descr', 'Nonwhirl Frequency (RPM)', 0);
model.result('pg2').feature('glob3').set('xdataexpr', 'rotbm.Ovg*60/(2*pi)');
model.result('pg2').run;
model.result('pg2').feature('glob4').setIndex('expr', 'rotbm.Ovg*60/(2*pi)', 0);
model.result('pg2').feature('glob4').setIndex('descr', 'Angular Speed (RPM)', 0);
model.result('pg2').feature('glob4').set('xdataexpr', 'rotbm.Ovg*60/(2*pi)');
model.result('pg2').run;
model.result('pg2').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg2').setIndex('looplevelindices', 'range(1,1,10)', 0);
model.result('pg2').set('xlabelactive', true);
model.result('pg2').set('xlabel', 'Angular speed (RPM)');
model.result('pg2').set('ylabel', 'Natural frequency (RPM)');
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Logarithmic Decrement');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg3').setIndex('looplevelindices', 'range(1,1,10)', 0);
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').set('expr', {'rotbm.log_dec_f'});
model.result('pg3').feature('glob1').set('descr', {'Logarithmic decrement, forward whirl'});
model.result('pg3').feature('glob1').set('unit', {'1'});
model.result('pg3').feature('glob1').set('xdatasolnumtype', 'outer');
model.result('pg3').feature('glob1').set('xdata', 'expr');
model.result('pg3').feature('glob1').set('xdataexpr', 'Ow');
model.result('pg3').feature('glob1').set('xdataunit', 'RPM');
model.result('pg3').feature('glob1').set('linestyle', 'dashed');
model.result('pg3').feature('glob1').set('linecolor', 'blue');
model.result('pg3').feature('glob1').set('linewidth', 3);
model.result('pg3').feature('glob1').set('legend', false);
model.result('pg3').feature.duplicate('glob2', 'glob1');
model.result('pg3').run;
model.result('pg3').feature('glob2').setIndex('expr', 'rotbm.log_dec_b', 0);
model.result('pg3').feature('glob2').setIndex('unit', 1, 0);
model.result('pg3').feature('glob2').setIndex('descr', 'Logarithmic decrement, backward whirl', 0);
model.result('pg3').feature('glob2').set('linestyle', 'dotted');
model.result('pg3').feature.duplicate('glob3', 'glob2');
model.result('pg3').run;
model.result('pg3').feature('glob3').setIndex('expr', 'rotbm.log_dec_n', 0);
model.result('pg3').feature('glob3').setIndex('unit', 1, 0);
model.result('pg3').feature('glob3').setIndex('descr', 'Logarithmic decrement, planar', 0);
model.result('pg3').feature('glob3').set('linestyle', 'dashdot');
model.result('pg3').run;
model.result('pg3').create('ann1', 'Annotation');
model.result('pg3').feature('ann1').set('text', '\large\[-\, -\, -\, -\textrm{Forward Whirl}\]\[\cdot\, \cdot\, \cdot\, \cdot\, \cdot\,\,\,\, \textrm{Backward Whirl}\]\[-\cdot\, -\cdot -\, \textrm{Planar}\]');
model.result('pg3').feature('ann1').set('posyexpr', 0.54);
model.result('pg3').feature('ann1').set('showpoint', false);
model.result('pg3').feature('ann1').set('latexmarkup', true);
model.result('pg3').feature('ann1').set('showframe', true);
model.result('pg3').run;
model.result('pg3').set('titletype', 'label');
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'Logarithmic decrement');
model.result('pg3').run;

model.func.create('rm1', 'Ramp');
model.func('rm1').model('comp1');
model.func('rm1').set('cutoffactive', true);

model.physics.create('rotbm2', 'BeamRotor', 'geom1');
model.physics('rotbm2').model('comp1');

model.study('std1').feature('eig').setSolveFor('/physics/rotbm2', false);

model.physics('rotbm2').prop('RotorProperties').set('rpt', 'Ow*rm1(Ow*t/2)');
model.physics('rotbm2').feature('lemm1').create('dmp1', 'Damping', 1);
model.physics('rotbm2').feature('lemm1').feature('dmp1').set('alpha_dM', 109.62);
model.physics('rotbm2').feature('lemm1').feature('dmp1').set('beta_dK', '0.0001');
model.physics('rotbm2').feature('rcs1').set('do_circ', 'd_s');
model.physics('rotbm2').feature.copy('disk1', 'rotbm/disk2');
model.physics('rotbm2').feature('disk1').set('COM', 'Relative');
model.physics('rotbm2').feature('disk1').set('zr', '1e-4');
model.physics('rotbm2').create('jrb1', 'JournalBearing', 0);
model.physics('rotbm2').feature('jrb1').selection.set([1 5]);
model.physics('rotbm2').feature('jrb1').set('BearingModel', 'PlainHydrodynamic');
model.physics('rotbm2').feature('jrb1').set('mure_mat', 'userdef');
model.physics('rotbm2').feature('jrb1').set('mure', 'mu_l');
model.physics('rotbm2').feature('jrb1').set('C', 'C');
model.physics('rotbm2').feature('jrb1').set('R', 'd_s/2');
model.physics('rotbm2').feature('jrb1').set('L', 'd_s');
model.physics('rotbm2').feature('jrb1').set('includeBendingStiffness', false);

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').set('plotgroup', 'Default');
model.study('std2').feature('time').set('initialtime', '0');
model.study('std2').feature('time').set('solnum', 'auto');
model.study('std2').feature('time').set('notsolnum', 'auto');
model.study('std2').feature('time').set('outputmap', {});
model.study('std2').feature('time').setSolveFor('/physics/rotbm', false);
model.study('std2').feature('time').setSolveFor('/physics/rotbm2', true);
model.study('std2').create('tffft', 'TimeToFreqFFT');
model.study('std2').feature('tffft').set('fftinputstudy', 'current');
model.study('std2').feature('tffft').set('fftstarttime', '0');
model.study('std2').feature('tffft').set('fftendtime', '1');
model.study('std2').feature('tffft').set('fftmaxfreq', '10');
model.study('std2').feature('tffft').set('fftwincutoff', '1');
model.study('std2').feature('tffft').set('fftwinminfw', '0');
model.study('std2').feature('tffft').set('fftwinmaxfw', '1');
model.study('std2').feature('tffft').set('notsolnum', 'auto');
model.study('std2').feature('tffft').set('outputmap', {});
model.study('std2').feature('tffft').setSolveFor('/physics/rotbm', false);
model.study('std2').feature('tffft').setSolveFor('/physics/rotbm2', true);
model.study('std2').label('Study: Transient with FFT');
model.study('std2').setGenPlots(false);
model.study('std2').create('param', 'Parametric');
model.study('std2').feature('param').setIndex('pname', 'Ow', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', '1/s', 0);
model.study('std2').feature('param').setIndex('pname', 'Ow', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', '1/s', 0);
model.study('std2').feature('param').setIndex('plistarr', 'range(2000,2000,30000)', 0);
model.study('std2').feature('param').setIndex('punit', 'rpm', 0);
model.study('std2').feature('param').set('paramselect', false);
model.study('std2').feature('time').set('tlist', 'range(0,5e-5,0.1)');

model.sol.create('sol74');
model.sol('sol74').study('std2');
model.sol('sol74').create('st1', 'StudyStep');
model.sol('sol74').feature('st1').set('study', 'std2');
model.sol('sol74').feature('st1').set('studystep', 'time');
model.sol('sol74').create('v1', 'Variables');
model.sol('sol74').feature('v1').feature('comp1_u2').set('scalemethod', 'manual');
model.sol('sol74').feature('v1').feature('comp1_rotbm2_phi').set('scalemethod', 'manual');
model.sol('sol74').feature('v1').feature('comp1_u2').set('scaleval', '1e-2*1.3');
model.sol('sol74').feature('v1').feature('comp1_rotbm2_phi').set('scaleval', '1e-2');
model.sol('sol74').feature('v1').set('control', 'time');
model.sol('sol74').create('t1', 'Time');
model.sol('sol74').feature('t1').set('tlist', 'range(0,5e-5,0.1)');
model.sol('sol74').feature('t1').set('plot', 'off');
model.sol('sol74').feature('t1').set('plotgroup', 'Default');
model.sol('sol74').feature('t1').set('plotfreq', 'tout');
model.sol('sol74').feature('t1').set('probesel', 'all');
model.sol('sol74').feature('t1').set('probes', {});
model.sol('sol74').feature('t1').set('probefreq', 'tsteps');
model.sol('sol74').feature('t1').set('rtol', 0.001);
model.sol('sol74').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol74').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol74').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol74').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol74').feature('t1').set('reacf', true);
model.sol('sol74').feature('t1').set('storeudot', true);
model.sol('sol74').feature('t1').set('tstepsgenalpha', 'intermediate');
model.sol('sol74').feature('t1').set('endtimeinterpolation', true);
model.sol('sol74').feature('t1').set('timemethod', 'genalpha');
model.sol('sol74').feature('t1').set('rhoinf', 0.75);
model.sol('sol74').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol74').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol74').feature('t1').set('control', 'time');
model.sol('sol74').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol74').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol74').feature('t1').feature.remove('fcDef');
model.sol('sol74').create('su1', 'StoreSolution');
model.sol('sol74').create('st2', 'StudyStep');
model.sol('sol74').feature('st2').set('study', 'std2');
model.sol('sol74').feature('st2').set('studystep', 'tffft');
model.sol('sol74').create('v2', 'Variables');
model.sol('sol74').feature('v2').feature('comp1_u2').set('scalemethod', 'manual');
model.sol('sol74').feature('v2').feature('comp1_u2').set('scaleval', '1e-2*1.3');
model.sol('sol74').feature('v2').set('initmethod', 'sol');
model.sol('sol74').feature('v2').set('initsol', 'sol74');
model.sol('sol74').feature('v2').set('initsoluse', 'sol75');
model.sol('sol74').feature('v2').set('notsolmethod', 'sol');
model.sol('sol74').feature('v2').set('notsol', 'sol74');
model.sol('sol74').feature('v2').set('control', 'tffft');
model.sol('sol74').create('fft1', 'FFT');
model.sol('sol74').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol74').feature('fft1').set('fftinputdata', 'fftperiodic');
model.sol('sol74').feature('fft1').set('fftoutorder', 'sym');
model.sol('sol74').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol74').feature('fft1').set('cname', 't');
model.sol('sol74').feature('fft1').set('clist', {'0'});
model.sol('sol74').feature('fft1').set('clistctrl', {'fft1_const'});
model.sol('sol74').feature('fft1').set('control', 'tffft');
model.sol('sol74').feature('v2').set('notsolnum', 'auto');
model.sol('sol74').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol74').attach('std2');

model.batch.create('p2', 'Parametric');
model.batch('p2').study('std2');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol74');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').set('pname', {'Ow'});
model.batch('p2').set('plistarr', {'range(2000,2000,30000)'});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std2');
model.batch('p2').set('control', 'param');

model.study('std2').feature('tffft').set('fftinputstudy', 'std2');
model.study('std2').feature('tffft').set('fftendtime', 0.1);
model.study('std2').feature('tffft').set('fftmaxfreq', 1000);

model.sol('sol74').study('std2');

model.study('std2').feature('tffft').set('notsolnum', 'auto');
model.study('std2').feature('tffft').set('notsolvertype', 'solnum');
model.study('std2').feature('tffft').set('notsolnumhide', 'off');
model.study('std2').feature('tffft').set('notstudyhide', 'off');
model.study('std2').feature('tffft').set('notsolhide', 'off');
model.study('std2').feature('tffft').set('fftinputstudystep', 'time');
model.study('std2').feature('tffft').set('notsolnum', 'auto');
model.study('std2').feature('tffft').set('notsolvertype', 'solnum');
model.study('std2').feature('tffft').set('notsolnumhide', 'off');
model.study('std2').feature('tffft').set('notstudyhide', 'off');
model.study('std2').feature('tffft').set('notsolhide', 'off');
model.study('std2').feature('tffft').set('fftinputstudystep', 'time');

model.sol('sol75').copySolution('sol76');

model.study('std2').feature('tffft').set('notlistsolnum', 1);
model.study('std2').feature('tffft').set('notsolnum', 'auto');

model.result.dataset('dset4').set('solution', 'none');

model.sol('sol74').feature.remove('fft1');
model.sol('sol74').feature.remove('v2');
model.sol('sol74').feature.remove('st2');
model.sol('sol74').feature.remove('su1');
model.sol('sol74').feature.remove('t1');
model.sol('sol74').feature.remove('v1');
model.sol('sol74').feature.remove('st1');
model.sol('sol76').copySolution('sol75');
model.sol.remove('sol76');
model.sol('sol75').label('Solution Store 1');

model.result.dataset.remove('dset6');

model.sol('sol74').create('st1', 'StudyStep');
model.sol('sol74').feature('st1').set('study', 'std2');
model.sol('sol74').feature('st1').set('studystep', 'time');
model.sol('sol74').create('v1', 'Variables');
model.sol('sol74').feature('v1').feature('comp1_u2').set('scalemethod', 'manual');
model.sol('sol74').feature('v1').feature('comp1_rotbm2_phi').set('scalemethod', 'manual');
model.sol('sol74').feature('v1').feature('comp1_u2').set('scaleval', '1e-2*1.3');
model.sol('sol74').feature('v1').feature('comp1_rotbm2_phi').set('scaleval', '1e-2');
model.sol('sol74').feature('v1').set('control', 'time');
model.sol('sol74').create('t1', 'Time');
model.sol('sol74').feature('t1').set('tlist', 'range(0,5e-5,0.1)');
model.sol('sol74').feature('t1').set('plot', 'off');
model.sol('sol74').feature('t1').set('plotgroup', 'Default');
model.sol('sol74').feature('t1').set('plotfreq', 'tout');
model.sol('sol74').feature('t1').set('probesel', 'all');
model.sol('sol74').feature('t1').set('probes', {});
model.sol('sol74').feature('t1').set('probefreq', 'tsteps');
model.sol('sol74').feature('t1').set('rtol', 0.001);
model.sol('sol74').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol74').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol74').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol74').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol74').feature('t1').set('reacf', true);
model.sol('sol74').feature('t1').set('storeudot', true);
model.sol('sol74').feature('t1').set('tstepsgenalpha', 'intermediate');
model.sol('sol74').feature('t1').set('endtimeinterpolation', true);
model.sol('sol74').feature('t1').set('timemethod', 'genalpha');
model.sol('sol74').feature('t1').set('rhoinf', 0.75);
model.sol('sol74').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol74').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol74').feature('t1').set('control', 'time');
model.sol('sol74').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol74').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol74').feature('t1').feature.remove('fcDef');
model.sol('sol74').create('su1', 'StoreSolution');
model.sol('sol74').feature('su1').set('sol', 'sol75');
model.sol('sol74').feature('su1').label('Solution Store 1');
model.sol('sol74').create('st2', 'StudyStep');
model.sol('sol74').feature('st2').set('study', 'std2');
model.sol('sol74').feature('st2').set('studystep', 'tffft');

model.study('std2').feature('tffft').set('fftinputsoluse', 'sol75');

model.sol('sol74').create('v2', 'Variables');
model.sol('sol74').feature('v2').feature('comp1_u2').set('scalemethod', 'manual');
model.sol('sol74').feature('v2').feature('comp1_u2').set('scaleval', '1e-2*1.3');
model.sol('sol74').feature('v2').set('initmethod', 'sol');
model.sol('sol74').feature('v2').set('initsol', 'sol74');
model.sol('sol74').feature('v2').set('initsoluse', 'sol75');
model.sol('sol74').feature('v2').set('notsolmethod', 'sol');
model.sol('sol74').feature('v2').set('notsol', 'sol74');
model.sol('sol74').feature('v2').set('control', 'tffft');
model.sol('sol74').create('fft1', 'FFT');
model.sol('sol74').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol74').feature('fft1').set('fftinputdata', 'fftperiodic');
model.sol('sol74').feature('fft1').set('fftoutorder', 'sym');
model.sol('sol74').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol74').feature('fft1').set('cname', 't');
model.sol('sol74').feature('fft1').set('clist', {'0'});
model.sol('sol74').feature('fft1').set('clistctrl', {'fft1_const'});
model.sol('sol74').feature('fft1').set('control', 'tffft');

model.result.dataset('dset4').set('solution', 'sol75');

model.sol('sol74').feature('v2').set('notsolnum', 'auto');
model.sol('sol74').feature('v2').set('notsolvertype', 'solnum');

model.study('std2').feature('tffft').set('notsolnum', 'auto');
model.study('std2').feature('tffft').set('notsolvertype', 'solnum');
model.study('std2').feature('tffft').set('notsolnumhide', 'off');
model.study('std2').feature('tffft').set('notstudyhide', 'off');
model.study('std2').feature('tffft').set('notsolhide', 'off');
model.study('std2').feature('tffft').set('fftinputstudystep', 'time');
model.study('std2').feature('tffft').set('notsolnum', 'auto');
model.study('std2').feature('tffft').set('notsolvertype', 'solnum');
model.study('std2').feature('tffft').set('notsolnumhide', 'off');
model.study('std2').feature('tffft').set('notstudyhide', 'off');
model.study('std2').feature('tffft').set('notsolhide', 'off');
model.study('std2').feature('tffft').set('fftinputstudystep', 'time');

model.sol('sol74').attach('std2');

model.batch('p2').feature.remove('so1');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol74');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').set('pname', {'Ow'});
model.batch('p2').set('plistarr', {'range(2000,2000,30000)'});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std2');
model.batch('p2').set('control', 'param');

model.sol.create('sol76');
model.sol('sol76').study('std2');
model.sol('sol76').label('Parametric Solutions 2');

model.batch('p2').feature('so1').set('psol', 'sol76');
model.batch('p2').run('compute');

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Waterfall');
model.result('pg4').set('data', 'dset5');
model.result('pg4').create('wfp1', 'Waterfall');
model.result('pg4').feature('wfp1').set('data', 'dset5');
model.result('pg4').feature('wfp1').selection.set([1]);
model.result('pg4').feature('wfp1').set('zexpr', 'rotbm2.disp');
model.result('pg4').feature('wfp1').set('xexpr', 'freq');
model.result('pg4').feature('wfp1').set('xunit', 'RPM');
model.result('pg4').feature('wfp1').set('yexpr', 'Ow');
model.result('pg4').feature('wfp1').set('yunit', 'RPM');
model.result('pg4').feature('wfp1').set('colortable', 'TrafficLight');
model.result('pg4').run;
model.result('pg4').create('ann1', 'Annotation');
model.result('pg4').feature('ann1').set('posxexpr', '3e4');
model.result('pg4').feature('ann1').set('posyexpr', '2e3');
model.result('pg4').feature('ann1').set('text', '\[f\]');
model.result('pg4').feature('ann1').set('latexmarkup', true);
model.result('pg4').feature('ann1').set('showpoint', false);
model.result('pg4').feature('ann1').set('backgroundcolor', 'fromtheme');
model.result('pg4').feature.duplicate('ann2', 'ann1');
model.result('pg4').run;
model.result('pg4').feature('ann2').set('text', '\[\Omega\]');
model.result('pg4').feature('ann2').set('posxexpr', '6e4');
model.result('pg4').feature('ann2').set('posyexpr', '1.5e4');
model.result('pg4').feature('ann2').set('poszexpr', '1e-6');
model.result('pg4').run;

model.view('view3').camera.set('manualgrid', true);
model.view('view3').camera.set('xspacing', 2000);
model.view('view3').camera.set('yspacing', 1000);
model.view('view3').camera.set('zspacing', '2e-7');

model.result('pg4').run;
model.result('pg4').run;

model.view('view3').set('scenelight', false);

model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Orbit (Bearing)');
model.result('pg5').set('data', 'dset4');
model.result('pg5').create('ptgr1', 'PointGraph');
model.result('pg5').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg5').feature('ptgr1').set('linewidth', 'preference');
model.result('pg5').feature('ptgr1').selection.set([1]);
model.result('pg5').feature('ptgr1').set('expr', 'w2');
model.result('pg5').feature('ptgr1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg5').feature('ptgr1').set('xdata', 'expr');
model.result('pg5').feature('ptgr1').set('xdataexpr', 'v2');
model.result('pg5').feature('ptgr1').set('xdataunit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg5').feature('ptgr1').set('linewidth', 3);
model.result('pg5').feature('ptgr1').create('col1', 'Color');
model.result('pg5').run;
model.result('pg5').feature('ptgr1').feature('col1').set('expr', 't');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Orbit at the bearing');
model.result('pg5').set('preserveaspect', true);
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Orbit (Disk)');
model.result('pg6').set('title', 'Orbit at the disk');
model.result('pg6').run;
model.result('pg6').feature('ptgr1').selection.set([3]);
model.result('pg6').run;
model.result('pg6').run;
model.result('pg4').run;

model.title('Simply Supported Beam Rotor');

model.description(['In this tutorial model, you will see how to set up eigenfrequency and transient analyses (using FFT) of a rotor with various mountings and bearing supports. The example illustrates how to use Campbell and Waterfall plots to find the critical speed. It also demonstrates the range of stability of the rotor.' newline  newline 'The rotor is modeled using the Beam Rotor interface in the Rotordynamics Module, an add-on to the COMSOL Multiphysics' native2unicode(hex2dec({'00' 'ae'}), 'unicode') ' software. Inertial properties and offset of the rotor components are modeled using the Disk node. The bearing support is modeled by an equivalent stiffness-based approach using the Journal Bearing node provided in the interface. The FFT analysis uses the Time dependent with FFT study sequence.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;
model.sol('sol20').clearSolutionData;
model.sol('sol21').clearSolutionData;
model.sol('sol22').clearSolutionData;
model.sol('sol23').clearSolutionData;
model.sol('sol24').clearSolutionData;
model.sol('sol25').clearSolutionData;
model.sol('sol26').clearSolutionData;
model.sol('sol27').clearSolutionData;
model.sol('sol28').clearSolutionData;
model.sol('sol29').clearSolutionData;
model.sol('sol30').clearSolutionData;
model.sol('sol31').clearSolutionData;
model.sol('sol32').clearSolutionData;
model.sol('sol33').clearSolutionData;
model.sol('sol34').clearSolutionData;
model.sol('sol35').clearSolutionData;
model.sol('sol36').clearSolutionData;
model.sol('sol37').clearSolutionData;
model.sol('sol38').clearSolutionData;
model.sol('sol39').clearSolutionData;
model.sol('sol40').clearSolutionData;
model.sol('sol41').clearSolutionData;
model.sol('sol42').clearSolutionData;
model.sol('sol43').clearSolutionData;
model.sol('sol44').clearSolutionData;
model.sol('sol45').clearSolutionData;
model.sol('sol46').clearSolutionData;
model.sol('sol47').clearSolutionData;
model.sol('sol48').clearSolutionData;
model.sol('sol49').clearSolutionData;
model.sol('sol50').clearSolutionData;
model.sol('sol51').clearSolutionData;
model.sol('sol52').clearSolutionData;
model.sol('sol53').clearSolutionData;
model.sol('sol54').clearSolutionData;
model.sol('sol55').clearSolutionData;
model.sol('sol56').clearSolutionData;
model.sol('sol57').clearSolutionData;
model.sol('sol58').clearSolutionData;
model.sol('sol59').clearSolutionData;
model.sol('sol60').clearSolutionData;
model.sol('sol61').clearSolutionData;
model.sol('sol62').clearSolutionData;
model.sol('sol63').clearSolutionData;
model.sol('sol64').clearSolutionData;
model.sol('sol65').clearSolutionData;
model.sol('sol66').clearSolutionData;
model.sol('sol67').clearSolutionData;
model.sol('sol68').clearSolutionData;
model.sol('sol69').clearSolutionData;
model.sol('sol70').clearSolutionData;
model.sol('sol71').clearSolutionData;
model.sol('sol72').clearSolutionData;
model.sol('sol73').clearSolutionData;
model.sol('sol74').clearSolutionData;
model.sol('sol75').clearSolutionData;
model.sol('sol76').clearSolutionData;
model.sol('sol77').clearSolutionData;
model.sol('sol78').clearSolutionData;
model.sol('sol79').clearSolutionData;
model.sol('sol80').clearSolutionData;
model.sol('sol81').clearSolutionData;
model.sol('sol82').clearSolutionData;
model.sol('sol83').clearSolutionData;
model.sol('sol84').clearSolutionData;
model.sol('sol85').clearSolutionData;
model.sol('sol86').clearSolutionData;
model.sol('sol87').clearSolutionData;
model.sol('sol88').clearSolutionData;
model.sol('sol89').clearSolutionData;
model.sol('sol90').clearSolutionData;
model.sol('sol91').clearSolutionData;

model.label('simply_supported_beam_rotor.mph');

model.modelNode.label('Components');

out = model;
