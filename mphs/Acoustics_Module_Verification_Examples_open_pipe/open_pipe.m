function out = model
%
% open_pipe.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('acpr2', 'PressureAcoustics', 'geom1');
model.physics('acpr2').model('comp1');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('a', '0.25[m]', 'Pipe radius');
model.param.set('L', '1.5[m]', 'Pipe length');
model.param.set('rho_air', '1.25[kg/m^3]', 'Air density');
model.param.set('c_air', '343[m/s]', 'Speed of sound in air');
model.param.set('a0', '1[m/s^2]', 'Applied piston acceleration');
model.param.set('fmin', '10[Hz]', 'Minimum study frequency');
model.param.set('fmax', '1000[Hz]', 'Maximum study frequency');
model.param.set('hmax', 'c_air/fmax/6', 'Mesh size to resolve the minimum wavelength');
model.param.set('alpha11', '3.832', 'Zero of the first derivative of the Bessel function');
model.param.set('fcut', '(alpha11*c_air/a)/(2*pi)', 'Cutoff frequency');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'a' 'L'});
model.geom('geom1').feature('r1').set('pos', {'0' '-L'});
model.geom('geom1').run('r1');
model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', '6*a');
model.geom('geom1').feature('c1').set('angle', 90);
model.geom('geom1').feature('c1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('c1').setIndex('layer', '2*a', 0);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').set('density', {'rho_air'});
model.material('mat1').propertyGroup('def').set('soundspeed', {'c_air'});

model.modelNode('comp1').label('Component 1 - Flanged pipe radiation');

model.physics('acpr').label('Pressure Acoustics, Frequency Domain - impedance model');
model.physics('acpr').selection.set([1]);
model.physics('acpr').create('nacc1', 'NormalAcceleration', 1);
model.physics('acpr').feature('nacc1').selection.set([2]);
model.physics('acpr').feature('nacc1').set('nacc', 'a0');
model.physics('acpr').create('imp1', 'Impedance', 1);
model.physics('acpr').feature('imp1').selection.set([4]);
model.physics('acpr').feature('imp1').set('ImpedanceModel', 'EndImpedance');
model.physics('acpr').feature('imp1').set('innera', 'a');
model.physics('acpr2').label('Pressure Acoustics, Frequency Domain 2 - perfectly matched layers');

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.set([3]);
model.coordSystem('pml1').set('stretchingType', 'rational');
model.coordSystem('pml1').set('wavelengthSource', 'acpr2');
model.coordSystem('pml1').set('PMLfactor', '0.5');
model.coordSystem('pml1').set('PMLgamma', '5');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 1);
model.cpl('intop1').selection.set([4]);

model.physics('acpr2').create('nacc1', 'NormalAcceleration', 1);
model.physics('acpr2').feature('nacc1').selection.set([2]);
model.physics('acpr2').feature('nacc1').set('nacc', 'a0');

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'hmax');
model.mesh('mesh1').feature('size').set('hmin', 6.0E-4);
model.mesh('mesh1').feature('ftri1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').selection.set([1 2]);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.geom('geom1', 0);
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([6]);
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 'hmax/15');
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([8]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 14);
model.mesh('mesh1').run;

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std1').feature('freq').setSolveFor('/physics/acpr2', true);
model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std2').feature('freq').setSolveFor('/physics/acpr2', true);
model.study('std1').label('Study 1 - Flanged pipe with impedance BC');
model.study('std1').feature('freq').set('plist', '{10, 10.3, 10.6, 10.9, 11.2, 11.5, 11.8, 12.2, 12.5, 12.8, 13.2, 13.6, 14, 14.5, 15, 15.5, 16, 16.5, 17, 17.5, 18, 18.5, 19, 19.5, 20, 20.6, 21.2, 21.8, 22.4, 23, 23.6, 24.3, 25, 25.8, 26.5, 27.2, 28, 29, 30, 30.7, 31.5, 32.5, 33.5, 34.5, 35.5, 36.5, 37.5, 38.7, 40, 41.2, 42.5, 43.7, 45, 46.2, 47.5, 48.7, 50, 51.5, 53, 54.5, 56, 58, 60, 61.5, 63, 65, 67, 69, 71, 73, 75, 77.5, 80, 82.5, 85, 87.5, 90, 92.5, 95, 97.5, 100, 103, 106, 109, 112, 115, 118, 122, 125, 128, 132, 136, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 206, 212, 218, 224, 230, 236, 243, 250, 258, 265, 272, 280, 290, 300, 307, 315, 325, 335, 345, 355, 365, 375, 387, 400, 412, 425, 437, 450, 462, 475, 487, 500, 515, 530, 545, 560, 580, 600, 615, 630, 650, 670, 690, 710, 730, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1e3}');
model.study('std1').feature('freq').setEntry('activate', 'acpr2', false);
model.study('std2').label('Study 2 - Flanged pipe with PML');
model.study('std2').setGenPlots(false);
model.study('std2').feature('freq').set('plist', '{10, 10.3, 10.6, 10.9, 11.2, 11.5, 11.8, 12.2, 12.5, 12.8, 13.2, 13.6, 14, 14.5, 15, 15.5, 16, 16.5, 17, 17.5, 18, 18.5, 19, 19.5, 20, 20.6, 21.2, 21.8, 22.4, 23, 23.6, 24.3, 25, 25.8, 26.5, 27.2, 28, 29, 30, 30.7, 31.5, 32.5, 33.5, 34.5, 35.5, 36.5, 37.5, 38.7, 40, 41.2, 42.5, 43.7, 45, 46.2, 47.5, 48.7, 50, 51.5, 53, 54.5, 56, 58, 60, 61.5, 63, 65, 67, 69, 71, 73, 75, 77.5, 80, 82.5, 85, 87.5, 90, 92.5, 95, 97.5, 100, 103, 106, 109, 112, 115, 118, 122, 125, 128, 132, 136, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 206, 212, 218, 224, 230, 236, 243, 250, 258, 265, 272, 280, 290, 300, 307, 315, 325, 335, 345, 355, 365, 375, 387, 400, 412, 425, 437, 450, 462, 475, 487, 500, 515, 530, 545, 560, 580, 600, 615, 630, 650, 670, 690, 710, 730, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1e3}');
model.study('std2').feature('freq').setEntry('activate', 'acpr', false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'{10, 10.3, 10.6, 10.9, 11.2, 11.5, 11.8, 12.2, 12.5, 12.8, 13.2, 13.6, 14, 14.5, 15, 15.5, 16, 16.5, 17, 17.5, 18, 18.5, 19, 19.5, 20, 20.6, 21.2, 21.8, 22.4, 23, 23.6, 24.3, 25, 25.8, 26.5, 27.2, 28, 29, 30, 30.7, 31.5, 32.5, 33.5, 34.5, 35.5, 36.5, 37.5, 38.7, 40, 41.2, 42.5, 43.7, 45, 46.2, 47.5, 48.7, 50, 51.5, 53, 54.5, 56, 58, 60, 61.5, 63, 65, 67, 69, 71, 73, 75, 77.5, 80, 82.5, 85, 87.5, 90, 92.5, 95, 97.5, 100, 103, 106, 109, 112, 115, 118, 122, 125, 128, 132, 136, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 206, 212, 218, 224, 230, 236, 243, 250, 258, 265, 272, 280, 290, 300, 307, 315, 325, 335, 345, 355, 365, 375, 387, 400, 412, 425, 437, 450, 462, 475, 487, 500, 515, 530, 545, 560, 580, 600, 615, 630, 650, 670, 690, 710, 730, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1e3}'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 161, 0);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 161, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').label('Sound Pressure Level (acpr)');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'dset1');
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('hasspacevars', false);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'rev1');
model.result('pg3').setIndex('looplevel', 161, 0);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg3').feature('surf1').set('colortable', 'Wave');
model.result('pg3').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').label('Acoustic Pressure, 3D (acpr)');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'rev1');
model.result('pg4').setIndex('looplevel', 161, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg4').feature('surf1').set('colortable', 'Rainbow');
model.result('pg4').feature('surf1').set('colorscalemode', 'linear');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').label('Sound Pressure Level, 3D (acpr)');
model.result('pg1').run;

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 0.001);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol2').feature('s1').feature('p1').set('plistarr', {'{10, 10.3, 10.6, 10.9, 11.2, 11.5, 11.8, 12.2, 12.5, 12.8, 13.2, 13.6, 14, 14.5, 15, 15.5, 16, 16.5, 17, 17.5, 18, 18.5, 19, 19.5, 20, 20.6, 21.2, 21.8, 22.4, 23, 23.6, 24.3, 25, 25.8, 26.5, 27.2, 28, 29, 30, 30.7, 31.5, 32.5, 33.5, 34.5, 35.5, 36.5, 37.5, 38.7, 40, 41.2, 42.5, 43.7, 45, 46.2, 47.5, 48.7, 50, 51.5, 53, 54.5, 56, 58, 60, 61.5, 63, 65, 67, 69, 71, 73, 75, 77.5, 80, 82.5, 85, 87.5, 90, 92.5, 95, 97.5, 100, 103, 106, 109, 112, 115, 118, 122, 125, 128, 132, 136, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 206, 212, 218, 224, 230, 236, 243, 250, 258, 265, 272, 280, 290, 300, 307, 315, 325, 335, 345, 355, 365, 375, 387, 400, 412, 425, 437, 450, 462, 475, 487, 500, 515, 530, 545, 560, 580, 600, 615, 630, 650, 670, 690, 710, 730, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1e3}'});
model.sol('sol2').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol2').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol2').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s1').feature('p1').set('probes', {});
model.sol('sol2').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol2').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('s1').set('control', 'freq');
model.sol('sol2').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol2').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol2').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Flanged pipe: Z_rad vs. f');
model.result('pg5').set('data', 'none');
model.result('pg5').set('titletype', 'label');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'f [Hz]');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Z_rad [Pa*s/m]');
model.result('pg5').create('ptgr1', 'PointGraph');
model.result('pg5').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg5').feature('ptgr1').set('linewidth', 'preference');
model.result('pg5').feature('ptgr1').set('data', 'dset1');
model.result('pg5').feature('ptgr1').selection.set([2]);
model.result('pg5').feature('ptgr1').set('expr', 'real(acpr.imp1.Zn)');
model.result('pg5').feature('ptgr1').set('linecolor', 'blue');
model.result('pg5').feature('ptgr1').set('legend', true);
model.result('pg5').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg5').feature('ptgr1').setIndex('legends', 'real(Z) with impedance model', 0);
model.result('pg5').run;
model.result('pg5').create('ptgr2', 'PointGraph');
model.result('pg5').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg5').feature('ptgr2').set('linewidth', 'preference');
model.result('pg5').feature('ptgr2').set('data', 'dset1');
model.result('pg5').feature('ptgr2').selection.set([2]);
model.result('pg5').feature('ptgr2').set('expr', 'imag(acpr.imp1.Zn)');
model.result('pg5').feature('ptgr2').set('linecolor', 'red');
model.result('pg5').feature('ptgr2').set('legend', true);
model.result('pg5').feature('ptgr2').set('legendmethod', 'manual');
model.result('pg5').feature('ptgr2').setIndex('legends', 'imag(Z) with impedance model', 0);
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').set('data', 'dset2');
model.result('pg5').feature('glob1').setIndex('expr', 'intop1(p2)', 0);
model.result('pg5').feature('glob1').setIndex('unit', 'N', 0);
model.result('pg5').feature('glob1').setIndex('descr', '', 0);
model.result('pg5').feature('glob1').set('linestyle', 'dashed');
model.result('pg5').feature('glob1').set('linecolor', 'blue');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').create('glob2', 'Global');
model.result('pg5').feature('glob2').set('markerpos', 'datapoints');
model.result('pg5').feature('glob2').set('linewidth', 'preference');
model.result('pg5').feature('glob2').set('data', 'dset2');
model.result('pg5').feature('glob2').setIndex('expr', 'imag(intop1(p2)/intop1(acpr2.vz))', 0);
model.result('pg5').feature('glob2').setIndex('unit', 'N*s/(m*m^2)', 0);
model.result('pg5').feature('glob2').setIndex('descr', 'imag(Z) with PML', 0);
model.result('pg5').feature('glob2').set('linestyle', 'dashed');
model.result('pg5').feature('glob2').set('linecolor', 'red');
model.result('pg5').run;
model.result('pg5').set('xlog', true);
model.result('pg5').set('ylog', true);
model.result('pg5').run;
model.result('pg5').set('legendpos', 'lowerright');
model.result('pg5').run;
model.result('pg5').feature('glob1').setIndex('expr', 'intop1(p2)/intop1(acpr2.vz)', 0);
model.result('pg5').feature('glob1').setIndex('unit', 'N*s/(m*m^2)', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'real(Z) with PML', 0);
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Flanged pipe: Z_rad vs. k*a');
model.result('pg6').set('xlabel', 'k*a [-]');
model.result('pg6').run;
model.result('pg6').feature('ptgr1').set('xdata', 'expr');
model.result('pg6').feature('ptgr1').set('xdataexpr', 'acpr.omega/c_air*a');
model.result('pg6').run;
model.result('pg6').feature('ptgr2').set('xdata', 'expr');
model.result('pg6').feature('ptgr2').set('xdataexpr', 'acpr.omega/c_air*a');
model.result('pg6').run;
model.result('pg6').feature('glob1').set('xdata', 'expr');
model.result('pg6').feature('glob1').set('xdataexpr', 'acpr.omega/c_air*a');
model.result('pg6').run;
model.result('pg6').feature('glob2').set('xdata', 'expr');
model.result('pg6').feature('glob2').set('xdataexpr', 'acpr.omega/c_air*a');
model.result('pg6').set('xlog', false);
model.result('pg6').set('ylog', false);
model.result('pg6').run;
model.result('pg6').run;

model.modelNode.create('comp2', true);

model.geom.create('geom2', 2);
model.geom('geom2').model('comp2');
model.geom('geom2').axisymmetric(true);

model.mesh.create('mesh2', 'geom2');

model.modelNode('comp2').label('Component 2 - Unflanged pipe radiation');

model.geom('geom2').create('r1', 'Rectangle');
model.geom('geom2').feature('r1').set('size', {'a' 'L'});
model.geom('geom2').feature('r1').set('pos', {'0' '-L'});
model.geom('geom2').run('r1');
model.geom('geom2').create('c1', 'Circle');
model.geom('geom2').feature('c1').set('r', '6*a');
model.geom('geom2').feature('c1').set('angle', 180);
model.geom('geom2').feature('c1').set('rot', -90);
model.geom('geom2').feature('c1').setIndex('layername', 'Layer 1', 0);
model.geom('geom2').feature('c1').setIndex('layer', '2*a', 0);
model.geom('geom2').runPre('fin');
model.geom('geom2').create('uni1', 'Union');
model.geom('geom2').feature('uni1').selection('input').set({'c1' 'r1'});
model.geom('geom2').run('fin');
model.geom('geom2').create('cmd1', 'CompositeDomains');
model.geom('geom2').feature('cmd1').selection('input').set('fin', [1 2 3]);
model.geom('geom2').run('cmd1');

model.physics.create('acpr3', 'PressureAcoustics', 'geom2');
model.physics('acpr3').model('comp2');

model.study('std1').feature('freq').setSolveFor('/physics/acpr3', true);
model.study('std2').feature('freq').setSolveFor('/physics/acpr3', true);

model.physics('acpr3').label('Pressure Acoustics, Frequency Domain 3 - impedance BC');
model.physics('acpr3').selection.set([1]);
model.physics('acpr3').create('nacc1', 'NormalAcceleration', 1);
model.physics('acpr3').feature('nacc1').selection.set([2]);
model.physics('acpr3').feature('nacc1').set('nacc', 'a0');
model.physics('acpr3').create('imp1', 'Impedance', 1);
model.physics('acpr3').feature('imp1').selection.set([4]);
model.physics('acpr3').feature('imp1').set('ImpedanceModel', 'EndImpedance');
model.physics('acpr3').feature('imp1').set('EndImpedanceType', 'UnflangedPipeCircular');
model.physics('acpr3').feature('imp1').set('innera', 'a');

model.material.create('mat2', 'Common', 'comp2');
model.material('mat2').propertyGroup('def').set('density', {'rho_air'});
model.material('mat2').propertyGroup('def').set('soundspeed', {'c_air'});

model.physics.create('acpr4', 'PressureAcoustics', 'geom2');
model.physics('acpr4').model('comp2');

model.study('std1').feature('freq').setSolveFor('/physics/acpr4', true);
model.study('std2').feature('freq').setSolveFor('/physics/acpr4', true);

model.physics('acpr4').label('Pressure Acoustics, Frequency Domain 4 - perfectly matched layers');
model.physics('acpr4').create('nacc1', 'NormalAcceleration', 1);
model.physics('acpr4').feature('nacc1').selection.set([2]);
model.physics('acpr4').feature('nacc1').set('nacc', 'a0');
model.physics('acpr4').create('ishb1', 'InteriorSoundHard', 1);
model.physics('acpr4').feature('ishb1').selection.set([7 8]);

model.coordSystem.create('pml2', 'geom2', 'PML');
model.coordSystem('pml2').selection.set([3 4]);
model.coordSystem('pml2').set('wavelengthSource', 'acpr4');
model.coordSystem('pml2').set('PMLfactor', '0.5');
model.coordSystem('pml2').set('PMLgamma', '5');
model.coordSystem('pml2').set('stretchingType', 'rational');

model.cpl.create('intop2', 'Integration', 'geom2');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').selection.geom('geom2', 1);
model.cpl('intop2').selection.set([4]);

model.mesh('mesh2').create('ftri1', 'FreeTri');
model.mesh('mesh2').feature('ftri1').create('size1', 'Size');
model.mesh('mesh2').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh2').feature('ftri1').feature('size1').selection.geom('geom2', 0);
model.mesh('mesh2').feature('ftri1').feature('size1').selection.set([8]);
model.mesh('mesh2').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh2').feature('ftri1').feature('size1').set('hmax', 'hmax/15');
model.mesh('mesh2').feature('ftri1').selection.geom('geom2', 2);
model.mesh('mesh2').feature('ftri1').selection.set([1 2]);
model.mesh('mesh2').feature('size').set('custom', true);
model.mesh('mesh2').feature('size').set('hmax', 'hmax');
model.mesh('mesh2').feature('size').set('hmin', 6.0E-4);
model.mesh('mesh2').create('map1', 'Map');
model.mesh('mesh2').feature('map1').selection.geom('geom2', 2);
model.mesh('mesh2').feature('map1').selection.set([3 4]);
model.mesh('mesh2').run;

model.study.create('std3');
model.study('std3').create('freq', 'Frequency');
model.study('std3').feature('freq').setSolveFor('/physics/acpr', false);
model.study('std3').feature('freq').setSolveFor('/physics/acpr2', false);
model.study('std3').feature('freq').setSolveFor('/physics/acpr3', true);
model.study('std3').feature('freq').setSolveFor('/physics/acpr4', false);
model.study.create('std4');
model.study('std4').create('freq', 'Frequency');
model.study('std4').feature('freq').setSolveFor('/physics/acpr', false);
model.study('std4').feature('freq').setSolveFor('/physics/acpr2', false);
model.study('std4').feature('freq').setSolveFor('/physics/acpr3', false);
model.study('std4').feature('freq').setSolveFor('/physics/acpr4', true);
model.study('std3').setGenPlots(false);
model.study('std3').label('Study 3 - Unflanged pipe with impedance BC');
model.study('std3').feature('freq').set('plist', '{10, 10.3, 10.6, 10.9, 11.2, 11.5, 11.8, 12.2, 12.5, 12.8, 13.2, 13.6, 14, 14.5, 15, 15.5, 16, 16.5, 17, 17.5, 18, 18.5, 19, 19.5, 20, 20.6, 21.2, 21.8, 22.4, 23, 23.6, 24.3, 25, 25.8, 26.5, 27.2, 28, 29, 30, 30.7, 31.5, 32.5, 33.5, 34.5, 35.5, 36.5, 37.5, 38.7, 40, 41.2, 42.5, 43.7, 45, 46.2, 47.5, 48.7, 50, 51.5, 53, 54.5, 56, 58, 60, 61.5, 63, 65, 67, 69, 71, 73, 75, 77.5, 80, 82.5, 85, 87.5, 90, 92.5, 95, 97.5, 100, 103, 106, 109, 112, 115, 118, 122, 125, 128, 132, 136, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 206, 212, 218, 224, 230, 236, 243, 250, 258, 265, 272, 280, 290, 300, 307, 315, 325, 335, 345, 355, 365, 375, 387, 400, 412, 425, 437, 450, 462, 475, 487, 500, 515, 530, 545, 560, 580, 600, 615, 630, 650, 670, 690, 710, 730, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1e3}');

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'freq');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'freq');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').set('stol', 0.001);
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol3').feature('s1').feature('p1').set('plistarr', {'{10, 10.3, 10.6, 10.9, 11.2, 11.5, 11.8, 12.2, 12.5, 12.8, 13.2, 13.6, 14, 14.5, 15, 15.5, 16, 16.5, 17, 17.5, 18, 18.5, 19, 19.5, 20, 20.6, 21.2, 21.8, 22.4, 23, 23.6, 24.3, 25, 25.8, 26.5, 27.2, 28, 29, 30, 30.7, 31.5, 32.5, 33.5, 34.5, 35.5, 36.5, 37.5, 38.7, 40, 41.2, 42.5, 43.7, 45, 46.2, 47.5, 48.7, 50, 51.5, 53, 54.5, 56, 58, 60, 61.5, 63, 65, 67, 69, 71, 73, 75, 77.5, 80, 82.5, 85, 87.5, 90, 92.5, 95, 97.5, 100, 103, 106, 109, 112, 115, 118, 122, 125, 128, 132, 136, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 206, 212, 218, 224, 230, 236, 243, 250, 258, 265, 272, 280, 290, 300, 307, 315, 325, 335, 345, 355, 365, 375, 387, 400, 412, 425, 437, 450, 462, 475, 487, 500, 515, 530, 545, 560, 580, 600, 615, 630, 650, 670, 690, 710, 730, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1e3}'});
model.sol('sol3').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol3').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol3').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol3').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol3').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol3').feature('s1').feature('p1').set('probes', {});
model.sol('sol3').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol3').feature('s1').set('linpmethod', 'sol');
model.sol('sol3').feature('s1').set('linpsol', 'zero');
model.sol('sol3').feature('s1').set('control', 'freq');
model.sol('sol3').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol3').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol3').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.study('std4').label('Study 4 - Unflanged pipe with PML');
model.study('std4').setGenPlots(false);
model.study('std4').feature('freq').set('plist', '{10, 10.3, 10.6, 10.9, 11.2, 11.5, 11.8, 12.2, 12.5, 12.8, 13.2, 13.6, 14, 14.5, 15, 15.5, 16, 16.5, 17, 17.5, 18, 18.5, 19, 19.5, 20, 20.6, 21.2, 21.8, 22.4, 23, 23.6, 24.3, 25, 25.8, 26.5, 27.2, 28, 29, 30, 30.7, 31.5, 32.5, 33.5, 34.5, 35.5, 36.5, 37.5, 38.7, 40, 41.2, 42.5, 43.7, 45, 46.2, 47.5, 48.7, 50, 51.5, 53, 54.5, 56, 58, 60, 61.5, 63, 65, 67, 69, 71, 73, 75, 77.5, 80, 82.5, 85, 87.5, 90, 92.5, 95, 97.5, 100, 103, 106, 109, 112, 115, 118, 122, 125, 128, 132, 136, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 206, 212, 218, 224, 230, 236, 243, 250, 258, 265, 272, 280, 290, 300, 307, 315, 325, 335, 345, 355, 365, 375, 387, 400, 412, 425, 437, 450, 462, 475, 487, 500, 515, 530, 545, 560, 580, 600, 615, 630, 650, 670, 690, 710, 730, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1e3}');

model.sol.create('sol4');
model.sol('sol4').study('std4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std4');
model.sol('sol4').feature('st1').set('studystep', 'freq');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'freq');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').set('stol', 0.001);
model.sol('sol4').feature('s1').create('p1', 'Parametric');
model.sol('sol4').feature('s1').feature.remove('pDef');
model.sol('sol4').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol4').feature('s1').feature('p1').set('plistarr', {'{10, 10.3, 10.6, 10.9, 11.2, 11.5, 11.8, 12.2, 12.5, 12.8, 13.2, 13.6, 14, 14.5, 15, 15.5, 16, 16.5, 17, 17.5, 18, 18.5, 19, 19.5, 20, 20.6, 21.2, 21.8, 22.4, 23, 23.6, 24.3, 25, 25.8, 26.5, 27.2, 28, 29, 30, 30.7, 31.5, 32.5, 33.5, 34.5, 35.5, 36.5, 37.5, 38.7, 40, 41.2, 42.5, 43.7, 45, 46.2, 47.5, 48.7, 50, 51.5, 53, 54.5, 56, 58, 60, 61.5, 63, 65, 67, 69, 71, 73, 75, 77.5, 80, 82.5, 85, 87.5, 90, 92.5, 95, 97.5, 100, 103, 106, 109, 112, 115, 118, 122, 125, 128, 132, 136, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 206, 212, 218, 224, 230, 236, 243, 250, 258, 265, 272, 280, 290, 300, 307, 315, 325, 335, 345, 355, 365, 375, 387, 400, 412, 425, 437, 450, 462, 475, 487, 500, 515, 530, 545, 560, 580, 600, 615, 630, 650, 670, 690, 710, 730, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1e3}'});
model.sol('sol4').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol4').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol4').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol4').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol4').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol4').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol4').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol4').feature('s1').feature('p1').set('probes', {});
model.sol('sol4').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol4').feature('s1').set('linpmethod', 'sol');
model.sol('sol4').feature('s1').set('linpsol', 'zero');
model.sol('sol4').feature('s1').set('control', 'freq');
model.sol('sol4').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol4').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol4').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol4').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').attach('std4');
model.sol('sol4').runAll;

model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Unflanged pipe: Z_rad vs. f');
model.result('pg7').set('data', 'none');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', 'f [Hz]');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Z_rad [Pa*s/m]');
model.result('pg7').set('legendpos', 'lowerright');
model.result('pg7').create('ptgr1', 'PointGraph');
model.result('pg7').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr1').set('linewidth', 'preference');
model.result('pg7').feature('ptgr1').set('data', 'dset4');
model.result('pg7').feature('ptgr1').selection.set([2]);
model.result('pg7').feature('ptgr1').set('expr', 'real(acpr3.imp1.Zn)');
model.result('pg7').feature('ptgr1').set('linecolor', 'blue');
model.result('pg7').feature('ptgr1').set('legend', true);
model.result('pg7').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg7').feature('ptgr1').setIndex('legends', 'real(Z) impedance model', 0);
model.result('pg7').run;
model.result('pg7').create('ptgr2', 'PointGraph');
model.result('pg7').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr2').set('linewidth', 'preference');
model.result('pg7').feature('ptgr2').set('data', 'dset4');
model.result('pg7').feature('ptgr2').selection.set([2]);
model.result('pg7').feature('ptgr2').set('expr', 'imag(acpr3.imp1.Zn)');
model.result('pg7').feature('ptgr2').set('linecolor', 'red');
model.result('pg7').feature('ptgr2').set('legend', true);
model.result('pg7').feature('ptgr2').set('legendmethod', 'manual');
model.result('pg7').feature('ptgr2').setIndex('legends', 'imag(Z) impedance model', 0);
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').set('data', 'dset6');
model.result('pg7').feature('glob1').setIndex('expr', 'intop2(p4)/intop2(acpr4.vz)', 0);
model.result('pg7').feature('glob1').setIndex('unit', 'N*s/(m*m^2)', 0);
model.result('pg7').feature('glob1').setIndex('descr', 'real(Z) with PML', 0);
model.result('pg7').feature('glob1').set('linestyle', 'dashed');
model.result('pg7').feature('glob1').set('linecolor', 'blue');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').create('glob2', 'Global');
model.result('pg7').feature('glob2').set('markerpos', 'datapoints');
model.result('pg7').feature('glob2').set('linewidth', 'preference');
model.result('pg7').feature('glob2').set('data', 'dset6');
model.result('pg7').feature('glob2').setIndex('expr', 'imag(intop2(p4)/intop2(acpr4.vz))', 0);
model.result('pg7').feature('glob2').setIndex('unit', 'N*s/(m*m^2)', 0);
model.result('pg7').feature('glob2').setIndex('descr', 'imag(Z) with PML', 0);
model.result('pg7').feature('glob2').set('linestyle', 'dashed');
model.result('pg7').feature('glob2').set('linecolor', 'red');
model.result('pg7').run;
model.result('pg7').set('xlog', true);
model.result('pg7').set('ylog', true);
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('Unflanged pipe: Z_rad vs. k*a');
model.result('pg8').set('xlabel', 'k*a [-]');
model.result('pg8').set('xlog', false);
model.result('pg8').set('ylog', false);
model.result('pg8').run;
model.result('pg8').feature('ptgr1').set('xdata', 'expr');
model.result('pg8').feature('ptgr1').set('xdataexpr', 'acpr3.omega/c_air*a');
model.result('pg8').run;
model.result('pg8').feature('ptgr2').set('xdata', 'expr');
model.result('pg8').feature('ptgr2').set('xdataexpr', 'acpr3.omega/c_air*a');
model.result('pg8').run;
model.result('pg8').feature('glob1').set('xdata', 'expr');
model.result('pg8').feature('glob1').set('xdataexpr', 'acpr4.omega/c_air*a');
model.result('pg8').run;
model.result('pg8').feature('glob2').set('xdata', 'expr');
model.result('pg8').feature('glob2').set('xdataexpr', 'acpr4.omega/c_air*a');
model.result('pg8').run;
model.result('pg8').feature('glob2').setIndex('descr', 'imag(Z) with PML', 0);
model.result('pg8').run;
model.result('pg8').feature('glob1').setIndex('descr', 'real(Z) with PML', 0);
model.result('pg8').run;
model.result('pg8').set('legendpos', 'upperleft');
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Flanged pipe: centerline outlet pressure');
model.result('pg9').set('data', 'none');
model.result('pg9').set('titletype', 'label');
model.result('pg9').create('ptgr1', 'PointGraph');
model.result('pg9').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg9').feature('ptgr1').set('linewidth', 'preference');
model.result('pg9').feature('ptgr1').set('data', 'dset1');
model.result('pg9').feature('ptgr1').selection.set([2]);
model.result('pg9').feature('ptgr1').set('expr', 'real(acpr.p_t)');
model.result('pg9').feature('ptgr1').set('linecolor', 'blue');
model.result('pg9').feature('ptgr1').set('legend', true);
model.result('pg9').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg9').feature('ptgr1').setIndex('legends', 'real(p) with impedance', 0);
model.result('pg9').run;
model.result('pg9').run;
model.result('pg9').create('ptgr2', 'PointGraph');
model.result('pg9').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg9').feature('ptgr2').set('linewidth', 'preference');
model.result('pg9').feature('ptgr2').set('data', 'dset1');
model.result('pg9').feature('ptgr2').set('expr', 'imag(acpr.p_t)');
model.result('pg9').feature('ptgr2').set('linecolor', 'red');
model.result('pg9').feature('ptgr2').set('legend', true);
model.result('pg9').feature('ptgr2').set('legendmethod', 'manual');
model.result('pg9').feature('ptgr2').setIndex('legends', 'imag(p) with impedance', 0);
model.result('pg9').run;
model.result('pg9').feature('ptgr2').selection.set([2]);
model.result('pg9').run;
model.result('pg9').run;
model.result('pg9').create('ptgr3', 'PointGraph');
model.result('pg9').feature('ptgr3').set('markerpos', 'datapoints');
model.result('pg9').feature('ptgr3').set('linewidth', 'preference');
model.result('pg9').feature('ptgr3').set('data', 'dset2');
model.result('pg9').feature('ptgr3').selection.set([2]);
model.result('pg9').feature('ptgr3').set('expr', 'real(acpr2.p_t)');
model.result('pg9').feature('ptgr3').set('linecolor', 'blue');
model.result('pg9').feature('ptgr3').set('linestyle', 'none');
model.result('pg9').feature('ptgr3').set('linemarker', 'circle');
model.result('pg9').feature('ptgr3').set('markerpos', 'interp');
model.result('pg9').feature('ptgr3').set('markers', 100);
model.result('pg9').feature('ptgr3').set('legend', true);
model.result('pg9').feature('ptgr3').set('legendmethod', 'manual');
model.result('pg9').feature('ptgr3').setIndex('legends', 'real(p) with PML', 0);
model.result('pg9').run;
model.result('pg9').run;
model.result('pg9').create('ptgr4', 'PointGraph');
model.result('pg9').feature('ptgr4').set('markerpos', 'datapoints');
model.result('pg9').feature('ptgr4').set('linewidth', 'preference');
model.result('pg9').feature('ptgr4').set('data', 'dset2');
model.result('pg9').feature('ptgr4').selection.set([2]);
model.result('pg9').feature('ptgr4').set('expr', 'imag(acpr2.p_t)');
model.result('pg9').feature('ptgr4').set('linestyle', 'none');
model.result('pg9').feature('ptgr4').set('linecolor', 'red');
model.result('pg9').feature('ptgr4').set('linemarker', 'circle');
model.result('pg9').feature('ptgr4').set('markerpos', 'interp');
model.result('pg9').feature('ptgr4').set('markers', 100);
model.result('pg9').feature('ptgr4').set('legend', true);
model.result('pg9').feature('ptgr4').set('legendmethod', 'manual');
model.result('pg9').feature('ptgr4').setIndex('legends', 'imag(p) with PML', 0);
model.result('pg9').run;
model.result('pg9').set('xlog', true);
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('Unflanged pipe: centerline outlet pressure');
model.result('pg10').set('data', 'none');
model.result('pg10').set('titletype', 'label');
model.result('pg10').create('ptgr1', 'PointGraph');
model.result('pg10').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg10').feature('ptgr1').set('linewidth', 'preference');
model.result('pg10').feature('ptgr1').set('data', 'dset4');
model.result('pg10').feature('ptgr1').selection.set([2]);
model.result('pg10').feature('ptgr1').set('expr', 'real(acpr3.p_t)');
model.result('pg10').feature('ptgr1').set('linecolor', 'blue');
model.result('pg10').feature('ptgr1').set('legend', true);
model.result('pg10').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg10').feature('ptgr1').setIndex('legends', 'real(p) with impedance', 0);
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').create('ptgr2', 'PointGraph');
model.result('pg10').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg10').feature('ptgr2').set('linewidth', 'preference');
model.result('pg10').feature('ptgr2').set('data', 'dset4');
model.result('pg10').feature('ptgr2').selection.set([2]);
model.result('pg10').feature('ptgr2').set('expr', 'imag(acpr3.p_t)');
model.result('pg10').feature('ptgr2').set('linecolor', 'red');
model.result('pg10').feature('ptgr2').set('legend', true);
model.result('pg10').feature('ptgr2').set('legendmethod', 'manual');
model.result('pg10').feature('ptgr2').setIndex('legends', 'imag(p) with impedance', 0);
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').create('ptgr3', 'PointGraph');
model.result('pg10').feature('ptgr3').set('markerpos', 'datapoints');
model.result('pg10').feature('ptgr3').set('linewidth', 'preference');
model.result('pg10').feature('ptgr3').set('data', 'dset6');
model.result('pg10').feature('ptgr3').selection.set([2]);
model.result('pg10').feature('ptgr3').set('expr', 'real(acpr4.p_t)');
model.result('pg10').feature('ptgr3').set('linestyle', 'none');
model.result('pg10').feature('ptgr3').set('linecolor', 'blue');
model.result('pg10').feature('ptgr3').set('linemarker', 'circle');
model.result('pg10').feature('ptgr3').set('markerpos', 'interp');
model.result('pg10').feature('ptgr3').set('legend', true);
model.result('pg10').feature('ptgr3').set('legendmethod', 'manual');
model.result('pg10').feature('ptgr3').setIndex('legends', 'real(p) with PML', 0);
model.result('pg10').run;
model.result('pg10').feature('ptgr3').set('markers', 100);
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').create('ptgr4', 'PointGraph');
model.result('pg10').feature('ptgr4').set('markerpos', 'datapoints');
model.result('pg10').feature('ptgr4').set('linewidth', 'preference');
model.result('pg10').feature('ptgr4').set('data', 'dset6');
model.result('pg10').feature('ptgr4').selection.set([2]);
model.result('pg10').feature('ptgr4').set('expr', 'imag(acpr4.p_t)');
model.result('pg10').feature('ptgr4').set('linestyle', 'none');
model.result('pg10').feature('ptgr4').set('linecolor', 'red');
model.result('pg10').feature('ptgr4').set('legend', true);
model.result('pg10').feature('ptgr4').set('legendmethod', 'manual');
model.result('pg10').feature('ptgr4').setIndex('legends', 'imag(p) with PML', 0);
model.result('pg10').run;
model.result('pg10').feature('ptgr4').set('linemarker', 'circle');
model.result('pg10').feature('ptgr4').set('markerpos', 'interp');
model.result('pg10').feature('ptgr4').set('markers', 100);
model.result('pg10').run;
model.result('pg10').set('xlog', true);

model.study('std1').feature('freq').setEntry('activate', 'acpr', true);
model.study('std1').feature('freq').setEntry('activate', 'acpr2', false);
model.study('std1').feature('freq').setEntry('activate', 'acpr3', false);
model.study('std1').feature('freq').setEntry('activate', 'acpr4', false);
model.study('std2').feature('freq').setEntry('activate', 'acpr', false);
model.study('std2').feature('freq').setEntry('activate', 'acpr2', true);
model.study('std2').feature('freq').setEntry('activate', 'acpr3', false);
model.study('std2').feature('freq').setEntry('activate', 'acpr4', false);

model.result.dataset.remove('dset3');
model.result.dataset.remove('dset5');
model.result('pg4').run;

model.title('Open Pipe');

model.description('If you plan on setting up a large, complicated acoustics model, it can be useful to break it up in smaller, simpler problems. In this example, a vibrating piston is mounted inside one end of a cylindrical pipe, while the other end is open. The example compares the results from using a specified impedance boundary condition on the pipe outlet to the results using a perfectly matched layer condition for the air outside the piston. This comparison is done for both a pipe mounted in a baffle (flanged pipe), and an unflanged pipe.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('open_pipe.mph');

model.modelNode.label('Components');

out = model;
