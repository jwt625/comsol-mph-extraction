function out = model
%
% eigenmodes_in_muffler_elastic.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Automotive');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.multiphysics.create('asb1', 'AcousticStructureBoundary', 'geom1', 1);
model.multiphysics('asb1').set('Acoustics_physics', 'acpr');
model.multiphysics('asb1').set('Structure_physics', 'solid');
model.multiphysics('asb1').selection.all;

model.study.create('std1');
model.study('std1').create('mode', 'ModeAnalysis');
model.study('std1').feature('mode').set('eigunit', '');
model.study('std1').feature('mode').set('chkeigregion', true);
model.study('std1').feature('mode').set('conrad', '1');
model.study('std1').feature('mode').set('conradynhm', '1');
model.study('std1').feature('mode').set('storefact', false);
model.study('std1').feature('mode').set('solnum', 'auto');
model.study('std1').feature('mode').set('notsolnum', 'auto');
model.study('std1').feature('mode').set('outputmap', {});
model.study('std1').feature('mode').set('ngenAUX', '1');
model.study('std1').feature('mode').set('goalngenAUX', '1');
model.study('std1').feature('mode').set('ngenAUX', '1');
model.study('std1').feature('mode').set('goalngenAUX', '1');
model.study('std1').feature('mode').setSolveFor('/physics/acpr', true);
model.study('std1').feature('mode').setSolveFor('/physics/solid', true);
model.study('std1').feature('mode').setSolveFor('/multiphysics/asb1', true);

model.param.set('W', '1.5[mm]');
model.param.descr('W', 'Muffler wall thickness');
model.param.set('f0', '500[Hz]');
model.param.descr('f0', 'Cutoff frequency');
model.param.set('c0', '343[m/s]');
model.param.descr('c0', 'Speed of sound in the air');
model.param.set('lam0', 'c0/f0');
model.param.descr('lam0', 'Plane wave wavelength');
model.param.set('k0', '2*pi/lam0');
model.param.descr('k0', 'Free space plane-wave wave number');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'150' '150 + 2*W'});
model.geom('geom1').feature('r1').set('pos', {'-75' '-75 - W'});
model.geom('geom1').feature('r1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('r1').setIndex('layer', 'W', 0);
model.geom('geom1').feature('r1').set('layertop', true);
model.geom('geom1').run('r1');
model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', '75 + W');
model.geom('geom1').feature('c1').set('angle', 180);
model.geom('geom1').feature('c1').set('pos', [-75 0]);
model.geom('geom1').feature('c1').set('rot', 90);
model.geom('geom1').feature('c1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('c1').setIndex('layer', 'W', 0);
model.geom('geom1').run('c1');
model.geom('geom1').create('c2', 'Circle');
model.geom('geom1').feature('c2').set('r', '75 + W');
model.geom('geom1').feature('c2').set('angle', 180);
model.geom('geom1').feature('c2').set('pos', [75 0]);
model.geom('geom1').feature('c2').set('rot', -90);
model.geom('geom1').feature('c2').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('c2').setIndex('layer', 'W', 0);
model.geom('geom1').run('c2');
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('Steel AISI 4340');
model.material('mat2').set('family', 'steel');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.28');
model.material('mat2').selection.set([1 2 3 6 7 9]);

model.physics('acpr').selection.set([4 5 8]);
model.physics('solid').selection.set([1 2 3 6 7 9]);
model.physics('solid').prop('Type2D').set('ModeExtension', true);

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').selection.set([4 5 8]);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hauto', 2);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([2]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 3);
model.mesh('mesh1').run;

model.study('std1').feature('mode').set('modeFreq', 'f0');
model.study('std1').feature('mode').set('neigsactive', true);
model.study('std1').feature('mode').set('shiftactive', true);
model.study('std1').feature('mode').set('shift', '1.1*k0');
model.study('std1').feature('mode').set('eigwhich', 'sr');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'mode');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'mode');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('neigs', 6);
model.sol('sol1').feature('e1').set('shift', '0');
model.sol('sol1').feature('e1').set('rtol', 1.0E-6);
model.sol('sol1').feature('e1').set('transform', 'none');
model.sol('sol1').feature('e1').set('eigref', '0');
model.sol('sol1').feature('e1').set('eigvfunscale', 'average');
model.sol('sol1').feature('e1').set('control', 'mode');
model.sol('sol1').feature('e1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('e1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('e1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').feature('surf1').set('colortable', 'WaveLight');
model.result('pg1').create('con1', 'Contour');
model.result('pg1').feature('con1').set('expr', {'acpr.p_t'});
model.result('pg1').feature('con1').set('colortable', 'Wave');
model.result('pg1').feature('con1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').feature('con1').set('colorlegend', false);
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').label('Sound Pressure Level (acpr)');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').set('defaultPlotID', 'stress');
model.result('pg3').label('Stress (solid)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg3').feature('surf1').set('threshold', 'manual');
model.result('pg3').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg3').feature('surf1').set('colortable', 'Rainbow');
model.result('pg3').feature('surf1').set('colortabletrans', 'none');
model.result('pg3').feature('surf1').set('colorscalemode', 'linear');
model.result('pg3').feature('surf1').set('resolution', 'normal');
model.result('pg3').feature('surf1').set('colortable', 'Prism');
model.result('pg3').feature('surf1').create('def', 'Deform');
model.result('pg3').feature('surf1').feature('def').set('expr', {'u' 'v'});
model.result('pg3').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg1').run;
model.result('pg1').set('looplevel', [5]);
model.result('pg1').create('surf2', 'Surface');
model.result('pg1').feature('surf2').set('expr', 'solid.disp');
model.result('pg1').feature('surf2').set('colortable', 'AuroraBorealis');
model.result('pg1').feature('surf2').set('colorscalemode', 'linear');
model.result('pg1').feature('surf2').create('def1', 'Deform');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').set('looplevel', [6]);
model.result('pg1').run;

model.study.create('std2');
model.study('std2').create('mode', 'ModeAnalysis');
model.study('std2').feature('mode').set('plotgroup', 'Default');
model.study('std2').feature('mode').set('eigunit', '');
model.study('std2').feature('mode').set('chkeigregion', true);
model.study('std2').feature('mode').set('conrad', '1');
model.study('std2').feature('mode').set('conradynhm', '1');
model.study('std2').feature('mode').set('storefact', false);
model.study('std2').feature('mode').set('solnum', 'auto');
model.study('std2').feature('mode').set('notsolnum', 'auto');
model.study('std2').feature('mode').set('outputmap', {});
model.study('std2').feature('mode').set('ngenAUX', '1');
model.study('std2').feature('mode').set('goalngenAUX', '1');
model.study('std2').feature('mode').set('ngenAUX', '1');
model.study('std2').feature('mode').set('goalngenAUX', '1');
model.study('std2').feature('mode').setSolveFor('/physics/acpr', true);
model.study('std2').feature('mode').setSolveFor('/physics/solid', true);
model.study('std2').feature('mode').setSolveFor('/multiphysics/asb1', true);
model.study('std2').feature('mode').set('modeFreq', 'f0');
model.study('std2').feature('mode').set('neigsactive', true);
model.study('std2').feature('mode').set('shiftactive', true);
model.study('std2').feature('mode').set('shift', '1.1*k0');
model.study('std2').feature('mode').set('eigwhich', 'sr');
model.study('std2').create('param', 'Parametric');
model.study('std2').feature('param').setIndex('pname', 'W', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'm', 0);
model.study('std2').feature('param').setIndex('pname', 'W', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'm', 0);
model.study('std2').feature('param').setIndex('pname', 'f0', 0);
model.study('std2').feature('param').setIndex('plistarr', 'range(100,12,700)', 0);
model.study('std2').setGenPlots(false);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'mode');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'mode');
model.sol('sol2').create('e1', 'Eigenvalue');
model.sol('sol2').feature('e1').set('neigs', 6);
model.sol('sol2').feature('e1').set('shift', '0');
model.sol('sol2').feature('e1').set('rtol', 1.0E-6);
model.sol('sol2').feature('e1').set('transform', 'none');
model.sol('sol2').feature('e1').set('eigref', '0');
model.sol('sol2').feature('e1').set('eigvfunscale', 'average');
model.sol('sol2').feature('e1').set('control', 'mode');
model.sol('sol2').feature('e1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('e1').feature('aDef').set('matherr', true);
model.sol('sol2').feature('e1').feature('aDef').set('blocksizeactive', false);
model.sol('sol2').attach('std2');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std2');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol2');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'f0'});
model.batch('p1').set('plistarr', {'range(100,12,700)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std2');
model.batch('p1').set('control', 'param');

model.sol.create('sol3');
model.sol('sol3').study('std2');
model.sol('sol3').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol3');
model.batch('p1').run('compute');

model.study.create('std3');
model.study('std3').create('mode', 'ModeAnalysis');
model.study('std3').feature('mode').set('plotgroup', 'Default');
model.study('std3').feature('mode').set('eigunit', '');
model.study('std3').feature('mode').set('chkeigregion', true);
model.study('std3').feature('mode').set('conrad', '1');
model.study('std3').feature('mode').set('conradynhm', '1');
model.study('std3').feature('mode').set('storefact', false);
model.study('std3').feature('mode').set('solnum', 'auto');
model.study('std3').feature('mode').set('notsolnum', 'auto');
model.study('std3').feature('mode').set('outputmap', {});
model.study('std3').feature('mode').set('ngenAUX', '1');
model.study('std3').feature('mode').set('goalngenAUX', '1');
model.study('std3').feature('mode').set('ngenAUX', '1');
model.study('std3').feature('mode').set('goalngenAUX', '1');
model.study('std3').feature('mode').setSolveFor('/physics/acpr', true);
model.study('std3').feature('mode').setSolveFor('/physics/solid', true);
model.study('std3').feature('mode').setSolveFor('/multiphysics/asb1', true);
model.study('std3').feature('mode').set('modeFreq', 'f0');
model.study('std3').feature('mode').set('neigsactive', true);
model.study('std3').feature('mode').set('shiftactive', true);
model.study('std3').feature('mode').set('shift', '1.1*k0');
model.study('std3').feature('mode').set('eigwhich', 'sr');
model.study('std3').feature('mode').setEntry('activate', 'solid', false);
model.study('std3').create('param', 'Parametric');
model.study('std3').feature('param').setIndex('pname', 'W', 0);
model.study('std3').feature('param').setIndex('plistarr', '', 0);
model.study('std3').feature('param').setIndex('punit', 'm', 0);
model.study('std3').feature('param').setIndex('pname', 'W', 0);
model.study('std3').feature('param').setIndex('plistarr', '', 0);
model.study('std3').feature('param').setIndex('punit', 'm', 0);
model.study('std3').feature('param').setIndex('pname', 'f0', 0);
model.study('std3').feature('param').setIndex('plistarr', 'range(100,12,700)', 0);
model.study('std3').setGenPlots(false);

model.sol.create('sol55');
model.sol('sol55').study('std3');
model.sol('sol55').create('st1', 'StudyStep');
model.sol('sol55').feature('st1').set('study', 'std3');
model.sol('sol55').feature('st1').set('studystep', 'mode');
model.sol('sol55').create('v1', 'Variables');
model.sol('sol55').feature('v1').set('control', 'mode');
model.sol('sol55').create('e1', 'Eigenvalue');
model.sol('sol55').feature('e1').set('neigs', 6);
model.sol('sol55').feature('e1').set('shift', '0');
model.sol('sol55').feature('e1').set('rtol', 1.0E-6);
model.sol('sol55').feature('e1').set('transform', 'none');
model.sol('sol55').feature('e1').set('eigref', '0');
model.sol('sol55').feature('e1').set('eigvfunscale', 'average');
model.sol('sol55').feature('e1').set('control', 'mode');
model.sol('sol55').feature('e1').feature('aDef').set('complexfun', true);
model.sol('sol55').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol55').feature('e1').feature('aDef').set('matherr', true);
model.sol('sol55').feature('e1').feature('aDef').set('blocksizeactive', false);
model.sol('sol55').attach('std3');

model.batch.create('p2', 'Parametric');
model.batch('p2').study('std3');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol55');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').set('pname', {'f0'});
model.batch('p2').set('plistarr', {'range(100,12,700)'});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std3');
model.batch('p2').set('control', 'param');

model.sol.create('sol56');
model.sol('sol56').study('std3');
model.sol('sol56').label('Parametric Solutions 2');

model.batch('p2').feature('so1').set('psol', 'sol56');
model.batch('p2').run('compute');

model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Dispersion Relation');
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('title', 'Dispersion Relation Diagram');
model.result('pg4').set('data', 'dset3');
model.result('pg4').set('xlabelactive', true);
model.result('pg4').set('xlabel', 'f0 (Hz)');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'real(kz) (rad/m)');
model.result('pg4').set('showlegends', false);
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').setIndex('expr', 'if(abs(imag(acpr.kz))/abs(acpr.kz) < 1e-3, abs(real(acpr.kz)), NaN)', 0);
model.result('pg4').feature('glob1').setIndex('unit', 'rad/m', 0);
model.result('pg4').feature('glob1').setIndex('descr', '', 0);
model.result('pg4').feature('glob1').set('xdatasolnumtype', 'inner');
model.result('pg4').feature('glob1').set('xdata', 'expr');
model.result('pg4').feature('glob1').set('xdataexpr', 'f0');
model.result('pg4').feature('glob1').set('linestyle', 'none');
model.result('pg4').feature('glob1').set('linecolor', 'black');
model.result('pg4').feature('glob1').set('linemarker', 'circle');
model.result('pg4').feature.duplicate('glob2', 'glob1');
model.result('pg4').run;
model.result('pg4').feature('glob2').set('linecolor', 'red');
model.result('pg4').feature('glob2').set('linemarker', 'asterisk');
model.result('pg4').feature('glob2').set('data', 'dset5');
model.result('pg4').run;

model.study('std1').label('Study 1 - Single Frequency');
model.study('std2').label('Study 2 - Dispersion Relation Elastic Walls');
model.study('std3').label('Study 3 - Dispersion Relation Hard Walls');

model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').run;
model.result('pg1').run;
model.result('pg1').set('data', 'dset3');
model.result('pg1').set('looplevel', [5 26]);
model.result('pg1').run;

model.title('Eigenmodes in a Muffler with Elastic Walls');

model.description('This example consists of a 2D analysis of propagation modes in the chamber of a muffler with thin elastic walls. This is an extension of the Eigenmodes in a Muffler model.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;
model.sol('sol20').clearSolutionData;
model.sol('sol21').clearSolutionData;
model.sol('sol22').clearSolutionData;
model.sol('sol23').clearSolutionData;
model.sol('sol24').clearSolutionData;
model.sol('sol25').clearSolutionData;
model.sol('sol26').clearSolutionData;
model.sol('sol27').clearSolutionData;
model.sol('sol28').clearSolutionData;
model.sol('sol29').clearSolutionData;
model.sol('sol30').clearSolutionData;
model.sol('sol31').clearSolutionData;
model.sol('sol32').clearSolutionData;
model.sol('sol33').clearSolutionData;
model.sol('sol34').clearSolutionData;
model.sol('sol35').clearSolutionData;
model.sol('sol36').clearSolutionData;
model.sol('sol37').clearSolutionData;
model.sol('sol38').clearSolutionData;
model.sol('sol39').clearSolutionData;
model.sol('sol40').clearSolutionData;
model.sol('sol41').clearSolutionData;
model.sol('sol42').clearSolutionData;
model.sol('sol43').clearSolutionData;
model.sol('sol44').clearSolutionData;
model.sol('sol45').clearSolutionData;
model.sol('sol46').clearSolutionData;
model.sol('sol47').clearSolutionData;
model.sol('sol48').clearSolutionData;
model.sol('sol49').clearSolutionData;
model.sol('sol50').clearSolutionData;
model.sol('sol51').clearSolutionData;
model.sol('sol52').clearSolutionData;
model.sol('sol53').clearSolutionData;
model.sol('sol54').clearSolutionData;
model.sol('sol55').clearSolutionData;
model.sol('sol56').clearSolutionData;
model.sol('sol57').clearSolutionData;
model.sol('sol58').clearSolutionData;
model.sol('sol59').clearSolutionData;
model.sol('sol60').clearSolutionData;
model.sol('sol61').clearSolutionData;
model.sol('sol62').clearSolutionData;
model.sol('sol63').clearSolutionData;
model.sol('sol64').clearSolutionData;
model.sol('sol65').clearSolutionData;
model.sol('sol66').clearSolutionData;
model.sol('sol67').clearSolutionData;
model.sol('sol68').clearSolutionData;
model.sol('sol69').clearSolutionData;
model.sol('sol70').clearSolutionData;
model.sol('sol71').clearSolutionData;
model.sol('sol72').clearSolutionData;
model.sol('sol73').clearSolutionData;
model.sol('sol74').clearSolutionData;
model.sol('sol75').clearSolutionData;
model.sol('sol76').clearSolutionData;
model.sol('sol77').clearSolutionData;
model.sol('sol78').clearSolutionData;
model.sol('sol79').clearSolutionData;
model.sol('sol80').clearSolutionData;
model.sol('sol81').clearSolutionData;
model.sol('sol82').clearSolutionData;
model.sol('sol83').clearSolutionData;
model.sol('sol84').clearSolutionData;
model.sol('sol85').clearSolutionData;
model.sol('sol86').clearSolutionData;
model.sol('sol87').clearSolutionData;
model.sol('sol88').clearSolutionData;
model.sol('sol89').clearSolutionData;
model.sol('sol90').clearSolutionData;
model.sol('sol91').clearSolutionData;
model.sol('sol92').clearSolutionData;
model.sol('sol93').clearSolutionData;
model.sol('sol94').clearSolutionData;
model.sol('sol95').clearSolutionData;
model.sol('sol96').clearSolutionData;
model.sol('sol97').clearSolutionData;
model.sol('sol98').clearSolutionData;
model.sol('sol99').clearSolutionData;
model.sol('sol100').clearSolutionData;
model.sol('sol101').clearSolutionData;
model.sol('sol102').clearSolutionData;
model.sol('sol103').clearSolutionData;
model.sol('sol104').clearSolutionData;
model.sol('sol105').clearSolutionData;
model.sol('sol106').clearSolutionData;
model.sol('sol107').clearSolutionData;

model.label('eigenmodes_in_muffler_elastic.mph');

model.modelNode.label('Components');

out = model;
