function out = model
%
% tapered_waveguide.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Wave_Optics_Module/Waveguides');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ewbe', 'ElectromagneticWavesBeamEnvelopes', 'geom1');
model.physics('ewbe').model('comp1');

model.study.create('std1');
model.study('std1').create('wave', 'Wavelength');
model.study('std1').feature('wave').set('solnum', 'auto');
model.study('std1').feature('wave').set('notsolnum', 'auto');
model.study('std1').feature('wave').set('outputmap', {});
model.study('std1').feature('wave').set('ngenAUX', '1');
model.study('std1').feature('wave').set('goalngenAUX', '1');
model.study('std1').feature('wave').set('ngenAUX', '1');
model.study('std1').feature('wave').set('goalngenAUX', '1');
model.study('std1').feature('wave').setSolveFor('/physics/ewbe', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('lam0', '1.55[um]', 'Wavelength');
model.param.set('f0', 'c_const/lam0', 'Frequency');
model.param.set('n_taper', '200', 'Taper length in vacuum wavelengths');
model.param.set('d_taper', 'n_taper*lam0', 'Taper length');
model.param.set('w_core_1', 'lam0*2', 'Input core width');
model.param.set('w_clad_1', '100*lam0', 'Input cladding width');
model.param.set('w_core_2', 'lam0*0.2', 'Output core width');
model.param.set('w_clad_2', 'w_clad_1', 'Output cladding width');
model.param.set('n_clad', '1.5', 'Refractive index, cladding');
model.param.set('n_core', '1.55', 'Refractive index, core');

model.geom.load({'part1'}, 'Wave_Optics_Module/Slab_Waveguides/slab_waveguide_taper.mph', {'part1'});
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').feature('pi1').label('Tapered Waveguide');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'input_core_width', 'w_core_1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'input_cladding_width', 'w_clad_1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'output_core_width', 'w_core_2');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'output_cladding_width', 'w_clad_2');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'element_length', 'd_taper');
model.geom('geom1').feature('pi1').set('rot', -90);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Core');
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Non-PML');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_sel1', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_sel1', 'csel1');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_sel2', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_sel2', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_unisel1', true);
model.geom('geom1').feature('pi1').setEntry('selshowdom', 'pi1_unisel1', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_unisel1', 'csel2');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_adjsel1', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_adjsel1', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_sel3', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel3', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_sel4', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel4', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_unisel2', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_unisel2', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_sel5', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel5', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_sel6', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel6', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_unisel3', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_unisel3', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_difsel1', true);
model.geom('geom1').feature('pi1').setEntry('selshowbnd', 'pi1_difsel1', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_difsel1', 'none');
model.geom('geom1').runPre('fin');
model.geom.load({'part2'}, 'Wave_Optics_Module/Slab_Waveguides/slab_waveguide_straight.mph', {'part1'});
model.geom('geom1').create('pi2', 'PartInstance');
model.geom('geom1').feature('pi2').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi2').set('part', 'part2');
model.geom('geom1').feature('pi2').label('Input Waveguide');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'core_width', 'w_core_1');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'cladding_width', 'w_clad_1');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'element_length', 'lam0');
model.geom('geom1').feature('pi2').set('displ', {'-lam0' '0'});
model.geom('geom1').feature('pi2').set('rot', -90);
model.geom('geom1').feature('pi2').setEntry('selkeepdom', 'pi2_sel1', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetodom', 'pi2_sel1', 'csel1');
model.geom('geom1').feature('pi2').setEntry('selkeepdom', 'pi2_sel2', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetodom', 'pi2_sel2', 'none');
model.geom('geom1').feature('pi2').setEntry('selkeepdom', 'pi2_unisel1', true);
model.geom('geom1').feature('pi2').setEntry('selshowdom', 'pi2_unisel1', true);
model.geom('geom1').feature('pi2').setEntry('selcontributetodom', 'pi2_unisel1', 'csel2');
model.geom('geom1').selection.create('csel3', 'CumulativeSelection');
model.geom('geom1').selection('csel3').label('Straight Waveguide Transverse Perimeter');
model.geom('geom1').feature('pi2').setEntry('selkeepbnd', 'pi2_adjsel1', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetobnd', 'pi2_adjsel1', 'none');
model.geom('geom1').feature('pi2').setEntry('selkeepbnd', 'pi2_sel3', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetobnd', 'pi2_sel3', 'none');
model.geom('geom1').feature('pi2').setEntry('selkeepbnd', 'pi2_sel4', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetobnd', 'pi2_sel4', 'none');
model.geom('geom1').feature('pi2').setEntry('selkeepbnd', 'pi2_unisel2', true);
model.geom('geom1').feature('pi2').setEntry('selshowbnd', 'pi2_unisel2', true);
model.geom('geom1').feature('pi2').setEntry('selcontributetobnd', 'pi2_unisel2', 'none');
model.geom('geom1').feature('pi2').setEntry('selkeepbnd', 'pi2_sel5', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetobnd', 'pi2_sel5', 'none');
model.geom('geom1').feature('pi2').setEntry('selkeepbnd', 'pi2_sel6', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetobnd', 'pi2_sel6', 'none');
model.geom('geom1').feature('pi2').setEntry('selkeepbnd', 'pi2_unisel3', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetobnd', 'pi2_unisel3', 'none');
model.geom('geom1').feature('pi2').setEntry('selkeepbnd', 'pi2_difsel1', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetobnd', 'pi2_difsel1', 'csel3');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature.duplicate('pi3', 'pi2');
model.geom('geom1').feature('pi2').set('selcontributetoobj', {});
model.geom('geom1').feature('pi2').set('selkeepobj', {});
model.geom('geom1').feature('pi2').set('selcontributetopnt', {});
model.geom('geom1').feature('pi2').set('selkeeppnt', {});
model.geom('geom1').feature('pi2').set('selshowpnt', {});
model.geom('geom1').feature('pi2').set('selcontributetobnd', {'none' 'none' 'none' 'none' 'none' 'none' 'none' 'csel3'});
model.geom('geom1').feature('pi2').set('selkeepbnd', {'off' 'off' 'off' 'on' 'off' 'off' 'off' 'off'});
model.geom('geom1').feature('pi2').set('selshowbnd', {'on' 'on' 'on' 'on' 'on' 'on' 'on' 'on'});
model.geom('geom1').feature('pi2').set('selcontributetodom', {'csel1' 'none' 'csel2'});
model.geom('geom1').feature('pi2').set('selkeepdom', {'off' 'off' 'on'});
model.geom('geom1').feature('pi2').set('selshowdom', {'on' 'on' 'on'});
model.geom('geom1').feature('pi3').label('Input PML');
model.geom('geom1').feature('pi3').set('displ', {'-2*lam0' '0'});
model.geom('geom1').selection.create('csel4', 'CumulativeSelection');
model.geom('geom1').selection('csel4').label('PML');
model.geom('geom1').feature('pi3').setEntry('selkeepdom', 'pi3_sel1', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetodom', 'pi3_sel1', 'csel1');
model.geom('geom1').feature('pi3').setEntry('selkeepdom', 'pi3_sel2', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetodom', 'pi3_sel2', 'none');
model.geom('geom1').feature('pi3').setEntry('selkeepdom', 'pi3_unisel1', true);
model.geom('geom1').feature('pi3').setEntry('selshowdom', 'pi3_unisel1', true);
model.geom('geom1').feature('pi3').setEntry('selcontributetodom', 'pi3_unisel1', 'csel4');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_adjsel1', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_adjsel1', 'none');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_sel3', true);
model.geom('geom1').feature('pi3').setEntry('selshowbnd', 'pi3_sel3', true);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_sel3', 'none');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_sel4', true);
model.geom('geom1').feature('pi3').setEntry('selshowbnd', 'pi3_sel4', true);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_sel4', 'none');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_unisel2', true);
model.geom('geom1').feature('pi3').setEntry('selshowbnd', 'pi3_unisel2', true);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_unisel2', 'none');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_sel5', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_sel5', 'none');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_sel6', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_sel6', 'none');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_unisel3', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_unisel3', 'none');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_difsel1', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_difsel1', 'csel3');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature.duplicate('pi4', 'pi2');
model.geom('geom1').feature('pi2').set('selcontributetoobj', {});
model.geom('geom1').feature('pi2').set('selkeepobj', {});
model.geom('geom1').feature('pi2').set('selcontributetopnt', {});
model.geom('geom1').feature('pi2').set('selkeeppnt', {});
model.geom('geom1').feature('pi2').set('selshowpnt', {});
model.geom('geom1').feature('pi2').set('selcontributetobnd', {'none' 'none' 'none' 'none' 'none' 'none' 'none' 'csel3'});
model.geom('geom1').feature('pi2').set('selkeepbnd', {'off' 'off' 'off' 'on' 'off' 'off' 'off' 'off'});
model.geom('geom1').feature('pi2').set('selshowbnd', {'on' 'on' 'on' 'on' 'on' 'on' 'on' 'on'});
model.geom('geom1').feature('pi2').set('selcontributetodom', {'csel1' 'none' 'csel2'});
model.geom('geom1').feature('pi2').set('selkeepdom', {'off' 'off' 'on'});
model.geom('geom1').feature('pi2').set('selshowdom', {'on' 'on' 'on'});
model.geom('geom1').feature('pi4').label('Output Waveguide');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'core_width', 'w_core_2');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'cladding_width', 'w_clad_2');
model.geom('geom1').feature('pi4').set('displ', {'d_taper' '0'});
model.geom('geom1').feature('pi4').setEntry('selkeepbnd', 'pi4_adjsel1', false);
model.geom('geom1').feature('pi4').setEntry('selcontributetobnd', 'pi4_adjsel1', 'none');
model.geom('geom1').feature('pi4').setEntry('selkeepbnd', 'pi4_sel3', false);
model.geom('geom1').feature('pi4').setEntry('selcontributetobnd', 'pi4_sel3', 'none');
model.geom('geom1').feature('pi4').setEntry('selkeepbnd', 'pi4_sel4', false);
model.geom('geom1').feature('pi4').setEntry('selcontributetobnd', 'pi4_sel4', 'none');
model.geom('geom1').feature('pi4').setEntry('selkeepbnd', 'pi4_unisel2', false);
model.geom('geom1').feature('pi4').setEntry('selcontributetobnd', 'pi4_unisel2', 'none');
model.geom('geom1').feature('pi4').setEntry('selkeepbnd', 'pi4_sel5', false);
model.geom('geom1').feature('pi4').setEntry('selcontributetobnd', 'pi4_sel5', 'none');
model.geom('geom1').feature('pi4').setEntry('selkeepbnd', 'pi4_sel6', false);
model.geom('geom1').feature('pi4').setEntry('selcontributetobnd', 'pi4_sel6', 'none');
model.geom('geom1').feature('pi4').setEntry('selkeepbnd', 'pi4_unisel3', true);
model.geom('geom1').feature('pi4').setEntry('selshowbnd', 'pi4_unisel3', true);
model.geom('geom1').feature('pi4').setEntry('selcontributetobnd', 'pi4_unisel3', 'none');
model.geom('geom1').feature('pi4').setEntry('selkeepbnd', 'pi4_difsel1', false);
model.geom('geom1').feature('pi4').setEntry('selcontributetobnd', 'pi4_difsel1', 'csel3');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature.duplicate('pi5', 'pi3');
model.geom('geom1').feature('pi3').set('selcontributetoobj', {});
model.geom('geom1').feature('pi3').set('selkeepobj', {});
model.geom('geom1').feature('pi3').set('selcontributetopnt', {});
model.geom('geom1').feature('pi3').set('selkeeppnt', {});
model.geom('geom1').feature('pi3').set('selshowpnt', {});
model.geom('geom1').feature('pi3').set('selcontributetobnd', {'none' 'none' 'none' 'none' 'none' 'none' 'none' 'csel3'});
model.geom('geom1').feature('pi3').set('selkeepbnd', {'off' 'on' 'on' 'on' 'off' 'off' 'off' 'off'});
model.geom('geom1').feature('pi3').set('selshowbnd', {'on' 'on' 'on' 'on' 'on' 'on' 'on' 'on'});
model.geom('geom1').feature('pi3').set('selcontributetodom', {'csel1' 'none' 'csel4'});
model.geom('geom1').feature('pi3').set('selkeepdom', {'off' 'off' 'on'});
model.geom('geom1').feature('pi3').set('selshowdom', {'on' 'on' 'on'});
model.geom('geom1').feature('pi5').label('Output PML');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'core_width', 'w_core_2');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'cladding_width', 'w_clad_2');
model.geom('geom1').feature('pi5').set('displ', {'d_taper+lam0' '0'});
model.geom('geom1').feature('pi5').setEntry('selkeepbnd', 'pi5_adjsel1', false);
model.geom('geom1').feature('pi5').setEntry('selcontributetobnd', 'pi5_adjsel1', 'none');
model.geom('geom1').feature('pi5').setEntry('selkeepbnd', 'pi5_sel3', false);
model.geom('geom1').feature('pi5').setEntry('selcontributetobnd', 'pi5_sel3', 'none');
model.geom('geom1').feature('pi5').setEntry('selkeepbnd', 'pi5_sel4', false);
model.geom('geom1').feature('pi5').setEntry('selcontributetobnd', 'pi5_sel4', 'none');
model.geom('geom1').feature('pi5').setEntry('selkeepbnd', 'pi5_unisel2', false);
model.geom('geom1').feature('pi5').setEntry('selcontributetobnd', 'pi5_unisel2', 'none');
model.geom('geom1').feature('pi5').setEntry('selkeepbnd', 'pi5_sel5', false);
model.geom('geom1').feature('pi5').setEntry('selcontributetobnd', 'pi5_sel5', 'none');
model.geom('geom1').feature('pi5').setEntry('selkeepbnd', 'pi5_sel6', false);
model.geom('geom1').feature('pi5').setEntry('selcontributetobnd', 'pi5_sel6', 'none');
model.geom('geom1').feature('pi5').setEntry('selkeepbnd', 'pi5_unisel3', false);
model.geom('geom1').feature('pi5').setEntry('selcontributetobnd', 'pi5_unisel3', 'none');
model.geom('geom1').feature('pi5').setEntry('selkeepbnd', 'pi5_difsel1', false);
model.geom('geom1').feature('pi5').setEntry('selcontributetobnd', 'pi5_difsel1', 'csel3');
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Cladding');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'n_clad'});
model.material.duplicate('mat2', 'mat1');
model.material('mat2').label('Core');
model.material('mat2').selection.named('geom1_csel1_dom');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'n_core'});

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.named('geom1_csel4_dom');
model.coordSystem('pml1').set('wavelengthSourceType', 'userDefined');
model.coordSystem('pml1').set('typicalWavelength', '2*pi/kx');

model.physics('ewbe').prop('components').set('components', 'outofplane');
model.physics('ewbe').prop('WaveVector').set('dirCount', 'UniDirectionality');
model.physics('ewbe').prop('WaveVector').set('PhaseSpec', 'UserDefined');
model.physics('ewbe').prop('WaveVector').set('phase1', 'phi');
model.physics('ewbe').prop('UserDefinedWaveVectorSpecification').set('k1Phase', {'kx' '0' '0'});
model.physics('ewbe').create('port1', 'Port', 1);
model.physics('ewbe').feature('port1').selection.named('geom1_pi2_unisel2');
model.physics('ewbe').feature('port1').set('PortType', 'Numeric');
model.physics('ewbe').feature('port1').set('PortSlit', true);
model.physics('ewbe').feature('port1').set('SlitType', 'DomainBacked');
model.physics('ewbe').feature('port1').set('PortOrientation', 'ReversePort');
model.physics('ewbe').create('port2', 'Port', 1);
model.physics('ewbe').feature('port2').selection.named('geom1_pi4_unisel3');
model.physics('ewbe').feature('port2').set('PortType', 'Numeric');
model.physics('ewbe').feature('port2').set('PortSlit', true);
model.physics('ewbe').feature('port2').set('SlitType', 'DomainBacked');
model.physics('ewbe').feature('port2').set('PortOrientation', 'ReversePort');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Input PML');
model.variable('var1').selection.geom('geom1', 2);
model.variable('var1').selection.named('geom1_pi3_unisel1');
model.variable('var1').set('kx', 'ewbe.beta_1');
model.variable('var1').descr('kx', '');
model.variable('var1').set('phi', 'kx*pml1.x');
model.variable('var1').descr('phi', '');
model.variable.duplicate('var2', 'var1');
model.variable('var2').label('Input Waveguide');
model.variable('var2').selection.named('geom1_pi2_unisel1');
model.variable('var2').set('phi', 'kx*x');
model.variable('var2').descr('phi', '');
model.variable.duplicate('var3', 'var2');
model.variable('var3').label('Tapered Waveguide');
model.variable('var3').selection.named('geom1_pi1_unisel1');
model.variable('var3').set('kx', 'ewbe.beta_1+(ewbe.beta_2-ewbe.beta_1)*x/d_taper');
model.variable('var3').descr('kx', '');
model.variable('var3').set('phi', '(kx+ewbe.beta_1)*x/2');
model.variable('var3').descr('phi', '');
model.variable.duplicate('var4', 'var3');
model.variable('var4').label('Output Waveguide');
model.variable('var4').selection.named('geom1_pi4_unisel1');
model.variable('var4').set('kx', 'ewbe.beta_2');
model.variable('var4').descr('kx', '');
model.variable('var4').set('phi', 'kx*(x-d_taper)+(ewbe.beta_1+ewbe.beta_2)*d_taper/2');
model.variable('var4').descr('phi', '');
model.variable.duplicate('var5', 'var4');
model.variable('var5').label('Output PML');
model.variable('var5').selection.named('geom1_pi5_unisel1');
model.variable('var5').set('phi', 'kx*(pml1.x-d_taper-lam0)+(ewbe.beta_1+ewbe.beta_2)*d_taper/2+kx*lam0');
model.variable('var5').descr('phi', '');

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.named('geom1_pi3_unisel2');
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').selection.named('geom1_pi3_sel4');
model.mesh('mesh1').feature('edg1').feature('dis1').set('numelem', 50);
model.mesh('mesh1').feature('edg1').feature.duplicate('dis2', 'dis1');
model.mesh('mesh1').feature('edg1').feature('dis2').selection.named('geom1_pi3_sel3');
model.mesh('mesh1').feature('edg1').feature('dis2').set('numelem', 10);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').set('adjustedgdistr', true);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.named('geom1_csel3_bnd');
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 10);
model.mesh('mesh1').feature('map1').feature.duplicate('dis2', 'dis1');
model.mesh('mesh1').feature('map1').feature('dis2').selection.named('geom1_pi1_difsel1');
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 'max(10,round(n_taper/20))');
model.mesh('mesh1').run;

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'lam0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'lam0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'n_taper', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('plistarr', '10^{range(-1,0.25,4)}', 0);
model.study('std1').create('bma', 'BoundaryModeAnalysis');
model.study('std1').feature('bma').set('modeFreq', 'f0');
model.study('std1').feature('bma').set('shift', 'n_core');
model.study('std1').feature.duplicate('bma1', 'bma');
model.study('std1').feature('bma1').set('PortName', '2');
model.study('std1').feature.move('wave', 2);
model.study('std1').feature.move('wave', 3);
model.study('std1').feature('wave').set('plist', 'lam0');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'bma');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'bma');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('neigs', 1);
model.sol('sol1').feature('e1').set('shift', '1');
model.sol('sol1').feature('e1').set('eigref', 'n_core');
model.sol('sol1').feature('e1').set('control', 'bma');
model.sol('sol1').feature('e1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('e1').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('e1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('e1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('e1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'bma1');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'bma1');
model.sol('sol1').create('e2', 'Eigenvalue');
model.sol('sol1').feature('e2').set('neigs', 1);
model.sol('sol1').feature('e2').set('shift', '1');
model.sol('sol1').feature('e2').set('eigref', 'n_core');
model.sol('sol1').feature('e2').set('control', 'bma1');
model.sol('sol1').feature('e2').set('linpmethod', 'sol');
model.sol('sol1').feature('e2').set('linpsol', 'sol1');
model.sol('sol1').feature('e2').set('control', 'bma1');
model.sol('sol1').feature('e2').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('e2').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('e2').feature('aDef').set('matherr', true);
model.sol('sol1').feature('e2').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('e2').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'wave');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'wave');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'lambda0'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'lam0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {[native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'wave');
model.sol('sol1').feature('s1').set('control', 'wave');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v3').set('solnum', 'auto');
model.sol('sol1').feature('v3').set('solvertype', 'solnum');
model.sol('sol1').feature('e2').set('linpsolnum', 'auto');
model.sol('sol1').feature('e2').set('linpsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'n_taper'});
model.batch('p1').set('plistarr', {'10^{range(-1,0.25,4)}'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol4');
model.sol('sol4').study('std1');
model.sol('sol4').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol4');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Electric Field (ewbe)');
model.result('pg1').set('data', 'dset4');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 21, 1);
model.result('pg1').set('data', 'dset4');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 21, 1);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWavesBeamEnvelopes/phys1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Electric Field');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset4');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('unit', {'' '' '' ''});
model.result('pg2').feature('glob1').set('expr', {'ewbe.Rport_1' 'ewbe.Tport_2' 'ewbe.RTtotal' 'ewbe.Atotal'});
model.result('pg2').feature('glob1').set('descr', {'Reflectance, port 1' 'Transmittance, port 2' 'Total reflectance and transmittance' 'Absorptance'});
model.result('pg2').label('Reflectance, Transmittance, and Absorptance (ewbe)');
model.result('pg2').feature('glob1').set('titletype', 'none');
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Reflectance, transmittance, and absorptance (1)');
model.result('pg2').feature('glob1').set('xdataexpr', 'n_taper');
model.result('pg2').feature('glob1').set('xdataunit', '');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').label('Electric Mode Field, Port 1 (ewbe)');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('data', 'dset4');
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').selection.set([8 10 12]);
model.result('pg3').feature('lngr1').set('expr', 'root.comp1.ewbe.normEbm_1');
model.result('pg3').feature('lngr1').set('legend', true);
model.result('pg3').feature('lngr1').set('legendmethod', 'evaluated');
model.result('pg3').feature('lngr1').set('legendpattern', 'Effective mode index: eval(comp1.ewbe.neff_1)');
model.result('pg3').feature('lngr1').set('legendexprprecision', 5);
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').label('Electric Mode Field, Port 2 (ewbe)');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').set('data', 'dset4');
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').selection.set([29 31 33]);
model.result('pg4').feature('lngr1').set('expr', 'root.comp1.ewbe.normEbm_2');
model.result('pg4').feature('lngr1').set('legend', true);
model.result('pg4').feature('lngr1').set('legendmethod', 'evaluated');
model.result('pg4').feature('lngr1').set('legendpattern', 'Effective mode index: eval(comp1.ewbe.neff_2)');
model.result('pg4').feature('lngr1').set('legendexprprecision', 5);
model.result('pg1').run;
model.result('pg1').selection.geom('geom1', 2);
model.result('pg1').selection.named('geom1_csel2_dom');
model.result('pg1').set('applyselectiontodatasetedges', true);
model.result('pg1').run;
model.result('pg1').feature('surf1').create('hght1', 'Height');
model.result('pg1').run;

model.view('view4').camera.set('viewscaletype', 'automatic');
model.view('view4').camera.set('autocontext', 'anisotropic');
model.view('view4').camera.set('zweight', 0.2);
model.view('view4').camera.set('autoupdate', true);

model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').label('Transmittance (ewbe)');
model.result('pg2').set('ylabel', 'Transmittance');
model.result('pg2').set('xlog', true);
model.result('pg2').set('showlegends', false);
model.result('pg2').run;
model.result('pg2').feature('glob1').remove('unit', 0);
model.result('pg2').feature('glob1').remove('descr', 0);
model.result('pg2').feature('glob1').remove('expr', [0]);
model.result('pg2').feature('glob1').remove('unit', 1);
model.result('pg2').feature('glob1').remove('descr', 1);
model.result('pg2').feature('glob1').remove('expr', [1]);
model.result('pg2').feature('glob1').remove('unit', 1);
model.result('pg2').feature('glob1').remove('descr', 1);
model.result('pg2').feature('glob1').remove('expr', [1]);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').setIndex('looplevelinput', 'first', 1);
model.result('pg3').run;
model.result('pg3').feature('lngr1').set('xdata', 'expr');
model.result('pg3').feature('lngr1').set('xdataexpr', 'y');
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevelinput', 'first', 1);
model.result('pg4').run;
model.result('pg4').feature('lngr1').set('xdata', 'expr');
model.result('pg4').feature('lngr1').set('xdataexpr', 'y');
model.result('pg4').run;
model.result('pg1').run;

model.title('Tapered Waveguide');

model.description(['A tapered optical waveguide structure is used for matching two waveguides having different geometric cross sections and/or different material parameters. The tapered waveguide has one geometric cross section at the input plane and another cross section at the output plane. In between these planes, the core width changes linearly with the propagation distance.' newline  newline 'This model demonstrates how to define a user-defined phase and wave vector for the Electromagnetic Waves, Beam Envelopes interface, when used with Perfectly Matched Layers (PMLs). The PMLs are used for absorbing the radiation that is not matching the port mode fields.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;
model.sol('sol20').clearSolutionData;
model.sol('sol21').clearSolutionData;
model.sol('sol22').clearSolutionData;
model.sol('sol23').clearSolutionData;
model.sol('sol24').clearSolutionData;
model.sol('sol25').clearSolutionData;

model.label('tapered_waveguide.mph');

model.modelNode.label('Components');

out = model;
