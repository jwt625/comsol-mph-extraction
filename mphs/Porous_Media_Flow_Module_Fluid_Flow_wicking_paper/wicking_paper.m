function out = model
%
% wicking_paper.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Porous_Media_Flow_Module/Fluid_Flow');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('phtr', 'PhaseTransportPorousMedia', 'geom1', {'s1' 's2'});
model.physics.create('dl', 'PorousMediaFlowDarcy', 'geom1');
model.physics('dl').model('comp1');

model.multiphysics.create('mfpm1', 'MultiphaseFlowInPorousMedia', 'geom1', 2);
model.multiphysics('mfpm1').set('multiphaseflow_physics', 'phtr');
model.multiphysics('mfpm1').set('darcyc_physics', 'dl');
model.multiphysics('mfpm1').selection.all;

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/phtr', true);
model.study('std1').feature('time').setSolveFor('/physics/dl', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/mfpm1', true);

model.param.set('L0', '12[cm]');
model.param.descr('L0', 'Paper strip height');
model.param.set('W0', 'L0/8');
model.param.descr('W0', 'Paper strip width');
model.param.set('th', '1[mm]');
model.param.descr('th', 'Paper strip thickness');
model.param.set('gamma', '0.0723[N/m]');
model.param.descr('gamma', 'Surface tension');
model.param.set('theta', '0');
model.param.descr('theta', 'Contact angle');
model.param.set('Rc', '8.8e-7[m]');
model.param.descr('Rc', 'Pore radius');
model.param.set('pec', '2*gamma*cos(theta)/Rc');
model.param.descr('pec', 'Entry capillary pressure');
model.param.set('lp', '2');
model.param.descr('lp', 'Pore size distribution index');
model.param.set('por', '0.6');
model.param.descr('por', 'Porosity');
model.param.set('K', 'por/8*Rc^2');
model.param.descr('K', 'Permeability');
model.param.set('rho_air', '1[kg/m^3]');
model.param.descr('rho_air', 'Air density');
model.param.set('rho_water', '1e3[kg/m^3]');
model.param.descr('rho_water', 'Water density');
model.param.set('mu_air', '1.76e-5[Pa*s]');
model.param.descr('mu_air', 'Air viscosity');
model.param.set('mu_water', '0.001[Pa*s]');
model.param.descr('mu_water', 'Water viscosity');

model.func.create('step1', 'Step');
model.func('step1').model('comp1');
model.func('step1').set('location', 0.9);
model.func('step1').set('from', 1);
model.func('step1').set('to', 0);
model.func('step1').set('smooth', 0.2);

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'W0' 'L0'});
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.material.create('pmat1', 'PorousMedia', 'comp1');
model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Water');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Air');

model.physics('dl').prop('PhysicalModelProperty').set('dz', 'th');
model.physics('dl').prop('ShapeProperty').set('order_pressure', 1);
model.physics('dl').create('pr1', 'Pressure', 1);
model.physics('dl').feature('pr1').selection.set([2]);
model.physics('dl').create('pr2', 'Pressure', 1);
model.physics('dl').feature('pr2').selection.set([3]);
model.physics('dl').feature('pr2').set('p0', '-(phtr.pc_s2)*step1(s1)-rho_air*L0*g_const');
model.physics('dl').feature('pr2').set('constraintType', 'unidirectionalConstraint');
model.physics('dl').feature('pr2').set('constraintOptions', 'weakConstraints');
model.physics('phtr').prop('GravityEffects').set('IncludeGravity', true);
model.physics('phtr').feature('pptp1').set('capillarypressuremodel', 'BrooksCorey');
model.physics('phtr').feature('pptp1').set('pec', 'pec');
model.physics('phtr').feature('pptp1').set('lambdap', 'lp');
model.physics('phtr').feature('pptp1').set('phaselist_s1', 'mat1');
model.physics('phtr').feature('pptp1').set('phaselist_s2', 'mat2');
model.physics('phtr').feature('init1').setIndex('s0', 0.99, 1);
model.physics('phtr').create('mf1', 'MassFlux', 1);
model.physics('phtr').feature('mf1').setIndex('phases', true, 1);
model.physics('phtr').feature('mf1').selection.set([3]);
model.physics('phtr').feature('mf1').setIndex('q0', 'p_lm[kg/m/s]/th', 1);

model.material('pmat1').set('porosity', 'por');
model.material('pmat1').propertyGroup('def').set('hydraulicpermeability', {'K'});
model.material('mat1').propertyGroup('def').set('density', {'rho_water'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', {'mu_water'});
model.material('mat2').propertyGroup('def').set('density', {'rho_air'});
model.material('mat2').propertyGroup('def').set('dynamicviscosity', {'mu_air'});

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([2]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 1);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([1 4]);
model.mesh('mesh1').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis2').set('elemcount', 200);
model.mesh('mesh1').feature('map1').feature('dis2').set('elemratio', 1000);
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tlist', 'range(0,10,600)');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_s2').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_s2').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,10,600)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.005);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.8);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 10);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, multiphase flow in porous media (mfpm1) (Merged)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 50);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, multiphase flow in porous media (mfpm1)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('va1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('va1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_p_lm'});
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankasolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('va1').set('approxvanka', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankadirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('va1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('va1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('va1', 'Vanka');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('va1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('va1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('va1').set('vankavars', {'comp1_p_lm'});
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('va1').set('vankasolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('va1').set('approxvanka', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('va1').set('vankadirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('va1').set('seconditer', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('va1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.8);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 10);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('initialstepbdfactive', true);
model.sol('sol1').feature('t1').set('initialstepbdf', '0.0001');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Volume Fraction (phtr)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 61, 0);
model.result('pg1').set('defaultPlotID', 'ResultDefaults_Phtr/icom2/pdef1/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Pressure (dl)');
model.result('pg2').set('titletype', 'custom');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 61, 0);
model.result('pg2').set('defaultPlotID', 'PhysicsInterfaces_PorousMediaFlow/icom6/pdef1/pcond2/pg1');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('expr', 'p');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature.create('str1', 'Streamline');
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('posmethod', 'uniform');
model.result('pg2').feature('str1').set('pointtype', 'arrow');
model.result('pg2').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg2').feature('str1').set('color', 'gray');
model.result('pg2').feature('str1').set('smooth', 'internal');
model.result('pg2').feature('str1').set('maxlen', Inf);
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxlen', Inf);
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxlen', Inf);
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxlen', Inf);
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxlen', Inf);
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('data', 'parent');
model.result('pg2').feature('str1').selection.geom('geom1', 1);
model.result('pg2').feature('str1').selection.set([1 2 3 4]);
model.result('pg1').run;
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').run;
model.result('pg3').label('Water Saturation (grouped)');
model.result('pg3').setIndex('looplevel', 2, 0);
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Water Saturation');
model.result('pg3').set('paramindicator', '');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('data', 'dset1');
model.result('pg3').feature('surf1').setIndex('looplevel', 2, 0);
model.result('pg3').feature('surf1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg3').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg3').feature('surf1').set('rangecoloractive', true);
model.result('pg3').feature('surf1').set('rangecolormax', 1);
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').set('plotarrayenable', true);
model.result('pg3').set('relpadding', 0.5);
model.result('pg3').feature('surf1').set('arraydim', '1');
model.result('pg3').run;
model.result('pg3').feature.duplicate('surf2', 'surf1');
model.result('pg3').feature('surf2').set('arraydim', '1');
model.result('pg3').run;
model.result('pg3').feature('surf2').setIndex('looplevel', 5, 0);
model.result('pg3').feature('surf2').set('inheritplot', 'surf1');
model.result('pg3').feature.duplicate('surf3', 'surf2');
model.result('pg3').feature('surf3').set('arraydim', '1');
model.result('pg3').run;
model.result('pg3').feature('surf3').setIndex('looplevel', 11, 0);
model.result('pg3').feature.duplicate('surf4', 'surf3');
model.result('pg3').feature('surf4').set('arraydim', '1');
model.result('pg3').run;
model.result('pg3').feature('surf4').setIndex('looplevel', 21, 0);
model.result('pg3').feature.duplicate('surf5', 'surf4');
model.result('pg3').feature('surf5').set('arraydim', '1');
model.result('pg3').run;
model.result('pg3').feature('surf5').setIndex('looplevel', 31, 0);
model.result('pg3').feature.duplicate('surf6', 'surf5');
model.result('pg3').feature('surf6').set('arraydim', '1');
model.result('pg3').run;
model.result('pg3').feature('surf6').setIndex('looplevel', 41, 0);
model.result('pg3').run;
model.result('pg3').create('tlan1', 'TableAnnotation');
model.result('pg3').feature('tlan1').set('arraydim', '1');
model.result('pg3').feature('tlan1').set('source', 'localtable');
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 'W0/2', 0, 0);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 0, 0, 1);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 't=10s', 0, 2);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '2*W0', 1, 0);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 0, 1, 1);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 't=40s', 1, 2);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '3*W0+W0/2', 2, 0);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 0, 2, 1);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 't=100s', 2, 2);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '5*W0', 3, 0);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 0, 3, 1);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 't=200s', 3, 2);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '6.5*W0', 4, 0);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 0, 4, 1);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 't=300s', 4, 2);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '8*W0', 5, 0);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 0, 5, 1);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 't=400s', 5, 2);
model.result('pg3').feature('tlan1').set('showpoint', false);
model.result('pg3').feature('tlan1').set('anchorpoint', 'uppermiddle');
model.result('pg3').run;
model.result.dataset.create('extr1', 'Extrude2D');
model.result.dataset('extr1').set('zmax', 'th');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 21, 0);
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('title', 'Water Saturation');
model.result('pg4').set('paramindicator', 'Time=eval(t) s');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg4').run;
model.result('pg4').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg4').run;
model.result('pg4').label('Water Saturation 3D');
model.result('pg4').set('view', 'new');
model.result('pg4').run;

model.view('view3').camera.setIndex('position', 0.5, 0);
model.view('view3').camera.setIndex('position', 0.16, 1);
model.view('view3').camera.set('position', [0.5 0.16 0.4]);
model.view('view3').camera.setIndex('target', 0.0075, 0);
model.view('view3').camera.setIndex('target', 0.06, 1);
model.view('view3').camera.set('target', [0.0075 0.06 5.0E-4]);
model.view('view3').camera.setIndex('up', -0.25, 0);
model.view('view3').camera.setIndex('up', 0.94, 1);
model.view('view3').camera.set('up', [-0.25 0.94 -0.2]);

model.result('pg4').run;
model.result('pg4').run;

model.variable.create('var1');
model.variable('var1').set('H_lf', 'sqrt(gamma*Rc*cos(theta)*t/(2*mu_water))');
model.variable('var1').descr('H_lf', 'Height of liquid front');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.set([1]);

model.sol('sol1').updateSolution;

model.result('pg1').run;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').setIndex('expr', 'intop1(s1)*th*rho_water*por', 0);
model.result.numerical('gev1').setIndex('unit', 'g', 0);
model.result.numerical('gev1').setIndex('descr', 'Absorbed water, from simulation', 0);
model.result.numerical('gev1').setIndex('expr', 'min(L0,H_lf)*W0*th*rho_water*por', 1);
model.result.numerical('gev1').setIndex('unit', 'g', 1);
model.result.numerical('gev1').setIndex('descr', 'Absorbed water, from Lucas-Washburn equation', 1);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Global Evaluation 1');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'none');
model.result('pg5').create('tblp1', 'Table');
model.result('pg5').feature('tblp1').set('source', 'table');
model.result('pg5').feature('tblp1').set('table', 'tbl1');
model.result('pg5').feature('tblp1').set('linewidth', 'preference');
model.result('pg5').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').label('Water Uptake');
model.result('pg5').run;
model.result('pg5').feature('tblp1').set('linestyle', 'cycle');
model.result('pg5').feature('tblp1').set('linecolor', 'black');
model.result('pg5').feature('tblp1').set('linewidth', 2);
model.result('pg5').feature('tblp1').set('legend', true);
model.result('pg5').feature('tblp1').set('legendmethod', 'manual');
model.result('pg5').feature('tblp1').setIndex('legends', 'From Simulation', 0);
model.result('pg5').feature('tblp1').setIndex('legends', 'From Lucas-Washburn equation', 1);
model.result('pg5').run;
model.result('pg5').set('legendpos', 'upperleft');
model.result('pg5').run;
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Absorbed Water (g)');

model.title('Wicking in a Paper Strip');

model.description('This example models wicking in a porous medium. Wicking is the phenomenon that occurs when a dry porous medium is put into contact with a fluid: It will absorb the fluid due to capillary forces until an equilibrium between gravitational and capillary forces is reached.');

model.label('wicking_paper.mph');

model.modelNode.label('Components');

out = model;
