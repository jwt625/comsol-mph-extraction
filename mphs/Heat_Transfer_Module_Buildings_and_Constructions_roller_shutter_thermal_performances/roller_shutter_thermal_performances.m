function out = model
%
% roller_shutter_thermal_performances.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Buildings_and_Constructions');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransferInSolidsAndFluids', 'geom1');
model.physics('ht').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);

model.modelNode('comp1').label('Roller Shutter Box');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('C1', '0.025[W/(m*K)]', 'First constant for convective heat transfer coefficient calculation');
model.param.set('C2', '0.73[W/(m^2*K)]', 'Second constant for convective heat transfer coefficient calculation');
model.param.set('epsilon', '0.90', 'Surface emissivity');
model.param.set('Ti', '20[degC]', 'Internal temperature');
model.param.set('Te', '0[degC]', 'External temperature');
model.param.set('Rsi', '0.13[m^2*K/W]', 'Internal surface resistance');
model.param.set('Rse', '0.04[m^2*K/W]', 'External surface resistance');
model.param.set('lambda_p', '0.035[W/(m*K)]', 'Thermal conductivity of the insulation panel');
model.param.set('lambda_pvc', '0.17[W/(m*K)]', '   Thermal conductivity of PVC');

model.func.create('an1', 'Analytic');
model.func('an1').set('funcname', 'ha_1');
model.func('an1').set('expr', 'C1[(m*K)/W]/d');
model.func('an1').set('args', 'd');
model.func('an1').setIndex('argunit', 'm', 0);
model.func('an1').set('fununit', 'W/(m^2*K)');
model.func.create('an2', 'Analytic');
model.func('an2').set('funcname', 'ha_2');
model.func('an2').set('expr', 'max(C1[(m*K)/W]/d,C2[(m^2*K)/W]*delta^(1/3))');
model.func('an2').set('args', 'd, delta');
model.func('an2').setIndex('argunit', 'm', 0);
model.func('an2').setIndex('argunit', 'K', 1);
model.func('an2').set('fununit', 'W/(m^2*K)');
model.func.create('an3', 'Analytic');
model.func('an3').set('funcname', 'hr');
model.func('an3').set('expr', '4*sigma_const[(K^4*m^2)/W]*Tm^3/(1/e1+1/e2-1)*(1+sqrt(1+(d/b)^2)-d/b)/2');
model.func('an3').set('args', 'd, b, Tm, e1, e2');
model.func('an3').setIndex('argunit', 'm', 0);
model.func('an3').setIndex('argunit', 'm', 1);
model.func('an3').setIndex('argunit', 'K', 2);
model.func('an3').setIndex('argunit', 1, 3);
model.func('an3').setIndex('argunit', 1, 4);
model.func('an3').set('fununit', 'W/(m^2*K)');
model.func.create('an4', 'Analytic');
model.func('an4').set('funcname', 'h_resized');
model.func('an4').set('expr', 'sqrt(A*d/b)');
model.func('an4').set('args', 'A, d, b');
model.func('an4').setIndex('argunit', 'm^2', 0);
model.func('an4').setIndex('argunit', 'm', 1);
model.func('an4').setIndex('argunit', 'm', 2);
model.func('an4').set('fununit', 'm');
model.func.create('an5', 'Analytic');
model.func('an5').set('funcname', 'w_resized');
model.func('an5').set('expr', 'sqrt(A*b/d)');
model.func('an5').set('args', 'A, b, d');
model.func('an5').setIndex('argunit', 'm^2', 0);
model.func('an5').setIndex('argunit', 'm', 1);
model.func('an5').setIndex('argunit', 'm', 2);
model.func('an5').set('fununit', 'm');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'roller_shutter_thermal_performances_box.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').run('fin');
model.geom('geom1').create('ige1', 'IgnoreEdges');
model.geom('geom1').feature('ige1').selection('input').set('fin', [46 50 126 129 131 133 135 169]);
model.geom('geom1').run('ige1');
model.geom('geom1').create('igv1', 'IgnoreVertices');
model.geom('geom1').feature('igv1').selection('input').set('ige1', 120);
model.geom('geom1').run('igv1');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Unventilated Cavity 1');
model.selection('sel1').geom(1);
model.selection('sel1').set([4 5 6 34]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Unventilated Cavity 2');
model.selection('sel2').geom(1);
model.selection('sel2').set([7 8 9 35]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Unventilated Cavity 3');
model.selection('sel3').geom(1);
model.selection('sel3').set([10 11 12 36]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Unventilated Cavity 4');
model.selection('sel4').geom(1);
model.selection('sel4').set([13 14 15 37]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Unventilated Cavity 5');
model.selection('sel5').geom(1);
model.selection('sel5').set([16 17 18 38]);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Unventilated Cavity 6');
model.selection('sel6').geom(1);
model.selection('sel6').set([19 20 21 39]);
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').label('Unventilated Cavity 7');
model.selection('sel7').geom(1);
model.selection('sel7').set([22 23 24 40]);
model.selection.create('sel8', 'Explicit');
model.selection('sel8').model('comp1');
model.selection('sel8').label('Unventilated Cavity 8');
model.selection('sel8').geom(1);
model.selection('sel8').set([25 26 27 41]);
model.selection.create('sel9', 'Explicit');
model.selection('sel9').model('comp1');
model.selection('sel9').label('Unventilated Cavity 9');
model.selection('sel9').geom(1);
model.selection('sel9').set([28 29 30 42]);
model.selection.create('sel10', 'Explicit');
model.selection('sel10').model('comp1');
model.selection('sel10').label('Unventilated Cavity 10');
model.selection('sel10').geom(1);
model.selection('sel10').set([31 32 33 43]);
model.selection.create('sel11', 'Explicit');
model.selection('sel11').model('comp1');
model.selection('sel11').label('Unventilated Cavity 11');
model.selection('sel11').geom(1);
model.selection('sel11').set([47 48 49 53]);
model.selection.create('sel12', 'Explicit');
model.selection('sel12').model('comp1');
model.selection('sel12').label('Unventilated Cavity 12');
model.selection('sel12').geom(1);
model.selection('sel12').set([57 58 59 62]);
model.selection.create('sel13', 'Explicit');
model.selection('sel13').model('comp1');
model.selection('sel13').label('Unventilated Cavity 13');
model.selection('sel13').geom(1);
model.selection('sel13').set([66 67 68 70]);
model.selection.create('sel14', 'Explicit');
model.selection('sel14').model('comp1');
model.selection('sel14').label('Unventilated Cavity 14');
model.selection('sel14').geom(1);
model.selection('sel14').set([74 75 76 81]);
model.selection.create('sel15', 'Explicit');
model.selection('sel15').model('comp1');
model.selection('sel15').label('Unventilated Cavity 15');
model.selection('sel15').geom(1);
model.selection('sel15').set([85 86 87 90]);
model.selection.create('sel16', 'Explicit');
model.selection('sel16').model('comp1');
model.selection('sel16').label('Unventilated Cavity 16');
model.selection('sel16').geom(1);
model.selection('sel16').set([94 95 96 98]);
model.selection.create('sel17', 'Explicit');
model.selection('sel17').model('comp1');
model.selection('sel17').label('Unventilated Cavity 17');
model.selection('sel17').geom(1);
model.selection('sel17').set([102 103 104 106]);
model.selection.create('sel18', 'Explicit');
model.selection('sel18').model('comp1');
model.selection('sel18').label('Unventilated Cavity 18');
model.selection('sel18').geom(1);
model.selection('sel18').set([112 113 114 116]);
model.selection.create('sel19', 'Explicit');
model.selection('sel19').model('comp1');
model.selection('sel19').label('Unventilated Cavity 19');
model.selection('sel19').geom(1);
model.selection('sel19').set([120 121 122 125]);
model.selection.create('sel20', 'Explicit');
model.selection('sel20').model('comp1');
model.selection('sel20').label('Unventilated Cavity 20');
model.selection('sel20').geom(1);
model.selection('sel20').set([153 154 155 165]);
model.selection.create('sel21', 'Explicit');
model.selection('sel21').model('comp1');
model.selection('sel21').label('Unventilated Cavity 21');
model.selection('sel21').geom(1);
model.selection('sel21').set([150 151 152 164]);
model.selection.create('sel22', 'Explicit');
model.selection('sel22').model('comp1');
model.selection('sel22').label('Unventilated Cavity 22');
model.selection('sel22').geom(1);
model.selection('sel22').set([147 148 149 163]);
model.selection.create('sel23', 'Explicit');
model.selection('sel23').model('comp1');
model.selection('sel23').label('Unventilated Cavity 23');
model.selection('sel23').geom(1);
model.selection('sel23').set([144 145 146 162]);
model.selection.create('sel24', 'Explicit');
model.selection('sel24').model('comp1');
model.selection('sel24').label('Unventilated Cavity 24');
model.selection('sel24').geom(1);
model.selection('sel24').set([141 142 143 161]);
model.selection.create('sel25', 'Explicit');
model.selection('sel25').model('comp1');
model.selection('sel25').label('Unventilated Cavity 25');
model.selection('sel25').geom(1);
model.selection('sel25').set([138 139 140 160]);
model.selection.create('sel26', 'Explicit');
model.selection('sel26').model('comp1');
model.selection('sel26').label('Unventilated Cavity 26');
model.selection('sel26').geom(1);
model.selection('sel26').set([135 136 137 159]);
model.selection.create('sel27', 'Explicit');
model.selection('sel27').model('comp1');
model.selection('sel27').label('Unventilated Cavity 27');
model.selection('sel27').geom(1);
model.selection('sel27').set([132 133 134 158]);
model.selection.create('sel28', 'Explicit');
model.selection('sel28').model('comp1');
model.selection('sel28').label('Unventilated Cavity 28');
model.selection('sel28').geom(1);
model.selection('sel28').set([129 130 131 157]);
model.selection.create('sel29', 'Explicit');
model.selection('sel29').model('comp1');
model.selection('sel29').label('Unventilated Cavity 29');
model.selection('sel29').geom(1);
model.selection('sel29').set([126 127 128 156]);
model.selection.create('sel30', 'Explicit');
model.selection('sel30').model('comp1');
model.selection('sel30').label('Unventilated Cavity 30');
model.selection('sel30').geom(1);
model.selection('sel30').set([117 118 119 123]);
model.selection.create('sel31', 'Explicit');
model.selection('sel31').model('comp1');
model.selection('sel31').label('Unventilated Cavity 31');
model.selection('sel31').geom(1);
model.selection('sel31').set([107 108 109 115]);
model.selection.create('sel32', 'Explicit');
model.selection('sel32').model('comp1');
model.selection('sel32').label('Unventilated Cavity 32');
model.selection('sel32').geom(1);
model.selection('sel32').set([99 100 101 105]);
model.selection.create('sel33', 'Explicit');
model.selection('sel33').model('comp1');
model.selection('sel33').label('Unventilated Cavity 33');
model.selection('sel33').geom(1);
model.selection('sel33').set([91 92 93 97]);
model.selection.create('sel34', 'Explicit');
model.selection('sel34').model('comp1');
model.selection('sel34').label('Unventilated Cavity 34');
model.selection('sel34').geom(1);
model.selection('sel34').set([82 83 84 89]);
model.selection.create('sel35', 'Explicit');
model.selection('sel35').model('comp1');
model.selection('sel35').label('Unventilated Cavity 35');
model.selection('sel35').geom(1);
model.selection('sel35').set([71 72 73 77]);
model.selection.create('sel36', 'Explicit');
model.selection('sel36').model('comp1');
model.selection('sel36').label('Unventilated Cavity 36');
model.selection('sel36').geom(1);
model.selection('sel36').set([63 64 65 69]);
model.selection.create('sel37', 'Explicit');
model.selection('sel37').model('comp1');
model.selection('sel37').label('Unventilated Cavity 37');
model.selection('sel37').geom(1);
model.selection('sel37').set([54 55 56 61]);
model.selection.create('sel38', 'Explicit');
model.selection('sel38').model('comp1');
model.selection('sel38').label('Slightly Ventilated Cavity');
model.selection('sel38').geom(1);
model.selection('sel38').set([44 46 50 52 78 80 110]);
model.selection.create('sel39', 'Explicit');
model.selection('sel39').model('comp1');
model.selection('sel39').label('Exterior Side');
model.selection('sel39').geom(1);
model.selection('sel39').set([1 2 51]);
model.selection.create('sel40', 'Explicit');
model.selection('sel40').model('comp1');
model.selection('sel40').label('Interior Side');
model.selection('sel40').geom(1);
model.selection('sel40').set([88 166]);
model.selection.create('sel41', 'Explicit');
model.selection('sel41').model('comp1');
model.selection('sel41').label('Thermally Insulated');
model.selection('sel41').geom(1);
model.selection('sel41').set([3 60]);

model.cpl.create('maxop1', 'Maximum', 'geom1');
model.cpl('maxop1').set('opname', 'max_uc1');
model.cpl('maxop1').selection.set([2]);
model.cpl.create('minop1', 'Minimum', 'geom1');
model.cpl('minop1').set('opname', 'min_uc1');
model.cpl('minop1').selection.set([2]);
model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').set('opname', 'ave_uc1');
model.cpl('aveop1').selection.geom('geom1', 1);
model.cpl('aveop1').selection.named('sel1');
model.cpl.create('maxop2', 'Maximum', 'geom1');
model.cpl('maxop2').set('opname', 'max_uc2');
model.cpl('maxop2').selection.set([3]);
model.cpl.create('minop2', 'Minimum', 'geom1');
model.cpl('minop2').set('opname', 'min_uc2');
model.cpl('minop2').selection.set([3]);
model.cpl.create('aveop2', 'Average', 'geom1');
model.cpl('aveop2').set('axisym', true);
model.cpl('aveop2').set('opname', 'ave_uc2');
model.cpl('aveop2').selection.geom('geom1', 1);
model.cpl('aveop2').selection.named('sel2');
model.cpl.create('maxop3', 'Maximum', 'geom1');
model.cpl('maxop3').set('opname', 'max_uc3');
model.cpl('maxop3').selection.set([4]);
model.cpl.create('minop3', 'Minimum', 'geom1');
model.cpl('minop3').set('opname', 'min_uc3');
model.cpl('minop3').selection.set([4]);
model.cpl.create('aveop3', 'Average', 'geom1');
model.cpl('aveop3').set('axisym', true);
model.cpl('aveop3').set('opname', 'ave_uc3');
model.cpl('aveop3').selection.geom('geom1', 1);
model.cpl('aveop3').selection.named('sel3');
model.cpl.create('maxop4', 'Maximum', 'geom1');
model.cpl('maxop4').set('opname', 'max_uc4');
model.cpl('maxop4').selection.set([5]);
model.cpl.create('minop4', 'Minimum', 'geom1');
model.cpl('minop4').set('opname', 'min_uc4');
model.cpl('minop4').selection.set([5]);
model.cpl.create('aveop4', 'Average', 'geom1');
model.cpl('aveop4').set('axisym', true);
model.cpl('aveop4').set('opname', 'ave_uc4');
model.cpl('aveop4').selection.geom('geom1', 1);
model.cpl('aveop4').selection.named('sel4');
model.cpl.create('maxop5', 'Maximum', 'geom1');
model.cpl('maxop5').set('opname', 'max_uc5');
model.cpl('maxop5').selection.set([6]);
model.cpl.create('minop5', 'Minimum', 'geom1');
model.cpl('minop5').set('opname', 'min_uc5');
model.cpl('minop5').selection.set([6]);
model.cpl.create('aveop5', 'Average', 'geom1');
model.cpl('aveop5').set('axisym', true);
model.cpl('aveop5').set('opname', 'ave_uc5');
model.cpl('aveop5').selection.geom('geom1', 1);
model.cpl('aveop5').selection.named('sel5');
model.cpl.create('maxop6', 'Maximum', 'geom1');
model.cpl('maxop6').set('opname', 'max_uc6');
model.cpl('maxop6').selection.set([7]);
model.cpl.create('minop6', 'Minimum', 'geom1');
model.cpl('minop6').set('opname', 'min_uc6');
model.cpl('minop6').selection.set([7]);
model.cpl.create('aveop6', 'Average', 'geom1');
model.cpl('aveop6').set('axisym', true);
model.cpl('aveop6').set('opname', 'ave_uc6');
model.cpl('aveop6').selection.geom('geom1', 1);
model.cpl('aveop6').selection.named('sel6');
model.cpl.create('maxop7', 'Maximum', 'geom1');
model.cpl('maxop7').set('opname', 'max_uc7');
model.cpl('maxop7').selection.set([8]);
model.cpl.create('minop7', 'Minimum', 'geom1');
model.cpl('minop7').set('opname', 'min_uc7');
model.cpl('minop7').selection.set([8]);
model.cpl.create('aveop7', 'Average', 'geom1');
model.cpl('aveop7').set('axisym', true);
model.cpl('aveop7').set('opname', 'ave_uc7');
model.cpl('aveop7').selection.geom('geom1', 1);
model.cpl('aveop7').selection.named('sel7');
model.cpl.create('maxop8', 'Maximum', 'geom1');
model.cpl('maxop8').set('opname', 'max_uc8');
model.cpl('maxop8').selection.set([9]);
model.cpl.create('minop8', 'Minimum', 'geom1');
model.cpl('minop8').set('opname', 'min_uc8');
model.cpl('minop8').selection.set([9]);
model.cpl.create('aveop8', 'Average', 'geom1');
model.cpl('aveop8').set('axisym', true);
model.cpl('aveop8').set('opname', 'ave_uc8');
model.cpl('aveop8').selection.geom('geom1', 1);
model.cpl('aveop8').selection.named('sel8');
model.cpl.create('maxop9', 'Maximum', 'geom1');
model.cpl('maxop9').set('opname', 'max_uc9');
model.cpl('maxop9').selection.set([10]);
model.cpl.create('minop9', 'Minimum', 'geom1');
model.cpl('minop9').set('opname', 'min_uc9');
model.cpl('minop9').selection.set([10]);
model.cpl.create('aveop9', 'Average', 'geom1');
model.cpl('aveop9').set('axisym', true);
model.cpl('aveop9').set('opname', 'ave_uc9');
model.cpl('aveop9').selection.geom('geom1', 1);
model.cpl('aveop9').selection.named('sel9');
model.cpl.create('maxop10', 'Maximum', 'geom1');
model.cpl('maxop10').set('opname', 'max_uc10');
model.cpl('maxop10').selection.set([11]);
model.cpl.create('minop10', 'Minimum', 'geom1');
model.cpl('minop10').set('opname', 'min_uc10');
model.cpl('minop10').selection.set([11]);
model.cpl.create('aveop10', 'Average', 'geom1');
model.cpl('aveop10').set('axisym', true);
model.cpl('aveop10').set('opname', 'ave_uc10');
model.cpl('aveop10').selection.geom('geom1', 1);
model.cpl('aveop10').selection.named('sel10');
model.cpl.create('maxop11', 'Maximum', 'geom1');
model.cpl('maxop11').set('opname', 'max_uc11');
model.cpl('maxop11').selection.set([13]);
model.cpl.create('minop11', 'Minimum', 'geom1');
model.cpl('minop11').set('opname', 'min_uc11');
model.cpl('minop11').selection.set([13]);
model.cpl.create('aveop11', 'Average', 'geom1');
model.cpl('aveop11').set('axisym', true);
model.cpl('aveop11').set('opname', 'ave_uc11');
model.cpl('aveop11').selection.geom('geom1', 1);
model.cpl('aveop11').selection.named('sel11');
model.cpl.create('maxop12', 'Maximum', 'geom1');
model.cpl('maxop12').set('opname', 'max_uc12');
model.cpl('maxop12').selection.set([15]);
model.cpl.create('minop12', 'Minimum', 'geom1');
model.cpl('minop12').set('opname', 'min_uc12');
model.cpl('minop12').selection.set([15]);
model.cpl.create('aveop12', 'Average', 'geom1');
model.cpl('aveop12').set('axisym', true);
model.cpl('aveop12').set('opname', 'ave_uc12');
model.cpl('aveop12').selection.geom('geom1', 1);
model.cpl('aveop12').selection.named('sel12');
model.cpl.create('maxop13', 'Maximum', 'geom1');
model.cpl('maxop13').set('opname', 'max_uc13');
model.cpl('maxop13').selection.set([17]);
model.cpl.create('minop13', 'Minimum', 'geom1');
model.cpl('minop13').set('opname', 'min_uc13');
model.cpl('minop13').selection.set([17]);
model.cpl.create('aveop13', 'Average', 'geom1');
model.cpl('aveop13').set('axisym', true);
model.cpl('aveop13').set('opname', 'ave_uc13');
model.cpl('aveop13').selection.geom('geom1', 1);
model.cpl('aveop13').selection.named('sel13');
model.cpl.create('maxop14', 'Maximum', 'geom1');
model.cpl('maxop14').set('opname', 'max_uc14');
model.cpl('maxop14').selection.set([19]);
model.cpl.create('minop14', 'Minimum', 'geom1');
model.cpl('minop14').set('opname', 'min_uc14');
model.cpl('minop14').selection.set([19]);
model.cpl.create('aveop14', 'Average', 'geom1');
model.cpl('aveop14').set('axisym', true);
model.cpl('aveop14').set('opname', 'ave_uc14');
model.cpl('aveop14').selection.geom('geom1', 1);
model.cpl('aveop14').selection.named('sel14');
model.cpl.create('maxop15', 'Maximum', 'geom1');
model.cpl('maxop15').set('opname', 'max_uc15');
model.cpl('maxop15').selection.set([22]);
model.cpl.create('minop15', 'Minimum', 'geom1');
model.cpl('minop15').set('opname', 'min_uc15');
model.cpl('minop15').selection.set([22]);
model.cpl.create('aveop15', 'Average', 'geom1');
model.cpl('aveop15').set('axisym', true);
model.cpl('aveop15').set('opname', 'ave_uc15');
model.cpl('aveop15').selection.geom('geom1', 1);
model.cpl('aveop15').selection.named('sel15');
model.cpl.create('maxop16', 'Maximum', 'geom1');
model.cpl('maxop16').set('opname', 'max_uc16');
model.cpl('maxop16').selection.set([24]);
model.cpl.create('minop16', 'Minimum', 'geom1');
model.cpl('minop16').set('opname', 'min_uc16');
model.cpl('minop16').selection.set([24]);
model.cpl.create('aveop16', 'Average', 'geom1');
model.cpl('aveop16').set('axisym', true);
model.cpl('aveop16').set('opname', 'ave_uc16');
model.cpl('aveop16').selection.geom('geom1', 1);
model.cpl('aveop16').selection.named('sel16');
model.cpl.create('maxop17', 'Maximum', 'geom1');
model.cpl('maxop17').set('opname', 'max_uc17');
model.cpl('maxop17').selection.set([26]);
model.cpl.create('minop17', 'Minimum', 'geom1');
model.cpl('minop17').set('opname', 'min_uc17');
model.cpl('minop17').selection.set([26]);
model.cpl.create('aveop17', 'Average', 'geom1');
model.cpl('aveop17').set('axisym', true);
model.cpl('aveop17').set('opname', 'ave_uc17');
model.cpl('aveop17').selection.geom('geom1', 1);
model.cpl('aveop17').selection.named('sel17');
model.cpl.create('maxop18', 'Maximum', 'geom1');
model.cpl('maxop18').set('opname', 'max_uc18');
model.cpl('maxop18').selection.set([28]);
model.cpl.create('minop18', 'Minimum', 'geom1');
model.cpl('minop18').set('opname', 'min_uc18');
model.cpl('minop18').selection.set([28]);
model.cpl.create('aveop18', 'Average', 'geom1');
model.cpl('aveop18').set('axisym', true);
model.cpl('aveop18').set('opname', 'ave_uc18');
model.cpl('aveop18').selection.geom('geom1', 1);
model.cpl('aveop18').selection.named('sel18');
model.cpl.create('maxop19', 'Maximum', 'geom1');
model.cpl('maxop19').set('opname', 'max_uc19');
model.cpl('maxop19').selection.set([30]);
model.cpl.create('minop19', 'Minimum', 'geom1');
model.cpl('minop19').set('opname', 'min_uc19');
model.cpl('minop19').selection.set([30]);
model.cpl.create('aveop19', 'Average', 'geom1');
model.cpl('aveop19').set('axisym', true);
model.cpl('aveop19').set('opname', 'ave_uc19');
model.cpl('aveop19').selection.geom('geom1', 1);
model.cpl('aveop19').selection.named('sel19');
model.cpl.create('maxop20', 'Maximum', 'geom1');
model.cpl('maxop20').set('opname', 'max_uc20');
model.cpl('maxop20').selection.set([40]);
model.cpl.create('minop20', 'Minimum', 'geom1');
model.cpl('minop20').set('opname', 'min_uc20');
model.cpl('minop20').selection.set([40]);
model.cpl.create('aveop20', 'Average', 'geom1');
model.cpl('aveop20').set('axisym', true);
model.cpl('aveop20').set('opname', 'ave_uc20');
model.cpl('aveop20').selection.geom('geom1', 1);
model.cpl('aveop20').selection.named('sel20');
model.cpl.create('maxop21', 'Maximum', 'geom1');
model.cpl('maxop21').set('opname', 'max_uc21');
model.cpl('maxop21').selection.set([39]);
model.cpl.create('minop21', 'Minimum', 'geom1');
model.cpl('minop21').set('opname', 'min_uc21');
model.cpl('minop21').selection.set([39]);
model.cpl.create('aveop21', 'Average', 'geom1');
model.cpl('aveop21').set('axisym', true);
model.cpl('aveop21').set('opname', 'ave_uc21');
model.cpl('aveop21').selection.geom('geom1', 1);
model.cpl('aveop21').selection.named('sel21');
model.cpl.create('maxop22', 'Maximum', 'geom1');
model.cpl('maxop22').set('opname', 'max_uc22');
model.cpl('maxop22').selection.set([38]);
model.cpl.create('minop22', 'Minimum', 'geom1');
model.cpl('minop22').set('opname', 'min_uc22');
model.cpl('minop22').selection.set([38]);
model.cpl.create('aveop22', 'Average', 'geom1');
model.cpl('aveop22').set('axisym', true);
model.cpl('aveop22').set('opname', 'ave_uc22');
model.cpl('aveop22').selection.geom('geom1', 1);
model.cpl('aveop22').selection.named('sel22');
model.cpl.create('maxop23', 'Maximum', 'geom1');
model.cpl('maxop23').set('opname', 'max_uc23');
model.cpl('maxop23').selection.set([37]);
model.cpl.create('minop23', 'Minimum', 'geom1');
model.cpl('minop23').set('opname', 'min_uc23');
model.cpl('minop23').selection.set([37]);
model.cpl.create('aveop23', 'Average', 'geom1');
model.cpl('aveop23').set('axisym', true);
model.cpl('aveop23').set('opname', 'ave_uc23');
model.cpl('aveop23').selection.geom('geom1', 1);
model.cpl('aveop23').selection.named('sel23');
model.cpl.create('maxop24', 'Maximum', 'geom1');
model.cpl('maxop24').set('opname', 'max_uc24');
model.cpl('maxop24').selection.set([36]);
model.cpl.create('minop24', 'Minimum', 'geom1');
model.cpl('minop24').set('opname', 'min_uc24');
model.cpl('minop24').selection.set([36]);
model.cpl.create('aveop24', 'Average', 'geom1');
model.cpl('aveop24').set('axisym', true);
model.cpl('aveop24').set('opname', 'ave_uc24');
model.cpl('aveop24').selection.geom('geom1', 1);
model.cpl('aveop24').selection.named('sel24');
model.cpl.create('maxop25', 'Maximum', 'geom1');
model.cpl('maxop25').set('opname', 'max_uc25');
model.cpl('maxop25').selection.set([35]);
model.cpl.create('minop25', 'Minimum', 'geom1');
model.cpl('minop25').set('opname', 'min_uc25');
model.cpl('minop25').selection.set([35]);
model.cpl.create('aveop25', 'Average', 'geom1');
model.cpl('aveop25').set('axisym', true);
model.cpl('aveop25').set('opname', 'ave_uc25');
model.cpl('aveop25').selection.geom('geom1', 1);
model.cpl('aveop25').selection.named('sel25');
model.cpl.create('maxop26', 'Maximum', 'geom1');
model.cpl('maxop26').set('opname', 'max_uc26');
model.cpl('maxop26').selection.set([34]);
model.cpl.create('minop26', 'Minimum', 'geom1');
model.cpl('minop26').set('opname', 'min_uc26');
model.cpl('minop26').selection.set([34]);
model.cpl.create('aveop26', 'Average', 'geom1');
model.cpl('aveop26').set('axisym', true);
model.cpl('aveop26').set('opname', 'ave_uc26');
model.cpl('aveop26').selection.geom('geom1', 1);
model.cpl('aveop26').selection.named('sel26');
model.cpl.create('maxop27', 'Maximum', 'geom1');
model.cpl('maxop27').set('opname', 'max_uc27');
model.cpl('maxop27').selection.set([33]);
model.cpl.create('minop27', 'Minimum', 'geom1');
model.cpl('minop27').set('opname', 'min_uc27');
model.cpl('minop27').selection.set([33]);
model.cpl.create('aveop27', 'Average', 'geom1');
model.cpl('aveop27').set('axisym', true);
model.cpl('aveop27').set('opname', 'ave_uc27');
model.cpl('aveop27').selection.geom('geom1', 1);
model.cpl('aveop27').selection.named('sel27');
model.cpl.create('maxop28', 'Maximum', 'geom1');
model.cpl('maxop28').set('opname', 'max_uc28');
model.cpl('maxop28').selection.set([32]);
model.cpl.create('minop28', 'Minimum', 'geom1');
model.cpl('minop28').set('opname', 'min_uc28');
model.cpl('minop28').selection.set([32]);
model.cpl.create('aveop28', 'Average', 'geom1');
model.cpl('aveop28').set('axisym', true);
model.cpl('aveop28').set('opname', 'ave_uc28');
model.cpl('aveop28').selection.geom('geom1', 1);
model.cpl('aveop28').selection.named('sel28');
model.cpl.create('maxop29', 'Maximum', 'geom1');
model.cpl('maxop29').set('opname', 'max_uc29');
model.cpl('maxop29').selection.set([31]);
model.cpl.create('minop29', 'Minimum', 'geom1');
model.cpl('minop29').set('opname', 'min_uc29');
model.cpl('minop29').selection.set([31]);
model.cpl.create('aveop29', 'Average', 'geom1');
model.cpl('aveop29').set('axisym', true);
model.cpl('aveop29').set('opname', 'ave_uc29');
model.cpl('aveop29').selection.geom('geom1', 1);
model.cpl('aveop29').selection.named('sel29');
model.cpl.create('maxop30', 'Maximum', 'geom1');
model.cpl('maxop30').set('opname', 'max_uc30');
model.cpl('maxop30').selection.set([29]);
model.cpl.create('minop30', 'Minimum', 'geom1');
model.cpl('minop30').set('opname', 'min_uc30');
model.cpl('minop30').selection.set([29]);
model.cpl.create('aveop30', 'Average', 'geom1');
model.cpl('aveop30').set('axisym', true);
model.cpl('aveop30').set('opname', 'ave_uc30');
model.cpl('aveop30').selection.geom('geom1', 1);
model.cpl('aveop30').selection.named('sel30');
model.cpl.create('maxop31', 'Maximum', 'geom1');
model.cpl('maxop31').set('opname', 'max_uc31');
model.cpl('maxop31').selection.set([27]);
model.cpl.create('minop31', 'Minimum', 'geom1');
model.cpl('minop31').set('opname', 'min_uc31');
model.cpl('minop31').selection.set([27]);
model.cpl.create('aveop31', 'Average', 'geom1');
model.cpl('aveop31').set('axisym', true);
model.cpl('aveop31').set('opname', 'ave_uc31');
model.cpl('aveop31').selection.geom('geom1', 1);
model.cpl('aveop31').selection.named('sel31');
model.cpl.create('maxop32', 'Maximum', 'geom1');
model.cpl('maxop32').set('opname', 'max_uc32');
model.cpl('maxop32').selection.set([25]);
model.cpl.create('minop32', 'Minimum', 'geom1');
model.cpl('minop32').set('opname', 'min_uc32');
model.cpl('minop32').selection.set([25]);
model.cpl.create('aveop32', 'Average', 'geom1');
model.cpl('aveop32').set('axisym', true);
model.cpl('aveop32').set('opname', 'ave_uc32');
model.cpl('aveop32').selection.geom('geom1', 1);
model.cpl('aveop32').selection.named('sel32');
model.cpl.create('maxop33', 'Maximum', 'geom1');
model.cpl('maxop33').set('opname', 'max_uc33');
model.cpl('maxop33').selection.set([23]);
model.cpl.create('minop33', 'Minimum', 'geom1');
model.cpl('minop33').set('opname', 'min_uc33');
model.cpl('minop33').selection.set([23]);
model.cpl.create('aveop33', 'Average', 'geom1');
model.cpl('aveop33').set('axisym', true);
model.cpl('aveop33').set('opname', 'ave_uc33');
model.cpl('aveop33').selection.geom('geom1', 1);
model.cpl('aveop33').selection.named('sel33');
model.cpl.create('maxop34', 'Maximum', 'geom1');
model.cpl('maxop34').set('opname', 'max_uc34');
model.cpl('maxop34').selection.set([21]);
model.cpl.create('minop34', 'Minimum', 'geom1');
model.cpl('minop34').set('opname', 'min_uc34');
model.cpl('minop34').selection.set([21]);
model.cpl.create('aveop34', 'Average', 'geom1');
model.cpl('aveop34').set('axisym', true);
model.cpl('aveop34').set('opname', 'ave_uc34');
model.cpl('aveop34').selection.geom('geom1', 1);
model.cpl('aveop34').selection.named('sel34');
model.cpl.create('maxop35', 'Maximum', 'geom1');
model.cpl('maxop35').set('opname', 'max_uc35');
model.cpl('maxop35').selection.set([18]);
model.cpl.create('minop35', 'Minimum', 'geom1');
model.cpl('minop35').set('opname', 'min_uc35');
model.cpl('minop35').selection.set([18]);
model.cpl.create('aveop35', 'Average', 'geom1');
model.cpl('aveop35').set('axisym', true);
model.cpl('aveop35').set('opname', 'ave_uc35');
model.cpl('aveop35').selection.geom('geom1', 1);
model.cpl('aveop35').selection.named('sel35');
model.cpl.create('maxop36', 'Maximum', 'geom1');
model.cpl('maxop36').set('opname', 'max_uc36');
model.cpl('maxop36').selection.set([16]);
model.cpl.create('minop36', 'Minimum', 'geom1');
model.cpl('minop36').set('opname', 'min_uc36');
model.cpl('minop36').selection.set([16]);
model.cpl.create('aveop36', 'Average', 'geom1');
model.cpl('aveop36').set('axisym', true);
model.cpl('aveop36').set('opname', 'ave_uc36');
model.cpl('aveop36').selection.geom('geom1', 1);
model.cpl('aveop36').selection.named('sel36');
model.cpl.create('maxop37', 'Maximum', 'geom1');
model.cpl('maxop37').set('opname', 'max_uc37');
model.cpl('maxop37').selection.set([14]);
model.cpl.create('minop37', 'Minimum', 'geom1');
model.cpl('minop37').set('opname', 'min_uc37');
model.cpl('minop37').selection.set([14]);
model.cpl.create('aveop37', 'Average', 'geom1');
model.cpl('aveop37').set('axisym', true);
model.cpl('aveop37').set('opname', 'ave_uc37');
model.cpl('aveop37').selection.geom('geom1', 1);
model.cpl('aveop37').selection.named('sel37');
model.cpl.create('maxop38', 'Maximum', 'geom1');
model.cpl('maxop38').set('opname', 'max_svc');
model.cpl('maxop38').selection.set([12]);
model.cpl.create('minop38', 'Minimum', 'geom1');
model.cpl('minop38').set('opname', 'min_svc');
model.cpl('minop38').selection.set([12]);
model.cpl.create('aveop38', 'Average', 'geom1');
model.cpl('aveop38').set('axisym', true);
model.cpl('aveop38').set('opname', 'ave_svc');
model.cpl('aveop38').selection.geom('geom1', 1);
model.cpl('aveop38').selection.named('sel38');
model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'int_svc');
model.cpl('intop1').selection.set([12]);
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').set('opname', 'int_internal');
model.cpl('intop2').selection.geom('geom1', 1);
model.cpl('intop2').selection.named('sel40');

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('sb_wtot', '198[mm]', 'Total width of the shutter box');
model.variable('var1').set('sb_htot', '177[mm]', 'Total height of the shutter box');
model.variable('var1').set('b_l', '8[mm]', 'Internal length of PVC boxes');
model.variable('var1').set('b_L1', '15[mm]', 'Internal length of intermediate PVC boxes');
model.variable('var1').set('b_L2', '20[mm]', 'Internal length of big PVC boxes');
model.variable('var1').set('pvc_t', '1[mm]', 'PVC thickness');
model.variable('var1').set('p_w1', '100[mm]', 'First width of the insulation panel');
model.variable('var1').set('p_w2', '36[mm]', 'Second width of the insulation panel');
model.variable('var1').set('svc_w', 'sb_wtot-(4*pvc_t+2*b_l+p_w2)', 'Width of the slightly ventilated cavity');
model.variable('var1').set('svc_h', 'sb_htot-(2*pvc_t+b_l)', 'Height of the slightly ventilated cavity');
model.variable('var1').set('abs', '11[mm]', 'Adiabatic boundary shift');
model.variable('var1').set('abl', '60[mm]', 'Adiabatic boundary length');
model.variable('var1').set('sb_o', '15[mm]', 'Width of the opening of the shutter box');
model.variable('var1').set('A_svc', 'int_svc(1)', 'Area of the slightly ventilated cavity');
model.variable('var1').set('svc_w2', 'w_resized(A_svc,svc_w,svc_h)', 'Equivalent width of the slightly ventilated cavity');
model.variable('var1').set('svc_h2', 'h_resized(A_svc,svc_w,svc_h)', 'Equivalent height of the slightly ventilated cavity');
model.variable('var1').set('R_uc1', '1/(ha_2(b_l,max_uc1(T)-min_uc1(T))+hr(b_l,b_l,ave_uc1(T),epsilon,epsilon))', 'Thermal resistance of the first unventilated cavity');
model.variable('var1').set('R_uc2', '1/(ha_2(b_l,max_uc2(T)-min_uc2(T))+hr(b_l,b_L1,ave_uc2(T),epsilon,epsilon))', 'Thermal resistance of the second unventilated cavity');
model.variable('var1').set('R_uc3', '1/(ha_2(b_l,max_uc3(T)-min_uc3(T))+hr(b_l,b_L2,ave_uc3(T),epsilon,epsilon))', 'Thermal resistance of the third unventilated cavity');
model.variable('var1').set('R_uc4', '1/(ha_2(b_l,max_uc4(T)-min_uc4(T))+hr(b_l,b_L2,ave_uc4(T),epsilon,epsilon))', 'Thermal resistance of the fourth unventilated cavity');
model.variable('var1').set('R_uc5', '1/(ha_2(b_l,max_uc5(T)-min_uc5(T))+hr(b_l,b_L2,ave_uc5(T),epsilon,epsilon))', 'Thermal resistance of the fifth unventilated cavity');
model.variable('var1').set('R_uc6', '1/(ha_2(b_l,max_uc6(T)-min_uc6(T))+hr(b_l,b_L2,ave_uc6(T),epsilon,epsilon))', 'Thermal resistance of the sixth unventilated cavity');
model.variable('var1').set('R_uc7', '1/(ha_2(b_l,max_uc7(T)-min_uc7(T))+hr(b_l,b_L2,ave_uc7(T),epsilon,epsilon))', 'Thermal resistance of the seventh unventilated cavity');
model.variable('var1').set('R_uc8', '1/(ha_2(b_l,max_uc8(T)-min_uc8(T))+hr(b_l,b_L2,ave_uc8(T),epsilon,epsilon))', 'Thermal resistance of the eighth unventilated cavity');
model.variable('var1').set('R_uc9', '1/(ha_2(b_l,max_uc9(T)-min_uc9(T))+hr(b_l,b_L1,ave_uc9(T),epsilon,epsilon))', 'Thermal resistance of the ninth unventilated cavity');
model.variable('var1').set('R_uc10', '1/(ha_2(b_l,max_uc10(T)-min_uc10(T))+hr(b_l,b_l,ave_uc10(T),epsilon,epsilon))', 'Thermal resistance of the tenth unventilated cavity');
model.variable('var1').set('R_uc11', '1/(ha_2(b_L1,max_uc11(T)-min_uc11(T))+hr(b_L1,b_l,ave_uc11(T),epsilon,epsilon))', 'Thermal resistance of the eleventh unventilated cavity');
model.variable('var1').set('R_uc12', '1/(ha_2(b_L2,max_uc12(T)-min_uc12(T))+hr(b_L2,b_l,ave_uc12(T),epsilon,epsilon))', 'Thermal resistance of the twelfth unventilated cavity');
model.variable('var1').set('R_uc13', '1/(ha_2(b_L2,max_uc13(T)-min_uc13(T))+hr(b_L2,b_l,ave_uc13(T),epsilon,epsilon))', 'Thermal resistance of the thirteenth unventilated cavity');
model.variable('var1').set('R_uc14', '1/(ha_2(b_L2,max_uc14(T)-min_uc14(T))+hr(b_L2,b_l,ave_uc14(T),epsilon,epsilon))', 'Thermal resistance of the fourteenth unventilated cavity');
model.variable('var1').set('R_uc15', '1/(ha_2(b_L2,max_uc15(T)-min_uc15(T))+hr(b_L2,b_l,ave_uc15(T),epsilon,epsilon))', 'Thermal resistance of the fifteenth unventilated cavity');
model.variable('var1').set('R_uc16', '1/(ha_2(b_L2,max_uc16(T)-min_uc16(T))+hr(b_L2,b_l,ave_uc16(T),epsilon,epsilon))', 'Thermal resistance of the sixteenth unventilated cavity');
model.variable('var1').set('R_uc17', '1/(ha_2(b_L2,max_uc17(T)-min_uc17(T))+hr(b_L2,b_l,ave_uc17(T),epsilon,epsilon))', 'Thermal resistance of the seventeenth unventilated cavity');
model.variable('var1').set('R_uc18', '1/(ha_2(b_L2,max_uc18(T)-min_uc18(T))+hr(b_L2,b_l,ave_uc18(T),epsilon,epsilon))', 'Thermal resistance of the eighteenth unventilated cavity');
model.variable('var1').set('R_uc19', '1/(ha_2(b_L1,max_uc19(T)-min_uc19(T))+hr(b_L1,b_l,ave_uc19(T),epsilon,epsilon))', 'Thermal resistance of the nineteenth unventilated cavity');
model.variable('var1').set('R_uc20', '1/(ha_2(b_l,max_uc20(T)-min_uc20(T))+hr(b_l,b_l,ave_uc20(T),epsilon,epsilon))', 'Thermal resistance of the twentieth unventilated cavity');
model.variable('var1').set('R_uc21', '1/(ha_2(b_l,max_uc21(T)-min_uc21(T))+hr(b_l,b_L1,ave_uc21(T),epsilon,epsilon))', 'Thermal resistance of the twenty-first unventilated cavity');
model.variable('var1').set('R_uc22', '1/(ha_2(b_l,max_uc22(T)-min_uc22(T))+hr(b_l,b_L2,ave_uc22(T),epsilon,epsilon))', 'Thermal resistance of the twenty-second unventilated cavity');
model.variable('var1').set('R_uc23', '1/(ha_2(b_l,max_uc23(T)-min_uc23(T))+hr(b_l,b_L2,ave_uc23(T),epsilon,epsilon))', 'Thermal resistance of the twenty-third unventilated cavity');
model.variable('var1').set('R_uc24', '1/(ha_2(b_l,max_uc24(T)-min_uc24(T))+hr(b_l,b_L2,ave_uc24(T),epsilon,epsilon))', 'Thermal resistance of the twenty-fourth unventilated cavity');
model.variable('var1').set('R_uc25', '1/(ha_2(b_l,max_uc25(T)-min_uc25(T))+hr(b_l,b_L2,ave_uc25(T),epsilon,epsilon))', 'Thermal resistance of the twenty-fifth unventilated cavity');
model.variable('var1').set('R_uc26', '1/(ha_2(b_l,max_uc26(T)-min_uc26(T))+hr(b_l,b_L2,ave_uc26(T),epsilon,epsilon))', 'Thermal resistance of the twenty-sixth unventilated cavity');
model.variable('var1').set('R_uc27', '1/(ha_2(b_l,max_uc27(T)-min_uc27(T))+hr(b_l,b_L2,ave_uc27(T),epsilon,epsilon))', 'Thermal resistance of the twenty-seventh unventilated cavity');
model.variable('var1').set('R_uc28', '1/(ha_2(b_l,max_uc28(T)-min_uc28(T))+hr(b_l,b_L1,ave_uc28(T),epsilon,epsilon))', 'Thermal resistance of the twenty-eighth unventilated cavity');
model.variable('var1').set('R_uc29', '1/(ha_2(b_l,max_uc29(T)-min_uc29(T))+hr(b_l,b_l,ave_uc29(T),epsilon,epsilon))', 'Thermal resistance of the twenty-ninth unventilated cavity');
model.variable('var1').set('R_uc30', '1/(ha_2(b_L1,max_uc30(T)-min_uc30(T))+hr(b_L1,b_l,ave_uc30(T),epsilon,epsilon))', 'Thermal resistance of the thirtieth unventilated cavity');
model.variable('var1').set('R_uc31', '1/(ha_2(b_L2,max_uc31(T)-min_uc31(T))+hr(b_L2,b_l,ave_uc31(T),epsilon,epsilon))', 'Thermal resistance of the thirty-first unventilated cavity');
model.variable('var1').set('R_uc32', '1/(ha_2(b_L2,max_uc32(T)-min_uc32(T))+hr(b_L2,b_l,ave_uc32(T),epsilon,epsilon))', 'Thermal resistance of the thirty-second unventilated cavity');
model.variable('var1').set('R_uc33', '1/(ha_2(b_L2,max_uc33(T)-min_uc33(T))+hr(b_L2,b_l,ave_uc33(T),epsilon,epsilon))', 'Thermal resistance of the thirty-third unventilated cavity');
model.variable('var1').set('R_uc34', '1/(ha_2(b_L2,max_uc34(T)-min_uc34(T))+hr(b_L2,b_l,ave_uc34(T),epsilon,epsilon))', 'Thermal resistance of the thirty-fourth unventilated cavity');
model.variable('var1').set('R_uc35', '1/(ha_2(b_L2,max_uc35(T)-min_uc35(T))+hr(b_L2,b_l,ave_uc35(T),epsilon,epsilon))', 'Thermal resistance of the thirty-fifth unventilated cavity');
model.variable('var1').set('R_uc36', '1/(ha_2(b_L2,max_uc36(T)-min_uc36(T))+hr(b_L2,b_l,ave_uc36(T),epsilon,epsilon))', 'Thermal resistance of the thirty-sixth unventilated cavity');
model.variable('var1').set('R_uc37', '1/(ha_2(b_L2,max_uc37(T)-min_uc37(T))+hr(b_L2,b_l,ave_uc37(T),epsilon,epsilon))', 'Thermal resistance of the thirty-seventh unventilated cavity');
model.variable('var1').set('R_svc', '1/(ha_2(svc_w2,max_svc(T)-min_svc(T))+hr(svc_w2,svc_h2,ave_svc(T),epsilon,epsilon))', 'Thermal resistance of the slightly ventilated cavity');
model.variable('var1').set('L2D', 'int_internal(ht.ntflux/(Te-Ti))');
model.variable('var1').descr('L2D', 'Thermal conductance of the frame');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('PVC');
model.material('mat1').selection.set([1]);
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'lambda_pvc'});
model.material('mat1').propertyGroup('def').set('density', {'1390'});
model.material('mat1').propertyGroup('def').set('heatcapacity', {'1900'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Insulation Panel');
model.material('mat2').selection.set([20]);
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'lambda_p'});
model.material('mat2').propertyGroup('def').set('density', {'50'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'1030'});
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Unventilated Cavity 1');
model.material('mat3').selection.set([2]);
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc1'});
model.material('mat3').propertyGroup('def').set('density', {'1.23'});
model.material('mat3').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').label('Unventilated Cavity 2');
model.material('mat4').selection.set([3]);
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc2'});
model.material('mat4').propertyGroup('def').set('density', {'1.23'});
model.material('mat4').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').label('Unventilated Cavity 3');
model.material('mat5').selection.set([4]);
model.material('mat5').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc3'});
model.material('mat5').propertyGroup('def').set('density', {'1.23'});
model.material('mat5').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat6', 'Common', 'comp1');
model.material('mat6').label('Unventilated Cavity 4');
model.material('mat6').selection.set([5]);
model.material('mat6').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc4'});
model.material('mat6').propertyGroup('def').set('density', {'1.23'});
model.material('mat6').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat7', 'Common', 'comp1');
model.material('mat7').label('Unventilated Cavity 5');
model.material('mat7').selection.set([6]);
model.material('mat7').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc5'});
model.material('mat7').propertyGroup('def').set('density', {'1.23'});
model.material('mat7').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat8', 'Common', 'comp1');
model.material('mat8').label('Unventilated Cavity 6');
model.material('mat8').selection.set([7]);
model.material('mat8').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc6'});
model.material('mat8').propertyGroup('def').set('density', {'1.23'});
model.material('mat8').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat9', 'Common', 'comp1');
model.material('mat9').label('Unventilated Cavity 7');
model.material('mat9').selection.set([8]);
model.material('mat9').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc7'});
model.material('mat9').propertyGroup('def').set('density', {'1.23'});
model.material('mat9').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat10', 'Common', 'comp1');
model.material('mat10').label('Unventilated Cavity 8');
model.material('mat10').selection.set([9]);
model.material('mat10').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc8'});
model.material('mat10').propertyGroup('def').set('density', {'1.23'});
model.material('mat10').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat11', 'Common', 'comp1');
model.material('mat11').label('Unventilated Cavity 9');
model.material('mat11').selection.set([10]);
model.material('mat11').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc9'});
model.material('mat11').propertyGroup('def').set('density', {'1.23'});
model.material('mat11').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat12', 'Common', 'comp1');
model.material('mat12').label('Unventilated Cavity 10');
model.material('mat12').selection.set([11]);
model.material('mat12').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc10'});
model.material('mat12').propertyGroup('def').set('density', {'1.23'});
model.material('mat12').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat13', 'Common', 'comp1');
model.material('mat13').label('Unventilated Cavity 11');
model.material('mat13').selection.set([13]);
model.material('mat13').propertyGroup('def').set('thermalconductivity', {'b_L1/R_uc11'});
model.material('mat13').propertyGroup('def').set('density', {'1.23'});
model.material('mat13').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat14', 'Common', 'comp1');
model.material('mat14').label('Unventilated Cavity 12');
model.material('mat14').selection.set([15]);
model.material('mat14').propertyGroup('def').set('thermalconductivity', {'b_L2/R_uc12'});
model.material('mat14').propertyGroup('def').set('density', {'1.23'});
model.material('mat14').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat15', 'Common', 'comp1');
model.material('mat15').label('Unventilated Cavity 13');
model.material('mat15').selection.set([17]);
model.material('mat15').propertyGroup('def').set('thermalconductivity', {'b_L2/R_uc13'});
model.material('mat15').propertyGroup('def').set('density', {'1.23'});
model.material('mat15').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat16', 'Common', 'comp1');
model.material('mat16').label('Unventilated Cavity 14');
model.material('mat16').selection.set([19]);
model.material('mat16').propertyGroup('def').set('thermalconductivity', {'b_L2/R_uc14'});
model.material('mat16').propertyGroup('def').set('density', {'1.23'});
model.material('mat16').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat17', 'Common', 'comp1');
model.material('mat17').label('Unventilated Cavity 15');
model.material('mat17').selection.set([22]);
model.material('mat17').propertyGroup('def').set('thermalconductivity', {'b_L2/R_uc15'});
model.material('mat17').propertyGroup('def').set('density', {'1.23'});
model.material('mat17').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat18', 'Common', 'comp1');
model.material('mat18').label('Unventilated Cavity 16');
model.material('mat18').selection.set([24]);
model.material('mat18').propertyGroup('def').set('thermalconductivity', {'b_L2/R_uc16'});
model.material('mat18').propertyGroup('def').set('density', {'1.23'});
model.material('mat18').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat19', 'Common', 'comp1');
model.material('mat19').label('Unventilated Cavity 17');
model.material('mat19').selection.set([26]);
model.material('mat19').propertyGroup('def').set('thermalconductivity', {'b_L2/R_uc17'});
model.material('mat19').propertyGroup('def').set('density', {'1.23'});
model.material('mat19').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat20', 'Common', 'comp1');
model.material('mat20').label('Unventilated Cavity 18');
model.material('mat20').selection.set([28]);
model.material('mat20').propertyGroup('def').set('thermalconductivity', {'b_L2/R_uc18'});
model.material('mat20').propertyGroup('def').set('density', {'1.23'});
model.material('mat20').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat21', 'Common', 'comp1');
model.material('mat21').label('Unventilated Cavity 19');
model.material('mat21').selection.set([30]);
model.material('mat21').propertyGroup('def').set('thermalconductivity', {'b_L1/R_uc19'});
model.material('mat21').propertyGroup('def').set('density', {'1.23'});
model.material('mat21').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat22', 'Common', 'comp1');
model.material('mat22').label('Unventilated Cavity 20');
model.material('mat22').selection.set([40]);
model.material('mat22').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc20'});
model.material('mat22').propertyGroup('def').set('density', {'1.23'});
model.material('mat22').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat23', 'Common', 'comp1');
model.material('mat23').label('Unventilated Cavity 21');
model.material('mat23').selection.set([39]);
model.material('mat23').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc21'});
model.material('mat23').propertyGroup('def').set('density', {'1.23'});
model.material('mat23').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat24', 'Common', 'comp1');
model.material('mat24').label('Unventilated Cavity 22');
model.material('mat24').selection.set([38]);
model.material('mat24').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc22'});
model.material('mat24').propertyGroup('def').set('density', {'1.23'});
model.material('mat24').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat25', 'Common', 'comp1');
model.material('mat25').label('Unventilated Cavity 23');
model.material('mat25').selection.set([37]);
model.material('mat25').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc23'});
model.material('mat25').propertyGroup('def').set('density', {'1.23'});
model.material('mat25').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat26', 'Common', 'comp1');
model.material('mat26').label('Unventilated Cavity 24');
model.material('mat26').selection.set([36]);
model.material('mat26').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc24'});
model.material('mat26').propertyGroup('def').set('density', {'1.23'});
model.material('mat26').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat27', 'Common', 'comp1');
model.material('mat27').label('Unventilated Cavity 25');
model.material('mat27').selection.set([35]);
model.material('mat27').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc25'});
model.material('mat27').propertyGroup('def').set('density', {'1.23'});
model.material('mat27').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat28', 'Common', 'comp1');
model.material('mat28').label('Unventilated Cavity 26');
model.material('mat28').selection.set([34]);
model.material('mat28').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc26'});
model.material('mat28').propertyGroup('def').set('density', {'1.23'});
model.material('mat28').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat29', 'Common', 'comp1');
model.material('mat29').label('Unventilated Cavity 27');
model.material('mat29').selection.set([33]);
model.material('mat29').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc27'});
model.material('mat29').propertyGroup('def').set('density', {'1.23'});
model.material('mat29').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat30', 'Common', 'comp1');
model.material('mat30').label('Unventilated Cavity 28');
model.material('mat30').selection.set([32]);
model.material('mat30').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc28'});
model.material('mat30').propertyGroup('def').set('density', {'1.23'});
model.material('mat30').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat31', 'Common', 'comp1');
model.material('mat31').label('Unventilated Cavity 29');
model.material('mat31').selection.set([31]);
model.material('mat31').propertyGroup('def').set('thermalconductivity', {'b_l/R_uc29'});
model.material('mat31').propertyGroup('def').set('density', {'1.23'});
model.material('mat31').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat32', 'Common', 'comp1');
model.material('mat32').label('Unventilated Cavity 30');
model.material('mat32').selection.set([29]);
model.material('mat32').propertyGroup('def').set('thermalconductivity', {'b_L1/R_uc30'});
model.material('mat32').propertyGroup('def').set('density', {'1.23'});
model.material('mat32').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat33', 'Common', 'comp1');
model.material('mat33').label('Unventilated Cavity 31');
model.material('mat33').selection.set([27]);
model.material('mat33').propertyGroup('def').set('thermalconductivity', {'b_L2/R_uc31'});
model.material('mat33').propertyGroup('def').set('density', {'1.23'});
model.material('mat33').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat34', 'Common', 'comp1');
model.material('mat34').label('Unventilated Cavity 32');
model.material('mat34').selection.set([25]);
model.material('mat34').propertyGroup('def').set('thermalconductivity', {'b_L2/R_uc32'});
model.material('mat34').propertyGroup('def').set('density', {'1.23'});
model.material('mat34').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat35', 'Common', 'comp1');
model.material('mat35').label('Unventilated Cavity 33');
model.material('mat35').selection.set([23]);
model.material('mat35').propertyGroup('def').set('thermalconductivity', {'b_L2/R_uc33'});
model.material('mat35').propertyGroup('def').set('density', {'1.23'});
model.material('mat35').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat36', 'Common', 'comp1');
model.material('mat36').label('Unventilated Cavity 34');
model.material('mat36').selection.set([21]);
model.material('mat36').propertyGroup('def').set('thermalconductivity', {'b_L2/R_uc34'});
model.material('mat36').propertyGroup('def').set('density', {'1.23'});
model.material('mat36').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat37', 'Common', 'comp1');
model.material('mat37').label('Unventilated Cavity 35');
model.material('mat37').selection.set([18]);
model.material('mat37').propertyGroup('def').set('thermalconductivity', {'b_L2/R_uc35'});
model.material('mat37').propertyGroup('def').set('density', {'1.23'});
model.material('mat37').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat38', 'Common', 'comp1');
model.material('mat38').label('Unventilated Cavity 36');
model.material('mat38').selection.set([16]);
model.material('mat38').propertyGroup('def').set('thermalconductivity', {'b_L2/R_uc36'});
model.material('mat38').propertyGroup('def').set('density', {'1.23'});
model.material('mat38').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat39', 'Common', 'comp1');
model.material('mat39').label('Unventilated Cavity 37');
model.material('mat39').selection.set([14]);
model.material('mat39').propertyGroup('def').set('thermalconductivity', {'b_L2/R_uc37'});
model.material('mat39').propertyGroup('def').set('density', {'1.23'});
model.material('mat39').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat40', 'Common', 'comp1');
model.material('mat40').label('Slightly Ventilated Cavity');
model.material('mat40').selection.set([12]);
model.material('mat40').propertyGroup('def').set('thermalconductivity', {'2*svc_w/R_svc'});
model.material('mat40').propertyGroup('def').set('density', {'1.23'});
model.material('mat40').propertyGroup('def').set('heatcapacity', {'1008'});

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s1').set('stol', '1e-6');

model.modelNode.create('comp2', true);

model.geom.create('geom2', 2);
model.geom('geom2').model('comp2');

model.mesh.create('mesh2', 'geom2');

model.modelNode('comp2').label('PVC Shutter Profile');

model.physics.create('ht2', 'HeatTransferInSolidsAndFluids', 'geom2');
model.physics('ht2').model('comp2');

model.study('std1').feature('stat').setSolveFor('/physics/ht2', false);

model.geom('geom2').run;
model.geom('geom2').create('imp1', 'Import');
model.geom('geom2').feature('imp1').set('filename', 'roller_shutter_thermal_performances_profile.mphbin');
model.geom('geom2').feature('imp1').importData;
model.geom('geom2').run('fin');
model.geom('geom2').create('ige1', 'IgnoreEdges');
model.geom('geom2').feature('ige1').selection('input').set('fin', [4 6 12 13 18 19 23 24 29 31 35 39 43 48 49 54 55 60 61]);
model.geom('geom2').run('ige1');

model.selection.create('sel42', 'Explicit');
model.selection('sel42').model('comp2');
model.selection('sel42').label('Unventilated Cavity 1');
model.selection('sel42').geom(1);
model.selection('sel42').set([4 5 6 7]);
model.selection.create('sel43', 'Explicit');
model.selection('sel43').model('comp2');
model.selection('sel43').label('Unventilated Cavity 2');
model.selection('sel43').geom(1);
model.selection('sel43').set([8 9 10 11]);
model.selection.create('sel44', 'Explicit');
model.selection('sel44').model('comp2');
model.selection('sel44').label('Unventilated Cavity 3');
model.selection('sel44').geom(1);
model.selection('sel44').set([28 29 30 31]);
model.selection.create('sel45', 'Explicit');
model.selection('sel45').model('comp2');
model.selection('sel45').label('Unventilated Cavity 4');
model.selection('sel45').geom(1);
model.selection('sel45').set([32 33 34 35]);
model.selection.create('sel46', 'Explicit');
model.selection('sel46').model('comp2');
model.selection('sel46').label('Unventilated Cavity 5');
model.selection('sel46').geom(1);
model.selection('sel46').set([18 19 20 21 22 23 24 25 26 27]);
model.selection.create('sel47', 'Explicit');
model.selection('sel47').model('comp2');
model.selection('sel47').label('Interior Side');
model.selection('sel47').geom(1);
model.selection('sel47').set([3 17]);
model.selection.create('sel48', 'Explicit');
model.selection('sel48').model('comp2');
model.selection('sel48').label('Exterior Side');
model.selection('sel48').geom(1);
model.selection('sel48').set([2 13]);

model.cpl.create('maxop39', 'Maximum', 'geom2');
model.cpl('maxop39').set('opname', 'max_uc1');
model.cpl('maxop39').selection.set([2]);
model.cpl.create('minop39', 'Minimum', 'geom2');
model.cpl('minop39').set('opname', 'min_uc1');
model.cpl('minop39').selection.set([2]);
model.cpl.create('aveop39', 'Average', 'geom2');
model.cpl('aveop39').set('axisym', true);
model.cpl('aveop39').set('opname', 'ave_uc1');
model.cpl('aveop39').selection.geom('geom2', 1);
model.cpl('aveop39').selection.named('sel42');
model.cpl.create('maxop40', 'Maximum', 'geom2');
model.cpl('maxop40').set('opname', 'max_uc2');
model.cpl('maxop40').selection.set([3]);
model.cpl.create('minop40', 'Minimum', 'geom2');
model.cpl('minop40').set('opname', 'min_uc2');
model.cpl('minop40').selection.set([3]);
model.cpl.create('aveop40', 'Average', 'geom2');
model.cpl('aveop40').set('axisym', true);
model.cpl('aveop40').set('opname', 'ave_uc2');
model.cpl('aveop40').selection.geom('geom2', 1);
model.cpl('aveop40').selection.named('sel43');
model.cpl.create('maxop41', 'Maximum', 'geom2');
model.cpl('maxop41').set('opname', 'max_uc3');
model.cpl('maxop41').selection.set([6]);
model.cpl.create('minop41', 'Minimum', 'geom2');
model.cpl('minop41').set('opname', 'min_uc3');
model.cpl('minop41').selection.set([6]);
model.cpl.create('aveop41', 'Average', 'geom2');
model.cpl('aveop41').set('axisym', true);
model.cpl('aveop41').set('opname', 'ave_uc3');
model.cpl('aveop41').selection.geom('geom2', 1);
model.cpl('aveop41').selection.named('sel44');
model.cpl.create('maxop42', 'Maximum', 'geom2');
model.cpl('maxop42').set('opname', 'max_uc4');
model.cpl('maxop42').selection.set([7]);
model.cpl.create('minop42', 'Minimum', 'geom2');
model.cpl('minop42').set('opname', 'min_uc4');
model.cpl('minop42').selection.set([7]);
model.cpl.create('aveop42', 'Average', 'geom2');
model.cpl('aveop42').set('axisym', true);
model.cpl('aveop42').set('opname', 'ave_uc4');
model.cpl('aveop42').selection.geom('geom2', 1);
model.cpl('aveop42').selection.named('sel45');
model.cpl.create('aveop43', 'Average', 'geom2');
model.cpl('aveop43').set('axisym', true);
model.cpl('aveop43').set('opname', 'ave_uc5');
model.cpl('aveop43').selection.geom('geom2', 1);
model.cpl('aveop43').selection.named('sel46');
model.cpl.create('intop3', 'Integration', 'geom2');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').set('opname', 'int_uc5');
model.cpl('intop3').selection.set([5]);
model.cpl.create('intop4', 'Integration', 'geom2');
model.cpl('intop4').set('axisym', true);
model.cpl('intop4').set('opname', 'int_internal');
model.cpl('intop4').selection.geom('geom2', 1);
model.cpl('intop4').selection.named('sel47');

model.variable.create('var2');
model.variable('var2').model('comp2');

% To import content from file, use:
% model.variable('var2').loadFile('FILENAME');
model.variable('var2').set('s_htot', '7[mm]', 'Total height of the shutter');
model.variable('var2').set('s_wtot', '57[mm]', 'Total width of the shutter');
model.variable('var2').set('uc1_h', '5[mm]', 'Height of the first unventilated cavity');
model.variable('var2').set('uc1_w', '12[mm]', 'Width of the first unventilated cavity');
model.variable('var2').set('uc2_h', '5[mm]', 'Height of the second unventilated cavity');
model.variable('var2').set('uc2_w', '12[mm]', 'Width of the second unventilated cavity');
model.variable('var2').set('uc3_h', '5[mm]', 'Height of the third unventilated cavity');
model.variable('var2').set('uc3_w', '12[mm]', 'Width of the third unventilated cavity');
model.variable('var2').set('uc4_h', '5[mm]', 'Height of the fourth unventilated cavity');
model.variable('var2').set('uc4_w', '12[mm]', 'Width of the fourth unventilated cavity');
model.variable('var2').set('uc5_h', '5[mm]', 'Height of the fifth unventilated cavity');
model.variable('var2').set('uc5_w', '3[mm]', 'Width of the fifth unventilated cavity');
model.variable('var2').set('pvc_t', '1[mm]', 'PVC thickness');
model.variable('var2').set('A_uc5', 'int_uc5(1)', 'Area of the fifth unventilated cavity');
model.variable('var2').set('uc5_h2', 'h_resized(A_uc5,uc5_h,uc5_w)', 'Equivalent height of the fifth unventilated cavity');
model.variable('var2').set('R_uc1', '1/(ha_2(uc1_h,max_uc1(T2)-min_uc1(T2))+hr(uc1_h,uc1_w,ave_uc1(T2),epsilon,epsilon))', 'Thermal resistance of the first unventilated cavity');
model.variable('var2').set('R_uc2', '1/(ha_2(uc2_h,max_uc2(T2)-min_uc2(T2))+hr(uc2_h,uc2_w,ave_uc2(T2),epsilon,epsilon))', 'Thermal resistance of the second unventilated cavity');
model.variable('var2').set('R_uc3', '1/(ha_2(uc3_h,max_uc3(T2)-min_uc3(T2))+hr(uc3_h,uc3_w,ave_uc3(T2),epsilon,epsilon))', 'Thermal resistance of the third unventilated cavity');
model.variable('var2').set('R_uc4', '1/(ha_2(uc4_h,max_uc4(T2)-min_uc4(T2))+hr(uc4_h,uc4_w,ave_uc4(T2),epsilon,epsilon))', 'Thermal resistance of the fourth unventilated cavity');
model.variable('var2').set('R_uc5', '1/(ha_1(uc5_h2)+hr(uc5_h,uc5_w,ave_uc5(T2),epsilon,epsilon))', '                        Thermal resistance of the fifth unventilated cavity');
model.variable('var2').set('L2D', 'int_internal(ht2.ntflux/(Te-Ti))', 'Thermal conductance of the frame');

model.material.create('mat41', 'Common', 'comp2');
model.material('mat41').label('PVC');
model.material('mat41').selection.set([1 4]);
model.material('mat41').propertyGroup('def').set('thermalconductivity', {'lambda_pvc'});
model.material('mat41').propertyGroup('def').set('density', {'1390'});
model.material('mat41').propertyGroup('def').set('heatcapacity', {'1900'});
model.material.create('mat42', 'Common', 'comp2');
model.material('mat42').label('Unventilated Cavity 1');
model.material('mat42').selection.set([2]);
model.material('mat42').propertyGroup('def').set('thermalconductivity', {'uc1_h/R_uc1'});
model.material('mat42').propertyGroup('def').set('density', {'1.23'});
model.material('mat42').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat43', 'Common', 'comp2');
model.material('mat43').label('Unventilated Cavity 2');
model.material('mat43').selection.set([3]);
model.material('mat43').propertyGroup('def').set('thermalconductivity', {'uc2_h/R_uc2'});
model.material('mat43').propertyGroup('def').set('density', {'1.23'});
model.material('mat43').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat44', 'Common', 'comp2');
model.material('mat44').label('Unventilated Cavity 3');
model.material('mat44').selection.set([6]);
model.material('mat44').propertyGroup('def').set('thermalconductivity', {'uc3_h/R_uc3'});
model.material('mat44').propertyGroup('def').set('density', {'1.23'});
model.material('mat44').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat45', 'Common', 'comp2');
model.material('mat45').label('Unventilated Cavity 4');
model.material('mat45').selection.set([7]);
model.material('mat45').propertyGroup('def').set('thermalconductivity', {'uc4_h/R_uc4'});
model.material('mat45').propertyGroup('def').set('density', {'1.23'});
model.material('mat45').propertyGroup('def').set('heatcapacity', {'1008'});
model.material.create('mat46', 'Common', 'comp2');
model.material('mat46').label('Unventilated Cavity 5');
model.material('mat46').selection.set([5]);
model.material('mat46').propertyGroup('def').set('thermalconductivity', {'uc5_h2/R_uc5'});
model.material('mat46').propertyGroup('def').set('density', {'1.23'});
model.material('mat46').propertyGroup('def').set('heatcapacity', {'1008'});

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/ht', false);
model.study('std2').feature('stat').setSolveFor('/physics/ht2', true);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('d1').label('Direct, heat transfer variables (ht2)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol2').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('s1').feature('i1').label('AMG, heat transfer variables (ht2)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('s1').set('stol', '1e-6');

model.result.dataset.remove('dset1');
model.result.dataset.remove('dset2');
model.result.dataset.remove('dset3');

model.title('Parameterized Roller Shutter, Preset Model');

model.description('This is a template MPH-file containing the physics interfaces and the parameterized geometry for the model Thermal Performances of Roller Shutters.');

model.label('roller_shutter_thermal_performances_preset.mph');

model.variable('var1').set('L2D', 'int_internal(ht.ntflux/(Te-Ti))', 'Thermal conductance of the frame');
model.variable('var1').set('L2D', 'int_internal(ht.ntflux/(Te-Ti))');
model.variable('var1').descr('L2D', 'Thermal conductance of the frame');

model.physics('ht').feature('fluid1').selection.set([2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40]);
model.physics('ht').prop('ShapeProperty').set('order_temperature', 2);
model.physics('ht').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf1').selection.named('sel39');
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', '1/Rse');
model.physics('ht').feature('hf1').set('Text', 'Te');
model.physics('ht').create('hf2', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf2').selection.named('sel40');
model.physics('ht').feature('hf2').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf2').set('h', '1/Rsi');
model.physics('ht').feature('hf2').set('Text', 'Ti');

model.result.dataset.create('dset1', 'Solution');
model.result.dataset('dset1').set('solution', 'sol1');
model.result.dataset('dset1').set('comp', 'none');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.dataset.create('dset2', 'Solution');
model.result.dataset('dset2').set('solution', 'sol1');
model.result.dataset('dset2').set('geom', 'geom2');
model.result.dataset('dset2').set('comp', 'comp2');

model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Temperature (ht)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').run;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Thermal Properties, Roller Shutter Box');
model.result.numerical('gev1').setIndex('expr', 'L2D', 0);
model.result.numerical('gev1').setIndex('descr', 'Thermal Conductance of the Section (L2D)', 0);
model.result.numerical('gev1').setIndex('expr', 'L2D/sb_htot', 1);
model.result.numerical('gev1').setIndex('descr', 'Thermal Transmittance of the Frame (Uf)', 1);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Thermal Properties, Roller Shutter Box');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result('pg1').run;
model.result('pg1').feature('surf1').set('unit', 'degC');
model.result('pg1').run;

model.variable('var2').set('L2D', 'int_internal(ht2.ntflux/(Te-Ti))', 'Thermal conductance of the frame');
model.variable('var2').set('L2D', 'int_internal(ht2.ntflux/(Te-Ti))');
model.variable('var2').descr('L2D', 'Thermal conductance of the frame');

model.physics('ht2').feature('fluid1').selection.set([2 3 5 6 7]);
model.physics('ht2').prop('ShapeProperty').set('order_temperature', 2);
model.physics('ht2').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht2').feature('hf1').selection.named('sel48');
model.physics('ht2').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht2').feature('hf1').set('h', '1/Rse');
model.physics('ht2').feature('hf1').set('Text', 'Te');
model.physics('ht2').create('hf2', 'HeatFluxBoundary', 1);
model.physics('ht2').feature('hf2').selection.named('sel47');
model.physics('ht2').feature('hf2').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht2').feature('hf2').set('h', '1/Rsi');
model.physics('ht2').feature('hf2').set('Text', 'Ti');

model.result.dataset.create('dset3', 'Solution');
model.result.dataset('dset3').set('solution', 'sol2');
model.result.dataset('dset3').set('comp', 'none');
model.result.dataset('dset3').set('geom', 'geom1');
model.result.dataset.create('dset4', 'Solution');
model.result.dataset('dset4').set('solution', 'sol2');
model.result.dataset('dset4').set('geom', 'geom2');
model.result.dataset('dset4').set('comp', 'comp2');
model.result.dataset.move('dset3', 2);
model.result.dataset('dset3').tag('dset3');
model.result.dataset.move('dset4', 3);
model.result.dataset('dset4').tag('dset4');

model.sol('sol2').runAll;

model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Temperature (ht2)');
model.result('pg2').set('data', 'dset4');
model.result('pg2').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solutionparams', 'parent');
model.result('pg2').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').run;
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').label('Thermal Properties, PVC Shutter Profile');
model.result.numerical('gev2').set('data', 'dset4');
model.result.numerical('gev2').setIndex('expr', 'L2D', 0);
model.result.numerical('gev2').setIndex('descr', 'Thermal Conductance of the Section (L2D)', 0);
model.result.numerical('gev2').setIndex('expr', 'L2D/s_wtot', 1);
model.result.numerical('gev2').setIndex('descr', 'Thermal Transmittance of the Frame (Uf)', 1);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Thermal Properties, PVC Shutter Profile');
model.result.numerical('gev2').set('table', 'tbl2');
model.result.numerical('gev2').setResult;
model.result('pg2').run;
model.result('pg2').feature('surf1').set('unit', 'degC');
model.result('pg2').run;
model.result('pg2').run;

model.title('Thermal Performances of Roller Shutters');

model.description('This benchmark reproduces the two test cases from the ISO 10077-2:2012 standard related to roller shutters. The thermal performance of each shutter is computed from its thermal conductance and thermal transmittance. Finally, the results are compared with given data for validation.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('roller_shutter_thermal_performances.mph');

model.modelNode.label('Components');

out = model;
