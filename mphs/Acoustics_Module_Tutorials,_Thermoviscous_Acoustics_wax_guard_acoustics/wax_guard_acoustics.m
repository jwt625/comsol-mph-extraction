function out = model
%
% wax_guard_acoustics.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Tutorials,_Thermoviscous_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ta', 'ThermoacousticsSinglePhysics', 'geom1');
model.physics('ta').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/ta', true);

model.param.label('Parameters: Model');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('T0', '20[degC]', 'Ambient temperature');
model.param.set('pA', '1[atm]', 'Ambient atmospheric pressure');
model.param.set('f0', '10000[Hz]', 'Maximum frequency');
model.param.set('dvisc', '0.22[mm]*sqrt(100[Hz]/f0)', 'Viscous boundary layer thickness at f0');
model.param.set('Vrec', '0.1[V]', 'Receiver voltage (peak)');
model.param.set('PortName', '1', 'Port name');
model.param.create('par2');
model.param('par2').label('Parameters: Tube Segments');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('L_in', '1[mm]', 'Inlet tube length');
model.param('par2').set('a_in', '0.5[mm]', 'Inlet tube radius');
model.param('par2').set('S_in', 'pi*a_in^2', 'Inlet tube cross section area');
model.param('par2').set('L_rt', '1.19[mm]', 'Receiver tube length');
model.param('par2').set('a_rt', '0.725[mm]', 'Receiver tube diameter');
model.param('par2').set('S_rt', 'pi*a_rt^2', 'Receiver tube cross section area');

model.variable.create('var1');
model.variable('var1').label('Variables: Narrow Tube Transfer Matrix');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('Zmic', 'Zmic_real(freq)+i*Zmic_imag(freq)', 'Microphone impedance');
model.variable('var1').set('omega', '2*pi*freq', 'Angular frequency');
model.variable('var1').set('mu', 'mat1.def.eta(T0)', 'Dynamic viscosity');
model.variable('var1').set('gamma', 'mat1.def.gamma', 'Ratio of specific heats');
model.variable('var1').set('Cp', 'mat1.def.Cp(T0)', 'Heat capacity at constant pressure');
model.variable('var1').set('rho', 'mat1.def.rho(pA,T0)', 'Density');
model.variable('var1').set('kcond', 'mat1.def.k(T0)', 'Thermal conductivity');
model.variable('var1').set('c', 'mat1.def.cs(T0)', 'Speed of sound');
model.variable('var1').set('k0', 'omega/c', 'Adiabatic wave number');
model.variable('var1').set('Z0', 'rho*c', 'Adiabatic characteristic impedance');
model.variable('var1').set('kv', 'sqrt(-i*omega*rho/mu)', 'Viscous wave number');
model.variable('var1').set('kth', 'sqrt(-i*omega*rho*Cp/kcond)', 'Thermal wave number');
model.variable('var1').set('Yv_in', '-besselj(2,kv*a_in)/besselj(0,kv*a_in)', 'Mean value of the scalar thermal field');
model.variable('var1').set('Yth_in', '-besselj(2,kth*a_in)/besselj(0,kth*a_in)', 'Mean value of the scalar viscous field');
model.variable('var1').set('Zc_in', 'Z0/sqrt(Yv_in*(gamma-(gamma-1)*Yth_in))', 'Mode characteristic impedance');
model.variable('var1').set('kc_sq_in', 'k0^2*(gamma-(gamma-1)*Yth_in)/Yv_in', 'Square of mode wave number');
model.variable('var1').set('kc_in', 'sqrt(kc_sq_in)', 'Mode wave number');
model.variable('var1').set('Yv_rt', '-besselj(2,kv*a_rt)/besselj(0,kv*a_rt)', 'Mean value of the scalar viscous field');
model.variable('var1').set('Yth_rt', '-besselj(2,kth*a_rt)/besselj(0,kth*a_rt)', 'Mean value of the scalar thermal field');
model.variable('var1').set('Zc_rt', 'Z0/sqrt(Yv_rt*(gamma-(gamma-1)*Yth_rt))', 'Mode characteristic impedance');
model.variable('var1').set('kc_sq_rt', 'k0^2*(gamma-(gamma-1)*Yth_rt)/Yv_rt', 'Square of mode wave number');
model.variable('var1').set('kc_rt', 'sqrt(kc_sq_rt)', 'Mode wave number');

model.material.create('mat1', 'Common', '');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.geom('geom1').geomRep('cadps');
model.geom('geom1').insertFile('wax_guard_acoustics_geom_sequence.mph', 'geom1');
model.geom('geom1').run('ige2');

model.material.create('matlnk1', 'Link', 'comp1');
model.material('matlnk1').label('Material Link: Air');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('All domains');
model.selection('sel1').all;
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Inlet (port 1)');
model.selection('sel2').geom(2);
model.selection('sel2').set([3]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Outlet (port 2)');
model.selection('sel3').geom(2);
model.selection('sel3').set([14]);
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('All exterior boundaries');
model.selection('adj1').set('input', {'sel1'});
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Walls (boundary layer mesh)');
model.selection('dif1').set('entitydim', 2);
model.selection('dif1').set('add', {'adj1'});
model.selection('dif1').set('subtract', {'sel2' 'sel3'});

model.physics('ta').feature('tam1').set('minput_pressure', 'pA');
model.physics('ta').feature('tam1').set('minput_temperature', 'T0');
model.physics('ta').create('port1', 'Port', 2);
model.physics('ta').feature('port1').selection.named('sel2');
model.physics('ta').feature('port1').set('PortType', 'Circular');
model.physics('ta').feature('port1').set('pamp', 1);
model.physics('ta').create('port2', 'Port', 2);
model.physics('ta').feature('port2').selection.named('sel3');
model.physics('ta').feature('port2').set('PortType', 'Circular');
model.physics('ta').prop('PortSweepSettings').set('PortSweep', 'StandardSweep');

model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(3);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 0.1);
model.mesh('mesh1').feature('size').set('hmin', 0.05);
model.mesh('mesh1').feature('size').set('hcurve', 0.5);
model.mesh('mesh1').feature('size').set('hnarrow', 1);
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('bl1').selection.set([2]);
model.mesh('mesh1').feature('bl1').set('sharpcorners', 'trim');
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('dif1');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 3);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', '0.5*dvisc');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').run;

model.study('std1').feature('freq').set('plist', '{100, 125, 160, 200, 250, 315, 400, 500, 630, 800, 1e3, 1.25e3, 1.6e3, 2e3, 2.5e3, 3.15e3, 4e3, 5e3, 6.3e3, 8e3, 1e4}');
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'a_in', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'a_in', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'PortName', 0);
model.study('std1').feature('param').setIndex('plistarr', '1 2', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'{100, 125, 160, 200, 250, 315, 400, 500, 630, 800, 1e3, 1.25e3, 1.6e3, 2e3, 2.5e3, 3.15e3, 4e3, 5e3, 6.3e3, 8e3, 1e4}'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ta)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with Direct Precon.) (ta)');
model.sol('sol1').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_p' 'comp1_Sparam1' 'comp1_Sparam2'});
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').feature('i1').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with DD) (ta)');
model.sol('sol1').feature('s1').feature('i2').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('domdofmax', 200000);
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('userac', false);
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('usecoarse', 'aggregation');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_p' 'comp1_Sparam1' 'comp1_Sparam2'});
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'PortName'});
model.batch('p1').set('plistarr', {'1 2'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol('sol1').feature('s1').feature('i1').active(true);
model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Acoustic Pressure (ta)');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 21, 0);
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 21, 0);
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg3');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').label('Multislice');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('colortable', 'Wave');
model.result('pg1').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').feature('mslc1').set('smooth', 'internal');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Acoustic Velocity (ta)');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 21, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 21, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg1');
model.result('pg2').feature.create('slc1', 'Slice');
model.result('pg2').feature('slc1').label('Slice');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('expr', 'ta.v_inst');
model.result('pg2').feature('slc1').set('smooth', 'internal');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('data', 'parent');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Temperature Variation (ta)');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 21, 0);
model.result('pg3').setIndex('looplevel', 2, 1);
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 21, 0);
model.result('pg3').setIndex('looplevel', 2, 1);
model.result('pg3').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg2');
model.result('pg3').feature.create('mslc1', 'Multislice');
model.result('pg3').feature('mslc1').label('Multislice');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('expr', 'ta.T_t');
model.result('pg3').feature('mslc1').set('colortable', 'ThermalWave');
model.result('pg3').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').feature('mslc1').set('smooth', 'internal');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('mslc1').set('colorscalemode', 'linear');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 11, 0);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 11, 0);
model.result('pg3').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').label('Full System T-matrix');

model.result.create('pg4', 'PlotGroup1D');

model.nodeGroup('grp1').add('plotgroup', 'pg4');

model.result('pg4').run;
model.result('pg4').label('Full System T11');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').setIndex('expr', 'real(ta.T11)', 0);
model.result('pg4').feature('glob1').setIndex('unit', 1, 0);
model.result('pg4').feature('glob1').setIndex('descr', 'real(T11)', 0);
model.result('pg4').feature('glob1').setIndex('expr', 'imag(ta.T11)', 1);
model.result('pg4').feature('glob1').setIndex('unit', 1, 1);
model.result('pg4').feature('glob1').setIndex('descr', 'imag(T11)', 1);
model.result('pg4').set('ylog', true);
model.result('pg4').set('xlog', true);
model.result('pg4').run;
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');

model.nodeGroup('grp1').add('plotgroup', 'pg5');

model.result('pg5').run;
model.result('pg5').label('Full System T12');
model.result('pg5').run;
model.result('pg5').feature('glob1').setIndex('expr', 'real(ta.T12)', 0);
model.result('pg5').feature('glob1').setIndex('unit', 'kg/(m^4*s)', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'real(T12)', 0);
model.result('pg5').feature('glob1').setIndex('expr', 'imag(ta.T12)', 1);
model.result('pg5').feature('glob1').setIndex('unit', 'kg/(m^4*s)', 1);
model.result('pg5').feature('glob1').setIndex('descr', 'imag(T12)', 1);
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');

model.nodeGroup('grp1').add('plotgroup', 'pg6');

model.result('pg6').run;
model.result('pg6').label('Full System T21');
model.result('pg6').run;
model.result('pg6').feature('glob1').setIndex('expr', 'real(ta.T21)', 0);
model.result('pg6').feature('glob1').setIndex('unit', 'm^4*s/kg', 0);
model.result('pg6').feature('glob1').setIndex('descr', 'real(T21)', 0);
model.result('pg6').feature('glob1').setIndex('expr', 'imag(ta.T21)', 1);
model.result('pg6').feature('glob1').setIndex('unit', 'm^4*s/kg', 1);
model.result('pg6').feature('glob1').setIndex('descr', 'imag(T21)', 1);
model.result('pg6').run;
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');

model.nodeGroup('grp1').add('plotgroup', 'pg7');

model.result('pg7').run;
model.result('pg7').label('Full System T22');
model.result('pg7').run;
model.result('pg7').feature('glob1').setIndex('expr', 'real(ta.T22)', 0);
model.result('pg7').feature('glob1').setIndex('unit', 1, 0);
model.result('pg7').feature('glob1').setIndex('descr', 'real(T22)', 0);
model.result('pg7').feature('glob1').setIndex('expr', 'imag(ta.T22)', 1);
model.result('pg7').feature('glob1').setIndex('unit', 1, 1);
model.result('pg7').feature('glob1').setIndex('descr', 'imag(T22)', 1);
model.result('pg7').run;

model.func.create('int1', 'Interpolation');
model.func('int1').label('Interpolation: Receiver T-matrix');
model.func('int1').set('source', 'file');
model.func('int1').set('filename', 'wax_guard_acoustics_T_receiver.csv');
model.func('int1').set('nargs', 1);
model.func('int1').setIndex('funcs', 'Trec11_real', 0, 0);
model.func('int1').setIndex('funcs', 1, 0, 1);
model.func('int1').setIndex('funcs', 'Trec11_imag', 1, 0);
model.func('int1').setIndex('funcs', 2, 1, 1);
model.func('int1').setIndex('funcs', 'Trec12_real', 2, 0);
model.func('int1').setIndex('funcs', 3, 2, 1);
model.func('int1').setIndex('funcs', 'Trec12_imag', 3, 0);
model.func('int1').setIndex('funcs', 4, 3, 1);
model.func('int1').setIndex('funcs', 'Trec21_real', 4, 0);
model.func('int1').setIndex('funcs', 5, 4, 1);
model.func('int1').setIndex('funcs', 'Trec21_imag', 5, 0);
model.func('int1').setIndex('funcs', 6, 5, 1);
model.func('int1').setIndex('funcs', 'Trec22_real', 6, 0);
model.func('int1').setIndex('funcs', 7, 6, 1);
model.func('int1').setIndex('funcs', 'Trec22_imag', 7, 0);
model.func('int1').setIndex('funcs', 8, 7, 1);
model.func('int1').setIndex('fununit', 1, 0);
model.func('int1').setIndex('fununit', 1, 1);
model.func('int1').setIndex('fununit', 1, 2);
model.func('int1').setIndex('fununit', 1, 3);
model.func('int1').setIndex('fununit', 1, 4);
model.func('int1').setIndex('fununit', 1, 5);
model.func('int1').setIndex('fununit', 1, 6);
model.func('int1').setIndex('fununit', 1, 7);
model.func('int1').setIndex('argunit', 'Hz', 0);
model.func('int1').importData;
model.func.create('int2', 'Interpolation');
model.func('int2').label('Interpolation: Coupler T-matrix');
model.func('int2').set('source', 'file');
model.func('int2').set('filename', 'wax_guard_acoustics_T_coupler.csv');
model.func('int2').set('nargs', 1);
model.func('int2').setIndex('funcs', 'Tcp11_real', 0, 0);
model.func('int2').setIndex('funcs', 1, 0, 1);
model.func('int2').setIndex('funcs', 'Tcp11_imag', 1, 0);
model.func('int2').setIndex('funcs', 2, 1, 1);
model.func('int2').setIndex('funcs', 'Tcp12_real', 2, 0);
model.func('int2').setIndex('funcs', 3, 2, 1);
model.func('int2').setIndex('funcs', 'Tcp12_imag', 3, 0);
model.func('int2').setIndex('funcs', 4, 3, 1);
model.func('int2').setIndex('funcs', 'Tcp21_real', 4, 0);
model.func('int2').setIndex('funcs', 5, 4, 1);
model.func('int2').setIndex('funcs', 'Tcp21_imag', 5, 0);
model.func('int2').setIndex('funcs', 6, 5, 1);
model.func('int2').setIndex('funcs', 'Tcp22_real', 6, 0);
model.func('int2').setIndex('funcs', 7, 6, 1);
model.func('int2').setIndex('funcs', 'Tcp22_imag', 7, 0);
model.func('int2').setIndex('funcs', 8, 7, 1);
model.func('int2').setIndex('fununit', 1, 0);
model.func('int2').setIndex('fununit', 1, 1);
model.func('int2').setIndex('fununit', 1, 2);
model.func('int2').setIndex('fununit', 1, 3);
model.func('int2').setIndex('fununit', 1, 4);
model.func('int2').setIndex('fununit', 1, 5);
model.func('int2').setIndex('fununit', 1, 6);
model.func('int2').setIndex('fununit', 1, 7);
model.func('int2').setIndex('argunit', 'Hz', 0);
model.func('int2').importData;
model.func.create('int3', 'Interpolation');
model.func('int3').label('Interpolation: Microphone Impedance');
model.func('int3').set('source', 'file');
model.func('int3').set('filename', 'wax_guard_acoustics_mic_impedance.csv');
model.func('int3').set('nargs', 1);
model.func('int3').setIndex('funcs', 'Zmic_real', 0, 0);
model.func('int3').setIndex('funcs', 1, 0, 1);
model.func('int3').setIndex('funcs', 'Zmic_imag', 1, 0);
model.func('int3').setIndex('funcs', 2, 1, 1);
model.func('int3').setIndex('fununit', 1, 0);
model.func('int3').setIndex('fununit', 1, 1);
model.func('int3').setIndex('argunit', 'Hz', 0);
model.func('int3').setIndex('argunit', 'Hz', 0);
model.func('int3').importData;
model.func.create('int4', 'Interpolation');
model.func('int4').label('Interpolation: Measurements');
model.func('int4').set('source', 'file');
model.func('int4').set('filename', 'wax_guard_acoustics_measurements.csv');
model.func('int4').set('nargs', 1);
model.func('int4').setIndex('funcs', 'pWGon_real', 0, 0);
model.func('int4').setIndex('funcs', 1, 0, 1);
model.func('int4').setIndex('funcs', 'pWGon_imag', 1, 0);
model.func('int4').setIndex('funcs', 2, 1, 1);
model.func('int4').setIndex('argunit', 'Hz', 0);
model.func('int4').setIndex('fununit', 'Pa', 0);
model.func('int4').importData;

model.common.create('matinv1', 'MatrixInverse', '');
model.common('matinv1').label('Matrix Inverse: Inlet Tube');
model.common('matinv1').set('size', '2');
model.common('matinv1').setIndex('matrix', 'cos(kc_in*L_in)', 0, 0);
model.common('matinv1').setIndex('matrix', '-Zc_in/(i*S_in)*sin(kc_in*L_in)', 0, 1);
model.common('matinv1').setIndex('matrix', 'i*S_in/Zc_in*sin(kc_in*L_in)', 1, 0);
model.common('matinv1').setIndex('matrix', 'cos(kc_in*L_in)', 1, 1);
model.common.create('mat1', 'Matrix', '');
model.common('mat1').label('Matrix: Wax Guard (model)');
model.common('mat1').set('name', 'Twg');
model.common('mat1').set('size', '2');
model.common('mat1').setIndex('matrix', 'matinv1.invT11*comp1.ta.T11+matinv1.invT12*comp1.ta.T21', 0, 0);
model.common('mat1').setIndex('matrix', 'matinv1.invT11*comp1.ta.T12+matinv1.invT12*comp1.ta.T22', 0, 1);
model.common('mat1').setIndex('matrix', 'matinv1.invT21*comp1.ta.T11+matinv1.invT22*comp1.ta.T21', 1, 0);
model.common('mat1').setIndex('matrix', 'matinv1.invT21*comp1.ta.T12+matinv1.invT22*comp1.ta.T22', 1, 1);
model.common.create('mat2', 'Matrix', '');
model.common('mat2').label('Matrix: Receiver');
model.common('mat2').set('name', 'Trec');
model.common('mat2').set('size', '2');
model.common('mat2').setIndex('matrix', 'Trec11_real(freq)+i*Trec11_imag(freq)', 0, 0);
model.common('mat2').setIndex('matrix', 'Trec12_real(freq)+i*Trec12_imag(freq)', 0, 1);
model.common('mat2').setIndex('matrix', 'Trec21_real(freq)+i*Trec21_imag(freq)', 1, 0);
model.common('mat2').setIndex('matrix', 'Trec22_real(freq)+i*Trec22_imag(freq)', 1, 1);
model.common.create('mat3', 'Matrix', '');
model.common('mat3').label('Matrix: Receiver Tube');
model.common('mat3').set('name', 'Trt');
model.common('mat3').set('size', '2');
model.common('mat3').setIndex('matrix', 'cos(kc_rt*L_rt)', 0, 0);
model.common('mat3').setIndex('matrix', '-Zc_rt/(i*S_rt)*sin(kc_rt*L_rt)', 0, 1);
model.common('mat3').setIndex('matrix', 'i*S_rt/Zc_rt*sin(kc_rt*L_rt)', 1, 0);
model.common('mat3').setIndex('matrix', 'cos(kc_rt*L_rt)', 1, 1);
model.common.create('mat4', 'Matrix', '');
model.common('mat4').label('Matrix: Coupler');
model.common('mat4').set('name', 'Tcp');
model.common('mat4').set('size', '2');
model.common('mat4').setIndex('matrix', 'Tcp11_real(freq)+i*Tcp11_imag(freq)', 0, 0);
model.common('mat4').setIndex('matrix', 'Tcp12_real(freq)+i*Tcp12_imag(freq)', 0, 1);
model.common('mat4').setIndex('matrix', 'Tcp21_real(freq)+i*Tcp21_imag(freq)', 1, 0);
model.common('mat4').setIndex('matrix', 'Tcp22_real(freq)+i*Tcp22_imag(freq)', 1, 1);

model.nodeGroup.create('grp2', 'GlobalDefinitions');
model.nodeGroup('grp2').label('Group: Matrix Products');

model.common.create('mat5', 'Matrix', '');

model.nodeGroup('grp2').add('common', 'mat5');

model.common('mat5').set('size', '2');
model.common('mat5').setIndex('matrix', 'Trec11*Trt11+Trec12*Trt21', 0, 0);
model.common('mat5').setIndex('matrix', 'Trec11*Trt12+Trec12*Trt22', 0, 1);
model.common('mat5').setIndex('matrix', 'Trec21*Trt11+Trec22*Trt21', 1, 0);
model.common('mat5').setIndex('matrix', 'Trec21*Trt12+Trec22*Trt22', 1, 1);
model.common.create('mat6', 'Matrix', '');

model.nodeGroup('grp2').add('common', 'mat6');

model.common('mat6').set('size', '2');
model.common('mat6').setIndex('matrix', 'T511*Twg11+T512*Twg21', 0, 0);
model.common('mat6').setIndex('matrix', 'T511*Twg12+T512*Twg22', 0, 1);
model.common('mat6').setIndex('matrix', 'T521*Twg11+T522*Twg21', 1, 0);
model.common('mat6').setIndex('matrix', 'T521*Twg12+T522*Twg22', 1, 1);
model.common.create('mat7', 'Matrix', '');

model.nodeGroup('grp2').add('common', 'mat7');

model.common('mat7').set('size', '2');
model.common('mat7').setIndex('matrix', 'T611*Tcp11+T612*Tcp21', 0, 0);
model.common('mat7').setIndex('matrix', 'T611*Tcp12+T612*Tcp22', 0, 1);
model.common('mat7').setIndex('matrix', 'T621*Tcp11+T622*Tcp21', 1, 0);
model.common('mat7').setIndex('matrix', 'T621*Tcp12+T622*Tcp22', 1, 1);

model.sol('sol1').updateSolution;
model.sol('sol2').updateSolution;

model.result('pg4').run;

model.nodeGroup.duplicate('grp3', 'grp1');
model.nodeGroup('grp3').label('Wax Guard T-matrix');

model.result('pg8').run;
model.result('pg8').label('Wax Guard T11');
model.result('pg8').run;
model.result('pg8').feature('glob1').setIndex('expr', 'real(Twg11)', 0);
model.result('pg8').feature('glob1').setIndex('unit', '', 0);
model.result('pg8').feature('glob1').setIndex('descr', 'real(T11)', 0);
model.result('pg8').feature('glob1').setIndex('expr', 'imag(Twg11)', 1);
model.result('pg8').feature('glob1').setIndex('unit', '', 1);
model.result('pg8').feature('glob1').setIndex('descr', 'imag(T11)', 1);
model.result('pg8').run;
model.result('pg9').run;
model.result('pg9').label('Wax Guard T12');
model.result('pg9').run;
model.result('pg9').feature('glob1').setIndex('expr', 'real(Twg12)', 0);
model.result('pg9').feature('glob1').setIndex('unit', '', 0);
model.result('pg9').feature('glob1').setIndex('descr', 'real(T12)', 0);
model.result('pg9').feature('glob1').setIndex('expr', 'imag(Twg12)', 1);
model.result('pg9').feature('glob1').setIndex('unit', '', 1);
model.result('pg9').feature('glob1').setIndex('descr', 'imag(T12)', 1);
model.result('pg9').run;
model.result('pg10').run;
model.result('pg10').label('Wax Guard T21');
model.result('pg10').run;
model.result('pg10').feature('glob1').setIndex('expr', 'real(Twg21)', 0);
model.result('pg10').feature('glob1').setIndex('unit', '', 0);
model.result('pg10').feature('glob1').setIndex('descr', 'real(T21)', 0);
model.result('pg10').feature('glob1').setIndex('expr', 'imag(Twg21)', 1);
model.result('pg10').feature('glob1').setIndex('unit', '', 1);
model.result('pg10').feature('glob1').setIndex('descr', 'imag(T21)', 1);
model.result('pg10').run;
model.result('pg11').run;
model.result('pg11').label('Wax Guard T22');
model.result('pg11').run;
model.result('pg11').feature('glob1').setIndex('expr', 'real(Twg22)', 0);
model.result('pg11').feature('glob1').setIndex('unit', '', 0);
model.result('pg11').feature('glob1').setIndex('descr', 'real(T22)', 0);
model.result('pg11').feature('glob1').setIndex('expr', 'imag(Twg22)', 1);
model.result('pg11').feature('glob1').setIndex('unit', '', 1);
model.result('pg11').feature('glob1').setIndex('descr', 'imag(T22)', 1);
model.result('pg11').run;
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').run;
model.result('pg12').label('Mesh');
model.result('pg12').create('mesh1', 'Mesh');
model.result('pg12').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg12').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg12').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg12').feature('mesh1').set('meshdomain', 'volume');
model.result('pg12').feature('mesh1').set('filteractive', true);
model.result('pg12').feature('mesh1').set('logfilterexpr', 'x>0');
model.result('pg12').run;
model.result.create('pg13', 'PlotGroup1D');
model.result('pg13').run;
model.result('pg13').label('Full System Response');
model.result('pg13').set('titletype', 'label');
model.result('pg13').set('ylabelactive', true);
model.result('pg13').set('ylabel', 'Microphone (dB SPL)');
model.result('pg13').set('xlog', true);
model.result('pg13').set('legendpos', 'upperleft');
model.result('pg13').create('glob1', 'Global');
model.result('pg13').feature('glob1').set('markerpos', 'datapoints');
model.result('pg13').feature('glob1').set('linewidth', 'preference');
model.result('pg13').feature('glob1').setIndex('expr', '20*log10(abs(pWGon_real(freq)+i*pWGon_imag(freq))/20e-6)', 0);
model.result('pg13').feature('glob1').setIndex('unit', '', 0);
model.result('pg13').feature('glob1').setIndex('descr', 'Measurements', 0);
model.result('pg13').feature('glob1').setIndex('expr', '20*log10(abs(Vrec/(T711+T712/Zmic))/20e-6)', 1);
model.result('pg13').feature('glob1').setIndex('unit', '', 1);
model.result('pg13').feature('glob1').setIndex('descr', 'Transfer matrix (model)', 1);
model.result('pg13').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Evaluation Group: Wax Guard, T-Matrix (real/imag)');
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').set('data', 'dset1');
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'real(Twg11)', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', '', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', '', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'imag(Twg11)', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', '', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', '', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'real(Twg12)', 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', '', 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', '', 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'imag(Twg12)', 3);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', '', 3);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', '', 3);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'real(Twg21)', 4);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', '', 4);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', '', 4);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'imag(Twg21)', 5);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', '', 5);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', '', 5);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'real(Twg22)', 6);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', '', 6);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', '', 6);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'imag(Twg22)', 7);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', '', 7);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', '', 7);
model.result.evaluationGroup('eg1').run;
model.result.create('pg14', 'PlotGroup3D');
model.result('pg14').run;
model.result('pg14').label('Thumbnail');
model.result('pg14').set('titletype', 'none');
model.result('pg14').set('edges', false);
model.result('pg14').create('slc1', 'Slice');
model.result('pg14').feature('slc1').set('expr', 'ta.v_inst');
model.result('pg14').feature('slc1').set('quickxnumber', 1);
model.result('pg14').run;
model.result('pg14').create('surf1', 'Surface');
model.result('pg14').feature('surf1').set('expr', '1');
model.result('pg14').feature('surf1').set('coloring', 'uniform');
model.result('pg14').feature('surf1').set('color', 'gray');
model.result('pg14').feature('surf1').create('sel1', 'Selection');
model.result('pg14').feature('surf1').feature('sel1').selection.set([7 8 9 10 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50]);
model.result('pg14').run;
model.result('pg14').create('line1', 'Line');
model.result('pg14').feature('line1').set('expr', '1');
model.result('pg14').feature('line1').set('coloring', 'uniform');
model.result('pg14').feature('line1').set('color', 'black');
model.result('pg14').feature('line1').create('sel1', 'Selection');
model.result('pg14').feature('line1').feature('sel1').selection.set([7 8 10 11 13 14 17 19 21 27 33 34 36 38 44 45 97 98 99 100 102 104 111 112]);
model.result('pg14').run;
model.result('pg14').setIndex('looplevel', 11, 0);
model.result('pg14').run;

model.title('Wax Guard Acoustics: Transfer Matrix Computation');

model.description(['In this tutorial, the acoustic properties of a wax guard are analyzed. A wax guard is a small perforated mesh used to protect the receiver (the miniature loudspeaker in a hearing aid) used for receiver-in-the-ear (RITE) or receiver-in-canal (RIC) hearing aids. Because of the very small dimensions of the structure the thermal and viscous boundary layer losses need to be included in detail, and therefore the Thermoviscous Acoustics, Frequency Domain interface is used.' newline  newline 'In the first step, the transfer matrix (or two-port) of the wax guard is computed using the Port Sweep functionality and the Port boundary conditions. The wax guard geometry is imported from a CAD file and prepared for simulation.' newline  newline 'In the second step, the response of the wax guard subsystem, when placed in a typical measurement setup, is computed and compared to actual measurements. This is done using the lumped transfer matrix approach. The computed wax guard transfer matrix is used together with other transfer matrix components for a receiver (miniature loudspeaker), a narrow pipe, and a coupler volume.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('wax_guard_acoustics.mph');

model.modelNode.label('Components');

out = model;
