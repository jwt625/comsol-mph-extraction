function out = model
%
% condensation_electronic_device.m
%
% Model exported on May 26 2025, 21:29 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Power_Electronics_and_Electronic_Cooling');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransferInSolidsAndFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics('ht').prop('PhysicalModelProperty').set('dz', '1[m]');
model.physics('ht').prop('ShapeProperty').set('order_temperature', '1');
model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'WeaklyCompressible');

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 2);
model.multiphysics('nitf1').set('Fluid_physics', 'spf');
model.multiphysics('nitf1').set('Heat_physics', 'ht');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/ht', true);
model.study('std1').feature('time').setSolveFor('/physics/spf', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/nitf1', true);

model.geom('geom1').insertFile('condensation_electronic_device_geom_sequence.mph', 'geom1');
model.geom('geom1').run('sel1');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').label('Aluminum');
model.material('mat1').set('family', 'aluminum');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat1').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.33');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-350[GPa]');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat2').label('Silica glass');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customambient', [1 1 1]);
model.material('mat2').set('noise', true);
model.material('mat2').set('fresnel', 0.99);
model.material('mat2').set('roughness', 0.02);
model.material('mat2').set('metallic', 0);
model.material('mat2').set('pearl', 0);
model.material('mat2').set('diffusewrap', 0);
model.material('mat2').set('clearcoat', 0);
model.material('mat2').set('reflectance', 0);
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'1e-14[S/m]' '0' '0' '0' '1e-14[S/m]' '0' '0' '0' '1e-14[S/m]'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'0.55e-6[1/K]' '0' '0' '0' '0.55e-6[1/K]' '0' '0' '0' '0.55e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '703[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'3.75' '0' '0' '0' '3.75' '0' '0' '0' '3.75'});
model.material('mat2').propertyGroup('def').set('density', '2203[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'1.38[W/(m*K)]' '0' '0' '0' '1.38[W/(m*K)]' '0' '0' '0' '1.38[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '73.1[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.17');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'1.45' '0' '0' '0' '1.45' '0' '0' '0' '1.45'});
model.material('mat1').selection.set([1 3]);
model.material('mat2').selection.set([4]);

model.common.create('ampr1', 'AmbientProperties', 'comp1');
model.common('ampr1').set('AmbientData', 'MeteorologicalData2021');
model.common('ampr1').setIndex('ashrae2021LocalTime', 0, 0);
model.common('ampr1').set('ashrae2021Temperature', 'Low');

model.physics('ht').create('ma1', 'MoistAirHeatTransferModel', 2);
model.physics('ht').feature('ma1').selection.set([2]);
model.physics('ht').feature('ma1').set('phi_cond_match_src', 'root.comp1.ampr1.phi_amb');
model.physics('ht').feature('ma1').set('T_cond_match_src', 'root.comp1.ampr1.T_amb');
model.physics('ht').feature('ma1').set('p_cond_match_src', 'root.comp1.ampr1.p_amb');
model.physics('ht').feature('init1').set('Tinit_src', 'root.comp1.ampr1.T_amb');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf1').selection.set([1 2 5 7 21 23]);
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 10);
model.physics('ht').feature('hf1').set('Text_src', 'root.comp1.ampr1.T_amb');
model.physics('ht').create('hs1', 'HeatSource', 2);
model.physics('ht').feature('hs1').selection.named('geom1_r1_dom');
model.physics('ht').feature('hs1').set('heatSourceType', 'HeatRate');
model.physics('ht').feature('hs1').set('P0', 1);
model.physics('ht').create('open1', 'OpenBoundary', 1);
model.physics('ht').feature('open1').selection.set([3 22]);
model.physics('ht').feature('open1').set('Tustr_src', 'root.comp1.ampr1.T_amb');
model.physics('spf').selection.named('geom1_sel1');
model.physics('spf').prop('PhysicalModelProperty').set('IncludeGravity', true);
model.physics('spf').feature('fp1').set('mu_mat', 'root.comp1.ht.mu_moist');
model.physics('spf').feature('init1').set('p_init', 'ampr1.p_amb-spf.pref');
model.physics('spf').create('open1', 'OpenBoundary', 1);
model.physics('spf').feature('open1').selection.set([3 22]);
model.physics('spf').feature('open1').set('f0', 'ampr1.p_amb-spf.pref');

model.probe.create('dom1', 'Domain');
model.probe('dom1').model('comp1');
model.probe('dom1').set('intsurface', true);
model.probe('dom1').set('intvolume', true);
model.probe('dom1').selection.set([]);
model.probe('dom1').selection.named('geom1_sel1');
model.probe('dom1').set('type', 'maximum');
model.probe('dom1').set('expr', 'ht.phi');
model.probe('dom1').set('descr', 'Relative humidity');
model.probe.create('dom2', 'Domain');
model.probe('dom2').model('comp1');
model.probe('dom2').set('intsurface', true);
model.probe('dom2').set('intvolume', true);
model.probe('dom2').selection.set([]);
model.probe('dom2').selection.named('geom1_sel1');
model.probe('dom2').set('type', 'maximum');
model.probe('dom2').set('expr', 'ht.satInd');
model.probe('dom2').set('descr', 'Saturation indicator');

model.study('std1').feature('time').set('tunit', 'h');
model.study('std1').feature('time').set('tlist', 'range(0,0.5,24)');
model.study('std1').feature('time').set('usertol', true);
model.study('std1').feature('time').set('rtol', '0.0005');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.5,24)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {'dom1' 'dom2'});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 5.0E-4);
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_nitf1_Uave' 'global' 'comp1_p' 'scaled' 'comp1_T' 'global' 'comp1_u' 'global'});
model.sol('sol1').feature('t1').set('atol', {'comp1_nitf1_Uave' '1e-3' 'comp1_p' '1e-3' 'comp1_T' '1e-3' 'comp1_u' '1e-3'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_nitf1_Uave' 'factor' 'comp1_p' 'factor' 'comp1_T' 'factor' 'comp1_u' 'factor'});
model.sol('sol1').feature('t1').set('atolfactor', {'comp1_nitf1_Uave' '0.1' 'comp1_p' '1' 'comp1_T' '0.1' 'comp1_u' '0.1'});
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('rhoinf', 0.5);
model.sol('sol1').feature('t1').set('predictor', 'constant');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.01');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.5);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, nonisothermal flow (nitf1) (Merged)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 100);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, nonisothermal flow (nitf1)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.5);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol1').feature('t1').set('maxstepbdf', 0.25);

model.probe('dom1').genResult('none');
model.probe('dom2').genResult('none');

model.sol('sol1').runAll;

model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Temperature (ht)');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 49, 0);
model.result('pg2').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solutionparams', 'parent');
model.result('pg2').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Velocity (spf)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 49, 0);
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'spf.U');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Pressure (spf)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 49, 0);
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg4').feature.create('con1', 'Contour');
model.result('pg4').feature('con1').label('Contour');
model.result('pg4').feature('con1').set('showsolutionparams', 'on');
model.result('pg4').feature('con1').set('expr', 'p');
model.result('pg4').feature('con1').set('number', 40);
model.result('pg4').feature('con1').set('levelrounding', false);
model.result('pg4').feature('con1').set('smooth', 'internal');
model.result('pg4').feature('con1').set('showsolutionparams', 'on');
model.result('pg4').feature('con1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Temperature and Fluid Flow (nitf1)');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 49, 0);
model.result('pg5').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond4/pcond1/pg3');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').label('Fluid Temperature');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('expr', 'nitf1.T');
model.result('pg5').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg5').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg5').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg5').feature('surf1').feature('sel1').selection.set([2]);
model.result('pg5').feature.create('surf2', 'Surface');
model.result('pg5').feature('surf2').label('Solid Temperature');
model.result('pg5').feature('surf2').set('showsolutionparams', 'on');
model.result('pg5').feature('surf2').set('solutionparams', 'parent');
model.result('pg5').feature('surf2').set('expr', 'nitf1.T');
model.result('pg5').feature('surf2').set('smooth', 'internal');
model.result('pg5').feature('surf2').set('showsolutionparams', 'on');
model.result('pg5').feature('surf2').set('data', 'parent');
model.result('pg5').feature('surf2').feature.create('sel1', 'Selection');
model.result('pg5').feature('surf2').feature('sel1').selection.geom('geom1', 2);
model.result('pg5').feature('surf2').feature('sel1').selection.set([1 3 4]);
model.result('pg5').feature('surf2').set('inheritplot', 'surf1');
model.result('pg5').feature.create('arws1', 'ArrowSurface');
model.result('pg5').feature('arws1').label('Fluid Flow');
model.result('pg5').feature('arws1').set('showsolutionparams', 'on');
model.result('pg5').feature('arws1').set('solutionparams', 'parent');
model.result('pg5').feature('arws1').set('expr', {'nitf1.ux' 'nitf1.uy'});
model.result('pg5').feature('arws1').set('xnumber', 30);
model.result('pg5').feature('arws1').set('ynumber', 30);
model.result('pg5').feature('arws1').set('arrowtype', 'cone');
model.result('pg5').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('arws1').set('showsolutionparams', 'on');
model.result('pg5').feature('arws1').set('data', 'parent');
model.result('pg5').feature('arws1').feature.create('col1', 'Color');
model.result('pg5').feature('arws1').feature('col1').set('showcolordata', 'off');
model.result('pg5').feature('arws1').feature('col1').set('expr', 'spf.U');
model.result('pg5').feature('arws1').feature.create('filt1', 'Filter');
model.result('pg5').feature('arws1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('surf1').set('unit', 'degF');
model.result('pg3').run;
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').run;
model.result('pg6').label('Relative Humidity');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'ht.phi');
model.result('pg6').feature('surf1').set('descr', 'Relative humidity');
model.result('pg6').feature('surf1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg6').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg6').run;
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result('pg1').label('Maximum Relative Humidity');
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result('pg1').feature('tblp1').set('legendmethod', 'manual');
model.result('pg1').feature('tblp1').setIndex('legends', 'Maximum Relative Humidity', 0);
model.result('pg1').feature('tblp1').setIndex('legends', 'Saturation Indicator', 1);
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result('pg1').set('legendpos', 'lowerright');
model.result('pg1').set('window', 'graphics');
model.result('pg1').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Ambient Temperature');
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', ['ampr1.T_amb (' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'F)']);
model.result('pg7').create('ptgr1', 'PointGraph');
model.result('pg7').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr1').set('linewidth', 'preference');
model.result('pg7').feature('ptgr1').selection.set([10]);
model.result('pg7').feature('ptgr1').set('expr', 'ampr1.T_amb');
model.result('pg7').feature('ptgr1').set('unit', 'degF');
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Ambient Relative Humidity');
model.result('pg8').set('titletype', 'manual');
model.result('pg8').set('title', 'ampr1.phi_amb (1)');
model.result('pg8').create('ptgr1', 'PointGraph');
model.result('pg8').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg8').feature('ptgr1').set('linewidth', 'preference');
model.result('pg8').feature('ptgr1').selection.set([10]);
model.result('pg8').feature('ptgr1').set('expr', 'ampr1.phi_amb');
model.result('pg8').run;
model.result('pg2').run;

model.title('Condensation Detection in an Electronic Device');

model.description('This example simulates the thermodynamical evolution of moist air in an electronic box with the aim of detecting whether condensation occurs when the external environment properties change. The model imports measured data for the air temperature, pressure, and water vapor concentration. The water vapor concentration is considered to be homogeneous inside the box and equal to the external concentration.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('condensation_electronic_device.mph');

model.modelNode.label('Components');

out = model;
