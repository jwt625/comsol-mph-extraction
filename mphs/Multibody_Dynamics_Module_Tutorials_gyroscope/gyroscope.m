function out = model
%
% gyroscope.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/mbd', true);

model.modelNode('comp1').label('Component 1: Gyroscope');

model.param.set('omega', '350[rad/s]');
model.param.descr('omega', 'Angular velocity');
model.param.set('theta0', '20[deg]');
model.param.descr('theta0', 'Inclination angle of spinning top');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'gyroscope.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('createpairs', false);
model.geom('geom1').run('fin');

model.func.create('wv1', 'Wave');
model.func('wv1').model('comp1');
model.func('wv1').set('period', '0.5[s]');
model.func('wv1').set('amplitude', 2);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').label('Aluminum');
model.material('mat1').set('family', 'aluminum');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat1').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.33');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-350[GPa]');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat2').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat2').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat2').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat2').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat2').propertyGroup.create('Swift', 'Swift');
model.material('mat2').propertyGroup.create('Voce', 'Voce');
model.material('mat2').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat2').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat2').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('Norton', 'Norton');
model.material('mat2').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat2').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat2').label('Structural steel');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat2').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat2').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat2').set('noise', true);
model.material('mat2').set('fresnel', 0.9);
model.material('mat2').set('roughness', 0.3);
model.material('mat2').set('metallic', 0);
model.material('mat2').set('pearl', 0);
model.material('mat2').set('diffusewrap', 0);
model.material('mat2').set('clearcoat', 0);
model.material('mat2').set('reflectance', 0);
model.material('mat2').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat2').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat2').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat2').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat2').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat2').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat2').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat2').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat2').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat2').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat2').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat2').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat2').propertyGroup('Enu').addInput('temperature');
model.material('mat2').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat2').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat2').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat2').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat2').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat2').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat2').propertyGroup('Ludwik').addInput('temperature');
model.material('mat2').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat2').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat2').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat2').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat2').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat2').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat2').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat2').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat2').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat2').propertyGroup('Voce').addInput('temperature');
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat2').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat2').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat2').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat2').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat2').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat2').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat2').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat2').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat2').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat2').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat2').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat2').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat2').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat2').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');
model.material('mat2').selection.set([3]);

model.physics('mbd').create('rd1', 'RigidDomain', 3);
model.physics('mbd').feature('rd1').label('Rigid Material: Frame');
model.physics('mbd').feature('rd1').selection.set([2]);
model.physics('mbd').feature('rd1').create('pdr1', 'PrescribedDispRot', -1);
model.physics('mbd').feature('rd1').feature('pdr1').setIndex('Direction', true, 0);
model.physics('mbd').feature('rd1').feature('pdr1').setIndex('Direction', true, 1);
model.physics('mbd').feature('rd1').feature('pdr1').setIndex('Direction', true, 2);
model.physics('mbd').feature('rd1').feature('pdr1').set('RotationType', 'PrescribedRotationGroup');
model.physics('mbd').feature('rd1').feature('pdr1').set('Omega', [1 1 0]);
model.physics('mbd').feature('rd1').feature('pdr1').set('phi0', 'wv1(t)');
model.physics('mbd').create('rd2', 'RigidDomain', 3);
model.physics('mbd').feature('rd2').label('Rigid Material: Outer Gimbal');
model.physics('mbd').feature('rd2').selection.set([1]);
model.physics('mbd').create('rd3', 'RigidDomain', 3);
model.physics('mbd').feature('rd3').label('Rigid Material: Inner Gimbal');
model.physics('mbd').feature('rd3').selection.set([4]);
model.physics('mbd').create('rd4', 'RigidDomain', 3);
model.physics('mbd').feature('rd4').label('Rigid Material: Spinning Disc');
model.physics('mbd').feature('rd4').selection.set([3]);
model.physics('mbd').feature('rd4').set('InitialValueType', 'locallyDefined');
model.physics('mbd').feature('rd4').feature('init1').set('omega', {'0' '0' 'omega'});

model.nodeGroup.create('grp1', 'Physics', 'mbd');
model.nodeGroup('grp1').placeAfter('init1');
model.nodeGroup('grp1').add('rd1');
model.nodeGroup('grp1').add('rd2');
model.nodeGroup('grp1').add('rd3');
model.nodeGroup('grp1').add('rd4');
model.nodeGroup('grp1').label('Rigid Materials');

model.physics('mbd').create('hgj1', 'HingeJoint', -1);
model.physics('mbd').feature('hgj1').label('Frame-Outer Gimbal');
model.physics('mbd').feature('hgj1').set('Source', 'rd1');
model.physics('mbd').feature('hgj1').set('Destination', 'rd2');
model.physics('mbd').feature('hgj1').set('CenterOfJointType', 'UserDefined');
model.physics('mbd').feature.duplicate('hgj2', 'hgj1');
model.physics('mbd').feature('hgj2').label('Outer Gimbal-Inner Gimbal');
model.physics('mbd').feature('hgj2').set('Source', 'rd2');
model.physics('mbd').feature('hgj2').set('Destination', 'rd3');
model.physics('mbd').feature('hgj2').set('e', [0 1 0]);
model.physics('mbd').feature.duplicate('hgj3', 'hgj2');
model.physics('mbd').feature('hgj3').label('Inner Gimbal-Spinning Disc');
model.physics('mbd').feature('hgj3').set('Source', 'rd3');
model.physics('mbd').feature('hgj3').set('Destination', 'rd4');
model.physics('mbd').feature('hgj3').set('e', [0 0 1]);

model.nodeGroup.create('grp2', 'Physics', 'mbd');
model.nodeGroup('grp2').placeAfter('init1');
model.nodeGroup('grp2').add('hgj1');
model.nodeGroup('grp2').add('hgj2');
model.nodeGroup('grp2').add('hgj3');
model.nodeGroup('grp2').label('Hinge Joints');

model.mesh('mesh1').autoMeshSize(4);
model.mesh('mesh1').run;

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('theta', 'acos(mbd.hgj3.e1z)');
model.variable('var1').descr('theta', 'Inclination angle of spinning disc');

model.view('view1').set('showgrid', false);

model.study('std1').label('Study 1: Gyroscope');
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'omega', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'rad/s', 0);
model.study('std1').feature('param').setIndex('pname', 'omega', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'rad/s', 0);
model.study('std1').feature('param').setIndex('plistarr', '0 350', 0);
model.study('std1').feature('param').setIndex('punit', 'rad/s', 0);
model.study('std1').feature('time').set('tlist', 'range(0,0.0025,0.25)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.003113157561062402');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.3113157561062402');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.0025,0.25)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'omega'});
model.batch('p1').set('plistarr', {'0 350'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol('sol1').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol1').feature('t1').set('maxstepbdf', '1e-4+9e-4*(omega==0)');
model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Displacement (mbd)');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 101, 0);
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 101, 0);
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (mbd)');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 101, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 101, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').set('defaultPlotID', 'velocity');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').label('Volume');
model.result('pg2').feature('vol1').set('expr', 'mod(dom,10)');
model.result('pg2').feature('vol1').set('unit', '1');
model.result('pg2').feature('vol1').set('colortable', 'Cyclic');
model.result('pg2').feature('vol1').set('colorlegend', false);
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg2').feature('vol1').feature.create('def1', 'Deform');
model.result('pg2').feature('vol1').feature('def1').label('Deformation');
model.result('pg2').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg2').feature.create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').label('Arrow Line');
model.result('pg2').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY' 'mbd.u_tZ'});
model.result('pg2').feature('arwl1').set('placement', 'elements');
model.result('pg2').feature('arwl1').set('data', 'parent');
model.result('pg2').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg2').feature('arwl1').feature('def1').label('Deformation');
model.result('pg2').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg1').run;
model.result('pg1').set('looplevel', [101 1]);
model.result('pg1').run;
model.result('pg1').set('looplevel', [101 2]);
model.result('pg1').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').label('Animation: Not spinning gyro');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('maxframes', 50);
model.result.export.create('anim2', 'Animation');
model.result.export('anim2').set('fontsize', '9');
model.result.export('anim2').set('colortheme', 'globaltheme');
model.result.export('anim2').set('customcolor', [1 1 1]);
model.result.export('anim2').set('background', 'color');
model.result.export('anim2').set('gltfincludelines', 'on');
model.result.export('anim2').set('title1d', 'on');
model.result.export('anim2').set('legend1d', 'on');
model.result.export('anim2').set('logo1d', 'on');
model.result.export('anim2').set('options1d', 'on');
model.result.export('anim2').set('title2d', 'on');
model.result.export('anim2').set('legend2d', 'on');
model.result.export('anim2').set('logo2d', 'on');
model.result.export('anim2').set('options2d', 'off');
model.result.export('anim2').set('title3d', 'on');
model.result.export('anim2').set('legend3d', 'on');
model.result.export('anim2').set('logo3d', 'on');
model.result.export('anim2').set('options3d', 'off');
model.result.export('anim2').set('axisorientation', 'on');
model.result.export('anim2').set('grid', 'on');
model.result.export('anim2').set('axes1d', 'on');
model.result.export('anim2').set('axes2d', 'on');
model.result.export('anim2').set('showgrid', 'on');
model.result.export('anim2').label('Animation: Spinning gyro');
model.result.export('anim2').set('target', 'player');
model.result.export('anim2').set('maxframes', 50);
model.result.export('anim2').setIndex('singlelooplevel', 2, 1);
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Spinning disc orientation');
model.result('pg3').set('data', 'dset2');
model.result('pg3').set('titletype', 'label');
model.result('pg3').set('legendpos', 'upperleft');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').set('expr', {'theta'});
model.result('pg3').feature('glob1').set('descr', {'Inclination angle of spinning disc'});
model.result('pg3').feature('glob1').set('unit', {'rad'});
model.result('pg3').feature('glob1').setIndex('unit', 'deg', 0);
model.result('pg3').feature('glob1').setIndex('descr', 'Inclination angle of spinning disc', 0);
model.result('pg3').feature('glob1').set('linewidth', 2);
model.result('pg3').feature('glob1').set('linemarker', 'cycle');
model.result('pg3').feature('glob1').set('markerpos', 'interp');
model.result('pg3').feature('glob1').set('markers', 25);
model.result('pg3').feature('glob1').set('legendmethod', 'manual');
model.result('pg3').feature('glob1').setIndex('legends', 'Without spinning', 0);
model.result('pg3').feature('glob1').setIndex('legends', 'With spinning', 1);
model.result('pg3').run;

model.modelNode.create('comp2', true);

model.geom.create('geom2', 3);
model.geom('geom2').model('comp2');

model.mesh.create('mesh2', 'geom2');

model.modelNode('comp2').label('Component 2: Spinning top');

model.geom('geom2').create('imp1', 'Import');
model.geom('geom2').feature('imp1').set('filename', 'gyroscope.mphbin');
model.geom('geom2').feature('imp1').importData;
model.geom('geom2').create('del1', 'Delete');
model.geom('geom2').feature('del1').selection('input').init(3);
model.geom('geom2').feature('del1').selection('input').set('imp1(1)', 1);
model.geom('geom2').feature('del1').selection('input').set('imp1(2)', 1);
model.geom('geom2').feature('del1').selection('input').set('imp1(4)', 1);
model.geom('geom2').run('del1');
model.geom('geom2').create('rot1', 'Rotate');
model.geom('geom2').feature('rot1').selection('input').set({'imp1(3)'});
model.geom('geom2').feature('rot1').set('rot', '-theta0');
model.geom('geom2').feature('rot1').set('pos', [0 0 -0.0835]);
model.geom('geom2').feature('rot1').set('axistype', 'x');
model.geom('geom2').runPre('fin');

model.coordSystem.create('sys3', 'geom2', 'Rotated');

model.geom('geom2').run;

model.coordSystem('sys3').set('angle', {'0' '-theta0' '0'});

model.material.create('mat3', 'Common', 'comp2');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat3').label('Aluminum');
model.material('mat3').set('family', 'aluminum');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat3').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.33');
model.material('mat3').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat3').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat3').propertyGroup('Murnaghan').set('n', '-350[GPa]');

model.physics.create('mbd2', 'MultibodyDynamics', 'geom2');
model.physics('mbd2').model('comp2');

model.study('std1').feature('time').setSolveFor('/physics/mbd2', false);

model.physics('mbd2').create('rd1', 'RigidDomain', 3);
model.physics('mbd2').feature('rd1').selection.set([1]);
model.physics('mbd2').feature('rd1').set('InitialValueType', 'locallyDefined');
model.physics('mbd2').feature('rd1').feature('init1').set('coordinateSystem', 'sys3');
model.physics('mbd2').feature('rd1').feature('init1').set('omega', {'0' '0' 'omega'});
model.physics('mbd2').feature('rd1').feature('init1').set('CenterOfRotationType', 'CentroidOfSelectedEntities');
model.physics('mbd2').feature('rd1').feature('init1').set('EntityLevel', 'Point');
model.physics('mbd2').feature('rd1').feature('init1').feature('crp1').selection.set([23]);
model.physics('mbd2').feature('rd1').create('pdr1', 'PrescribedDispRot', -1);
model.physics('mbd2').feature('rd1').feature('pdr1').setIndex('Direction', true, 0);
model.physics('mbd2').feature('rd1').feature('pdr1').setIndex('Direction', true, 1);
model.physics('mbd2').feature('rd1').feature('pdr1').setIndex('Direction', true, 2);
model.physics('mbd2').feature('rd1').feature('pdr1').set('CenterOfRotationType', 'CentroidOfSelectedEntities');
model.physics('mbd2').feature('rd1').feature('pdr1').set('EntityLevel', 'Point');
model.physics('mbd2').feature('rd1').feature('pdr1').feature('crp1').selection.set([23]);
model.physics('mbd2').create('gacc1', 'GravityAcceleration', -1);

model.variable.create('var2');
model.variable('var2').model('comp2');
model.variable('var2').set('th', 'atan2(y,x)');
model.variable('var2').descr('th', 'Precession angle');
model.variable('var2').set('vp', 'cos(th+pi/2)*mbd2.u_tX+sin(th+pi/2)*mbd2.u_tY');
model.variable('var2').descr('vp', 'Precession velocity');
model.variable('var2').set('vn', 'cos(th)*mbd2.u_tX+sin(th)*mbd2.u_tY');
model.variable('var2').descr('vn', 'Nutation velocity');

model.view('view2').set('showgrid', false);

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/mbd', false);
model.study('std2').feature('time').setSolveFor('/physics/mbd2', true);
model.study('std2').label('Study 2: Spinning top');
model.study('std2').feature('time').set('tlist', 'range(0,0.007,1.4)');

model.sol.create('sol5');
model.sol('sol5').study('std2');
model.sol('sol5').create('st1', 'StudyStep');
model.sol('sol5').feature('st1').set('study', 'std2');
model.sol('sol5').feature('st1').set('studystep', 'time');
model.sol('sol5').create('v1', 'Variables');
model.sol('sol5').feature('v1').feature('comp2_u2').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp2_mbd_rd_rot2').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp2_mbd_rd_disp2').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp2_mbd_rd_rot2').set('resscalemethod', 'parent');
model.sol('sol5').feature('v1').feature('comp2_mbd_rd_disp2').set('resscalemethod', 'parent');
model.sol('sol5').feature('v1').feature('comp2_u2').set('scaleval', '1e-2*0.21125640358611167');
model.sol('sol5').feature('v1').feature('comp2_mbd_rd_rot2').set('scaleval', '0.1');
model.sol('sol5').feature('v1').feature('comp2_mbd_rd_disp2').set('scaleval', '0.0021125640358611165');
model.sol('sol5').feature('v1').set('control', 'time');
model.sol('sol5').create('t1', 'Time');
model.sol('sol5').feature('t1').set('tlist', 'range(0,0.007,1.4)');
model.sol('sol5').feature('t1').set('plot', 'off');
model.sol('sol5').feature('t1').set('plotgroup', 'pg1');
model.sol('sol5').feature('t1').set('plotfreq', 'tout');
model.sol('sol5').feature('t1').set('probesel', 'all');
model.sol('sol5').feature('t1').set('probes', {});
model.sol('sol5').feature('t1').set('probefreq', 'tsteps');
model.sol('sol5').feature('t1').set('rtol', 0.001);
model.sol('sol5').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol5').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol5').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol5').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol5').feature('t1').set('eventtol', 0.01);
model.sol('sol5').feature('t1').set('reacf', true);
model.sol('sol5').feature('t1').set('storeudot', true);
model.sol('sol5').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol5').feature('t1').set('endtimeinterpolation', true);
model.sol('sol5').feature('t1').set('maxorder', 2);
model.sol('sol5').feature('t1').set('minorder', 1);
model.sol('sol5').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol5').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol5').feature('t1').set('control', 'time');
model.sol('sol5').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol5').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol5').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol5').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol5').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol5').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol5').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol5').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol5').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol5').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol5').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol5').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol5').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol5').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol5').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol5').feature('t1').feature.remove('fcDef');
model.sol('sol5').attach('std2');
model.sol('sol5').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol5').feature('t1').set('maxstepbdf', '1e-4');
model.sol('sol5').runAll;

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Displacement (mbd2)');
model.result('pg4').set('data', 'dset4');
model.result('pg4').setIndex('looplevel', 201, 0);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset4');
model.result('pg4').setIndex('looplevel', 201, 0);
model.result('pg4').set('defaultPlotID', 'displacement');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Surface');
model.result('pg4').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result('pg4').feature('surf1').feature.create('def1', 'Deform');
model.result('pg4').feature('surf1').feature('def1').label('Deformation');
model.result('pg4').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Velocity (mbd2)');
model.result('pg5').set('data', 'dset4');
model.result('pg5').setIndex('looplevel', 201, 0);
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('data', 'dset4');
model.result('pg5').setIndex('looplevel', 201, 0);
model.result('pg5').set('defaultPlotID', 'velocity');
model.result('pg5').feature.create('vol1', 'Volume');
model.result('pg5').feature('vol1').label('Volume');
model.result('pg5').feature('vol1').set('expr', 'mod(dom,10)');
model.result('pg5').feature('vol1').set('unit', '1');
model.result('pg5').feature('vol1').set('colortable', 'Cyclic');
model.result('pg5').feature('vol1').set('colorlegend', false);
model.result('pg5').feature('vol1').set('data', 'parent');
model.result('pg5').feature('vol1').feature.create('def1', 'Deform');
model.result('pg5').feature('vol1').feature('def1').label('Deformation');
model.result('pg5').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg5').feature.create('arwl1', 'ArrowLine');
model.result('pg5').feature('arwl1').label('Arrow Line');
model.result('pg5').feature('arwl1').set('expr', {'mbd2.u_tX' 'mbd2.u_tY' 'mbd2.u_tZ'});
model.result('pg5').feature('arwl1').set('placement', 'elements');
model.result('pg5').feature('arwl1').set('data', 'parent');
model.result('pg5').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg5').feature('arwl1').feature('def1').label('Deformation');
model.result('pg5').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg4').run;
model.result('pg4').create('pttraj1', 'PointTrajectories');
model.result('pg4').feature('pttraj1').selection.set([36]);
model.result('pg4').feature('pttraj1').set('linetype', 'tube');
model.result('pg4').feature('pttraj1').create('col1', 'Color');
model.result('pg4').run;
model.result('pg4').feature('pttraj1').feature('col1').set('expr', 't');
model.result('pg4').feature('pttraj1').feature('col1').set('colorlegend', false);
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 126, 0);
model.result('pg4').run;
model.result.export.create('anim3', 'Animation');
model.result.export('anim3').set('fontsize', '9');
model.result.export('anim3').set('colortheme', 'globaltheme');
model.result.export('anim3').set('customcolor', [1 1 1]);
model.result.export('anim3').set('background', 'color');
model.result.export('anim3').set('gltfincludelines', 'on');
model.result.export('anim3').set('title1d', 'on');
model.result.export('anim3').set('legend1d', 'on');
model.result.export('anim3').set('logo1d', 'on');
model.result.export('anim3').set('options1d', 'on');
model.result.export('anim3').set('title2d', 'on');
model.result.export('anim3').set('legend2d', 'on');
model.result.export('anim3').set('logo2d', 'on');
model.result.export('anim3').set('options2d', 'off');
model.result.export('anim3').set('title3d', 'on');
model.result.export('anim3').set('legend3d', 'on');
model.result.export('anim3').set('logo3d', 'on');
model.result.export('anim3').set('options3d', 'off');
model.result.export('anim3').set('axisorientation', 'on');
model.result.export('anim3').set('grid', 'on');
model.result.export('anim3').set('axes1d', 'on');
model.result.export('anim3').set('axes2d', 'on');
model.result.export('anim3').set('showgrid', 'on');
model.result.export('anim3').label('Animation: Spinning top');
model.result.export('anim3').set('target', 'player');
model.result.export('anim3').set('plotgroup', 'pg4');
model.result.export('anim3').set('maxframes', 50);
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Tip locus (xy-plane)');
model.result('pg6').set('data', 'dset4');
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('preserveaspect', true);
model.result('pg6').set('manualgrid', true);
model.result('pg6').set('xspacing', 0.01);
model.result('pg6').set('yspacing', 0.01);
model.result('pg6').create('ptgr1', 'PointGraph');
model.result('pg6').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg6').feature('ptgr1').set('linewidth', 'preference');
model.result('pg6').feature('ptgr1').selection.set([36]);
model.result('pg6').feature('ptgr1').set('expr', 'y');
model.result('pg6').feature('ptgr1').set('xdata', 'expr');
model.result('pg6').feature('ptgr1').set('xdataexpr', 'x');
model.result('pg6').feature('ptgr1').set('linewidth', 2);
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').set('preserveaspect', false);
model.result('pg6').set('axislimits', true);
model.result('pg6').set('xmin', -0.085);
model.result('pg6').set('xmax', 0.085);
model.result('pg6').set('ymin', -0.065);
model.result('pg6').set('ymax', 0.065);
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').set('axislimits', false);
model.result('pg6').set('preserveaspect', true);
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Tip velocity (xy-plane)');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Velocity (m/s)');
model.result('pg7').set('preserveaspect', false);
model.result('pg7').set('manualgrid', false);
model.result('pg7').run;
model.result('pg7').feature('ptgr1').set('expr', 'vp');
model.result('pg7').feature('ptgr1').set('descr', 'Precession velocity');
model.result('pg7').feature('ptgr1').set('xdata', 'solution');
model.result('pg7').feature('ptgr1').set('linestyle', 'cycle');
model.result('pg7').feature('ptgr1').set('legend', true);
model.result('pg7').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg7').feature('ptgr1').setIndex('legends', 'Precession', 0);
model.result('pg7').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg7').run;
model.result('pg7').feature('ptgr2').set('expr', 'vn');
model.result('pg7').feature('ptgr2').set('descr', 'Nutation velocity');
model.result('pg7').feature('ptgr2').setIndex('legends', 'Nutation', 0);
model.result('pg7').run;
model.result('pg1').run;

model.title('Modeling Gyroscopic Effect');

model.description('This example demonstrates the modeling of a mechanical gyroscope and analyzes the response of the spinning disc to an external torque coming on the disc due to the frame rotation. The change in the orientation of the spinning disc is also compared when the disc is not spinning. In the second part of the model, an external torque induced precession and nutation motion of a spinning top is analyzed.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;

model.label('gyroscope.mph');

model.modelNode.label('Components');

out = model;
