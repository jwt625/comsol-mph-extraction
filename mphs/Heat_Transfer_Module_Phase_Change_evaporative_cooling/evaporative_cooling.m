function out = model
%
% evaporative_cooling.m
%
% Model exported on May 26 2025, 21:29 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Phase_Change');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'TurbulentFlowlowRekeps', 'geom1');
model.physics('spf').model('comp1');

model.study.create('std1');
model.study('std1').create('wdi', 'WallDistanceInitialization');
model.study('std1').feature('wdi').set('solnum', 'auto');
model.study('std1').feature('wdi').set('notsolnum', 'auto');
model.study('std1').feature('wdi').set('outputmap', {});
model.study('std1').feature('wdi').set('ngenAUX', '1');
model.study('std1').feature('wdi').set('goalngenAUX', '1');
model.study('std1').feature('wdi').set('ngenAUX', '1');
model.study('std1').feature('wdi').set('goalngenAUX', '1');
model.study('std1').feature('wdi').setSolveFor('/physics/spf', true);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);

model.geom('geom1').insertFile('evaporative_cooling_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');

model.view('view1').set('renderwireframe', true);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('spf').prop('TurbulenceModelProperty').set('WallTreatment', 'LowReynoldsNumber');
model.physics('spf').selection.set([1]);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(3);
model.selection('sel1').label('Air');
model.selection('sel1').set([1]);

model.physics('spf').selection.named('sel1');
model.physics('spf').create('inl1', 'InletBoundary', 2);
model.physics('spf').feature('inl1').selection.set([33]);
model.physics('spf').feature('inl1').set('U0in', 2);
model.physics('spf').create('open1', 'OpenBoundary', 2);
model.physics('spf').feature('open1').selection.set([1]);
model.physics('spf').create('sym1', 'Symmetry', 2);
model.physics('spf').feature('sym1').selection.set([2]);

model.mesh('mesh1').autoMeshSize(8);
model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('hauto', 6);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmin', 1);
model.mesh('mesh1').feature('size2').selection.set([3 4 5 7 8 14 27 28 30]);
model.mesh('mesh1').feature('size2').set('hauto', 6);
model.mesh('mesh1').run('size2');
model.mesh('mesh1').feature.duplicate('size3', 'size2');
model.mesh('mesh1').feature('size3').set('hauto', 4);
model.mesh('mesh1').feature('size3').selection.set([9 12 29]);
model.mesh('mesh1').feature('size3').set('custom', true);
model.mesh('mesh1').feature('size3').set('hmaxactive', true);
model.mesh('mesh1').feature('size3').set('hmax', 0.2);
model.mesh('mesh1').feature('ftet1').selection.all;
model.mesh('mesh1').feature('bl1').set('trimminangle', 350);
model.mesh('mesh1').feature('bl1').feature('blp1').set('blnlayers', 4);
model.mesh('mesh1').run;

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'wdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'wdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-6);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, wall distance (spf)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, wall distance (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('se1', 'Segregated');
model.sol('sol1').feature('s2').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u'});
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('segvar', {'comp1_k' 'comp1_ep'});
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subdamp', 0.45);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').label('Turbulence Variables');
model.sol('sol1').feature('s2').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s2').feature('se1').set('subinitcfl', 2);
model.sol('sol1').feature('s2').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s2').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s2').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s2').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s2').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s2').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s2').feature('se1').set('maxsegiter', 400);
model.sol('sol1').feature('s2').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s2').feature('se1').feature('ll1').set('lowerlimit', 'comp1.k 0 comp1.ep 0 ');
model.sol('sol1').feature('s2').create('d2', 'Direct');
model.sol('sol1').feature('s2').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d2').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('AMG, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Velocity (spf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('slc1', 'Slice');
model.result('pg1').feature('slc1').label('Slice');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('smooth', 'internal');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([3 4 5 7 8 9 12 14 27 28 29 30]);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Pressure (spf)');
model.result('pg2').set('data', 'surf1');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'surf1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond1/pg4');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('expr', 'p');
model.result('pg2').feature('surf1').set('colortable', 'Dipole');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature('surf1').feature.create('tran1', 'Transparency');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Wall Resolution (spf)');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond1/pg3');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Wall Resolution');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'spf.Delta_wPlus');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg1').run;

model.physics.create('ht', 'HeatTransferInMoistAir', 'geom1');
model.physics('ht').model('comp1');

model.study('std1').feature('wdi').setSolveFor('/physics/ht', false);
model.study('std1').feature('stat').setSolveFor('/physics/ht', false);

model.physics('ht').prop('ShapeProperty').set('order_temperature', '1');
model.physics.create('mt', 'MoistureTransportInAir', 'geom1');
model.physics('mt').model('comp1');

model.study('std1').feature('wdi').setSolveFor('/physics/mt', false);
model.study('std1').feature('stat').setSolveFor('/physics/mt', false);

model.physics('mt').prop('ShapeProperty').set('order_relativehumidity_disc', '1');

model.multiphysics.create('ham1', 'HeatAndMoisture', 'geom1', 3);

model.study('std1').feature('wdi').setSolveFor('/multiphysics/ham1', false);
model.study('std1').feature('stat').setSolveFor('/multiphysics/ham1', false);

model.multiphysics('ham1').set('Heat_physics', 'ht');
model.multiphysics('ham1').set('Moist_physics', 'mt');
model.multiphysics('ham1').selection.all;

model.param.set('phi0', '0.2');
model.param.descr('phi0', 'Initial relative humidity');
model.param.set('K', '100[m/s]');
model.param.descr('K', 'Evaporation rate constant');

model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat2').label('Water, liquid');
model.material('mat2').set('family', 'water');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat2').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat2').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat2').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat2').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat2').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material('mat2').selection.set([3]);

model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').geom(3);
model.selection('sel2').label('Water');
model.selection('sel2').set([3]);

model.material('mat2').selection.named('sel2');

model.selection.create('com1', 'Complement');
model.selection('com1').model('comp1');
model.selection('com1').label('Glass');
model.selection('com1').set('input', {'sel1' 'sel2'});

model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat3').label('Glass (quartz)');
model.material('mat3').set('family', 'custom');
model.material('mat3').set('customambient', [1 1 1]);
model.material('mat3').set('noise', true);
model.material('mat3').set('fresnel', 0.99);
model.material('mat3').set('roughness', 0.02);
model.material('mat3').set('metallic', 0);
model.material('mat3').set('pearl', 0);
model.material('mat3').set('diffusewrap', 0);
model.material('mat3').set('clearcoat', 0);
model.material('mat3').set('reflectance', 0);
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'1e-14[S/m]' '0' '0' '0' '1e-14[S/m]' '0' '0' '0' '1e-14[S/m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'4.2' '0' '0' '0' '4.2' '0' '0' '0' '4.2'});
model.material('mat3').propertyGroup('def').set('density', '2210[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'1.4[W/(m*K)]' '0' '0' '0' '1.4[W/(m*K)]' '0' '0' '0' '1.4[W/(m*K)]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '730[J/(kg*K)]');
model.material('mat3').propertyGroup('RefractiveIndex').set('n', {'1.5' '0' '0' '0' '1.5' '0' '0' '0' '1.5'});
model.material('mat3').selection.named('com1');

model.physics('ht').create('fluid1', 'FluidHeatTransferModel', 3);
model.physics('ht').feature('fluid1').selection.set([3]);
model.physics('ht').feature('fluid1').create('cec1', 'ConvectivelyEnhancedConductivity', 3);
model.physics('ht').feature('fluid1').feature('cec1').set('NuCorrType', 'verticalParallelPlates');
model.physics('ht').feature('fluid1').feature('cec1').set('NuCorrVLength', '8[cm]');
model.physics('ht').feature('fluid1').feature('cec1').set('NuCorrVThickness', '3.5[cm]');
model.physics('ht').create('solid1', 'SolidHeatTransferModel', 3);
model.physics('ht').feature('solid1').selection.named('com1');
model.physics('ht').create('ifl1', 'Inflow', 2);
model.physics('ht').feature('ifl1').selection.set([33]);
model.physics('ht').create('open1', 'OpenBoundary', 2);
model.physics('ht').feature('open1').selection.set([1]);
model.physics('ht').create('sym1', 'Symmetry', 2);
model.physics('ht').feature('sym1').selection.set([2 6 11 13 18 31 32]);
model.physics('ht').create('init2', 'init', 3);
model.physics('ht').feature('init2').selection.set([3]);
model.physics('ht').feature('init2').selection.named('sel2');
model.physics('ht').feature('init2').set('Tinit', '80[degC]');
model.physics('mt').selection.named('sel1');
model.physics('mt').feature('init1').set('phi_init', 'phi0');
model.physics('mt').create('ifl1', 'Inflow', 2);
model.physics('mt').feature('ifl1').selection.set([33]);
model.physics('mt').feature('ifl1').set('phiustr', 'phi0');
model.physics('mt').create('open1', 'OpenBoundary', 2);
model.physics('mt').feature('open1').selection.set([1]);
model.physics('mt').feature('open1').set('phiustr', 'phi0');
model.physics('mt').create('sym1', 'Symmetry', 2);
model.physics('mt').feature('sym1').selection.set([2]);
model.physics('mt').create('ws1', 'WetSurface', 2);
model.physics('mt').feature('ws1').selection.set([12]);
model.physics('mt').feature('ws1').set('K', 'K');

model.multiphysics('ham1').set('includeLatentHeatSourceOnSurfaces', false);
model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 3);
model.multiphysics('nitf1').set('BoussinesqApproximation', true);
model.multiphysics.create('mf1', 'MoistureFlow', 'geom1', 3);

model.study('std1').feature('wdi').setEntry('activateCoupling', 'nitf1', false);
model.study('std1').feature('wdi').setEntry('activateCoupling', 'mf1', false);
model.study('std1').feature('stat').setEntry('activateCoupling', 'nitf1', false);
model.study('std1').feature('stat').setEntry('activateCoupling', 'mf1', false);
model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/spf', false);
model.study('std2').feature('time').setSolveFor('/physics/ht', true);
model.study('std2').feature('time').setSolveFor('/physics/mt', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/ham1', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/nitf1', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/mf1', true);
model.study('std2').label('Study 2 : no latent heat source');
model.study('std2').feature('time').set('tunit', 'min');
model.study('std2').feature('time').set('tlist', 'range(0,20[s],20)');
model.study('std2').feature('time').set('usesol', true);
model.study('std2').feature('time').set('notsolmethod', 'sol');
model.study('std2').feature('time').set('notstudy', 'std1');

model.sol.create('sol3');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol3').study('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'time');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').feature('comp1_mt_phi').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').set('control', 'time');
model.sol('sol3').create('t1', 'Time');
model.sol('sol3').feature('t1').set('tlist', 'range(0,20[s],20)');
model.sol('sol3').feature('t1').set('plot', 'off');
model.sol('sol3').feature('t1').set('plotgroup', 'pg1');
model.sol('sol3').feature('t1').set('plotfreq', 'tout');
model.sol('sol3').feature('t1').set('probesel', 'all');
model.sol('sol3').feature('t1').set('probes', {});
model.sol('sol3').feature('t1').set('probefreq', 'tsteps');
model.sol('sol3').feature('t1').set('rtol', 0.01);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('atolmethod', {'comp1_ep' 'global' 'comp1_G' 'global' 'comp1_k' 'global' 'comp1_mt_phi' 'global' 'comp1_nitf1_Uave' 'global'  ...
'comp1_p' 'global' 'comp1_T' 'global' 'comp1_u' 'global'});
model.sol('sol3').feature('t1').set('atol', {'comp1_ep' '1e-3' 'comp1_G' '1e-3' 'comp1_k' '1e-3' 'comp1_mt_phi' '1e-3' 'comp1_nitf1_Uave' '1e-3'  ...
'comp1_p' '1e-3' 'comp1_T' '1e-3' 'comp1_u' '1e-3'});
model.sol('sol3').feature('t1').set('atolvaluemethod', {'comp1_ep' 'factor' 'comp1_G' 'factor' 'comp1_k' 'factor' 'comp1_mt_phi' 'factor' 'comp1_nitf1_Uave' 'factor'  ...
'comp1_p' 'factor' 'comp1_T' 'factor' 'comp1_u' 'factor'});
model.sol('sol3').feature('t1').set('reacf', true);
model.sol('sol3').feature('t1').set('storeudot', true);
model.sol('sol3').feature('t1').set('endtimeinterpolation', true);
model.sol('sol3').feature('t1').set('maxorder', 2);
model.sol('sol3').feature('t1').set('control', 'time');
model.sol('sol3').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('t1').create('seDef', 'Segregated');
model.sol('sol3').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol3').feature('t1').feature('fc1').set('damp', 0.7);
model.sol('sol3').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol3').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol3').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol3').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol3').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol3').feature('t1').feature('fc1').set('ntolfact', 0.01);
model.sol('sol3').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol3').feature('t1').create('d1', 'Direct');
model.sol('sol3').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').feature('d1').label('Direct, heat and moisture variables (ham1) (Merged)');
model.sol('sol3').feature('t1').create('i1', 'Iterative');
model.sol('sol3').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol3').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol3').feature('t1').feature('i1').set('rhob', 400);
model.sol('sol3').feature('t1').feature('i1').set('maxlinit', 10000);
model.sol('sol3').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol3').feature('t1').feature('i1').label('AMG, moisture transport variables (mt) (mf1)');
model.sol('sol3').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', false);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').create('i2', 'Iterative');
model.sol('sol3').feature('t1').feature('i2').set('linsolver', 'gmres');
model.sol('sol3').feature('t1').feature('i2').set('prefuntype', 'left');
model.sol('sol3').feature('t1').feature('i2').set('itrestart', 50);
model.sol('sol3').feature('t1').feature('i2').set('rhob', 20);
model.sol('sol3').feature('t1').feature('i2').set('maxlinit', 10000);
model.sol('sol3').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol3').feature('t1').feature('i2').label('AMG, heat transfer variables (ht) (nitf1)');
model.sol('sol3').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol3').feature('t1').feature('fc1').set('damp', 0.7);
model.sol('sol3').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol3').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol3').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol3').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol3').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol3').feature('t1').feature('fc1').set('ntolfact', 0.01);
model.sol('sol3').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol3').feature('t1').feature.remove('fcDef');
model.sol('sol3').feature('t1').feature.remove('seDef');
model.sol('sol3').attach('std2');
model.sol('sol3').feature('t1').set('initialstepbdfactive', true);
model.sol('sol3').feature('t1').set('initialstepbdf', 0.1);
model.sol('sol3').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol3').feature('t1').set('maxstepbdf', 1);
model.sol('sol3').feature('t1').create('fc2', 'FullyCoupled');
model.sol('sol3').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol3').runAll;

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Temperature (ht)');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 61, 0);
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 61, 0);
model.result('pg4').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg4').feature.create('vol1', 'Volume');
model.result('pg4').feature('vol1').set('showsolutionparams', 'on');
model.result('pg4').feature('vol1').set('solutionparams', 'parent');
model.result('pg4').feature('vol1').set('expr', 'T');
model.result('pg4').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg4').feature('vol1').set('smooth', 'internal');
model.result('pg4').feature('vol1').set('showsolutionparams', 'on');
model.result('pg4').feature('vol1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Relative Humidity (mt)');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 61, 0);
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 61, 0);
model.result('pg5').set('defaultPlotID', 'MoistureTransportFactory/icom5/pdef1/pcond1/pg1');
model.result('pg5').feature.create('mslc1', 'Multislice');
model.result('pg5').feature('mslc1').set('expr', 'mt.phi');
model.result('pg5').feature('mslc1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg5').feature('mslc1').set('colortabletrans', 'reverse');
model.result('pg5').feature('mslc1').set('smooth', 'internal');
model.result('pg5').feature('mslc1').set('data', 'parent');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Temperature and Fluid Flow (nitf1)');
model.result('pg6').set('data', 'dset3');
model.result('pg6').setIndex('looplevel', 61, 0);
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').set('data', 'dset3');
model.result('pg6').setIndex('looplevel', 61, 0);
model.result('pg6').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond3/pg1');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').label('Wall Temperature');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('solutionparams', 'parent');
model.result('pg6').feature('surf1').set('expr', 'ht.Tvar');
model.result('pg6').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result('pg6').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg6').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg6').feature('surf1').feature('sel1').selection.set([3 4 5 7 8 9 12 14 27 28 29 30]);
model.result('pg6').feature.create('vol1', 'Volume');
model.result('pg6').feature('vol1').label('Solid Temperature');
model.result('pg6').feature('vol1').set('showsolutionparams', 'on');
model.result('pg6').feature('vol1').set('solutionparams', 'parent');
model.result('pg6').feature('vol1').set('expr', 'nitf1.T');
model.result('pg6').feature('vol1').set('smooth', 'internal');
model.result('pg6').feature('vol1').set('showsolutionparams', 'on');
model.result('pg6').feature('vol1').set('data', 'parent');
model.result('pg6').feature('vol1').feature.create('sel1', 'Selection');
model.result('pg6').feature('vol1').feature('sel1').selection.geom('geom1', 3);
model.result('pg6').feature('vol1').feature('sel1').selection.set([2 4 5 6 7]);
model.result('pg6').feature('vol1').set('inheritplot', 'surf1');
model.result('pg6').feature.create('arwv1', 'ArrowVolume');
model.result('pg6').feature('arwv1').label('Fluid Flow');
model.result('pg6').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg6').feature('arwv1').set('solutionparams', 'parent');
model.result('pg6').feature('arwv1').set('expr', {'nitf1.ux' 'nitf1.uy' 'nitf1.uz'});
model.result('pg6').feature('arwv1').set('xnumber', 30);
model.result('pg6').feature('arwv1').set('ynumber', 30);
model.result('pg6').feature('arwv1').set('znumber', 30);
model.result('pg6').feature('arwv1').set('arrowtype', 'cone');
model.result('pg6').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg6').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg6').feature('arwv1').set('data', 'parent');
model.result('pg6').feature('arwv1').feature.create('col1', 'Color');
model.result('pg6').feature('arwv1').feature('col1').set('showcolordata', 'off');
model.result('pg6').feature('arwv1').feature.create('filt1', 'Filter');
model.result('pg6').feature('arwv1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').feature('vol1').set('unit', 'degC');
model.result('pg4').feature('vol1').create('tran1', 'Transparency');
model.result('pg4').run;
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').feature.remove('arwv1');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').label('Temperature and Streamlines');
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('data', 'dset1');
model.result('pg7').feature('str1').set('color', 'white');
model.result('pg7').feature('str1').selection.set([33]);
model.result('pg7').feature('str1').set('pointtype', 'arrow');
model.result('pg7').feature('str1').set('arrowcountactive', true);
model.result('pg7').feature('str1').set('arrowcount', 80);
model.result('pg7').run;
model.result.dataset.create('cpl1', 'CutPlane');
model.result.dataset('cpl1').set('quickplane', 'xz');
model.result.dataset('cpl1').set('data', 'dset3');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').run;
model.result('pg8').label('Moisture Concentration and Relative Humidity');
model.result('pg8').set('data', 'cpl1');
model.result('pg8').setIndex('looplevel', 31, 0);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', 'mt.cv');
model.result('pg8').feature('surf1').set('descr', 'Vapor concentration');
model.result('pg8').run;
model.result('pg8').create('con1', 'Contour');
model.result('pg8').feature('con1').set('expr', 'mt.phi');
model.result('pg8').feature('con1').set('number', 7);
model.result('pg8').feature('con1').set('contourtype', 'tubes');
model.result('pg8').feature('con1').set('tuberadiusscaleactive', true);
model.result('pg8').feature('con1').set('tuberadiusscale', 0.025);
model.result('pg8').feature('con1').set('contourlabels', true);
model.result('pg8').feature('con1').set('labelprec', 2);
model.result('pg8').feature('con1').set('labelcolor', 'white');
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').set('view', 'new');
model.result('pg8').run;

model.view('view5').axis.set('xmin', 50);
model.view('view5').axis.set('xmax', 80);

model.result.numerical.create('av1', 'AvVolume');
model.result.numerical('av1').label('Average Water Temperature');
model.result.numerical('av1').set('data', 'dset3');
model.result.numerical('av1').selection.set([3]);
model.result.numerical('av1').set('expr', {'T'});
model.result.numerical('av1').set('descr', {'Temperature'});
model.result.numerical('av1').set('unit', {'K'});
model.result.numerical('av1').setIndex('unit', 'degC', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Average Water Temperature');
model.result.numerical('av1').set('table', 'tbl1');
model.result.numerical('av1').setResult;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').set('data', 'none');
model.result('pg9').create('tblp1', 'Table');
model.result('pg9').feature('tblp1').set('source', 'table');
model.result('pg9').feature('tblp1').set('table', 'tbl1');
model.result('pg9').feature('tblp1').set('linewidth', 'preference');
model.result('pg9').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg9').run;
model.result('pg9').run;
model.result('pg9').label('Average Water Temperature Over Time');
model.result.numerical.create('int1', 'IntSurface');
model.result.numerical('int1').set('intvolume', true);
model.result.numerical('int1').label('Amount of Evaporated Water');
model.result.numerical('int1').set('data', 'dset3');
model.result.numerical('int1').selection.set([12]);
model.result.numerical('int1').setIndex('expr', '2*mt.ntflux', 0);
model.result.numerical('int1').set('dataseries', 'integral');
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Amount of Evaporated Water');
model.result.numerical('int1').set('table', 'tbl2');
model.result.numerical('int1').setResult;

model.multiphysics.create('ham2', 'HeatAndMoisture', 'geom1', 3);
model.multiphysics('ham2').selection.set([1]);
model.multiphysics('ham1').active(false);

model.study('std1').feature('stat').setEntry('activateCoupling', 'ham2', false);
model.study('std2').feature('time').setEntry('activateCoupling', 'ham2', false);
model.study.create('std3');
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').setSolveFor('/physics/spf', false);
model.study('std3').feature('time').setSolveFor('/physics/ht', true);
model.study('std3').feature('time').setSolveFor('/physics/mt', true);
model.study('std3').feature('time').setSolveFor('/multiphysics/ham1', true);
model.study('std3').feature('time').setSolveFor('/multiphysics/nitf1', true);
model.study('std3').feature('time').setSolveFor('/multiphysics/mf1', true);
model.study('std3').feature('time').setSolveFor('/multiphysics/ham2', true);
model.study('std3').label('Study 3 : latent heat source');
model.study('std3').feature('time').set('tunit', 'min');
model.study('std3').feature('time').set('tlist', 'range(0,20[s],20)');
model.study('std3').feature('time').set('usesol', true);
model.study('std3').feature('time').set('notsolmethod', 'sol');
model.study('std3').feature('time').set('notstudy', 'std1');

model.sol.create('sol4');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol4').study('std3');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std3');
model.sol('sol4').feature('st1').set('studystep', 'time');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').feature('comp1_mt_phi').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').set('control', 'time');
model.sol('sol4').create('t1', 'Time');
model.sol('sol4').feature('t1').set('tlist', 'range(0,20[s],20)');
model.sol('sol4').feature('t1').set('plot', 'off');
model.sol('sol4').feature('t1').set('plotgroup', 'pg1');
model.sol('sol4').feature('t1').set('plotfreq', 'tout');
model.sol('sol4').feature('t1').set('probesel', 'all');
model.sol('sol4').feature('t1').set('probes', {});
model.sol('sol4').feature('t1').set('probefreq', 'tsteps');
model.sol('sol4').feature('t1').set('rtol', 0.01);
model.sol('sol4').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol4').feature('t1').set('atolmethod', {'comp1_ep' 'global' 'comp1_G' 'global' 'comp1_k' 'global' 'comp1_mt_phi' 'global' 'comp1_nitf1_Uave' 'global'  ...
'comp1_p' 'global' 'comp1_T' 'global' 'comp1_u' 'global'});
model.sol('sol4').feature('t1').set('atol', {'comp1_ep' '1e-3' 'comp1_G' '1e-3' 'comp1_k' '1e-3' 'comp1_mt_phi' '1e-3' 'comp1_nitf1_Uave' '1e-3'  ...
'comp1_p' '1e-3' 'comp1_T' '1e-3' 'comp1_u' '1e-3'});
model.sol('sol4').feature('t1').set('atolvaluemethod', {'comp1_ep' 'factor' 'comp1_G' 'factor' 'comp1_k' 'factor' 'comp1_mt_phi' 'factor' 'comp1_nitf1_Uave' 'factor'  ...
'comp1_p' 'factor' 'comp1_T' 'factor' 'comp1_u' 'factor'});
model.sol('sol4').feature('t1').set('reacf', true);
model.sol('sol4').feature('t1').set('storeudot', true);
model.sol('sol4').feature('t1').set('endtimeinterpolation', true);
model.sol('sol4').feature('t1').set('maxorder', 2);
model.sol('sol4').feature('t1').set('control', 'time');
model.sol('sol4').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('t1').create('seDef', 'Segregated');
model.sol('sol4').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol4').feature('t1').feature('fc1').set('damp', 0.7);
model.sol('sol4').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol4').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol4').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol4').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol4').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol4').feature('t1').feature('fc1').set('ntolfact', 0.01);
model.sol('sol4').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol4').feature('t1').create('d1', 'Direct');
model.sol('sol4').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('t1').feature('d1').label('Direct, heat and moisture variables (ham2) (Merged)');
model.sol('sol4').feature('t1').create('i1', 'Iterative');
model.sol('sol4').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol4').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol4').feature('t1').feature('i1').set('rhob', 400);
model.sol('sol4').feature('t1').feature('i1').set('maxlinit', 10000);
model.sol('sol4').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol4').feature('t1').feature('i1').label('AMG, moisture transport variables (mt) (mf1)');
model.sol('sol4').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', false);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('t1').create('i2', 'Iterative');
model.sol('sol4').feature('t1').feature('i2').set('linsolver', 'gmres');
model.sol('sol4').feature('t1').feature('i2').set('prefuntype', 'left');
model.sol('sol4').feature('t1').feature('i2').set('itrestart', 50);
model.sol('sol4').feature('t1').feature('i2').set('rhob', 20);
model.sol('sol4').feature('t1').feature('i2').set('maxlinit', 10000);
model.sol('sol4').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol4').feature('t1').feature('i2').label('AMG, heat transfer variables (ht) (nitf1)');
model.sol('sol4').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol4').feature('t1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol4').feature('t1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol4').feature('t1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol4').feature('t1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol4').feature('t1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol4').feature('t1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol4').feature('t1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol4').feature('t1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol4').feature('t1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol4').feature('t1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol4').feature('t1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol4').feature('t1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('t1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol4').feature('t1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol4').feature('t1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol4').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol4').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol4').feature('t1').feature('fc1').set('damp', 0.7);
model.sol('sol4').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol4').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol4').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol4').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol4').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol4').feature('t1').feature('fc1').set('ntolfact', 0.01);
model.sol('sol4').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol4').feature('t1').feature.remove('fcDef');
model.sol('sol4').feature('t1').feature.remove('seDef');
model.sol('sol4').attach('std3');
model.sol('sol4').feature('t1').set('initialstepbdfactive', true);
model.sol('sol4').feature('t1').set('initialstepbdf', 0.1);
model.sol('sol4').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol4').feature('t1').set('maxstepbdf', 1);
model.sol('sol4').feature('t1').create('fc2', 'FullyCoupled');
model.sol('sol4').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol4').runAll;

model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').label('Temperature (ht) 1');
model.result('pg10').set('data', 'dset4');
model.result('pg10').setIndex('looplevel', 61, 0);
model.result('pg10').set('data', 'dset4');
model.result('pg10').setIndex('looplevel', 61, 0);
model.result('pg10').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg10').feature.create('vol1', 'Volume');
model.result('pg10').feature('vol1').set('showsolutionparams', 'on');
model.result('pg10').feature('vol1').set('solutionparams', 'parent');
model.result('pg10').feature('vol1').set('expr', 'T');
model.result('pg10').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg10').feature('vol1').set('smooth', 'internal');
model.result('pg10').feature('vol1').set('showsolutionparams', 'on');
model.result('pg10').feature('vol1').set('data', 'parent');
model.result.create('pg11', 'PlotGroup3D');
model.result('pg11').label('Relative Humidity (mt) 1');
model.result('pg11').set('data', 'dset4');
model.result('pg11').setIndex('looplevel', 61, 0);
model.result('pg11').set('data', 'dset4');
model.result('pg11').setIndex('looplevel', 61, 0);
model.result('pg11').set('defaultPlotID', 'MoistureTransportFactory/icom5/pdef1/pcond1/pg1');
model.result('pg11').feature.create('mslc1', 'Multislice');
model.result('pg11').feature('mslc1').set('expr', 'mt.phi');
model.result('pg11').feature('mslc1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg11').feature('mslc1').set('colortabletrans', 'reverse');
model.result('pg11').feature('mslc1').set('smooth', 'internal');
model.result('pg11').feature('mslc1').set('data', 'parent');
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').label('Temperature and Fluid Flow (nitf1) 1');
model.result('pg12').set('data', 'dset4');
model.result('pg12').setIndex('looplevel', 61, 0);
model.result('pg12').set('showlegendsunit', true);
model.result('pg12').set('data', 'dset4');
model.result('pg12').setIndex('looplevel', 61, 0);
model.result('pg12').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond3/pg1');
model.result('pg12').feature.create('surf1', 'Surface');
model.result('pg12').feature('surf1').label('Wall Temperature');
model.result('pg12').feature('surf1').set('showsolutionparams', 'on');
model.result('pg12').feature('surf1').set('solutionparams', 'parent');
model.result('pg12').feature('surf1').set('expr', 'ht.Tvar');
model.result('pg12').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg12').feature('surf1').set('smooth', 'internal');
model.result('pg12').feature('surf1').set('showsolutionparams', 'on');
model.result('pg12').feature('surf1').set('data', 'parent');
model.result('pg12').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg12').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg12').feature('surf1').feature('sel1').selection.set([3 4 5 7 8 9 12 14 27 28 29 30]);
model.result('pg12').feature.create('vol1', 'Volume');
model.result('pg12').feature('vol1').label('Solid Temperature');
model.result('pg12').feature('vol1').set('showsolutionparams', 'on');
model.result('pg12').feature('vol1').set('solutionparams', 'parent');
model.result('pg12').feature('vol1').set('expr', 'nitf1.T');
model.result('pg12').feature('vol1').set('smooth', 'internal');
model.result('pg12').feature('vol1').set('showsolutionparams', 'on');
model.result('pg12').feature('vol1').set('data', 'parent');
model.result('pg12').feature('vol1').feature.create('sel1', 'Selection');
model.result('pg12').feature('vol1').feature('sel1').selection.geom('geom1', 3);
model.result('pg12').feature('vol1').feature('sel1').selection.set([2 4 5 6 7]);
model.result('pg12').feature('vol1').set('inheritplot', 'surf1');
model.result('pg12').feature.create('arwv1', 'ArrowVolume');
model.result('pg12').feature('arwv1').label('Fluid Flow');
model.result('pg12').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg12').feature('arwv1').set('solutionparams', 'parent');
model.result('pg12').feature('arwv1').set('expr', {'nitf1.ux' 'nitf1.uy' 'nitf1.uz'});
model.result('pg12').feature('arwv1').set('xnumber', 30);
model.result('pg12').feature('arwv1').set('ynumber', 30);
model.result('pg12').feature('arwv1').set('znumber', 30);
model.result('pg12').feature('arwv1').set('arrowtype', 'cone');
model.result('pg12').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg12').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg12').feature('arwv1').set('data', 'parent');
model.result('pg12').feature('arwv1').feature.create('col1', 'Color');
model.result('pg12').feature('arwv1').feature('col1').set('showcolordata', 'off');
model.result('pg12').feature('arwv1').feature.create('filt1', 'Filter');
model.result('pg12').feature('arwv1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').feature('vol1').set('unit', 'degC');
model.result('pg10').feature('vol1').create('tran1', 'Transparency');
model.result('pg10').run;
model.result('pg7').run;
model.result.duplicate('pg13', 'pg7');
model.result('pg13').run;
model.result('pg13').set('data', 'dset4');
model.result.dataset('cpl1').set('data', 'dset4');
model.result('pg8').run;
model.result('pg8').run;
model.result.table('tbl1').clearTableData;
model.result.numerical.duplicate('av2', 'av1');
model.result.numerical('av2').set('data', 'dset4');
model.result.numerical('av2').set('table', 'tbl1');
model.result.numerical('av2').setResult;
model.result('pg9').run;
model.result.numerical('av1').set('table', 'tbl1');
model.result.numerical('av1').appendResult;
model.result('pg9').run;
model.result('pg9').feature('tblp1').set('linewidth', 2);
model.result('pg9').feature('tblp1').set('legend', true);
model.result('pg9').feature('tblp1').set('legendmethod', 'manual');
model.result('pg9').feature('tblp1').setIndex('legends', 'Latent heat of evaporation accounted for', 0);
model.result('pg9').feature('tblp1').setIndex('legends', 'Latent heat of evaporation neglected', 1);
model.result('pg9').run;
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Temperature (degC)');
model.result('pg9').set('legendlayout', 'outside');
model.result('pg9').set('legendposoutside', 'bottom');
model.result('pg9').run;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Mass Balance');
model.result.numerical('gev1').set('data', 'dset4');
model.result.numerical('gev1').set('expr', {'mt.massBalance'});
model.result.numerical('gev1').set('descr', {'Mass balance'});
model.result.numerical('gev1').set('unit', {'kg/s'});
model.result.numerical('gev1').set('expr', {'mt.massBalance' 'mt.dwcInt'});
model.result.numerical('gev1').set('descr', {'Mass balance' 'Total accumulated moisture rate'});
model.result.numerical('gev1').set('expr', {'mt.massBalance' 'mt.dwcInt' 'mt.ntfluxInt'});
model.result.numerical('gev1').set('descr', {'Mass balance' 'Total accumulated moisture rate' 'Total net moisture rate'});
model.result.numerical('gev1').set('expr', {'mt.massBalance' 'mt.dwcInt' 'mt.ntfluxInt' 'mt.GInt'});
model.result.numerical('gev1').set('descr', {'Mass balance' 'Total accumulated moisture rate' 'Total net moisture rate' 'Total mass source'});
model.result.numerical('gev1').set('expr', {'mt.massBalance' 'mt.dwcInt' 'mt.ntfluxInt' 'mt.GInt' 'mt.ws1.ntfluxInt'});
model.result.numerical('gev1').set('descr', {'Mass balance' 'Total accumulated moisture rate' 'Total net moisture rate' 'Total mass source' 'Total net moisture rate'});
model.result.numerical('gev1').set('expr', {'mt.massBalance' 'mt.dwcInt' 'mt.ntfluxInt' 'mt.GInt' 'mt.ws1.ntfluxInt' 'mt.ifl1.ntfluxInt'});
model.result.numerical('gev1').set('descr', {'Mass balance' 'Total accumulated moisture rate' 'Total net moisture rate' 'Total mass source' 'Total net moisture rate' 'Total net moisture rate'});
model.result.numerical('gev1').setIndex('unit', 'kg/s', 4);
model.result.numerical('gev1').setIndex('descr', 'Total net moisture rate, evaporation', 4);
model.result.numerical('gev1').setIndex('expr', 'mt.ifl1.ntfluxInt+mt.open1.ntfluxInt', 5);
model.result.numerical('gev1').setIndex('unit', 'kg/s', 5);
model.result.numerical('gev1').setIndex('descr', 'Total net moisture rate, inlet/outlet', 5);
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').comments('Mass Balance');
model.result.numerical('gev1').set('table', 'tbl3');
model.result.numerical('gev1').setResult;
model.result.create('pg14', 'PlotGroup1D');
model.result('pg14').set('data', 'none');
model.result('pg14').create('tblp1', 'Table');
model.result('pg14').feature('tblp1').set('source', 'table');
model.result('pg14').feature('tblp1').set('table', 'tbl3');
model.result('pg14').feature('tblp1').set('linewidth', 'preference');
model.result('pg14').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg14').run;
model.result('pg14').run;
model.result('pg14').label('Mass Balance');
model.result('pg14').set('legendlayout', 'outside');
model.result('pg14').set('legendposoutside', 'bottom');
model.result('pg14').set('legendrowcount', 6);
model.result('pg14').run;
model.result('pg14').feature('tblp1').set('legend', true);
model.result('pg14').feature('tblp1').set('linewidth', 2);
model.result('pg9').run;

model.title('Evaporative Cooling of Water');

model.description('This tutorial shows how to couple three physics interfaces to model evaporative cooling. The effects that need to be taken into account are heat transfer, transport of water vapor, and fluid flow. The Wet Surface feature is used to implement the source term for the water vapor and to compute the evaporative heat source available from the Boundary Heat Source feature. The Moist Air feature is used to accurately define moisture-dependent thermodynamic properties.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('evaporative_cooling.mph');

model.modelNode.label('Components');

out = model;
