function out = model
%
% surface_micromachined_accelerometer.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/MEMS_Module/Sensors');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics('es').feature('ccn1').set('materialType', {'solid'});
model.physics('es').feature('ccn1').label('Charge Conservation, Solid');

model.multiphysics.create('eme1', 'ElectromechanicalForces', 'geom1', 3);
model.multiphysics('eme1').set('Solid_physics', 'solid');
model.multiphysics('eme1').set('Electrostatics_physics', 'es');

model.common.create('free1', 'DeformingDomain', 'comp1');
model.common('free1').set('smoothingType', 'hyperelastic');
model.common('free1').selection.set([]);
model.common.create('sym1', 'Symmetry', 'comp1');
model.common('sym1').selection.set([]);

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/physics/es', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/eme1', true);

model.geom.load({'part1' 'part2' 'part3'}, 'surface_micromachined_accelerometer_geom_subsequence.mph', {'part1' 'part2' 'part3'});

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('acceleration', '0', 'Acceleration (g)');
model.param.set('VtestL', '0[V]', 'Test voltage, left side');
model.param.set('VtestR', '0[V]', 'Test voltage, right side');
model.param.set('tSi', '2[um]', 'Silicon thickness');
model.param.set('tOx', '1.6[um]', 'Oxide thickness');
model.param.set('l_PM', '448[um]', 'Proof mass length');
model.param.set('w_PM', '100[um]', 'Proof mass width');
model.param.set('n_st', '3', 'Number of self test fingers');
model.param.set('n_f', '21', 'Number of sense fingers');
model.param.set('w_f', '4[um]', 'Finger width');
model.param.set('l_f', '114[um]', 'Finger length');
model.param.set('g_f', '1[um]', 'Finger gap');
model.param.set('g_st', '3[um]', 'Self test finger gap');
model.param.set('x_st', '3[um]+1*(w_f+g_st)', 'Self test finger starting position');
model.param.set('x_f', '(l_PM-(n_f-1)*3*(w_f+g_f)-w_f)/2', 'Sense finger starting position');
model.param.set('w_eh', '4[um]', 'Etch hole size');
model.param.set('p_eh', '18[um]', 'Etch hole period');
model.param.set('l_sp', '280[um]', 'Spring length');
model.param.set('w_sp', '2[um]', 'Spring width');
model.param.set('g_sp', '1[um]', 'Spring gap');
model.param.set('w_sp_conn', '4[um]', 'Spring connection width');
model.param.set('l_anch_base', '17[um]', 'Anchor base length');
model.param.set('w_anch_base', '17[um]', 'Anchor base width');
model.param.set('r_anch', '3[um]', 'Anchor radius');
model.param.set('x_anch', '12[um]', 'Anchor position');
model.param.set('l_e_s', '120[um]', 'Short electrode length');
model.param.set('l_e_l', '140[um]', 'Long electrode length');
model.param.set('l_p', '16[um]', 'Pad length');
model.param.set('w_p', '8[um]', 'Pad width');
model.param.set('r_an', '3[um]', 'Electrode anchor radius');
model.param.set('l_ovrlp', '104[um]', 'Finger overlap length');
model.param.set('l_spAssm', 'l_anch_base+2*(w_f+w_sp)+3*g_sp', 'Spring assembly length');
model.param.set('l_polySi', 'l_PM+2*l_spAssm', 'Total length');
model.param.set('hw_polySi', 'w_PM/2+l_f+l_p+l_e_l-l_ovrlp', 'Total half width');

model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').feature('pi1').label('Part Link: Proof mass');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'l_PM', 'l_PM');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'w_PM', 'w_PM');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 't_PM', 'tSi');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'l_f', 'l_f');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'w_f', 'w_f');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'n_st', 'n_st');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'n_f', 'n_f');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'g_f', 'g_f');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'g_st', 'g_st');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'x_st', 'x_st');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'x_f', 'x_f');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'w_eh', 'w_eh');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'p_eh', 'p_eh');
model.geom('geom1').runPre('fin');
model.geom('geom1').create('pi2', 'PartInstance');
model.geom('geom1').feature('pi2').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi2').set('part', 'part2');
model.geom('geom1').feature('pi2').label('Part Link: Spring 1');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'l_sp', 'l_sp');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'w_sp', 'w_sp');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'g_sp', 'g_sp');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'w_sp_conn', 'w_sp_conn');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'w_f', 'w_f');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'l_anch_base', 'l_anch_base');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'w_anch_base', 'w_anch_base');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'r_anch', 'r_anch');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'x_anch', 'x_anch');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 't_sp', 'tSi');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 't_anch', 'tOx');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'x_sp', 'l_PM');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature.duplicate('pi3', 'pi2');
model.geom('geom1').feature('pi2').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi2').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi2').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi2').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi2').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi2').set('selcontributetoedg', {'none'});
model.geom('geom1').feature('pi2').set('selkeepedg', {'off'});
model.geom('geom1').feature('pi2').set('selshowedg', {'on'});
model.geom('geom1').feature('pi2').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi2').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi2').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi2').set('selcontributetodom', {'none'});
model.geom('geom1').feature('pi2').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi2').set('selshowdom', {'on'});
model.geom('geom1').feature('pi3').label('Part Link: Spring 2');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'mirror', 0);
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'l_sp', 'l_sp+10[um]');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'w_anch_base', 'w_anch_base+10[um]');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'x_sp', '0[um]');
model.geom('geom1').runPre('fin');
model.geom('geom1').create('pi4', 'PartInstance');
model.geom('geom1').feature('pi4').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi4').set('part', 'part3');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'LH', 0);
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'l_e', 'l_e_l');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'w_e', 'w_f');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'l_p', 'l_p');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'w_p', 'w_p');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'r_an', 'r_an');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 't_e', 'tSi');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 't_an', 'tOx');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'n_e', 'n_f+1');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'p_e', '3*(w_f+g_f)');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'x_e', 'x_f-w_f-g_f');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'y_e', 'w_PM/2+l_f-l_ovrlp');
model.geom('geom1').feature('pi4').label('Part Link: Sense Electrodes L');
model.geom('geom1').runPre('fin');

model.view('view1').set('renderwireframe', true);

model.geom('geom1').feature.duplicate('pi5', 'pi4');
model.geom('geom1').feature('pi4').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi4').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi4').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi4').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi4').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi4').set('selcontributetoedg', {'none'});
model.geom('geom1').feature('pi4').set('selkeepedg', {'off'});
model.geom('geom1').feature('pi4').set('selshowedg', {'on'});
model.geom('geom1').feature('pi4').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi4').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi4').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi4').set('selcontributetodom', {'none'});
model.geom('geom1').feature('pi4').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi4').set('selshowdom', {'on'});
model.geom('geom1').feature('pi5').label('Part Link: Sense Electrodes R');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'LH', 1);
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'l_e', 'l_e_s');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'x_e', 'x_f-2*(w_f+g_f)');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature.duplicate('pi6', 'pi5');
model.geom('geom1').feature('pi5').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi5').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi5').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi5').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi5').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi5').set('selcontributetoedg', {'none'});
model.geom('geom1').feature('pi5').set('selkeepedg', {'off'});
model.geom('geom1').feature('pi5').set('selshowedg', {'on'});
model.geom('geom1').feature('pi5').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi5').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi5').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi5').set('selcontributetodom', {'none'});
model.geom('geom1').feature('pi5').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi5').set('selshowdom', {'on'});
model.geom('geom1').feature('pi6').label('Part Link: Self Test Electrodes L 1');
model.geom('geom1').feature('pi6').setEntry('inputexpr', 'LH', 0);
model.geom('geom1').feature('pi6').setEntry('inputexpr', 'n_e', 'n_st');
model.geom('geom1').feature('pi6').setEntry('inputexpr', 'p_e', '3*w_f+2*g_f+g_st');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature('pi6').setEntry('inputexpr', 'x_e', 'x_st-w_f-g_f');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature.duplicate('pi7', 'pi6');
model.geom('geom1').feature('pi6').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi6').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi6').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi6').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi6').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi6').set('selcontributetoedg', {'none'});
model.geom('geom1').feature('pi6').set('selkeepedg', {'off'});
model.geom('geom1').feature('pi6').set('selshowedg', {'on'});
model.geom('geom1').feature('pi6').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi6').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi6').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi6').set('selcontributetodom', {'none'});
model.geom('geom1').feature('pi6').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi6').set('selshowdom', {'on'});
model.geom('geom1').feature('pi7').label('Part Link: Self Test Electrodes L 2');
model.geom('geom1').feature('pi7').setEntry('inputexpr', 'l_e', 'l_e_l');
model.geom('geom1').feature('pi7').setEntry('inputexpr', 'x_e', 'l_PM-(x_st+w_f+g_f)-(n_st-1)*(3*w_f+2*g_f+g_st)-w_f');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature.duplicate('pi8', 'pi7');
model.geom('geom1').feature('pi7').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi7').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi7').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi7').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi7').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi7').set('selcontributetoedg', {'none'});
model.geom('geom1').feature('pi7').set('selkeepedg', {'off'});
model.geom('geom1').feature('pi7').set('selshowedg', {'on'});
model.geom('geom1').feature('pi7').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi7').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi7').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi7').set('selcontributetodom', {'none'});
model.geom('geom1').feature('pi7').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi7').set('selshowdom', {'on'});
model.geom('geom1').feature('pi8').label('Part Link: Self Test Electrodes R 1');
model.geom('geom1').feature('pi8').setEntry('inputexpr', 'LH', 1);
model.geom('geom1').feature('pi8').setEntry('inputexpr', 'x_e', 'x_st-w_f-g_f+2*(w_f+g_f)');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature.duplicate('pi9', 'pi8');
model.geom('geom1').feature('pi8').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi8').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi8').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi8').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi8').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi8').set('selcontributetoedg', {'none'});
model.geom('geom1').feature('pi8').set('selkeepedg', {'off'});
model.geom('geom1').feature('pi8').set('selshowedg', {'on'});
model.geom('geom1').feature('pi8').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi8').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi8').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi8').set('selcontributetodom', {'none'});
model.geom('geom1').feature('pi8').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi8').set('selshowdom', {'on'});
model.geom('geom1').feature('pi9').label('Part Link: Self Test Electrodes R 2');
model.geom('geom1').feature('pi9').setEntry('inputexpr', 'l_e', 'l_e_s');
model.geom('geom1').feature('pi9').setEntry('inputexpr', 'x_e', 'l_PM-(x_st+w_f+g_f)-(n_st-1)*(3*w_f+2*g_f+g_st)-w_f+2*(w_f+g_f)');
model.geom('geom1').runPre('fin');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').label('Air box');
model.geom('geom1').feature('blk1').set('size', {'l_polySi+40[um]' '1' '1'});
model.geom('geom1').feature('blk1').setIndex('size', 'hw_polySi+20[um]', 1);
model.geom('geom1').feature('blk1').setIndex('size', '10[um]', 2);
model.geom('geom1').feature('blk1').set('pos', {'-l_spAssm-20[um]' '0' '0'});
model.geom('geom1').feature('blk1').setIndex('pos', '-tOx', 2);
model.geom('geom1').feature('blk1').setIndex('layer', 'tOx', 0);
model.geom('geom1').feature('blk1').setIndex('layer', 'tSi', 1);
model.geom('geom1').runPre('fin');
model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom1').runPre('fin');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').label('Ground plane');
model.geom('geom1').feature('wp1').set('quickz', '-tOx');
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', {'l_PM' 'w_PM/2+l_f'});
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').setIndex('distance', 'tOx', 0);
model.geom('geom1').run('ext1');
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Polysilicon');
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_csel1.dom', 'csel1');
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Proof mass boundaries');
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel1.bnd', 'csel2');
model.geom('geom1').feature('pi2').setEntry('selcontributetodom', 'pi2_csel1.dom', 'csel1');
model.geom('geom1').feature('pi2').setEntry('selcontributetobnd', 'pi2_csel1.bnd', 'csel2');
model.geom('geom1').feature('pi3').setEntry('selcontributetodom', 'pi3_csel1.dom', 'csel1');
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_csel1.bnd', 'csel2');
model.geom('geom1').feature('pi4').setEntry('selcontributetodom', 'pi4_csel1.dom', 'csel1');
model.geom('geom1').selection.create('csel3', 'CumulativeSelection');
model.geom('geom1').selection('csel3').label('Sense left boundaries');
model.geom('geom1').feature('pi4').setEntry('selcontributetobnd', 'pi4_csel1.bnd', 'csel3');
model.geom('geom1').feature('pi5').setEntry('selcontributetodom', 'pi5_csel1.dom', 'csel1');
model.geom('geom1').selection.create('csel4', 'CumulativeSelection');
model.geom('geom1').selection('csel4').label('Sense right boundaries');
model.geom('geom1').feature('pi5').setEntry('selcontributetobnd', 'pi5_csel1.bnd', 'csel4');
model.geom('geom1').selection.create('csel5', 'CumulativeSelection');
model.geom('geom1').selection('csel5').label('Self test left boundaries');
model.geom('geom1').feature('pi6').setEntry('selcontributetobnd', 'pi6_csel1.bnd', 'csel5');
model.geom('geom1').feature('pi7').setEntry('selcontributetodom', 'pi7_csel1.dom', 'csel1');
model.geom('geom1').feature('pi7').setEntry('selcontributetobnd', 'pi7_csel1.bnd', 'csel5');
model.geom('geom1').feature('pi8').setEntry('selcontributetodom', 'pi8_csel1.dom', 'csel1');
model.geom('geom1').selection.create('csel6', 'CumulativeSelection');
model.geom('geom1').selection('csel6').label('Self test right boundaries');
model.geom('geom1').feature('pi8').setEntry('selcontributetobnd', 'pi8_csel1.bnd', 'csel6');
model.geom('geom1').feature('pi9').setEntry('selcontributetodom', 'pi9_csel1.dom', 'csel1');
model.geom('geom1').feature('pi9').setEntry('selcontributetobnd', 'pi9_csel1.bnd', 'csel6');
model.geom('geom1').feature('pi6').setEntry('selcontributetodom', 'pi6_csel1.dom', 'csel1');

model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');

model.geom('geom1').run;

model.selection('box1').set('entitydim', 2);
model.selection('box1').set('ymin', -0.1);
model.selection('box1').set('ymax', 0.1);
model.selection('box1').set('condition', 'inside');
model.selection('box1').label('Symmetry plane');
model.selection.create('box2', 'Box');
model.selection('box2').model('comp1');
model.selection('box2').label('Anchor plane');
model.selection('box2').set('entitydim', 2);
model.selection('box2').set('zmin', '-tOx*1.01');
model.selection('box2').set('zmax', '-tOx*0.99');
model.selection('box2').set('condition', 'inside');
model.selection.create('box3', 'Box');
model.selection('box3').model('comp1');
model.selection('box3').label('Meshing plane');
model.selection('box3').set('entitydim', 2);
model.selection('box3').set('zmin', '-tOx*0.01');
model.selection('box3').set('zmax', 'tOx*0.01');
model.selection('box3').set('condition', 'inside');

model.title('Surface Micromachined Accelerometer Geometry');

model.description('This is a template MPH-file containing the physics interfaces and the parameterized geometry for the model Surface Micromachined Accelerometer.');

model.label('surface_micromachined_accelerometer_geom.mph');

model.view('view1').set('renderwireframe', false);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('Si - Polycrystalline silicon');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat2').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat2').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat2').set('noise', true);
model.material('mat2').set('fresnel', 0.7);
model.material('mat2').set('metallic', 0);
model.material('mat2').set('pearl', 0);
model.material('mat2').set('diffusewrap', 0);
model.material('mat2').set('clearcoat', 0);
model.material('mat2').set('reflectance', 0);
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '678[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'4.5' '0' '0' '0' '4.5' '0' '0' '0' '4.5'});
model.material('mat2').propertyGroup('def').set('density', '2320[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'34[W/(m*K)]' '0' '0' '0' '34[W/(m*K)]' '0' '0' '0' '34[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '160e9[Pa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.22');
model.material('mat2').selection.named('geom1_csel1_dom');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('All domains');
model.selection('sel1').all;
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Air');
model.selection('dif1').set('add', {'sel1'});
model.selection('dif1').set('subtract', {'geom1_csel1_dom'});

model.common('free1').selection.named('dif1');

model.physics('solid').selection.named('geom1_csel1_dom');
model.physics('solid').create('bl1', 'BodyLoad', 3);
model.physics('solid').feature('bl1').set('FperVol', {'acceleration*solid.rho*g_const' '0' '0'});
model.physics('solid').feature('bl1').selection.named('geom1_csel1_dom');
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.named('box2');
model.physics('solid').create('sym1', 'SymmetrySolid', 2);
model.physics('solid').feature('sym1').selection.named('box1');

model.common('sym1').selection.named('box1');

model.physics('es').create('ccn2', 'ChargeConservation', 3);
model.physics('es').feature('ccn2').label('Charge Conservation, Air');
model.physics('es').feature('ccn2').selection.named('dif1');
model.physics('es').create('gnd1', 'Ground', 2);
model.physics('es').feature('gnd1').selection.set([45]);
model.physics('es').create('term1', 'Terminal', 2);
model.physics('es').feature('term1').label('Sense Terminal L');
model.physics('es').feature('term1').selection.named('geom1_csel3_bnd');
model.physics('es').feature('term1').set('TerminalType', 'Voltage');
model.physics('es').feature('term1').set('V0', '-2.5[mV]');
model.physics('es').create('term2', 'Terminal', 2);
model.physics('es').feature('term2').label('Sense Terminal R');
model.physics('es').feature('term2').selection.named('geom1_csel4_bnd');
model.physics('es').feature('term2').set('TerminalType', 'Voltage');
model.physics('es').feature('term2').set('V0', '2.5[mV]');
model.physics('es').create('fp1', 'FloatingPotential', 2);
model.physics('es').feature('fp1').selection.named('geom1_csel2_bnd');
model.physics('es').create('term3', 'Terminal', 2);
model.physics('es').feature('term3').label('Self Test Terminal L');
model.physics('es').feature('term3').selection.named('geom1_csel5_bnd');
model.physics('es').feature('term3').set('TerminalType', 'Voltage');
model.physics('es').feature('term3').set('V0', 'VtestL');
model.physics('es').create('term4', 'Terminal', 2);
model.physics('es').feature('term4').label('Self Test Terminal R');
model.physics('es').feature('term4').selection.named('geom1_csel6_bnd');
model.physics('es').feature('term4').set('TerminalType', 'Voltage');
model.physics('es').feature('term4').set('V0', 'VtestR');

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.named('box3');
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.set([3]);
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 1);
model.mesh('mesh1').run;

model.study('std1').label('Study 1: Normal Operation');
model.study('std1').feature('stat').set('plot', true);
model.study('std1').feature('stat').set('probefreq', 'psteps');
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'acceleration', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', '', 0);
model.study('std1').feature('stat').setIndex('pname', 'acceleration', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', '', 0);
model.study('std1').feature('stat').setIndex('plistarr', 'range(-50,25,50)', 0);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 6 7 10 11 12 18 19 20 25 26 27 32 33 34 39 40 41 46 47 48 55 56 57 62 63 64 71 72 73 78 79 80 85 86 87 94 95 96 101 102 103 110 111 112 117 118 119 124 125 126 133 134 135 140 141 142 149 150 151 156 157 158 163 164 165 172 173 174 178 179 180 186 187 188 193 194 195 197]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*6.00416522091123E-4');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*6.00416522091123E-4');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V' 'comp1_es_fp1_V0_ode'});
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Electric Potential');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Displacement Field');
model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subdtech', 'const');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subjtech', 'onevery');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').label('Spatial Mesh Displacement');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 40);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 5000);
model.sol('sol1').feature('s1').feature('i1').label('Iterative Solver (GMRES with SA AMG) (eme1)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('hybridvar', {'comp1_u' 'comp1_V' 'comp1_es_fp1_V0_ode'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_spatial_disp'});
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-7');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-7');
model.sol('sol1').feature('v1').feature('comp1_V').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_V').set('scaleval', '1e-3');
model.sol('sol1').feature('v1').feature('comp1_es_fp1_V0_ode').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_es_fp1_V0_ode').set('scaleval', '5e-5');
model.sol('sol1').feature('s1').feature('se1').feature.move('ss1', 1);
model.sol('sol1').feature('s1').feature('se1').feature.move('ss1', 2);

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').label('Displacement (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.disp'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('colortable', 'Rainbow');
model.result('pg1').feature('vol1').set('colortabletrans', 'none');
model.result('pg1').feature('vol1').set('colorscalemode', 'linear');
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').set('colortable', 'SpectrumLight');

model.sol('sol1').runAll;

model.result.remove('pg1');

model.study('std1').feature('stat').set('plotgroup', 'Default');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 5, 0);
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').label('Displacement (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.disp'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('colortable', 'Rainbow');
model.result('pg1').feature('vol1').set('colortabletrans', 'none');
model.result('pg1').feature('vol1').set('colorscalemode', 'linear');
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').set('colortable', 'SpectrumLight');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Electric Potential (es)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 5, 0);
model.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond1/pg1');
model.result('pg2').feature.create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('solutionparams', 'parent');
model.result('pg2').feature('mslc1').set('expr', 'V');
model.result('pg2').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg2').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg2').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg2').feature('mslc1').set('colortable', 'Dipole');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('data', 'parent');
model.result('pg2').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg2').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});
model.result('pg2').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg2').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg2').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg2').feature('strmsl1').set('titletype', 'none');
model.result('pg2').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg2').feature('strmsl1').set('udist', 0.02);
model.result('pg2').feature('strmsl1').set('maxlen', 0.4);
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('inheritcolor', false);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('data', 'parent');
model.result('pg2').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg2').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg2').feature('strmsl1').feature('col1').set('expr', 'V');
model.result('pg2').feature('strmsl1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg2').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg2').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg2').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Electric Field Norm (es)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 5, 0);
model.result('pg3').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');
model.result('pg3').feature.create('mslc1', 'Multislice');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('solutionparams', 'parent');
model.result('pg3').feature('mslc1').set('expr', 'es.normE');
model.result('pg3').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg3').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg3').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg3').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg3').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg3').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg3').feature('mslc1').set('colortable', 'Prism');
model.result('pg3').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg3').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('data', 'parent');
model.result('pg3').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg3').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});
model.result('pg3').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg3').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg3').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg3').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg3').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg3').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg3').feature('strmsl1').set('titletype', 'none');
model.result('pg3').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg3').feature('strmsl1').set('udist', 0.02);
model.result('pg3').feature('strmsl1').set('maxlen', 0.4);
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('inheritcolor', false);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('data', 'parent');
model.result('pg3').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg3').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg3').feature('strmsl1').feature('col1').set('expr', 'es.normE');
model.result('pg3').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg3').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg3').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg3').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg3').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg3').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 5, 0);
model.result('pg4').label('Moving Mesh');
model.result('pg4').create('mesh1', 'Mesh');
model.result('pg4').feature('mesh1').set('meshdomain', 'volume');
model.result('pg4').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg4').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg4').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg4').feature('mesh1').feature('sel1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198]);
model.result('pg4').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg4').feature('mesh1').set('qualexpr', 'comp1.spatial.relVol');
model.result('pg4').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('vol1').set('expr', 'u');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('mslc1').set('unit', 'mV');
model.result('pg2').feature('mslc1').set('multiplanexmethod', 'number');
model.result('pg2').feature('mslc1').set('xnumber', '0');
model.result('pg2').feature('mslc1').set('multiplaneymethod', 'number');
model.result('pg2').feature('mslc1').set('ynumber', '0');
model.result('pg2').run;
model.result('pg2').feature('strmsl1').set('multiplanexmethod', 'number');
model.result('pg2').feature('strmsl1').set('xnumber', '0');
model.result('pg2').feature('strmsl1').set('multiplaneymethod', 'number');
model.result('pg2').feature('strmsl1').set('ynumber', '0');
model.result('pg2').run;
model.result('pg2').feature('strmsl1').feature('col1').set('unit', 'mV');
model.result('pg2').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').create('ptgr1', 'PointGraph');
model.result('pg5').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg5').feature('ptgr1').set('linewidth', 'preference');
model.result('pg5').feature('ptgr1').selection.set([65]);
model.result('pg5').feature('ptgr1').set('expr', 'u');
model.result('pg5').run;
model.result('pg5').label('Displacement vs. Acceleration');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'Acceleration (g)');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').setIndex('expr', 'es.fp1.V0*1000', 0);
model.result('pg6').feature('glob1').setIndex('unit', 'mV', 0);
model.result('pg6').feature('glob1').setIndex('descr', 'Raw sense voltage', 0);
model.result('pg6').feature('glob1').set('legend', false);
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').label('Sense V vs. Acceleration');

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/solid', true);
model.study('std2').feature('stat').setSolveFor('/physics/es', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/eme1', true);
model.study('std2').feature('stat').set('useparam', true);
model.study('std2').feature('stat').setIndex('pname', 'acceleration', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', '', 0);
model.study('std2').feature('stat').setIndex('pname', 'acceleration', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', '', 0);
model.study('std2').feature('stat').setIndex('pname', 'VtestL', 0);
model.study('std2').feature('stat').setIndex('plistarr', '2 0', 0);
model.study('std2').feature('stat').setIndex('pname', 'acceleration', 1);
model.study('std2').feature('stat').setIndex('plistarr', '', 1);
model.study('std2').feature('stat').setIndex('punit', '', 1);
model.study('std2').feature('stat').setIndex('pname', 'acceleration', 1);
model.study('std2').feature('stat').setIndex('plistarr', '', 1);
model.study('std2').feature('stat').setIndex('punit', '', 1);
model.study('std2').feature('stat').setIndex('pname', 'VtestR', 1);
model.study('std2').feature('stat').setIndex('plistarr', '0 2', 1);
model.study('std2').feature('stat').set('pcontinuationmode', 'no');
model.study('std2').label('Study 2: Self Test');

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 6 7 10 11 12 18 19 20 25 26 27 32 33 34 39 40 41 46 47 48 55 56 57 62 63 64 71 72 73 78 79 80 85 86 87 94 95 96 101 102 103 110 111 112 117 118 119 124 125 126 133 134 135 140 141 142 149 150 151 156 157 158 163 164 165 172 173 174 178 179 180 186 187 188 193 194 195 197]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*6.00416522091123E-4');
model.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-2*6.00416522091123E-4');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol2').feature('s1').set('control', 'stat');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('seDef', 'Segregated');
model.sol('sol2').feature('s1').create('se1', 'Segregated');
model.sol('sol2').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V' 'comp1_es_fp1_V0_ode'});
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').label('Electric Potential');
model.sol('sol2').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u'});
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').label('Displacement Field');
model.sol('sol2').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});
model.sol('sol2').feature('s1').feature('se1').feature('ss3').set('subdtech', 'const');
model.sol('sol2').feature('s1').feature('se1').feature('ss3').set('subjtech', 'onevery');
model.sol('sol2').feature('s1').feature('se1').feature('ss3').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('se1').feature('ss3').label('Spatial Mesh Displacement');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('rhob', 40);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('s1').feature('i1').set('itrestart', 5000);
model.sol('sol2').feature('s1').feature('i1').label('Iterative Solver (GMRES with SA AMG) (eme1)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('hybridization', 'multi');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('hybridvar', {'comp1_u' 'comp1_V' 'comp1_es_fp1_V0_ode'});
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol2').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol2').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_spatial_disp'});
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('s1').feature.remove('seDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-8');
model.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-8');
model.sol('sol2').feature('v1').feature('comp1_V').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_V').set('scaleval', 1);
model.sol('sol2').feature('v1').feature('comp1_es_fp1_V0_ode').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_es_fp1_V0_ode').set('scaleval', 0.1);
model.sol('sol2').runAll;

model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset2');
model.result('pg7').setIndex('looplevel', 2, 0);
model.result('pg7').set('defaultPlotID', 'displacement');
model.result('pg7').label('Displacement (solid) 1');
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').create('vol1', 'Volume');
model.result('pg7').feature('vol1').set('expr', {'solid.disp'});
model.result('pg7').feature('vol1').set('threshold', 'manual');
model.result('pg7').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg7').feature('vol1').set('colortable', 'Rainbow');
model.result('pg7').feature('vol1').set('colortabletrans', 'none');
model.result('pg7').feature('vol1').set('colorscalemode', 'linear');
model.result('pg7').feature('vol1').set('resolution', 'custom');
model.result('pg7').feature('vol1').set('refine', 2);
model.result('pg7').feature('vol1').set('colortable', 'SpectrumLight');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').label('Electric Potential (es) 1');
model.result('pg8').set('data', 'dset2');
model.result('pg8').setIndex('looplevel', 2, 0);
model.result('pg8').set('frametype', 'spatial');
model.result('pg8').set('showlegendsmaxmin', true);
model.result('pg8').set('data', 'dset2');
model.result('pg8').setIndex('looplevel', 2, 0);
model.result('pg8').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond1/pg1');
model.result('pg8').feature.create('mslc1', 'Multislice');
model.result('pg8').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg8').feature('mslc1').set('solutionparams', 'parent');
model.result('pg8').feature('mslc1').set('expr', 'V');
model.result('pg8').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg8').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg8').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg8').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg8').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg8').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg8').feature('mslc1').set('colortable', 'Dipole');
model.result('pg8').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg8').feature('mslc1').set('data', 'parent');
model.result('pg8').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg8').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg8').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg8').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});
model.result('pg8').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg8').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg8').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg8').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg8').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg8').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg8').feature('strmsl1').set('titletype', 'none');
model.result('pg8').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg8').feature('strmsl1').set('udist', 0.02);
model.result('pg8').feature('strmsl1').set('maxlen', 0.4);
model.result('pg8').feature('strmsl1').set('maxtime', Inf);
model.result('pg8').feature('strmsl1').set('inheritcolor', false);
model.result('pg8').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg8').feature('strmsl1').set('maxtime', Inf);
model.result('pg8').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg8').feature('strmsl1').set('maxtime', Inf);
model.result('pg8').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg8').feature('strmsl1').set('maxtime', Inf);
model.result('pg8').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg8').feature('strmsl1').set('maxtime', Inf);
model.result('pg8').feature('strmsl1').set('data', 'parent');
model.result('pg8').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg8').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg8').feature('strmsl1').feature('col1').set('expr', 'V');
model.result('pg8').feature('strmsl1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg8').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg8').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg8').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').label('Electric Field Norm (es) 1');
model.result('pg9').set('data', 'dset2');
model.result('pg9').setIndex('looplevel', 2, 0);
model.result('pg9').set('frametype', 'spatial');
model.result('pg9').set('showlegendsmaxmin', true);
model.result('pg9').set('data', 'dset2');
model.result('pg9').setIndex('looplevel', 2, 0);
model.result('pg9').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');
model.result('pg9').feature.create('mslc1', 'Multislice');
model.result('pg9').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg9').feature('mslc1').set('solutionparams', 'parent');
model.result('pg9').feature('mslc1').set('expr', 'es.normE');
model.result('pg9').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg9').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg9').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg9').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg9').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg9').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg9').feature('mslc1').set('colortable', 'Prism');
model.result('pg9').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg9').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg9').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg9').feature('mslc1').set('data', 'parent');
model.result('pg9').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg9').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg9').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg9').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});
model.result('pg9').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg9').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg9').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg9').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg9').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg9').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg9').feature('strmsl1').set('titletype', 'none');
model.result('pg9').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg9').feature('strmsl1').set('udist', 0.02);
model.result('pg9').feature('strmsl1').set('maxlen', 0.4);
model.result('pg9').feature('strmsl1').set('maxtime', Inf);
model.result('pg9').feature('strmsl1').set('inheritcolor', false);
model.result('pg9').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg9').feature('strmsl1').set('maxtime', Inf);
model.result('pg9').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg9').feature('strmsl1').set('maxtime', Inf);
model.result('pg9').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg9').feature('strmsl1').set('maxtime', Inf);
model.result('pg9').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg9').feature('strmsl1').set('maxtime', Inf);
model.result('pg9').feature('strmsl1').set('data', 'parent');
model.result('pg9').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg9').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg9').feature('strmsl1').feature('col1').set('expr', 'es.normE');
model.result('pg9').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg9').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg9').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg9').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg9').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg9').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').set('data', 'dset2');
model.result('pg10').setIndex('looplevel', 2, 0);
model.result('pg10').label('Moving Mesh 1');
model.result('pg10').create('mesh1', 'Mesh');
model.result('pg10').feature('mesh1').set('meshdomain', 'volume');
model.result('pg10').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg10').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg10').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg10').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg10').feature('mesh1').feature('sel1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198]);
model.result('pg10').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg10').feature('mesh1').set('qualexpr', 'comp1.spatial.relVol');
model.result('pg10').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').feature('vol1').set('expr', 'u');
model.result('pg7').run;
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').feature('mslc1').set('multiplanexmethod', 'number');
model.result('pg8').feature('mslc1').set('xnumber', '0');
model.result('pg8').feature('mslc1').set('multiplaneymethod', 'number');
model.result('pg8').feature('mslc1').set('ynumber', '0');
model.result('pg8').run;
model.result('pg8').feature('strmsl1').set('multiplanexmethod', 'number');
model.result('pg8').feature('strmsl1').set('xnumber', '0');
model.result('pg8').feature('strmsl1').set('multiplaneymethod', 'number');
model.result('pg8').feature('strmsl1').set('ynumber', '0');
model.result('pg8').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').set('data', 'dset2');
model.result('pg11').create('ptgr1', 'PointGraph');
model.result('pg11').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg11').feature('ptgr1').set('linewidth', 'preference');
model.result('pg11').feature('ptgr1').selection.set([65]);
model.result('pg11').feature('ptgr1').set('expr', 'u');
model.result('pg11').feature('ptgr1').set('xdata', 'expr');
model.result('pg11').feature('ptgr1').set('xdataexpr', 'VtestR');
model.result('pg11').run;
model.result('pg11').run;
model.result('pg11').label('Displacement vs. Self Test V');
model.result('pg1').run;

model.title('Surface Micromachined Accelerometer');

model.description('This example shows how to simulate a capacitively actuated surface micromachined accelerometer, using the Electromechanics Interface. It is based on a case study from the book Microsystem Design by Stephen D. Senturia (Kluwer Academic Publishers, 5th Edition, 2003, pages 513-525).');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('surface_micromachined_accelerometer.mph');

model.modelNode.label('Components');

out = model;
