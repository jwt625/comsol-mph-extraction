function out = model
%
% homopolar_generator.m
%
% Model exported on May 26 2025, 21:24 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Devices,_Motors_and_Generators');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mef', 'ElectricInductionCurrents', 'geom1');
model.physics('mef').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/mef', true);

model.param.set('Bz0', '1[Wb/m^2]');
model.param.descr('Bz0', 'Constant magnetic flux density');
model.param.set('RPM', '1200[rpm]');
model.param.descr('RPM', 'Disc speed');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').set('r', 100);
model.geom('geom1').feature('cyl1').set('h', 30);
model.geom('geom1').feature('cyl1').set('pos', [0 0 -15]);
model.geom('geom1').run('cyl1');
model.geom('geom1').feature.duplicate('cyl2', 'cyl1');
model.geom('geom1').run('cyl2');
model.geom('geom1').create('cyl3', 'Cylinder');
model.geom('geom1').feature('cyl3').set('r', 15);
model.geom('geom1').feature('cyl3').set('h', 30);
model.geom('geom1').feature('cyl3').set('pos', [0 0 15]);
model.geom('geom1').run('cyl3');
model.geom('geom1').feature.duplicate('cyl4', 'cyl3');
model.geom('geom1').run('cyl4');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').set('quickz', 35);
model.geom('geom1').feature('wp1').set('unite', false);
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', [130 20]);
model.geom('geom1').feature('wp1').geom.feature('r1').set('pos', [-130 -10]);
model.geom('geom1').feature('wp1').geom.feature('r1').setIndex('layer', 60, 0);
model.geom('geom1').feature('wp1').geom.feature('r1').set('layerbottom', false);
model.geom('geom1').feature('wp1').geom.feature('r1').set('layerleft', true);
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').feature('wp1').geom.create('r2', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r2').set('size', [13 20]);
model.geom('geom1').feature('wp1').geom.feature('r2').set('pos', [-130 -10]);
model.geom('geom1').feature('wp1').geom.run('r2');
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').set('workplane', 'wp1');
model.geom('geom1').feature('ext1').selection('input').set({'wp1.r1'});
model.geom('geom1').run('ext1');
model.geom('geom1').feature('ext1').setIndex('distance', 10, 0);
model.geom('geom1').run('ext1');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').selection('input').set({'ext1'});
model.geom('geom1').feature('dif1').selection('input2').set({'cyl3'});
model.geom('geom1').run('dif1');
model.geom('geom1').feature.create('ext2', 'Extrude');
model.geom('geom1').feature('ext2').set('workplane', 'wp1');
model.geom('geom1').feature('ext2').selection('input').set({'wp1.r2'});
model.geom('geom1').run('ext2');
model.geom('geom1').feature('ext2').setIndex('distance', -50, 0);
model.geom('geom1').run('ext2');
model.geom('geom1').create('wp2', 'WorkPlane');
model.geom('geom1').feature('wp2').set('unite', true);
model.geom('geom1').feature('wp2').set('planetype', 'faceparallel');

model.view('view1').set('renderwireframe', true);

model.geom('geom1').feature('wp2').selection('face').set('ext2', 6);
model.geom('geom1').feature('wp2').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp2').geom.feature('r1').set('size', [20 30]);
model.geom('geom1').feature('wp2').geom.feature('r1').set('pos', [-10 -5]);
model.geom('geom1').feature('wp2').geom.run('r1');
model.geom('geom1').run('wp2');
model.geom('geom1').feature.create('ext3', 'Extrude');
model.geom('geom1').feature('ext3').set('workplane', 'wp2');
model.geom('geom1').feature('ext3').selection('input').set({'wp2'});
model.geom('geom1').run('ext3');
model.geom('geom1').feature('ext3').setIndex('distance', 30, 0);
model.geom('geom1').run('ext3');
model.geom('geom1').create('dif2', 'Difference');
model.geom('geom1').feature('dif2').selection('input').set({'ext3'});
model.geom('geom1').feature('dif2').selection('input2').set({'cyl1'});
model.geom('geom1').run('dif2');
model.geom('geom1').create('cyl5', 'Cylinder');
model.geom('geom1').feature('cyl5').set('r', 300);
model.geom('geom1').feature('cyl5').set('h', 400);
model.geom('geom1').feature('cyl5').set('pos', [0 0 -200]);
model.geom('geom1').run('cyl5');
model.geom('geom1').run('fin');

model.view('view1').set('renderwireframe', false);
model.view('view1').hideEntities.create('hide1');
model.view('view1').hideEntities('hide1').geom('geom1', 2);
model.view('view1').hideEntities('hide1').set([1 4]);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(2);
model.selection('sel1').set([1 2 3 4 38 43]);
model.selection('sel1').label('Exterior Boundaries');
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').set([5 7]);
model.selection('sel2').label('Rotating Disc');
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').set([2 3 4 5 6 7]);
model.selection('sel3').label('Copper Domains');

model.physics('mef').create('al1', 'AmperesLaw', 3);
model.physics('mef').feature('al1').selection.set([1]);
model.physics('mef').create('vlt1', 'Velocity', 3);
model.physics('mef').feature('vlt1').selection.named('sel2');
model.physics('mef').feature('vlt1').set('v', {'-2*pi*RPM*y' '2*pi*RPM*x' '0'});
model.physics('mef').create('mp1', 'MagneticPotential', 2);
model.physics('mef').feature('mp1').selection.named('sel1');
model.physics('mef').feature('mp1').set('A0', {'0' 'Bz0*x' '0'});

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat2').label('Copper');
model.material('mat2').set('family', 'copper');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('emissivity', '0.5');
model.material('mat2').propertyGroup('def').set('density', '8940[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '126e9[Pa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.34');
model.material('mat2').propertyGroup('linzRes').set('rho0', '1.667e-8[ohm*m]');
model.material('mat2').propertyGroup('linzRes').set('alpha', '3.862e-3[1/K]');
model.material('mat2').propertyGroup('linzRes').set('Tref', '293.15[K]');
model.material('mat2').propertyGroup('linzRes').addInput('temperature');
model.material('mat2').selection.named('sel3');

model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size').set('hauto', 7);
model.mesh('mesh1').feature('size1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('size1').selection.named('sel3');
model.mesh('mesh1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('size1').set('hmax', 10);
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').run;

model.study('std1').setGenPlots(false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'fgmres');
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 10000);
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('kp1', 'KrylovPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('kp1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('kp1').set('prefun', 'gmres');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('kp1').set('iterm', 'itertol');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('kp1').set('iter', '25');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('kp1').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset.duplicate('dset2', 'dset1');
model.result.dataset('dset2').selection.geom('geom1', 3);
model.result.dataset('dset2').selection.named('sel3');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').run;
model.result('pg1').set('data', 'dset2');
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').set('expr', {'mef.Jx' 'mef.Jy' 'mef.Jz'});
model.result('pg1').feature('str1').set('descr', 'Current density');
model.result('pg1').feature('str1').set('selnumber', 50);
model.result('pg1').feature('str1').selection.set([34]);
model.result('pg1').feature('str1').set('linetype', 'tube');
model.result('pg1').feature('str1').set('radiusexpr', 'log10(mef.normJ)-5');
model.result('pg1').feature('str1').create('col1', 'Color');
model.result('pg1').run;
model.result('pg1').feature('str1').feature('col1').set('expr', 'mef.normJ');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').label('3D Current Plot');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').run;
model.result('pg2').set('data', 'dset2');
model.result('pg2').create('vol1', 'Volume');
model.result('pg2').feature('vol1').set('expr', 'mef.normB');
model.result('pg2').feature('vol1').set('descr', 'Magnetic flux density norm');
model.result('pg2').feature('vol1').label('Total B');
model.result('pg2').run;
model.result('pg2').create('str1', 'Streamline');
model.result('pg2').feature('str1').set('data', 'dset1');
model.result('pg2').feature('str1').setIndex('expr', 'mef.Bz-Bz0', 2);
model.result('pg2').feature('str1').set('selnumber', 100);
model.result('pg2').feature('str1').selection.set([24]);
model.result('pg2').run;
model.result('pg2').feature('str1').label('Induced B');
model.result('pg2').run;
model.result('pg2').label('Magnetic Flux Density (B)');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').set('data', 'dset2');
model.result('pg3').create('arwv1', 'ArrowVolume');
model.result('pg3').feature('arwv1').set('expr', {'mef.Jx' 'mef.Jy' 'mef.Jz'});
model.result('pg3').feature('arwv1').set('descr', 'Current density');
model.result('pg3').feature('arwv1').set('xnumber', 40);
model.result('pg3').feature('arwv1').set('ynumber', 40);
model.result('pg3').feature('arwv1').set('arrowzmethod', 'coord');
model.result('pg3').feature('arwv1').set('zcoord', 0);
model.result('pg3').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('arwv1').create('col1', 'Color');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature.duplicate('arwv2', 'arwv1');
model.result('pg3').run;
model.result('pg3').feature('arwv2').set('expr', {'mef.Jx' 'mef.Jy' 'mef.Jz'});
model.result('pg3').feature('arwv2').set('descr', 'Current density');
model.result('pg3').feature('arwv2').set('xnumber', 80);
model.result('pg3').feature('arwv2').set('ynumber', 1);
model.result('pg3').feature('arwv2').set('arrowzmethod', 'number');
model.result('pg3').feature('arwv2').set('znumber', 20);
model.result('pg3').feature('arwv2').set('inheritplot', 'arwv1');
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').set('data', 'dset2');
model.result('pg4').create('vol1', 'Volume');
model.result('pg4').feature('vol1').set('expr', 'mef.Qh');
model.result('pg4').feature('vol1').set('descr', 'Volumetric loss density, electromagnetic');
model.result('pg4').feature('vol1').set('colortable', 'GrayBody');
model.result('pg4').run;
model.result.numerical.create('int1', 'IntSurface');
model.result.numerical('int1').set('intvolume', true);
model.result.numerical('int1').selection.set([27]);
model.result.numerical('int1').set('expr', {'mef.normJ'});
model.result.numerical('int1').set('descr', {'Current density norm'});
model.result.numerical('int1').set('unit', {'A'});
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Surface Integration 1');
model.result.numerical('int1').set('table', 'tbl1');
model.result.numerical('int1').setResult;

model.title('Homopolar Generator');

model.description('A homopolar generator is composed of an electrically conductive rotating disc placed in a uniform magnetic field that is perpendicular to the plane of rotation. The motion of the conductor through the static magnetic field induces Lorentz currents in the disc. By connecting the outside rim of the disc to the center via a stationary conductor, a significant current can be generated. This example models the flow of current through the copper conductor and the rotating disc.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('homopolar_generator.mph');

model.modelNode.label('Components');

out = model;
