function out = model
%
% electric_motor_noise_pmsm.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Automotive');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mf', 'InductionCurrents', 'geom1');
model.physics('mf').model('comp1');
model.physics.create('wb', 'WeakFormBoundaryPDE', 'geom1', {'u'});
model.physics('wb').prop('EquationForm').set('form', 'Automatic');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/mf', true);
model.study('std1').feature('stat').setSolveFor('/physics/wb', true);

model.modelNode.create('comp2', true);

model.geom.create('geom2', 3);
model.geom('geom2').model('comp2');

model.mesh.create('mesh2', 'geom2');

model.geom('geom2').insertFile('/lscratch/home/testusr/large_model_workdir/distr/test/tapplications/Acoustics_Module/Automotive/electric_motor_noise_pmsm_geom_sequence.mph', 'geom1');
model.geom('geom2').run('comsel2');

model.view('view2').set('renderwireframe', true);
model.view('view2').set('showgrid', false);

model.geom('geom2').feature('fin').set('createpairs', false);

model.param.label('Geometry parameters');
model.param.create('par2');
model.param('par2').label('Model Parameters');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('I0', '1[A]', 'Current traveling through the coils');
model.param('par2').set('Ltransv', '80[mm]', 'Axial length of the motor');
model.param('par2').set('rpm0', '10[rpm]', 'Rotational frequency of the engine for the harmonic computation');
model.param('par2').set('rpm_max', '10000[rpm]', 'Maximum rotational frequency of the engine');
model.param('par2').set('rpm_idle', '1000[rpm]', 'Idle rotational frequency of the engine');
model.param('par2').set('w0', '2*pi*rpm0', 'Angular frequency for the harmonic computation');
model.param('par2').set('theta', '60[deg]', 'Minimal mechanical repetition angle');
model.param('par2').set('t_tot', 'theta/w0', 'Period of repetition for the harmonic computation');
model.param('par2').set('f0', '1/t_tot', 'Frequency of repetition for the harmonic computation');
model.param('par2').set('ang0', '-2[deg]', 'Initial angular gap');
model.param('par2').set('n_harmonics', '7', 'Number of harmonics included in the analysis');
model.param('par2').set('Ncoil', '550', 'Total turns in the coil groups');
model.param('par2').set('a_coil', '0.25[mm^2]', 'Area of the wires');
model.param('par2').set('fmax', '4000[Hz]', 'Maximum frequency of the analysis');
model.param('par2').set('fdelta', '50[Hz]', 'Increment between frequency requests');
model.param('par2').set('c0', '343[m/s]', 'Speed of sound in air');
model.param('par2').set('harm_exc', '3', 'Harmonic excited in the vibroacoustic analysis');
model.param('par2').set('z_mic1', '0.5[m]', 'z coordinate of microphone 1');
model.param('par2').set('y_mic2', '0.5[m]', 'y coordinate of microphone 2');
model.param('par2').set('eta_struct', '0.02', 'Structural damping ratio');

model.geom('geom1').create('cro1', 'CrossSection');
model.geom('geom1').run('cro1');
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').run('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').set('angletol', 5);
model.selection('sel1').label('Shaft');
model.selection('sel1').set([40]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').set('angletol', 5);
model.selection('sel2').label('Laminated rotor');
model.selection('sel2').set([39]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').set('angletol', 5);
model.selection('sel3').label('Magnets A');
model.selection('sel3').set([33 36 37]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').set('angletol', 5);
model.selection('sel4').label('Magnets B');
model.selection('sel4').set([34 35 38]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Magnets');
model.selection('uni1').set('input', {'sel3' 'sel4'});
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').set('angletol', 5);
model.selection('sel5').label('Inner air gap');
model.selection('sel5').set([32]);
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Rotor');
model.selection('uni2').set('input', {'sel1' 'sel2' 'uni1'});
model.selection.create('uni3', 'Union');
model.selection('uni3').model('comp1');
model.selection('uni3').label('Rotating parts');
model.selection('uni3').set('input', {'sel5' 'uni2'});
model.selection.create('com1', 'Complement');
model.selection('com1').model('comp1');
model.selection('com1').label('Fixed Parts');
model.selection('com1').set('input', {'uni3'});
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').set('angletol', 5);
model.selection('sel6').label('Coils A');
model.selection('sel6').set([12 15 18 20 25 27]);
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').set('angletol', 5);
model.selection('sel7').label('Coils B');
model.selection('sel7').set([13 16 17 19 26 28]);
model.selection.create('sel8', 'Explicit');
model.selection('sel8').model('comp1');
model.selection('sel8').set('angletol', 5);
model.selection('sel8').label('Coils C');
model.selection('sel8').set([9 10 21 22 23 24]);
model.selection.create('uni4', 'Union');
model.selection('uni4').model('comp1');
model.selection('uni4').label('Coils');
model.selection('uni4').set('input', {'sel6' 'sel7' 'sel8'});
model.selection.create('sel9', 'Explicit');
model.selection('sel9').model('comp1');
model.selection('sel9').set('angletol', 5);
model.selection('sel9').label('Outer air gap');
model.selection('sel9').set([11]);
model.selection.create('sel10', 'Explicit');
model.selection('sel10').model('comp1');
model.selection('sel10').set('angletol', 5);
model.selection('sel10').label('Exterior air');
model.selection('sel10').set([1 2 3 4 14 30 31]);
model.selection.create('sel11', 'Explicit');
model.selection('sel11').model('comp1');
model.selection('sel11').set('angletol', 5);
model.selection('sel11').label('Casing');
model.selection('sel11').set([5 6 7 29]);
model.selection.create('uni5', 'Union');
model.selection('uni5').model('comp1');
model.selection('uni5').label('Air');
model.selection('uni5').set('input', {'sel5' 'sel9' 'sel10'});
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Stator forces');
model.selection('dif1').set('add', {'com1'});
model.selection('dif1').set('subtract', {'uni4' 'sel11' 'uni5'});
model.selection.create('disk1', 'Disk');
model.selection('disk1').model('comp1');
model.selection('disk1').set('angletol', 5);
model.selection('disk1').label('External boundaries');
model.selection('disk1').set('entitydim', 1);
model.selection('disk1').set('r', 'inf');
model.selection('disk1').set('rin', 'r_stator');
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Adjacent to rotor forces');
model.selection('adj1').set('input', {'uni2'});
model.selection.create('adj2', 'Adjacent');
model.selection('adj2').model('comp1');
model.selection('adj2').label('Adjacent to stator forces');
model.selection('adj2').set('input', {'dif1'});
model.selection.create('dif2', 'Difference');
model.selection('dif2').model('comp1');
model.selection('dif2').label('Force calculation');
model.selection('dif2').set('entitydim', 1);
model.selection('dif2').set('add', {'adj1' 'adj2'});
model.selection('dif2').set('subtract', {'disk1'});
model.selection.create('adj3', 'Adjacent');
model.selection('adj3').model('comp1');
model.selection('adj3').label('Adjacent to air gaps and coils');
model.selection('adj3').set('input', {'sel5' 'uni4' 'sel9'});
model.selection.create('uni6', 'Union');
model.selection('uni6').model('comp1');
model.selection('uni6').label('Iron');
model.selection('uni6').set('input', {'sel1' 'sel2' 'dif1'});
model.selection.create('uni7', 'Union');
model.selection('uni7').model('comp1');
model.selection('uni7').label('Force calculation domains');
model.selection('uni7').set('input', {'sel5' 'uni4' 'sel9'});
model.selection.create('dif3', 'Difference');
model.selection('dif3').model('comp1');
model.selection('dif3').label('Adjacent to air gap in the stator');
model.selection('dif3').set('entitydim', 1);
model.selection('dif3').set('add', {'adj2'});
model.selection('dif3').set('subtract', {'disk1'});

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('rotation', 'if(isdefined(t),w0*t+ang0,0)');
model.variable('var1').descr('rotation', 'Rotation');

model.cpl.create('genext1', 'GeneralExtrusion', 'geom1');
model.cpl('genext1').selection.geom('geom1', 1);
model.cpl('genext1').selection.named('dif2');
model.cpl('genext1').set('dstmap', {'y' 'z'});
model.cpl('genext1').set('usesrcmap', true);
model.cpl('genext1').set('method', 'closest');
model.cpl('genext1').set('usenan', true);

model.coordSystem.create('sys3', 'geom1', 'Cylindrical');

model.common.create('rot1', 'RotatingDomain', 'comp1');
model.common('rot1').selection.all;
model.common('rot1').selection.named('uni3');
model.common('rot1').set('rotationAngle', 'rotation');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('BHCurve', 'B-H Curve');
model.material('mat1').propertyGroup('BHCurve').func.create('BH', 'Interpolation');
model.material('mat1').propertyGroup.create('EffectiveBHCurve', 'Effective B-H Curve');
model.material('mat1').propertyGroup('EffectiveBHCurve').func.create('BHeff', 'Interpolation');
model.material('mat1').label('Soft Iron (Without Losses)');
model.material('mat1').set('family', 'iron');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('BHCurve').label('B-H Curve');
model.material('mat1').propertyGroup('BHCurve').func('BH').label('Interpolation 1');
model.material('mat1').propertyGroup('BHCurve').func('BH').set('table', {'0' '0';  ...
'663.146' '1';  ...
'1067.5' '1.1';  ...
'1705.23' '1.2';  ...
'2463.11' '1.3';  ...
'3841.67' '1.4';  ...
'5425.74' '1.5';  ...
'7957.75' '1.6';  ...
'12298.3' '1.7';  ...
'20462.8' '1.8';  ...
'32169.6' '1.9';  ...
'61213.4' '2';  ...
'111408' '2.1';  ...
'188487.757' '2.2';  ...
'267930.364' '2.3';  ...
'347507.836' '2.4'});
model.material('mat1').propertyGroup('BHCurve').func('BH').set('extrap', 'linear');
model.material('mat1').propertyGroup('BHCurve').func('BH').set('fununit', {'T'});
model.material('mat1').propertyGroup('BHCurve').func('BH').set('argunit', {'A/m'});
model.material('mat1').propertyGroup('BHCurve').func('BH').set('defineinv', true);
model.material('mat1').propertyGroup('BHCurve').func('BH').set('defineprimfun', true);
model.material('mat1').propertyGroup('BHCurve').set('normB', 'BH(normHin)');
model.material('mat1').propertyGroup('BHCurve').set('normH', 'BH_inv(normBin)');
model.material('mat1').propertyGroup('BHCurve').set('Wpm', 'BH_prim(normHin)');
model.material('mat1').propertyGroup('BHCurve').descr('normHin', 'Magnetic field norm');
model.material('mat1').propertyGroup('BHCurve').descr('normBin', 'Magnetic flux density norm');
model.material('mat1').propertyGroup('BHCurve').addInput('magneticfield');
model.material('mat1').propertyGroup('BHCurve').addInput('magneticfluxdensity');
model.material('mat1').propertyGroup('EffectiveBHCurve').label('Effective B-H Curve');
model.material('mat1').propertyGroup('EffectiveBHCurve').func('BHeff').label('Interpolation 1');
model.material('mat1').propertyGroup('EffectiveBHCurve').func('BHeff').set('table', {'0' '0';  ...
'663.146' '1.000000051691021';  ...
'1067.5' '1.4936495124126294';  ...
'1705.23' '1.9415328461315795';  ...
'2463.11' '2.257765669366018';  ...
'3841.67' '2.609980642431287';  ...
'5425.74' '2.8664452090837504';  ...
'7957.75' '3.1441438097176118';  ...
'12298.3' '3.448538051654125';  ...
'20462.8' '3.7816711973679054';  ...
'32169.6' '4.058345590113038';  ...
'61213.4' '4.420646552950275';  ...
'111408' '4.721274089545955';  ...
'188487.757' '4.972148140718701';  ...
'267930.364' '5.145510860855953';  ...
'347507.836' '5.245510861426532'});
model.material('mat1').propertyGroup('EffectiveBHCurve').func('BHeff').set('extrap', 'linear');
model.material('mat1').propertyGroup('EffectiveBHCurve').func('BHeff').set('fununit', {'T'});
model.material('mat1').propertyGroup('EffectiveBHCurve').func('BHeff').set('argunit', {'A/m'});
model.material('mat1').propertyGroup('EffectiveBHCurve').func('BHeff').set('defineinv', true);
model.material('mat1').propertyGroup('EffectiveBHCurve').set('normBeff', 'BHeff(normHeffin)');
model.material('mat1').propertyGroup('EffectiveBHCurve').set('normHeff', 'BHeff_inv(normBeffin)');
model.material('mat1').propertyGroup('EffectiveBHCurve').descr('normHeffin', 'Effective magnetic field norm');
model.material('mat1').propertyGroup('EffectiveBHCurve').descr('normBeffin', 'Effective magnetic flux density norm');
model.material('mat1').propertyGroup('EffectiveBHCurve').addInput('magneticfield');
model.material('mat1').propertyGroup('EffectiveBHCurve').addInput('magneticfluxdensity');
model.material('mat1').selection.named('uni6');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat1').propertyGroup('BHCurve').set('normB', {'BH(normHin)'});
model.material('mat1').propertyGroup('BHCurve').set('normH', {'BH_inv(normBin)'});
model.material('mat1').propertyGroup('BHCurve').set('Wpm', {'BH_prim(normHin)'});
model.material('mat1').propertyGroup('EffectiveBHCurve').set('normBeff', {'BHeff(normHeffin)'});
model.material('mat1').propertyGroup('EffectiveBHCurve').set('normHeff', {'BHeff_inv(normBeffin)'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat2').label('Copper');
model.material('mat2').set('family', 'copper');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('emissivity', '0.5');
model.material('mat2').propertyGroup('def').set('density', '8940[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '126e9[Pa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.34');
model.material('mat2').propertyGroup('linzRes').set('rho0', '1.667e-8[ohm*m]');
model.material('mat2').propertyGroup('linzRes').set('alpha', '3.862e-3[1/K]');
model.material('mat2').propertyGroup('linzRes').set('Tref', '293.15[K]');
model.material('mat2').propertyGroup('linzRes').addInput('temperature');
model.material('mat2').selection.named('uni4');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('RemanentFluxDensity', 'Remanent flux density');
model.material('mat3').label('N40 (Sintered NdFeB)');
model.material('mat3').set('family', 'chrome');
model.material('mat3').propertyGroup('def').set('electricconductivity', {'1/1.4[uohm*m]' '0' '0' '0' '1/1.4[uohm*m]' '0' '0' '0' '1/1.4[uohm*m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('RemanentFluxDensity').set('murec', {'1.05' '0' '0' '0' '1.05' '0' '0' '0' '1.05'});
model.material('mat3').propertyGroup('RemanentFluxDensity').set('normBr', '1.28[T]');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat4').label('Aluminum 6063-T83');
model.material('mat4').set('family', 'aluminum');
model.material('mat4').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('electricconductivity', {'3.030e7[S/m]' '0' '0' '0' '3.030e7[S/m]' '0' '0' '0' '3.030e7[S/m]'});
model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', {'23.4e-6[1/K]' '0' '0' '0' '23.4e-6[1/K]' '0' '0' '0' '23.4e-6[1/K]'});
model.material('mat4').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat4').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'201[W/(m*K)]' '0' '0' '0' '201[W/(m*K)]' '0' '0' '0' '201[W/(m*K)]'});
model.material('mat4').propertyGroup('Enu').set('E', '69[GPa]');
model.material('mat4').propertyGroup('Enu').set('nu', '0.33');
model.material('mat3').selection.named('uni1');
model.material('mat4').selection.named('sel11');

model.physics('mf').prop('d').set('d', 'Ltransv');
model.physics('mf').prop('ShapeProperty').set('order_magneticvectorpotential', 1);
model.physics('mf').selection.set([8 9 10 11 12 13 15 16 17 18 19 20 21 22 23 24 25 26 27 28 32 33 34 35 36 37 38 39 40]);
model.physics('mf').create('als1', 'AmperesLawSolid', 2);
model.physics('mf').feature('als1').label('Iron Domains');
model.physics('mf').feature('als1').selection.named('uni6');
model.physics('mf').feature('als1').set('ConstitutiveRelationBH', 'BHCurve');
model.physics('mf').create('als2', 'AmperesLawSolid', 2);
model.physics('mf').feature('als2').label('Magnets A');
model.physics('mf').feature('als2').selection.named('sel3');
model.physics('mf').feature('als2').set('coordinateSystem', 'sys3');
model.physics('mf').feature('als2').set('ConstitutiveRelationBH', 'RemanentFluxDensity');
model.physics('mf').feature('als2').set('sigma_mat', 'userdef');
model.physics('mf').feature.duplicate('als3', 'als2');
model.physics('mf').feature('als3').label('Magnets B');
model.physics('mf').feature('als3').selection.named('sel4');
model.physics('mf').feature('als3').set('e_crel_BH_RemanentFluxDensity', [-1 0 0]);
model.physics('mf').create('coil1', 'Coil', 2);
model.physics('mf').feature('coil1').label('Coils A');
model.physics('mf').feature('coil1').selection.named('sel6');
model.physics('mf').feature('coil1').setIndex('materialType', 'solid', 0);
model.physics('mf').feature('coil1').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil1').set('coilGroup', true);
model.physics('mf').feature('coil1').set('ICoil', 'I0*cos(3*rotation)');
model.physics('mf').feature('coil1').set('N', 'Ncoil');
model.physics('mf').feature('coil1').set('coilWindArea', 'a_coil');
model.physics('mf').feature('coil1').create('rcd1', 'ReverseCoilGroupDomain', 2);
model.physics('mf').feature('coil1').feature('rcd1').selection.set([15 18 27]);
model.physics('mf').feature.duplicate('coil2', 'coil1');
model.physics('mf').feature('coil2').label('Coils B');
model.physics('mf').feature('coil2').selection.named('sel7');
model.physics('mf').feature('coil2').set('ICoil', 'I0*cos(3*rotation-120[deg])');
model.physics('mf').feature('coil2').feature('rcd1').selection.set([13 19 26]);
model.physics('mf').feature.duplicate('coil3', 'coil2');
model.physics('mf').feature('coil3').label('Coils C');
model.physics('mf').feature('coil3').selection.named('sel8');
model.physics('mf').feature('coil3').set('ICoil', 'I0*cos(3*rotation-240[deg])');
model.physics('mf').feature('coil3').feature('rcd1').selection.set([9 22 23]);
model.physics('mf').create('cont1', 'Continuity', 1);
model.physics('mf').feature('cont1').set('pairs', {'ap2'});
model.physics('mf').create('fcal1', 'ForceCalculation', 2);
model.physics('mf').feature('fcal1').label('Force Calculation Rotor');
model.physics('mf').feature('fcal1').selection.named('uni2');
model.physics('mf').feature('fcal1').set('ForceName', 'rot');
model.physics('mf').feature.duplicate('fcal2', 'fcal1');
model.physics('mf').feature('fcal2').label('Force Calculation Stator');
model.physics('mf').feature('fcal2').selection.named('dif1');
model.physics('mf').feature('fcal2').set('ForceName', 'stat');
model.physics('wb').selection.named('dif2');
model.physics('wb').prop('ShapeProperty').set('order', 1);
model.physics('wb').field('dimensionless').component({'u' 'u2'});
model.physics('wb').field('dimensionless').component(1, 'Fx');
model.physics('wb').field('dimensionless').component(2, 'Fy');
model.physics('wb').prop('Units').set('CustomDependentVariableUnit', '1');
model.physics('wb').prop('Units').set('DependentVariableQuantity', 'none');
model.physics('wb').prop('Units').setIndex('CustomDependentVariableUnit', 'N/m^2', 0, 0);
model.physics('wb').prop('Units').set('CustomSourceTermUnit', 'm^-2');
model.physics('wb').prop('Units').set('SourceTermQuantity', 'none');
model.physics('wb').prop('Units').setIndex('CustomSourceTermUnit', 'N/m^2', 0, 0);
model.physics('wb').feature('init1').set('Fx', 'if(isnan(mf.nTx_stat),mf.nTx_rot*cos(rotation)+mf.nTy_rot*sin(rotation),mf.nTx_stat)');
model.physics('wb').feature('init1').set('Fy', 'if(isnan(mf.nTy_stat),-mf.nTx_rot*sin(rotation)+mf.nTy_rot*cos(rotation),mf.nTy_stat)');

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', '4[mm]');
model.mesh('mesh1').feature('size').set('hmin', '1[mm]');
model.mesh('mesh1').feature('size').set('hgrad', 1.15);
model.mesh('mesh1').feature('size').set('hcurve', 0.1);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh1').feature('ftri1').feature('size1').selection.named('dif2');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', '0.3[mm]');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmin', '0.15[mm]');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hgradactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hgrad', 1.05);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hcurveactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hcurve', 0.05);
model.mesh('mesh1').run;
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').set('smoothtransition', false);
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('dif2');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 1);
model.mesh('mesh1').run;

model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('tlist', 'range(0,1/12/n_harmonics,1)*t_tot');
model.study('std1').feature('time').setEntry('activate', 'wb', false);
model.study('std1').feature('time').set('useinitsol', true);
model.study('std1').feature('time').set('initmethod', 'sol');
model.study('std1').feature('time').set('initstudy', 'std1');
model.study('std1').feature('time').setEntry('mesh', 'geom2', 'nomesh');
model.study('std1').feature('stat').setEntry('activate', 'wb', false);
model.study('std1').feature('stat').setEntry('mesh', 'geom2', 'nomesh');
model.study('std1').label('Study 1 - Electromagnetic Analysis');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,1/12/n_harmonics,1)*t_tot');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('tout', 'tstepsclosest');
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 25);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.2);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 25);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.2);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Magnetic Flux Density Norm (mf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 85, 0);
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('surf1').set('colorcalibration', -0.8);
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature.create('str1', 'Streamline');
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('solutionparams', 'parent');
model.result('pg1').feature('str1').set('titletype', 'none');
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('udist', 0.03);
model.result('pg1').feature('str1').set('maxlen', 0.4);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('inheritcolor', false);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('data', 'parent');
model.result('pg1').feature('str1').selection.geom('geom1', 1);
model.result('pg1').feature('str1').selection.set([28 29 32 33 34 35 38 39 43 44 48 49 51 52 53 54 55 56 57 58 59 60 61 62 65 66 67 68 69 70 71 72 77 78 79 80 83 84 85 86 87 88 89 90 91 92 93 94 99 100 101 102 103 104 105 106 108 109 110 111 112 113 116 117 119 120 121 122 123 124 126 127 168 169 170 171 176 177 178 179 183 184 185 186 187 188 189 190 191 192 193 194 196 197 199 200 203 204 205 206 207 208 213 214 215 216 217 218 219 220 221 222 225 226 227 228 229 230 231 232 237 238 239 240 241 242 244 245 247 248 250 251 252 253 258 259 260 261 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327]);
model.result('pg1').feature('str1').set('inheritplot', 'surf1');
model.result('pg1').feature('str1').feature.create('col1', 'Color');
model.result('pg1').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg1').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg1').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg1').feature('str1').feature.create('filt1', 'Filter');
model.result('pg1').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').feature.create('con1', 'Contour');
model.result('pg1').feature('con1').set('showsolutionparams', 'on');
model.result('pg1').feature('con1').set('solutionparams', 'parent');
model.result('pg1').feature('con1').set('expr', 'mf.Az');
model.result('pg1').feature('con1').set('titletype', 'none');
model.result('pg1').feature('con1').set('number', 10);
model.result('pg1').feature('con1').set('levelrounding', false);
model.result('pg1').feature('con1').set('coloring', 'uniform');
model.result('pg1').feature('con1').set('colorlegend', false);
model.result('pg1').feature('con1').set('color', 'custom');
model.result('pg1').feature('con1').set('customcolor', [0.3764705955982208 0.3764705955982208 0.3764705955982208]);
model.result('pg1').feature('con1').set('resolution', 'fine');
model.result('pg1').feature('con1').set('inheritcolor', false);
model.result('pg1').feature('con1').set('showsolutionparams', 'on');
model.result('pg1').feature('con1').set('data', 'parent');
model.result('pg1').feature('con1').set('inheritplot', 'surf1');
model.result('pg1').feature('con1').feature.create('filt1', 'Filter');
model.result('pg1').feature('con1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').set('rangecoloractive', true);
model.result('pg1').feature('surf1').set('rangecolormin', 0);
model.result('pg1').feature('surf1').set('rangecolormax', 1.5);
model.result('pg1').run;
model.result('pg1').set('titletype', 'label');
model.result('pg1').set('showlegends', false);
model.result('pg1').create('arwl1', 'ArrowLine');
model.result('pg1').feature('arwl1').set('expr', {'mf.nTx_stat' 'mf.By'});
model.result('pg1').feature('arwl1').setIndex('expr', 'mf.nTy_stat', 1);
model.result('pg1').feature('arwl1').set('placement', 'gausspoints');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').create('arwl2', 'ArrowLine');
model.result('pg1').feature('arwl2').set('expr', {'mf.nTx_rot' 'mf.nTy_rot'});
model.result('pg1').feature('arwl2').set('placement', 'gausspoints');
model.result('pg1').feature('arwl2').set('titletype', 'none');
model.result('pg1').feature('arwl2').set('color', 'blue');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('arwl1').active(false);
model.result('pg1').feature('arwl2').active(false);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('titletype', 'none');

model.view('view1').set('showgrid', false);

model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 'interp', 0);
model.result('pg1').set('interp', [0.25]);
model.result('pg1').run;
model.result('pg1').set('interp', [0.5]);
model.result('pg1').run;
model.result('pg1').set('interp', [0.75]);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 43, 0);
model.result('pg1').set('titletype', 'label');
model.result('pg1').run;

model.view('view1').set('showgrid', true);

model.result('pg1').run;
model.result('pg1').feature('arwl1').active(true);
model.result('pg1').feature('arwl2').active(true);
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Electromagnetic Forces in Selected Points, Time Domain');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Stress (MPa)');
model.result('pg2').set('titletype', 'label');
model.result('pg2').create('ptgr1', 'PointGraph');
model.result('pg2').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg2').feature('ptgr1').set('linewidth', 'preference');
model.result('pg2').feature('ptgr1').selection.set([174]);
model.result('pg2').feature('ptgr1').set('expr', 'abs(mf.nTx_stat)');
model.result('pg2').feature('ptgr1').set('unit', 'MPa');
model.result('pg2').feature('ptgr1').set('descractive', true);
model.result('pg2').feature('ptgr1').set('descr', 'Absolute x stress');
model.result('pg2').feature('ptgr1').set('legend', true);
model.result('pg2').feature('ptgr1').set('autodescr', true);
model.result('pg2').feature('ptgr1').set('linemarker', 'point');
model.result('pg2').run;
model.result('pg2').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg2').run;
model.result('pg2').feature('ptgr2').set('expr', 'abs(mf.nTy_stat)');
model.result('pg2').feature('ptgr2').set('descr', 'Absolute y stress');
model.result('pg2').feature.duplicate('ptgr3', 'ptgr2');
model.result('pg2').run;
model.result('pg2').feature('ptgr3').selection.set([176]);
model.result('pg2').feature('ptgr3').set('expr', 'abs(mf.nTx_stat)');
model.result('pg2').feature('ptgr3').set('descr', 'Absolute x stress');
model.result('pg2').feature.duplicate('ptgr4', 'ptgr3');
model.result('pg2').run;
model.result('pg2').feature('ptgr4').set('expr', 'abs(mf.nTy_stat)');
model.result('pg2').feature('ptgr4').set('descr', 'Absolute y stress');
model.result('pg2').run;
model.result('pg2').run;
model.result.duplicate('pg3', 'pg2');
model.result('pg3').run;
model.result('pg3').label('Electromagnetic Forces in Selected Points, FFT');
model.result('pg3').set('xlabelactive', true);
model.result('pg3').set('xlabel', 'Frequency (Hz)');
model.result('pg3').set('ylabel', 'Fourier Coefficient (MPa)');
model.result('pg3').run;
model.result('pg3').feature('ptgr1').set('xdata', 'fourier');
model.result('pg3').feature('ptgr1').set('fouriershow', 'spectrum');
model.result('pg3').feature('ptgr1').set('freqrangeactive', true);
model.result('pg3').feature('ptgr1').set('freqmin', 'f0/2');
model.result('pg3').feature('ptgr1').set('freqmax', 'f0*(n_harmonics+1)');
model.result('pg3').run;
model.result('pg3').feature('ptgr2').set('xdata', 'fourier');
model.result('pg3').feature('ptgr2').set('fouriershow', 'spectrum');
model.result('pg3').feature('ptgr2').set('freqrangeactive', true);
model.result('pg3').feature('ptgr2').set('freqmin', 'f0/2');
model.result('pg3').feature('ptgr2').set('freqmax', 'f0*(n_harmonics+1)');
model.result('pg3').run;
model.result('pg3').feature('ptgr3').set('xdata', 'fourier');
model.result('pg3').feature('ptgr3').set('fouriershow', 'spectrum');
model.result('pg3').feature('ptgr3').set('freqrangeactive', true);
model.result('pg3').feature('ptgr3').set('freqmin', 'f0/2');
model.result('pg3').feature('ptgr3').set('freqmax', 'f0*(n_harmonics+1)');
model.result('pg3').run;
model.result('pg3').feature('ptgr4').set('xdata', 'fourier');
model.result('pg3').feature('ptgr4').set('fouriershow', 'spectrum');
model.result('pg3').feature('ptgr4').set('freqrangeactive', true);
model.result('pg3').feature('ptgr4').set('freqmin', 'f0/2');
model.result('pg3').feature('ptgr4').set('freqmax', 'f0*(n_harmonics+1)');
model.result('pg3').set('ylog', true);
model.result('pg3').run;
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Electromagnetic Forces in Selected Points, FFT , Normalized to First Harmonic');
model.result('pg4').set('ylabel', 'Normalized Fourier Coefficient (1)');
model.result('pg4').set('legendpos', 'lowerleft');
model.result('pg4').run;
model.result('pg4').feature('ptgr1').set('expr', 'abs(mf.nTx_stat)/5.4675[MPa]');
model.result('pg4').feature('ptgr1').set('descr', 'Absolute x stress normalized to first harmonic');
model.result('pg4').run;
model.result('pg4').feature('ptgr2').set('expr', 'abs(mf.nTy_stat)/0.330696[MPa]');
model.result('pg4').feature('ptgr2').set('descr', 'Absolute y stress normalized to first harmonic');
model.result('pg4').run;
model.result('pg4').feature('ptgr3').set('expr', 'abs(mf.nTx_stat)/0.079339[MPa]');
model.result('pg4').feature('ptgr3').set('descr', 'Absolute x stress normalized to first harmonic');
model.result('pg4').run;
model.result('pg4').feature('ptgr4').set('expr', 'abs(mf.nTy_stat)/6.187[MPa]');
model.result('pg4').feature('ptgr4').set('descr', 'Absolute y stress normalized to first harmonic');
model.result('pg4').run;

model.study.create('std2');
model.study('std2').label('Study 2 - Electromagnetic Forces FFT');
model.study('std2').create('tffft', 'TimeToFreqFFT');
model.study('std2').feature('tffft').set('fftinputmethod', 'init');
model.study('std2').feature('tffft').set('fftinputstudy', 'std1');
model.study('std2').feature('tffft').set('fftendtime', 't_tot');
model.study('std2').feature('tffft').set('fftmaxfreq', 'n_harmonics/t_tot');
model.study('std2').feature('tffft').setEntry('activate', 'mf', false);

model.sol.create('sol3');
model.sol('sol3').study('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'tffft');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'tffft');
model.sol('sol3').create('fft1', 'FFT');
model.sol('sol3').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol3').feature('fft1').set('fftinputdata', 'fftperiodic');
model.sol('sol3').feature('fft1').set('fftoutorder', 'sym');
model.sol('sol3').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol3').feature('fft1').set('cname', 't');
model.sol('sol3').feature('fft1').set('clist', {'0'});
model.sol('sol3').feature('fft1').set('clistctrl', {'fft1_const'});
model.sol('sol3').feature('fft1').set('control', 'tffft');
model.sol('sol3').attach('std2');
model.sol('sol3').runAll;

model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 8, 0);
model.result('pg5').create('line1', 'Line');
model.result('pg5').label('Weak Form Boundary PDE');
model.result('pg5').feature('line1').set('expr', 'Fx');
model.result('pg5').run;
model.result('pg5').label('Electromagnetic Forces, FFT');
model.result('pg5').set('edges', false);
model.result('pg5').run;
model.result('pg5').feature('line1').set('titletype', 'none');
model.result('pg5').feature('line1').set('linetype', 'tube');
model.result('pg5').feature('line1').set('radiusexpr', '0.0002');
model.result('pg5').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg5').feature('line1').set('coloring', 'uniform');
model.result('pg5').feature('line1').set('color', 'black');
model.result('pg5').run;
model.result('pg5').create('arwl1', 'ArrowLine');
model.result('pg5').feature('arwl1').set('expr', {'real(Fx)/t_tot' 'mf.By'});
model.result('pg5').feature('arwl1').setIndex('expr', 'real(Fy)/t_tot', 1);
model.result('pg5').feature('arwl1').set('descractive', true);
model.result('pg5').feature('arwl1').set('descr', 'Real Force Components (Red)');
model.result('pg5').feature('arwl1').set('placement', 'gausspoints');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').create('arwl2', 'ArrowLine');
model.result('pg5').feature('arwl2').set('expr', {'imag(Fx)/t_tot' 'mf.By'});
model.result('pg5').feature('arwl2').setIndex('expr', 'imag(Fy)/t_tot', 1);
model.result('pg5').feature('arwl2').set('descractive', true);
model.result('pg5').feature('arwl2').set('descr', 'Imaginary Force Components (Blue)');
model.result('pg5').feature('arwl2').set('placement', 'gausspoints');
model.result('pg5').feature('arwl2').set('color', 'blue');
model.result('pg5').run;
model.result('pg1').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').add('plotgroup', 'pg1');
model.nodeGroup('grp1').add('plotgroup', 'pg2');
model.nodeGroup('grp1').add('plotgroup', 'pg3');
model.nodeGroup('grp1').add('plotgroup', 'pg4');
model.nodeGroup('grp1').add('plotgroup', 'pg5');
model.nodeGroup('grp1').label('Electromagnetic Results');

model.physics.create('acpr', 'PressureAcoustics', 'geom2');
model.physics('acpr').model('comp2');

model.study('std1').feature('stat').setSolveFor('/physics/acpr', false);
model.study('std1').feature('time').setSolveFor('/physics/acpr', false);
model.study('std2').feature('tffft').setSolveFor('/physics/acpr', false);

model.physics.create('solid', 'SolidMechanics', 'geom2');
model.physics('solid').model('comp2');

model.study('std1').feature('stat').setSolveFor('/physics/solid', false);
model.study('std1').feature('time').setSolveFor('/physics/solid', false);
model.study('std2').feature('tffft').setSolveFor('/physics/solid', false);

model.multiphysics.create('asb1', 'AcousticStructureBoundary', 'geom2', 2);

model.study('std1').feature('stat').setSolveFor('/multiphysics/asb1', false);
model.study('std1').feature('time').setSolveFor('/multiphysics/asb1', false);
model.study('std2').feature('tffft').setSolveFor('/multiphysics/asb1', false);

model.multiphysics('asb1').set('Acoustics_physics', 'acpr');
model.multiphysics('asb1').set('Structure_physics', 'solid');
model.multiphysics('asb1').selection.all;

model.physics('acpr').selection.named('geom2_comsel1');
model.physics('acpr').create('efc1', 'ExteriorFieldCalculation', 2);
model.physics('acpr').feature('efc1').selection.named('geom2_sel7');
model.physics('acpr').feature('efc1').setIndex('SymmetryCondition2', 1, 0);
model.physics('acpr').feature('efc1').setIndex('SymmetryPosition2', -0.073, 0);
model.physics('solid').selection.named('geom2_unisel1');
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.named('geom2_sel8');
model.physics('solid').feature('lemm1').create('dmp1', 'Damping', 3);
model.physics('solid').feature('lemm1').feature('dmp1').set('InputParameters', 'DampingRatios');
model.physics('solid').feature('lemm1').feature('dmp1').set('f1', 'f0');
model.physics('solid').feature('lemm1').feature('dmp1').set('zeta1', 'eta_struct');
model.physics('solid').feature('lemm1').feature('dmp1').set('f2', 'fmax');
model.physics('solid').feature('lemm1').feature('dmp1').set('zeta2', 'eta_struct');
model.physics('solid').create('bndl1', 'BoundaryLoad', 2);
model.physics('solid').feature('bndl1').selection.named('geom2_sel6');
model.physics('solid').feature('bndl1').set('FperArea', {'0' 'tor(rpm)*comp1.genext1(withsol(''sol3'',Fx,setval(freq,f0*(harm_exc))))' 'tor(rpm)*comp1.genext1(withsol(''sol3'',Fy,setval(freq,f0*(harm_exc))))'});

model.mesh('mesh2').create('ftri1', 'FreeTri');
model.mesh('mesh2').feature('ftri1').selection.named('geom2_sel9');
model.mesh('mesh2').feature('size').set('custom', true);
model.mesh('mesh2').feature('size').set('hmax', 'c0/fmax/5');
model.mesh('mesh2').feature('size').set('hmin', '3[mm]');
model.mesh('mesh2').run;
model.mesh('mesh2').feature('ftri1').create('size1', 'Size');
model.mesh('mesh2').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh2').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh2').feature('ftri1').feature('size1').set('hmax', '10[mm]');
model.mesh('mesh2').feature('ftri1').feature('size1').set('hminactive', true);
model.mesh('mesh2').feature('ftri1').feature('size1').set('hmin', '0.3[mm]');
model.mesh('mesh2').feature('ftri1').feature('size1').set('hgradactive', true);
model.mesh('mesh2').feature('ftri1').feature('size1').set('hgrad', 1.2);
model.mesh('mesh2').feature('ftri1').feature('size1').set('hcurveactive', true);
model.mesh('mesh2').feature('ftri1').feature('size1').set('hcurve', 0.1);
model.mesh('mesh2').feature('ftri1').feature('size1').selection.set([301 306 331 334 337 351 354 376 379 403 406 437 445 464 467 496 499 505 508 525 528 949 952 957 966 969 993 996]);
model.mesh('mesh2').run('ftri1');
model.mesh('mesh2').create('cpf1', 'CopyFace');
model.mesh('mesh2').feature('cpf1').selection('source').geom(2);
model.mesh('mesh2').feature('cpf1').selection('destination').geom(2);
model.mesh('mesh2').feature('cpf1').selection('source').set([431]);
model.mesh('mesh2').feature('cpf1').selection('destination').set([916]);
model.mesh('mesh2').run('cpf1');
model.mesh('mesh2').create('swe1', 'Sweep');
model.mesh('mesh2').feature('swe1').selection.geom('geom2', 3);
model.mesh('mesh2').feature('swe1').selection.named('geom2_sel10');
model.mesh('mesh2').run('swe1');
model.mesh('mesh2').create('ftet1', 'FreeTet');
model.mesh('mesh2').feature('ftet1').selection.geom('geom2', 3);
model.mesh('mesh2').feature('ftet1').selection.named('geom2_comsel2');
model.mesh('mesh2').run('ftet1');
model.mesh('mesh2').create('swe2', 'Sweep');
model.mesh('mesh2').feature('swe2').selection.geom('geom2', 3);
model.mesh('mesh2').feature('swe2').selection.named('geom2_sel5');
model.mesh('mesh2').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh2').feature('swe2').feature('dis1').set('numelem', 6);
model.mesh('mesh2').run('swe2');
model.mesh('mesh2').create('bl1', 'BndLayer');
model.mesh('mesh2').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh2').feature('bl1').selection.geom(3);
model.mesh('mesh2').feature('bl1').selection.set([]);
model.mesh('mesh2').feature('bl1').selection.allGeom;
model.mesh('mesh2').feature('bl1').selection.geom('geom2', 3);
model.mesh('mesh2').feature('bl1').selection.set([9]);
model.mesh('mesh2').feature('bl1').set('smoothtransition', false);
model.mesh('mesh2').feature('bl1').feature('blp').set('blnlayers', 1);
model.mesh('mesh2').feature('bl1').feature('blp').selection.named('geom2_sel7');
model.mesh('mesh2').run('bl1');

model.variable.create('var2');
model.variable('var2').model('comp2');
model.variable('var2').set('rpm', 'acpr.freq/f0*rpm0/harm_exc');
model.variable('var2').descr('rpm', 'Revolutions');
model.variable('var2').set('p_mic1', 'subst(abs(acpr.efc1.pext),x,0,y,0,z,z_mic1)');
model.variable('var2').descr('p_mic1', 'Absolute pressure at microphone 1');
model.variable('var2').set('spl_mic1', 'subst(acpr.efc1.Lp_pext,x,0,y,0,z,z_mic1)');
model.variable('var2').descr('spl_mic1', 'Sound pressure level at microphone 1');
model.variable('var2').set('p_mic2', 'subst(abs(acpr.efc1.pext),x,0,y,y_mic2,z,0)');
model.variable('var2').descr('p_mic2', 'Absolute pressure at microphone 2');
model.variable('var2').set('spl_mic2', 'subst(acpr.efc1.Lp_pext,x,0,y,y_mic2,z,0)');
model.variable('var2').descr('spl_mic2', 'Sound pressure level at microphone 2');

model.func.create('an1', 'Analytic');
model.func('an1').model('comp2');
model.func('an1').label('Torque curve');
model.func('an1').set('funcname', 'tor');
model.func('an1').set('expr', 'if(rev<4000,1,4000/rev)');
model.func('an1').set('args', 'rev');
model.func('an1').setIndex('argunit', 'rpm', 0);
model.func('an1').set('fununit', '1');
model.func('an1').setIndex('plotargs', '10000[rpm]', 0, 2);
model.func.create('an2', 'Analytic');
model.func('an2').model('comp2');
model.func('an2').label('Revolutions ramp');
model.func('an2').set('funcname', 'rev_ramp');
model.func('an2').set('expr', '200+9800*t/20[s]');
model.func('an2').set('args', 't');
model.func('an2').setIndex('argunit', 's', 0);
model.func('an2').set('fununit', 'rpm');
model.func('an2').setIndex('plotargs', '20[s]', 0, 2);

model.coordSystem.create('pml1', 'geom2', 'PML');
model.coordSystem('pml1').selection.named('geom2_sel5');
model.coordSystem('pml1').set('stretchingType', 'rational');

model.material.create('mat5', 'Common', 'comp2');
model.material('mat5').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat5').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat5').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat5').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat5').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat5').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat5').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat5').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat5').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat5').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat5').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat5').label('Air');
model.material('mat5').set('family', 'air');
model.material('mat5').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat5').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat5').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat5').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat5').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat5').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat5').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat5').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat5').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat5').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat5').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat5').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat5').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat5').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat5').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat5').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat5').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat5').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat5').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat5').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat5').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat5').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat5').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat5').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat5').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat5').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat5').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat5').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat5').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat5').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat5').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat5').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat5').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat5').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat5').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat5').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat5').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat5').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat5').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat5').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat5').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat5').propertyGroup('def').set('molarmass', '');
model.material('mat5').propertyGroup('def').set('bulkviscosity', '');
model.material('mat5').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat5').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat5').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat5').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat5').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat5').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat5').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat5').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat5').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat5').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat5').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat5').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat5').propertyGroup('def').addInput('temperature');
model.material('mat5').propertyGroup('def').addInput('pressure');
model.material('mat5').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat5').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat5').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat5').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat5').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat5').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat5').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat5').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat5').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat5').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat5').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat5').propertyGroup('idealGas').addInput('temperature');
model.material('mat5').propertyGroup('idealGas').addInput('pressure');
model.material('mat5').materialType('nonSolid');
model.material.create('mat6', 'Common', 'comp2');
model.material('mat6').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat6').label('Steel AISI 4340');
model.material('mat6').set('family', 'steel');
model.material('mat6').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat6').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat6').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat6').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat6').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat6').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat6').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat6').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat6').propertyGroup('Enu').set('nu', '0.28');
model.material.create('mat7', 'Common', 'comp2');
model.material('mat7').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat7').label('Aluminum 6063-T83');
model.material('mat7').set('family', 'aluminum');
model.material('mat7').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('electricconductivity', {'3.030e7[S/m]' '0' '0' '0' '3.030e7[S/m]' '0' '0' '0' '3.030e7[S/m]'});
model.material('mat7').propertyGroup('def').set('thermalexpansioncoefficient', {'23.4e-6[1/K]' '0' '0' '0' '23.4e-6[1/K]' '0' '0' '0' '23.4e-6[1/K]'});
model.material('mat7').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat7').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat7').propertyGroup('def').set('thermalconductivity', {'201[W/(m*K)]' '0' '0' '0' '201[W/(m*K)]' '0' '0' '0' '201[W/(m*K)]'});
model.material('mat7').propertyGroup('Enu').set('E', '69[GPa]');
model.material('mat7').propertyGroup('Enu').set('nu', '0.33');
model.material('mat5').selection.named('geom2_comsel1');
model.material('mat6').selection.named('geom2_sel1');
model.material('mat7').selection.named('geom2_sel3');
model.material.create('mat8', 'Common', 'comp2');
model.material('mat8').label('Coil');
model.material('mat8').selection.named('geom2_sel2');
model.material('mat8').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat8').propertyGroup('Enu').set('E', {'5[GPa]'});
model.material('mat8').propertyGroup('Enu').set('nu', {'0.3'});
model.material('mat8').propertyGroup('def').set('density', {'8960[kg/m^3]'});

model.study.create('std3');
model.study('std3').create('freq', 'Frequency');
model.study('std3').feature('freq').setSolveFor('/physics/mf', false);
model.study('std3').feature('freq').setSolveFor('/physics/wb', false);
model.study('std3').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std3').feature('freq').setSolveFor('/physics/solid', true);
model.study('std3').feature('freq').setSolveFor('/multiphysics/asb1', true);
model.study('std3').feature('freq').set('plist', 'range(360[deg]/theta*rpm_idle*harm_exc,fdelta,min(fmax,rpm_max/rpm0*f0*harm_exc)) min(fmax,rpm_max/rpm0*f0*harm_exc)');
model.study('std3').feature('freq').setEntry('outputmap', 'acpr', 'selection');
model.study('std3').feature('freq').setEntry('outputselectionmap', 'acpr', 'geom2_sel7');
model.study('std3').feature('freq').setEntry('outputmap', 'solid', 'selection');
model.study('std3').feature('freq').setEntry('outputselectionmap', 'solid', 'geom2_sel7');
model.study('std3').label('Study 3 - Vibroacoustic Analysis - all Harmonics and Frequencies');
model.study('std3').setGenPlots(false);
model.study('std3').create('param', 'Parametric');
model.study('std3').feature('param').setIndex('pname', 'a_coil', 0);
model.study('std3').feature('param').setIndex('plistarr', '', 0);
model.study('std3').feature('param').setIndex('punit', 'm^2', 0);
model.study('std3').feature('param').setIndex('pname', 'a_coil', 0);
model.study('std3').feature('param').setIndex('plistarr', '', 0);
model.study('std3').feature('param').setIndex('punit', 'm^2', 0);
model.study('std3').feature('param').setIndex('pname', 'harm_exc', 0);
model.study('std3').feature('param').setIndex('plistarr', 'range(1,1,n_harmonics)', 0);
model.study('std3').feature('param').setIndex('punit', '', 0);

model.sol.create('sol4');
model.sol('sol4').study('std3');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std3');
model.sol('sol4').feature('st1').set('studystep', 'freq');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'freq');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').set('stol', 0.001);
model.sol('sol4').feature('s1').set('nonlin', 'off');
model.sol('sol4').feature('s1').set('linpmethod', 'sol');
model.sol('sol4').feature('s1').set('storelinpoint', true);
model.sol('sol4').feature('s1').create('p1', 'Parametric');
model.sol('sol4').feature('s1').feature.remove('pDef');
model.sol('sol4').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol4').feature('s1').feature('p1').set('plistarr', {'range(360[deg]/theta*rpm_idle*harm_exc,fdelta,min(fmax,rpm_max/rpm0*f0*harm_exc)) min(fmax,rpm_max/rpm0*f0*harm_exc)'});
model.sol('sol4').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol4').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol4').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol4').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol4').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol4').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol4').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol4').feature('s1').feature('p1').set('probes', {});
model.sol('sol4').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol4').feature('s1').set('linpmethod', 'sol');
model.sol('sol4').feature('s1').set('linpsol', 'zero');
model.sol('sol4').feature('s1').set('control', 'freq');
model.sol('sol4').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol4').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol4').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol4').feature('s1').create('seDef', 'Segregated');
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol4').feature('s1').feature('d1').label('Suggested Direct Solver (asb1) (Merged)');
model.sol('sol4').feature('s1').create('i1', 'Iterative');
model.sol('sol4').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) (asb1)');
model.sol('sol4').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('hybridization', 'multi');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('hybridvar', {'comp2_p'});
model.sol('sol4').feature('s1').feature('i1').create('mg2', 'Multigrid');
model.sol('sol4').feature('s1').feature('i1').feature('mg2').set('hybridization', 'multi');
model.sol('sol4').feature('s1').feature('i1').feature('mg2').set('hybridvar', {'comp2_u2'});
model.sol('sol4').feature('s1').create('i2', 'Iterative');
model.sol('sol4').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol4').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with GMG and Direct Precond.) (asb1)');
model.sol('sol4').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('hybridization', 'multi');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('hybridvar', {'comp2_p'});
model.sol('sol4').feature('s1').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol4').feature('s1').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol4').feature('s1').feature('i2').feature('dp1').set('hybridvar', {'comp2_u2'});
model.sol('sol4').feature('s1').feature('i2').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol4').feature('s1').feature('i2').feature('dp1').set('mumpsblr', true);
model.sol('sol4').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').feature('s1').feature.remove('seDef');
model.sol('sol4').attach('std3');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std3');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol4');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'harm_exc'});
model.batch('p1').set('plistarr', {'range(1,1,n_harmonics)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std3');
model.batch('p1').set('control', 'param');

model.sol('sol4').feature('s1').create('se1', 'Segregated');
model.sol('sol4').feature('s1').feature('se1').set('segterm', 'iter');
model.sol('sol4').feature('s1').feature('se1').feature('ssDef').set('segvar', {'comp1_A' 'comp1_Fx' 'comp1_Fy' 'comp2_u2'});
model.sol('sol4').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol4').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp2_p'});
model.sol('sol4').feature('s1').feature('d1').set('linsolver', 'pardiso');

model.study('std3').setGenConv(false);

model.sol.create('sol5');
model.sol('sol5').study('std3');
model.sol('sol5').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol5');
model.batch('p1').run('compute');

model.result.dataset.remove('dset4');
model.result.dataset.remove('dset5');
model.result.dataset.remove('dset6');
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Campbell Diagram, First Microphone');
model.result('pg6').set('data', 'dset7');
model.result('pg6').set('titletype', 'label');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').setIndex('expr', 'acpr.freq', 0);
model.result('pg6').feature('glob1').setIndex('unit', 'Hz', 0);
model.result('pg6').feature('glob1').setIndex('descr', 'Frequency', 0);
model.result('pg6').feature('glob1').set('xdata', 'expr');
model.result('pg6').feature('glob1').set('xdataexpr', 'rpm');
model.result('pg6').feature('glob1').set('xdataunit', 'RPM');
model.result('pg6').feature('glob1').set('linewidth', 3);
model.result('pg6').feature('glob1').set('legend', false);
model.result('pg6').feature('glob1').create('col1', 'Color');
model.result('pg6').run;
model.result('pg6').feature('glob1').feature('col1').set('expr', 'spl_mic1');
model.result('pg6').feature('glob1').feature('col1').set('unit', 'dB');
model.result('pg6').run;
model.result('pg6').feature('glob1').feature('col1').set('rangecoloractive', true);
model.result('pg6').feature('glob1').feature('col1').set('rangecolormin', 55);
model.result('pg6').feature('glob1').feature('col1').set('rangecolormax', 80);
model.result('pg6').run;
model.result('pg6').set('showlegendsmaxmin', true);
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Campbell Diagram, Second Microphone');
model.result('pg7').run;
model.result('pg7').feature('glob1').feature('col1').set('expr', 'spl_mic2');
model.result('pg7').feature('glob1').feature('col1').set('rangecolormax', 100);
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').run;
model.result('pg8').label('Exterior-Field Sound Pressure Level (acpr)');
model.result('pg8').set('looplevel', [47 3]);
model.result('pg8').set('showlegendsmaxmin', true);
model.result('pg8').set('showlegendsunit', true);
model.result('pg8').create('rp1', 'RadiationPattern');
model.result('pg8').feature('rp1').set('expr', 'acpr.efc1.Lp_pext/80');
model.result('pg8').feature('rp1').set('descractive', true);
model.result('pg8').feature('rp1').set('descr', 'Exterior-field sound pressure level');
model.result('pg8').feature('rp1').set('useradiusascolor', false);
model.result('pg8').feature('rp1').set('rangecoloractive', true);
model.result('pg8').feature('rp1').set('rangecolormin', 65);
model.result('pg8').feature('rp1').set('rangecolormax', 75);
model.result('pg8').feature('rp1').set('thetadisc', 160);
model.result('pg8').feature('rp1').set('phidisc', 240);
model.result('pg8').feature('rp1').set('anglerestr', 'manual');
model.result('pg8').feature('rp1').set('thetarange', 90);
model.result('pg8').feature('rp1').set('phimin', -90);
model.result('pg8').feature('rp1').set('phirange', 270);
model.result('pg8').feature('rp1').set('sphere', 'manual');
model.result('pg8').feature('rp1').set('radius', 0.5);
model.result('pg8').feature('rp1').set('grid', 'fine');
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').set('edges', true);
model.result('pg8').run;

model.view('view6').set('showgrid', false);

model.result('pg6').run;

model.nodeGroup.create('grp2', 'Results');
model.nodeGroup('grp2').set('type', 'plotgroup');
model.nodeGroup.move('grp2', 1);
model.nodeGroup('grp2').add('plotgroup', 'pg6');
model.nodeGroup('grp2').add('plotgroup', 'pg7');
model.nodeGroup('grp2').add('plotgroup', 'pg8');
model.nodeGroup('grp2').label('Vibroacoustic Results - all Harmonics and Frequencies');

model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Pressure - Revolutions - 1st Harmonic');
model.result.evaluationGroup('eg1').set('data', 'dset7');
model.result.evaluationGroup('eg1').setIndex('looplevelinput', 'manual', 1);
model.result.evaluationGroup('eg1').setIndex('looplevel', [1], 1);
model.result.evaluationGroup('eg1').set('includeparameters', false);
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'rpm', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 'RPM', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Regime for the excited harmonic', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'subst(real(acpr.efc1.pext),x,0.1[m],y,y_mic2,z,0)', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 'Pa', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Absolute pressure at microphone 2 - Left Real', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'subst(imag(acpr.efc1.pext),x,0.1[m],y,y_mic2,z,0)', 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 'Pa', 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Absolute pressure at microphone 2 - Left Imag', 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'subst(real(acpr.efc1.pext),x,-0.1[m],y,y_mic2,z,0)', 3);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 'Pa', 3);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Absolute pressure at microphone 2 - Right Real', 3);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'subst(imag(acpr.efc1.pext),x,-0.1[m],y,y_mic2,z,0)', 4);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 'Pa', 4);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Absolute pressure at microphone 2 - Right Imag', 4);
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup.duplicate('eg2', 'eg1');
model.result.evaluationGroup('eg2').label('Pressure - Revolutions - 2nd Harmonic');
model.result.evaluationGroup('eg2').setIndex('looplevel', [2], 1);
model.result.evaluationGroup('eg2').run;
model.result.evaluationGroup.duplicate('eg3', 'eg2');
model.result.evaluationGroup('eg3').label('Pressure - Revolutions - 3rd Harmonic');
model.result.evaluationGroup('eg3').setIndex('looplevel', [3], 1);
model.result.evaluationGroup('eg3').run;
model.result.evaluationGroup.duplicate('eg4', 'eg3');
model.result.evaluationGroup('eg4').label('Pressure - Revolutions - 4th Harmonic');
model.result.evaluationGroup('eg4').setIndex('looplevel', [4], 1);
model.result.evaluationGroup('eg4').run;
model.result.evaluationGroup.duplicate('eg5', 'eg4');
model.result.evaluationGroup('eg5').label('Pressure - Revolutions - 5th Harmonic');
model.result.evaluationGroup('eg5').setIndex('looplevel', [5], 1);
model.result.evaluationGroup('eg5').run;
model.result.evaluationGroup.duplicate('eg6', 'eg5');
model.result.evaluationGroup('eg6').label('Pressure - Revolutions - 6th Harmonic');
model.result.evaluationGroup('eg6').setIndex('looplevel', [6], 1);
model.result.evaluationGroup('eg6').run;
model.result.evaluationGroup.duplicate('eg7', 'eg6');
model.result.evaluationGroup('eg7').label('Pressure - Revolutions - 7th Harmonic');
model.result.evaluationGroup('eg7').setIndex('looplevel', [7], 1);
model.result.evaluationGroup('eg7').run;

model.nodeGroup.create('grp3', 'Results');
model.nodeGroup('grp3').set('type', 'evaluationgroup');
model.nodeGroup('grp3').add('evaluationgroup', 'eg1');
model.nodeGroup('grp3').add('evaluationgroup', 'eg2');
model.nodeGroup('grp3').add('evaluationgroup', 'eg3');
model.nodeGroup('grp3').add('evaluationgroup', 'eg4');
model.nodeGroup('grp3').add('evaluationgroup', 'eg5');
model.nodeGroup('grp3').add('evaluationgroup', 'eg6');
model.nodeGroup('grp3').add('evaluationgroup', 'eg7');
model.nodeGroup('grp3').label('Acoustic Signal');

model.func.create('int1', 'Interpolation');
model.func('int1').model('comp2');
model.func('int1').set('source', 'resultTable');
model.func('int1').setIndex('funcs', 'real1_l', 0, 0);
model.func('int1').setIndex('funcs', 1, 0, 1);
model.func('int1').setIndex('funcs', 'imag1_l', 1, 0);
model.func('int1').setIndex('funcs', 2, 1, 1);
model.func('int1').setIndex('funcs', 'real1_r', 2, 0);
model.func('int1').setIndex('funcs', 3, 2, 1);
model.func('int1').setIndex('funcs', 'imag1_r', 3, 0);
model.func('int1').setIndex('funcs', 4, 3, 1);
model.func('int1').set('interp', 'piecewisecubic');
model.func('int1').set('extrap', 'value');
model.func('int1').setIndex('argunit', 'RPM', 0);
model.func('int1').setIndex('fununit', 'Pa', 0);
model.func('int1').setIndex('fununit', 'Pa', 1);
model.func('int1').setIndex('fununit', 'Pa', 2);
model.func('int1').setIndex('fununit', 'Pa', 3);
model.func.duplicate('int2', 'int1');
model.func('int2').set('resultTable', 'evalGroup:eg2');
model.func('int2').setIndex('funcs', 'real2_l', 0, 0);
model.func('int2').setIndex('funcs', 1, 0, 1);
model.func('int2').setIndex('funcs', 'imag2_l', 1, 0);
model.func('int2').setIndex('funcs', 2, 1, 1);
model.func('int2').setIndex('funcs', 'real2_r', 2, 0);
model.func('int2').setIndex('funcs', 3, 2, 1);
model.func('int2').setIndex('funcs', 'imag2_r', 3, 0);
model.func('int2').setIndex('funcs', 4, 3, 1);
model.func.duplicate('int3', 'int2');
model.func('int3').set('resultTable', 'evalGroup:eg3');
model.func('int3').setIndex('funcs', 'real3_l', 0, 0);
model.func('int3').setIndex('funcs', 1, 0, 1);
model.func('int3').setIndex('funcs', 'imag3_l', 1, 0);
model.func('int3').setIndex('funcs', 2, 1, 1);
model.func('int3').setIndex('funcs', 'real3_r', 2, 0);
model.func('int3').setIndex('funcs', 3, 2, 1);
model.func('int3').setIndex('funcs', 'imag3_r', 3, 0);
model.func('int3').setIndex('funcs', 4, 3, 1);
model.func.duplicate('int4', 'int3');
model.func('int4').set('resultTable', 'evalGroup:eg4');
model.func('int4').setIndex('funcs', 'real4_l', 0, 0);
model.func('int4').setIndex('funcs', 1, 0, 1);
model.func('int4').setIndex('funcs', 'imag4_l', 1, 0);
model.func('int4').setIndex('funcs', 2, 1, 1);
model.func('int4').setIndex('funcs', 'real4_r', 2, 0);
model.func('int4').setIndex('funcs', 3, 2, 1);
model.func('int4').setIndex('funcs', 'imag4_r', 3, 0);
model.func('int4').setIndex('funcs', 4, 3, 1);
model.func.duplicate('int5', 'int4');
model.func('int5').set('resultTable', 'evalGroup:eg5');
model.func('int5').setIndex('funcs', 'real5_l', 0, 0);
model.func('int5').setIndex('funcs', 1, 0, 1);
model.func('int5').setIndex('funcs', 'imag5_l', 1, 0);
model.func('int5').setIndex('funcs', 2, 1, 1);
model.func('int5').setIndex('funcs', 'real5_r', 2, 0);
model.func('int5').setIndex('funcs', 3, 2, 1);
model.func('int5').setIndex('funcs', 'imag5_r', 3, 0);
model.func('int5').setIndex('funcs', 4, 3, 1);
model.func.duplicate('int6', 'int5');
model.func('int6').set('resultTable', 'evalGroup:eg6');
model.func('int6').setIndex('funcs', 'real6_l', 0, 0);
model.func('int6').setIndex('funcs', 1, 0, 1);
model.func('int6').setIndex('funcs', 'imag6_l', 1, 0);
model.func('int6').setIndex('funcs', 2, 1, 1);
model.func('int6').setIndex('funcs', 'real6_r', 2, 0);
model.func('int6').setIndex('funcs', 3, 2, 1);
model.func('int6').setIndex('funcs', 'imag6_r', 3, 0);
model.func('int6').setIndex('funcs', 4, 3, 1);
model.func.duplicate('int7', 'int6');
model.func('int7').set('resultTable', 'evalGroup:eg7');
model.func('int7').setIndex('funcs', 'real7_l', 0, 0);
model.func('int7').setIndex('funcs', 1, 0, 1);
model.func('int7').setIndex('funcs', 'imag7_l', 1, 0);
model.func('int7').setIndex('funcs', 2, 1, 1);
model.func('int7').setIndex('funcs', 'real7_r', 2, 0);
model.func('int7').setIndex('funcs', 3, 2, 1);
model.func('int7').setIndex('funcs', 'imag7_r', 3, 0);
model.func('int7').setIndex('funcs', 4, 3, 1);

model.nodeGroup.create('grp4', 'Definitions', 'comp2');
model.nodeGroup('grp4').set('type', 'func');
model.nodeGroup('grp4').placeAfter('func', 'an2');
model.nodeGroup('grp4').add('func', 'int1');
model.nodeGroup('grp4').add('func', 'int2');
model.nodeGroup('grp4').add('func', 'int3');
model.nodeGroup('grp4').add('func', 'int4');
model.nodeGroup('grp4').add('func', 'int5');
model.nodeGroup('grp4').add('func', 'int6');
model.nodeGroup('grp4').add('func', 'int7');
model.nodeGroup('grp4').label('Acoustic Signal');

model.study.create('std4');
model.study('std4').create('freq', 'Frequency');
model.study('std4').feature('freq').setSolveFor('/physics/mf', false);
model.study('std4').feature('freq').setSolveFor('/physics/wb', false);
model.study('std4').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std4').feature('freq').setSolveFor('/physics/solid', true);
model.study('std4').feature('freq').setSolveFor('/multiphysics/asb1', true);
model.study('std4').feature('freq').set('plist', 2360);
model.study('std4').label('Study 4 - Vibroacoustic Analysis - 3rd Harmonic 2360 Hz');
model.study('std4').setGenPlots(false);
model.study('std4').setGenConv(false);

model.sol.create('sol13');
model.sol('sol13').study('std4');
model.sol('sol13').create('st1', 'StudyStep');
model.sol('sol13').feature('st1').set('study', 'std4');
model.sol('sol13').feature('st1').set('studystep', 'freq');
model.sol('sol13').create('v1', 'Variables');
model.sol('sol13').feature('v1').set('control', 'freq');
model.sol('sol13').create('s1', 'Stationary');
model.sol('sol13').feature('s1').set('stol', 0.001);
model.sol('sol13').feature('s1').set('nonlin', 'off');
model.sol('sol13').feature('s1').set('linpmethod', 'sol');
model.sol('sol13').feature('s1').set('storelinpoint', true);
model.sol('sol13').feature('s1').create('p1', 'Parametric');
model.sol('sol13').feature('s1').feature.remove('pDef');
model.sol('sol13').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol13').feature('s1').feature('p1').set('plistarr', {'2360'});
model.sol('sol13').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol13').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol13').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol13').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol13').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol13').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol13').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol13').feature('s1').feature('p1').set('probes', {});
model.sol('sol13').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol13').feature('s1').set('linpmethod', 'sol');
model.sol('sol13').feature('s1').set('linpsol', 'zero');
model.sol('sol13').feature('s1').set('control', 'freq');
model.sol('sol13').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol13').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol13').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol13').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol13').feature('s1').create('seDef', 'Segregated');
model.sol('sol13').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol13').feature('s1').create('d1', 'Direct');
model.sol('sol13').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol13').feature('s1').feature('d1').label('Suggested Direct Solver (asb1) (Merged)');
model.sol('sol13').feature('s1').create('i1', 'Iterative');
model.sol('sol13').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol13').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) (asb1)');
model.sol('sol13').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol13').feature('s1').feature('i1').feature('mg1').set('hybridization', 'multi');
model.sol('sol13').feature('s1').feature('i1').feature('mg1').set('hybridvar', {'comp2_p'});
model.sol('sol13').feature('s1').feature('i1').create('mg2', 'Multigrid');
model.sol('sol13').feature('s1').feature('i1').feature('mg2').set('hybridization', 'multi');
model.sol('sol13').feature('s1').feature('i1').feature('mg2').set('hybridvar', {'comp2_u2'});
model.sol('sol13').feature('s1').create('i2', 'Iterative');
model.sol('sol13').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol13').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with GMG and Direct Precond.) (asb1)');
model.sol('sol13').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol13').feature('s1').feature('i2').feature('mg1').set('hybridization', 'multi');
model.sol('sol13').feature('s1').feature('i2').feature('mg1').set('hybridvar', {'comp2_p'});
model.sol('sol13').feature('s1').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol13').feature('s1').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol13').feature('s1').feature('i2').feature('dp1').set('hybridvar', {'comp2_u2'});
model.sol('sol13').feature('s1').feature('i2').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol13').feature('s1').feature('i2').feature('dp1').set('mumpsblr', true);
model.sol('sol13').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol13').feature('s1').feature.remove('fcDef');
model.sol('sol13').feature('s1').feature.remove('seDef');
model.sol('sol13').attach('std4');
model.sol('sol13').feature('s1').create('se1', 'Segregated');
model.sol('sol13').feature('s1').feature('se1').set('segterm', 'iter');
model.sol('sol13').feature('s1').feature('se1').feature('ssDef').set('segvar', {'comp1_A' 'comp1_Fx' 'comp1_Fy' 'comp2_u2'});
model.sol('sol13').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol13').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp2_p'});
model.sol('sol13').runAll;

model.result.dataset.remove('dset8');
model.result.dataset.create('grid1', 'Grid1D');
model.result.dataset('grid1').set('source', 'data');
model.result.dataset('grid1').set('data', 'dset9');
model.result.dataset('grid1').set('par1', 'tt');
model.result.dataset('grid1').set('parmax1', 20);
model.result.dataset('grid1').set('res1', 960000);
model.result.dataset('grid1').set('adaptive', false);
model.result.create('pg9', 'PlotGroup1D');

model.nodeGroup('grp2').add('plotgroup', 'pg9');

model.result('pg9').run;
model.result('pg9').label('Acoustic Signal');
model.result('pg9').set('data', 'grid1');
model.result('pg9').set('titletype', 'label');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Signal (Pa)');
model.result('pg9').create('lngr1', 'LineGraph');
model.result('pg9').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg9').feature('lngr1').set('linewidth', 'preference');
model.result('pg9').feature('lngr1').label('Left Channel');
model.result('pg9').feature('lngr1').set('descractive', true);
model.result('pg9').feature('lngr1').set('descr', 'Left Channel');
model.result('pg9').feature('lngr1').set('expr', 'real((real1_l(rev_ramp(tt))+i*imag1_l(rev_ramp(tt)))*exp(i*(rev_ramp(tt))*f0/rpm0*1*pi*tt)+(real2_l(rev_ramp(tt))+i*imag2_l(rev_ramp(tt)))*exp(i*(rev_ramp(tt))*f0/rpm0*2*pi*tt)+(real3_l(rev_ramp(tt))+i*imag3_l(rev_ramp(tt)))*exp(i*(rev_ramp(tt))*f0/rpm0*3*pi*tt)+(real4_l(rev_ramp(tt))+i*imag4_l(rev_ramp(tt)))*exp(i*(rev_ramp(tt))*f0/rpm0*4*pi*tt)+(real5_l(rev_ramp(tt))+i*imag5_l(rev_ramp(tt)))*exp(i*(rev_ramp(tt))*f0/rpm0*5*pi*tt)+(real6_l(rev_ramp(tt))+i*imag6_l(rev_ramp(tt)))*exp(i*(rev_ramp(tt))*f0/rpm0*6*pi*tt)+(real7_l(rev_ramp(tt))+i*imag7_l(rev_ramp(tt)))*exp(i*(rev_ramp(tt))*f0/rpm0*7*pi*tt))');
model.result('pg9').feature('lngr1').set('xdata', 'expr');
model.result('pg9').feature('lngr1').set('xdataexpr', 'tt[s/m]');
model.result('pg9').feature('lngr1').set('xdatadescractive', true);
model.result('pg9').feature('lngr1').set('xdatadescr', 'time');
model.result('pg9').feature('lngr1').set('legend', true);
model.result('pg9').feature('lngr1').set('autosolution', false);
model.result('pg9').feature('lngr1').set('autoplotlabel', true);
model.result('pg9').run;
model.result('pg9').feature.duplicate('lngr2', 'lngr1');
model.result('pg9').run;
model.result('pg9').feature('lngr2').set('descr', 'Right Channel');
model.result('pg9').feature('lngr2').set('expr', 'real((real1_r(rev_ramp(tt))+i*imag1_r(rev_ramp(tt)))*exp(i*(rev_ramp(tt))*f0/rpm0*1*pi*tt)+(real2_r(rev_ramp(tt))+i*imag2_r(rev_ramp(tt)))*exp(i*(rev_ramp(tt))*f0/rpm0*2*pi*tt)+(real3_r(rev_ramp(tt))+i*imag3_r(rev_ramp(tt)))*exp(i*(rev_ramp(tt))*f0/rpm0*3*pi*tt)+(real4_r(rev_ramp(tt))+i*imag4_r(rev_ramp(tt)))*exp(i*(rev_ramp(tt))*f0/rpm0*4*pi*tt)+(real5_r(rev_ramp(tt))+i*imag5_r(rev_ramp(tt)))*exp(i*(rev_ramp(tt))*f0/rpm0*5*pi*tt)+(real6_r(rev_ramp(tt))+i*imag6_r(rev_ramp(tt)))*exp(i*(rev_ramp(tt))*f0/rpm0*6*pi*tt)+(real7_r(rev_ramp(tt))+i*imag7_r(rev_ramp(tt)))*exp(i*(rev_ramp(tt))*f0/rpm0*7*pi*tt))');
model.result('pg9').feature('lngr2').label('Right Channel');
model.result('pg9').run;
model.result('pg9').run;
model.result.export.create('plot1', 'pg9', 'lngr1', 'Plot');
model.result('pg9').feature('lngr2').active(false);
model.result('pg9').feature('lngr2').active(true);
model.result.export('plot1').label('Left Channel Acoustic Signal');
model.result.export('plot1').set('exporttype', 'wav');
model.result.export('plot1').set('filename', 'electric_motor_noise_left.wav');
model.result('pg9').run;
model.result.export.create('plot2', 'pg9', 'lngr2', 'Plot');
model.result('pg9').feature('lngr1').active(false);
model.result('pg9').feature('lngr1').active(true);
model.result.export('plot2').label('Right Channel Acoustic Signal');
model.result.export('plot2').set('exporttype', 'wav');
model.result.export('plot2').set('filename', 'electric_motor_noise_right.wav');
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').run;
model.result('pg10').label('Displacement and Acoustic Pressure');
model.result('pg10').set('data', 'dset9');
model.result('pg10').set('edges', false);
model.result('pg10').set('showlegendsmaxmin', true);
model.result('pg10').set('showlegendsunit', true);
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', 'solid.disp');
model.result('pg10').feature('surf1').create('def1', 'Deform');
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').feature('surf1').create('filt1', 'Filter');
model.result('pg10').run;
model.result('pg10').feature('surf1').feature('filt1').set('expr', 'x>-40.5[mm]');
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').create('line1', 'Line');
model.result('pg10').feature('line1').set('expr', '0');
model.result('pg10').feature('line1').set('titletype', 'none');
model.result('pg10').feature('line1').set('coloring', 'uniform');
model.result('pg10').feature('line1').set('color', 'black');
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').feature('line1').feature.copy('def1', 'pg10/surf1/def1');
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').feature('line1').feature.copy('filt1', 'pg10/surf1/filt1');
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').feature('line1').set('inheritplot', 'surf1');
model.result('pg10').feature('line1').set('inheritcolor', false);
model.result('pg10').feature('line1').set('inheritrange', false);
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').create('iso1', 'Isosurface');
model.result('pg10').feature('iso1').set('number', 11);
model.result('pg10').feature('iso1').create('sel1', 'Selection');
model.result('pg10').feature('iso1').feature('sel1').selection.set([9]);
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').feature('iso1').feature.copy('filt1', 'pg10/line1/filt1');
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup3D');
model.result('pg11').run;
model.result('pg11').label('SPL and Radiation Pattern');
model.result('pg11').set('data', 'dset9');
model.result('pg11').set('view', 'new');
model.result('pg11').selection.geom('geom2', 3);
model.result('pg11').selection.named('geom2_unisel1');
model.result('pg11').set('edges', false);
model.result('pg11').set('showlegendsunit', true);
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('expr', 'acpr.Lp');
model.result('pg11').feature('surf1').set('rangecoloractive', true);
model.result('pg11').feature('surf1').set('rangecolormin', 80);
model.result('pg11').feature('surf1').set('rangecolormax', 115);
model.result('pg11').feature('surf1').create('def1', 'Deform');
model.result('pg11').run;
model.result('pg11').run;
model.result('pg11').create('line1', 'Line');
model.result('pg11').feature('line1').set('expr', '0');
model.result('pg11').feature('line1').set('titletype', 'none');
model.result('pg11').feature('line1').set('coloring', 'uniform');
model.result('pg11').feature('line1').set('color', 'black');
model.result('pg11').feature('line1').set('inheritplot', 'surf1');
model.result('pg11').feature('line1').set('inheritcolor', false);
model.result('pg11').feature('line1').set('inheritrange', false);
model.result('pg11').feature('line1').create('def1', 'Deform');
model.result('pg11').run;
model.result('pg8').run;
model.result('pg11').run;
model.result('pg11').feature.copy('rp1', 'pg8/rp1');
model.result('pg11').run;
model.result('pg11').feature('rp1').set('rangecolormax', 85);
model.result('pg11').feature('rp1').set('phirange', 360);
model.result('pg11').feature('rp1').create('tran1', 'Transparency');
model.result('pg11').run;
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').run;
model.result('pg12').label('Boundary Loads');
model.result('pg12').set('data', 'dset9');
model.result('pg12').selection.geom('geom2', 3);
model.result('pg12').selection.geom('geom2', 3);
model.result('pg12').selection.set([13 14 15 16 17 19 20 21 22 24 25 26 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 45 46 47 49 50 51 52]);
model.result('pg12').selection.named('geom2_unisel1');
model.result('pg12').set('applyselectiontodatasetedges', true);
model.result('pg12').set('showlegendsunit', true);
model.result('pg12').create('arws1', 'ArrowSurface');
model.result('pg12').feature('arws1').set('expr', {'solid.bndl1.F_Ax' 'v2' 'w2'});
model.result('pg12').feature('arws1').setIndex('expr', 'solid.bndl1.F_Ay', 1);
model.result('pg12').feature('arws1').setIndex('expr', 'solid.bndl1.F_Az', 2);
model.result('pg12').feature('arws1').set('placement', 'gausspoints');
model.result('pg12').feature('arws1').create('col1', 'Color');
model.result('pg12').run;
model.result('pg12').feature('arws1').feature('col1').set('expr', 'comp2.solid.bndl1.F_A_Mag');
model.result('pg12').feature('arws1').feature('col1').set('coloring', 'gradient');
model.result('pg12').feature('arws1').feature('col1').set('topcolor', 'red');

model.view('view2').camera.set('projection', 'orthographic');

model.result('pg10').set('applyselectiontodatasetedges', false);
model.result('pg10').run;

model.nodeGroup.create('grp5', 'Results');
model.nodeGroup('grp5').set('type', 'plotgroup');
model.nodeGroup.move('grp5', 3);
model.nodeGroup('grp5').add('plotgroup', 'pg10');
model.nodeGroup('grp5').add('plotgroup', 'pg11');
model.nodeGroup('grp5').add('plotgroup', 'pg12');
model.nodeGroup('grp5').label('Vibroacoustic Results - 3rd Harmonic 2360 Hz');

model.result('pg11').run;

model.title('Electric Motor Noise: Permanent Magnet Synchronous Motor');

model.description('This model analyzes the noise generated by an electric motor during its operation at different speeds of rotation. The type of electric motor analyzed, a permanent magnet synchronous motor (PMSM) uses permanent magnets in the rotor and a variable frequency current traveling through the stator to generate torque. The electromagnetic forces generated during its operation generate vibrations not only at the frequency of excitation but also at higher frequencies or harmonics. A transient analysis is used to determine the electromagnetic forces in the time domain. A Fourier transform is used to determine the contributions in the frequency domain. The vibroacoustic response of the PMSM casing and its acoustic radiation is computed. A Campbell plot is generated showing the main harmonics contributing to the acoustic response of the PMSM at various speeds of rotation.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;

model.label('electric_motor_noise_pmsm.mph');

model.modelNode.label('Components');

out = model;
