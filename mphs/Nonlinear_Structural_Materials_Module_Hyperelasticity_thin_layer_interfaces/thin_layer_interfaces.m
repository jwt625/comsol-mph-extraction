function out = model
%
% thin_layer_interfaces.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Nonlinear_Structural_Materials_Module/Hyperelasticity');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.param.label('Parameters: Geometry');
model.param.set('L', '1[m]');
model.param.descr('L', 'Length');
model.param.set('R', '1[m]/sqrt(2)');
model.param.descr('R', 'Radius');
model.param.set('d', '1[m]');
model.param.descr('d', 'Out-of-Plane dimension');
model.param.create('par2');
model.param('par2').label('Parameters: Bulk Material');
model.param('par2').set('RhoBulk', '1[kg/m^3]');
model.param('par2').descr('RhoBulk', 'Density');
model.param('par2').set('KBulk', '50 [N/mm^2]');
model.param('par2').descr('KBulk', 'Bulk Modulus');
model.param('par2').set('MuBulk', '10 [N/mm^2]');
model.param('par2').descr('MuBulk', 'Lame Parameter');
model.param.create('par3');
model.param('par3').label('Parameters: Thin Layer');
model.param('par3').set('th', 'L/10');
model.param('par3').descr('th', 'Thin layer thickness');
model.param('par3').set('RhoBnd', '1[kg/m^3]');
model.param('par3').descr('RhoBnd', 'Density');
model.param('par3').set('KRatio', '0.2');
model.param('par3').descr('KRatio', 'Scale factor for bulk modulus');
model.param('par3').set('KBnd', 'KRatio*KBulk');
model.param('par3').descr('KBnd', 'Bulk modulus');
model.param('par3').set('MuRatio', '100');
model.param('par3').descr('MuRatio', 'Scale factor for Lame parameter');
model.param('par3').set('MuBnd', 'MuRatio*MuBulk');
model.param('par3').descr('MuBnd', 'Lame parameter');
model.param('par3').set('AlphaRatio', '1');
model.param('par3').descr('AlphaRatio', 'Scale factor for stiffness');
model.param('par3').set('AlphaBnd', 'AlphaRatio*(KBulk/th)');
model.param('par3').descr('AlphaBnd', 'Spring stiffness');
model.param.create('par4');
model.param('par4').label('Parameters: Boundary Conditions');
model.param('par4').set('stretch', '0');
model.param('par4').descr('stretch', 'Stretch');
model.param.create('par5');
model.param('par5').label('Parameters: Mesh');
model.param('par5').set('nel', '20');
model.param('par5').descr('nel', 'Number of elements');

model.geom('geom1').create('sq1', 'Square');
model.geom('geom1').feature('sq1').set('size', 'L');
model.geom('geom1').run('sq1');
model.geom('geom1').create('ca1', 'CircularArc');
model.geom('geom1').feature('ca1').set('r', 'R');
model.geom('geom1').feature('ca1').set('angle2', 45);
model.geom('geom1').feature.duplicate('ca2', 'ca1');
model.geom('geom1').feature('ca2').set('center', {'L' 'L'});
model.geom('geom1').feature('ca2').set('angle1', 180);
model.geom('geom1').feature('ca2').set('angle2', 225);
model.geom('geom1').run('ca2');
model.geom('geom1').create('par1', 'Partition');
model.geom('geom1').feature('par1').selection('input').set({'sq1'});
model.geom('geom1').feature('par1').selection('tool').set({'ca1' 'ca2'});
model.geom('geom1').run('fin');

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.set([1 2]);

model.physics('solid').prop('d').set('d', 'd');
model.physics('solid').create('hmm1', 'HyperelasticModel', 2);
model.physics('solid').feature('hmm1').selection.set([1 2]);
model.physics('solid').feature('hmm1').set('MaterialModel', 'SaintVenantKirchhoff');
model.physics('solid').feature('hmm1').set('IsotropicOption', 'KG');
model.physics('solid').feature('hmm1').set('Compressibility_SaintVenantKirchhoff', 'NearlyIncompressible');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Bulk');
model.material('mat1').propertyGroup.create('KG', 'Bulk_modulus_and_shear_modulus');
model.material('mat1').propertyGroup('KG').set('K', {'KBulk'});
model.material('mat1').propertyGroup('KG').set('G', {'MuBulk'});
model.material('mat1').propertyGroup('def').set('density', {'RhoBulk'});

model.physics('solid').create('roll1', 'Roller', 1);
model.physics('solid').feature('roll1').selection.set([2 3 4 5]);
model.physics('solid').create('disp1', 'Displacement1', 1);
model.physics('solid').feature('disp1').selection.set([1 6]);
model.physics('solid').feature('disp1').set('coordinateSystem', 'sys1');
model.physics('solid').feature('disp1').setIndex('Direction', 'prescribed', 0);
model.physics('solid').feature('disp1').setIndex('Direction', 'prescribed', 1);
model.physics('solid').feature('disp1').setIndex('U0', 'L*stretch/2', 1);

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([3 5 7 8]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 'nel');
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([2]);
model.mesh('mesh1').feature('map1').feature('dis2').set('elemcount', 'nel');
model.mesh('mesh1').feature('map1').feature('dis2').set('elemratio', 3);
model.mesh('mesh1').feature('map1').feature.duplicate('dis3', 'dis2');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([4]);
model.mesh('mesh1').feature('map1').create('dis4', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis4').selection.set([1 6]);
model.mesh('mesh1').feature('map1').feature('dis4').set('numelem', 'nel*2');
model.mesh('mesh1').run;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').label('Perfect Interface');
model.study('std1').setGenPlots(false);
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'AlphaBnd', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'N/m^3', 0);
model.study('std1').feature('stat').setIndex('pname', 'AlphaBnd', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'N/m^3', 0);
model.study('std1').feature('stat').setIndex('pname', 'stretch', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', '', 0);
model.study('std1').feature('stat').setIndex('plistarr', 'range(0.1,0.1,0.5)', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').run;
model.result('pg1').label('Perfect Interface');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Perfect Interface');
model.result('pg1').set('paramindicator', '');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', 'solid.PxX');
model.result('pg1').feature('surf1').set('unit', 'MPa');
model.result('pg1').feature('surf1').create('def1', 'Deform');
model.result('pg1').run;
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg1').feature('surf1').feature('def1').set('scale', 1);
model.result('pg1').run;

model.physics('solid').create('tl1', 'ThinLayer', 1);
model.physics('solid').feature('tl1').selection.set([7 8]);
model.physics('solid').feature('tl1').set('lth', 'th');
model.physics('solid').feature('tl1').label('Solid Approximation');
model.physics('solid').feature('tl1').create('hmm1', 'HyperelasticModel', 1);
model.physics('solid').feature('tl1').feature('hmm1').selection.set([7 8]);
model.physics('solid').feature('tl1').feature('hmm1').set('MaterialModel', 'SaintVenantKirchhoff');
model.physics('solid').feature('tl1').feature('hmm1').set('IsotropicOption', 'KG');

model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Thin Layer');
model.material('mat2').selection.geom('geom1', 1);
model.material('mat2').selection.set([7 8]);
model.material('mat2').propertyGroup.create('KG', 'Bulk_modulus_and_shear_modulus');
model.material('mat2').propertyGroup('KG').set('K', {'KBnd'});
model.material('mat2').propertyGroup('KG').set('G', {'MuBnd'});
model.material('mat2').propertyGroup('def').set('density', {'RhoBnd'});

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/solid', true);
model.study('std2').feature('stat').set('useparam', true);
model.study('std2').feature('stat').setIndex('pname', 'AlphaBnd', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'N/m^3', 0);
model.study('std2').feature('stat').setIndex('pname', 'AlphaBnd', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'N/m^3', 0);
model.study('std2').feature('stat').setIndex('pname', 'stretch', 0);
model.study('std2').feature('stat').setIndex('plistarr', 'range(0.1,0.1,0.5)', 0);
model.study('std2').feature('stat').setIndex('punit', '', 0);
model.study('std2').feature('stat').setIndex('pname', 'AlphaBnd', 1);
model.study('std2').feature('stat').setIndex('plistarr', '', 1);
model.study('std2').feature('stat').setIndex('punit', 'N/m^3', 1);
model.study('std2').feature('stat').setIndex('pname', 'AlphaBnd', 1);
model.study('std2').feature('stat').setIndex('plistarr', '', 1);
model.study('std2').feature('stat').setIndex('punit', 'N/m^3', 1);
model.study('std2').feature('stat').setIndex('pname', 'MuRatio', 1);
model.study('std2').feature('stat').setIndex('plistarr', 'range(1,-0.25,0.25) 0.01', 1);
model.study('std2').feature('stat').setIndex('punit', '', 1);
model.study('std2').feature('stat').set('sweeptype', 'filled');
model.study('std2').feature('stat').set('pcontinuationmode', 'manual');
model.study('std2').feature('stat').set('pcontinuation', 'stretch');
model.study('std2').setGenPlots(false);
model.study('std2').label('Solid Approximation');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol2').feature('s1').set('control', 'stat');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').run;
model.result('pg2').label('Solid Approximation');
model.result('pg2').set('data', 'dset2');
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Thin Layer Using Solid Thickness Approximation');
model.result('pg2').set('paramindicator', '');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('data', 'dset2');
model.result('pg2').feature('surf1').setIndex('looplevel', 4, 1);
model.result('pg2').feature('surf1').set('expr', 'solid.PxX');
model.result('pg2').feature('surf1').set('unit', 'MPa');
model.result('pg2').run;
model.result('pg2').feature('surf1').create('def1', 'Deform');
model.result('pg2').run;
model.result('pg2').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg2').feature('surf1').feature('def1').set('scale', 1);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').create('def1', 'Deform');
model.result('pg2').run;
model.result('pg2').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg2').feature('arwl1').feature('def1').set('scale', 1);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('arwl1').set('placement', 'elements');
model.result('pg2').feature('arwl1').set('expr', {'u' 'v'});
model.result('pg2').feature('arwl1').set('descr', 'Displacement field');
model.result('pg2').feature('arwl1').create('sel1', 'Selection');
model.result('pg2').feature('arwl1').feature('sel1').selection.set([1 6]);
model.result('pg2').run;

model.physics('solid').create('tl2', 'ThinLayer', 1);
model.physics('solid').feature('tl2').label('Membrane Approximation');
model.physics('solid').feature('tl2').selection.set([7 8]);
model.physics('solid').feature('tl2').set('lth', 'th');
model.physics('solid').feature('tl2').set('thicknessApproximation', 'membrane');
model.physics('solid').feature('tl2').create('hmm1', 'HyperelasticModel', 1);
model.physics('solid').feature('tl2').feature('hmm1').selection.set([7 8]);
model.physics('solid').feature('tl2').feature('hmm1').set('MaterialModel', 'SaintVenantKirchhoff');
model.physics('solid').feature('tl2').feature('hmm1').set('IsotropicOption', 'KG');

model.study.create('std3');
model.study('std3').create('stat', 'Stationary');
model.study('std3').feature('stat').setSolveFor('/physics/solid', true);
model.study('std3').label('Membrane Approximation');
model.study('std3').setGenPlots(false);
model.study('std3').feature('stat').set('useadvanceddisable', true);
model.study('std3').feature('stat').set('disabledphysics', {'solid/tl1'});
model.study('std3').feature('stat').set('useparam', true);
model.study('std3').feature('stat').setIndex('pname', 'AlphaBnd', 0);
model.study('std3').feature('stat').setIndex('plistarr', '', 0);
model.study('std3').feature('stat').setIndex('punit', 'N/m^3', 0);
model.study('std3').feature('stat').setIndex('pname', 'AlphaBnd', 0);
model.study('std3').feature('stat').setIndex('plistarr', '', 0);
model.study('std3').feature('stat').setIndex('punit', 'N/m^3', 0);
model.study('std3').feature('stat').setIndex('pname', 'stretch', 0);
model.study('std3').feature('stat').setIndex('plistarr', '', 0);
model.study('std3').feature('stat').setIndex('punit', '', 0);
model.study('std3').feature('stat').setIndex('plistarr', 'range(0.1,0.1,0.5)', 0);
model.study('std3').feature('stat').setIndex('pname', 'AlphaBnd', 1);
model.study('std3').feature('stat').setIndex('plistarr', '', 1);
model.study('std3').feature('stat').setIndex('punit', 'N/m^3', 1);
model.study('std3').feature('stat').setIndex('pname', 'AlphaBnd', 1);
model.study('std3').feature('stat').setIndex('plistarr', '', 1);
model.study('std3').feature('stat').setIndex('punit', 'N/m^3', 1);
model.study('std3').feature('stat').setIndex('pname', 'MuRatio', 1);
model.study('std3').feature('stat').setIndex('plistarr', '10^{range(-3,1,4)}', 1);
model.study('std3').feature('stat').setIndex('punit', '', 1);
model.study('std3').feature('stat').set('sweeptype', 'filled');
model.study('std3').feature('stat').set('pcontinuationmode', 'manual');
model.study('std3').feature('stat').set('pcontinuation', 'stretch');

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'stat');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').feature('comp1_solid_unn').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_solid_unn').set('resscalemethod', 'parent');
model.sol('sol3').feature('v1').feature('comp1_solid_unn').set('scaleval', '0.001');
model.sol('sol3').feature('v1').set('control', 'stat');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol3').feature('s1').set('control', 'stat');
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').run;
model.result('pg3').label('Membrane Approximation');
model.result('pg3').set('data', 'dset3');
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Transition from Membrane Approximation to Perfect Interface');
model.result('pg3').set('paramindicator', '');
model.result('pg3').set('plotarrayenable', true);
model.result('pg3').set('arrayshape', 'square');
model.result('pg3').set('paddingsquare', 'absolute');
model.result('pg3').set('columnpadding', 'L');
model.result('pg3').set('rowpadding', '-2.4*L');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('arraydim', '2');
model.result('pg3').feature('surf1').set('data', 'dset3');
model.result('pg3').feature('surf1').set('expr', 'solid.PxX');
model.result('pg3').feature('surf1').set('unit', 'MPa');
model.result('pg3').feature('surf1').create('def1', 'Deform');
model.result('pg3').run;
model.result('pg3').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg3').feature('surf1').feature('def1').set('scale', 1);
model.result('pg3').run;
model.result('pg3').feature('surf1').set('arraydim', '2');
model.result('pg3').run;
model.result('pg3').feature.duplicate('surf2', 'surf1');
model.result('pg3').feature('surf2').set('arraydim', '2');
model.result('pg3').run;
model.result('pg3').feature('surf2').setIndex('looplevel', 7, 1);
model.result('pg3').feature('surf2').set('inheritplot', 'surf1');
model.result('pg3').feature.duplicate('surf3', 'surf2');
model.result('pg3').feature('surf3').set('arraydim', '2');
model.result('pg3').run;
model.result('pg3').feature('surf3').setIndex('looplevel', 6, 1);
model.result('pg3').feature.duplicate('surf4', 'surf3');
model.result('pg3').feature('surf4').set('arraydim', '2');
model.result('pg3').run;
model.result('pg3').feature('surf4').setIndex('looplevel', 4, 1);
model.result('pg3').feature.duplicate('surf5', 'surf4');
model.result('pg3').feature('surf5').set('arraydim', '2');
model.result('pg3').run;
model.result('pg3').feature('surf5').setIndex('looplevel', 3, 1);
model.result('pg3').feature.duplicate('surf6', 'surf5');
model.result('pg3').feature('surf6').set('arraydim', '2');
model.result('pg3').run;
model.result('pg3').feature('surf6').set('data', 'dset1');
model.result('pg3').run;
model.result('pg3').create('tlan1', 'TableAnnotation');
model.result('pg3').feature('tlan1').set('arraydim', '2');
model.result('pg3').feature('tlan1').set('source', 'localtable');
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 0, 0, 0);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '3/2*L', 0, 1);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '$\mu_\mathrm{ratio}$ = 10000', 0, 2);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '2*L', 1, 0);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '3/2*L', 1, 1);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '$\mu_\mathrm{ratio}$ = 1000', 1, 2);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '4*L', 2, 0);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '3/2*L', 2, 1);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '$\mu_\mathrm{ratio}$ = 100', 2, 2);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 0, 3, 0);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '-3/2*L', 3, 1);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '$\mu_{ratio}$ = 1', 3, 2);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '2*L', 4, 0);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '-3/2*L', 4, 1);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '$\mu_\mathrm{ratio}$ = 0.1', 4, 2);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '4*L', 5, 0);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', '-3/2*L', 5, 1);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 'Perfect interface', 5, 2);
model.result('pg3').feature('tlan1').set('showpoint', false);
model.result('pg3').feature('tlan1').set('latexmarkup', true);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Line Plot: Membrane Approximation');
model.result('pg4').set('data', 'dset3');
model.result('pg4').set('xlog', true);
model.result('pg4').set('xlabelactive', true);
model.result('pg4').set('xlabel', '\mu<sub>ratio</sub>');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', ['First Piola' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Kirchhoff Stress (MPa)']);
model.result('pg4').set('titletype', 'label');
model.result('pg4').set('legendpos', 'lowerleft');
model.result('pg4').create('ptgr1', 'PointGraph');
model.result('pg4').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg4').feature('ptgr1').set('linewidth', 'preference');
model.result('pg4').feature('ptgr1').selection.set([4]);
model.result('pg4').feature('ptgr1').set('expr', 'mean(side(1,solid.PxX))');
model.result('pg4').feature('ptgr1').set('unit', 'MPa');
model.result('pg4').feature('ptgr1').set('xdatasolnumtype', 'level2');
model.result('pg4').feature('ptgr1').set('data', 'dset3');
model.result('pg4').feature('ptgr1').setIndex('looplevelinput', 'last', 0);
model.result('pg4').feature('ptgr1').set('legend', true);
model.result('pg4').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg4').feature('ptgr1').setIndex('legends', 'Membrane approximation', 0);
model.result('pg4').feature('ptgr1').set('linemarker', 'cycle');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').create('lnsg1', 'LineSegments');
model.result('pg4').feature('lnsg1').set('markerpos', 'datapoints');
model.result('pg4').feature('lnsg1').set('linewidth', 'preference');
model.result('pg4').feature('lnsg1').set('data', 'dset1');
model.result('pg4').feature('lnsg1').setIndex('looplevelinput', 'last', 0);
model.result('pg4').feature('lnsg1').setIndex('xexpr', 0, 0);
model.result('pg4').feature('lnsg1').setIndex('xunit', 1, 0);
model.result('pg4').feature('lnsg1').setIndex('xdescr', '', 0);
model.result('pg4').feature('lnsg1').setIndex('xexpr', '1e-4', 1);
model.result('pg4').feature('lnsg1').setIndex('xunit', 1, 1);
model.result('pg4').feature('lnsg1').setIndex('xdescr', '', 1);
model.result('pg4').feature('lnsg1').setIndex('xexpr', '1e4', 2);
model.result('pg4').feature('lnsg1').setIndex('xunit', 1, 2);
model.result('pg4').feature('lnsg1').setIndex('xdescr', '', 2);
model.result('pg4').feature('lnsg1').setIndex('yexpr', 'aveop1(solid.PxX)', 0);
model.result('pg4').feature('lnsg1').setIndex('yunit', 'MPa', 0);
model.result('pg4').feature('lnsg1').setIndex('ydescr', 'Average 1', 0);
model.result('pg4').feature('lnsg1').setIndex('yexpr', 'aveop1(solid.PxX)', 1);
model.result('pg4').feature('lnsg1').setIndex('yunit', 'MPa', 1);
model.result('pg4').feature('lnsg1').setIndex('ydescr', 'Average 1', 1);
model.result('pg4').feature('lnsg1').setIndex('yexpr', 'aveop1(solid.PxX)', 2);
model.result('pg4').feature('lnsg1').setIndex('yunit', 'MPa', 2);
model.result('pg4').feature('lnsg1').setIndex('ydescr', 'Average 1', 2);
model.result('pg4').feature('lnsg1').set('legend', true);
model.result('pg4').feature('lnsg1').set('legendmethod', 'manual');
model.result('pg4').feature('lnsg1').setIndex('legends', 'Perfect interface', 0);

model.physics('solid').create('tl3', 'ThinLayer', 1);
model.physics('solid').feature('tl3').selection.set([7 8]);
model.physics('solid').feature('tl3').set('lth', 'th');
model.physics('solid').feature('tl3').set('thicknessApproximation', 'spring');
model.physics('solid').feature('tl3').label('Spring Approximation');
model.physics('solid').feature('tl3').create('spm1', 'SpringMaterial', 1);
model.physics('solid').feature('tl3').feature('spm1').set('kPerArea', {'AlphaBnd' '0' '0' '0' 'AlphaBnd' '0' '0' '0' 'AlphaBnd'});
model.physics('solid').feature('tl3').feature('spm1').set('mPerVolume', 'RhoBnd');
model.physics('solid').feature('tl3').feature('spm1').selection.set([7 8]);

model.study.create('std4');
model.study('std4').create('stat', 'Stationary');
model.study('std4').feature('stat').setSolveFor('/physics/solid', true);
model.study('std4').label('Spring Approximation');
model.study('std4').setGenPlots(false);
model.study('std4').feature('stat').set('useadvanceddisable', true);
model.study('std4').feature('stat').set('disabledphysics', {'solid/tl1' 'solid/tl2'});
model.study('std4').feature('stat').set('useparam', true);
model.study('std4').feature('stat').setIndex('pname', 'AlphaBnd', 0);
model.study('std4').feature('stat').setIndex('plistarr', '', 0);
model.study('std4').feature('stat').setIndex('punit', 'N/m^3', 0);
model.study('std4').feature('stat').setIndex('pname', 'AlphaBnd', 0);
model.study('std4').feature('stat').setIndex('plistarr', '', 0);
model.study('std4').feature('stat').setIndex('punit', 'N/m^3', 0);
model.study('std4').feature('stat').setIndex('pname', 'stretch', 0);
model.study('std4').feature('stat').setIndex('plistarr', 'range(0.1,0.1,0.5)', 0);
model.study('std4').feature('stat').setIndex('punit', '', 0);
model.study('std4').feature('stat').setIndex('pname', 'AlphaBnd', 1);
model.study('std4').feature('stat').setIndex('plistarr', '', 1);
model.study('std4').feature('stat').setIndex('punit', 'N/m^3', 1);
model.study('std4').feature('stat').setIndex('pname', 'AlphaBnd', 1);
model.study('std4').feature('stat').setIndex('plistarr', '', 1);
model.study('std4').feature('stat').setIndex('punit', 'N/m^3', 1);
model.study('std4').feature('stat').setIndex('pname', 'AlphaRatio', 1);
model.study('std4').feature('stat').setIndex('plistarr', '10^{range(-5,1,3)}', 1);
model.study('std4').feature('stat').setIndex('punit', '', 1);
model.study('std4').feature('stat').set('sweeptype', 'filled');
model.study('std4').feature('stat').set('pcontinuationmode', 'manual');
model.study('std4').feature('stat').set('pcontinuation', 'stretch');

model.sol.create('sol4');
model.sol('sol4').study('std4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std4');
model.sol('sol4').feature('st1').set('studystep', 'stat');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'stat');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').create('p1', 'Parametric');
model.sol('sol4').feature('s1').feature.remove('pDef');
model.sol('sol4').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol4').feature('s1').set('control', 'stat');
model.sol('sol4').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol4').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol4').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol4').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol4').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').attach('std4');
model.sol('sol4').runAll;

model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').run;
model.result('pg5').label('Spring Approximation');
model.result('pg5').set('data', 'dset4');
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Transition from Spring Approximation to Perfect Interface');
model.result('pg5').set('paramindicator', '');
model.result('pg5').set('plotarrayenable', true);
model.result('pg5').set('arrayshape', 'square');
model.result('pg5').set('paddingsquare', 'absolute');
model.result('pg5').set('columnpadding', 'L');
model.result('pg5').set('rowpadding', '-2.4*L');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('arraydim', '2');
model.result('pg5').feature('surf1').set('data', 'dset4');
model.result('pg5').feature('surf1').setIndex('looplevel', 3, 1);
model.result('pg5').feature('surf1').set('expr', 'solid.PxX');
model.result('pg5').feature('surf1').set('unit', 'MPa');
model.result('pg5').feature('surf1').create('def1', 'Deform');
model.result('pg5').run;
model.result('pg5').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg5').feature('surf1').feature('def1').set('scale', 1);
model.result('pg5').run;
model.result('pg5').feature('surf1').set('arraydim', '2');
model.result('pg5').run;
model.result('pg5').feature.duplicate('surf2', 'surf1');
model.result('pg5').feature('surf2').set('arraydim', '2');
model.result('pg5').run;
model.result('pg5').feature('surf2').setIndex('looplevel', 5, 1);
model.result('pg5').feature('surf2').set('inheritplot', 'surf1');
model.result('pg5').feature.duplicate('surf3', 'surf2');
model.result('pg5').feature('surf3').set('arraydim', '2');
model.result('pg5').run;
model.result('pg5').feature('surf3').setIndex('looplevel', 6, 1);
model.result('pg5').feature.duplicate('surf4', 'surf3');
model.result('pg5').feature('surf4').set('arraydim', '2');
model.result('pg5').run;
model.result('pg5').feature('surf4').setIndex('looplevel', 7, 1);
model.result('pg5').feature.duplicate('surf5', 'surf4');
model.result('pg5').feature('surf5').set('arraydim', '2');
model.result('pg5').run;
model.result('pg5').feature('surf5').setIndex('looplevel', 9, 1);
model.result('pg5').feature.duplicate('surf6', 'surf5');
model.result('pg5').feature('surf6').set('arraydim', '2');
model.result('pg5').run;
model.result('pg5').feature('surf6').set('data', 'dset1');
model.result('pg5').run;
model.result('pg5').create('tlan1', 'TableAnnotation');
model.result('pg5').feature('tlan1').set('arraydim', '2');
model.result('pg5').feature('tlan1').set('source', 'localtable');
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 0, 0, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '3/2*L', 0, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '$\alpha_\mathrm{ratio}$ = 0.001', 0, 2);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '2*L', 1, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '3/2*L', 1, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '$\alpha_\mathrm{ratio}$ = 0.1', 1, 2);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '4*L', 2, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '3/2*L', 2, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '$\alpha_{ratio}$ = 1', 2, 2);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 0, 3, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '-3/2*L', 3, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '$\alpha_{ratio}$ = 10', 3, 2);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '2*L', 4, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '-3/2*L', 4, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '$\alpha_\mathrm{ratio}$ = 1000', 4, 2);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '4*L', 5, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '-3/2*L', 5, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 'Perfect interface', 5, 2);
model.result('pg5').feature('tlan1').set('showpoint', false);
model.result('pg5').feature('tlan1').set('latexmarkup', true);
model.result('pg5').run;
model.result('pg4').run;
model.result.duplicate('pg6', 'pg4');
model.result('pg6').run;
model.result('pg6').set('data', 'dset4');
model.result('pg6').set('xlabel', '\alpha<sub>ratio</sub>');
model.result('pg6').label('Line Plot: Spring Approximation');
model.result('pg6').set('legendpos', 'lowerright');
model.result('pg6').run;
model.result('pg6').feature('ptgr1').set('data', 'dset4');
model.result('pg6').feature('ptgr1').setIndex('legends', 'Spring approximation', 0);
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').feature('lnsg1').setIndex('xexpr', 0, 0);
model.result('pg6').feature('lnsg1').setIndex('xunit', 1, 0);
model.result('pg6').feature('lnsg1').setIndex('xdescr', '', 0);
model.result('pg6').feature('lnsg1').setIndex('xexpr', '1e-5', 1);
model.result('pg6').feature('lnsg1').setIndex('xunit', 1, 1);
model.result('pg6').feature('lnsg1').setIndex('xdescr', '', 1);
model.result('pg6').feature('lnsg1').setIndex('xexpr', '1e3', 2);
model.result('pg6').feature('lnsg1').setIndex('xunit', 1, 2);
model.result('pg6').feature('lnsg1').setIndex('xdescr', '', 2);
model.result('pg6').run;

model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledphysics', {'solid/tl1' 'solid/tl2' 'solid/tl3'});
model.study('std2').feature('stat').set('useadvanceddisable', true);
model.study('std2').feature('stat').set('disabledphysics', {'solid/tl2' 'solid/tl3'});
model.study('std3').feature('stat').set('disabledphysics', {'solid/tl1' 'solid/tl3'});

model.result('pg2').run;

model.title('Thin Layer Interfaces');

model.description('This model demonstrates alternative implementations used for describing a thin layer and the impact of the choice on the continuity of the displacement and stress fields. It is shown how a perfect interface can be obtained by asymptotically changing the material parameters.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('thin_layer_interfaces.mph');

model.modelNode.label('Components');

out = model;
