function out = model
%
% vortex_lattice_formation_in_a_rotating_bose_einstein_condensate.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Semiconductor_Module/Quantum_Systems');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('schr', 'SchrodingerEquation', 'geom1', {'psi'});

model.study.create('std1');
model.study('std1').create('eigv', 'Eigenvalue');
model.study('std1').feature('eigv').set('neigs', '3');
model.study('std1').feature('eigv').set('eigunit', '');
model.study('std1').feature('eigv').set('shift', '0.1');
model.study('std1').feature('eigv').set('conrad', '1');
model.study('std1').feature('eigv').set('conradynhm', '1');
model.study('std1').feature('eigv').set('conlbdy', '0');
model.study('std1').feature('eigv').set('conubdy', '1');
model.study('std1').feature('eigv').set('linpsolnum', 'auto');
model.study('std1').feature('eigv').set('solnum', 'auto');
model.study('std1').feature('eigv').set('notsolnum', 'auto');
model.study('std1').feature('eigv').set('outputmap', {});
model.study('std1').feature('eigv').set('ngenAUX', '1');
model.study('std1').feature('eigv').set('goalngenAUX', '1');
model.study('std1').feature('eigv').set('ngenAUX', '1');
model.study('std1').feature('eigv').set('goalngenAUX', '1');
model.study('std1').feature('eigv').setSolveFor('/physics/schr', true);

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);

model.func.create('step1', 'Step');
model.func('step1').set('location', 0.5);
model.func('step1').set('smooth', 0.95);

model.param.set('a', '5.5[nm]');
model.param.descr('a', 'Scattering length');
model.param.set('m', '86.909[g/mol]/N_A_const');
model.param.descr('m', 'Atomic mass');
model.param.set('g', '4*pi*hbar_const^2*a/m');
model.param.descr('g', 'Coupling constant');
model.param.set('tau', '20[ms]');
model.param.descr('tau', 'Ramp duration');
model.param.set('t', '-tau');
model.param.descr('t', 'Time parameter');
model.param.set('t_off', '300[ms]');
model.param.descr('t_off', 'Off time');
model.param.set('epst', '0.032*step1((t+tau)/tau)*(1-step1((t-t_off)/tau))');
model.param.descr('epst', 'Ellipticity parameter');
model.param.set('epsX', '(epst+sqrt(0.03*0.09+epst^2-0.03*0.09*epst^2))/(1-epst)');
model.param.descr('epsX', 'Optical potential parameter');
model.param.set('epsY', '(-epst+sqrt(0.03*0.09+epst^2-0.03*0.09*epst^2))/(1+epst)');
model.param.descr('epsY', 'Optical potential parameter');
model.param.set('wz', '2*pi*11.8[Hz]');
model.param.descr('wz', 'Longitudinal trap frequency');
model.param.set('lambda', '9.2');
model.param.descr('lambda', 'Trap aspect ratio');
model.param.set('wt', 'lambda*wz');
model.param.descr('wt', 'Transverse trap frequency');
model.param.set('wX2', 'wt^2*(1+epsX)');
model.param.descr('wX2', 'Transverse trap frequency squared');
model.param.set('wY2', 'wt^2*(1+epsY)');
model.param.descr('wY2', 'Transverse trap frequency squared');
model.param.set('wbar', 'wt*sqrt((1.03+1.09)/2)');
model.param.descr('wbar', 'Average transverse trap frequency');
model.param.set('Omega', '0.7*wbar');
model.param.descr('Omega', 'Stirring frequency');
model.param.set('N', '1.5e5');
model.param.descr('N', 'Number of atoms');
model.param.set('RrTF', '(15*g*wz*N/(4*pi*m*wbar^3))^0.2');
model.param.descr('RrTF', 'Transverse size of condensate (T-F)');
model.param.set('RzTF', '(15*g*wbar^2*N/(4*pi*m*wz^4))^0.2');
model.param.descr('RzTF', 'Longitudinal size of condensate (T-F)');
model.param.set('rho0TF', '15*N/(8*pi*RrTF^2*RzTF)');
model.param.descr('rho0TF', 'Peak density of condensate (T-F)');
model.param.set('L', 'N/rho0TF/(pi*RrTF^2/2)');
model.param.descr('L', 'Out-of-plane thickness');
model.param.set('kT', 'k_B_const*100[nK]');
model.param.descr('kT', 'Thermal energy');
model.param.set('muTF', 'rho0TF*g');
model.param.descr('muTF', 'Chemical potential (T-F)');
model.param.set('gamma', '4*m*(a*kT)^2/pi/hbar_const^3*exp(2*muTF/kT)*muTF/kT*besselk(1,muTF/kT)/wt');
model.param.descr('gamma', 'Damping parameter');
model.param.set('t_damp', '(1+gamma^2)/gamma/wt');
model.param.descr('t_damp', 'Damping time scale');
model.param.set('t_trap', '2*pi*(1+gamma^2)/wt');
model.param.descr('t_trap', 'Transverse trap time scale');

model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', '1.6*RrTF');
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.physics('schr').prop('ModelProperties').set('lambda_scale', 'hbar_const*wt');
model.physics('schr').feature('meff1').label('Atomic Mass');
model.physics('schr').feature('meff1').set('meffe_psi', {'m' '0' '0' '0' 'm' '0' '0' '0' 'm'});
model.physics('schr').feature('ve1').label('Trap Potential Energy');
model.physics('schr').feature('ve1').set('Ve_src', 'userdef');
model.physics('schr').feature('ve1').set('Ve', 'm*wt^2*(X^2+Y^2)/2');
model.physics('schr').create('ve2', 'ElectronPotentialEnergy', 2);
model.physics('schr').feature('ve2').label('Optical Potential Energy');
model.physics('schr').feature('ve2').selection.all;
model.physics('schr').feature('ve2').set('Ve_src', 'userdef');
model.physics('schr').feature('ve2').set('Ve', 'm*wt^2*(epsX*X^2+epsY*Y^2)/2');

model.mesh('mesh1').create('se1', 'SizeExpression');
model.mesh('mesh1').feature('se1').set('sizeexpr', 'if(X^2+Y^2<(RrTF*1.3)^2,RrTF/10,RrTF/7)');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').set('method', 'del');
model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Eigenvalue for Initial Condition');
model.study('std1').setGenPlots(false);
model.study('std1').feature('eigv').set('neigs', 1);
model.study('std1').feature('eigv').set('shift', '1');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'eigv');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'eigv');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('neigs', 6);
model.sol('sol1').feature('e1').set('shift', '0');
model.sol('sol1').feature('e1').set('rtol', 1.0E-10);
model.sol('sol1').feature('e1').set('transform', 'none');
model.sol('sol1').feature('e1').set('eigref', '0.1');
model.sol('sol1').feature('e1').set('eigvfunscale', 'average');
model.sol('sol1').feature('e1').set('control', 'eigv');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.physics('schr').create('ve3', 'ElectronPotentialEnergy', 2);
model.physics('schr').feature('ve3').selection.all;
model.physics('schr').feature('ve3').set('Ve_src', 'userdef');
model.physics('schr').feature('ve3').set('Ve', 'g*schr.Pr/L');
model.physics('schr').feature('ve3').label('Interaction Energy');
model.physics('schr').create('ge1', 'GlobalEquations', -1);
model.physics('schr').feature('ge1').label('Global Equations - Normalization for Stationary Study');
model.physics('schr').feature('ge1').setIndex('name', 'E0', 0, 0);
model.physics('schr').feature('ge1').setIndex('equation', 'schr.int(schr.Pr)/N-1', 0, 0);
model.physics('schr').prop('ModelProperties').set('E', 'E0*muTF');

model.nodeGroup.create('grp1', 'Physics', 'schr');
model.nodeGroup('grp1').placeAfter('ve3');
model.nodeGroup('grp1').add('ge1');
model.nodeGroup('grp1').label('Stationary Study');

model.physics('schr').create('init2', 'init', 2);

model.nodeGroup('grp1').add('init2');

model.physics('schr').feature('init2').selection.all;
model.physics('schr').feature('init2').set('psi', 'schr.Psi');

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/schr', true);
model.study('std2').feature('stat').set('probesel', 'none');
model.study('std2').feature('stat').set('useinitsol', true);
model.study('std2').feature('stat').set('initstudy', 'std1');
model.study('std2').feature('stat').set('useparam', true);
model.study('std2').feature('stat').setIndex('pname', 'a', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'm', 0);
model.study('std2').feature('stat').setIndex('pname', 'a', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'm', 0);
model.study('std2').feature('stat').setIndex('pname', 'N', 0);
model.study('std2').feature('stat').setIndex('plistarr', '1 10 N', 0);
model.study('std2').label('Study 2 - Stationary for Condensate');
model.study('std2').setGenPlots(false);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol2').feature('s1').set('control', 'stat');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').set('data', 'dset2');
model.result.dataset('cln1').set('bounded', false);
model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').label('Stationary Profile - Compare with T-F Approx.');
model.result('pg1').set('data', 'cln1');
model.result('pg1').setIndex('looplevelinput', 'last', 0);
model.result('pg1').create('lngr1', 'LineGraph');
model.result('pg1').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg1').feature('lngr1').set('linewidth', 'preference');
model.result('pg1').feature('lngr1').label('Numerical Solution');
model.result('pg1').feature('lngr1').set('expr', 'schr.Pr/L');
model.result('pg1').feature('lngr1').set('unit', '1/um^3');
model.result('pg1').feature('lngr1').set('xdata', 'expr');
model.result('pg1').feature('lngr1').set('xdataexpr', 'X');
model.result('pg1').feature.duplicate('lngr2', 'lngr1');
model.result('pg1').run;
model.result('pg1').feature('lngr2').label('T-F Approx.');
model.result('pg1').feature('lngr2').set('expr', 'rho0TF*max(0,1-X^2/RrTF^2)');
model.result('pg1').run;

model.physics('schr').create('rotf1', 'RotatingFrameSchrod', 2);
model.physics('schr').feature('rotf1').selection.all;
model.physics('schr').feature('rotf1').set('Ov', 'Omega');

model.nodeGroup.create('grp2', 'Physics', 'schr');
model.nodeGroup('grp2').placeAfter('ve3');
model.nodeGroup('grp2').add('rotf1');
model.nodeGroup('grp2').label('Transient Study');

model.physics('schr').create('diss1', 'DissipationSchrod', 2);

model.nodeGroup('grp2').add('diss1');

model.physics('schr').feature('diss1').selection.all;
model.physics('schr').feature('diss1').set('gamma', 'gamma');
model.physics('schr').create('ve4', 'ElectronPotentialEnergy', 2);

model.nodeGroup('grp2').add('ve4');

model.physics('schr').feature('ve4').label('Chemical Potential');
model.physics('schr').feature('ve4').selection.all;
model.physics('schr').feature('ve4').set('Ve_src', 'userdef');
model.physics('schr').feature('ve4').set('Ve', '-mu*muTF');
model.physics('schr').create('ge2', 'GlobalEquations', -1);

model.nodeGroup('grp2').add('ge2');

model.physics('schr').feature('ge2').setIndex('name', 'mu', 0, 0);
model.physics('schr').feature('ge2').setIndex('equation', 'schr.int(schr.Pr)/N-1', 0, 0);
model.physics('schr').feature('ge2').setIndex('initialValueU', 'withsol(''sol2'',E0,setind(N,-1))', 0, 0);
model.physics('schr').create('init3', 'init', 2);

model.nodeGroup('grp2').add('init3');

model.physics('schr').feature('init3').selection.all;
model.physics('schr').feature('init3').set('psi', 'psi');

model.study.create('std3');
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').setSolveFor('/physics/schr', true);
model.study('std3').feature('time').set('tunit', 'ms');
model.study('std3').feature('time').set('tlist', 'range(-tau,5[ms],250[ms]) range(252[ms],2[ms],450[ms]) range(455[ms],5[ms],600[ms])');
model.study('std3').feature('time').set('usertol', true);
model.study('std3').feature('time').set('rtol', '5e-4');
model.study('std3').feature('time').set('useadvanceddisable', true);
model.study('std3').feature('time').set('disabledphysics', {'schr/ge1' 'schr/init2'});
model.study('std3').feature('time').set('useinitsol', true);
model.study('std3').feature('time').set('initstudy', 'std2');
model.study('std3').feature('time').set('solnum', 'last');
model.study('std3').label('Study 3 - Transient for Vortex Lattice Formation');

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'time');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'time');
model.sol('sol3').create('t1', 'Time');
model.sol('sol3').feature('t1').set('tlist', 'range(-tau,5[ms],250[ms]) range(252[ms],2[ms],450[ms]) range(455[ms],5[ms],600[ms])');
model.sol('sol3').feature('t1').set('plot', 'off');
model.sol('sol3').feature('t1').set('plotgroup', 'pg1');
model.sol('sol3').feature('t1').set('plotfreq', 'tout');
model.sol('sol3').feature('t1').set('probesel', 'all');
model.sol('sol3').feature('t1').set('probes', {});
model.sol('sol3').feature('t1').set('probefreq', 'tsteps');
model.sol('sol3').feature('t1').set('rtol', 1.0E-5);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol3').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('reacf', true);
model.sol('sol3').feature('t1').set('storeudot', true);
model.sol('sol3').feature('t1').set('tstepsgenalpha', 'strict');
model.sol('sol3').feature('t1').set('endtimeinterpolation', true);
model.sol('sol3').feature('t1').set('timemethod', 'genalpha');
model.sol('sol3').feature('t1').set('rhoinf', 0.75);
model.sol('sol3').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol3').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol3').feature('t1').set('control', 'time');
model.sol('sol3').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('t1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').feature('t1').set('maxstepconstraintgenalpha', 'expr');
model.sol('sol3').feature('t1').set('maxstepexpressiongenalpha', 't_trap/9');
model.sol('sol3').feature('t1').set('consistent', false);
model.sol('sol3').feature('t1').set('estrat', 'exclude');
model.sol('sol3').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('t1').feature('fc1').set('maxiter', 100);

model.probe.create('var1', 'GlobalVariable');
model.probe('var1').model('comp1');
model.probe('var1').label('Global Variable Probe 1 - Lz');
model.probe('var1').set('probename', 'Lz_probe');
model.probe('var1').set('expr', 'schr.L_avZ/hbar_const/N');
model.probe('var1').set('descractive', true);
model.probe('var1').set('descr', 'Angular momentum per atom');
model.probe('var1').genResult('none');

model.sol('sol3').runAll;

model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Wave Function (schr)');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 185, 0);
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 185, 0);
model.result('pg3').set('defaultPlotID', 'SchrodingerEquation/phys1/pdef1/pcond3/pcond2/pg8');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Real Part');
model.result('pg3').feature('surf1').set('expr', 'psi');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature('surf1').feature.create('hght1', 'Height');
model.result('pg3').feature.create('surf2', 'Surface');
model.result('pg3').feature('surf2').label('Imaginary Part');
model.result('pg3').feature('surf2').set('expr', 'imag(psi)');
model.result('pg3').feature('surf2').set('smooth', 'internal');
model.result('pg3').feature('surf2').set('data', 'parent');
model.result('pg3').feature('surf2').set('inheritplot', 'surf1');
model.result('pg3').feature('surf2').feature.create('hght1', 'Height');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Probability Density (schr)');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 185, 0);
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 185, 0);
model.result('pg4').set('defaultPlotID', 'SchrodingerEquation/phys1/pdef1/pcond3/pg7');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'schr.Pr');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result('pg4').feature('surf1').feature.create('hght1', 'Height');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Potential Energy (schr)');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 185, 0);
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 185, 0);
model.result('pg5').set('defaultPlotID', 'SchrodingerEquation/phys1/pdef1/pcond3/pg6');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', 'schr.V_psi');
model.result('pg5').feature('surf1').set('unit', 'eV');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg5').feature('surf1').feature.create('hght1', 'Height');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').label('Effective Mass (schr)');
model.result('pg6').set('data', 'dset3');
model.result('pg6').setIndex('looplevel', 185, 0);
model.result('pg6').set('data', 'dset3');
model.result('pg6').setIndex('looplevel', 185, 0);
model.result('pg6').set('defaultPlotID', 'SchrodingerEquation/phys1/pdef1/pcond3/pg5');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'schr.meff_psiXX/me_const');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result('pg6').feature('surf1').feature.create('hght1', 'Height');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('surf1').feature('hght1').active(false);
model.result('pg3').run;
model.result('pg3').feature('surf1').set('colortable', 'GrayScale');
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').set('plotgroup', 'pg3');
model.result.export('anim1').set('framesel', 'all');
model.result.export('anim1').run;

model.param.create('par2');
model.param('par2').label('Parameters 2 - Optimization');
model.param('par2').set('index', '1');
model.param('par2').descr('index', 'Solution index');
model.param('par2').set('RXfit', 'RrTF');
model.param('par2').descr('RXfit', 'First major/minor axis to fit');
model.param('par2').set('RYfit', 'RrTF');
model.param('par2').descr('RYfit', 'Second major/minor axis to fit');
model.param('par2').set('thetafit', '0[rad]');
model.param('par2').descr('thetafit', 'Tilt angle to fit');
model.param('par2').set('rho0fit', 'rho0TF');
model.param('par2').descr('rho0fit', 'Peak density to fit');
model.param('par2').set('alphafit', 'abs(Omega*(RXfit^2-RYfit^2)/(RXfit^2+RYfit^2)/wbar)');
model.param('par2').descr('alphafit', 'Ellipticity parameter');

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.all;

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('fit_fn', 'max(0,1-(cos(thetafit)*X+sin(thetafit)*Y)^2/RXfit^2-(cos(thetafit)*Y-sin(thetafit)*X)^2/RYfit^2)*rho0fit');
model.variable('var1').descr('fit_fn', 'Fit function based on T-F density profile');
model.variable('var1').set('residual', 'realdot(psi,psi)[m^-2]/L-fit_fn');
model.variable('var1').descr('residual', 'Difference between fit function and computed data');
model.variable('var1').set('q0', 'aveop1(realdot(residual,residual)/rho0TF^2)');
model.variable('var1').descr('q0', 'Objective - scaled and averaged difference between fit function and computed data');

model.study.create('std4');
model.study('std4').create('stat', 'Stationary');
model.study('std4').feature('stat').setSolveFor('/physics/schr', false);
model.study('std4').feature('stat').set('usesol', true);
model.study('std4').feature('stat').set('notsolmethod', 'sol');
model.study('std4').feature('stat').set('notstudy', 'std3');
model.study('std4').feature('stat').set('notsolnum', 'manual');
model.study('std4').feature('stat').set('notmanualsolnum', 'index');
model.study('std4').label('Study 4 - Optimization for Parameter Estimation');
model.study('std4').create('param', 'Parametric');
model.study('std4').feature('param').setIndex('pname', 'a', 0);
model.study('std4').feature('param').setIndex('plistarr', '', 0);
model.study('std4').feature('param').setIndex('punit', 'm', 0);
model.study('std4').feature('param').setIndex('pname', 'a', 0);
model.study('std4').feature('param').setIndex('plistarr', '', 0);
model.study('std4').feature('param').setIndex('punit', 'm', 0);
model.study('std4').feature('param').setIndex('pname', 'index', 0);
model.study('std4').feature('param').setIndex('plistarr', 'range(1,185)', 0);
model.study('std4').feature('param').setIndex('punit', '', 0);
model.study('std4').create('opt', 'Optimization');
model.study('std4').feature('opt').set('optsolver', 'ipopt');
model.study('std4').feature('opt').set('optobj', {'comp1.q0'});
model.study('std4').feature('opt').set('descr', {'Objective - scaled and averaged difference between fit function and computed data'});
model.study('std4').feature('opt').setIndex('pname', 'a', 0);
model.study('std4').feature('opt').setIndex('initval', '5.5[nm]', 0);
model.study('std4').feature('opt').setIndex('scale', 1, 0);
model.study('std4').feature('opt').setIndex('lbound', '', 0);
model.study('std4').feature('opt').setIndex('ubound', '', 0);
model.study('std4').feature('opt').setIndex('pname', 'a', 0);
model.study('std4').feature('opt').setIndex('initval', '5.5[nm]', 0);
model.study('std4').feature('opt').setIndex('scale', 1, 0);
model.study('std4').feature('opt').setIndex('lbound', '', 0);
model.study('std4').feature('opt').setIndex('ubound', '', 0);
model.study('std4').feature('opt').setIndex('pname', 'alphafit', 1);
model.study('std4').feature('opt').setIndex('initval', 'abs(Omega*(RXfit^2-RYfit^2)/(RXfit^2+RYfit^2)/wbar)', 1);
model.study('std4').feature('opt').setIndex('scale', 1, 1);
model.study('std4').feature('opt').setIndex('lbound', '', 1);
model.study('std4').feature('opt').setIndex('ubound', '', 1);
model.study('std4').feature('opt').setIndex('pname', 'alphafit', 1);
model.study('std4').feature('opt').setIndex('initval', 'abs(Omega*(RXfit^2-RYfit^2)/(RXfit^2+RYfit^2)/wbar)', 1);
model.study('std4').feature('opt').setIndex('scale', 1, 1);
model.study('std4').feature('opt').setIndex('lbound', '', 1);
model.study('std4').feature('opt').setIndex('ubound', '', 1);
model.study('std4').feature('opt').setIndex('pname', 'epst', 2);
model.study('std4').feature('opt').setIndex('initval', '0.032*step1((t+tau)/tau)*(1-step1((t-t_off)/tau))', 2);
model.study('std4').feature('opt').setIndex('scale', 1, 2);
model.study('std4').feature('opt').setIndex('lbound', '', 2);
model.study('std4').feature('opt').setIndex('ubound', '', 2);
model.study('std4').feature('opt').setIndex('pname', 'epst', 2);
model.study('std4').feature('opt').setIndex('initval', '0.032*step1((t+tau)/tau)*(1-step1((t-t_off)/tau))', 2);
model.study('std4').feature('opt').setIndex('scale', 1, 2);
model.study('std4').feature('opt').setIndex('lbound', '', 2);
model.study('std4').feature('opt').setIndex('ubound', '', 2);
model.study('std4').feature('opt').setIndex('pname', 'epsX', 3);
model.study('std4').feature('opt').setIndex('initval', '(epst+sqrt(0.03*0.09+epst^2-0.03*0.09*epst^2))/(1-epst)', 3);
model.study('std4').feature('opt').setIndex('scale', 1, 3);
model.study('std4').feature('opt').setIndex('lbound', '', 3);
model.study('std4').feature('opt').setIndex('ubound', '', 3);
model.study('std4').feature('opt').setIndex('pname', 'epsX', 3);
model.study('std4').feature('opt').setIndex('initval', '(epst+sqrt(0.03*0.09+epst^2-0.03*0.09*epst^2))/(1-epst)', 3);
model.study('std4').feature('opt').setIndex('scale', 1, 3);
model.study('std4').feature('opt').setIndex('lbound', '', 3);
model.study('std4').feature('opt').setIndex('ubound', '', 3);
model.study('std4').feature('opt').setIndex('pname', 'RXfit', 0);
model.study('std4').feature('opt').setIndex('initval', 'RrTF', 0);
model.study('std4').feature('opt').setIndex('scale', 'RrTF', 0);
model.study('std4').feature('opt').setIndex('lbound', 'RrTF/4', 0);
model.study('std4').feature('opt').setIndex('ubound', 'RrTF*4', 0);
model.study('std4').feature('opt').setIndex('pname', 'RYfit', 1);
model.study('std4').feature('opt').setIndex('initval', 'RrTF', 1);
model.study('std4').feature('opt').setIndex('scale', 'RrTF', 1);
model.study('std4').feature('opt').setIndex('lbound', 'RrTF/4', 1);
model.study('std4').feature('opt').setIndex('ubound', 'RrTF*4', 1);
model.study('std4').feature('opt').setIndex('pname', 'thetafit', 2);
model.study('std4').feature('opt').setIndex('initval', '0[rad]', 2);
model.study('std4').feature('opt').setIndex('scale', 'pi', 2);
model.study('std4').feature('opt').setIndex('lbound', '-pi', 2);
model.study('std4').feature('opt').setIndex('ubound', 'pi', 2);
model.study('std4').feature('opt').setIndex('pname', 'rho0fit', 3);
model.study('std4').feature('opt').setIndex('initval', 'rho0TF', 3);
model.study('std4').feature('opt').setIndex('scale', 'rho0TF', 3);
model.study('std4').feature('opt').setIndex('lbound', 'rho0TF/8', 3);
model.study('std4').feature('opt').setIndex('ubound', 'rho0TF*3', 3);
model.study('std4').feature('opt').set('probesel', 'none');

model.sol.create('sol4');
model.sol('sol4').study('std4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std4');
model.sol('sol4').feature('st1').set('studystep', 'stat');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'stat');
model.sol('sol4').create('o1', 'Optimization');
model.sol('sol4').feature('o1').set('control', 'opt');
model.sol('sol4').feature('o1').create('s1', 'StationaryAttrib');
model.sol('sol4').feature('o1').feature('s1').set('control', 'stat');
model.sol('sol4').feature('o1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('o1').feature('s1').feature.remove('fcDef');
model.sol('sol4').attach('std4');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std4');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol4');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'index'});
model.batch('p1').set('plistarr', {'range(1,185)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'none');
model.batch('p1').set('probes', {'var1'});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std4');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').set('control', 'param');

model.sol.create('sol5');
model.sol('sol5').study('std4');
model.sol('sol5').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol5');
model.batch('p1').run('compute');

model.study('std4').feature('opt').set('probewindow', '');

model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Ellipticity Parameter and Angular Momentum');
model.result('pg7').set('data', 'dset6');
model.result('pg7').set('legendpos', 'middleright');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').setIndex('expr', 'alphafit', 0);
model.result('pg7').feature('glob1').set('xdata', 'expr');
model.result('pg7').feature('glob1').set('xdataexpr', 'withsol(''sol3'',t,setind(t,index))');
model.result('pg7').feature('glob1').set('xdataunit', 'ms');
model.result('pg7').feature('glob1').set('linestyle', 'none');
model.result('pg7').feature('glob1').set('linemarker', 'point');
model.result('pg7').run;
model.result('pg2').set('window', 'window1');
model.result('pg2').run;
model.result('pg7').run;
model.result('pg7').feature.copy('tblp1', 'pg2/tblp1');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('twoyaxes', true);
model.result('pg7').setIndex('plotonsecyaxis', true, 1, 1);
model.result('pg7').run;
model.result('pg4').run;
model.result.duplicate('pg8', 'pg4');
model.result('pg8').run;
model.result('pg8').label('Probability Density vs. Time');
model.result('pg8').set('data', 'none');
model.result('pg8').set('titletype', 'label');
model.result('pg8').run;
model.result('pg8').feature('surf1').feature.remove('hght1');
model.result('pg8').run;
model.result('pg8').feature('surf1').set('data', 'dset3');
model.result('pg8').feature('surf1').setIndex('looplevel', 1, 0);
model.result('pg8').feature('surf1').set('expr', 'schr.Pr/L');
model.result('pg8').feature('surf1').set('unit', '1/um^3');
model.result('pg8').run;
model.result('pg8').create('ann1', 'Annotation');
model.result('pg8').feature('ann1').set('data', 'dset3');
model.result('pg8').feature('ann1').setIndex('looplevel', 1, 0);
model.result('pg8').feature('ann1').set('text', 't=eval(t,ms) ms');
model.result('pg8').feature('ann1').set('posyexpr', '-1.59*RrTF');
model.result('pg8').feature('ann1').set('showpoint', false);
model.result('pg8').feature('ann1').set('anchorpoint', 'uppermiddle');
model.result('pg8').run;
model.result('pg8').feature.duplicate('surf2', 'surf1');
model.result('pg8').run;
model.result('pg8').feature('surf2').setIndex('looplevel', 11, 0);
model.result('pg8').feature('surf2').set('inheritplot', 'surf1');
model.result('pg8').feature('surf2').create('def1', 'Deform');
model.result('pg8').run;
model.result('pg8').feature('surf2').feature('def1').set('expr', {'3.3*RrTF' '0'});
model.result('pg8').feature('surf2').feature('def1').set('scaleactive', true);
model.result('pg8').feature('surf2').feature('def1').set('scale', 1);
model.result('pg8').run;
model.result('pg8').feature.duplicate('ann2', 'ann1');
model.result('pg8').run;
model.result('pg8').feature('ann2').setIndex('looplevel', 11, 0);
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').feature('ann2').feature.copy('def1', 'pg8/surf2/def1');
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').feature.duplicate('surf3', 'surf2');
model.result('pg8').run;
model.result('pg8').feature('surf3').setIndex('looplevel', 80, 0);
model.result('pg8').run;
model.result('pg8').feature('surf3').feature('def1').set('expr', {'6.6*RrTF' '0'});
model.result('pg8').run;
model.result('pg8').feature.duplicate('ann3', 'ann2');
model.result('pg8').run;
model.result('pg8').feature('ann3').setIndex('looplevel', 80, 0);
model.result('pg8').run;
model.result('pg8').feature('ann3').feature('def1').set('expr', {'6.6*RrTF' '0'});
model.result('pg8').run;
model.result('pg8').feature.duplicate('surf4', 'surf3');
model.result('pg8').run;
model.result('pg8').feature('surf4').setIndex('looplevel', 90, 0);
model.result('pg8').run;
model.result('pg8').feature('surf4').feature('def1').set('expr', {'0' '-3.6*RrTF'});
model.result('pg8').run;
model.result('pg8').feature.duplicate('ann4', 'ann3');
model.result('pg8').run;
model.result('pg8').feature('ann4').setIndex('looplevel', 90, 0);
model.result('pg8').run;
model.result('pg8').feature('ann4').feature('def1').set('expr', {'0' '-3.6*RrTF'});
model.result('pg8').run;
model.result('pg8').feature.duplicate('surf5', 'surf2');
model.result('pg8').run;
model.result('pg8').feature('surf5').setIndex('looplevel', 100, 0);
model.result('pg8').run;
model.result('pg8').feature('surf5').feature('def1').set('expr', {'3.3*RrTF' '-3.6*RrTF'});
model.result('pg8').run;
model.result('pg8').feature.duplicate('ann5', 'ann2');
model.result('pg8').run;
model.result('pg8').feature('ann5').setIndex('looplevel', 100, 0);
model.result('pg8').run;
model.result('pg8').feature('ann5').feature('def1').set('expr', {'3.3*RrTF' '-3.6*RrTF'});
model.result('pg8').run;
model.result('pg8').feature.duplicate('surf6', 'surf3');
model.result('pg8').run;
model.result('pg8').feature('surf6').setIndex('looplevel', 185, 0);
model.result('pg8').run;
model.result('pg8').feature('surf6').feature('def1').set('expr', {'6.6*RrTF' '-3.6*RrTF'});
model.result('pg8').run;
model.result('pg8').feature.duplicate('ann6', 'ann3');
model.result('pg8').run;
model.result('pg8').feature('ann6').setIndex('looplevel', 185, 0);
model.result('pg8').run;
model.result('pg8').feature('ann6').feature('def1').set('expr', {'6.6*RrTF' '-3.6*RrTF'});
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').run;
model.result('pg9').label('Check the Fit');
model.result('pg9').set('data', 'dset6');
model.result('pg9').setIndex('looplevel', 11, 0);
model.result('pg9').create('con1', 'Contour');
model.result('pg9').feature('con1').label('Contour 1 - Data');
model.result('pg9').feature('con1').set('expr', '(psi*conj(psi)[m^-2])/L');
model.result('pg9').feature('con1').set('unit', '1/um^3');
model.result('pg9').feature('con1').set('levelmethod', 'levels');
model.result('pg9').feature('con1').set('levels', 'range(10,20,110)');
model.result('pg9').feature('con1').set('coloring', 'gradient');
model.result('pg9').feature('con1').set('topcolor', 'black');
model.result('pg9').feature('con1').set('bottomcolor', 'gray');
model.result('pg9').feature.duplicate('con2', 'con1');
model.result('pg9').run;
model.result('pg9').feature('con2').label('Contour 2 - Fit');
model.result('pg9').feature('con2').set('expr', 'fit_fn');
model.result('pg9').feature('con2').set('coloring', 'colortable');
model.result('pg9').run;

model.study('std1').feature('eigv').set('useadvanceddisable', true);
model.study('std1').feature('eigv').set('disabledphysics', {'schr/ve3' 'schr/ge1' 'schr/init2' 'schr/rotf1' 'schr/diss1' 'schr/ve4' 'schr/ge2' 'schr/init3'});
model.study('std2').feature('stat').set('useadvanceddisable', true);
model.study('std2').feature('stat').set('disabledphysics', {'schr/rotf1' 'schr/diss1' 'schr/ve4' 'schr/ge2' 'schr/init3'});

model.title(['Vortex Lattice Formation in a Rotating Bose' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Einstein Condensate']);

model.description(['This tutorial model solves the Gross' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Pitaevskii equation for the vortex lattice formation in a rotating Bose' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Einstein condensate bound by a harmonic trap. The equation is essentially a nonlinear single-particle Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger equation, with the interparticle interaction represented by a potential-energy contribution proportional to the local particle density. The time evolution in the rotating frame with phenomenological damping is configured with built-in features of the Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger Equation physics interface. Nucleation of vortices is seen starting at the periphery of the condensate. Subsequently the system goes through a period of spectacular dynamical instability before settling down in the low-energy state of a vortex lattice. The Optimization Module is used for parameter estimation from the numerical results. The time scales of the initial oscillation and the eventual collapse of the ellipticity parameter agree well between simulation and the experimental data published by Madison and others.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;
model.sol('sol20').clearSolutionData;
model.sol('sol21').clearSolutionData;
model.sol('sol22').clearSolutionData;
model.sol('sol23').clearSolutionData;
model.sol('sol24').clearSolutionData;
model.sol('sol25').clearSolutionData;
model.sol('sol26').clearSolutionData;
model.sol('sol27').clearSolutionData;
model.sol('sol28').clearSolutionData;
model.sol('sol29').clearSolutionData;
model.sol('sol30').clearSolutionData;
model.sol('sol31').clearSolutionData;
model.sol('sol32').clearSolutionData;
model.sol('sol33').clearSolutionData;
model.sol('sol34').clearSolutionData;
model.sol('sol35').clearSolutionData;
model.sol('sol36').clearSolutionData;
model.sol('sol37').clearSolutionData;
model.sol('sol38').clearSolutionData;
model.sol('sol39').clearSolutionData;
model.sol('sol40').clearSolutionData;
model.sol('sol41').clearSolutionData;
model.sol('sol42').clearSolutionData;
model.sol('sol43').clearSolutionData;
model.sol('sol44').clearSolutionData;
model.sol('sol45').clearSolutionData;
model.sol('sol46').clearSolutionData;
model.sol('sol47').clearSolutionData;
model.sol('sol48').clearSolutionData;
model.sol('sol49').clearSolutionData;
model.sol('sol50').clearSolutionData;
model.sol('sol51').clearSolutionData;
model.sol('sol52').clearSolutionData;
model.sol('sol53').clearSolutionData;
model.sol('sol54').clearSolutionData;
model.sol('sol55').clearSolutionData;
model.sol('sol56').clearSolutionData;
model.sol('sol57').clearSolutionData;
model.sol('sol58').clearSolutionData;
model.sol('sol59').clearSolutionData;
model.sol('sol60').clearSolutionData;
model.sol('sol61').clearSolutionData;
model.sol('sol62').clearSolutionData;
model.sol('sol63').clearSolutionData;
model.sol('sol64').clearSolutionData;
model.sol('sol65').clearSolutionData;
model.sol('sol66').clearSolutionData;
model.sol('sol67').clearSolutionData;
model.sol('sol68').clearSolutionData;
model.sol('sol69').clearSolutionData;
model.sol('sol70').clearSolutionData;
model.sol('sol71').clearSolutionData;
model.sol('sol72').clearSolutionData;
model.sol('sol73').clearSolutionData;
model.sol('sol74').clearSolutionData;
model.sol('sol75').clearSolutionData;
model.sol('sol76').clearSolutionData;
model.sol('sol77').clearSolutionData;
model.sol('sol78').clearSolutionData;
model.sol('sol79').clearSolutionData;
model.sol('sol80').clearSolutionData;
model.sol('sol81').clearSolutionData;
model.sol('sol82').clearSolutionData;
model.sol('sol83').clearSolutionData;
model.sol('sol84').clearSolutionData;
model.sol('sol85').clearSolutionData;
model.sol('sol86').clearSolutionData;
model.sol('sol87').clearSolutionData;
model.sol('sol88').clearSolutionData;
model.sol('sol89').clearSolutionData;
model.sol('sol90').clearSolutionData;
model.sol('sol91').clearSolutionData;
model.sol('sol92').clearSolutionData;
model.sol('sol93').clearSolutionData;
model.sol('sol94').clearSolutionData;
model.sol('sol95').clearSolutionData;
model.sol('sol96').clearSolutionData;
model.sol('sol97').clearSolutionData;
model.sol('sol98').clearSolutionData;
model.sol('sol99').clearSolutionData;
model.sol('sol100').clearSolutionData;
model.sol('sol101').clearSolutionData;
model.sol('sol102').clearSolutionData;
model.sol('sol103').clearSolutionData;
model.sol('sol104').clearSolutionData;
model.sol('sol105').clearSolutionData;
model.sol('sol106').clearSolutionData;
model.sol('sol107').clearSolutionData;
model.sol('sol108').clearSolutionData;
model.sol('sol109').clearSolutionData;
model.sol('sol110').clearSolutionData;
model.sol('sol111').clearSolutionData;
model.sol('sol112').clearSolutionData;
model.sol('sol113').clearSolutionData;
model.sol('sol114').clearSolutionData;
model.sol('sol115').clearSolutionData;
model.sol('sol116').clearSolutionData;
model.sol('sol117').clearSolutionData;
model.sol('sol118').clearSolutionData;
model.sol('sol119').clearSolutionData;
model.sol('sol120').clearSolutionData;
model.sol('sol121').clearSolutionData;
model.sol('sol122').clearSolutionData;
model.sol('sol123').clearSolutionData;
model.sol('sol124').clearSolutionData;
model.sol('sol125').clearSolutionData;
model.sol('sol126').clearSolutionData;
model.sol('sol127').clearSolutionData;
model.sol('sol128').clearSolutionData;
model.sol('sol129').clearSolutionData;
model.sol('sol130').clearSolutionData;
model.sol('sol131').clearSolutionData;
model.sol('sol132').clearSolutionData;
model.sol('sol133').clearSolutionData;
model.sol('sol134').clearSolutionData;
model.sol('sol135').clearSolutionData;
model.sol('sol136').clearSolutionData;
model.sol('sol137').clearSolutionData;
model.sol('sol138').clearSolutionData;
model.sol('sol139').clearSolutionData;
model.sol('sol140').clearSolutionData;
model.sol('sol141').clearSolutionData;
model.sol('sol142').clearSolutionData;
model.sol('sol143').clearSolutionData;
model.sol('sol144').clearSolutionData;
model.sol('sol145').clearSolutionData;
model.sol('sol146').clearSolutionData;
model.sol('sol147').clearSolutionData;
model.sol('sol148').clearSolutionData;
model.sol('sol149').clearSolutionData;
model.sol('sol150').clearSolutionData;
model.sol('sol151').clearSolutionData;
model.sol('sol152').clearSolutionData;
model.sol('sol153').clearSolutionData;
model.sol('sol154').clearSolutionData;
model.sol('sol155').clearSolutionData;
model.sol('sol156').clearSolutionData;
model.sol('sol157').clearSolutionData;
model.sol('sol158').clearSolutionData;
model.sol('sol159').clearSolutionData;
model.sol('sol160').clearSolutionData;
model.sol('sol161').clearSolutionData;
model.sol('sol162').clearSolutionData;
model.sol('sol163').clearSolutionData;
model.sol('sol164').clearSolutionData;
model.sol('sol165').clearSolutionData;
model.sol('sol166').clearSolutionData;
model.sol('sol167').clearSolutionData;
model.sol('sol168').clearSolutionData;
model.sol('sol169').clearSolutionData;
model.sol('sol170').clearSolutionData;
model.sol('sol171').clearSolutionData;
model.sol('sol172').clearSolutionData;
model.sol('sol173').clearSolutionData;
model.sol('sol174').clearSolutionData;
model.sol('sol175').clearSolutionData;
model.sol('sol176').clearSolutionData;
model.sol('sol177').clearSolutionData;
model.sol('sol178').clearSolutionData;
model.sol('sol179').clearSolutionData;
model.sol('sol180').clearSolutionData;
model.sol('sol181').clearSolutionData;
model.sol('sol182').clearSolutionData;
model.sol('sol183').clearSolutionData;
model.sol('sol184').clearSolutionData;
model.sol('sol185').clearSolutionData;
model.sol('sol186').clearSolutionData;
model.sol('sol187').clearSolutionData;
model.sol('sol188').clearSolutionData;
model.sol('sol189').clearSolutionData;
model.sol('sol190').clearSolutionData;

model.label('vortex_lattice_formation_in_a_rotating_bose_einstein_condensate.mph');

model.modelNode.label('Components');

out = model;
