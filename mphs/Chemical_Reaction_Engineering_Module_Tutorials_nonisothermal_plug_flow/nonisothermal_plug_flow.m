function out = model
%
% nonisothermal_plug_flow.m
%
% Model exported on May 26 2025, 21:27 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Chemical_Reaction_Engineering_Module/Tutorials');

model.modelNode.create('comp1', true);

model.physics.create('re', 'ReactionEng');
model.physics('re').model('comp1');

model.study.create('std1');
model.study('std1').create('spf', 'StationaryPlugflow');
model.study('std1').feature('spf').set('solnum', 'auto');
model.study('std1').feature('spf').set('notsolnum', 'auto');
model.study('std1').feature('spf').set('outputmap', {});
model.study('std1').feature('spf').setSolveFor('/physics/re', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('v_inlet', '2[m^3/s]', 'Inlet volumetric flow');
model.param.set('A_frac', '1[mol/mol]', 'Inlet mole fraction A');
model.param.set('cinlet_A', '18.8[mol/m^3]', 'Inlet concentration A');
model.param.set('Finlet_tot', 'cinlet_A*v_inlet/A_frac', 'Inlet total flow');
model.param.set('Finlet_K', '0[mol/s]', 'Inlet molar flow K');
model.param.set('Finlet_M', '0[mol/s]', 'Inlet molar flow M');
model.param.set('Finlet_A', 'cinlet_A*v_inlet', 'Inlet molar flow A');
model.param.set('Finlet_N2', 'Finlet_tot-Finlet_A', 'Inlet molar flow N2');
model.param.set('P_reactor', '(cinlet_A/A_frac)*R_const*T_inlet', 'Reactor pressure');
model.param.set('Af_reaction', '8.2e14', 'Forward frequency factor');
model.param.set('Ef_reaction', '284.5e3[J/mol]', 'Forward activation energy');
model.param.set('Ua', '16500[J/(m^3*s*K)]', 'Heat transfer parameter');
model.param.set('T_inlet', '1035[K]', 'Inlet temperature');
model.param.set('T_x', '1150[K]', 'Temperature, heat exchanger medium');

model.physics('re').prop('reactor').set('reactor', 'plugflow');
model.physics('re').prop('energybalance').set('energybalance', 'include');
model.physics('re').prop('mixture').set('p', 'P_reactor');
model.physics('re').create('rch1', 'ReactionChem', -1);
model.physics('re').feature('rch1').set('formula', 'A=>K+M');
model.physics('re').feature('rch1').set('useArrhenius', true);
model.physics('re').feature('rch1').set('Af', 'Af_reaction');
model.physics('re').feature('rch1').set('Ef', 'Ef_reaction');
model.physics('re').create('spec1', 'SpeciesChem', -1);
model.physics('re').feature('spec1').set('specName', 'N2');
model.physics('re').feature('inits1').set('T0plug', 'T_inlet');
model.physics('re').feature('inits1').setIndex('VolumetricSpecies', 'A', 0, 0);
model.physics('re').feature('inits1').setIndex('F0', 'Finlet_A', 0, 0);
model.physics('re').feature('inits1').setIndex('VolumetricSpecies', 'N2', 3, 0);
model.physics('re').feature('inits1').setIndex('F0', 'Finlet_N2', 3, 0);
model.physics('re').prop('chemkin').set('thermo', 'nonisothermal_plug_flow_thermo.txt');
model.physics('re').feature('A').set('M', '0.058080040000000006');
model.physics('re').feature('A').set('speciesEnthalpy', 'NASA');
model.physics('re').feature('A').set('Tlo', '300.0');
model.physics('re').feature('A').set('Tmid', '1000.0');
model.physics('re').feature('A').set('Thi', '4000.0');
model.physics('re').feature('A').set('SpeciesThermoaLo1', '1.5848079');
model.physics('re').feature('A').set('SpeciesThermoaLo2', '0.027413605');
model.physics('re').feature('A').set('SpeciesThermoaLo3', '-9.1426603E-6');
model.physics('re').feature('A').set('SpeciesThermoaLo4', '-6.6768869E-10');
model.physics('re').feature('A').set('SpeciesThermoaLo5', '3.4781512E-13');
model.physics('re').feature('A').set('SpeciesThermoaLo6', '-26678.575');
model.physics('re').feature('A').set('SpeciesThermoaLo7', '18.843809');
model.physics('re').feature('A').set('SpeciesThermoaHi1', '4.261922');
model.physics('re').feature('A').set('SpeciesThermoaHi2', '0.023919538');
model.physics('re').feature('A').set('SpeciesThermoaHi3', '-1.0714477E-5');
model.physics('re').feature('A').set('SpeciesThermoaHi4', '2.249689E-9');
model.physics('re').feature('A').set('SpeciesThermoaHi5', '-1.8079303E-13');
model.physics('re').feature('A').set('SpeciesThermoaHi6', '-27708.34');
model.physics('re').feature('A').set('SpeciesThermoaHi7', '3.7906279');
model.physics('re').feature('K').set('M', '0.042037279999999996');
model.physics('re').feature('K').set('speciesEnthalpy', 'NASA');
model.physics('re').feature('K').set('Tlo', '300.0');
model.physics('re').feature('K').set('Tmid', '1000.0');
model.physics('re').feature('K').set('Thi', '4000.0');
model.physics('re').feature('K').set('SpeciesThermoaLo1', '1.5410946');
model.physics('re').feature('K').set('SpeciesThermoaLo2', '0.021513643');
model.physics('re').feature('K').set('SpeciesThermoaLo3', '-2.575013E-5');
model.physics('re').feature('K').set('SpeciesThermoaLo4', '1.8486377E-8');
model.physics('re').feature('K').set('SpeciesThermoaLo5', '-5.5939702E-12');
model.physics('re').feature('K').set('SpeciesThermoaLo6', '-6955.7078');
model.physics('re').feature('K').set('SpeciesThermoaLo7', '14.808619');
model.physics('re').feature('K').set('SpeciesThermoaHi1', '4.7307523');
model.physics('re').feature('K').set('SpeciesThermoaHi2', '0.0084849084');
model.physics('re').feature('K').set('SpeciesThermoaHi3', '-3.7289848E-6');
model.physics('re').feature('K').set('SpeciesThermoaHi4', '7.716621E-10');
model.physics('re').feature('K').set('SpeciesThermoaHi5', '-6.1322345E-14');
model.physics('re').feature('K').set('SpeciesThermoaHi6', '-7649.2303');
model.physics('re').feature('K').set('SpeciesThermoaHi7', '-0.68485049');
model.physics('re').feature('M').set('M', '0.016042760000000003');
model.physics('re').feature('M').set('speciesEnthalpy', 'NASA');
model.physics('re').feature('M').set('Tlo', '300.0');
model.physics('re').feature('M').set('Tmid', '1000.0');
model.physics('re').feature('M').set('Thi', '4000.0');
model.physics('re').feature('M').set('SpeciesThermoaLo1', '3.8717898');
model.physics('re').feature('M').set('SpeciesThermoaLo2', '-0.0042480466');
model.physics('re').feature('M').set('SpeciesThermoaLo3', '2.4540181E-5');
model.physics('re').feature('M').set('SpeciesThermoaLo4', '-2.1780766E-8');
model.physics('re').feature('M').set('SpeciesThermoaLo5', '6.3010622E-12');
model.physics('re').feature('M').set('SpeciesThermoaLo6', '-10144.425');
model.physics('re').feature('M').set('SpeciesThermoaLo7', '0.66008135');
model.physics('re').feature('M').set('SpeciesThermoaHi1', '0.47238333');
model.physics('re').feature('M').set('SpeciesThermoaHi2', '0.012680758');
model.physics('re').feature('M').set('SpeciesThermoaHi3', '-5.5093741E-6');
model.physics('re').feature('M').set('SpeciesThermoaHi4', '1.1295575E-9');
model.physics('re').feature('M').set('SpeciesThermoaHi5', '-8.9103779E-14');
model.physics('re').feature('M').set('SpeciesThermoaHi6', '-9642.45');
model.physics('re').feature('M').set('SpeciesThermoaHi7', '16.19909');
model.physics('re').feature('N2').set('M', '0.0280134');
model.physics('re').feature('N2').set('speciesEnthalpy', 'NASA');
model.physics('re').feature('N2').set('Tlo', '300.0');
model.physics('re').feature('N2').set('Tmid', '1000.0');
model.physics('re').feature('N2').set('Thi', '4000.0');
model.physics('re').feature('N2').set('SpeciesThermoaLo1', '3.6962069');
model.physics('re').feature('N2').set('SpeciesThermoaLo2', '-0.0012983164');
model.physics('re').feature('N2').set('SpeciesThermoaLo3', '2.4640713E-6');
model.physics('re').feature('N2').set('SpeciesThermoaLo4', '-9.3801238E-10');
model.physics('re').feature('N2').set('SpeciesThermoaLo5', '-3.703642E-14');
model.physics('re').feature('N2').set('SpeciesThermoaLo6', '-1063.103');
model.physics('re').feature('N2').set('SpeciesThermoaLo7', '2.2199845');
model.physics('re').feature('N2').set('SpeciesThermoaHi1', '2.7292633');
model.physics('re').feature('N2').set('SpeciesThermoaHi2', '0.0017776002');
model.physics('re').feature('N2').set('SpeciesThermoaHi3', '-7.6185598E-7');
model.physics('re').feature('N2').set('SpeciesThermoaHi4', '1.5386678E-10');
model.physics('re').feature('N2').set('SpeciesThermoaHi5', '-1.1961307E-14');
model.physics('re').feature('N2').set('SpeciesThermoaHi6', '-836.7934');
model.physics('re').feature('N2').set('SpeciesThermoaHi7', '7.0662127');
model.physics('re').prop('chemkin').set('chemkinNo', true);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('X_A', '(re.F0_A-re.F_A)/re.F0_A*100');
model.variable('var1').descr('X_A', 'Conversion, A');

model.study('std1').feature('spf').set('tlist', 'range(0,0.05,5)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'spf');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'spf');
model.sol('sol1').create('pf1', 'Plugflow');
model.sol('sol1').feature('pf1').set('tlist', 'range(0,0.05,5)');
model.sol('sol1').feature('pf1').set('plot', 'off');
model.sol('sol1').feature('pf1').set('plotgroup', 'Default');
model.sol('sol1').feature('pf1').set('plotfreq', 'tout');
model.sol('sol1').feature('pf1').set('probesel', 'all');
model.sol('sol1').feature('pf1').set('probes', {});
model.sol('sol1').feature('pf1').set('probefreq', 'tsteps');
model.sol('sol1').feature('pf1').set('tout', 'tsteps');
model.sol('sol1').feature('pf1').set('rtol', 1.0E-5);
model.sol('sol1').feature('pf1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('pf1').set('reacf', true);
model.sol('sol1').feature('pf1').set('storeudot', true);
model.sol('sol1').feature('pf1').set('endtimeinterpolation', true);
model.sol('sol1').feature('pf1').set('consistent', 'off');
model.sol('sol1').feature('pf1').set('control', 'spf');
model.sol('sol1').feature('pf1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('pf1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('pf1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('pf1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('pf1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').create('glob1', 'Global');
model.result('pg1').feature('glob1').set('expr', {'re.F_A' 're.F_K' 're.F_M' 're.F_N2'});
model.result('pg1').feature('glob1').set('descr', {'Molar flow rate' 'Molar flow rate' 'Molar flow rate' 'Molar flow rate'});
model.result('pg1').feature('glob1').set('unit', {'' '' '' ''});
model.result('pg1').feature('glob1').set('expr', {'re.F_A' 're.F_K' 're.F_M' 're.F_N2'});
model.result('pg1').feature('glob1').set('descr', {'Molar flow rate' 'Molar flow rate' 'Molar flow rate' 'Molar flow rate'});
model.result('pg1').set('xlabel', 'Reactor volume (m<sup>3</sup>)');
model.result('pg1').label('Molar Flow Rate (re)');
model.result('pg1').feature('glob1').set('xdatasolnumtype', 'level1');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('expr', {'re.F_A' 're.F_K' 're.F_M' 're.F_N2'});
model.result('pg2').feature('glob1').set('descr', {'Molar flow rate' 'Molar flow rate' 'Molar flow rate' 'Molar flow rate'});
model.result('pg2').feature('glob1').set('unit', {''});
model.result('pg2').feature('glob1').set('expr', {'re.T'});
model.result('pg2').feature('glob1').set('descr', {'Temperature'});
model.result('pg2').set('xlabel', 'Reactor volume (m<sup>3</sup>)');
model.result('pg2').label('Temperature (re)');
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'level1');
model.result('pg1').run;

model.sol('sol1').copySolution('sol2');
model.sol('sol2').label('Adiabatic');

model.physics('re').prop('energybalance').set('Qextplug', 'Ua*(T_x-re.T)');

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('pf1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'spf');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'spf');
model.sol('sol1').create('pf1', 'Plugflow');
model.sol('sol1').feature('pf1').set('tlist', 'range(0,0.05,5)');
model.sol('sol1').feature('pf1').set('plot', 'off');
model.sol('sol1').feature('pf1').set('plotgroup', 'pg1');
model.sol('sol1').feature('pf1').set('plotfreq', 'tout');
model.sol('sol1').feature('pf1').set('probesel', 'all');
model.sol('sol1').feature('pf1').set('probes', {});
model.sol('sol1').feature('pf1').set('probefreq', 'tsteps');
model.sol('sol1').feature('pf1').set('tout', 'tsteps');
model.sol('sol1').feature('pf1').set('rtol', 1.0E-5);
model.sol('sol1').feature('pf1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('pf1').set('reacf', true);
model.sol('sol1').feature('pf1').set('storeudot', true);
model.sol('sol1').feature('pf1').set('endtimeinterpolation', true);
model.sol('sol1').feature('pf1').set('consistent', 'off');
model.sol('sol1').feature('pf1').set('control', 'spf');
model.sol('sol1').feature('pf1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('pf1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('pf1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('pf1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('pf1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result('pg1').run;

model.sol('sol1').copySolution('sol3');
model.sol('sol3').label('With heat exchange');

model.physics('re').prop('energybalance').set('Qextplug', 0);

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'v_inlet', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm^3/s', 0);
model.study('std1').feature('param').setIndex('pname', 'v_inlet', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm^3/s', 0);
model.study('std1').feature('param').setIndex('pname', 'A_frac', 0);
model.study('std1').feature('param').setIndex('plistarr', '1 0.5 0.1', 0);

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('pf1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'spf');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'spf');
model.sol('sol1').create('pf1', 'Plugflow');
model.sol('sol1').feature('pf1').set('tlist', 'range(0,0.05,5)');
model.sol('sol1').feature('pf1').set('plot', 'off');
model.sol('sol1').feature('pf1').set('plotgroup', 'pg1');
model.sol('sol1').feature('pf1').set('plotfreq', 'tout');
model.sol('sol1').feature('pf1').set('probesel', 'all');
model.sol('sol1').feature('pf1').set('probes', {});
model.sol('sol1').feature('pf1').set('probefreq', 'tsteps');
model.sol('sol1').feature('pf1').set('tout', 'tsteps');
model.sol('sol1').feature('pf1').set('rtol', 1.0E-5);
model.sol('sol1').feature('pf1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('pf1').set('reacf', true);
model.sol('sol1').feature('pf1').set('storeudot', true);
model.sol('sol1').feature('pf1').set('endtimeinterpolation', true);
model.sol('sol1').feature('pf1').set('consistent', 'off');
model.sol('sol1').feature('pf1').set('control', 'spf');
model.sol('sol1').feature('pf1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('pf1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('pf1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('pf1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('pf1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'A_frac'});
model.batch('p1').set('plistarr', {'1 0.5 0.1'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol4');
model.sol('sol4').study('std1');
model.sol('sol4').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol4');
model.batch('p1').run('compute');

model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').set('data', 'dset4');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('expr', {'re.F_A' 're.F_K' 're.F_M' 're.F_N2'});
model.result('pg3').feature('glob1').set('descr', {'Molar flow rate' 'Molar flow rate' 'Molar flow rate' 'Molar flow rate'});
model.result('pg3').feature('glob1').set('unit', {'' '' '' ''});
model.result('pg3').feature('glob1').set('expr', {'re.F_A' 're.F_K' 're.F_M' 're.F_N2'});
model.result('pg3').feature('glob1').set('descr', {'Molar flow rate' 'Molar flow rate' 'Molar flow rate' 'Molar flow rate'});
model.result('pg3').set('xlabel', 'Reactor volume (m<sup>3</sup>)');
model.result('pg3').label('Molar Flow Rate (re) 1');
model.result('pg3').feature('glob1').set('xdatasolnumtype', 'level1');
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').set('data', 'dset4');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('expr', {'re.F_A' 're.F_K' 're.F_M' 're.F_N2'});
model.result('pg4').feature('glob1').set('descr', {'Molar flow rate' 'Molar flow rate' 'Molar flow rate' 'Molar flow rate'});
model.result('pg4').feature('glob1').set('unit', {''});
model.result('pg4').feature('glob1').set('expr', {'re.T'});
model.result('pg4').feature('glob1').set('descr', {'Temperature'});
model.result('pg4').set('xlabel', 'Reactor volume (m<sup>3</sup>)');
model.result('pg4').label('Temperature (re) 1');
model.result('pg4').feature('glob1').set('xdatasolnumtype', 'level1');
model.result('pg3').run;

model.sol('sol4').copySolution('sol8');
model.sol('sol8').label('With inert');

model.result('pg2').run;
model.result('pg2').set('titletype', 'none');
model.result('pg2').set('legendpos', 'middleright');
model.result('pg2').run;
model.result('pg2').feature('glob1').set('data', 'dset2');
model.result('pg2').feature('glob1').set('linewidth', 2);
model.result('pg2').feature('glob1').set('legendmethod', 'manual');
model.result('pg2').feature('glob1').setIndex('legends', 'Adiabatic', 0);
model.result('pg2').feature.duplicate('glob2', 'glob1');
model.result('pg2').run;
model.result('pg2').feature('glob2').set('data', 'dset3');
model.result('pg2').feature('glob2').setIndex('legends', 'With heat exchange', 0);
model.result('pg2').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg3').run;
model.result('pg3').label('Reaction rate (re)');
model.result('pg3').set('titletype', 'none');
model.result('pg3').create('glob2', 'Global');
model.result('pg3').feature('glob2').set('markerpos', 'datapoints');
model.result('pg3').feature('glob2').set('linewidth', 'preference');
model.result('pg3').run;
model.result('pg3').feature('glob1').set('data', 'dset2');
model.result('pg3').feature('glob1').set('expr', {'re.r_1'});
model.result('pg3').feature('glob1').set('descr', {'Reaction rate'});
model.result('pg3').feature('glob1').set('unit', {'mol/(m^3*s)'});
model.result('pg3').feature('glob1').set('linewidth', 2);
model.result('pg3').feature('glob1').set('legendmethod', 'manual');
model.result('pg3').feature('glob1').setIndex('legends', 'Adiabatic', 0);
model.result('pg3').run;
model.result('pg3').feature('glob2').set('data', 'dset3');
model.result('pg3').feature('glob2').set('expr', {'re.r_1'});
model.result('pg3').feature('glob2').set('descr', {'Reaction rate'});
model.result('pg3').feature('glob2').set('unit', {'mol/(m^3*s)'});
model.result('pg3').feature('glob2').set('linewidth', 2);
model.result('pg3').feature('glob2').set('legendmethod', 'manual');
model.result('pg3').feature('glob2').setIndex('legends', 'With heat exchange', 0);
model.result('pg3').run;
model.result('pg1').run;
model.result('pg1').label('Conversion A (re)');
model.result('pg1').set('titletype', 'none');
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'Conversion A (%)');
model.result('pg1').set('legendpos', 'middleright');
model.result('pg1').run;
model.result('pg1').feature('glob1').set('data', 'dset2');
model.result('pg1').feature('glob1').set('expr', {'X_A'});
model.result('pg1').feature('glob1').set('descr', {'Conversion, A'});
model.result('pg1').feature('glob1').set('unit', {'1'});
model.result('pg1').feature('glob1').set('linewidth', 2);
model.result('pg1').feature('glob1').set('legendmethod', 'manual');
model.result('pg1').feature('glob1').setIndex('legends', 'Adiabatic', 0);
model.result('pg1').feature.duplicate('glob2', 'glob1');
model.result('pg1').run;
model.result('pg1').feature('glob2').set('data', 'dset3');
model.result('pg1').feature('glob2').setIndex('legends', 'With heat exchange', 0);
model.result('pg1').run;
model.result('pg5').run;
model.result('pg5').label('Conversion A with inert (re)');
model.result('pg5').set('titletype', 'none');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'Reactor volume (m<sup>3</sup>)');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Conversion A (%)');
model.result('pg5').set('legendpos', 'lowerright');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').set('data', 'dset5');
model.result('pg5').feature('glob1').set('expr', {'X_A'});
model.result('pg5').feature('glob1').set('descr', {'Conversion, A'});
model.result('pg5').feature('glob1').set('unit', {'1'});
model.result('pg5').feature('glob1').set('linewidth', 2);
model.result('pg5').feature('glob1').set('legendmethod', 'evaluated');
model.result('pg5').feature('glob1').set('legendpattern', 'eval(A_frac*100) mol% A at inlet');
model.result('pg5').run;
model.result('pg4').run;
model.result.remove('pg4');
model.result('pg5').run;

model.title('Nonisothermal Plug-Flow Reactor');

model.description('The predefined plug-flow reactor type in the Reaction Engineering interface is used to model the nonisothermal cracking of acetone. Process considerations are investigated when the reaction is run adiabatically, when a heat exchanger supplies energy to the reactor, and with an inert present.');

model.label('nonisothermal_plug_flow.mph');

model.modelNode.label('Components');

out = model;
