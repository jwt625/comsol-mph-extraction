function out = model
%
% biased_resonator_2d_pull_in_pull_out.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/MEMS_Module/Actuators');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics('es').feature('ccn1').set('materialType', {'solid'});
model.physics('es').feature('ccn1').label('Charge Conservation, Solid');

model.multiphysics.create('eme1', 'ElectromechanicalForces', 'geom1', 2);
model.multiphysics('eme1').set('Solid_physics', 'solid');
model.multiphysics('eme1').set('Electrostatics_physics', 'es');

model.common.create('free1', 'DeformingDomain', 'comp1');
model.common('free1').set('smoothingType', 'hyperelastic');
model.common('free1').selection.set([]);
model.common.create('sym1', 'Symmetry', 'comp1');
model.common('sym1').selection.set([]);

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/physics/es', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/eme1', true);

model.param.set('Vdc', '35[V]');
model.param.descr('Vdc', 'DC bias voltage');
model.param.set('l_b', '22.5[um]');
model.param.descr('l_b', 'Length of beam');
model.param.set('t_b', '2[um]');
model.param.descr('t_b', 'Thickness of beam');
model.param.set('l_e', '10[um]');
model.param.descr('l_e', 'Length of electrode');
model.param.set('gap', '0.1985[um]');
model.param.descr('gap', 'Air gap');

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'l_b' 't_b'});
model.geom('geom1').feature('r1').set('pos', {'-l_b' 'gap'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'l_b' 'gap'});
model.geom('geom1').feature('r2').set('pos', {'-l_b' '0'});
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', {'l_e' 'gap+t_b'});
model.geom('geom1').feature('r3').set('pos', {'-l_e' '0'});
model.geom('geom1').run('r3');
model.geom('geom1').create('mir1', 'Mirror');
model.geom('geom1').feature('mir1').selection('input').set({'r1' 'r2' 'r3'});
model.geom('geom1').feature('mir1').set('keep', true);
model.geom('geom1').runPre('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').label('Si - Polycrystalline silicon');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat1').set('diffuse', 'custom');
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat1').set('ambient', 'custom');
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.7);
model.material('mat1').set('roughness', 0.5);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '678[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'4.5' '0' '0' '0' '4.5' '0' '0' '0' '4.5'});
model.material('mat1').propertyGroup('def').set('density', '2320[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'34[W/(m*K)]' '0' '0' '0' '34[W/(m*K)]' '0' '0' '0' '34[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '160e9[Pa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.22');

model.geom('geom1').run;

model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat2').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat2').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat2').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat2').label('Air');
model.material('mat2').set('family', 'air');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat2').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat2').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat2').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat2').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat2').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('molarmass', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat2').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material('mat2').propertyGroup('def').addInput('pressure');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat2').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat2').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat2').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat2').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat2').propertyGroup('idealGas').addInput('temperature');
model.material('mat2').propertyGroup('idealGas').addInput('pressure');
model.material('mat2').materialType('nonSolid');
model.material('mat2').selection.set([1 3 5 7]);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(2);
model.selection('sel1').label('Air');
model.selection('sel1').set([1 3 5 7]);

model.material('mat2').selection.named('sel1');

model.physics('solid').selection.set([2 4 6 8]);
model.physics('es').create('ccn2', 'ChargeConservation', 2);
model.physics('es').feature('ccn2').selection.named('sel1');

model.common('free1').selection.named('sel1');

model.physics('solid').create('fix1', 'Fixed', 1);
model.physics('solid').feature('fix1').selection.set([3 22]);
model.physics('es').create('term1', 'DomainTerminal', 2);
model.physics('es').feature('term1').selection.set([2 4 6 8]);
model.physics('es').feature('term1').set('TerminalType', 'Voltage');
model.physics('es').feature('term1').set('V0', 0);
model.physics('es').create('pot1', 'ElectricPotential', 1);
model.physics('es').feature('pot1').set('V0', 'Vdc');
model.physics('es').feature('pot1').selection.set([7 12]);

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([5 10 15 20]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 15);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([1 3]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 10);
model.mesh('mesh1').run;

model.study('std1').label('Stationary');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 3 5 7]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*4.505367246129886E-5');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*4.505367246129886E-5');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Electric Potential');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Displacement Field');
model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subdtech', 'const');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subjtech', 'onevery');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').label('Spatial Mesh Displacement');
model.sol('sol1').feature('s1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol1').feature('s1').feature('se1').set('segaaccdim', 5);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').label('Displacement (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'solid.disp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').set('resolution', 'normal');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Electric Potential (es)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond2/pg1');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solutionparams', 'parent');
model.result('pg2').feature('surf1').set('expr', 'V');
model.result('pg2').feature('surf1').set('colortable', 'Dipole');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature.create('str1', 'Streamline');
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('solutionparams', 'parent');
model.result('pg2').feature('str1').set('expr', {'es.Ex' 'es.Ey'});
model.result('pg2').feature('str1').set('titletype', 'none');
model.result('pg2').feature('str1').set('posmethod', 'uniform');
model.result('pg2').feature('str1').set('udist', 0.02);
model.result('pg2').feature('str1').set('maxlen', 0.4);
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('inheritcolor', false);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('data', 'parent');
model.result('pg2').feature('str1').selection.geom('geom1', 1);
model.result('pg2').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22]);
model.result('pg2').feature('str1').set('inheritplot', 'surf1');
model.result('pg2').feature('str1').feature.create('col1', 'Color');
model.result('pg2').feature('str1').feature('col1').set('expr', 'V');
model.result('pg2').feature('str1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg2').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg2').feature('str1').feature.create('filt1', 'Filter');
model.result('pg2').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Electric Field Norm (es)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond2/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg3').feature('surf1').set('expr', 'es.normE');
model.result('pg3').feature('surf1').set('colortable', 'Prism');
model.result('pg3').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg3').feature('surf1').set('colorcalibration', -0.8);
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature.create('str1', 'Streamline');
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('solutionparams', 'parent');
model.result('pg3').feature('str1').set('expr', {'es.Ex' 'es.Ey'});
model.result('pg3').feature('str1').set('titletype', 'none');
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('udist', 0.02);
model.result('pg3').feature('str1').set('maxlen', 0.4);
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('inheritcolor', false);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('data', 'parent');
model.result('pg3').feature('str1').selection.geom('geom1', 1);
model.result('pg3').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22]);
model.result('pg3').feature('str1').set('inheritplot', 'surf1');
model.result('pg3').feature('str1').feature.create('col1', 'Color');
model.result('pg3').feature('str1').feature('col1').set('expr', 'es.normE');
model.result('pg3').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg3').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg3').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg3').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg3').feature('str1').feature.create('filt1', 'Filter');
model.result('pg3').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').label('Moving Mesh');
model.result('pg4').create('mesh1', 'Mesh');
model.result('pg4').feature('mesh1').set('meshdomain', 'surface');
model.result('pg4').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg4').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg4').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg4').feature('mesh1').feature('sel1').selection.set([1 2 3 4 5 6 7 8]);
model.result('pg4').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg4').feature('mesh1').set('qualexpr', 'comp1.spatial.relVol');
model.result('pg4').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg1').run;
model.result('pg1').label('Biased Displacement');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').feature('surf1').create('sel1', 'Selection');
model.result('pg2').feature('surf1').feature('sel1').selection.named('sel1');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('str1').set('udist', 0.005);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').feature('str1').set('udist', 0.005);
model.result('pg3').run;
model.result('pg4').run;
model.result.remove('pg4');

model.title(['Stationary Analysis of a Biased Resonator ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' 2D']);

model.description('An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the deformation of the resonator is computed with an applied DC bias.');

model.label('biased_resonator_2d_basic.mph');

model.param.set('yset', '100[nm]');
model.param.descr('yset', 'Set point y-coordinate');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 0);
model.cpl('intop1').selection.set([8]);

model.physics('es').feature('pot1').set('V0', 'VdcSP[V]');
model.physics('es').create('ge1', 'GlobalEquations', -1);
model.physics('es').feature('ge1').setIndex('name', 'VdcSP', 0, 0);
model.physics('es').feature('ge1').setIndex('equation', '(intop1(y)-yset)/yset', 0, 0);

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/solid', true);
model.study('std2').feature('stat').setSolveFor('/physics/es', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/eme1', true);
model.study('std2').label('Pull In');
model.study('std2').feature('stat').set('useparam', true);
model.study('std2').feature('stat').setIndex('pname', 'Vdc', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'V', 0);
model.study('std2').feature('stat').setIndex('pname', 'Vdc', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'V', 0);
model.study('std2').feature('stat').setIndex('pname', 'yset', 0);
model.study('std2').feature('stat').setIndex('plistarr', 'range(115[nm],2[nm],140[nm])', 0);

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 3 5 7]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*4.505367246129886E-5');
model.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-2*4.505367246129886E-5');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol2').feature('s1').set('control', 'stat');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('seDef', 'Segregated');
model.sol('sol2').feature('s1').create('se1', 'Segregated');
model.sol('sol2').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V' 'comp1_ODE1'});
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').label('Electric Potential');
model.sol('sol2').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u'});
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').label('Displacement Field');
model.sol('sol2').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});
model.sol('sol2').feature('s1').feature('se1').feature('ss3').set('subdtech', 'const');
model.sol('sol2').feature('s1').feature('se1').feature('ss3').set('subjtech', 'onevery');
model.sol('sol2').feature('s1').feature('se1').feature('ss3').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature('se1').feature('ss3').label('Spatial Mesh Displacement');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('s1').feature.remove('seDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'hnlin');
model.sol('sol2').runAll;

model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 13, 0);
model.result('pg4').set('defaultPlotID', 'displacement');
model.result('pg4').label('Displacement (solid)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'solid.disp'});
model.result('pg4').feature('surf1').set('threshold', 'manual');
model.result('pg4').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg4').feature('surf1').set('colortable', 'Rainbow');
model.result('pg4').feature('surf1').set('colortabletrans', 'none');
model.result('pg4').feature('surf1').set('colorscalemode', 'linear');
model.result('pg4').feature('surf1').set('resolution', 'normal');
model.result('pg4').feature('surf1').set('colortable', 'SpectrumLight');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Electric Potential (es) 1');
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 13, 0);
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('showlegendsmaxmin', true);
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 13, 0);
model.result('pg5').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond2/pg1');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('expr', 'V');
model.result('pg5').feature('surf1').set('colortable', 'Dipole');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg5').feature.create('str1', 'Streamline');
model.result('pg5').feature('str1').set('showsolutionparams', 'on');
model.result('pg5').feature('str1').set('solutionparams', 'parent');
model.result('pg5').feature('str1').set('expr', {'es.Ex' 'es.Ey'});
model.result('pg5').feature('str1').set('titletype', 'none');
model.result('pg5').feature('str1').set('posmethod', 'uniform');
model.result('pg5').feature('str1').set('udist', 0.02);
model.result('pg5').feature('str1').set('maxlen', 0.4);
model.result('pg5').feature('str1').set('maxtime', Inf);
model.result('pg5').feature('str1').set('inheritcolor', false);
model.result('pg5').feature('str1').set('showsolutionparams', 'on');
model.result('pg5').feature('str1').set('maxtime', Inf);
model.result('pg5').feature('str1').set('showsolutionparams', 'on');
model.result('pg5').feature('str1').set('maxtime', Inf);
model.result('pg5').feature('str1').set('showsolutionparams', 'on');
model.result('pg5').feature('str1').set('maxtime', Inf);
model.result('pg5').feature('str1').set('showsolutionparams', 'on');
model.result('pg5').feature('str1').set('maxtime', Inf);
model.result('pg5').feature('str1').set('data', 'parent');
model.result('pg5').feature('str1').selection.geom('geom1', 1);
model.result('pg5').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22]);
model.result('pg5').feature('str1').set('inheritplot', 'surf1');
model.result('pg5').feature('str1').feature.create('col1', 'Color');
model.result('pg5').feature('str1').feature('col1').set('expr', 'V');
model.result('pg5').feature('str1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg5').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg5').feature('str1').feature.create('filt1', 'Filter');
model.result('pg5').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').label('Electric Field Norm (es) 1');
model.result('pg6').set('data', 'dset2');
model.result('pg6').setIndex('looplevel', 13, 0);
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('showlegendsmaxmin', true);
model.result('pg6').set('data', 'dset2');
model.result('pg6').setIndex('looplevel', 13, 0);
model.result('pg6').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond2/pg1');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('solutionparams', 'parent');
model.result('pg6').feature('surf1').set('expr', 'es.normE');
model.result('pg6').feature('surf1').set('colortable', 'Prism');
model.result('pg6').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg6').feature('surf1').set('colorcalibration', -0.8);
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result('pg6').feature.create('str1', 'Streamline');
model.result('pg6').feature('str1').set('showsolutionparams', 'on');
model.result('pg6').feature('str1').set('solutionparams', 'parent');
model.result('pg6').feature('str1').set('expr', {'es.Ex' 'es.Ey'});
model.result('pg6').feature('str1').set('titletype', 'none');
model.result('pg6').feature('str1').set('posmethod', 'uniform');
model.result('pg6').feature('str1').set('udist', 0.02);
model.result('pg6').feature('str1').set('maxlen', 0.4);
model.result('pg6').feature('str1').set('maxtime', Inf);
model.result('pg6').feature('str1').set('inheritcolor', false);
model.result('pg6').feature('str1').set('showsolutionparams', 'on');
model.result('pg6').feature('str1').set('maxtime', Inf);
model.result('pg6').feature('str1').set('showsolutionparams', 'on');
model.result('pg6').feature('str1').set('maxtime', Inf);
model.result('pg6').feature('str1').set('showsolutionparams', 'on');
model.result('pg6').feature('str1').set('maxtime', Inf);
model.result('pg6').feature('str1').set('showsolutionparams', 'on');
model.result('pg6').feature('str1').set('maxtime', Inf);
model.result('pg6').feature('str1').set('data', 'parent');
model.result('pg6').feature('str1').selection.geom('geom1', 1);
model.result('pg6').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22]);
model.result('pg6').feature('str1').set('inheritplot', 'surf1');
model.result('pg6').feature('str1').feature.create('col1', 'Color');
model.result('pg6').feature('str1').feature('col1').set('expr', 'es.normE');
model.result('pg6').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg6').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg6').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg6').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg6').feature('str1').feature.create('filt1', 'Filter');
model.result('pg6').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset2');
model.result('pg7').setIndex('looplevel', 13, 0);
model.result('pg7').label('Moving Mesh');
model.result('pg7').create('mesh1', 'Mesh');
model.result('pg7').feature('mesh1').set('meshdomain', 'surface');
model.result('pg7').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg7').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg7').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg7').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg7').feature('mesh1').feature('sel1').selection.set([1 2 3 4 5 6 7 8]);
model.result('pg7').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg7').feature('mesh1').set('qualexpr', 'comp1.spatial.relVol');
model.result('pg7').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg4').run;
model.result('pg7').run;
model.result.remove('pg7');
model.result('pg4').run;
model.result('pg4').label('Pull In Displacement');
model.result('pg4').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Pull In Plot');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').set('data', 'dset2');
model.result('pg7').feature('glob1').setIndex('expr', 'VdcSP', 0);
model.result('pg7').feature('glob1').setIndex('descr', 'Voltage required to reach set point', 0);
model.result('pg7').feature('glob1').set('xdata', 'expr');
model.result('pg7').feature('glob1').set('xdataexpr', 'yset');
model.result('pg7').run;

model.title(['Pull-In Voltage for a Biased Resonator ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' 2D']);

model.description('An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the pull-in voltage of the resonator is computed.');

model.label('biased_resonator_2d_pull_in.mph');

model.result('pg7').run;

model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').label('Electrostatics domains');
model.geom('geom1').feature('uni1').selection('input').set({'mir1' 'r1' 'r2' 'r3'});
model.geom('geom1').feature('uni1').set('selresult', true);
model.geom('geom1').run('uni1');
model.geom('geom1').create('boxsel1', 'BoxSelection');
model.geom('geom1').feature('boxsel1').label('Contact destination');
model.geom('geom1').feature('boxsel1').set('entitydim', 1);
model.geom('geom1').feature('boxsel1').set('xmin', -11);
model.geom('geom1').feature('boxsel1').set('xmax', 11);
model.geom('geom1').feature('boxsel1').set('ymin', 0.1);
model.geom('geom1').feature('boxsel1').set('ymax', 0.3);
model.geom('geom1').feature('boxsel1').set('condition', 'inside');
model.geom('geom1').feature.duplicate('boxsel2', 'boxsel1');
model.geom('geom1').feature('boxsel2').label('Electrode');
model.geom('geom1').feature('boxsel2').set('ymin', -0.1);
model.geom('geom1').feature('boxsel2').set('ymax', 0.1);
model.geom('geom1').feature.duplicate('r4', 'r2');
model.geom('geom1').feature('r4').label('Fixed base');
model.geom('geom1').feature('r4').set('size', {'22.5*2' 'gap'});
model.geom('geom1').feature('r4').set('pos', {'-l_b' '-0.1985'});
model.geom('geom1').feature('r4').set('selresult', true);
model.geom('geom1').feature.duplicate('boxsel3', 'boxsel2');
model.geom('geom1').feature('boxsel3').label('Contact source');
model.geom('geom1').feature('boxsel3').set('inputent', 'selections');
model.geom('geom1').runPre('boxsel3');
model.geom('geom1').feature('boxsel3').set('input', {'r4'});
model.geom('geom1').feature('boxsel3').set('xmin', -Inf);
model.geom('geom1').feature('boxsel3').set('xmax', Inf);
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('createpairs', false);
model.geom('geom1').run('fin');

model.pair.create('p1', 'Contact', 'geom1');
model.pair('p1').source.named('geom1_boxsel3');
model.pair('p1').destination.named('geom1_boxsel1');

model.cpl('intop1').selection.set([9]);
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').selection.geom('geom1', 0);
model.cpl('intop2').selection.set([12]);

model.physics('solid').selection.set([1 3 5 7 9]);
model.physics('solid').create('fix2', 'Fixed', 2);
model.physics('solid').feature('fix2').selection.named('geom1_r4_dom');
model.physics('solid').create('cnt1', 'SolidContact', 1);
model.physics('solid').feature('cnt1').set('pairs', {'p1'});
model.physics('solid').feature('cnt1').set('destination_offset', '8[nm]');
model.physics('es').selection.named('geom1_uni1_dom');
model.physics('es').feature('pot1').selection.named('geom1_boxsel2');

model.mesh('mesh1').feature('map1').feature('dis1').selection.set([14 19]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 30);
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([5 7 9 24]);
model.mesh('mesh1').feature('map1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis3').selection.named('geom1_boxsel3');
model.mesh('mesh1').feature('map1').feature('dis3').set('numelem', 50);
model.mesh('mesh1').run;

model.study('std2').label('Pull In - Full Range');
model.study('std2').feature('stat').setIndex('plistarr', 'range(198, -5, 93) range(90, -1, 82) range(78, -5, 18)', 0);
model.study('std2').feature('stat').setIndex('punit', 'nm', 0);

model.sol('sol2').runAll;

model.result('pg4').run;
model.result('pg4').set('view', 'new');
model.result('pg4').run;

model.view('view2').axis.set('viewscaletype', 'automatic');

model.result('pg4').run;
model.result('pg4').stepLast(0);
model.result('pg4').run;
model.result('pg7').run;
model.result('pg7').label('Pull In/Out Plot');
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', 'Pull In/Out Plot');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'y-position (nm)');
model.result('pg7').run;
model.result('pg7').feature('glob1').setIndex('expr', 'yset', 0);
model.result('pg7').feature('glob1').setIndex('unit', 'nm', 0);
model.result('pg7').feature('glob1').setIndex('descr', 'set point', 0);
model.result('pg7').feature('glob1').setIndex('expr', 'intop2(y)', 1);
model.result('pg7').feature('glob1').setIndex('unit', 'nm', 1);
model.result('pg7').feature('glob1').setIndex('descr', 'middle point', 1);
model.result('pg7').feature('glob1').set('xdataexpr', 'abs(VdcSP)[V]');
model.result('pg7').feature('glob1').set('xdatadescractive', true);
model.result('pg7').feature('glob1').set('xdatadescr', 'Voltage');
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').importData('biased_resonator_2d_pull_in_pull_out_table.txt');
model.result('pg7').run;
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('legendpos', 'manual');
model.result('pg7').set('legendposx', '30/65');
model.result('pg7').set('legendposy', '150/200');
model.result('pg7').create('tblp1', 'Table');
model.result('pg7').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg7').feature('tblp1').set('linewidth', 'preference');
model.result('pg7').feature('tblp1').set('xaxisdata', 1);
model.result('pg7').feature('tblp1').set('plotcolumninput', 'manual');
model.result('pg7').feature('tblp1').set('plotcolumns', [2]);
model.result('pg7').feature('tblp1').set('linestyle', 'dotted');
model.result('pg7').feature('tblp1').set('linecolor', 'blue');
model.result('pg7').feature.duplicate('tblp2', 'tblp1');
model.result('pg7').run;
model.result('pg7').feature('tblp2').set('xaxisdata', 3);
model.result('pg7').feature('tblp2').set('plotcolumns', [4]);
model.result('pg7').feature('tblp2').set('linecolor', 'green');
model.result('pg7').feature.duplicate('tblp3', 'tblp2');
model.result('pg7').run;
model.result('pg7').feature('tblp3').set('xaxisdata', 5);
model.result('pg7').feature('tblp3').set('plotcolumns', [6]);
model.result('pg7').feature('tblp3').set('linecolor', 'blue');
model.result('pg7').feature.duplicate('tblp4', 'tblp3');
model.result('pg7').run;
model.result('pg7').feature('tblp4').set('xaxisdata', 7);
model.result('pg7').feature('tblp4').set('plotcolumns', [8]);
model.result('pg7').feature('tblp4').set('linecolor', 'green');
model.result('pg7').run;
model.result('pg7').create('ann1', 'Annotation');
model.result('pg7').feature('ann1').set('text', '$\longleftarrow$  Pull-in');
model.result('pg7').feature('ann1').set('posxexpr', 64.5);
model.result('pg7').feature('ann1').set('posyexpr', 65);
model.result('pg7').feature('ann1').set('latexmarkup', true);
model.result('pg7').feature('ann1').set('showpoint', false);
model.result('pg7').feature('ann1').set('anchorpoint', 'center');
model.result('pg7').feature('ann1').set('orientation', 'vertical');
model.result('pg7').feature.duplicate('ann2', 'ann1');
model.result('pg7').run;
model.result('pg7').feature('ann2').set('text', 'Pull-out  $\longrightarrow$');
model.result('pg7').feature('ann2').set('posxexpr', 11.2);
model.result('pg7').feature.duplicate('ann3', 'ann2');
model.result('pg7').run;
model.result('pg7').feature('ann3').set('text', 'Increase voltage  $\longrightarrow$');
model.result('pg7').feature('ann3').set('posxexpr', 47);
model.result('pg7').feature('ann3').set('posyexpr', 195);
model.result('pg7').feature('ann3').set('orientation', 'horizontal');
model.result('pg7').feature.duplicate('ann4', 'ann3');
model.result('pg7').run;
model.result('pg7').feature('ann4').set('text', '$\longleftarrow$  Decrease voltage');
model.result('pg7').feature('ann4').set('posyexpr', 15);
model.result('pg7').run;

model.title(['Pull-In and Pull-Out Analysis of a Biased Resonator ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' 2D']);

model.description('An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the pull-in and pull-out voltages of the resonator are computed. This is done via a quasistatic analysis of the displacement-voltage trajectory of the full range of motion, from the initial relaxed state all the way to the pulled-in flattened state.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('biased_resonator_2d_pull_in_pull_out.mph');

model.modelNode.label('Components');

out = model;
