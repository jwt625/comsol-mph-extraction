function out = model
%
% inline_induction_heater.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Applications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransferInSolidsAndFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics('ht').prop('ShapeProperty').set('order_temperature', '1');
model.physics.create('spf', 'TurbulentFlowAlgebraicYplus', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'WeaklyCompressible');
model.physics.create('rad', 'SurfaceToSurfaceRadiation', 'geom1');
model.physics('rad').model('comp1');
model.physics.create('mf', 'InductionCurrents', 'geom1');
model.physics('mf').model('comp1');

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 3);
model.multiphysics('nitf1').set('Fluid_physics', 'spf');
model.multiphysics('nitf1').set('Heat_physics', 'ht');

model.study.create('std1');

model.geom('geom1').run;

model.physics('mf').create('alf1', 'AmperesLawFluid', 3);
model.physics('mf').feature('alf1').selection.all;

model.param.set('t_pipe', '2e-3[m]');
model.param.descr('t_pipe', 'Pipe thickness');
model.param.set('R_pipe', '0.0254[m]');
model.param.descr('R_pipe', 'External radius of the pipes');
model.param.set('r_pipe', 'R_pipe-t_pipe');
model.param.descr('r_pipe', 'Internal radius of the pipes');
model.param.set('R_i_pipe', 'if(N_pipe == 1, R_pipe, min(R_pipe/(N_pipe)^0.75,R_pipe/2))');
model.param.descr('R_i_pipe', 'External radius of the pipes');
model.param.set('r_i_pipe', 'R_i_pipe-t_pipe');
model.param.descr('r_i_pipe', 'Internal radius of the pipes');
model.param.set('x_i_pipe', '(R_pipe-0.95*R_i_pipe)*cos(pi/N_pipe)');
model.param.descr('x_i_pipe', 'In-plane x-coordinate of major tube center');
model.param.set('y_i_pipe', '(R_pipe-0.95*R_i_pipe)*sin(pi/N_pipe)');
model.param.descr('y_i_pipe', 'In-plane y-coordinate of major tube center');
model.param.set('L_pipe', '1[m]');
model.param.descr('L_pipe', 'Length of the pipes');
model.param.set('N_pipe', '4');
model.param.descr('N_pipe', 'Number of pipes');
model.param.set('R_coil', '1.6*R_pipe');
model.param.descr('R_coil', 'Radius of the multiturn coil');
model.param.set('R_wire', '1e-2[m]');
model.param.descr('R_wire', 'Coil wire radius');
model.param.set('x_coil', '0.15[m]');
model.param.descr('x_coil', 'Starting position of the coil');
model.param.set('N_coil', '30');
model.param.descr('N_coil', 'Number of turns of the coil');
model.param.set('L_coil', '2*R_wire*N_coil');
model.param.descr('L_coil', 'Length of the coil');
model.param.set('I_coil', '2000[A]');
model.param.descr('I_coil', 'Current intensity in the coil');
model.param.set('f_coil', '50[Hz]');
model.param.descr('f_coil', 'Excitation frequency of the coil');
model.param.set('a_coil', 'pi*R_wire^2');
model.param.descr('a_coil', 'Coil wire cross-sectional area');
model.param.set('geom_coil', '2*N_pipe');
model.param.descr('geom_coil', 'Coil geometry multiplication factor');
model.param.set('J_coil', 'I_coil/(a_coil*N_coil)');
model.param.descr('J_coil', 'Current intensity in the coil');
model.param.set('R_air', '3*R_coil');
model.param.descr('R_air', 'Radius of air domain');
model.param.set('T_in', '20[degC]');
model.param.descr('T_in', 'Inlet fluid temperature');
model.param.set('U_in', 'flow_rate/cs_area_flow');
model.param.descr('U_in', 'Inlet fluid average velocity');
model.param.set('cs_area_flow', 'if(N_pipe==1,pi*r_pipe^2,N_pipe*pi*r_i_pipe^2)');
model.param.descr('cs_area_flow', 'Flow cross-sectional area');
model.param.set('flow_rate', '5e-5[m^3/s]');
model.param.descr('flow_rate', 'Flow rate');
model.param.set('sigma_410s', '1.6e6[S/m]');
model.param.descr('sigma_410s', 'Electrical conductivity of Stainless steel 410s');
model.param.set('mur_410s', '1500');
model.param.descr('mur_410s', 'Relative permeability of Stainless steel 410s');
model.param.set('sigma_410', '1.74e6[S/m]');
model.param.descr('sigma_410', 'Electrical conductivity of Stainless steel 410');
model.param.set('mur_410', '750');
model.param.descr('mur_410', 'Relative permeability of Stainless steel 410');
model.param.set('sigma_ud', '1.5e6[S/m]');
model.param.descr('sigma_ud', 'Electrical conductivity of user-defined stainless steel');
model.param.set('mur_ud', '1300');
model.param.descr('mur_ud', 'Relative permeability of user-defined stainless steel');
model.param.set('sigma', 'sigma_410s');
model.param.descr('sigma', 'Generic electrical conductivity');
model.param.set('mur', 'mur_410s');
model.param.descr('mur', 'Generic relative permeability');
model.param.set('sd_pipe', '1/sqrt(pi*f_coil*sigma*4*pi*1e-7[H/m]*mur)');
model.param.descr('sd_pipe', 'Skin depth of the pipe material');
model.param.set('stol', '1e-3');
model.param.descr('stol', 'Solver tolerance');
model.param.set('T_max_critical', '90[degC]');
model.param.descr('T_max_critical', 'Maximum critical temperature');
model.param.set('T_min_critical', '20[degC]');
model.param.descr('T_min_critical', 'Minimum critical temperature');

model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').label('Inlet Plane');
model.geom('geom1').feature('wp1').set('quickplane', 'yz');
model.geom('geom1').feature('wp1').set('unite', false);
model.geom('geom1').feature('wp1').geom.create('c1', 'Circle');
model.geom('geom1').feature('wp1').geom.feature('c1').label('Pipes Outer Cylinder');
model.geom('geom1').feature('wp1').geom.feature('c1').set('r', 'if(N_pipe == 1, R_pipe, R_i_pipe)');
model.geom('geom1').feature('wp1').geom.feature('c1').set('angle', 180);
model.geom('geom1').feature('wp1').geom.feature('c1').set('pos', {'if(N_pipe == 1, 0, x_i_pipe)' '0'});
model.geom('geom1').feature('wp1').geom.feature('c1').setIndex('pos', 'if(N_pipe == 1, 0, y_i_pipe)', 1);
model.geom('geom1').feature('wp1').geom.feature('c1').set('rot', '360/N_pipe/2+180');
model.geom('geom1').feature('wp1').geom.run('c1');
model.geom('geom1').feature('wp1').geom.create('c2', 'Circle');
model.geom('geom1').feature('wp1').geom.feature('c2').label('Pipes Inner Cylinder');
model.geom('geom1').feature('wp1').geom.feature('c2').set('r', 'if(N_pipe == 1, r_pipe, r_i_pipe)');
model.geom('geom1').feature('wp1').geom.feature('c2').set('angle', 180);
model.geom('geom1').feature('wp1').geom.feature('c2').set('pos', {'if(N_pipe == 1, 0, x_i_pipe)' '0'});
model.geom('geom1').feature('wp1').geom.feature('c2').setIndex('pos', 'if(N_pipe == 1, 0, y_i_pipe)', 1);
model.geom('geom1').feature('wp1').geom.feature('c2').set('rot', '360/N_pipe/2+180');
model.geom('geom1').feature('wp1').geom.run('c2');
model.geom('geom1').feature('wp1').geom.create('dif1', 'Difference');
model.geom('geom1').feature('wp1').geom.feature('dif1').selection('input').set({'c1'});
model.geom('geom1').feature('wp1').geom.feature('dif1').selection('input2').set({'c2'});
model.geom('geom1').feature('wp1').geom.feature('dif1').set('repairtoltype', 'relative');
model.geom('geom1').feature('wp1').geom.run('dif1');
model.geom('geom1').feature('wp1').geom.create('c3', 'Circle');
model.geom('geom1').feature('wp1').geom.feature('c3').label('Fluid');
model.geom('geom1').feature('wp1').geom.feature('c3').set('r', 'if(N_pipe == 1, r_pipe, r_i_pipe)');
model.geom('geom1').feature('wp1').geom.feature('c3').set('angle', 180);
model.geom('geom1').feature('wp1').geom.feature('c3').set('pos', {'if(N_pipe == 1, 0, x_i_pipe)' '0'});
model.geom('geom1').feature('wp1').geom.feature('c3').setIndex('pos', 'if(N_pipe == 1, 0, y_i_pipe)', 1);
model.geom('geom1').feature('wp1').geom.feature('c3').set('rot', '360/N_pipe/2+180');
model.geom('geom1').feature('wp1').geom.run('c3');
model.geom('geom1').feature('wp1').geom.create('c4', 'Circle');
model.geom('geom1').feature('wp1').geom.feature('c4').label('Coil Outer Cylinder');
model.geom('geom1').feature('wp1').geom.feature('c4').set('r', 'R_coil + R_wire');
model.geom('geom1').feature('wp1').geom.feature('c4').set('angle', '360/N_pipe/2');
model.geom('geom1').feature('wp1').geom.run('c4');
model.geom('geom1').feature('wp1').geom.create('c5', 'Circle');
model.geom('geom1').feature('wp1').geom.feature('c5').label('Coil Inner Cylinder');
model.geom('geom1').feature('wp1').geom.feature('c5').set('r', 'R_coil - R_wire');
model.geom('geom1').feature('wp1').geom.feature('c5').set('angle', '360/N_pipe/2');
model.geom('geom1').feature('wp1').geom.run('c5');
model.geom('geom1').feature('wp1').geom.create('c6', 'Circle');
model.geom('geom1').feature('wp1').geom.feature('c6').label('Air Cylinder');
model.geom('geom1').feature('wp1').geom.feature('c6').set('r', 'R_air');
model.geom('geom1').feature('wp1').geom.feature('c6').set('angle', '360/N_pipe/2');
model.geom('geom1').feature('wp1').geom.run('c6');
model.geom('geom1').feature('wp1').geom.create('pol1', 'Polygon');
model.geom('geom1').feature('wp1').geom.feature('pol1').set('source', 'table');
model.geom('geom1').feature('wp1').geom.feature('pol1').label('Reflection Plane');
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'if(N_pipe == 1,-R_air*cos(2*pi/N_pipe/2), 0)', 0, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'if(N_pipe == 1,-R_air*sin(2*pi/N_pipe/2), 0)', 0, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'R_air*cos(2*pi/N_pipe/2)', 1, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'R_air*sin(2*pi/N_pipe/2)', 1, 1);
model.geom('geom1').feature('wp1').geom.run('pol1');
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').label('Extrude Tubes');
model.geom('geom1').feature('ext1').selection('input').set({'wp1.c3' 'wp1.dif1'});
model.geom('geom1').feature('ext1').set('inputhandling', 'keep');
model.geom('geom1').feature('ext1').setIndex('distance', 'L_pipe', 0);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Tube(s)');
model.geom('geom1').feature('ext1').set('contributeto', 'csel1');
model.geom('geom1').run('ext1');
model.geom('geom1').feature.create('ext2', 'Extrude');
model.geom('geom1').feature('ext2').label('Extrude Fluid');
model.geom('geom1').feature('ext2').selection('input').set({'wp1.c4'});
model.geom('geom1').feature('ext2').set('inputhandling', 'remove');
model.geom('geom1').feature('ext2').selection('input').init;
model.geom('geom1').feature('ext2').selection('input').set({'wp1.c3'});
model.geom('geom1').feature('ext2').setIndex('distance', 'L_pipe', 0);
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Fluid');
model.geom('geom1').feature('ext2').set('contributeto', 'csel2');
model.geom('geom1').run('ext2');
model.geom('geom1').feature.create('ext3', 'Extrude');
model.geom('geom1').feature('ext3').label('Extrude Coil Outer Cylinder');
model.geom('geom1').feature('ext3').selection('input').set({'wp1.c4'});
model.geom('geom1').feature('ext3').set('inputhandling', 'remove');
model.geom('geom1').feature('ext3').setIndex('distance', 'L_pipe', 0);
model.geom('geom1').selection.create('csel3', 'CumulativeSelection');
model.geom('geom1').selection('csel3').label('Coil Exterior');
model.geom('geom1').feature('ext3').set('contributeto', 'csel3');
model.geom('geom1').run('ext3');
model.geom('geom1').feature.create('ext4', 'Extrude');
model.geom('geom1').feature('ext4').label('Extrude Coil Inner Cylinder');
model.geom('geom1').feature('ext4').selection('input').set({'wp1.c5'});
model.geom('geom1').feature('ext4').set('inputhandling', 'remove');
model.geom('geom1').feature('ext4').setIndex('distance', 'L_pipe', 0);
model.geom('geom1').selection.create('csel4', 'CumulativeSelection');
model.geom('geom1').selection('csel4').label('Coil Interior');
model.geom('geom1').feature('ext4').set('contributeto', 'csel4');
model.geom('geom1').run('ext4');
model.geom('geom1').feature.create('ext5', 'Extrude');
model.geom('geom1').feature('ext5').label('Extrude Air Cylinder');
model.geom('geom1').feature('ext5').selection('input').set({'wp1.c6'});
model.geom('geom1').feature('ext5').set('inputhandling', 'remove');
model.geom('geom1').feature('ext5').setIndex('distance', 'L_pipe', 0);
model.geom('geom1').run('ext5');
model.geom('geom1').feature.create('ext6', 'Extrude');
model.geom('geom1').feature('ext6').label('Extrude Reflection Plane');
model.geom('geom1').feature('ext6').selection('input').set({'wp1.pol1'});
model.geom('geom1').feature('ext6').set('inputhandling', 'remove');
model.geom('geom1').feature('ext6').setIndex('distance', 'L_pipe', 0);
model.geom('geom1').selection.create('csel5', 'CumulativeSelection');
model.geom('geom1').selection('csel5').label('Reflection Plane');
model.geom('geom1').feature('ext6').set('contributeto', 'csel5');
model.geom('geom1').run('ext6');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').init;
model.geom('geom1').feature('del1').selection('input').set({'wp1.dif1'});
model.geom('geom1').run('del1');
model.geom('geom1').create('wp2', 'WorkPlane');
model.geom('geom1').feature('wp2').set('unite', true);
model.geom('geom1').feature('wp2').label('Coil Inlet Plane');
model.geom('geom1').feature('wp2').set('quickplane', 'yz');
model.geom('geom1').feature('wp2').set('quickx', 'x_coil');
model.geom('geom1').feature('wp2').set('unite', false);
model.geom('geom1').runPre('fin');
model.geom('geom1').create('wp3', 'WorkPlane');
model.geom('geom1').feature('wp3').set('unite', true);
model.geom('geom1').feature('wp3').label('Coil Outlet Plane');
model.geom('geom1').feature('wp3').set('quickplane', 'yz');
model.geom('geom1').feature('wp3').set('quickx', 'x_coil + L_coil');
model.geom('geom1').feature('wp3').set('unite', false);
model.geom('geom1').run('wp3');
model.geom('geom1').create('par1', 'Partition');
model.geom('geom1').feature('par1').selection('input').set({'ext1(2)' 'ext2' 'ext3' 'ext4' 'ext5' 'ext6'});
model.geom('geom1').feature('par1').set('partitionwith', 'workplane');
model.geom('geom1').feature('par1').set('workplane', 'wp2');
model.geom('geom1').feature('par1').set('repairtoltype', 'relative');
model.geom('geom1').run('par1');
model.geom('geom1').create('par2', 'Partition');
model.geom('geom1').feature('par2').selection('input').set({'par1'});
model.geom('geom1').feature('par2').set('partitionwith', 'workplane');
model.geom('geom1').feature('par2').set('repairtoltype', 'relative');
model.geom('geom1').runPre('fin');

model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');

model.geom('geom1').run;

model.selection('dif1').label('Pipes');
model.selection('dif1').set('add', {'geom1_csel1_dom'});
model.selection('dif1').set('subtract', {'geom1_csel2_dom'});
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Fluid Boundaries');
model.selection('adj1').set('input', {'geom1_csel2_dom'});
model.selection.create('adj2', 'Adjacent');
model.selection('adj2').model('comp1');
model.selection('adj2').label('Tube Boundaries');
model.selection('adj2').set('input', {'geom1_csel1_dom'});
model.selection.create('cyl1', 'Cylinder');
model.selection('cyl1').model('comp1');
model.selection('cyl1').label('Inlet Cylinder');
model.selection('cyl1').set('entitydim', 2);
model.selection('cyl1').set('r', 'R_coil');
model.selection('cyl1').set('top', 'eps');
model.selection('cyl1').set('bottom', '-eps');
model.selection('cyl1').set('axistype', 'cartesian');
model.selection('cyl1').set('ax3', [1 0 0]);
model.selection('cyl1').set('condition', 'inside');
model.selection.duplicate('cyl2', 'cyl1');
model.selection('cyl2').label('Outlet Cylinder');
model.selection('cyl2').set('pos', {'L_pipe' '0' '0'});
model.selection.create('int1', 'Intersection');
model.selection('int1').model('comp1');
model.selection('int1').label('Fluid Inlet');
model.selection('int1').set('entitydim', 2);
model.selection('int1').set('input', {'adj1' 'cyl1'});
model.selection.duplicate('int2', 'int1');
model.selection('int2').label('Fluid Outlet');
model.selection('int2').set('input', {'adj1' 'cyl2'});
model.selection.create('dif2', 'Difference');
model.selection('dif2').model('comp1');
model.selection('dif2').label('Tube Lateral Walls');
model.selection('dif2').set('entitydim', 2);
model.selection('dif2').set('add', {'adj2'});
model.selection('dif2').set('subtract', {'cyl1' 'cyl2'});
model.selection.create('dif3', 'Difference');
model.selection('dif3').model('comp1');
model.selection('dif3').label('Tube Lateral Walls Minus Reflection Plane');
model.selection('dif3').set('entitydim', 2);
model.selection('dif3').set('add', {'dif2'});
model.selection('dif3').set('subtract', {'geom1_csel5_bnd'});
model.selection.create('int3', 'Intersection');
model.selection('int3').model('comp1');
model.selection('int3').label('Tube Inlet');
model.selection('int3').set('entitydim', 2);
model.selection('int3').set('input', {'adj2' 'cyl1'});
model.selection.duplicate('int4', 'int3');
model.selection('int4').label('Tube Outlet');
model.selection('int4').set('input', {'adj2' 'cyl2'});
model.selection.create('dif4', 'Difference');
model.selection('dif4').model('comp1');
model.selection('dif4').label('Coil (Full Length)');
model.selection('dif4').set('add', {'geom1_csel3_dom'});
model.selection('dif4').set('subtract', {'geom1_csel4_dom'});
model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');
model.selection('box1').label('Box for Coil');
model.selection('box1').set('xmin', 'x_coil');
model.selection('box1').set('xmax', 'x_coil + L_coil');
model.selection('box1').set('condition', 'inside');
model.selection.create('int5', 'Intersection');
model.selection('int5').model('comp1');
model.selection('int5').label('Coil');
model.selection('int5').set('input', {'dif4' 'box1'});
model.selection.create('cyl3', 'Cylinder');
model.selection('cyl3').model('comp1');
model.selection('cyl3').set('entitydim', 1);
model.selection('cyl3').set('r', 'R_coil');
model.selection('cyl3').set('top', 'L_coil*1e-3');
model.selection('cyl3').set('bottom', '-L_coil*1e-3');
model.selection('cyl3').set('pos', {'x_coil' '0' '0'});
model.selection('cyl3').set('axistype', 'cartesian');
model.selection('cyl3').set('ax3', [1 0 0]);
model.selection('cyl3').set('condition', 'inside');
model.selection.duplicate('cyl4', 'cyl3');
model.selection('cyl4').set('r', 'R_coil-R_wire');
model.selection.create('dif5', 'Difference');
model.selection('dif5').model('comp1');
model.selection('dif5').label('Coil Start Edges');
model.selection('dif5').set('entitydim', 1);
model.selection('dif5').set('add', {'cyl3'});
model.selection('dif5').set('subtract', {'cyl4'});
model.selection.create('cyl5', 'Cylinder');
model.selection('cyl5').model('comp1');
model.selection('cyl5').label('Domain Inlet');
model.selection('cyl5').set('entitydim', 2);
model.selection('cyl5').set('r', 'R_air*1.01');
model.selection('cyl5').set('top', 'L_pipe*1e-3');
model.selection('cyl5').set('bottom', '-L_pipe*1e-3');
model.selection('cyl5').set('axistype', 'cartesian');
model.selection('cyl5').set('ax3', [1 0 0]);
model.selection('cyl5').set('condition', 'inside');
model.selection.create('cyl6', 'Cylinder');
model.selection('cyl6').model('comp1');
model.selection('cyl6').label('Domain Before Coil');
model.selection('cyl6').set('r', 'R_air*1.01');
model.selection('cyl6').set('top', 'x_coil + 1e-3*L_coil');
model.selection('cyl6').set('bottom', 0);
model.selection('cyl6').set('axistype', 'cartesian');
model.selection('cyl6').set('ax3', [1 0 0]);
model.selection('cyl6').set('condition', 'inside');
model.selection.create('cyl7', 'Cylinder');
model.selection('cyl7').model('comp1');
model.selection('cyl7').label('Domain Around Coil');
model.selection('cyl7').set('r', 'R_air*1.01');
model.selection('cyl7').set('top', 'x_coil + L_coil');
model.selection('cyl7').set('bottom', 'x_coil');
model.selection('cyl7').set('axistype', 'cartesian');
model.selection('cyl7').set('ax3', [1 0 0]);
model.selection('cyl7').set('condition', 'inside');
model.selection.create('cyl8', 'Cylinder');
model.selection('cyl8').model('comp1');
model.selection('cyl8').label('Domain After Coil');
model.selection('cyl8').set('r', 'R_air*1.01');
model.selection('cyl8').set('top', 'L_pipe');
model.selection('cyl8').set('bottom', 'x_coil + L_coil');
model.selection('cyl8').set('axistype', 'cartesian');
model.selection('cyl8').set('ax3', [1 0 0]);
model.selection('cyl8').set('condition', 'inside');
model.selection.create('box2', 'Box');
model.selection('box2').model('comp1');
model.selection('box2').label('Coil Start Edges (Reduced)');
model.selection('box2').set('entitydim', 1);
model.selection('box2').set('inputent', 'selections');
model.selection('box2').set('input', {'dif5'});
model.selection('box2').set('xmin', 'x_coil');
model.selection('box2').set('xmax', 'x_coil + L_coil');
model.selection('box2').set('ymin', 0);
model.selection('box2').set('zmin', 0);
model.selection('box2').set('condition', 'inside');
model.selection.create('com1', 'Complement');
model.selection('com1').model('comp1');
model.selection('com1').label('Domain - Fluid');
model.selection('com1').set('input', {'geom1_csel2_dom'});
model.selection.create('dif6', 'Difference');
model.selection('dif6').model('comp1');
model.selection('dif6').label('Pipes Inlet');
model.selection('dif6').set('entitydim', 2);
model.selection('dif6').set('add', {'int3'});
model.selection('dif6').set('subtract', {'int1'});
model.selection.duplicate('dif7', 'dif6');
model.selection('dif7').label('Pipes Outlet');
model.selection('dif7').set('add', {'int4'});
model.selection('dif7').set('subtract', {'int2'});
model.selection.create('adj3', 'Adjacent');
model.selection('adj3').model('comp1');
model.selection('adj3').label('Pipes Inlet Interior Edges');
model.selection('adj3').set('entitydim', 2);
model.selection('adj3').set('input', {'dif6'});
model.selection('adj3').set('outputdim', 1);
model.selection('adj3').set('interior', true);
model.selection.create('adj4', 'Adjacent');
model.selection('adj4').model('comp1');
model.selection('adj4').label('Fluid Inlet Edges');
model.selection('adj4').set('entitydim', 2);
model.selection('adj4').set('input', {'int1'});
model.selection('adj4').set('outputdim', 1);
model.selection.create('adj5', 'Adjacent');
model.selection('adj5').model('comp1');
model.selection('adj5').label('Reflection Plane Edges');
model.selection('adj5').set('entitydim', 2);
model.selection('adj5').set('input', {'geom1_csel5_bnd'});
model.selection('adj5').set('outputdim', 1);
model.selection.create('dif8', 'Difference');
model.selection('dif8').model('comp1');
model.selection('dif8').label('Fluid Inlet Edges Minus Reflection Plane');
model.selection('dif8').set('entitydim', 1);
model.selection('dif8').set('add', {'adj4'});
model.selection('dif8').set('subtract', {'adj5'});
model.selection.create('dif9', 'Difference');
model.selection('dif9').model('comp1');
model.selection('dif9').label('(Domain - Pipes) Inlet');
model.selection('dif9').set('entitydim', 2);
model.selection('dif9').set('add', {'cyl5'});
model.selection('dif9').set('subtract', {'dif6'});
model.selection.create('dif10', 'Difference');
model.selection('dif10').model('comp1');
model.selection('dif10').label('Fluid Lateral Walls');
model.selection('dif10').set('entitydim', 2);
model.selection('dif10').set('add', {'adj1'});
model.selection('dif10').set('subtract', {'int1' 'int2'});
model.selection.create('dif11', 'Difference');
model.selection('dif11').model('comp1');
model.selection('dif11').label('Fluid Lateral Walls Minus Reflection Plane');
model.selection('dif11').set('entitydim', 2);
model.selection('dif11').set('add', {'dif10'});
model.selection('dif11').set('subtract', {'geom1_csel5_bnd'});
model.selection.create('int6', 'Intersection');
model.selection('int6').model('comp1');
model.selection('int6').label('Intersection of Pipes Inlet and Reflection Plane Edges');
model.selection('int6').set('entitydim', 1);
model.selection('int6').set('input', {'adj3' 'adj5'});

model.physics('ht').selection.named('geom1_csel1_dom');
model.physics('ht').feature('fluid1').selection.named('geom1_csel2_dom');
model.physics('ht').create('temp1', 'TemperatureBoundary', 2);
model.physics('ht').feature('temp1').selection.named('int1');
model.physics('ht').feature('temp1').set('T0', 'T_in');
model.physics('ht').create('ofl1', 'ConvectiveOutflow', 2);
model.physics('ht').feature('ofl1').selection.named('int2');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 2);
model.physics('ht').feature('hf1').selection.named('dif3');
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 5);
model.physics('ht').create('sym1', 'Symmetry', 2);
model.physics('ht').feature('sym1').selection.named('geom1_csel5_bnd');
model.physics('spf').selection.named('geom1_csel2_dom');
model.physics('spf').create('inl1', 'InletBoundary', 2);
model.physics('spf').feature('inl1').selection.named('int1');
model.physics('spf').feature('inl1').set('U0in', 'U_in');
model.physics('spf').create('out1', 'OutletBoundary', 2);
model.physics('spf').feature('out1').selection.named('int2');
model.physics('spf').create('sym1', 'Symmetry', 2);
model.physics('spf').feature('sym1').selection.named('geom1_csel5_bnd');
model.physics('rad').selection.named('dif3');
model.physics('rad').feature('dsurf1').set('epsilon_rad_mat', 'userdef');
model.physics('rad').feature('dsurf1').set('epsilon_rad', 0.9);
model.physics('rad').create('rsym1', 'SymmetryForSurfaceToSurfaceRadiation', -1);
model.physics('rad').feature('rsym1').set('typeOfSymmetry', 'SectorSymmetry');
model.physics('rad').feature('rsym1').set('numberOfSectors', 4);
model.physics('rad').feature('rsym1').set('isSectorWithReflection', true);
model.physics('rad').feature('rsym1').set('dReflection', {'0' 'cos(pi/N_pipe)' 'sin(pi/N_pipe)'});
model.physics('mf').selection.named('com1');
model.physics('mf').prop('EquationForm').setIndex('form', 'Frequency', 0);
model.physics('mf').prop('EquationForm').setIndex('freq_src', 'userdef', 0);
model.physics('mf').prop('EquationForm').setIndex('freq', 'f_coil', 0);

model.multiphysics.create('htrad1', 'HeatTransferWithSurfaceToSurfaceRadiation', 'geom1', 2);
model.multiphysics('htrad1').selection.named('dif3');
model.multiphysics.create('emh1', 'ElectromagneticHeating', 'geom1', 3);
model.multiphysics('emh1').selection.named('dif1');

model.physics('mf').create('coil1', 'Coil', 3);
model.physics('mf').feature('coil1').selection.named('int5');
model.physics('mf').feature('coil1').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil1').set('CoilType', 'Circular');
model.physics('mf').feature('coil1').set('ICoil', 'I_coil');
model.physics('mf').feature('coil1').set('N', 'N_coil');
model.physics('mf').feature('coil1').set('coilWindArea', 'a_coil');
model.physics('mf').feature('coil1').feature('cre1').selection.named('box2');
model.physics('mf').feature('coil1').feature('cre1').set('OverrideLength', true);
model.physics('mf').feature('coil1').feature('cre1').set('length', '2*pi*R_coil/geom_coil');
model.physics('mf').feature('coil1').feature('cre1').set('fl', 8);

model.material.create('mat1', 'Common', '');
model.material('mat1').label('Milk');
model.material('mat1').propertyGroup('def').set('density', '');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', '');
model.material('mat1').propertyGroup('def').set('heatcapacity', '');
model.material('mat1').propertyGroup('def').set('thermalconductivity', '');
model.material('mat1').propertyGroup('def').set('density', {'1030'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', {'2e-3'});
model.material('mat1').propertyGroup('def').set('heatcapacity', {'3900'});
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'0.53'});
model.material.create('mat2', 'Common', '');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat2').label('Water, liquid');
model.material('mat2').set('family', 'water');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat2').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat2').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat2').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat2').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat2').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material.duplicate('mat3', 'mat1');
model.material('mat3').set('sys', 'none');
model.material('mat3').label('Tomato Soup');
model.material('mat3').propertyGroup('def').set('density', {'1020'});
model.material('mat3').propertyGroup('def').set('dynamicviscosity', {'3e-3'});
model.material('mat3').propertyGroup('def').set('heatcapacity', {'4000'});
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'0.6'});
model.material.create('mat4', 'Common', '');
model.material('mat4').label('Stainless Steel 410s');
model.material('mat4').propertyGroup('def').set('density', '');
model.material('mat4').propertyGroup('def').set('electricconductivity', '');
model.material('mat4').propertyGroup('def').set('heatcapacity', '');
model.material('mat4').propertyGroup('def').set('relpermeability', '');
model.material('mat4').propertyGroup('def').set('relpermittivity', '');
model.material('mat4').propertyGroup('def').set('thermalconductivity', '');
model.material('mat4').propertyGroup('def').set('density', {'7.73e3'});
model.material('mat4').propertyGroup('def').set('electricconductivity', {'sigma_410s'});
model.material('mat4').propertyGroup('def').set('heatcapacity', {'460'});
model.material('mat4').propertyGroup('def').set('relpermeability', {'mur_410s'});
model.material('mat4').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'26.9'});
model.material.duplicate('mat5', 'mat4');
model.material('mat5').set('sys', 'none');
model.material('mat5').label('Stainless Steel 410');
model.material('mat5').propertyGroup('def').set('density', {'7.74e3'});
model.material('mat5').propertyGroup('def').set('electricconductivity', {'sigma_410'});
model.material('mat5').propertyGroup('def').set('heatcapacity', {'460'});
model.material('mat5').propertyGroup('def').set('relpermeability', {'mur_410'});
model.material('mat5').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat5').propertyGroup('def').set('thermalconductivity', {'24.9'});
model.material.duplicate('mat6', 'mat4');
model.material('mat6').set('sys', 'none');
model.material('mat6').label('Stainless Steel User Defined');
model.material('mat6').propertyGroup('def').set('density', {'7.73e3'});
model.material('mat6').propertyGroup('def').set('electricconductivity', {'sigma_ud'});
model.material('mat6').propertyGroup('def').set('heatcapacity', {'460'});
model.material('mat6').propertyGroup('def').set('relpermeability', {'mur_ud'});
model.material('mat6').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat6').propertyGroup('def').set('thermalconductivity', {'26.9'});
model.material.create('mat7', 'Common', 'comp1');
model.material('mat7').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat7').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat7').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat7').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat7').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat7').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat7').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat7').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat7').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat7').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat7').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat7').label('Air');
model.material('mat7').set('family', 'air');
model.material('mat7').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat7').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat7').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat7').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat7').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat7').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat7').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat7').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat7').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat7').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat7').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat7').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat7').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat7').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat7').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat7').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat7').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat7').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat7').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat7').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat7').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat7').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat7').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat7').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat7').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat7').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat7').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat7').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat7').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat7').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat7').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat7').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat7').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat7').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat7').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat7').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat7').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat7').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat7').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat7').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat7').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat7').propertyGroup('def').set('molarmass', '');
model.material('mat7').propertyGroup('def').set('bulkviscosity', '');
model.material('mat7').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat7').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat7').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat7').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat7').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat7').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat7').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat7').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat7').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat7').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat7').propertyGroup('def').addInput('temperature');
model.material('mat7').propertyGroup('def').addInput('pressure');
model.material('mat7').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat7').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat7').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat7').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat7').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat7').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat7').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat7').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat7').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat7').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat7').propertyGroup('idealGas').addInput('temperature');
model.material('mat7').propertyGroup('idealGas').addInput('pressure');
model.material('mat7').materialType('nonSolid');
model.material('mat7').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat7').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat7').propertyGroup('def').set('dynamicviscosity', {'eta(T[1/K])[Pa*s]'});
model.material('mat7').propertyGroup('def').set('electricconductivity', {'1.4'});
model.material.create('matlnk1', 'Link', 'comp1');
model.material('matlnk1').label('Material Link Fluid');
model.material('matlnk1').selection.named('geom1_csel2_dom');
model.material.create('matlnk2', 'Link', 'comp1');
model.material('matlnk2').label('Material Link Pipes');
model.material('matlnk2').selection.named('dif1');
model.material('matlnk2').set('link', 'mat4');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature.remove('size1');
model.mesh('mesh1').feature.remove('size2');
model.mesh('mesh1').feature.remove('cr1');
model.mesh('mesh1').feature.remove('ftet1');
model.mesh('mesh1').feature.remove('bl1');
model.mesh('mesh1').feature('size').set('hauto', 1);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.named('dif6');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.named('dif8');
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 'floor(10/sqrt(N_pipe))');
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.named('int6');
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 'floor(t_pipe/sd_pipe)+1');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.named('dif9');
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hauto', 1);
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hnarrowactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hnarrow', 2);
model.mesh('mesh1').feature('ftri1').create('size2', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size2').selection.named('int1');
model.mesh('mesh1').feature('ftri1').feature('size2').set('hauto', 1);
model.mesh('mesh1').feature('ftri1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size2').set('hmax', 'r_i_pipe/5');
model.mesh('mesh1').feature('ftri1').feature('size2').set('hnarrowactive', true);
model.mesh('mesh1').feature('ftri1').feature('size2').set('hnarrow', 2);
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('bl1').selection.named('int1');
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('dif8');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 3);
model.mesh('mesh1').feature('bl1').feature('blp').set('blhminfact', 4);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.named('cyl6');
model.mesh('mesh1').feature('swe1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('swe1').feature('dis1').set('elemcount', 'floor(50*x_coil)');
model.mesh('mesh1').feature('swe1').feature('dis1').set('elemratio', 3);
model.mesh('mesh1').feature('swe1').feature('dis1').set('reverse', true);
model.mesh('mesh1').feature('swe1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis2').selection.named('cyl7');
model.mesh('mesh1').feature('swe1').feature('dis2').set('numelem', 'floor(80*L_coil)');
model.mesh('mesh1').feature('swe1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis3').selection.named('cyl8');
model.mesh('mesh1').feature('swe1').feature('dis3').set('type', 'predefined');
model.mesh('mesh1').feature('swe1').feature('dis3').set('elemcount', 'floor(40*(L_pipe-x_coil-L_coil))');
model.mesh('mesh1').feature('swe1').feature('dis3').set('elemratio', 3);
model.mesh('mesh1').run;

model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('plist', 'f_coil');
model.study('std1').create('wdi', 'WallDistanceInitialization');
model.study('std1').feature('wdi').setEntry('activate', 'mf', false);
model.study('std1').feature('wdi').setEntry('activateCoupling', 'emh1', false);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setEntry('activate', 'mf', false);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 8 13]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 8 13]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 8 13]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 8 13]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'f_coil'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'bicgstab');
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_A'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_A'});
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'wdi');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'wdi');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-6);
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, wall distance (spf)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, wall distance (spf)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'stat');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').feature('comp1_rad_dsurf1_Jd_band').set('scalemethod', 'init');
model.sol('sol1').feature('v3').feature('comp1_rad_dsurf1_Ju_band').set('scalemethod', 'init');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'stat');
model.sol('sol1').create('s3', 'Stationary');
model.sol('sol1').feature('s3').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s3').create('seDef', 'Segregated');
model.sol('sol1').feature('s3').create('se1', 'Segregated');
model.sol('sol1').feature('s3').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s3').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s3').feature('se1').feature('ss1').set('segvar', {'comp1_rad_dsurf1_Ju_band' 'comp1_rad_dsurf1_Jd_band'});
model.sol('sol1').feature('s3').feature('se1').feature('ss1').set('subdamp', 0.8);
model.sol('sol1').feature('s3').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('d1').label('Direct, radiation variables');
model.sol('sol1').feature('s3').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s3').feature('se1').feature('ss1').label('Radiosity');
model.sol('sol1').feature('s3').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s3').feature('se1').feature('ss2').set('segvar', {'comp1_p' 'comp1_u'});
model.sol('sol1').feature('s3').feature('se1').feature('ss2').set('subdamp', 0.5);
model.sol('sol1').feature('s3').create('d2', 'Direct');
model.sol('sol1').feature('s3').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('d2').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s3').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s3').feature('se1').feature('ss2').label('Velocity u, Pressure p');
model.sol('sol1').feature('s3').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s3').feature('se1').feature('ss3').set('segvar', {'comp1_T' 'comp1_nitf1_TWall_d' 'comp1_nitf1_TWall_u'});
model.sol('sol1').feature('s3').feature('se1').feature('ss3').set('subdamp', 0.5);
model.sol('sol1').feature('s3').create('d3', 'Direct');
model.sol('sol1').feature('s3').feature('d3').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d3').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('d3').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s3').feature('se1').feature('ss3').set('linsolver', 'd3');
model.sol('sol1').feature('s3').feature('se1').feature('ss3').label('Temperature');
model.sol('sol1').feature('s3').feature('se1').create('ss4', 'SegregatedStep');
model.sol('sol1').feature('s3').feature('se1').feature('ss4').set('segvar', {'comp1_yPlus'});
model.sol('sol1').feature('s3').feature('se1').feature('ss4').set('subdamp', 0.45);
model.sol('sol1').feature('s3').feature('se1').feature('ss4').set('subiter', 3);
model.sol('sol1').feature('s3').feature('se1').feature('ss4').set('subtermconst', 'itertol');
model.sol('sol1').feature('s3').feature('se1').feature('ss4').set('subntolfact', 1);
model.sol('sol1').feature('s3').create('d4', 'Direct');
model.sol('sol1').feature('s3').feature('d4').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d4').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('d4').label('Direct, turbulence variables (spf)');
model.sol('sol1').feature('s3').feature('se1').feature('ss4').set('linsolver', 'd4');
model.sol('sol1').feature('s3').feature('se1').feature('ss4').label('Turbulence Variables');
model.sol('sol1').feature('s3').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s3').feature('se1').set('segaaccdim', 10);
model.sol('sol1').feature('s3').feature('se1').set('ntolfact', 0.1);
model.sol('sol1').feature('s3').feature('se1').set('maxsegiter', 400);
model.sol('sol1').feature('s3').feature('se1').set('subinitcfl', 2);
model.sol('sol1').feature('s3').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s3').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s3').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s3').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s3').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s3').feature('se1').feature('ll1').set('lowerlimit', 'comp1.yPlus 0 comp1.T 0 ');
model.sol('sol1').feature('s3').create('i1', 'Iterative');
model.sol('sol1').feature('s3').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s3').feature('i1').label('AMG, radiation variables');
model.sol('sol1').feature('s3').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').create('i2', 'Iterative');
model.sol('sol1').feature('s3').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s3').feature('i2').label('GMG, radiation variables');
model.sol('sol1').feature('s3').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('mcasegen', 'any');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').create('i3', 'Iterative');
model.sol('sol1').feature('s3').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i3').set('itrestart', 50);
model.sol('sol1').feature('s3').feature('i3').set('rhob', 20);
model.sol('sol1').feature('s3').feature('i3').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i3').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s3').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').create('i4', 'Iterative');
model.sol('sol1').feature('s3').feature('i4').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i4').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i4').set('itrestart', 50);
model.sol('sol1').feature('s3').feature('i4').set('rhob', 20);
model.sol('sol1').feature('s3').feature('i4').set('maxlinit', 10000);
model.sol('sol1').feature('s3').feature('i4').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i4').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s3').feature('i4').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').create('i5', 'Iterative');
model.sol('sol1').feature('s3').feature('i5').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i5').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i5').set('itrestart', 50);
model.sol('sol1').feature('s3').feature('i5').set('rhob', 400);
model.sol('sol1').feature('s3').feature('i5').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i5').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i5').label('AMG, turbulence variables (spf)');
model.sol('sol1').feature('s3').feature('i5').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature.remove('fcDef');
model.sol('sol1').feature('s3').feature.remove('seDef');
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v3').set('solnum', 'auto');
model.sol('sol1').feature('v3').set('solvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s1').set('stol', 'stol');
model.sol('sol1').feature('s2').set('stol', 'stol');
model.sol('sol1').feature('s3').set('stol', 'stol');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Temperature (ht)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg1').feature.create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('solutionparams', 'parent');
model.result('pg1').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('vol1').set('smooth', 'internal');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('data', 'parent');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (spf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg2').feature.create('slc1', 'Slice');
model.result('pg2').feature('slc1').label('Slice');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('expr', 'spf.U');
model.result('pg2').feature('slc1').set('smooth', 'internal');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([9 11 32 34 55 57]);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Pressure (spf)');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond1/pg4');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'p');
model.result('pg3').feature('surf1').set('colortable', 'Dipole');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature('surf1').feature.create('tran1', 'Transparency');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Wall Resolution (spf)');
model.result('pg4').set('data', 'surf1');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'surf1');
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond1/pg3');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Wall Resolution');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('expr', 'spf.Delta_wPlus');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Surface Radiosity (rad)');
model.result('pg5').set('data', 'dset1');
model.result('pg5').set('defaultPlotID', 'rad/RAD_PhysicsInterfaces/icom1/pdef1/pcond3/pcond2/pg1');
model.result('pg5').feature.create('slit1', 'SurfaceSlit');
model.result('pg5').feature('slit1').set('showsolutionparams', 'on');
model.result('pg5').feature('slit1').set('upexpr', 'rad.Ju');
model.result('pg5').feature('slit1').set('downexpr', 'rad.Jd');
model.result('pg5').feature('slit1').set('smooth', 'internal');
model.result('pg5').feature('slit1').set('showsolutionparams', 'on');
model.result('pg5').feature('slit1').set('data', 'parent');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Magnetic Flux Density Norm (mf)');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('showlegendsmaxmin', true);
model.result('pg6').set('data', 'dset1');
model.result('pg6').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond1/pg1');
model.result('pg6').feature.create('mslc1', 'Multislice');
model.result('pg6').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg6').feature('mslc1').set('solutionparams', 'parent');
model.result('pg6').feature('mslc1').set('expr', 'mf.normB');
model.result('pg6').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg6').feature('mslc1').set('xcoord', 'mf.CPx');
model.result('pg6').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg6').feature('mslc1').set('ycoord', 'mf.CPy');
model.result('pg6').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg6').feature('mslc1').set('zcoord', 'mf.CPz');
model.result('pg6').feature('mslc1').set('colortable', 'Prism');
model.result('pg6').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg6').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg6').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg6').feature('mslc1').set('data', 'parent');
model.result('pg6').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg6').feature('strmsl1').set('expr', {'mf.Bx' 'mf.By' 'mf.Bz'});
model.result('pg6').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg6').feature('strmsl1').set('xcoord', 'mf.CPx');
model.result('pg6').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg6').feature('strmsl1').set('ycoord', 'mf.CPy');
model.result('pg6').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg6').feature('strmsl1').set('zcoord', 'mf.CPz');
model.result('pg6').feature('strmsl1').set('titletype', 'none');
model.result('pg6').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg6').feature('strmsl1').set('udist', 0.02);
model.result('pg6').feature('strmsl1').set('maxlen', 0.4);
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('inheritcolor', false);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('data', 'parent');
model.result('pg6').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg6').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg6').feature('strmsl1').feature('col1').set('expr', 'mf.normB');
model.result('pg6').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg6').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg6').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg6').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg6').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg6').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').label('Temperature and Fluid Flow (nitf1)');
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').set('data', 'dset1');
model.result('pg7').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond3/pg1');
model.result('pg7').feature.create('surf1', 'Surface');
model.result('pg7').feature('surf1').label('Wall Temperature');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('solutionparams', 'parent');
model.result('pg7').feature('surf1').set('expr', 'ht.Tvar');
model.result('pg7').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg7').feature('surf1').set('smooth', 'internal');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('data', 'parent');
model.result('pg7').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg7').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg7').feature('surf1').feature('sel1').selection.set([9 11 32 34 55 57]);
model.result('pg7').feature.create('vol1', 'Volume');
model.result('pg7').feature('vol1').label('Solid Temperature');
model.result('pg7').feature('vol1').set('showsolutionparams', 'on');
model.result('pg7').feature('vol1').set('solutionparams', 'parent');
model.result('pg7').feature('vol1').set('expr', 'nitf1.T');
model.result('pg7').feature('vol1').set('smooth', 'internal');
model.result('pg7').feature('vol1').set('showsolutionparams', 'on');
model.result('pg7').feature('vol1').set('data', 'parent');
model.result('pg7').feature('vol1').feature.create('sel1', 'Selection');
model.result('pg7').feature('vol1').feature('sel1').selection.geom('geom1', 3);
model.result('pg7').feature('vol1').feature('sel1').selection.set([2 7 12]);
model.result('pg7').feature('vol1').set('inheritplot', 'surf1');
model.result('pg7').feature.create('arwv1', 'ArrowVolume');
model.result('pg7').feature('arwv1').label('Fluid Flow');
model.result('pg7').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg7').feature('arwv1').set('solutionparams', 'parent');
model.result('pg7').feature('arwv1').set('expr', {'nitf1.ux' 'nitf1.uy' 'nitf1.uz'});
model.result('pg7').feature('arwv1').set('xnumber', 30);
model.result('pg7').feature('arwv1').set('ynumber', 30);
model.result('pg7').feature('arwv1').set('znumber', 30);
model.result('pg7').feature('arwv1').set('arrowtype', 'cone');
model.result('pg7').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg7').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg7').feature('arwv1').set('data', 'parent');
model.result('pg7').feature('arwv1').feature.create('col1', 'Color');
model.result('pg7').feature('arwv1').feature('col1').set('showcolordata', 'off');
model.result('pg7').feature('arwv1').feature('col1').set('expr', 'spf.U');
model.result('pg7').feature('arwv1').feature.create('filt1', 'Filter');
model.result('pg7').feature('arwv1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result('pg1').run;
model.result.dataset('surf1').selection.named('dif11');
model.result.dataset.create('cln1', 'CutLine3D');
model.result.dataset('cln1').label('Central Line Along the Tubes');
model.result.dataset('cln1').setIndex('genpoints', 'L_pipe', 1, 0);
model.result.dataset('cln1').setIndex('genpoints', 'if(N_pipe == 1, 0, x_i_pipe)', 0, 1);
model.result.dataset('cln1').setIndex('genpoints', 'if(N_pipe == 1, 0, x_i_pipe)', 1, 1);
model.result.dataset('cln1').setIndex('genpoints', 'if(N_pipe == 1, 0, y_i_pipe)', 0, 2);
model.result.dataset('cln1').setIndex('genpoints', 'if(N_pipe == 1, 0, y_i_pipe)', 1, 2);
model.result.dataset('cln1').set('snapping', 'boundary');
model.result.dataset.create('cln2', 'CutLine3D');
model.result.dataset('cln2').label('Interior Wall Line Along the Tubes');
model.result.dataset('cln2').setIndex('genpoints', 'L_pipe', 1, 0);
model.result.dataset('cln2').setIndex('genpoints', 'if(N_pipe == 1, r_pipe, x_i_pipe+r_i_pipe*cos(pi/N_pipe))', 0, 1);
model.result.dataset('cln2').setIndex('genpoints', 'if(N_pipe == 1, r_pipe, x_i_pipe+r_i_pipe*cos(pi/N_pipe))', 1, 1);
model.result.dataset('cln2').setIndex('genpoints', 'if(N_pipe == 1, 0, y_i_pipe+r_i_pipe*sin(pi/N_pipe))', 0, 2);
model.result.dataset('cln2').setIndex('genpoints', 'if(N_pipe == 1, 0, y_i_pipe+r_i_pipe*sin(pi/N_pipe))', 1, 2);
model.result.dataset('cln2').set('snapping', 'boundary');
model.result.dataset.create('mir1', 'Mirror3D');
model.result.dataset('mir1').label('Mirror of Domain');
model.result.dataset('mir1').set('planetype', 'general');
model.result.dataset('mir1').setIndex('genpoints', 'L_pipe', 1, 0);
model.result.dataset('mir1').setIndex('genpoints', 'L_pipe', 2, 0);
model.result.dataset('mir1').setIndex('genpoints', 'R_air*cos(2*pi/N_pipe/2)', 2, 1);
model.result.dataset('mir1').setIndex('genpoints', 'R_air*sin(2*pi/N_pipe/2)', 2, 2);
model.result.dataset.create('sec1', 'Sector3D');
model.result.dataset('sec1').label('Revolution of Domain');
model.result.dataset('sec1').set('data', 'mir1');
model.result.dataset('sec1').setIndex('genpoints', 'L_pipe', 1, 0);
model.result.dataset('sec1').setIndex('genpoints', 0, 1, 2);
model.result.dataset('sec1').set('sectors', 'max(N_pipe,2)');
model.result.dataset.create('cpl1', 'CutPlane');
model.result.dataset('cpl1').label('x Cut Plane');
model.result.dataset('cpl1').set('quickx', 'x_coil+L_coil/2');
model.result.dataset.create('sec2', 'Sector2D');
model.result.dataset('sec2').label('Revolution of x Cut Plane');
model.result.dataset('sec2').set('data', 'cpl1');
model.result.dataset('sec2').set('sectors', 'N_pipe*2');
model.result.dataset.create('dset4', 'Solution');
model.result.dataset('dset4').label('Study 1/Solution 1 in Tubes');
model.result.dataset('dset4').selection.geom('geom1', 3);
model.result.dataset('dset4').selection.named('geom1_csel1_dom');
model.result.dataset.create('cpl2', 'CutPlane');
model.result.dataset('cpl2').label('Tubes, x Cut Plane');
model.result.dataset('cpl2').set('data', 'dset4');
model.result.dataset('cpl2').set('quickx', 'x_coil + L_coil/2');
model.result.dataset.create('dset5', 'Solution');
model.result.dataset('dset5').label('Study 1/Solution 1 in Coil');
model.result.dataset('dset5').selection.geom('geom1', 3);
model.result.dataset('dset5').selection.named('int5');
model.result.dataset.create('sec3', 'Sector3D');
model.result.dataset('sec3').label('Revolution of Coil');
model.result.dataset('sec3').set('data', 'dset5');
model.result.dataset('sec3').setIndex('genpoints', 'L_pipe', 1, 0);
model.result.dataset('sec3').setIndex('genpoints', 0, 1, 2);
model.result.dataset('sec3').set('sectors', 'N_pipe*2');
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Global Evaluation: Thermal Efficiency');
model.result.numerical('gev1').setIndex('expr', '2*ht.QInt/mf.PCoil_1*100', 0);
model.result.numerical('gev1').setIndex('unit', 1, 0);
model.result.numerical('gev1').setIndex('descr', '', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Global Evaluation: Thermal Efficiency');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result.numerical.create('max1', 'MaxVolume');
model.result.numerical('max1').label('Max Temperature in Fluid');
model.result.numerical('max1').selection.named('geom1_csel2_dom');
model.result.numerical('max1').setIndex('expr', 'T', 0);
model.result.numerical('max1').setIndex('unit', 'degC', 0);
model.result.numerical('max1').setIndex('descr', 'Temperature', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Max Temperature in Fluid');
model.result.numerical('max1').set('table', 'tbl2');
model.result.numerical('max1').setResult;
model.result.numerical.create('av1', 'AvSurface');
model.result.numerical('av1').set('intvolume', true);
model.result.numerical('av1').label('Average Temperature Elevation at Pipes Outlet');
model.result.numerical('av1').selection.named('int2');
model.result.numerical('av1').setIndex('expr', 'T-(T_in-273.15)', 0);
model.result.numerical('av1').setIndex('unit', 'degC', 0);
model.result.numerical('av1').setIndex('descr', '', 0);
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').comments('Average Temperature Elevation at Pipes Outlet');
model.result.numerical('av1').set('table', 'tbl3');
model.result.numerical('av1').setResult;
model.result.numerical.create('min1', 'MinSurface');
model.result.numerical('min1').label('Min Temperature at Pipes Outlet');
model.result.numerical('min1').selection.named('int2');
model.result.numerical('min1').setIndex('expr', 'T', 0);
model.result.numerical('min1').setIndex('unit', 'degC', 0);
model.result.numerical('min1').setIndex('descr', 'Temperature', 0);
model.result.table.create('tbl4', 'Table');
model.result.table('tbl4').comments('Min Temperature at Pipes Outlet');
model.result.numerical('min1').set('table', 'tbl4');
model.result.numerical('min1').setResult;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Temperature over x');
model.result('pg8').set('titletype', 'manual');
model.result('pg8').set('title', 'Center (blue) and interior wall (green)');
model.result('pg8').create('lngr1', 'LineGraph');
model.result('pg8').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg8').feature('lngr1').set('linewidth', 'preference');
model.result('pg8').feature('lngr1').set('data', 'cln1');
model.result('pg8').feature('lngr1').set('unit', 'degC');
model.result('pg8').feature('lngr1').set('xdata', 'expr');
model.result('pg8').feature('lngr1').set('xdataexpr', 'x');
model.result('pg8').feature.duplicate('lngr2', 'lngr1');
model.result('pg8').run;
model.result('pg8').feature('lngr2').set('data', 'cln2');
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').run;
model.result('pg9').label('Temperature at x Cut Plane');
model.result('pg9').set('data', 'cpl2');
model.result('pg9').set('titletype', 'none');
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('unit', 'degC');
model.result('pg9').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').run;
model.result('pg10').label('Fluid flow at x Cut Plane');
model.result('pg10').set('data', 'cpl2');
model.result('pg10').set('titletype', 'none');
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', 'spf.U');
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup2D');
model.result('pg11').run;
model.result('pg11').label('Magnetic Flux at x Cut Plane');
model.result('pg11').set('data', 'cpl1');
model.result('pg11').set('edges', false);
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('expr', 'mf.normB');
model.result('pg11').feature('surf1').set('rangecoloractive', true);
model.result('pg11').feature('surf1').set('rangecolormin', 0.0155);
model.result('pg11').feature('surf1').set('rangecolormax', 0.1);
model.result('pg11').feature('surf1').set('titletype', 'none');
model.result('pg11').run;
model.result('pg11').create('con1', 'Contour');
model.result('pg11').feature('con1').set('expr', 'sqrt(y^2 + z^2)');
model.result('pg11').feature('con1').set('titletype', 'none');
model.result('pg11').feature('con1').set('levelmethod', 'levels');
model.result('pg11').feature('con1').set('levels', 'range(R_coil-R_wire,2*R_wire,R_coil+R_wire)');
model.result('pg11').feature('con1').set('coloring', 'uniform');
model.result('pg11').feature('con1').set('color', 'white');
model.result('pg11').feature('con1').set('colorlegend', false);
model.result('pg11').run;
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').run;
model.result('pg12').label('Full Solution');
model.result('pg12').set('data', 'sec1');
model.result('pg12').create('surf1', 'Surface');
model.result('pg12').feature('surf1').set('unit', 'degC');
model.result('pg12').feature('surf1').set('titletype', 'none');
model.result('pg12').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg12').run;
model.result('pg12').create('str1', 'Streamline');
model.result('pg12').feature('str1').setIndex('expr', 'mf.Bx', 0);
model.result('pg12').feature('str1').setIndex('expr', 'mf.By', 1);
model.result('pg12').feature('str1').set('expr', {'mf.Bx' 'mf.By' 'mf.Bz'});
model.result('pg12').feature('str1').set('color', 'fromtheme');
model.result('pg12').feature('str1').set('titletype', 'none');

model.view('view1').set('showgrid', false);

model.result('pg12').run;
model.result('pg12').create('slc1', 'Slice');
model.result('pg12').feature('slc1').set('expr', 'mf.normB');
model.result('pg12').feature('slc1').set('quickxnumber', 1);
model.result('pg12').feature('slc1').set('interactive', true);
model.result('pg12').feature('slc1').set('titletype', 'none');
model.result('pg12').feature('slc1').set('rangecoloractive', true);
model.result('pg12').feature('slc1').set('rangecolormin', 0.02);
model.result('pg12').feature('slc1').set('rangecolormax', 0.1);
model.result.create('pg13', 'PlotGroup3D');
model.result('pg13').run;
model.result('pg13').label('Full Geometry');
model.result('pg13').set('data', 'sec1');
model.result('pg13').set('titletype', 'none');
model.result('pg13').set('edges', false);
model.result('pg13').set('showlegends', false);
model.result('pg13').create('surf1', 'Surface');
model.result('pg13').feature('surf1').set('expr', 'ht.rho');
model.result('pg13').feature('surf1').set('titletype', 'none');
model.result('pg13').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg13').run;
model.result('pg13').create('surf2', 'Surface');
model.result('pg13').feature('surf2').set('data', 'sec3');
model.result('pg13').feature('surf2').set('expr', 'mf.PCoil_1');
model.result('pg13').feature('surf2').set('descr', 'Coil power');
model.result('pg13').run;
model.result('pg12').run;

model.title('Inline Induction Heater');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' A model using symmetry while the results are visualized in full 3D' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Provides info if the results are above or below certain critical values' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Selecting predefined or user-defined materials' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Error control of geometry parameters using methods and presentation of possible errors using card stacks' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Sliders and buttons to control the position of the slice when visualizing the results with a slice plot' newline  newline 'The app computes the efficiency of a magnetic induction apparatus for the heating of liquid food flowing in a set of ferritic stainless steel pipes.' newline  newline 'Ferritic stainless steels become more and more used in food processing due to their relatively low and stable price, and their magnetic properties that allow using new heating techniques.' newline  newline 'A circular electromagnetic coil is wound around a set of pipes in which a fluid flows. The alternating current passing through the coil generates an alternating magnetic field that penetrates the pipes, generates eddy currents inside them, and heats them up. Then heat is transferred to the fluid essentially by conduction.' newline  newline 'Various configurations are available for the set of pipes (number, length, thickness, material) and for the coil (number of turns, wire radius, current density, and excitation frequency) to optimize the heat exchange with the fluid, while ensuring homogeneous temperatures within it for a given flow rate.']);

model.label('inline_induction_heater.mph');

model.result('pg12').run;

model.title('Inline Induction Heater');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' A model using symmetry while the results are visualized in full 3D' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Provides info if the results are above or below certain critical values' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Selecting predefined or user-defined materials' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Error control of geometry parameters using methods and presentation of possible errors using card stacks' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Sliders and buttons to control the position of the slice when visualizing the results with a slice plot' newline  newline 'The app computes the efficiency of a magnetic induction apparatus for the heating of liquid food flowing in a set of ferritic stainless steel pipes.' newline  newline 'Ferritic stainless steels become more and more used in food processing due to their relatively low and stable price, and their magnetic properties that allow using new heating techniques.' newline  newline 'A circular electromagnetic coil is wound around a set of pipes in which a fluid flows. The alternating current passing through the coil generates an alternating magnetic field that penetrates the pipes, generates eddy currents inside them, and heats them up. Then heat is transferred to the fluid essentially by conduction.' newline  newline 'Various configurations are available for the set of pipes (number, length, thickness, material) and for the coil (number of turns, wire radius, current density, and excitation frequency) to optimize the heat exchange with the fluid, while ensuring homogeneous temperatures within it for a given flow rate.']);

model.setExpectedComputationTime('2 minutes');

model.result.report.create('rpt1', 'Report');
model.result.report('rpt1').set('format', 'docx');
model.result.report('rpt1').set('filename', 'user:///inline_induction_heater.docx');
model.result.report('rpt1').set('imagesize', 'large');
model.result.report('rpt1').feature.create('tp1', 'TitlePage');
model.result.report('rpt1').feature('tp1').set('frontmatterlayout', 'headings');
model.result.report('rpt1').feature('tp1').set('logo', 'none');
model.result.report('rpt1').feature('tp1').set('includeacknowledgment', false);
model.result.report('rpt1').feature.create('toc1', 'TableOfContents');
model.result.report('rpt1').feature('toc1').label('Table of Contents');
model.result.report('rpt1').feature('toc1').set('levels', '1');
model.result.report('rpt1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').label('Software Information');
model.result.report('rpt1').feature('sec1').feature.create('comp1', 'ModelNode');
model.result.report('rpt1').feature('sec1').feature('comp1').label('Software Properties');
model.result.report('rpt1').feature('sec1').feature('comp1').set('noderef', 'none');
model.result.report('rpt1').feature('sec1').feature('comp1').set('includeunitsystem', false);
model.result.report('rpt1').feature('sec1').feature.create('std1', 'Study');
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').label('Input Data');
model.result.report('rpt1').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec1').label('Pipes and Coil Geometry');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').label('Parameters');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 5, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 6, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 9, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 13, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 14, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 15, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 16, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 17, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 18, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 19, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 20, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 21, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 22, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 23, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 24, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 25, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 26, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 27, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 28, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 29, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 30, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 31, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 32, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 33, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 34, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 35, 1);
model.result.report('rpt1').feature('sec2').feature.duplicate('sec2', 'sec1');
model.result.report('rpt1').feature('sec2').feature('sec2').label('Pipes Material');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('param1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('param1').setIndex('children', false, 7, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('param1').setIndex('children', false, 8, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('param1').setIndex('children', false, 10, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('param1').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('param1').setIndex('children', false, 12, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('param1').setIndex('children', true, 24, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('param1').setIndex('children', true, 25, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('param1').setIndex('children', true, 26, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('param1').setIndex('children', true, 27, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('param1').setIndex('children', true, 28, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('param1').setIndex('children', true, 29, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature.create('mat1', 'Material');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('mat1').set('noderef', 'matlnk2');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('mat1').set('includeimage', false);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('mat1').set('includeselection', false);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('mat1').set('includesettings', false);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('mat1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec2').feature.duplicate('sec3', 'sec1');
model.result.report('rpt1').feature('sec2').feature('sec3').label('Coil Activation');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('param1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('param1').setIndex('children', false, 7, 1);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('param1').setIndex('children', false, 8, 1);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('param1').setIndex('children', false, 10, 1);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('param1').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('param1').setIndex('children', false, 12, 1);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('param1').setIndex('children', true, 14, 1);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('param1').setIndex('children', true, 15, 1);
model.result.report('rpt1').feature('sec2').feature.duplicate('sec4', 'sec2');
model.result.report('rpt1').feature('sec2').feature('sec4').label('Flow Conditions');
model.result.report('rpt1').feature('sec2').feature('sec4').feature('mat1').set('noderef', 'matlnk1');
model.result.report('rpt1').feature('sec2').feature('sec4').feature('param1').setIndex('children', true, 20, 1);
model.result.report('rpt1').feature('sec2').feature('sec4').feature('param1').setIndex('children', true, 23, 1);
model.result.report('rpt1').feature('sec2').feature('sec4').feature('param1').setIndex('children', false, 24, 1);
model.result.report('rpt1').feature('sec2').feature('sec4').feature('param1').setIndex('children', false, 25, 1);
model.result.report('rpt1').feature('sec2').feature('sec4').feature('param1').setIndex('children', false, 26, 1);
model.result.report('rpt1').feature('sec2').feature('sec4').feature('param1').setIndex('children', false, 27, 1);
model.result.report('rpt1').feature('sec2').feature('sec4').feature('param1').setIndex('children', false, 28, 1);
model.result.report('rpt1').feature('sec2').feature('sec4').feature('param1').setIndex('children', false, 29, 1);
model.result.report('rpt1').feature('sec2').feature.duplicate('sec5', 'sec1');
model.result.report('rpt1').feature('sec2').feature('sec5').label('Target Temperatures');
model.result.report('rpt1').feature('sec2').feature('sec5').feature('param1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec2').feature('sec5').feature('param1').setIndex('children', false, 7, 1);
model.result.report('rpt1').feature('sec2').feature('sec5').feature('param1').setIndex('children', false, 8, 1);
model.result.report('rpt1').feature('sec2').feature('sec5').feature('param1').setIndex('children', false, 10, 1);
model.result.report('rpt1').feature('sec2').feature('sec5').feature('param1').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec2').feature('sec5').feature('param1').setIndex('children', false, 12, 1);
model.result.report('rpt1').feature('sec2').feature('sec5').feature('param1').setIndex('children', true, 34, 1);
model.result.report('rpt1').feature('sec2').feature('sec5').feature('param1').setIndex('children', true, 35, 1);
model.result.report('rpt1').feature('sec2').feature.duplicate('sec6', 'sec1');
model.result.report('rpt1').feature('sec2').feature('sec6').label('Computation');
model.result.report('rpt1').feature('sec2').feature('sec6').feature('param1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec2').feature('sec6').feature('param1').setIndex('children', false, 7, 1);
model.result.report('rpt1').feature('sec2').feature('sec6').feature('param1').setIndex('children', false, 8, 1);
model.result.report('rpt1').feature('sec2').feature('sec6').feature('param1').setIndex('children', false, 10, 1);
model.result.report('rpt1').feature('sec2').feature('sec6').feature('param1').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec2').feature('sec6').feature('param1').setIndex('children', false, 12, 1);
model.result.report('rpt1').feature('sec2').feature('sec6').feature('param1').setIndex('children', true, 33, 1);
model.result.report('rpt1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').label('Component');
model.result.report('rpt1').feature('sec3').feature.create('geom1', 'Geometry');
model.result.report('rpt1').feature('sec3').feature('geom1').label('Geometry');
model.result.report('rpt1').feature('sec3').feature('geom1').set('includeunits', false);
model.result.report('rpt1').feature('sec3').feature('geom1').set('includestats', false);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 5, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 6, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 7, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 8, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 9, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 10, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec3').feature.create('mesh1', 'Mesh');
model.result.report('rpt1').feature('sec3').feature('mesh1').label('Mesh');
model.result.report('rpt1').feature('sec3').feature('mesh1').set('includestats', true);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature.create('sec4', 'Section');
model.result.report('rpt1').feature('sec4').label('Results');
model.result.report('rpt1').feature('sec4').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('pg1').label('Pipes configuration');
model.result.report('rpt1').feature('sec4').feature('pg1').set('noderef', 'pg13');
model.result.report('rpt1').feature('sec4').feature('pg1').set('caption', 'custom');
model.result.report('rpt1').feature('sec4').feature('pg1').set('customcaption', 'Pipes configuration');
model.result.report('rpt1').feature('sec4').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 5, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 6, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 7, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 8, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 9, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 10, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 12, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 13, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 15, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 16, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 17, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 19, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 20, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 21, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 22, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 23, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 24, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 25, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 26, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 27, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 28, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 29, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 30, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 31, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 33, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 34, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 35, 1);
model.result.report('rpt1').feature('sec4').feature.create('pg2', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('pg2').label('Magnetic flux, Temperature');
model.result.report('rpt1').feature('sec4').feature('pg2').set('noderef', 'pg12');
model.result.report('rpt1').feature('sec4').feature('pg2').set('caption', 'custom');
model.result.report('rpt1').feature('sec4').feature('pg2').set('customcaption', 'Magnetic flux, Temperature');
model.result.report('rpt1').feature('sec4').feature.create('pg3', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('pg3').label('Magnetic flux at cut plane');
model.result.report('rpt1').feature('sec4').feature('pg3').set('noderef', 'pg11');
model.result.report('rpt1').feature('sec4').feature('pg3').set('caption', 'custom');
model.result.report('rpt1').feature('sec4').feature('pg3').set('customcaption', 'Magnetic flux at cut plane');
model.result.report('rpt1').feature('sec4').feature.create('pg4', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('pg4').label('Temperature along the pipes');
model.result.report('rpt1').feature('sec4').feature('pg4').set('noderef', 'pg8');
model.result.report('rpt1').feature('sec4').feature('pg4').set('caption', 'custom');
model.result.report('rpt1').feature('sec4').feature('pg4').set('customcaption', 'Temperature along the pipes');
model.result.report('rpt1').feature('sec4').feature.create('pg5', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('pg5').label('Temperature at cut plane');
model.result.report('rpt1').feature('sec4').feature('pg5').set('noderef', 'pg9');
model.result.report('rpt1').feature('sec4').feature('pg5').set('caption', 'custom');
model.result.report('rpt1').feature('sec4').feature('pg5').set('customcaption', 'Temperature at cut plane');
model.result.report('rpt1').feature('sec4').feature.create('pg6', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('pg6').label('Fluid velocity at cut plane');
model.result.report('rpt1').feature('sec4').feature('pg6').set('noderef', 'pg10');
model.result.report('rpt1').feature('sec4').feature('pg6').set('caption', 'custom');
model.result.report('rpt1').feature('sec4').feature('pg6').set('customcaption', 'Fluid velocity at cut plane');
model.result.report('rpt1').feature('sec4').feature.create('mtbl1', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl1').label('Table: Max temperature in fluid');
model.result.report('rpt1').feature('sec4').feature('mtbl1').set('noderef', 'tbl2');
model.result.report('rpt1').feature('sec4').feature.create('mtbl2', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl2').label('Table: Min temperature at outlet');
model.result.report('rpt1').feature('sec4').feature('mtbl2').set('noderef', 'tbl4');
model.result.report('rpt1').feature('sec4').feature.create('mtbl3', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl3').label('Table: Average temperature elevation at outlet');
model.result.report('rpt1').feature('sec4').feature('mtbl3').set('noderef', 'tbl3');
model.result.report('rpt1').feature('sec4').feature.create('mtbl4', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl4').label('Table: Thermal efficiency');

model.title('Inline Induction Heater');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' A model using symmetry while the results are visualized in full 3D' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Provides info if the results are above or below certain critical values' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Selecting predefined or user-defined materials' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Error control of geometry parameters using methods and presentation of possible errors using card stacks' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Sliders and buttons to control the position of the slice when visualizing the results with a slice plot' newline  newline 'The app computes the efficiency of a magnetic induction apparatus for the heating of liquid food flowing in a set of ferritic stainless steel pipes.' newline  newline 'Ferritic stainless steels become more and more used in food processing due to their relatively low and stable price, and their magnetic properties that allow using new heating techniques.' newline  newline 'A circular electromagnetic coil is wound around a set of pipes in which a fluid flows. The alternating current passing through the coil generates an alternating magnetic field that penetrates the pipes, generates eddy currents inside them, and heats them up. Then heat is transferred to the fluid essentially by conduction.' newline  newline 'Various configurations are available for the set of pipes (number, length, thickness, material) and for the coil (number of turns, wire radius, current density, and excitation frequency) to optimize the heat exchange with the fluid, while ensuring homogeneous temperatures within it for a given flow rate.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('inline_induction_heater.mph');

model.modelNode.label('Components');

out = model;
