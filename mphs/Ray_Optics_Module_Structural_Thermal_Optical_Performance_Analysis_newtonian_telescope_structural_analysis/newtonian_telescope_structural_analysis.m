function out = model
%
% newtonian_telescope_structural_analysis.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Ray_Optics_Module/Structural_Thermal_Optical_Performance_Analysis');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('gop', 'GeometricalOptics', 'geom1');
model.physics('gop').model('comp1');

model.study.create('std1');
model.study('std1').create('rtrac', 'RayTracing');
model.study('std1').feature('rtrac').setSolveFor('/physics/gop', true);

model.geom('geom1').label('Newtonian Telescope Structural Analysis Geometry Sequence');
model.geom('geom1').lengthUnit('mm');
model.geom('geom1').insertFile('newtonian_telescope_structural_analysis_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');

model.view('view1').camera.set('projection', 'orthographic');

model.param.label('Parameters 1: Telescope Geometry');
model.param.set('theta', '45[deg]');
model.param.descr('theta', 'Telescope inclination');
model.param.create('par2');
model.param('par2').label('Parameters 2: Wavelengths and Fields');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('lam', '550[nm]', 'Central wavelength');
model.param('par2').set('N_hex', '12', 'Number of hexapolar radial rings');
model.param('par2').set('theta_x1', '0.0[arcmin]', 'Field angle (x)');
model.param('par2').set('theta_y1', '0.0[arcmin]', 'Field angle (y)');
model.param('par2').set('theta_x2', '2.0[arcmin]', 'Field angle (x)');
model.param('par2').set('theta_y2', '0.0[arcmin]', 'Field angle (y)');
model.param('par2').set('vx1', 'sin(theta_x1)', 'Ray direction vector, x-component');
model.param('par2').set('vy1', 'sin(theta+theta_y1)', 'Ray direction vector, y-component');
model.param('par2').set('vz1', '-sqrt(1-vx1^2-vy1^2)', 'Ray direction vector, z-component');
model.param('par2').set('dx1', '-f*vx1', 'Object plane x-coordinate');
model.param('par2').set('dy1', '-f*vy1', 'Object plane y-coordinate');
model.param('par2').set('dz1', '-f*vz1', 'Object plane z-coordinate (relative to primary vertex)');
model.param('par2').set('vx2', 'sin(theta_x2)', 'Ray direction vector, x-component');
model.param('par2').set('vy2', 'sin(theta+theta_y2)', 'Ray direction vector, y-component');
model.param('par2').set('vz2', '-sqrt(1-vx2^2-vy2^2)', 'Ray direction vector, z-component');
model.param('par2').set('dx2', '-f*vx2', 'Object plane x-coordinate');
model.param('par2').set('dy2', '-f*vy2', 'Object plane y-coordinate');
model.param('par2').set('dz2', '-f*vz2', 'Object plane z-coordinate (relative to primary vertex)');
model.param('par2').set('r_Airy', 'f*1.22*lam/d_pupil', 'Airy disc radius');

model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').label('Aluminum 6063-T83');
model.material('mat1').set('family', 'aluminum');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'3.030e7[S/m]' '0' '0' '0' '3.030e7[S/m]' '0' '0' '0' '3.030e7[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'23.4e-6[1/K]' '0' '0' '0' '23.4e-6[1/K]' '0' '0' '0' '23.4e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'201[W/(m*K)]' '0' '0' '0' '201[W/(m*K)]' '0' '0' '0' '201[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '69[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.33');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('Steel AISI 4340');
model.material('mat2').set('family', 'steel');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.28');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat3').label('Silica glass');
model.material('mat3').set('family', 'custom');
model.material('mat3').set('customambient', [1 1 1]);
model.material('mat3').set('noise', true);
model.material('mat3').set('fresnel', 0.99);
model.material('mat3').set('roughness', 0.02);
model.material('mat3').set('metallic', 0);
model.material('mat3').set('pearl', 0);
model.material('mat3').set('diffusewrap', 0);
model.material('mat3').set('clearcoat', 0);
model.material('mat3').set('reflectance', 0);
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'1e-14[S/m]' '0' '0' '0' '1e-14[S/m]' '0' '0' '0' '1e-14[S/m]'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'0.55e-6[1/K]' '0' '0' '0' '0.55e-6[1/K]' '0' '0' '0' '0.55e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '703[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'3.75' '0' '0' '0' '3.75' '0' '0' '0' '3.75'});
model.material('mat3').propertyGroup('def').set('density', '2203[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'1.38[W/(m*K)]' '0' '0' '0' '1.38[W/(m*K)]' '0' '0' '0' '1.38[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '73.1[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.17');
model.material('mat3').propertyGroup('RefractiveIndex').set('n', {'1.45' '0' '0' '0' '1.45' '0' '0' '0' '1.45'});
model.material('mat2').selection.set([1 7 10 11 12 14 16 17 18 19]);
model.material('mat3').selection.set([9 13]);

model.physics('gop').selection.set([]);
model.physics('gop').prop('MaximumSecondary').setIndex('MaximumSecondary', 0, 0);
model.physics('gop').prop('ComputeOpticalPathLength').setIndex('ComputeOpticalPathLength', 1, 0);
model.physics('gop').prop('CountReflections').setIndex('CountReflections', 1, 0);
model.physics('gop').feature('op1').set('lambda0', 'lam');
model.physics('gop').create('relg1', 'ReleaseGrid', -1);
model.physics('gop').feature('relg1').set('GridType', 'Hexapolar');
model.physics('gop').feature('relg1').set('qcc', {'dx1' 'dy1' 'dz1'});
model.physics('gop').feature('relg1').set('rcc', {'vx1' 'vy1' 'vz1'});
model.physics('gop').feature('relg1').set('Rc', 'd_pupil/2');
model.physics('gop').feature('relg1').setIndex('Ncr', 'N_hex', 0);
model.physics('gop').feature('relg1').set('L0', {'vx1' 'vy1' 'vz1'});
model.physics('gop').feature.duplicate('relg2', 'relg1');
model.physics('gop').feature('relg2').set('qcc', {'dx2' 'dy2' 'dz2'});
model.physics('gop').feature('relg2').set('rcc', {'vx2' 'vy2' 'vz2'});
model.physics('gop').feature('relg2').set('L0', {'vx2' 'vy2' 'vz2'});
model.physics('gop').create('mir1', 'Mirror', 2);
model.physics('gop').feature('mir1').label('Primary Mirror');
model.physics('gop').feature('mir1').selection.named('geom1_pi1_cylsel1');
model.physics('gop').create('wall1', 'Wall', 2);
model.physics('gop').feature('wall1').label('Secondary Mirror');
model.physics('gop').feature('wall1').selection.named('geom1_pi2_cylsel1');
model.physics('gop').feature('wall1').set('WallCondition', 'SpecularReflection');
model.physics('gop').feature('wall1').set('PrimaryRayCondition', 'Expression');
model.physics('gop').feature('wall1').set('e', 'gop.Nrefl>0');
model.physics('gop').feature('wall1').set('Otherwise', 'Pass');
model.physics('gop').create('wall2', 'Wall', 2);
model.physics('gop').feature('wall2').label('Primary Obstructions');
model.physics('gop').feature('wall2').set('WallCondition', 'Disappear');
model.physics('gop').feature('wall2').selection.named('geom1_csel1_bnd');
model.physics('gop').create('wall3', 'Wall', 2);
model.physics('gop').feature('wall3').label('Secondary Obstructions');
model.physics('gop').feature('wall3').set('WallCondition', 'Disappear');
model.physics('gop').feature('wall3').selection.named('geom1_csel2_bnd');
model.physics('gop').create('wall4', 'Wall', 2);
model.physics('gop').feature('wall4').label('Image Plane');
model.physics('gop').feature('wall4').selection.named('geom1_csel3_bnd');

model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('size1').selection.named('geom1_pi1_cylsel1');
model.mesh('mesh1').feature('size1').set('hauto', 1);
model.mesh('mesh1').create('size2', 'Size');
model.mesh('mesh1').feature('size2').selection.geom('geom1', 3);
model.mesh('mesh1').feature('size2').selection.named('geom1_uni1_dom');
model.mesh('mesh1').feature('size2').selection.set([3 6 8]);
model.mesh('mesh1').feature('size2').set('hauto', 4);
model.mesh('mesh1').create('size3', 'Size');
model.mesh('mesh1').feature('size3').selection.geom('geom1', 2);
model.mesh('mesh1').feature('size3').selection.set([20 121 122 140 143]);
model.mesh('mesh1').feature('size3').set('hauto', 4);
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').run;

model.study('std1').feature('rtrac').set('timestepspec', 'specifylength');
model.study('std1').feature('rtrac').set('lunit', 'mm');
model.study('std1').feature('rtrac').set('llist', '0 2.10*f');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'rtrac');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'rtrac');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.01,1)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 1.0E-5);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', false);
model.sol('sol1').feature('t1').set('storeudot', false);
model.sol('sol1').feature('t1').set('tstepsgenalpha', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('timemethod', 'genalpha');
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('control', 'rtrac');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset.create('ray1', 'Ray');
model.result.dataset('ray1').set('solution', 'sol1');
model.result.dataset('ray1').set('posdof', {'comp1.qx' 'comp1.qy' 'comp1.qz'});
model.result.dataset('ray1').set('geom', 'geom1');
model.result.dataset('ray1').set('rgeom', 'pgeom_gop');
model.result.dataset('ray1').set('rgeomspec', 'fromphysics');
model.result.dataset('ray1').set('physicsinterface', 'gop');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'ray1');
model.result('pg1').setIndex('looplevel', 2, 0);
model.result('pg1').label('Ray Trajectories (gop)');
model.result('pg1').create('rtrj1', 'RayTrajectories');
model.result('pg1').feature('rtrj1').set('linetype', 'line');
model.result('pg1').feature('rtrj1').create('col1', 'Color');
model.result('pg1').feature('rtrj1').feature('col1').set('expr', 'gop.L');
model.result('pg1').feature('rtrj1').create('filt1', 'RayTrajectoriesFilter');
model.result('pg1').run;
model.result('pg1').label('Ray Diagram - Undeformed');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').run;
model.result('pg1').feature('rtrj1').feature('col1').set('expr', 'at(''last'',gop.rrel)');
model.result('pg1').feature('rtrj1').feature('col1').set('unit', 'um');
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').run;
model.result('pg2').label('Spot Diagram - Undeformed');
model.result('pg2').set('xlabelactive', true);
model.result('pg2').set('xlabel', 'X');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Y');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').create('spot1', 'SpotDiagram');
model.result('pg2').feature('spot1').set('transverse', 'userdefined');
model.result('pg2').feature('spot1').set('transverseexpr', {'0' 'cos(theta)' '0'});
model.result('pg2').feature('spot1').setIndex('transverseexpr', 'sin(theta)', 2);
model.result('pg2').feature('spot1').set('origin', 'area');
model.result('pg2').feature('spot1').set('layout', 'rectangular');
model.result('pg2').feature('spot1').set('columns', 1);
model.result('pg2').feature('spot1').set('spotcoordsactive', true);
model.result('pg2').feature('spot1').set('spotcoordssystem', 'global');
model.result('pg2').feature('spot1').set('spotcoordsprecision', 6);
model.result('pg2').feature('spot1').set('fitannotationstospot', true);
model.result('pg2').feature('spot1').create('col1', 'Color');
model.result('pg2').run;
model.result('pg2').feature('spot1').feature('col1').set('expr', 'at(0,gop.rrel)');
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').run;
model.result('pg3').label('Aberration Diagram - Undeformed');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').create('oab1', 'OpticalAberration');
model.result('pg3').feature('oab1').set('filterreleaseactive', true);
model.result.dataset.create('ip1', 'IntersectionPoint3D');
model.result('pg3').feature('oab1').set('data', 'ip1');
model.result.dataset('ip1').set('data', 'ray1');
model.result.dataset('ip1').set('type', 'hemisphere');
model.result.dataset('ip1').setIndex('center', '-200.00000000000225[mm]', 0);
model.result.dataset('ip1').setIndex('axis', '0.9999999160299629', 0);
model.result.dataset('ip1').setIndex('center', '-530.3300858899133[mm]', 1);
model.result.dataset('ip1').setIndex('axis', '-2.8977583353391066E-4', 1);
model.result.dataset('ip1').setIndex('center', '530.3300858899134[mm]', 2);
model.result.dataset('ip1').setIndex('axis', '2.897758335335178E-4', 2);
model.result.dataset('ip1').set('radius', '50[mm]');
model.result('pg3').feature('oab1').run;
model.result('pg3').feature('oab1').set('colortable', 'Dipole');
model.result('pg3').feature('oab1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').feature.duplicate('oab2', 'oab1');
model.result('pg3').run;
model.result('pg3').feature('oab2').set('filterrelease', 2);
model.result('pg3').feature('oab2').set('posexpr', {'2.5' '0'});
model.result('pg3').feature('oab2').set('terms', 'selectindividual');
model.result('pg3').feature('oab2').set('z3m1', true);
model.result('pg3').feature('oab2').set('z31', true);
model.result('pg3').feature('oab2').set('inheritplot', 'oab1');
model.result('pg3').run;

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study('std1').feature('rtrac').setSolveFor('/physics/solid', false);

model.physics('solid').create('gacc1', 'GravityAcceleration', -1);
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.set([1 236]);

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/gop', false);
model.study('std2').feature('stat').setSolveFor('/physics/solid', true);
model.study('std2').create('rtrac', 'RayTracing');
model.study('std2').feature('rtrac').set('timestepspec', 'specifylength');
model.study('std2').feature('rtrac').set('lunit', 'mm');
model.study('std2').feature('rtrac').set('llist', '0 2.10*f');
model.study('std2').feature('rtrac').set('geometricNonlinearity', true);
model.study('std2').feature('rtrac').setEntry('activate', 'solid', false);
model.study('std2').feature('rtrac').set('useadvanceddisable', true);
model.study('std2').feature('rtrac').set('disabledphysics', {'gop/wall4'});

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').create('st2', 'StudyStep');
model.sol('sol2').feature('st2').set('study', 'std2');
model.sol('sol2').feature('st2').set('studystep', 'rtrac');
model.sol('sol2').create('v2', 'Variables');
model.sol('sol2').feature('v2').set('initmethod', 'sol');
model.sol('sol2').feature('v2').set('initsol', 'sol2');
model.sol('sol2').feature('v2').set('initsoluse', 'sol3');
model.sol('sol2').feature('v2').set('notsolmethod', 'sol');
model.sol('sol2').feature('v2').set('notsol', 'sol2');
model.sol('sol2').feature('v2').set('notsoluse', 'sol3');
model.sol('sol2').feature('v2').set('control', 'rtrac');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,0.01,1)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 1.0E-5);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('reacf', false);
model.sol('sol2').feature('t1').set('storeudot', false);
model.sol('sol2').feature('t1').set('tstepsgenalpha', 'strict');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('timemethod', 'genalpha');
model.sol('sol2').feature('t1').set('estrat', 'exclude');
model.sol('sol2').feature('t1').set('control', 'rtrac');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'i1');
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.dataset.create('ray2', 'Ray');
model.result.dataset('ray2').set('solution', 'sol2');
model.result.dataset('ray2').set('posdof', {'comp1.qx' 'comp1.qy' 'comp1.qz'});
model.result.dataset('ray2').set('geom', 'geom1');
model.result.dataset('ray2').set('rgeom', 'pgeom_gop');
model.result.dataset('ray2').set('rgeomspec', 'fromphysics');
model.result.dataset('ray2').set('physicsinterface', 'gop');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'ray2');
model.result('pg4').setIndex('looplevel', 2, 0);
model.result('pg4').label('Ray Trajectories (gop)');
model.result('pg4').create('rtrj1', 'RayTrajectories');
model.result('pg4').feature('rtrj1').set('linetype', 'line');
model.result('pg4').feature('rtrj1').create('col1', 'Color');
model.result('pg4').feature('rtrj1').feature('col1').set('expr', 'gop.L');
model.result('pg4').feature('rtrj1').create('filt1', 'RayTrajectoriesFilter');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 2, 0);
model.result('pg5').set('defaultPlotID', 'stress');
model.result('pg5').label('Stress (solid)');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').create('vol1', 'Volume');
model.result('pg5').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg5').feature('vol1').set('threshold', 'manual');
model.result('pg5').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg5').feature('vol1').set('colortable', 'Rainbow');
model.result('pg5').feature('vol1').set('colortabletrans', 'none');
model.result('pg5').feature('vol1').set('colorscalemode', 'linear');
model.result('pg5').feature('vol1').set('resolution', 'custom');
model.result('pg5').feature('vol1').set('refine', 2);
model.result('pg5').feature('vol1').set('colortable', 'Prism');
model.result('pg5').feature('vol1').create('def', 'Deform');
model.result('pg5').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg5').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result('pg4').run;
model.result('pg4').label('Ray Diagram - Deformed');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').run;
model.result('pg4').feature('rtrj1').feature('col1').set('colorlegend', false);
model.result('pg4').run;
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'solid.disp');
model.result('pg4').feature('surf1').set('colortable', 'HeatCamera');
model.result('pg4').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg4').feature('surf1').set('unit', 'um');
model.result('pg4').feature('surf1').create('def1', 'Deform');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').feature('surf1').create('tran1', 'Transparency');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg5').run;
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset2');
model.result('pg6').setIndex('looplevel', 2, 0);
model.result('pg6').set('defaultPlotID', 'volumeLoads');
model.result('pg6').label('Volume Loads (solid)');
model.result('pg6').set('showlegends', true);
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'1'});
model.result('pg6').feature('surf1').label('Gray Surfaces');
model.result('pg6').feature('surf1').set('coloring', 'uniform');
model.result('pg6').feature('surf1').set('color', 'gray');
model.result('pg6').feature('surf1').set('inheritcolor', false);
model.result('pg6').feature('surf1').set('inheritrange', false);
model.result('pg6').feature('surf1').set('inherittransparency', false);
model.result('pg6').feature('surf1').create('def', 'Deform');
model.result('pg6').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg6').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg6').feature('surf1').feature('def').set('scaleactive', true);
model.result('pg6').feature('surf1').feature('def').set('scale', 1);
model.result('pg6').feature('surf1').create('sel1', 'Selection');
model.result('pg6').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg6').feature('surf1').feature('sel1').selection.set([1 2 3 4 5 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236]);
model.result('pg6').feature('surf1').create('tran1', 'Transparency');
model.result('pg6').feature('surf1').feature('tran1').set('transparency', 0.8);
model.result('pg6').create('arwv1', 'ArrowVolume');
model.result('pg6').feature('arwv1').set('expr', {'solid.fgx' 'solid.fgy' 'solid.fgz'});
model.result('pg6').feature('arwv1').set('placement', 'gausspoints');
model.result('pg6').feature('arwv1').set('arrowbase', 'tail');
model.result('pg6').feature('arwv1').label('Gravity 1');
model.result('pg6').feature('arwv1').set('inheritplot', 'none');
model.result('pg6').feature('arwv1').create('col', 'Color');
model.result('pg6').feature('arwv1').feature('col').set('colortable', 'Rainbow');
model.result('pg6').feature('arwv1').feature('col').set('colortabletrans', 'none');
model.result('pg6').feature('arwv1').feature('col').set('colorscalemode', 'linear');
model.result('pg6').feature('arwv1').feature('col').set('colordata', 'arrowlength');
model.result('pg6').feature('arwv1').feature('col').set('coloring', 'gradient');
model.result('pg6').feature('arwv1').feature('col').set('topcolor', 'red');
model.result('pg6').feature('arwv1').feature('col').set('bottomcolor', 'custom');
model.result('pg6').feature('arwv1').feature('col').set('custombottomcolor', [0.5882353186607361 0.5137255191802979 0.5176470875740051]);
model.result('pg6').feature('arwv1').set('color', 'magenta');
model.result('pg6').feature('arwv1').create('def', 'Deform');
model.result('pg6').feature('arwv1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg6').feature('arwv1').feature('def').set('descr', 'Displacement field');
model.result('pg6').feature('arwv1').feature('def').set('scaleactive', true);
model.result('pg6').feature('arwv1').feature('def').set('scale', 1);
model.result('pg6').feature.move('surf1', 1);
model.result('pg6').label('Volume Loads (solid)');

model.nodeGroup.create('dset2solidlgrp', 'Results');
model.nodeGroup('dset2solidlgrp').label('Applied Loads (solid)');
model.nodeGroup('dset2solidlgrp').set('type', 'plotgroup');
model.nodeGroup('dset2solidlgrp').placeAfter('plotgroup', 'pg6');
model.nodeGroup('dset2solidlgrp').label('Applied Loads (solid)');
model.nodeGroup('dset2solidlgrp').placeAfter('plotgroup', 'pg6');
model.nodeGroup('dset2solidlgrp').add('plotgroup', 'pg6');

model.result('pg6').run;
model.result('pg6').run;
model.result('pg2').run;
model.result.duplicate('pg7', 'pg2');
model.result('pg7').run;
model.result('pg7').label('Spot Diagram - Deformed');
model.result('pg7').set('data', 'ray2');
model.result('pg7').run;
model.result('pg7').feature('spot1').set('filterreleaseactive', true);
model.result.dataset.create('ip2', 'IntersectionPoint3D');
model.result('pg7').feature('spot1').set('data', 'ip2');
model.result.dataset('ip2').set('data', 'ray2');
model.result.dataset('ip2').set('genmethod', 'threepoint');
model.result.dataset('ip2').setIndex('genpoints', '-200.060826722055[mm]', 0, 0);
model.result.dataset('ip2').setIndex('genpoints', '-530.3293408607177[mm]', 0, 1);
model.result.dataset('ip2').setIndex('genpoints', '530.3286812941308[mm]', 0, 2);
model.result.dataset('ip2').setIndex('genpoints', '-200.06082672205062[mm]', 1, 0);
model.result.dataset('ip2').setIndex('genpoints', '-530.3293401536109[mm]', 1, 1);
model.result.dataset('ip2').setIndex('genpoints', '530.3286820012376[mm]', 1, 2);
model.result.dataset('ip2').setIndex('genpoints', '-200.06082672164578[mm]', 2, 0);
model.result.dataset('ip2').setIndex('genpoints', '-530.3293401536109[mm]', 2, 1);
model.result.dataset('ip2').setIndex('genpoints', '530.328680587024[mm]', 2, 2);
model.result('pg7').feature('spot1').run;
model.result.dataset('ip2').set('genmethod', 'threepoint');
model.result.dataset('ip2').setIndex('genpoints', '-200.00224730303023[mm]', 0, 0);
model.result.dataset('ip2').setIndex('genpoints', '-530.3293585408048[mm]', 0, 1);
model.result.dataset('ip2').setIndex('genpoints', '530.3286978420776[mm]', 0, 2);
model.result.dataset('ip2').setIndex('genpoints', '-200.00224730302585[mm]', 1, 0);
model.result.dataset('ip2').setIndex('genpoints', '-530.329357833698[mm]', 1, 1);
model.result.dataset('ip2').setIndex('genpoints', '530.3286985491844[mm]', 1, 2);
model.result.dataset('ip2').setIndex('genpoints', '-200.00224730262102[mm]', 2, 0);
model.result.dataset('ip2').setIndex('genpoints', '-530.329357833698[mm]', 2, 1);
model.result.dataset('ip2').setIndex('genpoints', '530.3286971349709[mm]', 2, 2);
model.result('pg7').set('ispendingzoom', true);
model.result('pg7').feature('spot1').run;
model.result('pg7').feature('spot1').set('filterreleaseactive', false);
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').run;
model.result('pg8').label('Aberration Diagram - Deformed');
model.result('pg8').set('showlegendsunit', true);
model.result('pg8').set('data', 'ray2');
model.result('pg8').create('oab1', 'OpticalAberration');
model.result('pg8').feature('oab1').set('filterreleaseactive', true);
model.result.dataset.create('ip3', 'IntersectionPoint3D');
model.result('pg8').feature('oab1').set('data', 'ip3');
model.result.dataset('ip3').set('data', 'ray2');
model.result.dataset('ip3').set('type', 'hemisphere');
model.result.dataset('ip3').setIndex('center', '-200.060826722055[mm]', 0);
model.result.dataset('ip3').setIndex('axis', '0.9999999162652262', 0);
model.result.dataset('ip3').setIndex('center', '-530.3293408607177[mm]', 1);
model.result.dataset('ip3').setIndex('axis', '-2.9244455833308814E-4', 1);
model.result.dataset('ip3').setIndex('center', '530.3286812941308[mm]', 2);
model.result.dataset('ip3').setIndex('axis', '2.862616299663765E-4', 2);
model.result.dataset('ip3').set('radius', '50[mm]');
model.result('pg8').feature('oab1').run;
model.result('pg8').feature('oab1').set('terms', 'selectindividual');
model.result('pg8').feature('oab1').set('z20', true);
model.result('pg8').feature('oab1').set('z3m1', true);
model.result('pg8').feature('oab1').set('z31', true);
model.result('pg8').feature('oab1').set('colortable', 'Dipole');
model.result('pg8').feature('oab1').set('colorscalemode', 'linearsymmetric');
model.result('pg8').feature.duplicate('oab2', 'oab1');
model.result('pg8').run;
model.result('pg8').feature('oab2').set('filterrelease', 2);
model.result('pg8').feature('oab2').set('posexpr', {'2.5' '0'});
model.result('pg8').feature('oab2').set('inheritplot', 'oab1');
model.result('pg8').run;

model.title('Newtonian Telescope Structural Analysis');

model.description('This tutorial demonstrates a structural analysis of a simple telescope. The deformation of the telescope structure under gravity is examined and the effect on image quality is demonstrated.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('newtonian_telescope_structural_analysis.mph');

model.modelNode.label('Components');

out = model;
