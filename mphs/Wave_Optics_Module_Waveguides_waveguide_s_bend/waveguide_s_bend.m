function out = model
%
% waveguide_s_bend.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Wave_Optics_Module/Waveguides');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ewbe', 'ElectromagneticWavesBeamEnvelopes', 'geom1');
model.physics('ewbe').model('comp1');
model.physics.create('ewfd', 'ElectromagneticWavesFrequencyDomain', 'geom1');
model.physics('ewfd').model('comp1');
model.physics.create('g', 'GeneralFormPDE', 'geom1', {'u'});
model.physics('g').prop('EquationForm').set('form', 'Automatic');
model.physics.create('g2', 'GeneralFormPDE', 'geom1', {'u2'});
model.physics('g2').prop('EquationForm').set('form', 'Automatic');

model.study.create('std1');
model.study('std1').create('bma', 'BoundaryModeAnalysis');
model.study('std1').feature('bma').set('shiftactive', false);
model.study('std1').feature('bma').set('conrad', '1');
model.study('std1').feature('bma').set('conradynhm', '1');
model.study('std1').feature('bma').set('linpsolnum', 'auto');
model.study('std1').feature('bma').set('solnum', 'auto');
model.study('std1').feature('bma').set('notsolnum', 'auto');
model.study('std1').feature('bma').set('outputmap', {});
model.study('std1').feature('bma').set('ngenAUX', '1');
model.study('std1').feature('bma').set('goalngenAUX', '1');
model.study('std1').feature('bma').set('ngenAUX', '1');
model.study('std1').feature('bma').set('goalngenAUX', '1');
model.study('std1').feature('bma').setSolveFor('/physics/ewbe', true);
model.study('std1').feature('bma').setSolveFor('/physics/ewfd', true);
model.study('std1').feature('bma').setSolveFor('/physics/g', true);
model.study('std1').feature('bma').setSolveFor('/physics/g2', true);
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('solnum', 'auto');
model.study('std1').feature('freq').set('notsolnum', 'auto');
model.study('std1').feature('freq').set('outputmap', {});
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').setSolveFor('/physics/ewbe', true);
model.study('std1').feature('freq').setSolveFor('/physics/ewfd', true);
model.study('std1').feature('freq').setSolveFor('/physics/g', true);
model.study('std1').feature('freq').setSolveFor('/physics/g2', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('lda0', '1550[nm]', 'Wavelength');
model.param.set('f0', 'c_const/lda0', 'Frequency');
model.param.set('w_core', '1.35[um]', 'Core width');
model.param.set('w_clad', '40[um]+w_core', 'Cladding width');
model.param.set('d_bent_wg', '40[um]', 'Bent waveguide length');
model.param.set('offset', 'w_clad/8', 'Waveguide end offset');
model.param.set('d_straight_wg', '10[um]', 'Straight waveguide length');
model.param.set('n_core', '1.55', 'Core refractive index');
model.param.set('n_clad', '1.4', 'Cladding refractive index');

model.geom.load({'part1'}, 'Wave_Optics_Module/Slab_Waveguides/slab_waveguide_s_bend.mph', {'part1'});
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'core_width', 'w_core');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'cladding_width', 'w_clad');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'horizontal_displacement', 'offset');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'element_length', 'd_bent_wg');
model.geom('geom1').feature('pi1').set('rot', -90);
model.geom('geom1').run('pi1');
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Core');
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Cladding');
model.geom('geom1').selection.create('csel3', 'CumulativeSelection');
model.geom('geom1').selection('csel3').label('Non-PML');
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_unisel1', 'csel3');
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_sel1', 'csel1');
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_sel2', 'csel2');
model.geom.load({'part2'}, 'Wave_Optics_Module/Slab_Waveguides/slab_waveguide_straight.mph', {'part1'});
model.geom('geom1').create('pi2', 'PartInstance');
model.geom('geom1').feature('pi2').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi2').set('part', 'part2');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'core_width', 'w_core');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'cladding_width', 'w_clad');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'element_length', 'd_straight_wg/2');
model.geom('geom1').feature('pi2').set('rot', 90);
model.geom('geom1').feature('pi2').setEntry('selcontributetodom', 'pi2_sel1', 'csel1');
model.geom('geom1').feature('pi2').setEntry('selcontributetodom', 'pi2_sel2', 'csel2');
model.geom('geom1').feature('pi2').setEntry('selcontributetodom', 'pi2_unisel1', 'csel3');
model.geom('geom1').selection.create('csel4', 'CumulativeSelection');
model.geom('geom1').selection('csel4').label('Port 1');
model.geom('geom1').feature('pi2').setEntry('selcontributetobnd', 'pi2_unisel3', 'csel4');
model.geom('geom1').run('pi2');
model.geom('geom1').feature.duplicate('pi3', 'pi2');
model.geom('geom1').feature('pi2').set('selcontributetoobj', {});
model.geom('geom1').feature('pi2').set('selkeepobj', {});
model.geom('geom1').feature('pi2').set('selcontributetopnt', {});
model.geom('geom1').feature('pi2').set('selkeeppnt', {});
model.geom('geom1').feature('pi2').set('selshowpnt', {});
model.geom('geom1').feature('pi2').set('selcontributetobnd', {'none' 'none' 'none' 'none' 'none' 'none' 'csel4' 'none'});
model.geom('geom1').feature('pi2').set('selkeepbnd', {'off' 'off' 'off' 'off' 'off' 'off' 'off' 'off'});
model.geom('geom1').feature('pi2').set('selshowbnd', {'on' 'on' 'on' 'on' 'on' 'on' 'on' 'on'});
model.geom('geom1').feature('pi2').set('selcontributetodom', {'csel1' 'csel2' 'csel3'});
model.geom('geom1').feature('pi2').set('selkeepdom', {'off' 'off' 'off'});
model.geom('geom1').feature('pi2').set('selshowdom', {'on' 'on' 'on'});
model.geom('geom1').feature('pi3').set('displ', {'-d_straight_wg/2' '0'});
model.geom('geom1').selection.create('csel5', 'CumulativeSelection');
model.geom('geom1').selection('csel5').label('Left PML');
model.geom('geom1').feature('pi3').setEntry('selcontributetodom', 'pi3_unisel1', 'csel5');
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_unisel3', 'none');
model.geom('geom1').run('pi3');
model.geom('geom1').feature.duplicate('pi4', 'pi2');
model.geom('geom1').feature('pi2').set('selcontributetoobj', {});
model.geom('geom1').feature('pi2').set('selkeepobj', {});
model.geom('geom1').feature('pi2').set('selcontributetopnt', {});
model.geom('geom1').feature('pi2').set('selkeeppnt', {});
model.geom('geom1').feature('pi2').set('selshowpnt', {});
model.geom('geom1').feature('pi2').set('selcontributetobnd', {'none' 'none' 'none' 'none' 'none' 'none' 'csel4' 'none'});
model.geom('geom1').feature('pi2').set('selkeepbnd', {'off' 'off' 'off' 'off' 'off' 'off' 'off' 'off'});
model.geom('geom1').feature('pi2').set('selshowbnd', {'on' 'on' 'on' 'on' 'on' 'on' 'on' 'on'});
model.geom('geom1').feature('pi2').set('selcontributetodom', {'csel1' 'csel2' 'csel3'});
model.geom('geom1').feature('pi2').set('selkeepdom', {'off' 'off' 'off'});
model.geom('geom1').feature('pi2').set('selshowdom', {'on' 'on' 'on'});
model.geom('geom1').feature('pi4').set('displ', {'d_bent_wg' '-offset'});
model.geom('geom1').feature('pi4').set('rot', -90);
model.geom('geom1').selection.create('csel6', 'CumulativeSelection');
model.geom('geom1').selection('csel6').label('Port 2');
model.geom('geom1').feature('pi4').setEntry('selcontributetobnd', 'pi4_unisel3', 'csel6');
model.geom('geom1').run('pi4');
model.geom('geom1').feature.duplicate('pi5', 'pi3');
model.geom('geom1').feature('pi3').set('selcontributetoobj', {});
model.geom('geom1').feature('pi3').set('selkeepobj', {});
model.geom('geom1').feature('pi3').set('selcontributetopnt', {});
model.geom('geom1').feature('pi3').set('selkeeppnt', {});
model.geom('geom1').feature('pi3').set('selshowpnt', {});
model.geom('geom1').feature('pi3').set('selcontributetobnd', {'none' 'none' 'none' 'none' 'none' 'none' 'none' 'none'});
model.geom('geom1').feature('pi3').set('selkeepbnd', {'off' 'off' 'off' 'off' 'off' 'off' 'off' 'off'});
model.geom('geom1').feature('pi3').set('selshowbnd', {'on' 'on' 'on' 'on' 'on' 'on' 'on' 'on'});
model.geom('geom1').feature('pi3').set('selcontributetodom', {'csel1' 'csel2' 'csel5'});
model.geom('geom1').feature('pi3').set('selkeepdom', {'off' 'off' 'off'});
model.geom('geom1').feature('pi3').set('selshowdom', {'on' 'on' 'on'});
model.geom('geom1').feature('pi5').set('displ', {'d_bent_wg+d_straight_wg/2' '0'});
model.geom('geom1').feature('pi5').setIndex('displ', '-offset', 1);
model.geom('geom1').feature('pi5').set('rot', -90);
model.geom('geom1').runPre('fin');
model.geom('geom1').selection.create('csel7', 'CumulativeSelection');
model.geom('geom1').selection('csel7').label('Right PML');
model.geom('geom1').feature('pi5').setEntry('selcontributetodom', 'pi5_unisel1', 'csel7');
model.geom('geom1').create('unisel1', 'UnionSelection');
model.geom('geom1').feature('unisel1').label('PML');
model.geom('geom1').feature('unisel1').set('input', {'csel5' 'csel7'});

model.selection.create('int1', 'Intersection');
model.selection('int1').model('comp1');

model.geom('geom1').run;

model.selection('int1').label('Non-PML Core');
model.selection('int1').set('input', {'geom1_csel1_dom' 'geom1_csel3_dom'});
model.selection.duplicate('int2', 'int1');
model.selection('int2').label('Non-PML Cladding');
model.selection('int2').set('input', {'geom1_csel3_dom' 'geom1_csel2_dom'});
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Non-PML Core Boundaries');
model.selection('adj1').set('input', {'int1'});
model.selection.duplicate('adj2', 'adj1');
model.selection('adj2').label('Non-PML Cladding Boundaries');
model.selection('adj2').set('input', {'int2'});
model.selection.create('int3', 'Intersection');
model.selection('int3').model('comp1');
model.selection('int3').label('Non-PML Core-Cladding Boundaries');
model.selection('int3').set('entitydim', 1);
model.selection('int3').set('input', {'adj1' 'adj2'});

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Cladding');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'n_clad'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Core');
model.material('mat2').selection.named('geom1_csel1_dom');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'n_core'});

model.physics('ewbe').create('port1', 'Port', 1);
model.physics('ewbe').feature('port1').selection.named('geom1_csel4_bnd');
model.physics('ewbe').feature('port1').set('PortType', 'Numeric');
model.physics('ewbe').feature('port1').set('PortSlit', true);
model.physics('ewbe').feature('port1').set('SlitType', 'DomainBacked');
model.physics('ewbe').feature('port1').set('PortOrientation', 'ReversePort');
model.physics('ewbe').create('port2', 'Port', 1);
model.physics('ewbe').feature('port2').selection.named('geom1_csel6_bnd');
model.physics('ewbe').feature('port2').set('PortType', 'Numeric');
model.physics('ewbe').feature('port2').set('PortSlit', true);
model.physics('ewbe').feature('port2').set('SlitType', 'DomainBacked');
model.physics('ewbe').feature('port2').set('PortOrientation', 'ReversePort');
model.physics('ewfd').feature.copy('port1', 'ewbe/port1');
model.physics('ewfd').feature.copy('port2', 'ewbe/port2');
model.physics('g').selection.named('int1');
model.physics('g').prop('Units').set('DependentVariableQuantity', 'length');
model.physics('g').prop('Units').setIndex('CustomSourceTermUnit', 'm^-1', 0, 0);
model.physics('g').feature('gfeq1').setIndex('f', 0, 0);
model.physics('g').feature('gfeq1').setIndex('da', 0, 0);
model.physics('g').create('dir1', 'DirichletBoundary', 1);
model.physics('g').feature('dir1').selection.named('geom1_csel4_bnd');
model.physics('g').feature('dir1').setIndex('r', '-d_straight_wg/2', 0);
model.physics('g').create('flux1', 'FluxBoundary', 1);
model.physics('g').feature('flux1').selection.named('geom1_csel6_bnd');
model.physics('g').feature('flux1').setIndex('g', 1, 0);
model.physics('g').create('ge1', 'GlobalEquations', -1);
model.physics('g').feature('ge1').setIndex('name', 'u0', 0, 0);
model.physics('g').feature('ge1').set('DependentVariableQuantity', 'length');
model.physics('g').create('cons1', 'Constraint', 1);
model.physics('g').feature('cons1').selection.named('geom1_csel6_bnd');
model.physics('g').feature('cons1').setIndex('R', 'u0-u', 0);
model.physics('g2').selection.named('int2');
model.physics('g2').prop('Units').set('DependentVariableQuantity', 'length');
model.physics('g2').prop('Units').setIndex('CustomSourceTermUnit', 'm^-1', 0, 0);
model.physics('g2').feature.copy('dir1', 'g/dir1');
model.physics('g2').feature.copy('flux1', 'g/flux1');
model.physics('g2').feature.copy('cons1', 'g/cons1');
model.physics('g2').feature('cons1').setIndex('R', 'u0-u2', 0);
model.physics('g2').feature.duplicate('dir2', 'dir1');
model.physics('g2').feature('dir2').selection.named('int3');
model.physics('g2').feature('dir2').setIndex('r', 'u', 0);

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.named('geom1_unisel1');
model.coordSystem('pml1').set('wavelengthSourceType', 'userDefined');
model.coordSystem('pml1').set('typicalWavelength', '2*pi/ewbe.beta_1');
model.coordSystem.duplicate('pml2', 'pml1');
model.coordSystem('pml2').set('typicalWavelength', '2*pi/ewfd.beta_1');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Core Path Length');
model.variable('var1').selection.geom('geom1', 2);
model.variable('var1').selection.named('int1');
model.variable('var1').set('s', 'u');
model.variable('var1').descr('s', 'Path length');
model.variable.duplicate('var2', 'var1');
model.variable('var2').label('Cladding Path Length');
model.variable('var2').selection.named('int2');
model.variable('var2').set('s', 'u2');
model.variable.create('var3');
model.variable('var3').model('comp1');
model.variable('var3').label('Left PML');
model.variable('var3').selection.geom('geom1', 2);
model.variable('var3').selection.named('geom1_csel5_dom');
model.variable('var3').set('phi', 'ewbe.beta_1*pml1.x*1[m]');
model.variable('var3').descr('phi', 'Phase');
model.variable('var3').set('k1x', 'ewbe.beta_1');
model.variable('var3').descr('k1x', 'Wave vector, first wave, x-component');
model.variable('var3').set('k1y', '0[rad/m]');
model.variable('var3').descr('k1y', 'Wave vector, first wave, y-component');
model.variable.duplicate('var4', 'var3');
model.variable('var4').label('Non-PML');
model.variable('var4').selection.named('geom1_csel3_dom');
model.variable('var4').set('phi', 'ewbe.beta_1*s');
model.variable('var4').set('k1x', 'd(phi,x)');
model.variable('var4').set('k1y', 'd(phi,y)');
model.variable.duplicate('var5', 'var4');
model.variable('var5').label('Right PML');
model.variable('var5').selection.named('geom1_csel7_dom');
model.variable('var5').set('phi', 'ewbe.beta_1*u0+ewbe.beta_1*(pml1.x-d_bent_wg-d_straight_wg/2)');
model.variable('var5').set('k1x', 'ewbe.beta_1');
model.variable('var5').set('k1y', '0[rad/m]');

model.physics('ewbe').prop('components').set('components', 'outofplane');
model.physics('ewbe').prop('WaveVector').set('dirCount', 'UniDirectionality');
model.physics('ewbe').prop('WaveVector').set('PhaseSpec', 'UserDefined');
model.physics('ewbe').prop('WaveVector').set('phase1', 'phi');
model.physics('ewbe').prop('UserDefinedWaveVectorSpecification').set('k1Phase', {'k1x' 'k1y' '0'});

model.mesh('mesh1').label('Mapped Mesh');
model.mesh('mesh1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('dis1').label('PML Distribution');
model.mesh('mesh1').feature('dis1').selection.set([2 29]);
model.mesh('mesh1').feature('dis1').set('numelem', 10);
model.mesh('mesh1').feature('size').label('Size Along Waveguide');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', '2*lda0');
model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size1').label('Core Size');
model.mesh('mesh1').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh1').feature('size1').selection.set([3]);
model.mesh('mesh1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('size1').set('hmax', 'w_core/3');
model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').label('Left Edge');
model.mesh('mesh1').feature('edg1').selection.set([1 3 5]);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').set('adjustedgdistr', true);
model.mesh('mesh1').run;

model.study('std1').feature('bma').set('modeFreq', 'f0');
model.study('std1').feature('bma').set('shiftactive', true);
model.study('std1').feature('bma').set('shift', 'n_core');
model.study('std1').feature('bma').setEntry('activate', 'ewfd', false);
model.study('std1').feature('bma').setEntry('activate', 'g', false);
model.study('std1').feature('bma').setEntry('activate', 'g2', false);
model.study('std1').feature.duplicate('bma1', 'bma');
model.study('std1').feature.move('bma1', 1);
model.study('std1').feature('bma1').set('PortName', '2');
model.study('std1').feature('freq').set('plist', 'f0');
model.study('std1').feature('freq').set('useadvanceddisable', true);
model.study('std1').feature('freq').set('disabledcoordinatesystems', {'pml2'});
model.study('std1').feature('freq').setSolveFor('/physics/ewfd', false);
model.study('std1').feature('freq').setSolveFor('/physics/g', false);
model.study('std1').feature('freq').setSolveFor('/physics/g2', false);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature.move('stat', 0);
model.study('std1').feature('stat').setEntry('activate', 'g2', false);
model.study('std1').feature.duplicate('stat1', 'stat');
model.study('std1').feature.move('stat1', 1);
model.study('std1').feature('stat1').setEntry('activate', 'g', false);
model.study('std1').feature('stat1').setEntry('activate', 'g2', true);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat1');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat1');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'bma');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'bma');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('neigs', 1);
model.sol('sol1').feature('e1').set('shift', '1');
model.sol('sol1').feature('e1').set('eigref', 'n_core');
model.sol('sol1').feature('e1').set('control', 'bma');
model.sol('sol1').feature('e1').set('linpmethod', 'sol');
model.sol('sol1').feature('e1').set('linpsol', 'sol1');
model.sol('sol1').feature('e1').set('linpsoluse', 'sol3');
model.sol('sol1').feature('e1').set('control', 'bma');
model.sol('sol1').feature('e1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('e1').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('e1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('e1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('e1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').create('su3', 'StoreSolution');
model.sol('sol1').create('st4', 'StudyStep');
model.sol('sol1').feature('st4').set('study', 'std1');
model.sol('sol1').feature('st4').set('studystep', 'bma1');
model.sol('sol1').create('v4', 'Variables');
model.sol('sol1').feature('v4').set('initmethod', 'sol');
model.sol('sol1').feature('v4').set('initsol', 'sol1');
model.sol('sol1').feature('v4').set('notsolmethod', 'sol');
model.sol('sol1').feature('v4').set('notsol', 'sol1');
model.sol('sol1').feature('v4').set('control', 'bma1');
model.sol('sol1').create('e2', 'Eigenvalue');
model.sol('sol1').feature('e2').set('neigs', 1);
model.sol('sol1').feature('e2').set('shift', '1');
model.sol('sol1').feature('e2').set('eigref', 'n_core');
model.sol('sol1').feature('e2').set('control', 'bma1');
model.sol('sol1').feature('e2').set('linpmethod', 'sol');
model.sol('sol1').feature('e2').set('linpsol', 'sol1');
model.sol('sol1').feature('e2').set('linpsoluse', 'sol3');
model.sol('sol1').feature('e2').set('control', 'bma1');
model.sol('sol1').feature('e2').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('e2').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('e2').feature('aDef').set('matherr', true);
model.sol('sol1').feature('e2').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('e2').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').create('su4', 'StoreSolution');
model.sol('sol1').create('st5', 'StudyStep');
model.sol('sol1').feature('st5').set('study', 'std1');
model.sol('sol1').feature('st5').set('studystep', 'freq');
model.sol('sol1').create('v5', 'Variables');
model.sol('sol1').feature('v5').set('initmethod', 'sol');
model.sol('sol1').feature('v5').set('initsol', 'sol1');
model.sol('sol1').feature('v5').set('notsolmethod', 'sol');
model.sol('sol1').feature('v5').set('notsol', 'sol1');
model.sol('sol1').feature('v5').set('control', 'freq');
model.sol('sol1').create('s3', 'Stationary');
model.sol('sol1').feature('s3').create('p1', 'Parametric');
model.sol('sol1').feature('s3').feature.remove('pDef');
model.sol('sol1').feature('s3').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s3').feature('p1').set('plistarr', {'f0'});
model.sol('sol1').feature('s3').feature('p1').set('punit', {'THz'});
model.sol('sol1').feature('s3').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s3').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s3').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s3').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s3').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s3').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s3').feature('p1').set('probes', {});
model.sol('sol1').feature('s3').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s3').set('linpmethod', 'sol');
model.sol('sol1').feature('s3').set('linpsol', 'zero');
model.sol('sol1').feature('s3').set('control', 'freq');
model.sol('sol1').feature('s3').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s3').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('s3').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s3').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s3').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s3').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s3').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s3').feature.remove('fcDef');
model.sol('sol1').feature('v5').set('notsolnum', 'auto');
model.sol('sol1').feature('v5').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v5').set('solnum', 'auto');
model.sol('sol1').feature('v5').set('solvertype', 'solnum');
model.sol('sol1').feature('v4').set('notsolnum', 'auto');
model.sol('sol1').feature('v4').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v4').set('solnum', 'auto');
model.sol('sol1').feature('v4').set('solvertype', 'solnum');
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v3').set('solnum', 'auto');
model.sol('sol1').feature('v3').set('solvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Electric Field (ewbe)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWavesBeamEnvelopes/phys1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Electric Field');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Reflectance, Transmittance, and Absorptance (ewbe)');
model.result.numerical('gev1').set('data', 'dset1');
model.result.numerical('gev1').set('expr', {'ewbe.Rport_1' 'ewbe.Rtotal' 'ewbe.Tport_2' 'ewbe.Ttotal' 'ewbe.RTtotal' 'ewbe.Atotal'});
model.result.table.create('tbl1', 'Table');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').run;
model.result.numerical('gev1').setResult;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').label('Electric Mode Field, Port 1 (ewbe)');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').selection.set([8 10 12]);
model.result('pg2').feature('lngr1').set('expr', 'root.comp1.ewbe.normEbm_1');
model.result('pg2').feature('lngr1').set('legend', true);
model.result('pg2').feature('lngr1').set('legendmethod', 'evaluated');
model.result('pg2').feature('lngr1').set('legendpattern', 'Effective mode index: eval(comp1.ewbe.neff_1)');
model.result('pg2').feature('lngr1').set('legendexprprecision', 5);
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').label('Electric Mode Field, Port 2 (ewbe)');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('data', 'dset1');
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').selection.set([28 30 32]);
model.result('pg3').feature('lngr1').set('expr', 'root.comp1.ewbe.normEbm_2');
model.result('pg3').feature('lngr1').set('legend', true);
model.result('pg3').feature('lngr1').set('legendmethod', 'evaluated');
model.result('pg3').feature('lngr1').set('legendpattern', 'Effective mode index: eval(comp1.ewbe.neff_2)');
model.result('pg3').feature('lngr1').set('legendexprprecision', 5);
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').set('data', 'dset1');
model.result.numerical('gev2').set('expr', {'u0'});
model.result.numerical('gev2').set('descr', {'State variable u0'});
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').label('General Form PDE');
model.result('pg4').feature('surf1').set('expr', 'u');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').label('General Form PDE 2');
model.result('pg5').feature('surf1').set('expr', 'u2');
model.result('pg1').run;
model.result('pg1').selection.geom('geom1', 2);
model.result('pg1').selection.named('geom1_csel3_dom');
model.result('pg1').set('applyselectiontodatasetedges', true);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').create('hght1', 'Height');
model.result('pg1').run;
model.result('pg1').feature('surf1').feature('hght1').set('scaleactive', true);
model.result('pg1').feature('surf1').feature('hght1').set('scale', '5e-10');
model.result('pg1').run;
model.result('pg1').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg1').run;
model.result('pg4').set('applyselectiontodatasetedges', false);
model.result('pg4').run;
model.result('pg4').label('Phase');
model.result('pg4').run;
model.result('pg4').feature('surf1').set('expr', 'phi');
model.result('pg4').run;
model.result('pg4').create('con1', 'Contour');
model.result('pg4').feature('con1').set('expr', 'phi');
model.result('pg4').feature('con1').set('coloring', 'uniform');
model.result('pg4').feature('con1').set('color', 'white');
model.result('pg4').feature('con1').set('colorlegend', false);
model.result('pg4').run;
model.result('pg4').create('arws1', 'ArrowSurface');
model.result('pg4').feature('arws1').set('expr', {'k1x' 'k1y'});
model.result('pg4').run;
model.result('pg5').run;
model.result('pg5').label('Amplitude, First Wave');
model.result('pg5').selection.geom('geom1', 2);
model.result('pg5').selection.geom('geom1', 2);
model.result('pg5').selection.set([4 5 6 7 8 9 10 11 12 13 14 15]);
model.result('pg5').selection.named('geom1_csel3_dom');
model.result('pg5').set('applyselectiontodatasetedges', true);
model.result('pg5').run;
model.result('pg5').feature('surf1').set('expr', 'E1z');
model.result('pg5').run;

model.physics('ewfd').prop('components').set('components', 'outofplane');

model.mesh.create('mesh2', 'geom1');
model.mesh('mesh2').label('Triangular Mesh');
model.mesh('mesh2').contribute('physics/ewbe', false);
model.mesh('mesh2').contribute('physics/g', false);
model.mesh('mesh2').contribute('physics/g2', false);
model.mesh('mesh2').run;

model.study.create('std2');
model.study('std2').feature.copy('bma1', 'std1/bma');
model.study('std2').feature.copy('bma2', 'std1/bma1');
model.study('std2').feature.copy('freq1', 'std1/freq');
model.study('std2').feature('bma1').setEntry('activate', 'ewbe', false);
model.study('std2').feature('bma1').setEntry('activate', 'ewfd', true);
model.study('std2').feature('bma1').setEntry('mesh', 'geom1', 'mesh2');
model.study('std2').feature('bma2').setEntry('activate', 'ewbe', false);
model.study('std2').feature('bma2').setEntry('activate', 'ewfd', true);
model.study('std2').feature('bma2').setEntry('mesh', 'geom1', 'mesh2');
model.study('std2').feature('freq1').set('disabledcoordinatesystems', {'pml1'});
model.study('std2').feature('freq1').setSolveFor('/physics/ewbe', false);
model.study('std2').feature('freq1').setSolveFor('/physics/ewfd', true);
model.study('std2').feature('freq1').setEntry('mesh', 'geom1', 'mesh2');

model.sol.create('sol6');
model.sol('sol6').study('std2');
model.sol('sol6').create('st1', 'StudyStep');
model.sol('sol6').feature('st1').set('study', 'std2');
model.sol('sol6').feature('st1').set('studystep', 'bma1');
model.sol('sol6').create('v1', 'Variables');
model.sol('sol6').feature('v1').set('control', 'bma1');
model.sol('sol6').create('e1', 'Eigenvalue');
model.sol('sol6').feature('e1').set('neigs', 1);
model.sol('sol6').feature('e1').set('shift', '1');
model.sol('sol6').feature('e1').set('eigref', 'n_core');
model.sol('sol6').feature('e1').set('control', 'bma1');
model.sol('sol6').feature('e1').feature('aDef').set('complexfun', true);
model.sol('sol6').feature('e1').feature('aDef').set('cachepattern', false);
model.sol('sol6').feature('e1').create('d1', 'Direct');
model.sol('sol6').feature('e1').feature('d1').set('linsolver', 'mumps');
model.sol('sol6').feature('e1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol6').create('su1', 'StoreSolution');
model.sol('sol6').create('st2', 'StudyStep');
model.sol('sol6').feature('st2').set('study', 'std2');
model.sol('sol6').feature('st2').set('studystep', 'bma2');
model.sol('sol6').create('v2', 'Variables');
model.sol('sol6').feature('v2').set('initmethod', 'sol');
model.sol('sol6').feature('v2').set('initsol', 'sol6');
model.sol('sol6').feature('v2').set('notsolmethod', 'sol');
model.sol('sol6').feature('v2').set('notsol', 'sol6');
model.sol('sol6').feature('v2').set('control', 'bma2');
model.sol('sol6').create('e2', 'Eigenvalue');
model.sol('sol6').feature('e2').set('neigs', 1);
model.sol('sol6').feature('e2').set('shift', '1');
model.sol('sol6').feature('e2').set('eigref', 'n_core');
model.sol('sol6').feature('e2').set('control', 'bma2');
model.sol('sol6').feature('e2').set('linpmethod', 'sol');
model.sol('sol6').feature('e2').set('linpsol', 'sol6');
model.sol('sol6').feature('e2').set('control', 'bma2');
model.sol('sol6').feature('e2').feature('aDef').set('complexfun', true);
model.sol('sol6').feature('e2').feature('aDef').set('cachepattern', false);
model.sol('sol6').feature('e2').create('d1', 'Direct');
model.sol('sol6').feature('e2').feature('d1').set('linsolver', 'mumps');
model.sol('sol6').feature('e2').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol6').create('su2', 'StoreSolution');
model.sol('sol6').create('st3', 'StudyStep');
model.sol('sol6').feature('st3').set('study', 'std2');
model.sol('sol6').feature('st3').set('studystep', 'freq1');
model.sol('sol6').create('v3', 'Variables');
model.sol('sol6').feature('v3').set('initmethod', 'sol');
model.sol('sol6').feature('v3').set('initsol', 'sol6');
model.sol('sol6').feature('v3').set('notsolmethod', 'sol');
model.sol('sol6').feature('v3').set('notsol', 'sol6');
model.sol('sol6').feature('v3').set('control', 'freq1');
model.sol('sol6').create('s1', 'Stationary');
model.sol('sol6').feature('s1').set('stol', 0.01);
model.sol('sol6').feature('s1').create('p1', 'Parametric');
model.sol('sol6').feature('s1').feature.remove('pDef');
model.sol('sol6').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol6').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol6').feature('s1').feature('p1').set('punit', {'THz'});
model.sol('sol6').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol6').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol6').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol6').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol6').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol6').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol6').feature('s1').feature('p1').set('probes', {});
model.sol('sol6').feature('s1').feature('p1').set('control', 'freq1');
model.sol('sol6').feature('s1').set('linpmethod', 'sol');
model.sol('sol6').feature('s1').set('linpsol', 'zero');
model.sol('sol6').feature('s1').set('control', 'freq1');
model.sol('sol6').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol6').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol6').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol6').feature('s1').create('d1', 'Direct');
model.sol('sol6').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol6').feature('s1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol6').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol6').feature('s1').feature.remove('fcDef');
model.sol('sol6').feature('v3').set('notsolnum', 'auto');
model.sol('sol6').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol6').feature('v3').set('solnum', 'auto');
model.sol('sol6').feature('v3').set('solvertype', 'solnum');
model.sol('sol6').feature('e2').set('linpsolnum', 'auto');
model.sol('sol6').feature('e2').set('linpsolvertype', 'solnum');
model.sol('sol6').feature('v2').set('notsolnum', 'auto');
model.sol('sol6').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol6').feature('v2').set('solnum', 'auto');
model.sol('sol6').feature('v2').set('solvertype', 'solnum');
model.sol('sol6').attach('std2');
model.sol('sol6').runAll;

model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').label('Electric Field (ewfd)');
model.result('pg6').set('data', 'dset6');
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('data', 'dset6');
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').set('defaultPlotID', 'ElectromagneticWavesFrequencyDomain/phys1/pdef1/pcond2/pg1');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'ewfd.normE');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result.numerical.create('gev3', 'EvalGlobal');
model.result.numerical('gev3').label('Reflectance, Transmittance, and Absorptance (ewfd)');
model.result.numerical('gev3').set('data', 'dset6');
model.result.numerical('gev3').set('expr', {'ewfd.Rport_1' 'ewfd.Rtotal' 'ewfd.Tport_2' 'ewfd.Ttotal' 'ewfd.RTtotal' 'ewfd.Atotal'});
model.result.table.create('tbl2', 'Table');
model.result.numerical('gev3').set('table', 'tbl2');
model.result.numerical('gev3').run;
model.result.numerical('gev3').setResult;
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').label('Electric Mode Field, Port 1 (ewfd)');
model.result('pg7').set('showlegendsmaxmin', true);
model.result('pg7').set('data', 'dset6');
model.result('pg7').create('line1', 'Line');
model.result('pg7').feature('line1').set('expr', 'root.comp1.ewfd.normEbm_1');
model.result('pg7').feature('line1').set('colortable', 'RainbowLight');
model.result('pg7').feature('line1').set('linetype', 'tube');
model.result('pg7').feature('line1').create('hght1', 'Height');
model.result('pg7').create('ann1', 'Annotation');
model.result('pg7').feature('ann1').set('posxexpr', 'ewfd.aveport1(x)');
model.result('pg7').feature('ann1').set('posyexpr', 'ewfd.aveport1(y)');
model.result('pg7').feature('ann1').set('backgroundcolor', 'fromtheme');
model.result('pg7').feature('ann1').set('text', 'Effective mode index: eval(comp1.ewfd.neff_1)');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').label('Electric Mode Field, Port 2 (ewfd)');
model.result('pg8').set('showlegendsmaxmin', true);
model.result('pg8').set('data', 'dset6');
model.result('pg8').create('line1', 'Line');
model.result('pg8').feature('line1').set('expr', 'root.comp1.ewfd.normEbm_2');
model.result('pg8').feature('line1').set('colortable', 'RainbowLight');
model.result('pg8').feature('line1').set('linetype', 'tube');
model.result('pg8').feature('line1').create('hght1', 'Height');
model.result('pg8').create('ann1', 'Annotation');
model.result('pg8').feature('ann1').set('posxexpr', 'ewfd.aveport2(x)');
model.result('pg8').feature('ann1').set('posyexpr', 'ewfd.aveport2(y)');
model.result('pg8').feature('ann1').set('backgroundcolor', 'fromtheme');
model.result('pg8').feature('ann1').set('text', 'Effective mode index: eval(comp1.ewfd.neff_2)');
model.result('pg6').set('applyselectiontodatasetedges', false);
model.result('pg6').run;
model.result('pg6').selection.geom('geom1', 2);
model.result('pg6').selection.named('geom1_csel3_dom');
model.result('pg6').set('applyselectiontodatasetedges', true);
model.result('pg6').run;
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').set('applyselectiontodatasetedges', false);
model.result('pg9').run;
model.result('pg9').label('Field Comparison, Linear Scale');
model.result('pg9').selection.geom('geom1', 2);
model.result('pg9').selection.named('geom1_csel3_dom');
model.result('pg9').set('applyselectiontodatasetedges', true);
model.result('pg9').set('showlegendsmaxmin', true);
model.result('pg9').set('plotarrayenable', true);
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('arraydim', '1');
model.result('pg9').feature.duplicate('surf2', 'surf1');
model.result('pg9').feature('surf2').set('arraydim', '1');
model.result('pg9').run;
model.result('pg9').feature('surf2').set('data', 'dset6');
model.result('pg9').feature('surf2').set('expr', 'ewfd.normE');
model.result('pg9').feature('surf2').set('inheritplot', 'surf1');
model.result('pg9').run;
model.result('pg9').run;
model.result.duplicate('pg10', 'pg9');
model.result('pg10').run;
model.result('pg10').label('Field Comparison, Log Scale');
model.result('pg10').feature('surf1').set('arraydim', '1');
model.result('pg10').run;
model.result('pg10').feature('surf1').set('expr', '20*log10(ewbe.normE)');
model.result('pg10').feature('surf2').set('arraydim', '1');
model.result('pg10').run;
model.result('pg10').feature('surf2').set('expr', '20*log10(ewfd.normE)');
model.result('pg10').run;

model.title('Waveguide S-Bend');

model.description('This model demonstrates how to simulate the propagation of guided waves in a dielectric S-bent optical waveguide. The model demonstrates that the phase approximation, required by the Electromagnetic Waves, Beam Envelopes interface, can be numerically calculated by solving an additional partial differential equation.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;

model.label('waveguide_s_bend.mph');

model.modelNode.label('Components');

out = model;
