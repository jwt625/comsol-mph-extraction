function out = model
%
% lumped_receiver_04cc.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Electroacoustic_Transducers');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('cir', 'Circuit', 'geom1');
model.physics('cir').model('comp1');
model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/cir', true);
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('L', '49[mm]', 'Tube length');
model.param.set('a', '0.5[mm]', 'Tube radius');
model.param.set('a_mic', '0.5*0.25[in]', 'Microphone radius');
model.param.set('a_cpl', '4.7[mm]', 'Coupler radius');
model.param.set('Vrms', '0.17[V]', 'RMS driving voltage');
model.param.set('V0', 'sqrt(2)*Vrms', 'Peak driving voltage');
model.param.set('Cmic', '6[mm^3]/(1.4*p0)', 'Microphone acoustic compliance');
model.param.set('Lmic', '2500[kg/m^4]', 'Microphone acoustic mass');
model.param.set('Rmic', '1200e6[N*s/m^5]', 'Microphone acoustic resistance');
model.param.set('T0', '20[degC]', 'Ambient temperature');
model.param.set('p0', '1[atm]', 'Atmospheric pressure');

model.func.create('int1', 'Interpolation');
model.func('int1').set('source', 'file');
model.func('int1').set('filename', 'lumped_receiver_04cc_measured_data.txt');
model.func('int1').set('nargs', 1);
model.func('int1').setIndex('funcs', 'preal', 0, 0);
model.func('int1').setIndex('funcs', 'pimag', 1, 0);
model.func('int1').setIndex('funcs', 2, 1, 1);
model.func('int1').setIndex('funcs', 'Zreal', 2, 0);
model.func('int1').setIndex('funcs', 3, 2, 1);
model.func('int1').setIndex('funcs', 'Zimag', 3, 0);
model.func('int1').setIndex('funcs', 4, 3, 1);
model.func('int1').set('interp', 'piecewisecubic');
model.func('int1').setIndex('fununit', ['ohm' ], 0);
model.func('int1').setIndex('fununit', ['ohm' ], 1);
model.func('int1').setIndex('fununit', ['ohm' ], 2);
model.func('int1').setIndex('fununit', ['ohm' ], 3);
model.func('int1').setIndex('argunit', 'Hz', 0);
model.func('int1').importData;

model.geom('geom1').insertFile('lumped_receiver_04cc_geom_sequence.mph', 'geom1');

model.cpl.create('intop1', 'Integration', 'geom1');

model.geom('geom1').run;

model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'intop_mic');
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.set([7]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('cir').feature.create('ED23146', 'SubCircuitBlock');
model.physics('cir').feature('ED23146').set('Connections', {'P1' 'N1' 'P2' 'N2'});
model.physics('cir').feature('ED23146').label('Subcircuit Definition ED23146');
model.physics('cir').feature('ED23146').feature.create('CBACK', 'Capacitor');
model.physics('cir').feature('ED23146').feature('CBACK').set('Connections', {'N0010' 'N0005'});
model.physics('cir').feature('ED23146').feature('CBACK').label('Capacitor CBACK');
model.physics('cir').feature('ED23146').feature('CBACK').set('C', '3.07E-13');
model.physics('cir').feature('ED23146').feature.create('CEFF', 'Capacitor');
model.physics('cir').feature('ED23146').feature('CEFF').set('Connections', {'N0035' 'N0030'});
model.physics('cir').feature('ED23146').feature('CEFF').label('Capacitor CEFF');
model.physics('cir').feature('ED23146').feature('CEFF').set('C', '8.18E-14');
model.physics('cir').feature('ED23146').feature.create('CFRONT', 'Capacitor');
model.physics('cir').feature('ED23146').feature('CFRONT').set('Connections', {'N0010' 'N2'});
model.physics('cir').feature('ED23146').feature('CFRONT').label('Capacitor CFRONT');
model.physics('cir').feature('ED23146').feature('CFRONT').set('C', '4.55E-14');
model.physics('cir').feature('ED23146').feature.create('CGAP', 'Capacitor');
model.physics('cir').feature('ED23146').feature('CGAP').set('Connections', {'N0025' 'N2'});
model.physics('cir').feature('ED23146').feature('CGAP').label('Capacitor CGAP');
model.physics('cir').feature('ED23146').feature('CGAP').set('C', '1.02E-13');
model.physics('cir').feature('ED23146').feature.create('CMECH2', 'Capacitor');
model.physics('cir').feature('ED23146').feature('CMECH2').set('Connections', {'N0035' 'N2'});
model.physics('cir').feature('ED23146').feature('CMECH2').label('Capacitor CMECH2');
model.physics('cir').feature('ED23146').feature('CMECH2').set('C', '2.89E-14');
model.physics('cir').feature('ED23146').feature.create('G1_1', 'VoltageCurrentSource');
model.physics('cir').feature('ED23146').feature('G1_1').set('Connections', {'N0020' 'N1' 'N0015' 'N2'});
model.physics('cir').feature('ED23146').feature('G1_1').label('Voltage-Controlled Current Source G1_1');
model.physics('cir').feature('ED23146').feature('G1_1').set('gain', '-1.8E-6');
model.physics('cir').feature('ED23146').feature.create('G1_2', 'VoltageCurrentSource');
model.physics('cir').feature('ED23146').feature('G1_2').set('Connections', {'N0015' 'N2' 'N0020' 'N1'});
model.physics('cir').feature('ED23146').feature('G1_2').label('Voltage-Controlled Current Source G1_2');
model.physics('cir').feature('ED23146').feature('G1_2').set('gain', '1.8E-6');
model.physics('cir').feature('ED23146').feature.create('LEFF', 'Inductor');
model.physics('cir').feature('ED23146').feature('LEFF').set('Connections', {'N0025' 'N0030'});
model.physics('cir').feature('ED23146').feature('LEFF').label('Inductor LEFF');
model.physics('cir').feature('ED23146').feature('LEFF').set('L', '50200.0');
model.physics('cir').feature('ED23146').feature.create('LMECH2', 'Inductor');
model.physics('cir').feature('ED23146').feature('LMECH2').set('Connections', {'N0035' 'N0005'});
model.physics('cir').feature('ED23146').feature('LMECH2').label('Inductor LMECH2');
model.physics('cir').feature('ED23146').feature('LMECH2').set('L', '8070.0');
model.physics('cir').feature('ED23146').feature.create('LPORT', 'Inductor');
model.physics('cir').feature('ED23146').feature('LPORT').set('Connections', {'N0040' 'P2'});
model.physics('cir').feature('ED23146').feature('LPORT').label('Inductor LPORT');
model.physics('cir').feature('ED23146').feature('LPORT').set('L', '4880.0');
model.physics('cir').feature('ED23146').feature.create('RDC', 'Resistor');
model.physics('cir').feature('ED23146').feature('RDC').set('Connections', {'P1' 'N0020'});
model.physics('cir').feature('ED23146').feature('RDC').label('Resistor RDC');
model.physics('cir').feature('ED23146').feature('RDC').set('R', '89.0');
model.physics('cir').feature('ED23146').feature.create('RPIERCE', 'Resistor');
model.physics('cir').feature('ED23146').feature('RPIERCE').set('Connections', {'N0005' 'N2'});
model.physics('cir').feature('ED23146').feature('RPIERCE').label('Resistor RPIERCE');
model.physics('cir').feature('ED23146').feature('RPIERCE').set('R', '1.57E10');
model.physics('cir').feature('ED23146').feature.create('RPORT', 'Resistor');
model.physics('cir').feature('ED23146').feature('RPORT').set('Connections', {'N0040' 'N0010'});
model.physics('cir').feature('ED23146').feature('RPORT').label('Resistor RPORT');
model.physics('cir').feature('ED23146').feature('RPORT').set('R', '6.3E7');
model.physics('cir').feature('ED23146').feature.create('RKARM', 'Resistor');
model.physics('cir').feature('ED23146').feature('RKARM').set('Connections', {'N0025' 'N0015'});
model.physics('cir').feature('ED23146').feature('RKARM').label('Resistor RKARM');
model.physics('cir').feature('ED23146').feature('RKARM').set('R', '1.0');
model.physics('cir').feature('ED23146').setIndex('Connections', 'P1', 0, 0);
model.physics('cir').feature('ED23146').setIndex('Connections', 'N1', 1, 0);
model.physics('cir').feature('ED23146').setIndex('Connections', 'P2', 2, 0);
model.physics('cir').feature('ED23146').setIndex('Connections', 'N2', 3, 0);
model.physics('cir').feature('ED23146').feature('RKARM').set('R', '1/(4.85e-11[1/ohm]*sqrt(i*2*pi*freq[1/Hz]))');
model.physics('cir').create('V1', 'VoltageSource', -1);
model.physics('cir').feature('V1').setIndex('Connections', 'p1', 0, 0);
model.physics('cir').feature('V1').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('V1').set('value', 'V0');
model.physics('cir').create('X1', 'SubCircuit', -1);
model.physics('cir').feature('X1').set('subCircuitName', 'ED23146');
model.physics('cir').feature('X1').setIndex('Connections', 'p1', 0, 0);
model.physics('cir').feature('X1').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('X1').setIndex('Connections', 'p2', 2, 0);
model.physics('cir').feature('X1').setIndex('Connections', 0, 3, 0);
model.physics('cir').create('IvsU1', 'ModelDeviceIV', -1);
model.physics('cir').feature('IvsU1').setIndex('Connections', 'p2', 0, 0);
model.physics('cir').feature('IvsU1').setIndex('Connections', 0, 1, 0);
model.physics('acpr').feature('fpam1').set('minput_temperature', 'T0');
model.physics('acpr').feature('fpam1').set('minput_pressure', 'p0');
model.physics('acpr').create('nra1', 'NarrowRegionAcousticsModel', 3);
model.physics('acpr').feature('nra1').selection.set([2]);
model.physics('acpr').feature('nra1').set('minput_temperature', 'T0');
model.physics('acpr').feature('nra1').set('minput_pressure', 'p0');
model.physics('acpr').feature('nra1').set('DuctType', 'CircularDuct');
model.physics('acpr').feature('nra1').set('a', 'a');
model.physics('acpr').create('nra2', 'NarrowRegionAcousticsModel', 3);
model.physics('acpr').feature('nra2').selection.set([1]);
model.physics('acpr').feature('nra2').set('minput_temperature', 'T0');
model.physics('acpr').feature('nra2').set('minput_pressure', 'p0');
model.physics('acpr').feature('nra2').set('DuctType', 'CircularDuct');
model.physics('acpr').feature('nra2').set('a', 'a_cpl');
model.physics('acpr').create('imp1', 'Impedance', 2);
model.physics('acpr').feature('imp1').selection.set([7]);
model.physics('acpr').feature('imp1').set('ImpedanceModel', 'RCL');
model.physics('acpr').feature('imp1').set('Rac', 'Rmic');
model.physics('acpr').feature('imp1').set('Cac', 'Cmic');
model.physics('acpr').feature('imp1').set('Lac', 'Lmic');
model.physics('acpr').create('lport1', 'LumpedPort', 2);
model.physics('acpr').feature('lport1').selection.set([10]);
model.physics('acpr').feature('lport1').set('ConnectionType', 'Circuit');
model.physics('cir').feature('IvsU1').set('V_src', 'root.comp1.acpr.lport1.V_cir');

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.set([3 11]);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', '3*a');
model.mesh('mesh1').feature('size').set('hmin', '0.1[mm]');
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([11]);
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 'a');
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([2]);
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 15);
model.mesh('mesh1').run('swe1');
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Narrow Region');
model.study('std1').setGenPlots(false);
model.study('std1').feature('freq').set('plist', '10^{range(2,2.2/199,4.2)}');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-6);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'10^{range(2,2.2/199,4.2)}'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver () (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) ()');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'fgmres');
model.sol('sol1').feature('s1').feature('i2').label('Suggested Iterative Solver (FGMRES with GMG) ()');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').create('i3', 'Iterative');
model.sol('sol1').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i3').label('Suggested Iterative Solver (Shifted Laplace) ()');
model.sol('sol1').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('mcasegen', 'coarse');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('scale', '3');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('slaplacemain', false);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('slaplacemg', true);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemain', {'cir' 'off'});
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemg', {'cir' 'off'});
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol1').feature('s1').create('i4', 'Iterative');
model.sol('sol1').feature('s1').feature('i4').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i4').label('Suggested Iterative Solver (Domain Decomposition) ()');
model.sol('sol1').feature('s1').feature('i4').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('dompernodemax', 1);
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('dompernodemaxactive', 'on');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('userac', 'off');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('usecoarse', false);
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('ddboundary', 'absorbing');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('slaplacemain', true);
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('slaplacemg', 'on');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('alphaabsorbing', {'acpr' '1'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('betaabsorbing', {'acpr' '0.1'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('sndorderabsorbing', {'acpr' 'on'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i4').feature('dd1').feature('ds').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('slaplacemg', 'on');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('iter', 1);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').setSolveFor('/physics/cir', true);
model.study('std2').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std2').label('Study 2 - Lossless Acoustics');
model.study('std2').setGenPlots(false);
model.study('std2').feature('freq').set('plist', '10^{range(2,2.2/199,4.2)}');
model.study('std2').feature('freq').set('useadvanceddisable', true);
model.study('std2').feature('freq').set('disabledphysics', {'acpr/nra1' 'acpr/nra2'});

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 1.0E-6);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol2').feature('s1').feature('p1').set('plistarr', {'10^{range(2,2.2/199,4.2)}'});
model.sol('sol2').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol2').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol2').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s1').feature('p1').set('probes', {});
model.sol('sol2').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol2').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('s1').set('control', 'freq');
model.sol('sol2').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol2').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol2').feature('s1').create('seDef', 'Segregated');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver () (Merged)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) ()');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').create('i2', 'Iterative');
model.sol('sol2').feature('s1').feature('i2').set('linsolver', 'fgmres');
model.sol('sol2').feature('s1').feature('i2').label('Suggested Iterative Solver (FGMRES with GMG) ()');
model.sol('sol2').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').create('i3', 'Iterative');
model.sol('sol2').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i3').label('Suggested Iterative Solver (Shifted Laplace) ()');
model.sol('sol2').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('mcasegen', 'coarse');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('scale', '3');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('slaplacemain', false);
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('slaplacemg', true);
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemain', {'cir' 'off'});
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemg', {'cir' 'off'});
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol2').feature('s1').create('i4', 'Iterative');
model.sol('sol2').feature('s1').feature('i4').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i4').label('Suggested Iterative Solver (Domain Decomposition) ()');
model.sol('sol2').feature('s1').feature('i4').create('dd1', 'DomainDecomposition');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('dompernodemax', 1);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('dompernodemaxactive', 'on');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('userac', 'off');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('usecoarse', false);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('ddboundary', 'absorbing');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('slaplacemain', true);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('slaplacemg', 'on');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('alphaabsorbing', {'acpr' '1'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('betaabsorbing', {'acpr' '0.1'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('sndorderabsorbing', {'acpr' 'on'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('slaplacemg', 'on');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('iter', 1);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('s1').feature.remove('seDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').label('Microphone Response');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', ['Coupler Response (50mm/1mm' native2unicode(hex2dec({'00' 'd8'}), 'unicode') ' tube on 0.4cc coupler)']);
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'Level (dB rel. 1V)');
model.result('pg1').set('legendpos', 'lowerleft');
model.result('pg1').create('glob1', 'Global');
model.result('pg1').feature('glob1').set('markerpos', 'datapoints');
model.result('pg1').feature('glob1').set('linewidth', 'preference');
model.result('pg1').feature('glob1').setIndex('expr', '20*log10(abs(intop_mic(p)/intop_mic(1))/V0)', 0);
model.result('pg1').feature('glob1').setIndex('unit', '', 0);
model.result('pg1').feature('glob1').setIndex('descr', 'Full model', 0);
model.result('pg1').feature('glob1').setIndex('expr', '20*log10(abs(preal(freq)+i*pimag(freq)))', 1);
model.result('pg1').feature('glob1').setIndex('unit', '', 1);
model.result('pg1').feature('glob1').setIndex('descr', 'Knowles measurements', 1);
model.result('pg1').run;
model.result('pg1').create('glob2', 'Global');
model.result('pg1').feature('glob2').set('markerpos', 'datapoints');
model.result('pg1').feature('glob2').set('linewidth', 'preference');
model.result('pg1').feature('glob2').set('data', 'dset2');
model.result('pg1').feature('glob2').setIndex('expr', '20*log10(abs(intop_mic(p)/intop_mic(1))/V0)', 0);
model.result('pg1').feature('glob2').setIndex('unit', '', 0);
model.result('pg1').feature('glob2').setIndex('descr', 'Model without acoustic losses', 0);
model.result('pg1').run;
model.result('pg1').feature('glob2').set('linestyle', 'dotted');
model.result('pg1').set('xlog', true);
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Electric Input Impedance');
model.result('pg2').set('titletype', 'label');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Z_in (Ohm)');
model.result('pg2').set('legendpos', 'upperleft');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('linewidth', 'preference');
model.result('pg2').feature('glob1').setIndex('expr', 'real(-cir.V1_v/cir.V1_i)', 0);
model.result('pg2').feature('glob1').setIndex('unit', ['ohm' ], 0);
model.result('pg2').feature('glob1').setIndex('descr', 'real(Zin): Model results', 0);
model.result('pg2').feature('glob1').setIndex('expr', 'imag(-cir.V1_v/cir.V1_i)', 1);
model.result('pg2').feature('glob1').setIndex('unit', ['ohm' ], 1);
model.result('pg2').feature('glob1').setIndex('descr', 'imag(Zin): Model results', 1);
model.result('pg2').feature('glob1').setIndex('expr', 'Zreal(freq)', 2);
model.result('pg2').feature('glob1').setIndex('unit', '', 2);
model.result('pg2').feature('glob1').setIndex('descr', 'real(Zin): Knowles measurements', 2);
model.result('pg2').feature('glob1').setIndex('expr', 'Zimag(freq)', 3);
model.result('pg2').feature('glob1').setIndex('unit', '', 3);
model.result('pg2').feature('glob1').setIndex('descr', 'imag(Zin): Knowles measurements', 3);
model.result('pg2').run;
model.result('pg2').set('xlog', true);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 200, 0);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg3').feature('surf1').set('colortable', 'Wave');
model.result('pg3').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').label('Acoustic Pressure (acpr)');
model.result('pg3').label('Acoustic Pressure (acpr)');
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 200, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg4').feature('surf1').set('colortable', 'Rainbow');
model.result('pg4').feature('surf1').set('colorscalemode', 'linear');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').label('Sound Pressure Level (acpr)');
model.result('pg4').label('Sound Pressure Level (acpr)');
model.result('pg4').run;
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 99, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 137, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 151, 0);
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 99, 0);
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 137, 0);
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 151, 0);
model.result('pg4').run;
model.result('pg1').run;

model.title('Lumped Receiver Connected to Test Setup with a 0.4-cc Coupler');

model.description(['In this example a Knowles ED23146 receiver (miniature loudspeaker) is connected to a test setup consisting of a 50' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'mm (1' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'mm diameter) earmold tube and a so-called 0.4-cc coupler. The receiver is modeled using a lumped spice network and connected to the finite element domain at the tube inlet. The response at the measurement microphone in the coupler as well as the electric input impedance to the receiver are compared to measurements. The losses in the long narrow tube are included using the Narrow Region Acoustics feature in the Pressure Acoustics, Frequency Domain physics interface.' newline  newline 'This example requires the Acoustics Module and the AC/DC Module.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('lumped_receiver_04cc.mph');

model.modelNode.label('Components');

out = model;
