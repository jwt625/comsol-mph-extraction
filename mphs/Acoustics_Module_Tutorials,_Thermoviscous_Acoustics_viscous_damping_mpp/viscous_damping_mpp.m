function out = model
%
% viscous_damping_mpp.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Tutorials,_Thermoviscous_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ta', 'ThermoacousticsSinglePhysics', 'geom1');
model.physics('ta').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/ta', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('Hslit', ['1.5[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm]'], 'Slit height');
model.param.set('R', ['2.3[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm]'], 'Hole radius');
model.param.set('H', ['1.5[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm]'], 'Membrane thickness');
model.param.set('f0', '1[kHz]', 'Actuation frequency');
model.param.set('AR', '0.2', 'Hole area coefficient');
model.param.set('W', 'sqrt(pi/(2*sqrt(3))*R^2/AR)', 'Width unit cell');
model.param.set('area', '2*sqrt(3)*W^2', 'Area of unit cell');
model.param.set('N', '1/area', 'Holes per area');
model.param.set('air_lambda', '6.5e-8[m]', 'Mean free path, air');
model.param.set('Air_mu', '1.81e-5[Pa*s]', 'Viscosity, air');
model.param.set('Air_rho', '1.2[kg/m^3]', 'Density, air');
model.param.set('Air_c', '343[m/s]', 'Sound speed, air');
model.param.set('Air_Dth', '22e-6[m^2/s]', 'Thermal diffusivity, air');
model.param.set('Nopt', 'sqrt(3/(2*H*Hslit^3)*(AR/2-AR^2/8-log(AR)/4-3/8))*AR/pi', 'Analytical optimal number of holes');
model.param.set('Ropt', '(AR/(pi*Nopt))^(1/2)', 'Analytical optimal radius');
model.param.set('delta_t', 'sqrt(2*Air_Dth/f0)', 'Thermal boundary layer thickness');

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').geom.create('c1', 'Circle');
model.geom('geom1').feature('wp1').geom.feature('c1').set('r', 'R');
model.geom('geom1').feature('wp1').geom.feature('c1').set('angle', 30);
model.geom('geom1').feature('wp1').geom.run('c1');
model.geom('geom1').feature('wp1').geom.create('pol1', 'Polygon');
model.geom('geom1').feature('wp1').geom.feature('pol1').set('source', 'table');
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 0, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'W', 1, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 1, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'W', 2, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'tan(pi/6)*W', 2, 1);
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').set('workplane', 'wp1');
model.geom('geom1').feature('ext1').selection('input').set({'wp1'});
model.geom('geom1').feature('ext1').setIndex('distance', 'Hslit', 0);
model.geom('geom1').feature('ext1').setIndex('distance', 'Hslit+H', 1);
model.geom('geom1').feature('ext1').set('displ', {'0' '0'; '0' '0'});
model.geom('geom1').feature('ext1').set('scale', {'1' '1'; '1' '1'});
model.geom('geom1').feature('ext1').set('twist', {'0' '0'});
model.geom('geom1').feature('ext1').setIndex('distance', 'Hslit+H+W', 2);
model.geom('geom1').feature('ext1').set('displ', {'0' '0'; '0' '0'; '0' '0'});
model.geom('geom1').feature('ext1').set('scale', {'1' '1'; '1' '1'; '1' '1'});
model.geom('geom1').feature('ext1').set('twist', {'0' '0' '0'});
model.geom('geom1').feature('ext1').setIndex('distance', 'Hslit+H+2*delta_t', 3);
model.geom('geom1').feature('ext1').set('displ', {'0' '0'; '0' '0'; '0' '0'; '0' '0'});
model.geom('geom1').feature('ext1').set('scale', {'1' '1'; '1' '1'; '1' '1'; '1' '1'});
model.geom('geom1').feature('ext1').set('twist', {'0' '0' '0' '0'});
model.geom('geom1').runPre('fin');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').init(3);
model.geom('geom1').feature('del1').selection('input').set('ext1', 6);
model.geom('geom1').run('fin');
model.geom('geom1').create('cmd1', 'CompositeDomains');
model.geom('geom1').feature('cmd1').selection('input').set('fin', [1 2 3 5 6]);
model.geom('geom1').run('cmd1');
model.geom('geom1').create('cmd2', 'CompositeDomains');
model.geom('geom1').feature('cmd2').selection('input').set('cmd1', [2 3]);
model.geom('geom1').run('cmd2');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('ta').create('sym1', 'Symmetry', 2);
model.physics('ta').feature('sym1').selection.set([1 2 4 5 11 12 13]);
model.physics('ta').create('port1', 'Port', 2);
model.physics('ta').feature('port1').selection.set([7]);
model.physics('ta').feature('port1').set('PortExcitation', 'off');
model.physics('ta').feature('port1').set('PortType', 'PlaneWave');
model.physics('ta').feature('port1').set('MultiplicationFactor', 'UserDefined');
model.physics('ta').feature('port1').set('A_scale', 12);
model.physics('ta').create('iso1', 'Isothermal', 2);
model.physics('ta').feature('iso1').selection.set([3]);
model.physics('ta').create('velt1', 'VelocityThermoacoustic', 2);
model.physics('ta').feature('velt1').selection.set([3]);
model.physics('ta').feature('velt1').setIndex('Direction', true, 0);
model.physics('ta').feature('velt1').setIndex('Direction', true, 1);
model.physics('ta').feature('velt1').setIndex('Direction', true, 2);
model.physics('ta').feature('velt1').setIndex('u0', '1[nm/s]', 2);
model.physics('ta').create('slw1', 'SlipWall', 2);
model.physics('ta').feature('slw1').label('Slip Wall - Fixed');
model.physics('ta').feature('slw1').selection.set([8 9 10]);
model.physics('ta').create('slw2', 'SlipWall', 2);
model.physics('ta').feature('slw2').label('Slip Wall - Vibrating');
model.physics('ta').feature('slw2').set('MechanicalCondition', 'MovingWall');
model.physics('ta').feature('slw2').set('u_wall', {'0' '0' '1[nm/s]'});
model.physics('ta').feature('slw2').selection.set([3]);

model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.set([1]);
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftet1').feature('size1').selection.set([3 9 11]);
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', 'Hslit/3');
model.mesh('mesh1').feature('ftet1').create('size2', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftet1').feature('size2').selection.set([8]);
model.mesh('mesh1').feature('ftet1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hmax', 'R/8');
model.mesh('mesh1').feature('size').set('hauto', 2);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([2]);
model.mesh('mesh1').feature('swe1').selection('sourceface').set([6]);
model.mesh('mesh1').feature('swe1').selection('targetface').set([7]);
model.mesh('mesh1').run;

model.study('std1').label('Study - Slip Wall');
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'Hslit', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'Hslit', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'R', 0);
model.study('std1').feature('param').setIndex('plistarr', ['range(1[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm],0.1[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm],4[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm])'], 0);
model.study('std1').feature('freq').set('plist', 'f0');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ta)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with Direct Precon.) (ta)');
model.sol('sol1').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_p' 'comp1_Sparam1' 'comp1_ta_slw1_lm_tau' 'comp1_ta_slw2_lm_tau'});
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').feature('i1').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with DD) (ta)');
model.sol('sol1').feature('s1').feature('i2').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('domdofmax', 200000);
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('userac', false);
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('usecoarse', 'aggregation');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_p' 'comp1_Sparam1' 'comp1_ta_slw1_lm_tau' 'comp1_ta_slw2_lm_tau'});
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'R'});
model.batch('p1').set('plistarr', {['range(1[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm],0.1[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm],4[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm])']});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Acoustic Pressure (ta)');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 31, 1);
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 31, 1);
model.result('pg1').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg3');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').label('Multislice');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('colortable', 'Wave');
model.result('pg1').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').feature('mslc1').set('smooth', 'internal');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Acoustic Velocity (ta)');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').setIndex('looplevel', 31, 1);
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').setIndex('looplevel', 31, 1);
model.result('pg2').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg1');
model.result('pg2').feature.create('slc1', 'Slice');
model.result('pg2').feature('slc1').label('Slice');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('expr', 'ta.v_inst');
model.result('pg2').feature('slc1').set('smooth', 'internal');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('data', 'parent');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Temperature Variation (ta)');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').setIndex('looplevel', 31, 1);
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').setIndex('looplevel', 31, 1);
model.result('pg3').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg2');
model.result('pg3').feature.create('mslc1', 'Multislice');
model.result('pg3').feature('mslc1').label('Multislice');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('expr', 'ta.T_t');
model.result('pg3').feature('mslc1').set('colortable', 'ThermalWave');
model.result('pg3').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').feature('mslc1').set('smooth', 'internal');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('data', 'parent');
model.result('pg1').run;

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').setSolveFor('/physics/ta', true);

model.geom('geom1').run;

model.study('std2').label('Study - No Slip');
model.study('std2').create('param', 'Parametric');
model.study('std2').feature('param').setIndex('pname', 'Hslit', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'm', 0);
model.study('std2').feature('param').setIndex('pname', 'Hslit', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'm', 0);
model.study('std2').feature('param').setIndex('pname', 'R', 0);
model.study('std2').feature('param').setIndex('plistarr', ['range(1[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm],0.1[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm],4[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm])'], 0);
model.study('std2').feature('freq').set('plist', 'f0');
model.study('std2').feature('freq').set('useadvanceddisable', true);
model.study('std2').feature('freq').set('disabledphysics', {'ta/slw1' 'ta/slw2'});

model.sol.create('sol34');
model.sol('sol34').study('std2');
model.sol('sol34').create('st1', 'StudyStep');
model.sol('sol34').feature('st1').set('study', 'std2');
model.sol('sol34').feature('st1').set('studystep', 'freq');
model.sol('sol34').create('v1', 'Variables');
model.sol('sol34').feature('v1').set('control', 'freq');
model.sol('sol34').create('s1', 'Stationary');
model.sol('sol34').feature('s1').set('stol', 0.001);
model.sol('sol34').feature('s1').create('p1', 'Parametric');
model.sol('sol34').feature('s1').feature.remove('pDef');
model.sol('sol34').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol34').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol34').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol34').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol34').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol34').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol34').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol34').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol34').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol34').feature('s1').feature('p1').set('probes', {});
model.sol('sol34').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol34').feature('s1').set('linpmethod', 'sol');
model.sol('sol34').feature('s1').set('linpsol', 'zero');
model.sol('sol34').feature('s1').set('control', 'freq');
model.sol('sol34').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol34').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol34').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol34').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol34').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol34').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol34').feature('s1').create('d1', 'Direct');
model.sol('sol34').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol34').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol34').feature('s1').feature('d1').label('Suggested Direct Solver (ta)');
model.sol('sol34').feature('s1').create('i1', 'Iterative');
model.sol('sol34').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with Direct Precon.) (ta)');
model.sol('sol34').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol34').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol34').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_p' 'comp1_Sparam1'});
model.sol('sol34').feature('s1').feature('i1').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol34').feature('s1').feature('i1').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol34').feature('s1').feature('i1').create('dp2', 'DirectPreconditioner');
model.sol('sol34').feature('s1').feature('i1').feature('dp2').set('hybridization', 'multi');
model.sol('sol34').feature('s1').feature('i1').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol34').feature('s1').feature('i1').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol34').feature('s1').feature('i1').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol34').feature('s1').create('i2', 'Iterative');
model.sol('sol34').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with DD) (ta)');
model.sol('sol34').feature('s1').feature('i2').create('dd1', 'DomainDecomposition');
model.sol('sol34').feature('s1').feature('i2').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol34').feature('s1').feature('i2').feature('dd1').set('domdofmax', 200000);
model.sol('sol34').feature('s1').feature('i2').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol34').feature('s1').feature('i2').feature('dd1').set('userac', false);
model.sol('sol34').feature('s1').feature('i2').feature('dd1').set('usecoarse', 'aggregation');
model.sol('sol34').feature('s1').feature('i2').feature('dd1').feature('ds').create('dp1', 'DirectPreconditioner');
model.sol('sol34').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridization', 'multi');
model.sol('sol34').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_p' 'comp1_Sparam1'});
model.sol('sol34').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol34').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol34').feature('s1').feature('i2').feature('dd1').feature('ds').create('dp2', 'DirectPreconditioner');
model.sol('sol34').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridization', 'multi');
model.sol('sol34').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol34').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol34').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol34').feature('s1').feature('i2').feature('dd1').feature('cs').create('d1', 'Direct');
model.sol('sol34').feature('s1').feature('i2').feature('dd1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol34').feature('s1').feature('i2').feature('dd1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol34').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol34').feature('s1').feature.remove('fcDef');
model.sol('sol34').attach('std2');

model.batch.create('p2', 'Parametric');
model.batch('p2').study('std2');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol34');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').set('pname', {'R'});
model.batch('p2').set('plistarr', {['range(1[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm],0.1[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm],4[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm])']});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std2');
model.batch('p2').set('control', 'param');

model.sol.create('sol35');
model.sol('sol35').study('std2');
model.sol('sol35').label('Parametric Solutions 2');

model.batch('p2').feature('so1').set('psol', 'sol35');
model.batch('p2').run('compute');

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Acoustic Pressure (ta) 1');
model.result('pg4').set('data', 'dset4');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').setIndex('looplevel', 31, 1);
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').set('data', 'dset4');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').setIndex('looplevel', 31, 1);
model.result('pg4').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg3');
model.result('pg4').feature.create('mslc1', 'Multislice');
model.result('pg4').feature('mslc1').label('Multislice');
model.result('pg4').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg4').feature('mslc1').set('colortable', 'Wave');
model.result('pg4').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg4').feature('mslc1').set('smooth', 'internal');
model.result('pg4').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg4').feature('mslc1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Acoustic Velocity (ta) 1');
model.result('pg5').set('data', 'dset4');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').setIndex('looplevel', 31, 1);
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').set('data', 'dset4');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').setIndex('looplevel', 31, 1);
model.result('pg5').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg1');
model.result('pg5').feature.create('slc1', 'Slice');
model.result('pg5').feature('slc1').label('Slice');
model.result('pg5').feature('slc1').set('showsolutionparams', 'on');
model.result('pg5').feature('slc1').set('expr', 'ta.v_inst');
model.result('pg5').feature('slc1').set('smooth', 'internal');
model.result('pg5').feature('slc1').set('showsolutionparams', 'on');
model.result('pg5').feature('slc1').set('data', 'parent');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Temperature Variation (ta) 1');
model.result('pg6').set('data', 'dset4');
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').setIndex('looplevel', 31, 1);
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').set('data', 'dset4');
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').setIndex('looplevel', 31, 1);
model.result('pg6').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg2');
model.result('pg6').feature.create('mslc1', 'Multislice');
model.result('pg6').feature('mslc1').label('Multislice');
model.result('pg6').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg6').feature('mslc1').set('expr', 'ta.T_t');
model.result('pg6').feature('mslc1').set('colortable', 'ThermalWave');
model.result('pg6').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg6').feature('mslc1').set('smooth', 'internal');
model.result('pg6').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg6').feature('mslc1').set('data', 'parent');
model.result('pg4').run;
model.result.dataset('dset2').selection.geom('geom1', 3);
model.result.dataset('dset2').selection.geom('geom1', 3);
model.result.dataset('dset2').selection.set([1]);
model.result.dataset('dset4').selection.geom('geom1', 3);
model.result.dataset('dset4').selection.geom('geom1', 3);
model.result.dataset('dset4').selection.set([1]);
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').set('data', 'dset2');
model.result.evaluationGroup('eg1').label('Evaluation Group - Slip wall');
model.result.evaluationGroup('eg1').create('av1', 'AvSurface');
model.result.evaluationGroup('eg1').feature('av1').set('intvolume', true);
model.result.evaluationGroup('eg1').feature('av1').selection.set([3]);
model.result.evaluationGroup('eg1').feature('av1').setIndex('expr', 'real(ta.p_t/(ta.rho0*ta.c)/w)', 0);
model.result.evaluationGroup('eg1').feature('av1').setIndex('unit', 1, 0);
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup.create('eg2', 'EvaluationGroup');
model.result.evaluationGroup('eg2').label('Evaluation Group - No slip');
model.result.evaluationGroup('eg2').set('data', 'dset4');
model.result.evaluationGroup('eg2').create('av1', 'AvSurface');
model.result.evaluationGroup('eg2').feature('av1').set('intvolume', true);
model.result.evaluationGroup('eg2').feature('av1').selection.set([3]);
model.result.evaluationGroup('eg2').feature('av1').setIndex('expr', 'real(ta.p_t/(ta.rho0*ta.c)/w)', 0);
model.result.evaluationGroup('eg2').feature('av1').setIndex('unit', 1, 0);
model.result.evaluationGroup('eg2').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Impedance vs R');
model.result('pg7').create('tblp1', 'Table');
model.result('pg7').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg7').feature('tblp1').set('linewidth', 'preference');
model.result('pg7').feature('tblp1').set('source', 'evaluationgroup');
model.result('pg7').feature('tblp1').set('xaxisdata', 1);
model.result('pg7').feature('tblp1').set('plotcolumninput', 'manual');
model.result('pg7').feature('tblp1').set('plotcolumns', [3]);
model.result('pg7').feature('tblp1').set('linemarker', 'circle');
model.result('pg7').feature('tblp1').set('legend', true);
model.result('pg7').feature('tblp1').set('legendmethod', 'manual');
model.result('pg7').feature('tblp1').setIndex('legends', 'Slip Wall', 0);
model.result('pg7').run;
model.result('pg7').create('tblp2', 'Table');
model.result('pg7').feature('tblp2').set('markerpos', 'datapoints');
model.result('pg7').feature('tblp2').set('linewidth', 'preference');
model.result('pg7').feature('tblp2').set('source', 'evaluationgroup');
model.result('pg7').feature('tblp2').set('evaluationgroup', 'eg2');
model.result('pg7').feature('tblp2').set('xaxisdata', 1);
model.result('pg7').feature('tblp2').set('plotcolumninput', 'manual');
model.result('pg7').feature('tblp2').set('plotcolumns', [3]);
model.result('pg7').feature('tblp2').set('linecolor', 'green');
model.result('pg7').feature('tblp2').set('linemarker', 'circle');
model.result('pg7').feature('tblp2').set('legend', true);
model.result('pg7').feature('tblp2').set('legendmethod', 'manual');
model.result('pg7').feature('tblp2').setIndex('legends', 'No Slip', 0);
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').run;
model.result('pg8').label('Acoustic Velocity - Slip Wall');
model.result('pg8').set('data', 'dset2');
model.result('pg8').set('edges', false);
model.result('pg8').set('showlegendsunit', true);
model.result('pg8').set('titletype', 'none');
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('data', 'dset2');
model.result('pg8').feature('surf1').setIndex('looplevel', 1, 1);
model.result('pg8').feature('surf1').set('expr', 'ta.v_inst');
model.result('pg8').run;
model.result('pg8').create('surf2', 'Surface');
model.result('pg8').feature('surf2').set('data', 'dset2');
model.result('pg8').feature('surf2').setIndex('looplevel', 14, 1);
model.result('pg8').feature('surf2').set('expr', 'ta.v_inst');
model.result('pg8').feature('surf2').set('inheritplot', 'surf1');
model.result('pg8').feature('surf2').create('trn1', 'Translation');
model.result('pg8').run;
model.result('pg8').feature('surf2').feature('trn1').set('trans', [6 0 0]);
model.result('pg8').run;
model.result('pg8').feature.duplicate('surf3', 'surf2');
model.result('pg8').run;
model.result('pg8').feature('surf3').setIndex('looplevel', 31, 1);
model.result('pg8').run;
model.result('pg8').feature('surf3').feature('trn1').set('trans', [15 0 0]);
model.result('pg8').run;
model.result('pg8').create('ann1', 'Annotation');
model.result('pg8').feature('ann1').label('Annotation R=1.0');
model.result('pg8').feature('ann1').set('latexmarkup', true);
model.result('pg8').feature('ann1').set('text', '$R=1.0\; \mathrm{\mu m}$');
model.result('pg8').feature('ann1').set('posxexpr', 1);
model.result('pg8').feature('ann1').set('anchorpoint', 'uppermiddle');
model.result('pg8').feature('ann1').set('showpoint', false);
model.result('pg8').feature.duplicate('ann2', 'ann1');
model.result('pg8').run;
model.result('pg8').feature('ann2').label('Annotation R=2.3');
model.result('pg8').feature('ann2').set('text', '$R=2.3\; \mathrm{\mu m}$');
model.result('pg8').feature('ann2').set('posxexpr', 8);
model.result('pg8').feature.duplicate('ann3', 'ann2');
model.result('pg8').run;
model.result('pg8').feature('ann3').label('Annotation R=4.0');
model.result('pg8').feature('ann3').set('text', '$R=4.0\; \mathrm{\mu m}$');
model.result('pg8').feature('ann3').set('posxexpr', 19);
model.result('pg8').run;
model.result('pg8').run;
model.result.duplicate('pg9', 'pg8');
model.result('pg9').run;
model.result('pg9').label('Dissipation - Slip Wall');
model.result('pg9').run;
model.result('pg9').feature('surf1').set('expr', 'ta.diss_tot');
model.result('pg9').feature('surf1').set('rangecoloractive', true);
model.result('pg9').feature('surf1').set('rangecolormax', '2E-9');
model.result('pg9').feature('surf1').set('rangecolormin', 0);
model.result('pg9').feature('surf1').set('colortable', 'HeatCamera');
model.result('pg9').run;
model.result('pg9').feature('surf2').set('expr', 'ta.diss_tot');
model.result('pg9').run;
model.result('pg9').feature('surf3').set('expr', 'ta.diss_tot');
model.result('pg9').run;
model.result.dataset.create('sec1', 'Sector3D');
model.result.dataset('sec1').set('data', 'dset2');
model.result.dataset('sec1').set('sectors', 12);
model.result.dataset('sec1').set('include', 'manual');
model.result.dataset('sec1').set('startsector', -2);
model.result.dataset('sec1').set('sectorsinclude', 9);
model.result.dataset('sec1').set('trans', 'rotrefl');
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').run;
model.result('pg10').label('Geometry');
model.result('pg10').set('data', 'sec1');
model.result('pg10').set('titletype', 'none');
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', '1');
model.result('pg10').feature('surf1').set('coloring', 'uniform');
model.result('pg10').feature('surf1').set('color', 'gray');
model.result('pg10').run;
model.result('pg8').run;

model.title('Viscous Damping of a Microperforated Plate in the Slip Flow Regime');

model.description('This example describes the impedance of a planar micromechanical structure with a perforated plate. It investigates the importance of the Slip Wall boundary condition at high Knudsen numbers in the frequency domain and the optimal hole size for perforated plates.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;
model.sol('sol20').clearSolutionData;
model.sol('sol21').clearSolutionData;
model.sol('sol22').clearSolutionData;
model.sol('sol23').clearSolutionData;
model.sol('sol24').clearSolutionData;
model.sol('sol25').clearSolutionData;
model.sol('sol26').clearSolutionData;
model.sol('sol27').clearSolutionData;
model.sol('sol28').clearSolutionData;
model.sol('sol29').clearSolutionData;
model.sol('sol30').clearSolutionData;
model.sol('sol31').clearSolutionData;
model.sol('sol32').clearSolutionData;
model.sol('sol33').clearSolutionData;
model.sol('sol34').clearSolutionData;
model.sol('sol35').clearSolutionData;
model.sol('sol36').clearSolutionData;
model.sol('sol37').clearSolutionData;
model.sol('sol38').clearSolutionData;
model.sol('sol39').clearSolutionData;
model.sol('sol40').clearSolutionData;
model.sol('sol41').clearSolutionData;
model.sol('sol42').clearSolutionData;
model.sol('sol43').clearSolutionData;
model.sol('sol44').clearSolutionData;
model.sol('sol45').clearSolutionData;
model.sol('sol46').clearSolutionData;
model.sol('sol47').clearSolutionData;
model.sol('sol48').clearSolutionData;
model.sol('sol49').clearSolutionData;
model.sol('sol50').clearSolutionData;
model.sol('sol51').clearSolutionData;
model.sol('sol52').clearSolutionData;
model.sol('sol53').clearSolutionData;
model.sol('sol54').clearSolutionData;
model.sol('sol55').clearSolutionData;
model.sol('sol56').clearSolutionData;
model.sol('sol57').clearSolutionData;
model.sol('sol58').clearSolutionData;
model.sol('sol59').clearSolutionData;
model.sol('sol60').clearSolutionData;
model.sol('sol61').clearSolutionData;
model.sol('sol62').clearSolutionData;
model.sol('sol63').clearSolutionData;
model.sol('sol64').clearSolutionData;
model.sol('sol65').clearSolutionData;
model.sol('sol66').clearSolutionData;

model.label('viscous_damping_mpp.mph');

model.modelNode.label('Components');

out = model;
