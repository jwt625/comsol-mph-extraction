function out = model
%
% turbulent_mixing.m
%
% Model exported on May 26 2025, 21:26 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/CFD_Module/Single-Phase_Flow');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'TurbulentFlowkeps', 'geom1');
model.physics('spf').model('comp1');

model.common.create('rot1', 'RotatingDomain', 'comp1');
model.common('rot1').set('rotationType', 'rotationalVelocity');
model.common('rot1').set('rotationalVelocityExpression', 'generalRevolutionsPerTime');
model.common('rot1').selection.all;

model.study.create('std1');
model.study('std1').create('frrot', 'FrozenRotor');
model.study('std1').feature('frrot').set('solnum', 'auto');
model.study('std1').feature('frrot').set('notsolnum', 'auto');
model.study('std1').feature('frrot').set('outputmap', {});
model.study('std1').feature('frrot').set('ngenAUX', '1');
model.study('std1').feature('frrot').set('goalngenAUX', '1');
model.study('std1').feature('frrot').set('ngenAUX', '1');
model.study('std1').feature('frrot').set('goalngenAUX', '1');
model.study('std1').feature('frrot').setSolveFor('/physics/spf', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('TIME', '0[s]');
model.param.set('rpm', '20[1/min]', 'Mixer revolutions');
model.param.set('frev_out0', '7[1]', 'Start revolution, storing fluid fields');
model.param.set('frev_outEnd', '10[1]', 'End revolution, storing fluid fields');
model.param.set('rev_t', '1/rpm', 'Revolution time');
model.param.set('frev_t0', 'frev_out0/rpm', 'Start time, storing fluid fields');
model.param.set('frev_tEnd', 'frev_outEnd/rpm', 'End time, storing fluid fields');
model.param.set('rev_n', '20', 'Number of time steps to store per revolution');
model.param.set('rev_dt', 'rev_t/rev_n', 'Time step between stored time steps');
model.param.set('inject_x', '0.3[m]', 'Injection point, x-component');
model.param.set('inject_y', 'inject_x', 'Injection point, y-component');
model.param.set('tank_R', '0.5[m]', 'Tank radius');
model.param.set('blade_R', '0.25[m]', 'Blade radius');
model.param.set('baffle_L', '0.1[m]', 'Baffle length');
model.param.set('tank_A', 'pi*tank_R^2', 'Tank cross section area');
model.param.set('blade_Utip', '2*pi*blade_R*rpm', 'Blade tip speed');
model.param.set('mix_revs', '40[1]', 'Mixing revolutions to simulate');

model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 'tank_R');
model.geom('geom1').run('c1');
model.geom('geom1').create('c2', 'Circle');
model.geom('geom1').feature('c2').set('r', '0.7*tank_R');
model.geom('geom1').run('c2');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').set('keepsubtract', true);
model.geom('geom1').feature('dif1').selection('input').set({'c1'});
model.geom('geom1').feature('dif1').selection('input2').set({'c2'});
model.geom('geom1').run('dif1');
model.geom('geom1').create('ls1', 'LineSegment');
model.geom('geom1').feature('ls1').set('specify1', 'coord');
model.geom('geom1').feature('ls1').set('specify2', 'coord');
model.geom('geom1').feature('ls1').set('coord1', {'-tank_R' '0'});
model.geom('geom1').feature('ls1').set('coord2', {'-tank_R+baffle_L' '0'});
model.geom('geom1').run('ls1');
model.geom('geom1').create('rot1', 'Rotate');
model.geom('geom1').feature('rot1').selection('input').set({'ls1'});
model.geom('geom1').feature('rot1').set('rot', 'range(90,90,270)');
model.geom('geom1').feature('rot1').set('keep', true);
model.geom('geom1').run('rot1');
model.geom('geom1').create('pt1', 'Point');
model.geom('geom1').feature('pt1').setIndex('p', 'inject_x', 0);
model.geom('geom1').feature('pt1').setIndex('p', 'inject_y', 1);
model.geom('geom1').run('pt1');
model.geom('geom1').create('pt2', 'Point');
model.geom('geom1').feature('pt2').setIndex('p', '-tank_R*0.97', 0);
model.geom('geom1').run('pt2');
model.geom('geom1').create('rot2', 'Rotate');
model.geom('geom1').feature('rot2').selection('input').set({'pt2'});
model.geom('geom1').feature('rot2').set('rot', -10);
model.geom('geom1').run('rot2');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'dif1' 'ls1' 'pt1' 'rot1' 'rot2'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('ls2', 'LineSegment');
model.geom('geom1').feature('ls2').set('specify1', 'coord');
model.geom('geom1').feature('ls2').set('specify2', 'coord');
model.geom('geom1').feature('ls2').set('coord1', [-0.25 0]);
model.geom('geom1').feature('ls2').set('coord2', [0.25 0]);
model.geom('geom1').run('ls2');
model.geom('geom1').create('ls3', 'LineSegment');
model.geom('geom1').feature('ls3').set('specify1', 'coord');
model.geom('geom1').feature('ls3').set('specify2', 'coord');
model.geom('geom1').feature('ls3').set('coord1', [0 -0.25]);
model.geom('geom1').feature('ls3').set('coord2', [0 0.25]);
model.geom('geom1').run('ls3');
model.geom('geom1').create('uni2', 'Union');
model.geom('geom1').feature('uni2').selection('input').set({'c2' 'ls2' 'ls3'});
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').run('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(1);
model.selection('sel1').set([1 2 3 4 13 14 15 16]);
model.selection('sel1').label('Impeller and Baffles');

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').set('opname', 'tankAv');
model.cpl('aveop1').selection.all;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water, liquid');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');

model.common('rot1').selection.set([2]);
model.common('rot1').set('revolutionsPerTime', '-rpm');

model.physics('spf').create('iwbc1', 'InteriorWallBC', 1);
model.physics('spf').feature('iwbc1').selection.named('sel1');
model.physics('spf').create('prpc1', 'PressurePointConstraint', 0);
model.physics('spf').feature('prpc1').selection.set([10]);

model.view('view1').hideEntities.create('hide1');
model.view('view1').hideEntities('hide1').geom('geom1', 1);
model.view('view1').hideEntities('hide1').set([7 8 10 11 17 18 19 20]);

model.mesh('mesh1').autoMeshSize(4);
model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.geom('geom1', 0);
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([11]);
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', '3e-3');
model.mesh('mesh1').run;

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'frrot');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'frrot');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables ()');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_k' 'comp1_ep'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.45);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s1').create('d2', 'Direct');
model.sol('sol1').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d2').label('Direct, turbulence variables (spf)');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Turbulence Variables');
model.sol('sol1').feature('s1').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s1').feature('se1').set('subinitcfl', 3);
model.sol('sol1').feature('s1').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s1').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s1').feature('se1').set('subkdpid', 0.15);
model.sol('sol1').feature('s1').feature('se1').set('subkipid', 0.15);
model.sol('sol1').feature('s1').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s1').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s1').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s1').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s1').feature('se1').set('maxsegiter', 300);
model.sol('sol1').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.k 0 comp1.ep 0 ');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables ()');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, turbulence variables (spf)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Velocity (spf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Pressure (spf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').label('Contour');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('expr', 'p');
model.result('pg2').feature('con1').set('number', 40);
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('smooth', 'internal');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('data', 'parent');
model.result.dataset.create('edg1', 'Edge2D');
model.result.dataset('edg1').label('Exterior Walls');
model.result.dataset('edg1').set('data', 'none');
model.result.dataset.create('edg2', 'Edge2D');
model.result.dataset('edg2').label('Interior Walls');
model.result.dataset('edg2').set('data', 'dset1');
model.result.dataset('edg2').selection.geom('geom1', 1);
model.result.dataset('edg2').selection.set([1 2 3 4 13 14 15 16]);
model.result.dataset('edg1').set('data', 'dset1');
model.result.dataset('edg1').selection.geom('geom1', 1);
model.result.dataset('edg1').selection.set([5 6 9 12]);
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Wall Resolution (spf)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond2/pcond5/pcond1/pg2');
model.result('pg3').feature.create('line1', 'Line');
model.result('pg3').feature('line1').label('Wall Resolution');
model.result('pg3').feature('line1').set('showsolutionparams', 'on');
model.result('pg3').feature('line1').set('expr', 'spf.Delta_wPlus');
model.result('pg3').feature('line1').set('linetype', 'tube');
model.result('pg3').feature('line1').set('smooth', 'internal');
model.result('pg3').feature('line1').set('showsolutionparams', 'on');
model.result('pg3').feature('line1').set('data', 'parent');
model.result('pg3').feature('line1').feature.create('hght1', 'Height');
model.result('pg3').feature('line1').feature('hght1').label('Height Expression');
model.result('pg3').feature('line1').feature('hght1').set('heightdata', 'expr');
model.result('pg3').feature('line1').feature('hght1').set('expr', 'spf.WRHeightExpr');
model.result('pg3').feature('line1').feature.create('def1', 'Deform');
model.result('pg3').feature('line1').feature('def1').label('Deformation');
model.result('pg3').feature('line1').feature('def1').set('expr', {'0' '0'});
model.result('pg3').feature('line1').feature('def1').set('scaleactive', true);
model.result('pg3').feature.create('line2', 'Line');
model.result('pg3').feature('line2').label('Wall Resolution, Upside');
model.result('pg3').feature('line2').set('showsolutionparams', 'on');
model.result('pg3').feature('line2').set('expr', 'spf.Delta_wPlus_u');
model.result('pg3').feature('line2').set('titletype', 'none');
model.result('pg3').feature('line2').set('linetype', 'tube');
model.result('pg3').feature('line2').set('smooth', 'internal');
model.result('pg3').feature('line2').set('showsolutionparams', 'on');
model.result('pg3').feature('line2').set('data', 'parent');
model.result('pg3').feature('line2').set('inheritplot', 'line1');
model.result('pg3').feature('line2').feature.create('hght1', 'Height');
model.result('pg3').feature('line2').feature('hght1').set('heightdata', 'expr');
model.result('pg3').feature('line2').feature('hght1').set('expr', 'spf.WRHeightExpr_u');
model.result('pg3').feature('line2').feature.create('def1', 'Deform');
model.result('pg3').feature('line2').feature('def1').label('Deformation');
model.result('pg3').feature('line2').feature('def1').set('expr', {'spf.WRDeform_ux' 'spf.WRDeform_uy'});
model.result('pg3').feature.create('line3', 'Line');
model.result('pg3').feature('line3').label('Wall Resolution, Downside');
model.result('pg3').feature('line3').set('showsolutionparams', 'on');
model.result('pg3').feature('line3').set('expr', 'spf.Delta_wPlus_d');
model.result('pg3').feature('line3').set('titletype', 'none');
model.result('pg3').feature('line3').set('linetype', 'tube');
model.result('pg3').feature('line3').set('smooth', 'internal');
model.result('pg3').feature('line3').set('showsolutionparams', 'on');
model.result('pg3').feature('line3').set('data', 'parent');
model.result('pg3').feature('line3').set('inheritplot', 'line1');
model.result('pg3').feature('line3').feature.create('hght1', 'Height');
model.result('pg3').feature('line3').feature('hght1').set('heightdata', 'expr');
model.result('pg3').feature('line3').feature('hght1').set('expr', 'spf.WRHeightExpr_d');
model.result('pg3').feature('line3').feature.create('def1', 'Deform');
model.result('pg3').feature('line3').feature('def1').label('Deformation');
model.result('pg3').feature('line3').feature('def1').set('expr', {'spf.WRDeform_dx' 'spf.WRDeform_dy'});
model.result('pg1').run;
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('udist', 0.02);
model.result('pg1').feature('str1').set('color', 'white');
model.result('pg1').run;
model.result('pg1').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').add('plotgroup', 'pg1');
model.nodeGroup('grp1').add('plotgroup', 'pg2');
model.nodeGroup('grp1').add('plotgroup', 'pg3');
model.nodeGroup('grp1').label('Fluid Flow, Frozen Rotor');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('U0', 'withsol(''sol1'',tankAv(spf.U))');
model.variable('var1').descr('U0', 'Average velocity, frozen rotor');
model.variable('var1').set('muT0', 'withsol(''sol1'',tankAv(spf.muT))');
model.variable('var1').descr('muT0', 'Average turbulent dynamic viscosity, frozen rotor');

model.probe.create('dom1', 'Domain');
model.probe('dom1').model('comp1');
model.probe('dom1').set('intsurface', true);
model.probe('dom1').set('intvolume', true);
model.probe('dom1').label('Domain Probe: U');
model.probe('dom1').set('expr', 'spf.U/U0');
model.probe.duplicate('dom2', 'dom1');
model.probe('dom2').label('Domain Probe: muT');
model.probe('dom2').set('expr', 'spf.muT/muT0');

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/spf', true);

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_ode1').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ode1').set('scaleval', '1');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,0.1,1)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {'dom1' 'dom2'});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 0.005);
model.sol('sol2').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol2').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('atolmethod', {'comp1_ep' 'unscaled' 'comp1_k' 'unscaled' 'comp1_p' 'scaled' 'comp1_u' 'global' 'comp1_ode1' 'global'});
model.sol('sol2').feature('t1').set('atol', {'comp1_ep' '0.09*sqrt((0.01*1)^3)/(0.035*1.0)' 'comp1_k' '(0.01*1)^2' 'comp1_p' '1e-3' 'comp1_u' '1e-3' 'comp1_ode1' '1e-3'});
model.sol('sol2').feature('t1').set('atolvaluemethod', {'comp1_ep' 'manual' 'comp1_k' 'manual' 'comp1_p' 'factor' 'comp1_u' 'factor' 'comp1_ode1' 'factor'});
model.sol('sol2').feature('t1').set('atolfactor', {'comp1_ep' '0.1' 'comp1_k' '0.1' 'comp1_p' '1' 'comp1_u' '0.1' 'comp1_ode1' '0.1'});
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('estrat', 'exclude');
model.sol('sol2').feature('t1').set('rhoinf', 0.5);
model.sol('sol2').feature('t1').set('predictor', 'constant');
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('stabcntrl', true);
model.sol('sol2').feature('t1').set('bwinitstepfrac', '0.01');
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('t1').create('se1', 'Segregated');
model.sol('sol2').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_ode1'});
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('subdamp', 1);
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('subntolfact', 0.1);
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('subjtech', 'onevery');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('subtermconst', 'iter');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('subiter', 1);
model.sol('sol2').feature('t1').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('d1').label('Direct, angular displacement (spf)');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').label('Angular Displacement');
model.sol('sol2').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_u' 'comp1_p'});
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('subjtech', 'once');
model.sol('sol2').feature('t1').create('d2', 'Direct');
model.sol('sol2').feature('t1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('d2').label('Direct, fluid flow variables (spf)');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').label('Velocity u, Pressure p');
model.sol('sol2').feature('t1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('segvar', {'comp1_k' 'comp1_ep'});
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('subdamp', 0.8);
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('subiter', 1);
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('subtermconst', 'iter');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('subjtech', 'onevery');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('subntolfact', 0.1);
model.sol('sol2').feature('t1').create('d3', 'Direct');
model.sol('sol2').feature('t1').feature('d3').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d3').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('d3').label('Direct, turbulence variables (spf)');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('linsolver', 'd3');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').label('Turbulence Variables');
model.sol('sol2').feature('t1').feature('se1').set('ntolfact', 0.5);
model.sol('sol2').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol2').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol2').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol2').feature('t1').feature('se1').set('segaaccdelay', 1);
model.sol('sol2').feature('t1').feature('se1').set('maxsegiter', 10);
model.sol('sol2').feature('t1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol2').feature('t1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.k 0 comp1.ep 0 ');
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol2').feature('t1').feature('i1').set('maxlinit', 100);
model.sol('sol2').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('t1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol2').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').create('i2', 'Iterative');
model.sol('sol2').feature('t1').feature('i2').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i2').set('prefuntype', 'left');
model.sol('sol2').feature('t1').feature('i2').set('itrestart', 50);
model.sol('sol2').feature('t1').feature('i2').set('rhob', 20);
model.sol('sol2').feature('t1').feature('i2').set('maxlinit', 200);
model.sol('sol2').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol2').feature('t1').feature('i2').label('AMG, turbulence variables (spf)');
model.sol('sol2').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');

model.probe('dom1').genResult('none');
model.probe('dom2').genResult('none');

model.result.dataset('dset2').set('geom', 'geom1');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Velocity (spf) 1');
model.result('pg5').set('data', 'dset2');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('data', 'dset2');
model.result('pg5').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').label('Surface');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').label('Pressure (spf) 1');
model.result('pg6').set('data', 'dset2');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('data', 'dset2');
model.result('pg6').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg6').feature.create('con1', 'Contour');
model.result('pg6').feature('con1').label('Contour');
model.result('pg6').feature('con1').set('showsolutionparams', 'on');
model.result('pg6').feature('con1').set('expr', 'p');
model.result('pg6').feature('con1').set('number', 40);
model.result('pg6').feature('con1').set('levelrounding', false);
model.result('pg6').feature('con1').set('smooth', 'internal');
model.result('pg6').feature('con1').set('showsolutionparams', 'on');
model.result('pg6').feature('con1').set('data', 'parent');
model.result.dataset.create('edg3', 'Edge2D');
model.result.dataset('edg3').label('Exterior Walls 1');
model.result.dataset('edg3').set('data', 'none');
model.result.dataset.create('edg4', 'Edge2D');
model.result.dataset('edg4').label('Interior Walls 1');
model.result.dataset('edg4').set('data', 'dset2');
model.result.dataset('edg4').selection.geom('geom1', 1);
model.result.dataset('edg4').selection.set([1 2 3 4 13 14 15 16]);
model.result.dataset('edg3').set('data', 'dset2');
model.result.dataset('edg3').selection.geom('geom1', 1);
model.result.dataset('edg3').selection.set([5 6 9 12]);
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').label('Wall Resolution (spf) 1');
model.result('pg7').set('data', 'dset2');
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').set('data', 'dset2');
model.result('pg7').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond2/pcond5/pcond1/pg2');
model.result('pg7').feature.create('line1', 'Line');
model.result('pg7').feature('line1').label('Wall Resolution');
model.result('pg7').feature('line1').set('showsolutionparams', 'on');
model.result('pg7').feature('line1').set('expr', 'spf.Delta_wPlus');
model.result('pg7').feature('line1').set('linetype', 'tube');
model.result('pg7').feature('line1').set('smooth', 'internal');
model.result('pg7').feature('line1').set('showsolutionparams', 'on');
model.result('pg7').feature('line1').set('data', 'parent');
model.result('pg7').feature('line1').feature.create('hght1', 'Height');
model.result('pg7').feature('line1').feature('hght1').label('Height Expression');
model.result('pg7').feature('line1').feature('hght1').set('heightdata', 'expr');
model.result('pg7').feature('line1').feature('hght1').set('expr', 'spf.WRHeightExpr');
model.result('pg7').feature('line1').feature.create('def1', 'Deform');
model.result('pg7').feature('line1').feature('def1').label('Deformation');
model.result('pg7').feature('line1').feature('def1').set('expr', {'0' '0'});
model.result('pg7').feature('line1').feature('def1').set('scaleactive', true);
model.result('pg7').feature.create('line2', 'Line');
model.result('pg7').feature('line2').label('Wall Resolution, Upside');
model.result('pg7').feature('line2').set('showsolutionparams', 'on');
model.result('pg7').feature('line2').set('expr', 'spf.Delta_wPlus_u');
model.result('pg7').feature('line2').set('titletype', 'none');
model.result('pg7').feature('line2').set('linetype', 'tube');
model.result('pg7').feature('line2').set('smooth', 'internal');
model.result('pg7').feature('line2').set('showsolutionparams', 'on');
model.result('pg7').feature('line2').set('data', 'parent');
model.result('pg7').feature('line2').set('inheritplot', 'line1');
model.result('pg7').feature('line2').feature.create('hght1', 'Height');
model.result('pg7').feature('line2').feature('hght1').set('heightdata', 'expr');
model.result('pg7').feature('line2').feature('hght1').set('expr', 'spf.WRHeightExpr_u');
model.result('pg7').feature('line2').feature.create('def1', 'Deform');
model.result('pg7').feature('line2').feature('def1').label('Deformation');
model.result('pg7').feature('line2').feature('def1').set('expr', {'spf.WRDeform_ux' 'spf.WRDeform_uy'});
model.result('pg7').feature.create('line3', 'Line');
model.result('pg7').feature('line3').label('Wall Resolution, Downside');
model.result('pg7').feature('line3').set('showsolutionparams', 'on');
model.result('pg7').feature('line3').set('expr', 'spf.Delta_wPlus_d');
model.result('pg7').feature('line3').set('titletype', 'none');
model.result('pg7').feature('line3').set('linetype', 'tube');
model.result('pg7').feature('line3').set('smooth', 'internal');
model.result('pg7').feature('line3').set('showsolutionparams', 'on');
model.result('pg7').feature('line3').set('data', 'parent');
model.result('pg7').feature('line3').set('inheritplot', 'line1');
model.result('pg7').feature('line3').feature.create('hght1', 'Height');
model.result('pg7').feature('line3').feature('hght1').set('heightdata', 'expr');
model.result('pg7').feature('line3').feature('hght1').set('expr', 'spf.WRHeightExpr_d');
model.result('pg7').feature('line3').feature.create('def1', 'Deform');
model.result('pg7').feature('line3').feature('def1').label('Deformation');
model.result('pg7').feature('line3').feature('def1').set('expr', {'spf.WRDeform_dx' 'spf.WRDeform_dy'});
model.result('pg5').run;

model.study('std2').feature('time').set('tlist', '0 range(frev_t0,rev_dt,frev_tEnd)');
model.study('std2').feature('time').set('plot', true);
model.study('std2').feature('time').set('plotgroup', 'pg4');
model.study('std2').feature('time').set('plotfreq', 'tsteps');
model.study('std2').feature('time').set('probesel', 'manual');
model.study('std2').feature('time').set('useinitsol', true);
model.study('std2').feature('time').set('initmethod', 'sol');
model.study('std2').feature('time').set('initstudy', 'std1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);

model.sol('sol2').study('std2');
model.sol('sol2').feature.remove('t1');
model.sol('sol2').feature.remove('v1');
model.sol('sol2').feature.remove('st1');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_ode1').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ode1').set('scaleval', '1');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', '0 range(frev_t0,rev_dt,frev_tEnd)');
model.sol('sol2').feature('t1').set('plot', 'on');
model.sol('sol2').feature('t1').set('plotgroup', 'pg4');
model.sol('sol2').feature('t1').set('plotfreq', 'tsteps');
model.sol('sol2').feature('t1').set('probesel', 'manual');
model.sol('sol2').feature('t1').set('probes', {'dom1' 'dom2'});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 0.005);
model.sol('sol2').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol2').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('atolmethod', {'comp1_ep' 'unscaled' 'comp1_k' 'unscaled' 'comp1_p' 'scaled' 'comp1_u' 'global' 'comp1_ode1' 'global'});
model.sol('sol2').feature('t1').set('atol', {'comp1_ep' '0.09*sqrt((0.01*1)^3)/(0.035*1.0)' 'comp1_k' '(0.01*1)^2' 'comp1_p' '1e-3' 'comp1_u' '1e-3' 'comp1_ode1' '1e-3'});
model.sol('sol2').feature('t1').set('atolvaluemethod', {'comp1_ep' 'manual' 'comp1_k' 'manual' 'comp1_p' 'factor' 'comp1_u' 'factor' 'comp1_ode1' 'factor'});
model.sol('sol2').feature('t1').set('atolfactor', {'comp1_ep' '0.1' 'comp1_k' '0.1' 'comp1_p' '1' 'comp1_u' '0.1' 'comp1_ode1' '0.1'});
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('estrat', 'exclude');
model.sol('sol2').feature('t1').set('rhoinf', 0.5);
model.sol('sol2').feature('t1').set('predictor', 'constant');
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('stabcntrl', true);
model.sol('sol2').feature('t1').set('bwinitstepfrac', '0.01');
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('t1').create('se1', 'Segregated');
model.sol('sol2').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_ode1'});
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('subdamp', 1);
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('subntolfact', 0.1);
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('subjtech', 'onevery');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('subtermconst', 'iter');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('subiter', 1);
model.sol('sol2').feature('t1').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('d1').label('Direct, angular displacement (spf)');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').label('Angular Displacement');
model.sol('sol2').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_u' 'comp1_p'});
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('subjtech', 'once');
model.sol('sol2').feature('t1').create('d2', 'Direct');
model.sol('sol2').feature('t1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('d2').label('Direct, fluid flow variables (spf)');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').label('Velocity u, Pressure p');
model.sol('sol2').feature('t1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('segvar', {'comp1_k' 'comp1_ep'});
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('subdamp', 0.8);
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('subiter', 1);
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('subtermconst', 'iter');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('subjtech', 'onevery');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('subntolfact', 0.1);
model.sol('sol2').feature('t1').create('d3', 'Direct');
model.sol('sol2').feature('t1').feature('d3').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d3').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('d3').label('Direct, turbulence variables (spf)');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('linsolver', 'd3');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').label('Turbulence Variables');
model.sol('sol2').feature('t1').feature('se1').set('ntolfact', 0.5);
model.sol('sol2').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol2').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol2').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol2').feature('t1').feature('se1').set('segaaccdelay', 1);
model.sol('sol2').feature('t1').feature('se1').set('maxsegiter', 10);
model.sol('sol2').feature('t1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol2').feature('t1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.k 0 comp1.ep 0 ');
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol2').feature('t1').feature('i1').set('maxlinit', 100);
model.sol('sol2').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('t1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol2').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').create('i2', 'Iterative');
model.sol('sol2').feature('t1').feature('i2').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i2').set('prefuntype', 'left');
model.sol('sol2').feature('t1').feature('i2').set('itrestart', 50);
model.sol('sol2').feature('t1').feature('i2').set('rhob', 20);
model.sol('sol2').feature('t1').feature('i2').set('maxlinit', 200);
model.sol('sol2').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol2').feature('t1').feature('i2').label('AMG, turbulence variables (spf)');
model.sol('sol2').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');

model.probe('dom1').genResult('none');
model.probe('dom2').genResult('none');

model.sol('sol2').runAll;

model.result('pg5').run;
model.result('pg4').set('window', 'window1');
model.result('pg4').run;

model.nodeGroup.create('grp2', 'Results');
model.nodeGroup('grp2').set('type', 'plotgroup');
model.nodeGroup.move('grp2', 1);
model.nodeGroup('grp2').add('plotgroup', 'pg4');
model.nodeGroup('grp2').add('plotgroup', 'pg5');
model.nodeGroup('grp2').add('plotgroup', 'pg6');
model.nodeGroup('grp2').add('plotgroup', 'pg7');
model.nodeGroup('grp2').label('Fluid Flow, Time Dependent');

model.result('pg4').set('window', 'window1');
model.result('pg4').run;
model.result('pg4').set('legendpos', 'lowerright');
model.result('pg4').set('window', 'window1');
model.result('pg4').run;
model.result('pg4').feature('tblp1').set('preprocx', 'linear');
model.result('pg4').feature('tblp1').set('scalingx', 'rpm');
model.result('pg4').set('window', 'window1');
model.result('pg4').run;
model.result('pg4').label('Probe Plot: Fluid flow development');
model.result('pg4').set('xlabelactive', true);
model.result('pg4').set('xlabel', 'Revolutions');
model.result('pg4').set('window', 'window1');
model.result('pg4').run;
model.result('pg4').feature('tblp1').set('legendmethod', 'manual');
model.result('pg4').feature('tblp1').setIndex('legends', 'spf.U/U0', 0);
model.result('pg4').feature('tblp1').setIndex('legends', 'spf.muT/muT0', 1);
model.result('pg4').set('window', 'window1');
model.result('pg4').run;
model.result('pg5').run;
model.result('pg5').create('str1', 'Streamline');
model.result('pg5').feature('str1').set('posmethod', 'uniform');
model.result('pg5').feature('str1').set('udist', 0.02);
model.result('pg5').feature('str1').set('color', 'white');
model.result('pg5').run;

model.func.create('rect1', 'Rectangle');
model.func('rect1').model('comp1');
model.func('rect1').set('lower', 0.1);
model.func('rect1').set('upper', 1.1);
model.func('rect1').set('smooth', 0.2);

model.probe.create('dom3', 'Domain');
model.probe('dom3').model('comp1');
model.probe('dom3').set('intsurface', true);
model.probe('dom3').set('intvolume', true);
model.probe('dom3').label('Domain Probe : c_av');
model.probe('dom3').set('expr', 'c');
model.probe('dom3').set('table', 'new');

model.result.table.create('tbl2', 'Table');

model.probe('dom3').set('table', 'tbl2');
model.probe('dom3').set('window', 'new');

model.result('pg7').set('windowtitle', 'Graphics');
model.result('pg6').set('windowtitle', 'Graphics');

model.probe('dom3').set('window', 'window2');
model.probe('dom3').set('windowtitle', 'Probe Plot 2');
model.probe.create('point1', 'Point');
model.probe('point1').model('comp1');
model.probe('point1').label('Point Probe : c');
model.probe('point1').set('type', 'integral');
model.probe('point1').selection.set([2]);
model.probe('point1').set('expr', 'c');
model.probe('point1').set('table', 'tbl2');
model.probe('point1').set('window', 'window2');

model.result.table('tbl2').label('Probe Table 2');

model.physics.create('tds', 'DilutedSpecies', 'geom1', {'c'});

model.study('std1').feature('frrot').setSolveFor('/physics/tds', false);
model.study('std2').feature('time').setSolveFor('/physics/tds', false);

model.physics('tds').create('tib1', 'ThinImpermeableBarrier', 1);
model.physics('tds').feature('tib1').selection.named('sel1');
model.physics('tds').create('lms1', 'MassSourceLine', 0);
model.physics('tds').feature('lms1').selection.set([11]);
model.physics('tds').feature('lms1').setIndex('qs', 'rect1(t[1/s])', 0);

model.multiphysics.create('rfd1', 'ReactingFlowDS', 'geom1', 2);

model.study.create('std3');
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').setSolveFor('/physics/spf', false);
model.study('std3').feature('time').setSolveFor('/physics/tds', true);
model.study('std3').feature('time').setSolveFor('/multiphysics/rfd1', true);
model.study('std3').feature('time').set('tlist', 'range(0,rev_t/3,rev_t*mix_revs)');
model.study('std3').feature('time').set('plot', true);
model.study('std3').feature('time').set('plotfreq', 'tsteps');
model.study('std3').feature('time').set('probesel', 'manual');
model.study('std3').feature('time').set('probes', {'dom3' 'point1'});
model.study('std3').feature('time').set('usesol', true);
model.study('std3').feature('time').set('notsolmethod', 'sol');
model.study('std3').feature('time').set('notstudy', 'std2');
model.study('std3').feature('time').set('notsolnum', 'all');

model.sol.create('sol3');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);

model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'time');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'time');
model.sol('sol3').create('t1', 'Time');
model.sol('sol3').feature('t1').set('tlist', 'range(0,rev_t/3,rev_t*mix_revs)');
model.sol('sol3').feature('t1').set('plot', 'on');
model.sol('sol3').feature('t1').set('plotgroup', 'pg1');
model.sol('sol3').feature('t1').set('plotfreq', 'tsteps');
model.sol('sol3').feature('t1').set('probesel', 'manual');
model.sol('sol3').feature('t1').set('probes', {'dom3' 'point1'});
model.sol('sol3').feature('t1').set('probefreq', 'tsteps');
model.sol('sol3').feature('t1').set('rtol', 0.005);
model.sol('sol3').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol3').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('atolmethod', {'comp1_c' 'global' 'comp1_ep' 'global' 'comp1_k' 'global' 'comp1_p' 'scaled' 'comp1_rfd1_cWall_d_c' 'global'  ...
'comp1_rfd1_cWall_u_c' 'global' 'comp1_u' 'global' 'comp1_ode1' 'global'});
model.sol('sol3').feature('t1').set('atolvaluemethod', {'comp1_c' 'factor' 'comp1_ep' 'factor' 'comp1_k' 'factor' 'comp1_p' 'factor' 'comp1_rfd1_cWall_d_c' 'factor'  ...
'comp1_rfd1_cWall_u_c' 'factor' 'comp1_u' 'factor' 'comp1_ode1' 'factor'});
model.sol('sol3').feature('t1').set('atolfactor', {'comp1_c' '0.1' 'comp1_ep' '0.1' 'comp1_k' '0.1' 'comp1_p' '1' 'comp1_rfd1_cWall_d_c' '0.1'  ...
'comp1_rfd1_cWall_u_c' '0.1' 'comp1_u' '0.1' 'comp1_ode1' '0.1'});
model.sol('sol3').feature('t1').set('reacf', true);
model.sol('sol3').feature('t1').set('storeudot', true);
model.sol('sol3').feature('t1').set('endtimeinterpolation', true);
model.sol('sol3').feature('t1').set('estrat', 'exclude');
model.sol('sol3').feature('t1').set('rhoinf', 0.5);
model.sol('sol3').feature('t1').set('predictor', 'constant');
model.sol('sol3').feature('t1').set('maxorder', 2);
model.sol('sol3').feature('t1').set('stabcntrl', true);
model.sol('sol3').feature('t1').set('bwinitstepfrac', '0.01');
model.sol('sol3').feature('t1').set('control', 'time');
model.sol('sol3').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('t1').create('seDef', 'Segregated');
model.sol('sol3').feature('t1').create('se1', 'Segregated');
model.sol('sol3').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol3').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_ode1'});
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('subdamp', 1);
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('subntolfact', 0.1);
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('subjtech', 'onevery');
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('subtermconst', 'iter');
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('subiter', 1);
model.sol('sol3').feature('t1').create('d1', 'Direct');
model.sol('sol3').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').feature('d1').label('Direct, angular displacement (spf)');
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol3').feature('t1').feature('se1').feature('ss1').label('Angular Displacement');
model.sol('sol3').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol3').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_c' 'comp1_rfd1_cWall_d_c' 'comp1_rfd1_cWall_u_c'});
model.sol('sol3').feature('t1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol3').feature('t1').feature('se1').feature('ss2').set('subjtech', 'once');
model.sol('sol3').feature('t1').feature('se1').feature('ss2').set('subtermconst', 'iter');
model.sol('sol3').feature('t1').create('d2', 'Direct');
model.sol('sol3').feature('t1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').feature('d2').label('Direct, concentrations (tds)');
model.sol('sol3').feature('t1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol3').feature('t1').feature('se1').feature('ss2').label('Concentration c');
model.sol('sol3').feature('t1').feature('se1').set('ntolfact', 0.5);
model.sol('sol3').feature('t1').feature('se1').set('maxsegiter', 10);
model.sol('sol3').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol3').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol3').feature('t1').feature('se1').set('segaaccdelay', 0);
model.sol('sol3').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol3').feature('t1').create('i1', 'Iterative');
model.sol('sol3').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol3').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol3').feature('t1').feature('i1').set('rhob', 400);
model.sol('sol3').feature('t1').feature('i1').set('maxlinit', 50);
model.sol('sol3').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol3').feature('t1').feature('i1').label('AMG, concentrations (tds)');
model.sol('sol3').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').feature.remove('fcDef');
model.sol('sol3').feature('t1').feature.remove('seDef');
model.sol('sol3').attach('std3');
model.sol('sol3').feature('t1').set('assumeperiodic', true);
model.sol('sol3').feature('t1').set('starttime', 'frev_tEnd-rev_t');
model.sol('sol3').feature('t1').set('solutionperiod', 'rev_t');

model.probe('dom3').genResult('none');
model.probe('point1').genResult('none');

model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').set('data', 'dset4');
model.result('pg9').label('Concentration (tds)');
model.result('pg9').set('titletype', 'custom');
model.result('pg9').set('prefixintitle', '');
model.result('pg9').set('expressionintitle', false);
model.result('pg9').set('typeintitle', true);
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', {'c'});
model.result('pg9').create('str1', 'Streamline');
model.result('pg9').feature('str1').set('expr', {'tds.tflux_cx' 'tds.tflux_cy'});
model.result('pg9').feature('str1').set('posmethod', 'uniform');
model.result('pg9').feature('str1').set('recover', 'pprint');
model.result('pg9').feature('str1').set('pointtype', 'arrow');
model.result('pg9').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg9').feature('str1').set('color', 'gray');
model.result('pg9').run;
model.result('pg9').set('frametype', 'spatial');

model.study('std3').feature('time').set('plotgroup', 'pg9');

model.probe('dom3').genResult('none');
model.probe('point1').genResult('none');

model.sol('sol3').runAll;

model.result('pg9').run;
model.result('pg8').set('window', 'window2');
model.result('pg8').set('windowtitle', 'Probe Plot 2');
model.result('pg8').run;

model.nodeGroup.create('grp3', 'Results');
model.nodeGroup('grp3').set('type', 'plotgroup');
model.nodeGroup.move('grp3', 2);
model.nodeGroup('grp3').add('plotgroup', 'pg8');
model.nodeGroup('grp3').add('plotgroup', 'pg9');
model.nodeGroup('grp3').label('Species Mixing, Time Dependent');

model.result('pg8').set('window', 'window2');
model.result('pg8').set('windowtitle', 'Probe Plot 2');
model.result('pg8').run;
model.result('pg8').set('window', 'window2');
model.result('pg8').set('windowtitle', 'Probe Plot 2');
model.result('pg8').run;
model.result('pg8').feature('tblp1').set('preprocx', 'linear');
model.result('pg8').feature('tblp1').set('scalingx', 'rpm');
model.result('pg8').set('window', 'window2');
model.result('pg8').set('windowtitle', 'Probe Plot 2');
model.result('pg8').run;
model.result('pg8').label('Probe Plot: Mixing');
model.result('pg8').set('xlabelactive', true);
model.result('pg8').set('xlabel', 'Revolutions');
model.result('pg8').set('ylabelactive', true);
model.result('pg8').set('ylabel', 'Concentration (mol/m<sup>3</sup>)');
model.result('pg8').set('legendpos', 'lowerright');
model.result('pg8').set('window', 'window2');
model.result('pg8').set('windowtitle', 'Probe Plot 2');
model.result('pg8').run;
model.result('pg8').set('window', 'window2');
model.result('pg8').set('windowtitle', 'Probe Plot 2');
model.result('pg8').run;
model.result('pg8').feature('tblp1').set('legendmethod', 'manual');
model.result('pg8').feature('tblp1').setIndex('legends', 'Average', 0);
model.result('pg8').feature('tblp1').setIndex('legends', 'Measured', 1);
model.result('pg8').set('window', 'window2');
model.result('pg8').set('windowtitle', 'Probe Plot 2');
model.result('pg8').run;
model.result('pg9').run;
model.result('pg9').run;
model.result('pg9').feature('surf1').set('expr', 'c/max(tankAv(c),1e-6)');
model.result('pg9').feature('surf1').set('rangecoloractive', true);
model.result('pg9').feature('surf1').set('rangecolormin', 0);
model.result('pg9').feature('surf1').set('rangecolormax', 2);
model.result('pg9').feature('surf1').set('colortable', 'Wave');
model.result('pg9').run;
model.result('pg9').feature('str1').active(false);
model.result('pg9').run;
model.result('pg9').setIndex('looplevel', 3, 0);
model.result('pg9').run;
model.result('pg9').setIndex('looplevel', 9, 0);
model.result('pg9').run;
model.result('pg9').setIndex('looplevel', 19, 0);
model.result('pg9').run;
model.result('pg9').setIndex('looplevel', 39, 0);
model.result('pg9').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('plotgroup', 'pg9');
model.result.export('anim1').set('frametime', 0.15);
model.result.export('anim1').set('framesel', 'all');
model.result.export('anim1').run;
model.result('pg9').run;
model.result('pg9').setIndex('looplevel', 21, 0);
model.result('pg9').run;

model.title('Turbulent Mixing in a Stirred Tank');

model.description('This example shows how the mixing capability of a stirred vessel can be evaluated. To efficiently reach the steady operational conditions the turbulent flow is solved for using a frozen rotor analysis, and a following time dependent simulation. When a quasi-steady flow field has developed, the turbulent mixing of a trace species is simulated, and the mixing time until it is fully mixed is evaluated.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('turbulent_mixing.mph');

model.modelNode.label('Components');

out = model;
