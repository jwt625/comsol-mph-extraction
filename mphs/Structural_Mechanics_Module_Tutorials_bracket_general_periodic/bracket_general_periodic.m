function out = model
%
% bracket_general_periodic.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('type', 'native');
model.geom('geom1').feature('imp1').set('filename', 'bracket.mphbin');
model.geom('geom1').feature('imp1').importData;

model.param.set('elSize', '6[mm]');
model.param.descr('elSize', 'Element Size');

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Partition block');
model.geom('geom1').feature('blk1').set('contributeto', 'csel1');
model.geom('geom1').feature('blk1').set('size', [0.025 0.13 0.04]);
model.geom('geom1').feature('blk1').set('pos', [-0.11 -0.12 0.025]);
model.geom('geom1').run('blk1');
model.geom('geom1').create('mir1', 'Mirror');
model.geom('geom1').feature('mir1').selection('input').named('csel1');
model.geom('geom1').feature('mir1').set('keep', true);
model.geom('geom1').feature('mir1').set('contributeto', 'csel1');
model.geom('geom1').run('mir1');
model.geom('geom1').create('mir2', 'Mirror');
model.geom('geom1').feature('mir2').selection('input').named('csel1');
model.geom('geom1').feature('mir2').set('keep', true);
model.geom('geom1').feature('mir2').set('axis', [1 0 0]);
model.geom('geom1').feature('mir2').set('contributeto', 'csel1');
model.geom('geom1').run('mir2');
model.geom('geom1').create('par1', 'Partition');
model.geom('geom1').feature('par1').selection('input').set({'imp1'});
model.geom('geom1').feature('par1').selection('tool').named('csel1');
model.geom('geom1').run('par1');
model.geom('geom1').run('fin');
model.geom('geom1').run('par1');
model.geom('geom1').create('cm1', 'CentroidMeasurement');
model.geom('geom1').feature('cm1').selection('ent').set('par1', [2 5]);
model.geom('geom1').run('cm1');
model.geom('geom1').feature('cm1').setIndex('parname', 'PinHoleX', 0);
model.geom('geom1').feature('cm1').setIndex('parname', 'PinHoleY', 1);
model.geom('geom1').feature('cm1').setIndex('parname', 'PinHoleZ', 2);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Bolt 1');
model.selection('sel1').geom(2);
model.selection('sel1').set([41]);
model.selection('sel1').set('groupcontang', true);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Bolt 2');
model.selection('sel2').geom(2);
model.selection('sel2').set([43]);
model.selection('sel2').set('groupcontang', true);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Bolt 3');
model.selection('sel3').geom(2);
model.selection('sel3').set([55]);
model.selection('sel3').set('groupcontang', true);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Bolt 4');
model.selection('sel4').geom(2);
model.selection('sel4').set([57]);
model.selection('sel4').set('groupcontang', true);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Bolt Holes');
model.selection('uni1').set('entitydim', 2);
model.selection('uni1').set('input', {'sel1' 'sel2' 'sel3' 'sel4'});
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Left Pin Hole');
model.selection('sel5').geom(2);
model.selection('sel5').set([4]);
model.selection('sel5').set('groupcontang', true);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Right Pin Hole');
model.selection('sel6').geom(2);
model.selection('sel6').set([75]);
model.selection('sel6').set('groupcontang', true);
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Pin Holes');
model.selection('uni2').set('entitydim', 2);
model.selection('uni2').set('input', {'sel5' 'sel6'});
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Bolt Hole Edges');
model.selection('adj1').set('entitydim', 2);
model.selection('adj1').set('outputdim', 1);
model.selection('adj1').set('input', {'uni1'});

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.named('uni1');

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.named('adj1');
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').set('numelem', 8);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([1 4 5 6 9]);
model.mesh('mesh1').feature('swe1').selection('sourceface').set([1 33 37 50 72]);
model.mesh('mesh1').feature('swe1').create('size1', 'Size');
model.mesh('mesh1').feature('swe1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmax', 'elSize');
model.mesh('mesh1').feature('size').set('hauto', 4);
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', 'elSize');
model.mesh('mesh1').feature('ftet1').create('size2', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftet1').feature('size2').selection.set([24 28 63 70]);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hauto', 1);
model.mesh('mesh1').run;

model.title('Bracket Geometry');

model.description('This is a base for all bracket tutorials, which contains the bracket geometry.');

model.label('bracket_basic.mph');

model.param.set('A0', '750[N]');
model.param.descr('A0', 'Peak load intensity');
model.param.set('M0', '0[N]');
model.param.descr('M0', 'Mean load intensity');
model.param.set('f0', '40[Hz]');
model.param.descr('f0', 'Fundamental frequency');
model.param.set('T0', '1/f0');
model.param.descr('T0', 'Base period');

model.func.create('int1', 'Interpolation');
model.func('int1').setIndex('table', 0, 0, 0);
model.func('int1').setIndex('table', 'M0', 0, 1);
model.func('int1').setIndex('table', 'T0/4', 1, 0);
model.func('int1').setIndex('table', 'M0+A0', 1, 1);
model.func('int1').setIndex('table', '3/4*T0', 2, 0);
model.func('int1').setIndex('table', 'M0-A0', 2, 1);
model.func('int1').setIndex('table', 'T0', 3, 0);
model.func('int1').setIndex('table', 'M0', 3, 1);
model.func('int1').setIndex('argunit', 's', 0);
model.func('int1').setIndex('fununit', 'N', 0);
model.func.create('an1', 'Analytic');
model.func('an1').set('funcname', 'loadHistory');
model.func('an1').set('expr', 'int1(x)');
model.func('an1').set('periodic', true);
model.func('an1').set('periodicupper', 'T0');
model.func('an1').setIndex('argunit', 's', 0);
model.func('an1').set('fununit', 'N');
model.func('an1').setIndex('plotargs', '5*T0', 0, 2);
model.func.duplicate('an2', 'an1');
model.func('an2').set('funcname', 'Periodic');
model.func('an2').set('expr', 'int1(x)/A0');
model.func('an2').set('fununit', '1');

model.modelNode.create('comp2', true);

model.physics.create('ge', 'GlobalEquations');
model.physics('ge').model('comp2');
model.physics('ge').prop('EquationForm').set('form', 'Automatic');
model.physics('ge').feature('ge1').setIndex('name', 'P', 0, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'P-loadHistory(t)', 0, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 'loadHistory(0)', 0, 0);
model.physics('ge').feature('ge1').set('DependentVariableQuantity', 'force');
model.physics('ge').feature('ge1').set('SourceTermQuantity', 'force');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/solid', true);
model.study('std1').feature('time').setSolveFor('/physics/ge', true);
model.study('std1').label('Study 1: Fourier Coefficient Generation');
model.study('std1').setGenPlots(false);
model.study('std1').feature('time').set('tlist', 'range(0,T0/1000,T0)');
model.study('std1').feature('time').setEntry('activate', 'solid', false);
model.study('std1').create('tffft', 'TimeToFreqFFT');
model.study('std1').feature('tffft').set('fftendtime', 'T0');
model.study('std1').feature('tffft').set('fftmaxfreq', 10000);
model.study('std1').feature('tffft').setEntry('activate', 'solid', false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,T0/1000,T0)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'tffft');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'tffft');
model.sol('sol1').create('fft1', 'FFT');
model.sol('sol1').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol1').feature('fft1').set('fftinputdata', 'fftperiodic');
model.sol('sol1').feature('fft1').set('fftoutorder', 'sym');
model.sol('sol1').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol1').feature('fft1').set('cname', 't');
model.sol('sol1').feature('fft1').set('clist', {'0'});
model.sol('sol1').feature('fft1').set('clistctrl', {'fft1_const'});
model.sol('sol1').feature('fft1').set('control', 'tffft');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('consistent', false);
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').label('Fourier Coefficients, Computed vs. Analytical');
model.result('pg1').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg1').setIndex('looplevelindices', 'range(1,1,100)', 0);
model.result('pg1').set('titletype', 'label');
model.result('pg1').set('xlabelactive', true);
model.result('pg1').set('xlabel', 'freq (Hz)');
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'Fourier Coefficients (N)');
model.result('pg1').set('ylog', true);
model.result('pg1').create('glob1', 'Global');
model.result('pg1').feature('glob1').set('markerpos', 'datapoints');
model.result('pg1').feature('glob1').set('linewidth', 'preference');
model.result('pg1').feature('glob1').label('Global: Computed');
model.result('pg1').feature('glob1').setIndex('expr', 'abs(comp2.P)', 0);
model.result('pg1').feature('glob1').setIndex('unit', 'N', 0);
model.result('pg1').feature('glob1').setIndex('descr', '', 0);
model.result('pg1').feature('glob1').set('linestyle', 'none');
model.result('pg1').feature('glob1').set('linemarker', 'circle');
model.result('pg1').feature('glob1').set('linewidth', 3);
model.result('pg1').feature('glob1').set('legendmethod', 'manual');
model.result('pg1').feature('glob1').setIndex('legends', 'Computed', 0);
model.result('pg1').feature.duplicate('glob2', 'glob1');
model.result('pg1').run;
model.result('pg1').feature('glob2').label('Global: Analytical');
model.result('pg1').feature('glob2').setIndex('expr', '8*A0/(pi^2*(freq/f0)^2)', 0);
model.result('pg1').feature('glob2').setIndex('unit', 'N', 0);
model.result('pg1').feature('glob2').setIndex('descr', '', 0);
model.result('pg1').feature('glob2').set('data', 'dset1');
model.result('pg1').feature('glob2').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg1').feature('glob2').setIndex('looplevelindices', 'range(2,2,100)', 0);
model.result('pg1').feature('glob2').set('linemarker', 'plus');
model.result('pg1').feature('glob2').setIndex('legends', 'Analytical', 0);
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Fourier Coefficients; Real and Imaginary');
model.result('pg2').set('titletype', 'label');
model.result('pg2').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg2').setIndex('looplevelindices', 'range(2,2,100)', 0);
model.result('pg2').set('xlog', true);
model.result('pg2').set('ylog', true);
model.result('pg2').set('xlabelactive', true);
model.result('pg2').set('xlabel', 'freq (Hz)');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Fourier Coefficients (N)');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('linewidth', 'preference');
model.result('pg2').feature('glob1').setIndex('expr', 'abs(real(comp2.P))', 0);
model.result('pg2').feature('glob1').setIndex('unit', 'N', 0);
model.result('pg2').feature('glob1').setIndex('descr', '', 0);
model.result('pg2').feature('glob1').setIndex('expr', 'abs(imag(comp2.P))', 1);
model.result('pg2').feature('glob1').setIndex('unit', 'N', 1);
model.result('pg2').feature('glob1').setIndex('descr', '', 1);
model.result('pg2').feature('glob1').set('linestyle', 'none');
model.result('pg2').feature('glob1').set('linemarker', 'circle');
model.result('pg2').feature('glob1').set('linewidth', 3);
model.result('pg2').feature('glob1').set('legendmethod', 'manual');
model.result('pg2').feature('glob1').setIndex('legends', 'Real', 0);
model.result('pg2').feature('glob1').setIndex('legends', 'Imaginary', 1);
model.result('pg2').run;

model.physics('solid').feature('lemm1').create('dmp1', 'Damping', 3);
model.physics('solid').feature('lemm1').feature('dmp1').set('InputParameters', 'DampingRatios');
model.physics('solid').feature('lemm1').feature('dmp1').set('f1', 100);
model.physics('solid').feature('lemm1').feature('dmp1').set('zeta1', 0.03);
model.physics('solid').feature('lemm1').feature('dmp1').set('f2', 300);
model.physics('solid').feature('lemm1').feature('dmp1').set('zeta2', 0.03);

model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').setTableData([17.320508075688775 0.13120284867334248; 20.438199529312755 0.11162084002204235; 23.555890982936734 0.09728419959406275; 26.673582436560714 0.08635364242797958; 29.791273890184694 0.07775981680203466; 32.908965343808674 0.07083859901534659; 36.02665679743265 0.065155754340416; 39.14434825105663 0.06041538831691147; 42.2620397046806 0.0564089196039436; 45.37973115830458 0.0529850869237682; 48.497422611928556 0.05003152475577529; 51.61511406555253 0.047463016295743905; 54.73280551917651 0.04521376122649072; 57.850496972800485 0.04323214373034502; 60.96818842642446 0.04147710577052327; 64.08587988004844 0.03991557898226468; 67.20357133367241 0.03852063139839292; 70.32126278729639 0.037270107164137346; 73.43895424092037 0.03614561273968834; 76.55664569454434 0.035131750817965456; 79.67433714816832 0.03421553410517042; 82.7920286017923 0.0333859315525959; 85.90972005541627 0.03263351339279854; 89.02741150904025 0.03195017075961107; 92.14510296266423 0.031328892227400165; 95.2627944162882 0.03076358422988814; 98.38048586991218 0.03024892562469163; 101.49817732353615 0.029780249061665535; 104.61586877716013 0.02935344356352971; 107.73356023078411 0.028964874021756702; 110.85125168440808 0.028611314277528402; 113.96894313803206 0.02828989118636546; 117.08663459165604 0.02799803761917685; 120.20432604528001 0.027733452777267166; 123.32201749890399 0.027494068526977618; 126.43970895252797 0.02727802071495547; 129.55740040615194 0.027083624625069136; 132.67509185977593 0.026909353895705895; 135.79278331339992 0.026753822341319518; 138.9104747670239 0.026615768221948968; 142.0281662206479 0.026494040584556622; 145.1458576742719 0.026387587364671325; 148.26354912789589 0.02629544498922605; 151.38124058151988 0.02621672926417072; 154.49893203514387 0.02615062736537859; 157.61662348876786 0.0260963907800824; 160.73431494239185 0.026053329069781306; 163.85200639601584 0.02602080434520497; 166.96969784963983 0.02599822636026508; 170.08738930326382 0.025985048145572256; 173.2050807568878 0.02598076211353316; 204.3819952931276 0.026337447152718955; 235.5589098293674 0.0272186690142368; 266.7358243656072 0.02844049920194429; 297.912738901847 0.029896002543665604; 329.08965343808677 0.0315187666693126; 360.26656797432656 0.03326536810613535; 391.44348251056635 0.0351062174081007; 422.62039704680615 0.03702045644111971; 453.79731158304594 0.03899295907741798; 484.97422611928573 0.04101248876493449; 516.1511406555255 0.04307052382324716; 547.3280551917653 0.04516048422063765; 578.5049697280051 0.04727720837533888; 609.6818842642449 0.049416590483672515; 640.8587988004847 0.05157532370916245; 672.0357133367245 0.05375071485509108; 703.2126278729643 0.05594054833598133; 734.3895424092041 0.05814298479785223; 765.5664569454439 0.060356484509995756; 796.7433714816837 0.06257974874303206; 827.9202860179234 0.0648116743920904; 859.0972005541632 0.06705131848042648; 890.274115090403 0.06929787012142354; 921.4510296266428 0.07155062817251824; 952.6279441628826 0.07380898327708284; 983.8048586991224 0.076072403320879; 1014.9817732353622 0.07834042156889219; 1046.158687771602 0.08061262692339442; 1077.3356023078418 0.08288865587353292; 1108.5125168440816 0.08516818580342589; 1139.6894313803214 0.08745092939862541; 1170.8663459165612 0.08973662994622235; 1202.043260452801 0.0920250573663472; 1233.2201749890407 0.09431600484563403; 1264.3970895252805 0.09660928596874761; 1295.5740040615203 0.0989047322640748; 1326.7509185977601 0.10120219109545428; 1357.927833134 0.10350152384433145; 1389.1047476702397 0.1058026043367102; 1420.2816622064795 0.10810531747728677; 1451.4585767427193 0.11040955805961405; 1482.635491278959 0.1127152297263853; 1513.8124058151989 0.11502224405819558; 1544.9893203514387 0.11733051977263216; 1576.1662348876785 0.11963998201841836; 1607.3431494239182 0.12195056175170406; 1638.520063960158 0.12426219518356224; 1669.6969784963978 0.12657482328938405; 1700.8738930326376 0.12888839137223057; 1732.0508075688774 0.13120284867334248]);
model.result.table('tbl1').label('Damping Ratio Plot');
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').label('Damping Ratio Plot');
model.result('pg3').create('tblp11', 'Table');
model.result('pg3').feature('tblp11').set('markerpos', 'datapoints');
model.result('pg3').feature('tblp11').set('table', 'tbl1');
model.result('pg3').feature('tblp11').label('Damping 1');
model.result('pg3').set('xlabel', 'Frequency (Hz)');
model.result('pg3').set('ylabel', 'Damping ratio');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').run;

model.physics('solid').create('bndl1', 'BoundaryLoad', 2);
model.physics('solid').feature('bndl1').label('Boundary Load, Harmonic');
model.physics('solid').feature('bndl1').selection.named('uni2');
model.physics('solid').feature('bndl1').set('LoadType', 'TotalForce');
model.physics('solid').feature('bndl1').set('Ftot', {'withsol(''sol1'',comp2.P,setval(freq,freq))' '0' '0'});
model.physics('solid').feature('bndl1').set('harmonicPerturbation', true);

model.study.create('std2');
model.study('std2').create('eig', 'Eigenfrequency');
model.study('std2').feature('eig').set('plotgroup', 'Default');
model.study('std2').feature('eig').set('chkeigregion', true);
model.study('std2').feature('eig').set('conrad', '1');
model.study('std2').feature('eig').set('conradynhm', '1');
model.study('std2').feature('eig').set('storefact', false);
model.study('std2').feature('eig').set('outputmap', {});
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').setSolveFor('/physics/solid', true);
model.study('std2').feature('eig').setSolveFor('/physics/ge', true);
model.study('std2').create('frmod', 'Frequencymodal');
model.study('std2').feature('frmod').set('outputmap', {});
model.study('std2').feature('frmod').setSolveFor('/physics/solid', true);
model.study('std2').feature('frmod').setSolveFor('/physics/ge', true);
model.study('std2').label('Study 2: Frequency Domain Modal + FFT');
model.study('std2').feature('eig').set('neigsactive', true);
model.study('std2').feature('eig').set('neigs', 12);
model.study('std2').feature('eig').set('useadvanceddisable', true);
model.study('std2').feature('eig').set('disabledphysics', {'solid/lemm1/dmp1'});
model.study('std2').feature('eig').setSolveFor('/physics/ge', false);
model.study('std2').feature('frmod').set('plist', 'range(f0,f0,40*f0)');
model.study('std2').feature('frmod').set('useadvanceddisable', true);
model.study('std2').feature('frmod').setSolveFor('/physics/ge', false);
model.study('std2').create('ftfft', 'FreqToTimeFFT');
model.study('std2').feature('ftfft').set('fftouttrange', 'range(0,T0/100,T0)');
model.study('std2').feature('ftfft').set('fftscaling', 'discrete');
model.study('std2').feature('ftfft').set('useadvanceddisable', true);
model.study('std2').feature('ftfft').setSolveFor('/physics/ge', false);

model.sol.create('sol3');
model.sol('sol3').study('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'eig');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'eig');
model.sol('sol3').create('e1', 'Eigenvalue');
model.sol('sol3').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol3').feature('e1').set('eigvfunscaleparam', '4.2299999999999996E-7');
model.sol('sol3').feature('e1').set('control', 'eig');
model.sol('sol3').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol3').create('su1', 'StoreSolution');
model.sol('sol3').create('st2', 'StudyStep');
model.sol('sol3').feature('st2').set('study', 'std2');
model.sol('sol3').feature('st2').set('studystep', 'frmod');
model.sol('sol3').create('v2', 'Variables');
model.sol('sol3').feature('v2').set('notsolmethod', 'sol');
model.sol('sol3').feature('v2').set('notsol', 'sol3');
model.sol('sol3').feature('v2').set('control', 'frmod');
model.sol('sol3').create('mo1', 'Modal');
model.sol('sol3').feature('mo1').set('analysistype', 'frequency');
model.sol('sol3').feature('mo1').set('plist', 'range(f0,f0,40*f0)');
model.sol('sol3').feature('mo1').set('eigsol', 'sol3');
model.sol('sol3').feature('mo1').set('eigsoluse', 'su1');
model.sol('sol3').feature('mo1').set('control', 'frmod');
model.sol('sol3').feature('mo1').feature('aDef').set('cachepattern', true);
model.sol('sol3').create('su2', 'StoreSolution');
model.sol('sol3').create('st3', 'StudyStep');
model.sol('sol3').feature('st3').set('study', 'std2');
model.sol('sol3').feature('st3').set('studystep', 'ftfft');
model.sol('sol3').create('v3', 'Variables');
model.sol('sol3').feature('v3').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol3').feature('v3').feature('comp1_u').set('scaleval', '1e-2*0.42275879647855963');
model.sol('sol3').feature('v3').set('initmethod', 'sol');
model.sol('sol3').feature('v3').set('initsol', 'sol3');
model.sol('sol3').feature('v3').set('initsoluse', 'sol5');
model.sol('sol3').feature('v3').set('notsolmethod', 'sol');
model.sol('sol3').feature('v3').set('notsol', 'sol3');
model.sol('sol3').feature('v3').set('control', 'ftfft');
model.sol('sol3').create('fft1', 'FFT');
model.sol('sol3').feature('fft1').set('fftsteptypef', 'allfreqs');
model.sol('sol3').feature('fft1').set('fftextend', 'on');
model.sol('sol3').feature('fft1').set('ffttranstype', 'transifft');
model.sol('sol3').feature('fft1').set('fftbwalgtype', 'fastfft');
model.sol('sol3').feature('fft1').set('control', 'ftfft');
model.sol('sol3').feature('v3').set('notsolnum', 'auto');
model.sol('sol3').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol3').feature('v2').set('notsolnum', 'auto');
model.sol('sol3').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol3').attach('std2');
model.sol('sol3').runAll;

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 101, 0);
model.result('pg4').set('defaultPlotID', 'stress');
model.result('pg4').label('Stress (solid)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').create('vol1', 'Volume');
model.result('pg4').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg4').feature('vol1').set('threshold', 'manual');
model.result('pg4').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg4').feature('vol1').set('colortable', 'Rainbow');
model.result('pg4').feature('vol1').set('colortabletrans', 'none');
model.result('pg4').feature('vol1').set('colorscalemode', 'linear');
model.result('pg4').feature('vol1').set('resolution', 'custom');
model.result('pg4').feature('vol1').set('refine', 2);
model.result('pg4').feature('vol1').set('colortable', 'Prism');
model.result('pg4').feature('vol1').create('def', 'Deform');
model.result('pg4').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg4').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 89, 0);
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').label('Stress: Frequency Domain Modal + FFT');
model.result('pg4').run;
model.result('pg4').feature('vol1').set('unit', 'MPa');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Displacement Amplitude [Frequency Response]');
model.result('pg5').set('titletype', 'label');
model.result('pg5').set('data', 'dset5');
model.result('pg5').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg5').setIndex('looplevelindices', 'range(1,1,10)', 0);
model.result('pg5').create('ptgr1', 'PointGraph');
model.result('pg5').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg5').feature('ptgr1').set('linewidth', 'preference');
model.result('pg5').feature('ptgr1').selection.set([1]);
model.result('pg5').feature('ptgr1').set('expr', 'solid.uAmpX');
model.result('pg5').feature('ptgr1').set('descr', 'Displacement amplitude, X-component');
model.result('pg5').feature('ptgr1').set('unit', 'mm');
model.result('pg5').feature('ptgr1').set('linestyle', 'none');
model.result('pg5').feature('ptgr1').set('linemarker', 'diamond');
model.result('pg5').run;

model.physics('solid').create('bndl2', 'BoundaryLoad', 2);
model.physics('solid').feature('bndl2').label('Boundary Load, Time Domain Amplitude');
model.physics('solid').feature('bndl2').selection.named('uni2');
model.physics('solid').feature('bndl2').set('LoadType', 'TotalForce');
model.physics('solid').feature('bndl2').set('Ftot', {'A0' '0' '0'});

model.study('std2').feature('frmod').set('disabledphysics', {'solid/bndl2'});
model.study('std2').feature('ftfft').set('disabledphysics', {'solid/bndl2'});
model.study.create('std3');
model.study('std3').create('eig', 'Eigenfrequency');
model.study('std3').feature('eig').set('plotgroup', 'Default');
model.study('std3').feature('eig').set('chkeigregion', true);
model.study('std3').feature('eig').set('conrad', '1');
model.study('std3').feature('eig').set('conradynhm', '1');
model.study('std3').feature('eig').set('storefact', false);
model.study('std3').feature('eig').set('outputmap', {});
model.study('std3').feature('eig').set('ngenAUX', '1');
model.study('std3').feature('eig').set('goalngenAUX', '1');
model.study('std3').feature('eig').set('ngenAUX', '1');
model.study('std3').feature('eig').set('goalngenAUX', '1');
model.study('std3').feature('eig').setSolveFor('/physics/solid', true);
model.study('std3').feature('eig').setSolveFor('/physics/ge', true);
model.study('std3').create('timod', 'Transientmodal');
model.study('std3').feature('timod').set('initialtime', '0');
model.study('std3').feature('timod').set('linpsolnum', 'auto');
model.study('std3').feature('timod').set('outputmap', {});
model.study('std3').feature('timod').setSolveFor('/physics/solid', true);
model.study('std3').feature('timod').setSolveFor('/physics/ge', true);
model.study('std3').label('Study 3: Time-Dependent Modal [Verification]');
model.study('std3').feature.remove('eig');
model.study('std3').feature('timod').set('tlist', '-20*T0 range(0,T0/100,T0)');
model.study('std3').feature('timod').set('loadfact', 'Periodic(t)');
model.study('std3').feature('timod').set('useadvanceddisable', true);
model.study('std3').feature('timod').set('disabledphysics', {'solid/bndl1'});
model.study('std3').feature('timod').setSolveFor('/physics/ge', false);

model.sol.create('sol6');
model.sol('sol6').study('std3');
model.sol('sol6').create('st1', 'StudyStep');
model.sol('sol6').feature('st1').set('study', 'std3');
model.sol('sol6').feature('st1').set('studystep', 'timod');
model.sol('sol6').create('v1', 'Variables');
model.sol('sol6').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol6').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.42275879647855963');
model.sol('sol6').feature('v1').set('control', 'timod');
model.sol('sol6').create('mo1', 'Modal');
model.sol('sol6').feature('mo1').set('analysistype', 'transient');
model.sol('sol6').feature('mo1').set('tlist', '-20*T0 range(0,T0/100,T0)');
model.sol('sol6').feature('mo1').set('control', 'timod');
model.sol('sol6').feature('v1').set('resscalemethod', 'manual');
model.sol('sol6').feature('mo1').set('control', 'timod');
model.sol('sol6').feature('mo1').feature('aDef').set('cachepattern', true);
model.sol('sol6').attach('std3');
model.sol('sol6').feature('mo1').set('maxstepconstraintbdf', 'const');
model.sol('sol6').feature('mo1').set('maxstepbdf', '5e-5');
model.sol('sol6').feature('mo1').set('eigsol', 'sol3');
model.sol('sol6').feature('mo1').set('eigsoluse', 'sol4');
model.sol('sol6').runAll;

model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset6');
model.result('pg6').setIndex('looplevel', 102, 0);
model.result('pg6').set('defaultPlotID', 'stress');
model.result('pg6').label('Stress (solid)');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').create('vol1', 'Volume');
model.result('pg6').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg6').feature('vol1').set('threshold', 'manual');
model.result('pg6').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg6').feature('vol1').set('colortable', 'Rainbow');
model.result('pg6').feature('vol1').set('colortabletrans', 'none');
model.result('pg6').feature('vol1').set('colorscalemode', 'linear');
model.result('pg6').feature('vol1').set('resolution', 'custom');
model.result('pg6').feature('vol1').set('refine', 2);
model.result('pg6').feature('vol1').set('colortable', 'Prism');
model.result('pg6').feature('vol1').create('def', 'Deform');
model.result('pg6').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg6').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 90, 0);
model.result('pg6').set('showlegendsmaxmin', true);
model.result('pg6').label('Stress: Time-Dependent Modal');
model.result('pg6').run;
model.result('pg6').feature('vol1').set('unit', 'MPa');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset6');
model.result('pg7').setIndex('looplevel', 102, 0);
model.result('pg7').set('defaultPlotID', 'boundaryLoads');
model.result('pg7').label('Boundary Loads (solid)');
model.result('pg7').set('showlegends', true);
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'1'});
model.result('pg7').feature('surf1').label('Gray Surfaces');
model.result('pg7').feature('surf1').set('coloring', 'uniform');
model.result('pg7').feature('surf1').set('color', 'gray');
model.result('pg7').feature('surf1').set('inheritcolor', false);
model.result('pg7').feature('surf1').set('inheritrange', false);
model.result('pg7').feature('surf1').set('inherittransparency', false);
model.result('pg7').feature('surf1').create('def', 'Deform');
model.result('pg7').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg7').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg7').feature('surf1').feature('def').set('scaleactive', true);
model.result('pg7').feature('surf1').feature('def').set('scale', 0);
model.result('pg7').feature('surf1').create('sel1', 'Selection');
model.result('pg7').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg7').feature('surf1').feature('sel1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88]);
model.result('pg7').feature('surf1').create('tran1', 'Transparency');
model.result('pg7').feature('surf1').feature('tran1').set('transparency', 0.8);
model.result('pg7').create('arws1', 'ArrowSurface');
model.result('pg7').feature('arws1').set('expr', {'solid.bndl2.F_Ax' 'solid.bndl2.F_Ay' 'solid.bndl2.F_Az'});
model.result('pg7').feature('arws1').set('placement', 'gausspoints');
model.result('pg7').feature('arws1').set('arrowbase', 'tail');
model.result('pg7').feature('arws1').label('Boundary Load, Time Domain Amplitude');
model.result('pg7').feature('arws1').set('inheritplot', 'none');
model.result('pg7').feature('arws1').create('col', 'Color');
model.result('pg7').feature('arws1').feature('col').set('colortable', 'Rainbow');
model.result('pg7').feature('arws1').feature('col').set('colortabletrans', 'none');
model.result('pg7').feature('arws1').feature('col').set('colorscalemode', 'linear');
model.result('pg7').feature('arws1').feature('col').set('colordata', 'arrowlength');
model.result('pg7').feature('arws1').feature('col').set('coloring', 'gradient');
model.result('pg7').feature('arws1').feature('col').set('topcolor', 'red');
model.result('pg7').feature('arws1').feature('col').set('bottomcolor', 'custom');
model.result('pg7').feature('arws1').feature('col').set('custombottomcolor', [0.5882353186607361 0.5137255191802979 0.5176470875740051]);
model.result('pg7').feature('arws1').set('color', 'red');
model.result('pg7').feature('arws1').create('def', 'Deform');
model.result('pg7').feature('arws1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg7').feature('arws1').feature('def').set('descr', 'Displacement field');
model.result('pg7').feature('arws1').feature('def').set('scaleactive', true);
model.result('pg7').feature('arws1').feature('def').set('scale', 0);
model.result('pg7').feature.move('surf1', 1);
model.result('pg7').label('Boundary Loads (solid)');
model.result('pg7').run;
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').set('data', 'dset3');
model.result('pg8').label('Tip Displacement');
model.result('pg8').set('titletype', 'none');
model.result('pg8').create('ptgr1', 'PointGraph');
model.result('pg8').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg8').feature('ptgr1').set('linewidth', 'preference');
model.result('pg8').feature('ptgr1').selection.set([1]);
model.result('pg8').feature('ptgr1').set('expr', 'u');
model.result('pg8').feature('ptgr1').set('unit', 'mm');
model.result('pg8').run;
model.result('pg8').feature('ptgr1').set('legend', true);
model.result('pg8').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg8').feature('ptgr1').setIndex('legends', 'Frequency Domain Modal + FFT', 0);
model.result('pg8').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg8').run;
model.result('pg8').feature('ptgr2').set('data', 'dset6');
model.result('pg8').feature('ptgr2').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg8').feature('ptgr2').setIndex('looplevelindices', 'range(2,102)', 0);
model.result('pg8').feature('ptgr2').setIndex('legends', 'Time-Dependent Modal', 0);
model.result('pg8').run;
model.result('pg8').run;
model.result.duplicate('pg9', 'pg8');
model.result('pg9').run;
model.result('pg9').label('Fillet Stress');
model.result('pg9').run;
model.result('pg9').feature('ptgr1').selection.set([34]);
model.result('pg9').feature('ptgr1').set('expr', 'solid.sx');
model.result('pg9').feature('ptgr1').set('unit', 'MPa');
model.result('pg9').run;
model.result('pg9').feature('ptgr2').selection.set([34]);
model.result('pg9').feature('ptgr2').set('expr', 'solid.sx');
model.result('pg9').feature('ptgr2').set('unit', 'MPa');
model.result('pg9').run;
model.result('pg4').run;

model.title(['Bracket ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' General Periodic Dynamic Analysis']);

model.description('In this example, a bracket is subjected to a periodic, but not harmonic, loading. The loading function is initially decomposed into a Fourier series using a Time to Frequency FFT study step. The response to the series of harmonics is computed using a standard frequency sweep, and then an inverse FFT study is performed to transform the results back into time domain. Finally, a Time-dependent Modal study is used to validate the results.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;

model.label('bracket_general_periodic.mph');

model.modelNode.label('Components');

out = model;
