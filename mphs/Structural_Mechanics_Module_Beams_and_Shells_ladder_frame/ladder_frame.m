function out = model
%
% ladder_frame.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Beams_and_Shells');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('shell', 'Shell', 'geom1');
model.physics('shell').model('comp1');

model.study.create('std1');
model.study('std1').create('eig', 'Eigenfrequency');
model.study('std1').feature('eig').set('chkeigregion', true);
model.study('std1').feature('eig').set('conrad', '1');
model.study('std1').feature('eig').set('conradynhm', '1');
model.study('std1').feature('eig').set('storefact', false);
model.study('std1').feature('eig').set('solnum', 'auto');
model.study('std1').feature('eig').set('notsolnum', 'auto');
model.study('std1').feature('eig').set('outputmap', {});
model.study('std1').feature('eig').set('ngenAUX', '1');
model.study('std1').feature('eig').set('goalngenAUX', '1');
model.study('std1').feature('eig').set('ngenAUX', '1');
model.study('std1').feature('eig').set('goalngenAUX', '1');
model.study('std1').feature('eig').setSolveFor('/physics/shell', true);

model.common.create('mpf1', 'ParticipationFactors', 'comp1');

model.geom('geom1').geomRep('cadps');
model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'ladder_frame_geom.step');
model.geom('geom1').feature('imp1').set('removeredundant', true);
model.geom('geom1').run('imp1');
model.geom('geom1').create('dm1', 'DistanceMeasurement');
model.geom('geom1').feature('dm1').selection('ent1').set('imp1.id107', 44);
model.geom('geom1').feature('dm1').selection('ent2').set('imp1.id107', 43);
model.geom('geom1').feature('dm1').set('parname', 'th1');
model.geom('geom1').run('dm1');
model.geom('geom1').create('dm2', 'DistanceMeasurement');
model.geom('geom1').feature('dm2').selection('ent1').set('imp1.id101', 65);
model.geom('geom1').feature('dm2').selection('ent2').set('imp1.id101', 67);
model.geom('geom1').feature('dm2').set('parname', 'th2');
model.geom('geom1').run('dm2');
model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').label('Longitudinal members');
model.geom('geom1').feature('sel1').selection('selection').init(2);
model.geom('geom1').feature('sel1').selection('selection').set('imp1.id107', [1 3 4 5 6 7 8 9 10 11 12 13 14 25 28 29 32 33 36 37 40 45 46 54 55 56 57 58 59 60 61 62 64 65 66 71 72 83 84 85 92 93 94]);
model.geom('geom1').feature('sel1').selection('selection').set('imp1.id110', [3 7 8 11 12 15 17 21 24 26 28 31 32 35 36 39 40 43 47 48 51 52 53 56 58 61 63 65 76 77 78 80 81 84 85 86 93 94 95 99 100 101 102]);
model.geom('geom1').feature('sel1').selection('selection').set('imp1.id38', [2 4 6 8 22 23 24 25 27 31 32 33 34 35 44 45 46 47 52 55 57 58 59 60 61 63 67 70 74 75 78 79 82 83 86 88 91 92 95 96 99 101 102]);
model.geom('geom1').feature('sel1').selection('selection').set('imp1.id41', [1 2 3 4 5 6 7 8 10 11 12 13 14 15 16 29 30 31 32 41 42 43 44 48 51 62 63 64 65 67 68 69 70 71 72 76 79 87 90 91 94 95 98]);
model.geom('geom1').defeaturing('Fillets').set('entsize', '7[mm]');
model.geom('geom1').defeaturing('Fillets').find;
model.geom('geom1').defeaturing('Fillets').detail.setGroup([5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136]);
model.geom('geom1').defeaturing('Fillets').delete('dfi1');
model.geom('geom1').create('mid1', 'Midsurface');
model.geom('geom1').feature('mid1').selection('input').set({'dfi1(10)' 'dfi1(11)' 'dfi1(12)' 'dfi1(13)' 'dfi1(14)' 'dfi1(15)' 'dfi1(16)' 'dfi1(17)' 'dfi1(18)' 'dfi1(19)'  ...
'dfi1(20)' 'dfi1(21)' 'dfi1(22)' 'dfi1(23)' 'dfi1(26)' 'dfi1(27)' 'dfi1(28)' 'dfi1(29)' 'dfi1(3)' 'dfi1(30)'  ...
'dfi1(31)' 'dfi1(32)' 'dfi1(33)' 'dfi1(34)' 'dfi1(35)' 'dfi1(36)' 'dfi1(37)' 'dfi1(4)' 'dfi1(5)' 'dfi1(6)'  ...
'dfi1(7)' 'dfi1(8)' 'dfi1(9)'});
model.geom('geom1').run('mid1');
model.geom('geom1').create('extract1', 'Extract');
model.geom('geom1').feature('extract1').selection('input').named('sel1');
model.geom('geom1').feature('extract1').set('inputhandling', 'remove');
model.geom('geom1').run('extract1');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'extract1' 'mid1'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('boxsel1', 'BoxSelection');
model.geom('geom1').feature('boxsel1').label('Cross members');
model.geom('geom1').feature('boxsel1').set('entitydim', 2);
model.geom('geom1').feature('boxsel1').set('groupcontang', true);
model.geom('geom1').feature('boxsel1').set('xmin', 0);
model.geom('geom1').feature('boxsel1').set('xmax', 0);
model.geom('geom1').run('fin');
model.geom('geom1').create('rmd1', 'RemoveDetails');
model.geom('geom1').run('rmd1');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('diffuse', 'custom');
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('ambient', 'custom');
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Hillcoefficients', {'0[m^2*s^4/kg^2]' '0[m^2*s^4/kg^2]' '0[m^2*s^4/kg^2]' '0[m^2*s^4/kg^2]' '0[m^2*s^4/kg^2]' '0[m^2*s^4/kg^2]'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('ys', {'0[N/m^2]' '0[N/m^2]' '0[N/m^2]' '0[N/m^2]' '0[N/m^2]' '0[N/m^2]'});
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1[1/s]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.physics('shell').feature('to1').set('d', 'th2');
model.physics('shell').create('to2', 'ThicknessOffset', 2);
model.physics('shell').feature('to2').selection.named('geom1_sel1');
model.physics('shell').feature('to2').set('d', 'th1');
model.physics('shell').feature('to2').set('OffsetDefinition', 'top');
model.physics('shell').create('to3', 'ThicknessOffset', 2);
model.physics('shell').feature('to3').selection.set([33 34 47 48 291 292 306 307]);

model.view('view1').set('renderwireframe', false);

model.physics('shell').feature('to3').set('d', 'th1');

model.mesh('mesh1').autoMeshSize(3);
model.mesh('mesh1').run;

model.study('std1').feature('eig').set('neigsactive', true);
model.study('std1').feature('eig').set('neigs', 9);
model.study('std1').feature('eig').set('shift', '15[Hz]');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'eig');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol1').feature('v1').set('control', 'eig');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol1').feature('e1').set('eigvfunscaleparam', '4.64E-6');
model.sol('sol1').feature('e1').set('control', 'eig');
model.sol('sol1').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset.create('dset1shellshl', 'Shell');
model.result.dataset('dset1shellshl').set('data', 'dset1');
model.result.dataset('dset1shellshl').setIndex('topconst', '1', 3, 1);
model.result.dataset('dset1shellshl').setIndex('bottomconst', '-1', 3, 1);
model.result.dataset('dset1shellshl').setIndex('orientationexpr', 'shell.nlX', 0);
model.result.dataset('dset1shellshl').setIndex('displacementexpr', 'arx', 0);
model.result.dataset('dset1shellshl').setIndex('orientationexpr', 'shell.nlY', 1);
model.result.dataset('dset1shellshl').setIndex('displacementexpr', 'ary', 1);
model.result.dataset('dset1shellshl').setIndex('orientationexpr', 'shell.nlZ', 2);
model.result.dataset('dset1shellshl').setIndex('displacementexpr', 'arz', 2);
model.result.dataset('dset1shellshl').set('distanceexpr', 'shell.z_pos');
model.result.dataset('dset1shellshl').set('seplevels', false);
model.result.dataset('dset1shellshl').set('resolution', 2);
model.result.dataset('dset1shellshl').set('areascalefactor', 'shell.ASF');
model.result.dataset('dset1shellshl').set('linescalefactor', 'shell.LSF');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1shellshl');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'modeShape');
model.result('pg1').label('Mode Shape (shell)');
model.result('pg1').set('showlegends', false);
model.result('pg1').set('data', 'dset1shellshl');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'shell.disp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('expr', {'shell.u' 'shell.v' 'shell.w'});
model.result.evaluationGroup.create('std1EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std1EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_shell');
model.result.evaluationGroup('std1EvgFrq').set('data', 'dset1');
model.result.evaluationGroup('std1EvgFrq').label('Eigenfrequencies (Study 1)');
model.result.evaluationGroup('std1EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std1EvgFrq').run;
model.result.evaluationGroup.create('std1mpf1', 'EvaluationGroup');
model.result.evaluationGroup('std1mpf1').set('data', 'dset1');
model.result.evaluationGroup('std1mpf1').label('Participation Factors (Study 1)');
model.result.evaluationGroup('std1mpf1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormX', 0);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', '1', 0);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, X-translation', 0);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormY', 1);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Y-translation', 1);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormZ', 2);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Z-translation', 2);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormX', 3);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', '1', 3);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, X-rotation', 3);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormY', 4);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', '1', 4);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Y-rotation', 4);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormZ', 5);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', '1', 5);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Z-rotation', 5);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLX', 6);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', 'kg', 6);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, X-translation', 6);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLY', 7);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', 'kg', 7);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Y-translation', 7);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLZ', 8);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', 'kg', 8);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Z-translation', 8);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRX', 9);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 9);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, X-rotation', 9);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRY', 10);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 10);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Y-rotation', 10);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRZ', 11);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 11);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Z-rotation', 11);
model.result.evaluationGroup('std1mpf1').run;
model.result('pg1').run;
model.result('pg1').set('looplevel', [7]);
model.result('pg1').run;

model.view('view1').camera.set('projection', 'perspective');

model.result('pg1').stepNext(0);
model.result('pg1').run;

model.view('view1').camera.set('projection', 'perspective');

model.result('pg1').stepNext(0);
model.result('pg1').run;

model.view('view1').camera.set('projection', 'perspective');

model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').set('defaultPlotID', 'shellGeometry');
model.result('pg2').label('Shell Geometry (shell)');
model.result('pg2').set('titletype', 'label');
model.result('pg2').set('showlegends', false);
model.result('pg2').set('edgecolor', 'cyan');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'if(abs(shell.z)==1,shell.z, NaN)'});
model.result('pg2').feature('surf1').set('threshold', 'manual');
model.result('pg2').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg2').feature('surf1').set('colortable', 'RainbowLight');
model.result('pg2').feature('surf1').set('colortabletrans', 'none');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').feature('surf1').set('data', 'dset1shellshl');
model.result('pg2').feature('surf1').label('Top and Bottom');
model.result('pg2').label('Shell Geometry (shell)');
model.result('pg2').run;

model.geom('geom1').run('boxsel1');
model.geom('geom1').create('sel2', 'ExplicitSelection');
model.geom('geom1').feature('sel2').selection('selection').init(2);
model.geom('geom1').feature('sel2').label('Suspension bracket');
model.geom('geom1').feature('sel2').selection('selection').set('uni1', [75 78 86 87 88 89 90 121 122 123 124 125 130]);
model.geom('geom1').run('sel2');
model.geom('geom1').create('extract2', 'Extract');
model.geom('geom1').feature('extract2').selection('input').named('sel2');
model.geom('geom1').feature('extract2').set('inputhandling', 'remainder');
model.geom('geom1').run('extract2');
model.geom('geom1').create('sel3', 'ExplicitSelection');
model.geom('geom1').feature('sel3').label('Suspension bracket (edge)');
model.geom('geom1').feature('sel3').selection('selection').init(1);
model.geom('geom1').feature('sel3').selection('selection').set('extract2(1)', [22 23 24 25 26 27 40 41 42 43 44]);
model.geom('geom1').run('sel3');
model.geom('geom1').create('sel4', 'ExplicitSelection');
model.geom('geom1').feature('sel4').label('Long beam (edge)');
model.geom('geom1').feature('sel4').selection('selection').init(1);
model.geom('geom1').feature('sel4').selection('selection').set('extract2(2)', [275 277 278 280 312 314 341 342 362 364 384]);

model.param.label('Suspension Coordinates');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('x_fwl', '500[mm]', 'Front wheel left, x-component');
model.param.set('y_fwl', '339[mm]', 'Front wheel left, y-component');
model.param.set('z_fwl', '-200[mm]', 'Front wheel left, z-component');
model.param.set('x_fwr', '-500[mm]', 'Front wheel right, x-component');
model.param.set('y_fwr', '339[mm]', 'Front wheel right, y-component');
model.param.set('z_fwr', '-200[mm]', 'Front wheel right, z-component');
model.param.set('x_rwl', '470[mm]', 'Rear wheel left, x-component');
model.param.set('y_rwl', '3912[mm]', 'Rear wheel left, y-component');
model.param.set('z_rwl', '-200[mm]', 'Rear wheel left, z-component');
model.param.set('x_rwr', '-470[mm]', 'Rear wheel right, x-component');
model.param.set('y_rwr', '3912[mm]', 'Rear wheel right, y-component');
model.param.set('z_rwr', '-200[mm]', 'Rear wheel right, z-component');

model.geom('geom1').run('sel4');
model.geom('geom1').create('cm1', 'CentroidMeasurement');
model.geom('geom1').feature('cm1').selection('ent').set('extract2(2)', [551 552 553 554]);
model.geom('geom1').run('cm1');
model.geom('geom1').create('cm2', 'CentroidMeasurement');
model.geom('geom1').feature('cm2').selection('ent').set('extract2(2)', [555 556 557 558]);
model.geom('geom1').run('cm2');
model.geom('geom1').create('cm3', 'CentroidMeasurement');
model.geom('geom1').feature('cm3').selection('ent').set('extract2(2)', [614 652]);
model.geom('geom1').run('cm3');
model.geom('geom1').create('cm4', 'CentroidMeasurement');
model.geom('geom1').feature('cm4').selection('ent').set('extract2(2)', [707 713 742 748]);
model.geom('geom1').run('cm4');
model.geom('geom1').create('cm5', 'CentroidMeasurement');
model.geom('geom1').feature('cm5').selection('ent').set('extract2(2)', [708 714 743 749]);
model.geom('geom1').run('cm5');
model.geom('geom1').create('ls1', 'LineSegment');
model.geom('geom1').feature('ls1').set('specify1', 'coord');
model.geom('geom1').feature('ls1').set('coord1', {'geom1.cm1.x' '0' '0'});
model.geom('geom1').feature('ls1').setIndex('coord1', 'geom1.cm1.y', 1);
model.geom('geom1').feature('ls1').setIndex('coord1', 'geom1.cm1.z', 2);
model.geom('geom1').feature('ls1').set('specify2', 'coord');
model.geom('geom1').feature('ls1').set('coord2', {'x_fwl' 'y_fwl' 'z_fwl'});
model.geom('geom1').feature.duplicate('ls2', 'ls1');
model.geom('geom1').feature('ls2').setIndex('coord1', 'geom1.cm2.x', 0);
model.geom('geom1').feature('ls2').setIndex('coord1', 'geom1.cm2.y', 1);
model.geom('geom1').feature('ls2').setIndex('coord1', 'geom1.cm2.z', 2);
model.geom('geom1').feature.duplicate('ls3', 'ls2');
model.geom('geom1').feature('ls3').setIndex('coord1', 'geom1.cm3.x', 0);
model.geom('geom1').feature('ls3').setIndex('coord1', 'geom1.cm3.y', 1);
model.geom('geom1').feature('ls3').setIndex('coord1', 'geom1.cm3.z', 2);
model.geom('geom1').feature.duplicate('ls4', 'ls3');
model.geom('geom1').feature('ls4').setIndex('coord1', 'geom1.cm4.x', 0);
model.geom('geom1').feature('ls4').setIndex('coord1', 'geom1.cm4.y', 1);
model.geom('geom1').feature('ls4').setIndex('coord1', 'geom1.cm4.z', 2);
model.geom('geom1').feature('ls4').set('coord2', {'x_rwl' 'y_rwl' 'z_rwl'});
model.geom('geom1').feature.duplicate('ls5', 'ls4');
model.geom('geom1').feature('ls5').setIndex('coord1', 'geom1.cm5.x', 0);
model.geom('geom1').feature('ls5').setIndex('coord1', 'geom1.cm5.y', 1);
model.geom('geom1').feature('ls5').setIndex('coord1', 'geom1.cm5.z', 2);
model.geom('geom1').run('ls5');
model.geom('geom1').create('uni2', 'Union');
model.geom('geom1').feature('uni2').selection('input').set({'ls1' 'ls2' 'ls3' 'ls4' 'ls5'});
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Truss');
model.geom('geom1').feature('uni2').set('contributeto', 'csel1');
model.geom('geom1').run('uni2');
model.geom('geom1').create('mir1', 'Mirror');
model.geom('geom1').feature('mir1').selection('input').set({'uni2'});
model.geom('geom1').feature('mir1').set('keep', true);
model.geom('geom1').feature('mir1').set('axis', [1 0 0]);
model.geom('geom1').feature('mir1').set('contributeto', 'csel1');
model.geom('geom1').run('mir1');
model.geom('geom1').feature('fin').set('action', 'assembly');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Upper body bracket');
model.selection('sel1').geom(1);
model.selection('sel1').set([17 18 21 22 58 59 181 182 205 206 222 223 700 701 706 707 735 736 824 825 886 887 892 893]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Engine bracket');
model.selection('sel2').geom(1);
model.selection('sel2').set([411 412 417 418 483 484 497 498]);

model.physics('shell').create('ee1', 'EdgeToEdge', 1);
model.physics('shell').feature('ee1').selection.named('geom1_sel3');
model.physics('shell').feature('ee1').selection('edgDst').named('geom1_sel4');
model.physics('shell').feature('ee1').set('ConnectedSurfaceDst', 'Top');
model.physics('shell').feature('ee1').set('weldEvaluation', true);
model.physics('shell').feature('ee1').set('throatWeldSize', '3[mm]');
model.physics('shell').feature('ee1').set('maxEqStress', '500[MPa]');
model.physics('shell').feature('ee1').set('maxPerpendicularStress', '500[MPa]');
model.physics('shell').create('el1', 'EdgeLoad', 1);
model.physics('shell').feature('el1').label('Upper body and payload');
model.physics('shell').feature('el1').selection.named('sel1');
model.physics('shell').feature('el1').set('LoadTypeForce', 'Resultant');
model.physics('shell').feature('el1').set('F', {'0' '0' '-2000[kg]*g_const'});
model.physics('shell').feature('el1').set('xaType', 'Coordinates');
model.physics('shell').feature('el1').set('x_a', {'0' '3[m]' '1[m]'});
model.physics('shell').create('el2', 'EdgeLoad', 1);
model.physics('shell').feature('el2').label('Engine');
model.physics('shell').feature('el2').selection.named('sel2');
model.physics('shell').feature('el2').set('LoadTypeForce', 'Resultant');
model.physics('shell').feature('el2').set('F', {'0' '0' '-400[kg]*g_const'});
model.physics('shell').feature('el2').set('xaType', 'Coordinates');
model.physics('shell').feature('el2').set('x_a', {'0' '0.4[m]' '0.1[m]'});
model.physics('shell').create('gacc1', 'GravityAcceleration', -1);
model.physics('shell').create('att1', 'Attachment', 1);
model.physics('shell').feature('att1').selection.set([606 607 608 609]);
model.physics('shell').feature.duplicate('att2', 'att1');
model.physics('shell').feature('att2').selection.set([610 611 612 613]);
model.physics('shell').feature.duplicate('att3', 'att2');
model.physics('shell').feature('att3').selection.set([697 698]);
model.physics('shell').feature.duplicate('att4', 'att3');
model.physics('shell').feature('att4').selection.set([303 304 305 306]);
model.physics('shell').feature.duplicate('att5', 'att4');
model.physics('shell').feature('att5').selection.set([307 308 309 310]);
model.physics('shell').feature.duplicate('att6', 'att5');
model.physics('shell').feature('att6').selection.set([910 911]);
model.physics('shell').feature.duplicate('att7', 'att6');
model.physics('shell').feature('att7').selection.set([795 796 836 837]);
model.physics('shell').feature.duplicate('att8', 'att7');
model.physics('shell').feature('att8').selection.set([797 798 838 839]);
model.physics('shell').feature.duplicate('att9', 'att8');
model.physics('shell').feature('att9').selection.set([87 88 124 125]);
model.physics('shell').feature.duplicate('att10', 'att9');
model.physics('shell').feature('att10').selection.set([89 90 126 127]);
model.physics.create('truss', 'Truss', 'geom1');
model.physics('truss').model('comp1');

model.study('std1').feature('eig').setSolveFor('/physics/truss', true);

model.physics('truss').selection.named('geom1_csel1_edg');
model.physics('truss').feature('emm1').set('E_mat', 'userdef');
model.physics('truss').feature('emm1').set('E', '1e15');
model.physics('truss').feature('emm1').set('nu_mat', 'userdef');
model.physics('truss').feature('emm1').set('rho_mat', 'userdef');
model.physics('truss').create('disp1', 'Displacement0', 0);
model.physics('truss').feature('disp1').selection.set([647]);
model.physics('truss').feature('disp1').setIndex('Direction', 'prescribed', 0);
model.physics('truss').feature('disp1').setIndex('U0', 'shell.att1.u', 0);
model.physics('truss').feature('disp1').setIndex('Direction', 'prescribed', 1);
model.physics('truss').feature('disp1').setIndex('U0', 'shell.att1.v', 1);
model.physics('truss').feature('disp1').setIndex('Direction', 'prescribed', 2);
model.physics('truss').feature('disp1').setIndex('U0', 'shell.att1.w', 2);
model.physics('truss').feature.duplicate('disp2', 'disp1');
model.physics('truss').feature('disp2').selection.set([648]);
model.physics('truss').feature('disp2').setIndex('U0', 'shell.att2.u', 0);
model.physics('truss').feature('disp2').setIndex('U0', 'shell.att2.v', 1);
model.physics('truss').feature('disp2').setIndex('U0', 'shell.att2.w', 2);
model.physics('truss').feature.duplicate('disp3', 'disp2');
model.physics('truss').feature('disp3').selection.set([649]);
model.physics('truss').feature('disp3').setIndex('U0', 'shell.att3.u', 0);
model.physics('truss').feature('disp3').setIndex('U0', 'shell.att3.v', 1);
model.physics('truss').feature('disp3').setIndex('U0', 'shell.att3.w', 2);
model.physics('truss').feature.duplicate('disp4', 'disp3');
model.physics('truss').feature('disp4').selection.set([623]);
model.physics('truss').feature('disp4').setIndex('U0', 'shell.att4.u', 0);
model.physics('truss').feature('disp4').setIndex('U0', 'shell.att4.v', 1);
model.physics('truss').feature('disp4').setIndex('U0', 'shell.att4.w', 2);
model.physics('truss').feature.duplicate('disp5', 'disp4');
model.physics('truss').feature('disp5').selection.set([624]);
model.physics('truss').feature('disp5').setIndex('U0', 'shell.att5.u', 0);
model.physics('truss').feature('disp5').setIndex('U0', 'shell.att5.v', 1);
model.physics('truss').feature('disp5').setIndex('U0', 'shell.att5.w', 2);
model.physics('truss').feature.duplicate('disp6', 'disp5');
model.physics('truss').feature('disp6').selection.set([622]);
model.physics('truss').feature('disp6').setIndex('U0', 'shell.att6.u', 0);
model.physics('truss').feature('disp6').setIndex('U0', 'shell.att6.v', 1);
model.physics('truss').feature('disp6').setIndex('U0', 'shell.att6.w', 2);
model.physics('truss').feature.duplicate('disp7', 'disp6');
model.physics('truss').feature('disp7').selection.set([651]);
model.physics('truss').feature('disp7').setIndex('U0', 'shell.att7.u', 0);
model.physics('truss').feature('disp7').setIndex('U0', 'shell.att7.v', 1);
model.physics('truss').feature('disp7').setIndex('U0', 'shell.att7.w', 2);
model.physics('truss').feature.duplicate('disp8', 'disp7');
model.physics('truss').feature('disp8').selection.set([652]);
model.physics('truss').feature('disp8').setIndex('U0', 'shell.att8.u', 0);
model.physics('truss').feature('disp8').setIndex('U0', 'shell.att8.v', 1);
model.physics('truss').feature('disp8').setIndex('U0', 'shell.att8.w', 2);
model.physics('truss').feature.duplicate('disp9', 'disp8');
model.physics('truss').feature('disp9').selection.set([619]);
model.physics('truss').feature('disp9').setIndex('U0', 'shell.att9.u', 0);
model.physics('truss').feature('disp9').setIndex('U0', 'shell.att9.v', 1);
model.physics('truss').feature('disp9').setIndex('U0', 'shell.att9.w', 2);
model.physics('truss').feature.duplicate('disp10', 'disp9');
model.physics('truss').feature('disp10').selection.set([620]);
model.physics('truss').feature('disp10').setIndex('U0', 'shell.att10.u', 0);
model.physics('truss').feature('disp10').setIndex('U0', 'shell.att10.v', 1);
model.physics('truss').feature('disp10').setIndex('U0', 'shell.att10.w', 2);
model.physics('truss').create('spdm1', 'SpringDamperMaterial', 1);
model.physics('truss').feature('spdm1').label('Front suspension');
model.physics('truss').feature('spdm1').selection.set([904 945]);
model.physics('truss').feature('spdm1').set('k', '1e6[N/m]');
model.physics('truss').create('spdm2', 'SpringDamperMaterial', 1);
model.physics('truss').feature('spdm2').label('Rear suspension');
model.physics('truss').feature('spdm2').selection.set([907 908 946 947]);
model.physics('truss').feature('spdm2').set('k', '3e6[N/m]');
model.physics('truss').create('disp11', 'Displacement1', 1);
model.physics('truss').feature('disp11').selection.set([907 908 946 947]);
model.physics('truss').feature('disp11').setIndex('Direction', 'prescribed', 0);
model.physics('truss').create('disp12', 'Displacement0', 0);
model.physics('truss').feature('disp12').selection.set([618 653]);
model.physics('truss').feature('disp12').setIndex('Direction', 'prescribed', 1);
model.physics('truss').feature('disp12').setIndex('Direction', 'prescribed', 2);
model.physics('truss').create('pin1', 'Pinned', 0);
model.physics('truss').feature('pin1').selection.set([621 650]);

model.mesh.create('mesh2', 'geom1');
model.mesh('mesh2').run;
model.mesh('mesh2').automatic(false);
model.mesh('mesh2').feature('size').set('hauto', 2);
model.mesh('mesh2').feature('ftri1').create('size1', 'Size');
model.mesh('mesh2').feature('ftri1').feature('size1').selection.named('geom1_sel2');
model.mesh('mesh2').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh2').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh2').feature('ftri1').feature('size1').set('hmax', '5e-3');
model.mesh('mesh2').feature('ftri1').create('size2', 'Size');
model.mesh('mesh2').feature('ftri1').feature('size2').selection.geom('geom1', 1);
model.mesh('mesh2').feature('ftri1').feature('size2').selection.named('geom1_sel3');
model.mesh('mesh2').feature('ftri1').feature('size2').set('custom', true);
model.mesh('mesh2').feature('ftri1').feature('size2').set('hmaxactive', true);
model.mesh('mesh2').feature('ftri1').feature('size2').set('hmax', '1e-3');
model.mesh('mesh2').feature('ftri1').feature.duplicate('size3', 'size2');
model.mesh('mesh2').feature('ftri1').feature('size3').selection.named('geom1_sel4');
model.mesh('mesh2').run;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/shell', true);
model.study('std2').feature('stat').setSolveFor('/physics/truss', true);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_shell_att_rot').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_shell_att_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_shell_att_rot').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_shell_att_disp').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_shell_att_rot').set('scaleval', '0.1');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol2').feature('v1').feature('comp1_shell_att_disp').set('scaleval', '0.046397011913647174');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('seDef', 'Segregated');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('s1').feature.remove('seDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.dataset.create('dset2shellshl', 'Shell');
model.result.dataset('dset2shellshl').set('data', 'dset2');
model.result.dataset('dset2shellshl').setIndex('topconst', '1', 3, 1);
model.result.dataset('dset2shellshl').setIndex('bottomconst', '-1', 3, 1);
model.result.dataset('dset2shellshl').setIndex('orientationexpr', 'shell.nlX', 0);
model.result.dataset('dset2shellshl').setIndex('displacementexpr', 'arx', 0);
model.result.dataset('dset2shellshl').setIndex('orientationexpr', 'shell.nlY', 1);
model.result.dataset('dset2shellshl').setIndex('displacementexpr', 'ary', 1);
model.result.dataset('dset2shellshl').setIndex('orientationexpr', 'shell.nlZ', 2);
model.result.dataset('dset2shellshl').setIndex('displacementexpr', 'arz', 2);
model.result.dataset('dset2shellshl').set('distanceexpr', 'shell.z_pos');
model.result.dataset('dset2shellshl').set('seplevels', false);
model.result.dataset('dset2shellshl').set('resolution', 2);
model.result.dataset('dset2shellshl').set('areascalefactor', 'shell.ASF');
model.result.dataset('dset2shellshl').set('linescalefactor', 'shell.LSF');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset2shellshl');
model.result('pg3').set('defaultPlotID', 'stress');
model.result('pg3').label('Stress (shell)');
model.result('pg3').set('showlegends', true);
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'shell.misesGp'});
model.result('pg3').feature('surf1').set('threshold', 'manual');
model.result('pg3').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg3').feature('surf1').set('colortable', 'Rainbow');
model.result('pg3').feature('surf1').set('colortabletrans', 'none');
model.result('pg3').feature('surf1').set('colorscalemode', 'linear');
model.result('pg3').feature('surf1').set('descr', 'von Mises stress');
model.result('pg3').feature('surf1').set('colortable', 'Prism');
model.result('pg3').feature('surf1').create('def', 'Deform');
model.result('pg3').feature('surf1').feature('def').set('expr', {'shell.u' 'shell.v' 'shell.w'});
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset2');
model.result('pg4').set('defaultPlotID', 'stress');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').create('line1', 'Line');
model.result('pg4').feature('line1').set('expr', {'truss.misesGp'});
model.result('pg4').feature('line1').set('threshold', 'manual');
model.result('pg4').feature('line1').set('thresholdvalue', 0.2);
model.result('pg4').feature('line1').set('colortable', 'Rainbow');
model.result('pg4').feature('line1').set('colortabletrans', 'none');
model.result('pg4').feature('line1').set('colorscalemode', 'linear');
model.result('pg4').label('Stress (truss)');
model.result('pg4').feature('line1').set('colortable', 'Rainbow');
model.result('pg4').feature('line1').set('linetype', 'tube');
model.result('pg4').feature('line1').set('radiusexpr', 'truss.re');
model.result('pg4').feature('line1').set('resolution', 'extrafine');
model.result('pg4').feature('line1').set('smooth', 'internal');
model.result('pg4').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg4').feature('line1').set('tuberadiusscale', 1);
model.result('pg4').feature('line1').set('tubeendcaps', false);
model.result('pg4').feature('line1').create('def', 'Deform');
model.result('pg4').feature('line1').feature('def').set('expr', {'u2' 'v2' 'w2'});
model.result('pg4').feature('line1').feature('def').set('descr', 'Displacement field');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('surf1').set('unit', 'MPa');
model.result('pg3').feature('surf1').set('rangecoloractive', true);
model.result('pg3').feature('surf1').set('rangecolormax', 180);
model.result('pg3').run;
model.result('pg3').feature('surf1').feature('def').active(false);
model.result('pg3').run;
model.result('pg3').run;
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('defaultPlotID', 'displacement');
model.result('pg5').label('Displacement (shell)');
model.result('pg5').set('showlegends', true);
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('data', 'dset2shellshl');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'shell.disp'});
model.result('pg5').feature('surf1').set('threshold', 'manual');
model.result('pg5').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg5').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg5').feature('surf1').set('colortabletrans', 'none');
model.result('pg5').feature('surf1').set('colorscalemode', 'linear');
model.result('pg5').feature('surf1').set('descr', 'Displacement magnitude');
model.result('pg5').feature('surf1').create('def', 'Deform');
model.result('pg5').feature('surf1').feature('def').set('expr', {'shell.u' 'shell.v' 'shell.w'});
model.result('pg5').label('Displacement (shell)');
model.result('pg5').run;
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset2');
model.result('pg6').set('defaultPlotID', 'edgeLoads');
model.result('pg6').label('Edge Loads (shell)');
model.result('pg6').set('showlegends', true);
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'1'});
model.result('pg6').feature('surf1').label('Gray Surfaces');
model.result('pg6').feature('surf1').set('coloring', 'uniform');
model.result('pg6').feature('surf1').set('color', 'gray');
model.result('pg6').feature('surf1').set('inheritcolor', false);
model.result('pg6').feature('surf1').set('inheritrange', false);
model.result('pg6').feature('surf1').set('inherittransparency', false);
model.result('pg6').feature('surf1').create('def', 'Deform');
model.result('pg6').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg6').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg6').feature('surf1').feature('def').set('scaleactive', true);
model.result('pg6').feature('surf1').feature('def').set('scale', 0);
model.result('pg6').feature('surf1').create('sel1', 'Selection');
model.result('pg6').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg6').feature('surf1').feature('sel1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326]);
model.result('pg6').feature('surf1').create('tran1', 'Transparency');
model.result('pg6').feature('surf1').feature('tran1').set('transparency', 0.8);
model.result('pg6').create('arwl1', 'ArrowLine');
model.result('pg6').feature('arwl1').set('expr', {'shell.el1.F_Lx' 'shell.el1.F_Ly' 'shell.el1.F_Lz'});
model.result('pg6').feature('arwl1').set('placement', 'gausspoints');
model.result('pg6').feature('arwl1').set('arrowbase', 'tail');
model.result('pg6').feature('arwl1').label('Upper body and payload');
model.result('pg6').feature('arwl1').set('inheritplot', 'none');
model.result('pg6').feature('arwl1').create('col', 'Color');
model.result('pg6').feature('arwl1').feature('col').set('colortable', 'Rainbow');
model.result('pg6').feature('arwl1').feature('col').set('colortabletrans', 'none');
model.result('pg6').feature('arwl1').feature('col').set('colorscalemode', 'linear');
model.result('pg6').feature('arwl1').feature('col').set('colordata', 'arrowlength');
model.result('pg6').feature('arwl1').feature('col').set('coloring', 'gradient');
model.result('pg6').feature('arwl1').feature('col').set('topcolor', 'red');
model.result('pg6').feature('arwl1').feature('col').set('bottomcolor', 'custom');
model.result('pg6').feature('arwl1').feature('col').set('custombottomcolor', [0.5882353186607361 0.5137255191802979 0.5176470875740051]);
model.result('pg6').feature('arwl1').set('color', 'green');
model.result('pg6').feature('arwl1').create('def', 'Deform');
model.result('pg6').feature('arwl1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg6').feature('arwl1').feature('def').set('descr', 'Displacement field');
model.result('pg6').feature('arwl1').feature('def').set('scaleactive', true);
model.result('pg6').feature('arwl1').feature('def').set('scale', 0);
model.result('pg6').feature.move('surf1', 1);
model.result('pg6').create('arwl2', 'ArrowLine');
model.result('pg6').feature('arwl2').set('expr', {'shell.el2.F_Lx' 'shell.el2.F_Ly' 'shell.el2.F_Lz'});
model.result('pg6').feature('arwl2').set('placement', 'gausspoints');
model.result('pg6').feature('arwl2').set('arrowbase', 'tail');
model.result('pg6').feature('arwl2').label('Engine');
model.result('pg6').feature('arwl2').set('inheritplot', 'arwl1');
model.result('pg6').feature('arwl2').create('col', 'Color');
model.result('pg6').feature('arwl2').feature('col').set('colortable', 'Rainbow');
model.result('pg6').feature('arwl2').feature('col').set('colortabletrans', 'none');
model.result('pg6').feature('arwl2').feature('col').set('colorscalemode', 'linear');
model.result('pg6').feature('arwl2').feature('col').set('colordata', 'arrowlength');
model.result('pg6').feature('arwl2').feature('col').set('coloring', 'gradient');
model.result('pg6').feature('arwl2').feature('col').set('topcolor', 'red');
model.result('pg6').feature('arwl2').feature('col').set('bottomcolor', 'custom');
model.result('pg6').feature('arwl2').feature('col').set('custombottomcolor', [0.5882353186607361 0.5137255191802979 0.5176470875740051]);
model.result('pg6').feature('arwl2').set('color', 'green');
model.result('pg6').feature('arwl2').create('def', 'Deform');
model.result('pg6').feature('arwl2').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg6').feature('arwl2').feature('def').set('descr', 'Displacement field');
model.result('pg6').feature('arwl2').feature('def').set('scaleactive', true);
model.result('pg6').feature('arwl2').feature('def').set('scale', 0);
model.result('pg6').feature.move('surf1', 2);
model.result('pg6').label('Edge Loads (shell)');
model.result('pg6').run;
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset2');
model.result('pg7').set('defaultPlotID', 'weldVerification');
model.result('pg7').label('Weld Failure Index (shell)');
model.result('pg7').set('showlegends', true);
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', 'Weld Verification, Weld Failure Index');
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').create('line1', 'Line');
model.result('pg7').feature('line1').set('expr', {'shell.ee1.weld_fi'});
model.result('pg7').feature('line1').set('threshold', 'manual');
model.result('pg7').feature('line1').set('thresholdvalue', 0.2);
model.result('pg7').feature('line1').set('colortable', 'Traffic');
model.result('pg7').feature('line1').set('colorscalemode', 'linear');
model.result('pg7').feature('line1').set('colortabletrans', 'none');
model.result('pg7').feature('line1').set('descractive', false);
model.result('pg7').feature('line1').set('linetype', 'tube');
model.result('pg7').feature('line1').set('radiusexpr', 'shell.d/2');
model.result('pg7').feature('line1').set('tuberadiusscale', 1);
model.result('pg7').feature('line1').set('tubeendcaps', false);
model.result('pg7').feature('line1').label('Edge to Edge 1');
model.result('pg7').feature('line1').set('inheritplot', 'none');
model.result('pg7').label('Weld Failure Index (shell)');
model.result('pg7').run;

model.geom('geom1').runPre('sel2');

model.view('view1').set('locked', true);

model.result('pg7').run;
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('coloring', 'uniform');
model.result('pg7').feature('surf1').set('color', 'gray');
model.result('pg7').feature('surf1').create('tran1', 'Transparency');
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'dset2');
model.result('pg8').set('defaultPlotID', 'connVariableshell');
model.result('pg8').label('Connected Region Indicator (shell)');
model.result('pg8').set('showlegends', true);
model.result('pg8').set('titletype', 'manual');
model.result('pg8').set('title', 'Connected region indicator');
model.result('pg8').set('showlegendsunit', true);
model.result('pg8').create('line1', 'Line');
model.result('pg8').feature('line1').set('expr', {'shell.i_conn'});
model.result('pg8').feature('line1').set('threshold', 'manual');
model.result('pg8').feature('line1').set('thresholdvalue', 0.2);
model.result('pg8').feature('line1').set('colortable', 'Rainbow');
model.result('pg8').feature('line1').set('colortabletrans', 'nonlinear');
model.result('pg8').feature('line1').set('colorscalemode', 'linear');
model.result('pg8').feature('line1').set('linetype', 'tube');
model.result('pg8').feature('line1').set('tubeendcaps', false);
model.result('pg8').feature('line1').set('radiusexpr', 'shell.d/2');
model.result('pg8').feature('line1').set('tuberadiusscale', 1);
model.result('pg8').feature('line1').set('smooth', 'none');
model.result('pg8').feature('line1').set('resolution', 'extrafine');
model.result('pg8').feature('line1').set('coloring', 'gradient');
model.result('pg8').feature('line1').set('topcolor', 'red');
model.result('pg8').feature('line1').set('bottomcolor', 'gray');
model.result('pg8').feature('line1').set('colortabletype', 'discrete');
model.result('pg8').feature('line1').set('bandcount', 2);
model.result('pg8').feature('line1').set('rangecoloractive', true);
model.result('pg8').feature('line1').set('rangecolormin', 0);
model.result('pg8').feature('line1').set('rangecolormax', 1);
model.result('pg8').feature('line1').set('colorcalibration', -1.5);
model.result('pg8').feature('line1').set('descractive', false);
model.result('pg8').label('Connected Region Indicator (shell)');
model.result('pg8').run;

model.view('view1').set('locked', false);

model.study('std1').feature('eig').set('useadvanceddisable', true);
model.study('std1').feature('eig').set('disabledphysics', {'shell/el1' 'shell/el2' 'shell/gacc1' 'shell/att1' 'shell/att2' 'shell/att3' 'shell/att4' 'shell/att5' 'shell/att6' 'shell/att7'  ...
'shell/att8' 'shell/att9' 'shell/att10'});
model.study('std1').feature('eig').setSolveFor('/physics/truss', false);
model.study('std1').feature('eig').set('disabledphysics', {'shell/el1' 'shell/el2' 'shell/gacc1' 'shell/att1' 'shell/att2' 'shell/att3' 'shell/att4' 'shell/att5' 'shell/att6' 'shell/att7'  ...
'shell/att8' 'shell/att9' 'shell/att10' 'truss'});

model.result('pg3').run;

model.title('Ladder Frame');

model.description('This model illustrates how to perform eigenfrequency and static analyses of a light truck ladder frame structure. The example shows how to convert a solid geometry to a shell model, implement a distributed load by specifying the corresponding resultant, and verify a weld junction.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('ladder_frame.mph');

model.modelNode.label('Components');

out = model;
