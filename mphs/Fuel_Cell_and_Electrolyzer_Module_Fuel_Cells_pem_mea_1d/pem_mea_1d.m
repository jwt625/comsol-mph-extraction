function out = model
%
% pem_mea_1d.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fuel_Cell_and_Electrolyzer_Module/Fuel_Cells');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 1);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('fc', 'HydrogenFuelCell', 'geom1');
model.physics('fc').model('comp1');
model.physics('fc').prop('H2GasMixture').set('H2O', '1');
model.physics('fc').prop('H2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('O2GasMixture').set('H2O', '1');
model.physics('fc').prop('O2GasMixture').set('N2', '1');
model.physics('fc').prop('O2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('ElectrolyteType', 'ProtonExchange');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('OperationMode', 'FuelCell');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('TRHE', '50[degC]');
model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/fc', true);
model.study('std1').feature('cdi').setSolveFor('/physics/ht', true);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/fc', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('L_CL', '10[um]', 'Catalytic layer thickness');
model.param.set('L_GDL', '200[um]', 'Gas diffusion layer thickness');
model.param.set('L_mem', '30[um]', 'Membrane thickness');
model.param.set('L_MPL', '20[um]', 'Microporous layer thickness');
model.param.set('a_CL', '5e7[m^2/m^3]', 'Specific area, catalytic layer');
model.param.set('epsl_CL', '0.2', 'Ionomer volume fraction, catalytic layer');
model.param.set('epss_CL', '0.4', 'Electrode volume fraction, catalytic layer');
model.param.set('epss_GDL', '0.4', 'Solid phase volume fraction, gas diffusion layer');
model.param.set('epss_MPL', '0.4', 'Solid phase volume fraction, microporous layer');
model.param.set('epsg_CL', '1-epss_CL-epsl_CL', 'Gas phase volume fraction, catalytic layers');
model.param.set('epsg_MPL', '1-epss_MPL', 'Gas phase volume fraction, microporous layers');
model.param.set('epsg_GDL', '1-epss_GDL', 'Gas phase volume fraction, gas diffusion layers');
model.param.set('sigmas_CL', '25[S/m]', 'Electric conductivity, catalytic layer');
model.param.set('sigmas_GDL', '100[S/m]', 'Electric conductivity, gas diffusion layer');
model.param.set('sigmas_MPL', '50[S/m]', 'Electric conductivity, micro porous layer');
model.param.set('kappag_CL', '1e-12[m^2]', 'Gas permeability, catalytic layer');
model.param.set('kappag_GDL', '1e-10[m^2]', 'Gas permeability, gas diffusion layer');
model.param.set('kappag_MPL', '1e-10[m^2]', 'Gas permeability, micro porous layer');
model.param.set('E_cell', '1[V]', 'Cell potential');
model.param.set('i0_H2', '1e2[A/m^2]', 'Exchange current density, hydrogen oxidation');
model.param.set('i0_O2', '1e-4[A/m^2]', 'Exchange current density, oxygen reduction');
model.param.set('alphaa_O2', '3', 'Anodic transfer coefficient, oxygen reduction');
model.param.set('T0', '70[degC]', 'External/initial temperature');
model.param.set('RH_an', '85[%]', 'Inlet relative humidity, anode');
model.param.set('RH_cath', '85[%]', 'Inlet relative humidity, cathode');
model.param.set('kappa_CL', '0.3', 'Thermal conductivity, catalytic layer');
model.param.set('kappa_MPL', '0.3', 'Thermal conductivity, microporous layer');
model.param.set('kappa_GDL', '0.3', 'Thermal conductivity, gas diffusion layer');

model.geom('geom1').create('i1', 'Interval');
model.geom('geom1').feature('i1').label('Anode GDL');
model.geom('geom1').feature('i1').setIndex('coord', 'L_GDL', 1);
model.geom('geom1').feature('i1').set('selresult', true);
model.geom('geom1').run('i1');
model.geom('geom1').create('i2', 'Interval');
model.geom('geom1').feature('i2').label('Anode MPL');
model.geom('geom1').feature('i2').setIndex('coord', 'L_GDL', 0);
model.geom('geom1').feature('i2').setIndex('coord', 'L_GDL+L_MPL', 1);
model.geom('geom1').feature('i2').set('selresult', true);
model.geom('geom1').run('i2');
model.geom('geom1').create('i3', 'Interval');
model.geom('geom1').feature('i3').label('Anode CL');
model.geom('geom1').feature('i3').setIndex('coord', 'L_GDL+L_MPL', 0);
model.geom('geom1').feature('i3').setIndex('coord', 'L_GDL+L_MPL+L_CL', 1);
model.geom('geom1').feature('i3').set('selresult', true);
model.geom('geom1').run('i3');
model.geom('geom1').create('i4', 'Interval');
model.geom('geom1').feature('i4').label('Membrane');
model.geom('geom1').feature('i4').setIndex('coord', 'L_GDL+L_MPL+L_CL', 0);
model.geom('geom1').feature('i4').setIndex('coord', 'L_GDL+L_MPL+L_CL+L_mem', 1);
model.geom('geom1').feature('i4').set('selresult', true);
model.geom('geom1').run('i4');
model.geom('geom1').create('i5', 'Interval');
model.geom('geom1').feature('i5').label('Cathode CL');
model.geom('geom1').feature('i5').setIndex('coord', 'L_GDL+L_MPL+L_CL+L_mem', 0);
model.geom('geom1').feature('i5').setIndex('coord', 'L_GDL+L_MPL+L_CL+L_mem+L_CL', 1);
model.geom('geom1').feature('i5').set('selresult', true);
model.geom('geom1').run('i5');
model.geom('geom1').create('i6', 'Interval');
model.geom('geom1').feature('i6').label('Cathode MPL');
model.geom('geom1').feature('i6').setIndex('coord', 'L_GDL+L_MPL+L_CL+L_mem+L_CL', 0);
model.geom('geom1').feature('i6').setIndex('coord', 'L_GDL+L_MPL+L_CL+L_mem+L_CL+L_MPL', 1);
model.geom('geom1').feature('i6').set('selresult', true);
model.geom('geom1').run('i6');
model.geom('geom1').create('i7', 'Interval');
model.geom('geom1').feature('i7').label('Cathode GDL');
model.geom('geom1').feature('i7').setIndex('coord', 'L_GDL+L_MPL+L_CL+L_mem+L_CL+L_MPL', 0);
model.geom('geom1').feature('i7').setIndex('coord', 'L_GDL+L_MPL+L_CL+L_mem+L_CL+L_MPL+L_GDL', 1);
model.geom('geom1').feature('i7').set('selresult', true);
model.geom('geom1').runPre('fin');

model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');

model.geom('geom1').run;

model.selection('uni1').label('Anode Gas Compartment');
model.selection('uni1').set('input', {'geom1_i1_dom' 'geom1_i2_dom' 'geom1_i3_dom'});
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Cathode Gas Compartment');
model.selection('uni2').set('input', {'geom1_i5_dom' 'geom1_i6_dom' 'geom1_i7_dom'});
model.selection.create('uni3', 'Union');
model.selection('uni3').model('comp1');
model.selection('uni3').label('Ionomer Domains');
model.selection('uni3').set('input', {'geom1_i3_dom' 'geom1_i4_dom' 'geom1_i5_dom'});
model.selection.create('uni4', 'Union');
model.selection('uni4').model('comp1');
model.selection('uni4').label('CLs');
model.selection('uni4').set('input', {'geom1_i3_dom' 'geom1_i5_dom'});
model.selection.create('uni5', 'Union');
model.selection('uni5').model('comp1');
model.selection('uni5').label('MPLs');
model.selection('uni5').set('input', {'geom1_i2_dom' 'geom1_i6_dom'});
model.selection.create('uni6', 'Union');
model.selection('uni6').model('comp1');
model.selection('uni6').label('GDLs');
model.selection('uni6').set('input', {'geom1_i1_dom' 'geom1_i7_dom'});

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('ElectrolyteConductivity', 'Electrolyte conductivity');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('MembraneCrossover', 'Membrane crossover');
model.material('mat1').propertyGroup.create('PolymerElectrolyteWaterTransport', 'Polymer electrolyte water transport');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('PolymerElectrolyteWaterAbsorptionDesorption', 'Polymer electrolyte water absorption-desorption');
model.material('mat1').label('Nafion, EW 1100, Vapor Equilibrated, Protonated');
model.material('mat1').set('family', 'glass');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'(0.177+3.7e-3*lambda)[W/m/K]' '0' '0' '0' '(0.177+3.7e-3*lambda)[W/m/K]' '0' '0' '0' '(0.177+3.7e-3*lambda)[W/m/K]'});
model.material('mat1').propertyGroup('def').set('INFO_PREFIX:thermalconductivity', ['Ex situ measurements of through-plane thermal conductivities' newline 'in a polymer electrolyte fuel cell,' newline 'O Burheim, P Vie, J Pharoah, S. Kjelstrup, Journal of Power Sources 195 (2010) 249' native2unicode(hex2dec({'20' '13'}), 'unicode') '256']);
model.material('mat1').propertyGroup('def').set('lambda', 'pewt.lambda');
model.material('mat1').propertyGroup('def').descr('lambda', '');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('source', 'file');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('importedname', 'nafion_1100_conductivity_vapor_eq.csv');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('importeddim', '2D');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('funcs', {'sigma_vs_T_and_RH' '1'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('fununit', {'S/cm'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('argunit', {'1' '1'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('sourcetype', 'model');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('nargs', '2');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('struct', 'spreadsheet');
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('sigmal', {'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))' '0' '0' '0' 'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))' '0' '0' '0' 'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('INFO_PREFIX:sigmal', ['Yoshitsugu Sone et al 1996 J. Electrochem. Soc. 143 1254' newline '(Conductivity data refers to the "E-form" values, Figure 5a and 5b)']);
model.material('mat1').propertyGroup('ElectrolyteConductivity').addInput('temperature');
model.material('mat1').propertyGroup('ElectrolyteConductivity').addInput('relativehumidity');
model.material('mat1').propertyGroup('MembraneCrossover').set('Psi_H2', '(2.2e-11*f+2.9e-12)[mol/cm/s/bar]*exp(21[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat1').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_H2', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041' newline ]);
model.material('mat1').propertyGroup('MembraneCrossover').set('Psi_O2', '(1.9e-11*f+1.1e-12)[mol/cm/s/bar]*exp(22[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat1').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_O2', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat1').propertyGroup('MembraneCrossover').set('Psi_N2', 'Psi_O2');
model.material('mat1').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_N2', 'Approximated as equal to oxygen value (no reference).');
model.material('mat1').propertyGroup('MembraneCrossover').set('lambda', 'pewt.lambda');
model.material('mat1').propertyGroup('MembraneCrossover').descr('lambda', 'Water uptake');
model.material('mat1').propertyGroup('MembraneCrossover').set('EW', '1100[g/mol]');
model.material('mat1').propertyGroup('MembraneCrossover').descr('EW', 'Polymer electrolyte equivalent weight');
model.material('mat1').propertyGroup('MembraneCrossover').set('Vm', 'EW/2[g/cm^3]');
model.material('mat1').propertyGroup('MembraneCrossover').descr('Vm', 'Partial molar volume of dry polymer');
model.material('mat1').propertyGroup('MembraneCrossover').set('V0', '18[g/mol]/1000[kg/m^3]');
model.material('mat1').propertyGroup('MembraneCrossover').descr('V0', 'Water partial molar volume');
model.material('mat1').propertyGroup('MembraneCrossover').set('f', 'lambda*V0/(Vm+lambda*V0)');
model.material('mat1').propertyGroup('MembraneCrossover').descr('f', 'Water volume fraction in polymer');
model.material('mat1').propertyGroup('MembraneCrossover').addInput('relativehumidity');
model.material('mat1').propertyGroup('MembraneCrossover').addInput('temperature');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('funcname', 'lambda');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('table', {'0.00' '0.0';  ...
'0.14' '1.9';  ...
'0.37' '2.9';  ...
'0.45' '3.1';  ...
'0.51' '3.7';  ...
'0.57' '4.3';  ...
'0.79' '6.3';  ...
'0.80' '6.8';  ...
'0.81' '7.9';  ...
'0.88' '10.0';  ...
'0.91' '12.0';  ...
'0.96' '13.2';  ...
'1.00' '14.0'});
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('argunit', {'1'});
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('alpha', 'max(c0*Dmu/(R_const*T*(1-x0)),1e-9)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('INFO_PREFIX:alpha', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('xi', 'if(lambda>1,1,lambda)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('INFO_PREFIX:xi', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('lambda', 'lambda(phi)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('lambda', 'Water uptake');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('EW', '1100[g/mol]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('EW', 'Polymer electrolyte equivalent weight');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('Vm', 'EW/2[g/cm^3]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('Vm', 'Partial molar volume of dry polymer');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('V0', '18[g/mol]/1000[kg/m^3]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('V0', 'Water partial molar volume');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('f', 'lambda*V0/(Vm+lambda*V0)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('f', 'Water volume fraction in polymer');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('Dmu', '1.8e-5[cm^2/s]*f*exp(20[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('Dmu', 'Water diffusion coefficient');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('c0', 'lambda/(V0*lambda+Vm)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('c0', 'Water concentration');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('x0', 'lambda/(lambda+1)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('x0', 'Water mole fraction');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').addInput('temperature');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').addInput('relativehumidity');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').set('k_abs_dsp', '1.04e-7*exp(4.48*max(min(phi,0.85),0.25))[mol/cm^2/s]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').set('INFO_PREFIX:k_abs_dsp', ['Kientiz, Yamada, Nonoyama, Weber,' newline 'Journal of Fuel Cell Science and Technology, Feb 2011, Vol. 8,  Article Number 011013']);
model.material('mat1').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').addInput('relativehumidity');
model.material('mat1').selection.named('uni3');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('ElectrolyteConductivity', 'Electrolyte conductivity');
model.material('mat2').propertyGroup('ElectrolyteConductivity').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('MembraneCrossover', 'Membrane crossover');
model.material('mat2').propertyGroup.create('PolymerElectrolyteWaterTransport', 'Polymer electrolyte water transport');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('PolymerElectrolyteWaterAbsorptionDesorption', 'Polymer electrolyte water absorption-desorption');
model.material('mat2').label('Nafion, EW 1100, Vapor Equilibrated, Protonated 1');
model.material('mat2').set('family', 'glass');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'(0.177+3.7e-3*lambda)[W/m/K]' '0' '0' '0' '(0.177+3.7e-3*lambda)[W/m/K]' '0' '0' '0' '(0.177+3.7e-3*lambda)[W/m/K]'});
model.material('mat2').propertyGroup('def').set('INFO_PREFIX:thermalconductivity', ['Ex situ measurements of through-plane thermal conductivities' newline 'in a polymer electrolyte fuel cell,' newline 'O Burheim, P Vie, J Pharoah, S. Kjelstrup, Journal of Power Sources 195 (2010) 249' native2unicode(hex2dec({'20' '13'}), 'unicode') '256']);
model.material('mat2').propertyGroup('def').set('lambda', 'pewt.lambda');
model.material('mat2').propertyGroup('def').descr('lambda', '');
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('source', 'file');
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('importedname', 'nafion_1100_conductivity_vapor_eq.csv');
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('importeddim', '2D');
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('funcs', {'sigma_vs_T_and_RH' '1'});
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('fununit', {'S/cm'});
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('argunit', {'1' '1'});
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('sourcetype', 'model');
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('nargs', '2');
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('struct', 'spreadsheet');
model.material('mat2').propertyGroup('ElectrolyteConductivity').set('sigmal', {'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))' '0' '0' '0' 'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))' '0' '0' '0' 'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))'});
model.material('mat2').propertyGroup('ElectrolyteConductivity').set('INFO_PREFIX:sigmal', ['Yoshitsugu Sone et al 1996 J. Electrochem. Soc. 143 1254' newline '(Conductivity data refers to the "E-form" values, Figure 5a and 5b)']);
model.material('mat2').propertyGroup('ElectrolyteConductivity').addInput('temperature');
model.material('mat2').propertyGroup('ElectrolyteConductivity').addInput('relativehumidity');
model.material('mat2').propertyGroup('MembraneCrossover').set('Psi_H2', '(2.2e-11*f+2.9e-12)[mol/cm/s/bar]*exp(21[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat2').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_H2', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041' newline ]);
model.material('mat2').propertyGroup('MembraneCrossover').set('Psi_O2', '(1.9e-11*f+1.1e-12)[mol/cm/s/bar]*exp(22[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat2').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_O2', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat2').propertyGroup('MembraneCrossover').set('Psi_N2', 'Psi_O2');
model.material('mat2').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_N2', 'Approximated as equal to oxygen value (no reference).');
model.material('mat2').propertyGroup('MembraneCrossover').set('lambda', 'pewt.lambda');
model.material('mat2').propertyGroup('MembraneCrossover').descr('lambda', 'Water uptake');
model.material('mat2').propertyGroup('MembraneCrossover').set('EW', '1100[g/mol]');
model.material('mat2').propertyGroup('MembraneCrossover').descr('EW', 'Polymer electrolyte equivalent weight');
model.material('mat2').propertyGroup('MembraneCrossover').set('Vm', 'EW/2[g/cm^3]');
model.material('mat2').propertyGroup('MembraneCrossover').descr('Vm', 'Partial molar volume of dry polymer');
model.material('mat2').propertyGroup('MembraneCrossover').set('V0', '18[g/mol]/1000[kg/m^3]');
model.material('mat2').propertyGroup('MembraneCrossover').descr('V0', 'Water partial molar volume');
model.material('mat2').propertyGroup('MembraneCrossover').set('f', 'lambda*V0/(Vm+lambda*V0)');
model.material('mat2').propertyGroup('MembraneCrossover').descr('f', 'Water volume fraction in polymer');
model.material('mat2').propertyGroup('MembraneCrossover').addInput('relativehumidity');
model.material('mat2').propertyGroup('MembraneCrossover').addInput('temperature');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('funcname', 'lambda');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('table', {'0.00' '0.0';  ...
'0.14' '1.9';  ...
'0.37' '2.9';  ...
'0.45' '3.1';  ...
'0.51' '3.7';  ...
'0.57' '4.3';  ...
'0.79' '6.3';  ...
'0.80' '6.8';  ...
'0.81' '7.9';  ...
'0.88' '10.0';  ...
'0.91' '12.0';  ...
'0.96' '13.2';  ...
'1.00' '14.0'});
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('argunit', {'1'});
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('alpha', 'max(c0*Dmu/(R_const*T*(1-x0)),1e-9)');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('INFO_PREFIX:alpha', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('xi', 'if(lambda>1,1,lambda)');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('INFO_PREFIX:xi', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('lambda', 'lambda(phi)');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('lambda', 'Water uptake');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('EW', '1100[g/mol]');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('EW', 'Polymer electrolyte equivalent weight');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('Vm', 'EW/2[g/cm^3]');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('Vm', 'Partial molar volume of dry polymer');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('V0', '18[g/mol]/1000[kg/m^3]');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('V0', 'Water partial molar volume');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('f', 'lambda*V0/(Vm+lambda*V0)');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('f', 'Water volume fraction in polymer');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('Dmu', '1.8e-5[cm^2/s]*f*exp(20[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('Dmu', 'Water diffusion coefficient');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('c0', 'lambda/(V0*lambda+Vm)');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('c0', 'Water concentration');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('x0', 'lambda/(lambda+1)');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('x0', 'Water mole fraction');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').addInput('temperature');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').addInput('relativehumidity');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').set('k_abs_dsp', '1.04e-7*exp(4.48*max(min(phi,0.85),0.25))[mol/cm^2/s]');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').set('INFO_PREFIX:k_abs_dsp', ['Kientiz, Yamada, Nonoyama, Weber,' newline 'Journal of Fuel Cell Science and Technology, Feb 2011, Vol. 8,  Article Number 011013']);
model.material('mat2').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').addInput('relativehumidity');
model.material('mat2').selection.geom('geom1', 0);
model.material('mat2').selection.set([4 5]);

model.physics('fc').prop('H2GasMixture').set('GasMixtureDarcy', true);
model.physics('fc').prop('O2GasMixture').set('GasMixtureDarcy', true);
model.physics('fc').prop('MembraneTransport').set('H2_mem', true);
model.physics('fc').prop('MembraneTransport').set('O2_mem', true);
model.physics('fc').prop('MembraneTransport').set('H2O_mem', true);
model.physics('fc').create('mem1', 'Membrane', 1);
model.physics('fc').feature('mem1').selection.named('geom1_i4_dom');
model.physics('fc').create('h2gde1', 'H2GasDiffusionElectrode', 1);
model.physics('fc').feature('h2gde1').selection.named('geom1_i3_dom');
model.physics('fc').create('h2gdl1', 'H2GasDiffusionLayer', 1);
model.physics('fc').feature('h2gdl1').selection.named('geom1_i2_dom');
model.physics('fc').create('h2gdl2', 'H2GasDiffusionLayer', 1);
model.physics('fc').feature('h2gdl2').selection.named('geom1_i1_dom');
model.physics('fc').create('o2gde1', 'O2GasDiffusionElectrode', 1);
model.physics('fc').feature('o2gde1').selection.named('geom1_i5_dom');
model.physics('fc').create('o2gdl1', 'O2GasDiffusionLayer', 1);
model.physics('fc').feature('o2gdl1').selection.named('geom1_i6_dom');
model.physics('fc').create('o2gdl2', 'O2GasDiffusionLayer', 1);
model.physics('fc').feature('o2gdl2').selection.named('geom1_i7_dom');
model.physics('fc').feature('mem1').feature('init1').set('T0', 'T0');
model.physics('fc').feature('h2gde1').set('sigmas', {'sigmas_CL' '0' '0' '0' 'sigmas_CL' '0' '0' '0' 'sigmas_CL'});
model.physics('fc').feature('h2gde1').set('epsl', 'epsl_CL');
model.physics('fc').feature('h2gde1').set('epsg', 'epsg_CL');
model.physics('fc').feature('h2gde1').set('kappag', {'kappag_CL' '0' '0' '0' 'kappag_CL' '0' '0' '0' 'kappag_CL'});
model.physics('fc').feature('h2gde1').feature('h2gder1').set('i0_ref', 'i0_H2');
model.physics('fc').feature('h2gde1').feature('h2gder1').set('Av', 'a_CL');
model.physics('fc').feature('h2gdl1').label('H2 Gas Diffusion Layer 1 - MPL');
model.physics('fc').feature('h2gdl1').set('sigmas', {'sigmas_MPL' '0' '0' '0' 'sigmas_MPL' '0' '0' '0' 'sigmas_MPL'});
model.physics('fc').feature('h2gdl1').set('epsg', 'epsg_MPL');
model.physics('fc').feature('h2gdl1').set('kappag', {'kappag_MPL' '0' '0' '0' 'kappag_MPL' '0' '0' '0' 'kappag_MPL'});
model.physics('fc').feature('h2gdl2').label('H2 Gas Diffusion Layer 2 - GDL');
model.physics('fc').feature('h2gdl2').set('sigmas', {'sigmas_GDL' '0' '0' '0' 'sigmas_GDL' '0' '0' '0' 'sigmas_GDL'});
model.physics('fc').feature('h2gdl2').set('epsg', 'epsg_GDL');
model.physics('fc').feature('h2gdl2').set('kappag', {'kappag_GDL' '0' '0' '0' 'kappag_GDL' '0' '0' '0' 'kappag_GDL'});
model.physics('fc').feature('o2gde1').set('sigmas', {'sigmas_CL' '0' '0' '0' 'sigmas_CL' '0' '0' '0' 'sigmas_CL'});
model.physics('fc').feature('o2gde1').set('epsl', 'epsl_CL');
model.physics('fc').feature('o2gde1').set('epsg', 'epsg_CL');
model.physics('fc').feature('o2gde1').set('kappag', {'kappag_CL' '0' '0' '0' 'kappag_CL' '0' '0' '0' 'kappag_CL'});
model.physics('fc').feature('o2gde1').feature('o2gder1').set('i0_ref', 'i0_O2');
model.physics('fc').feature('o2gde1').feature('o2gder1').set('alphaa', 'alphaa_O2');
model.physics('fc').feature('o2gde1').feature('o2gder1').set('Av', 'a_CL');
model.physics('fc').feature('o2gdl1').label('O2 Gas Diffusion Layer 1 - MPL');
model.physics('fc').feature('o2gdl1').set('sigmas', {'sigmas_MPL' '0' '0' '0' 'sigmas_MPL' '0' '0' '0' 'sigmas_MPL'});
model.physics('fc').feature('o2gdl1').set('epsg', 'epsg_MPL');
model.physics('fc').feature('o2gdl1').set('kappag', {'kappag_MPL' '0' '0' '0' 'kappag_MPL' '0' '0' '0' 'kappag_MPL'});
model.physics('fc').feature('o2gdl2').label('O2 Gas Diffusion Layer 2 - GDL');
model.physics('fc').feature('o2gdl2').set('sigmas', {'sigmas_GDL' '0' '0' '0' 'sigmas_GDL' '0' '0' '0' 'sigmas_GDL'});
model.physics('fc').feature('o2gdl2').set('epsg', 'epsg_GDL');
model.physics('fc').feature('o2gdl2').set('kappag', {'kappag_GDL' '0' '0' '0' 'kappag_GDL' '0' '0' '0' 'kappag_GDL'});
model.physics('fc').feature('ecph1').create('egnd1', 'ElectricGround', 0);
model.physics('fc').feature('ecph1').feature('egnd1').selection.set([1]);
model.physics('fc').feature('ecph1').create('pot1', 'ElectricPotential', 0);
model.physics('fc').feature('ecph1').feature('pot1').selection.set([8]);
model.physics('fc').feature('ecph1').feature('pot1').set('phisbnd', 'E_cell');
model.physics('fc').feature('h2gasph1').feature('init1').set('MixtureSpecification', 'HumidifiedMixture');
model.physics('fc').feature('h2gasph1').feature('init1').set('RH_hum', 'RH_an');
model.physics('fc').feature('h2gasph1').feature('init1').set('T_hum', 'T0');
model.physics('fc').feature('h2gasph1').create('h2in1', 'H2Inlet', 0);
model.physics('fc').feature('h2gasph1').feature('h2in1').selection.set([1]);
model.physics('fc').feature('o2gasph1').feature('init1').set('MixtureSpecification', 'HumidifiedAir');
model.physics('fc').feature('o2gasph1').feature('init1').set('RH_hum', 'RH_cath');
model.physics('fc').feature('o2gasph1').feature('init1').set('T_hum', 'T0');
model.physics('fc').feature('o2gasph1').create('o2in1', 'O2Inlet', 0);
model.physics('fc').feature('o2gasph1').feature('o2in1').selection.set([8]);
model.physics('ht').create('solid2', 'SolidHeatTransferModel', 1);
model.physics('ht').feature('solid2').label('Solid 2 - GDLs');
model.physics('ht').feature('solid2').selection.named('uni6');
model.physics('ht').feature('solid2').set('k_mat', 'userdef');
model.physics('ht').feature('solid2').set('k', {'kappa_GDL' '0' '0' '0' 'kappa_GDL' '0' '0' '0' 'kappa_GDL'});
model.physics('ht').create('solid3', 'SolidHeatTransferModel', 1);
model.physics('ht').feature('solid3').label('Solid 3 - MPLs');
model.physics('ht').feature('solid3').selection.named('uni5');
model.physics('ht').feature('solid3').set('k_mat', 'userdef');
model.physics('ht').feature('solid3').set('k', {'kappa_MPL' '0' '0' '0' 'kappa_MPL' '0' '0' '0' 'kappa_MPL'});
model.physics('ht').create('solid4', 'SolidHeatTransferModel', 1);
model.physics('ht').feature('solid4').label('Solid 4 - CLs');
model.physics('ht').feature('solid4').selection.named('uni4');
model.physics('ht').feature('solid4').set('k_mat', 'userdef');
model.physics('ht').feature('solid4').set('k', {'kappa_CL' '0' '0' '0' 'kappa_CL' '0' '0' '0' 'kappa_CL'});
model.physics('ht').feature('solid1').label('Solid 1 - Membrane');
model.physics('ht').feature('solid1').set('rho_mat', 'userdef');
model.physics('ht').feature('solid1').set('Cp_mat', 'userdef');
model.physics('ht').feature('solid2').set('rho_mat', 'userdef');
model.physics('ht').feature('solid2').set('Cp_mat', 'userdef');
model.physics('ht').feature('solid3').set('rho_mat', 'userdef');
model.physics('ht').feature('solid3').set('Cp_mat', 'userdef');
model.physics('ht').feature('solid4').set('rho_mat', 'userdef');
model.physics('ht').feature('solid4').set('Cp_mat', 'userdef');
model.physics('ht').create('temp1', 'TemperatureBoundary', 0);
model.physics('ht').feature('temp1').selection.set([1 8]);
model.physics('ht').feature('temp1').set('T0', 'T0');
model.physics('ht').feature('init1').set('Tinit', 'T0');

model.multiphysics.create('ech1', 'ElectrochemicalHeating', 'geom1', 1);

model.mesh('mesh1').autoMeshSize(2);
model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').selection.named('uni4');
model.mesh('mesh1').feature('edg1').feature('dis1').set('numelem', 10);
model.mesh('mesh1').run;

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'L_CL', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'L_CL', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'RH_an', 0);
model.study('std1').feature('param').setIndex('plistarr', '0.95 0.5', 0);
model.study('std1').feature('param').setIndex('pname', 'L_CL', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'm', 1);
model.study('std1').feature('param').setIndex('pname', 'L_CL', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'm', 1);
model.study('std1').feature('param').setIndex('pname', 'RH_cath', 1);
model.study('std1').feature('param').setIndex('plistarr', '0.95 0.5', 1);
model.study('std1').feature('param').set('sweeptype', 'filled');
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'L_CL', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'L_CL', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'E_cell', 0);
model.study('std1').feature('stat').setIndex('plistarr', 'range(1.0,-0.01,0.91) range(0.9,-0.05,0.5)', 0);
model.study('std1').feature('stat').setIndex('punit', 'V', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_mu0').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_mu0').set('scaleval', 'F_const');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_wN2_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_aO2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_H2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_mu0').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_aH2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_O2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_wN2_O2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_aO2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_H2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_mu0').set('scaleval', 'F_const');
model.sol('sol1').feature('v2').feature('comp1_fc_aH2').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-4);
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s2').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s2').set('control', 'stat');
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct (fc) (Merged)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i3', 'Iterative');
model.sol('sol1').feature('s2').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i3').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i3').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i3').set('maxlinit', 10000);
model.sol('sol1').feature('s2').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i3').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s2').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'RH_an' 'RH_cath'});
model.batch('p1').set('plistarr', {'0.95 0.5' '0.95 0.5'});
model.batch('p1').set('sweeptype', 'filled');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol3');
model.sol('sol3').study('std1');
model.sol('sol3').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol3');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').set('data', 'dset3');
model.result('pg1').label('Electrode Potential with Respect to Ground (fc)');
model.result('pg1').create('lngr1', 'LineGraph');
model.result('pg1').feature('lngr1').set('xdata', 'expr');
model.result('pg1').feature('lngr1').set('xdataexpr', 'x');
model.result('pg1').feature('lngr1').selection.geom('geom1', 1);
model.result('pg1').feature('lngr1').selection.set([1 2 3 4 5 6 7]);
model.result('pg1').feature('lngr1').set('expr', {'fc.phis'});
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset3');
model.result('pg2').label('Electrolyte Potential (fc)');
model.result('pg2').create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').set('xdata', 'expr');
model.result('pg2').feature('lngr1').set('xdataexpr', 'x');
model.result('pg2').feature('lngr1').selection.geom('geom1', 1);
model.result('pg2').feature('lngr1').selection.set([1 2 3 4 5 6 7]);
model.result('pg2').feature('lngr1').set('expr', {'fc.phil'});
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').set('data', 'dset3');
model.result('pg3').label('Mole Fraction, H2 (fc)');
model.result('pg3').set('titletype', 'custom');
model.result('pg3').set('prefixintitle', 'Species H2:');
model.result('pg3').set('expressionintitle', false);
model.result('pg3').set('typeintitle', false);
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('xdata', 'expr');
model.result('pg3').feature('lngr1').set('xdataexpr', 'x');
model.result('pg3').feature('lngr1').selection.geom('geom1', 1);
model.result('pg3').feature('lngr1').selection.set([1 2 3 4 5 6 7]);
model.result('pg3').feature('lngr1').set('expr', {'fc.xH2'});
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').set('data', 'dset3');
model.result('pg4').label('Mole Fraction, O2 (fc)');
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('prefixintitle', 'Species O2:');
model.result('pg4').set('expressionintitle', false);
model.result('pg4').set('typeintitle', false);
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').set('xdata', 'expr');
model.result('pg4').feature('lngr1').set('xdataexpr', 'x');
model.result('pg4').feature('lngr1').selection.geom('geom1', 1);
model.result('pg4').feature('lngr1').selection.set([1 2 3 4 5 6 7]);
model.result('pg4').feature('lngr1').set('expr', {'fc.xO2'});
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'dset3');
model.result('pg5').label('Mole Fraction, H2O (fc)');
model.result('pg5').set('titletype', 'custom');
model.result('pg5').set('prefixintitle', 'Species H2O:');
model.result('pg5').set('expressionintitle', false);
model.result('pg5').set('typeintitle', false);
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('xdata', 'expr');
model.result('pg5').feature('lngr1').set('xdataexpr', 'x');
model.result('pg5').feature('lngr1').selection.geom('geom1', 1);
model.result('pg5').feature('lngr1').selection.set([1 2 3 4 5 6 7]);
model.result('pg5').feature('lngr1').set('expr', {'fc.xH2O'});
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').set('data', 'dset3');
model.result('pg6').label('Mole Fraction, N2 (fc)');
model.result('pg6').set('titletype', 'custom');
model.result('pg6').set('prefixintitle', 'Species N2:');
model.result('pg6').set('expressionintitle', false);
model.result('pg6').set('typeintitle', false);
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', 'x');
model.result('pg6').feature('lngr1').selection.geom('geom1', 1);
model.result('pg6').feature('lngr1').selection.set([1 2 3 4 5 6 7]);
model.result('pg6').feature('lngr1').set('expr', {'fc.xN2'});
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').set('data', 'dset3');
model.result('pg7').label('Pressure (fc)');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('xdata', 'expr');
model.result('pg7').feature('lngr1').set('xdataexpr', 'x');
model.result('pg7').feature('lngr1').selection.geom('geom1', 1);
model.result('pg7').feature('lngr1').selection.set([1 2 3 4 5 6 7]);
model.result('pg7').feature('lngr1').set('expr', {'fc.p'});
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').set('data', 'dset3');
model.result('pg8').label('Water Activity (Relative Humidity) (fc)');
model.result('pg8').create('lngr1', 'LineGraph');
model.result('pg8').feature('lngr1').set('xdata', 'expr');
model.result('pg8').feature('lngr1').set('xdataexpr', 'x');
model.result('pg8').feature('lngr1').selection.geom('geom1', 1);
model.result('pg8').feature('lngr1').selection.set([1 2 3 4 5 6 7]);
model.result('pg8').feature('lngr1').set('expr', {'fc.aw'});
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').label('Temperature (ht)');
model.result('pg9').set('data', 'dset3');
model.result('pg9').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg9').set('data', 'dset3');
model.result('pg9').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond1/pg1');
model.result('pg9').feature.create('lngr1', 'LineGraph');
model.result('pg9').feature('lngr1').set('expr', 'T');
model.result('pg9').feature('lngr1').set('xdata', 'expr');
model.result('pg9').feature('lngr1').set('xdataexpr', 'x');
model.result('pg9').feature('lngr1').set('data', 'parent');
model.result('pg9').feature('lngr1').selection.geom('geom1', 1);
model.result('pg9').feature('lngr1').selection.set([1 2 3 4 5 6 7]);
model.result('pg1').run;
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('Polarization Plots');
model.result('pg10').set('data', 'dset3');
model.result('pg10').create('ptgr1', 'PointGraph');
model.result('pg10').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg10').feature('ptgr1').set('linewidth', 'preference');
model.result('pg10').feature('ptgr1').selection.set([8]);
model.result('pg10').feature('ptgr1').set('expr', 'fc.phis');
model.result('pg10').feature('ptgr1').set('descr', 'Electric potential');
model.result('pg10').feature('ptgr1').set('xdata', 'expr');
model.result('pg10').feature('ptgr1').set('xdataexpr', 'fc.nIs');
model.result('pg10').feature('ptgr1').set('xdatadescr', 'Normal electrode current density');
model.result('pg10').feature('ptgr1').set('legend', true);
model.result('pg10').feature('ptgr1').set('autopoint', false);
model.result('pg10').feature('ptgr1').create('filt1', 'PointGraphFilter');
model.result('pg10').run;
model.result('pg10').feature('ptgr1').feature('filt1').set('expr', 'fc.nIs>0');
model.result('pg10').run;
model.result('pg8').run;
model.result('pg8').setIndex('looplevelinput', 'last', 0);
model.result('pg8').run;
model.result('pg8').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Ionomer Conductivity');
model.result('pg11').set('data', 'dset3');
model.result('pg11').setIndex('looplevelinput', 'last', 0);
model.result('pg11').create('lngr1', 'LineGraph');
model.result('pg11').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg11').feature('lngr1').set('linewidth', 'preference');
model.result('pg11').feature('lngr1').selection.all;
model.result('pg11').feature('lngr1').set('expr', 'fc.sigmalxx');
model.result('pg11').feature('lngr1').set('descr', 'Electrolyte conductivity, xx-component');
model.result('pg11').feature('lngr1').set('xdata', 'expr');
model.result('pg11').feature('lngr1').set('xdataexpr', 'x');
model.result('pg11').feature('lngr1').set('legend', true);
model.result('pg11').run;
model.result('pg10').run;
model.result('pg10').feature('ptgr1').set('legendmethod', 'evaluated');
model.result('pg10').feature('ptgr1').set('legendpattern', 'RH<sub>an</sub>=eval(RH_an), RH<sub>cath</sub>=eval(RH_cath)');
model.result('pg10').run;
model.result('pg8').run;
model.result('pg8').feature('lngr1').set('legend', true);
model.result('pg8').feature('lngr1').set('legendmethod', 'evaluated');
model.result('pg8').feature('lngr1').set('legendpattern', 'RH<sub>an</sub>=eval(RH_an), RH<sub>cath</sub>=eval(RH_cath)');
model.result('pg8').run;
model.result('pg8').set('legendpos', 'middleleft');
model.result('pg8').run;
model.result('pg11').run;
model.result('pg11').feature('lngr1').set('legendmethod', 'evaluated');
model.result('pg11').feature('lngr1').set('legendpattern', 'RH<sub>an</sub>=eval(RH_an), RH<sub>cath</sub>=eval(RH_cath)');
model.result('pg11').run;
model.result('pg11').set('legendpos', 'lowermiddle');
model.result('pg11').run;
model.result('pg9').run;
model.result('pg9').setIndex('looplevelinput', 'last', 0);
model.result('pg9').set('legendpos', 'lowermiddle');
model.result('pg9').run;
model.result('pg9').feature('lngr1').set('unit', 'degC');
model.result('pg9').feature('lngr1').set('legend', true);
model.result('pg9').feature('lngr1').set('legendmethod', 'evaluated');
model.result('pg9').feature('lngr1').set('legendpattern', 'RH<sub>an</sub>=eval(RH_an), RH<sub>cath</sub>=eval(RH_cath)');
model.result('pg9').run;

model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').createPlot('pg12');

model.result('pg12').run;
model.result('pg12').set('xlabelactive', true);
model.result('pg12').set('ylabelactive', true);
model.result('pg12').set('title', 'Water uptake');
model.result('pg12').set('xlabel', 'a<sub>w</sub> (1)');
model.result('pg12').set('ylabel', '\lambda) (1)');
model.result('pg12').run;
model.result.remove('pg12');

model.title('Transport Phenomena in a Polymer Electrolyte Fuel Cell Membrane-Electrode Assembly');

model.description('This tutorial models how the relative humidity of the inlet gases impacts the performance of a low-temperature polymer electrolyte membrane-electrode assembly. The model includes humidity-dependent ionomer (electrolyte) conductivities, gas-phase mass transport, water ionomer transport and heat transfer. Hydrogen cross-diffusion over the ionomer membrane is also included in the model.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;

model.label('pem_mea_1d.mph');

model.modelNode.label('Components');

out = model;
