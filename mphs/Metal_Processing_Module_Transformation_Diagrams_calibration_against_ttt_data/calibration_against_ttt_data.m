function out = model
%
% calibration_against_ttt_data.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Metal_Processing_Module/Transformation_Diagrams');

model.modelNode.create('comp1', true);

model.physics.create('metp', 'GlobalMetalPhaseTransformation');
model.physics('metp').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/metp', true);

model.param.set('xieq', '1');
model.param.descr('xieq', 'Equilibrium phase fraction');
model.param.set('tau', '1[s]');
model.param.descr('tau', 'Time constant');
model.param.set('n', '3');
model.param.descr('n', 'Avrami exponent');
model.param.set('Tsw', '1[K]');
model.param.descr('Tsw', 'Temperature sweep parameter');
model.param.set('T', '1[K]');
model.param.descr('T', 'Temperature');

model.physics('metp').feature('phase2').set('computetimes', true);
model.physics('metp').feature('phase2').setIndex('xitarget', 0.5, 1, 0);
model.physics('metp').feature('phase2').setIndex('xitarget', 0.01, 2, 0);
model.physics('metp').feature('phase2').setIndex('xitarget', 0.01, 2, 0);
model.physics('metp').feature('phase2').setIndex('xitarget', 0.9, 2, 0);
model.physics('metp').feature('ptran1').set('ptModel', 'JMAK');
model.physics('metp').feature('ptran1').set('xieqjmak', 'xieq');
model.physics('metp').feature('ptran1').set('taujmak', 'tau');
model.physics('metp').feature('ptran1').set('njmak', 'n');

model.common.create('glso1', 'GlobalLeastSquaresObjective', 'comp1');
model.common('glso1').set('filename', 'calibration_against_ttt_data_ttt001.txt');
model.common('glso1').importData;
model.common('glso1').setEntry('columnType', 'col1', 'param');
model.common('glso1').setEntry('parameterName', 'col1', 'T');
model.common('glso1').setEntry('parameterUnit', 'col1', 'K');
model.common('glso1').setEntry('columnType', 'col2', 'time');
model.common('glso1').setEntry('modelExpression', 'col3', 'metp.phase2.xi');
model.common('glso1').setEntry('variableName', 'col3', 'col3a');
model.common('glso1').setEntry('scaleMethod', 'col3', 'manual');
model.common('glso1').setEntry('scaleValue', 'col3', '0.01');
model.common.duplicate('glso2', 'glso1');
model.common('glso2').discardData;
model.common('glso2').set('filename', 'calibration_against_ttt_data_ttt050.txt');
model.common('glso2').importData;
model.common('glso2').setEntry('variableName', 'col3', 'col3b');
model.common('glso2').setEntry('scaleValue', 'col3', '0.5');
model.common.duplicate('glso3', 'glso2');
model.common('glso3').discardData;
model.common('glso3').set('filename', 'calibration_against_ttt_data_ttt090.txt');
model.common('glso3').importData;
model.common('glso3').setEntry('variableName', 'col3', 'col3c');
model.common('glso3').setEntry('scaleValue', 'col3', '0.9');

model.study('std1').feature('time').set('tlist', 'range(0,50,28000)');
model.study('std1').feature('time').set('usertol', true);
model.study('std1').feature('time').set('rtol', 0.001);
model.study('std1').feature('time').set('useparam', true);
model.study('std1').feature('time').setIndex('pname', 'xieq', 0);
model.study('std1').feature('time').setIndex('plistarr', '', 0);
model.study('std1').feature('time').setIndex('punit', '', 0);
model.study('std1').feature('time').setIndex('pname', 'xieq', 0);
model.study('std1').feature('time').setIndex('plistarr', '', 0);
model.study('std1').feature('time').setIndex('punit', '', 0);
model.study('std1').feature('time').setIndex('pname', 'T', 0);
model.study('std1').feature('time').setIndex('plistarr', 'Tsw', 0);
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'xieq', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'xieq', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'Tsw', 0);
model.study('std1').feature('param').setIndex('plistarr', '853 893 933 973 1013 1053', 0);
model.study('std1').create('lsqo', 'LSQOptimization');
model.study('std1').feature('lsqo').set('source', 'none');
model.study('std1').feature('lsqo').setIndex('pname', 'xieq', 0);
model.study('std1').feature('lsqo').setIndex('initval', 1, 0);
model.study('std1').feature('lsqo').setIndex('scale', 1, 0);
model.study('std1').feature('lsqo').setIndex('lbound', '', 0);
model.study('std1').feature('lsqo').setIndex('ubound', '', 0);
model.study('std1').feature('lsqo').setIndex('pname', 'xieq', 0);
model.study('std1').feature('lsqo').setIndex('initval', 1, 0);
model.study('std1').feature('lsqo').setIndex('scale', 1, 0);
model.study('std1').feature('lsqo').setIndex('lbound', '', 0);
model.study('std1').feature('lsqo').setIndex('ubound', '', 0);
model.study('std1').feature('lsqo').setIndex('pname', 'tau', 0);
model.study('std1').feature('lsqo').setIndex('initval', '2000[s]', 0);
model.study('std1').feature('lsqo').setIndex('scale', 1000, 0);
model.study('std1').feature('lsqo').setIndex('lbound', '700[s]', 0);
model.study('std1').feature('lsqo').setIndex('ubound', '28000[s]', 0);
model.study('std1').feature('lsqo').set('lsqdatamethod', 'manual');
model.study('std1').feature('lsqo').set('opttol', '0.0001');

model.sol.create('sol1');
model.sol('sol1').study('std1');

model.study('std1').feature('lsqo').set('lsqmessage', {'Explicit_parameter_sweep_merged_with_parameter_variation_from_LSQ_objective'});

model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,50,28000)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').create('tp1', 'TimeParametric');
model.sol('sol1').feature('t1').feature.remove('tpDef');
model.sol('sol1').feature('t1').feature('tp1').set('control', 'time');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('tp1').set('plistarrlsq', {'853.0, 893.0, 933.0, 973.0, 1013.0, 1053.0'});
model.sol('sol1').feature('t1').feature('tp1').set('lsqparamsout', ['         T' newline '       853' newline '       893' newline '       933' newline '       973' newline '  1.01e+03' newline '  1.05e+03' newline ]);
model.sol('sol1').feature('t1').feature('tp1').set('pnamelsq', {'T'});
model.sol('sol1').feature('t1').set('tlistlsq', [860 990 1020 1530 2000 24000 0 0 0 0 0; 860 990 1020 1530 2000 24000 0 0 0 0 0; 860 990 1020 1530 2000 24000 0 0 0 0 0; 860 990 1020 1530 2000 24000 0 0 0 0 0; 860 990 1020 1530 2000 24000 0 0 0 0 0; 860 990 1020 1530 2000 24000 0 0 0 0 0; 180 210 320 420 620 710 735 1100 1450 5000 17000; 180 210 320 420 620 710 735 1100 1450 5000 17000; 180 210 320 420 620 710 735 1100 1450 5000 17000; 180 210 320 420 620 710 735 1100 1450 5000 17000; 180 210 320 420 620 710 735 1100 1450 5000 17000; 180 210 320 420 620 710 735 1100 1450 5000 17000]);
model.sol('sol1').feature('t1').set('lsqtimesout', ['       180' newline '       210' newline '       320' newline '       420' newline '       620' newline '       710' newline '       735' newline '       860' newline '       990' newline '  1.02e+03' newline '  1.10e+03' newline '  1.45e+03' newline '  1.53e+03' newline '  2.00e+03' newline '  5.00e+03' newline '  1.70e+04' newline '  2.40e+04' newline ]);
model.sol('sol1').feature('t1').set('tout', 'tlist');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('o1', 'Optimization');
model.batch('o1').study('std1');
model.batch('p1').study('std1');
model.batch('o1').attach('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').attach('std1');
model.batch('p1').set('optimization', 'o1');
model.batch('p1').set('err', 'on');
model.batch('p1').set('control', 'lsqo');
model.batch('o1').set('parametricjobs', {'p1'});
model.batch.create('p2', 'Parametric');
model.batch('p2').study('std1');
model.batch('p2').create('jo1', 'Jobseq');
model.batch('p2').feature('jo1').set('seq', 'o1');
model.batch('p2').set('pname', {'Tsw'});
model.batch('p2').set('plistarr', {'853 893 933 973 1013 1053'});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std1');
model.batch('p2').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p2').run('compute');

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').set('data', 'dset2');
model.result('pg1').create('glob1', 'Global');
model.result('pg1').feature('glob1').set('unit', {'' ''});
model.result('pg1').feature('glob1').set('expr', {'metp.phase1.xi' 'metp.phase2.xi'});
model.result('pg1').feature('glob1').set('descr', {'Phase fraction' 'Phase fraction'});
model.result('pg1').label('Phase Composition (metp)');
model.result('pg1').feature('glob1').set('descr', {'Metallurgical Phase 1' 'Metallurgical Phase 2'});
model.result('pg1').feature('glob1').set('title', 'Phase composition');
model.result('pg1').set('twoyaxes', true);
model.result('pg1').set('legendlayout', 'outside');
model.result('pg1').create('glob2', 'Global');
model.result('pg1').feature('glob2').set('plotonsecyaxis', true);
model.result('pg1').feature('glob2').setIndex('expr', 'metp.T', 0);
model.result('pg1').feature('glob2').set('linestyle', 'dotted');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset2');
model.result('pg2').label('Transformation Diagram (metp)');
model.result('pg2').set('innerinput', 'last');
model.result('pg2').set('xlog', true);
model.result('pg2').set('legendpos', 'lowerright');
model.result('pg2').set('xlabel', 'Time');
model.result('pg2').set('ylabel', 'Temperature');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('expr', {'metp.phase2.temperature_1'});
model.result('pg2').feature('glob1').set('titletype', 'none');
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').feature('glob1').set('xdataexpr', 'metp.phase2.time_1');
model.result('pg2').feature('glob1').set('legendmethod', 'manual');
model.result('pg2').feature('glob1').setIndex('legends', 'Metallurgical Phase 2 0.01', 0);
model.result('pg2').feature('glob1').set('linemarker', 'cycle');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'all');
model.result('pg2').create('glob2', 'Global');
model.result('pg2').feature('glob2').set('expr', {'metp.phase2.temperature_2'});
model.result('pg2').feature('glob2').set('titletype', 'none');
model.result('pg2').feature('glob2').set('xdata', 'expr');
model.result('pg2').feature('glob2').set('xdataexpr', 'metp.phase2.time_2');
model.result('pg2').feature('glob2').set('legendmethod', 'manual');
model.result('pg2').feature('glob2').setIndex('legends', 'Metallurgical Phase 2 0.5', 0);
model.result('pg2').feature('glob2').set('linemarker', 'cycle');
model.result('pg2').feature('glob2').set('markerpos', 'datapoints');
model.result('pg2').feature('glob2').set('xdatasolnumtype', 'all');
model.result('pg2').create('glob3', 'Global');
model.result('pg2').feature('glob3').set('expr', {'metp.phase2.temperature_3'});
model.result('pg2').feature('glob3').set('titletype', 'none');
model.result('pg2').feature('glob3').set('xdata', 'expr');
model.result('pg2').feature('glob3').set('xdataexpr', 'metp.phase2.time_3');
model.result('pg2').feature('glob3').set('legendmethod', 'manual');
model.result('pg2').feature('glob3').setIndex('legends', 'Metallurgical Phase 2 0.9', 0);
model.result('pg2').feature('glob3').set('linemarker', 'cycle');
model.result('pg2').feature('glob3').set('markerpos', 'datapoints');
model.result('pg2').feature('glob3').set('xdatasolnumtype', 'all');
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').label('Parameter estimation');
model.result('pg3').set('data', 'dset2');
model.result('pg3').set('xlabelactive', true);
model.result('pg3').set('xlabel', 'Temperature');
model.result('pg3').set('titletype', 'none');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').label('Column 3 (model)');
model.result('pg3').feature('glob1').set('expr', {'glso1.col3a.model'});
model.result('pg3').feature('glob1').set('descr', {'Column 3 (model)'});
model.result('pg3').feature('glob1').set('xdata', 'expr');
model.result('pg3').feature('glob1').set('xdataexpr', 'T');
model.result('pg3').create('glob2', 'Global');
model.result('pg3').feature('glob2').label('Column 3 (data)');
model.result('pg3').feature('glob2').set('expr', {'glso1.col3a.data'});
model.result('pg3').feature('glob2').set('descr', {'Column 3 (data)'});
model.result('pg3').feature('glob2').set('xdata', 'expr');
model.result('pg3').feature('glob2').set('xdataexpr', 'T');
model.result('pg3').feature('glob2').set('linestyle', 'none');
model.result('pg3').feature('glob2').set('linemarker', 'point');
model.result('pg3').feature('glob2').set('markerpos', 'datapoints');
model.result('pg3').feature('glob2').set('linecolor', 'cyclereset');
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').label('Parameter estimation 1');
model.result('pg4').set('data', 'dset2');
model.result('pg4').set('xlabelactive', true);
model.result('pg4').set('xlabel', 'Temperature');
model.result('pg4').set('titletype', 'none');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').label('Column 3 (model)');
model.result('pg4').feature('glob1').set('expr', {'glso2.col3b.model'});
model.result('pg4').feature('glob1').set('descr', {'Column 3 (model)'});
model.result('pg4').feature('glob1').set('xdata', 'expr');
model.result('pg4').feature('glob1').set('xdataexpr', 'T');
model.result('pg4').create('glob2', 'Global');
model.result('pg4').feature('glob2').label('Column 3 (data)');
model.result('pg4').feature('glob2').set('expr', {'glso2.col3b.data'});
model.result('pg4').feature('glob2').set('descr', {'Column 3 (data)'});
model.result('pg4').feature('glob2').set('xdata', 'expr');
model.result('pg4').feature('glob2').set('xdataexpr', 'T');
model.result('pg4').feature('glob2').set('linestyle', 'none');
model.result('pg4').feature('glob2').set('linemarker', 'point');
model.result('pg4').feature('glob2').set('markerpos', 'datapoints');
model.result('pg4').feature('glob2').set('linecolor', 'cyclereset');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').label('Parameter estimation 2');
model.result('pg5').set('data', 'dset2');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'Temperature');
model.result('pg5').set('titletype', 'none');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').label('Column 3 (model)');
model.result('pg5').feature('glob1').set('expr', {'glso3.col3c.model'});
model.result('pg5').feature('glob1').set('descr', {'Column 3 (model)'});
model.result('pg5').feature('glob1').set('xdata', 'expr');
model.result('pg5').feature('glob1').set('xdataexpr', 'T');
model.result('pg5').create('glob2', 'Global');
model.result('pg5').feature('glob2').label('Column 3 (data)');
model.result('pg5').feature('glob2').set('expr', {'glso3.col3c.data'});
model.result('pg5').feature('glob2').set('descr', {'Column 3 (data)'});
model.result('pg5').feature('glob2').set('xdata', 'expr');
model.result('pg5').feature('glob2').set('xdataexpr', 'T');
model.result('pg5').feature('glob2').set('linestyle', 'none');
model.result('pg5').feature('glob2').set('linemarker', 'point');
model.result('pg5').feature('glob2').set('markerpos', 'datapoints');
model.result('pg5').feature('glob2').set('linecolor', 'cyclereset');
model.result('pg1').run;

model.study('std1').feature('lsqo').set('probewindow', '');

model.result.remove('pg1');
model.result.remove('pg2');
model.result.remove('pg3');
model.result.remove('pg4');
model.result.remove('pg5');
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').set('data', 'dset2');
model.result.evaluationGroup('eg1').set('innerinput', 'last');
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'tau', 0);
model.result.evaluationGroup('eg1').run;
model.result.export.create('tbl1', 'Table');
model.result.export('tbl1').set('source', 'evaluationgroup');
model.result.export('tbl1').set('filename', 'calibration_against_ttt_data_tau_calib.txt');

model.func.create('int1', 'Interpolation');
model.func('int1').model('comp1');
model.func('int1').set('source', 'file');
model.func('int1').set('filename', 'calibration_against_ttt_data_tau_calib.txt');
model.func('int1').set('nargs', 1);
model.func('int1').setIndex('funcs', 'tau_calib', 0, 0);
model.func('int1').setIndex('funcs', 4, 0, 1);
model.func('int1').set('interp', 'piecewisecubic');
model.func('int1').set('extrap', 'linear');
model.func('int1').setIndex('argunit', 'K', 0);
model.func('int1').setIndex('fununit', 's', 0);

model.physics.create('metp2', 'GlobalMetalPhaseTransformation');
model.physics('metp2').model('comp1');

model.study('std1').feature('time').setSolveFor('/physics/metp2', true);

model.physics('metp2').feature('phase2').set('computetimes', true);
model.physics('metp2').feature('phase2').setIndex('xitarget', 0.5, 1, 0);
model.physics('metp2').feature('phase2').setIndex('xitarget', 0.01, 2, 0);
model.physics('metp2').feature('phase2').setIndex('xitarget', 0.01, 2, 0);
model.physics('metp2').feature('phase2').setIndex('xitarget', 0.9, 2, 0);
model.physics('metp2').prop('Temperature').set('T', 'T');
model.physics('metp2').feature('ptran1').set('ptModel', 'JMAK');
model.physics('metp2').feature('ptran1').set('xieqjmak', 'xieq');
model.physics('metp2').feature('ptran1').set('taujmak', 'tau_calib(metp2.T)');
model.physics('metp2').feature('ptran1').set('njmak', 'n');

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/metp', true);
model.study('std2').feature('time').setSolveFor('/physics/metp2', true);
model.study('std1').feature('time').setEntry('activate', 'metp2', false);
model.study('std2').feature('time').set('tlist', 'range(0,25,28000)');
model.study('std2').feature('time').set('usertol', true);
model.study('std2').feature('time').set('rtol', 0.001);
model.study('std2').feature('time').setEntry('activate', 'metp', false);
model.study('std2').feature('time').set('useparam', true);
model.study('std2').feature('time').setIndex('pname', 'xieq', 0);
model.study('std2').feature('time').setIndex('plistarr', '', 0);
model.study('std2').feature('time').setIndex('punit', '', 0);
model.study('std2').feature('time').setIndex('pname', 'xieq', 0);
model.study('std2').feature('time').setIndex('plistarr', '', 0);
model.study('std2').feature('time').setIndex('punit', '', 0);
model.study('std2').feature('time').setIndex('pname', 'T', 0);
model.study('std2').feature('time').setIndex('plistarr', 'range(853,10,1053)', 0);

model.sol.create('sol9');
model.sol('sol9').study('std2');
model.sol('sol9').create('st1', 'StudyStep');
model.sol('sol9').feature('st1').set('study', 'std2');
model.sol('sol9').feature('st1').set('studystep', 'time');
model.sol('sol9').create('v1', 'Variables');
model.sol('sol9').feature('v1').set('control', 'time');
model.sol('sol9').create('t1', 'Time');
model.sol('sol9').feature('t1').set('tlist', 'range(0,25,28000)');
model.sol('sol9').feature('t1').set('plot', 'off');
model.sol('sol9').feature('t1').set('plotgroup', 'Default');
model.sol('sol9').feature('t1').set('plotfreq', 'tout');
model.sol('sol9').feature('t1').set('probesel', 'all');
model.sol('sol9').feature('t1').set('probes', {});
model.sol('sol9').feature('t1').set('probefreq', 'tsteps');
model.sol('sol9').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol9').feature('t1').set('endtimeinterpolation', true);
model.sol('sol9').feature('t1').create('tp1', 'TimeParametric');
model.sol('sol9').feature('t1').feature.remove('tpDef');
model.sol('sol9').feature('t1').feature('tp1').set('control', 'time');
model.sol('sol9').feature('t1').set('control', 'time');
model.sol('sol9').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol9').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol9').feature('t1').feature.remove('fcDef');
model.sol('sol9').attach('std2');
model.sol('sol9').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').set('data', 'dset3');
model.result('pg1').create('glob1', 'Global');
model.result('pg1').feature('glob1').set('unit', {'' ''});
model.result('pg1').feature('glob1').set('expr', {'metp2.phase1.xi' 'metp2.phase2.xi'});
model.result('pg1').feature('glob1').set('descr', {'Phase fraction' 'Phase fraction'});
model.result('pg1').label('Phase Composition (metp2)');
model.result('pg1').feature('glob1').set('descr', {'Metallurgical Phase 1' 'Metallurgical Phase 2'});
model.result('pg1').feature('glob1').set('title', 'Phase composition');
model.result('pg1').set('twoyaxes', true);
model.result('pg1').set('legendlayout', 'outside');
model.result('pg1').create('glob2', 'Global');
model.result('pg1').feature('glob2').set('plotonsecyaxis', true);
model.result('pg1').feature('glob2').setIndex('expr', 'metp2.T', 0);
model.result('pg1').feature('glob2').set('linestyle', 'dotted');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset3');
model.result('pg2').label('Transformation Diagram (metp2)');
model.result('pg2').set('innerinput', 'last');
model.result('pg2').set('xlog', true);
model.result('pg2').set('legendpos', 'lowerright');
model.result('pg2').set('xlabel', 'Time');
model.result('pg2').set('ylabel', 'Temperature');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('expr', {'metp2.phase2.temperature_1'});
model.result('pg2').feature('glob1').set('titletype', 'none');
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').feature('glob1').set('xdataexpr', 'metp2.phase2.time_1');
model.result('pg2').feature('glob1').set('legendmethod', 'manual');
model.result('pg2').feature('glob1').setIndex('legends', 'Metallurgical Phase 2 0.01', 0);
model.result('pg2').feature('glob1').set('linemarker', 'cycle');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'all');
model.result('pg2').create('glob2', 'Global');
model.result('pg2').feature('glob2').set('expr', {'metp2.phase2.temperature_2'});
model.result('pg2').feature('glob2').set('titletype', 'none');
model.result('pg2').feature('glob2').set('xdata', 'expr');
model.result('pg2').feature('glob2').set('xdataexpr', 'metp2.phase2.time_2');
model.result('pg2').feature('glob2').set('legendmethod', 'manual');
model.result('pg2').feature('glob2').setIndex('legends', 'Metallurgical Phase 2 0.5', 0);
model.result('pg2').feature('glob2').set('linemarker', 'cycle');
model.result('pg2').feature('glob2').set('markerpos', 'datapoints');
model.result('pg2').feature('glob2').set('xdatasolnumtype', 'all');
model.result('pg2').create('glob3', 'Global');
model.result('pg2').feature('glob3').set('expr', {'metp2.phase2.temperature_3'});
model.result('pg2').feature('glob3').set('titletype', 'none');
model.result('pg2').feature('glob3').set('xdata', 'expr');
model.result('pg2').feature('glob3').set('xdataexpr', 'metp2.phase2.time_3');
model.result('pg2').feature('glob3').set('legendmethod', 'manual');
model.result('pg2').feature('glob3').setIndex('legends', 'Metallurgical Phase 2 0.9', 0);
model.result('pg2').feature('glob3').set('linemarker', 'cycle');
model.result('pg2').feature('glob3').set('markerpos', 'datapoints');
model.result('pg2').feature('glob3').set('xdatasolnumtype', 'all');
model.result('pg1').run;
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').label('Experiment (1%)');
model.result.table('tbl3').importData('calibration_against_ttt_data_ttt001.txt');
model.result.table.create('tbl4', 'Table');
model.result.table('tbl4').label('Experiment (50%)');
model.result.table('tbl4').importData('calibration_against_ttt_data_ttt050.txt');
model.result.table.create('tbl5', 'Table');
model.result.table('tbl5').label('Experiment (90%)');
model.result.table('tbl5').importData('calibration_against_ttt_data_ttt090.txt');
model.result('pg2').run;
model.result('pg2').setIndex('looplevelinput', 'all', 1);
model.result('pg2').set('xlabel', 'Time (s)');
model.result('pg2').set('ylabel', 'Temperature (degC)');
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'TTT diagram for 1%, 50% and 90% transformation');
model.result('pg2').create('tblp1', 'Table');
model.result('pg2').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg2').feature('tblp1').set('linewidth', 'preference');
model.result('pg2').feature('tblp1').set('table', 'tbl3');
model.result('pg2').feature('tblp1').set('xaxisdata', 2);
model.result('pg2').feature('tblp1').set('plotcolumninput', 'manual');
model.result('pg2').feature('tblp1').set('plotcolumns', [1]);
model.result('pg2').feature('tblp1').set('linestyle', 'none');
model.result('pg2').feature('tblp1').set('linemarker', 'cycle');
model.result('pg2').feature('tblp1').set('legend', true);
model.result('pg2').feature('tblp1').set('legendmethod', 'manual');
model.result('pg2').feature('tblp1').setIndex('legends', '1% (experimental)', 0);
model.result('pg2').feature.duplicate('tblp2', 'tblp1');
model.result('pg2').run;
model.result('pg2').feature('tblp2').set('table', 'tbl4');
model.result('pg2').feature('tblp2').setIndex('legends', '50% (experimental)', 0);
model.result('pg2').feature.duplicate('tblp3', 'tblp2');
model.result('pg2').run;
model.result('pg2').feature('tblp3').set('table', 'tbl5');
model.result('pg2').feature('tblp3').setIndex('legends', '90% (experimental)', 0);
model.result('pg2').run;

model.title('Calibration Against TTT Data');

model.description('This model shows how to use the Metal Processing Module and the Optimization Module to calibrate parameters of a phase transformation model against TTT (Time Temperature Transformation) data.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;

model.label('calibration_against_ttt_data.mph');

model.modelNode.label('Components');

out = model;
