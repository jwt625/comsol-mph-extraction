function out = model
%
% dot_in_well_solar_cell.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Semiconductor_Module/Photonic_Devices_and_Sensors');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 1);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('semi', 'Semiconductor', 'geom1');
model.physics('semi').model('comp1');

model.study.create('std1');
model.study('std1').create('semie', 'SemiconductorEquilibrium');
model.study('std1').feature('semie').set('solnum', 'auto');
model.study('std1').feature('semie').set('notsolnum', 'auto');
model.study('std1').feature('semie').set('outputmap', {});
model.study('std1').feature('semie').set('ngenAUX', '1');
model.study('std1').feature('semie').set('goalngenAUX', '1');
model.study('std1').feature('semie').set('ngenAUX', '1');
model.study('std1').feature('semie').set('goalngenAUX', '1');
model.study('std1').feature('semie').setSolveFor('/physics/semi', true);

model.geom('geom1').lengthUnit('nm');

model.param.label('Parameters 1 - Geometry & QW, QD');
model.param('default').setShowInParamSel(false);
model.param.set('area', '1[cm^2]');
model.param.descr('area', 'Cross-section area');
model.param.set('t_well', '16[nm]');
model.param.descr('t_well', 'Thickness of QW');
model.param.set('t_dot', '4[nm]');
model.param.descr('t_dot', 'Effective thickness of QD');
model.param.set('t_unit', 't_well+50[nm]');
model.param.descr('t_unit', 'Thickness of repeating unit');
model.param.set('tau_welltodot', '0.3[ns]');
model.param.descr('tau_welltodot', 'Lifetime of transition from QW to QD');
model.param.set('alpha_well', '7000[cm^-1]');
model.param.descr('alpha_well', 'Absorption coefficient of QW');
model.param.set('alpha_dot', '1000[cm^-1]');
model.param.descr('alpha_dot', 'Absorption coefficient of QD');
model.param.set('N_dot', '2e10[cm^-2]/t_well');
model.param.descr('N_dot', 'Effective density of QD states');
model.param.set('N_well', 'N_dot*10');
model.param.descr('N_well', 'Guessed density of QW states');
model.param.set('tau_thermal', '50[ms]');
model.param.descr('tau_thermal', 'Lifetime of thermal excitation from QW to conduction band');
model.param.set('tau_dot', '1[ms]');
model.param.descr('tau_dot', 'Lifetime of transition from QD to valence band');
model.param.set('tau_well', '10[ns]');
model.param.descr('tau_well', 'Guessed lifetime of transition from QW to valence band');
model.param.set('T0', '300[K]');
model.param.descr('T0', 'Temperature');
model.param.set('Vth', 'k_B_const*T0/e_const');
model.param.descr('Vth', 'Thermal voltage');
model.param.set('gD', '1');
model.param.descr('gD', 'Degeneracy factor');
model.param.set('DeltaE_well', '220[mV]');
model.param.descr('DeltaE_well', 'Effective QW level from conduction band edge');
model.param.set('DeltaE_dot', '600[mV]+DeltaE_well');
model.param.descr('DeltaE_dot', 'Effective QD level from conduction band edge');
model.param.set('gamma', '1/tau_thermal*gD*exp(DeltaE_well/Vth)');
model.param.descr('gamma', 'Guessed transition rate from conduction band to QW');
model.param.create('par2');
model.param('par2').label('Parameters 2 - Swept');
model.param('par2').set('V0', '0[V]');
model.param('par2').descr('V0', 'Bias voltage');
model.param('par2').set('P0_780', '0[mW/cm^2]');
model.param('par2').descr('P0_780', 'Input power of 780 nm light');
model.param('par2').set('P0_1300', '0[mW/cm^2]');
model.param('par2').descr('P0_1300', 'Input power of 1300 nm light');
model.param.create('par3');
model.param('par3').label('Parameters 3 - Optical');
model.param('par3').setShowInParamSel(false);
model.param('par3').set('alpha_780', 'exp(-alpha_well*t_well)');
model.param('par3').descr('alpha_780', 'Fraction of 780 nm light remaining after absorption by one QW');
model.param('par3').set('hv_780', 'h_const*c_const/780[nm]');
model.param('par3').descr('hv_780', 'Energy of a 780 nm photon');
model.param('par3').set('P1_780', 'P0_780/hv_780*(1-0.33)');
model.param('par3').descr('P1_780', '780nm photon flux entering the first QW after 33% of surface reflection');
model.param('par3').set('P2_780', 'P1_780*alpha_780');
model.param('par3').descr('P2_780', '780nm photon flux entering the 2nd QW after absorption by the 1st QW');
model.param('par3').set('G1_780', 'P1_780*(1-alpha_780)/t_well');
model.param('par3').descr('G1_780', 'Generation rate in the 1st QW due to 780 nm light');
model.param('par3').set('G2_780', 'P2_780*(1-alpha_780)/t_well');
model.param('par3').descr('G2_780', 'Generation rate in the 2nd QW due to 780 nm light');
model.param('par3').set('hv_1300', 'h_const*c_const/1300[nm]');
model.param('par3').descr('hv_1300', 'Energy of a 1300 nm photon');
model.param('par3').set('P1_1300', 'P0_1300/hv_1300*(1-0.298)');
model.param('par3').descr('P1_1300', '1300 nm photon flux entering the first QD layer after 29.8% of surface reflection');

model.geom('geom1').create('i1', 'Interval');
model.geom('geom1').feature('i1').label('Interval 1 - Top');
model.geom('geom1').feature('i1').set('specify', 'len');
model.geom('geom1').feature('i1').set('left', '-150-540');
model.geom('geom1').feature('i1').setIndex('len', 150, 0);
model.geom('geom1').feature('i1').setIndex('len', 540, 1);
model.geom('geom1').run('i1');
model.geom('geom1').create('i2', 'Interval');
model.geom('geom1').feature('i2').label('Interval 2 - 1st unit');
model.geom('geom1').feature('i2').setIndex('coord', 't_well', 1);
model.geom('geom1').feature('i2').setIndex('coord', 't_unit', 2);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('1st unit');
model.geom('geom1').feature('i2').set('contributeto', 'csel1');
model.geom('geom1').run('i2');
model.geom('geom1').create('arr1', 'Array');
model.geom('geom1').feature('arr1').label('Array 1 - all units');
model.geom('geom1').feature('arr1').selection('input').named('csel1');
model.geom('geom1').feature('arr1').set('size', 2);
model.geom('geom1').feature('arr1').set('displ', {'t_unit'});
model.geom('geom1').run('arr1');
model.geom('geom1').create('i3', 'Interval');
model.geom('geom1').feature('i3').label('Interval 3 - Bottom');
model.geom('geom1').feature('i3').set('specify', 'len');
model.geom('geom1').feature('i3').set('left', '2*t_unit');
model.geom('geom1').feature('i3').setIndex('len', 200, 0);
model.geom('geom1').feature('i3').setIndex('len', 700, 1);
model.geom('geom1').runPre('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('SemicondMaterial', 'Semiconductor material');
model.material('mat1').label('Al(x)Ga(1-x)As - Aluminium Gallium Arsenide');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'12.9-2.84*def.x' '0' '0' '0' '12.9-2.84*def.x' '0' '0' '0' '12.9-2.84*def.x'});
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'(55-212*def.x+248*def.x^2)[W/(m*K)]' '0' '0' '0' '(55-212*def.x+248*def.x^2)[W/(m*K)]' '0' '0' '0' '(55-212*def.x+248*def.x^2)[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('density', '(5320-1560*def.x)[kg/m^3]');
model.material('mat1').propertyGroup('def').set('heatcapacity', '(330-120*def.x)[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('x', '0.2');
model.material('mat1').propertyGroup('def').descr('x', '');
model.material('mat1').propertyGroup('SemicondMaterial').set('Eg0', 'if(def.x<0.45,(1.424+1.247*def.x),(1.9+0.125*def.x+0.143*def.x^2))[V]');
model.material('mat1').propertyGroup('SemicondMaterial').set('chi0', 'if(def.x<0.45,(4.07-1.1*def.x),(3.64-0.14*def.x))[V]');
model.material('mat1').propertyGroup('SemicondMaterial').set('Nv', '(T/1[K])^(3/2)*(0.51+0.25*def.x)^(3/2)*4.82e15[1/cm^3]');
model.material('mat1').propertyGroup('SemicondMaterial').set('Nc', 'if(def.x<0.45,((T/1[K])^(3/2)*(0.063+0.083*def.x)^(3/2)*4.82e15[1/cm^3]),((T/1[K])^(3/2)*(0.85-0.14*def.x)^(3/2)*4.82e15[1/cm^3]))');
model.material('mat1').propertyGroup('SemicondMaterial').set('mun', 'if(def.x<0.45,(8e3-2.2e4*def.x+1e4*def.x^2),(-255+1160*def.x-720*def.x^2))[cm^2/(V*s)]');
model.material('mat1').propertyGroup('SemicondMaterial').set('mup', '(370-970*def.x+740*def.x^2)[cm^2/(V*s)]');
model.material('mat1').propertyGroup('SemicondMaterial').addInput('temperature');

model.geom('geom1').run;

model.material('mat1').propertyGroup('def').set('x', {'0.3'});

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('1st well/dot');
model.selection('sel1').set([3]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('2nd well/dot');
model.selection('sel2').set([5]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('all wells/dots');
model.selection('uni1').set('input', {'sel1' 'sel2'});

model.physics('semi').prop('d').set('A', 'area');
model.physics('semi').create('adm1', 'AnalyticDopingModel', 1);
model.physics('semi').feature('adm1').selection.set([1]);
model.physics('semi').feature('adm1').set('NAc', '2e18[1/cm^3]');
model.physics('semi').create('adm2', 'AnalyticDopingModel', 1);
model.physics('semi').feature('adm2').selection.set([8]);
model.physics('semi').feature('adm2').set('impurityType', 'donor');
model.physics('semi').feature('adm2').set('NDc', '5e16[1/cm^3]');
model.physics('semi').create('mc1', 'MetalContact', 0);
model.physics('semi').feature('mc1').selection.set([9]);
model.physics('semi').create('mc2', 'MetalContact', 0);
model.physics('semi').feature('mc2').selection.set([1]);
model.physics('semi').feature('mc2').set('V0', 'V0');
model.physics('semi').create('tar1', 'TrapAssistedRecombination', 1);
model.physics('semi').feature('tar1').selection.named('uni1');
model.physics('semi').feature('tar1').set('IncludeTraps', 'ExplicitTraps');
model.physics('semi').feature('tar1').set('SpecifyTrapSpecies', true);
model.physics('semi').feature('tar1').create('dtd1', 'DiscreteEnergyLevelDomain', 1);
model.physics('semi').feature('tar1').feature('dtd1').label('Discrete Energy Level - wells');
model.physics('semi').feature('tar1').feature('dtd1').set('TrapType', 'NeutralElectron');
model.physics('semi').feature('tar1').feature('dtd1').set('Nt_dne', 'N_well');
model.physics('semi').feature('tar1').feature('dtd1').set('DistributionCenterPoint', 'FromConduction');
model.physics('semi').feature('tar1').feature('dtd1').set('Et0in', 'DeltaE_well');
model.physics('semi').feature('tar1').feature('dtd1').set('gsd_d', 'gD');
model.physics('semi').feature('tar1').feature('dtd1').set('ElectronCaptureProbabilitySelect', 'userdef');
model.physics('semi').feature('tar1').feature('dtd1').set('Cnin', 0);
model.physics('semi').feature('tar1').feature('dtd1').set('HoleCaptureProbabilitySelect', 'userdef');
model.physics('semi').feature('tar1').feature('dtd1').set('Cpin', 0);
model.physics('semi').feature('tar1').feature.duplicate('dtd2', 'dtd1');
model.physics('semi').feature('tar1').feature('dtd2').label('Discrete Energy Level - dots');
model.physics('semi').feature('tar1').feature('dtd2').set('Nt_dne', 'N_dot');
model.physics('semi').feature('tar1').feature('dtd2').set('Et0in', 'DeltaE_dot');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').label('Integration - 1st well/dot');
model.cpl('intop1').selection.named('sel1');
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').label('Integration - 2nd well/dot');
model.cpl('intop2').selection.named('sel2');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Variables - all wells/dots');
model.variable('var1').selection.geom('geom1', 1);
model.variable('var1').selection.named('uni1');
model.variable('var1').set('ft_well', 'semi.tar1.dtd1.ft');
model.variable('var1').descr('ft_well', 'Occupation of QW');
model.variable('var1').set('ft_dot', 'semi.tar1.dtd2.ft');
model.variable('var1').descr('ft_dot', 'Occupation of QD');
model.variable('var1').set('n_well', 'ft_well*N_well');
model.variable('var1').descr('n_well', 'Density of occupied QW');
model.variable('var1').set('n_dot', 'ft_dot*N_dot');
model.variable('var1').descr('n_dot', 'Density of occupied QD');
model.variable('var1').set('alpha1', 'exp(-alpha_dot*intop1(n_dot)/N_dot*t_dot/t_well)');
model.variable('var1').descr('alpha1', 'Fraction of 1300 nm light remaining after absorption by 1st QD');
model.variable('var1').set('alpha2', 'exp(-alpha_dot*intop2(n_dot)/N_dot*t_dot/t_well)');
model.variable('var1').descr('alpha2', 'Fraction of 1300 nm light remaining after absorption by 2nd QD');
model.variable('var1').set('P2_1300', 'P1_1300*alpha1');
model.variable('var1').descr('P2_1300', '1300 nm photon flux entering the 2nd QD');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Variables - 1st well/dot');
model.variable('var2').selection.geom('geom1', 1);
model.variable('var2').selection.named('sel1');
model.variable('var2').set('G_780', 'G1_780');
model.variable('var2').descr('G_780', 'Generation rate in the 1st QW due to the 780 nm light');
model.variable('var2').set('G_1300', 'P1_1300*(1-alpha1)/t_well');
model.variable('var2').descr('G_1300', 'Generation rate in the 1st QD due to the 1300 nm light');
model.variable.create('var3');
model.variable('var3').model('comp1');
model.variable('var3').label('Variables - 2nd well/dot');
model.variable('var3').selection.geom('geom1', 1);
model.variable('var3').selection.named('sel2');
model.variable('var3').set('G_780', 'G2_780', 'Generation rate in the 1st QW due to the 780 nm light');
model.variable('var3').descr('G_780', 'Generation rate in the 2nd QW due to the 780 nm light');
model.variable('var3').set('G_1300', 'P2_1300*(1-alpha2)/t_well', 'Generation rate in the 1st QD due to the 1300 nm light');
model.variable('var3').descr('G_1300', 'Generation rate in the 2nd QD due to the 1300 nm light');

model.physics('semi').feature('tar1').feature('dtd1').set('Rn_extra', '-n_well/tau_thermal+gamma*semi.N');
model.physics('semi').feature('tar1').feature('dtd1').set('Rp_extra', '-G_780+n_well/tau_well');
model.physics('semi').feature('tar1').feature('dtd2').set('Rn_extra', '-G_1300');
model.physics('semi').feature('tar1').feature('dtd2').set('Rp_extra', 'n_dot/tau_dot');
model.physics('semi').feature('tar1').create('tdld1', 'TransitionBetweenDiscreteLevelsDomain', 1);
model.physics('semi').feature('tar1').feature('tdld1').set('tl2', 'dtd1');
model.physics('semi').feature('tar1').feature('tdld1').set('tl1', 'dtd2');
model.physics('semi').feature('tar1').feature('tdld1').set('tau21', 'tau_welltodot');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size1').selection.set([2 3 4 5 6 7 8]);
model.mesh('mesh1').feature.duplicate('size2', 'size1');
model.mesh('mesh1').feature.move('size2', 2);
model.mesh('mesh1').feature('size2').selection.geom('geom1', 1);
model.mesh('mesh1').feature('size2').selection.set([8]);
model.mesh('mesh1').feature('size2').set('hauto', 8);
model.mesh('mesh1').run;

model.study('std1').label('Study 1 - ramp V0 from 0 to 0.5 V, no light');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'V0', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'V', 0);
model.study('std1').feature('stat').setIndex('pname', 'V0', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'V', 0);
model.study('std1').feature('stat').setIndex('plistarr', '0 0.1 0.5', 0);
model.study('std1').feature('stat').setIndex('punit', 'V', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'semie');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'semie');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-6);
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', false);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').feature('aDef').set('assemtol', 0);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol1').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').set('mumpsalloc', 1.2);
model.sol('sol1').feature('s1').feature('d1').set('ooc', 'off');
model.sol('sol1').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol1').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-6);
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s2').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s2').set('control', 'stat');
model.sol('sol1').feature('s2').feature('aDef').set('complexfun', false);
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s2').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s2').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s2').feature('aDef').set('assemtol', 0);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('rstep', 10);
model.sol('sol1').feature('s2').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s2').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.1);
model.sol('sol1').feature('s2').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s2').feature('d1').set('mumpsalloc', 1.2);
model.sol('sol1').feature('s2').feature('d1').set('ooc', 'off');
model.sol('sol1').feature('s2').feature('d1').set('errorchk', 'off');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('rstep', 10);
model.sol('sol1').feature('s2').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s2').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.1);
model.sol('sol1').feature('s2').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'ddog');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').label('Energy Levels (semi)');
model.result('pg1').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Energy Diagram');
model.result('pg1').set('ylabel', 'Energy (eV)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond1/pg2');
model.result('pg1').feature.create('lngr1', 'LineGraph');
model.result('pg1').feature('lngr1').label('Conduction Band Energy Level');
model.result('pg1').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr1').set('expr', 'semi.Ec_e');
model.result('pg1').feature('lngr1').set('unit', 'eV');
model.result('pg1').feature('lngr1').set('linecolor', 'blue');
model.result('pg1').feature('lngr1').set('legend', true);
model.result('pg1').feature('lngr1').set('legendmethod', 'manual');
model.result('pg1').feature('lngr1').set('legends', {'Ec'});
model.result('pg1').feature('lngr1').set('resolution', 'norefine');
model.result('pg1').feature('lngr1').set('smooth', 'everywhere');
model.result('pg1').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr1').set('data', 'parent');
model.result('pg1').feature('lngr1').selection.geom('geom1', 1);
model.result('pg1').feature('lngr1').selection.set([1 2 3 4 5 6 7 8]);
model.result('pg1').feature.create('lngr2', 'LineGraph');
model.result('pg1').feature('lngr2').label('Electron Quasi-Fermi Energy Level');
model.result('pg1').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr2').set('expr', 'semi.Efn_e');
model.result('pg1').feature('lngr2').set('unit', 'eV');
model.result('pg1').feature('lngr2').set('linestyle', 'dashed');
model.result('pg1').feature('lngr2').set('linecolor', 'black');
model.result('pg1').feature('lngr2').set('legend', true);
model.result('pg1').feature('lngr2').set('legendmethod', 'manual');
model.result('pg1').feature('lngr2').set('legends', {'Efn'});
model.result('pg1').feature('lngr2').set('resolution', 'norefine');
model.result('pg1').feature('lngr2').set('smooth', 'everywhere');
model.result('pg1').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr2').set('data', 'parent');
model.result('pg1').feature('lngr2').selection.geom('geom1', 1);
model.result('pg1').feature('lngr2').selection.set([1 2 3 4 5 6 7 8]);
model.result('pg1').feature.create('lngr3', 'LineGraph');
model.result('pg1').feature('lngr3').label('Hole Quasi-Fermi Energy Level');
model.result('pg1').feature('lngr3').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr3').set('expr', 'semi.Efp_e');
model.result('pg1').feature('lngr3').set('unit', 'eV');
model.result('pg1').feature('lngr3').set('linestyle', 'dotted');
model.result('pg1').feature('lngr3').set('linecolor', 'black');
model.result('pg1').feature('lngr3').set('legend', true);
model.result('pg1').feature('lngr3').set('legendmethod', 'manual');
model.result('pg1').feature('lngr3').set('legends', {'Efp'});
model.result('pg1').feature('lngr3').set('resolution', 'norefine');
model.result('pg1').feature('lngr3').set('smooth', 'everywhere');
model.result('pg1').feature('lngr3').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr3').set('data', 'parent');
model.result('pg1').feature('lngr3').selection.geom('geom1', 1);
model.result('pg1').feature('lngr3').selection.set([1 2 3 4 5 6 7 8]);
model.result('pg1').feature.create('lngr4', 'LineGraph');
model.result('pg1').feature('lngr4').label('Valence Band Energy Level');
model.result('pg1').feature('lngr4').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr4').set('expr', 'semi.Ev_e');
model.result('pg1').feature('lngr4').set('unit', 'eV');
model.result('pg1').feature('lngr4').set('linecolor', 'green');
model.result('pg1').feature('lngr4').set('legend', true);
model.result('pg1').feature('lngr4').set('legendmethod', 'manual');
model.result('pg1').feature('lngr4').set('legends', {'Ev'});
model.result('pg1').feature('lngr4').set('resolution', 'norefine');
model.result('pg1').feature('lngr4').set('smooth', 'everywhere');
model.result('pg1').feature('lngr4').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr4').set('data', 'parent');
model.result('pg1').feature('lngr4').selection.geom('geom1', 1);
model.result('pg1').feature('lngr4').selection.set([1 2 3 4 5 6 7 8]);
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').label('Carrier Concentrations (semi)');
model.result('pg2').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg2').set('ylabel', 'Carrier concentration (1/cm^3)');
model.result('pg2').set('ylog', true);
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond1/pg3');
model.result('pg2').feature.create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').label('Electron Concentration');
model.result('pg2').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg2').feature('lngr1').set('expr', 'semi.N');
model.result('pg2').feature('lngr1').set('unit', '1/cm^3');
model.result('pg2').feature('lngr1').set('legend', true);
model.result('pg2').feature('lngr1').set('legendmethod', 'manual');
model.result('pg2').feature('lngr1').set('legends', {'electrons'});
model.result('pg2').feature('lngr1').set('resolution', 'norefine');
model.result('pg2').feature('lngr1').set('smooth', 'everywhere');
model.result('pg2').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg2').feature('lngr1').set('data', 'parent');
model.result('pg2').feature('lngr1').selection.geom('geom1', 1);
model.result('pg2').feature('lngr1').selection.set([1 2 3 4 5 6 7 8]);
model.result('pg2').feature.create('lngr2', 'LineGraph');
model.result('pg2').feature('lngr2').label('Hole Concentration');
model.result('pg2').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg2').feature('lngr2').set('expr', 'semi.P');
model.result('pg2').feature('lngr2').set('unit', '1/cm^3');
model.result('pg2').feature('lngr2').set('legend', true);
model.result('pg2').feature('lngr2').set('legendmethod', 'manual');
model.result('pg2').feature('lngr2').set('legends', {'holes'});
model.result('pg2').feature('lngr2').set('resolution', 'norefine');
model.result('pg2').feature('lngr2').set('smooth', 'everywhere');
model.result('pg2').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg2').feature('lngr2').set('data', 'parent');
model.result('pg2').feature('lngr2').selection.geom('geom1', 1);
model.result('pg2').feature('lngr2').selection.set([1 2 3 4 5 6 7 8]);
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').label('Electric Potential (semi)');
model.result('pg3').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg3').set('ylabel', 'Electric Potential (V)');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond1/pg4');
model.result('pg3').feature.create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg3').feature('lngr1').set('expr', 'V');
model.result('pg3').feature('lngr1').set('resolution', 'norefine');
model.result('pg3').feature('lngr1').set('smooth', 'everywhere');
model.result('pg3').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg3').feature('lngr1').set('data', 'parent');
model.result('pg3').feature('lngr1').selection.geom('geom1', 1);
model.result('pg3').feature('lngr1').selection.set([1 2 3 4 5 6 7 8]);
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').create('lngr2', 'LineGraph');
model.result('pg4').feature('lngr1').selection.all;
model.result('pg4').feature('lngr1').set('xdataexpr', 'X');
model.result('pg4').feature('lngr1').set('expr', 'semi.Nnetdop');
model.result('pg4').feature('lngr1').set('unit', '1/cm^3');
model.result('pg4').feature('lngr1').set('linecolor', 'red');
model.result('pg4').feature('lngr1').set('legend', true);
model.result('pg4').feature('lngr1').set('legendmethod', 'manual');
model.result('pg4').feature('lngr1').set('legends', {'P-type (Red)'});
model.result('pg4').feature('lngr1').feature.create('filt1', 'LineGraphFilter');
model.result('pg4').feature('lngr1').feature('filt1').set('expr', 'semi.Na-semi.Nd > 1[1/cm^3]');
model.result('pg4').feature('lngr2').selection.all;
model.result('pg4').feature('lngr2').set('xdataexpr', 'X');
model.result('pg4').feature('lngr2').set('expr', 'semi.Nnetdop');
model.result('pg4').feature('lngr2').set('unit', '1/cm^3');
model.result('pg4').feature('lngr2').set('linecolor', 'blue');
model.result('pg4').feature('lngr2').set('legend', true);
model.result('pg4').feature('lngr2').set('legendmethod', 'manual');
model.result('pg4').feature('lngr2').set('legends', {'N-type (Blue)'});
model.result('pg4').feature('lngr2').feature.create('filt1', 'LineGraphFilter');
model.result('pg4').feature('lngr2').feature('filt1').set('expr', 'semi.Nd-semi.Na > 1[1/cm^3]');
model.result('pg4').set('titletype', 'none');
model.result('pg4').set('legendpos', 'uppermiddle');
model.result('pg4').set('ylabel', 'Net Dopant Concentration \vert N<sub>d</sub> - N<sub>a</sub>\vert, 1/cm<sup>3</sup>');
model.result('pg4').set('ylog', true);
model.result('pg4').feature('lngr1').label('P-type');
model.result('pg4').feature('lngr2').label('N-type');
model.result('pg4').label('Net Dopant Concentration (semi)');
model.result('pg1').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').add('plotgroup', 'pg1');
model.nodeGroup('grp1').add('plotgroup', 'pg2');
model.nodeGroup('grp1').add('plotgroup', 'pg3');
model.nodeGroup('grp1').add('plotgroup', 'pg4');
model.nodeGroup('grp1').label('Study 1');

model.result('pg4').run;
model.result('pg4').setIndex('looplevelinput', 'first', 0);
model.result('pg4').run;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/semi', true);
model.study('std2').feature('stat').set('useparam', true);
model.study('std2').feature('stat').set('sweeptype', 'filled');
model.study('std2').feature('stat').setIndex('pname', 'V0', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'V', 0);
model.study('std2').feature('stat').setIndex('pname', 'V0', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'V', 0);
model.study('std2').feature('stat').setIndex('plistarr', 0.5, 0);
model.study('std2').feature('stat').setIndex('punit', 'V', 0);
model.study('std2').feature('stat').setIndex('pname', 'P0_780', 1);
model.study('std2').feature('stat').setIndex('plistarr', '', 1);
model.study('std2').feature('stat').setIndex('punit', 'W/m^2', 1);
model.study('std2').feature('stat').setIndex('pname', 'P0_780', 1);
model.study('std2').feature('stat').setIndex('plistarr', '', 1);
model.study('std2').feature('stat').setIndex('punit', 'W/m^2', 1);
model.study('std2').feature('stat').setIndex('pname', 'P0_1300', 1);
model.study('std2').feature('stat').setIndex('plistarr', '0 2.3 16 56', 1);
model.study('std2').feature('stat').setIndex('punit', 'mW/cm^2', 1);
model.study('std2').feature('stat').setIndex('pname', 'P0_780', 2);
model.study('std2').feature('stat').setIndex('plistarr', '', 2);
model.study('std2').feature('stat').setIndex('punit', 'W/m^2', 2);
model.study('std2').feature('stat').setIndex('pname', 'P0_780', 2);
model.study('std2').feature('stat').setIndex('plistarr', '', 2);
model.study('std2').feature('stat').setIndex('punit', 'W/m^2', 2);
model.study('std2').feature('stat').setIndex('plistarr', '10^range(-3,0.25,1.5)', 2);
model.study('std2').feature('stat').setIndex('punit', 'mW/cm^2', 2);
model.study('std2').feature('stat').set('useinitsol', true);
model.study('std2').feature('stat').set('initmethod', 'sol');
model.study('std2').feature('stat').set('initstudy', 'std1');
model.study('std2').feature('stat').set('solnum', 3);
model.study('std2').label('Study 2 - ramp P_780');

model.sol.create('sol3');
model.sol('sol3').study('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'stat');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'stat');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').set('stol', 1.0E-6);
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol3').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol3').feature('s1').set('control', 'stat');
model.sol('sol3').feature('s1').feature('aDef').set('complexfun', false);
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol3').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol3').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol3').feature('s1').feature('aDef').set('assemtol', 0);
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol3').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol3').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol3').feature('s1').feature('fc1').set('initstep', 0.1);
model.sol('sol3').feature('s1').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol3').feature('s1').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol3').feature('s1').feature('d1').set('mumpsalloc', 1.2);
model.sol('sol3').feature('s1').feature('d1').set('ooc', 'off');
model.sol('sol3').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol3').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol3').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol3').feature('s1').feature('fc1').set('initstep', 0.1);
model.sol('sol3').feature('s1').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std2');
model.sol('sol3').runAll;

model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').label('Energy Levels (semi) 1');
model.result('pg5').set('data', 'dset3');
model.result('pg5').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Energy Diagram');
model.result('pg5').set('ylabel', 'Energy (eV)');
model.result('pg5').set('data', 'dset3');
model.result('pg5').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond1/pg2');
model.result('pg5').feature.create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').label('Conduction Band Energy Level');
model.result('pg5').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg5').feature('lngr1').set('expr', 'semi.Ec_e');
model.result('pg5').feature('lngr1').set('unit', 'eV');
model.result('pg5').feature('lngr1').set('linecolor', 'blue');
model.result('pg5').feature('lngr1').set('legend', true);
model.result('pg5').feature('lngr1').set('legendmethod', 'manual');
model.result('pg5').feature('lngr1').set('legends', {'Ec'});
model.result('pg5').feature('lngr1').set('resolution', 'norefine');
model.result('pg5').feature('lngr1').set('smooth', 'everywhere');
model.result('pg5').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg5').feature('lngr1').set('data', 'parent');
model.result('pg5').feature('lngr1').selection.geom('geom1', 1);
model.result('pg5').feature('lngr1').selection.set([1 2 3 4 5 6 7 8]);
model.result('pg5').feature.create('lngr2', 'LineGraph');
model.result('pg5').feature('lngr2').label('Electron Quasi-Fermi Energy Level');
model.result('pg5').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg5').feature('lngr2').set('expr', 'semi.Efn_e');
model.result('pg5').feature('lngr2').set('unit', 'eV');
model.result('pg5').feature('lngr2').set('linestyle', 'dashed');
model.result('pg5').feature('lngr2').set('linecolor', 'black');
model.result('pg5').feature('lngr2').set('legend', true);
model.result('pg5').feature('lngr2').set('legendmethod', 'manual');
model.result('pg5').feature('lngr2').set('legends', {'Efn'});
model.result('pg5').feature('lngr2').set('resolution', 'norefine');
model.result('pg5').feature('lngr2').set('smooth', 'everywhere');
model.result('pg5').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg5').feature('lngr2').set('data', 'parent');
model.result('pg5').feature('lngr2').selection.geom('geom1', 1);
model.result('pg5').feature('lngr2').selection.set([1 2 3 4 5 6 7 8]);
model.result('pg5').feature.create('lngr3', 'LineGraph');
model.result('pg5').feature('lngr3').label('Hole Quasi-Fermi Energy Level');
model.result('pg5').feature('lngr3').set('showsolutionparams', 'on');
model.result('pg5').feature('lngr3').set('expr', 'semi.Efp_e');
model.result('pg5').feature('lngr3').set('unit', 'eV');
model.result('pg5').feature('lngr3').set('linestyle', 'dotted');
model.result('pg5').feature('lngr3').set('linecolor', 'black');
model.result('pg5').feature('lngr3').set('legend', true);
model.result('pg5').feature('lngr3').set('legendmethod', 'manual');
model.result('pg5').feature('lngr3').set('legends', {'Efp'});
model.result('pg5').feature('lngr3').set('resolution', 'norefine');
model.result('pg5').feature('lngr3').set('smooth', 'everywhere');
model.result('pg5').feature('lngr3').set('showsolutionparams', 'on');
model.result('pg5').feature('lngr3').set('data', 'parent');
model.result('pg5').feature('lngr3').selection.geom('geom1', 1);
model.result('pg5').feature('lngr3').selection.set([1 2 3 4 5 6 7 8]);
model.result('pg5').feature.create('lngr4', 'LineGraph');
model.result('pg5').feature('lngr4').label('Valence Band Energy Level');
model.result('pg5').feature('lngr4').set('showsolutionparams', 'on');
model.result('pg5').feature('lngr4').set('expr', 'semi.Ev_e');
model.result('pg5').feature('lngr4').set('unit', 'eV');
model.result('pg5').feature('lngr4').set('linecolor', 'green');
model.result('pg5').feature('lngr4').set('legend', true);
model.result('pg5').feature('lngr4').set('legendmethod', 'manual');
model.result('pg5').feature('lngr4').set('legends', {'Ev'});
model.result('pg5').feature('lngr4').set('resolution', 'norefine');
model.result('pg5').feature('lngr4').set('smooth', 'everywhere');
model.result('pg5').feature('lngr4').set('showsolutionparams', 'on');
model.result('pg5').feature('lngr4').set('data', 'parent');
model.result('pg5').feature('lngr4').selection.geom('geom1', 1);
model.result('pg5').feature('lngr4').selection.set([1 2 3 4 5 6 7 8]);
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').label('Carrier Concentrations (semi) 1');
model.result('pg6').set('data', 'dset3');
model.result('pg6').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg6').set('ylabel', 'Carrier concentration (1/cm^3)');
model.result('pg6').set('ylog', true);
model.result('pg6').set('data', 'dset3');
model.result('pg6').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond1/pg3');
model.result('pg6').feature.create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').label('Electron Concentration');
model.result('pg6').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg6').feature('lngr1').set('expr', 'semi.N');
model.result('pg6').feature('lngr1').set('unit', '1/cm^3');
model.result('pg6').feature('lngr1').set('legend', true);
model.result('pg6').feature('lngr1').set('legendmethod', 'manual');
model.result('pg6').feature('lngr1').set('legends', {'electrons'});
model.result('pg6').feature('lngr1').set('resolution', 'norefine');
model.result('pg6').feature('lngr1').set('smooth', 'everywhere');
model.result('pg6').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg6').feature('lngr1').set('data', 'parent');
model.result('pg6').feature('lngr1').selection.geom('geom1', 1);
model.result('pg6').feature('lngr1').selection.set([1 2 3 4 5 6 7 8]);
model.result('pg6').feature.create('lngr2', 'LineGraph');
model.result('pg6').feature('lngr2').label('Hole Concentration');
model.result('pg6').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg6').feature('lngr2').set('expr', 'semi.P');
model.result('pg6').feature('lngr2').set('unit', '1/cm^3');
model.result('pg6').feature('lngr2').set('legend', true);
model.result('pg6').feature('lngr2').set('legendmethod', 'manual');
model.result('pg6').feature('lngr2').set('legends', {'holes'});
model.result('pg6').feature('lngr2').set('resolution', 'norefine');
model.result('pg6').feature('lngr2').set('smooth', 'everywhere');
model.result('pg6').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg6').feature('lngr2').set('data', 'parent');
model.result('pg6').feature('lngr2').selection.geom('geom1', 1);
model.result('pg6').feature('lngr2').selection.set([1 2 3 4 5 6 7 8]);
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').label('Electric Potential (semi) 1');
model.result('pg7').set('data', 'dset3');
model.result('pg7').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg7').set('ylabel', 'Electric Potential (V)');
model.result('pg7').set('data', 'dset3');
model.result('pg7').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond1/pg4');
model.result('pg7').feature.create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg7').feature('lngr1').set('expr', 'V');
model.result('pg7').feature('lngr1').set('resolution', 'norefine');
model.result('pg7').feature('lngr1').set('smooth', 'everywhere');
model.result('pg7').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg7').feature('lngr1').set('data', 'parent');
model.result('pg7').feature('lngr1').selection.geom('geom1', 1);
model.result('pg7').feature('lngr1').selection.set([1 2 3 4 5 6 7 8]);
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').set('data', 'dset3');
model.result('pg8').create('lngr1', 'LineGraph');
model.result('pg8').create('lngr2', 'LineGraph');
model.result('pg8').feature('lngr1').selection.all;
model.result('pg8').feature('lngr1').set('xdataexpr', 'X');
model.result('pg8').feature('lngr1').set('expr', 'semi.Nnetdop');
model.result('pg8').feature('lngr1').set('unit', '1/cm^3');
model.result('pg8').feature('lngr1').set('linecolor', 'red');
model.result('pg8').feature('lngr1').set('legend', true);
model.result('pg8').feature('lngr1').set('legendmethod', 'manual');
model.result('pg8').feature('lngr1').set('legends', {'P-type (Red)'});
model.result('pg8').feature('lngr1').feature.create('filt1', 'LineGraphFilter');
model.result('pg8').feature('lngr1').feature('filt1').set('expr', 'semi.Na-semi.Nd > 1[1/cm^3]');
model.result('pg8').feature('lngr2').selection.all;
model.result('pg8').feature('lngr2').set('xdataexpr', 'X');
model.result('pg8').feature('lngr2').set('expr', 'semi.Nnetdop');
model.result('pg8').feature('lngr2').set('unit', '1/cm^3');
model.result('pg8').feature('lngr2').set('linecolor', 'blue');
model.result('pg8').feature('lngr2').set('legend', true);
model.result('pg8').feature('lngr2').set('legendmethod', 'manual');
model.result('pg8').feature('lngr2').set('legends', {'N-type (Blue)'});
model.result('pg8').feature('lngr2').feature.create('filt1', 'LineGraphFilter');
model.result('pg8').feature('lngr2').feature('filt1').set('expr', 'semi.Nd-semi.Na > 1[1/cm^3]');
model.result('pg8').set('titletype', 'none');
model.result('pg8').set('legendpos', 'uppermiddle');
model.result('pg8').set('ylabel', 'Net Dopant Concentration \vert N<sub>d</sub> - N<sub>a</sub>\vert, 1/cm<sup>3</sup>');
model.result('pg8').set('ylog', true);
model.result('pg8').feature('lngr1').label('P-type');
model.result('pg8').feature('lngr2').label('N-type');
model.result('pg8').label('Net Dopant Concentration (semi) 1');
model.result('pg5').run;
model.result('pg8').run;
model.result('pg8').setIndex('looplevelinput', 'first', 2);
model.result('pg8').setIndex('looplevelinput', 'first', 1);
model.result('pg8').setIndex('looplevelinput', 'first', 0);
model.result('pg8').run;
model.result('pg5').run;

model.nodeGroup.create('grp2', 'Results');
model.nodeGroup('grp2').set('type', 'plotgroup');
model.nodeGroup.move('grp2', 1);
model.nodeGroup('grp2').add('plotgroup', 'pg5');
model.nodeGroup('grp2').add('plotgroup', 'pg6');
model.nodeGroup('grp2').add('plotgroup', 'pg7');
model.nodeGroup('grp2').add('plotgroup', 'pg8');
model.nodeGroup('grp2').label('Study 2');

model.result.create('pg9', 'PlotGroup1D');

model.nodeGroup('grp2').add('plotgroup', 'pg9');

model.result('pg9').run;
model.result('pg9').label('I vs. P_780 (Fig. 7a)');
model.result('pg9').set('data', 'dset3');
model.result('pg9').setIndex('looplevelinput', 'manualindices', 1);
model.result('pg9').setIndex('looplevelindices', '2 3 4', 1);
model.result('pg9').set('xlog', true);
model.result('pg9').set('ylog', true);
model.result('pg9').set('legendpos', 'upperleft');
model.result('pg9').create('glob1', 'Global');
model.result('pg9').feature('glob1').set('markerpos', 'datapoints');
model.result('pg9').feature('glob1').set('linewidth', 'preference');
model.result('pg9').feature('glob1').setIndex('expr', 'semi.I0_1/area', 0);
model.result('pg9').feature('glob1').setIndex('unit', 'mA/cm^2', 0);
model.result('pg9').feature('glob1').setIndex('descr', 'I', 0);
model.result('pg9').feature('glob1').set('xdata', 'expr');
model.result('pg9').feature('glob1').set('xdataexpr', 'P0_780/1[mW/cm^2]');
model.result('pg9').feature('glob1').set('autodescr', false);
model.result('pg9').run;
model.result('pg9').run;
model.result.duplicate('pg10', 'pg9');

model.nodeGroup('grp2').add('plotgroup', 'pg10');

model.result('pg10').run;
model.result('pg10').label('ft_dot vs. P_780 (Fig. 7b)');
model.result('pg10').set('ylog', false);
model.result('pg10').run;
model.result('pg10').feature('glob1').setIndex('expr', 'intop1(ft_dot)/t_well', 0);
model.result('pg10').feature('glob1').setIndex('unit', 1, 0);
model.result('pg10').feature('glob1').setIndex('descr', 'Occupation of QD states', 0);
model.result('pg10').run;

model.study.create('std3');
model.study('std3').label('Study 3 - ramp P_1300');
model.study('std3').feature.copy('stat1', 'std2/stat');
model.study('std3').feature('stat1').move('pname', [2], -1);
model.study('std3').feature('stat1').move('plistarr', [2], -1);
model.study('std3').feature('stat1').move('punit', [2], -1);
model.study('std3').feature('stat1').setIndex('plistarr', '0.064 0.63 7.7', 1);
model.study('std3').feature('stat1').setIndex('plistarr', '10^range(0,0.25,3)', 2);

model.sol.create('sol4');
model.sol('sol4').study('std3');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std3');
model.sol('sol4').feature('st1').set('studystep', 'stat1');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'stat1');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').set('stol', 1.0E-6);
model.sol('sol4').feature('s1').create('p1', 'Parametric');
model.sol('sol4').feature('s1').feature.remove('pDef');
model.sol('sol4').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol4').feature('s1').feature('p1').set('control', 'stat1');
model.sol('sol4').feature('s1').set('control', 'stat1');
model.sol('sol4').feature('s1').feature('aDef').set('complexfun', false);
model.sol('sol4').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol4').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol4').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol4').feature('s1').feature('aDef').set('assemtol', 0);
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol4').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol4').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol4').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol4').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol4').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol4').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol4').feature('s1').feature('fc1').set('initstep', 0.1);
model.sol('sol4').feature('s1').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol4').feature('s1').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol4').feature('s1').feature('d1').set('mumpsalloc', 1.2);
model.sol('sol4').feature('s1').feature('d1').set('ooc', 'off');
model.sol('sol4').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol4').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol4').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol4').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol4').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol4').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol4').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol4').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol4').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol4').feature('s1').feature('fc1').set('initstep', 0.1);
model.sol('sol4').feature('s1').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').attach('std3');
model.sol('sol4').runAll;

model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').label('Energy Levels (semi) 2');
model.result('pg11').set('data', 'dset4');
model.result('pg11').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg11').set('titletype', 'manual');
model.result('pg11').set('title', 'Energy Diagram');
model.result('pg11').set('ylabel', 'Energy (eV)');
model.result('pg11').set('data', 'dset4');
model.result('pg11').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond1/pg2');
model.result('pg11').feature.create('lngr1', 'LineGraph');
model.result('pg11').feature('lngr1').label('Conduction Band Energy Level');
model.result('pg11').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg11').feature('lngr1').set('expr', 'semi.Ec_e');
model.result('pg11').feature('lngr1').set('unit', 'eV');
model.result('pg11').feature('lngr1').set('linecolor', 'blue');
model.result('pg11').feature('lngr1').set('legend', true);
model.result('pg11').feature('lngr1').set('legendmethod', 'manual');
model.result('pg11').feature('lngr1').set('legends', {'Ec'});
model.result('pg11').feature('lngr1').set('resolution', 'norefine');
model.result('pg11').feature('lngr1').set('smooth', 'everywhere');
model.result('pg11').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg11').feature('lngr1').set('data', 'parent');
model.result('pg11').feature('lngr1').selection.geom('geom1', 1);
model.result('pg11').feature('lngr1').selection.set([1 2 3 4 5 6 7 8]);
model.result('pg11').feature.create('lngr2', 'LineGraph');
model.result('pg11').feature('lngr2').label('Electron Quasi-Fermi Energy Level');
model.result('pg11').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg11').feature('lngr2').set('expr', 'semi.Efn_e');
model.result('pg11').feature('lngr2').set('unit', 'eV');
model.result('pg11').feature('lngr2').set('linestyle', 'dashed');
model.result('pg11').feature('lngr2').set('linecolor', 'black');
model.result('pg11').feature('lngr2').set('legend', true);
model.result('pg11').feature('lngr2').set('legendmethod', 'manual');
model.result('pg11').feature('lngr2').set('legends', {'Efn'});
model.result('pg11').feature('lngr2').set('resolution', 'norefine');
model.result('pg11').feature('lngr2').set('smooth', 'everywhere');
model.result('pg11').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg11').feature('lngr2').set('data', 'parent');
model.result('pg11').feature('lngr2').selection.geom('geom1', 1);
model.result('pg11').feature('lngr2').selection.set([1 2 3 4 5 6 7 8]);
model.result('pg11').feature.create('lngr3', 'LineGraph');
model.result('pg11').feature('lngr3').label('Hole Quasi-Fermi Energy Level');
model.result('pg11').feature('lngr3').set('showsolutionparams', 'on');
model.result('pg11').feature('lngr3').set('expr', 'semi.Efp_e');
model.result('pg11').feature('lngr3').set('unit', 'eV');
model.result('pg11').feature('lngr3').set('linestyle', 'dotted');
model.result('pg11').feature('lngr3').set('linecolor', 'black');
model.result('pg11').feature('lngr3').set('legend', true);
model.result('pg11').feature('lngr3').set('legendmethod', 'manual');
model.result('pg11').feature('lngr3').set('legends', {'Efp'});
model.result('pg11').feature('lngr3').set('resolution', 'norefine');
model.result('pg11').feature('lngr3').set('smooth', 'everywhere');
model.result('pg11').feature('lngr3').set('showsolutionparams', 'on');
model.result('pg11').feature('lngr3').set('data', 'parent');
model.result('pg11').feature('lngr3').selection.geom('geom1', 1);
model.result('pg11').feature('lngr3').selection.set([1 2 3 4 5 6 7 8]);
model.result('pg11').feature.create('lngr4', 'LineGraph');
model.result('pg11').feature('lngr4').label('Valence Band Energy Level');
model.result('pg11').feature('lngr4').set('showsolutionparams', 'on');
model.result('pg11').feature('lngr4').set('expr', 'semi.Ev_e');
model.result('pg11').feature('lngr4').set('unit', 'eV');
model.result('pg11').feature('lngr4').set('linecolor', 'green');
model.result('pg11').feature('lngr4').set('legend', true);
model.result('pg11').feature('lngr4').set('legendmethod', 'manual');
model.result('pg11').feature('lngr4').set('legends', {'Ev'});
model.result('pg11').feature('lngr4').set('resolution', 'norefine');
model.result('pg11').feature('lngr4').set('smooth', 'everywhere');
model.result('pg11').feature('lngr4').set('showsolutionparams', 'on');
model.result('pg11').feature('lngr4').set('data', 'parent');
model.result('pg11').feature('lngr4').selection.geom('geom1', 1);
model.result('pg11').feature('lngr4').selection.set([1 2 3 4 5 6 7 8]);
model.result.create('pg12', 'PlotGroup1D');
model.result('pg12').label('Carrier Concentrations (semi) 2');
model.result('pg12').set('data', 'dset4');
model.result('pg12').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg12').set('ylabel', 'Carrier concentration (1/cm^3)');
model.result('pg12').set('ylog', true);
model.result('pg12').set('data', 'dset4');
model.result('pg12').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond1/pg3');
model.result('pg12').feature.create('lngr1', 'LineGraph');
model.result('pg12').feature('lngr1').label('Electron Concentration');
model.result('pg12').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg12').feature('lngr1').set('expr', 'semi.N');
model.result('pg12').feature('lngr1').set('unit', '1/cm^3');
model.result('pg12').feature('lngr1').set('legend', true);
model.result('pg12').feature('lngr1').set('legendmethod', 'manual');
model.result('pg12').feature('lngr1').set('legends', {'electrons'});
model.result('pg12').feature('lngr1').set('resolution', 'norefine');
model.result('pg12').feature('lngr1').set('smooth', 'everywhere');
model.result('pg12').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg12').feature('lngr1').set('data', 'parent');
model.result('pg12').feature('lngr1').selection.geom('geom1', 1);
model.result('pg12').feature('lngr1').selection.set([1 2 3 4 5 6 7 8]);
model.result('pg12').feature.create('lngr2', 'LineGraph');
model.result('pg12').feature('lngr2').label('Hole Concentration');
model.result('pg12').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg12').feature('lngr2').set('expr', 'semi.P');
model.result('pg12').feature('lngr2').set('unit', '1/cm^3');
model.result('pg12').feature('lngr2').set('legend', true);
model.result('pg12').feature('lngr2').set('legendmethod', 'manual');
model.result('pg12').feature('lngr2').set('legends', {'holes'});
model.result('pg12').feature('lngr2').set('resolution', 'norefine');
model.result('pg12').feature('lngr2').set('smooth', 'everywhere');
model.result('pg12').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg12').feature('lngr2').set('data', 'parent');
model.result('pg12').feature('lngr2').selection.geom('geom1', 1);
model.result('pg12').feature('lngr2').selection.set([1 2 3 4 5 6 7 8]);
model.result.create('pg13', 'PlotGroup1D');
model.result('pg13').label('Electric Potential (semi) 2');
model.result('pg13').set('data', 'dset4');
model.result('pg13').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg13').set('ylabel', 'Electric Potential (V)');
model.result('pg13').set('data', 'dset4');
model.result('pg13').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond1/pg4');
model.result('pg13').feature.create('lngr1', 'LineGraph');
model.result('pg13').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg13').feature('lngr1').set('expr', 'V');
model.result('pg13').feature('lngr1').set('resolution', 'norefine');
model.result('pg13').feature('lngr1').set('smooth', 'everywhere');
model.result('pg13').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg13').feature('lngr1').set('data', 'parent');
model.result('pg13').feature('lngr1').selection.geom('geom1', 1);
model.result('pg13').feature('lngr1').selection.set([1 2 3 4 5 6 7 8]);
model.result.create('pg14', 'PlotGroup1D');
model.result('pg14').set('data', 'dset4');
model.result('pg14').create('lngr1', 'LineGraph');
model.result('pg14').create('lngr2', 'LineGraph');
model.result('pg14').feature('lngr1').selection.all;
model.result('pg14').feature('lngr1').set('xdataexpr', 'X');
model.result('pg14').feature('lngr1').set('expr', 'semi.Nnetdop');
model.result('pg14').feature('lngr1').set('unit', '1/cm^3');
model.result('pg14').feature('lngr1').set('linecolor', 'red');
model.result('pg14').feature('lngr1').set('legend', true);
model.result('pg14').feature('lngr1').set('legendmethod', 'manual');
model.result('pg14').feature('lngr1').set('legends', {'P-type (Red)'});
model.result('pg14').feature('lngr1').feature.create('filt1', 'LineGraphFilter');
model.result('pg14').feature('lngr1').feature('filt1').set('expr', 'semi.Na-semi.Nd > 1[1/cm^3]');
model.result('pg14').feature('lngr2').selection.all;
model.result('pg14').feature('lngr2').set('xdataexpr', 'X');
model.result('pg14').feature('lngr2').set('expr', 'semi.Nnetdop');
model.result('pg14').feature('lngr2').set('unit', '1/cm^3');
model.result('pg14').feature('lngr2').set('linecolor', 'blue');
model.result('pg14').feature('lngr2').set('legend', true);
model.result('pg14').feature('lngr2').set('legendmethod', 'manual');
model.result('pg14').feature('lngr2').set('legends', {'N-type (Blue)'});
model.result('pg14').feature('lngr2').feature.create('filt1', 'LineGraphFilter');
model.result('pg14').feature('lngr2').feature('filt1').set('expr', 'semi.Nd-semi.Na > 1[1/cm^3]');
model.result('pg14').set('titletype', 'none');
model.result('pg14').set('legendpos', 'uppermiddle');
model.result('pg14').set('ylabel', 'Net Dopant Concentration \vert N<sub>d</sub> - N<sub>a</sub>\vert, 1/cm<sup>3</sup>');
model.result('pg14').set('ylog', true);
model.result('pg14').feature('lngr1').label('P-type');
model.result('pg14').feature('lngr2').label('N-type');
model.result('pg14').label('Net Dopant Concentration (semi) 2');
model.result('pg11').run;
model.result('pg14').run;
model.result('pg14').setIndex('looplevelinput', 'first', 2);
model.result('pg14').setIndex('looplevelinput', 'first', 1);
model.result('pg14').setIndex('looplevelinput', 'first', 0);
model.result('pg14').run;
model.result('pg11').run;

model.nodeGroup.create('grp3', 'Results');
model.nodeGroup('grp3').set('type', 'plotgroup');
model.nodeGroup.move('grp3', 2);
model.nodeGroup('grp3').add('plotgroup', 'pg11');
model.nodeGroup('grp3').add('plotgroup', 'pg12');
model.nodeGroup('grp3').add('plotgroup', 'pg13');
model.nodeGroup('grp3').add('plotgroup', 'pg14');
model.nodeGroup('grp3').label('Study 3');

model.result('pg9').run;
model.result.copy('pg15', 'pg9');

model.nodeGroup('grp3').add('plotgroup', 'pg15');

model.result('pg15').run;
model.result('pg15').label('I vs. P_1300 (Fig. 7c)');
model.result('pg15').setIndex('looplevelinput', 'all', 1);
model.result('pg15').set('data', 'dset4');
model.result('pg15').run;
model.result('pg15').feature('glob1').set('xdataexpr', 'P0_1300/1[mW/cm^2]');
model.result('pg15').run;
model.result('pg10').run;
model.result.copy('pg16', 'pg10');

model.nodeGroup('grp3').add('plotgroup', 'pg16');

model.result('pg16').run;
model.result('pg16').label('ft_dot vs. P_1300 (Fig. 7d)');
model.result('pg16').setIndex('looplevelinput', 'all', 1);
model.result('pg16').set('data', 'dset4');
model.result('pg16').set('legendpos', 'center');
model.result('pg16').run;
model.result('pg16').feature('glob1').set('xdataexpr', 'P0_1300/1[mW/cm^2]');
model.result('pg16').run;

model.title('A Solar Cell with InAs Quantum Dots Embedded in AlGaAs/GaAs Quantum Wells');

model.description('This example shows an approximate approach to model a dot-in-well solar cell as described by Asahi and others in the reference paper. The quantum wells and the layers of quantum dots are each treated as lumped energy levels in the band gap. The authors specify transitions between the dot/well levels and the energy bands. The continuum part of the current density is otherwise unimpeded by the wells and dots. This description is equivalent to the trapping feature in the Semiconductor interface, so it is used to model the wells and dots in this example. The computed trend of the photocurrent and occupancy of the quantum dot states agrees well with the result shown in the paper.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('dot_in_well_solar_cell.mph');

model.modelNode.label('Components');

out = model;
