function out = model
%
% mechanism_submerged_in_fluid.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'Incompressible');
model.physics('spf').field('velocity').field('u_fluid');
model.physics('spf').field('velocity').component({'u_fluid' 'v_fluid' 'w_fluid'});
model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');
model.physics('mbd').field('displacement').field('u_solid');
model.physics('mbd').field('displacement').component({'u_solid' 'v_solid' 'w_solid'});
model.physics('mbd').prop('ShapeProperty').set('order_displacement', '1');

model.multiphysics.create('fsip1', 'FluidStructureInteractionPair', 'geom1', 2);
model.multiphysics('fsip1').set('Fluid_physics', 'spf');
model.multiphysics('fsip1').set('Structure_physics', 'mbd');
model.multiphysics('fsip1').set('CouplingType', 'FullyCoupled');

model.common.create('free1', 'DeformingDomain', 'comp1');
model.common('free1').set('smoothingType', 'yeoh');
model.common('free1').selection.set([]);

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/spf', true);
model.study('std1').feature('time').setSolveFor('/physics/mbd', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/fsip1', true);

model.param.set('th_max', '15[deg]');
model.param.descr('th_max', 'Maximum fin rotation');

model.geom('geom1').lengthUnit('cm');
model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'mechanism_submerged_in_fluid.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').create('copy1', 'Copy');
model.geom('geom1').feature('copy1').selection('input').set({'imp1'});
model.geom('geom1').run('copy1');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', [25 15 5]);
model.geom('geom1').feature('blk1').set('base', 'center');
model.geom('geom1').run('blk1');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').run('wp1');
model.geom('geom1').feature.duplicate('wp2', 'wp1');
model.geom('geom1').feature('wp2').set('quickplane', 'xz');
model.geom('geom1').run('wp2');
model.geom('geom1').create('pard1', 'PartitionDomains');
model.geom('geom1').feature('pard1').selection('domain').set('blk1', 1);
model.geom('geom1').feature('pard1').set('workplane', 'wp1');
model.geom('geom1').run('pard1');
model.geom('geom1').feature.duplicate('pard2', 'pard1');
model.geom('geom1').feature('pard2').selection('domain').set('pard1', [1 2]);
model.geom('geom1').feature('pard2').set('workplane', 'wp2');
model.geom('geom1').run('pard2');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').selection('input').set({'pard2'});
model.geom('geom1').feature('dif1').selection('input2').set({'copy1'});
model.geom('geom1').run('dif1');
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('frame', 'material');
model.geom('geom1').run('fin');

model.view('view1').hideObjects.create('hide1');
model.view('view1').hideObjects('hide1').init(3);
model.view('view1').hideObjects('hide1').add('fin', [2 4]);
model.view('view1').set('renderwireframe', true);

model.func.create('step1', 'Step');
model.func('step1').model('comp1');
model.func('step1').set('location', '0.05[s]');
model.func.create('an1', 'Analytic');
model.func('an1').model('comp1');
model.func('an1').set('expr', 'th_max*(sin(2*pi*1*t)*(t<0.25)*step1(t)+(t>=0.25))');
model.func('an1').set('args', 't');
model.func('an1').setIndex('argunit', 's', 0);
model.func('an1').set('fununit', 'rad');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('th', 'an1(t)');
model.variable('var1').descr('th', 'Fin rotation');
model.variable('var1').set('un_solid', 'fsip1.u_solid*(nX)+fsip1.v_solid*(nY)+fsip1.w_solid*(nZ)');
model.variable('var1').descr('un_solid', 'Normal mesh displacement, sliding boundary');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(2);
model.selection('sel1').label('Fluid Boundaries (Fins)');
model.selection('sel1').set([17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').geom(2);
model.selection('sel2').label('Solid Boundaries(Fins)');
model.selection('sel2').set([85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').geom(2);
model.selection('sel3').label('Fluid Boundaries (Body)');
model.selection('sel3').set([49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').geom(2);
model.selection('sel4').label('Solid Boundaries (Body)');
model.selection('sel4').set([109 110 111 112 113 114 116 117 119 120 121 122 123 124 125 126 127 128]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('All Fluid Boundaries');
model.selection('uni1').set('entitydim', 2);
model.selection('uni1').set('input', {'sel1' 'sel3'});
model.selection.duplicate('sel5', 'sel1');
model.selection('sel5').label('Sliding Mesh Boundaries');
model.selection('sel5').set([49 50 53 54 55 56 57 58 61 62 63 64 65 66 67 68 69 70 71 72]);

model.physics('spf').selection.set([1 2 3 4]);
model.physics('spf').feature('wallbc1').set('BoundaryCondition', 'Slip');
model.physics('spf').create('prpc1', 'PressurePointConstraint', 0);
model.physics('spf').feature('prpc1').selection.set([1]);
model.physics('mbd').selection.set([5 6 7]);
model.physics('mbd').create('rd1', 'RigidDomain', 3);
model.physics('mbd').feature('rd1').label('Rigid Material: Body');
model.physics('mbd').feature('rd1').selection.set([7]);
model.physics('mbd').create('att1', 'Attachment', 2);
model.physics('mbd').feature('att1').label('Attachment: Fin 1');
model.physics('mbd').feature('att1').selection.set([107]);
model.physics('mbd').feature.duplicate('att2', 'att1');
model.physics('mbd').feature('att2').label('Attachment: Fin 2');
model.physics('mbd').feature('att2').selection.set([108]);
model.physics('mbd').create('hgj1', 'HingeJoint', -1);
model.physics('mbd').feature('hgj1').set('Source', 'rd1');
model.physics('mbd').feature('hgj1').set('Destination', 'att1');
model.physics('mbd').feature('hgj1').set('CenterOfJointType', 'UserDefined');
model.physics('mbd').feature('hgj1').set('e', [0 0 1]);
model.physics('mbd').feature('hgj1').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('hgj1').feature('pm1').set('thp', '-th');
model.physics('mbd').feature.duplicate('hgj2', 'hgj1');
model.physics('mbd').feature('hgj2').set('Destination', 'att2');
model.physics('mbd').feature('hgj2').feature('pm1').set('thp', 'th');

model.common('free1').selection.set([1 2 3 4]);
model.common.create('disp1', 'PrescribedMeshDisplacement', 'comp1');
model.common('disp1').selection.named('uni1');
model.common('disp1').set('prescribedMeshDisplacement', {'fsip1.u_solid' 'fsip1.v_solid' 'fsip1.w_solid'});
model.common.create('pnmd1', 'PrescribedNormalMeshDisplacement', 'comp1');
model.common('pnmd1').selection.named('sel5');
model.common('pnmd1').set('prescribedNormalDisplacement', 'un_solid');
model.common('pnmd1').set('constraintType', 'Nitsche');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water, liquid');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat2').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat2').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat2').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat2').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat2').propertyGroup.create('Swift', 'Swift');
model.material('mat2').propertyGroup.create('Voce', 'Voce');
model.material('mat2').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat2').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat2').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('Norton', 'Norton');
model.material('mat2').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat2').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat2').label('Structural steel');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat2').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat2').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat2').set('noise', true);
model.material('mat2').set('fresnel', 0.9);
model.material('mat2').set('roughness', 0.3);
model.material('mat2').set('metallic', 0);
model.material('mat2').set('pearl', 0);
model.material('mat2').set('diffusewrap', 0);
model.material('mat2').set('clearcoat', 0);
model.material('mat2').set('reflectance', 0);
model.material('mat2').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat2').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat2').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat2').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat2').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat2').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat2').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat2').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat2').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat2').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat2').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat2').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat2').propertyGroup('Enu').addInput('temperature');
model.material('mat2').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat2').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat2').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat2').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat2').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat2').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat2').propertyGroup('Ludwik').addInput('temperature');
model.material('mat2').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat2').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat2').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat2').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat2').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat2').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat2').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat2').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat2').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat2').propertyGroup('Voce').addInput('temperature');
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat2').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat2').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat2').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat2').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat2').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat2').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat2').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat2').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat2').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat2').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat2').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat2').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat2').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat2').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');
model.material('mat1').selection.set([1 2 3 4]);
model.material('mat2').selection.set([5 6 7]);

model.mesh('mesh1').autoMeshSize(4);
model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size2').selection.named('sel4');
model.mesh('mesh1').feature('size2').set('hauto', 4);
model.mesh('mesh1').run;

model.multiphysics('fsip1').set('pairs', {'ap1' 'ap2'});

model.study('std1').feature('time').set('tlist', 'range(0,0.01,0.3) range(0.32,0.02,1)');
model.study('std1').feature('time').set('usertol', true);
model.study('std1').feature('time').set('rtol', 0.005);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u_solid').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.002958039891549809');
model.sol('sol1').feature('v1').feature('comp1_u_solid').set('scaleval', '1e-2*0.29580398915498085');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_disp').set('scaleval', '0.002958039891549809');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*0.29580398915498085');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.01,0.3) range(0.32,0.02,1)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_fsip1_vWall' 'global' 'comp1_p' 'scaled' 'comp1_spatial_disp' 'global' 'comp1_u_fluid' 'global' 'comp1_u_solid' 'global'  ...
'comp1_mbd_rd_disp' 'global' 'comp1_mbd_rd_rot' 'global' 'comp1_mbd_jnt_rot' 'global' 'comp1_mbd_att_disp' 'global' 'comp1_mbd_att_rot' 'global'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_fsip1_vWall' 'factor' 'comp1_p' 'factor' 'comp1_spatial_disp' 'factor' 'comp1_u_fluid' 'factor' 'comp1_u_solid' 'factor'  ...
'comp1_mbd_rd_disp' 'factor' 'comp1_mbd_rd_rot' 'factor' 'comp1_mbd_jnt_rot' 'factor' 'comp1_mbd_att_disp' 'factor' 'comp1_mbd_att_rot' 'factor'});
model.sol('sol1').feature('t1').set('atolfactor', {'comp1_fsip1_vWall' '0.1' 'comp1_p' '1' 'comp1_spatial_disp' '0.1' 'comp1_u_fluid' '0.1' 'comp1_u_solid' '0.1'  ...
'comp1_mbd_rd_disp' '0.1' 'comp1_mbd_rd_rot' '0.1' 'comp1_mbd_jnt_rot' '0.1' 'comp1_mbd_att_disp' '0.1' 'comp1_mbd_att_rot' '0.1'});
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('rhoinf', 0.5);
model.sol('sol1').feature('t1').set('predictor', 'constant');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('se1', 'Segregated');
model.sol('sol1').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_u_solid' 'comp1_mbd_rd_disp' 'comp1_mbd_rd_rot' 'comp1_mbd_jnt_rot' 'comp1_mbd_att_disp' 'comp1_mbd_att_rot'});
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subjtech', 'once');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').label('Multibody Dynamics');
model.sol('sol1').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_u_fluid' 'comp1_p' 'comp1_fsip1_vWall'});
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subjtech', 'once');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 100);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('linsolver', 'i1');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').label('Velocity U_fluid, Pressure p');
model.sol('sol1').feature('t1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subjtech', 'once');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subiter', 1);
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subtermconst', 'iter');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subntolfact', 0.1);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, spatial mesh displacement (spf)');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').label('Spatial Mesh Displacement');
model.sol('sol1').feature('t1').feature('se1').set('ntolfact', 0.5);
model.sol('sol1').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol1').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol1').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol1').feature('t1').feature('se1').set('segaaccdelay', 1);
model.sol('sol1').feature('t1').feature('se1').set('maxsegiter', 20);
model.sol('sol1').feature('t1').create('d2', 'Direct');
model.sol('sol1').feature('t1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d2').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol1').feature('t1').set('bwinitstepfrac', 0.01);
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subjtech', 'onevery');
model.sol('sol1').runFromTo('st1', 'v1');

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Velocity (spf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('slc1', 'Slice');
model.result('pg1').feature('slc1').label('Slice');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('smooth', 'internal');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([1 2 3 4 5 7 8 10 11 14 15 16 81 82 83 84]);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Pressure (spf)');
model.result('pg2').set('data', 'surf1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'surf1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond2/pcond1/pg4');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('expr', 'p');
model.result('pg2').feature('surf1').set('colortable', 'Dipole');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature('surf1').feature.create('tran1', 'Transparency');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Displacement (mbd)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').set('defaultPlotID', 'displacement');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('expr', 'mbd.disp');
model.result('pg3').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Velocity (mbd)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').set('defaultPlotID', 'velocity');
model.result('pg4').feature.create('vol1', 'Volume');
model.result('pg4').feature('vol1').label('Volume');
model.result('pg4').feature('vol1').set('expr', 'mod(dom,10)');
model.result('pg4').feature('vol1').set('unit', '1');
model.result('pg4').feature('vol1').set('colortable', 'Cyclic');
model.result('pg4').feature('vol1').set('colorlegend', false);
model.result('pg4').feature('vol1').set('data', 'parent');
model.result('pg4').feature.create('arwl1', 'ArrowLine');
model.result('pg4').feature('arwl1').label('Arrow Line');
model.result('pg4').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY' 'mbd.u_tZ'});
model.result('pg4').feature('arwl1').set('placement', 'elements');
model.result('pg4').feature('arwl1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').label('Moving Mesh');
model.result('pg5').create('mesh1', 'Mesh');
model.result('pg5').feature('mesh1').set('meshdomain', 'volume');
model.result('pg5').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg5').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg5').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg5').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg5').feature('mesh1').feature('sel1').selection.set([1 2 3 4 5 6 7]);
model.result('pg5').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg5').feature('mesh1').set('qualexpr', 'comp1.spatial.relVol');
model.result('pg5').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg1').run;

model.study('std1').feature('time').set('plot', true);
model.study('std1').feature('time').set('plotgroup', 'pg3');

model.sol('sol1').runAll;

model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 66, 0);
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 66, 0);
model.result('pg2').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 66, 0);
model.result('pg4').run;
model.result('pg4').feature('arwl1').set('scaleactive', true);
model.result('pg4').feature('arwl1').set('scale', 35);
model.result('pg4').feature('arwl1').set('placement', 'uniform');
model.result('pg4').feature('arwl1').set('arrowcount', 4000);
model.result('pg4').feature('arwl1').set('color', 'cyan');
model.result('pg4').run;
model.result('pg1').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').add('plotgroup', 'pg1');
model.nodeGroup('grp1').add('plotgroup', 'pg2');
model.nodeGroup('grp1').add('plotgroup', 'pg3');
model.nodeGroup('grp1').add('plotgroup', 'pg4');
model.nodeGroup('grp1').add('plotgroup', 'pg5');
model.nodeGroup('grp1').label('Default Plots');

model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').run;
model.result('pg6').label('Fluid Pressure (xy) & Solid Displacement');
model.result('pg6').setIndex('looplevel', 31, 0);
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').label('Solid Displacement');
model.result('pg6').feature('surf1').set('expr', 'mbd.disp');
model.result('pg6').feature('surf1').set('descr', 'Displacement magnitude');
model.result('pg6').feature('surf1').set('rangecoloractive', true);
model.result('pg6').feature('surf1').set('rangecolormax', 1.6);
model.result('pg6').feature('surf1').set('colortable', 'Twilight');
model.result('pg6').feature.duplicate('surf2', 'surf1');
model.result('pg6').run;
model.result('pg6').feature('surf2').label('Pressure');
model.result('pg6').feature('surf2').set('expr', 'p');
model.result('pg6').feature('surf2').set('descr', 'Pressure');
model.result('pg6').feature('surf2').set('rangecolormin', -1);
model.result('pg6').feature('surf2').set('rangecolormax', 1);
model.result('pg6').feature('surf2').set('colortable', 'Rainbow');
model.result('pg6').feature('surf2').create('sel1', 'Selection');
model.result('pg6').feature('surf2').feature('sel1').selection.set([6 13]);
model.result('pg6').run;
model.result('pg6').create('con1', 'Contour');
model.result('pg6').feature('con1').label('Pressure Contour');
model.result('pg6').feature('con1').set('expr', 'p');
model.result('pg6').feature('con1').set('descr', 'Pressure');
model.result('pg6').feature('con1').set('titletype', 'none');
model.result('pg6').feature('con1').set('coloring', 'uniform');
model.result('pg6').feature('con1').set('color', 'white');
model.result('pg6').feature('con1').set('colorlegend', false);
model.result('pg6').feature('con1').create('sel1', 'Selection');
model.result('pg6').feature('con1').feature('sel1').selection.set([6 13]);
model.result('pg6').run;
model.result('pg6').create('arws1', 'ArrowSurface');
model.result('pg6').feature('arws1').label('Fluid Velocity');
model.result('pg6').feature('arws1').set('scaleactive', true);
model.result('pg6').feature('arws1').set('scale', 20);
model.result('pg6').feature('arws1').set('arrowcount', 4000);
model.result('pg6').feature('arws1').create('sel1', 'Selection');
model.result('pg6').feature('arws1').feature('sel1').selection.set([6 13]);
model.result('pg6').run;
model.result('pg6').create('arwl1', 'ArrowLine');
model.result('pg6').feature('arwl1').label('Solid Velocity');
model.result('pg6').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY' 'mbd.u_tZ'});
model.result('pg6').feature('arwl1').set('descr', 'Velocity');
model.result('pg6').feature('arwl1').set('scaleactive', true);
model.result('pg6').feature('arwl1').set('scale', 35);
model.result('pg6').feature('arwl1').set('arrowcount', 50);
model.result('pg6').feature('arwl1').set('color', 'magenta');
model.result('pg6').feature('arwl1').create('sel1', 'Selection');
model.result('pg6').feature('arwl1').feature('sel1').selection.set([185 188 228 249 256 261 266 269]);
model.result('pg6').run;

model.view('view1').set('scenelight', false);
model.view('view1').set('locked', true);
model.view('view1').camera.set('zoomanglefull', 4.555179119110107);
model.view('view1').camera.setIndex('position', -110.42815399169922, 0);
model.view('view1').camera.setIndex('position', -89.36772918701172, 1);
model.view('view1').camera.setIndex('position', 63.817283630371094, 2);
model.view('view1').camera.set('target', [0.190216064453125 0 0]);
model.view('view1').camera.setIndex('target', -0.6639022827148438, 1);
model.view('view1').camera.setIndex('target', 0.473834991455078, 2);
model.view('view1').camera.setIndex('up', 0.26122915744781494, 0);
model.view('view1').camera.setIndex('up', 0.323639690876007, 1);
model.view('view1').camera.setIndex('up', 0.9094046354293823, 2);
model.view('view1').camera.set('rotationpoint', [-3.6804275512695312 0 0]);
model.view('view1').camera.setIndex('rotationpoint', -1.3210906982421875, 1);
model.view('view1').camera.setIndex('rotationpoint', 0.5523796081542969, 2);
model.view('view1').camera.setIndex('viewoffset', 0.1, 0);
model.view('view1').camera.set('viewoffset', [0.1 0.14]);

model.result('pg6').run;
model.result('pg6').set('view', 'view1');
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 21, 0);
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 26, 0);
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 41, 0);
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 66, 0);
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 31, 0);
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Fluid Pressure (xz) & Solid Displacement');
model.result('pg7').run;
model.result('pg7').feature('surf2').feature('sel1').selection.set([9 12]);
model.result('pg7').run;
model.result('pg7').feature('con1').feature('sel1').selection.set([9 12]);
model.result('pg7').run;
model.result('pg7').feature('arws1').set('scale', 100);
model.result('pg7').run;
model.result('pg7').feature('arws1').feature('sel1').selection.set([9 12]);
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').run;
model.result('pg8').label('Deformed Mesh');
model.result('pg8').set('frametype', 'spatial');
model.result('pg8').create('mesh1', 'Mesh');
model.result('pg8').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg8').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg8').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg8').feature('mesh1').set('meshdomain', 'volume');
model.result('pg8').feature('mesh1').set('elemcolor', 'gray');
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').setIndex('looplevel', 1, 0);
model.result('pg8').run;
model.result('pg8').setIndex('looplevel', 66, 0);
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').create('glob1', 'Global');
model.result('pg9').feature('glob1').set('markerpos', 'datapoints');
model.result('pg9').feature('glob1').set('linewidth', 'preference');
model.result('pg9').feature('glob1').label('Fin Rotation');
model.result('pg9').feature('glob1').setIndex('expr', 'th*180/pi', 0);
model.result('pg9').feature('glob1').setIndex('descr', 'Fin Rotation', 0);
model.result('pg9').feature.duplicate('glob2', 'glob1');
model.result('pg9').run;
model.result('pg9').feature('glob2').label('Forward velocity');
model.result('pg9').feature('glob2').setIndex('expr', 'mbd.rd1.u_tx', 0);
model.result('pg9').feature('glob2').setIndex('unit', 'cm/s', 0);
model.result('pg9').feature('glob2').setIndex('descr', 'Forward Velocity', 0);
model.result('pg9').feature('glob2').set('linestyle', 'dashed');
model.result('pg9').run;
model.result('pg9').label('Fin Rotation & Velocity');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Fin Rotation (deg)');
model.result('pg9').set('twoyaxes', true);
model.result('pg9').setIndex('plotonsecyaxis', true, 1, 1);
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').label('Fluid Pressure (xy) & Solid Displacement');
model.result.export('anim1').set('plotgroup', 'pg6');
model.result.export.duplicate('anim2', 'anim1');
model.result.export('anim2').showFrame;
model.result.export('anim2').label('Fluid Pressure (xz) & Solid Displacement');
model.result.export('anim2').set('plotgroup', 'pg7');
model.result.export.duplicate('anim3', 'anim2');
model.result.export('anim3').showFrame;
model.result.export('anim3').label('Deformed Mesh');
model.result.export('anim3').set('plotgroup', 'pg8');
model.result('pg6').run;

model.title('Mechanism Submerged in Fluid');

model.description(['This example illustrates the modeling of a multibody mechanism submerged in fluid. The mechanism considered here consists of two fins connected to a central rigid body through hinge joints. A transient fluid' native2unicode(hex2dec({'20' '13'}), 'unicode') 'structure interaction problem is solved to simulate the swimming behavior where fin rotation generates a forward velocity in the mechanism.' newline  newline 'The fluid' native2unicode(hex2dec({'20' '13'}), 'unicode') 'structure interaction is modeled on the pairs between the fluid and solid boundaries. A bidirectional coupling is assumed between the fluid flow and the multibody model of the mechanism.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('mechanism_submerged_in_fluid.mph');

model.modelNode.label('Components');

out = model;
