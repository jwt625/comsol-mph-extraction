function out = model
%
% nonlinear_acoustics_westervelt_1d.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Nonlinear_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 1);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('actd', 'TransientPressureAcoustics', 'geom1');
model.physics('actd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/actd', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('P0', '5e6[Pa]', 'Source pressure amplitude');
model.param.set('v0', 'P0/(rho0*c0)', 'Source velocity amplitude');
model.param.set('f0', '1e5[Hz]', 'Source frequency');
model.param.set('T0', '1/f0', 'Source period');
model.param.set('omega0', '2*pi*f0', 'Angular frequency');
model.param.set('beta', '10', 'Coefficient of nonlinearity');
model.param.set('c0', '1481.44[m/s]', 'Speed of sound');
model.param.set('rho0', '999.6[kg/m^3]', 'Density');
model.param.set('mu0', '1.0016e-3[Pa*s]', 'Viscosity');
model.param.set('d_diff', '4/3*mu0/rho0', 'Diffusivity of sound');
model.param.set('Gamma', '2*beta*P0/(omega0*rho0*d_diff)', 'Goldberg number');
model.param.set('x_sh', 'rho0*c0^3/(beta*P0*omega0)', 'Shock formation distance');
model.param.set('L', '4.5*x_sh', 'Computational domain length');
model.param.set('Nt', 'ceil(L/(c0*T0))', 'Number of cycles');
model.param.set('N0', '8', 'Number of harmonics to resolve');

model.func.create('an1', 'Analytic');
model.func('an1').set('funcname', 'Pn_fubini');
model.func('an1').set('expr', '1/n*besselj(n, n*sigma)*sin(n*omega0*(t - sigma*x_sh/c0))');
model.func('an1').set('args', 'sigma, t, n');
model.func('an1').setIndex('argunit', 1, 0);
model.func('an1').setIndex('argunit', 's', 1);
model.func('an1').setIndex('argunit', 1, 2);
model.func('an1').set('fununit', '1');
model.func.create('an2', 'Analytic');
model.func('an2').set('funcname', 'Pn_fay');
model.func('an2').set('expr', '1/sinh(n*(sigma + 1)/Gamma)*sin(n*omega0*(t - sigma*x_sh/c0))');
model.func('an2').set('args', 'sigma, t, n');
model.func('an2').setIndex('argunit', 1, 0);
model.func('an2').setIndex('argunit', 's', 1);
model.func('an2').setIndex('argunit', 1, 2);
model.func('an2').set('fununit', '1');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').set('sigma', 'x/x_sh');
model.variable('var1').descr('sigma', 'Relative distance');
model.variable('var1').set('p_fubini', '2*P0/sigma*sum(Pn_fubini(sigma, t, n), n, 1, 100)');
model.variable('var1').descr('p_fubini', 'Fubini solution');
model.variable('var1').set('p_fay', '2*P0/Gamma*sum(Pn_fay(sigma, t, n), n, 1, 100)');
model.variable('var1').descr('p_fay', 'Fay solution');
model.variable('var1').set('p_linear', 'P0*sin(omega0*(t - x/c0))');
model.variable('var1').descr('p_linear', 'Linear solution');

model.geom('geom1').create('i1', 'Interval');
model.geom('geom1').feature('i1').setIndex('coord', 'L', 1);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.physics('actd').prop('TransientSettings').set('fmax', 'N0*f0');
model.physics('actd').feature('tpam1').set('FluidModel', 'GeneralDissipation');
model.physics('actd').feature('tpam1').set('c_mat', 'userdef');
model.physics('actd').feature('tpam1').set('c', 'c0');
model.physics('actd').feature('tpam1').set('rho_mat', 'userdef');
model.physics('actd').feature('tpam1').set('rho', 'rho0');
model.physics('actd').feature('tpam1').set('delta_diff_mat', 'userdef');
model.physics('actd').feature('tpam1').set('delta_diff', 'd_diff');
model.physics('actd').create('nlaw1', 'NonlinearAcousticsWestervelt', 1);
model.physics('actd').feature('nlaw1').selection.set([1]);
model.physics('actd').feature('nlaw1').set('MaterialDataOption', 'beta');
model.physics('actd').feature('nlaw1').set('beta', 'beta');
model.physics('actd').feature('nlaw1').set('qLaplacianRelaxation', true);
model.physics('actd').feature('nlaw1').set('q', 1.35);
model.physics('actd').feature('nlaw1').set('kappa', 0.01);
model.physics('actd').create('pr1', 'Pressure', 0);
model.physics('actd').feature('pr1').selection.set([1]);
model.physics('actd').feature('pr1').set('p0', 'P0*sin(omega0*t)');
model.physics('actd').create('pwr1', 'PlaneWaveRadiation', 0);
model.physics('actd').feature('pwr1').selection.set([2]);
model.physics('actd').prop('MeshControl').set('ElementsPerWavelength', 'UserDefined');
model.physics('actd').prop('MeshControl').set('nperlambda', 6);

model.mesh('mesh1').run;

model.study('std1').feature('time').set('tlist', 'range(0,T0/50,Nt*T0)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,T0/50,Nt*T0)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 1.0E-4);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsgenalpha', 'manual');
model.sol('sol1').feature('t1').set('timestepgenalpha', '1/(60*N0*f0)');
model.sol('sol1').feature('t1').set('timestepbdf', '1/(60*N0*f0)');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('timemethod', 'genalpha');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('initialstepbdfactive', true);
model.sol('sol1').feature('t1').set('initialstepbdf', '1/(100*N0*f0)');
model.sol('sol1').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol1').feature('t1').set('maxstepbdf', 'min(1e100,1/(30*N0*f0))');
model.sol('sol1').feature('t1').set('initialstepgenalphaactive', true);
model.sol('sol1').feature('t1').set('initialstepgenalpha', '1/(100*N0*f0)');
model.sol('sol1').feature('t1').set('maxstepconstraintgenalpha', 'const');
model.sol('sol1').feature('t1').set('maxstepgenalpha', 'min(1e100,1/(30*N0*f0))');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('initstep', 1);
model.sol('sol1').feature('t1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('t1').feature('fc1').set('useminsteprecovery', 'off');
model.sol('sol1').feature('t1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 4);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('initstep', 1);
model.sol('sol1').feature('t1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('t1').feature('fc1').set('useminsteprecovery', 'off');
model.sol('sol1').feature('t1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 4);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').create('lngr1', 'LineGraph');
model.result('pg1').feature('lngr1').set('xdata', 'expr');
model.result('pg1').feature('lngr1').set('xdataexpr', 'x');
model.result('pg1').feature('lngr1').selection.geom('geom1', 1);
model.result('pg1').feature('lngr1').selection.set([1]);
model.result('pg1').feature('lngr1').set('expr', {'actd.p_t'});
model.result('pg1').label('Acoustic Pressure (actd)');
model.result('pg1').run;
model.result('pg1').setIndex('looplevelinput', 'last', 0);
model.result('pg1').set('xlabelactive', true);
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'Pressure (Pa)');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Total acoustic pressure field (Pa)');
model.result('pg1').run;
model.result('pg1').feature('lngr1').set('legend', true);
model.result('pg1').feature('lngr1').set('legendmethod', 'manual');
model.result('pg1').feature('lngr1').setIndex('legends', 'Nonlinear solution', 0);
model.result('pg1').run;
model.result('pg1').create('lngr2', 'LineGraph');
model.result('pg1').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg1').feature('lngr2').set('linewidth', 'preference');
model.result('pg1').feature('lngr2').selection.set([1]);
model.result('pg1').feature('lngr2').set('expr', 'p_linear');
model.result('pg1').feature('lngr2').set('legend', true);
model.result('pg1').feature('lngr2').set('legendmethod', 'manual');
model.result('pg1').feature('lngr2').setIndex('legends', 'Linear solution', 0);
model.result('pg1').feature('lngr2').set('xdata', 'expr');
model.result('pg1').feature('lngr2').set('xdataexpr', 'x');
model.result('pg1').run;
model.result('pg1').create('lngr3', 'LineGraph');
model.result('pg1').feature('lngr3').set('markerpos', 'datapoints');
model.result('pg1').feature('lngr3').set('linewidth', 'preference');
model.result('pg1').feature('lngr3').selection.set([1]);
model.result('pg1').feature('lngr3').set('xdata', 'expr');
model.result('pg1').feature('lngr3').set('xdataexpr', 'x_sh');
model.result('pg1').feature('lngr3').set('linewidth', 2);
model.result('pg1').feature('lngr3').set('legend', true);
model.result('pg1').feature('lngr3').set('legendmethod', 'manual');
model.result('pg1').feature('lngr3').setIndex('legends', 'Shock formation distance', 0);
model.result('pg1').run;
model.result.dataset.create('cpt1', 'CutPoint1D');
model.result.dataset('cpt1').set('pointx', '0.5*x_sh');
model.result.dataset('cpt1').label('Cut Point - 0.5 Shock');
model.result.dataset.create('cpt2', 'CutPoint1D');
model.result.dataset('cpt2').set('pointx', 'x_sh');
model.result.dataset('cpt2').label('Cut Point - 1 Shock');
model.result.dataset.create('cpt3', 'CutPoint1D');
model.result.dataset('cpt3').set('pointx', '3.5*x_sh');
model.result.dataset('cpt3').label('Cut Point - 3.5 Shock');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Acoustic Pressure at sigma = 0.5');
model.result('pg2').set('data', 'cpt1');
model.result('pg2').setIndex('looplevelinput', 'interp', 0);
model.result('pg2').setIndex('interp', 'range((Nt - 5)*T0, T0/50, Nt*T0)', 0);
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Pressure (Pa)');
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Comparison to analytical solution at sigma = 0.5');
model.result('pg2').create('ptgr1', 'PointGraph');
model.result('pg2').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg2').feature('ptgr1').set('linewidth', 'preference');
model.result('pg2').feature('ptgr1').set('legend', true);
model.result('pg2').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg2').feature('ptgr1').setIndex('legends', 'Model', 0);
model.result('pg2').run;
model.result('pg2').create('ptgr2', 'PointGraph');
model.result('pg2').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg2').feature('ptgr2').set('linewidth', 'preference');
model.result('pg2').feature('ptgr2').set('expr', 'p_fubini');
model.result('pg2').feature('ptgr2').set('legend', true);
model.result('pg2').feature('ptgr2').set('legendmethod', 'manual');
model.result('pg2').feature('ptgr2').setIndex('legends', 'Fubini solution', 0);
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Acoustic Pressure at sigma = 1');
model.result('pg3').set('data', 'cpt2');
model.result('pg3').setIndex('looplevelinput', 'interp', 0);
model.result('pg3').setIndex('interp', 'range((Nt - 5)*T0, T0/50, Nt*T0)', 0);
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'Pressure (Pa)');
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Comparison to analytical solution at sigma = 1');
model.result('pg3').create('ptgr1', 'PointGraph');
model.result('pg3').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg3').feature('ptgr1').set('linewidth', 'preference');
model.result('pg3').feature('ptgr1').set('legend', true);
model.result('pg3').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg3').feature('ptgr1').setIndex('legends', 'Model', 0);
model.result('pg3').run;
model.result('pg3').create('ptgr2', 'PointGraph');
model.result('pg3').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg3').feature('ptgr2').set('linewidth', 'preference');
model.result('pg3').feature('ptgr2').set('expr', 'p_fubini');
model.result('pg3').feature('ptgr2').set('legend', true);
model.result('pg3').feature('ptgr2').set('legendmethod', 'manual');
model.result('pg3').feature('ptgr2').setIndex('legends', 'Fubini solution', 0);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Acoustic Pressure at sigma = 3.5');
model.result('pg4').set('data', 'cpt3');
model.result('pg4').setIndex('looplevelinput', 'interp', 0);
model.result('pg4').setIndex('interp', 'range((Nt - 5)*T0, T0/50, Nt*T0)', 0);
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'Pressure (Pa)');
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('title', 'Comparison to analytical solution at sigma = 3.5');
model.result('pg4').create('ptgr1', 'PointGraph');
model.result('pg4').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg4').feature('ptgr1').set('linewidth', 'preference');
model.result('pg4').feature('ptgr1').set('legend', true);
model.result('pg4').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg4').feature('ptgr1').setIndex('legends', 'Model', 0);
model.result('pg4').run;
model.result('pg4').create('ptgr2', 'PointGraph');
model.result('pg4').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg4').feature('ptgr2').set('linewidth', 'preference');
model.result('pg4').feature('ptgr2').set('expr', 'p_fay');
model.result('pg4').feature('ptgr2').set('legend', true);
model.result('pg4').feature('ptgr2').set('legendmethod', 'manual');
model.result('pg4').feature('ptgr2').setIndex('legends', 'Fay solution', 0);
model.result('pg4').run;
model.result('pg2').run;
model.result.duplicate('pg5', 'pg2');
model.result('pg5').run;
model.result('pg5').label('Acoustic Pressure Spectrum at sigma = 0.5');
model.result('pg5').set('title', 'Frequency spectrum at sigma = 0.5');
model.result('pg5').set('xlog', true);
model.result('pg5').run;
model.result('pg5').feature('ptgr1').set('xdata', 'fourier');
model.result('pg5').feature('ptgr1').set('fouriershow', 'spectrum');
model.result('pg5').feature('ptgr1').set('scale', 'multiplyperiod');
model.result('pg5').run;
model.result('pg5').feature('ptgr2').set('xdata', 'fourier');
model.result('pg5').feature('ptgr2').set('fouriershow', 'spectrum');
model.result('pg5').feature('ptgr2').set('scale', 'multiplyperiod');
model.result('pg5').feature('ptgr2').set('linestyle', 'none');
model.result('pg5').feature('ptgr2').set('linemarker', 'point');
model.result('pg5').run;
model.result('pg3').run;
model.result.duplicate('pg6', 'pg3');
model.result('pg6').run;
model.result('pg6').label('Acoustic Pressure Spectrum at sigma = 1');
model.result('pg6').set('title', 'Frequency spectrum at sigma = 1');
model.result('pg6').set('xlog', true);
model.result('pg6').run;
model.result('pg6').feature('ptgr1').set('xdata', 'fourier');
model.result('pg6').feature('ptgr1').set('fouriershow', 'spectrum');
model.result('pg6').feature('ptgr1').set('scale', 'multiplyperiod');
model.result('pg6').run;
model.result('pg6').feature('ptgr2').set('xdata', 'fourier');
model.result('pg6').feature('ptgr2').set('fouriershow', 'spectrum');
model.result('pg6').feature('ptgr2').set('scale', 'multiplyperiod');
model.result('pg6').feature('ptgr2').set('linestyle', 'none');
model.result('pg6').feature('ptgr2').set('linemarker', 'point');
model.result('pg6').run;
model.result('pg4').run;
model.result.duplicate('pg7', 'pg4');
model.result('pg7').run;
model.result('pg7').label('Acoustic Pressure Spectrum at sigma = 3.5');
model.result('pg7').set('title', 'Frequency spectrum at sigma = 3.5');
model.result('pg7').set('xlog', true);
model.result('pg7').run;
model.result('pg7').feature('ptgr1').set('xdata', 'fourier');
model.result('pg7').feature('ptgr1').set('fouriershow', 'spectrum');
model.result('pg7').feature('ptgr1').set('scale', 'multiplyperiod');
model.result('pg7').run;
model.result('pg7').feature('ptgr2').set('xdata', 'fourier');
model.result('pg7').feature('ptgr2').set('fouriershow', 'spectrum');
model.result('pg7').feature('ptgr2').set('scale', 'multiplyperiod');
model.result('pg7').feature('ptgr2').set('linestyle', 'none');
model.result('pg7').feature('ptgr2').set('linemarker', 'point');
model.result('pg7').run;
model.result('pg1').run;
model.result.duplicate('pg8', 'pg1');
model.result('pg8').run;
model.result('pg8').label('Acoustic Pressure (actd), zoomed');
model.result('pg8').set('showlegends', false);
model.result('pg8').set('axislimits', true);
model.result('pg8').set('xmin', 0.065);
model.result('pg8').set('xmax', 0.165);
model.result('pg8').run;

model.title(['Nonlinear Acoustics ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Modeling of the 1D Westervelt Equation']);

model.description('This example shows how to model the transient nonlinear propagation of finite-amplitude acoustic waves in fluids using the Acoustics Module. The Pressure Acoustics, Transient interface solves the Westervelt equation which is an approximation to the full 2nd-order nonlinear wave equation when cumulative nonlinear effects dominate local nonlinear effects. The example simulates a finite-amplitude wave propagating in 1D over the distance much larger than the shock-formation distance. The computed numerical solution is compared to the analytical solutions available before and after the shock-formation.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('nonlinear_acoustics_westervelt_1d.mph');

model.modelNode.label('Components');

out = model;
