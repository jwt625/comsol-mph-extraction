function out = model
%
% geared_rotors.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Rotordynamics_Module/Automotive_and_Aerospace');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('rotsld', 'SolidRotor', 'geom1');
model.physics('rotsld').model('comp1');

model.study.create('std1');
model.study('std1').create('eig', 'Eigenfrequency');
model.study('std1').feature('eig').setSolveFor('/physics/rotsld', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('n1', '20', 'Number of teeth, gear-1');
model.param.set('d1', '100[mm]', 'Pitch diameter, gear-1');
model.param.set('n2', '30', 'Number of teeth, gear-2');
model.param.set('d2', '150[mm]', 'Pitch diameter, gear-2');
model.param.set('alpha', '25[deg]', 'Pressure angle');
model.param.set('beta', '30[deg]', 'Helix angle');
model.param.set('gr', 'n2/n1', 'Gear ratio');
model.param.set('kg', '2e6[N/m]', 'Gear mesh stiffness');
model.param.set('kb', '1e7[N/m]', 'Bearing stiffness');
model.param.set('omega', '1500[rpm]', 'Angular speed of driver shaft');
model.param.set('Text', '1e2[N*m]', 'Resisting torque on driven shaft');
model.param.set('t_end', '1.5/omega', 'Total simulation time');

model.func.create('step1', 'Step');
model.func('step1').model('comp1');
model.func('step1').set('location', 't_end/12');
model.func('step1').set('smooth', 't_end/6');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'geared_rotors.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('createpairs', false);
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.physics('rotsld').prop('RotorProperties').set('rpt', 'omega');
model.physics('rotsld').feature('raxi1').feature('fsup1').selection.set([97 98]);
model.physics('rotsld').feature('raxi1').feature('ssup1').selection.set([119 120]);
model.physics('rotsld').create('raxi2', 'RotorAxis', 3);
model.physics('rotsld').feature('raxi2').selection.set([5 6 7]);
model.physics('rotsld').feature('raxi2').feature('fsup1').selection.set([744 756]);
model.physics('rotsld').feature('raxi2').feature('ssup1').selection.set([749 761]);
model.physics('rotsld').create('raxi3', 'RotorAxis', 3);
model.physics('rotsld').feature('raxi3').selection.set([3 4]);
model.physics('rotsld').feature('raxi3').feature('fsup1').selection.set([355 363]);
model.physics('rotsld').feature('raxi3').feature('ssup1').selection.set([358 366]);
model.physics('rotsld').create('rsp1', 'RotorSpeed', 3);
model.physics('rotsld').feature('rsp1').selection.set([5 6 7]);
model.physics('rotsld').feature('rsp1').set('rpt', '-omega/gr');
model.physics('rotsld').create('rsp2', 'RotorSpeed', 3);
model.physics('rotsld').feature('rsp2').selection.set([3 4]);
model.physics('rotsld').feature('rsp2').set('rpt', 'omega/gr^2');
model.physics('rotsld').feature('far1').selection.set([57]);
model.physics('rotsld').feature('far1').set('useWeakConstraints', true);
model.physics('rotsld').create('hlg1', 'HelicalGear', 3);
model.physics('rotsld').feature('hlg1').selection.set([1]);
model.physics('rotsld').feature('hlg1').set('nt', 'n1');
model.physics('rotsld').feature('hlg1').set('dp', 'd1');
model.physics('rotsld').feature('hlg1').set('alpha', 'alpha');
model.physics('rotsld').feature('hlg1').set('beta', 'beta');
model.physics('rotsld').feature('hlg1').set('CenterOfRotationType', 'CentroidOfSelectedEntities');
model.physics('rotsld').feature('hlg1').set('EntityLevel', 'Point');
model.physics('rotsld').feature('hlg1').feature('crp1').selection.set([101 115]);
model.physics('rotsld').feature.duplicate('hlg2', 'hlg1');
model.physics('rotsld').feature('hlg2').selection.set([5]);
model.physics('rotsld').feature('hlg2').set('nt', 'n2');
model.physics('rotsld').feature('hlg2').set('dp', 'd2');
model.physics('rotsld').feature('hlg2').set('beta', '-beta');
model.physics('rotsld').feature('hlg2').feature('crp1').selection.set([747 760]);
model.physics('rotsld').feature.duplicate('hlg3', 'hlg1');
model.physics('rotsld').feature('hlg3').selection.set([6]);
model.physics('rotsld').feature('hlg3').feature('crp1').selection.set([745 758]);
model.physics('rotsld').feature.duplicate('hlg4', 'hlg2');
model.physics('rotsld').feature('hlg4').selection.set([3]);
model.physics('rotsld').feature('hlg4').feature('crp1').selection.set([357 364]);
model.physics('rotsld').create('grp1', 'GearPair', -1);
model.physics('rotsld').feature('grp1').set('Wheel', 'hlg1');
model.physics('rotsld').feature('grp1').set('Pinion', 'hlg2');
model.physics('rotsld').feature('grp1').set('IncludeGearElasticity', true);
model.physics('rotsld').feature('grp1').feature('gel1').set('Specify', 'GearPair');
model.physics('rotsld').feature('grp1').feature('gel1').set('km_dr', 'kg');
model.physics('rotsld').create('grp2', 'GearPair', -1);
model.physics('rotsld').feature('grp2').set('Wheel', 'hlg3');
model.physics('rotsld').feature('grp2').set('Pinion', 'hlg4');
model.physics('rotsld').feature('grp2').set('IncludeGearElasticity', true);
model.physics('rotsld').feature('grp2').feature('gel1').set('Specify', 'GearPair');
model.physics('rotsld').feature('grp2').feature('gel1').set('km_dr', 'kg');
model.physics('rotsld').create('jrb1', 'JournalBearing', 2);
model.physics('rotsld').feature('jrb1').selection.set([52]);
model.physics('rotsld').feature('jrb1').set('e_aux', [1 0 0]);
model.physics('rotsld').feature('jrb1').set('BearingModel', 'kTot');
model.physics('rotsld').feature('jrb1').set('k_u', {'kb' '0' '0' 'kb'});
model.physics('rotsld').feature.duplicate('jrb2', 'jrb1');
model.physics('rotsld').feature('jrb2').selection.set([57]);
model.physics('rotsld').feature('jrb2').set('constrainAxialMotion', false);
model.physics('rotsld').feature.duplicate('jrb3', 'jrb2');
model.physics('rotsld').feature('jrb3').selection.set([397]);
model.physics('rotsld').feature('jrb3').set('constrainAxialMotion', true);
model.physics('rotsld').feature.duplicate('jrb4', 'jrb3');
model.physics('rotsld').feature('jrb4').selection.set([406]);
model.physics('rotsld').feature('jrb4').set('constrainAxialMotion', false);
model.physics('rotsld').feature.duplicate('jrb5', 'jrb4');
model.physics('rotsld').feature('jrb5').selection.set([191]);
model.physics('rotsld').feature.duplicate('jrb6', 'jrb5');
model.physics('rotsld').feature('jrb6').selection.set([196]);
model.physics('rotsld').feature('jrb6').set('constrainAxialMotion', true);
model.physics('rotsld').create('atq1', 'AppliedTorque', 2);
model.physics('rotsld').feature('atq1').selection.set([191]);
model.physics('rotsld').feature('atq1').set('Tax', 'Text*step1(t)');

model.mesh('mesh1').autoMeshSize(6);
model.mesh('mesh1').run;

model.study('std1').label('Study 1: Eigenfrequency');
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'n1', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'n1', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'omega', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(0,500,9000)', 0);
model.study('std1').feature('param').setIndex('punit', 'rpm', 0);
model.study('std1').feature('eig').set('neigsactive', true);
model.study('std1').feature('eig').set('neigs', 10);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'eig');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_rotsld_gr_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_rotsld_gr_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_rotsld_gr_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_rotsld_gr_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_rotsld_gr_disp').set('scaleval', '0.005774915945205242');
model.sol('sol1').feature('v1').feature('comp1_rotsld_gr_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.5774915945205241');
model.sol('sol1').feature('v1').set('control', 'eig');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('control', 'eig');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'omega'});
model.batch('p1').set('plistarr', {'range(0,500,9000)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.dataset.create('cln1', 'CutLine3D');
model.result.dataset('cln1').label('Axis');
model.result.dataset('cln1').set('data', 'none');
model.result.dataset('cln1').set('genpoints', {'comp1.rotsld.raxi1.r1x' 'comp1.rotsld.raxi1.r1y' 'comp1.rotsld.raxi1.r1z'; 'comp1.rotsld.raxi1.r2x' 'comp1.rotsld.raxi1.r2y' 'comp1.rotsld.raxi1.r2z'});
model.result.dataset('cln1').set('bounded', false);
model.result.dataset('cln1').set('data', 'dset2');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Mode Shape (rotsld)');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 19, 1);
model.result('pg1').set('showlegends', 'off');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 19, 1);
model.result('pg1').set('defaultPlotID', 'modeShape');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Whirl (rotsld)');
model.result('pg2').set('data', 'cln1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').setIndex('looplevel', 19, 1);
model.result('pg2').set('showlegends', 'off');
model.result('pg2').set('data', 'cln1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').setIndex('looplevel', 19, 1);
model.result('pg2').set('defaultPlotID', 'whirl');
model.result('pg2').feature.create('wp1', 'Whirl');
model.result('pg2').feature('wp1').set('nrings', 10);
model.result('pg2').feature('wp1').set('colortable', 'TrafficLight');
model.result('pg2').feature('wp1').set('smooth', 'internal');
model.result('pg2').feature('wp1').set('data', 'parent');
model.result.evaluationGroup.create('std1EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std1EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_rotsld');
model.result.evaluationGroup('std1EvgFrq').set('data', 'dset2');
model.result.evaluationGroup('std1EvgFrq').label('Eigenfrequencies (Study 1: Eigenfrequency)');
model.result.evaluationGroup('std1EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std1EvgFrq').run;
model.result('pg1').run;
model.result('pg1').set('looplevel', [2 19]);
model.result('pg1').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').set('data', 'dset2');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('unit', {''});
model.result('pg3').feature('glob1').set('expr', {'rotsld.omega'});
model.result('pg3').feature('glob1').set('descr', {'Angular frequency'});
model.result('pg3').feature('glob1').set('xdata', 'expr');
model.result('pg3').feature('glob1').set('xdataexpr', 'rotsld.Ovg');
model.result('pg3').feature('glob1').set('xdataunit', 'rad/s');
model.result('pg3').feature('glob1').label('Forward Whirl Mode');
model.result('pg3').feature('glob1').set('linestyle', 'dotted');
model.result('pg3').feature('glob1').set('linecolor', 'blue');
model.result('pg3').feature('glob1').set('linewidth', 3);
model.result('pg3').feature('glob1').set('legend', false);
model.result('pg3').feature('glob1').set('xdatasolnumtype', 'outer');
model.result('pg3').feature('glob1').create('gmrk1', 'GraphMarker');
model.result('pg3').feature('glob1').feature('gmrk1').set('displaymode', 'intersection');
model.result('pg3').feature('glob1').feature('gmrk1').set('intersectionline', 'horizontal');
model.result('pg3').feature('glob1').feature('gmrk1').set('intersectiony', 0);
model.result('pg3').feature('glob1').feature('gmrk1').set('precision', 4);
model.result('pg3').feature('glob1').feature('gmrk1').set('labelprefix', 'f: ');
model.result('pg3').feature('glob1').feature('gmrk1').set('pointradius', 4);
model.result('pg3').feature('glob1').feature('gmrk1').set('color', 'custom');
model.result('pg3').feature('glob1').feature('gmrk1').set('customcolor', [1 0.501960813999176 0.250980406999588]);
model.result('pg3').feature('glob1').feature('gmrk1').set('anchorpoint', 'lowermiddle');
model.result('pg3').set('defaultPlotID', 'campbellRotatingFrame');
model.result('pg3').label('Campbell Plot, Rotating Frame (rotsld)');
model.result('pg3').create('glob2', 'Global');
model.result('pg3').feature('glob2').set('expr', {'if(rotsld.i_sd<0,rotsld.omega,NaN)'});
model.result('pg3').feature('glob2').set('xdata', 'expr');
model.result('pg3').feature('glob2').set('xdataexpr', 'rotsld.Ovg');
model.result('pg3').feature('glob2').set('xdataunit', 'rad/s');
model.result('pg3').feature('glob2').set('linestyle', 'dotted');
model.result('pg3').feature('glob2').set('linecolor', 'blue');
model.result('pg3').feature('glob2').set('linewidth', 1);
model.result('pg3').feature('glob2').set('linemarker', 'asterisk');
model.result('pg3').feature('glob2').set('markerpos', 'datapoints');
model.result('pg3').feature('glob2').set('legend', false);
model.result('pg3').feature('glob2').label('Backward Whirl Mode');
model.result('pg3').feature('glob2').set('xdatasolnumtype', 'outer');
model.result('pg3').feature('glob2').create('gmrk1', 'GraphMarker');
model.result('pg3').feature('glob2').feature('gmrk1').set('displaymode', 'intersection');
model.result('pg3').feature('glob2').feature('gmrk1').set('intersectionline', 'general');
model.result('pg3').feature('glob2').feature('gmrk1').set('generalcoeffc', 0);
model.result('pg3').feature('glob2').feature('gmrk1').set('generalcoeffa', -2);
model.result('pg3').feature('glob2').feature('gmrk1').set('generalcoeffb', 1);
model.result('pg3').feature('glob2').feature('gmrk1').set('includexcoord', false);
model.result('pg3').feature('glob2').feature('gmrk1').set('precision', 4);
model.result('pg3').feature('glob2').feature('gmrk1').set('labelprefix', 'b: ');
model.result('pg3').feature('glob2').feature('gmrk1').set('pointradius', 4);
model.result('pg3').feature('glob2').feature('gmrk1').set('color', 'custom');
model.result('pg3').feature('glob2').feature('gmrk1').set('customcolor', [0.7490196228027344 0.1411764770746231 0.3686274588108063]);
model.result('pg3').feature('glob2').feature('gmrk1').set('anchorpoint', 'uppermiddle');
model.result('pg3').create('glob3', 'Global');
model.result('pg3').feature('glob3').set('expr', {'if(rotsld.Ovg<=1.4*rotsld.omega,2*rotsld.Ovg,NaN)'});
model.result('pg3').feature('glob3').set('data', 'dset2');
model.result('pg3').feature('glob3').set('xdata', 'expr');
model.result('pg3').feature('glob3').set('xdataexpr', 'rotsld.Ovg');
model.result('pg3').feature('glob3').set('xdataunit', 'rad/s');
model.result('pg3').feature('glob3').set('linecolor', 'red');
model.result('pg3').feature('glob3').set('linewidth', 3);
model.result('pg3').feature('glob3').label('omega=2*Omega');
model.result('pg3').feature('glob3').set('xdatasolnumtype', 'outer');
model.result('pg3').feature('glob3').set('solutionparams', 'manual');
model.result('pg3').feature('glob3').setIndex('looplevelinput', 'last', 0);
model.result('pg3').feature('glob3').set('legend', true);
model.result('pg3').feature('glob3').set('legendmethod', 'manual');
model.result('pg3').feature('glob3').setIndex('legends', '\omega=2\Omega', 0);
model.result('pg3').create('glob4', 'Global');
model.result('pg3').feature('glob4').set('expr', {'0'});
model.result('pg3').feature('glob4').set('data', 'dset2');
model.result('pg3').feature('glob4').set('xdata', 'expr');
model.result('pg3').feature('glob4').set('xdataexpr', 'rotsld.Ovg');
model.result('pg3').feature('glob4').set('xdataunit', 'rad/s');
model.result('pg3').feature('glob4').set('linecolor', 'magenta');
model.result('pg3').feature('glob4').set('linewidth', 3);
model.result('pg3').feature('glob4').label('omega=0');
model.result('pg3').feature('glob4').set('xdatasolnumtype', 'outer');
model.result('pg3').feature('glob4').set('solutionparams', 'manual');
model.result('pg3').feature('glob4').setIndex('looplevelinput', 'last', 0);
model.result('pg3').feature('glob4').set('legend', true);
model.result('pg3').feature('glob4').set('legendmethod', 'manual');
model.result('pg3').feature('glob4').setIndex('legends', '\omega=0', 0);
model.result('pg3').set('ylabel', 'Angular frequency (rad/s)');
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Campbell plot, rotating frame');
model.result('pg3').label('Campbell Plot, Rotating Frame (rotsld)');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature.remove('glob2');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('glob1').label('Whirl Mode');
model.result('pg3').run;
model.result('pg3').feature('glob1').feature('gmrk1').set('intersectionline', 'general');
model.result('pg3').feature('glob1').feature('gmrk1').set('generalcoeffa', 2);
model.result('pg3').feature('glob1').feature('gmrk1').set('generalcoeffb', -1);
model.result('pg3').feature('glob1').feature('gmrk1').set('generalcoeffc', 0);
model.result('pg3').feature('glob1').feature('gmrk1').set('inclxcoord', false);
model.result('pg3').feature('glob1').feature('gmrk1').set('labelprefix', '');
model.result('pg3').feature('glob1').feature('gmrk1').set('customcolor', [0.9921568632125854 0.7254902124404907 0.07450980693101883]);
model.result('pg3').run;
model.result('pg3').run;

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').setSolveFor('/physics/rotsld', true);
model.study('std2').label('Study 2: Frequency Domain');
model.study('std2').setGenPlots(false);
model.study('std2').create('param', 'Parametric');
model.study('std2').feature('param').setIndex('pname', 'n1', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', '', 0);
model.study('std2').feature('param').setIndex('pname', 'n1', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', '', 0);
model.study('std2').feature('param').setIndex('pname', 'omega', 0);
model.study('std2').feature('param').setIndex('plistarr', 'range(1000,1000,2000) range(2500,50,6500) range(7000,1000,9000)', 0);
model.study('std2').feature('param').setIndex('punit', 'rpm', 0);
model.study('std2').feature('freq').set('plist', '2*omega');
model.study('std2').feature('freq').set('useadvanceddisable', true);
model.study('std2').feature('freq').set('disabledphysics', {'rotsld/atq1'});

model.sol.create('sol22');
model.sol('sol22').study('std2');
model.sol('sol22').create('st1', 'StudyStep');
model.sol('sol22').feature('st1').set('study', 'std2');
model.sol('sol22').feature('st1').set('studystep', 'freq');
model.sol('sol22').create('v1', 'Variables');
model.sol('sol22').feature('v1').feature('comp1_rotsld_gr_disp').set('scalemethod', 'manual');
model.sol('sol22').feature('v1').feature('comp1_rotsld_gr_rot').set('scalemethod', 'manual');
model.sol('sol22').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol22').feature('v1').feature('comp1_rotsld_gr_disp').set('resscalemethod', 'parent');
model.sol('sol22').feature('v1').feature('comp1_rotsld_gr_rot').set('resscalemethod', 'parent');
model.sol('sol22').feature('v1').feature('comp1_rotsld_gr_disp').set('scaleval', '0.005774915945205242');
model.sol('sol22').feature('v1').feature('comp1_rotsld_gr_rot').set('scaleval', '0.1');
model.sol('sol22').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.5774915945205241');
model.sol('sol22').feature('v1').set('control', 'freq');
model.sol('sol22').create('s1', 'Stationary');
model.sol('sol22').feature('s1').set('stol', 0.001);
model.sol('sol22').feature('s1').create('p1', 'Parametric');
model.sol('sol22').feature('s1').feature.remove('pDef');
model.sol('sol22').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol22').feature('s1').feature('p1').set('plistarr', {'2*omega'});
model.sol('sol22').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol22').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol22').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol22').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol22').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol22').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol22').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol22').feature('s1').feature('p1').set('probes', {});
model.sol('sol22').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol22').feature('s1').set('linpmethod', 'sol');
model.sol('sol22').feature('s1').set('linpsol', 'zero');
model.sol('sol22').feature('s1').set('control', 'freq');
model.sol('sol22').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol22').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol22').feature('s1').feature.remove('fcDef');
model.sol('sol22').attach('std2');

model.batch.create('p2', 'Parametric');
model.batch('p2').study('std2');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol22');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').set('pname', {'omega'});
model.batch('p2').set('plistarr', {'range(1000,1000,2000) range(2500,50,6500) range(7000,1000,9000)'});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std2');
model.batch('p2').set('control', 'param');

model.sol.create('sol23');
model.sol('sol23').study('std2');
model.sol('sol23').label('Parametric Solutions 2');

model.batch('p2').feature('so1').set('psol', 'sol23');
model.batch('p2').run('compute');

model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').set('data', 'dset4');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').setIndex('expr', 'abs(rotsld.hlg1.u)', 0);
model.result('pg4').feature('glob1').setIndex('unit', 'm', 0);
model.result('pg4').feature('glob1').setIndex('descr', '', 0);
model.result('pg4').feature('glob1').setIndex('expr', 'abs(rotsld.hlg2.u)', 1);
model.result('pg4').feature('glob1').setIndex('unit', 'm', 1);
model.result('pg4').feature('glob1').setIndex('descr', '', 1);
model.result('pg4').feature('glob1').setIndex('expr', 'abs(rotsld.hlg3.u)', 2);
model.result('pg4').feature('glob1').setIndex('unit', 'm', 2);
model.result('pg4').feature('glob1').setIndex('descr', '', 2);
model.result('pg4').feature('glob1').setIndex('expr', 'abs(rotsld.hlg4.u)', 3);
model.result('pg4').feature('glob1').setIndex('unit', 'm', 3);
model.result('pg4').feature('glob1').setIndex('descr', '', 3);
model.result('pg4').feature('glob1').set('xdatasolnumtype', 'outer');
model.result('pg4').feature('glob1').set('xdata', 'expr');
model.result('pg4').feature('glob1').set('xdataexpr', '2*pi[rad]*omega');
model.result('pg4').feature('glob1').set('xdatadescractive', true);
model.result('pg4').feature('glob1').set('xdatadescr', 'omega');
model.result('pg4').feature('glob1').set('linestyle', 'cycle');
model.result('pg4').feature('glob1').set('linewidth', 3);
model.result('pg4').feature('glob1').set('legendmethod', 'manual');
model.result('pg4').feature('glob1').setIndex('legends', 'Gear-1', 0);
model.result('pg4').feature('glob1').setIndex('legends', 'Gear-2', 1);
model.result('pg4').feature('glob1').setIndex('legends', 'Gear-3', 2);
model.result('pg4').feature('glob1').setIndex('legends', 'Gear-4', 3);
model.result('pg4').run;
model.result('pg4').label('Frequency response: x-displacement');
model.result('pg4').set('titletype', 'label');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'x-displacement (m)');
model.result('pg4').set('ylog', true);
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('glob1').setIndex('expr', 'abs(rotsld.hlg1.thz)', 0);
model.result('pg5').feature('glob1').setIndex('unit', 'rad', 0);
model.result('pg5').feature('glob1').setIndex('descr', '', 0);
model.result('pg5').feature('glob1').setIndex('expr', 'abs(rotsld.hlg2.thz)', 1);
model.result('pg5').feature('glob1').setIndex('unit', 'rad', 1);
model.result('pg5').feature('glob1').setIndex('descr', '', 1);
model.result('pg5').feature('glob1').setIndex('expr', 'abs(rotsld.hlg3.thz)', 2);
model.result('pg5').feature('glob1').setIndex('unit', 'rad', 2);
model.result('pg5').feature('glob1').setIndex('descr', '', 2);
model.result('pg5').feature('glob1').setIndex('expr', 'abs(rotsld.hlg4.thz)', 3);
model.result('pg5').feature('glob1').setIndex('unit', 'rad', 3);
model.result('pg5').feature('glob1').setIndex('descr', '', 3);
model.result('pg5').run;
model.result('pg5').label('Frequency response: z-rotation');
model.result('pg5').set('ylabel', 'z-rotation (rad)');
model.result('pg5').run;

model.study.create('std3');
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').setSolveFor('/physics/rotsld', true);
model.study('std3').label('Study 3: Time Dependent');
model.study('std3').feature('time').set('tlist', 'range(0,t_end/150,t_end)');

model.sol.create('sol110');
model.sol('sol110').study('std3');
model.sol('sol110').create('st1', 'StudyStep');
model.sol('sol110').feature('st1').set('study', 'std3');
model.sol('sol110').feature('st1').set('studystep', 'time');
model.sol('sol110').create('v1', 'Variables');
model.sol('sol110').feature('v1').feature('comp1_rotsld_gr_disp').set('scalemethod', 'manual');
model.sol('sol110').feature('v1').feature('comp1_rotsld_phi').set('scalemethod', 'manual');
model.sol('sol110').feature('v1').feature('comp1_rotsld_gr_rot').set('scalemethod', 'manual');
model.sol('sol110').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol110').feature('v1').feature('comp1_rotsld_gr_disp').set('resscalemethod', 'parent');
model.sol('sol110').feature('v1').feature('comp1_rotsld_gr_rot').set('resscalemethod', 'parent');
model.sol('sol110').feature('v1').feature('comp1_rotsld_gr_disp').set('scaleval', '0.005774915945205242');
model.sol('sol110').feature('v1').feature('comp1_rotsld_phi').set('scaleval', '0.1');
model.sol('sol110').feature('v1').feature('comp1_rotsld_gr_rot').set('scaleval', '0.1');
model.sol('sol110').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.5774915945205241');
model.sol('sol110').feature('v1').set('control', 'time');
model.sol('sol110').create('t1', 'Time');
model.sol('sol110').feature('t1').set('tlist', 'range(0,t_end/150,t_end)');
model.sol('sol110').feature('t1').set('plot', 'off');
model.sol('sol110').feature('t1').set('plotgroup', 'pg1');
model.sol('sol110').feature('t1').set('plotfreq', 'tout');
model.sol('sol110').feature('t1').set('probesel', 'all');
model.sol('sol110').feature('t1').set('probes', {});
model.sol('sol110').feature('t1').set('probefreq', 'tsteps');
model.sol('sol110').feature('t1').set('rtol', 0.001);
model.sol('sol110').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol110').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol110').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol110').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol110').feature('t1').set('reacf', true);
model.sol('sol110').feature('t1').set('storeudot', true);
model.sol('sol110').feature('t1').set('tstepsgenalpha', 'intermediate');
model.sol('sol110').feature('t1').set('endtimeinterpolation', true);
model.sol('sol110').feature('t1').set('timemethod', 'genalpha');
model.sol('sol110').feature('t1').set('rhoinf', 0.75);
model.sol('sol110').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol110').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol110').feature('t1').set('control', 'time');
model.sol('sol110').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol110').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol110').feature('t1').feature.remove('fcDef');
model.sol('sol110').attach('std3');
model.sol('sol110').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol110').runAll;

model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Stress (rotsld)');
model.result('pg6').set('data', 'dset5');
model.result('pg6').setIndex('looplevel', 151, 0);
model.result('pg6').set('data', 'dset5');
model.result('pg6').setIndex('looplevel', 151, 0);
model.result('pg6').set('defaultPlotID', 'stress');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').label('Surface');
model.result('pg6').feature('surf1').set('expr', 'rotsld.mises');
model.result('pg6').feature('surf1').set('colortable', 'Prism');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('threshold', 'manual');
model.result('pg6').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg6').feature('surf1').set('data', 'parent');
model.result('pg6').feature('surf1').feature.create('def1', 'Deform');
model.result('pg6').feature('surf1').feature('def1').label('Deformation');
model.result('pg6').run;
model.result.dataset.duplicate('dset6', 'dset5');
model.result.dataset('dset6').selection.geom('geom1', 3);
model.result.dataset('dset6').selection.geom('geom1', 3);
model.result.dataset('dset6').selection.set([1 3 5 6]);
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').feature('surf1').feature('def1').set('expr', {'rotsld.us_fix' 'rotsld.vs_fix' 'rotsld.ws_fix'});
model.result('pg6').feature('surf1').feature('def1').set('descr', 'Displacement field, fixed frame');
model.result('pg6').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg6').feature('surf1').feature('def1').set('scale', 1);
model.result('pg6').run;
model.result('pg6').feature.duplicate('surf2', 'surf1');
model.result('pg6').run;
model.result('pg6').feature('surf2').set('data', 'dset6');
model.result('pg6').feature('surf2').set('expr', '1');
model.result('pg6').feature('surf2').set('coloring', 'uniform');
model.result('pg6').feature('surf2').set('color', 'gray');
model.result('pg6').run;
model.result('pg6').feature('surf1').set('rangecoloractive', true);
model.result('pg6').feature('surf1').set('rangecolormax', '1e7');
model.result('pg6').run;
model.result.dataset.create('cpt1', 'CutPoint3D');
model.result.dataset('cpt1').set('data', 'dset5');
model.result.dataset('cpt1').set('pointx', 'rotsld.hlg1.xcx, rotsld.hlg2.xcx, rotsld.hlg3.xcx, rotsld.hlg4.xcx');
model.result.dataset('cpt1').set('pointy', 'rotsld.hlg1.xcy, rotsld.hlg2.xcy, rotsld.hlg3.xcy, rotsld.hlg4.xcy');
model.result.dataset('cpt1').set('pointz', 'rotsld.hlg1.xcz, rotsld.hlg2.xcz, rotsld.hlg3.xcz, rotsld.hlg4.xcz');
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').set('data', 'cpt1');
model.result('pg7').create('ptgr1', 'PointGraph');
model.result('pg7').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr1').set('linewidth', 'preference');
model.result('pg7').feature('ptgr1').set('expr', 'w');
model.result('pg7').feature('ptgr1').set('xdata', 'expr');
model.result('pg7').feature('ptgr1').set('xdataexpr', 'u');
model.result('pg7').feature('ptgr1').set('linestyle', 'cycle');
model.result('pg7').feature('ptgr1').set('linewidth', 3);
model.result('pg7').feature('ptgr1').set('legend', true);
model.result('pg7').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg7').feature('ptgr1').setIndex('legends', 'Gear-1', 0);
model.result('pg7').feature('ptgr1').setIndex('legends', 'Gear-2', 1);
model.result('pg7').feature('ptgr1').setIndex('legends', 'Gear-3', 2);
model.result('pg7').feature('ptgr1').setIndex('legends', 'Gear-4', 3);
model.result('pg7').run;
model.result('pg7').label('Gear orbits, rotating frame');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('preserveaspect', true);
model.result('pg7').set('legendpos', 'lowerleft');
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').feature('ptgr1').set('expr', 'rotsld.ws_fix');
model.result('pg8').feature('ptgr1').set('xdataexpr', 'rotsld.us_fix');
model.result('pg8').run;
model.result('pg8').label('Gear orbits, fixed frame');
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').set('data', 'dset5');
model.result('pg9').create('glob1', 'Global');
model.result('pg9').feature('glob1').set('markerpos', 'datapoints');
model.result('pg9').feature('glob1').set('linewidth', 'preference');
model.result('pg9').feature('glob1').setIndex('expr', 'rotsld.grp1.th_el', 0);
model.result('pg9').feature('glob1').setIndex('unit', 'deg', 0);
model.result('pg9').feature('glob1').setIndex('descr', 'Transmission error (elasticity)', 0);
model.result('pg9').feature('glob1').setIndex('expr', 'rotsld.grp2.th_el', 1);
model.result('pg9').feature('glob1').setIndex('unit', 'deg', 1);
model.result('pg9').feature('glob1').setIndex('descr', 'Transmission error (elasticity)', 1);
model.result('pg9').feature('glob1').set('linestyle', 'cycle');
model.result('pg9').feature('glob1').set('linewidth', 3);
model.result('pg9').feature('glob1').set('legendmethod', 'manual');
model.result('pg9').feature('glob1').setIndex('legends', 'Gear-1', 0);
model.result('pg9').feature('glob1').setIndex('legends', 'Gear-2', 1);
model.result('pg9').run;
model.result('pg9').label('Gear DTEs');
model.result('pg9').set('titletype', 'manual');
model.result('pg9').set('title', 'Dynamic Transmission Errors');
model.result('pg9').set('legendpos', 'lowerleft');
model.result('pg9').run;
model.result.dataset.create('cpt2', 'CutPoint3D');
model.result.dataset('cpt2').set('data', 'dset5');
model.result.dataset('cpt2').set('pointx', 0);
model.result.dataset('cpt2').set('pointy', '1.25*d1');
model.result.dataset('cpt2').set('pointz', 0);
model.result.dataset('cpt2').set('snapping', 'boundary');
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').set('data', 'cpt2');
model.result('pg10').create('ptgr1', 'PointGraph');
model.result('pg10').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg10').feature('ptgr1').set('linewidth', 'preference');
model.result('pg10').feature('ptgr1').set('expr', 'rotsld.jrb2.f2');
model.result('pg10').feature('ptgr1').set('linestyle', 'cycle');
model.result('pg10').feature('ptgr1').set('linewidth', 3);
model.result('pg10').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg10').feature('ptgr1').set('legend', true);
model.result('pg10').feature('ptgr1').setIndex('legends', 'x-component', 0);
model.result('pg10').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg10').run;
model.result('pg10').feature('ptgr2').set('expr', 'rotsld.jrb2.f3');
model.result('pg10').feature('ptgr2').setIndex('legends', 'z-component', 0);
model.result('pg10').run;
model.result('pg10').label('Bearing forces');
model.result('pg10').set('titletype', 'label');
model.result('pg10').set('ylabelactive', true);
model.result('pg10').set('ylabel', 'Force (N)');
model.result('pg10').set('legendpos', 'lowerleft');
model.result('pg10').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').set('plotgroup', 'pg6');
model.result.export('anim1').set('maxframes', 50);
model.result('pg6').run;

model.title('Rotors Connected Through Helical Gears');

model.description(['In this tutorial model, learn how to model multiple rotors connected through helical gears using the Rotordynamics Module, an add-on product to the Structural Mechanics Module and COMSOL Multiphysics' native2unicode(hex2dec({'00' 'ae'}), 'unicode') '. When modeling geared rotors, the presence of gears in the system induces the lateral and torsional vibrations in the rotors. The gear mesh is assumed to be elastic, having a constant stiffness value.' newline  newline 'We demonstrate an eigenfrequency analysis to compute the eigenfrequencies of the system for different speeds of the driving rotor. A transient analysis is also performed for the given speed of the driving rotor and the load torque on the driven rotor. With these analyses, we can compute the orbits of gear centers and forces on the bearings. The transient analysis is performed for both rigid and elastic gear mesh in order to analyze the effect of gear mesh stiffness on the rotor vibrations.' newline  newline 'The simulation results for this tutorial model include a Campbell diagram showing the variation of eigenfrequencies with the rotational speed, critical speeds of the rotor, frequency response curves for the gear displacement and rotation, the von' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'Mises stress distribution in the shafts, orbits of the gear centers in the rotating and fixed frames of reference, and the dynamic transmission error when transferring rotation from one shaft to another.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;
model.sol('sol20').clearSolutionData;
model.sol('sol21').clearSolutionData;
model.sol('sol22').clearSolutionData;
model.sol('sol23').clearSolutionData;
model.sol('sol24').clearSolutionData;
model.sol('sol25').clearSolutionData;
model.sol('sol26').clearSolutionData;
model.sol('sol27').clearSolutionData;
model.sol('sol28').clearSolutionData;
model.sol('sol29').clearSolutionData;
model.sol('sol30').clearSolutionData;
model.sol('sol31').clearSolutionData;
model.sol('sol32').clearSolutionData;
model.sol('sol33').clearSolutionData;
model.sol('sol34').clearSolutionData;
model.sol('sol35').clearSolutionData;
model.sol('sol36').clearSolutionData;
model.sol('sol37').clearSolutionData;
model.sol('sol38').clearSolutionData;
model.sol('sol39').clearSolutionData;
model.sol('sol40').clearSolutionData;
model.sol('sol41').clearSolutionData;
model.sol('sol42').clearSolutionData;
model.sol('sol43').clearSolutionData;
model.sol('sol44').clearSolutionData;
model.sol('sol45').clearSolutionData;
model.sol('sol46').clearSolutionData;
model.sol('sol47').clearSolutionData;
model.sol('sol48').clearSolutionData;
model.sol('sol49').clearSolutionData;
model.sol('sol50').clearSolutionData;
model.sol('sol51').clearSolutionData;
model.sol('sol52').clearSolutionData;
model.sol('sol53').clearSolutionData;
model.sol('sol54').clearSolutionData;
model.sol('sol55').clearSolutionData;
model.sol('sol56').clearSolutionData;
model.sol('sol57').clearSolutionData;
model.sol('sol58').clearSolutionData;
model.sol('sol59').clearSolutionData;
model.sol('sol60').clearSolutionData;
model.sol('sol61').clearSolutionData;
model.sol('sol62').clearSolutionData;
model.sol('sol63').clearSolutionData;
model.sol('sol64').clearSolutionData;
model.sol('sol65').clearSolutionData;
model.sol('sol66').clearSolutionData;
model.sol('sol67').clearSolutionData;
model.sol('sol68').clearSolutionData;
model.sol('sol69').clearSolutionData;
model.sol('sol70').clearSolutionData;
model.sol('sol71').clearSolutionData;
model.sol('sol72').clearSolutionData;
model.sol('sol73').clearSolutionData;
model.sol('sol74').clearSolutionData;
model.sol('sol75').clearSolutionData;
model.sol('sol76').clearSolutionData;
model.sol('sol77').clearSolutionData;
model.sol('sol78').clearSolutionData;
model.sol('sol79').clearSolutionData;
model.sol('sol80').clearSolutionData;
model.sol('sol81').clearSolutionData;
model.sol('sol82').clearSolutionData;
model.sol('sol83').clearSolutionData;
model.sol('sol84').clearSolutionData;
model.sol('sol85').clearSolutionData;
model.sol('sol86').clearSolutionData;
model.sol('sol87').clearSolutionData;
model.sol('sol88').clearSolutionData;
model.sol('sol89').clearSolutionData;
model.sol('sol90').clearSolutionData;
model.sol('sol91').clearSolutionData;
model.sol('sol92').clearSolutionData;
model.sol('sol93').clearSolutionData;
model.sol('sol94').clearSolutionData;
model.sol('sol95').clearSolutionData;
model.sol('sol96').clearSolutionData;
model.sol('sol97').clearSolutionData;
model.sol('sol98').clearSolutionData;
model.sol('sol99').clearSolutionData;
model.sol('sol100').clearSolutionData;
model.sol('sol101').clearSolutionData;
model.sol('sol102').clearSolutionData;
model.sol('sol103').clearSolutionData;
model.sol('sol104').clearSolutionData;
model.sol('sol105').clearSolutionData;
model.sol('sol106').clearSolutionData;
model.sol('sol107').clearSolutionData;
model.sol('sol108').clearSolutionData;
model.sol('sol109').clearSolutionData;
model.sol('sol110').clearSolutionData;

model.label('geared_rotors.mph');

model.modelNode.label('Components');

out = model;
