function out = model
%
% ceramic_water_filter.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Porous_Media_Flow_Module/Solute_Transport');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics.create('dl', 'PorousMediaFlowDarcy', 'geom1');
model.physics('dl').model('comp1');
model.physics.create('tds', 'DilutedSpecies', 'geom1', {'c_p' 'c_cl' 'c_chcl3'});

model.multiphysics.create('nsd1', 'NavierStokesDarcyCoupling', 'geom1', 2);
model.multiphysics('nsd1').set('NavierStokes_physics', 'spf');
model.multiphysics('nsd1').set('Darcy_physics', 'dl');
model.multiphysics('nsd1').selection.all;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/physics/dl', true);
model.study('std1').feature('stat').setSolveFor('/physics/tds', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/nsd1', true);

model.geom('geom1').insertFile('ceramic_water_filter_geom_sequence.mph', 'geom1');
model.geom('geom1').run('igv1');

model.param.label('Parameters: Geometry');
model.param.create('par2');
model.param('par2').label('Parameters: Transport');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('M_cl', '35.453[g/mol]', 'Molar mass, chlorine');
model.param('par2').set('M_cp', '65[g/mol]', 'Molar mass, particle (average)');
model.param('par2').set('M_chcl3', '119.38[g/mol]', 'Molar mass, chloroform');
model.param('par2').set('c_cl0', '3[mg/l]/M_cl', 'Initial chlorine concentration');
model.param('par2').set('c_p0', '250[mg/l]/M_cp', 'Initial particle concentration');
model.param('par2').set('c_chcl30', '60[ug/l]/M_chcl3', 'Initial Chloroform concentration');
model.param('par2').set('R_cl', '0.39[1/s]', 'Reaction rate chlorine');
model.param('par2').set('S_cp', '-0.16[1/s]', 'Particle sink term');
model.param('par2').set('Kf', '10', 'Freundlich constant');
model.param('par2').set('Nf', '2', 'Freundlich exponent, chloroform');
model.param('par2').set('cref_chcl3', '0.5[mol/m^3]', 'Reference concentration, chloroform');
model.param('par2').set('por_ceramics', '0.18', 'Porosity, ceramics');
model.param('par2').set('por_carbon', '0.45', 'Porosity, activated carbon');
model.param('par2').set('por_fracture', '0.7', 'Porosity, fracture');
model.param('par2').set('df', '0.2[mm]', 'Fracture aperture');
model.param('par2').set('dp_carbon', '200[um]', 'Granular carbon diameter');
model.param('par2').set('kappa_ceramics', '0.8e-11[m^2]', 'Permeability ceramics');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water, liquid');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material.create('pmat1', 'PorousMedia', 'comp1');
model.material('pmat1').selection.named('geom1_sel2');
model.material('pmat1').label('Porous Material: Ceramics');
model.material.create('pmat2', 'PorousMedia', 'comp1');
model.material('pmat2').selection.named('geom1_sel1');
model.material('pmat2').label('Porous Material: Carbon');
model.material.duplicate('mat2', 'mat1');
model.material('mat2').label('Fracture');
model.material('mat2').selection.geom('geom1', 2);
model.material('mat2').selection.named('geom1_csel2_bnd');

model.physics('spf').selection.named('geom1_difsel1');
model.physics('spf').create('inl1', 'InletBoundary', 2);
model.physics('spf').feature('inl1').selection.named('geom1_sel3');
model.physics('spf').feature('inl1').set('U0in', 0.33);
model.physics('spf').create('out1', 'OutletBoundary', 2);
model.physics('spf').feature('out1').selection.named('geom1_sel4');
model.physics('dl').selection.named('geom1_csel1_dom');
model.physics('dl').prop('ShapeProperty').set('order_pressure', 1);
model.physics('dl').create('porous2', 'PorousMedium', 3);
model.physics('dl').feature('porous2').selection.named('geom1_sel1');
model.physics('dl').feature('porous2').feature('pm1').set('permeabilityModelType', 'kozenyCarman');
model.physics('dl').feature('porous2').feature('pm1').set('dp', 'dp_carbon');
model.physics('dl').create('frac1', 'Fracture', 2);
model.physics('dl').feature('frac1').selection.named('geom1_csel2_bnd');
model.physics('dl').feature('frac1').set('df', 'df');
model.physics('dl').feature('frac1').feature('pm1').set('permeabilityModelType', 'cubicLaw');
model.physics('tds').selection.named('geom1_uni1_dom');
model.physics('tds').prop('TransportMechanism').set('MassTransferInPorousMedia', true);
model.physics('tds').feature('cdm1').set('u_src', 'root.comp1.u');
model.physics('tds').create('porous1', 'PorousMedium', 3);
model.physics('tds').feature('porous1').selection.named('geom1_sel2');
model.physics('tds').feature('porous1').feature('fluid1').set('u_src', 'root.comp1.dl.u');
model.physics('tds').feature.duplicate('porous2', 'porous1');
model.physics('tds').feature('porous2').selection.named('geom1_sel1');
model.physics('tds').feature('porous2').create('ads1', 'Adsorptions', 3);
model.physics('tds').feature('porous2').feature('ads1').set('SorptionType', 'Freundlich');
model.physics('tds').feature('porous2').feature('ads1').setIndex('species', true, 2);
model.physics('tds').feature('porous2').feature('ads1').setIndex('KF', 'Kf', 2);
model.physics('tds').feature('porous2').feature('ads1').setIndex('NF', 'Nf', 2);
model.physics('tds').feature('porous2').feature('ads1').setIndex('cref', 'cref_chcl3', 2);
model.physics('tds').create('ss1', 'SpeciesSource', 3);
model.physics('tds').feature('ss1').selection.named('geom1_sel2');
model.physics('tds').feature('ss1').setIndex('S', 'S_cp*c_p', 0);
model.physics('tds').create('reac1', 'Reactions', 3);
model.physics('tds').feature('reac1').selection.named('geom1_sel1');
model.physics('tds').feature('reac1').setIndex('R_c_cl', '-R_cl*c_cl', 0);
model.physics('tds').create('fds1', 'Fracture', 2);
model.physics('tds').feature('fds1').selection.named('geom1_csel2_bnd');
model.physics('tds').feature('fds1').set('d_fr', 'df');
model.physics('tds').feature('fds1').feature('fluid1').set('u_src', 'root.comp1.dl.u');
model.physics('tds').create('init2', 'init', 3);
model.physics('tds').feature('init2').setIndex('initc', 'c_p0', 0);
model.physics('tds').feature('init2').setIndex('initc', 'c_cl0', 1);
model.physics('tds').feature('init2').setIndex('initc', 'c_chcl30', 2);
model.physics('tds').feature('init2').selection.set([1 3 4]);
model.physics('tds').create('conc1', 'Concentration', 2);
model.physics('tds').feature('conc1').selection.named('geom1_sel3');
model.physics('tds').feature('conc1').setIndex('species', true, 0);
model.physics('tds').feature('conc1').setIndex('c0', 'c_p0', 0);
model.physics('tds').feature('conc1').setIndex('species', true, 1);
model.physics('tds').feature('conc1').setIndex('c0', 'c_cl0', 1);
model.physics('tds').feature('conc1').setIndex('species', true, 2);
model.physics('tds').feature('conc1').setIndex('c0', 'c_chcl30', 2);
model.physics('tds').create('out1', 'Outflow', 2);
model.physics('tds').feature('out1').selection.named('geom1_sel4');

model.material('pmat1').set('porosity', 'por_ceramics');
model.material('pmat1').propertyGroup('def').set('hydraulicpermeability', {'kappa_ceramics'});
model.material('pmat1').feature.create('fluid1', 'Fluid', 'comp1');
model.material('pmat1').feature('fluid1').set('link', 'mat1');
model.material('pmat2').set('porosity', 'por_carbon');
model.material('pmat2').feature.create('fluid1', 'Fluid', 'comp1');
model.material('pmat2').feature.create('solid1', 'Solid', 'comp1');
model.material('pmat2').feature('fluid1').set('link', 'mat1');
model.material('pmat2').feature('solid1').set('vfrac', '1-por_carbon');
model.material('pmat2').feature('solid1').propertyGroup('def').set('density', {'375'});
model.material('mat2').propertyGroup('def').set('porosity', {'por_fracture'});

model.mesh('mesh1').autoMeshSize(6);
model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.named('geom1_csel1_dom');
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', 'th_ceramics/2');
model.mesh('mesh1').feature('ftet1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmin', 'th_ceramics/4');
model.mesh('mesh1').feature('ftet1').feature('size1').set('hcurveactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hcurve', 0.2);
model.mesh('mesh1').create('bl2', 'BndLayer');
model.mesh('mesh1').feature('bl2').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl2').selection.geom(3);
model.mesh('mesh1').feature('bl2').selection.set([]);
model.mesh('mesh1').feature('bl2').selection.allGeom;
model.mesh('mesh1').feature('bl2').selection.geom('geom1', 3);
model.mesh('mesh1').feature('bl2').selection.named('geom1_sel2');
model.mesh('mesh1').feature('bl2').feature('blp').selection.set([31 32 33 34 51 52 71 72 78 85 93 97]);
model.mesh('mesh1').feature('bl2').feature('blp').set('blnlayers', 4);
model.mesh('mesh1').feature('bl2').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl2').feature('blp').set('blhmin', 'th_ceramics/20');
model.mesh('mesh1').create('ftet2', 'FreeTet');
model.mesh('mesh1').run;

model.study('std1').feature('stat').setEntry('activate', 'tds', false);
model.study('std1').setGenPlots(false);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setEntry('activate', 'spf', false);
model.study('std1').feature('time').setEntry('activate', 'dl', false);
model.study('std1').feature('time').setEntry('activateCoupling', 'nsd1', false);
model.study('std1').feature('time').set('tlist', 'range(0,0.5,15) range(20,10,180)');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3 4 7 8 9]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([5 6]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3 4 7 8 9]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3 4 5 6 7 8 9]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables (nsd1) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (nsd1)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_dl_pb_lm'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_dl_pb_lm'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Hybrid AMG, free-porous flow variables (nsd1)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('hybridvar', {'comp1_p' 'comp1_u'});
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('i2').create('mg2', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('mg2').set('hybridvar', {'comp1_p2' 'comp1_dl_pb_lm'});
model.sol('sol1').feature('s1').feature('i2').feature('mg2').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg2').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg2').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg2').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg2').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg2').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg2').set('saamgcompwise', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg2').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg2').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg2').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('s1').feature('i2').feature('mg2').feature('pr').feature('va1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg2').feature('pr').feature('va1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg2').feature('pr').feature('va1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg2').feature('pr').feature('va1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg2').feature('pr').feature('va1').set('vankavars', {'comp1_dl_pb_lm'});
model.sol('sol1').feature('s1').feature('i2').feature('mg2').feature('po').create('va1', 'Vanka');
model.sol('sol1').feature('s1').feature('i2').feature('mg2').feature('po').feature('va1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg2').feature('po').feature('va1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg2').feature('po').feature('va1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg2').feature('po').feature('va1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg2').feature('po').feature('va1').set('vankavars', {'comp1_dl_pb_lm'});
model.sol('sol1').feature('s1').feature('i2').feature('mg2').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg2').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg2').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.5,15) range(20,10,180)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.005);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, concentrations (tds)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 50);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, concentrations (tds)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');

model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledphysics', {'dl/frac1'});
model.study('std1').feature('time').set('useadvanceddisable', true);
model.study('std1').feature('time').set('disabledphysics', {'tds/fds1'});

model.sol('sol1').runAll;

model.result.numerical.create('av1', 'AvSurface');
model.result.numerical('av1').set('intvolume', true);
model.result.numerical('av1').selection.named('geom1_sel4');
model.result.numerical('av1').setIndex('expr', 'c_p/c_p0', 0);
model.result.numerical('av1').setIndex('descr', 'Particle', 0);
model.result.numerical('av1').setIndex('expr', 'c_cl/c_cl0', 1);
model.result.numerical('av1').setIndex('descr', 'Chlorine', 1);
model.result.numerical('av1').setIndex('expr', 'c_chcl3/c_chcl30', 2);
model.result.numerical('av1').setIndex('descr', 'Chloroform', 2);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Surface Average 1');
model.result.numerical('av1').set('table', 'tbl1');
model.result.numerical('av1').setResult;

model.study('std1').feature('stat').set('useadvanceddisable', false);
model.study('std1').feature('time').set('useadvanceddisable', false);

model.sol('sol1').runAll;

model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').selection.set([4 5 10 12 17 18 20 22 24 26 30 35 36 37 38 48 49 60 63 66 67 68 69 70 73 74 77 84 90 91 92 95 96 98 99 100 101 107 108 111 112]);
model.result.dataset.duplicate('surf2', 'surf1');
model.result.dataset('surf2').selection.set([7 8 13 65 102]);
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').run;
model.result('pg1').label('Pressure');
model.result('pg1').set('edges', false);
model.result('pg1').create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('expr', 'p');
model.result('pg1').feature('mslc1').set('znumber', '0');
model.result('pg1').feature.duplicate('mslc2', 'mslc1');
model.result('pg1').run;
model.result('pg1').feature('mslc2').set('expr', 'p2');
model.result('pg1').feature('mslc2').set('inheritplot', 'mslc1');
model.result('pg1').run;
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', 'p2');
model.result('pg1').feature('surf1').set('inheritplot', 'mslc1');
model.result('pg1').feature('surf1').create('sel1', 'Selection');
model.result('pg1').feature('surf1').feature('sel1').selection.named('geom1_csel2_bnd');
model.result('pg1').run;
model.result('pg1').create('surf2', 'Surface');
model.result('pg1').feature('surf2').set('data', 'surf1');
model.result('pg1').feature('surf2').set('expr', '1');
model.result('pg1').feature('surf2').set('titletype', 'none');
model.result('pg1').feature('surf2').set('coloring', 'uniform');
model.result('pg1').feature('surf2').set('color', 'gray');
model.result('pg1').feature.duplicate('surf3', 'surf2');
model.result('pg1').run;
model.result('pg1').feature('surf3').set('data', 'surf2');
model.result('pg1').feature('surf3').set('color', 'custom');
model.result('pg1').feature('surf3').set('customcolor', [0.07058823853731155 0.5686274766921997 0.9529411792755127]);
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').run;
model.result('pg2').label('Particle concentration');
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('expr', 'c_p');
model.result('pg2').feature('mslc1').set('znumber', '0');
model.result('pg2').feature('mslc1').set('colortable', 'AuroraAustralis');
model.result('pg2').feature('mslc1').set('recover', 'ppr');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'c_p');
model.result('pg2').feature('surf1').set('inheritplot', 'mslc1');
model.result('pg2').feature('surf1').create('sel1', 'Selection');
model.result('pg2').feature('surf1').feature('sel1').selection.named('geom1_csel2_bnd');
model.result('pg2').run;
model.result('pg2').create('surf2', 'Surface');
model.result('pg2').feature('surf2').set('data', 'surf1');
model.result('pg2').feature('surf2').set('expr', '1');
model.result('pg2').feature('surf2').set('titletype', 'none');
model.result('pg2').feature('surf2').set('coloring', 'uniform');
model.result('pg2').feature('surf2').set('color', 'gray');
model.result('pg2').feature.duplicate('surf3', 'surf2');
model.result('pg2').run;
model.result('pg2').feature('surf3').set('data', 'surf2');
model.result('pg2').feature('surf3').set('color', 'custom');
model.result('pg2').feature('surf3').set('customcolor', [0.07058823853731155 0.5686274766921997 0.9529411792755127]);
model.result('pg2').run;
model.result('pg2').set('edges', false);
model.result('pg2').run;
model.result.duplicate('pg3', 'pg2');
model.result('pg3').run;
model.result('pg3').label('Chlorine concentration');
model.result('pg3').run;
model.result('pg3').feature('mslc1').set('expr', 'c_cl');
model.result('pg3').run;
model.result('pg3').feature('surf1').set('expr', 'c_cl');
model.result('pg3').run;
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Chloroform concentration');
model.result('pg4').run;
model.result('pg4').feature('mslc1').set('expr', 'c_chcl3');
model.result('pg4').run;
model.result('pg4').feature('surf1').set('expr', 'c_chcl3');
model.result('pg4').run;
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Surface Average 1');
model.result.numerical('av1').set('table', 'tbl2');
model.result.numerical('av1').setResult;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'none');
model.result('pg5').create('tblp1', 'Table');
model.result('pg5').feature('tblp1').set('source', 'table');
model.result('pg5').feature('tblp1').set('table', 'tbl2');
model.result('pg5').feature('tblp1').set('linewidth', 'preference');
model.result('pg5').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg5').run;
model.result('pg5').feature('tblp1').set('legend', true);
model.result('pg5').run;
model.result('pg5').label('Concentration over time.');
model.result('pg5').set('legendpos', 'upperleft');
model.result('pg5').run;
model.result('pg5').feature.duplicate('tblp2', 'tblp1');
model.result('pg5').run;
model.result('pg5').feature('tblp2').set('table', 'tbl1');
model.result('pg5').feature('tblp2').set('linestyle', 'dotted');
model.result('pg5').feature('tblp2').set('linecolor', 'cyclereset');
model.result('pg5').feature('tblp2').set('legend', false);
model.result('pg5').run;
model.result('pg2').run;

model.title('Ceramic Water Filter with Activated Carbon Core');

model.description('This example illustrates how to model the transport of different contaminants through a ceramic water filter candle with an activated carbon core. These types of water filters can be found in tabletop gravity filters, as well as attached to the faucet or as part of a larger reverse osmosis filter system. The tutorial shows how to set up the flow and transport equations to model different filter mechanisms and examines the effect of a small fracture in the ceramics part.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('ceramic_water_filter.mph');

model.modelNode.label('Components');

out = model;
