function out = model
%
% stefan_tube.m
%
% Model exported on May 26 2025, 21:27 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Chemical_Reaction_Engineering_Module/Mixing_and_Separation');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 1);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('tcs', 'ConcentratedSpecies', 'geom1', {'w1' 'w2' 'w3'});

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/tcs', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('p0', '1.013e5[Pa]', 'Pressure');
model.param.set('T0', '328.5[K]', 'Temperature');
model.param.set('D12', '8.48e-6[m^2/s]', 'MS diffusion coefficient, acetone');
model.param.set('D13', '13.72e-6[m^2/s]', 'MS diffusion coefficient, methanol');
model.param.set('D23', '19.91e-6[m^2/s]', 'MS diffusion coefficient, air');
model.param.set('M_air', '28.8[g/mol]', 'Molar mass, air');
model.param.set('M_ace', '58[g/mol]', 'Molar mass, acetone');
model.param.set('M_met', '32[g/mol]', 'Molar mass, ethanol');
model.param.set('x_ace0', '0.319', 'Acetone mole fraction at liquid interface');
model.param.set('x_met0', '0.528', 'Methanol mole fraction at liquid interface');
model.param.set('x_air0', '1-x_ace0-x_met0', 'Air mole fraction at liquid interface');
model.param.set('w_air0', 'x_air0*M_air/(x_air0*M_air+x_ace0*M_ace+x_met0*M_met)', 'Air mass fraction at liquid interface');
model.param.set('w_ace0', 'x_ace0*M_ace/(x_air0*M_air+x_ace0*M_ace+x_met0*M_met)', 'Acetone mass fraction at liquid interface');
model.param.set('w_met0', '1-w_air0-w_ace0', 'Methanol mass fraction at liquid interface');

model.geom('geom1').create('i1', 'Interval');
model.geom('geom1').feature('i1').setIndex('coord', 0.238, 1);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.physics('tcs').prop('TransportMechanism').set('DiffusionModel', 'MaxwellStefan');
model.physics('tcs').prop('SpeciesProperties').set('FromMassConstraint', 3);
model.physics('tcs').prop('ShapeProperty').set('order_massfraction', 2);
model.physics('tcs').feature('sp1').setIndex('M_w1', 'M_ace', 0);
model.physics('tcs').feature('sp1').setIndex('M_w2', 'M_met', 0);
model.physics('tcs').feature('sp1').setIndex('M_w3', 'M_air', 0);
model.physics('tcs').feature('cdm1').set('minput_temperature_src', 'userdef');
model.physics('tcs').feature('cdm1').set('minput_temperature', 'T0');
model.physics('tcs').feature('cdm1').set('minput_pressure_src', 'userdef');
model.physics('tcs').feature('cdm1').set('minput_pressure', 'p0');
model.physics('tcs').feature('cdm1').set('u', {'-tcs.dflux_w3x/(w3*tcs.rho)' '0' '0'});
model.physics('tcs').feature('cdm1').setIndex('DF', 'D12', 0, 0);
model.physics('tcs').feature('cdm1').setIndex('DF', 'D13', 1, 0);
model.physics('tcs').feature('cdm1').setIndex('DF', 'D23', 2, 0);
model.physics('tcs').feature('init1').setIndex('w0', 'w_ace0', 0);
model.physics('tcs').feature('init1').setIndex('w0', 'w_met0', 1);
model.physics('tcs').create('mf1', 'MassFraction', 0);
model.physics('tcs').feature('mf1').selection.set([1]);
model.physics('tcs').feature('mf1').setIndex('species', true, 0);
model.physics('tcs').feature('mf1').setIndex('wbnd', 'w_ace0', 0);
model.physics('tcs').feature('mf1').setIndex('species', true, 1);
model.physics('tcs').feature('mf1').setIndex('wbnd', 'w_met0', 1);
model.physics('tcs').create('mf2', 'MassFraction', 0);
model.physics('tcs').feature('mf2').selection.set([2]);
model.physics('tcs').feature('mf2').setIndex('species', true, 0);
model.physics('tcs').feature('mf2').setIndex('species', true, 1);

model.mesh('mesh1').autoMeshSize(2);
model.mesh('mesh1').run;

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(1);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, mass fractions (tcs)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, mass fractions (tcs)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Concentrations, All Species');
model.result('pg1').label('Concentrations, All Species (tcs)');
model.result('pg1').create('lngr1', 'LineGraph');
model.result('pg1').feature('lngr1').set('xdata', 'expr');
model.result('pg1').feature('lngr1').set('xdataexpr', 'x');
model.result('pg1').feature('lngr1').selection.geom('geom1', 1);
model.result('pg1').feature('lngr1').selection.set([1]);
model.result('pg1').feature('lngr1').set('expr', {'tcs.c_w1'});
model.result('pg1').feature('lngr1').label('Species w1');
model.result('pg1').feature('lngr1').set('legend', true);
model.result('pg1').feature('lngr1').set('autosolution', false);
model.result('pg1').feature('lngr1').set('autoexpr', false);
model.result('pg1').feature('lngr1').set('autodescr', false);
model.result('pg1').feature('lngr1').set('legendprefix', 'w1 ');
model.result('pg1').create('lngr2', 'LineGraph');
model.result('pg1').feature('lngr2').set('xdata', 'expr');
model.result('pg1').feature('lngr2').set('xdataexpr', 'x');
model.result('pg1').feature('lngr2').selection.geom('geom1', 1);
model.result('pg1').feature('lngr2').selection.set([1]);
model.result('pg1').feature('lngr2').set('expr', {'tcs.c_w2'});
model.result('pg1').feature('lngr2').label('Species w2');
model.result('pg1').feature('lngr2').set('legend', true);
model.result('pg1').feature('lngr2').set('autosolution', false);
model.result('pg1').feature('lngr2').set('autoexpr', false);
model.result('pg1').feature('lngr2').set('autodescr', false);
model.result('pg1').feature('lngr2').set('legendprefix', 'w2 ');
model.result('pg1').create('lngr3', 'LineGraph');
model.result('pg1').feature('lngr3').set('xdata', 'expr');
model.result('pg1').feature('lngr3').set('xdataexpr', 'x');
model.result('pg1').feature('lngr3').selection.geom('geom1', 1);
model.result('pg1').feature('lngr3').selection.set([1]);
model.result('pg1').feature('lngr3').set('expr', {'tcs.c_w3'});
model.result('pg1').feature('lngr3').label('Species w3');
model.result('pg1').feature('lngr3').set('legend', true);
model.result('pg1').feature('lngr3').set('autosolution', false);
model.result('pg1').feature('lngr3').set('autoexpr', false);
model.result('pg1').feature('lngr3').set('autodescr', false);
model.result('pg1').feature('lngr3').set('legendprefix', 'w3 ');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').label('Concentration, w1 (tcs)');
model.result('pg2').set('titletype', 'custom');
model.result('pg2').set('prefixintitle', 'Species w1:');
model.result('pg2').set('expressionintitle', false);
model.result('pg2').set('typeintitle', false);
model.result('pg2').create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').set('xdata', 'expr');
model.result('pg2').feature('lngr1').set('xdataexpr', 'x');
model.result('pg2').feature('lngr1').selection.geom('geom1', 1);
model.result('pg2').feature('lngr1').selection.set([1]);
model.result('pg2').feature('lngr1').set('expr', {'tcs.c_w1'});
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').label('Concentration, w2 (tcs)');
model.result('pg3').set('titletype', 'custom');
model.result('pg3').set('prefixintitle', 'Species w2:');
model.result('pg3').set('expressionintitle', false);
model.result('pg3').set('typeintitle', false);
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('xdata', 'expr');
model.result('pg3').feature('lngr1').set('xdataexpr', 'x');
model.result('pg3').feature('lngr1').selection.geom('geom1', 1);
model.result('pg3').feature('lngr1').selection.set([1]);
model.result('pg3').feature('lngr1').set('expr', {'tcs.c_w2'});
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').label('Concentration, w3 (tcs)');
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('prefixintitle', 'Species w3:');
model.result('pg4').set('expressionintitle', false);
model.result('pg4').set('typeintitle', false);
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').set('xdata', 'expr');
model.result('pg4').feature('lngr1').set('xdataexpr', 'x');
model.result('pg4').feature('lngr1').selection.geom('geom1', 1);
model.result('pg4').feature('lngr1').selection.set([1]);
model.result('pg4').feature('lngr1').set('expr', {'tcs.c_w3'});
model.result('pg1').run;
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').label('Experimental Mole Fractions');
model.result.table('tbl1').importData('stefan_tube_exp.csv');
model.result('pg1').run;
model.result('pg1').set('legendlayout', 'outside');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Mole Fractions Compared with Experimental Data');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'Position (m)');
model.result('pg5').set('legendlayout', 'outside');
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg5').feature('lngr1').set('linewidth', 'preference');
model.result('pg5').feature('lngr1').selection.all;
model.result('pg5').feature('lngr1').set('expr', 'tcs.x_w1');
model.result('pg5').feature('lngr1').set('descr', 'Mole fraction');
model.result('pg5').feature('lngr1').set('titletype', 'none');
model.result('pg5').feature('lngr1').set('xdata', 'expr');
model.result('pg5').feature('lngr1').set('xdataexpr', 'x');
model.result('pg5').feature('lngr1').set('linewidth', 2);
model.result('pg5').feature('lngr1').set('legend', true);
model.result('pg5').feature('lngr1').set('legendmethod', 'manual');
model.result('pg5').feature('lngr1').setIndex('legends', 'Acetone', 0);
model.result('pg5').feature.duplicate('lngr2', 'lngr1');
model.result('pg5').run;
model.result('pg5').feature('lngr2').set('expr', 'tcs.x_w2');
model.result('pg5').feature('lngr2').set('descr', 'Mole fraction');
model.result('pg5').feature('lngr2').setIndex('legends', 'Methanol', 0);
model.result('pg5').feature.duplicate('lngr3', 'lngr2');
model.result('pg5').run;
model.result('pg5').feature('lngr3').set('expr', 'tcs.x_w3');
model.result('pg5').feature('lngr3').set('descr', 'Mole fraction');
model.result('pg5').feature('lngr3').setIndex('legends', 'Air', 0);
model.result('pg5').run;
model.result('pg5').create('tblp1', 'Table');
model.result('pg5').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg5').feature('tblp1').set('linewidth', 'preference');
model.result('pg5').feature('tblp1').set('xaxisdata', 1);
model.result('pg5').feature('tblp1').set('linemarker', 'cycle');
model.result('pg5').feature('tblp1').set('linestyle', 'none');
model.result('pg5').feature('tblp1').set('linecolor', 'cyclereset');
model.result('pg5').feature('tblp1').set('legend', true);
model.result('pg5').feature('tblp1').set('legendsuffix', ' expr.');
model.result('pg5').run;
model.result('pg5').feature('lngr1').create('comp1', 'Comparison');
model.result('pg5').run;
model.result('pg5').feature('lngr1').feature('comp1').set('column', 2);
model.result('pg5').feature('lngr1').feature('comp1').set('metric', 'rms');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('lngr2').create('comp1', 'Comparison');
model.result('pg5').run;
model.result('pg5').feature('lngr2').feature('comp1').set('column', 3);
model.result('pg5').feature('lngr2').feature('comp1').set('metric', 'rms');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('lngr3').create('comp1', 'Comparison');
model.result('pg5').run;
model.result('pg5').feature('lngr3').feature('comp1').set('column', 4);
model.result('pg5').feature('lngr3').feature('comp1').set('metric', 'rms');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Velocity Field');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'Position (m)');
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg6').feature('lngr1').set('linewidth', 'preference');
model.result('pg6').feature('lngr1').selection.set([1]);
model.result('pg6').feature('lngr1').set('expr', 'tcs.u');
model.result('pg6').feature('lngr1').set('descr', 'Velocity field, x-component');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', 'x');
model.result('pg6').feature('lngr1').set('linewidth', 2);
model.result('pg6').run;
model.result('pg2').run;
model.result.remove('pg2');
model.result.remove('pg3');
model.result.remove('pg4');
model.result('pg5').run;

model.title('Stefan Tube');

model.description(['This is an example of a steady-state multicomponent gas-diffusion model in 1D. The diffusion of three gases in a Stefan tube is modeled using the Transport of Concentrated Species interface with the Maxwell' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Stefan diffusion mechanism. Steady-state mole fraction profiles are calculated and validated against experimental data.']);

model.label('stefan_tube.mph');

model.modelNode.label('Components');

out = model;
