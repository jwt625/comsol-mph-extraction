function out = model
%
% pem_gdl_species_transport_2d.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fuel_Cell_and_Electrolyzer_Module/Fuel_Cells');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('fc', 'HydrogenFuelCell', 'geom1');
model.physics('fc').model('comp1');
model.physics('fc').prop('H2GasMixture').set('H2O', '1');
model.physics('fc').prop('H2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('O2GasMixture').set('H2O', '1');
model.physics('fc').prop('O2GasMixture').set('N2', '1');
model.physics('fc').prop('O2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('ElectrolyteType', 'ProtonExchange');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('OperationMode', 'FuelCell');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('TRHE', '50[degC]');

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/fc', true);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/fc', true);

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'2.5e-4' '2e-3'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'1e-4' '2e-3'});
model.geom('geom1').feature('r2').set('pos', {'2.5e-4' '0'});
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', {'2.5e-4' '2e-3'});
model.geom('geom1').feature('r3').set('pos', {'3.5e-4' '0'});
model.geom('geom1').run('r3');
model.geom('geom1').create('r4', 'Rectangle');
model.geom('geom1').feature('r4').set('size', {'1e-4' '5e-4'});
model.geom('geom1').feature('r4').set('pos', {'-1e-4' '0'});
model.geom('geom1').run('r4');
model.geom('geom1').create('arr1', 'Array');
model.geom('geom1').feature('arr1').selection('input').set({'r4'});
model.geom('geom1').feature('arr1').set('fullsize', [2 2]);
model.geom('geom1').feature('arr1').set('displ', {'7e-4' '1.5e-3'});
model.geom('geom1').run('arr1');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'arr1(1,1)' 'arr1(1,2)' 'r1'});
model.geom('geom1').feature('uni1').set('intbnd', false);
model.geom('geom1').run('uni1');
model.geom('geom1').create('uni2', 'Union');
model.geom('geom1').feature('uni2').selection('input').set({'arr1(2,1)' 'arr1(2,2)' 'r3'});
model.geom('geom1').feature('uni2').set('intbnd', false);
model.geom('geom1').run('uni2');
model.geom('geom1').create('fil1', 'Fillet');
model.geom('geom1').feature('fil1').selection('point').set('uni1', [6 7]);
model.geom('geom1').feature('fil1').selection('point').set('uni2', [4 5]);
model.geom('geom1').feature('fil1').set('radius', '1e-5');
model.geom('geom1').run('fin');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('V_cell', '0.7[V]', 'Cell voltage');
model.param.set('T', '353[K]', 'Temperature');
model.param.set('kappa_s', '1000[S/m]', 'Conductivity, solid phase');
model.param.set('kappa_p', '1e-13[m^2]', 'GDL permeability');
model.param.set('tortx', '1.1', 'Tortuosity, x-direction');
model.param.set('torty', '2.8', 'Tortuosity, y-direction');
model.param.set('p_ref', '1[atm]', 'Reference pressure');
model.param.set('p_a_in', 'p_ref+25[mbar]', 'Anode inlet pressure');
model.param.set('p_c_in', 'p_ref+50[mbar]', 'Cathode inlet pressure');
model.param.set('E_eq_a', '0[V]', 'Equilibrium potential, anode');
model.param.set('E_eq_c', '1[V]', 'Equilibrium potential, cathode');
model.param.set('i0_a', '1e5[A/m^2]', 'Exchange current density, anode');
model.param.set('i0_c', '1[A/m^2]', 'Exchange current density, cathode');
model.param.set('eps_mic', '0.2', 'Microscopic porosity inside agglomerates');
model.param.set('eps_mac', '0.4', 'Macroscopic porosity between agglomerates');
model.param.set('S', '1e7[m^2/m^3]', 'Specific surface area, agglomerate');
model.param.set('R_agg', '0.1[um]', 'Agglomerate radius');
model.param.set('l_act', '10[um]', 'Active GDE layer thickness');
model.param.set('D_agg', '1.2e-10[m^2/s]*((1-eps_mac)*eps_mic)^1.5', 'Effective diffusion coefficient inside agglomerates');
model.param.set('K', '-6*F_const*D_agg/R_agg^2', 'Agglomerate current density subexpression');
model.param.set('Av', '3*(1-eps_mac)/R_agg', 'Specific surface area, GDE');
model.param.set('xH2Oa_in', '0.42', 'Inlet molar fraction, H2O');
model.param.set('xH2_in', '1-xH2Oa_in', 'Inlet molar fraction, H2');
model.param.set('xH2Oc_in', '0.42', 'Inlet molar fraction, H2O');
model.param.set('xO2_in', '0.21*(1-xH2Oc_in)', 'Inlet molar fraction, O2');
model.param.set('xN2_in', '0.79*(1-xH2Oc_in)', 'Inlet molar fraction, N2');
model.param.set('KH2', '3.9e4[Pa*m^3/mol]', 'Henry''s law constant, H2 in agglomerate');
model.param.set('KO2', '3.2e4[Pa*m^3/mol]', 'Henry''s law constant, O2 in agglomerate');
model.param.set('cH2_ref', 'xH2_in*p_ref/KH2', 'Reference concentration, H2');
model.param.set('cO2_ref', 'xO2_in*p_ref/KO2', 'Reference concentration, O2');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').set([1]);
model.selection('sel1').label('Anode GDL');
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').set([2]);
model.selection('sel2').label('Membrane');
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').set([3]);
model.selection('sel3').label('Cathode GDL');
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').geom(1);
model.selection('sel4').set([10]);
model.selection('sel4').label('Anode GDE');
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').geom(1);
model.selection('sel5').set([13]);
model.selection('sel5').label('Cathode GDE');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Anode GDL Variables');
model.variable('var1').selection.geom('geom1', 2);
model.variable('var1').selection.named('sel1');
model.variable('var1').set('wReact', 'fc.wH2');
model.variable('var1').descr('wReact', 'Mass fraction, reactant');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Cathode GDL Variables');
model.variable('var2').selection.geom('geom1', 2);
model.variable('var2').selection.named('sel3');
model.variable('var2').set('wReact', 'fc.wO2', 'Mass fraction, reactant');
model.variable('var2').descr('wReact', 'Mass fraction, reactant');
model.variable.create('var3');
model.variable('var3').model('comp1');
model.variable('var3').label('Anode GDE Variables');
model.variable('var3').selection.geom('geom1', 1);
model.variable('var3').selection.named('sel4');
model.variable('var3').set('cH2_agg', 'fc.p*fc.xH2/KH2');
model.variable('var3').descr('cH2_agg', 'Henry''s law hydrogen agglomerate concentration');
model.variable('var3').set('eta_a', 'fc.phis-fc.phil-E_eq_a');
model.variable('var3').descr('eta_a', 'Anodic overpotential');
model.variable('var3').set('beta_a', 'cH2_agg-cH2_ref*exp(-2*F_const*eta_a/(R_const*T))');
model.variable('var3').descr('beta_a', '');
model.variable('var3').set('lda_a', 'sqrt(i0_a*S*R_agg^2/(2*F_const*cH2_ref*D_agg))');
model.variable('var3').descr('lda_a', 'Anodic current density subexpression');
model.variable('var3').set('i_a', 'K*(1-lda_a*coth(lda_a))*beta_a*(R_agg/3)');
model.variable('var3').descr('i_a', 'Anode current density');
model.variable.create('var4');
model.variable('var4').model('comp1');
model.variable('var4').label('Cathode GDE Variables');
model.variable('var4').selection.geom('geom1', 1);
model.variable('var4').selection.named('sel5');
model.variable('var4').set('cO2_agg', 'fc.p*fc.xO2/KO2');
model.variable('var4').descr('cO2_agg', 'Henry''s law oxygen agglomerate concentration');
model.variable('var4').set('eta_c', 'fc.phis-fc.phil-E_eq_c');
model.variable('var4').descr('eta_c', 'Cathodic overvoltage');
model.variable('var4').set('lda_c', 'sqrt(i0_c*S*R_agg^2*exp(-F_const*eta_c/(2*R_const*T))/(4*F_const*cO2_ref*D_agg))');
model.variable('var4').descr('lda_c', 'Cathodic current density subexpression');
model.variable('var4').set('i_c', '-2*K*(1-lda_c*coth(lda_c))*cO2_agg*(R_agg/3)');
model.variable('var4').descr('i_c', 'Cathode current density');

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').label('Average collector');
model.cpl('aveop1').set('opname', 'aveop_ca');
model.cpl('aveop1').selection.geom('geom1', 1);
model.cpl('aveop1').selection.set([8 23 24]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('ElectrolyteConductivity', 'Electrolyte conductivity');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('MembraneCrossover', 'Membrane crossover');
model.material('mat1').propertyGroup.create('PolymerElectrolyteWaterTransport', 'Polymer electrolyte water transport');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('PolymerElectrolyteWaterAbsorptionDesorption', 'Polymer electrolyte water absorption-desorption');
model.material('mat1').label('Nafion, EW 1100, Vapor Equilibrated, Protonated');
model.material('mat1').set('family', 'glass');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'(0.177+3.7e-3*lambda)[W/m/K]' '0' '0' '0' '(0.177+3.7e-3*lambda)[W/m/K]' '0' '0' '0' '(0.177+3.7e-3*lambda)[W/m/K]'});
model.material('mat1').propertyGroup('def').set('INFO_PREFIX:thermalconductivity', ['Ex situ measurements of through-plane thermal conductivities' newline 'in a polymer electrolyte fuel cell,' newline 'O Burheim, P Vie, J Pharoah, S. Kjelstrup, Journal of Power Sources 195 (2010) 249' native2unicode(hex2dec({'20' '13'}), 'unicode') '256']);
model.material('mat1').propertyGroup('def').set('lambda', 'pewt.lambda');
model.material('mat1').propertyGroup('def').descr('lambda', '');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('source', 'file');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('importedname', 'nafion_1100_conductivity_vapor_eq.csv');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('importeddim', '2D');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('funcs', {'sigma_vs_T_and_RH' '1'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('fununit', {'S/cm'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('argunit', {'1' '1'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('sourcetype', 'model');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('nargs', '2');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('struct', 'spreadsheet');
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('sigmal', {'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))' '0' '0' '0' 'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))' '0' '0' '0' 'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('INFO_PREFIX:sigmal', ['Yoshitsugu Sone et al 1996 J. Electrochem. Soc. 143 1254' newline '(Conductivity data refers to the "E-form" values, Figure 5a and 5b)']);
model.material('mat1').propertyGroup('ElectrolyteConductivity').addInput('temperature');
model.material('mat1').propertyGroup('ElectrolyteConductivity').addInput('relativehumidity');
model.material('mat1').propertyGroup('MembraneCrossover').set('Psi_H2', '(2.2e-11*f+2.9e-12)[mol/cm/s/bar]*exp(21[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat1').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_H2', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041' newline ]);
model.material('mat1').propertyGroup('MembraneCrossover').set('Psi_O2', '(1.9e-11*f+1.1e-12)[mol/cm/s/bar]*exp(22[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat1').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_O2', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat1').propertyGroup('MembraneCrossover').set('Psi_N2', 'Psi_O2');
model.material('mat1').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_N2', 'Approximated as equal to oxygen value (no reference).');
model.material('mat1').propertyGroup('MembraneCrossover').set('lambda', 'pewt.lambda');
model.material('mat1').propertyGroup('MembraneCrossover').descr('lambda', 'Water uptake');
model.material('mat1').propertyGroup('MembraneCrossover').set('EW', '1100[g/mol]');
model.material('mat1').propertyGroup('MembraneCrossover').descr('EW', 'Polymer electrolyte equivalent weight');
model.material('mat1').propertyGroup('MembraneCrossover').set('Vm', 'EW/2[g/cm^3]');
model.material('mat1').propertyGroup('MembraneCrossover').descr('Vm', 'Partial molar volume of dry polymer');
model.material('mat1').propertyGroup('MembraneCrossover').set('V0', '18[g/mol]/1000[kg/m^3]');
model.material('mat1').propertyGroup('MembraneCrossover').descr('V0', 'Water partial molar volume');
model.material('mat1').propertyGroup('MembraneCrossover').set('f', 'lambda*V0/(Vm+lambda*V0)');
model.material('mat1').propertyGroup('MembraneCrossover').descr('f', 'Water volume fraction in polymer');
model.material('mat1').propertyGroup('MembraneCrossover').addInput('relativehumidity');
model.material('mat1').propertyGroup('MembraneCrossover').addInput('temperature');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('funcname', 'lambda');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('table', {'0.00' '0.0';  ...
'0.14' '1.9';  ...
'0.37' '2.9';  ...
'0.45' '3.1';  ...
'0.51' '3.7';  ...
'0.57' '4.3';  ...
'0.79' '6.3';  ...
'0.80' '6.8';  ...
'0.81' '7.9';  ...
'0.88' '10.0';  ...
'0.91' '12.0';  ...
'0.96' '13.2';  ...
'1.00' '14.0'});
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('argunit', {'1'});
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('alpha', 'max(c0*Dmu/(R_const*T*(1-x0)),1e-9)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('INFO_PREFIX:alpha', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('xi', 'if(lambda>1,1,lambda)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('INFO_PREFIX:xi', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('lambda', 'lambda(phi)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('lambda', 'Water uptake');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('EW', '1100[g/mol]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('EW', 'Polymer electrolyte equivalent weight');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('Vm', 'EW/2[g/cm^3]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('Vm', 'Partial molar volume of dry polymer');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('V0', '18[g/mol]/1000[kg/m^3]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('V0', 'Water partial molar volume');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('f', 'lambda*V0/(Vm+lambda*V0)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('f', 'Water volume fraction in polymer');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('Dmu', '1.8e-5[cm^2/s]*f*exp(20[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('Dmu', 'Water diffusion coefficient');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('c0', 'lambda/(V0*lambda+Vm)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('c0', 'Water concentration');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('x0', 'lambda/(lambda+1)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('x0', 'Water mole fraction');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').addInput('temperature');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').addInput('relativehumidity');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').set('k_abs_dsp', '1.04e-7*exp(4.48*max(min(phi,0.85),0.25))[mol/cm^2/s]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').set('INFO_PREFIX:k_abs_dsp', ['Kientiz, Yamada, Nonoyama, Weber,' newline 'Journal of Fuel Cell Science and Technology, Feb 2011, Vol. 8,  Article Number 011013']);
model.material('mat1').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').addInput('relativehumidity');
model.material('mat1').selection.set([2]);
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('ElectrolyteConductivity', 'Electrolyte conductivity');
model.material('mat2').propertyGroup('ElectrolyteConductivity').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('MembraneCrossover', 'Membrane crossover');
model.material('mat2').propertyGroup.create('PolymerElectrolyteWaterTransport', 'Polymer electrolyte water transport');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('PolymerElectrolyteWaterAbsorptionDesorption', 'Polymer electrolyte water absorption-desorption');
model.material('mat2').label('Nafion, EW 1100, Vapor Equilibrated, Protonated 1');
model.material('mat2').set('family', 'glass');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'(0.177+3.7e-3*lambda)[W/m/K]' '0' '0' '0' '(0.177+3.7e-3*lambda)[W/m/K]' '0' '0' '0' '(0.177+3.7e-3*lambda)[W/m/K]'});
model.material('mat2').propertyGroup('def').set('INFO_PREFIX:thermalconductivity', ['Ex situ measurements of through-plane thermal conductivities' newline 'in a polymer electrolyte fuel cell,' newline 'O Burheim, P Vie, J Pharoah, S. Kjelstrup, Journal of Power Sources 195 (2010) 249' native2unicode(hex2dec({'20' '13'}), 'unicode') '256']);
model.material('mat2').propertyGroup('def').set('lambda', 'pewt.lambda');
model.material('mat2').propertyGroup('def').descr('lambda', '');
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('source', 'file');
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('importedname', 'nafion_1100_conductivity_vapor_eq.csv');
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('importeddim', '2D');
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('funcs', {'sigma_vs_T_and_RH' '1'});
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('fununit', {'S/cm'});
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('argunit', {'1' '1'});
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('sourcetype', 'model');
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('nargs', '2');
model.material('mat2').propertyGroup('ElectrolyteConductivity').func('int1').set('struct', 'spreadsheet');
model.material('mat2').propertyGroup('ElectrolyteConductivity').set('sigmal', {'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))' '0' '0' '0' 'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))' '0' '0' '0' 'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))'});
model.material('mat2').propertyGroup('ElectrolyteConductivity').set('INFO_PREFIX:sigmal', ['Yoshitsugu Sone et al 1996 J. Electrochem. Soc. 143 1254' newline '(Conductivity data refers to the "E-form" values, Figure 5a and 5b)']);
model.material('mat2').propertyGroup('ElectrolyteConductivity').addInput('temperature');
model.material('mat2').propertyGroup('ElectrolyteConductivity').addInput('relativehumidity');
model.material('mat2').propertyGroup('MembraneCrossover').set('Psi_H2', '(2.2e-11*f+2.9e-12)[mol/cm/s/bar]*exp(21[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat2').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_H2', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041' newline ]);
model.material('mat2').propertyGroup('MembraneCrossover').set('Psi_O2', '(1.9e-11*f+1.1e-12)[mol/cm/s/bar]*exp(22[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat2').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_O2', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat2').propertyGroup('MembraneCrossover').set('Psi_N2', 'Psi_O2');
model.material('mat2').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_N2', 'Approximated as equal to oxygen value (no reference).');
model.material('mat2').propertyGroup('MembraneCrossover').set('lambda', 'pewt.lambda');
model.material('mat2').propertyGroup('MembraneCrossover').descr('lambda', 'Water uptake');
model.material('mat2').propertyGroup('MembraneCrossover').set('EW', '1100[g/mol]');
model.material('mat2').propertyGroup('MembraneCrossover').descr('EW', 'Polymer electrolyte equivalent weight');
model.material('mat2').propertyGroup('MembraneCrossover').set('Vm', 'EW/2[g/cm^3]');
model.material('mat2').propertyGroup('MembraneCrossover').descr('Vm', 'Partial molar volume of dry polymer');
model.material('mat2').propertyGroup('MembraneCrossover').set('V0', '18[g/mol]/1000[kg/m^3]');
model.material('mat2').propertyGroup('MembraneCrossover').descr('V0', 'Water partial molar volume');
model.material('mat2').propertyGroup('MembraneCrossover').set('f', 'lambda*V0/(Vm+lambda*V0)');
model.material('mat2').propertyGroup('MembraneCrossover').descr('f', 'Water volume fraction in polymer');
model.material('mat2').propertyGroup('MembraneCrossover').addInput('relativehumidity');
model.material('mat2').propertyGroup('MembraneCrossover').addInput('temperature');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('funcname', 'lambda');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('table', {'0.00' '0.0';  ...
'0.14' '1.9';  ...
'0.37' '2.9';  ...
'0.45' '3.1';  ...
'0.51' '3.7';  ...
'0.57' '4.3';  ...
'0.79' '6.3';  ...
'0.80' '6.8';  ...
'0.81' '7.9';  ...
'0.88' '10.0';  ...
'0.91' '12.0';  ...
'0.96' '13.2';  ...
'1.00' '14.0'});
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('argunit', {'1'});
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('alpha', 'max(c0*Dmu/(R_const*T*(1-x0)),1e-9)');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('INFO_PREFIX:alpha', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('xi', 'if(lambda>1,1,lambda)');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('INFO_PREFIX:xi', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('lambda', 'lambda(phi)');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('lambda', 'Water uptake');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('EW', '1100[g/mol]');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('EW', 'Polymer electrolyte equivalent weight');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('Vm', 'EW/2[g/cm^3]');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('Vm', 'Partial molar volume of dry polymer');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('V0', '18[g/mol]/1000[kg/m^3]');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('V0', 'Water partial molar volume');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('f', 'lambda*V0/(Vm+lambda*V0)');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('f', 'Water volume fraction in polymer');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('Dmu', '1.8e-5[cm^2/s]*f*exp(20[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('Dmu', 'Water diffusion coefficient');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('c0', 'lambda/(V0*lambda+Vm)');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('c0', 'Water concentration');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').set('x0', 'lambda/(lambda+1)');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').descr('x0', 'Water mole fraction');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').addInput('temperature');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterTransport').addInput('relativehumidity');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').set('k_abs_dsp', '1.04e-7*exp(4.48*max(min(phi,0.85),0.25))[mol/cm^2/s]');
model.material('mat2').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').set('INFO_PREFIX:k_abs_dsp', ['Kientiz, Yamada, Nonoyama, Weber,' newline 'Journal of Fuel Cell Science and Technology, Feb 2011, Vol. 8,  Article Number 011013']);
model.material('mat2').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').addInput('relativehumidity');
model.material('mat2').selection.geom('geom1', 1);
model.material('mat2').selection.set([10 13]);

model.physics('fc').prop('H2GasMixture').set('GasMixtureDarcy', true);
model.physics('fc').prop('O2GasMixture').set('GasMixtureDarcy', true);
model.physics('fc').prop('MembraneTransport').set('H2O_mem', true);
model.physics('fc').prop('ReferencePressureLevel').set('pref', 0);
model.physics('fc').create('mem1', 'Membrane', 2);
model.physics('fc').feature('mem1').selection.named('sel2');
model.physics('fc').create('h2gdl1', 'H2GasDiffusionLayer', 2);
model.physics('fc').feature('h2gdl1').selection.named('sel1');
model.physics('fc').create('o2gdl1', 'O2GasDiffusionLayer', 2);
model.physics('fc').feature('o2gdl1').selection.named('sel3');
model.physics('fc').create('th2gde1', 'ThinH2GasDiffusionElectrode', 1);
model.physics('fc').feature('th2gde1').selection.named('sel4');
model.physics('fc').create('to2gde1', 'ThinO2GasDiffusionElectrode', 1);
model.physics('fc').feature('to2gde1').selection.named('sel5');
model.physics('fc').feature('mem1').feature('init1').set('T0', 'T');
model.physics('fc').feature('h2gdl1').set('sigmas', {'kappa_s' '0' '0' '0' 'kappa_s' '0' '0' '0' 'kappa_s'});
model.physics('fc').feature('h2gdl1').set('DiffusionCorrModel', 'Tortuosity');
model.physics('fc').feature('h2gdl1').set('epsg', 'eps_mac');
model.physics('fc').feature('h2gdl1').set('taug', {'tortx' '0' '0' '0' 'torty' '0' '0' '0' '0'});
model.physics('fc').feature('h2gdl1').set('kappag', {'kappa_p' '0' '0' '0' 'kappa_p' '0' '0' '0' 'kappa_p'});
model.physics('fc').feature('o2gdl1').set('sigmas', {'kappa_s' '0' '0' '0' 'kappa_s' '0' '0' '0' 'kappa_s'});
model.physics('fc').feature('o2gdl1').set('DiffusionCorrModel', 'Tortuosity');
model.physics('fc').feature('o2gdl1').set('epsg', 'eps_mac');
model.physics('fc').feature('o2gdl1').set('taug', {'tortx' '0' '0' '0' 'torty' '0' '0' '0' '0'});
model.physics('fc').feature('o2gdl1').set('kappag', {'kappa_p' '0' '0' '0' 'kappa_p' '0' '0' '0' 'kappa_p'});
model.physics('fc').feature('th2gde1').set('d_gde', 'l_act');
model.physics('fc').feature('th2gde1').feature('th2gder1').set('Eeq_mat', 'userdef');
model.physics('fc').feature('th2gde1').feature('th2gder1').set('ilocmat_mat', 'userdef');
model.physics('fc').feature('th2gde1').feature('th2gder1').set('ilocmat', 'i_a');
model.physics('fc').feature('th2gde1').feature('th2gder1').set('Av', 'Av');
model.physics('fc').feature('to2gde1').set('d_gde', 'l_act');
model.physics('fc').feature('to2gde1').feature('to2gder1').set('Eeq_mat', 'userdef');
model.physics('fc').feature('to2gde1').feature('to2gder1').set('ilocmat_mat', 'userdef');
model.physics('fc').feature('to2gde1').feature('to2gder1').set('ilocmat', 'i_c');
model.physics('fc').feature('to2gde1').feature('to2gder1').set('Av', 'Av');
model.physics('fc').feature('ecph1').create('inito2dom1', 'InitialValuesO2Domains', 2);
model.physics('fc').feature('ecph1').feature('inito2dom1').selection.set([3]);
model.physics('fc').feature('ecph1').feature('inito2dom1').set('initphis', 'V_cell');
model.physics('fc').feature('ecph1').create('egnd1', 'ElectricGround', 1);
model.physics('fc').feature('ecph1').feature('egnd1').selection.set([8 23 24]);
model.physics('fc').feature('ecph1').create('pot1', 'ElectricPotential', 1);
model.physics('fc').feature('ecph1').feature('pot1').selection.set([17]);
model.physics('fc').feature('ecph1').feature('pot1').set('phisbnd', 'V_cell');
model.physics('fc').feature('h2gasph1').create('h2in1', 'H2Inlet', 1);
model.physics('fc').feature('h2gasph1').feature('h2in1').selection.set([1]);
model.physics('fc').feature('h2gasph1').feature('h2in1').set('FlowBoundaryCondition', 'Pressure');
model.physics('fc').feature('h2gasph1').feature('h2in1').set('p0', 'p_a_in');
model.physics('fc').feature('h2gasph1').create('h2in2', 'H2Inlet', 1);
model.physics('fc').feature('h2gasph1').feature('h2in2').selection.set([4]);
model.physics('fc').feature('h2gasph1').feature('init1').set('x0H2O', 'xH2Oa_in');
model.physics('fc').feature('h2gasph1').feature('init1').set('pinit', 'p_ref');
model.physics('fc').feature('o2gasph1').create('o2in1', 'O2Inlet', 1);
model.physics('fc').feature('o2gasph1').feature('o2in1').selection.set([22]);
model.physics('fc').feature('o2gasph1').feature('o2in1').set('FlowBoundaryCondition', 'Pressure');
model.physics('fc').feature('o2gasph1').feature('o2in1').set('p0', 'p_c_in');
model.physics('fc').feature('o2gasph1').create('o2in2', 'O2Inlet', 1);
model.physics('fc').feature('o2gasph1').feature('o2in2').selection.set([21]);
model.physics('fc').feature('o2gasph1').feature('init1').set('x0H2O', 'xH2Oc_in');
model.physics('fc').feature('o2gasph1').feature('init1').set('x0N2', 'xN2_in');
model.physics('fc').feature('o2gasph1').feature('init1').set('pinit', 'p_ref');

model.common('cminpt').set('modified', {'temperature' 'T'});

model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh1').feature('size1').selection.set([10 13]);
model.mesh('mesh1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('size1').set('hmax', '2.5e-5');
model.mesh('mesh1').create('size2', 'Size');
model.mesh('mesh1').feature('size2').selection.geom('geom1', 0);
model.mesh('mesh1').feature('size2').selection.set([5 6 16 17]);
model.mesh('mesh1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('size2').set('hmax', '1e-5');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').run;

model.study('std1').feature('cdi').set('initType', 'secondary');
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'V_cell', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'V', 0);
model.study('std1').feature('stat').setIndex('pname', 'V_cell', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'V', 0);
model.study('std1').feature('stat').setIndex('plistarr', 'range(1,-0.1,0.4)', 0);
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'V_cell', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'V', 0);
model.study('std1').feature('param').setIndex('pname', 'V_cell', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'V', 0);
model.study('std1').feature('param').setIndex('pname', 'tortx', 0);
model.study('std1').feature('param').setIndex('plistarr', '1.1 2.8', 0);
model.study('std1').feature('param').setIndex('pname', 'V_cell', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'V', 1);
model.study('std1').feature('param').setIndex('pname', 'V_cell', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'V', 1);
model.study('std1').feature('param').setIndex('pname', 'torty', 1);
model.study('std1').feature('param').setIndex('plistarr', '1.1 2.8', 1);
model.study('std1').feature('param').set('sweeptype', 'filled');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_mu0').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_mu0').set('scaleval', 'F_const');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_wN2_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_H2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_mu0').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_O2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_wN2_O2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_H2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_mu0').set('scaleval', 'F_const');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-4);
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s2').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s2').set('control', 'stat');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'tortx' 'torty'});
model.batch('p1').set('plistarr', {'1.1 2.8' '1.1 2.8'});
model.batch('p1').set('sweeptype', 'filled');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol3');
model.sol('sol3').study('std1');
model.sol('sol3').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol3');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset3');
model.result('pg1').setIndex('looplevel', 7, 0);
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').setIndex('looplevel', 2, 2);
model.result('pg1').label('Electrode Potential with Respect to Ground (fc)');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'fc.phis'});
model.result('pg1').create('arws1', 'ArrowSurface');
model.result('pg1').feature('arws1').set('expr', {'fc.Isx' 'fc.Isy'});
model.result('pg1').feature('arws1').set('arrowbase', 'center');
model.result('pg1').feature('arws1').set('color', 'gray');
model.result('pg1').feature('arws1').create('filt1', 'Filter');
model.result('pg1').feature('arws1').feature('filt1').set('expr', 'isdefined(root.comp1.fc.phis)');
model.result('pg1').feature('arws1').feature('filt1').set('nodespec', 'all');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset3');
model.result('pg2').setIndex('looplevel', 7, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').setIndex('looplevel', 2, 2);
model.result('pg2').label('Electrolyte Potential (fc)');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'fc.phil'});
model.result('pg2').create('arws1', 'ArrowSurface');
model.result('pg2').feature('arws1').set('expr', {'fc.Ilx' 'fc.Ily'});
model.result('pg2').feature('arws1').set('arrowbase', 'center');
model.result('pg2').feature('arws1').set('color', 'gray');
model.result('pg2').feature('arws1').create('filt1', 'Filter');
model.result('pg2').feature('arws1').feature('filt1').set('expr', 'isdefined(fc.phil)');
model.result('pg2').feature('arws1').feature('filt1').set('nodespec', 'all');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 7, 0);
model.result('pg3').setIndex('looplevel', 2, 1);
model.result('pg3').setIndex('looplevel', 2, 2);
model.result('pg3').label('Mole Fraction, H2 (fc)');
model.result('pg3').set('titletype', 'custom');
model.result('pg3').set('prefixintitle', 'Species H2:');
model.result('pg3').set('expressionintitle', false);
model.result('pg3').set('typeintitle', true);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'fc.xH2'});
model.result('pg3').create('str1', 'Streamline');
model.result('pg3').feature('str1').set('expr', {'fc.tfluxH2x' 'fc.tfluxH2y'});
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('recover', 'pprint');
model.result('pg3').feature('str1').set('pointtype', 'arrow');
model.result('pg3').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('str1').set('color', 'gray');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 7, 0);
model.result('pg4').setIndex('looplevel', 2, 1);
model.result('pg4').setIndex('looplevel', 2, 2);
model.result('pg4').label('Mole Fraction, O2 (fc)');
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('prefixintitle', 'Species O2:');
model.result('pg4').set('expressionintitle', false);
model.result('pg4').set('typeintitle', true);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'fc.xO2'});
model.result('pg4').create('str1', 'Streamline');
model.result('pg4').feature('str1').set('expr', {'fc.tfluxO2x' 'fc.tfluxO2y'});
model.result('pg4').feature('str1').set('posmethod', 'uniform');
model.result('pg4').feature('str1').set('recover', 'pprint');
model.result('pg4').feature('str1').set('pointtype', 'arrow');
model.result('pg4').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg4').feature('str1').set('color', 'gray');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 7, 0);
model.result('pg5').setIndex('looplevel', 2, 1);
model.result('pg5').setIndex('looplevel', 2, 2);
model.result('pg5').label('Mole Fraction, H2O (fc)');
model.result('pg5').set('titletype', 'custom');
model.result('pg5').set('prefixintitle', 'Species H2O:');
model.result('pg5').set('expressionintitle', false);
model.result('pg5').set('typeintitle', true);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'fc.xH2O'});
model.result('pg5').create('str1', 'Streamline');
model.result('pg5').feature('str1').set('expr', {'fc.tfluxH2Ox' 'fc.tfluxH2Oy'});
model.result('pg5').feature('str1').set('posmethod', 'uniform');
model.result('pg5').feature('str1').set('recover', 'pprint');
model.result('pg5').feature('str1').set('pointtype', 'arrow');
model.result('pg5').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('str1').set('color', 'gray');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'dset3');
model.result('pg6').setIndex('looplevel', 7, 0);
model.result('pg6').setIndex('looplevel', 2, 1);
model.result('pg6').setIndex('looplevel', 2, 2);
model.result('pg6').label('Mole Fraction, N2 (fc)');
model.result('pg6').set('titletype', 'custom');
model.result('pg6').set('prefixintitle', 'Species N2:');
model.result('pg6').set('expressionintitle', false);
model.result('pg6').set('typeintitle', true);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'fc.xN2'});
model.result('pg6').create('str1', 'Streamline');
model.result('pg6').feature('str1').set('expr', {'fc.tfluxN2x' 'fc.tfluxN2y'});
model.result('pg6').feature('str1').set('posmethod', 'uniform');
model.result('pg6').feature('str1').set('recover', 'pprint');
model.result('pg6').feature('str1').set('pointtype', 'arrow');
model.result('pg6').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg6').feature('str1').set('color', 'gray');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset3');
model.result('pg7').setIndex('looplevel', 7, 0);
model.result('pg7').setIndex('looplevel', 2, 1);
model.result('pg7').setIndex('looplevel', 2, 2);
model.result('pg7').label('Pressure (fc)');
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'fc.p'});
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('expr', {'fc.u' 'fc.v'});
model.result('pg7').feature('str1').set('posmethod', 'uniform');
model.result('pg7').feature('str1').set('recover', 'pprint');
model.result('pg7').feature('str1').set('pointtype', 'arrow');
model.result('pg7').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg7').feature('str1').set('color', 'gray');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').set('data', 'dset3');
model.result('pg8').setIndex('looplevel', 7, 0);
model.result('pg8').setIndex('looplevel', 2, 1);
model.result('pg8').setIndex('looplevel', 2, 2);
model.result('pg8').label('Water Activity (Relative Humidity) (fc)');
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'fc.aw'});
model.result('pg1').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Polarization curves');
model.result('pg9').set('data', 'dset3');
model.result('pg9').set('titletype', 'none');
model.result('pg9').set('xlabelactive', true);
model.result('pg9').set('xlabel', 'Average cell current density (A/m<sup>2</sup>)');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Cell voltage (V)');
model.result('pg9').set('switchxy', true);
model.result('pg9').create('glob1', 'Global');
model.result('pg9').feature('glob1').set('markerpos', 'datapoints');
model.result('pg9').feature('glob1').set('linewidth', 'preference');
model.result('pg9').feature('glob1').setIndex('expr', 'aveop_ca(-fc.nIs)', 0);
model.result('pg9').feature('glob1').setIndex('unit', 'A/cm^2', 0);
model.result('pg9').feature('glob1').setIndex('descr', 'Average current density (A/cm>sup>2</sup>)', 0);
model.result('pg9').feature('glob1').set('legendmethod', 'manual');
model.result('pg9').feature('glob1').setIndex('legends', 'Isotropic, \tau<sub>xx</sub>=1.1 & \tau<sub>yy</sub>=1.1', 0);
model.result('pg9').feature('glob1').setIndex('legends', 'Anisotropic, \tau<sub>xx</sub>=1.1 & \tau<sub>yy</sub>=2.8', 1);
model.result('pg9').feature('glob1').setIndex('legends', 'Anisotropic, \tau<sub>xx</sub>=2.8 & \tau<sub>yy</sub>=1.1', 2);
model.result('pg9').feature('glob1').setIndex('legends', 'Isotropic, \tau<sub>xx</sub>=2.8 & \tau<sub>yy</sub>=2.8', 3);
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').run;
model.result('pg10').label('GDL Current Density Distribution');
model.result('pg10').set('data', 'dset3');
model.result('pg10').setIndex('looplevel', 1, 2);
model.result('pg10').setIndex('looplevel', 1, 1);
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', 'fc.IsMag');
model.result('pg10').feature('surf1').set('descr', 'Electrode current density magnitude');
model.result('pg10').feature('surf1').set('rangecoloractive', true);
model.result('pg10').feature('surf1').set('rangecolormax', '1e4');
model.result('pg10').feature('surf1').set('colortable', 'Prism');
model.result('pg10').run;
model.result('pg10').create('arws1', 'ArrowSurface');
model.result('pg10').feature('arws1').set('expr', {'fc.Isx' 'fc.Isy'});
model.result('pg10').feature('arws1').set('descr', 'Electrode current density vector');
model.result('pg10').feature('arws1').set('scaleactive', true);
model.result('pg10').feature('arws1').set('scale', '5e-9');
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').setIndex('looplevel', 2, 1);
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Anode Reaction Current Density');
model.result('pg11').set('data', 'none');
model.result('pg11').set('titletype', 'none');
model.result('pg11').set('legendpos', 'lowerright');
model.result('pg11').create('lngr1', 'LineGraph');
model.result('pg11').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg11').feature('lngr1').set('linewidth', 'preference');
model.result('pg11').feature('lngr1').set('data', 'dset3');
model.result('pg11').feature('lngr1').setIndex('looplevelinput', 'first', 2);
model.result('pg11').feature('lngr1').setIndex('looplevelinput', 'first', 1);
model.result('pg11').feature('lngr1').setIndex('looplevelinput', 'last', 0);
model.result('pg11').feature('lngr1').selection.named('sel4');
model.result('pg11').feature('lngr1').set('expr', 'i_a');
model.result('pg11').feature('lngr1').set('descr', 'Anode current density');
model.result('pg11').feature('lngr1').set('expr', 'i_a*Av*l_act');
model.result('pg11').feature('lngr1').set('descractive', true);
model.result('pg11').feature('lngr1').set('descr', 'Anode reaction current density');
model.result('pg11').feature('lngr1').set('xdataexpr', 'y');
model.result('pg11').feature('lngr1').set('xdatadescr', 'y-coordinate');
model.result('pg11').feature('lngr1').set('legend', true);
model.result('pg11').feature('lngr1').set('legendmethod', 'manual');
model.result('pg11').feature('lngr1').setIndex('legends', 'Isotropic, \tau<sub>xx</sub>=1.1 & \tau<sub>yy</sub>=1.1', 0);
model.result('pg11').feature.duplicate('lngr2', 'lngr1');
model.result('pg11').run;
model.result('pg11').feature('lngr2').setIndex('looplevelinput', 'last', 1);
model.result('pg11').feature('lngr2').setIndex('legends', 'Anisotropic, \tau<sub>xx</sub>=1.1 & \tau<sub>yy</sub>=2.8', 0);
model.result('pg11').run;
model.result.create('pg12', 'PlotGroup2D');
model.result('pg12').run;
model.result('pg12').label('Velocity Field');
model.result('pg12').set('data', 'dset3');
model.result('pg12').setIndex('looplevel', 1, 2);
model.result('pg12').create('surf1', 'Surface');
model.result('pg12').feature('surf1').set('expr', 'fc.U');
model.result('pg12').feature('surf1').set('descr', 'Velocity magnitude');
model.result('pg12').feature('surf1').set('colortable', 'Prism');
model.result('pg12').run;
model.result('pg12').create('arws1', 'ArrowSurface');
model.result('pg12').feature('arws1').set('expr', {'fc.u' 'fc.v'});
model.result('pg12').feature('arws1').set('descr', 'Velocity field');
model.result('pg12').feature('arws1').set('scaleactive', true);
model.result('pg12').feature('arws1').set('scale', 0.0035);
model.result('pg12').run;
model.result.create('pg13', 'PlotGroup2D');
model.result('pg13').run;
model.result('pg13').label('Reactant Mass Fraction');
model.result('pg13').set('data', 'dset3');
model.result('pg13').setIndex('looplevel', 1, 2);
model.result('pg13').setIndex('looplevel', 1, 1);
model.result('pg13').create('surf1', 'Surface');
model.result('pg13').feature('surf1').set('expr', 'wReact');
model.result('pg13').feature('surf1').set('colortable', 'Prism');
model.result('pg13').run;
model.result('pg13').run;
model.result('pg13').setIndex('looplevel', 2, 1);
model.result('pg1').run;
model.result.remove('pg1');
model.result.remove('pg2');
model.result('pg3').run;

model.title('Species Transport in the Gas Diffusion Layers of a PEM');

model.description('This example demonstrates the modeling of species transport within the gas diffusion layers (GDLs) of a proton exchange membrane (PEM) fuel cell with two adjacent flow channels of different pressures.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;

model.label('pem_gdl_species_transport_2d.mph');

model.modelNode.label('Components');

out = model;
