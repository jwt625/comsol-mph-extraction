function out = model
%
% type_43_ear_simulator.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Tutorials,_Thermoviscous_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);

model.param.set('vn', '1[m/s]');
model.param.descr('vn', 'Source velocity');

model.func.create('int1', 'Interpolation');
model.func('int1').set('source', 'file');
model.func('int1').set('filename', 'type_43_ear_simulator_impedance.txt');
model.func('int1').set('nargs', 1);
model.func('int1').setIndex('funcs', 'absZ', 0, 0);
model.func('int1').setIndex('funcs', 1, 0, 1);
model.func('int1').setIndex('funcs', 'argZ', 1, 0);
model.func('int1').setIndex('funcs', 2, 1, 1);
model.func('int1').set('interp', 'piecewisecubic');
model.func('int1').set('extrap', 'linear');
model.func('int1').setIndex('fununit', 'kg/(m^2*s)', 0);
model.func('int1').setIndex('fununit', 'rad', 1);
model.func('int1').setIndex('argunit', 1, 0);

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').geomRep('cadps');
model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'type_43_ear_simulator_ear_canal.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('Ztrans', 'aveop1(acpr.p_t)');
model.variable('var1').descr('Ztrans', '');
model.variable('var1').set('Zin', 'aveop2(acpr.p_t)/intop1(vn)');
model.variable('var1').descr('Zin', '');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Source');
model.selection('sel1').geom(2);
model.selection('sel1').set([8]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Probe Microphone');
model.selection('sel2').geom(2);
model.selection('sel2').set([9]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Ear Drum');
model.selection('sel3').geom(2);
model.selection('sel3').set([7]);

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.named('sel1');
model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.geom('geom1', 2);
model.cpl('aveop1').selection.named('sel3');
model.cpl.create('aveop2', 'Average', 'geom1');
model.cpl('aveop2').set('axisym', true);
model.cpl('aveop2').selection.geom('geom1', 2);
model.cpl('aveop2').selection.named('sel2');

model.physics('acpr').selection.set([2]);
model.physics('acpr').prop('cref').set('cref', '343[m/s]');
model.physics('acpr').create('imp1', 'Impedance', 2);
model.physics('acpr').feature('imp1').selection.named('sel3');
model.physics('acpr').feature('imp1').set('Zn', 'absZ(log10(freq[1/Hz]))*exp(i*argZ(log10(freq[1/Hz])))');
model.physics('acpr').create('nvel1', 'NormalVelocity', 2);
model.physics('acpr').feature('nvel1').selection.named('sel1');
model.physics('acpr').feature('nvel1').set('nvel', 'vn');
model.physics('acpr').create('tvb1', 'ThermoviscousBoundaryLayerImpedance', 2);
model.physics('acpr').feature('tvb1').selection.set([4 5]);
model.physics('acpr').feature('tvb1').set('FluidMaterial', 'mat1');

model.modelNode.create('comp2', true);

model.geom.create('geom2', 3);
model.geom('geom2').model('comp2');

model.mesh.create('mesh2', 'geom2');

model.geom('geom2').lengthUnit('mm');
model.geom('geom2').create('imp1', 'Import');
model.geom('geom2').feature('imp1').set('filename', 'type_43_ear_simulator_full_ear.mphbin');
model.geom('geom2').feature('imp1').importData;
model.geom('geom2').run('fin');

model.material.create('mat2', 'Common', 'comp2');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat2').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat2').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat2').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat2').label('Air');
model.material('mat2').set('family', 'air');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat2').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat2').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat2').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat2').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat2').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('molarmass', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat2').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material('mat2').propertyGroup('def').addInput('pressure');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat2').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat2').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat2').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat2').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat2').propertyGroup('idealGas').addInput('temperature');
model.material('mat2').propertyGroup('idealGas').addInput('pressure');
model.material('mat2').materialType('nonSolid');

model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp2');
model.selection('sel4').label('Ear Drum');
model.selection('sel4').geom(2);
model.selection('sel4').set([8]);

model.physics.create('acpr2', 'PressureAcoustics', 'geom2');
model.physics('acpr2').model('comp2');

model.study('std1').feature('freq').setSolveFor('/physics/acpr2', true);

model.physics('acpr2').create('tvb1', 'ThermoviscousBoundaryLayerImpedance', 2);
model.physics('acpr2').feature('tvb1').selection.set([6]);
model.physics('acpr2').feature('tvb1').set('FluidMaterial', 'mat2');
model.physics('acpr2').create('bpf1', 'BackgroundPressureField', 3);
model.physics('acpr2').feature('bpf1').selection.set([1]);
model.physics('acpr2').feature('bpf1').set('pamp', 1);
model.physics('acpr2').feature('bpf1').set('c_mat', 'from_mat');
model.physics('acpr2').feature('bpf1').set('dir', [0 -1 0]);
model.physics('acpr2').create('pmb1', 'PerfectlyMatchedBoundary', 2);
model.physics('acpr2').feature('pmb1').selection.set([1 2 4 7 9]);
model.physics('acpr2').feature('pmb1').set('r0', {'110.0[mm]' '67.6[mm]' '40.7[mm]'});
model.physics('acpr2').create('imp1', 'Impedance', 2);
model.physics('acpr2').feature('imp1').selection.named('sel4');
model.physics('acpr2').feature('imp1').set('Zn', 'absZ(log10(freq[1/Hz]))*exp(i*argZ(log10(freq[1/Hz])))');

model.study('std1').label('Study 1 - Ear Canal');
model.study('std1').feature('freq').set('plist', '{20, 21.2, 22.4, 23.6, 25, 26.5, 28, 30, 31.5, 33.5, 35.5, 37.5, 40, 42.5, 45, 47.5, 50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3, 1.06e3, 1.12e3, 1.18e3, 1.25e3, 1.32e3, 1.4e3, 1.5e3, 1.6e3, 1.7e3, 1.8e3, 1.9e3, 2e3, 2.12e3, 2.24e3, 2.36e3, 2.5e3, 2.65e3, 2.8e3, 3e3, 3.15e3, 3.35e3, 3.55e3, 3.75e3, 4e3, 4.25e3, 4.5e3, 4.75e3, 5e3, 5.3e3, 5.6e3, 6e3, 6.3e3, 6.7e3, 7.1e3, 7.5e3, 8e3, 8.5e3, 9e3, 9.5e3, 1e4, 1.06e4, 1.12e4, 1.18e4, 1.25e4, 1.32e4, 1.4e4, 1.5e4, 1.6e4, 1.7e4, 1.8e4, 1.9e4, 2e4}');
model.study('std1').feature('freq').setEntry('activate', 'acpr', true);
model.study('std1').feature('freq').setEntry('activate', 'acpr2', false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'{20, 21.2, 22.4, 23.6, 25, 26.5, 28, 30, 31.5, 33.5, 35.5, 37.5, 40, 42.5, 45, 47.5, 50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3, 1.06e3, 1.12e3, 1.18e3, 1.25e3, 1.32e3, 1.4e3, 1.5e3, 1.6e3, 1.7e3, 1.8e3, 1.9e3, 2e3, 2.12e3, 2.24e3, 2.36e3, 2.5e3, 2.65e3, 2.8e3, 3e3, 3.15e3, 3.35e3, 3.55e3, 3.75e3, 4e3, 4.25e3, 4.5e3, 4.75e3, 5e3, 5.3e3, 5.6e3, 6e3, 6.3e3, 6.7e3, 7.1e3, 7.5e3, 8e3, 8.5e3, 9e3, 9.5e3, 1e4, 1.06e4, 1.12e4, 1.18e4, 1.25e4, 1.32e4, 1.4e4, 1.5e4, 1.6e4, 1.7e4, 1.8e4, 1.9e4, 2e4}'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (acpr)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) (acpr)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'fgmres');
model.sol('sol1').feature('s1').feature('i2').label('Suggested Iterative Solver (FGMRES with GMG) (acpr)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').create('i3', 'Iterative');
model.sol('sol1').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i3').label('Suggested Iterative Solver (Shifted Laplace) (acpr)');
model.sol('sol1').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('mcasegen', 'coarse');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('scale', '3');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('slaplacemain', false);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('slaplacemg', true);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemain', {'acpr2' 'off'});
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemg', {'acpr2' 'off'});
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol1').feature('s1').create('i4', 'Iterative');
model.sol('sol1').feature('s1').feature('i4').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i4').label('Suggested Iterative Solver (Domain Decomposition) (acpr)');
model.sol('sol1').feature('s1').feature('i4').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('dompernodemax', 1);
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('dompernodemaxactive', 'on');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('userac', 'off');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('usecoarse', false);
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('ddboundary', 'absorbing');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('slaplacemain', true);
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('slaplacemg', 'on');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('alphaabsorbing', {'acpr' '1'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('betaabsorbing', {'acpr' '0.1'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('sndorderabsorbing', {'acpr' 'on'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i4').feature('dd1').feature('ds').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('slaplacemg', 'on');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('iter', 1);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std2').feature('freq').setSolveFor('/physics/acpr2', true);
model.study('std2').label('Study 2 - Full Ear');
model.study('std2').feature('freq').set('plist', '{20, 21.2, 22.4, 23.6, 25, 26.5, 28, 30, 31.5, 33.5, 35.5, 37.5, 40, 42.5, 45, 47.5, 50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3, 1.06e3, 1.12e3, 1.18e3, 1.25e3, 1.32e3, 1.4e3, 1.5e3, 1.6e3, 1.7e3, 1.8e3, 1.9e3, 2e3, 2.12e3, 2.24e3, 2.36e3, 2.5e3, 2.65e3, 2.8e3, 3e3, 3.15e3, 3.35e3, 3.55e3, 3.75e3, 4e3, 4.25e3, 4.5e3, 4.75e3, 5e3, 5.3e3, 5.6e3, 6e3, 6.3e3, 6.7e3, 7.1e3, 7.5e3, 8e3, 8.5e3, 9e3, 9.5e3, 1e4, 1.06e4, 1.12e4, 1.18e4, 1.25e4, 1.32e4, 1.4e4, 1.5e4, 1.6e4, 1.7e4, 1.8e4, 1.9e4, 2e4}');
model.study('std2').feature('freq').setEntry('activate', 'acpr', false);
model.study('std2').feature('freq').setEntry('activate', 'acpr2', true);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 0.001);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol2').feature('s1').feature('p1').set('plistarr', {'{20, 21.2, 22.4, 23.6, 25, 26.5, 28, 30, 31.5, 33.5, 35.5, 37.5, 40, 42.5, 45, 47.5, 50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3, 1.06e3, 1.12e3, 1.18e3, 1.25e3, 1.32e3, 1.4e3, 1.5e3, 1.6e3, 1.7e3, 1.8e3, 1.9e3, 2e3, 2.12e3, 2.24e3, 2.36e3, 2.5e3, 2.65e3, 2.8e3, 3e3, 3.15e3, 3.35e3, 3.55e3, 3.75e3, 4e3, 4.25e3, 4.5e3, 4.75e3, 5e3, 5.3e3, 5.6e3, 6e3, 6.3e3, 6.7e3, 7.1e3, 7.5e3, 8e3, 8.5e3, 9e3, 9.5e3, 1e4, 1.06e4, 1.12e4, 1.18e4, 1.25e4, 1.32e4, 1.4e4, 1.5e4, 1.6e4, 1.7e4, 1.8e4, 1.9e4, 2e4}'});
model.sol('sol2').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol2').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol2').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s1').feature('p1').set('probes', {});
model.sol('sol2').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol2').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('s1').set('control', 'freq');
model.sol('sol2').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol2').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol2').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (acpr2)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) (acpr2)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').create('i2', 'Iterative');
model.sol('sol2').feature('s1').feature('i2').set('linsolver', 'fgmres');
model.sol('sol2').feature('s1').feature('i2').label('Suggested Iterative Solver (FGMRES with GMG) (acpr2)');
model.sol('sol2').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').create('i3', 'Iterative');
model.sol('sol2').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i3').label('Suggested Iterative Solver (Shifted Laplace) (acpr2)');
model.sol('sol2').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('mcasegen', 'coarse');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('scale', '3');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('slaplacemain', false);
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('slaplacemg', true);
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemain', {'acpr' 'off'});
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemg', {'acpr' 'off'});
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('epsslaplacemain', {'acpr2' '0.4'});
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('epsslaplacemg', {'acpr2' '0.4'});
model.sol('sol2').feature('s1').create('i4', 'Iterative');
model.sol('sol2').feature('s1').feature('i4').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i4').label('Suggested Iterative Solver (Domain Decomposition) (acpr2)');
model.sol('sol2').feature('s1').feature('i4').create('dd1', 'DomainDecomposition');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('dompernodemax', 1);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('dompernodemaxactive', 'on');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('userac', 'off');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('usecoarse', false);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('ddboundary', 'absorbing');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('slaplacemain', true);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('slaplacemg', 'on');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('alphaabsorbing', {'acpr2' '1'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('betaabsorbing', {'acpr2' '0.1'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('sndorderabsorbing', {'acpr2' 'on'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('epsslaplacemain', {'acpr2' '0.4'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('epsslaplacemg', {'acpr2' '0.4'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('slaplacemg', 'on');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('epsslaplacemg', {'acpr2' '0.4'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('iter', 1);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'{20, 21.2, 22.4, 23.6, 25, 26.5, 28, 30, 31.5, 33.5, 35.5, 37.5, 40, 42.5, 45, 47.5, 50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3, 1.06e3, 1.12e3, 1.18e3, 1.25e3, 1.32e3, 1.4e3, 1.5e3, 1.6e3, 1.7e3, 1.8e3, 1.9e3, 2e3, 2.12e3, 2.24e3, 2.36e3, 2.5e3, 2.65e3, 2.8e3, 3e3, 3.15e3, 3.35e3, 3.55e3, 3.75e3, 4e3, 4.25e3, 4.5e3, 4.75e3, 5e3, 5.3e3, 5.6e3, 6e3, 6.3e3, 6.7e3, 7.1e3, 7.5e3, 8e3, 8.5e3, 9e3, 9.5e3, 1e4, 1.06e4, 1.12e4, 1.18e4, 1.25e4, 1.32e4, 1.4e4, 1.5e4, 1.6e4, 1.7e4, 1.8e4, 1.9e4, 2e4}'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (acpr)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) (acpr)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'fgmres');
model.sol('sol1').feature('s1').feature('i2').label('Suggested Iterative Solver (FGMRES with GMG) (acpr)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').create('i3', 'Iterative');
model.sol('sol1').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i3').label('Suggested Iterative Solver (Shifted Laplace) (acpr)');
model.sol('sol1').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('mcasegen', 'coarse');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('scale', '3');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('slaplacemain', false);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('slaplacemg', true);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemain', {'acpr2' 'off'});
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemg', {'acpr2' 'off'});
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol1').feature('s1').create('i4', 'Iterative');
model.sol('sol1').feature('s1').feature('i4').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i4').label('Suggested Iterative Solver (Domain Decomposition) (acpr)');
model.sol('sol1').feature('s1').feature('i4').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('dompernodemax', 1);
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('dompernodemaxactive', 'on');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('userac', 'off');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('usecoarse', false);
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('ddboundary', 'absorbing');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('slaplacemain', true);
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('slaplacemg', 'on');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('alphaabsorbing', {'acpr' '1'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('betaabsorbing', {'acpr' '0.1'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('sndorderabsorbing', {'acpr' 'on'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i4').feature('dd1').feature('ds').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('slaplacemg', 'on');
model.sol('sol1').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol1').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('iter', 1);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 121, 0);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 121, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').label('Sound Pressure Level (acpr)');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 121, 0);
model.result('pg3').create('iso1', 'Isosurface');
model.result('pg3').feature('iso1').set('expr', {'acpr.p_t'});
model.result('pg3').feature('iso1').set('number', '10');
model.result('pg3').feature('iso1').set('colortable', 'Wave');
model.result('pg3').feature('iso1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').label('Acoustic Pressure, Isosurfaces (acpr)');
model.result('pg1').run;

model.view('view1').camera.setIndex('position', 135, 0);
model.view('view1').camera.setIndex('position', 30, 1);
model.view('view1').camera.set('position', [135 30 -65]);
model.view('view1').camera.setIndex('up', -1, 0);

model.result('pg1').run;
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').set('titletype', 'label');
model.result('pg4').label('Transfer Impedance of Model');
model.result('pg4').set('xlabelactive', true);
model.result('pg4').set('xlabel', 'Frequency (Hz)');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', '|f \cdot Z| (dB rel. L @ 500 Hz)');
model.result('pg4').set('xlog', true);
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').setIndex('expr', '20*log10(freq*abs(Ztrans))-withsol(''sol1'',20*log10(freq*abs(Ztrans)),setval(freq,500))', 0);
model.result('pg4').feature('glob1').setIndex('unit', '', 0);
model.result('pg4').feature('glob1').setIndex('descr', 'Model', 0);
model.result('pg4').feature('glob1').set('legend', false);
model.result('pg4').run;

model.sol('sol2').study('std2');
model.sol('sol2').feature.remove('s1');
model.sol('sol2').feature.remove('v1');
model.sol('sol2').feature.remove('st1');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 0.001);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol2').feature('s1').feature('p1').set('plistarr', {'{20, 21.2, 22.4, 23.6, 25, 26.5, 28, 30, 31.5, 33.5, 35.5, 37.5, 40, 42.5, 45, 47.5, 50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3, 1.06e3, 1.12e3, 1.18e3, 1.25e3, 1.32e3, 1.4e3, 1.5e3, 1.6e3, 1.7e3, 1.8e3, 1.9e3, 2e3, 2.12e3, 2.24e3, 2.36e3, 2.5e3, 2.65e3, 2.8e3, 3e3, 3.15e3, 3.35e3, 3.55e3, 3.75e3, 4e3, 4.25e3, 4.5e3, 4.75e3, 5e3, 5.3e3, 5.6e3, 6e3, 6.3e3, 6.7e3, 7.1e3, 7.5e3, 8e3, 8.5e3, 9e3, 9.5e3, 1e4, 1.06e4, 1.12e4, 1.18e4, 1.25e4, 1.32e4, 1.4e4, 1.5e4, 1.6e4, 1.7e4, 1.8e4, 1.9e4, 2e4}'});
model.sol('sol2').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol2').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol2').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s1').feature('p1').set('probes', {});
model.sol('sol2').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol2').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('s1').set('control', 'freq');
model.sol('sol2').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol2').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol2').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (acpr2)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) (acpr2)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').create('i2', 'Iterative');
model.sol('sol2').feature('s1').feature('i2').set('linsolver', 'fgmres');
model.sol('sol2').feature('s1').feature('i2').label('Suggested Iterative Solver (FGMRES with GMG) (acpr2)');
model.sol('sol2').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').create('i3', 'Iterative');
model.sol('sol2').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i3').label('Suggested Iterative Solver (Shifted Laplace) (acpr2)');
model.sol('sol2').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('mcasegen', 'coarse');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('scale', '3');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('slaplacemain', false);
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('slaplacemg', true);
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemain', {'acpr' 'off'});
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemg', {'acpr' 'off'});
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('epsslaplacemain', {'acpr2' '0.4'});
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('epsslaplacemg', {'acpr2' '0.4'});
model.sol('sol2').feature('s1').create('i4', 'Iterative');
model.sol('sol2').feature('s1').feature('i4').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i4').label('Suggested Iterative Solver (Domain Decomposition) (acpr2)');
model.sol('sol2').feature('s1').feature('i4').create('dd1', 'DomainDecomposition');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('dompernodemax', 1);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('dompernodemaxactive', 'on');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('userac', 'off');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('usecoarse', false);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('ddboundary', 'absorbing');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('slaplacemain', true);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('slaplacemg', 'on');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('alphaabsorbing', {'acpr2' '1'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('betaabsorbing', {'acpr2' '0.1'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('sndorderabsorbing', {'acpr2' 'on'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('epsslaplacemain', {'acpr2' '0.4'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('epsslaplacemg', {'acpr2' '0.4'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('slaplacemg', 'on');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('epsslaplacemg', {'acpr2' '0.4'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('iter', 1);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset4');
model.result('pg5').setIndex('looplevel', 121, 0);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'acpr2.p_t'});
model.result('pg5').feature('surf1').set('colortable', 'Wave');
model.result('pg5').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').label('Acoustic Pressure (acpr2)');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset4');
model.result('pg6').setIndex('looplevel', 121, 0);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'acpr2.Lp_t'});
model.result('pg6').feature('surf1').set('colortable', 'Rainbow');
model.result('pg6').feature('surf1').set('colorscalemode', 'linear');
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').label('Sound Pressure Level (acpr2)');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset4');
model.result('pg7').setIndex('looplevel', 121, 0);
model.result('pg7').create('iso1', 'Isosurface');
model.result('pg7').feature('iso1').set('expr', {'acpr2.p_t'});
model.result('pg7').feature('iso1').set('number', '10');
model.result('pg7').feature('iso1').set('colortable', 'Wave');
model.result('pg7').feature('iso1').set('colorscalemode', 'linearsymmetric');
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').label('Acoustic Pressure, Isosurfaces (acpr2)');
model.result('pg5').run;

model.view('view2').camera.set('zoomanglefull', 13);
model.view('view2').camera.setIndex('position', -300, 0);
model.view('view2').camera.setIndex('position', 700, 1);
model.view('view2').camera.set('position', [-300 700 50]);
model.view('view2').camera.setIndex('up', 0.25, 0);
model.view('view2').camera.setIndex('up', 0.15, 1);
model.view('view2').camera.set('up', [0.25 0.15 1]);

model.result.dataset.remove('dset2');
model.result.dataset.remove('dset3');
model.result('pg5').run;
model.result('pg5').set('edges', false);
model.result('pg5').run;
model.result('pg5').feature('surf1').create('sel1', 'Selection');
model.result('pg5').feature('surf1').feature('sel1').selection.set([3 5 6 8]);
model.result('pg5').run;
model.result('pg5').create('line1', 'Line');
model.result('pg5').feature('line1').set('expr', '1');
model.result('pg5').feature('line1').set('coloring', 'uniform');
model.result('pg5').feature('line1').set('color', 'black');
model.result('pg5').feature('line1').create('sel1', 'Selection');
model.result('pg5').feature('line1').feature('sel1').selection.set([6 7 8 9 13 14]);
model.result('pg5').run;
model.result('pg6').run;
model.result('pg6').set('edges', false);
model.result('pg6').run;
model.result('pg6').feature('surf1').create('sel1', 'Selection');
model.result('pg6').feature('surf1').feature('sel1').selection.set([3 5 6 8]);
model.result('pg6').run;
model.result('pg6').create('line1', 'Line');
model.result('pg6').feature('line1').set('expr', '1');
model.result('pg6').feature('line1').set('coloring', 'uniform');
model.result('pg6').feature('line1').set('color', 'black');
model.result('pg6').feature('line1').create('sel1', 'Selection');
model.result('pg6').feature('line1').feature('sel1').selection.set([6 7 8 9 13 14]);
model.result('pg6').run;
model.result('pg7').run;
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Ear Drum Response of Open Ear');
model.result('pg8').set('data', 'dset4');
model.result('pg8').set('titletype', 'label');
model.result('pg8').set('xlog', true);
model.result('pg8').create('oct1', 'OctaveBand');
model.result('pg8').feature('oct1').set('quantity', 'bandpower');
model.result('pg8').feature('oct1').set('markerpos', 'datapoints');
model.result('pg8').feature('oct1').set('linewidth', 'preference');
model.result('pg8').feature('oct1').selection.geom('geom2', 2);
model.result('pg8').feature('oct1').selection.named('sel4');
model.result('pg8').feature('oct1').set('quantity', 'continuous');
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').run;
model.result('pg9').label('Thumbnail');
model.result('pg9').set('data', 'dset4');
model.result('pg9').set('titletype', 'label');
model.result('pg9').set('edges', false);
model.result('pg9').create('slc1', 'Slice');
model.result('pg9').feature('slc1').set('expr', 'acpr2.p_s');
model.result('pg9').feature('slc1').set('quickxnumber', 1);
model.result('pg9').feature('slc1').set('interactive', true);
model.result('pg9').feature('slc1').set('shift', -0.006);
model.result('pg9').run;
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', '1');
model.result('pg9').feature('surf1').set('coloring', 'uniform');
model.result('pg9').feature('surf1').set('color', 'custom');
model.result('pg9').feature('surf1').set('customcolor', [0.9882352948188782 0.7803921699523926 0.6980392336845398]);
model.result('pg9').feature('surf1').create('tran1', 'Transparency');
model.result('pg9').run;
model.result('pg9').feature('surf1').feature('tran1').set('transparency', 0.25);
model.result('pg9').feature('surf1').feature('tran1').set('uniformblending', 0.6);
model.result('pg9').run;
model.result('pg9').feature('surf1').create('sel1', 'Selection');
model.result('pg9').feature('surf1').feature('sel1').selection.set([5 6 8]);
model.result('pg9').run;

model.view('view1').set('showgrid', false);
model.view('view1').set('transparency', false);
model.view('view1').set('showgrid', true);
model.view('view2').set('showgrid', false);
model.view('view2').set('transparency', false);
model.view('view2').set('showgrid', true);

model.result('pg9').run;

model.title('Type 4.3 Ear Simulator');

model.description(['This model is of the P.57 Type 4.3 Full-Band Ear Simulator. The model includes the geometry of the ear canal as well as the pinna defined in the ITU-T P.57 standard. The model also includes interpolation data for an ear drum impedance ensuring correct acoustic properties of the ear. The model tries to fulfill the geometry and acoustic requirements defined in the standard. It is not a model of a particular, commercially available, ear simulator.' newline  newline 'The ear drum impedance data follows from the reference: L.B. Nielsen and M. Herring Jensen, ' native2unicode(hex2dec({'20' '1c'}), 'unicode') 'The Digital Twin of a New and Standardized Fullband Ear Simulator,' native2unicode(hex2dec({'20' '1d'}), 'unicode') ' DAGA 2022.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('type_43_ear_simulator.mph');

model.modelNode.label('Components');

out = model;
