function out = model
%
% squeeze_film_accelerometer.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/MEMS_Module/Sensors');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics.create('tff', 'ThinFilmFlowShell', 'geom1');
model.physics('tff').model('comp1');
model.physics('tff').prop('EquationType').set('EquationType', 'ModifiedReynoldsEquation');
model.physics('tff').feature('ffp1').set('TangentialWallVelocity', {'FromDeformation'});
model.physics('tff').feature('ffp1').set('TangentialBaseVelocity', {'FromDeformation'});

model.multiphysics.create('stfi1', 'StructureThinFilmFlowInteraction', 'geom1', 2);
model.multiphysics('stfi1').set('Structure_physics', 'solid');
model.multiphysics('stfi1').set('Thinfilm_physics', 'tff');
model.multiphysics('stfi1').selection.all;

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/solid', true);
model.study('std1').feature('time').setSolveFor('/physics/tff', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/stfi1', true);

model.param.label('Fluid Properties and Loads');
model.param.set('a', 'g_const/2');
model.param.descr('a', 'Applied acceleration');
model.param.set('mu', '22e-6[Pa*s]');
model.param.descr('mu', 'Dynamic viscosity, fluid film');
model.param.set('pA', '300[Pa]');
model.param.descr('pA', 'Ambient gas pressure');
model.param.set('h0', '3.95[um]');
model.param.descr('h0', 'Initial film thickness');
model.param.set('Lambda0', '70[nm]');
model.param.descr('Lambda0', 'Mean free path');
model.param.set('pref', '1[atm]');
model.param.descr('pref', 'Reference pressure');
model.param.create('par2');
model.param('par2').label('Geometry');
model.param('par2').set('Lpm', '1780[um]');
model.param('par2').descr('Lpm', 'Length of proof mass');
model.param('par2').set('Hpm', '400[um]');
model.param('par2').descr('Hpm', 'Height of proof mass');
model.param('par2').set('Wpm', '2960[um]');
model.param('par2').descr('Wpm', 'Width of proof mass');
model.param('par2').set('Lc', '520[um]');
model.param('par2').descr('Lc', 'Length of cantilevers');
model.param('par2').set('Hc', '40[um]');
model.param('par2').descr('Hc', 'Height of cantilevers');
model.param('par2').set('Wc', '100[um]');
model.param('par2').descr('Wc', 'Width of cantilevers');

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').label('Proof Mass');
model.geom('geom1').feature('blk1').set('size', {'Lpm' 'Wpm' 'Hpm'});
model.geom('geom1').run('blk1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').label('Cantilever 1');
model.geom('geom1').feature('blk2').set('size', {'Lc' 'Wc' 'Hc'});
model.geom('geom1').feature('blk2').set('pos', {'-Lc' '2*Wc' '(Hpm - Hc)/2'});
model.geom('geom1').run('blk2');
model.geom('geom1').create('blk3', 'Block');
model.geom('geom1').feature('blk3').label('Cantilever 2');
model.geom('geom1').feature('blk3').set('size', {'Lc' 'Wc' 'Hc'});
model.geom('geom1').feature('blk3').set('pos', {'-Lc' 'Wpm - 3*Wc' '0'});
model.geom('geom1').feature('blk3').setIndex('pos', '(Hpm - Hc)/2', 2);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').label('Silicon');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.7);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'1e-12[S/m]' '0' '0' '0' '1e-12[S/m]' '0' '0' '0' '1e-12[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '700[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'11.7' '0' '0' '0' '11.7' '0' '0' '0' '11.7'});
model.material('mat1').propertyGroup('def').set('density', '2329[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '170[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.28');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'3.48' '0' '0' '0' '3.48' '0' '0' '0' '3.48'});

model.physics('solid').create('bl1', 'BodyLoad', 3);
model.physics('solid').feature('bl1').selection.set([1 2 3]);
model.physics('solid').feature('bl1').set('FperVol', {'0' '0' '-a*solid.rho'});
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.set([1 6]);
model.physics('tff').selection.set([13 14]);
model.physics('tff').prop('ReferencePressure').set('pref', 'pref');
model.physics('tff').feature('ffp1').set('editModelInputs', true);
model.physics('tff').feature('ffp1').set('minput_pressure', 'pA');
model.physics('tff').feature('ffp1').set('hw1', 'h0');
model.physics('tff').feature('ffp1').set('mure_mat', 'userdef');
model.physics('tff').feature('ffp1').set('mure', 'mu');
model.physics('tff').feature('ffp1').set('QchTypeMR', 'Model1');
model.physics('tff').feature('ffp1').set('MeanFreePathRarefied', 'UserDefinedReferencePressure');
model.physics('tff').feature('ffp1').set('lambda0', 'Lambda0');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').label('Bottom Surface Integration Operator');
model.cpl('intop1').set('opname', 'bf');
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.set([13]);
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').label('Top Surface Integration Operator');
model.cpl('intop2').set('opname', 'tf');
model.cpl('intop2').selection.geom('geom1', 2);
model.cpl('intop2').selection.set([14]);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Variables: Total Forces');
model.variable('var1').set('F_bottom', '-bf(nz*pfilm)');
model.variable('var1').descr('F_bottom', 'Total force, bottom face');
model.variable('var1').set('F_top', '-tf(nz*pfilm)');
model.variable('var1').descr('F_top', 'Total force, top face');

model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').run;

model.modelNode.create('comp2', true);

model.geom.create('geom2', 2);
model.geom('geom2').model('comp2');

model.mesh.create('mesh2', 'geom2');

model.physics.create('solid2', 'SolidMechanics', 'geom2');
model.physics('solid2').model('comp2');

model.study('std1').feature('time').setSolveFor('/physics/solid2', true);

model.physics.create('tff2', 'ThinFilmFlowEdge', 'geom2');
model.physics('tff2').model('comp2');

model.study('std1').feature('time').setSolveFor('/physics/tff2', true);

model.physics('tff2').prop('EquationType').set('EquationType', 'ModifiedReynoldsEquation');
model.physics('tff2').feature('ffp1').set('TangentialWallVelocity', {'FromDeformation'});
model.physics('tff2').feature('ffp1').set('TangentialBaseVelocity', {'FromDeformation'});

model.multiphysics.create('stfi2', 'StructureThinFilmFlowInteraction', 'geom2', 1);

model.study('std1').feature('time').setSolveFor('/multiphysics/stfi2', true);

model.multiphysics('stfi2').set('Structure_physics', 'solid2');
model.multiphysics('stfi2').set('Thinfilm_physics', 'tff2');
model.multiphysics('stfi2').selection.all;

model.geom('geom2').run;
model.geom('geom2').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom2').create('r1', 'Rectangle');
model.geom('geom2').feature('r1').label('Proof Mass');
model.geom('geom2').feature('r1').set('size', {'Lpm' 'Hpm'});
model.geom('geom2').run('r1');
model.geom('geom2').create('r2', 'Rectangle');
model.geom('geom2').feature('r2').label('Cantilevers');
model.geom('geom2').feature('r2').set('size', {'Lc' 'Hc'});
model.geom('geom2').feature('r2').set('pos', {'-Lc' '(Hpm-Hc)/2'});
model.geom('geom2').runPre('fin');
model.geom('geom2').run;

model.material.create('mat2', 'Common', 'comp2');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat2').label('Silicon');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat2').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat2').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat2').set('noise', true);
model.material('mat2').set('fresnel', 0.7);
model.material('mat2').set('metallic', 0);
model.material('mat2').set('pearl', 0);
model.material('mat2').set('diffusewrap', 0);
model.material('mat2').set('clearcoat', 0);
model.material('mat2').set('reflectance', 0);
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'1e-12[S/m]' '0' '0' '0' '1e-12[S/m]' '0' '0' '0' '1e-12[S/m]'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '700[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'11.7' '0' '0' '0' '11.7' '0' '0' '0' '11.7'});
model.material('mat2').propertyGroup('def').set('density', '2329[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '170[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.28');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'3.48' '0' '0' '0' '3.48' '0' '0' '0' '3.48'});

model.physics('solid2').create('ct1', 'ChangeThickness', 2);
model.physics('solid2').feature('ct1').label('Cantilevers Thickness');
model.physics('solid2').feature('ct1').selection.set([1]);
model.physics('solid2').feature('ct1').set('d', '2*Wc');
model.physics('solid2').create('ct2', 'ChangeThickness', 2);
model.physics('solid2').feature('ct2').label('Proof Mass Thickness');
model.physics('solid2').feature('ct2').selection.set([2]);
model.physics('solid2').feature('ct2').set('d', 'Wpm');
model.physics('solid2').create('bl1', 'BodyLoad', 2);
model.physics('solid2').feature('bl1').selection.set([1 2]);
model.physics('solid2').feature('bl1').set('FperVol', {'0' '-a*solid2.rho' '0'});
model.physics('solid2').create('fix1', 'Fixed', 1);
model.physics('solid2').feature('fix1').selection.set([1]);
model.physics('tff2').selection.set([5 8]);
model.physics('tff2').prop('ReferencePressure').set('pref', 'pref');
model.physics('tff2').feature('ffp1').set('editModelInputs', true);
model.physics('tff2').feature('ffp1').set('minput_pressure', 'pA');
model.physics('tff2').feature('ffp1').set('hw1', 'h0');
model.physics('tff2').feature('ffp1').set('mure_mat', 'userdef');
model.physics('tff2').feature('ffp1').set('mure', 'mu');
model.physics('tff2').feature('ffp1').set('QchTypeMR', 'Model1');
model.physics('tff2').feature('ffp1').set('MeanFreePathRarefied', 'UserDefinedReferencePressure');
model.physics('tff2').feature('ffp1').set('lambda0', 'Lambda0');

model.cpl.create('intop3', 'Integration', 'geom2');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').label('Bottom Surface Integration Operator');
model.cpl('intop3').set('opname', 'bf2d');
model.cpl('intop3').selection.geom('geom2', 1);
model.cpl('intop3').selection.set([5]);
model.cpl.create('intop4', 'Integration', 'geom2');
model.cpl('intop4').set('axisym', true);
model.cpl('intop4').label('Top Surface Integration Operator');
model.cpl('intop4').set('opname', 'tf2d');
model.cpl('intop4').selection.geom('geom2', 1);
model.cpl('intop4').selection.set([8]);

model.variable.create('var2');
model.variable('var2').model('comp2');
model.variable('var2').label('Variables: Total Forces');
model.variable('var2').set('F_bottom2d', '-bf2d(ny*pfilm2*solid2.d)');
model.variable('var2').descr('F_bottom2d', 'Total damping force, bottom face');
model.variable('var2').set('F_top2d', '-tf2d(ny*pfilm2*solid2.d)');
model.variable('var2').descr('F_top2d', 'Total damping force, top face');

model.mesh('mesh2').create('fq1', 'FreeQuad');

model.multiphysics('stfi2').selection.set([5 8]);

model.mesh('mesh2').feature('size').set('custom', true);
model.mesh('mesh2').feature('size').set('hmax', 85.1);
model.mesh('mesh2').feature('size').set('hmin', 0.288);
model.mesh('mesh2').feature('size').set('hgrad', 1.25);
model.mesh('mesh2').feature('size').set('hcurve', 0.25);
model.mesh('mesh2').feature('size').set('hnarrow', 2);

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'a', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm/s^2', 0);
model.study('std1').feature('param').setIndex('pname', 'a', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm/s^2', 0);
model.study('std1').feature('param').setIndex('pname', 'pA', 0);
model.study('std1').feature('param').setIndex('plistarr', '1000 300 50', 0);
model.study('std1').feature('time').set('tunit', 'ms');
model.study('std1').feature('time').set('tlist', 'range(0,4e-2,4)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp2_u2').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp2_u2').set('scaleval', '1e-2*0.0023345235059857505');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.0037698275822642077');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,4e-2,4)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsgenalpha', 'intermediate');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('timemethod', 'genalpha');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('se1', 'Segregated');
model.sol('sol1').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_u' 'comp1_pfilm'});
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subdtech', 'const');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subjtech', 'onevery');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('t1').feature('d1').label('Suggested Direct Solver (stfi1) (Merged)');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').label('Merged Variables');
model.sol('sol1').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp2_u2' 'comp2_pfilm2'});
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subdtech', 'const');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subjtech', 'onevery');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').label('Merged Variables (2)');
model.sol('sol1').feature('t1').feature('se1').set('maxsegiter', 10);
model.sol('sol1').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol1').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol1').feature('t1').feature('se1').set('segaaccdelay', 0);
model.sol('sol1').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('t1').feature('i1').label('Suggested Iterative Solver (stfi1)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'pA'});
model.batch('p1').set('plistarr', {'1000 300 50'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('t1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp2_u2').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp2_u2').set('scaleval', '1e-2*0.0023345235059857505');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.0037698275822642077');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,4e-2,4)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsgenalpha', 'intermediate');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('timemethod', 'genalpha');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('se1', 'Segregated');
model.sol('sol1').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_u' 'comp1_pfilm'});
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subdtech', 'const');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subjtech', 'onevery');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('t1').feature('d1').label('Suggested Direct Solver (stfi1) (Merged)');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').label('Merged Variables');
model.sol('sol1').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp2_u2' 'comp2_pfilm2'});
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subdtech', 'const');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subjtech', 'onevery');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').label('Merged Variables (2)');
model.sol('sol1').feature('t1').feature('se1').set('maxsegiter', 10);
model.sol('sol1').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol1').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol1').feature('t1').feature('se1').set('segaaccdelay', 0);
model.sol('sol1').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('t1').feature('i1').label('Suggested Iterative Solver (stfi1)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');

model.batch('p1').feature.remove('so1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'pA'});
model.batch('p1').set('plistarr', {'1000 300 50'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset3');
model.result('pg1').setIndex('looplevel', 101, 0);
model.result('pg1').setIndex('looplevel', 3, 1);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('colortable', 'Rainbow');
model.result('pg1').feature('vol1').set('colortabletrans', 'none');
model.result('pg1').feature('vol1').set('colorscalemode', 'linear');
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').set('colortable', 'Prism');
model.result('pg1').feature('vol1').create('def', 'Deform');
model.result('pg1').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Fluid Pressure (tff)');
model.result('pg2').set('data', 'dset3');
model.result('pg2').setIndex('looplevel', 101, 0);
model.result('pg2').setIndex('looplevel', 3, 1);
model.result('pg2').set('data', 'dset3');
model.result('pg2').setIndex('looplevel', 101, 0);
model.result('pg2').setIndex('looplevel', 3, 1);
model.result('pg2').set('defaultPlotID', 'ThinFilmFlowShell/phys1/pdef1/pcond1/pg1');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('expr', 'pfilm');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset4');
model.result('pg3').setIndex('looplevel', 101, 0);
model.result('pg3').setIndex('looplevel', 3, 1);
model.result('pg3').set('defaultPlotID', 'stress');
model.result('pg3').label('Stress (solid2)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'solid2.misesGp'});
model.result('pg3').feature('surf1').set('threshold', 'manual');
model.result('pg3').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg3').feature('surf1').set('colortable', 'Rainbow');
model.result('pg3').feature('surf1').set('colortabletrans', 'none');
model.result('pg3').feature('surf1').set('colorscalemode', 'linear');
model.result('pg3').feature('surf1').set('resolution', 'normal');
model.result('pg3').feature('surf1').set('colortable', 'Prism');
model.result('pg3').feature('surf1').create('def', 'Deform');
model.result('pg3').feature('surf1').feature('def').set('expr', {'u2' 'v2'});
model.result('pg3').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Fluid Pressure (tff2)');
model.result('pg4').set('data', 'dset4');
model.result('pg4').setIndex('looplevel', 101, 0);
model.result('pg4').setIndex('looplevel', 3, 1);
model.result('pg4').set('data', 'dset4');
model.result('pg4').setIndex('looplevel', 101, 0);
model.result('pg4').setIndex('looplevel', 3, 1);
model.result('pg4').set('defaultPlotID', 'ThinFilmFlowEdge/phys1/pdef1/pcond2/pg1');
model.result('pg4').feature.create('line1', 'Line');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('expr', 'pfilm2');
model.result('pg4').feature('line1').set('smooth', 'internal');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('data', 'parent');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').run;
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').feature('line1').create('def1', 'Deform');
model.result('pg4').run;
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset4');
model.result('pg5').setIndex('looplevel', 101, 0);
model.result('pg5').setIndex('looplevel', 3, 1);
model.result('pg5').set('defaultPlotID', 'displacement');
model.result('pg5').label('Displacement (solid2)');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('showlegends', true);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'solid2.disp'});
model.result('pg5').feature('surf1').set('threshold', 'manual');
model.result('pg5').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg5').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg5').feature('surf1').set('colortabletrans', 'none');
model.result('pg5').feature('surf1').set('colorscalemode', 'linear');
model.result('pg5').feature('surf1').set('resolution', 'normal');
model.result('pg5').feature('surf1').create('def', 'Deform');
model.result('pg5').feature('surf1').feature('def').set('expr', {'u2' 'v2'});
model.result('pg5').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg5').label('Displacement (solid2)');
model.result('pg5').run;
model.result('pg5').label('Displacement and Fluid Load (2D)');
model.result('pg5').create('arwl1', 'ArrowLine');
model.result('pg5').feature('arwl1').set('expr', {'tff2.fwallx' 'v2'});
model.result('pg5').feature('arwl1').setIndex('expr', 'tff2.fwally', 1);
model.result('pg5').feature('arwl1').set('inheritplot', 'surf1');
model.result('pg5').feature('arwl1').create('def1', 'Deform');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Total Force on Bottom Surface (3D)');
model.result('pg6').set('data', 'dset3');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'Time (ms)');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').setIndex('expr', 'F_bottom', 0);
model.result('pg6').feature('glob1').setIndex('unit', 'uN', 0);
model.result('pg6').feature('glob1').set('autodescr', false);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Vertical Displacement (3D)');
model.result('pg7').set('data', 'dset3');
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', 'Time (ms)');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Displacement, z-component (microns)');
model.result('pg7').create('ptgr1', 'PointGraph');
model.result('pg7').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr1').set('linewidth', 'preference');
model.result('pg7').feature('ptgr1').selection.set([21]);
model.result('pg7').feature('ptgr1').set('expr', 'w');
model.result('pg7').feature('ptgr1').set('descr', 'Displacement field, Z-component');
model.result('pg7').feature('ptgr1').set('autopoint', false);
model.result('pg7').feature('ptgr1').set('legend', true);
model.result('pg7').run;
model.result('pg5').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Total Force on Bottom Surface (2D)');
model.result('pg8').set('data', 'dset4');
model.result('pg8').set('xlabelactive', true);
model.result('pg8').set('xlabel', 'Time (ms)');
model.result('pg8').set('ylabelactive', true);
model.result('pg8').set('ylabel', 'Total force, bottom face (uN)');
model.result('pg8').create('glob1', 'Global');
model.result('pg8').feature('glob1').set('markerpos', 'datapoints');
model.result('pg8').feature('glob1').set('linewidth', 'preference');
model.result('pg8').feature('glob1').setIndex('expr', 'F_bottom2d', 0);
model.result('pg8').feature('glob1').setIndex('unit', 'uN', 0);
model.result('pg8').feature('glob1').set('autodescr', false);
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Vertical Displacement (2D)');
model.result('pg9').set('data', 'dset4');
model.result('pg9').set('xlabelactive', true);
model.result('pg9').set('xlabel', 'Time (ms)');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Displacement, z-component (microns)');
model.result('pg9').create('ptgr1', 'PointGraph');
model.result('pg9').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg9').feature('ptgr1').set('linewidth', 'preference');
model.result('pg9').feature('ptgr1').selection.set([7]);
model.result('pg9').feature('ptgr1').set('expr', 'v2');
model.result('pg9').feature('ptgr1').set('descr', 'Displacement field, Y-component');
model.result('pg9').run;
model.result('pg9').feature('ptgr1').set('autopoint', false);
model.result('pg9').feature('ptgr1').set('legend', true);

model.title('Squeeze-Film Gas Damping in an Accelerometer');

model.description('Capacitively sensing micromechanical structures have typically a very narrow gap between the electrodes. The gap is usually filled with gas that damps the movements of the mechanical parts. This combined 3D and 2D model shows how squeeze-film gas damping can be coupled to the mechanical displacements in a microsystem accelerometer.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;

model.label('squeeze_film_accelerometer.mph');

model.modelNode.label('Components');

out = model;
