function out = model
%
% esd_test_pcb.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/RF_Module/ESD_and_Lightning_Surge');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('temw', 'TransientElectromagneticWaves', 'geom1');
model.physics('temw').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/temw', true);

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'esd_test_pcb.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'21[mm]' '10[mm]' '1'});
model.geom('geom1').feature('blk1').setIndex('size', '1.5[mm]', 2);
model.geom('geom1').feature('blk1').set('pos', {'-3[mm]' '5[mm]' '0'});
model.geom('geom1').feature('blk1').setIndex('pos', '0.508[mm]', 2);
model.geom('geom1').run('blk1');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').set('quickz', -5);
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', {'100[mm]' '60[mm]'});
model.geom('geom1').feature('wp1').geom.feature('r1').set('base', 'center');
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').run('wp1');
model.geom('geom1').create('wp2', 'WorkPlane');
model.geom('geom1').feature('wp2').set('unite', true);
model.geom('geom1').feature('wp2').set('quickz', -5);
model.geom('geom1').feature('wp2').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp2').geom.feature('r1').set('size', {'5[mm]' '5[mm]'});
model.geom('geom1').feature('wp2').geom.feature('r1').set('base', 'center');
model.geom('geom1').feature('wp2').geom.feature('r1').set('pos', {'-20[mm]' '-15[mm]'});
model.geom('geom1').feature('wp2').geom.run('r1');
model.geom('geom1').feature('wp2').geom.create('arr1', 'Array');
model.geom('geom1').feature('wp2').geom.feature('arr1').selection('input').set({'r1'});
model.geom('geom1').feature('wp2').geom.feature('arr1').set('fullsize', [2 2]);
model.geom('geom1').feature('wp2').geom.feature('arr1').set('displ', {'40[mm]' '30[mm]'});
model.geom('geom1').run('wp2');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').setIndex('distance', '5[mm]', 0);
model.geom('geom1').run('ext1');
model.geom('geom1').create('wp3', 'WorkPlane');
model.geom('geom1').feature('wp3').set('unite', true);
model.geom('geom1').feature('wp3').set('quickplane', 'yz');
model.geom('geom1').feature('wp3').set('quickx', '35[mm]');
model.geom('geom1').feature('wp3').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp3').geom.feature('r1').set('size', {'1[mm]' '60[mm]'});
model.geom('geom1').feature('wp3').geom.feature('r1').set('pos', {'0' '-5[mm]'});
model.geom('geom1').feature('wp3').geom.feature('r1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('wp3').geom.feature('r1').setIndex('layer', '1[mm]', 0);
model.geom('geom1').feature('wp3').geom.run('r1');
model.geom('geom1').run('wp3');
model.geom('geom1').create('wp4', 'WorkPlane');
model.geom('geom1').feature('wp4').set('unite', true);
model.geom('geom1').feature('wp4').set('quickplane', 'zx');
model.geom('geom1').feature('wp4').set('quicky', '4[mm]');
model.geom('geom1').feature('wp4').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp4').geom.feature('r1').set('size', {'0.508[mm]' '2[mm]'});
model.geom('geom1').feature('wp4').geom.feature('r1').set('pos', {'0' '2[mm]'});
model.geom('geom1').feature('wp4').geom.feature.duplicate('r2', 'r1');
model.geom('geom1').feature('wp4').geom.feature('r2').set('pos', {'0' '14[mm]'});
model.geom('geom1').run('fin');
model.geom('geom1').run('wp4');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', {'150[mm]' '150[mm]' '1'});
model.geom('geom1').feature('blk2').setIndex('size', '100[mm]', 2);
model.geom('geom1').feature('blk2').set('base', 'center');
model.geom('geom1').feature('blk2').set('pos', {'0' '0' '20[mm]'});
model.geom('geom1').runPre('fin');

model.view('view1').hideObjects.create('hide1');
model.view('view1').hideObjects('hide1').init(2);
model.view('view1').hideObjects('hide1').set('blk2', [2 3 4]);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Printed Layer');
model.selection('sel1').geom(2);
model.selection('sel1').set([17 18 19 24 26 35 36 37 54 55 56 57 72 73 74 75 86 87 88 89 90 111 112 134 135 141 142 147 148 149 150 151 152 154 157 170 171 172]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Vias');
model.selection('sel2').geom(2);
model.selection('sel2').set([29 30 31 32 38 39 40 41 42 43 52 53 60 61 62 63 68 69 70 71 78 79 80 81 82 83 84 85 95 96 97 98 103 104 105 106 107 108 109 110 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 136 137 138 139 143 144 145 146 155 156 158 159 174 175 176 177 178 179 181 182 183 184 185 186]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Jumpers');
model.selection('sel3').geom(2);
model.selection('sel3').set([44 45 46 47 48 49 50 51 91 92 93 94 99 100 101 102]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('FR4 (Circuit Board)');
model.material('mat2').set('family', 'pcbgreen');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0.004[S/m]' '0' '0' '0' '0.004[S/m]' '0' '0' '0' '0.004[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'4.5' '0' '0' '0' '4.5' '0' '0' '0' '4.5'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'18e-6[1/K]' '0' '0' '0' '18e-6[1/K]' '0' '0' '0' '18e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '1369[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('density', '1900[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'0.3[W/(m*K)]' '0' '0' '0' '0.3[W/(m*K)]' '0' '0' '0' '0.3[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '22[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.15');
model.material('mat2').selection.set([2]);
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat3').label('Copper');
model.material('mat3').set('family', 'copper');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.35');
model.material('mat3').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat3').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat3').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat3').propertyGroup('linzRes').addInput('temperature');
model.material('mat3').selection.geom('geom1', 2);
model.material('mat3').selection.named('sel1');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').label('Spacer');
model.material('mat4').selection.set([3 4 6 7]);
model.material('mat4').propertyGroup('def').set('relpermittivity', {'2.9'});
model.material('mat4').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat4').propertyGroup('def').set('electricconductivity', {'0'});
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').label('Chip');
model.material('mat5').selection.set([5]);
model.material('mat5').propertyGroup('def').set('relpermittivity', {'12'});
model.material('mat5').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat5').propertyGroup('def').set('electricconductivity', {'0'});

model.physics('temw').create('pec2', 'PerfectElectricConductor', 2);
model.physics('temw').feature('pec2').selection.named('sel1');
model.physics('temw').create('pec3', 'PerfectElectricConductor', 2);
model.physics('temw').feature('pec3').selection.named('sel2');
model.physics('temw').create('pec4', 'PerfectElectricConductor', 2);
model.physics('temw').feature('pec4').selection.named('sel3');
model.physics('temw').create('pec5', 'PerfectElectricConductor', 2);
model.physics('temw').feature('pec5').selection.set([6 7 8 9 11 15 23 163 168 189]);
model.physics('temw').create('pec6', 'PerfectElectricConductor', 2);
model.physics('temw').feature('pec6').selection.set([191]);
model.physics('temw').create('lport1', 'LumpedPort', 2);
model.physics('temw').feature('lport1').selection.set([190]);
model.physics('temw').feature('lport1').set('TerminalType', 'Current');
model.physics('temw').feature('lport1').set('CurrentPulseType', 'ElectrostaticDischarge');
model.physics('temw').feature('lport1').set('ElectrostaticDischargePulseModel', 'ExtendedHumanBodyModel');
model.physics('temw').feature('lport1').set('ESDFirstPulseAmplitude', '30[A]');
model.physics('temw').feature('lport1').set('ESDSecondPulseAmplitude', '5[A]');

model.func.create('Pulse1', 'Analytic');
model.func('Pulse1').set('args', 't');
model.func('Pulse1').setIndex('argunit', 's', 0);
model.func('Pulse1').set('fununit', 'A');
model.func('Pulse1').set('expr', '30[A]*(exp(-t/1[ns])-exp(-t/0.5[ns])) +5[A]*(exp(-t/150[ns])-exp(-t/5[ns])) ');
model.func('Pulse1').setIndex('plotargs', '1.5000000000000002E-7', 0, 2);

model.result.dataset.create('grid1', 'Grid1D');
model.result.dataset('grid1').set('source', 'function');
model.result.dataset('grid1').set('function', 'all');
model.result.dataset('grid1').set('par1', 't');
model.result.dataset('grid1').set('parmax1', '1.5000000000000002E-7');
model.result.dataset('grid1').set('res1', 10000);
model.result.dataset('grid1').set('distribution', 'mixed');
model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').set('data', 'grid1');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Lumped port pulse plot');
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'Pulse current (A)');
model.result('pg1').set('windowtitle', 'Graphics');
model.result('pg1').set('window', 'window1');
model.result('pg1').create('fun1', 'Function');
model.result('pg1').feature('fun1').set('linewidth', 'preference');
model.result('pg1').feature('fun1').set('expr', 'Pulse1(t[1/m][s])');
model.result('pg1').feature('fun1').set('xdataexpr', 't');
model.result('pg1').feature('fun1').set('xdataunit', '');
model.result('pg1').feature('fun1').set('xdatadescractive', true);
model.result('pg1').feature('fun1').set('xdatadescr', 'Time (s)');
model.result('pg1').feature('fun1').set('upperbound', '1.5000000000000002E-7');
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result.dataset.remove('grid1');

model.func.remove('Pulse1');

model.physics('temw').create('lelement1', 'LumpedElement', 2);
model.physics('temw').feature('lelement1').selection.set([140]);
model.physics('temw').create('lelement2', 'LumpedElement', 2);
model.physics('temw').feature('lelement2').selection.set([153]);
model.physics('temw').create('sctr1', 'Scattering', 2);
model.physics('temw').feature('sctr1').selection.set([1 2 3 4 5 192]);
model.physics('temw').prop('MeshControl').set('SizeControlParameter', 'Frequency');
model.physics('temw').prop('MeshControl').set('PhysicsControlledMeshMaximumFrequency', '2[GHz]');

model.mesh('mesh1').run;

model.study('std1').feature('time').set('tunit', 'ns');
model.study('std1').feature('time').set('tlist', 'range(0,0.1,10)');
model.study('std1').setGenPlots(false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.1,10)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('timemethod', 'genalpha');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').label('Suggested Direct Solver (temw)');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('tstepsgenalpha', 'manual');
model.sol('sol1').feature('t1').set('timestepgenalpha', '0.1[ns]');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').run;
model.result('pg1').label('Current Density');
model.result('pg1').set('edges', false);
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', 'temw.normJ');
model.result('pg1').feature('vol1').create('sel1', 'Selection');
model.result('pg1').feature('vol1').feature('sel1').selection.set([2 5]);
model.result('pg1').run;
model.result('pg1').create('vol2', 'Volume');
model.result('pg1').feature('vol2').set('expr', '1');
model.result('pg1').feature('vol2').set('coloring', 'uniform');
model.result('pg1').feature('vol2').set('color', 'custom');
model.result('pg1').feature('vol2').set('customcolor', [0.6509804129600525 0.8392156958580017 0.8156862854957581]);
model.result('pg1').feature('vol2').create('sel1', 'Selection');
model.result('pg1').feature('vol2').feature('sel1').selection.set([3 4 6 7]);
model.result('pg1').run;
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', 'temw.normJ');
model.result('pg1').feature('surf1').create('sel1', 'Selection');
model.result('pg1').feature('surf1').feature('sel1').selection.set([190 191]);
model.result('pg1').run;
model.result('pg1').create('surf2', 'Surface');
model.result('pg1').feature('surf2').set('expr', '1');
model.result('pg1').feature('surf2').set('coloring', 'uniform');
model.result('pg1').feature('surf2').set('color', 'gray');
model.result('pg1').feature('surf2').create('sel1', 'Selection');
model.result('pg1').feature('surf2').feature('sel1').selection.set([6]);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').set('showlegends', false);

model.view('view1').set('showgrid', false);

model.result('pg1').setIndex('looplevel', 13, 0);
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Induced Voltage');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('linewidth', 'preference');
model.result('pg2').feature('glob1').set('expr', {'temw.Velement_1'});
model.result('pg2').feature('glob1').set('descr', {'Lumped element 1 voltage'});
model.result('pg2').feature('glob1').set('expr', {'temw.Velement_1' 'temw.Velement_2'});
model.result('pg2').feature('glob1').set('descr', {'Lumped element 1 voltage' 'Lumped element 2 voltage'});
model.result('pg2').feature('glob1').set('legendmethod', 'manual');
model.result('pg2').feature('glob1').setIndex('legends', 'Pin 1', 0);
model.result('pg2').feature('glob1').setIndex('legends', 'Pin 2', 1);
model.result('pg2').run;

model.title('Electrostatic Discharge (ESD) Test of a PCB');

model.description('This example demonstrates how an ESD event causes logic error of a microchip on a PCB board. The ESD current is based on the extended HBM (Human Body Model) and it is predefined in the Lumped Port feature.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('esd_test_pcb.mph');

model.modelNode.label('Components');

out = model;
