function out = model
%
% orthotropic_container.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Nonlinear_Structural_Materials_Module/Plasticity');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('cc', 'CurvilinearCoordinates', 'geom1');
model.physics('cc').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/cc', true);
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('pressure', '1[N/m^2]', 'Internal pressure');
model.param.set('th', '2[cm]', 'Wall thickness');
model.param.set('De', '52[cm]', 'External cylinder diameter');
model.param.set('Di', 'De-2*th', 'Internal cylinder diameter');
model.param.set('Ri', 'Di/2', 'Internal cylinder radius');
model.param.set('sf', '3.5*th', 'Straight flange height');
model.param.set('Rk', '0.1*De', 'Internal knuckle radius');
model.param.set('Rc', '0.9*Di', 'Internal crown radius');
model.param.set('hi', 'Rc-sqrt((Rc-Ri)*(Rc+Ri-2*Rk))', 'Internal head height');
model.param.set('alpha', 'atan((Ri-Rk)/(Rc-hi))', 'Angle at intersection crown-knuckle');
model.param.set('hcyl', '40[cm]', 'Half cylinder height');

model.cpl.create('intop1', 'Integration', 'geom1');

model.geom('geom1').run;

model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.all;
model.cpl('intop1').set('frame', 'material');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('y_vol', 'intop1(solid.epeGp>0)/intop1(1)');
model.variable('var1').descr('y_vol', 'Yielded volume fraction');

model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 'Rc');
model.geom('geom1').feature('c1').set('angle', 'alpha');
model.geom('geom1').feature('c1').set('pos', {'0' 'sf-(Rc-hi)'});
model.geom('geom1').feature('c1').set('rot', '90-alpha');
model.geom('geom1').run('c1');
model.geom('geom1').create('c2', 'Circle');
model.geom('geom1').feature('c2').set('r', 'Rc+th');
model.geom('geom1').feature('c2').set('angle', 'alpha');
model.geom('geom1').feature('c2').set('pos', {'0' 'sf-(Rc-hi)'});
model.geom('geom1').feature('c2').set('rot', '90-alpha');
model.geom('geom1').run('c2');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').label('Crown');
model.geom('geom1').feature('dif1').selection('input').set({'c2'});
model.geom('geom1').feature('dif1').selection('input2').set({'c1'});
model.geom('geom1').run('dif1');
model.geom('geom1').create('c3', 'Circle');
model.geom('geom1').feature('c3').set('r', 'Rk+th');
model.geom('geom1').feature('c3').set('angle', '90-alpha');
model.geom('geom1').feature('c3').set('pos', {'Ri-Rk' 'sf'});
model.geom('geom1').run('c3');
model.geom('geom1').create('c4', 'Circle');
model.geom('geom1').feature('c4').set('r', 'Rk');
model.geom('geom1').feature('c4').set('angle', '90-alpha');
model.geom('geom1').feature('c4').set('pos', {'Ri-Rk' 'sf'});
model.geom('geom1').run('c4');
model.geom('geom1').create('dif2', 'Difference');
model.geom('geom1').feature('dif2').selection('input').set({'c3'});
model.geom('geom1').feature('dif2').selection('input2').set({'c4'});
model.geom('geom1').run('dif2');
model.geom('geom1').feature('dif2').label('Knuckle');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').label('Flange');
model.geom('geom1').feature('r1').set('size', {'th' 'sf'});
model.geom('geom1').feature('r1').set('pos', {'Ri' '0'});
model.geom('geom1').runPre('fin');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').label(['Kl' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'pper Head']);
model.geom('geom1').feature('uni1').selection('input').set({'dif1' 'dif2' 'r1'});
model.geom('geom1').feature('uni1').set('intbnd', false);
model.geom('geom1').runPre('fin');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').label('Cylinder');
model.geom('geom1').feature('r2').set('size', {'th' 'hcyl'});
model.geom('geom1').feature('r2').set('pos', {'Ri' '-hcyl'});
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.physics('cc').prop('Settings').set('CreateBasis', true);
model.physics('cc').create('diff1', 'DiffusionMethod', 2);
model.physics('cc').feature('diff1').create('inl1', 'Inlet', 1);
model.physics('cc').feature('diff1').feature('inl1').selection.set([1]);
model.physics('cc').feature('diff1').create('out1', 'Outlet', 1);
model.physics('cc').feature('diff1').feature('out1').selection.set([3]);
model.physics('solid').create('symp1', 'SymmetryPlane', 1);
model.physics('solid').feature('symp1').selection.set([3]);
model.physics('solid').create('bndl1', 'BoundaryLoad', 1);
model.physics('solid').feature('bndl1').selection.set([2 4 8 10]);
model.physics('solid').feature('bndl1').set('LoadType', 'FollowerPressure');
model.physics('solid').feature('bndl1').set('FollowerPressure', 'pressure');
model.physics('solid').feature('lemm1').set('coordinateSystem', 'cc_cs');
model.physics('solid').feature('lemm1').create('plsty1', 'Plasticity', 2);
model.physics('solid').feature('lemm1').feature('plsty1').set('YieldFunction', 'hill');
model.physics('solid').feature('lemm1').feature('plsty1').set('IsotropicHardeningModel', 'PerfectlyPlastic');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').label('Steel AISI 4340');
model.material('mat1').set('family', 'steel');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.28');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic_material_model');
model.material('mat1').propertyGroup('ElastoplasticModel').set('ys', {'381e6' '381e6' '450e6' '240e6' '240e6' '220e6'});

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([1]);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([4 7 10 11]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 10);
model.mesh('mesh1').feature('map1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis3').set('numelem', 25);
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([2 6 8 9]);
model.mesh('mesh1').run;

model.study('std1').feature('stat').setEntry('activate', 'solid', false);
model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat2').setEntry('activate', 'cc', false);
model.study('std1').feature('stat2').set('useparam', true);
model.study('std1').feature('stat2').setIndex('pname', 'pressure', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', 'N/m^2', 0);
model.study('std1').feature('stat2').setIndex('pname', 'pressure', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', 'N/m^2', 0);
model.study('std1').feature('stat2').setIndex('pname', 'pressure', 0);
model.study('std1').feature('stat2').setIndex('plistarr', 'range(16e6, 2e5, 36e6)', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat2');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat2');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s2').feature('p1').set('control', 'stat2');
model.sol('sol1').feature('s2').set('control', 'stat2');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s2').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s2').feature('p1').create('st1', 'StopCondition');
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopcondarr', '0.1-comp1.y_vol', 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').setIndex('stopcondterminateon', 'negative', 0);
model.sol('sol1').feature('s2').feature('p1').feature('st1').set('storestopcondsol', 'stepbefore_stepafter');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Vector Field (cc)');
model.result('pg1').set('titlecolor', 'black');
model.result('pg1').set('edgecolor', 'black');
model.result('pg1').set('legendcolor', 'black');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 78, 0);
model.result('pg1').set('defaultPlotID', 'CurvilinearCoordinates/phys1/pdef1/pcond3/pg1');
model.result('pg1').feature.create('str1', 'Streamline');
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('color', 'red');
model.result('pg1').feature('str1').set('smooth', 'internal');
model.result('pg1').feature('str1').set('maxlen', Inf);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('maxlen', Inf);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('maxlen', Inf);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('maxlen', Inf);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('maxlen', Inf);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 78, 0);
model.result('pg2').label('Coordinate system (cc)');
model.result('pg2').create('sys1', 'CoordSysSurface');
model.result('pg2').feature('sys1').set('sys', 'cc_cs');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 78, 0);
model.result('pg3').set('defaultPlotID', 'stress');
model.result('pg3').label('Stress (solid)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg3').feature('surf1').set('threshold', 'manual');
model.result('pg3').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg3').feature('surf1').set('colortable', 'Rainbow');
model.result('pg3').feature('surf1').set('colortabletrans', 'none');
model.result('pg3').feature('surf1').set('colorscalemode', 'linear');
model.result('pg3').feature('surf1').set('resolution', 'normal');
model.result('pg3').feature('surf1').set('colortable', 'Prism');
model.result('pg3').feature('surf1').create('def', 'Deform');
model.result('pg3').feature('surf1').feature('def').set('expr', {'u' 'w'});
model.result('pg3').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.dataset.create('dset1solidrev', 'Revolve2D');
model.result.dataset('dset1solidrev').set('data', 'dset1');
model.result.dataset('dset1solidrev').set('revangle', 225);
model.result.dataset('dset1solidrev').set('startangle', -90);
model.result.dataset('dset1solidrev').set('hasspacevars', true);
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1solidrev');
model.result('pg4').setIndex('looplevel', 78, 0);
model.result('pg4').set('defaultPlotID', 'stress3D');
model.result('pg4').label('Stress, 3D (solid)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg4').feature('surf1').set('threshold', 'manual');
model.result('pg4').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg4').feature('surf1').set('colortable', 'Rainbow');
model.result('pg4').feature('surf1').set('colortabletrans', 'none');
model.result('pg4').feature('surf1').set('colorscalemode', 'linear');
model.result('pg4').feature('surf1').set('colortable', 'Prism');
model.result('pg4').feature('surf1').create('def', 'Deform');
model.result.dataset('dset1solidrev').set('hasspacevars', true);
model.result('pg4').feature('surf1').feature('def').set('revcoordsys', 'cylindrical');
model.result('pg4').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg4').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg4').feature('surf1').feature('def').set('descractive', true);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('str1').set('udist', 0.005);
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').label('Material Principal Direction');
model.result('pg2').set('titletype', 'none');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 78, 0);
model.result('pg5').label('Equivalent Plastic Strain (solid)');
model.result('pg5').set('defaultPlotID', 'equivalentPlasticStrain');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'solid.epeGp'});
model.result('pg5').feature('surf1').set('inheritplot', 'none');
model.result('pg5').feature('surf1').set('resolution', 'normal');
model.result('pg5').feature('surf1').set('colortabletype', 'discrete');
model.result('pg5').feature('surf1').set('bandcount', 11);
model.result('pg5').feature('surf1').set('colortable', 'AuroraAustralisDark');
model.result('pg5').feature('surf1').set('descractive', true);
model.result('pg5').feature('surf1').set('descr', 'Equivalent plastic strain');
model.result('pg5').label('Equivalent Plastic Strain (solid)');
model.result('pg5').run;
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Yielded Volume');
model.result('pg6').set('titletype', 'custom');
model.result('pg6').set('typeintitle', false);
model.result('pg6').set('unitintitle', false);
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'Pressure (N/m<sup>2</sup>)');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').setIndex('expr', 'y_vol', 0);
model.result('pg6').feature('glob1').setIndex('unit', 1, 0);
model.result('pg6').feature('glob1').setIndex('descr', 'Yielded volume fraction', 0);
model.result('pg6').feature('glob1').set('legend', false);
model.result('pg6').run;
model.result('pg4').run;
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('typeintitle', false);
model.result('pg4').set('descriptionintitle', false);
model.result('pg4').set('unitintitle', false);
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').run;
model.result('pg4').feature('surf1').set('unit', 'MPa');
model.result('pg4').run;
model.result('pg4').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset1solidrev');
model.result('pg7').setIndex('looplevel', 78, 0);
model.result('pg7').set('defaultPlotID', 'boundaryLoads');
model.result('pg7').label('Boundary Loads (solid)');
model.result('pg7').set('showlegends', true);
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'1'});
model.result('pg7').feature('surf1').label('Gray Surfaces');
model.result('pg7').feature('surf1').set('coloring', 'uniform');
model.result('pg7').feature('surf1').set('color', 'gray');
model.result('pg7').feature('surf1').set('inheritcolor', false);
model.result('pg7').feature('surf1').set('inheritrange', false);
model.result('pg7').feature('surf1').set('inherittransparency', false);
model.result('pg7').feature('surf1').create('def', 'Deform');
model.result('pg7').feature('surf1').feature('def').set('revcoordsys', 'cylindrical');
model.result('pg7').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg7').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg7').feature('surf1').feature('def').set('descractive', true);
model.result('pg7').feature('surf1').feature('def').set('scaleactive', true);
model.result('pg7').feature('surf1').feature('def').set('scale', '0');
model.result('pg7').feature('surf1').create('tran1', 'Transparency');
model.result('pg7').feature('surf1').feature('tran1').set('transparency', 0.8);
model.result('pg7').create('arws1', 'ArrowSurface');
model.result('pg7').feature('arws1').set('revcoordsys', 'cylindrical');
model.result('pg7').feature('arws1').set('expr', {'solid.bndl1.F_Ar' 'solid.bndl1.F_Aphi' 'solid.bndl1.F_Az'});
model.result('pg7').feature('arws1').set('placement', 'elements');
model.result('pg7').feature('arws1').set('arrowbase', 'head');
model.result('pg7').feature('arws1').label('Boundary Load 1');
model.result('pg7').feature('arws1').set('inheritplot', 'none');
model.result('pg7').feature('arws1').create('col', 'Color');
model.result('pg7').feature('arws1').feature('col').set('colortable', 'Rainbow');
model.result('pg7').feature('arws1').feature('col').set('colortabletrans', 'none');
model.result('pg7').feature('arws1').feature('col').set('colorscalemode', 'linear');
model.result('pg7').feature('arws1').feature('col').set('colordata', 'arrowlength');
model.result('pg7').feature('arws1').feature('col').set('coloring', 'gradient');
model.result('pg7').feature('arws1').feature('col').set('topcolor', 'red');
model.result('pg7').feature('arws1').feature('col').set('bottomcolor', 'custom');
model.result('pg7').feature('arws1').feature('col').set('custombottomcolor', [0.5882353186607361 0.5137255191802979 0.5176470875740051]);
model.result('pg7').feature('arws1').set('color', 'red');
model.result('pg7').feature('arws1').create('def', 'Deform');
model.result('pg7').feature('arws1').feature('def').set('revcoordsys', 'cylindrical');
model.result('pg7').feature('arws1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg7').feature('arws1').feature('def').set('descr', 'Displacement field');
model.result('pg7').feature('arws1').feature('def').set('descractive', true);
model.result('pg7').feature('arws1').feature('def').set('scaleactive', true);
model.result('pg7').feature('arws1').feature('def').set('scale', '0');
model.result('pg7').feature.move('surf1', 1);
model.result('pg7').label('Boundary Loads (solid)');

model.nodeGroup.create('dset1solidlgrp', 'Results');
model.nodeGroup('dset1solidlgrp').label('Applied Loads (solid)');
model.nodeGroup('dset1solidlgrp').set('type', 'plotgroup');
model.nodeGroup('dset1solidlgrp').placeAfter('plotgroup', 'pg6');
model.nodeGroup('dset1solidlgrp').label('Applied Loads (solid)');
model.nodeGroup('dset1solidlgrp').placeAfter('plotgroup', 'pg7');
model.nodeGroup('dset1solidlgrp').add('plotgroup', 'pg7');

model.result('pg7').run;
model.result('pg7').run;
model.result('pg3').run;
model.result('pg4').run;

model.title('Pressurized Orthotropic Container');

model.description('This example computes the stress and plastic strain in a thin-walled container made of rolled steel subjected to inner overpressure. The material is represented by an elastic isotropic model combined with Hill orthotropic plasticity. This example also illustrates how to handle structures where the material behavior varies with shape, such as for rolled steel or composites. Here, the principal directions of the material follow the geometrical shape of the structure.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('orthotropic_container.mph');

model.modelNode.label('Components');

out = model;
