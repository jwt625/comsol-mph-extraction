function out = model
%
% isoelectric_separation.m
%
% Model exported on May 26 2025, 21:27 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Chemical_Reaction_Engineering_Module/Electrokinetic_Effects');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('el', 'ElectrophoreticTransport', 'geom1');
model.physics('el').model('comp1');
model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('W', '3.5[mm]', 'Channel width');
model.param.set('H', '30[mm]', 'Electrode height');
model.param.set('iep_1', '4.7', 'Isoelectric point, protein 2');
model.param.set('iep_2', '6.1', 'Isoelectric point, protein 3');
model.param.set('iep_3', '7.5', 'Isoelectric point, protein 4');
model.param.set('iep_4', '9', 'Isoelectric point, protein 5');
model.param.set('D_p', '5e-10[m^2/s]', 'Protein diffusivity');
model.param.set('Uave', '0.15[mm/s]', 'Average carrier fluid velocity');
model.param.set('cp_in', '1[mM]', 'Inlet protein concentration');
model.param.set('V0', '0.15[V]', 'Voltage');
model.param.set('cwa_in', '100[mM]', 'Weak acid inlet concentration');
model.param.set('cwb_in', '100[mM]', 'Weak base inlet concentration');
model.param.set('pKa_wb', '8', 'pKa of weak acid');
model.param.set('pKa_wa', '6', 'pKa of weak base');
model.param.set('mob_wa', '2.4e-13[s*mol/kg]', 'Weak acid mobility');
model.param.set('mob_wb', '2.5e-13[s*mol/kg]', 'Weak base mobility');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'W' 'H'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'W' 'W'});
model.geom('geom1').feature('r2').set('pos', {'0' '-W'});
model.geom('geom1').run('r2');
model.geom('geom1').feature.duplicate('r3', 'r2');
model.geom('geom1').feature('r3').set('pos', {'0' 'H'});
model.geom('geom1').run('r3');
model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').label('Inlet');
model.geom('geom1').feature('sel1').selection('selection').init(1);
model.geom('geom1').feature('sel1').selection('selection').set('r2', 1);
model.geom('geom1').run('sel1');
model.geom('geom1').create('sel2', 'ExplicitSelection');
model.geom('geom1').feature('sel2').label('Outlet');
model.geom('geom1').feature('sel2').selection('selection').init(1);
model.geom('geom1').feature('sel2').selection('selection').set('r3', 3);
model.geom('geom1').run('fin');
model.geom('geom1').create('mce1', 'MeshControlEdges');
model.geom('geom1').feature('mce1').selection('input').set('fin', [4 6]);
model.geom('geom1').feature('mce1').set('includevtx', false);
model.geom('geom1').run('mce1');

model.view('view1').axis.set('viewscaletype', 'manual');
model.view('view1').axis.set('xscale', 3);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water, liquid');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');

model.physics('el').prop('TransportMechanism').set('Convection', true);
model.physics('el').feature('sol1').set('u_src', 'root.comp1.u');
model.physics('el').create('eip1', 'ElectrolytePotential', 1);
model.physics('el').feature('eip1').selection.set([3]);
model.physics('el').create('eip2', 'ElectrolytePotential', 1);
model.physics('el').feature('eip2').selection.set([7]);
model.physics('el').feature('eip2').set('philbnd', 'V0');
model.physics('el').create('prot1', 'Protein', 2);
model.physics('el').feature('prot1').set('speciesname', 'p1');
model.physics('el').feature('prot1').set('avgz', 'iep_1-el.pH');
model.physics('el').feature('prot1').set('D', 'D_p');
model.physics('el').feature('prot1').create('in1', 'Inflow', 1);
model.physics('el').feature('prot1').feature('in1').selection.named('geom1_sel1');
model.physics('el').feature('prot1').feature('in1').set('c0', 'cp_in');
model.physics('el').feature('prot1').feature('in1').set('BoundaryConditionType', 'FluxDanckwerts');
model.physics('el').feature('prot1').create('out1', 'Outflow', 1);
model.physics('el').feature('prot1').feature('out1').selection.named('geom1_sel2');
model.physics('el').feature.duplicate('prot2', 'prot1');
model.physics('el').feature('prot2').set('speciesname', 'p2');
model.physics('el').feature('prot2').set('avgz', 'iep_2-el.pH');
model.physics('el').feature.duplicate('prot3', 'prot2');
model.physics('el').feature('prot3').set('speciesname', 'p3');
model.physics('el').feature('prot3').set('avgz', 'iep_3-el.pH');
model.physics('el').feature.duplicate('prot4', 'prot3');
model.physics('el').feature('prot4').set('speciesname', 'p4');
model.physics('el').feature('prot4').set('avgz', 'iep_4-el.pH');
model.physics('el').create('wa1', 'WeakAcid', 2);
model.physics('el').feature('wa1').set('speciesname', 'wa');
model.physics('el').feature('wa1').set('pKam', 'pKa_wa');
model.physics('el').feature('wa1').set('um', 'mob_wa');
model.physics('el').feature('wa1').feature('initc1').set('initc', 'cwa_in');
model.physics('el').feature('wa1').create('in1', 'Inflow', 1);
model.physics('el').feature('wa1').feature('in1').selection.named('geom1_sel1');
model.physics('el').feature('wa1').feature('in1').set('c0', 'cwa_in');
model.physics('el').feature('wa1').feature('in1').set('BoundaryConditionType', 'FluxDanckwerts');
model.physics('el').feature('wa1').create('out1', 'Outflow', 1);
model.physics('el').feature('wa1').feature('out1').selection.named('geom1_sel2');
model.physics('el').create('wb1', 'WeakBase', 2);
model.physics('el').feature('wb1').set('speciesname', 'wb');
model.physics('el').feature('wb1').set('pKam', 'pKa_wb');
model.physics('el').feature('wb1').set('um', 'mob_wb');
model.physics('el').feature('wb1').feature('initc1').set('initc', 'cwb_in');
model.physics('el').feature('wb1').create('in1', 'Inflow', 1);
model.physics('el').feature('wb1').feature('in1').selection.named('geom1_sel1');
model.physics('el').feature('wb1').feature('in1').set('c0', 'cwb_in');
model.physics('el').feature('wb1').create('out1', 'Outflow', 1);
model.physics('el').feature('wb1').feature('out1').selection.named('geom1_sel2');
model.physics('spf').create('inl1', 'InletBoundary', 1);
model.physics('spf').feature('inl1').selection.set([2]);
model.physics('spf').feature('inl1').set('BoundaryCondition', 'FullyDevelopedFlow');
model.physics('spf').feature('inl1').set('Uavfdf', 'Uave');
model.physics('spf').create('out1', 'OutletBoundary', 1);
model.physics('spf').feature('out1').selection.named('geom1_sel2');
model.physics('spf').feature('out1').set('NormalFlow', true);

model.mesh('mesh1').run;
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([2 5 9 10]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 60);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', '5e-4');
model.mesh('mesh1').run;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/el', false);
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').label('Study 1 - Flow Calculation');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Velocity (spf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('expr', 'spf.U');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Pressure (spf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').label('Contour');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('expr', 'p');
model.result('pg2').feature('con1').set('number', 40);
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('smooth', 'internal');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg2').run;

model.study.create('std2');
model.study('std2').create('cdi', 'CurrentDistributionInitialization');
model.study('std2').feature('cdi').set('solnum', 'auto');
model.study('std2').feature('cdi').set('notsolnum', 'auto');
model.study('std2').feature('cdi').set('outputmap', {});
model.study('std2').feature('cdi').set('ngenAUX', '1');
model.study('std2').feature('cdi').set('goalngenAUX', '1');
model.study('std2').feature('cdi').set('ngenAUX', '1');
model.study('std2').feature('cdi').set('goalngenAUX', '1');
model.study('std2').feature('cdi').setSolveFor('/physics/el', true);
model.study('std2').feature('cdi').setSolveFor('/physics/spf', false);
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').set('plotgroup', 'Default');
model.study('std2').feature('stat').set('solnum', 'auto');
model.study('std2').feature('stat').set('notsolnum', 'auto');
model.study('std2').feature('stat').set('outputmap', {});
model.study('std2').feature('stat').set('ngenAUX', '1');
model.study('std2').feature('stat').set('goalngenAUX', '1');
model.study('std2').feature('stat').set('ngenAUX', '1');
model.study('std2').feature('stat').set('goalngenAUX', '1');
model.study('std2').feature('stat').setSolveFor('/physics/el', true);
model.study('std2').feature('stat').setSolveFor('/physics/spf', false);
model.study('std2').label('Study 2 - Separation Calculation');
model.study('std2').feature('cdi').set('usesol', true);
model.study('std2').feature('cdi').set('notsolmethod', 'sol');
model.study('std2').feature('cdi').set('notstudy', 'std1');

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'cdi');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_el_wa1_c').set('scalemethod', 'init');
model.sol('sol2').feature('v1').feature('comp1_el_wb1_c').set('scalemethod', 'init');
model.sol('sol2').feature('v1').feature('comp1_el_wa1_c').set('scaleval', '1');
model.sol('sol2').feature('v1').feature('comp1_el_wb1_c').set('scaleval', '1');
model.sol('sol2').feature('v1').set('control', 'cdi');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').create('st2', 'StudyStep');
model.sol('sol2').feature('st2').set('study', 'std2');
model.sol('sol2').feature('st2').set('studystep', 'stat');
model.sol('sol2').create('v2', 'Variables');
model.sol('sol2').feature('v2').feature('comp1_el_wa1_c').set('scalemethod', 'init');
model.sol('sol2').feature('v2').feature('comp1_el_wb1_c').set('scalemethod', 'init');
model.sol('sol2').feature('v2').feature('comp1_el_wa1_c').set('scaleval', '1');
model.sol('sol2').feature('v2').feature('comp1_el_wb1_c').set('scaleval', '1');
model.sol('sol2').feature('v2').set('initmethod', 'sol');
model.sol('sol2').feature('v2').set('initsol', 'sol2');
model.sol('sol2').feature('v2').set('initsoluse', 'sol3');
model.sol('sol2').feature('v2').set('notsolmethod', 'sol');
model.sol('sol2').feature('v2').set('notsol', 'sol2');
model.sol('sol2').feature('v2').set('control', 'stat');
model.sol('sol2').create('s2', 'Stationary');
model.sol('sol2').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s2').create('d1', 'Direct');
model.sol('sol2').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s2').feature.remove('fcDef');
model.sol('sol2').feature('v2').set('notsolnum', 'auto');
model.sol('sol2').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset2');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'el.pH'});
model.result('pg3').label('pH (el)');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset2');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'el.sigmal'});
model.result('pg4').label('Electrolyte Conductivity (el)');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset2');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'phil'});
model.result('pg5').create('arws1', 'ArrowSurface');
model.result('pg5').feature('arws1').set('expr', {'el.Ilx' 'el.Ily'});
model.result('pg5').feature('arws1').set('arrowbase', 'center');
model.result('pg5').feature('arws1').set('color', 'black');
model.result('pg5').label('Electrolyte Potential (el)');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'dset2');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'el.c_p1'});
model.result('pg6').create('arws1', 'ArrowSurface');
model.result('pg6').feature('arws1').set('expr', {'el.tflux_p1x' 'el.tflux_p1y'});
model.result('pg6').feature('arws1').set('arrowbase', 'center');
model.result('pg6').feature('arws1').set('color', 'black');
model.result('pg6').label('Molar Concentration - p1 (el)');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset2');
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'el.c_p2'});
model.result('pg7').create('arws1', 'ArrowSurface');
model.result('pg7').feature('arws1').set('expr', {'el.tflux_p2x' 'el.tflux_p2y'});
model.result('pg7').feature('arws1').set('arrowbase', 'center');
model.result('pg7').feature('arws1').set('color', 'black');
model.result('pg7').label('Molar Concentration - p2 (el)');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').set('data', 'dset2');
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'el.c_p3'});
model.result('pg8').create('arws1', 'ArrowSurface');
model.result('pg8').feature('arws1').set('expr', {'el.tflux_p3x' 'el.tflux_p3y'});
model.result('pg8').feature('arws1').set('arrowbase', 'center');
model.result('pg8').feature('arws1').set('color', 'black');
model.result('pg8').label('Molar Concentration - p3 (el)');
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').set('data', 'dset2');
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', {'el.c_p4'});
model.result('pg9').create('arws1', 'ArrowSurface');
model.result('pg9').feature('arws1').set('expr', {'el.tflux_p4x' 'el.tflux_p4y'});
model.result('pg9').feature('arws1').set('arrowbase', 'center');
model.result('pg9').feature('arws1').set('color', 'black');
model.result('pg9').label('Molar Concentration - p4 (el)');
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').set('data', 'dset2');
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', {'el.c_wa'});
model.result('pg10').create('arws1', 'ArrowSurface');
model.result('pg10').feature('arws1').set('expr', {'el.tflux_wax' 'el.tflux_way'});
model.result('pg10').feature('arws1').set('arrowbase', 'center');
model.result('pg10').feature('arws1').set('color', 'black');
model.result('pg10').label('Molar Concentration - wa (el)');
model.result.create('pg11', 'PlotGroup2D');
model.result('pg11').set('data', 'dset2');
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('expr', {'el.c_wb'});
model.result('pg11').create('arws1', 'ArrowSurface');
model.result('pg11').feature('arws1').set('expr', {'el.tflux_wbx' 'el.tflux_wby'});
model.result('pg11').feature('arws1').set('arrowbase', 'center');
model.result('pg11').feature('arws1').set('color', 'black');
model.result('pg11').label('Molar Concentration - wb (el)');
model.result('pg3').run;
model.result('pg3').set('titletype', 'none');
model.result('pg3').set('showlegendsunit', true);
model.result('pg4').run;
model.result('pg4').set('titletype', 'none');
model.result('pg4').set('showlegendsunit', true);
model.result('pg5').run;
model.result('pg5').set('titletype', 'none');
model.result('pg5').set('showlegendsunit', true);
model.result('pg6').run;
model.result('pg6').set('titletype', 'none');
model.result('pg6').set('showlegendsunit', true);
model.result('pg7').run;
model.result('pg7').set('titletype', 'none');
model.result('pg7').set('showlegendsunit', true);
model.result('pg8').run;
model.result('pg9').run;
model.result('pg10').run;
model.result('pg10').set('titletype', 'none');
model.result('pg10').set('showlegendsunit', true);
model.result('pg11').run;
model.result('pg11').set('titletype', 'none');
model.result('pg11').set('showlegendsunit', true);
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').feature.remove('arws1');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').create('arwl1', 'ArrowLine');
model.result('pg7').feature('arwl1').set('expr', {'u' 'v'});
model.result('pg7').feature('arwl1').set('descr', 'Velocity field');
model.result('pg7').feature('arwl1').set('arrowcount', 20);
model.result('pg7').feature('arwl1').set('color', 'custom');
model.result('pg7').feature('arwl1').set('customcolor', [0.019607843831181526 0.5176470875740051 0.5215686559677124]);
model.result('pg7').run;
model.result('pg7').feature('arwl1').create('sel1', 'Selection');
model.result('pg7').feature('arwl1').feature('sel1').selection.set([2 5]);
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('expr', {'el.tflux_p2x' 'el.tflux_p2y'});
model.result('pg7').feature('str1').set('descr', 'Total flux');
model.result('pg7').feature('str1').set('selnumber', 10);
model.result('pg7').feature('str1').selection.set([5]);
model.result('pg7').feature('str1').set('pointtype', 'arrow');
model.result('pg7').feature('str1').set('arrowcountactive', true);
model.result('pg7').feature('str1').set('arrowcount', 90);
model.result('pg7').feature('str1').set('arrowscaleactive', true);
model.result('pg7').feature('str1').set('arrowscale', 10);
model.result('pg7').run;
model.result.create('pg12', 'PlotGroup1D');
model.result('pg12').run;
model.result('pg12').label('pH at Outlet');
model.result('pg12').set('data', 'dset2');
model.result('pg12').set('titletype', 'none');
model.result('pg12').create('lngr1', 'LineGraph');
model.result('pg12').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg12').feature('lngr1').set('linewidth', 'preference');
model.result('pg12').feature('lngr1').selection.named('geom1_sel2');
model.result('pg12').feature('lngr1').set('xdata', 'expr');
model.result('pg12').feature('lngr1').set('xdataexpr', 'x');
model.result('pg12').run;
model.result.create('pg13', 'PlotGroup1D');
model.result('pg13').run;
model.result('pg13').label('Protein Concentrations at Outlet');
model.result('pg13').set('data', 'dset2');
model.result('pg13').set('titletype', 'none');
model.result('pg13').set('legendlayout', 'outside');
model.result('pg13').create('lngr1', 'LineGraph');
model.result('pg13').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg13').feature('lngr1').set('linewidth', 'preference');
model.result('pg13').feature('lngr1').selection.named('geom1_sel2');
model.result('pg13').feature('lngr1').set('expr', 'el.c_p1');
model.result('pg13').feature('lngr1').set('descr', 'Concentration');
model.result('pg13').feature('lngr1').set('xdata', 'expr');
model.result('pg13').feature('lngr1').set('xdataexpr', 'x');
model.result('pg13').feature('lngr1').set('legend', true);
model.result('pg13').feature('lngr1').set('legendmethod', 'manual');
model.result('pg13').feature('lngr1').setIndex('legends', 'Protein 1', 0);
model.result('pg13').run;
model.result('pg13').feature.duplicate('lngr2', 'lngr1');
model.result('pg13').run;
model.result('pg13').feature('lngr2').set('expr', 'el.c_p2');
model.result('pg13').feature('lngr2').setIndex('legends', 'Protein 2', 0);
model.result('pg13').feature.duplicate('lngr3', 'lngr2');
model.result('pg13').run;
model.result('pg13').feature('lngr3').set('expr', 'el.c_p3');
model.result('pg13').feature('lngr3').setIndex('legends', 'Protein 3', 0);
model.result('pg13').feature.duplicate('lngr4', 'lngr3');
model.result('pg13').run;
model.result('pg13').feature('lngr4').set('expr', 'el.c_p4');
model.result('pg13').feature('lngr4').setIndex('legends', 'Protein 4', 0);
model.result('pg13').run;
model.result('pg13').run;

model.title('Isoelectric Separation');

model.description(['This example applies the Electrophoretic Transport and Laminar Flow interfaces to model isoelectric separation in a free-flow electrophoresis device. A stream containing six different ionic species is shown to be divided into pure component streams by means of migrative transport in an electric field.' newline  newline 'Free-flow electrophoresis can separate macromolecules such as proteins, based on their mobility perpendicular to the flow of the carrier fluid. If, in addition, a pH gradient is applied across the carrier flow, then molecules can be focused along their isoelectric points. The isoelectric point is the pH at which the molecule has zero net charge. Molecules with a positive net charge will travel in the direction of the electric field, along the pH gradient, until they reach the isoelectric point. At this instance, the migrative transport is switched off as the molecules net charge is zero. Similarly, anionic species travel in the direction opposite of the electric field.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('isoelectric_separation.mph');

model.modelNode.label('Components');

out = model;
