function out = model
%
% multicomponent_tubular_reactor.m
%
% Model exported on May 26 2025, 21:27 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Chemical_Reaction_Engineering_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('chem', 'Chemistry', 'geom1');
model.physics('chem').model('comp1');
model.physics.create('tds', 'DilutedSpecies', 'geom1', {'cpoxide' 'cpglycol'});
model.physics.create('ht', 'HeatTransferInFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/chem', true);
model.study('std1').feature('stat').setSolveFor('/physics/tds', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('E', '75362[J/mol]', 'Activation energy');
model.param.set('A', '16.96e12[1/h]', 'Frequency factor');
model.param.set('Uk', '1300[W/m^2/K]', 'Overall heat-transfer coefficient');
model.param.set('ke', '0.559[W/m/K]', 'Thermal conductivity mixture');
model.param.set('T0', '312[K]', 'Inlet temperature');
model.param.set('Ta0', '273[K]', 'Inlet temperature of the coolant');
model.param.set('dHrx', '-84666[J/mol]', 'Heat of reaction');
model.param.set('v0', '0.1[mol/s]/cpoxide0', 'Total flow rate');
model.param.set('u0', 'v0/(pi*Ra^2)', 'Average flow velocity');
model.param.set('cpoxide0', 'rho_poxide/M_poxide/9[1]', 'Propylene oxide concentration, inlet');
model.param.set('cH2O0', 'rho_H2O/M_H2O*(7/9)[1]', 'Water concentration, inlet');
model.param.set('Ra', '0.1[m]', 'Reactor radius');
model.param.set('L', '1[m]', 'Reactor length');
model.param.set('M_poxide', '58.095[g/mol]', 'Molar weight, propylene oxide');
model.param.set('M_H2O', '18[g/mol]', 'Molar weight, water');
model.param.set('M_pglycol', '76.095[g/mol]', 'Molar weight, propylene glycol');
model.param.set('rho_poxide', '830[kg/m^3]', 'Density, propylene oxide');
model.param.set('rho_H2O', '1000[kg/m^3]', 'Density, water');
model.param.set('rho_pglycol', '1040[kg/m^3]', 'Density, propylene glycol');
model.param.set('myref_H2O', '1e-3[Pa*s]', 'Reference dynamic viscosity, water');
model.param.set('Tref_my', '293[K]', 'Reference temperature viscosity');
model.param.set('cpm_H2O', '75.36[J/mol/K]', 'Molar heat capacity, water');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'Ra' 'L'});
model.geom('geom1').runPre('fin');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').set('Xpoxide', '(cpoxide0-cpoxide)/cpoxide0');
model.variable('var1').descr('Xpoxide', 'Conversion of propylene oxide');

model.physics('chem').prop('TPFeatureInput').set('T_src', 'root.comp1.T');
model.physics('chem').prop('mixture').set('mixture', 'liquid');
model.physics('chem').create('rch1', 'ReactionChem', 2);
model.physics('chem').feature('rch1').set('formula', 'poxide+H2O=>pglycol');
model.physics('chem').feature('rch1').set('ReactionExpression', 'UserDefined');
model.physics('chem').feature('rch1').set('r', 'chem.kf_1*chem.c_poxide');
model.physics('chem').feature('rch1').set('bulkFwdOrder', 1);
model.physics('chem').feature('rch1').set('useArrhenius', true);
model.physics('chem').feature('rch1').set('Af', 'A');
model.physics('chem').feature('rch1').set('Ef', 'E');
model.physics('chem').feature('rch1').set('ReactionHeatSource', 'UserDefined');
model.physics('chem').feature('rch1').set('Q', '-chem.r_1*dHrx');
model.physics('chem').feature('poxide').set('enableChemicalFormulaCheckbox', true);
model.physics('chem').feature('poxide').set('chemicalFormula', 'C3H6O');
model.physics('chem').feature('poxide').set('rho', 'rho_poxide');
model.physics('chem').feature('H2O').set('sType', 'solvent');
model.physics('chem').feature('H2O').set('rho', 'rho_H2O');
model.physics('chem').feature('H2O').set('k', 'ke');
model.physics('chem').feature('H2O').set('speciesEnthalpy', 'UserDefined');
model.physics('chem').feature('H2O').set('Cp', 'cpm_H2O');
model.physics('chem').feature('pglycol').set('enableChemicalFormulaCheckbox', true);
model.physics('chem').feature('pglycol').set('chemicalFormula', 'C3H8O2');
model.physics('chem').feature('pglycol').set('rho', 'rho_pglycol');
model.physics('chem').feature('rch1').set('formula', 'poxide + H2O => pglycol');
model.physics('chem').prop('ChemistryModelInputParameter').set('MassTransfer', 'tds');
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationInput', 'UserDefined', 0, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationValue', 'cH2O0', 0, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationInput', 'cpglycol', 1, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationInput', 'cpoxide', 2, 0);
model.physics('chem').prop('calcTransport').set('etaRef', 'myref_H2O');
model.physics('chem').prop('calcTransport').set('Tref', 'Tref_my');
model.physics('tds').feature('cdm1').set('D_cpoxide', {'chem.D_poxide' '0' '0' '0' 'chem.D_poxide' '0' '0' '0' 'chem.D_poxide'});
model.physics('tds').feature('cdm1').set('D_cpglycol', {'chem.D_pglycol' '0' '0' '0' 'chem.D_pglycol' '0' '0' '0' 'chem.D_pglycol'});
model.physics('tds').create('reac1', 'Reactions', 2);
model.physics('tds').feature('reac1').selection.set([1]);
model.physics('tds').feature('reac1').setIndex('R_cpoxide_src', 'root.comp1.chem.R_poxide', 0);
model.physics('tds').feature('reac1').setIndex('R_cpglycol_src', 'root.comp1.chem.R_pglycol', 0);
model.physics('tds').create('in1', 'Inflow', 1);
model.physics('tds').feature('in1').selection.set([2]);
model.physics('tds').feature('in1').setIndex('c0', 'cpoxide0', 0);
model.physics('tds').feature('in1').set('BoundaryConditionType', 'FluxDanckwerts');
model.physics('tds').create('out1', 'Outflow', 1);
model.physics('tds').feature('out1').selection.set([3]);
model.physics('ht').feature('fluid1').set('k_mat', 'root.comp1.chem.krr');
model.physics('ht').feature('fluid1').set('fluidType', 'gasLiquid');
model.physics('ht').feature('fluid1').set('rho_mat', 'root.comp1.chem.rho');
model.physics('ht').feature('fluid1').set('Cp_mat', 'root.comp1.chem.Cptot');
model.physics('ht').feature('fluid1').set('gamma_not_IG_mat', 'userdef');
model.physics('ht').feature('init1').set('Tinit', 'T0');
model.physics('ht').create('hs1', 'HeatSource', 2);
model.physics('ht').feature('hs1').selection.set([1]);
model.physics('ht').feature('hs1').set('Q0_src', 'root.comp1.chem.Qtot');
model.physics('ht').create('temp1', 'TemperatureBoundary', 1);
model.physics('ht').feature('temp1').selection.set([2]);
model.physics('ht').feature('temp1').set('T0', 'T0');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf1').selection.set([4]);
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 'Uk');
model.physics('ht').feature('hf1').set('Text', 'Ta0');
model.physics('ht').create('ofl1', 'ConvectiveOutflow', 1);
model.physics('ht').feature('ofl1').selection.set([3]);
model.physics('spf').feature('fp1').set('rho_mat', 'root.comp1.chem.rho');
model.physics('spf').feature('fp1').set('mu_mat', 'root.comp1.chem.eta');
model.physics('spf').create('inl1', 'InletBoundary', 1);
model.physics('spf').feature('inl1').selection.set([2]);
model.physics('spf').feature('inl1').set('BoundaryCondition', 'FullyDevelopedFlow');
model.physics('spf').feature('inl1').set('Uavfdf', 'u0');
model.physics('spf').create('out1', 'OutletBoundary', 1);
model.physics('spf').feature('out1').selection.set([3]);

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 2);
model.multiphysics.create('rfd1', 'ReactingFlowDS', 'geom1', 2);

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([2 3]);
model.mesh('mesh1').feature('map1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis1').set('elemcount', 50);
model.mesh('mesh1').feature('map1').feature('dis1').set('elemratio', 0.01);
model.mesh('mesh1').feature('map1').feature('dis1').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map1').feature('dis1').set('reverse', true);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([1 4]);
model.mesh('mesh1').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis2').set('elemcount', 200);
model.mesh('mesh1').feature('map1').feature('dis2').set('elemratio', 0.01);
model.mesh('mesh1').feature('map1').feature('dis2').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map1').feature('dis2').set('reverse', true);
model.mesh('mesh1').run;

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u' 'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_T'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.5);
model.sol('sol1').feature('s1').create('d2', 'Direct');
model.sol('sol1').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d2').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Temperature');
model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_cpoxide' 'comp1_cpglycol'});
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subdamp', 0.35);
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subtermconst', 'itertol');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subntolfact', 1);
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subiter', 3);
model.sol('sol1').feature('s1').create('d3', 'Direct');
model.sol('sol1').feature('s1').feature('d3').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d3').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d3').label('Direct, concentrations (tds)');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'd3');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').label('Concentrations');
model.sol('sol1').feature('s1').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s1').feature('se1').set('subinitcfl', 5);
model.sol('sol1').feature('s1').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s1').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s1').feature('se1').set('subkdpid', 0.15);
model.sol('sol1').feature('s1').feature('se1').set('subkipid', 0.15);
model.sol('sol1').feature('s1').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s1').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s1').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s1').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s1').feature('se1').set('maxsegiter', 200);
model.sol('sol1').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('i3', 'Iterative');
model.sol('sol1').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i3').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i3').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i3').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i3').label('AMG, concentrations (tds)');
model.sol('sol1').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').label('Concentration, poxide (tds)');
model.result('pg1').set('titletype', 'custom');
model.result('pg1').set('prefixintitle', 'Species poxide:');
model.result('pg1').set('expressionintitle', false);
model.result('pg1').set('typeintitle', true);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'cpoxide'});
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').set('expr', {'tds.tflux_cpoxider' 'tds.tflux_cpoxidez'});
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('recover', 'pprint');
model.result('pg1').feature('str1').set('pointtype', 'arrow');
model.result('pg1').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg1').feature('str1').set('color', 'gray');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'dset1');
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('hasspacevars', false);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'rev1');
model.result('pg2').label('Concentration, poxide, 3D (tds)');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'cpoxide'});
model.result('pg2').set('titletype', 'custom');
model.result('pg2').set('typeintitle', false);
model.result('pg2').set('prefixintitle', 'Species poxide:');
model.result('pg2').set('expressionintitle', false);
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').label('Concentration, pglycol (tds)');
model.result('pg3').set('titletype', 'custom');
model.result('pg3').set('prefixintitle', 'Species pglycol:');
model.result('pg3').set('expressionintitle', false);
model.result('pg3').set('typeintitle', true);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'cpglycol'});
model.result('pg3').create('str1', 'Streamline');
model.result('pg3').feature('str1').set('expr', {'tds.tflux_cpglycolr' 'tds.tflux_cpglycolz'});
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('recover', 'pprint');
model.result('pg3').feature('str1').set('pointtype', 'arrow');
model.result('pg3').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('str1').set('color', 'gray');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'rev1');
model.result('pg4').label('Concentration, pglycol, 3D (tds)');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'cpglycol'});
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('typeintitle', false);
model.result('pg4').set('prefixintitle', 'Species pglycol:');
model.result('pg4').set('expressionintitle', false);
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Temperature (ht)');
model.result('pg5').set('dataisaxisym', 'off');
model.result('pg5').set('data', 'dset1');
model.result('pg5').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('expr', 'T');
model.result('pg5').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').label('Velocity (spf)');
model.result('pg6').set('dataisaxisym', 'off');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('data', 'dset1');
model.result('pg6').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').label('Surface');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('expr', 'spf.U');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').label('Pressure (spf)');
model.result('pg7').set('dataisaxisym', 'off');
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').set('data', 'dset1');
model.result('pg7').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg7').feature.create('con1', 'Contour');
model.result('pg7').feature('con1').label('Contour');
model.result('pg7').feature('con1').set('showsolutionparams', 'on');
model.result('pg7').feature('con1').set('expr', 'p');
model.result('pg7').feature('con1').set('number', 40);
model.result('pg7').feature('con1').set('levelrounding', false);
model.result('pg7').feature('con1').set('smooth', 'internal');
model.result('pg7').feature('con1').set('showsolutionparams', 'on');
model.result('pg7').feature('con1').set('data', 'parent');
model.result.dataset('rev1').set('data', 'dset1');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').label('Velocity, 3D (spf)');
model.result('pg8').set('frametype', 'spatial');
model.result('pg8').set('data', 'rev1');
model.result('pg8').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond1/pg1');
model.result('pg8').feature.create('surf1', 'Surface');
model.result('pg8').feature('surf1').label('Surface');
model.result('pg8').feature('surf1').set('showsolutionparams', 'on');
model.result('pg8').feature('surf1').set('expr', 'spf.U');
model.result('pg8').feature('surf1').set('smooth', 'internal');
model.result('pg8').feature('surf1').set('showsolutionparams', 'on');
model.result('pg8').feature('surf1').set('data', 'parent');
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').label('Temperature and Fluid Flow (nitf1)');
model.result('pg9').set('dataisaxisym', 'off');
model.result('pg9').set('showlegendsunit', true);
model.result('pg9').set('data', 'dset1');
model.result('pg9').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond4/pcond4/pcond2/pg2');
model.result('pg9').feature.create('surf1', 'Surface');
model.result('pg9').feature('surf1').label('Fluid Temperature');
model.result('pg9').feature('surf1').set('showsolutionparams', 'on');
model.result('pg9').feature('surf1').set('solutionparams', 'parent');
model.result('pg9').feature('surf1').set('expr', 'nitf1.T');
model.result('pg9').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg9').feature('surf1').set('smooth', 'internal');
model.result('pg9').feature('surf1').set('showsolutionparams', 'on');
model.result('pg9').feature('surf1').set('data', 'parent');
model.result('pg9').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg9').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg9').feature('surf1').feature('sel1').selection.set([1]);
model.result('pg9').feature.create('arws1', 'ArrowSurface');
model.result('pg9').feature('arws1').label('Fluid Flow');
model.result('pg9').feature('arws1').set('showsolutionparams', 'on');
model.result('pg9').feature('arws1').set('solutionparams', 'parent');
model.result('pg9').feature('arws1').set('expr', {'nitf1.ur' 'nitf1.uz'});
model.result('pg9').feature('arws1').set('xnumber', 30);
model.result('pg9').feature('arws1').set('ynumber', 30);
model.result('pg9').feature('arws1').set('arrowtype', 'cone');
model.result('pg9').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg9').feature('arws1').set('showsolutionparams', 'on');
model.result('pg9').feature('arws1').set('data', 'parent');
model.result('pg9').feature('arws1').feature.create('col1', 'Color');
model.result('pg9').feature('arws1').feature('col1').set('showcolordata', 'off');
model.result('pg9').feature('arws1').feature('col1').set('expr', 'spf.U');
model.result('pg9').feature('arws1').feature.create('filt1', 'Filter');
model.result('pg9').feature('arws1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result('pg1').run;
model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').setIndex('genpoints', 'Ra', 1, 0);
model.result.dataset('cln1').set('genparaactive', true);
model.result.dataset('cln1').set('genparadist', '0.5*L 1*L');
model.result.dataset.create('mir1', 'Mirror2D');
model.result.dataset('mir1').set('removesymelem', true);
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').run;
model.result('pg10').set('data', 'mir1');
model.result('pg10').label('Temperature, surface (mirrored)');
model.result('pg10').set('titletype', 'none');
model.result('pg10').set('showlegendsunit', true);
model.result('pg10').set('xlabelactive', true);
model.result('pg10').set('xlabel', 'Radial Location (m)');
model.result('pg10').set('ylabelactive', true);
model.result('pg10').set('ylabel', 'Axial Location (m)');
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', 'T');
model.result('pg10').feature('surf1').set('descr', 'Temperature');
model.result('pg10').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg10').run;
model.result('pg10').run;
model.result.duplicate('pg11', 'pg10');
model.result('pg11').run;
model.result('pg11').label('Conversion, surface (mirrored)');
model.result('pg11').run;
model.result('pg11').feature('surf1').set('expr', 'Xpoxide');
model.result('pg11').feature('surf1').set('descr', 'Conversion of propylene oxide');
model.result('pg11').feature('surf1').set('colortable', 'Prism');
model.result('pg11').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg11').run;
model.result('pg2').run;
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Surface: Concentration of propylene oxide');
model.result('pg2').set('showlegendsunit', true);
model.result('pg4').run;
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('title', 'Surface: Concentration of propylene glycol');
model.result('pg4').set('showlegendsunit', true);
model.result('pg5').run;
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Surface: Temperature');
model.result('pg5').set('showlegendsunit', true);
model.result('pg6').run;
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'Contour: Temperature');
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').set('title', 'Surface: Velocity Magnitude');
model.result('pg7').run;
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', 'Contour: Pressure');
model.result('pg7').set('showlegendsunit', true);
model.result('pg8').run;
model.result('pg8').set('titletype', 'manual');
model.result('pg8').set('title', 'Surface: Velocity Magnitude');
model.result('pg8').set('showlegendsunit', true);
model.result.create('pg12', 'PlotGroup1D');
model.result('pg12').run;
model.result('pg12').label('Temperature, profiles');
model.result('pg12').set('data', 'cln1');
model.result('pg12').set('titletype', 'none');
model.result('pg12').set('xlabelactive', true);
model.result('pg12').set('xlabel', 'Radial Location (m)');
model.result('pg12').set('ylabelactive', true);
model.result('pg12').set('ylabel', 'Temperature (K)');
model.result('pg12').set('legendlayout', 'outside');
model.result('pg12').create('lngr1', 'LineGraph');
model.result('pg12').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg12').feature('lngr1').set('linewidth', 'preference');
model.result('pg12').feature('lngr1').set('expr', 'T');
model.result('pg12').feature('lngr1').set('descr', 'Temperature');
model.result('pg12').feature('lngr1').set('legend', true);
model.result('pg12').feature('lngr1').set('legendmethod', 'manual');
model.result('pg12').feature('lngr1').setIndex('legends', 'Inlet', 0);
model.result('pg12').feature('lngr1').setIndex('legends', 'Half Axial Location', 1);
model.result('pg12').feature('lngr1').setIndex('legends', 'Outlet', 2);
model.result('pg12').run;
model.result('pg12').run;
model.result.duplicate('pg13', 'pg12');
model.result('pg13').run;
model.result('pg13').label('Conversion, profiles');
model.result('pg13').set('ylabel', 'Conversion');
model.result('pg13').run;
model.result('pg13').feature('lngr1').set('expr', 'Xpoxide');
model.result('pg13').feature('lngr1').set('descr', 'Conversion of propylene oxide');
model.result('pg13').run;
model.result('pg1').run;
model.result.remove('pg1');
model.result.remove('pg3');
model.result.remove('pg5');
model.result.remove('pg6');
model.result.remove('pg9');
model.result('pg2').run;
model.result('pg2').run;

model.title('Multicomponent Tubular Reactor with Isothermal Cooling');

model.description(['This model describes a tubular reactor where propylene oxide (A) reacts with water (B) to form propylene glycol (C): ' newline  newline 'A + B -> C' newline  newline 'Since water is the solvent and present in abundance, the reaction kinetics is described as first order with respect to propylene oxide' newline  newline 'R = k*C_A' newline  newline 'The reaction is exothermic and an isothermal cooling jacket is used to cool the reactor.' newline  newline 'The reactor is modeled in 2D axisymmetry and the simulation results yield composition and temperature variations in both the radial and axial directions. The Chemistry interface is used to incorporate reaction kinetics and mass transport properties.']);

model.label('multicomponent_tubular_reactor.mph');

model.modelNode.label('Components');

out = model;
