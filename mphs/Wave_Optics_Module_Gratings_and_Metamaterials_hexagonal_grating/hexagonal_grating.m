function out = model
%
% hexagonal_grating.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Wave_Optics_Module/Gratings_and_Metamaterials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ewfd', 'ElectromagneticWavesFrequencyDomain', 'geom1');
model.physics('ewfd').model('comp1');

model.study.create('std1');
model.study('std1').create('wave', 'Wavelength');
model.study('std1').feature('wave').set('solnum', 'auto');
model.study('std1').feature('wave').set('notsolnum', 'auto');
model.study('std1').feature('wave').set('outputmap', {});
model.study('std1').feature('wave').set('ngenAUX', '1');
model.study('std1').feature('wave').set('goalngenAUX', '1');
model.study('std1').feature('wave').set('ngenAUX', '1');
model.study('std1').feature('wave').set('goalngenAUX', '1');
model.study('std1').feature('wave').setSolveFor('/physics/ewfd', true);

model.param.set('lda0', '1[um]');
model.param.descr('lda0', 'Wavelength');
model.param.set('a', 'lda0/2');
model.param.descr('a', 'Hexagon side length');
model.param.set('h0', '3*lda0');
model.param.descr('h0', 'Air height');
model.param.set('a1', 'a/2');
model.param.descr('a1', 'Sphere radius');
model.param.set('theta', 'pi/3');
model.param.descr('theta', 'Elevation angle');
model.param.set('phi', '12[deg]');
model.param.descr('phi', 'Azimuth angle');
model.param.set('E0', '1[V/m]');
model.param.descr('E0', 'Electric field amplitude');
model.param.set('H0', '1[A/m]');
model.param.descr('H0', 'Magnetic field amplitude');

model.geom('geom1').run;

model.study('std1').feature('wave').set('plist', 'range(0.9[um],0.01[um],1.1[um])');

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').geom.create('pol1', 'Polygon');
model.geom('geom1').feature('wp1').geom.feature('pol1').set('source', 'table');
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'a', 0, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 0, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'a/2', 1, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'sqrt(3)/2*a', 1, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', '-a/2', 2, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'sqrt(3)/2*a', 2, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', '-a', 3, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 0, 3, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', '-a/2', 4, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', '-sqrt(3)/2*a', 4, 1);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', 'a/2', 5, 0);
model.geom('geom1').feature('wp1').geom.feature('pol1').setIndex('table', '-sqrt(3)/2*a', 5, 1);
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').setIndex('distance', 'h0', 0);
model.geom('geom1').run('ext1');
model.geom('geom1').create('sph1', 'Sphere');
model.geom('geom1').feature('sph1').set('r', 'a1');
model.geom('geom1').run('sph1');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').selection('input').set({'ext1'});
model.geom('geom1').feature('dif1').selection('input2').set({'sph1'});
model.geom('geom1').runPre('fin');

model.view('view1').set('renderwireframe', true);

model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('ewfd').create('port1', 'Port', 2);
model.physics('ewfd').feature('port1').selection.set([4]);
model.physics('ewfd').feature('port1').set('PortType', 'Periodic');
model.physics('ewfd').feature('port1').set('Eampl', {'-E0*sin(phi)' 'E0*cos(phi)' '0'});
model.physics('ewfd').feature('port1').set('alpha1_inc', 'theta');
model.physics('ewfd').feature('port1').set('alpha2_inc', 'phi+pi/3');
model.physics('ewfd').feature('port1').create('pportp1', 'PeriodicPortReferencePoint', 0);
model.physics('ewfd').feature('port1').feature('pportp1').selection.set([2]);
model.physics('ewfd').feature('port1').runCommand('addDiffractionOrders');
model.physics('ewfd').create('pc1', 'PeriodicCondition', 2);
model.physics('ewfd').feature('pc1').set('PeriodicType', 'Floquet');
model.physics('ewfd').feature('pc1').set('Floquet_source', 'FromPeriodicPort');
model.physics('ewfd').feature('pc1').selection.set([1 12]);
model.physics('ewfd').create('pc2', 'PeriodicCondition', 2);
model.physics('ewfd').feature('pc2').set('PeriodicType', 'Floquet');
model.physics('ewfd').feature('pc2').set('Floquet_source', 'FromPeriodicPort');
model.physics('ewfd').feature('pc2').selection.set([5 8]);
model.physics('ewfd').create('pc3', 'PeriodicCondition', 2);
model.physics('ewfd').feature('pc3').set('PeriodicType', 'Floquet');
model.physics('ewfd').feature('pc3').set('Floquet_source', 'FromPeriodicPort');
model.physics('ewfd').feature('pc3').selection.set([2 11]);

model.mesh('mesh1').run;

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'wave');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'wave');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'lambda0'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(0.9[um],0.01[um],1.1[um])'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {[native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'wave');
model.sol('sol1').feature('s1').set('control', 'wave');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (ewfd)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankasolv', {'stored'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankarelax', 0.95);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Electric Field (ewfd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 21, 0);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWavesFrequencyDomain/phys1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('smooth', 'internal');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('unit', {'' '' '' '' '' '' ''});
model.result('pg2').feature('glob1').set('expr', {'ewfd.Rorder_0_0' 'ewfd.Rorder_n1_n1_ip' 'ewfd.Rorder_n1_n1_op' 'ewfd.Rorder_0_n1_ip' 'ewfd.Rorder_0_n1_op' 'ewfd.Rorder_0_0_orth' 'ewfd.Rtotal'});
model.result('pg2').feature('glob1').set('descr', {'Reflectance, order [0,0]' 'Reflectance, order [-1,-1], in-plane' 'Reflectance, order [-1,-1], out-of-plane' 'Reflectance, order [0,-1], in-plane' 'Reflectance, order [0,-1], out-of-plane' 'Reflectance, order [0,0], orthogonal' 'Total reflectance'});
model.result('pg2').label('Reflectance (ewfd)');
model.result('pg2').feature('glob1').set('titletype', 'none');
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Reflectance (1)');
model.result('pg2').feature('glob1').set('xdataexpr', 'lambda0');
model.result('pg2').feature('glob1').set('xdataunit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').label('Polarization Plot (ewfd)');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Polarization states, Color: Phase (Radians)');
model.result('pg3').setIndex('looplevelinput', 'manual', 0);
model.result('pg3').setIndex('looplevel', '1', 0);
model.result('pg3').create('plz1', 'Polarization');
model.result('pg3').feature('plz1').set('linestyle', 'solid');
model.result('pg3').feature('plz1').set('linewidth', 2);
model.result('pg3').feature('plz1').set('display', '2');
model.result('pg3').feature('plz1').create('col1', 'Color');
model.result('pg3').feature('plz1').feature('col1').set('colortable', 'Cyclic');
model.result('pg3').feature('plz1').feature('col1').set('colorlegend', true);
model.result('pg3').feature('plz1').set('legend', true);
model.result('pg3').feature('plz1').set('legendmethod', 'manual');
model.result('pg3').feature('plz1').setIndex('legends', 'Reflection', 0);
model.result('pg3').create('plz2', 'Polarization');
model.result('pg3').feature('plz2').set('linestyle', 'solid');
model.result('pg3').feature('plz2').set('linewidth', 2);
model.result('pg3').feature('plz2').set('display', '0');
model.result('pg3').feature('plz2').create('col1', 'Color');
model.result('pg3').feature('plz2').feature('col1').set('colortable', 'Cyclic');
model.result('pg3').feature('plz2').feature('col1').set('colorlegend', false);
model.result('pg3').create('plz3', 'Polarization');
model.result('pg3').feature('plz3').set('linestyle', 'solid');
model.result('pg3').feature('plz3').set('linewidth', 2);
model.result('pg3').feature('plz3').set('display', '1');
model.result('pg3').feature('plz3').create('col1', 'Color');
model.result('pg3').feature('plz3').feature('col1').set('colortable', 'Cyclic');
model.result('pg3').feature('plz3').feature('col1').set('colorlegend', false);
model.result('pg1').run;
model.result('pg1').create('arws1', 'ArrowSurface');
model.result('pg1').feature('arws1').set('expr', {'ewfd.kIncx_1' 'ewfd.kIncy_1' 'ewfd.kIncz_1'});
model.result('pg1').feature('arws1').set('descr', 'Incident wave vector');
model.result('pg1').feature('arws1').set('descractive', true);
model.result('pg1').feature('arws1').set('descr', 'Incident wave (red)');
model.result('pg1').feature.duplicate('arws2', 'arws1');
model.result('pg1').run;
model.result('pg1').feature('arws2').set('expr', {'ewfd.kModex_1' 'ewfd.kModey_1' 'ewfd.kModez_1'});
model.result('pg1').feature('arws2').set('color', 'blue');
model.result('pg1').feature('arws2').set('descr', 'Reflected wave (blue)');
model.result('pg1').feature.duplicate('arws3', 'arws2');
model.result('pg1').run;
model.result('pg1').feature('arws3').set('expr', {'ewfd.kModex_2' 'ewfd.kModey_2' 'ewfd.kModez_2'});
model.result('pg1').feature('arws3').set('color', 'green');
model.result('pg1').feature('arws3').set('descr', 'Mode m = -1, n = -1 (green)');
model.result('pg1').feature.duplicate('arws4', 'arws3');
model.result('pg1').run;
model.result('pg1').feature('arws4').set('expr', {'ewfd.kModex_4' 'ewfd.kModey_4' 'ewfd.kModez_4'});
model.result('pg1').feature('arws4').set('color', 'yellow');
model.result('pg1').feature('arws4').set('descr', 'Mode m = 0, n = -1 (yellow)');
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 12, 0);
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').set('titletype', 'none');
model.result('pg2').set('ylabel', 'Diffraction efficiency');
model.result('pg2').set('legendpos', 'upperleft');
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').set('legendpos', 'upperleft');
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', [12], 0);
model.result('pg3').run;

model.view.create('view3', 3);

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Polarization Base Vectors');
model.result('pg4').set('titletype', 'none');
model.result('pg4').set('view', 'view3');
model.result('pg4').create('arws1', 'ArrowSurface');
model.result('pg4').feature('arws1').label('Out-of-Plane Base Vector');
model.result('pg4').feature('arws1').set('expr', {'ewfd.eJROOPx_0_0' 'ewfd.eJROOPy_0_0' 'ewfd.eJROOPz_0_0'});
model.result('pg4').feature('arws1').set('descr', 'Jones base vector on reflection side, out-of-plane direction, order [0,0]');
model.result('pg4').feature('arws1').set('arrowcount', 1);
model.result('pg4').feature.duplicate('arws2', 'arws1');
model.result('pg4').run;
model.result('pg4').feature('arws2').label('In-Plane Base Vector');
model.result('pg4').feature('arws2').set('expr', {'ewfd.eJRIPx_0_0' 'ewfd.eJRIPy_0_0' 'ewfd.eJRIPz_0_0'});
model.result('pg4').feature('arws2').set('descr', 'Jones base vector on reflection side, in-plane direction, order [0,0]');
model.result('pg4').feature('arws2').set('color', 'green');
model.result('pg4').feature('arws2').set('inheritplot', 'arws1');
model.result('pg4').feature('arws2').set('inheritcolor', false);
model.result('pg4').feature.duplicate('arws3', 'arws2');
model.result('pg4').run;
model.result('pg4').feature('arws3').label('Normalized Mode Wave Vector');
model.result('pg4').feature('arws3').setIndex('expr', 'ewfd.kModex_1/ewfd.k', 0);
model.result('pg4').feature('arws3').setIndex('expr', 'ewfd.kModey_1/ewfd.k', 1);
model.result('pg4').feature('arws3').setIndex('expr', 'ewfd.kModez_1/ewfd.k', 2);
model.result('pg4').feature('arws3').set('color', 'blue');
model.result('pg4').feature.duplicate('arws4', 'arws3');
model.result('pg4').run;
model.result('pg4').feature('arws4').label('Boundary Normal');
model.result('pg4').feature('arws4').create('sel1', 'Selection');
model.result('pg4').feature('arws4').feature('sel1').selection.set([4]);
model.result('pg4').run;
model.result('pg4').feature('arws4').set('expr', {'ewfd.nx' 'ewfd.ny' 'ewfd.nz'});
model.result('pg4').feature('arws4').set('descr', 'Normal vector');
model.result('pg4').feature('arws4').set('color', 'black');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').feature('arws1').setIndex('expr', 'ewfd.eJROOPx_n1_n1', 0);
model.result('pg4').feature('arws1').setIndex('expr', 'ewfd.eJROOPy_n1_n1', 1);
model.result('pg4').feature('arws1').setIndex('expr', 'ewfd.eJROOPz_n1_n1', 2);
model.result('pg4').run;
model.result('pg4').feature('arws2').setIndex('expr', 'ewfd.eJRIPx_n1_n1', 0);
model.result('pg4').feature('arws2').setIndex('expr', 'ewfd.eJRIPy_n1_n1', 1);
model.result('pg4').feature('arws2').setIndex('expr', 'ewfd.eJRIPz_n1_n1', 2);
model.result('pg4').run;
model.result('pg4').feature('arws3').setIndex('expr', 'ewfd.kModex_2/ewfd.k', 0);
model.result('pg4').feature('arws3').setIndex('expr', 'ewfd.kModey_2/ewfd.k', 1);
model.result('pg4').feature('arws3').setIndex('expr', 'ewfd.kModez_2/ewfd.k', 2);
model.result('pg4').run;

model.physics('ewfd').feature('port1').set('InputType', 'H');
model.physics('ewfd').feature('port1').set('Hampl', {'-H0*sin(phi)' 'H0*cos(phi)' '0'});

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'wave');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'wave');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'lambda0'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(0.9[um],0.01[um],1.1[um])'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {[native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'wave');
model.sol('sol1').feature('s1').set('control', 'wave');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (ewfd)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankasolv', {'stored'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankarelax', 0.95);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').stepFirst(0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', [12], 0);
model.result('pg3').run;
model.result('pg1').run;

model.title('Hexagonal Grating');

model.description('A plane wave is incident on a reflecting hexagonal grating. The grating cell consists of a protruding semisphere. The scattering coefficients for the different diffraction orders are calculated for a few different wavelengths.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('hexagonal_grating.mph');

model.modelNode.label('Components');

out = model;
