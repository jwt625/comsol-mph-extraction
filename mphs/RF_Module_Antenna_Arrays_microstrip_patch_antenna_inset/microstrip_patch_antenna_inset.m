function out = model
%
% microstrip_patch_antenna_inset.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/RF_Module/Antenna_Arrays');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('emw', 'ElectromagneticWaves', 'geom1');
model.physics('emw').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('solnum', 'auto');
model.study('std1').feature('freq').set('notsolnum', 'auto');
model.study('std1').feature('freq').set('outputmap', {});
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').setSolveFor('/physics/emw', true);
model.study('std1').label('Study 1, Quadratic Discretization');

model.geom('geom1').run;

model.study('std1').feature('freq').set('plist', '1.575[GHz]');

model.param.set('d', '60[mil]');
model.param.descr('d', 'Substrate thickness');
model.param.set('w_line', '3.2[mm]');
model.param.descr('w_line', '50 ohm line width');
model.param.set('w_patch', '53[mm]');
model.param.descr('w_patch', 'Patch width');
model.param.set('l_patch', '52[mm]');
model.param.descr('l_patch', 'Patch length');
model.param.set('w_stub', '7[mm]');
model.param.descr('w_stub', 'Tuning stub width');
model.param.set('l_stub', '15.5[mm]');
model.param.descr('l_stub', 'Tuning stub length');
model.param.set('w_sub', '100[mm]');
model.param.descr('w_sub', 'Substrate width');
model.param.set('l_sub', '100[mm]');
model.param.descr('l_sub', 'Substrate length');
model.param.set('freq_min', '1.545[GHz]');
model.param.descr('freq_min', 'Minimum frequency');
model.param.set('freq_max', '1.605[GHz]');
model.param.descr('freq_max', 'Maximum frequency');
model.param.set('lda_min', 'c_const/freq_max');
model.param.descr('lda_min', 'Minimum wavelength');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').label('Substrate');
model.geom('geom1').feature('blk1').set('size', {'w_sub' 'l_sub' 'd'});
model.geom('geom1').feature('blk1').set('base', 'center');
model.geom('geom1').run('blk1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').label('Patch');
model.geom('geom1').feature('blk2').set('size', {'w_patch' 'l_patch' '1'});
model.geom('geom1').feature('blk2').setIndex('size', 'd', 2);
model.geom('geom1').feature('blk2').set('base', 'center');
model.geom('geom1').run('blk2');
model.geom('geom1').create('blk3', 'Block');
model.geom('geom1').feature('blk3').label('Stub');
model.geom('geom1').feature('blk3').set('size', {'w_stub' 'l_stub' '1'});
model.geom('geom1').feature('blk3').setIndex('size', 'd', 2);
model.geom('geom1').feature('blk3').set('base', 'center');
model.geom('geom1').feature('blk3').set('pos', {'w_stub/2+w_line/2' '0' '0'});
model.geom('geom1').feature('blk3').setIndex('pos', 'l_stub/2-l_patch/2', 1);
model.geom('geom1').run('blk3');
model.geom('geom1').create('copy1', 'Copy');
model.geom('geom1').feature('copy1').selection('input').set({'blk3'});
model.geom('geom1').feature('copy1').set('displx', '-w_stub-w_line');
model.geom('geom1').run('copy1');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').selection('input').set({'blk2'});
model.geom('geom1').feature('dif1').selection('input2').set({'blk3' 'copy1'});
model.geom('geom1').run('dif1');

model.view('view1').set('renderwireframe', true);

model.geom('geom1').create('sph1', 'Sphere');
model.geom('geom1').feature('sph1').set('r', 'l_sub');
model.geom('geom1').feature('sph1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('sph1').setIndex('layer', 'l_sub/5', 0);
model.geom('geom1').runPre('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Lumped Port');
model.selection('sel1').geom(2);
model.selection('sel1').set([26]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Substrate');
model.selection('sel2').set([6 7]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('PML');
model.selection('sel3').set([1 2 3 4 8 9 10 11]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Air');
model.selection('sel4').set([5]);
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('PML, Exterior Boundaries');
model.selection('adj1').set('input', {'sel3'});
model.selection.create('adj2', 'Adjacent');
model.selection('adj2').model('comp1');
model.selection('adj2').label('Air, Exterior Boundaries');
model.selection('adj2').set('input', {'sel4'});
model.selection.create('int1', 'Intersection');
model.selection('int1').model('comp1');
model.selection('int1').label('PML, Inside Boundaries');
model.selection('int1').set('entitydim', 2);
model.selection('int1').set('input', {'adj1' 'adj2'});
model.selection.create('adj3', 'Adjacent');
model.selection('adj3').model('comp1');
model.selection('adj3').label('Substrate Boundaries');
model.selection('adj3').set('input', {'sel2'});

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.named('sel3');
model.coordSystem('pml1').set('ScalingType', 'Spherical');

model.view('view1').hideEntities.create('hide1');
model.view('view1').hideEntities('hide1').set([2 9]);
model.view('view1').hideEntities.create('hide2');
model.view('view1').hideEntities('hide2').geom('geom1', 2);
model.view('view1').hideEntities('hide2').set([10 33]);

model.physics('emw').create('pec2', 'PerfectElectricConductor', 2);
model.physics('emw').feature('pec2').selection.set([15 20 21]);
model.physics('emw').create('lport1', 'LumpedPort', 2);
model.physics('emw').feature('lport1').selection.named('sel1');
model.physics('emw').create('ffd1', 'FarFieldDomain', 3);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Substrate');
model.material('mat2').selection.named('sel2');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'3.38'});
model.material('mat2').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0'});

model.mesh('mesh1').run;

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'1.575[GHz]'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Electric Field (emw)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').label('Multislice');
model.result('pg1').feature('mslc1').set('smooth', 'internal');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result('pg1').feature('mslc1').feature.create('filt1', 'Filter');
model.result('pg1').feature('mslc1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('S-parameter (emw)');
model.result.numerical('gev1').set('data', 'dset1');
model.result.numerical('gev1').set('expr', {'emw.S11dB'});
model.result.table.create('tbl1', 'Table');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').run;
model.result.numerical('gev1').setResult;
model.result.create('pg2', 'PolarGroup');
model.result('pg2').label('2D Far Field (emw)');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('rp1', 'RadiationPattern');
model.result('pg2').feature('rp1').set('legend', 'on');
model.result('pg2').feature('rp1').set('phidisc', '180');
model.result('pg2').feature('rp1').set('expr', {'emw.normEfar'});
model.result('pg2').feature('rp1').create('exp1', 'Export');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('3D Far Field, Gain (emw)');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('view', 'new');
model.result('pg3').set('edges', 'off');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').create('rp1', 'RadiationPattern');
model.result('pg3').feature('rp1').set('expr', {'emw.rGaindBEfar'});
model.result('pg3').feature('rp1').set('colorexpr', {'emw.normEfar'});
model.result('pg3').feature('rp1').set('useradiusascolor', true);
model.result('pg3').feature('rp1').set('directivityexpr', {'emw.normEfar^2'});
model.result('pg3').feature('rp1').set('thetadisc', '45');
model.result('pg3').feature('rp1').set('phidisc', '45');
model.result('pg3').feature('rp1').set('directivity', 'on');
model.result('pg3').feature('rp1').set('colortable', 'RainbowLight');
model.result('pg3').feature('rp1').create('exp1', 'Export');
model.result('pg3').feature('rp1').feature('exp1').setIndex('expr', 'comp1.emw.theta', 0);
model.result('pg3').feature('rp1').feature('exp1').setIndex('expr', 'comp1.emw.phi', 1);
model.result('pg2').feature('rp1').feature('exp1').setIndex('expr', 'comp1.emw.theta', 0);
model.result('pg2').feature('rp1').feature('exp1').setIndex('expr', 'comp1.emw.phi', 1);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('mslc1').set('xnumber', '0');
model.result('pg1').feature('mslc1').set('ynumber', '0');
model.result('pg1').feature('mslc1').set('colortable', 'ThermalDark');
model.result('pg1').feature('mslc1').create('sel1', 'Selection');
model.result('pg1').feature('mslc1').feature('sel1').selection.set([6 7]);
model.result('pg1').run;
model.result('pg1').set('edges', false);
model.result('pg1').create('arwv1', 'ArrowVolume');
model.result('pg1').run;
model.result('pg1').feature('arwv1').set('xnumber', 1);
model.result('pg1').feature('arwv1').set('ynumber', 31);
model.result('pg1').feature('arwv1').set('znumber', 31);
model.result('pg1').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg1').feature('arwv1').create('sel1', 'Selection');
model.result('pg1').feature('arwv1').feature('sel1').selection.set([5]);
model.result('pg1').run;
model.result('pg1').feature('arwv1').create('col1', 'Color');
model.result('pg1').run;
model.result('pg1').feature('arwv1').feature('col1').set('expr', '20*log10(emw.normE)');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Far-field gain, dBi');
model.result('pg2').run;
model.result('pg2').feature('rp1').set('expr', 'emw.gaindBEfar');
model.result('pg2').feature('rp1').set('descr', 'Far-field gain, dBi');
model.result('pg2').feature('rp1').set('refdir', [0 1 0]);
model.result('pg2').feature('rp1').set('normal', [1 0 0]);
model.result('pg2').feature('rp1').set('legendmethod', 'manual');
model.result('pg2').feature('rp1').setIndex('legends', 'E-plane', 0);
model.result('pg2').feature.duplicate('rp2', 'rp1');
model.result('pg2').run;
model.result('pg2').feature('rp2').set('normal', [0 -1 0]);
model.result('pg2').feature('rp2').set('refdir', [1 0 0]);
model.result('pg2').feature('rp2').set('linestyle', 'dashed');
model.result('pg2').feature('rp2').setIndex('legends', 'H-plane', 0);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').create('ann1', 'Annotation');
model.result('pg3').feature('ann1').set('text', 'Maximum directivity: 6.9 dB');
model.result('pg3').feature('ann1').set('poszexpr', 1.71);
model.result('pg3').feature('ann1').set('backgroundcolor', 'white');
model.result('pg3').feature('ann1').set('showframe', true);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').create('iso1', 'Isosurface');
model.result('pg4').feature('iso1').set('expr', '20*log10(emw.normE)');
model.result('pg4').feature('iso1').set('number', 20);
model.result('pg4').feature('iso1').create('sel1', 'Selection');
model.result('pg4').feature('iso1').feature('sel1').selection.set([5 6 7]);
model.result('pg4').run;
model.result('pg4').feature('iso1').create('filt1', 'Filter');
model.result('pg4').run;
model.result('pg4').feature('iso1').feature('filt1').set('expr', 'x>0');
model.result('pg4').run;

model.study.create('std2');
model.study('std2').create('frawe', 'FrequencyAdaptive');
model.study('std2').feature('frawe').set('plotgroup', 'Default');
model.study('std2').feature('frawe').set('solnum', 'auto');
model.study('std2').feature('frawe').set('notsolnum', 'auto');
model.study('std2').feature('frawe').set('outputmap', {});
model.study('std2').feature('frawe').setSolveFor('/physics/emw', true);
model.study('std2').label('Study 2, Quadratic Discretization');
model.study('std2').setGenPlots(false);
model.study('std2').feature('frawe').set('plist', 'range(freq_min,100[kHz],freq_max)');
model.study('std2').feature('frawe').setEntry('outputmap', 'emw', 'selection');
model.study('std2').feature('frawe').setEntry('outputselectionmap', 'emw', 'sel1');

model.sol.create('sol2');

model.study('std2').feature('frawe').set('awefunc', {'sqrt(1-abs(comp1.emw.S11)^2)'});

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'frawe');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'frawe');
model.sol('sol2').create('aw1', 'AWE');
model.sol('sol2').feature('aw1').set('pname', 'freq');
model.sol('sol2').feature('aw1').set('plist', 'range(freq_min,100[kHz],freq_max)');
model.sol('sol2').feature('aw1').set('awefunc', {'sqrt(1-abs(comp1.emw.S11)^2)'});
model.sol('sol2').feature('aw1').set('rtol', 0.01);
model.sol('sol2').feature('aw1').set('plot', 'off');
model.sol('sol2').feature('aw1').set('plotgroup', 'Default');
model.sol('sol2').feature('aw1').set('probesel', 'all');
model.sol('sol2').feature('aw1').set('probes', {});
model.sol('sol2').feature('aw1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('aw1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('aw1').create('i1', 'Iterative');
model.sol('sol2').feature('aw1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('aw1').feature('i1').set('prefuntype', 'right');
model.sol('sol2').feature('aw1').feature('i1').set('itrestart', '300');
model.sol('sol2').feature('aw1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol2').feature('aw1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('S-parameter, Asymptotic Waveform Evaluation');
model.result('pg5').set('data', 'dset2');
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Adaptive Frequency Sweep, Microstrip Patch Antenna');
model.result('pg5').set('legendpos', 'lowerright');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').set('expr', {'emw.S11dB'});
model.result('pg5').feature('glob1').set('descr', {'S11'});
model.result('pg5').run;
model.result.dataset.create('af1', 'ArrayFactor');
model.result.dataset('af1').setIndex('array3d', 8, 0, 0);
model.result.dataset('af1').setIndex('array3d', 8, 0, 1);
model.result.dataset('af1').setIndex('array3d', 0.48, 2, 0);
model.result.dataset('af1').setIndex('array3d', 0.48, 2, 1);
model.result.dataset('af1').set('scale', 'dB');
model.result.dataset('af1').set('normalization', true);
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').run;
model.result('pg6').label('3D Far Field, Virtual Array');
model.result('pg6').set('data', 'af1');
model.result('pg6').set('showlegendsmaxmin', true);
model.result('pg6').create('rp1', 'RadiationPattern');
model.result('pg6').feature('rp1').set('expr', 'emw.gaindBEfar');
model.result('pg6').feature('rp1').set('thresholdactive', true);
model.result('pg6').feature('rp1').set('threshold', -30);
model.result('pg6').feature('rp1').set('thetadisc', 180);
model.result('pg6').feature('rp1').set('phidisc', 180);
model.result('pg6').feature('rp1').set('colortable', 'HeatCamera');
model.result('pg6').run;
model.result.dataset.duplicate('af2', 'af1');
model.result.dataset('af2').setIndex('array3d', '-2*pi*0.48*cos(pi/3)', 1, 0);
model.result.create('pg7', 'PolarGroup');
model.result('pg7').run;
model.result('pg7').label('2D Far Field Gain (dB), Virtual Array');
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', '8x8 Microstrip Patch Antenna Array');
model.result('pg7').set('axislimits', true);
model.result('pg7').set('rmin', -15);
model.result('pg7').set('rmax', 25);
model.result('pg7').set('legendpos', 'upperleft');
model.result('pg7').create('rp1', 'RadiationPattern');
model.result('pg7').feature('rp1').set('markerpos', 'datapoints');
model.result('pg7').feature('rp1').set('linewidth', 'preference');
model.result('pg7').feature('rp1').set('expr', 'emw.gaindBEfar');
model.result('pg7').feature('rp1').set('phidisc', 360);
model.result('pg7').feature('rp1').set('normal', [0 -1 0]);
model.result('pg7').feature('rp1').set('legend', true);
model.result('pg7').feature('rp1').set('legendmethod', 'manual');
model.result('pg7').feature('rp1').setIndex('legends', 'Single patch antenna gain', 0);
model.result('pg7').run;
model.result('pg7').feature.duplicate('rp2', 'rp1');
model.result('pg7').run;
model.result('pg7').feature('rp2').set('data', 'af2');
model.result('pg7').feature('rp2').set('expr', '1');
model.result('pg7').feature('rp2').setIndex('legends', '8x8 uniform array factor', 0);
model.result('pg7').run;
model.result('pg7').feature.duplicate('rp3', 'rp2');
model.result('pg7').run;
model.result('pg7').feature('rp3').set('expr', 'emw.gaindBEfar');
model.result('pg7').feature('rp3').setIndex('legends', '8x8 patch antenna array gain', 0);
model.result('pg7').run;

model.study.create('std3');
model.study('std3').create('fdrfam', 'FrequencyDomainRFAdaptiveMesh');
model.study('std3').feature('fdrfam').set('plotgroup', 'Default');
model.study('std3').feature('fdrfam').set('solnum', 'auto');
model.study('std3').feature('fdrfam').set('notsolnum', 'auto');
model.study('std3').feature('fdrfam').set('outputmap', {});
model.study('std3').feature('fdrfam').set('ngenAUX', '1');
model.study('std3').feature('fdrfam').set('goalngenAUX', '1');
model.study('std3').feature('fdrfam').set('ngenAUX', '1');
model.study('std3').feature('fdrfam').set('goalngenAUX', '1');
model.study('std3').feature('fdrfam').setSolveFor('/physics/emw', true);
model.study('std3').label('Study 3, Linear Discretization with Mesh Adaptation');
model.study('std3').feature('fdrfam').set('plist', 'range(freq_min,(freq_max-(freq_min))/4,freq_max)');
model.study('std3').setGenPlots(false);

model.sol.create('sol3');

model.study('std3').feature('fdrfam').set('saveres', false);
model.study('std3').feature('fdrfam').set('errestim', 'goalerrest');
model.study('std3').feature('fdrfam').set('goalfunctype', 'gfman');
model.study('std3').feature('fdrfam').set('gfunc', '1-realdot(comp1.emw.S11,comp1.emw.S11)');

model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'fdrfam');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'fdrfam');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').feature('eeDef').set('adjppr', 'on');
model.sol('sol3').feature('s1').feature('adDef').set('selection', 'sum');
model.sol('sol3').feature('s1').feature('adDef').set('globalminpar', 1.4);
model.sol('sol3').feature('s1').feature('adDef').set('classicadap', true);
model.sol('sol3').feature('s1').set('stol', 0.01);
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol3').feature('s1').feature('p1').set('plistarr', {'range(freq_min,(freq_max-(freq_min))/4,freq_max)'});
model.sol('sol3').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol3').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol3').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol3').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol3').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol3').feature('s1').feature('p1').set('probes', {});
model.sol('sol3').feature('s1').feature('p1').set('control', 'fdrfam');
model.sol('sol3').feature('s1').set('control', 'fdrfam');
model.sol('sol3').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('d1').label('Suggested Direct Solver (emw)');
model.sol('sol3').feature('s1').create('i1', 'Iterative');
model.sol('sol3').feature('s1').feature('i1').set('linsolver', 'tfqmr');
model.sol('sol3').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol3').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol3').feature('s1').feature('i1').create('sv1', 'SORVector');
model.sol('sol3').feature('s1').feature('i1').feature('sv1').set('iter', '1');
model.sol('sol3').feature('s1').feature('i1').feature('sv1').set('relax', '1');
model.sol('sol3').feature('s1').feature('i1').feature('sv1').set('seconditer', '3');
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');

model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').run;
model.result('pg8').label('Electric Field (emw), Mesh Adaptation');
model.result('pg8').set('data', 'dset4');
model.result('pg8').create('mslc1', 'Multislice');
model.result('pg8').feature('mslc1').set('xnumber', '0');
model.result('pg8').feature('mslc1').set('ynumber', '0');
model.result('pg8').feature('mslc1').set('colortable', 'Thermal');
model.result('pg8').feature('mslc1').create('sel1', 'Selection');
model.result('pg8').feature('mslc1').feature('sel1').selection.named('sel2');
model.result('pg8').run;
model.result('pg8').set('showlegends', false);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').create('sel1', 'Selection');
model.result('pg8').feature('surf1').feature('sel1').selection.named('int1');
model.result('pg8').feature('surf1').feature('sel1').selection.set([9 11 12 32 37 40]);
model.result('pg8').run;
model.result('pg8').feature.duplicate('surf2', 'surf1');
model.result('pg8').run;
model.result('pg8').feature('surf2').set('expr', '1');
model.result('pg8').feature('surf2').set('coloring', 'uniform');
model.result('pg8').feature('surf2').set('color', 'gray');
model.result('pg8').feature('surf2').set('wireframe', true);
model.result('pg8').feature.duplicate('surf3', 'surf2');
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').feature('surf3').feature('sel1').selection.named('adj3');

model.study('std3').feature('fdrfam').set('dampingFactor', 0.05);
model.study('std3').feature('fdrfam').set('maxAdaptationNumber', 20);
model.study('std3').feature('fdrfam').set('plot', true);
model.study('std3').feature('fdrfam').set('saveres', false);
model.study('std3').feature('fdrfam').setIndex('goalorientedterminationtolerance', 0.02, 0);
model.study('std3').feature('fdrfam').setIndex('goalorientedtolerancetype', 'absolute', 0);
model.study('std3').feature('fdrfam').setIndex('goalorientedterminationactive', true, 0);
model.study('std3').feature('fdrfam').set('goalorientedterminationexpression', {'1-realdot(comp1.emw.S11,comp1.emw.S11)'});
model.study('std3').feature('fdrfam').set('errestim', 'goalerrest');
model.study('std3').feature('fdrfam').set('goalfunctype', 'gfman');
model.study('std3').feature('fdrfam').set('gfunc', '1-realdot(comp1.emw.S11,comp1.emw.S11)');

model.sol('sol3').study('std3');
model.sol('sol3').feature.remove('s1');
model.sol('sol3').feature.remove('v1');
model.sol('sol3').feature.remove('st1');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'fdrfam');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'fdrfam');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').feature('eeDef').set('adjppr', 'on');
model.sol('sol3').feature('s1').feature('adDef').set('selection', 'sum');
model.sol('sol3').feature('s1').feature('adDef').set('globalminpar', 1.4);
model.sol('sol3').feature('s1').feature('adDef').set('classicadap', true);
model.sol('sol3').feature('s1').set('stol', 0.01);
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol3').feature('s1').feature('p1').set('plistarr', {'range(freq_min,(freq_max-(freq_min))/4,freq_max)'});
model.sol('sol3').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol3').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol3').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol3').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plot', 'on');
model.sol('sol3').feature('s1').feature('p1').set('plotgroup', 'pg8');
model.sol('sol3').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol3').feature('s1').feature('p1').set('probes', {});
model.sol('sol3').feature('s1').feature('p1').set('control', 'fdrfam');
model.sol('sol3').feature('s1').set('control', 'fdrfam');
model.sol('sol3').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('d1').label('Suggested Direct Solver (emw)');
model.sol('sol3').feature('s1').create('i1', 'Iterative');
model.sol('sol3').feature('s1').feature('i1').set('linsolver', 'tfqmr');
model.sol('sol3').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol3').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol3').feature('s1').feature('i1').create('sv1', 'SORVector');
model.sol('sol3').feature('s1').feature('i1').feature('sv1').set('iter', '1');
model.sol('sol3').feature('s1').feature('i1').feature('sv1').set('relax', '1');
model.sol('sol3').feature('s1').feature('i1').feature('sv1').set('seconditer', '3');
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result('pg8').run;
model.result('pg9').set('window', 'window1');
model.result('pg9').run;

model.study.create('std4');
model.study('std4').create('frawe', 'FrequencyAdaptive');
model.study('std4').feature('frawe').set('plotgroup', 'Default');
model.study('std4').feature('frawe').set('solnum', 'auto');
model.study('std4').feature('frawe').set('notsolnum', 'auto');
model.study('std4').feature('frawe').set('outputmap', {});
model.study('std4').feature('frawe').setSolveFor('/physics/emw', true);
model.study('std4').label('Study 4, Linear Discretization with Adapted Mesh');
model.study('std4').setGenPlots(false);
model.study('std4').feature('frawe').set('plist', 'range(freq_min,100[kHz],freq_max)');
model.study('std4').feature('frawe').setEntry('outputmap', 'emw', 'selection');
model.study('std4').feature('frawe').setEntry('outputselectionmap', 'emw', 'sel1');

model.sol.create('sol17');

model.study('std4').feature('frawe').set('awefunc', {'sqrt(1-abs(comp1.emw.S11)^2)'});

model.sol('sol17').study('std4');
model.sol('sol17').create('st1', 'StudyStep');
model.sol('sol17').feature('st1').set('study', 'std4');
model.sol('sol17').feature('st1').set('studystep', 'frawe');
model.sol('sol17').create('v1', 'Variables');
model.sol('sol17').feature('v1').set('control', 'frawe');
model.sol('sol17').create('aw1', 'AWE');
model.sol('sol17').feature('aw1').set('pname', 'freq');
model.sol('sol17').feature('aw1').set('plist', 'range(freq_min,100[kHz],freq_max)');
model.sol('sol17').feature('aw1').set('awefunc', {'sqrt(1-abs(comp1.emw.S11)^2)'});
model.sol('sol17').feature('aw1').set('rtol', 0.01);
model.sol('sol17').feature('aw1').set('plot', 'off');
model.sol('sol17').feature('aw1').set('plotgroup', 'Default');
model.sol('sol17').feature('aw1').set('probesel', 'all');
model.sol('sol17').feature('aw1').set('probes', {});
model.sol('sol17').feature('aw1').feature('aDef').set('complexfun', true);
model.sol('sol17').feature('aw1').feature('aDef').set('cachepattern', false);
model.sol('sol17').feature('aw1').create('d1', 'Direct');
model.sol('sol17').feature('aw1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol17').feature('aw1').feature('d1').label('Suggested Direct Solver (emw)');
model.sol('sol17').feature('aw1').create('i1', 'Iterative');
model.sol('sol17').feature('aw1').feature('i1').set('linsolver', 'tfqmr');
model.sol('sol17').feature('aw1').feature('i1').set('prefuntype', 'right');
model.sol('sol17').feature('aw1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol17').feature('aw1').feature('i1').create('sv1', 'SORVector');
model.sol('sol17').feature('aw1').feature('i1').feature('sv1').set('iter', '1');
model.sol('sol17').feature('aw1').feature('i1').feature('sv1').set('relax', '1');
model.sol('sol17').feature('aw1').feature('i1').feature('sv1').set('seconditer', '3');
model.sol('sol17').feature('aw1').feature('d1').active(true);
model.sol('sol17').attach('std4');
model.sol('sol17').runAll;

model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('S-parameter, Asymptotic Waveform Evaluation on Adapted Mesh');
model.result('pg10').set('data', 'dset5');
model.result('pg10').set('titletype', 'manual');
model.result('pg10').set('title', 'Adaptive Frequency Sweep, Microstrip Patch Antenna');
model.result('pg10').set('legendpos', 'lowerleft');
model.result('pg10').create('glob1', 'Global');
model.result('pg10').feature('glob1').set('markerpos', 'datapoints');
model.result('pg10').feature('glob1').set('linewidth', 'preference');
model.result('pg10').feature('glob1').set('expr', {'emw.S11dB'});
model.result('pg10').feature('glob1').set('descr', {'S11'});
model.result('pg10').feature('glob1').set('legendmethod', 'manual');
model.result('pg10').feature('glob1').setIndex('legends', 'Adapted Mesh, Linear Discretization', 0);
model.result('pg10').run;
model.result('pg10').feature.copy('glob2', 'pg10/glob1');
model.result('pg10').run;
model.result('pg10').feature('glob2').set('data', 'dset2');
model.result('pg10').feature('glob2').setIndex('legends', 'Initial Mesh, Quadratic Discretization', 0);
model.result('pg10').run;

model.title('Microstrip Patch Antenna');

model.description('The microstrip patch antenna is attractive due to its low-profile conformal design, relatively low cost, and very narrow bandwidth. This example computes the reflected power and the far-field radiation pattern for a patch antenna with an inset feed.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;

model.label('microstrip_patch_antenna_inset.mph');

model.modelNode.label('Components');

out = model;
