function out = model
%
% znbr_flow_battery.m
%
% Model exported on May 26 2025, 21:26 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Battery_Design_Module/Flow_Batteries');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('tcd', 'TertiaryCurrentDistributionNernstPlanck', 'geom1', {'cBr2'});
model.physics('tcd').prop('SpeciesProperties').set('ChargeTransportModel', 'SupportingElectrolyte');
model.physics.create('ge', 'GlobalEquations', 'geom1');
model.physics('ge').model('comp1');
model.physics('ge').prop('EquationForm').set('form', 'Automatic');

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/tcd', true);
model.study('std1').feature('cdi').setSolveFor('/physics/ge', true);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('initialtime', '0');
model.study('std1').feature('time').set('solnum', 'auto');
model.study('std1').feature('time').set('notsolnum', 'auto');
model.study('std1').feature('time').set('outputmap', {});
model.study('std1').feature('time').setSolveFor('/physics/tcd', true);
model.study('std1').feature('time').setSolveFor('/physics/ge', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('A_cell', '3.2*3.2[cm^2]', 'Cell area');
model.param.set('H_cell', 'A_cell/D_cell', 'Cell height');
model.param.set('D_cell', '3.2[cm]', 'Cell depth (out of plane)');
model.param.set('W_cf', '3[mm]', 'Carbon felt width');
model.param.set('W_sep', '1[mm]', 'Separator width');
model.param.set('W_cell', 'W_cf*2+W_sep', 'Cell width');
model.param.set('U', '20[ml/min]/(D_cell*W_cf)', 'Flow velocity');
model.param.set('epsl_cf', '0.5', 'Carbon felt porosity');
model.param.set('epsl_sep', '0.5', 'Separator porosity');
model.param.set('sigmas_cf', '100[S/m]', 'Electric conductivity, carbon felt');
model.param.set('sigmal', '100[S/m]', 'Electrolyte conductivity');
model.param.set('T', '293.15[K]', 'Temperature');
model.param.set('c0_Br2', '1e-6[M]', 'Initial concentration of Br2 for initial voltage estimation');
model.param.set('c0_Br_m', '6[M]', 'Bromide ion concentration');
model.param.set('c0_Zn_2p', '4[M]', 'Zinc ion concentration');
model.param.set('Eeq_ref_Zn', '-0.76[V]+R_const*T/(2*F_const)*log(c0_Zn_2p/1[M])', 'Negative reference equilibrium potential');
model.param.set('Eeq_ref_Br', '1.09[V]+R_const*T/(2*F_const)*log((1[M]/c0_Br_m)^2)', 'Positive reference equilibrium potential');
model.param.set('E_cell_init', 'Eeq_ref_Br-Eeq_ref_Zn+R_const*T/(2*F_const)*log(c0_Br2/1[M])', 'Initial cell voltage');
model.param.set('D_Br2', '1.31e-9[m^2/s]', 'Bromine complex diffusivity');
model.param.set('i0_ref_Br', '0.1[A/m^2]*(c0_Br_m/1[M])^(2-alpha_a_Br)', 'Exchange current density, bromine reaction');
model.param.set('i0_ref_Zn', '10[A/m^2]*(c0_Zn_2p/1[M])^((alpha_a_Zn)/2)', 'Exchange current density, zinc reaction');
model.param.set('Av_cf', '1e4[m^2/m^3]', 'Active surface area, carbon felt');
model.param.set('alpha_a_Br', '1', 'Transfer coefficient, bromine reaction');
model.param.set('alpha_a_Zn', '0.5', 'Transfer coefficient, zinc reaction');
model.param.set('V_res', '80[cm^3]', 'Reservoir (tank) volume');
model.param.set('M_Zn', '65.39[g/mol]', 'Molar mass of Zn');
model.param.set('rho_Zn', '7133[kg/m^3]', 'Density of Zn(s)');
model.param.set('t_charge', '1800[s]', 'Charging time');
model.param.set('i_app', '40[mA/cm^2]', 'Applied current density');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'W_cell' 'H_cell'});
model.geom('geom1').feature('r1').setIndex('layer', 'W_cf', 0);
model.geom('geom1').feature('r1').setIndex('layer', 'W_sep', 1);
model.geom('geom1').feature('r1').set('layerright', true);
model.geom('geom1').feature('r1').set('layerbottom', false);
model.geom('geom1').runPre('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Separator');
model.selection('sel1').set([2]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Negative Carbon Felt');
model.selection('sel2').set([1]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Positive Carbon Felt');
model.selection('sel3').set([3]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Posolyte Inlet');
model.selection('sel4').geom(1);
model.selection('sel4').set([8]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Posolyte Outlet');
model.selection('sel5').geom(1);
model.selection('sel5').set([9]);

model.physics('tcd').create('sep1', 'Separator', 2);
model.physics('tcd').feature('sep1').selection.named('sel1');
model.physics('tcd').feature('sep1').set('D_cBr2', {'D_Br2' '0' '0' '0' 'D_Br2' '0' '0' '0' 'D_Br2'});
model.physics('tcd').feature('sep1').set('sigmal_mat', 'userdef');
model.physics('tcd').feature('sep1').set('sigmal', {'sigmal' '0' '0' '0' 'sigmal' '0' '0' '0' 'sigmal'});
model.physics('tcd').feature('sep1').set('epsl', 'epsl_sep');
model.physics('tcd').create('pce1', 'PorousElectrode', 2);
model.physics('tcd').feature('pce1').label('Porous Electrode - Negative');
model.physics('tcd').feature('pce1').selection.named('sel2');
model.physics('tcd').feature('pce1').set('D_cBr2', {'D_Br2' '0' '0' '0' 'D_Br2' '0' '0' '0' 'D_Br2'});
model.physics('tcd').feature('pce1').set('sigmal_mat', 'userdef');
model.physics('tcd').feature('pce1').set('sigmal', {'sigmal' '0' '0' '0' 'sigmal' '0' '0' '0' 'sigmal'});
model.physics('tcd').feature('pce1').set('sigma_mat', 'userdef');
model.physics('tcd').feature('pce1').set('sigma', {'sigmas_cf' '0' '0' '0' 'sigmas_cf' '0' '0' '0' 'sigmas_cf'});
model.physics('tcd').feature('pce1').set('epss', '1-epsl_cf');
model.physics('tcd').feature('pce1').set('epsl', 'epsl_cf');
model.physics('tcd').feature('pce1').feature('per1').set('nm', 2);
model.physics('tcd').feature('pce1').feature('per1').set('Eeq_ref', 'Eeq_ref_Zn');
model.physics('tcd').feature('pce1').feature('per1').set('i0_ref', 'i0_ref_Zn');
model.physics('tcd').feature('pce1').feature('per1').set('alphaa', 'alpha_a_Zn');
model.physics('tcd').feature('pce1').feature('per1').set('Av', 'Av_cf');
model.physics('tcd').create('pce2', 'PorousElectrode', 2);
model.physics('tcd').feature('pce2').label('Porous Electrode - Positive');
model.physics('tcd').feature('pce2').selection.named('sel3');
model.physics('tcd').feature('pce2').set('u', {'0' 'U' '0'});
model.physics('tcd').feature('pce2').set('D_cBr2', {'D_Br2' '0' '0' '0' 'D_Br2' '0' '0' '0' 'D_Br2'});
model.physics('tcd').feature('pce2').set('sigmal_mat', 'userdef');
model.physics('tcd').feature('pce2').set('sigmal', {'sigmal' '0' '0' '0' 'sigmal' '0' '0' '0' 'sigmal'});
model.physics('tcd').feature('pce2').set('sigma_mat', 'userdef');
model.physics('tcd').feature('pce2').set('sigma', {'sigmas_cf' '0' '0' '0' 'sigmas_cf' '0' '0' '0' 'sigmas_cf'});
model.physics('tcd').feature('pce2').set('epss', '1-epsl_cf');
model.physics('tcd').feature('pce2').set('epsl', 'epsl_cf');
model.physics('tcd').feature('pce2').feature('per1').set('nm', 2);
model.physics('tcd').feature('pce2').feature('per1').setIndex('Vi0', -1, 0);
model.physics('tcd').feature('pce2').feature('per1').set('Eeq_ref', 'Eeq_ref_Br');
model.physics('tcd').feature('pce2').feature('per1').set('i0_ref', 'i0_ref_Br');
model.physics('tcd').feature('pce2').feature('per1').set('alphaa', 'alpha_a_Br');
model.physics('tcd').feature('pce2').feature('per1').set('Av', 'Av_cf');
model.physics('tcd').create('egnd1', 'ElectricGround', 1);
model.physics('tcd').feature('egnd1').selection.set([1]);
model.physics('tcd').create('ec1', 'ElectrodeCurrent', 1);
model.physics('tcd').feature('ec1').selection.set([10]);
model.physics('tcd').feature('ec1').set('ElectronicCurrentType', 'AverageCurrentDensity');
model.physics('tcd').feature('ec1').set('Ias', 'i_app');
model.physics('tcd').feature('ec1').set('phis0init', 'E_cell_init');
model.physics('tcd').create('bei1', 'InternalElectrodeSurface', 1);
model.physics('tcd').feature('bei1').selection.set([4]);
model.physics('tcd').feature('bei1').feature('er1').set('nm', 2);
model.physics('tcd').feature('bei1').feature('er1').setIndex('Vi0', -1, 0);
model.physics('tcd').feature('bei1').feature('er1').set('Eeq_ref', 'Eeq_ref_Br');
model.physics('tcd').feature('bei1').feature('er1').set('ElectrodeKinetics', 'FastIrreversibleElectrodeReaction');
model.physics('ge').label('Global ODEs and DAEs - Tank Model');
model.physics('ge').feature('ge1').set('name', {'cBr2_tank'});
model.physics('ge').feature('ge1').set('equation', {'cBr2_tankt*V_res+(U*W_cf*cBr2_tank-intop_pos_out(tcd.tflux_cBr2y))*D_cell'});
model.physics('ge').feature('ge1').set('initialValueU', [0]);
model.physics('ge').feature('ge1').set('initialValueUt', [0]);
model.physics('ge').feature('ge1').set('description', {'Tank and inlet concentration'});

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').label('Integration - Posolyte Outlet');
model.cpl('intop1').set('opname', 'intop_pos_out');
model.cpl('intop1').selection.geom('geom1', 1);
model.cpl('intop1').selection.named('sel5');

model.physics('ge').feature('ge1').set('DependentVariableQuantity', 'concentration');
model.physics('ge').feature('ge1').set('CustomSourceTermUnit', '1');
model.physics('ge').feature('ge1').set('SourceTermQuantity', 'none');
model.physics('ge').feature('ge1').setIndex('CustomSourceTermUnit', 'mol/s', 0, 0);
model.physics('tcd').create('in1', 'Inflow', 1);
model.physics('tcd').feature('in1').selection.named('sel4');
model.physics('tcd').feature('in1').setIndex('c0', 'cBr2_tank', 0);
model.physics('tcd').feature('in1').set('BoundaryConditionType', 'FluxDanckwerts');
model.physics('tcd').create('out1', 'Outflow', 1);
model.physics('tcd').feature('out1').selection.named('sel5');
model.physics('tcd').feature('init1').set('initphil', '-Eeq_ref_Zn');
model.physics('tcd').create('init2', 'init', 2);
model.physics('tcd').feature('init2').selection.named('sel3');
model.physics('tcd').feature('init2').set('initphil', '-Eeq_ref_Zn');
model.physics('tcd').feature('init2').set('initphis', 'E_cell_init');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([2 3]);
model.mesh('mesh1').feature('map1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis1').set('elemcount', 10);
model.mesh('mesh1').feature('map1').feature('dis1').set('elemratio', 4);
model.mesh('mesh1').feature('map1').feature('dis1').set('symmetric', true);
model.mesh('mesh1').run('map1');
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([5 6 8 9]);
model.mesh('mesh1').run('map1');
model.mesh('mesh1').feature('map1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([1 10]);
model.mesh('mesh1').feature('map1').feature('dis3').set('numelem', 10);
model.mesh('mesh1').run;

model.probe.create('var1', 'GlobalVariable');
model.probe('var1').model('comp1');
model.probe('var1').set('expr', 'tcd.phis0_ec1');
model.probe('var1').set('descr', 'Electric potential on boundary');

model.study('std1').feature('cdi').set('initType', 'secondary');
model.study('std1').feature('cdi').setEntry('activate', 'ge', false);
model.study('std1').feature('time').set('tunit', 'h');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_tcd_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_tcd_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (tcd)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (tcd)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (tcd)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_tcd_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_tcd_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_phis').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.1,1)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {'var1'});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventout', true);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').label('Direct (Merged)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('Algebraic Multigrid (tcd)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_tcd_bei1_er1_iloc_lm'});
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('va1', 'Vanka');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('va1').set('vankavars', {'comp1_tcd_bei1_er1_iloc_lm'});
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').create('i2', 'Iterative');
model.sol('sol1').feature('t1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i2').label('Geometric Multigrid (tcd)');
model.sol('sol1').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_tcd_bei1_er1_iloc_lm'});
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').create('va1', 'Vanka');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('va1').set('vankavars', {'comp1_tcd_bei1_er1_iloc_lm'});
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');

model.probe('var1').genResult('none');

model.sol('sol1').runAll;

model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('unit', {''});
model.result('pg2').feature('glob1').set('expr', {'tcd.phis0_ec1'});
model.result('pg2').feature('glob1').set('descr', {'Electric potential on boundary'});
model.result('pg2').label('Boundary Electrode Potential with Respect to Ground (tcd)');
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'level1');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 11, 0);
model.result('pg3').label('Electrolyte Potential (tcd)');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'phil'});
model.result('pg3').create('arws1', 'ArrowSurface');
model.result('pg3').feature('arws1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg3').feature('arws1').set('arrowbase', 'center');
model.result('pg3').feature('arws1').set('color', 'gray');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 11, 0);
model.result('pg4').label('Electrolyte Current Density (tcd)');
model.result('pg4').create('arws1', 'ArrowSurface');
model.result('pg4').feature('arws1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg4').feature('arws1').set('arrowbase', 'center');
model.result('pg4').feature('arws1').set('color', 'gray');
model.result('pg4').feature('arws1').create('col1', 'Color');
model.result('pg4').feature('arws1').feature('col1').set('expr', 'root.comp1.tcd.IlMag');
model.result('pg4').create('line1', 'Line');
model.result('pg4').feature('line1').set('expr', {'abs(tcd.itot)'});
model.result('pg4').feature('line1').set('linetype', 'tube');
model.result('pg4').feature('line1').set('inherittubescale', false);
model.result('pg4').feature('line1').set('inheritplot', 'arws1');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 11, 0);
model.result('pg5').label('Electrode Potential with Respect to Ground (tcd)');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'phis'});
model.result('pg5').create('arws1', 'ArrowSurface');
model.result('pg5').feature('arws1').set('expr', {'tcd.Isx' 'tcd.Isy'});
model.result('pg5').feature('arws1').set('arrowbase', 'center');
model.result('pg5').feature('arws1').set('color', 'gray');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 11, 0);
model.result('pg6').label('Electrode Current Density (tcd)');
model.result('pg6').create('arws1', 'ArrowSurface');
model.result('pg6').feature('arws1').set('expr', {'tcd.Isx' 'tcd.Isy'});
model.result('pg6').feature('arws1').set('arrowbase', 'center');
model.result('pg6').feature('arws1').set('color', 'gray');
model.result('pg6').feature('arws1').create('col1', 'Color');
model.result('pg6').feature('arws1').feature('col1').set('expr', 'root.comp1.tcd.IsMag');
model.result('pg6').create('line1', 'Line');
model.result('pg6').feature('line1').set('expr', {'abs(tcd.itot)'});
model.result('pg6').feature('line1').set('linetype', 'tube');
model.result('pg6').feature('line1').set('inherittubescale', false);
model.result('pg6').feature('line1').set('inheritplot', 'arws1');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 11, 0);
model.result('pg7').label('Electrode Potential vs. Adjacent Reference (tcd)');
model.result('pg7').create('arws1', 'ArrowSurface');
model.result('pg7').feature('arws1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg7').feature('arws1').set('arrowbase', 'center');
model.result('pg7').feature('arws1').set('color', 'gray');
model.result('pg7').create('line1', 'Line');
model.result('pg7').feature('line1').set('expr', {'tcd.Evsref'});
model.result('pg7').feature('line1').set('linetype', 'tube');
model.result('pg7').feature('line1').set('inherittubescale', false);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'tcd.Evsref'});
model.result('pg7').feature('surf1').set('inheritplot', 'line1');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').set('data', 'dset1');
model.result('pg8').setIndex('looplevel', 11, 0);
model.result('pg8').label('Concentration (tcd)');
model.result('pg8').set('titletype', 'custom');
model.result('pg8').set('prefixintitle', '');
model.result('pg8').set('expressionintitle', false);
model.result('pg8').set('typeintitle', true);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'cBr2'});
model.result('pg8').create('str1', 'Streamline');
model.result('pg8').feature('str1').set('expr', {'tcd.tflux_cBr2x' 'tcd.tflux_cBr2y'});
model.result('pg8').feature('str1').set('posmethod', 'uniform');
model.result('pg8').feature('str1').set('recover', 'pprint');
model.result('pg8').feature('str1').set('pointtype', 'arrow');
model.result('pg8').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg8').feature('str1').set('color', 'gray');
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').set('data', 'dset1');
model.result.numerical('gev2').set('expr', {'cBr2_tank'});
model.result.numerical('gev2').set('descr', {'Tank and inlet concentration'});
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').set('data', 'dset1');
model.result('pg9').create('glob1', 'Global');
model.result('pg9').feature('glob1').set('expr', {'cBr2_tank'});
model.result('pg9').feature('glob1').set('descr', {'Tank and inlet concentration'});
model.result('pg2').run;
model.result('pg2').run;
model.result('pg8').run;
model.result('pg8').run;
model.result('pg9').run;
model.result('pg9').run;

model.physics('tcd').feature('pce1').setIndex('Species', 's1', 0, 0);
model.physics('tcd').feature('pce1').setIndex('rhos', 8960, 0, 0);
model.physics('tcd').feature('pce1').setIndex('Ms', 0.06355, 0, 0);
model.physics('tcd').feature('pce1').setIndex('Species', 's1', 0, 0);
model.physics('tcd').feature('pce1').setIndex('rhos', 8960, 0, 0);
model.physics('tcd').feature('pce1').setIndex('Ms', 0.06355, 0, 0);
model.physics('tcd').feature('pce1').setIndex('Species', 'Zn', 0, 0);
model.physics('tcd').feature('pce1').setIndex('rhos', 'rho_Zn', 0, 0);
model.physics('tcd').feature('pce1').setIndex('Ms', 'M_Zn', 0, 0);
model.physics('tcd').feature('pce1').feature('per1').setIndex('Vib', 1, 0, 0);

model.func.create('step1', 'Step');
model.func('step1').model('comp1');
model.func('step1').set('from', 1);
model.func('step1').set('to', -1);
model.func('step1').set('smooth', 1);

model.physics('tcd').feature('ec1').set('Ias', 'i_app*step1((t-t_charge)/1[s])');

model.sol.remove('sol1');
model.sol.remove('sol2');

model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result.remove('pg1');

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'A_cell', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm^2', 0);
model.study('std1').feature('param').setIndex('pname', 'A_cell', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm^2', 0);
model.study('std1').feature('param').setIndex('pname', 'i_app', 0);
model.study('std1').feature('param').setIndex('plistarr', '10 20 40', 0);
model.study('std1').feature('param').setIndex('punit', 'mA/cm^2', 0);
model.study('std1').feature('time').set('tlist', 'range(0,0.025,1)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_tcd_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_tcd_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (tcd)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (tcd)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (tcd)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_tcd_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_tcd_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_phis').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.025,1)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {'var1'});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventout', true);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').label('Direct (Merged)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('Algebraic Multigrid (tcd)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_tcd_bei1_er1_iloc_lm'});
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('va1', 'Vanka');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('va1').set('vankavars', {'comp1_tcd_bei1_er1_iloc_lm'});
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').create('i2', 'Iterative');
model.sol('sol1').feature('t1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i2').label('Geometric Multigrid (tcd)');
model.sol('sol1').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_tcd_bei1_er1_iloc_lm'});
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').create('va1', 'Vanka');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('va1').set('vankavars', {'comp1_tcd_bei1_er1_iloc_lm'});
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'i_app'});
model.batch('p1').set('plistarr', {'10 20 40'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {'var1'});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol('sol1').feature('t1').create('st1', 'StopCondition');
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', 'comp1.tcd.phis0_ec1<1.45[V]', 0);
model.sol('sol1').feature('t1').feature('st1').set('stopcondwarn', false);
model.sol.create('sol3');
model.sol('sol3').study('std1');
model.sol('sol3').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol3');

model.probe('var1').genResult('none');

model.batch('p1').run('compute');

model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset3');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('unit', {''});
model.result('pg2').feature('glob1').set('expr', {'tcd.phis0_ec1'});
model.result('pg2').feature('glob1').set('descr', {'Electric potential on boundary'});
model.result('pg2').label('Boundary Electrode Potential with Respect to Ground (tcd)');
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'level1');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 39, 0);
model.result('pg3').setIndex('looplevel', 3, 1);
model.result('pg3').label('Electrolyte Potential (tcd)');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'phil'});
model.result('pg3').create('arws1', 'ArrowSurface');
model.result('pg3').feature('arws1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg3').feature('arws1').set('arrowbase', 'center');
model.result('pg3').feature('arws1').set('color', 'gray');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 39, 0);
model.result('pg4').setIndex('looplevel', 3, 1);
model.result('pg4').label('Electrolyte Current Density (tcd)');
model.result('pg4').create('arws1', 'ArrowSurface');
model.result('pg4').feature('arws1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg4').feature('arws1').set('arrowbase', 'center');
model.result('pg4').feature('arws1').set('color', 'gray');
model.result('pg4').feature('arws1').create('col1', 'Color');
model.result('pg4').feature('arws1').feature('col1').set('expr', 'root.comp1.tcd.IlMag');
model.result('pg4').create('line1', 'Line');
model.result('pg4').feature('line1').set('expr', {'abs(tcd.itot)'});
model.result('pg4').feature('line1').set('linetype', 'tube');
model.result('pg4').feature('line1').set('inherittubescale', false);
model.result('pg4').feature('line1').set('inheritplot', 'arws1');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 39, 0);
model.result('pg5').setIndex('looplevel', 3, 1);
model.result('pg5').label('Electrode Potential with Respect to Ground (tcd)');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'phis'});
model.result('pg5').create('arws1', 'ArrowSurface');
model.result('pg5').feature('arws1').set('expr', {'tcd.Isx' 'tcd.Isy'});
model.result('pg5').feature('arws1').set('arrowbase', 'center');
model.result('pg5').feature('arws1').set('color', 'gray');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'dset3');
model.result('pg6').setIndex('looplevel', 39, 0);
model.result('pg6').setIndex('looplevel', 3, 1);
model.result('pg6').label('Electrode Current Density (tcd)');
model.result('pg6').create('arws1', 'ArrowSurface');
model.result('pg6').feature('arws1').set('expr', {'tcd.Isx' 'tcd.Isy'});
model.result('pg6').feature('arws1').set('arrowbase', 'center');
model.result('pg6').feature('arws1').set('color', 'gray');
model.result('pg6').feature('arws1').create('col1', 'Color');
model.result('pg6').feature('arws1').feature('col1').set('expr', 'root.comp1.tcd.IsMag');
model.result('pg6').create('line1', 'Line');
model.result('pg6').feature('line1').set('expr', {'abs(tcd.itot)'});
model.result('pg6').feature('line1').set('linetype', 'tube');
model.result('pg6').feature('line1').set('inherittubescale', false);
model.result('pg6').feature('line1').set('inheritplot', 'arws1');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset3');
model.result('pg7').setIndex('looplevel', 39, 0);
model.result('pg7').setIndex('looplevel', 3, 1);
model.result('pg7').label('Electrode Potential vs. Adjacent Reference (tcd)');
model.result('pg7').create('arws1', 'ArrowSurface');
model.result('pg7').feature('arws1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg7').feature('arws1').set('arrowbase', 'center');
model.result('pg7').feature('arws1').set('color', 'gray');
model.result('pg7').create('line1', 'Line');
model.result('pg7').feature('line1').set('expr', {'tcd.Evsref'});
model.result('pg7').feature('line1').set('linetype', 'tube');
model.result('pg7').feature('line1').set('inherittubescale', false);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'tcd.Evsref'});
model.result('pg7').feature('surf1').set('inheritplot', 'line1');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').set('data', 'dset3');
model.result('pg8').setIndex('looplevel', 39, 0);
model.result('pg8').setIndex('looplevel', 3, 1);
model.result('pg8').label('Concentration (tcd)');
model.result('pg8').set('titletype', 'custom');
model.result('pg8').set('prefixintitle', '');
model.result('pg8').set('expressionintitle', false);
model.result('pg8').set('typeintitle', true);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'cBr2'});
model.result('pg8').create('str1', 'Streamline');
model.result('pg8').feature('str1').set('expr', {'tcd.tflux_cBr2x' 'tcd.tflux_cBr2y'});
model.result('pg8').feature('str1').set('posmethod', 'uniform');
model.result('pg8').feature('str1').set('recover', 'pprint');
model.result('pg8').feature('str1').set('pointtype', 'arrow');
model.result('pg8').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg8').feature('str1').set('color', 'gray');
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').set('data', 'dset3');
model.result.numerical('gev2').set('expr', {'cBr2_tank'});
model.result.numerical('gev2').set('descr', {'Tank and inlet concentration'});
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').set('data', 'dset3');
model.result('pg9').create('glob1', 'Global');
model.result('pg9').feature('glob1').set('expr', {'cBr2_tank'});
model.result('pg9').feature('glob1').set('descr', {'Tank and inlet concentration'});
model.result('pg2').run;
model.result('pg2').label('Cell Voltage vs Time');
model.result('pg2').set('titletype', 'none');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Cell voltage (V)');
model.result('pg2').run;
model.result('pg2').feature('glob1').set('legendmethod', 'evaluated');
model.result('pg2').feature('glob1').set('legendpattern', 'i<sub>app</sub>=eval(i_app/10) mA/cm<sup>2</sup>');
model.result('pg2').run;
model.result('pg8').run;
model.result('pg8').label('Bromine Concentration');
model.result('pg8').set('typeintitle', false);
model.result('pg8').run;
model.result('pg8').feature('str1').set('titletype', 'none');
model.result('pg8').feature('str1').set('posmethod', 'selection');
model.result('pg8').feature('str1').selection.named('sel4');
model.result('pg8').feature('str1').set('selnumber', 5);
model.result('pg8').run;
model.result('pg8').set('looplevel', [21 3]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [39 3]);
model.result('pg8').run;
model.result('pg9').run;
model.result('pg9').label('Tank concentration');
model.result('pg9').run;
model.result('pg9').feature('glob1').set('legendmethod', 'evaluated');
model.result('pg9').feature('glob1').set('legendpattern', 'i<sub>app</sub>=eval(i_app/10) mA/cm<sup>2</sup>');
model.result('pg9').run;
model.result('pg9').run;
model.result('pg9').set('titletype', 'none');
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').run;
model.result('pg10').label('Deposited Zinc Volume Fraction');
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', 'tcd.deltaeps_pce1_Zn');
model.result('pg10').feature('surf1').set('descr', 'Volume fraction change');
model.result('pg10').run;
model.result('pg10').set('looplevel', [21]);
model.result('pg10').set('legendactive', true);
model.result('pg10').set('legendnotation', 'engineering');
model.result('pg10').run;

model.title(['Zinc' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Bromine Redox Flow Battery']);

model.description(['The zinc' native2unicode(hex2dec({'20' '13'}), 'unicode') 'bromine redox flow battery is an electrochemical energy storage technology suitable for stationary applications.' newline  newline 'Compared to other flow battery chemistries, the Zn-Br cell potentially features lower cost, higher energy densities and better energy efficiencies.' newline  newline 'In the cell during charge, zinc metal is deposited on the negative electrode, whereas bromine is produced on the positive electrode.' newline  newline 'This tutorial models the cell voltage, as well as the bromine and zinc production-consumption, during a charge-discharge cycle.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;

model.label('znbr_flow_battery.mph');

model.modelNode.label('Components');

out = model;
