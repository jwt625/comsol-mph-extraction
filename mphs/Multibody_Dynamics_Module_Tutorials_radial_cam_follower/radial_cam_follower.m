function out = model
%
% radial_cam_follower.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/mbd', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('rf', '(0.025/3)[m]', 'Follower radius');
model.param.set('k', '5[kN/m]', 'Spring stiffness');
model.param.set('N', '1200', 'Cam shaft RPM');
model.param.set('omega', '(2*pi*N/60)[rad/s]', 'Cam shaft angular speed');
model.param.set('T', '2*pi/omega', 'Time period');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'radial_cam_follower.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('createpairs', false);
model.geom('geom1').run('fin');

model.func.create('step1', 'Step');
model.func('step1').set('location', 'T/40');
model.func('step1').set('smooth', 'T/20');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(2);
model.selection('sel1').set([89]);
model.selection('sel1').set('groupcontang', true);
model.selection('sel1').label('Cam Surface');
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').set('entitydim', 2);
model.selection('adj1').set('input', {'sel1'});
model.selection('adj1').set('outputdim', 1);
model.selection('adj1').label('Cam Surface: Adjacent Edges');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.physics('mbd').prop('ShapeProperty').set('order_displacement', 2);
model.physics('mbd').create('rd1', 'RigidDomain', 3);
model.physics('mbd').feature('rd1').label('Rigid Material: Cam');
model.physics('mbd').feature('rd1').selection.set([5]);
model.physics('mbd').create('rd2', 'RigidDomain', 3);
model.physics('mbd').feature('rd2').label('Rigid Material: Follower');
model.physics('mbd').feature('rd2').selection.set([7]);
model.physics('mbd').create('rd3', 'RigidDomain', 3);
model.physics('mbd').feature('rd3').label('Rigid Material: Rocker Arm');
model.physics('mbd').feature('rd3').selection.set([3]);
model.physics('mbd').create('rd4', 'RigidDomain', 3);
model.physics('mbd').feature('rd4').label('Rigid Material: Valve');
model.physics('mbd').feature('rd4').selection.set([1]);
model.physics('mbd').create('rd5', 'RigidDomain', 3);
model.physics('mbd').feature('rd5').label('Rigid Material: Follower Guide');
model.physics('mbd').feature('rd5').selection.set([6]);
model.physics('mbd').create('rd6', 'RigidDomain', 3);
model.physics('mbd').feature('rd6').label('Rigid Material: Pin');
model.physics('mbd').feature('rd6').selection.set([4]);
model.physics('mbd').create('rd7', 'RigidDomain', 3);
model.physics('mbd').feature('rd7').label('Rigid Material: Valve Guide');
model.physics('mbd').feature('rd7').selection.set([2]);
model.physics('mbd').feature('rd5').create('fix1', 'FixedConstraint', -1);
model.physics('mbd').feature('rd6').create('fix1', 'FixedConstraint', -1);
model.physics('mbd').feature('rd7').create('fix1', 'FixedConstraint', -1);
model.physics('mbd').create('cfc1', 'CamFollower', -1);
model.physics('mbd').feature('cfc1').selection('bndCam').named('sel1');
model.physics('mbd').feature('cfc1').selection('PntFollower').set([148 164]);
model.physics('mbd').feature('cfc1').set('X_off_bnd', 'rf');
model.physics('mbd').feature('cfc1').set('ConnectionForce', 'ComputedUsingWeakConstraints');
model.physics('mbd').create('hgj1', 'HingeJoint', -1);
model.physics('mbd').feature('hgj1').set('Source', 'fixed');
model.physics('mbd').feature('hgj1').set('Destination', 'rd1');
model.physics('mbd').feature('hgj1').set('EntityLevel', 'Point');
model.physics('mbd').feature('hgj1').set('e', [0 1 0]);
model.physics('mbd').feature('hgj1').feature('cjp1').selection.set([108 128]);
model.physics('mbd').feature.duplicate('hgj2', 'hgj1');
model.physics('mbd').feature('hgj2').set('Source', 'rd6');
model.physics('mbd').feature('hgj2').set('Destination', 'rd3');
model.physics('mbd').feature('hgj2').feature('cjp1').selection.set([94 100]);
model.physics('mbd').create('prj1', 'PrismaticJoint', -1);
model.physics('mbd').feature('prj1').set('Source', 'rd5');
model.physics('mbd').feature('prj1').set('Destination', 'rd2');
model.physics('mbd').feature('prj1').set('EntityLevel', 'Point');
model.physics('mbd').feature('prj1').set('e', [0 0 1]);
model.physics('mbd').feature('prj1').feature('cjp1').selection.set([133 147]);
model.physics('mbd').feature.duplicate('prj2', 'prj1');
model.physics('mbd').feature('prj2').set('Source', 'rd7');
model.physics('mbd').feature('prj2').set('Destination', 'rd4');
model.physics('mbd').feature('prj2').feature('cjp1').selection.set([35 49]);
model.physics('mbd').create('slj1', 'SlotJoint', -1);
model.physics('mbd').feature('slj1').set('Source', 'rd3');
model.physics('mbd').feature('slj1').set('Destination', 'rd2');
model.physics('mbd').feature('slj1').set('EntityLevel', 'Point');
model.physics('mbd').feature('slj1').feature('cjp1').selection.set([151 162]);
model.physics('mbd').feature.duplicate('slj2', 'slj1');
model.physics('mbd').feature('slj2').set('Destination', 'rd4');
model.physics('mbd').feature('slj2').feature('cjp1').selection.set([58 62]);
model.physics('mbd').feature('hgj1').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('hgj1').feature('pm1').set('PrescribedMotionThroughRotational', 'AngularVelocity');
model.physics('mbd').feature('hgj1').feature('pm1').set('omegap', 'omega*step1(t)');
model.physics('mbd').feature('hgj1').feature('pm1').set('WeakConstraints', true);
model.physics('mbd').feature('prj2').create('sd1', 'SpringAndDamper', -1);
model.physics('mbd').feature('prj2').feature('sd1').set('k_u', 'k');

model.nodeGroup.create('grp1', 'Physics', 'mbd');
model.nodeGroup('grp1').placeAfter('init1');
model.nodeGroup('grp1').add('rd1');
model.nodeGroup('grp1').add('rd2');
model.nodeGroup('grp1').add('rd3');
model.nodeGroup('grp1').add('rd4');
model.nodeGroup('grp1').add('rd5');
model.nodeGroup('grp1').add('rd6');
model.nodeGroup('grp1').add('rd7');
model.nodeGroup('grp1').label('Rigid Materials');
model.nodeGroup.create('grp2', 'Physics', 'mbd');
model.nodeGroup('grp2').placeAfter('cfc1');
model.nodeGroup('grp2').add('hgj1');
model.nodeGroup('grp2').add('hgj2');
model.nodeGroup('grp2').label('Hinge Joints');
model.nodeGroup.create('grp3', 'Physics', 'mbd');
model.nodeGroup('grp3').placeAfter('cfc1');
model.nodeGroup('grp3').add('prj1');
model.nodeGroup('grp3').add('prj2');
model.nodeGroup('grp3').label('Prismatic Joints');
model.nodeGroup.create('grp4', 'Physics', 'mbd');
model.nodeGroup('grp4').placeAfter('cfc1');
model.nodeGroup('grp4').add('slj1');
model.nodeGroup('grp4').add('slj2');
model.nodeGroup('grp4').label('Slot Joints');

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.named('adj1');
model.mesh('mesh1').feature('edg1').create('size1', 'Size');
model.mesh('mesh1').feature('edg1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('edg1').feature('size1').set('hcurveactive', true);
model.mesh('mesh1').feature('edg1').feature('size1').set('hcurve', 0.015);
model.mesh('mesh1').feature('edg1').feature('size1').set('hgradactive', true);
model.mesh('mesh1').feature('edg1').feature('size1').set('hgrad', 1.1);
model.mesh('mesh1').run('edg1');
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.named('sel1');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([199]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 3);
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('size').set('hauto', 2);
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tlist', 'range(0,T/400,T/2)');
model.study('std1').feature('time').set('useparam', true);
model.study('std1').feature('time').setIndex('pname', 'rf', 0);
model.study('std1').feature('time').setIndex('plistarr', '', 0);
model.study('std1').feature('time').setIndex('punit', 'm', 0);
model.study('std1').feature('time').setIndex('pname', 'rf', 0);
model.study('std1').feature('time').setIndex('plistarr', '', 0);
model.study('std1').feature('time').setIndex('punit', 'm', 0);
model.study('std1').feature('time').setIndex('pname', 'k', 0);
model.study('std1').feature('time').setIndex('plistarr', '5 10 20 30', 0);
model.study('std1').feature('time').setIndex('punit', 'kN/m', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj1_pm1_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_cfc1_F').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.002478617732437285');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj1_pm1_RM').set('scaleval', '1e8*(0.1*0.24786177324372852)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scaleval', '0.002478617732437285');
model.sol('sol1').feature('v1').feature('comp1_mbd_cfc1_F').set('scaleval', '1e8*(0.1*0.24786177324372852)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.24786177324372852');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,T/400,T/2)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').create('tp1', 'TimeParametric');
model.sol('sol1').feature('t1').feature.remove('tpDef');
model.sol('sol1').feature('t1').feature('tp1').set('control', 'time');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('v1').feature('comp1_mbd_cfc1_F').set('scaleval', '1e9');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj1_pm1_RM').set('scaleval', '1e7');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Displacement (mbd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 201, 0);
model.result('pg1').setIndex('looplevel', 4, 1);
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (mbd)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 201, 0);
model.result('pg2').setIndex('looplevel', 4, 1);
model.result('pg2').set('defaultPlotID', 'velocity');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').label('Volume');
model.result('pg2').feature('vol1').set('expr', 'mod(dom,10)');
model.result('pg2').feature('vol1').set('unit', '1');
model.result('pg2').feature('vol1').set('colortable', 'Cyclic');
model.result('pg2').feature('vol1').set('colorlegend', false);
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg2').feature('vol1').feature.create('def1', 'Deform');
model.result('pg2').feature('vol1').feature('def1').label('Deformation');
model.result('pg2').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg2').feature.create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').label('Arrow Line');
model.result('pg2').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY' 'mbd.u_tZ'});
model.result('pg2').feature('arwl1').set('placement', 'elements');
model.result('pg2').feature('arwl1').set('data', 'parent');
model.result('pg2').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg2').feature('arwl1').feature('def1').label('Deformation');
model.result('pg2').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg1').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Follower Velocity');
model.result('pg3').set('titletype', 'label');
model.result('pg3').setIndex('looplevelinput', 'first', 1);
model.result('pg3').set('twoyaxes', true);
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').set('expr', {'mbd.prj1.u'});
model.result('pg3').feature('glob1').set('descr', {'Relative displacement'});
model.result('pg3').feature('glob1').set('unit', {'m'});
model.result('pg3').feature('glob1').set('plotonsecyaxis', true);
model.result('pg3').feature('glob1').set('xdata', 'expr');
model.result('pg3').feature('glob1').set('xdataexpr', 'mbd.hgj1.th');
model.result('pg3').feature('glob1').set('xdatadescr', 'Relative rotation');
model.result('pg3').feature('glob1').set('xdataunit', [native2unicode(hex2dec({'00' 'b0'}), 'unicode') ]);
model.result('pg3').feature('glob1').set('xdatadescractive', true);
model.result('pg3').feature('glob1').set('xdatadescr', 'Cam rotation');
model.result('pg3').feature('glob1').set('linestyle', 'dashed');
model.result('pg3').feature('glob1').set('linewidth', 2);
model.result('pg3').feature('glob1').set('legendmethod', 'manual');
model.result('pg3').feature('glob1').setIndex('legends', 'Displacement', 0);
model.result('pg3').feature.duplicate('glob2', 'glob1');
model.result('pg3').run;
model.result('pg3').feature('glob2').set('expr', {'mbd.prj1.u_t'});
model.result('pg3').feature('glob2').set('descr', {'Relative velocity'});
model.result('pg3').feature('glob2').set('unit', {'m/s'});
model.result('pg3').feature('glob2').set('plotonsecyaxis', false);
model.result('pg3').feature('glob2').set('linestyle', 'solid');
model.result('pg3').feature('glob2').setIndex('legends', 'Velocity', 0);
model.result('pg3').run;
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Follower Acceleration');
model.result('pg4').set('legendpos', 'upperleft');
model.result('pg4').run;
model.result('pg4').feature('glob2').set('expr', {'mbd.prj1.u_tt'});
model.result('pg4').feature('glob2').set('descr', {'Relative acceleration'});
model.result('pg4').feature('glob2').set('unit', {'m/s^2'});
model.result('pg4').feature('glob2').setIndex('legends', 'Acceleration', 0);
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Connection Force');
model.result('pg5').set('titletype', 'label');
model.result('pg5').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg5').setIndex('looplevelindices', 'range(25,1,201)', 0);
model.result('pg5').set('legendpos', 'upperleft');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').set('expr', {'mbd.cfc1.F'});
model.result('pg5').feature('glob1').set('descr', {'Connection force'});
model.result('pg5').feature('glob1').set('unit', {'N'});
model.result('pg5').feature('glob1').set('xdata', 'expr');
model.result('pg5').feature('glob1').set('xdataexpr', 'mbd.hgj1.th');
model.result('pg5').feature('glob1').set('xdatadescr', 'Relative rotation');
model.result('pg5').feature('glob1').set('xdataunit', [native2unicode(hex2dec({'00' 'b0'}), 'unicode') ]);
model.result('pg5').feature('glob1').set('xdatadescractive', true);
model.result('pg5').feature('glob1').set('xdatadescr', 'Cam rotation');
model.result('pg5').feature('glob1').set('linewidth', 2);
model.result('pg5').feature('glob1').set('autodescr', false);
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Required Torque');
model.result('pg6').set('legendpos', 'upperright');
model.result('pg6').run;
model.result('pg6').feature('glob1').set('expr', {'mbd.hgj1.pm1.RM'});
model.result('pg6').feature('glob1').set('descr', {'Reaction moment'});
model.result('pg6').feature('glob1').set('unit', {'N*m'});
model.result('pg6').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').set('maxframes', 50);
model.result('pg2').run;

model.title('Modeling a Radial Cam Based Valve Opening Mechanism');

model.description(['In this example, a spring-loaded valve opening mechanism having a rocker arm and a radial cam is studied. All the components of the system are modeled as rigid, and are connected through prismatic, hinge, and slot joints. The cam-follower connection as well as other joint connections are modeled using built-in nodes of the Multibody Dynamics interface.' newline  newline 'A transient analysis is performed for various spring stiffness values. The output from the model includes, among many things, the follower velocity, follower acceleration, cam-follower connection force, and the required torque.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('radial_cam_follower.mph');

model.modelNode.label('Components');

out = model;
