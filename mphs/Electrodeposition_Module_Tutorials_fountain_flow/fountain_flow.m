function out = model
%
% fountain_flow.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Electrodeposition_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('tds', 'DilutedSpecies', 'geom1', {'c'});
model.physics.create('cd', 'SecondaryCurrentDistribution', 'geom1');
model.physics('cd').model('comp1');
model.physics.create('els', 'ElectrodeShell', 'geom1');
model.physics('els').model('comp1');
model.physics('els').field('electricpotential').field('phis_wafer');
model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/tds', true);
model.study('std1').feature('stat').setSolveFor('/physics/cd', true);
model.study('std1').feature('stat').setSolveFor('/physics/els', true);
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('h_outlet', '3[mm]', 'Outlet height');
model.param.set('d_cell', '298[mm]', 'Cell diameter');
model.param.set('h_cell', '200[mm]', 'Plating cell height');
model.param.set('d_wafer', '300[mm]', 'Wafer diameter');
model.param.set('h_gap', '6[mm]', 'Distance gap between cell and wafer');
model.param.set('flow_in', '20[l/min]', 'Inflow');
model.param.set('a_in', '(d_cell/2)^2*pi', 'Inflow area');
model.param.set('v_in', 'flow_in/a_in', 'Inlet velocity');
model.param.set('RPM', '30', 'Revolutions per minute');
model.param.set('omega', 'RPM*2*pi[rad/min]', 'Angular velocity');
model.param.set('D_Cu', '5e-6[cm^2/s]', 'Diffusion coefficient of Cu ions');
model.param.set('c_bulk', '0.3[mol/l]', 'Bulk concentration');
model.param.set('sigma', '0.5[S/cm]', 'Electrolyte conductivity');
model.param.set('i0', '10[A/m^2]', 'Exchange current density');
model.param.set('t_seed', '75[nm]', 'Seed layer thickness');
model.param.set('r_seed', '1.7e-6[ohm*cm]', 'Resistivity of Cu seed layer');
model.param.set('j_avg_wafer', '5[mA/cm^2]', 'Average current density on wafer');
model.param.set('a_wafer', '(d_wafer/2)^2*pi', 'Wafer area');
model.param.set('I_tot', 'j_avg_wafer*a_wafer', 'Total cell current');
model.param.set('mu', '0.001[Pa*s]', 'Electrolyte viscosity');
model.param.set('rho', '1100[kg/m^3]', 'Electrolyte density');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'d_cell/2' 'h_cell'});
model.geom('geom1').feature('r1').set('pos', {'0' '-h_cell'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'d_wafer/2' 'h_gap'});
model.geom('geom1').run('r2');
model.geom('geom1').create('pt1', 'Point');
model.geom('geom1').feature('pt1').setIndex('p', 'd_wafer/2', 0);
model.geom('geom1').feature('pt1').setIndex('p', 'h_outlet', 1);
model.geom('geom1').runPre('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').geom(1);
model.selection('sel1').set([5]);
model.selection('sel1').label('Cathode');
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').geom(1);
model.selection('sel2').set([2]);
model.selection('sel2').label('Inlet');
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').geom(1);
model.selection('sel3').set([8]);
model.selection('sel3').label('Outlet');
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').geom(1);
model.selection('sel4').set([5 9]);
model.selection('sel4').label('Rotating wall');

model.physics('spf').prop('PhysicalModelProperty').set('SwirlFlow', true);
model.physics('spf').feature('fp1').set('rho_mat', 'userdef');
model.physics('spf').feature('fp1').set('rho', 'rho');
model.physics('spf').feature('fp1').set('mu_mat', 'userdef');
model.physics('spf').feature('fp1').set('mu', 'mu');
model.physics('spf').create('inl1', 'InletBoundary', 1);
model.physics('spf').feature('inl1').selection.named('sel2');
model.physics('spf').feature('inl1').set('U0in', 'v_in');
model.physics('spf').create('out1', 'OutletBoundary', 1);
model.physics('spf').feature('out1').selection.named('sel3');
model.physics('spf').create('wallbc2', 'WallBC', 1);
model.physics('spf').feature('wallbc2').selection.set([5 9]);
model.physics('spf').feature('wallbc2').set('SlidingWall', true);
model.physics('spf').feature('wallbc2').set('vw', 'omega*r');
model.physics('spf').feature('init1').set('u_init', {'0' '0' 'v_in'});
model.physics('spf').feature('init1').set('p_init', 1);
model.physics('cd').feature('ice1').set('sigmal_mat', 'userdef');
model.physics('cd').feature('ice1').set('sigmal', {'sigma' '0' '0' '0' 'sigma' '0' '0' '0' 'sigma'});
model.physics('cd').create('es1', 'ElectrodeSurface', 1);
model.physics('cd').feature('es1').selection.named('sel1');
model.physics('cd').feature('es1').set('phisext0', 'phis_wafer');
model.physics('cd').feature('es1').feature('er1').set('Eeq_mat', 'NernstEquation');
model.physics('cd').feature('es1').feature('er1').set('CONernst', 'c/c_bulk');
model.physics('cd').feature('es1').feature('er1').set('nm', 2);
model.physics('cd').feature('es1').feature('er1').set('ElectrodeKinetics', 'ButlerVolmer');
model.physics('cd').feature('es1').feature('er1').set('i0Type', 'FromNernstEquation');
model.physics('cd').feature('es1').feature('er1').set('i0_ref', 'i0');
model.physics('cd').feature('es1').feature('er1').set('alphaa', 1.5);
model.physics('cd').create('ic1', 'ElectrolyteCurrent', 1);
model.physics('cd').feature('ic1').selection.named('sel2');
model.physics('cd').feature('ic1').set('Itl', 'I_tot');
model.physics('tds').selection.set([2]);
model.physics('tds').prop('TransportMechanism').set('Migration', true);
model.physics('tds').feature('sp1').setIndex('z', 2, 0);
model.physics('tds').feature('cdm1').set('V', 'phil');
model.physics('tds').feature('cdm1').set('D_c', {'D_Cu' '0' '0' '0' 'D_Cu' '0' '0' '0' 'D_Cu'});
model.physics('tds').feature('init1').setIndex('initc', 'c_bulk', 0);
model.physics('tds').create('in1', 'Inflow', 1);
model.physics('tds').feature('in1').selection.set([4]);
model.physics('tds').feature('in1').setIndex('c0', 'c_bulk', 0);
model.physics('tds').create('out1', 'Outflow', 1);
model.physics('tds').feature('out1').selection.named('sel3');
model.physics('tds').create('eeic1', 'ElectrodeElectrolyteInterfaceCoupling', 1);
model.physics('tds').feature('eeic1').selection.named('sel1');
model.physics('tds').feature('eeic1').feature('rc1').set('iloc_src', 'root.comp1.cd.es1.er1.iloc');
model.physics('tds').feature('eeic1').feature('rc1').set('nm', 2);
model.physics('tds').feature('eeic1').feature('rc1').setIndex('Vib', -1, 0);
model.physics('els').selection.named('sel1');
model.physics('els').feature('ece1').set('s', 't_seed');
model.physics('els').feature('ece1').set('sigma_mat', 'userdef');
model.physics('els').feature('ece1').set('sigma', {'1/r_seed' '0' '0' '0' '1/r_seed' '0' '0' '0' '1/r_seed'});
model.physics('els').create('gnd1', 'Ground', 0);
model.physics('els').feature('gnd1').selection.set([8]);
model.physics('els').create('ncd1', 'NormalCurrentDensity', 1);
model.physics('els').feature('ncd1').selection.named('sel1');
model.physics('els').feature('ncd1').set('in_src', 'root.comp1.cd.es1.er1.iloc');

model.multiphysics.create('rfd1', 'ReactingFlowDS', 'geom1', 2);

model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size').set('table', 'cfd');
model.mesh('mesh1').feature('size').set('hauto', 6);
model.mesh('mesh1').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh1').feature('size1').selection.named('sel4');
model.mesh('mesh1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('size1').set('hmax', '1.5e-4');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(2);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([5 6 7 9]);
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 5);
model.mesh('mesh1').feature('bl1').feature('blp').set('blhminfact', 5);
model.mesh('mesh1').run;

model.physics('tds').prop('ShapeProperty').set('order_concentration', 2);
model.physics('cd').prop('ShapeProperty').set('order_electricpotentialionicphase', 2);
model.physics('spf').prop('ShapeProperty').set('order_fluid', 2);

model.study('std1').feature('stat').setEntry('activate', 'tds', false);
model.study('std1').feature('stat').setEntry('activate', 'cd', false);
model.study('std1').feature('stat').setEntry('activate', 'els', false);
model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat2').setEntry('activate', 'spf', false);
model.study('std1').feature('stat2').set('useparam', true);
model.study('std1').feature('stat2').set('sweeptype', 'filled');
model.study('std1').feature('stat2').setIndex('pname', 'h_outlet', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', 'm', 0);
model.study('std1').feature('stat2').setIndex('pname', 'h_outlet', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', 'm', 0);
model.study('std1').feature('stat2').setIndex('pname', 'd_cell', 1);
model.study('std1').feature('stat2').setIndex('plistarr', '', 1);
model.study('std1').feature('stat2').setIndex('punit', 'm', 1);
model.study('std1').feature('stat2').setIndex('pname', 'd_cell', 1);
model.study('std1').feature('stat2').setIndex('plistarr', '', 1);
model.study('std1').feature('stat2').setIndex('punit', 'm', 1);
model.study('std1').feature('stat2').setIndex('pname', 'j_avg_wafer', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '0.5[A/dm^2] 2[A/dm^2]', 0);
model.study('std1').feature('stat2').setIndex('pname', 't_seed', 1);
model.study('std1').feature('stat2').setIndex('plistarr', '75[nm] 150[nm]', 1);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat2');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_cd_ic1_phil0').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_cd_ic1_phil0').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat2');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-4);
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s2').feature('p1').set('control', 'stat2');
model.sol('sol1').feature('s2').set('control', 'stat2');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct (cd) (Merged)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('Algebraic Multigrid (cd)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Geometric Multigrid (cd)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i3', 'Iterative');
model.sol('sol1').feature('s2').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i3').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i3').set('rhob', 400);
model.sol('sol1').feature('s2').feature('i3').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i3').label('AMG, concentrations (tds)');
model.sol('sol1').feature('s2').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 2, 0);
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').label('Concentration (tds)');
model.result('pg1').set('titletype', 'custom');
model.result('pg1').set('prefixintitle', '');
model.result('pg1').set('expressionintitle', false);
model.result('pg1').set('typeintitle', true);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'c'});
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').set('expr', {'tds.tflux_cr' 'tds.tflux_cz'});
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('recover', 'pprint');
model.result('pg1').feature('str1').set('pointtype', 'arrow');
model.result('pg1').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg1').feature('str1').set('color', 'gray');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'dset1');
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('hasspacevars', false);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'rev1');
model.result('pg2').setIndex('looplevel', 2, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').label('Concentration, 3D (tds)');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'c'});
model.result('pg2').set('titletype', 'custom');
model.result('pg2').set('typeintitle', false);
model.result('pg2').set('prefixintitle', '');
model.result('pg2').set('expressionintitle', false);
model.result.dataset.create('rev2', 'Revolve2D');
model.result.dataset('rev2').set('data', 'dset1');
model.result.dataset('rev2').set('revangle', 225);
model.result.dataset('rev2').set('startangle', -90);
model.result.dataset('rev2').set('hasspacevars', true);
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 2, 0);
model.result('pg3').setIndex('looplevel', 2, 1);
model.result('pg3').label('Electrolyte Potential (cd)');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'phil'});
model.result('pg3').create('str1', 'Streamline');
model.result('pg3').feature('str1').set('expr', {'cd.Ilr' 'cd.Ilz'});
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('recover', 'pprint');
model.result('pg3').feature('str1').set('pointtype', 'arrow');
model.result('pg3').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('str1').set('color', 'gray');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'rev2');
model.result('pg4').setIndex('looplevel', 2, 0);
model.result('pg4').setIndex('looplevel', 2, 1);
model.result('pg4').label('Electrolyte Potential, 3D (cd)');
model.result('pg4').create('mslc1', 'Multislice');
model.result('pg4').feature('mslc1').set('expr', {'phil'});
model.result('pg4').create('str1', 'Streamline');
model.result('pg4').feature('str1').set('revcoordsys', 'cylindrical');
model.result('pg4').feature('str1').set('expr', {'cd.Ilr' 'cd.Ilphi' 'cd.Ilz'});
model.result('pg4').feature('str1').set('pointtype', 'arrow');
model.result('pg4').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg4').feature('str1').set('color', 'gray');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 2, 0);
model.result('pg5').setIndex('looplevel', 2, 1);
model.result('pg5').label('Electrolyte Current Density (cd)');
model.result('pg5').create('str1', 'Streamline');
model.result('pg5').feature('str1').set('expr', {'cd.Ilr' 'cd.Ilz'});
model.result('pg5').feature('str1').set('posmethod', 'uniform');
model.result('pg5').feature('str1').set('recover', 'pprint');
model.result('pg5').feature('str1').set('pointtype', 'arrow');
model.result('pg5').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('str1').set('color', 'gray');
model.result('pg5').feature('str1').create('col1', 'Color');
model.result('pg5').feature('str1').feature('col1').set('expr', 'root.comp1.cd.IlMag');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'rev2');
model.result('pg6').setIndex('looplevel', 2, 0);
model.result('pg6').setIndex('looplevel', 2, 1);
model.result('pg6').label('Electrolyte Current Density, 3D (cd)');
model.result('pg6').create('str1', 'Streamline');
model.result('pg6').feature('str1').set('revcoordsys', 'cylindrical');
model.result('pg6').feature('str1').set('expr', {'cd.Ilr' 'cd.Ilphi' 'cd.Ilz'});
model.result('pg6').feature('str1').set('pointtype', 'arrow');
model.result('pg6').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg6').feature('str1').set('color', 'gray');
model.result('pg6').feature('str1').create('col1', 'Color');
model.result('pg6').feature('str1').feature('col1').set('expr', 'root.comp1.cd.IlMag');
model.result('pg5').create('line1', 'Line');
model.result('pg5').feature('line1').set('expr', {'abs(cd.itot)'});
model.result('pg5').feature('line1').set('linetype', 'tube');
model.result('pg5').feature('line1').set('inherittubescale', false);
model.result('pg5').feature('line1').set('inheritplot', 'str1');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'abs(cd.itot)'});
model.result('pg6').feature('surf1').set('inheritplot', 'str1');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 2, 0);
model.result('pg7').setIndex('looplevel', 2, 1);
model.result('pg7').label('Electrode Potential with Respect to Ground (cd)');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'rev2');
model.result('pg8').setIndex('looplevel', 2, 0);
model.result('pg8').setIndex('looplevel', 2, 1);
model.result('pg8').label('Electrode Potential with Respect to Ground, 3D (cd)');
model.result('pg7').create('line1', 'Line');
model.result('pg7').feature('line1').set('expr', {'cd.phisext'});
model.result('pg7').feature('line1').set('linetype', 'tube');
model.result('pg7').feature('line1').set('inherittubescale', false);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'cd.phisext'});
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').set('data', 'dset1');
model.result('pg9').setIndex('looplevel', 2, 0);
model.result('pg9').setIndex('looplevel', 2, 1);
model.result('pg9').label('Electrode Potential vs. Adjacent Reference (cd)');
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').set('data', 'rev2');
model.result('pg10').setIndex('looplevel', 2, 0);
model.result('pg10').setIndex('looplevel', 2, 1);
model.result('pg10').label('Electrode Potential vs. Adjacent Reference, 3D (cd)');
model.result('pg9').create('str1', 'Streamline');
model.result('pg9').feature('str1').set('expr', {'cd.Ilr' 'cd.Ilz'});
model.result('pg9').feature('str1').set('posmethod', 'uniform');
model.result('pg9').feature('str1').set('recover', 'pprint');
model.result('pg9').feature('str1').set('pointtype', 'arrow');
model.result('pg9').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg9').feature('str1').set('color', 'gray');
model.result('pg10').create('str1', 'Streamline');
model.result('pg10').feature('str1').set('revcoordsys', 'cylindrical');
model.result('pg10').feature('str1').set('expr', {'cd.Ilr' 'cd.Ilphi' 'cd.Ilz'});
model.result('pg10').feature('str1').set('pointtype', 'arrow');
model.result('pg10').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg10').feature('str1').set('color', 'gray');
model.result('pg9').create('line1', 'Line');
model.result('pg9').feature('line1').set('expr', {'cd.Evsref'});
model.result('pg9').feature('line1').set('linetype', 'tube');
model.result('pg9').feature('line1').set('inherittubescale', false);
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', {'cd.Evsref'});
model.result.create('pg11', 'PlotGroup2D');
model.result('pg11').label('Electric Potential (els)');
model.result('pg11').set('solvertype', 'none');
model.result('pg11').set('dataisaxisym', 'off');
model.result('pg11').set('data', 'dset1');
model.result('pg11').setIndex('looplevel', 2, 0);
model.result('pg11').setIndex('looplevel', 2, 1);
model.result('pg11').set('defaultPlotID', 'ElectrodeShell/phys2/pdef1/pcond2/pg1');
model.result('pg11').feature.create('line1', 'Line');
model.result('pg11').feature('line1').set('showsolutionparams', 'on');
model.result('pg11').feature('line1').set('solvertype', 'none');
model.result('pg11').feature('line1').set('expr', 'phis_wafer');
model.result('pg11').feature('line1').set('showsolutionparams', 'on');
model.result('pg11').feature('line1').set('solvertype', 'none');
model.result('pg11').feature('line1').set('showsolutionparams', 'on');
model.result('pg11').feature('line1').set('solvertype', 'none');
model.result('pg11').feature('line1').set('showsolutionparams', 'on');
model.result('pg11').feature('line1').set('solvertype', 'none');
model.result('pg11').feature('line1').set('showsolutionparams', 'on');
model.result('pg11').feature('line1').set('solvertype', 'none');
model.result('pg11').feature('line1').set('data', 'parent');
model.result.dataset.create('rev3', 'Revolve2D');
model.result.dataset('rev3').set('data', 'dset1');
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').label('Electric Potential, Revolved Geometry (els)');
model.result('pg12').set('data', 'rev3');
model.result('pg12').setIndex('looplevel', 2, 0);
model.result('pg12').setIndex('looplevel', 2, 1);
model.result('pg12').set('solvertype', 'none');
model.result('pg12').set('data', 'rev3');
model.result('pg12').setIndex('looplevel', 2, 0);
model.result('pg12').setIndex('looplevel', 2, 1);
model.result('pg12').set('defaultPlotID', 'ElectrodeShell/phys2/pdef1/pcond4/pg1');
model.result('pg12').feature.create('surf1', 'Surface');
model.result('pg12').feature('surf1').set('showsolutionparams', 'on');
model.result('pg12').feature('surf1').set('solvertype', 'none');
model.result('pg12').feature('surf1').set('expr', 'phis_wafer');
model.result('pg12').feature('surf1').set('showsolutionparams', 'on');
model.result('pg12').feature('surf1').set('solvertype', 'none');
model.result('pg12').feature('surf1').set('showsolutionparams', 'on');
model.result('pg12').feature('surf1').set('solvertype', 'none');
model.result('pg12').feature('surf1').set('showsolutionparams', 'on');
model.result('pg12').feature('surf1').set('solvertype', 'none');
model.result('pg12').feature('surf1').set('showsolutionparams', 'on');
model.result('pg12').feature('surf1').set('solvertype', 'none');
model.result('pg12').feature('surf1').set('data', 'parent');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg13', 'PlotGroup2D');
model.result('pg13').label('Velocity (spf)');
model.result('pg13').set('dataisaxisym', 'off');
model.result('pg13').set('frametype', 'spatial');
model.result('pg13').set('data', 'dset1');
model.result('pg13').setIndex('looplevel', 2, 0);
model.result('pg13').setIndex('looplevel', 2, 1);
model.result('pg13').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg13').feature.create('surf1', 'Surface');
model.result('pg13').feature('surf1').label('Surface');
model.result('pg13').feature('surf1').set('showsolutionparams', 'on');
model.result('pg13').feature('surf1').set('expr', 'spf.U');
model.result('pg13').feature('surf1').set('smooth', 'internal');
model.result('pg13').feature('surf1').set('showsolutionparams', 'on');
model.result('pg13').feature('surf1').set('data', 'parent');
model.result.create('pg14', 'PlotGroup2D');
model.result('pg14').label('Pressure (spf)');
model.result('pg14').set('dataisaxisym', 'off');
model.result('pg14').set('frametype', 'spatial');
model.result('pg14').set('data', 'dset1');
model.result('pg14').setIndex('looplevel', 2, 0);
model.result('pg14').setIndex('looplevel', 2, 1);
model.result('pg14').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg14').feature.create('con1', 'Contour');
model.result('pg14').feature('con1').label('Contour');
model.result('pg14').feature('con1').set('showsolutionparams', 'on');
model.result('pg14').feature('con1').set('expr', 'p');
model.result('pg14').feature('con1').set('number', 40);
model.result('pg14').feature('con1').set('levelrounding', false);
model.result('pg14').feature('con1').set('smooth', 'internal');
model.result('pg14').feature('con1').set('showsolutionparams', 'on');
model.result('pg14').feature('con1').set('data', 'parent');
model.result.dataset('rev1').set('data', 'dset1');
model.result.create('pg15', 'PlotGroup3D');
model.result('pg15').label('Velocity, 3D (spf)');
model.result('pg15').set('frametype', 'spatial');
model.result('pg15').set('data', 'rev1');
model.result('pg15').setIndex('looplevel', 2, 0);
model.result('pg15').setIndex('looplevel', 2, 1);
model.result('pg15').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond1/pg1');
model.result('pg15').feature.create('surf1', 'Surface');
model.result('pg15').feature('surf1').label('Surface');
model.result('pg15').feature('surf1').set('showsolutionparams', 'on');
model.result('pg15').feature('surf1').set('expr', 'spf.U');
model.result('pg15').feature('surf1').set('smooth', 'internal');
model.result('pg15').feature('surf1').set('showsolutionparams', 'on');
model.result('pg15').feature('surf1').set('data', 'parent');
model.result('pg1').run;
model.result('pg2').run;
model.result.create('pg16', 'PlotGroup2D');
model.result('pg16').run;
model.result('pg16').label('Velocity Streamline');
model.result('pg16').create('str1', 'Streamline');
model.result('pg16').feature('str1').set('expr', {'u' 'w'});
model.result('pg16').feature('str1').set('descr', 'Velocity field');
model.result('pg16').feature('str1').selection.set([2]);
model.result('pg16').run;
model.result.create('pg17', 'PlotGroup1D');
model.result('pg17').run;
model.result('pg17').label('Local Current Density');
model.result('pg17').create('lngr1', 'LineGraph');
model.result('pg17').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg17').feature('lngr1').set('linewidth', 'preference');
model.result('pg17').feature('lngr1').selection.named('sel1');
model.result('pg17').feature('lngr1').set('expr', 'cd.iloc_er1');
model.result('pg17').feature('lngr1').set('descr', 'Local current density');
model.result('pg17').feature('lngr1').set('unit', 'A/dm^2');
model.result('pg17').run;

model.title('Fountain Flow Effects on Electrodeposition on a Rotating Wafer');

model.description(['This example explores the convective flow effects in a cell with a rotating wafer. Electrolyte enters the cell from the bottom and flows toward the rotating wafer where copper is deposited. The laminar flow profile, the concentration of copper, the electrolyte potential and the electric potential of the thin wafer is solved for.' newline  newline 'The geometry is made in two dimensions with axial symmetry.' newline  newline 'This model requires the Electrodeposition Module and the CFD Module.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('fountain_flow.mph');

model.modelNode.label('Components');

out = model;
