function out = model
%
% magnetic_damping.m
%
% Model exported on May 26 2025, 21:24 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Electromagnetics_and_Mechanics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mf', 'InductionCurrents', 'geom1');
model.physics('mf').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');

model.param.set('sigma', '3.774e7[S/m]');
model.param.descr('sigma', 'Material conductivity');
model.param.set('a_c', '5e5[A]');
model.param.descr('a_c', 'Applied current on the wire');
model.param.set('r0', '0.05[m]');
model.param.descr('r0', 'Radius of the coil');

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').run('blk1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', [0.9 0.025 0.1]);
model.geom('geom1').feature('blk2').set('pos', [0 0.575 0.45]);
model.geom('geom1').run('blk2');
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').set('r', 'r0');
model.geom('geom1').feature('cyl1').set('pos', [0.5 0.5 0]);
model.geom('geom1').runPre('fin');

model.view('view1').set('renderwireframe', true);

model.geom('geom1').run;

model.physics('mf').create('als1', 'AmperesLawSolid', 3);
model.physics('mf').feature('als1').selection.set([2]);
model.physics('mf').create('coil1', 'Coil', 3);
model.physics('mf').feature('coil1').setIndex('materialType', 'solid', 0);
model.physics('mf').feature('coil1').selection.set([3]);
model.physics('mf').feature('coil1').set('ICoil', 'a_c');
model.physics('mf').feature('coil1').feature('ccc1').feature('ct1').selection.set([14]);
model.physics('mf').feature('coil1').feature('ccc1').create('cg1', 'CoilGround', 2);
model.physics('mf').feature('coil1').feature('ccc1').feature('cg1').selection.set([13]);
model.physics('mf').create('ecd1', 'ExternalCurrentDensity', 3);
model.physics('mf').feature('ecd1').selection.set([3]);
model.physics('mf').feature('ecd1').set('Je', {'0' '0' 'a_c/(pi*r0^2)'});
model.physics('mf').feature('fsp1').set('sigma_stab_mat', 'userdef');
model.physics('mf').feature('fsp1').set('sigma_stab', {'10[S/m]' '0' '0' '0' '10[S/m]' '0' '0' '0' '10[S/m]'});
model.physics('solid').selection.set([2]);
model.physics('solid').feature('lemm1').create('dmp1', 'Damping', 3);
model.physics('solid').feature('lemm1').feature('dmp1').set('DampingType', 'IsotropicLossFactor');
model.physics('solid').feature('lemm1').feature('dmp1').set('eta_s_mat', 'userdef');
model.physics('solid').feature('lemm1').feature('dmp1').set('eta_s', 0.1);
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.set([5]);
model.physics('solid').create('bndl1', 'BoundaryLoad', 2);
model.physics('solid').feature('bndl1').selection.set([17]);
model.physics('solid').feature('bndl1').set('FperArea', {'0' '1e4' '0'});
model.physics('solid').feature('bndl1').set('harmonicPerturbation', true);
model.physics('solid').create('bndl2', 'BoundaryLoad', 2);
model.physics('solid').feature('bndl2').selection.set([17]);
model.physics('solid').feature('bndl2').set('FperArea', {'0' '1e4' '0'});

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').label('Aluminum');
model.material('mat1').set('family', 'aluminum');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat1').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.33');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-350[GPa]');
model.material('mat1').selection.set([2 3]);

model.multiphysics.create('mmcpl1', 'Magnetomechanics', 'geom1', 3);
model.multiphysics('mmcpl1').set('OnlyLorentz', true);

model.mesh('mesh1').autoMeshSize(7);

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'sigma', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'S/m', 0);
model.study('std1').feature('param').setIndex('pname', 'sigma', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'S/m', 0);
model.study('std1').feature('param').setIndex('pname', 'a_c', 0);
model.study('std1').feature('param').setIndex('plistarr', '0[A] 500000[A]', 0);
model.study('std1').create('ccc', 'CoilCurrentCalculation');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledphysics', {'mf/ecd1'});
model.study('std1').feature('stat').setSolveFor('/physics/solid', false);
model.study('std1').create('frlin', 'Frequencylinearized');
model.study('std1').feature('frlin').set('plist', 'range(5,0.5,50)');
model.study('std1').feature('frlin').set('useadvanceddisable', true);
model.study('std1').feature('frlin').set('disabledphysics', {'mf/ecd1' 'solid/bndl2'});

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'ccc');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'ccc');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('se1', 'Segregated');
model.sol('sol1').feature('s2').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('segvar', {'comp1_A'});
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'fgmres');
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 10000);
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('ams1', 'AMS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('ams1').set('prefun', 'ams');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('ams1').set('sorvecdof', {'comp1_A'});
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').label('Magnetic Fields');
model.sol('sol1').feature('s2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('segvar', {'comp1_mf_coil1_VCoil_ode'});
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').label('Coil Ode Variables');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'frlin');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('initsoluse', 'sol3');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'frlin');
model.sol('sol1').create('s3', 'Stationary');
model.sol('sol1').feature('s3').create('p1', 'Parametric');
model.sol('sol1').feature('s3').feature.remove('pDef');
model.sol('sol1').feature('s3').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s3').feature('p1').set('plistarr', {'range(5,0.5,50)'});
model.sol('sol1').feature('s3').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s3').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s3').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s3').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s3').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s3').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s3').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s3').feature('p1').set('probes', {});
model.sol('sol1').feature('s3').feature('p1').set('control', 'frlin');
model.sol('sol1').feature('s3').set('nonlin', 'linper');
model.sol('sol1').feature('s3').set('storelinpoint', true);
model.sol('sol1').feature('s3').set('linpsolnum', 'all');
model.sol('sol1').feature('s3').set('control', 'frlin');
model.sol('sol1').feature('s3').set('linpmethod', 'sol');
model.sol('sol1').feature('s3').set('linpsol', 'sol1');
model.sol('sol1').feature('s3').set('linpsoluse', 'sol3');
model.sol('sol1').feature('s3').set('control', 'frlin');
model.sol('sol1').feature('s3').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s3').create('seDef', 'Segregated');
model.sol('sol1').feature('s3').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s3').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('d1').label('Direct (Merged)');
model.sol('sol1').feature('s3').create('i1', 'Iterative');
model.sol('sol1').feature('s3').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s3').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s3').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol1').feature('s3').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s3').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s3').feature.remove('fcDef');
model.sol('sol1').feature('s3').feature.remove('seDef');
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'a_c'});
model.batch('p1').set('plistarr', {'0[A] 500000[A]'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol('sol1').feature('s3').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s3').feature('dDef').set('linsolver', 'pardiso');
model.sol.create('sol4');
model.sol('sol4').study('std1');
model.sol('sol4').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol4');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Magnetic Flux Density Norm (mf)');
model.result('pg1').set('data', 'dset4');
model.result('pg1').setIndex('looplevel', 91, 0);
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset4');
model.result('pg1').setIndex('looplevel', 91, 0);
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('solutionparams', 'parent');
model.result('pg1').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg1').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg1').feature('mslc1').set('xcoord', 'mf.CPx');
model.result('pg1').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg1').feature('mslc1').set('ycoord', 'mf.CPy');
model.result('pg1').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('mslc1').set('zcoord', 'mf.CPz');
model.result('pg1').feature('mslc1').set('colortable', 'Prism');
model.result('pg1').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result('pg1').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg1').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg1').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg1').feature('strmsl1').set('xcoord', 'mf.CPx');
model.result('pg1').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg1').feature('strmsl1').set('ycoord', 'mf.CPy');
model.result('pg1').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('strmsl1').set('zcoord', 'mf.CPz');
model.result('pg1').feature('strmsl1').set('titletype', 'none');
model.result('pg1').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg1').feature('strmsl1').set('udist', 0.02);
model.result('pg1').feature('strmsl1').set('maxlen', 0.4);
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('inheritcolor', false);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('data', 'parent');
model.result('pg1').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg1').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg1').feature('strmsl1').feature('col1').set('evalmethodactive', 'off');
model.result('pg1').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg1').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg1').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg1').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg1').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.dataset('dset4').set('frametype', 'spatial');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset4');
model.result('pg2').setIndex('looplevel', 91, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('defaultPlotID', 'stress');
model.result('pg2').label('Stress (solid)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').create('vol1', 'Volume');
model.result('pg2').feature('vol1').set('expr', {'solid.misesGp_peak'});
model.result('pg2').feature('vol1').set('threshold', 'manual');
model.result('pg2').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg2').feature('vol1').set('differential', true);
model.result('pg2').feature('vol1').set('colortable', 'Rainbow');
model.result('pg2').feature('vol1').set('colortabletrans', 'none');
model.result('pg2').feature('vol1').set('colorscalemode', 'linear');
model.result('pg2').feature('vol1').set('resolution', 'custom');
model.result('pg2').feature('vol1').set('refine', 2);
model.result('pg2').feature('vol1').set('colortable', 'Prism');
model.result('pg2').feature('vol1').create('def', 'Deform');
model.result('pg2').feature('vol1').feature('def').set('differential', true);
model.result('pg2').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg2').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result('pg1').run;
model.result('pg1').label('DC Magnetic Flux Density Norm');
model.result('pg1').run;
model.result('pg1').feature('mslc1').set('evalmethod', 'linpoint');
model.result('pg1').run;
model.result('pg1').feature('strmsl1').set('evalmethod', 'linpoint');
model.result('pg1').run;
model.result('pg1').feature('strmsl1').feature('col1').set('evalmethod', 'linpoint');
model.result('pg1').run;
model.result('pg1').run;
model.result.duplicate('pg3', 'pg1');
model.result('pg3').run;
model.result.move('pg3', 1);
model.result('pg3').label('AC Magnetic Flux Density Norm');
model.result('pg3').run;
model.result('pg3').feature('mslc1').set('evalmethod', 'harmonic');
model.result('pg3').feature('mslc1').create('sel1', 'Selection');
model.result('pg3').feature('mslc1').feature('sel1').selection.set([2]);
model.result('pg3').run;
model.result('pg3').feature('strmsl1').set('evalmethod', 'harmonic');
model.result('pg3').feature('strmsl1').create('sel1', 'Selection');
model.result('pg3').feature('strmsl1').feature('sel1').selection.set([2]);
model.result('pg3').run;
model.result('pg3').feature('strmsl1').feature('col1').set('evalmethod', 'harmonic');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg2').run;
model.result('pg2').feature('vol1').set('differential', false);
model.result('pg2').run;
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('AC Electric Current Density');
model.result('pg4').run;
model.result('pg4').feature('mslc1').set('expr', 'mf.normJ');
model.result('pg4').feature('mslc1').set('descr', 'Current density norm');
model.result('pg4').run;
model.result('pg4').feature('strmsl1').feature('col1').active(false);
model.result('pg4').run;
model.result('pg4').feature('strmsl1').set('expr', {'mf.Jx' 'mf.Jy' 'mf.Jz'});
model.result('pg4').feature('strmsl1').set('descr', 'Current density (spatial frame)');
model.result('pg4').feature('strmsl1').set('color', 'black');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('RMS Displacement vs Frequency');
model.result('pg5').set('data', 'dset4');
model.result('pg5').create('ptgr1', 'PointGraph');
model.result('pg5').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg5').feature('ptgr1').set('linewidth', 'preference');
model.result('pg5').feature('ptgr1').selection.set([18]);
model.result('pg5').feature('ptgr1').set('expr', 'solid.disp_rms');
model.result('pg5').feature('ptgr1').set('descr', 'Displacement, RMS');
model.result('pg5').feature('ptgr1').set('legend', true);
model.result('pg5').run;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/mf', true);
model.study('std2').feature('stat').setSolveFor('/physics/solid', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/mmcpl1', true);
model.study('std2').create('param', 'Parametric');
model.study('std2').feature('param').setIndex('pname', 'sigma', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'S/m', 0);
model.study('std2').feature('param').setIndex('pname', 'sigma', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'S/m', 0);
model.study('std2').feature('param').setIndex('pname', 'a_c', 0);
model.study('std2').feature('param').setIndex('plistarr', '0[A] 500000[A]', 0);
model.study('std2').feature('stat').set('useadvanceddisable', true);
model.study('std2').feature('stat').set('disabledphysics', {'mf/coil1'});
model.study('std2').feature('stat').setSolveFor('/physics/solid', false);
model.study('std2').feature('stat').setSolveFor('/multiphysics/mmcpl1', false);
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').set('tlist', 'range(0,0.001,0.1)');
model.study('std2').feature('time').set('useadvanceddisable', true);
model.study('std2').feature('time').set('disabledphysics', {'mf/coil1' 'solid/bndl1'});

model.sol.create('sol7');
model.sol('sol7').study('std2');
model.sol('sol7').create('st1', 'StudyStep');
model.sol('sol7').feature('st1').set('study', 'std2');
model.sol('sol7').feature('st1').set('studystep', 'stat');
model.sol('sol7').create('v1', 'Variables');
model.sol('sol7').feature('v1').set('control', 'stat');
model.sol('sol7').create('s1', 'Stationary');
model.sol('sol7').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol7').feature('s1').create('i1', 'Iterative');
model.sol('sol7').feature('s1').feature('i1').set('linsolver', 'fgmres');
model.sol('sol7').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol7').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('cs').create('ams1', 'AMS');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('cs').feature('ams1').set('prefun', 'ams');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('cs').feature('ams1').set('sorvecdof', {'comp1_A'});
model.sol('sol7').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol7').feature('s1').feature.remove('fcDef');
model.sol('sol7').create('su1', 'StoreSolution');
model.sol('sol7').create('st2', 'StudyStep');
model.sol('sol7').feature('st2').set('study', 'std2');
model.sol('sol7').feature('st2').set('studystep', 'time');
model.sol('sol7').create('v2', 'Variables');
model.sol('sol7').feature('v2').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol7').feature('v2').feature('comp1_u').set('scaleval', '1e-2*1.7320508075688772');
model.sol('sol7').feature('v2').set('initmethod', 'sol');
model.sol('sol7').feature('v2').set('initsol', 'sol7');
model.sol('sol7').feature('v2').set('initsoluse', 'sol8');
model.sol('sol7').feature('v2').set('notsolmethod', 'sol');
model.sol('sol7').feature('v2').set('notsol', 'sol7');
model.sol('sol7').feature('v2').set('notsoluse', 'sol8');
model.sol('sol7').feature('v2').set('control', 'time');
model.sol('sol7').create('t1', 'Time');
model.sol('sol7').feature('t1').set('tlist', 'range(0,0.001,0.1)');
model.sol('sol7').feature('t1').set('plot', 'off');
model.sol('sol7').feature('t1').set('plotgroup', 'pg1');
model.sol('sol7').feature('t1').set('plotfreq', 'tout');
model.sol('sol7').feature('t1').set('probesel', 'all');
model.sol('sol7').feature('t1').set('probes', {});
model.sol('sol7').feature('t1').set('probefreq', 'tsteps');
model.sol('sol7').feature('t1').set('tout', 'tstepsclosest');
model.sol('sol7').feature('t1').set('rtol', 0.001);
model.sol('sol7').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol7').feature('t1').set('reacf', true);
model.sol('sol7').feature('t1').set('storeudot', true);
model.sol('sol7').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol7').feature('t1').set('endtimeinterpolation', true);
model.sol('sol7').feature('t1').set('estrat', 'exclude');
model.sol('sol7').feature('t1').set('control', 'time');
model.sol('sol7').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol7').feature('t1').create('se1', 'Segregated');
model.sol('sol7').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol7').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol7').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_A'});
model.sol('sol7').feature('t1').create('i1', 'Iterative');
model.sol('sol7').feature('t1').feature('i1').set('linsolver', 'bicgstab');
model.sol('sol7').feature('t1').feature('i1').set('nlinnormuse', true);
model.sol('sol7').feature('t1').feature('i1').set('prefuntype', 'right');
model.sol('sol7').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_A'});
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_A'});
model.sol('sol7').feature('t1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol7').feature('t1').feature('se1').feature('ss1').label('Magnetic Fields');
model.sol('sol7').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol7').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_u'});
model.sol('sol7').feature('t1').create('d1', 'Direct');
model.sol('sol7').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol7').feature('t1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol7').feature('t1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol7').feature('t1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol7').feature('t1').feature('se1').feature('ss2').label('Solid Mechanics');
model.sol('sol7').feature('t1').create('i2', 'Iterative');
model.sol('sol7').feature('t1').feature('i2').set('linsolver', 'gmres');
model.sol('sol7').feature('t1').feature('i2').set('rhob', 400);
model.sol('sol7').feature('t1').feature('i2').set('nlinnormuse', true);
model.sol('sol7').feature('t1').feature('i2').label('Suggested Iterative Solver (solid)');
model.sol('sol7').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol7').feature('t1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol7').feature('t1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol7').feature('t1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol7').feature('t1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol7').feature('t1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol7').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol7').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol7').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol7').feature('t1').feature.remove('fcDef');
model.sol('sol7').attach('std2');

model.batch.create('p2', 'Parametric');
model.batch('p2').study('std2');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol7');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').set('pname', {'a_c'});
model.batch('p2').set('plistarr', {'0[A] 500000[A]'});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std2');
model.batch('p2').set('control', 'param');

model.sol('sol7').feature('t1').create('fc1', 'FullyCoupled');
model.sol.create('sol9');
model.sol('sol9').study('std2');
model.sol('sol9').label('Parametric Solutions 2');

model.batch('p2').feature('so1').set('psol', 'sol9');
model.batch('p2').run('compute');

model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Magnetic Flux Density Norm (mf)');
model.result('pg6').set('data', 'dset7');
model.result('pg6').setIndex('looplevel', 101, 0);
model.result('pg6').setIndex('looplevel', 2, 1);
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('showlegendsmaxmin', true);
model.result('pg6').set('data', 'dset7');
model.result('pg6').setIndex('looplevel', 101, 0);
model.result('pg6').setIndex('looplevel', 2, 1);
model.result('pg6').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond1/pg1');
model.result('pg6').feature.create('mslc1', 'Multislice');
model.result('pg6').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg6').feature('mslc1').set('solutionparams', 'parent');
model.result('pg6').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg6').feature('mslc1').set('xcoord', 'mf.CPx');
model.result('pg6').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg6').feature('mslc1').set('ycoord', 'mf.CPy');
model.result('pg6').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg6').feature('mslc1').set('zcoord', 'mf.CPz');
model.result('pg6').feature('mslc1').set('colortable', 'Prism');
model.result('pg6').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg6').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg6').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg6').feature('mslc1').set('data', 'parent');
model.result('pg6').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg6').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg6').feature('strmsl1').set('xcoord', 'mf.CPx');
model.result('pg6').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg6').feature('strmsl1').set('ycoord', 'mf.CPy');
model.result('pg6').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg6').feature('strmsl1').set('zcoord', 'mf.CPz');
model.result('pg6').feature('strmsl1').set('titletype', 'none');
model.result('pg6').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg6').feature('strmsl1').set('udist', 0.02);
model.result('pg6').feature('strmsl1').set('maxlen', 0.4);
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('inheritcolor', false);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('data', 'parent');
model.result('pg6').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg6').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg6').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg6').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg6').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg6').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg6').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg6').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset7');
model.result('pg7').setIndex('looplevel', 101, 0);
model.result('pg7').setIndex('looplevel', 2, 1);
model.result('pg7').set('defaultPlotID', 'stress');
model.result('pg7').label('Stress (solid) 1');
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').create('vol1', 'Volume');
model.result('pg7').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg7').feature('vol1').set('threshold', 'manual');
model.result('pg7').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg7').feature('vol1').set('colortable', 'Rainbow');
model.result('pg7').feature('vol1').set('colortabletrans', 'none');
model.result('pg7').feature('vol1').set('colorscalemode', 'linear');
model.result('pg7').feature('vol1').set('resolution', 'custom');
model.result('pg7').feature('vol1').set('refine', 2);
model.result('pg7').feature('vol1').set('colortable', 'Prism');
model.result('pg7').feature('vol1').create('def', 'Deform');
model.result('pg7').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg7').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg7').run;
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Displacement vs Time');
model.result('pg8').set('data', 'dset7');
model.result('pg8').create('ptgr1', 'PointGraph');
model.result('pg8').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg8').feature('ptgr1').set('linewidth', 'preference');
model.result('pg8').feature('ptgr1').selection.set([18]);
model.result('pg8').feature('ptgr1').set('expr', 'solid.disp');
model.result('pg8').feature('ptgr1').set('legend', true);
model.result('pg8').run;

model.title('Magnetic Damping of Vibrating Conducting Solids');

model.description('When a conductive solid material moves through a static magnetic field, an eddy current is induced. The current that flows through the conductor, which is itself moving through the magnetic field, induces a Lorentz force back on the solid. Therefore, a conductive solid that is vibrating in a static magnetic field will experience a structural damping. The effect of the magnetic damping is computed in two different ways in this example. First, by harmonically exciting a cantilever beam across a range of frequencies and placing it in a strong magnetic field. The same effect is then computed in a full transient study, when the beam instead experiences a sudden applied load. The approach presented here assumes that the relative magnitude of the structural displacements are small, that the material has isotropic and linear properties, and that the magnetic field is static.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;

model.label('magnetic_damping.mph');

model.modelNode.label('Components');

out = model;
