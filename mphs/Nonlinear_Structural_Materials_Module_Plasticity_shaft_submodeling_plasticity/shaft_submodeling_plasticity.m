function out = model
%
% shaft_submodeling_plasticity.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Nonlinear_Structural_Materials_Module/Plasticity');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);

model.geom.create('part1', 'Part', 3);
model.geom('part1').lengthUnit('mm');
model.geom('part1').insertFile('shaft_submodeling_geom_sequence.mph', 'geom1');
model.geom('part1').run('sel2');
model.geom('part1').label('Full Geometry');

model.modelNode('comp1').label('Full Model');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_sel1', true);
model.geom('geom1').feature('pi1').setEntry('selshowbnd', 'pi1_sel1', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel1', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_sel2', true);
model.geom('geom1').feature('pi1').setEntry('selshowbnd', 'pi1_sel2', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel2', 'none');
model.geom('geom1').run;

model.material.create('mat1', 'Common', '');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');
model.material.create('matlnk1', 'Link', 'comp1');

model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.named('geom1_pi1_sel2');
model.physics('solid').create('bndl1', 'BoundaryLoad', 2);
model.physics('solid').feature('bndl1').selection.named('geom1_pi1_sel1');
model.physics('solid').feature('bndl1').set('LoadType', 'TotalForce');
model.physics('solid').feature('bndl1').set('Ftot', {'-2.5[kN]' '0' '-0.9[kN]'});

model.mesh('mesh1').autoMeshSize(6);
model.mesh('mesh1').run;

model.study('std1').label('Full Model');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('colortable', 'Rainbow');
model.result('pg1').feature('vol1').set('colortabletrans', 'none');
model.result('pg1').feature('vol1').set('colorscalemode', 'linear');
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').set('colortable', 'Prism');
model.result('pg1').feature('vol1').create('def', 'Deform');
model.result('pg1').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result('pg1').run;
model.result('pg1').label('Stress - Full Model');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').run;
model.result('pg1').feature('vol1').set('unit', 'MPa');
model.result('pg1').feature('vol1').set('resolution', 'norefine');
model.result('pg1').feature('vol1').set('smooth', 'none');
model.result('pg1').run;
model.result.dataset.create('cpl1', 'CutPlane');
model.result.dataset('cpl1').set('quickplane', 'xz');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').run;
model.result('pg2').label('Cut Plane Stress - Full Model');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'solid.mises');
model.result('pg2').feature('surf1').set('unit', 'MPa');
model.result('pg2').feature('surf1').set('resolution', 'norefine');
model.result('pg2').feature('surf1').set('smooth', 'none');
model.result('pg2').run;

model.view('view4').axis.set('xmin', 25.8);
model.view('view4').axis.set('xmax', 34.2);
model.view('view4').axis.set('ymin', 1.5);
model.view('view4').axis.set('ymax', 7.5);

model.modelNode.create('comp2', true);

model.geom.create('geom2', 3);
model.geom('geom2').model('comp2');

model.mesh.create('mesh2', 'geom2');

model.modelNode('comp2').label('Submodel');

model.geom.create('part2', 'Part', 3);
model.geom('part2').label('Submodel Cut');
model.geom('part2').lengthUnit('mm');
model.geom('part2').create('cyl1', 'Cylinder');
model.geom('part2').feature('cyl1').set('r', 7);
model.geom('part2').feature('cyl1').set('h', 8);
model.geom('part2').feature('cyl1').set('pos', [26 0 0]);
model.geom('part2').feature('cyl1').set('axistype', 'x');
model.geom('part2').run('cyl1');
model.geom('part2').create('blk1', 'Block');
model.geom('part2').feature('blk1').set('size', [10 14 10]);
model.geom('part2').feature('blk1').set('pos', [26 -7 0]);
model.geom('part2').run('blk1');
model.geom('part2').create('int1', 'Intersection');
model.geom('part2').feature('int1').label('Submodel Cut');
model.geom('part2').feature('int1').selection('input').set({'blk1' 'cyl1'});
model.geom('part2').feature('int1').set('selresult', true);
model.geom('part2').feature('int1').set('selresultshow', 'bnd');
model.geom('geom2').lengthUnit('mm');
model.geom('geom2').create('pi1', 'PartInstance');
model.geom('geom2').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom2').feature('pi1').set('part', 'part1');
model.geom('geom2').run('pi1');
model.geom('geom2').create('pi2', 'PartInstance');
model.geom('geom2').feature('pi2').set('selkeepnoncontr', false);
model.geom('geom2').feature('pi2').set('part', 'part2');
model.geom('geom2').run('pi2');
model.geom('geom2').feature('pi2').setEntry('selkeepbnd', 'pi2_int1.bnd', true);
model.geom('geom2').feature('pi2').setEntry('selshowbnd', 'pi2_int1.bnd', true);
model.geom('geom2').feature('pi2').setEntry('selcontributetobnd', 'pi2_int1.bnd', 'none');
model.geom('geom2').create('int1', 'Intersection');
model.geom('geom2').feature('int1').selection('input').set({'pi1' 'pi2'});
model.geom('geom2').runPre('fin');
model.geom('geom2').create('wp1', 'WorkPlane');
model.geom('geom2').feature('wp1').set('unite', true);
model.geom('geom2').feature('wp1').set('quickplane', 'zx');
model.geom('geom2').run('wp1');
model.geom('geom2').create('par1', 'Partition');
model.geom('geom2').feature('par1').selection('input').set({'int1'});
model.geom('geom2').feature('par1').set('partitionwith', 'workplane');
model.geom('geom2').run('fin');
model.geom('geom2').create('mcd1', 'MeshControlDomains');
model.geom('geom2').feature('mcd1').selection('input').set('fin', [1 2]);
model.geom('geom2').run('mcd1');

model.material.create('matlnk2', 'Link', 'comp2');

model.physics.create('solid2', 'SolidMechanics', 'geom2');
model.physics('solid2').model('comp2');

model.study('std1').feature('stat').setSolveFor('/physics/solid2', true);

model.cpl.create('genext1', 'GeneralExtrusion', 'geom1');
model.cpl('genext1').selection.set([1]);
model.cpl('genext1').set('dstmap', {'X' 'Y' 'Z'});
model.cpl('genext1').set('srcframe', 'material');

model.physics('solid2').create('disp1', 'Displacement2', 2);
model.physics('solid2').feature('disp1').selection.named('geom2_pi2_int1_bnd');
model.physics('solid2').feature('disp1').setIndex('Direction', 'prescribed', 0);
model.physics('solid2').feature('disp1').setIndex('U0', 'comp1.genext1(comp1.u)', 0);
model.physics('solid2').feature('disp1').setIndex('Direction', 'prescribed', 1);
model.physics('solid2').feature('disp1').setIndex('U0', 'comp1.genext1(comp1.v)', 1);
model.physics('solid2').feature('disp1').setIndex('Direction', 'prescribed', 2);
model.physics('solid2').feature('disp1').setIndex('U0', 'comp1.genext1(comp1.w)', 2);

model.mesh('mesh2').create('map1', 'Map');
model.mesh('mesh2').feature('map1').selection.set([2]);
model.mesh('mesh2').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh2').feature('map1').feature('dis1').selection.set([1 3]);
model.mesh('mesh2').feature('map1').feature('dis1').set('type', 'predefined');
model.mesh('mesh2').feature('map1').feature('dis1').set('elemcount', 8);
model.mesh('mesh2').feature('map1').feature('dis1').set('elemratio', 4);
model.mesh('mesh2').feature('map1').feature('dis1').set('reverse', true);
model.mesh('mesh2').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh2').feature('map1').feature('dis2').selection.set([13]);
model.mesh('mesh2').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh2').feature('map1').feature('dis2').set('elemcount', 8);
model.mesh('mesh2').feature('map1').feature('dis2').set('elemratio', 4);
model.mesh('mesh2').feature('map1').create('dis3', 'Distribution');
model.mesh('mesh2').feature('map1').feature('dis3').selection.set([15]);
model.mesh('mesh2').feature('map1').feature('dis3').set('numelem', 6);
model.mesh('mesh2').feature('map1').create('dis4', 'Distribution');
model.mesh('mesh2').feature('map1').feature('dis4').selection.set([10]);
model.mesh('mesh2').feature('map1').feature('dis4').set('type', 'predefined');
model.mesh('mesh2').feature('map1').feature('dis4').set('elemcount', 12);
model.mesh('mesh2').feature('map1').feature('dis4').set('elemratio', 2);
model.mesh('mesh2').create('swe1', 'Sweep');
model.mesh('mesh2').feature('swe1').set('smoothcontrol', false);
model.mesh('mesh2').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh2').feature('swe1').feature('dis1').set('numelem', 16);
model.mesh('mesh2').run;
model.mesh('mesh2').run;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/solid', false);
model.study('std2').feature('stat').setSolveFor('/physics/solid2', true);
model.study('std2').label('Submodel');
model.study('std2').feature('stat').set('usesol', true);
model.study('std2').feature('stat').set('notsolmethod', 'sol');
model.study('std2').feature('stat').set('notstudy', 'std1');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (solid2)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (solid2)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset3');
model.result('pg3').set('defaultPlotID', 'stress');
model.result('pg3').label('Stress (solid2)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('expr', {'solid2.misesGp'});
model.result('pg3').feature('vol1').set('threshold', 'manual');
model.result('pg3').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg3').feature('vol1').set('colortable', 'Rainbow');
model.result('pg3').feature('vol1').set('colortabletrans', 'none');
model.result('pg3').feature('vol1').set('colorscalemode', 'linear');
model.result('pg3').feature('vol1').set('resolution', 'custom');
model.result('pg3').feature('vol1').set('refine', 2);
model.result('pg3').feature('vol1').set('colortable', 'Prism');
model.result('pg3').feature('vol1').create('def', 'Deform');
model.result('pg3').feature('vol1').feature('def').set('expr', {'u2' 'v2' 'w2'});
model.result('pg3').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result('pg3').run;
model.result('pg3').label('Stress - Submodel');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').run;
model.result('pg3').feature('vol1').set('unit', 'MPa');
model.result('pg3').feature('vol1').set('resolution', 'norefine');
model.result('pg3').feature('vol1').set('smooth', 'none');
model.result('pg3').run;
model.result.dataset.create('cpl2', 'CutPlane');
model.result.dataset('cpl2').set('quickplane', 'xz');
model.result.dataset('cpl2').set('data', 'dset3');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').run;
model.result('pg4').label('Cut Plane Stress - Submodel');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').set('data', 'cpl2');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'solid2.mises');
model.result('pg4').feature('surf1').set('unit', 'MPa');
model.result('pg4').feature('surf1').set('resolution', 'norefine');
model.result('pg4').feature('surf1').set('smooth', 'none');
model.result('pg4').run;
model.result.dataset.create('cpl3', 'CutPlane');
model.result.dataset('cpl3').set('quickx', 26);
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').run;
model.result('pg5').label('Stress Comparison');
model.result('pg5').set('data', 'none');
model.result('pg5').set('titletype', 'none');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('data', 'cpl3');
model.result('pg5').feature('surf1').set('expr', 'solid.misesGp');
model.result('pg5').feature('surf1').set('unit', 'MPa');
model.result('pg5').feature('surf1').set('resolution', 'norefine');
model.result('pg5').feature('surf1').set('smooth', 'none');
model.result('pg5').run;
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').set('data', 'dset3');
model.result.dataset('surf1').selection.set([1]);
model.result.dataset('surf1').set('param', 'yz');
model.result('pg5').run;
model.result('pg5').create('surf2', 'Surface');
model.result('pg5').feature('surf2').set('data', 'surf1');
model.result('pg5').feature('surf2').set('expr', 'solid2.misesGp');
model.result('pg5').feature('surf2').set('unit', 'MPa');
model.result('pg5').feature('surf2').set('resolution', 'norefine');
model.result('pg5').feature('surf2').set('smooth', 'none');
model.result('pg5').feature('surf2').set('inheritplot', 'surf1');
model.result('pg5').feature('surf2').create('trn1', 'Translation');
model.result('pg5').run;
model.result('pg5').feature('surf2').feature('trn1').set('trans', [11 0]);
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature.duplicate('surf3', 'surf2');
model.result('pg5').run;
model.result('pg5').feature('surf3').set('expr', 'solid2.misesGp-comp1.genext1(solid.misesGp)');
model.result('pg5').feature('surf3').set('inheritplot', 'none');
model.result('pg5').feature('surf3').set('colortable', 'Wave');
model.result('pg5').feature('surf3').set('colorscalemode', 'linearsymmetric');
model.result('pg5').run;
model.result('pg5').feature('surf3').feature('trn1').set('trans', [22 0]);
model.result('pg5').run;

model.study('std1').feature('stat').setEntry('activate', 'solid2', false);

model.result('pg3').run;

model.title('Submodeling Analysis of a Shaft');

model.description(['Submodeling can be used when it is not possible to resolve all details of a complex geometry in a global model. An approximate solution is computed using the global model, and the results from that analysis are used as boundary conditions for a detailed submodel.' newline  newline 'In this example this technique is applied to perform an accurate stress evaluation in a structural mechanics problem.']);

model.label('shaft_submodeling.mph');

model.result('pg3').run;
model.result('pg3').set('titletype', 'none');
model.result('pg3').create('con1', 'Contour');
model.result('pg3').feature('con1').set('expr', 'solid2.misesGp/material.ElastoplasticModel.sigmags');
model.result('pg3').feature('con1').set('levelmethod', 'levels');
model.result('pg3').feature('con1').set('levels', 1);
model.result('pg3').feature('con1').set('colorlegend', false);
model.result('pg3').feature('con1').set('coloring', 'uniform');
model.result('pg3').feature('con1').set('color', 'cyan');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('con1').feature.copy('def', 'pg3/vol1/def');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('con1').set('inheritcolor', false);
model.result('pg3').feature('con1').set('inheritrange', false);
model.result('pg3').feature('con1').set('inherittransparency', false);
model.result('pg3').feature('con1').set('inherittubescale', false);
model.result('pg3').feature('con1').set('inheritplot', 'vol1');

model.view('view5').set('showgrid', false);

model.result('pg3').run;

model.param.set('lp', '0');
model.param.descr('lp', 'Load multiplier');

model.physics('solid').feature('bndl1').set('Ftot', {'-2.5[kN]*lp' '0' '-0.9[kN]*lp'});

model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'lp', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', '', 0);
model.study('std1').feature('stat').setIndex('pname', 'lp', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', '', 0);
model.study('std1').feature('stat').setIndex('plistarr', '0 1', 0);
model.study('std1').feature('stat').setIndex('punit', '', 0);

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('v1').set('notsolnum', 'auto');
model.sol('sol2').feature('v1').set('notsolvertype', 'solnum');

model.study('std2').feature('stat').set('notsolnum', 'auto');
model.study('std2').feature('stat').set('notsolvertype', 'solnum');
model.study('std2').feature('stat').set('notsolnumhide', 'off');
model.study('std2').feature('stat').set('notstudyhide', 'off');
model.study('std2').feature('stat').set('notsolhide', 'on');

model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result('pg1').run;

model.physics('solid2').feature('lemm1').create('plsty1', 'Plasticity', 3);

model.study('std2').feature('stat').set('useparam', true);
model.study('std2').feature('stat').setIndex('pname', 'lp', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', '', 0);
model.study('std2').feature('stat').setIndex('pname', 'lp', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', '', 0);
model.study('std2').feature('stat').setIndex('plistarr', 'range(0.75,0.05,1)', 0);
model.study('std2').feature('stat').setIndex('punit', '', 0);
model.study('std2').feature('stat').set('notsolnum', 'all');

model.sol('sol2').study('std2');
model.sol('sol2').feature.remove('s1');
model.sol('sol2').feature.remove('v1');
model.sol('sol2').feature.remove('st1');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol2').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol2').feature('s1').set('control', 'stat');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('d1').set('nliniterrefine', true);
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (solid2)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('rhob', 40);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (solid2)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature.duplicate('con2', 'con1');
model.result('pg3').run;
model.result('pg3').feature('con2').set('data', 'dset3');
model.result('pg3').feature('con2').setIndex('looplevel', 1, 0);
model.result('pg3').feature('con2').set('expr', 'solid2.misesGp/material.ElastoplasticModel.sigmags/0.75');
model.result('pg3').feature('con2').set('color', 'yellow');
model.result('pg3').run;
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').run;
model.result('pg6').label('Plastic Strain');
model.result('pg6').set('data', 'dset3');
model.result('pg6').stepLast(0);
model.result('pg6').run;
model.result('pg6').create('vol1', 'Volume');
model.result('pg6').feature('vol1').set('expr', 'solid2.epeGp');
model.result('pg6').feature('vol1').set('colortable', 'Prism');
model.result('pg6').feature('vol1').create('filt1', 'Filter');
model.result('pg6').run;
model.result('pg6').feature('vol1').feature('filt1').set('expr', 'Y>-0.0001');
model.result('pg6').feature('vol1').feature('filt1').set('nodespec', 'all');
model.result('pg6').run;
model.result('pg6').set('edges', false);
model.result('pg6').run;
model.result('pg6').run;
model.result.numerical.create('int1', 'IntSurface');
model.result.numerical('int1').set('intvolume', true);
model.result.numerical('int1').set('data', 'dset3');
model.result.numerical('int1').selection.set([1]);
model.result.numerical('int1').setIndex('expr', '-solid2.RFz/0.9[kN]/lp*2', 0);
model.result.numerical('int1').setIndex('unit', 1, 0);
model.result.numerical('int1').setIndex('descr', '', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Surface Integration 1');
model.result.numerical('int1').set('table', 'tbl1');
model.result.numerical('int1').setResult;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').set('data', 'none');
model.result('pg7').create('tblp1', 'Table');
model.result('pg7').feature('tblp1').set('source', 'table');
model.result('pg7').feature('tblp1').set('table', 'tbl1');
model.result('pg7').feature('tblp1').set('linewidth', 'preference');
model.result('pg7').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').label('Error Estimate');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Relative stiffness');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg6').run;
model.result('pg6').run;

model.title('Submodeling with Plasticity');

model.description(['In this tutorial model, it is demonstrated how to incorporate a localized nonlinearity in a submodel.' newline  newline 'In this case, an initial elastic analysis reveals that a small region of a structure has stresses above the yield limit. To improve the results, an elastoplastic material model is added in a submodel.' newline  newline 'The global model is in this case analyzed using linear elasticity, but this is not a necessary assumption.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('shaft_submodeling_plasticity.mph');

model.modelNode.label('Components');

out = model;
