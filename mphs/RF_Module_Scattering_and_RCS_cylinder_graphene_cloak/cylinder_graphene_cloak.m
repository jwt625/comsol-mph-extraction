function out = model
%
% cylinder_graphene_cloak.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/RF_Module/Scattering_and_RCS');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('emw', 'ElectromagneticWaves', 'geom1');
model.physics('emw').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('solnum', 'auto');
model.study('std1').feature('freq').set('notsolnum', 'auto');
model.study('std1').feature('freq').set('outputmap', {});
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').setSolveFor('/physics/emw', true);

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);

model.param.set('f0', '3[THz]');
model.param.descr('f0', 'Designed cloaking frequency');
model.param.set('lda0', 'c_const/f0');
model.param.descr('lda0', 'Designed cloaking wavelength');
model.param.set('theta', 'pi/3');
model.param.descr('theta', 'Angle of incidence');
model.param.set('D', 'lda0/5');
model.param.descr('D', 'Cylinder diameter');
model.param.set('L', '3*lda0');
model.param.descr('L', 'Cylinder length');
model.param.set('eps_d', '3.9');
model.param.descr('eps_d', 'Cylinder dielectric constant');
model.param.set('Ef', '0.51[eV]');
model.param.descr('Ef', 'Fermi level of graphene');
model.param.set('tau', '0.5[ps]');
model.param.descr('tau', 'Scattering time');
model.param.set('T', '300[K]');
model.param.descr('T', 'Temperature');
model.param.set('d_eff', '1[nm]');
model.param.descr('d_eff', 'Effective graphene thickness');
model.param.set('E0', '1[V/m]');
model.param.descr('E0', 'Electric field amplitude of the incident field');
model.param.set('I0', 'E0^2/(2*Z0_const)');
model.param.descr('I0', 'Incident power');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'D/2' 'L'});
model.geom('geom1').feature('r1').set('pos', {'0' '-L/2'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'lda0' 'L+lda0'});
model.geom('geom1').feature('r2').set('pos', {'0' '-(L+lda0)/2'});
model.geom('geom1').feature('r2').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('r2').setIndex('layer', 'lda0/5', 0);
model.geom('geom1').feature('r2').set('layerright', true);
model.geom('geom1').feature('r2').set('layertop', true);
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', {'D/2+lda0/5' 'L+lda0/5'});
model.geom('geom1').feature('r3').set('pos', {'0' '-(L+lda0/5)/2'});
model.geom('geom1').runPre('fin');

model.cpl.create('intop1', 'Integration', 'geom1');

model.geom('geom1').run;

model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 1);
model.cpl('intop1').selection.set([6 12 17]);

model.func.create('an1', 'Analytic');
model.func('an1').model('comp1');
model.func('an1').set('funcname', 'H');
model.func('an1').set('expr', 'sinh(hbar_const*x/(k_B_const*T))/(cosh(hbar_const*x/(k_B_const*T))+cosh(Ef/(k_B_const*T)))');
model.func('an1').setIndex('argunit', 'rad/s', 0);
model.func('an1').setIndex('plotargs', '1e16', 0, 2);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('Omega', '1[rad/s]');
model.variable('var1').descr('Omega', 'Variable of integral');
model.variable('var1').set('integral', 'integrate((H(Omega)-H(emw.omega/2))/(emw.omega^2-4*Omega^2),Omega,0[rad/s],1e16[rad/s])');
model.variable('var1').descr('integral', 'Integral in the interband conductivity equation');
model.variable('var1').set('sigma_intra', '((2*k_B_const*T*e_const^2)/(pi*hbar_const^2))*(log(2*cosh(Ef/(2*k_B_const*T)))*(-j/(emw.omega-j/tau)))');
model.variable('var1').descr('sigma_intra', 'Intraband conductivity');
model.variable('var1').set('sigma_inter', '(e_const^2/(4*hbar_const))*(H(emw.omega/2)-(j*4*emw.omega/pi)*integral)');
model.variable('var1').descr('sigma_inter', 'Interband conductivity');
model.variable('var1').set('sigma', 'sigma_intra+sigma_inter');
model.variable('var1').descr('sigma', 'Total graphene conductivity');
model.variable('var1').set('C_scatt', 'intop1(nr*emw.relPoavr+nz*emw.relPoavz)/I0');
model.variable('var1').descr('C_scatt', 'Scattering cross section');

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.set([1 5 6 7 8]);
model.coordSystem('pml1').set('ScalingType', 'Cylindrical');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Air');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat1').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Dielectrics');
model.material('mat2').selection.set([4]);
model.material('mat2').propertyGroup('def').set('relpermittivity', {'eps_d'});
model.material('mat2').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0'});

model.physics('emw').prop('BackgroundField').set('SolveFor', 'scatteredField');
model.physics('emw').prop('BackgroundField').set('WaveType', 'LinearPol');
model.physics('emw').prop('BackgroundField').set('incAngle', 'theta');
model.physics('emw').prop('BackgroundField').set('highestMode', 5);
model.physics('emw').prop('BackgroundField').set('fieldAmplitude', 'E0');

model.param.set('modeNum', '0');
model.param.descr('modeNum', 'Azimuthal mode number');
model.param.set('highestMode', '5');
model.param.descr('highestMode', 'Highest mode number in the expansion');

model.physics('emw').prop('outofplanewavenumber').set('mFloquet', 'modeNum');

model.study('std1').feature('freq').setIndex('plistarr_aux', '', 0);
model.study('std1').feature('freq').setIndex('pname_aux', 'modeNum', 0);
model.study('std1').feature('freq').setIndex('plistarr_aux', 'range(-highestMode,1,highestMode)', 0);

model.physics('emw').create('trans1', 'TransitionBoundaryCondition', 1);
model.physics('emw').feature('trans1').selection.set([8 10 16]);
model.physics('emw').feature('trans1').set('epsilonr_mat', 'userdef');
model.physics('emw').feature('trans1').set('murbnd_mat', 'userdef');
model.physics('emw').feature('trans1').set('sigmabnd_mat', 'userdef');
model.physics('emw').feature('trans1').set('sigmabnd', 'sigma/d_eff');
model.physics('emw').feature('trans1').set('d', 'd_eff');

model.mesh('mesh1').autoMeshSize(1);

model.study('std1').feature('freq').set('punit', 'THz');
model.study('std1').feature('freq').set('plist', 'range(1,0.2,5)');
model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').set('solnum', 'auto');
model.study('std2').feature('freq').set('notsolnum', 'auto');
model.study('std2').feature('freq').set('outputmap', {});
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').setSolveFor('/physics/emw', true);
model.study('std2').feature('freq').set('useadvanceddisable', true);
model.study('std2').feature('freq').set('disabledphysics', {'emw/trans1'});
model.study('std2').feature('freq').set('punit', 'THz');
model.study('std2').feature('freq').set('plist', 'range(1, 0.2, 5)');
model.study('std2').feature('freq').set('useparam', true);
model.study('std2').feature('freq').setIndex('pname_aux', 'f0', 0);
model.study('std2').feature('freq').setIndex('plistarr_aux', '', 0);
model.study('std2').feature('freq').setIndex('punit_aux', 'Hz', 0);
model.study('std2').feature('freq').setIndex('pname_aux', 'f0', 0);
model.study('std2').feature('freq').setIndex('plistarr_aux', '', 0);
model.study('std2').feature('freq').setIndex('punit_aux', 'Hz', 0);
model.study('std2').feature('freq').setIndex('pname_aux', 'modeNum', 0);
model.study('std2').feature('freq').setIndex('plistarr_aux', 'range(-highestMode,1,highestMode)', 0);
model.study('std2').feature('freq').setIndex('punit_aux', '', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq' 'modeNum'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'THz' ''});
model.sol('sol1').feature('s1').feature('p1').set('sweeptype', 'filled');
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(1,0.2,5)' 'range(-highestMode,1,highestMode)'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pcontinuation', '');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (emw)');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Electric Field (emw)');
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 11, 0);
model.result('pg1').setIndex('looplevel', 21, 1);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').label('Revolution 2D');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset1');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Scattered electric field, z-component');
model.result('pg2').set('paramindicator', '');
model.result('pg2').label('Scattered Field (emw)');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'sum(withsol(''sol1'',emw.relEz,setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1)');
model.result('pg2').feature('surf1').set('colortable', 'RainbowLight');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Background electric field, z-component');
model.result('pg3').set('paramindicator', '');
model.result('pg3').label('Background Field (emw)');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', 'sum(withsol(''sol1'',emw.Ebz,setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1)');
model.result('pg3').feature('surf1').set('colortable', 'RainbowLight');
model.result('pg1').run;

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 0.01);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('pname', {'freq' 'modeNum'});
model.sol('sol2').feature('s1').feature('p1').set('punit', {'THz' ''});
model.sol('sol2').feature('s1').feature('p1').set('sweeptype', 'filled');
model.sol('sol2').feature('s1').feature('p1').set('plistarr', {'range(1, 0.2, 5)' 'range(-highestMode,1,highestMode)'});
model.sol('sol2').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pcontinuation', '');
model.sol('sol2').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol2').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s1').feature('p1').set('probes', {});
model.sol('sol2').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol2').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('s1').set('control', 'freq');
model.sol('sol2').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (emw)');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Electric Field (emw) 1');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 11, 0);
model.result('pg4').setIndex('looplevel', 21, 1);
model.result('pg4').set('dataisaxisym', 'off');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 11, 0);
model.result('pg4').setIndex('looplevel', 21, 1);
model.result('pg4').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond2/pg1');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Surface');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result.dataset.create('rev2', 'Revolve2D');
model.result.dataset('rev2').label('Revolution 2D 1');
model.result.dataset('rev2').set('data', 'none');
model.result.dataset('rev2').set('startangle', -90);
model.result.dataset('rev2').set('revangle', 225);
model.result.dataset('rev2').set('data', 'dset2');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Scattered electric field, z-component');
model.result('pg5').set('paramindicator', '');
model.result('pg5').label('Scattered Field (emw) 1');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', 'sum(withsol(''sol2'',emw.relEz,setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1)');
model.result('pg5').feature('surf1').set('colortable', 'RainbowLight');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'Background electric field, z-component');
model.result('pg6').set('paramindicator', '');
model.result('pg6').label('Background Field (emw) 1');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'sum(withsol(''sol2'',emw.Ebz,setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1)');
model.result('pg6').feature('surf1').set('colortable', 'RainbowLight');
model.result('pg4').run;
model.result.dataset.create('mir1', 'Mirror2D');
model.result.dataset('mir1').set('hasvar', true);
model.result.dataset.create('mir2', 'Mirror2D');
model.result.dataset('mir2').set('data', 'dset2');
model.result.dataset('mir2').set('hasvar', true);
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').run;
model.result('pg7').label('Total Field (With Graphene Cloak)');
model.result('pg7').set('data', 'mir1');
model.result('pg7').setIndex('looplevel', 11, 1);
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', 'Total field, z-component (with graphene cloak)');
model.result('pg7').set('paramindicator', '');
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', 'sum(withsol(''sol1'',emw.Ez,setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1)');
model.result('pg7').feature('surf1').set('rangecoloractive', true);
model.result('pg7').feature('surf1').set('rangecolormin', -1);
model.result('pg7').feature('surf1').set('rangecolormax', 1);
model.result('pg7').feature('surf1').create('filt1', 'Filter');
model.result('pg7').run;
model.result('pg7').feature('surf1').feature('filt1').set('expr', 'mir1x>0');
model.result('pg7').run;
model.result('pg7').create('surf2', 'Surface');
model.result('pg7').feature('surf2').set('expr', 'sum(withsol(''sol1'',emw.Ez*exp(-j*modeNum*pi),setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1)');
model.result('pg7').feature('surf2').set('colorlegend', false);
model.result('pg7').feature('surf2').set('inheritplot', 'surf1');
model.result('pg7').feature('surf2').create('filt1', 'Filter');
model.result('pg7').run;
model.result('pg7').feature('surf2').feature('filt1').set('expr', 'mir1x<0');
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').run;
model.result('pg8').label('Total Field (Without Graphene Cloak)');
model.result('pg8').set('data', 'mir2');
model.result('pg8').setIndex('looplevel', 11, 1);
model.result('pg8').set('titletype', 'manual');
model.result('pg8').set('title', 'Total field, z-component (without graphene cloak)');
model.result('pg8').set('paramindicator', '');
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', 'sum(withsol(''sol2'',emw.Ez,setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1)');
model.result('pg8').feature('surf1').set('rangecoloractive', true);
model.result('pg8').feature('surf1').set('rangecolormin', -1);
model.result('pg8').feature('surf1').set('rangecolormax', 1);
model.result('pg8').feature('surf1').create('filt1', 'Filter');
model.result('pg8').run;
model.result('pg8').feature('surf1').feature('filt1').set('expr', 'mir2x>0');
model.result('pg8').run;
model.result('pg8').create('surf2', 'Surface');
model.result('pg8').feature('surf2').set('expr', 'sum(withsol(''sol2'',emw.Ez*exp(-j*modeNum*pi),setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1)');
model.result('pg8').feature('surf2').set('colorlegend', false);
model.result('pg8').feature('surf2').set('inheritplot', 'surf1');
model.result('pg8').feature('surf2').create('filt1', 'Filter');
model.result('pg8').run;
model.result('pg8').feature('surf2').feature('filt1').set('expr', 'mir2x<0');
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Scattering Cross Section');
model.result('pg9').setIndex('looplevelinput', 'first', 0);
model.result('pg9').set('xlabelactive', true);
model.result('pg9').set('xlabel', 'Frequency (THz)');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Scattering cross section (m^2)');
model.result('pg9').set('titletype', 'manual');
model.result('pg9').set('title', 'Scattering cross section');
model.result('pg9').create('glob1', 'Global');
model.result('pg9').feature('glob1').set('markerpos', 'datapoints');
model.result('pg9').feature('glob1').set('linewidth', 'preference');
model.result('pg9').feature('glob1').setIndex('expr', 'sum(withsol(''sol1'',C_scatt,setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1)', 0);
model.result('pg9').feature('glob1').setIndex('unit', 1, 0);
model.result('pg9').feature('glob1').setIndex('descr', 'With graphene cloak', 0);
model.result('pg9').feature('glob1').setIndex('expr', 'sum(withsol(''sol2'',C_scatt,setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1)', 1);
model.result('pg9').feature('glob1').setIndex('unit', 1, 1);
model.result('pg9').feature('glob1').setIndex('descr', 'Without graphene cloak', 1);
model.result('pg9').feature('glob1').set('xdatasolnumtype', 'level2');
model.result('pg9').feature('glob1').set('legendmethod', 'manual');
model.result('pg9').feature('glob1').setIndex('legends', 'With graphene cloak', 0);
model.result('pg9').feature('glob1').setIndex('legends', 'Without graphene cloak', 1);
model.result('pg9').run;
model.result('pg9').set('ylog', true);
model.result.dataset('rev1').set('revangle', 360);
model.result.dataset('rev1').set('hasspacevars', true);
model.result.dataset('rev2').set('revangle', 360);
model.result.dataset('rev2').set('hasspacevars', true);
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').run;
model.result('pg10').label('Comparison of the Total Field in 3D');
model.result('pg10').setIndex('looplevel', 11, 1);
model.result('pg10').set('titletype', 'none');
model.result('pg10').set('edges', false);
model.result('pg10').set('showlegends', false);
model.result('pg10').create('slc1', 'Slice');
model.result('pg10').feature('slc1').set('expr', 'sum(withsol(''sol1'',emw.Ez*exp(-j*modeNum*rev1phi),setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1)');
model.result('pg10').feature('slc1').set('quickplane', 'xy');
model.result('pg10').feature('slc1').set('quickznumber', 2);
model.result('pg10').feature('slc1').set('rangecoloractive', true);
model.result('pg10').feature('slc1').set('rangecolormin', -1);
model.result('pg10').feature('slc1').set('rangecolormax', 1);
model.result('pg10').feature.duplicate('slc2', 'slc1');
model.result('pg10').run;
model.result('pg10').feature('slc2').set('quickplane', 'zx');
model.result('pg10').feature('slc2').set('quickynumber', 1);
model.result('pg10').feature('slc2').set('inheritplot', 'slc1');
model.result('pg10').run;
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', 'sum(withsol(''sol1'',emw.Ez*exp(-j*modeNum*rev1phi),setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1)');
model.result('pg10').feature('surf1').set('colortable', 'Thermal');
model.result('pg10').feature('surf1').create('filt1', 'Filter');
model.result('pg10').run;
model.result('pg10').feature('surf1').feature('filt1').set('expr', 'sqrt(rev1x^2+rev1y^2)<D/2 && abs(rev1z)<L/2');
model.result('pg10').run;
model.result('pg10').create('slc3', 'Slice');
model.result('pg10').feature('slc3').set('data', 'rev2');
model.result('pg10').feature('slc3').setIndex('looplevel', 11, 1);
model.result('pg10').feature('slc3').set('expr', 'sum(withsol(''sol2'',emw.Ez*exp(-j*modeNum*rev2phi),setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1)');
model.result('pg10').feature('slc3').set('quickplane', 'xy');
model.result('pg10').feature('slc3').set('quickznumber', 2);
model.result('pg10').feature('slc3').set('inheritplot', 'slc1');
model.result('pg10').feature('slc3').create('trn1', 'Translation');
model.result('pg10').run;
model.result('pg10').feature('slc3').feature('trn1').set('trans', [200 100 0]);
model.result('pg10').run;
model.result('pg10').create('slc4', 'Slice');
model.result('pg10').feature('slc4').set('data', 'rev2');
model.result('pg10').feature('slc4').setIndex('looplevel', 11, 1);
model.result('pg10').feature('slc4').set('expr', 'sum(withsol(''sol2'',emw.Ez*exp(-j*modeNum*rev2phi),setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1)');
model.result('pg10').feature('slc4').set('quickplane', 'zx');
model.result('pg10').feature('slc4').set('quickynumber', 1);
model.result('pg10').feature('slc4').set('inheritplot', 'slc1');
model.result('pg10').feature('slc4').create('trn1', 'Translation');
model.result('pg10').run;
model.result('pg10').feature('slc4').feature('trn1').set('trans', [200 100 0]);
model.result('pg10').run;
model.result('pg10').create('surf2', 'Surface');
model.result('pg10').feature('surf2').set('data', 'rev2');
model.result('pg10').feature('surf2').setIndex('looplevel', 11, 1);
model.result('pg10').feature('surf2').set('expr', 'sum(withsol(''sol2'',emw.Ez*exp(-j*modeNum*rev2phi),setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1)');
model.result('pg10').feature('surf2').set('inheritplot', 'surf1');
model.result('pg10').feature('surf2').create('trn1', 'Translation');
model.result('pg10').run;
model.result('pg10').feature('surf2').feature('trn1').set('trans', [200 100 0]);
model.result('pg10').run;
model.result('pg10').feature('surf2').create('filt1', 'Filter');
model.result('pg10').run;
model.result('pg10').feature('surf2').feature('filt1').set('expr', 'sqrt(rev2x^2+rev2y^2)<D/2 && abs(rev2z)<L/2');

model.view('view4').camera.set('zoomanglefull', 22.414417266845703);
model.view('view4').camera.setIndex('position', 1027.87939453125, 0);
model.view('view4').camera.setIndex('position', -2057.474365234375, 1);
model.view('view4').camera.setIndex('position', 903.16552734375, 2);
model.view('view4').camera.set('target', [-7.38037109375 0 0]);
model.view('view4').camera.setIndex('target', 41.393798828125, 1);
model.view('view4').camera.setIndex('target', -6.969482421875, 2);
model.view('view4').camera.setIndex('up', -0.14546343684196472, 0);
model.view('view4').camera.setIndex('up', 0.33233827352523804, 1);
model.view('view4').camera.setIndex('up', 0.931868851184845, 2);
model.view('view4').camera.set('rotationpoint', [100 50 5]);
model.view('view4').camera.setIndex('viewoffset', -0.11194504052400589, 0);
model.view('view4').camera.setIndex('viewoffset', 0.05399199202656746, 1);

model.result('pg10').run;
model.result('pg10').create('ann1', 'Annotation');
model.result('pg10').feature('ann1').set('text', 'With graphene cloak');
model.result('pg10').feature('ann1').set('posxexpr', -100);
model.result('pg10').feature('ann1').set('poszexpr', 230);
model.result('pg10').feature('ann1').set('showpoint', false);
model.result('pg10').feature.duplicate('ann2', 'ann1');
model.result('pg10').run;
model.result('pg10').feature('ann2').set('text', 'Without graphene cloak');
model.result('pg10').feature('ann2').set('posxexpr', 150);
model.result('pg10').feature('ann2').set('poszexpr', 260);
model.result('pg10').feature.duplicate('ann3', 'ann2');
model.result('pg10').run;
model.result('pg10').feature('ann3').set('text', 'C_scatt = eval(sum(withsol(''sol1'',C_scatt,setval(freq,freq),setind(modeNum,index)),index,1,2*highestMode+1), um^2) um^2');
model.result('pg10').feature('ann3').set('posxexpr', 0);
model.result('pg10').feature('ann3').set('poszexpr', 0);
model.result('pg10').feature.duplicate('ann4', 'ann3');
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').feature('ann3').create('trn1', 'Translation');
model.result('pg10').run;
model.result('pg10').feature('ann3').feature('trn1').set('trans', [-130 -20 -220]);
model.result('pg10').run;
model.result('pg10').feature('ann4').set('text', 'C_scatt = eval(sum(withsol(''sol2'',C_scatt,setval(freq,3[THz]),setind(modeNum,index)),index,1,2*highestMode+1), um^2) um^2');
model.result('pg10').feature('ann4').create('trn1', 'Translation');
model.result('pg10').run;
model.result('pg10').feature('ann4').feature('trn1').set('trans', [140 40 -200]);

model.view('view4').set('showgrid', false);
model.view('view4').set('showaxisorientation', false);

model.title('Cloaking of a Cylindrical Scatterer with Graphene');

model.description('In this model, we introduce a cloaking method using an electrically tuned monolayer of graphene. We will show that when a cylindrical dielectric scatterer is covered in graphene, the scattering cross section is greatly reduced at the designated frequency, making it electromagnetically invisible. This model aims to demonstrate the use of linearly polarized plane wave background field in a 2D axisymmetric model.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('cylinder_graphene_cloak.mph');

model.modelNode.label('Components');

out = model;
