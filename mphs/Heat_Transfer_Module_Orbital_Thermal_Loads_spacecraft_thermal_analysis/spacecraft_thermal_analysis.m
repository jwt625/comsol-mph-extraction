function out = model
%
% spacecraft_thermal_analysis.m
%
% Model exported on May 26 2025, 21:29 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Orbital_Thermal_Loads');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');
model.physics.create('otl', 'OrbitalThermalLoadsEvents', 'geom1');
model.physics('otl').model('comp1');
model.physics.create('ev', 'Events', 'geom1');
model.physics('ev').model('comp1');

model.multiphysics.create('htrad1', 'HeatTransferWithSurfaceToSurfaceRadiation', 'geom1', 2);
model.multiphysics('htrad1').set('Heat_physics', 'ht');
model.multiphysics('htrad1').set('Rad_physics', 'otl');
model.multiphysics('htrad1').selection.all;

model.study.create('std1');
model.study('std1').create('otl', 'OrbitThermalLoads');
model.study('std1').feature('otl').set('solnum', 'auto');
model.study('std1').feature('otl').set('notsolnum', 'auto');
model.study('std1').feature('otl').set('outputmap', {});
model.study('std1').feature('otl').setSolveFor('/physics/ht', true);
model.study('std1').feature('otl').setSolveFor('/physics/otl', true);
model.study('std1').feature('otl').setSolveFor('/physics/ev', true);
model.study('std1').feature('otl').setSolveFor('/multiphysics/htrad1', true);
model.study('std1').create('ot', 'OrbitalTemperature');
model.study('std1').feature('ot').set('solnum', 'auto');
model.study('std1').feature('ot').set('notsolnum', 'auto');
model.study('std1').feature('ot').set('outputmap', {});
model.study('std1').feature('ot').setSolveFor('/physics/ht', true);
model.study('std1').feature('ot').setSolveFor('/physics/otl', true);
model.study('std1').feature('ot').setSolveFor('/physics/ev', true);
model.study('std1').feature('ot').setSolveFor('/multiphysics/htrad1', true);

model.param.set('Efficiency', '0.3');
model.param.descr('Efficiency', 'Solar cell efficiency');

model.geom('geom1').insertFile('spacecraft_thermal_analysis_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('All Radiative Boundaries');
model.selection('sel1').all;
model.selection('sel1').geom('geom1', 3, 2, {'exterior'});
model.selection('sel1').all;
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').set([0]);
model.selection('sel2').geom('geom1', 3, 2, {'exterior'});
model.selection('sel2').set([0]);
model.selection('sel2').label('Space-Facing Boundaries');
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Solar Cells');
model.selection('sel3').geom(2);
model.selection('sel3').set([5 12 39 83]);

model.cpl.create('maxop1', 'Maximum', 'geom1');
model.cpl('maxop1').label('Maximum on All Domains');
model.cpl('maxop1').selection.all;
model.cpl.create('minop1', 'Minimum', 'geom1');
model.cpl('minop1').label('Minimum on All Domains');
model.cpl('minop1').selection.all;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').label('Aluminum');
model.material('mat1').set('family', 'aluminum');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat1').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.33');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-350[GPa]');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat2').label('Copper');
model.material('mat2').set('family', 'copper');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.35');
model.material('mat2').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat2').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat2').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat2').propertyGroup('linzRes').addInput('temperature');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').label('FR4 (Circuit Board)');
model.material('mat3').set('family', 'pcb');
model.material('mat3').set('color', 'custom');
model.material('mat3').set('customcolor', '0 0.5019607843137255 0.25098039215686274');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'0.004[S/m]' '0' '0' '0' '0.004[S/m]' '0' '0' '0' '0.004[S/m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'4.5' '0' '0' '0' '4.5' '0' '0' '0' '4.5'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'18e-6[1/K]' '0' '0' '0' '18e-6[1/K]' '0' '0' '0' '18e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '1369[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('density', '1900[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'0.3[W/(m*K)]' '0' '0' '0' '0.3[W/(m*K)]' '0' '0' '0' '0.3[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '22[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.15');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat4').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat4').label('Silicon');
model.material('mat4').set('family', 'custom');
model.material('mat4').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat4').set('diffuse', 'custom');
model.material('mat4').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat4').set('ambient', 'custom');
model.material('mat4').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat4').set('noise', true);
model.material('mat4').set('fresnel', 0.7);
model.material('mat4').set('roughness', 0.5);
model.material('mat4').set('diffusewrap', 0);
model.material('mat4').set('reflectance', 0);
model.material('mat4').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('electricconductivity', {'1e-12[S/m]' '0' '0' '0' '1e-12[S/m]' '0' '0' '0' '1e-12[S/m]'});
model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', {'2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]'});
model.material('mat4').propertyGroup('def').set('heatcapacity', '700[J/(kg*K)]');
model.material('mat4').propertyGroup('def').set('relpermittivity', {'11.7' '0' '0' '0' '11.7' '0' '0' '0' '11.7'});
model.material('mat4').propertyGroup('def').set('density', '2329[kg/m^3]');
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]'});
model.material('mat4').propertyGroup('Enu').set('E', '170[GPa]');
model.material('mat4').propertyGroup('Enu').set('nu', '0.28');
model.material('mat4').propertyGroup('RefractiveIndex').set('n', {'3.48' '0' '0' '0' '3.48' '0' '0' '0' '3.48'});
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat5').label('Titanium beta-21S');
model.material('mat5').set('family', 'titanium');
model.material('mat5').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat5').propertyGroup('def').set('electricconductivity', {'7.407e5[S/m]' '0' '0' '0' '7.407e5[S/m]' '0' '0' '0' '7.407e5[S/m]'});
model.material('mat5').propertyGroup('def').set('thermalexpansioncoefficient', {'7.06e-6[1/K]' '0' '0' '0' '7.06e-6[1/K]' '0' '0' '0' '7.06e-6[1/K]'});
model.material('mat5').propertyGroup('def').set('heatcapacity', '710[J/(kg*K)]');
model.material('mat5').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat5').propertyGroup('def').set('density', '4940[kg/m^3]');
model.material('mat5').propertyGroup('def').set('thermalconductivity', {'7.5[W/(m*K)]' '0' '0' '0' '7.5[W/(m*K)]' '0' '0' '0' '7.5[W/(m*K)]'});
model.material('mat5').propertyGroup('Enu').set('E', '105[GPa]');
model.material('mat5').propertyGroup('Enu').set('nu', '0.33');
model.material('mat2').selection.set([8 10]);
model.material('mat3').selection.set([2 3 4 5 6 7 11]);
model.material('mat4').selection.geom('geom1', 2);
model.material('mat4').selection.named('sel3');
model.material('mat5').selection.set([9]);

model.physics('ht').create('hs1', 'HeatSource', 3);
model.physics('ht').feature('hs1').selection.set([8]);
model.physics('ht').feature('hs1').set('heatSourceType', 'HeatRate');
model.physics('ht').feature('hs1').set('P0', '0.5[W]+4.5[W]*HS1');
model.physics('ht').create('hs2', 'HeatSource', 3);
model.physics('ht').feature('hs2').selection.set([10]);
model.physics('ht').feature('hs2').set('heatSourceType', 'HeatRate');
model.physics('ht').feature('hs2').set('P0', '1[W]');
model.physics('ht').create('sls1', 'SolidLayeredShell', 2);
model.physics('ht').feature('sls1').selection.named('sel3');
model.physics('ht').feature('sls1').set('LayerType', 'General');

model.material('mat4').propertyGroup.create('shell', 'Shell');
model.material('mat4').propertyGroup('shell').set('lth', {'0.5[mm]'});
model.material('mat4').set('middlePlane', 'bottom');

model.physics('ht').create('tc1', 'ThermalContact', 2);
model.physics('ht').feature('tc1').selection.set([43 47 67]);
model.physics('ht').feature('tc1').set('ContactModel', 'EquThinLayer');
model.physics('ht').feature('tc1').set('Req', '0.01[K*m^2/W]');
model.physics('ht').feature('tc1').set('hrad', '0[W/(m^2*K)]');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 2);
model.physics('ht').feature('hf1').selection.named('sel3');
model.physics('ht').feature('hf1').set('q0_input', '-otl.Grad_band1*Efficiency');
model.physics('otl').selection.named('sel1');
model.physics('otl').feature('plp1').set('longType', 'spacecraft');
model.physics('otl').feature('plp1').set('planetAlbedoTypeSolAmb', 'userdefDistribution');
model.physics('otl').feature('plp1').set('planetAlbedoSolAmb', 0.3);
model.physics('otl').feature('plp1').set('planetRadiativeFluxTypeSolAmb', 'userdefBand');
model.physics('otl').feature('plp1').setIndex('planetRadiativeFluxEachBandSolAmb', '225[W/m^2]', 1, 0);
model.physics('otl').feature('op1').set('orbitType', 'circular');
model.physics('otl').feature('op1').set('R_orbit', 'otl.R_planet+400[km]');
model.physics('otl').feature('op1').set('i_orbit', '50[deg]');
model.physics('otl').feature('op1').set('omegaType', 'ltan');
model.physics('otl').feature('op1').set('omegaTime_orbit', '15[h]');
model.physics('otl').feature('so1').set('primaryRotation', 'rate');
model.physics('otl').feature('so1').set('primaryAngularRate', '2*360[deg]/otl.T_orbit');
model.physics('otl').feature('dsurf1').label('Diffuse Surface, Inside');
model.physics('otl').feature('dsurf1').set('epsilon_radSolAmb_mat', 'userdef');
model.physics('otl').feature('dsurf1').set('epsilon_radSolAmb', 0.8);
model.physics('otl').create('dsurf2', 'DiffuseSurface', 2);
model.physics('otl').feature('dsurf2').selection.named('sel2');
model.physics('otl').feature('dsurf2').label('Diffuse Surface, Outside');
model.physics('otl').feature('dsurf2').set('epsilon_radSolAmb_mat', 'userdefBand');
model.physics('otl').feature('dsurf2').setIndex('epsilon_rad_bandSolAmb', 0.2, 0, 0);
model.physics('otl').feature('dsurf2').setIndex('epsilon_rad_bandSolAmb', 0.85, 1, 0);
model.physics('otl').create('dsurf3', 'DiffuseSurface', 2);
model.physics('otl').feature('dsurf3').selection.named('sel3');
model.physics('otl').feature('dsurf3').label('Diffuse Surface, Solar Cells');
model.physics('otl').feature('dsurf3').set('epsilon_radSolAmb_mat', 'userdefBand');
model.physics('otl').feature('dsurf3').setIndex('epsilon_rad_bandSolAmb', 0.99, 0, 0);
model.physics('otl').feature('dsurf3').setIndex('epsilon_rad_bandSolAmb', 0.95, 1, 0);
model.physics('ev').create('ds1', 'DiscreteStates', -1);
model.physics('ev').feature('ds1').label('Instrument 1, State Variable');
model.physics('ev').feature('ds1').setIndex('dim', 'HS1', 0, 0);
model.physics('ev').feature('ds1').setIndex('dimInit', 0, 0, 0);
model.physics('ev').feature('ds1').setIndex('dimDescr', 'Heat Source Indicator', 0, 0);
model.physics('ev').create('expl1', 'ExplicitEvent', -1);
model.physics('ev').feature('expl1').label('Instrument 1, Turn On');
model.physics('ev').feature('expl1').set('start', 'otl.t_inEclipse+20[min]');
model.physics('ev').feature('expl1').set('period', 'otl.T_eclipse');
model.physics('ev').feature('expl1').setIndex('reInitName', 'HS1', 0, 0);
model.physics('ev').feature('expl1').setIndex('reInitValue', 0, 0, 0);
model.physics('ev').feature('expl1').setIndex('reInitValue', 1, 0, 0);
model.physics('ev').create('expl2', 'ExplicitEvent', -1);
model.physics('ev').feature('expl2').label('Instrument 1, Turn Off');
model.physics('ev').feature('expl2').set('start', 'otl.t_inEclipse+20[min]+15[min]');
model.physics('ev').feature('expl2').set('period', 'otl.T_eclipse');
model.physics('ev').feature('expl2').setIndex('reInitName', 'HS1', 0, 0);
model.physics('ev').feature('expl2').setIndex('reInitValue', 0, 0, 0);

model.mesh('mesh1').autoMeshSize(8);
model.mesh('mesh1').run;

model.study('std1').feature('otl').set('orbitlist', 'range(0,0.02,1)');
model.study('std1').feature('ot').set('orbitlist', 'range(0,0.02,4)');

model.sol.create('sol1');

model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'otl');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'otl');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.1,1)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventout', true);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', false);
model.sol('sol1').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol1').feature('t1').set('endtimeinterpolation', false);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'otl');
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 5);
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').label('Direct (Merged)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('t1').feature('i1').label('AMG, radiation variables (otl)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').create('i2', 'Iterative');
model.sol('sol1').feature('t1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i2').label('GMG, radiation variables (otl)');
model.sol('sol1').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('mcasegen', 'any');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 5);
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'ot');

model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');

model.sol('sol1').create('v2', 'Variables');

model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');
model.study('std1').getSolverSequences('SolverSequence');

model.sol('sol1').feature('v2').feature('comp1_otl_dsurf2_Jd_band').set('scalemethod', 'init');
model.sol('sol1').feature('v2').feature('comp1_otl_dsurf2_Ju_band').set('scalemethod', 'init');
model.sol('sol1').feature('v2').feature('comp1_otl_dsurf3_Jd_band').set('scalemethod', 'init');
model.sol('sol1').feature('v2').feature('comp1_otl_dsurf3_Ju_band').set('scalemethod', 'init');
model.sol('sol1').feature('v2').feature('comp1_otl_dsurf1_Ju_band').set('scalemethod', 'init');
model.sol('sol1').feature('v2').feature('comp1_otl_dsurf1_Jd_band').set('scalemethod', 'init');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'ot');
model.sol('sol1').create('t2', 'Time');
model.sol('sol1').feature('t2').set('tlist', 'range(0,0.1,1)');
model.sol('sol1').feature('t2').set('plot', 'off');
model.sol('sol1').feature('t2').set('plotgroup', 'Default');
model.sol('sol1').feature('t2').set('plotfreq', 'tout');
model.sol('sol1').feature('t2').set('probesel', 'all');
model.sol('sol1').feature('t2').set('probes', {});
model.sol('sol1').feature('t2').set('probefreq', 'tsteps');
model.sol('sol1').feature('t2').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t2').set('atolmethod', {'comp1_otl_dsurf1_Jd_band' 'global' 'comp1_otl_dsurf1_Ju_band' 'global' 'comp1_otl_dsurf2_Jd_band' 'global' 'comp1_otl_dsurf2_Ju_band' 'global' 'comp1_otl_dsurf3_Jd_band' 'global'  ...
'comp1_otl_dsurf3_Ju_band' 'global' 'comp1_T' 'global' 'comp1_otl_isIlluminated' 'global' 'comp1_otl_fastTumbling' 'global' 'comp1_otl_axesEventIndex' 'global'  ...
'comp1_otl_orientationEventIndex' 'global' 'comp1_otl_op1_storeNu_orbit' 'global' 'comp1_ev_ds1_dim' 'global'});
model.sol('sol1').feature('t2').set('atol', {'comp1_otl_dsurf1_Jd_band' '1e-3' 'comp1_otl_dsurf1_Ju_band' '1e-3' 'comp1_otl_dsurf2_Jd_band' '1e-3' 'comp1_otl_dsurf2_Ju_band' '1e-3' 'comp1_otl_dsurf3_Jd_band' '1e-3'  ...
'comp1_otl_dsurf3_Ju_band' '1e-3' 'comp1_T' '1e-3' 'comp1_otl_isIlluminated' '1e-3' 'comp1_otl_fastTumbling' '1e-3' 'comp1_otl_axesEventIndex' '1e-3'  ...
'comp1_otl_orientationEventIndex' '1e-3' 'comp1_otl_op1_storeNu_orbit' '1e-3' 'comp1_ev_ds1_dim' '1e-3'});
model.sol('sol1').feature('t2').set('atolvaluemethod', {'comp1_otl_dsurf1_Jd_band' 'factor' 'comp1_otl_dsurf1_Ju_band' 'factor' 'comp1_otl_dsurf2_Jd_band' 'factor' 'comp1_otl_dsurf2_Ju_band' 'factor' 'comp1_otl_dsurf3_Jd_band' 'factor'  ...
'comp1_otl_dsurf3_Ju_band' 'factor' 'comp1_T' 'factor' 'comp1_otl_isIlluminated' 'factor' 'comp1_otl_fastTumbling' 'factor' 'comp1_otl_axesEventIndex' 'factor'  ...
'comp1_otl_orientationEventIndex' 'factor' 'comp1_otl_op1_storeNu_orbit' 'factor' 'comp1_ev_ds1_dim' 'factor'});
model.sol('sol1').feature('t2').set('eventout', true);
model.sol('sol1').feature('t2').set('reacf', true);
model.sol('sol1').feature('t2').set('storeudot', true);
model.sol('sol1').feature('t2').set('tstepsbdf', 'intermediate');
model.sol('sol1').feature('t2').set('endtimeinterpolation', false);
model.sol('sol1').feature('t2').set('estrat', 'exclude');
model.sol('sol1').feature('t2').set('maxorder', 2);
model.sol('sol1').feature('t2').set('control', 'ot');
model.sol('sol1').feature('t2').create('seDef', 'Segregated');
model.sol('sol1').feature('t2').create('se1', 'Segregated');
model.sol('sol1').feature('t2').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('t2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('t2').feature('se1').feature('ss1').set('segvar', {'comp1_T'});
model.sol('sol1').feature('t2').feature('se1').feature('ss1').set('subdamp', 0.8);
model.sol('sol1').feature('t2').feature('se1').feature('ss1').set('subjtech', 'once');
model.sol('sol1').feature('t2').create('d1', 'Direct');
model.sol('sol1').feature('t2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t2').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('t2').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('t2').feature('se1').feature('ss1').label('Temperature');
model.sol('sol1').feature('t2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('t2').feature('se1').feature('ss2').set('segvar', {'comp1_ev_ds1_dim' 'comp1_otl_isIlluminated' 'comp1_otl_fastTumbling' 'comp1_otl_axesEventIndex' 'comp1_otl_orientationEventIndex' 'comp1_otl_op1_storeNu_orbit'});
model.sol('sol1').feature('t2').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol1').feature('t2').feature('se1').feature('ss2').set('subjtech', 'once');
model.sol('sol1').feature('t2').create('d2', 'Direct');
model.sol('sol1').feature('t2').feature('d2').label('Direct (Merged)');
model.sol('sol1').feature('t2').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('t2').feature('se1').feature('ss2').label('Merged Variables');
model.sol('sol1').feature('t2').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('t2').feature('se1').feature('ss3').set('segvar', {'comp1_otl_dsurf1_Ju_band' 'comp1_otl_dsurf1_Jd_band' 'comp1_otl_dsurf2_Ju_band' 'comp1_otl_dsurf2_Jd_band' 'comp1_otl_dsurf3_Ju_band' 'comp1_otl_dsurf3_Jd_band'});
model.sol('sol1').feature('t2').feature('se1').feature('ss3').set('subdamp', 0.8);
model.sol('sol1').feature('t2').feature('se1').feature('ss3').set('subjtech', 'once');
model.sol('sol1').feature('t2').create('d3', 'Direct');
model.sol('sol1').feature('t2').feature('d3').set('linsolver', 'pardiso');
model.sol('sol1').feature('t2').feature('d3').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t2').feature('d3').label('Direct, radiation variables');
model.sol('sol1').feature('t2').feature('se1').feature('ss3').set('linsolver', 'd3');
model.sol('sol1').feature('t2').feature('se1').feature('ss3').label('Radiosity');
model.sol('sol1').feature('t2').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol1').feature('t2').feature('se1').set('segaaccdim', 5);
model.sol('sol1').feature('t2').feature('se1').set('segaaccmix', 0.9);
model.sol('sol1').feature('t2').feature('se1').set('segaaccdelay', 0);
model.sol('sol1').feature('t2').feature('se1').set('ntolfact', 0.1);
model.sol('sol1').feature('t2').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('t2').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('t2').create('i1', 'Iterative');
model.sol('sol1').feature('t2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t2').feature('i1').set('rhob', 400);
model.sol('sol1').feature('t2').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('t2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t2').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('t2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t2').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t2').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t2').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('t2').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t2').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t2').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('t2').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t2').create('i2', 'Iterative');
model.sol('sol1').feature('t2').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('t2').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('t2').feature('i2').set('rhob', 400);
model.sol('sol1').feature('t2').feature('i2').label('AMG, radiation variables (otl)');
model.sol('sol1').feature('t2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t2').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t2').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('t2').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t2').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t2').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('t2').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t2').create('i3', 'Iterative');
model.sol('sol1').feature('t2').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('t2').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('t2').feature('i3').set('rhob', 20);
model.sol('sol1').feature('t2').feature('i3').label('GMG, radiation variables (otl)');
model.sol('sol1').feature('t2').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('t2').feature('i3').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('t2').feature('i3').feature('mg1').set('mcasegen', 'any');
model.sol('sol1').feature('t2').feature('i3').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t2').feature('i3').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('t2').feature('i3').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t2').feature('i3').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('t2').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t2').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t2').feature.remove('fcDef');
model.sol('sol1').feature('t2').feature.remove('seDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset.create('lshl1', 'LayeredMaterial');
model.result.dataset('lshl1').set('data', 'dset1');
model.result.dataset('lshl1').selection.geom('geom1', 2);
model.result.dataset('lshl1').selection.set([5 12 39 83]);
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Temperature (ht)');
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond2/pcond1/pg1');
model.result('pg1').selection.geom('geom1', 3);
model.result('pg1').selection.set([1 2 3 4 5 6 7 8 9 10 11]);
model.result('pg1').feature.create('vol1', 'Volume');
model.result('pg1').feature('vol1').label('Domain');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('solutionparams', 'parent');
model.result('pg1').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('vol1').set('smooth', 'internal');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('data', 'parent');
model.result('pg1').feature.create('vol2', 'Volume');
model.result('pg1').feature('vol2').label('Layered Shell');
model.result('pg1').feature('vol2').set('data', 'lshl1');
model.result('pg1').feature('vol2').setIndex('looplevel', 233, 0);
model.result('pg1').feature('vol2').set('solutionparams', 'parent');
model.result('pg1').feature('vol2').set('titletype', 'none');
model.result('pg1').feature('vol2').set('smooth', 'internal');
model.result('pg1').feature('vol2').set('data', 'lshl1');
model.result('pg1').feature('vol2').set('inheritplot', 'vol1');
model.result('pg1').feature.create('line1', 'Line');
model.result('pg1').feature('line1').label('Layered Shell Edges');
model.result('pg1').feature('line1').set('data', 'lshl1');
model.result('pg1').feature('line1').setIndex('looplevel', 233, 0);
model.result('pg1').feature('line1').set('solutionparams', 'parent');
model.result('pg1').feature('line1').set('expr', '1');
model.result('pg1').feature('line1').set('titletype', 'none');
model.result('pg1').feature('line1').set('coloring', 'uniform');
model.result('pg1').feature('line1').set('color', 'fromtheme');
model.result('pg1').feature('line1').set('smooth', 'internal');
model.result('pg1').feature('line1').set('data', 'lshl1');
model.result.dataset.create('ps1', 'ParSurface');
model.result.dataset('ps1').label('Planet');
model.result.dataset('ps1').set('data', 'none');
model.result.dataset('ps1').set('par1', 'Longitude');
model.result.dataset('ps1').set('parmin1', '-pi');
model.result.dataset('ps1').set('parmax1', 'pi');
model.result.dataset('ps1').set('par2', 'Latitude');
model.result.dataset('ps1').set('parmin2', '-0.5*pi');
model.result.dataset('ps1').set('parmax2', '0.5*pi');
model.result.dataset('ps1').set('exprx', 'comp1.otl.x_planet(comp1.otl.R_planet,comp1.otl.rot_planet,comp1.otl.A_off,Latitude,Longitude)');
model.result.dataset('ps1').set('expry', 'comp1.otl.y_planet(comp1.otl.R_planet,comp1.otl.rot_planet,comp1.otl.A_off,Latitude,Longitude)');
model.result.dataset('ps1').set('exprz', 'comp1.otl.z_planet(comp1.otl.R_planet,comp1.otl.rot_planet,Latitude,Longitude)');
model.result.dataset('ps1').set('global', true);
model.result.dataset('ps1').set('res1', 360);
model.result.dataset('ps1').set('res2', 180);
model.result.dataset('ps1').set('data', 'none');
model.result.dataset.create('tran1', 'Transformation3D');
model.result.dataset('tran1').label('Spacecraft Orbit');
model.result.dataset('tran1').set('data', 'none');
model.result.dataset('tran1').set('transtype', 'general');
model.result.dataset('tran1').set('transmatrix', {'comp1.otl.Tviz11' 'comp1.otl.Tviz12' 'comp1.otl.Tviz13'; 'comp1.otl.Tviz21' 'comp1.otl.Tviz22' 'comp1.otl.Tviz23'; 'comp1.otl.Tviz31' 'comp1.otl.Tviz32' 'comp1.otl.Tviz33'});
model.result.dataset('tran1').set('translation', {'comp1.otl.X_viz' 'comp1.otl.Y_viz' 'comp1.otl.Z_viz'});
model.result.dataset('tran1').set('data', 'none');
model.result.dataset('ps1').set('data', 'dset1');
model.result.dataset('tran1').set('data', 'dset1');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Orbit Visualization (otl)');
model.result('pg2').set('data', 'ps1');
model.result('pg2').setIndex('looplevel', 233, 0);
model.result('pg2').set('defaultPlotID', 'otl/OTL_PhysicsInterfaces/icom2/pdef1/pcond6/pg3');
model.result('pg2').feature.create('img1', 'Image');
model.result('pg2').feature('img1').label('Planet');
model.result('pg2').feature('img1').set('showsolutionparams', 'on');
model.result('pg2').feature('img1').set('solutionparams', 'parent');
model.result('pg2').feature('img1').set('filename', 'data:///physics/images/earth.jpg');
model.result('pg2').feature('img1').set('mapping', 'manual');
model.result('pg2').feature('img1').set('uexpr', '0.5*(Longitude-pi)/pi');
model.result('pg2').feature('img1').set('vexpr', '(Latitude+0.5*pi)/pi');
model.result('pg2').feature('img1').set('resolution', 'norefine');
model.result('pg2').feature('img1').set('showsolutionparams', 'on');
model.result('pg2').feature('img1').set('data', 'parent');
model.result('pg2').feature.create('pttraj1', 'PointTrajectories');
model.result('pg2').feature('pttraj1').label('Spacecraft Orbit');
model.result('pg2').feature('pttraj1').set('showsolutionparams', 'on');
model.result('pg2').feature('pttraj1').set('solutionparams', 'parent');
model.result('pg2').feature('pttraj1').set('expr', {'otl.X_ECSViz' 'otl.Y_ECSViz' 'otl.Z_ECSViz'});
model.result('pg2').feature('pttraj1').set('titletype', 'none');
model.result('pg2').feature('pttraj1').set('linetype', 'tube');
model.result('pg2').feature('pttraj1').set('interpolation', 'uniform');
model.result('pg2').feature('pttraj1').set('interpcount', 500);
model.result('pg2').feature('pttraj1').set('radiusexpr', '0.01*otl.R_planet');
model.result('pg2').feature('pttraj1').set('tuberadiusscaleactive', true);
model.result('pg2').feature('pttraj1').set('showsolutionparams', 'on');
model.result('pg2').feature('pttraj1').set('data', 'parent');
model.result('pg2').feature('pttraj1').feature.create('col1', 'Color');
model.result('pg2').feature('pttraj1').feature('col1').set('expr', 'otl.isIlluminated');
model.result('pg2').feature('pttraj1').feature('col1').set('rangecoloractive', 'on');
model.result('pg2').feature('pttraj1').feature('col1').set('rangecolormax', 1);
model.result('pg2').feature('pttraj1').feature('col1').set('coloring', 'gradient');
model.result('pg2').feature('pttraj1').feature('col1').set('colorlegend', false);
model.result('pg2').feature('pttraj1').feature('col1').set('topcolor', 'yellow');
model.result('pg2').feature.create('pttraj2', 'PointTrajectories');
model.result('pg2').feature('pttraj2').label('Sun Vector');
model.result('pg2').feature('pttraj2').set('showsolutionparams', 'on');
model.result('pg2').feature('pttraj2').set('solutionparams', 'parent');
model.result('pg2').feature('pttraj2').set('expr', {'-1.5*otl.R_planet*otl.SVX_ECS' '-1.5*otl.R_planet*otl.SVY_ECS' '-1.5*otl.R_planet*otl.SVZ_ECS'});
model.result('pg2').feature('pttraj2').set('titletype', 'none');
model.result('pg2').feature('pttraj2').set('linetype', 'tube');
model.result('pg2').feature('pttraj2').set('radiusexpr', '0.01*otl.R_planet');
model.result('pg2').feature('pttraj2').set('tuberadiusscaleactive', true);
model.result('pg2').feature('pttraj2').set('pointtype', 'arrow');
model.result('pg2').feature('pttraj2').set('pointcolor', 'yellow');
model.result('pg2').feature('pttraj2').set('arrowexpr', {'0.5*otl.SVX_ECS*otl.R_planet' '0.5*otl.SVY_ECS*otl.R_planet' '0.5*otl.SVZ_ECS*otl.R_planet'});
model.result('pg2').feature('pttraj2').set('arrowbase', 'head');
model.result('pg2').feature('pttraj2').set('arrowscaleactive', true);
model.result('pg2').feature('pttraj2').set('showsolutionparams', 'on');
model.result('pg2').feature('pttraj2').set('data', 'parent');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Eclipse');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solutionparams', 'parent');
model.result('pg2').feature('surf1').set('expr', '1');
model.result('pg2').feature('surf1').set('titletype', 'none');
model.result('pg2').feature('surf1').set('coloring', 'uniform');
model.result('pg2').feature('surf1').set('color', 'black');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature('surf1').feature.create('filt1', 'Filter');
model.result('pg2').feature('surf1').feature('filt1').set('expr', 'otl.SVX_ECS*x+otl.SVY_ECS*y+otl.SVZ_ECS*z>0');
model.result('pg2').feature('surf1').feature('filt1').set('shownodespec', 'on');
model.result('pg2').feature('surf1').feature.create('tran1', 'Transparency');
model.result('pg2').feature('surf1').feature('tran1').set('transparency', 0.7);
model.result('pg2').feature('surf1').feature.create('def1', 'Deform');
model.result('pg2').feature('surf1').feature('def1').set('expr', {'(-1+otl.scale_eclipse/otl.R_planet)*x' '(-1+otl.scale_eclipse/otl.R_planet)*y' '(-1+otl.scale_eclipse/otl.R_planet)*z'});
model.result('pg2').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').label('Equator');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('solutionparams', 'parent');
model.result('pg2').feature('con1').set('expr', 'Latitude');
model.result('pg2').feature('con1').set('titletype', 'none');
model.result('pg2').feature('con1').set('levelmethod', 'levels');
model.result('pg2').feature('con1').set('coloring', 'uniform');
model.result('pg2').feature('con1').set('colorlegend', false);
model.result('pg2').feature('con1').set('color', 'black');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('data', 'parent');
model.result('pg2').feature.create('con2', 'Contour');
model.result('pg2').feature('con2').label('Prime Meridian');
model.result('pg2').feature('con2').set('showsolutionparams', 'on');
model.result('pg2').feature('con2').set('solutionparams', 'parent');
model.result('pg2').feature('con2').set('expr', 'Longitude');
model.result('pg2').feature('con2').set('titletype', 'none');
model.result('pg2').feature('con2').set('levelmethod', 'levels');
model.result('pg2').feature('con2').set('coloring', 'uniform');
model.result('pg2').feature('con2').set('colorlegend', false);
model.result('pg2').feature('con2').set('color', 'black');
model.result('pg2').feature('con2').set('showsolutionparams', 'on');
model.result('pg2').feature('con2').set('data', 'parent');
model.result('pg2').feature.create('surf2', 'Surface');
model.result('pg2').feature('surf2').label('Spacecraft');
model.result('pg2').feature('surf2').set('data', 'tran1');
model.result('pg2').feature('surf2').setIndex('looplevel', 233, 0);
model.result('pg2').feature('surf2').set('solutionparams', 'parent');
model.result('pg2').feature('surf2').set('expr', 'otl.J');
model.result('pg2').feature('surf2').set('resolution', 'norefine');
model.result('pg2').feature('surf2').set('data', 'tran1');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('vol1').create('sel1', 'Selection');
model.result('pg1').feature('vol1').feature('sel1').selection.set([5 8 9 10]);
model.result('pg1').run;
model.result('pg1').feature.remove('vol2');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('titletype', 'none');
model.result('pg1').feature('surf1').create('sel1', 'Selection');
model.result('pg1').feature('surf1').feature('sel1').selection.geom('geom1', 3);
model.result('pg1').feature('surf1').feature('sel1').selection.set([1 4 6 7 11]);
model.result('pg1').run;
model.result('pg1').feature('surf1').create('mtrl1', 'MaterialAppearance');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').set('edges', false);
model.result('pg1').run;

model.view('view1').camera.setIndex('position', -0.393131285905838, 0);
model.view('view1').camera.setIndex('position', -0.7843700647354126, 1);
model.view('view1').camera.setIndex('position', 0.23836903274059296, 2);
model.view('view1').camera.set('target', [0 0 0]);
model.view('view1').camera.setIndex('up', 0, 0);
model.view('view1').camera.setIndex('up', 0, 1);
model.view('view1').camera.set('up', [0 0 1]);
model.view('view1').camera.setIndex('viewoffset', 0, 0);
model.view('view1').camera.set('viewoffset', [0 0]);
model.view('view1').camera.set('zoomanglefull', 20.42918586730957);

model.result('pg1').run;
model.result('pg1').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').set('titletype', 'label');
model.result('pg3').label('Maximum And Minimum Temperature Over Time');
model.result('pg3').set('twoyaxes', true);
model.result('pg3').set('legendpos', 'middleright');
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'Temperature (degC)');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').setIndex('expr', 'maxop1(T)', 0);
model.result('pg3').feature('glob1').setIndex('unit', 'degC', 0);
model.result('pg3').feature('glob1').setIndex('descr', 'Maximum temperature', 0);
model.result('pg3').feature('glob1').setIndex('expr', 'minop1(T)', 1);
model.result('pg3').feature('glob1').setIndex('unit', 'degC', 1);
model.result('pg3').feature('glob1').setIndex('descr', 'Minimum temperature', 1);
model.result('pg3').run;
model.result('pg3').create('glob2', 'Global');
model.result('pg3').feature('glob2').set('markerpos', 'datapoints');
model.result('pg3').feature('glob2').set('linewidth', 'preference');
model.result('pg3').feature('glob2').setIndex('expr', 'otl.isIlluminated', 0);
model.result('pg3').feature('glob2').setIndex('unit', 1, 0);
model.result('pg3').feature('glob2').setIndex('descr', 'Illuminated', 0);
model.result('pg3').feature('glob2').set('plotonsecyaxis', true);
model.result('pg3').feature('glob2').set('legend', false);
model.result('pg3').run;
model.result('pg3').run;
model.result('pg1').run;

model.title('Spacecraft Thermal Analysis');

model.description('This model shows the workflow to compute the satellite temperature on multiple orbit periods. The direct solar, albedo, and Earth radiative thermal loads are precomputed in an Orbit Thermal Loads study and reused on multiple orbit periods in an Orbital Temperature study.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('spacecraft_thermal_analysis.mph');

model.modelNode.label('Components');

out = model;
