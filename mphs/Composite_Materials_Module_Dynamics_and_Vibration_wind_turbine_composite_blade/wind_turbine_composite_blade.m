function out = model
%
% wind_turbine_composite_blade.m
%
% Model exported on May 26 2025, 21:27 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Composite_Materials_Module/Dynamics_and_Vibration');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('shell', 'Shell', 'geom1');
model.physics('shell').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/shell', true);

model.param.set('th', '0.28[mm]');
model.param.descr('th', 'Layer thickness');
model.param.set('thc', '15[cm]');
model.param.descr('thc', 'Core thickness');
model.param.set('RPM', '15[rpm]');
model.param.descr('RPM', 'Blade RPM');
model.param.set('omega', '2*pi[rad]*RPM');
model.param.descr('omega', 'Blade angular speed');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('type', 'native');
model.geom('geom1').feature('imp1').set('filename', 'wind_turbine_composite_blade.mphbin');
model.geom('geom1').feature('imp1').importData;

model.view('view1').set('showgrid', false);
model.view('view1').camera.set('zoomanglefull', 8.61768913269043);
model.view('view1').camera.setIndex('position', -260.2982482910156, 0);
model.view('view1').camera.setIndex('position', -90.35176086425781, 1);
model.view('view1').camera.setIndex('position', -112.53822326660156, 2);
model.view('view1').camera.setIndex('target', 0.9875411987304688, 1);
model.view('view1').camera.setIndex('target', -1.9617843627929688, 2);
model.view('view1').camera.setIndex('up', 0.25470054149627686, 0);
model.view('view1').camera.setIndex('up', -0.9592927098274231, 1);
model.view('view1').camera.setIndex('up', 0.12200577557086945, 2);
model.view('view1').camera.setIndex('viewoffset', 0.02812984399497509, 0);
model.view('view1').camera.setIndex('viewoffset', 0.04417921602725983, 1);
model.view('view1').set('locked', true);
model.view('view1').set('showgrid', true);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Skin Boundaries');
model.selection('sel1').geom(2);
model.selection('sel1').set([50]);
model.selection('sel1').set('groupcontang', true);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Spar Boundaries');
model.selection('sel2').geom(2);
model.selection('sel2').set([3 5]);
model.selection('sel2').set('groupcontang', true);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Fixed Edges');
model.selection('sel3').geom(1);
model.selection('sel3').set([10]);
model.selection('sel3').set('groupcontang', true);

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.geom('geom1', 1);
model.cpl('aveop1').selection.named('sel3');
model.cpl('aveop1').set('frame', 'material');

model.coordSystem('sys1').set('mastercoordsystcomp', '1');
model.coordSystem('sys1').create('rn1', 'ReverseNormal');
model.coordSystem('sys1').feature('rn1').selection.named('sel1');

model.view('view1').hideObjects.create('hide1');
model.view('view1').hideObjects('hide1').init(2);
model.view('view1').hideObjects('hide1').add('imp1', [66 69 72 74 77 80 82 85 88]);
model.view('view1').set('showgrid', true);

model.material.create('mat1', 'Common', '');
model.material('mat1').label(['Material: Carbon' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Epoxy']);
model.material.create('lmat1', 'LayeredMaterial', '');
model.material('lmat1').label('Layered Material: CE-[0]_10');
model.material('lmat1').setIndex('thickness', 'th*10', 0);
model.material('lmat1').setIndex('meshPoints', 1, 0);
model.material.create('mat2', 'Common', '');
model.material('mat2').label(['Material: Glass' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Vinylester']);
model.material.create('lmat2', 'LayeredMaterial', '');
model.material('lmat2').label('Layered Material: GV-[0_5/45_5/-45_5/90_5]_s');
model.material('lmat2').setIndex('link', 'mat2', 0);
model.material('lmat2').setIndex('thickness', 'th*5', 0);
model.material('lmat2').setIndex('meshPoints', 1, 0);
model.material('lmat2').setIndex('layername', 'Layer 2', 1);
model.material('lmat2').setIndex('link', 'mat2', 1);
model.material('lmat2').setIndex('rotation', '0.0', 1);
model.material('lmat2').setIndex('thickness', 'th*5', 1);
model.material('lmat2').setIndex('meshPoints', 1, 1);
model.material('lmat2').setIndex('tag', 'lmat2_2', 1);
model.material('lmat2').setIndex('layername', 'Layer 2', 1);
model.material('lmat2').setIndex('link', 'mat2', 1);
model.material('lmat2').setIndex('rotation', '0.0', 1);
model.material('lmat2').setIndex('thickness', 'th*5', 1);
model.material('lmat2').setIndex('meshPoints', 1, 1);
model.material('lmat2').setIndex('tag', 'lmat2_2', 1);
model.material('lmat2').setIndex('layername', 'Layer 3', 2);
model.material('lmat2').setIndex('link', 'mat2', 2);
model.material('lmat2').setIndex('rotation', '0.0', 2);
model.material('lmat2').setIndex('thickness', 'th*5', 2);
model.material('lmat2').setIndex('meshPoints', 1, 2);
model.material('lmat2').setIndex('tag', 'lmat2_3', 2);
model.material('lmat2').setIndex('layername', 'Layer 3', 2);
model.material('lmat2').setIndex('link', 'mat2', 2);
model.material('lmat2').setIndex('rotation', '0.0', 2);
model.material('lmat2').setIndex('thickness', 'th*5', 2);
model.material('lmat2').setIndex('meshPoints', 1, 2);
model.material('lmat2').setIndex('tag', 'lmat2_3', 2);
model.material('lmat2').setIndex('layername', 'Layer 4', 3);
model.material('lmat2').setIndex('link', 'mat2', 3);
model.material('lmat2').setIndex('rotation', '0.0', 3);
model.material('lmat2').setIndex('thickness', 'th*5', 3);
model.material('lmat2').setIndex('meshPoints', 1, 3);
model.material('lmat2').setIndex('tag', 'lmat2_4', 3);
model.material('lmat2').setIndex('layername', 'Layer 4', 3);
model.material('lmat2').setIndex('link', 'mat2', 3);
model.material('lmat2').setIndex('rotation', '0.0', 3);
model.material('lmat2').setIndex('thickness', 'th*5', 3);
model.material('lmat2').setIndex('meshPoints', 1, 3);
model.material('lmat2').setIndex('tag', 'lmat2_4', 3);
model.material('lmat2').setIndex('layername', 'Layer 5', 4);
model.material('lmat2').setIndex('link', 'mat2', 4);
model.material('lmat2').setIndex('rotation', '0.0', 4);
model.material('lmat2').setIndex('thickness', 'th*5', 4);
model.material('lmat2').setIndex('meshPoints', 1, 4);
model.material('lmat2').setIndex('tag', 'lmat2_5', 4);
model.material('lmat2').setIndex('layername', 'Layer 5', 4);
model.material('lmat2').setIndex('link', 'mat2', 4);
model.material('lmat2').setIndex('rotation', '0.0', 4);
model.material('lmat2').setIndex('thickness', 'th*5', 4);
model.material('lmat2').setIndex('meshPoints', 1, 4);
model.material('lmat2').setIndex('tag', 'lmat2_5', 4);
model.material('lmat2').setIndex('layername', 'Layer 6', 5);
model.material('lmat2').setIndex('link', 'mat2', 5);
model.material('lmat2').setIndex('rotation', '0.0', 5);
model.material('lmat2').setIndex('thickness', 'th*5', 5);
model.material('lmat2').setIndex('meshPoints', 1, 5);
model.material('lmat2').setIndex('tag', 'lmat2_6', 5);
model.material('lmat2').setIndex('layername', 'Layer 6', 5);
model.material('lmat2').setIndex('link', 'mat2', 5);
model.material('lmat2').setIndex('rotation', '0.0', 5);
model.material('lmat2').setIndex('thickness', 'th*5', 5);
model.material('lmat2').setIndex('meshPoints', 1, 5);
model.material('lmat2').setIndex('tag', 'lmat2_6', 5);
model.material('lmat2').setIndex('layername', 'Layer 7', 6);
model.material('lmat2').setIndex('link', 'mat2', 6);
model.material('lmat2').setIndex('rotation', '0.0', 6);
model.material('lmat2').setIndex('thickness', 'th*5', 6);
model.material('lmat2').setIndex('meshPoints', 1, 6);
model.material('lmat2').setIndex('tag', 'lmat2_7', 6);
model.material('lmat2').setIndex('layername', 'Layer 7', 6);
model.material('lmat2').setIndex('link', 'mat2', 6);
model.material('lmat2').setIndex('rotation', '0.0', 6);
model.material('lmat2').setIndex('thickness', 'th*5', 6);
model.material('lmat2').setIndex('meshPoints', 1, 6);
model.material('lmat2').setIndex('tag', 'lmat2_7', 6);
model.material('lmat2').setIndex('layername', 'Layer 8', 7);
model.material('lmat2').setIndex('link', 'mat2', 7);
model.material('lmat2').setIndex('rotation', '0.0', 7);
model.material('lmat2').setIndex('thickness', 'th*5', 7);
model.material('lmat2').setIndex('meshPoints', 1, 7);
model.material('lmat2').setIndex('tag', 'lmat2_8', 7);
model.material('lmat2').setIndex('layername', 'Layer 8', 7);
model.material('lmat2').setIndex('link', 'mat2', 7);
model.material('lmat2').setIndex('rotation', '0.0', 7);
model.material('lmat2').setIndex('thickness', 'th*5', 7);
model.material('lmat2').setIndex('meshPoints', 1, 7);
model.material('lmat2').setIndex('tag', 'lmat2_8', 7);
model.material('lmat2').setIndex('rotation', 45, 1);
model.material('lmat2').setIndex('rotation', -45, 2);
model.material('lmat2').setIndex('rotation', 90, 3);
model.material('lmat2').setIndex('rotation', 90, 4);
model.material('lmat2').setIndex('rotation', -45, 5);
model.material('lmat2').setIndex('rotation', 45, 6);
model.material('lmat2').setIndex('rotation', 0, 7);
model.material('lmat2').set('widthRatio', 0.6);
model.material.create('mat3', 'Common', '');
model.material('mat3').label('Material: PVC Foam');
model.material.create('lmat3', 'LayeredMaterial', '');
model.material('lmat3').label('Layered Material: PF-[0]');
model.material('lmat3').setIndex('link', 'mat3', 0);
model.material('lmat3').setIndex('thickness', 'thc', 0);
model.material('lmat3').setIndex('meshPoints', 1, 0);
model.material.create('stlmat1', 'LayeredMaterialStack', 'comp1');
model.material('stlmat1').feature('stllmat1').label(['Layered Material Link: Carbon' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Epoxy']);
model.material('stlmat1').feature.duplicate('stllmat2', 'stllmat1');
model.material('stlmat1').feature('stllmat2').label(['Layered Material Link: Glass' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Vinylester']);
model.material('stlmat1').feature('stllmat2').set('link', 'lmat2');
model.material('stlmat1').feature.duplicate('stllmat3', 'stllmat2');
model.material('stlmat1').feature('stllmat3').label('Layered Material Link: PVC Foam');
model.material('stlmat1').feature('stllmat3').set('link', 'lmat3');
model.material('stlmat1').feature.duplicate('stllmat4', 'stllmat2');
model.material('stlmat1').feature.duplicate('stllmat5', 'stllmat1');
model.material('stlmat1').set('showLabels', false);

model.physics('shell').create('llem1', 'LayeredElastic', 2);
model.physics('shell').feature('llem1').selection.all;
model.physics('shell').feature('llem1').set('SolidModel', 'Orthotropic');
model.physics('shell').feature('llem1').set('TransverseIsotropic', true);

model.material('mat1').propertyGroup('def').set('density', {'1560'});
model.material('mat1').propertyGroup.create('TransverseIsotropic', 'Transversely_isotropic');
model.material('mat1').propertyGroup('TransverseIsotropic').set('Evect', {'139e9' '9e9'});
model.material('mat1').propertyGroup('TransverseIsotropic').set('nuvect', {'0.32' '0.32'});
model.material('mat1').propertyGroup('TransverseIsotropic').set('Gvect1', {'5.5e9'});
model.material('mat2').propertyGroup('def').set('density', {'1890'});
model.material('mat2').propertyGroup.create('TransverseIsotropic', 'Transversely_isotropic');
model.material('mat2').propertyGroup('TransverseIsotropic').set('Evect', {'41e9' '9e9'});
model.material('mat2').propertyGroup('TransverseIsotropic').set('nuvect', {'0.3' '0.3'});
model.material('mat2').propertyGroup('TransverseIsotropic').set('Gvect1', {'4.1e9'});
model.material('mat3').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat3').propertyGroup('def').set('density', {'200'});
model.material('mat3').propertyGroup('Enu').set('E', {'250e6'});
model.material('mat3').propertyGroup('Enu').set('nu', {'0.35'});

model.physics('shell').feature('llem1').set('ShearCorrectionFactor', 'UserDefined');
model.physics('shell').create('fix1', 'Fixed', 1);
model.physics('shell').feature('fix1').selection.named('sel3');
model.physics('shell').create('gacc1', 'GravityAcceleration', -1);

model.group.create('lg1', 'LoadGroup');

model.physics('shell').feature('gacc1').set('loadGroup', 'lg1');

model.group('lg1').label('Load Group: Gravity');
model.group('lg1').paramName('lgG');

model.physics('shell').create('rotf1', 'RotatingFrame', 2);
model.physics('shell').feature('rotf1').set('AxisOfRotation', 'userdef');
model.physics('shell').feature('rotf1').set('rotaxbp', {'aveop1(X)' 'aveop1(Y)' 'aveop1(Z)'});
model.physics('shell').feature('rotf1').set('rotaxdir', [0 1 0]);
model.physics('shell').feature('rotf1').set('RotationalDirection', 'Clockwise');
model.physics('shell').feature('rotf1').set('Ovm', 'omega');
model.physics('shell').feature('rotf1').set('SpinSoftening', false);

model.group.create('lg2', 'LoadGroup');

model.physics('shell').feature('rotf1').set('loadGroup', 'lg2');

model.group('lg2').label('Load Group: Centrifugal Force');
model.group('lg2').paramName('lgCF');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.all;
model.mesh('mesh1').feature('map1').create('size1', 'Size');
model.mesh('mesh1').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmax', 0.5);
model.mesh('mesh1').run;

model.view('view1').set('hidestatus', 'ignore');
model.view('view1').set('showgrid', true);
model.view('view1').set('hidestatus', 'hide');

model.study('std1').label('Study: Static');
model.study('std1').feature('stat').set('useloadcase', true);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 3', 2);
model.study('std1').feature('stat').setIndex('loadgroup', false, 2, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 2, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 2, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 2, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 3', 2);
model.study('std1').feature('stat').setIndex('loadgroup', false, 2, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 2, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 2, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 2, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case: Gravity', 0);
model.study('std1').feature('stat').setIndex('loadgroup', true, 0, 0);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case: Centrifugal Force', 1);
model.study('std1').feature('stat').setIndex('loadgroup', true, 1, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case: Gravity+Centrifugal Force', 2);
model.study('std1').feature('stat').setIndex('loadgroup', true, 2, 0);
model.study('std1').feature('stat').setIndex('loadgroup', true, 2, 1);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset.create('dset1shelllshl', 'LayeredMaterial');
model.result.dataset('dset1shelllshl').set('data', 'dset1');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1shelllshl');
model.result('pg1').setIndex('looplevel', 3, 0);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (shell)');
model.result('pg1').set('showlegends', true);
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'shell.misesGp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').set('descr', 'von Mises stress');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('expr', {'shell.u' 'shell.v' 'shell.w'});
model.result('pg1').feature('surf1').set('inheritplot', 'none');
model.result('pg1').set('data', 'dset1shelllshl');
model.result('pg1').run;
model.result.dataset.create('lshl1', 'LayeredMaterial');
model.result.dataset('lshl1').selection.geom('geom1', 2);
model.result.dataset('lshl1').selection.named('sel2');
model.result.numerical.create('pev1', 'EvalPoint');
model.result.numerical('pev1').label('Tip Displacement');
model.result.numerical('pev1').selection.set([110]);
model.result.numerical('pev1').setIndex('expr', 'shell.disp', 0);
model.result.numerical('pev1').setIndex('unit', 'm', 0);
model.result.numerical('pev1').setIndex('descr', 'Displacement magnitude', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Tip Displacement');
model.result.numerical('pev1').set('table', 'tbl1');
model.result.numerical('pev1').setResult;
model.result.numerical.create('max1', 'MaxVolume');
model.result.numerical('max1').label('Maximum Stress');
model.result.numerical('max1').set('data', 'lshl1');
model.result.numerical('max1').setIndex('expr', 'shell.mises', 0);
model.result.numerical('max1').setIndex('unit', 'MPa', 0);
model.result.numerical('max1').setIndex('descr', 'von Mises stress', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Maximum Stress');
model.result.numerical('max1').set('table', 'tbl2');
model.result.numerical('max1').setResult;
model.result('pg1').run;
model.result('pg1').label('Stress: Skin+Spar');
model.result('pg1').set('view', 'new');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').run;
model.result('pg1').feature('surf1').set('rangecoloractive', true);
model.result('pg1').feature('surf1').set('rangecolormax', '1e8');
model.result('pg1').run;

model.view('view3').camera.set('zoomanglefull', 6.169583797454834);
model.view('view3').camera.setIndex('position', -276.2855224609375, 0);
model.view('view3').camera.setIndex('position', 99.8270492553711, 1);
model.view('view3').camera.setIndex('position', 38.94921112060547, 2);
model.view('view3').camera.setIndex('target', 30.78009033203125, 0);
model.view('view3').camera.setIndex('target', 0.7983779907226562, 1);
model.view('view3').camera.setIndex('target', -2.0073280334472656, 2);
model.view('view3').camera.setIndex('up', 0.13039763271808624, 0);
model.view('view3').camera.setIndex('up', -0.00571073591709137, 1);
model.view('view3').camera.setIndex('up', 0.9914453029632568, 2);
model.view('view3').camera.setIndex('rotationpoint', 30.780078887939453, 0);
model.view('view3').camera.setIndex('rotationpoint', 0.798375129699707, 1);
model.view('view3').camera.setIndex('rotationpoint', -2.007327079772949, 2);
model.view('view3').camera.setIndex('viewoffset', -0.08967673778533936, 0);
model.view('view3').camera.setIndex('viewoffset', 0.018350761383771896, 1);
model.view('view3').set('locked', true);

model.result('pg1').run;
model.result.duplicate('pg2', 'pg1');
model.result('pg2').run;
model.result('pg2').label('Stress: Spar');
model.result('pg2').set('data', 'lshl1');
model.result('pg2').set('view', 'auto');
model.result('pg2').set('edges', false);
model.result('pg2').run;
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 3, 0);
model.result('pg3').set('defaultPlotID', 'stressSlice');
model.result('pg3').set('showlegends', true);
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('lss1', 'LayeredMaterialSlice');
model.result('pg3').feature('lss1').set('expr', {'shell.misesGp'});
model.result('pg3').feature('lss1').set('threshold', 'manual');
model.result('pg3').feature('lss1').set('thresholdvalue', 0.2);
model.result('pg3').feature('lss1').set('colortable', 'Prism');
model.result('pg3').feature('lss1').set('colortabletrans', 'none');
model.result('pg3').feature('lss1').set('colorscalemode', 'linear');
model.result('pg3').feature('lss1').set('descr', 'von Mises stress');
model.result('pg3').feature('lss1').set('locdef', 'relative');
model.result('pg3').feature('lss1').set('localzrel', 'shell.z');
model.result('pg3').feature('lss1').create('def', 'Deform');
model.result('pg3').feature('lss1').feature('def').set('expr', {'shell.u' 'shell.v' 'shell.w'});
model.result('pg3').label('Stress, Slice (shell)');
model.result('pg3').label('Stress, Slice (shell)');
model.result('pg3').run;
model.result('pg3').label(['Stress, Slice (Carbon' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Epoxy)']);
model.result('pg3').run;
model.result('pg3').feature('lss1').set('localzrel', 1);
model.result('pg3').feature('lss1').set('rangecoloractive', true);
model.result('pg3').feature('lss1').set('rangecolormax', '1e8');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 2, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 3, 0);
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Stress, Slice');
model.result('pg4').set('edges', false);
model.result('pg4').set('view', 'new');
model.result('pg4').run;
model.result('pg4').feature('lss1').set('locdef', 'physical');
model.result('pg4').feature('lss1').set('localzphys', '5*th, 17*th, 30*th, 50*th+0.5*thc, 70*th+thc, 83*th+thc, 95*th+thc');
model.result('pg4').feature('lss1').set('slicedisplacement', 'linear');
model.result('pg4').feature('lss1').set('zseparation', 0.3);
model.result('pg4').feature('lss1').set('showdescriptions', true);
model.result('pg4').feature('lss1').set('descriptionseparation', 0.35);
model.result('pg4').run;
model.result('pg4').create('tlan1', 'TableAnnotation');
model.result('pg4').feature('tlan1').set('source', 'localtable');
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 80, 0, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0, 0, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0, 0, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', ['Carbon' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Epoxy'], 0, 3);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 80, 1, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0, 1, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 18, 1, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', ['Glass' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Vinylester'], 1, 3);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 80, 2, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0, 2, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 37.5, 2, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', ['Glass' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Vinylester'], 2, 3);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 80, 3, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0, 3, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 56, 3, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 'PVC-Foam', 3, 3);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 80, 4, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0, 4, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 76, 4, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', ['Glass' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Vinylester'], 4, 3);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 80, 5, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0, 5, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 94, 5, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', ['Glass' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Vinylester'], 5, 3);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 80, 6, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0, 6, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 112, 6, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', ['Carbon' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Epoxy'], 6, 3);
model.result('pg4').feature('tlan1').set('showpoint', false);
model.result('pg4').feature('tlan1').set('orientation', 'vertical');

model.view('view4').camera.set('zoomanglefull', 12.2);
model.view('view4').camera.setIndex('position', -696.761230468751, 0);
model.view('view4').camera.setIndex('position', '-208.834320068359381', 1);
model.view('view4').camera.setIndex('position', '-191.163543701171881', 2);
model.view('view4').camera.setIndex('target', '32.327087402343751', 0);
model.view('view4').camera.setIndex('target', -0.3671569824218751, 1);
model.view('view4').camera.setIndex('target', '52.148757934570311', 2);
model.view('view4').camera.setIndex('up', '0.234604269266128541', 0);
model.view('view4').camera.setIndex('up', '-0.96425682306289671', 1);
model.view('view4').camera.setIndex('up', '0.123169004917144781', 2);
model.view('view4').camera.setIndex('rotationpoint', '32.3270645141601561', 0);
model.view('view4').camera.setIndex('rotationpoint', '-0.36720490455627441', 1);
model.view('view4').camera.setIndex('rotationpoint', '52.1486587524414061', 2);
model.view('view4').camera.setIndex('viewoffset', '-0.016198605298995971', 0);
model.view('view4').camera.setIndex('viewoffset', '-0.0061622164212167261', 1);
model.view('view4').set('showgrid', false);
model.view('view4').set('locked', true);

model.result('pg4').run;
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').set('defaultPlotID', 'stressThroughThickness');
model.result('pg5').set('showlegends', true);
model.result('pg5').create('thr1', 'ThroughThickness');
model.result('pg5').feature('thr1').set('expr', {'shell.misesGp'});
model.result('pg5').feature('thr1').set('legend', true);
model.result('pg5').feature('thr1').set('posentry', 'selection');
model.result('pg5').feature('thr1').selection.geom('geom1', 0);
model.result('pg5').feature('thr1').selection.set([1]);
model.result('pg5').label('Stress, Through Thickness (shell)');
model.result('pg5').setIndex('looplevelinput', 'last', 0);
model.result('pg5').label('Stress, Through Thickness (shell)');
model.result('pg5').run;
model.result('pg5').setIndex('looplevelinput', 'all', 0);
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'von Mises stress (MPa)');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Thickness coordinate (mm)');
model.result('pg5').set('axislimits', true);
model.result('pg5').set('xmin', 0);
model.result('pg5').set('xmax', 100);
model.result('pg5').set('ymin', 0);
model.result('pg5').set('ymax', '60*1000*th');
model.result('pg5').set('legendpos', 'middleright');
model.result('pg5').run;
model.result('pg5').feature('thr1').selection.set([26]);
model.result('pg5').feature('thr1').set('unit', 'MPa');
model.result('pg5').feature('thr1').set('ydata', 'expr');
model.result('pg5').feature('thr1').set('ydataexpr', 'shell.xd');
model.result('pg5').feature('thr1').set('ydataunit', 'mm');
model.result('pg5').feature('thr1').set('includeinterfaces', 'exterior');
model.result('pg5').feature('thr1').set('linestyle', 'cycle');
model.result('pg5').feature('thr1').set('legendmethod', 'manual');
model.result('pg5').feature('thr1').setIndex('legends', 'Gravity', 0);
model.result('pg5').feature('thr1').setIndex('legends', 'Centrifugal Force', 1);
model.result('pg5').feature('thr1').setIndex('legends', 'Gravity+Centrifugal Force', 2);
model.result('pg5').run;
model.result('pg5').create('tlan1', 'TableAnnotation');
model.result('pg5').feature('tlan1').set('source', 'localtable');
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 30, 0, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '5*1000*th', 0, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', ['Carbon' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Epoxy'], 0, 2);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 30, 1, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '30*1000*th', 1, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', ['Glass' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Vinylester'], 1, 2);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 30, 2, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', '55*1000*th', 2, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 'PVC-Foam', 2, 2);
model.result('pg5').feature('tlan1').set('showpoint', false);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 3, 0);
model.result('pg6').set('defaultPlotID', 'shellGeometry');
model.result('pg6').label('Shell Geometry (shell)');
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('showlegends', false);
model.result('pg6').set('edgecolor', 'cyan');
model.result('pg6').create('lss1', 'LayeredMaterialSlice');
model.result('pg6').feature('lss1').set('expr', {'shell.zl_rel'});
model.result('pg6').feature('lss1').set('threshold', 'manual');
model.result('pg6').feature('lss1').set('thresholdvalue', 0.2);
model.result('pg6').feature('lss1').set('colortable', 'RainbowLight');
model.result('pg6').feature('lss1').set('colortabletrans', 'none');
model.result('pg6').feature('lss1').set('colorscalemode', 'linear');
model.result('pg6').feature('lss1').label('Top and Bottom: Layered Material');
model.result('pg6').feature('lss1').set('locdef', 'relative');
model.result('pg6').feature('lss1').set('localzrel', '-1 1');
model.result('pg6').label('Shell Geometry (shell)');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 3, 0);
model.result('pg7').set('defaultPlotID', 'thicknessOrientation');
model.result('pg7').label('Thickness and Orientation (shell)');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'shell.d'});
model.result('pg7').feature('surf1').set('threshold', 'manual');
model.result('pg7').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg7').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg7').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg7').feature('surf1').set('colorscalemode', 'linear');
model.result('pg7').feature('surf1').label('Thickness');
model.result('pg7').create('syss', 'CoordSysSurface');
model.result('pg7').feature('syss').set('sys', 'shellsys');
model.result('pg7').feature('syss').label('Shell Local System');
model.result('pg7').label('Thickness and Orientation (shell)');
model.result('pg7').run;
model.result('pg6').run;
model.result('pg6').run;
model.result('pg7').run;
model.result('pg7').set('view', 'view3');
model.result('pg7').run;
model.result('pg7').feature('surf1').set('coloring', 'uniform');
model.result('pg7').feature('surf1').set('color', 'gray');
model.result('pg7').run;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').set('plotgroup', 'Default');
model.study('std2').feature('stat').set('outputmap', {});
model.study('std2').feature('stat').set('ngenAUX', '1');
model.study('std2').feature('stat').set('goalngenAUX', '1');
model.study('std2').feature('stat').set('ngenAUX', '1');
model.study('std2').feature('stat').set('goalngenAUX', '1');
model.study('std2').feature('stat').setSolveFor('/physics/shell', true);
model.study('std2').create('eig', 'Eigenfrequency');
model.study('std2').feature('eig').set('plotgroup', 'Default');
model.study('std2').feature('eig').set('chkeigregion', true);
model.study('std2').feature('eig').set('conrad', '1');
model.study('std2').feature('eig').set('conradynhm', '1');
model.study('std2').feature('eig').set('storefact', false);
model.study('std2').feature('eig').set('geometricNonlinearity', true);
model.study('std2').feature('eig').set('outputmap', {});
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').setSolveFor('/physics/shell', true);

model.common.create('mpf1', 'ParticipationFactors', 'comp1');

model.study('std2').label('Study: Eigenfrequency');
model.study('std2').create('param', 'Parametric');
model.study('std2').feature('param').setIndex('pname', 'th', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'm', 0);
model.study('std2').feature('param').setIndex('pname', 'th', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'm', 0);
model.study('std2').feature('param').setIndex('pname', 'RPM', 0);
model.study('std2').feature('param').setIndex('plistarr', 'range(0,5,30)[rpm]', 0);
model.study('std2').feature('param').setIndex('punit', '1/s', 0);
model.study('std2').feature('stat').set('useloadcase', true);
model.study('std2').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std2').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std2').feature('stat').setIndex('loadcase', 'Load Case: Centrifugal Force', 0);
model.study('std2').feature('stat').setIndex('loadgroup', true, 0, 1);
model.study('std2').feature('eig').set('neigsactive', true);
model.study('std2').feature('eig').set('neigs', 8);
model.study('std2').feature('eig').set('eigwhich', 'lr');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol2').feature('s1').set('control', 'stat');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').create('st2', 'StudyStep');
model.sol('sol2').feature('st2').set('study', 'std2');
model.sol('sol2').feature('st2').set('studystep', 'eig');
model.sol('sol2').create('v2', 'Variables');
model.sol('sol2').feature('v2').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol2').feature('v2').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol2').feature('v2').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol2').feature('v2').set('initmethod', 'sol');
model.sol('sol2').feature('v2').set('initsol', 'sol2');
model.sol('sol2').feature('v2').set('initsoluse', 'sol3');
model.sol('sol2').feature('v2').set('notsolmethod', 'sol');
model.sol('sol2').feature('v2').set('notsol', 'sol2');
model.sol('sol2').feature('v2').set('control', 'eig');
model.sol('sol2').create('e1', 'Eigenvalue');
model.sol('sol2').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol2').feature('e1').set('eigvfunscaleparam', '6.18E-5');
model.sol('sol2').feature('e1').set('storelinpoint', true);
model.sol('sol2').feature('e1').set('control', 'eig');
model.sol('sol2').feature('e1').set('linpmethod', 'sol');
model.sol('sol2').feature('e1').set('linpsol', 'sol2');
model.sol('sol2').feature('e1').set('linpsoluse', 'sol3');
model.sol('sol2').feature('e1').set('control', 'eig');
model.sol('sol2').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('v2').set('notsolnum', 'auto');
model.sol('sol2').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol2').attach('std2');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std2');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol2');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'RPM'});
model.batch('p1').set('plistarr', {'range(0,5,30)[rpm]'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std2');
model.batch('p1').set('control', 'param');

model.sol.create('sol4');
model.sol('sol4').study('std2');
model.sol('sol4').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol4');
model.batch('p1').run('compute');

model.result.dataset.create('dset4shelllshl', 'LayeredMaterial');
model.result.dataset('dset4shelllshl').set('data', 'dset4');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'dset4shelllshl');
model.result('pg8').setIndex('looplevel', 1, 0);
model.result('pg8').setIndex('looplevel', 7, 1);
model.result('pg8').set('defaultPlotID', 'modeShape');
model.result('pg8').label('Mode Shape (shell)');
model.result('pg8').set('showlegends', false);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'shell.disp'});
model.result('pg8').feature('surf1').set('threshold', 'manual');
model.result('pg8').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg8').feature('surf1').set('colortable', 'Rainbow');
model.result('pg8').feature('surf1').set('colortabletrans', 'none');
model.result('pg8').feature('surf1').set('colorscalemode', 'linear');
model.result('pg8').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg8').feature('surf1').create('def', 'Deform');
model.result('pg8').feature('surf1').feature('def').set('expr', {'shell.u' 'shell.v' 'shell.w'});
model.result('pg8').feature('surf1').set('inheritplot', 'none');
model.result('pg8').set('data', 'dset4shelllshl');
model.result.evaluationGroup.create('std2EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std2EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_shell');
model.result.evaluationGroup('std2EvgFrq').set('data', 'dset4');
model.result.evaluationGroup('std2EvgFrq').label('Eigenfrequencies (Study: Eigenfrequency)');
model.result.evaluationGroup('std2EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std2EvgFrq').run;
model.result.evaluationGroup.create('std2mpf1', 'EvaluationGroup');
model.result.evaluationGroup('std2mpf1').set('data', 'dset4');
model.result.evaluationGroup('std2mpf1').label('Participation Factors (Study: Eigenfrequency)');
model.result.evaluationGroup('std2mpf1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormX', 0);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 0);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, X-translation', 0);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormY', 1);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Y-translation', 1);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormZ', 2);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Z-translation', 2);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormX', 3);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 3);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, X-rotation', 3);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormY', 4);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 4);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Y-rotation', 4);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormZ', 5);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 5);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Z-rotation', 5);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLX', 6);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg', 6);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, X-translation', 6);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLY', 7);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg', 7);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Y-translation', 7);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLZ', 8);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg', 8);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Z-translation', 8);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRX', 9);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 9);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, X-rotation', 9);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRY', 10);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 10);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Y-rotation', 10);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRZ', 11);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 11);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Z-rotation', 11);
model.result.evaluationGroup('std2mpf1').run;
model.result('pg8').run;
model.result('pg8').set('looplevel', [4 1]);

model.view('view1').set('showgrid', false);

model.result('pg8').run;
model.result('pg8').set('looplevel', [4 3]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [4 5]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [4 7]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [1 1]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [2 1]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [3 1]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [4 1]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [5 1]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [6 1]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [7 1]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [8 1]);
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Campbell Diagram');
model.result('pg9').set('data', 'dset4');
model.result('pg9').set('titletype', 'label');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Frequency (Hz)');
model.result('pg9').set('showlegends', false);
model.result('pg9').create('glob1', 'Global');
model.result('pg9').feature('glob1').set('markerpos', 'datapoints');
model.result('pg9').feature('glob1').set('linewidth', 'preference');
model.result('pg9').feature('glob1').setIndex('expr', 'freq', 0);
model.result('pg9').feature('glob1').setIndex('unit', '1/s', 0);
model.result('pg9').feature('glob1').setIndex('descr', 'Frequency', 0);
model.result('pg9').feature('glob1').set('xdatasolnumtype', 'outer');
model.result('pg9').feature('glob1').set('linestyle', 'cycle');
model.result('pg9').feature('glob1').set('linemarker', 'cycle');
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').set('plotgroup', 'pg7');
model.result.export('anim1').set('sweeptype', 'dde');
model.result.export('anim1').set('showframe', 25);
model.result.export('anim1').run;
model.result('pg1').run;

model.title('Stress and Modal Analysis of a Wind Turbine Composite Blade');

model.description(['This example demonstrates the modeling of a wind turbine blade made up of laminated composite material. The laminated composite is made up of carbon' native2unicode(hex2dec({'20' '13'}), 'unicode') 'epoxy, glass' native2unicode(hex2dec({'20' '13'}), 'unicode') 'vinylester, and PVC foam materials where foam is used as a core material. The composite laminate has large number of layers hence modeled using Equivalent Single Layer (ESL) theory.' newline  newline 'First, a stress analysis of composite blade is performed in which blade is subjected to gravity, or centrifugal force, or both. The tip displacement, maximum stress values, and through-thickness stress distribution at a particular point on the blade is computed for various load cases. Second, a prestressed eigenfrequency analysis is performed for a range of operating speed and Campbell diagram depicting the variation of eigenfrequencies with rotation speed is generated.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;

model.label('wind_turbine_composite_blade.mph');

model.modelNode.label('Components');

out = model;
