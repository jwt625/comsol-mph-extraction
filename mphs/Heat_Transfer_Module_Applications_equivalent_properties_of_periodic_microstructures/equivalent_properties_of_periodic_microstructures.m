function out = model
%
% equivalent_properties_of_periodic_microstructures.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Applications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);

model.param.set('cell_width', '4[mm]');
model.param.descr('cell_width', 'Cell width');
model.param.set('cell_depth', '2[mm]');
model.param.descr('cell_depth', 'Cell depth');
model.param.set('cell_height', '2[mm]');
model.param.descr('cell_height', 'Cell height');
model.param.set('pA0', '1[bar]');
model.param.descr('pA0', 'Absolute pressure');
model.param.set('T0', '293.15[K]');
model.param.descr('T0', 'Temperature');
model.param.set('dTx', '1[K]');
model.param.descr('dTx', 'Temperature offset, x direction');
model.param.set('dTy', '1[K]');
model.param.descr('dTy', 'Temperature offset, y direction');
model.param.set('dTz', '1[K]');
model.param.descr('dTz', 'Temperature offset, z direction');
model.param.set('rtol', '1e-3');
model.param.descr('rtol', 'Solver relative tolerance');
model.param.set('ktol', '5e-3');
model.param.descr('ktol', 'Thermal conductivity tolerance');
model.param.set('part_sph_R', '0.4[mm]');
model.param.descr('part_sph_R', 'Part, spherical particles, radius');
model.param.set('part_sph_nx', '1');
model.param.descr('part_sph_nx', 'Part, spherical particles, sphere number, x direction');
model.param.set('part_sph_ny', '1');
model.param.descr('part_sph_ny', 'Part, spherical particles, sphere number, y direction');
model.param.set('part_sph_nz', '1');
model.param.descr('part_sph_nz', 'Part, spherical particles, sphere number, z direction');
model.param.set('part_cyl_R', '0.3[mm]');
model.param.descr('part_cyl_R', 'Part, cylindrical fibers, radius');
model.param.set('part_cyl_nx', '1');
model.param.descr('part_cyl_nx', 'Part, cylindrical fibers, fiber number, x direction');
model.param.set('part_cyl_ny', '1');
model.param.descr('part_cyl_ny', 'Part, cylindrical fibers, fiber number, y direction');
model.param.set('part_plates_th1', '1[mm]');
model.param.descr('part_plates_th1', 'Part, parallel layers, thickness 1');
model.param.set('part_plates_th2', '1[mm]');
model.param.descr('part_plates_th2', 'Part, parallel layers, thickness 2');
model.param.set('part_plates_th3', '1[mm]');
model.param.descr('part_plates_th3', 'Part, parallel layers, thickness 3');
model.param.set('part_plates_th4', '1[mm]');
model.param.descr('part_plates_th4', 'Part, parallel layers, thickness 4');
model.param.set('part_plates_th5', '1[mm]');
model.param.descr('part_plates_th5', 'Part, parallel layers, thickness 5');
model.param.set('part_plates_th6', '1[mm]');
model.param.descr('part_plates_th6', 'Part, parallel layers, thickness 6');
model.param.set('part_plates_th7', '1[mm]');
model.param.descr('part_plates_th7', 'Part, parallel layers, thickness 7');
model.param.set('part_plates_last', '(cell_width-part_plates_th1-part_plates_th2-part_plates_th3)/1[mm]');
model.param.descr('part_plates_last', 'Part, parallel layers, last thickness');
model.param.set('part_hon_type', '0');
model.param.descr('part_hon_type', 'Part, honeycomb, type ID');
model.param.set('part_hon_hex_th', '0.1[mm]');
model.param.descr('part_hon_hex_th', 'Part, honeycomb, hexagonal, thickness');
model.param.set('part_hon_hex_ex', 'sqrt((cell_depth/2)^2+(cell_width/6)^2)*part_hon_hex_th/cell_depth');
model.param.descr('part_hon_hex_ex', 'Part, honeycomb, hexagonal, x-thickness');
model.param.set('part_hon_hex_dx', 'part_hon_hex_ex-part_hon_hex_th*cell_width/(6*cell_depth)');
model.param.descr('part_hon_hex_dx', 'Part, honeycomb, hexagonal, x-offset');
model.param.set('part_hon_hex_dy', 'part_hon_hex_th/2');
model.param.descr('part_hon_hex_dy', 'Part, honeycomb, hexagonal, y-offset');
model.param.set('part_hon_rec1_th', '0.1[mm]');
model.param.descr('part_hon_rec1_th', 'Part, honeycomb, rectangular-aligned, thickness');
model.param.set('part_hon_rec2_th', '0.1[mm]');
model.param.descr('part_hon_rec2_th', 'Part, honeycomb, rectangular-staggered, thickness');
model.param.set('part_hon_cyl_th', '0.1[mm]');
model.param.descr('part_hon_cyl_th', 'Part, honeycomb, cylindrical, thickness');
model.param.set('part_hon_cyl_R', 'min(min((cell_depth-part_hon_cyl_th)/2,(sqrt((cell_width/2)^2+(cell_depth/2)^2)-part_hon_cyl_th)/2),(cell_width-part_hon_cyl_th)/2)/1[mm]');
model.param.descr('part_hon_cyl_R', 'Part, honeycomb, cylindrical, radius');
model.param.set('part_hon_tri_th', '0.1[mm]');
model.param.descr('part_hon_tri_th', 'Part, honeycomb, triangular, thickness');

model.geom.create('part1', 'Part', 3);
model.geom('part1').create('pch1', 'ParameterCheck');
model.geom('part1').feature('pch1').set('condition', 'part_plates_last<=0');
model.geom('part1').feature('pch1').set('message', 'The layers are not confined in the unit cell, the thickness of the last layer must be strictly positive.');
model.geom('part1').run('pch1');
model.geom('part1').create('blk1', 'Block');
model.geom('part1').feature('blk1').set('size', {'cell_width' '1' '1'});
model.geom('part1').feature('blk1').setIndex('size', 'cell_depth', 1);
model.geom('part1').feature('blk1').setIndex('size', 'cell_height', 2);
model.geom('part1').feature('blk1').setIndex('layername', 'Layer 1', 0);
model.geom('part1').feature('blk1').setIndex('layer', 'part_plates_th1', 0);
model.geom('part1').feature('blk1').setIndex('layername', 'Layer 2', 1);
model.geom('part1').feature('blk1').setIndex('layer', 'part_plates_th2', 1);
model.geom('part1').feature('blk1').setIndex('layername', 'Layer 3', 2);
model.geom('part1').feature('blk1').setIndex('layer', 'part_plates_th3', 2);
model.geom('part1').feature('blk1').set('layerleft', true);
model.geom('part1').feature('blk1').set('layerbottom', false);
model.geom('part1').run('blk1');
model.geom.create('part2', 'Part', 3);
model.geom('part2').create('pch1', 'ParameterCheck');
model.geom('part2').feature('pch1').set('condition', 'cell_width/part_cyl_nx-2*part_cyl_R<=0||cell_depth/part_cyl_ny-2*part_cyl_R<=0');
model.geom('part2').feature('pch1').set('message', 'The cylinders overlap.');
model.geom('part2').run('pch1');
model.geom('part2').create('pch2', 'ParameterCheck');
model.geom('part2').feature('pch2').set('condition', 'part_cyl_R<min(cell_width, cell_depth)/50');
model.geom('part2').feature('pch2').set('message', 'The cylinder radii should be greater than 1/50th of the width and depth of the cell.');
model.geom('part2').run('pch2');
model.geom('part2').create('cyl1', 'Cylinder');
model.geom('part2').feature('cyl1').set('r', 'part_cyl_R');
model.geom('part2').feature('cyl1').set('h', 'cell_height');
model.geom('part2').feature('cyl1').set('pos', {'cell_width/(2*part_cyl_nx)' '0' '0'});
model.geom('part2').feature('cyl1').setIndex('pos', 'cell_depth/(2*part_cyl_ny)', 1);
model.geom('part2').run('cyl1');
model.geom('part2').create('arr1', 'Array');
model.geom('part2').feature('arr1').selection('input').set({'cyl1'});
model.geom('part2').feature('arr1').set('fullsize', {'part_cyl_nx' '1' '1'});
model.geom('part2').feature('arr1').setIndex('fullsize', 'part_cyl_ny', 1);
model.geom('part2').feature('arr1').set('displ', {'cell_width/part_cyl_nx' '0' '0'});
model.geom('part2').feature('arr1').setIndex('displ', 'cell_depth/part_cyl_ny', 1);
model.geom('part2').run('arr1');
model.geom.create('part3', 'Part', 3);
model.geom('part3').create('pch1', 'ParameterCheck');
model.geom('part3').feature('pch1').set('condition', 'cell_width/part_sph_nx-2*part_sph_R<=0||cell_depth/part_sph_ny-2*part_sph_R<=0||cell_height/part_sph_nz-2*part_sph_R<=0');
model.geom('part3').feature('pch1').set('message', 'The spheres overlap.');
model.geom('part3').run('pch1');
model.geom('part3').create('pch2', 'ParameterCheck');
model.geom('part3').feature('pch2').set('condition', 'part_sph_R<min(min(cell_width, cell_depth), cell_height)/50');
model.geom('part3').feature('pch2').set('message', 'The sphere radii should be greater than 1/50th of the minimum side length of the cell.');
model.geom('part3').run('pch2');
model.geom('part3').create('sph1', 'Sphere');
model.geom('part3').feature('sph1').set('r', 'part_sph_R');
model.geom('part3').feature('sph1').set('pos', {'cell_width/(2*part_sph_nx)' '0' '0'});
model.geom('part3').feature('sph1').setIndex('pos', 'cell_depth/(2*part_sph_ny)', 1);
model.geom('part3').feature('sph1').setIndex('pos', 'cell_height/(2*part_sph_nz)', 2);
model.geom('part3').run('sph1');
model.geom('part3').create('arr1', 'Array');
model.geom('part3').feature('arr1').selection('input').set({'sph1'});
model.geom('part3').feature('arr1').set('fullsize', {'part_sph_nx' '1' '1'});
model.geom('part3').feature('arr1').setIndex('fullsize', 'part_sph_ny', 1);
model.geom('part3').feature('arr1').setIndex('fullsize', 'part_sph_nz', 2);
model.geom('part3').feature('arr1').set('displ', {'cell_width/part_sph_nx' '0' '0'});
model.geom('part3').feature('arr1').setIndex('displ', 'cell_depth/part_sph_ny', 1);
model.geom('part3').feature('arr1').setIndex('displ', 'cell_height/part_sph_nz', 2);
model.geom('part3').run('arr1');
model.geom.create('part4', 'Part', 3);
model.geom('part4').inputParam.set('type', 'part_hon_type');
model.geom('part4').create('if1', 'If');
model.geom('part4').feature.createAfter('endif1', 'EndIf', 'if1');
model.geom('part4').feature('if1').set('condition', 'type==0');
model.geom('part4').create('pch1', 'ParameterCheck');
model.geom('part4').feature('pch1').set('condition', 'part_hon_hex_th<min(cell_width, cell_depth)/50');
model.geom('part4').feature('pch1').set('message', 'The thickness should be greater than 1/50th of the minimum side length of the cell.');
model.geom('part4').run('pch1');
model.geom('part4').create('wp1', 'WorkPlane');
model.geom('part4').feature('wp1').set('unite', true);
model.geom('part4').feature('wp1').geom.create('pol1', 'Polygon');
model.geom('part4').feature('wp1').geom.feature('pol1').set('source', 'table');
model.geom('part4').feature('wp1').geom.feature('pol1').setIndex('table', 'cell_width*5/6-part_hon_hex_ex', 0, 0);
model.geom('part4').feature('wp1').geom.feature('pol1').setIndex('table', 'cell_depth/2', 0, 1);
model.geom('part4').feature('wp1').geom.feature('pol1').setIndex('table', 'cell_width*4/6-part_hon_hex_dx', 1, 0);
model.geom('part4').feature('wp1').geom.feature('pol1').setIndex('table', 'cell_depth-part_hon_hex_dy', 1, 1);
model.geom('part4').feature('wp1').geom.feature('pol1').setIndex('table', 'cell_width*2/6+part_hon_hex_dx', 2, 0);
model.geom('part4').feature('wp1').geom.feature('pol1').setIndex('table', 'cell_depth-part_hon_hex_dy', 2, 1);
model.geom('part4').feature('wp1').geom.feature('pol1').setIndex('table', 'cell_width/6+part_hon_hex_ex', 3, 0);
model.geom('part4').feature('wp1').geom.feature('pol1').setIndex('table', 'cell_depth/2', 3, 1);
model.geom('part4').feature('wp1').geom.feature('pol1').setIndex('table', 'cell_width*2/6+part_hon_hex_dx', 4, 0);
model.geom('part4').feature('wp1').geom.feature('pol1').setIndex('table', 'part_hon_hex_dy', 4, 1);
model.geom('part4').feature('wp1').geom.feature('pol1').setIndex('table', 'cell_width*4/6-part_hon_hex_dx', 5, 0);
model.geom('part4').feature('wp1').geom.feature('pol1').setIndex('table', 'part_hon_hex_dy', 5, 1);
model.geom('part4').feature('wp1').geom.run('pol1');
model.geom('part4').feature('wp1').geom.create('copy1', 'Copy');
model.geom('part4').feature('wp1').geom.feature('copy1').selection('input').set({'pol1'});
model.geom('part4').feature('wp1').geom.feature('copy1').set('displx', '-cell_width/2 -cell_width/2 cell_width/2 cell_width/2');
model.geom('part4').feature('wp1').geom.feature('copy1').set('disply', '-cell_depth/2 cell_depth/2 -cell_depth/2 cell_depth/2');
model.geom('part4').feature('wp1').geom.run('copy1');
model.geom('part4').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('part4').feature('wp1').geom.feature('r1').set('size', {'cell_width' 'cell_depth'});
model.geom('part4').feature('wp1').geom.run('r1');
model.geom('part4').feature('wp1').geom.create('dif1', 'Difference');
model.geom('part4').feature('wp1').geom.feature('dif1').selection('input').set({'r1'});
model.geom('part4').feature('wp1').geom.feature('dif1').selection('input2').set({'copy1' 'pol1'});
model.geom('part4').feature('wp1').geom.run('dif1');
model.geom('part4').run('wp1');
model.geom('part4').feature.create('ext1', 'Extrude');
model.geom('part4').feature('ext1').setIndex('distance', 'cell_height', 0);
model.geom('part4').run('ext1');
model.geom('part4').create('elseif1', 'ElseIf');
model.geom('part4').feature('elseif1').set('condition', 'type==1');
model.geom('part4').run('elseif1');
model.geom('part4').create('pch2', 'ParameterCheck');
model.geom('part4').feature('pch2').set('condition', 'part_hon_rec1_th<min(cell_width, cell_depth)/50');
model.geom('part4').feature('pch2').set('message', 'The thickness should be greater than 1/50th of the minimum side length of the cell.');
model.geom('part4').run('pch2');
model.geom('part4').create('blk1', 'Block');
model.geom('part4').feature('blk1').set('size', {'cell_width' '1' '1'});
model.geom('part4').feature('blk1').setIndex('size', 'cell_depth', 1);
model.geom('part4').feature('blk1').setIndex('size', 'cell_height', 2);
model.geom('part4').run('blk1');
model.geom('part4').create('blk2', 'Block');
model.geom('part4').feature('blk2').set('size', {'cell_width-part_hon_rec1_th' '1' '1'});
model.geom('part4').feature('blk2').setIndex('size', 'cell_depth-part_hon_rec1_th', 1);
model.geom('part4').feature('blk2').setIndex('size', 'cell_height', 2);
model.geom('part4').feature('blk2').set('pos', {'part_hon_rec1_th/2' '0' '0'});
model.geom('part4').feature('blk2').setIndex('pos', 'part_hon_rec1_th/2', 1);
model.geom('part4').run('blk2');
model.geom('part4').create('dif1', 'Difference');
model.geom('part4').feature('dif1').selection('input').set({'blk1'});
model.geom('part4').feature('dif1').selection('input2').set({'blk2'});
model.geom('part4').run('dif1');
model.geom('part4').create('elseif2', 'ElseIf');
model.geom('part4').feature('elseif2').set('condition', 'type==2');
model.geom('part4').run('elseif2');
model.geom('part4').create('pch3', 'ParameterCheck');
model.geom('part4').feature('pch3').set('condition', 'part_hon_rec2_th<min(cell_width, cell_depth)/50');
model.geom('part4').feature('pch3').set('message', 'The thickness should be greater than 1/50th of the minimum side length of the cell.');
model.geom('part4').run('pch3');
model.geom('part4').create('blk3', 'Block');
model.geom('part4').feature('blk3').set('size', {'cell_width' '1' '1'});
model.geom('part4').feature('blk3').setIndex('size', 'cell_depth', 1);
model.geom('part4').feature('blk3').setIndex('size', 'cell_height', 2);
model.geom('part4').run('blk3');
model.geom('part4').create('blk4', 'Block');
model.geom('part4').feature('blk4').set('size', {'cell_width/4' '1' '1'});
model.geom('part4').feature('blk4').setIndex('size', 'cell_depth-part_hon_rec2_th', 1);
model.geom('part4').feature('blk4').setIndex('size', 'cell_height', 2);
model.geom('part4').feature('blk4').set('pos', {'-part_hon_rec2_th/2' '0' '0'});
model.geom('part4').feature('blk4').setIndex('pos', 'part_hon_rec2_th/2', 1);
model.geom('part4').run('blk4');
model.geom('part4').create('blk5', 'Block');
model.geom('part4').feature('blk5').set('size', {'cell_width/2-part_hon_rec2_th' '1' '1'});
model.geom('part4').feature('blk5').setIndex('size', 'cell_depth/2', 1);
model.geom('part4').feature('blk5').setIndex('size', 'cell_height', 2);
model.geom('part4').feature('blk5').set('pos', {'cell_width/4+part_hon_rec2_th/2' '0' '0'});
model.geom('part4').feature('blk5').setIndex('pos', '-part_hon_rec2_th/2', 1);
model.geom('part4').run('blk5');
model.geom('part4').feature.duplicate('blk6', 'blk5');
model.geom('part4').feature('blk6').setIndex('pos', 'cell_depth/2+part_hon_rec2_th/2', 1);
model.geom('part4').run('blk6');
model.geom('part4').feature.duplicate('blk7', 'blk4');
model.geom('part4').feature('blk7').setIndex('pos', 'cell_width*3/4+part_hon_rec2_th/2', 0);
model.geom('part4').run('blk7');
model.geom('part4').create('dif2', 'Difference');
model.geom('part4').feature('dif2').selection('input').set({'blk3'});
model.geom('part4').feature('dif2').selection('input2').set({'blk4' 'blk5' 'blk6' 'blk7'});
model.geom('part4').run('dif2');
model.geom('part4').create('elseif3', 'ElseIf');
model.geom('part4').feature('elseif3').set('condition', 'type==3');
model.geom('part4').run('elseif3');
model.geom('part4').create('pch4', 'ParameterCheck');
model.geom('part4').feature('pch4').set('condition', 'part_hon_cyl_th<min(cell_width, cell_depth)/50');
model.geom('part4').feature('pch4').set('message', 'The thickness should be greater than 1/50th of the minimum side length of the cell.');
model.geom('part4').run('pch4');
model.geom('part4').create('cyl1', 'Cylinder');
model.geom('part4').feature('cyl1').set('r', 'min(min((cell_depth-part_hon_cyl_th)/2,(sqrt((cell_width/2)^2+(cell_depth/2)^2)-part_hon_cyl_th)/2),(cell_width-part_hon_cyl_th)/2)');
model.geom('part4').feature('cyl1').set('h', 'cell_height');
model.geom('part4').feature('cyl1').set('pos', {'cell_width/2' '0' '0'});
model.geom('part4').feature('cyl1').setIndex('pos', 'cell_depth/2', 1);
model.geom('part4').run('cyl1');
model.geom('part4').create('copy1', 'Copy');
model.geom('part4').feature('copy1').selection('input').set({'cyl1'});
model.geom('part4').feature('copy1').set('displx', '-cell_width/2 -cell_width/2 cell_width/2 cell_width/2');
model.geom('part4').feature('copy1').set('disply', '-cell_depth/2 cell_depth/2 -cell_depth/2 cell_depth/2');
model.geom('part4').run('copy1');
model.geom('part4').create('blk8', 'Block');
model.geom('part4').feature('blk8').set('size', {'cell_width' '1' '1'});
model.geom('part4').feature('blk8').setIndex('size', 'cell_depth', 1);
model.geom('part4').feature('blk8').setIndex('size', 'cell_height', 2);
model.geom('part4').run('blk8');
model.geom('part4').create('dif3', 'Difference');
model.geom('part4').feature('dif3').selection('input').set({'blk8'});
model.geom('part4').feature('dif3').selection('input2').set({'copy1' 'cyl1'});
model.geom('part4').run('dif3');
model.geom('part4').create('elseif4', 'ElseIf');
model.geom('part4').feature('elseif4').set('condition', 'type==4');
model.geom('part4').run('elseif4');
model.geom('part4').create('pch5', 'ParameterCheck');
model.geom('part4').feature('pch5').set('condition', 'part_hon_tri_th<min(cell_width, cell_depth)/50');
model.geom('part4').feature('pch5').set('message', 'The thickness should be greater than 1/50th of the minimum side length of the cell.');
model.geom('part4').run('pch5');
model.geom('part4').create('blk9', 'Block');
model.geom('part4').feature('blk9').set('size', {'part_hon_tri_th' '1' '1'});
model.geom('part4').feature('blk9').setIndex('size', 'cell_depth', 1);
model.geom('part4').feature('blk9').setIndex('size', 'cell_height', 2);
model.geom('part4').feature('blk9').set('pos', {'-part_hon_tri_th/2' '0' '0'});
model.geom('part4').run('blk9');
model.geom('part4').feature.duplicate('blk10', 'blk9');
model.geom('part4').feature('blk10').setIndex('size', 'sqrt(cell_depth^2+cell_width^2)', 1);
model.geom('part4').run('blk10');
model.geom('part4').create('rot1', 'Rotate');
model.geom('part4').feature('rot1').selection('input').set({'blk10'});
model.geom('part4').feature('rot1').set('rot', '-atan(cell_width/cell_depth)[rad]');
model.geom('part4').run('rot1');
model.geom('part4').create('mir1', 'Mirror');
model.geom('part4').feature('mir1').selection('input').set({'rot1'});
model.geom('part4').feature('mir1').set('keep', true);
model.geom('part4').feature('mir1').set('pos', {'0' 'cell_depth/2' '0'});
model.geom('part4').feature('mir1').set('axis', [0 1 0]);
model.geom('part4').run('mir1');
model.geom('part4').create('copy2', 'Copy');
model.geom('part4').feature('copy2').selection('input').set({'blk9'});
model.geom('part4').feature('copy2').set('displx', 'cell_width/2 cell_width');
model.geom('part4').run('copy2');
model.geom('part4').create('blk11', 'Block');
model.geom('part4').feature('blk11').set('size', {'cell_width' '1' '1'});
model.geom('part4').feature('blk11').setIndex('size', 'cell_depth', 1);
model.geom('part4').feature('blk11').setIndex('size', 'cell_height', 2);
model.geom('part4').run('blk11');
model.geom('part4').create('dif4', 'Difference');
model.geom('part4').feature('dif4').selection('input').set({'blk11'});
model.geom('part4').feature('dif4').selection('input2').set({'blk9' 'copy2' 'mir1' 'rot1'});
model.geom('part4').run('dif4');
model.geom('part4').feature.duplicate('blk12', 'blk11');
model.geom('part4').run('blk12');
model.geom('part4').create('dif5', 'Difference');
model.geom('part4').feature('dif5').selection('input').set({'blk12'});
model.geom('part4').feature('dif5').selection('input2').set({'dif4'});
model.geom('part4').run('dif5');
model.geom('part4').run('endif1');
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part4');
model.geom('geom1').run('pi1');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'cell_width' '1' '1'});
model.geom('geom1').feature('blk1').setIndex('size', 'cell_depth', 1);
model.geom('geom1').feature('blk1').setIndex('size', 'cell_height', 2);
model.geom('geom1').run('blk1');
model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').label('Explicit Selection: Periodic Boundaries, x Direction');
model.geom('geom1').feature('sel1').selection('selection').init(2);
model.geom('geom1').feature('sel1').selection('selection').set('blk1', [2 5]);
model.geom('geom1').run('sel1');
model.geom('geom1').create('sel2', 'ExplicitSelection');
model.geom('geom1').feature('sel2').label('Explicit Selection: Periodic Boundaries, y Direction');
model.geom('geom1').feature('sel2').selection('selection').init(2);
model.geom('geom1').feature('sel2').selection('selection').set('blk1', [3 6]);
model.geom('geom1').run('sel2');
model.geom('geom1').create('sel3', 'ExplicitSelection');
model.geom('geom1').feature('sel3').label('Explicit Selection: Periodic Boundaries, z Direction');
model.geom('geom1').feature('sel3').selection('selection').init(2);
model.geom('geom1').feature('sel3').selection('selection').set('blk1', [1 4]);
model.geom('geom1').run('sel3');
model.geom('geom1').create('sel4', 'ExplicitSelection');
model.geom('geom1').feature('sel4').label('Explicit Selection: Origin Point');
model.geom('geom1').feature('sel4').selection('selection').init(0);
model.geom('geom1').feature('sel4').selection('selection').set('blk1', 1);
model.geom('geom1').run('sel4');
model.geom('geom1').create('sel5', 'ExplicitSelection');
model.geom('geom1').feature('sel5').label('Explicit Selection: Cell Components');
model.geom('geom1').feature('sel5').selection('selection').init;
model.geom('geom1').feature('sel5').selection('selection').set({'pi1'});
model.geom('geom1').run('sel5');
model.geom('geom1').create('sel6', 'ExplicitSelection');
model.geom('geom1').feature('sel6').label('Explicit Selection: Boundaries to Hide');
model.geom('geom1').feature('sel6').selection('selection').init(2);
model.geom('geom1').feature('sel6').selection('selection').set('blk1', [2 3 4]);
model.geom('geom1').run('fin');
model.geom('geom1').create('difsel1', 'DifferenceSelection');
model.geom('geom1').feature('difsel1').label('Difference Selection: Hidden Boundaries');
model.geom('geom1').feature('difsel1').set('entitydim', 2);
model.geom('geom1').feature('difsel1').set('add', {'sel6'});
model.geom('geom1').feature('difsel1').set('subtract', {'sel5'});
model.geom('geom1').run('difsel1');

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').label('Average: All Domains');
model.cpl('aveop1').selection.all;
model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').label('Integration: Periodic Boundaries, x Direction');
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.named('geom1_sel1');
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').label('Integration: Periodic Boundaries, y Direction');
model.cpl('intop2').selection.geom('geom1', 2);
model.cpl('intop2').selection.named('geom1_sel2');
model.cpl.create('intop3', 'Integration', 'geom1');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').label('Integration: Periodic Boundaries, z Direction');
model.cpl('intop3').selection.geom('geom1', 2);
model.cpl('intop3').selection.named('geom1_sel3');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Selection: Domain Material');
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Selection: All Domains');
model.selection('sel2').all;

model.view('view1').hideObjects.create('hide1');
model.view('view1').hideObjects('hide1').init(2);
model.view('view1').hideObjects('hide1').named('difsel1');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('Acrylic plastic');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customspecular', [0.9803921568627451 0.9803921568627451 0.9803921568627451]);
model.material('mat2').set('customdiffuse', [0.39215686274509803 0.7843137254901961 0.39215686274509803]);
model.material('mat2').set('customambient', [0.39215686274509803 0.7843137254901961 0.39215686274509803]);
model.material('mat2').set('noise', true);
model.material('mat2').set('lighting', 'phong');
model.material('mat2').set('shininess', 1000);
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'7.0e-5[1/K]' '0' '0' '0' '7.0e-5[1/K]' '0' '0' '0' '7.0e-5[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '1470[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('density', '1190[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'0.18[W/(m*K)]' '0' '0' '0' '0.18[W/(m*K)]' '0' '0' '0' '0.18[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '3.2[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.35');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat3').label('Aluminum');
model.material('mat3').set('family', 'aluminum');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat3').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.33');
model.material('mat3').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat3').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat3').propertyGroup('Murnaghan').set('n', '-350[GPa]');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat4').label('Brick');
model.material('mat4').set('family', 'brick');
model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', {'6e-6[1/K]' '0' '0' '0' '6e-6[1/K]' '0' '0' '0' '6e-6[1/K]'});
model.material('mat4').propertyGroup('def').set('density', '2000[kg/m^3]');
model.material('mat4').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'0.5[W/(m*K)]' '0' '0' '0' '0.5[W/(m*K)]' '0' '0' '0' '0.5[W/(m*K)]'});
model.material('mat4').propertyGroup('Enu').set('E', '17[GPa]');
model.material('mat4').propertyGroup('Enu').set('nu', '0.2');
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat5').label('Cast iron');
model.material('mat5').set('family', 'custom');
model.material('mat5').set('customspecular', [0.9803921568627451 0.9803921568627451 0.9803921568627451]);
model.material('mat5').set('customdiffuse', [0.39215686274509803 0.39215686274509803 0.39215686274509803]);
model.material('mat5').set('customambient', [0.39215686274509803 0.39215686274509803 0.39215686274509803]);
model.material('mat5').set('noise', true);
model.material('mat5').set('noisescale', 0.14);
model.material('mat5').set('noisefreq', 2.1);
model.material('mat5').set('fresnel', 0.1);
model.material('mat5').set('roughness', 0.1);
model.material('mat5').set('metallic', 0);
model.material('mat5').set('pearl', 0);
model.material('mat5').set('diffusewrap', 0);
model.material('mat5').set('clearcoat', 0);
model.material('mat5').set('reflectance', 0);
model.material('mat5').propertyGroup('def').set('thermalexpansioncoefficient', {'11e-6[1/K]' '0' '0' '0' '11e-6[1/K]' '0' '0' '0' '11e-6[1/K]'});
model.material('mat5').propertyGroup('def').set('density', '7000[kg/m^3]');
model.material('mat5').propertyGroup('def').set('heatcapacity', '420[J/(kg*K)]');
model.material('mat5').propertyGroup('def').set('thermalconductivity', {'50[W/(m*K)]' '0' '0' '0' '50[W/(m*K)]' '0' '0' '0' '50[W/(m*K)]'});
model.material('mat5').propertyGroup('Enu').set('E', '140[GPa]');
model.material('mat5').propertyGroup('Enu').set('nu', '0.25');
model.material.create('mat6', 'Common', 'comp1');
model.material('mat6').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat6').label('Concrete');
model.material('mat6').set('family', 'concrete');
model.material('mat6').propertyGroup('def').set('thermalexpansioncoefficient', {'10e-6[1/K]' '0' '0' '0' '10e-6[1/K]' '0' '0' '0' '10e-6[1/K]'});
model.material('mat6').propertyGroup('def').set('density', '2300[kg/m^3]');
model.material('mat6').propertyGroup('def').set('thermalconductivity', {'1.8[W/(m*K)]' '0' '0' '0' '1.8[W/(m*K)]' '0' '0' '0' '1.8[W/(m*K)]'});
model.material('mat6').propertyGroup('def').set('heatcapacity', '880[J/(kg*K)]');
model.material('mat6').propertyGroup('Enu').set('E', '25[GPa]');
model.material('mat6').propertyGroup('Enu').set('nu', '0.20');
model.material.create('mat7', 'Common', 'comp1');
model.material('mat7').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat7').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat7').label('Copper');
model.material('mat7').set('family', 'copper');
model.material('mat7').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat7').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat7').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat7').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat7').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat7').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat7').propertyGroup('Enu').set('nu', '0.35');
model.material('mat7').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat7').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat7').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat7').propertyGroup('linzRes').addInput('temperature');
model.material.create('mat8', 'Common', 'comp1');
model.material('mat8').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat8').label('Glass (quartz)');
model.material('mat8').set('family', 'custom');
model.material('mat8').set('customambient', [1 1 1]);
model.material('mat8').set('noise', true);
model.material('mat8').set('fresnel', 0.99);
model.material('mat8').set('roughness', 0.02);
model.material('mat8').set('metallic', 0);
model.material('mat8').set('pearl', 0);
model.material('mat8').set('diffusewrap', 0);
model.material('mat8').set('clearcoat', 0);
model.material('mat8').set('reflectance', 0);
model.material('mat8').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat8').propertyGroup('def').set('electricconductivity', {'1e-14[S/m]' '0' '0' '0' '1e-14[S/m]' '0' '0' '0' '1e-14[S/m]'});
model.material('mat8').propertyGroup('def').set('relpermittivity', {'4.2' '0' '0' '0' '4.2' '0' '0' '0' '4.2'});
model.material('mat8').propertyGroup('def').set('density', '2210[kg/m^3]');
model.material('mat8').propertyGroup('def').set('thermalconductivity', {'1.4[W/(m*K)]' '0' '0' '0' '1.4[W/(m*K)]' '0' '0' '0' '1.4[W/(m*K)]'});
model.material('mat8').propertyGroup('def').set('heatcapacity', '730[J/(kg*K)]');
model.material('mat8').propertyGroup('RefractiveIndex').set('n', {'1.5' '0' '0' '0' '1.5' '0' '0' '0' '1.5'});
model.material.create('mat9', 'Common', 'comp1');
model.material('mat9').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat9').label('Iron');
model.material('mat9').set('family', 'iron');
model.material('mat9').propertyGroup('def').set('relpermeability', {'4000' '0' '0' '0' '4000' '0' '0' '0' '4000'});
model.material('mat9').propertyGroup('def').set('electricconductivity', {'1.12e7[S/m]' '0' '0' '0' '1.12e7[S/m]' '0' '0' '0' '1.12e7[S/m]'});
model.material('mat9').propertyGroup('def').set('thermalexpansioncoefficient', {'12.2e-6[1/K]' '0' '0' '0' '12.2e-6[1/K]' '0' '0' '0' '12.2e-6[1/K]'});
model.material('mat9').propertyGroup('def').set('heatcapacity', '440[J/(kg*K)]');
model.material('mat9').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat9').propertyGroup('def').set('density', '7870[kg/m^3]');
model.material('mat9').propertyGroup('def').set('thermalconductivity', {'76.2[W/(m*K)]' '0' '0' '0' '76.2[W/(m*K)]' '0' '0' '0' '76.2[W/(m*K)]'});
model.material('mat9').propertyGroup('Enu').set('E', '200[GPa]');
model.material('mat9').propertyGroup('Enu').set('nu', '0.29');
model.material.create('mat10', 'Common', 'comp1');
model.material('mat10').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat10').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat10').label('Silica glass');
model.material('mat10').set('family', 'custom');
model.material('mat10').set('customambient', [1 1 1]);
model.material('mat10').set('noise', true);
model.material('mat10').set('fresnel', 0.99);
model.material('mat10').set('roughness', 0.02);
model.material('mat10').set('metallic', 0);
model.material('mat10').set('pearl', 0);
model.material('mat10').set('diffusewrap', 0);
model.material('mat10').set('clearcoat', 0);
model.material('mat10').set('reflectance', 0);
model.material('mat10').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat10').propertyGroup('def').set('electricconductivity', {'1e-14[S/m]' '0' '0' '0' '1e-14[S/m]' '0' '0' '0' '1e-14[S/m]'});
model.material('mat10').propertyGroup('def').set('thermalexpansioncoefficient', {'0.55e-6[1/K]' '0' '0' '0' '0.55e-6[1/K]' '0' '0' '0' '0.55e-6[1/K]'});
model.material('mat10').propertyGroup('def').set('heatcapacity', '703[J/(kg*K)]');
model.material('mat10').propertyGroup('def').set('relpermittivity', {'3.75' '0' '0' '0' '3.75' '0' '0' '0' '3.75'});
model.material('mat10').propertyGroup('def').set('density', '2203[kg/m^3]');
model.material('mat10').propertyGroup('def').set('thermalconductivity', {'1.38[W/(m*K)]' '0' '0' '0' '1.38[W/(m*K)]' '0' '0' '0' '1.38[W/(m*K)]'});
model.material('mat10').propertyGroup('Enu').set('E', '73.1[GPa]');
model.material('mat10').propertyGroup('Enu').set('nu', '0.17');
model.material('mat10').propertyGroup('RefractiveIndex').set('n', {'1.45' '0' '0' '0' '1.45' '0' '0' '0' '1.45'});
model.material.create('mat11', 'Common', 'comp1');
model.material('mat11').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat11').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat11').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat11').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat11').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat11').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat11').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat11').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat11').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat11').propertyGroup.create('Swift', 'Swift');
model.material('mat11').propertyGroup.create('Voce', 'Voce');
model.material('mat11').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat11').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat11').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat11').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat11').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat11').propertyGroup.create('Norton', 'Norton');
model.material('mat11').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat11').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat11').label('Structural steel');
model.material('mat11').set('family', 'custom');
model.material('mat11').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat11').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat11').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat11').set('noise', true);
model.material('mat11').set('fresnel', 0.9);
model.material('mat11').set('roughness', 0.3);
model.material('mat11').set('metallic', 0);
model.material('mat11').set('pearl', 0);
model.material('mat11').set('diffusewrap', 0);
model.material('mat11').set('clearcoat', 0);
model.material('mat11').set('reflectance', 0);
model.material('mat11').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat11').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat11').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat11').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat11').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat11').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat11').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat11').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat11').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat11').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat11').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat11').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat11').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat11').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat11').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat11').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat11').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat11').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat11').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat11').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat11').propertyGroup('Enu').addInput('temperature');
model.material('mat11').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat11').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat11').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat11').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat11').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat11').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat11').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat11').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat11').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat11').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat11').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat11').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat11').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat11').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat11').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat11').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat11').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat11').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat11').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat11').propertyGroup('Ludwik').addInput('temperature');
model.material('mat11').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat11').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat11').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat11').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat11').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat11').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat11').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat11').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat11').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat11').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat11').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat11').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat11').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat11').propertyGroup('Voce').addInput('temperature');
model.material('mat11').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat11').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat11').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat11').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat11').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat11').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat11').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat11').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat11').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat11').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat11').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat11').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat11').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat11').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat11').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat11').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat11').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat11').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat11').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat11').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat11').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat11').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat11').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat11').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');
model.material.create('mat12', 'Common', 'comp1');
model.material('mat12').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat12').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat12').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat12').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat12').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat12').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat12').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat12').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat12').label('Water, liquid');
model.material('mat12').set('family', 'water');
model.material('mat12').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat12').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat12').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat12').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat12').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat12').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat12').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat12').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat12').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat12').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat12').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat12').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat12').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat12').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat12').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat12').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat12').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat12').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat12').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat12').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat12').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat12').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat12').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat12').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat12').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat12').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat12').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat12').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat12').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat12').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat12').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat12').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat12').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat12').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat12').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat12').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat12').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat12').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat12').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat12').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat12').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat12').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat12').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat12').propertyGroup('def').set('bulkviscosity', '');
model.material('mat12').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat12').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat12').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat12').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat12').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat12').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat12').propertyGroup('def').set('density', 'rho(T)');
model.material('mat12').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat12').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat12').propertyGroup('def').addInput('temperature');
model.material('mat1').selection.set([]);
model.material('mat3').selection.set([2]);
model.material('mat3').selection.all;

model.physics('ht').feature('solid1').set('minput_pressure', 'pA0');
model.physics('ht').feature('init1').set('Tinit', 'T0');
model.physics('ht').create('pc1', 'PeriodicHeat', 2);
model.physics('ht').feature('pc1').selection.named('geom1_sel1');
model.physics('ht').feature('pc1').set('DeltaT', 'dTx');
model.physics('ht').create('pc2', 'PeriodicHeat', 2);
model.physics('ht').feature('pc2').selection.named('geom1_sel2');
model.physics('ht').feature('pc2').set('DeltaT', 'dTy');
model.physics('ht').create('pc3', 'PeriodicHeat', 2);
model.physics('ht').feature('pc3').selection.named('geom1_sel3');
model.physics('ht').feature('pc3').set('DeltaT', 'dTz');
model.physics('ht').create('constr1', 'PointwiseConstraint', 0);
model.physics('ht').feature('constr1').selection.named('geom1_sel4');
model.physics('ht').feature('constr1').set('constraintExpression', '(T0-(dTx+dTy+dTz)/2)-T');

model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').run;

model.modelNode.create('comp2', true);

model.geom.create('geom2', 3);
model.geom('geom2').model('comp2');

model.mesh.create('mesh2', 'geom2');

model.geom('geom2').create('imp1', 'Import');
model.geom('geom2').feature('imp1').set('type', 'sequence');
model.geom('geom2').feature('imp1').set('sequence', 'part4');
model.geom('geom2').run('imp1');
model.geom('geom2').create('sel1', 'ExplicitSelection');
model.geom('geom2').feature('sel1').label('Explicit Selection: Part');
model.geom('geom2').feature('sel1').selection('selection').init;
model.geom('geom2').feature('sel1').selection('selection').set({'imp1'});
model.geom('geom2').run('sel1');
model.geom('geom2').create('arr1', 'Array');
model.geom('geom2').feature('arr1').selection('input').set({'imp1'});
model.geom('geom2').feature('arr1').set('fullsize', [3 3 3]);
model.geom('geom2').feature('arr1').set('displ', {'cell_width' '0' '0'});
model.geom('geom2').feature('arr1').setIndex('displ', 'cell_depth', 1);
model.geom('geom2').feature('arr1').setIndex('displ', 'cell_height', 2);
model.geom('geom2').run('arr1');
model.geom('geom2').create('blk1', 'Block');
model.geom('geom2').feature('blk1').set('size', {'3*cell_width' '1' '1'});
model.geom('geom2').feature('blk1').setIndex('size', '3*cell_depth', 1);
model.geom('geom2').feature('blk1').setIndex('size', '3*cell_height', 2);
model.geom('geom2').run('blk1');
model.geom('geom2').create('sel2', 'ExplicitSelection');
model.geom('geom2').feature('sel2').label('Explicit Selection: Block Boundaries to Hide');
model.geom('geom2').feature('sel2').selection('selection').init(2);
model.geom('geom2').feature('sel2').selection('selection').set('blk1', [2 3 4]);
model.geom('geom2').run('fin');
model.geom('geom2').create('difsel1', 'DifferenceSelection');
model.geom('geom2').feature('difsel1').label('Difference Selection: Hidden Boundaries');
model.geom('geom2').feature('difsel1').set('entitydim', 2);
model.geom('geom2').feature('difsel1').set('add', {'sel2'});
model.geom('geom2').feature('difsel1').set('subtract', {'sel1'});
model.geom('geom2').run('difsel1');

model.view('view7').hideObjects.create('hide1');
model.view('view7').hideObjects('hide1').init(2);
model.view('view7').hideObjects('hide1').named('difsel1');

model.mesh.remove('mesh2');

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'cell_width', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'cell_width', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'cell_depth', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'm', 1);
model.study('std1').feature('param').setIndex('pname', 'cell_depth', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'm', 1);
model.study('std1').feature('param').setIndex('pname', 'cell_height', 2);
model.study('std1').feature('param').setIndex('plistarr', '', 2);
model.study('std1').feature('param').setIndex('punit', 'm', 2);
model.study('std1').feature('param').setIndex('pname', 'cell_height', 2);
model.study('std1').feature('param').setIndex('plistarr', '', 2);
model.study('std1').feature('param').setIndex('punit', 'm', 2);
model.study('std1').feature('param').setIndex('pname', 'dTx', 0);
model.study('std1').feature('param').setIndex('plistarr', '1 0 0', 0);
model.study('std1').feature('param').setIndex('punit', 'K', 0);
model.study('std1').feature('param').setIndex('pname', 'dTy', 1);
model.study('std1').feature('param').setIndex('plistarr', '0 1 0', 1);
model.study('std1').feature('param').setIndex('punit', 'K', 1);
model.study('std1').feature('param').setIndex('pname', 'dTz', 2);
model.study('std1').feature('param').setIndex('plistarr', '0 0 1', 2);
model.study('std1').feature('param').setIndex('punit', 'K', 2);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'dTx' 'dTy' 'dTz'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'1 0 0' '0 1 0' '0 0 1'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'K' 'K' 'K'});
model.sol('sol1').feature('s1').feature('p1').set('sweeptype', 'sparse');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'param');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Temperature (ht)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 3, 0);
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg1').feature.create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('solutionparams', 'parent');
model.result('pg1').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('vol1').set('smooth', 'internal');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('data', 'parent');
model.result('pg1').run;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Thermal Conductivity, xx-Component');
model.result.numerical('gev1').setIndex('expr', 'intop1(ht.ndflux*ht.nx)/(intop1(1)*1[K]/cell_width)[W/(m*K)]', 0);
model.result.numerical('gev1').setIndex('descr', 'Thermal conductivity, xx-component', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Thermal Conductivity, xx-Component');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').label('Thermal Conductivity, yx-Component');
model.result.numerical('gev2').setIndex('expr', 'intop2(ht.ndflux*ht.ny)/(intop2(1)*1[K]/cell_width)[W/(m*K)]', 0);
model.result.numerical('gev2').setIndex('descr', 'Thermal conductivity, yx-component', 0);
model.result.numerical('gev2').set('table', 'tbl1');
model.result.numerical('gev2').appendResult;
model.result.numerical.create('gev3', 'EvalGlobal');
model.result.numerical('gev3').label('Thermal Conductivity, zx-Component');
model.result.numerical('gev3').setIndex('expr', 'intop3(ht.ndflux*ht.nz)/(intop3(1)*1[K]/cell_width)[W/(m*K)]', 0);
model.result.numerical('gev3').setIndex('descr', 'Thermal conductivity, zx-component', 0);
model.result.numerical('gev3').set('table', 'tbl1');
model.result.numerical('gev3').appendResult;
model.result.numerical.create('gev4', 'EvalGlobal');
model.result.numerical('gev4').label('Thermal Conductivity, xy-component');
model.result.numerical('gev4').setIndex('expr', 'intop1(ht.ndflux*ht.nx)/(intop1(1)*1[K]/cell_depth)[W/(m*K)]', 0);
model.result.numerical('gev4').setIndex('descr', 'Thermal conductivity, xy-component', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Thermal Conductivity, xy-component');
model.result.numerical('gev4').set('table', 'tbl2');
model.result.numerical('gev4').setResult;
model.result.numerical.create('gev5', 'EvalGlobal');
model.result.numerical('gev5').label('Thermal Conductivity, yy-Component');
model.result.numerical('gev5').setIndex('expr', 'intop2(ht.ndflux*ht.ny)/(intop2(1)*1[K]/cell_depth)[W/(m*K)]', 0);
model.result.numerical('gev5').setIndex('descr', 'Thermal conductivity, yy-component', 0);
model.result.numerical('gev5').set('table', 'tbl2');
model.result.numerical('gev5').appendResult;
model.result.numerical.create('gev6', 'EvalGlobal');
model.result.numerical('gev6').label('Thermal Conductivity, zy-Component');
model.result.numerical('gev6').setIndex('expr', 'intop3(ht.ndflux*ht.nz)/(intop3(1)*1[K]/cell_depth)[W/(m*K)]', 0);
model.result.numerical('gev6').setIndex('descr', 'Thermal conductivity, zy-component', 0);
model.result.numerical('gev6').set('table', 'tbl2');
model.result.numerical('gev6').appendResult;
model.result.numerical.create('gev7', 'EvalGlobal');
model.result.numerical('gev7').label('Thermal Conductivity, xz-Component');
model.result.numerical('gev7').setIndex('expr', 'intop1(ht.ndflux*ht.nx)/(intop1(1)*1[K]/cell_height)[W/(m*K)]', 0);
model.result.numerical('gev7').setIndex('descr', 'Thermal conductivity, xz-component', 0);
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').comments('Thermal Conductivity, xz-Component');
model.result.numerical('gev7').set('table', 'tbl3');
model.result.numerical('gev7').setResult;
model.result.numerical.create('gev8', 'EvalGlobal');
model.result.numerical('gev8').label('Thermal Conductivity, yz-Component');
model.result.numerical('gev8').setIndex('expr', 'intop2(ht.ndflux*ht.ny)/(intop2(1)*1[K]/cell_height)[W/(m*K)]', 0);
model.result.numerical('gev8').setIndex('descr', 'Thermal conductivity, yz-component', 0);
model.result.numerical('gev8').set('table', 'tbl3');
model.result.numerical('gev8').appendResult;
model.result.numerical.create('gev9', 'EvalGlobal');
model.result.numerical('gev9').label('Thermal Conductivity, zz-Component');
model.result.numerical('gev9').setIndex('expr', 'intop3(ht.ndflux*ht.nz)/(intop3(1)*1[K]/cell_height)[W/(m*K)]', 0);
model.result.numerical('gev9').setIndex('descr', 'Thermal conductivity, zz-component', 0);
model.result.numerical('gev9').set('table', 'tbl3');
model.result.numerical('gev9').appendResult;
model.result.numerical.create('gev10', 'EvalGlobal');
model.result.numerical('gev10').label('Density');
model.result.numerical('gev10').setIndex('expr', 'aveop1(ht.rho)', 0);
model.result.numerical('gev10').setIndex('descr', 'Density', 0);
model.result.numerical('gev10').set('dataseries', 'average');
model.result.table.create('tbl4', 'Table');
model.result.table('tbl4').comments('Density');
model.result.numerical('gev10').set('table', 'tbl4');
model.result.numerical('gev10').setResult;
model.result.numerical.create('gev11', 'EvalGlobal');
model.result.numerical('gev11').label('Heat Capacity at Constant Pressure');
model.result.numerical('gev11').setIndex('expr', 'aveop1(ht.rho*ht.Cp)/aveop1(ht.rho)', 0);
model.result.numerical('gev11').setIndex('descr', 'Heat capacity at constant pressure', 0);
model.result.numerical('gev11').set('dataseries', 'average');
model.result.table.create('tbl5', 'Table');
model.result.table('tbl5').comments('Heat Capacity at Constant Pressure');
model.result.numerical('gev11').set('table', 'tbl5');
model.result.numerical('gev11').setResult;
model.result.numerical.create('gev12', 'EvalGlobal');
model.result.numerical('gev12').label('Solver Tolerance');
model.result.numerical('gev12').setIndex('expr', 'rtol', 0);
model.result.numerical('gev12').setIndex('descr', 'Solver tolerance', 0);
model.result.numerical('gev12').set('dataseries', 'average');
model.result.table.create('tbl6', 'Table');
model.result.table('tbl6').comments('Solver Tolerance');
model.result.numerical('gev12').set('table', 'tbl6');
model.result.numerical('gev12').setResult;
model.result('pg1').run;

model.title('Equivalent Properties of Periodic Microstructures');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Visualization of a periodic structure from a unit cell' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Resetting some or all input parameters' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Export the resulting material properties as an MPH-file or an XML-file that can be imported to a COMSOL Multiphysics session' newline  newline 'Periodic microstructures are frequently found in composite materials, such as carbon fibers and honeycomb structures. They can be represented by a unit cell repeated along three directions of propagation.' newline  newline 'To reduce computational costs, simulations may replace all of the microscopic details of a composite material with a homogeneous domain with equivalent properties. This app computes the equivalent properties for a geometrical configuration and the material properties of a unit cell to be used in a macroscopic model that uses these composite materials.' newline  newline 'Nine different microstructures are given, with dimensional characteristics that are modifiable by the user, as well as thirteen predefined materials. The app calculates the equivalent density, heat capacity, and thermal conductivity or diffusivity of the composite materials.']);

model.label('equivalent_properties_of_periodic_microstructures.mph');

model.result('pg1').run;
model.result.report.create('rpt1', 'Report');

model.setExpectedComputationTime('4 seconds');

model.result.report('rpt1').set('templatesource', 'brief');
model.result.report('rpt1').set('format', 'docx');
model.result.report('rpt1').set('filename', 'user:///equivalent_properties_of_periodic_microstructures.docx');
model.result.report('rpt1').feature.create('tp1', 'TitlePage');
model.result.report('rpt1').feature('tp1').set('titleimage', 'none');
model.result.report('rpt1').feature.create('toc1', 'TableOfContents');
model.result.report('rpt1').feature('toc1').label('Table of Contents');
model.result.report('rpt1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').label('Software Information');
model.result.report('rpt1').feature('sec1').feature.create('root1', 'Model');
model.result.report('rpt1').feature('sec1').feature('root1').label('About the Software');
model.result.report('rpt1').feature('sec1').feature.create('std1', 'Study');
model.result.report('rpt1').feature('sec1').feature('std1').label('Study');
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').label('Application Parameters');
model.result.report('rpt1').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec1').label('Parameters');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').label('Parameters');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 24, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 27, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 28, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 29, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 33, 1);
model.result.report('rpt1').feature('sec2').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec2').label('Materials');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec1').set('source', 'firstchild');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec1').feature.create('mat1', 'Material');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec1').feature('mat1').set('includeimage', false);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec1').feature('mat1').set('includeselection', false);
model.result.report('rpt1').feature('sec2').feature('sec2').feature.duplicate('sec2', 'sec1');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec2').feature('mat1').set('noderef', 'mat2');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.duplicate('sec3', 'sec2');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec3').feature('mat1').set('noderef', 'mat3');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.duplicate('sec4', 'sec3');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec4').feature('mat1').set('noderef', 'mat4');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.duplicate('sec5', 'sec4');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec5').feature('mat1').set('noderef', 'mat5');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.duplicate('sec6', 'sec5');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec6').feature('mat1').set('noderef', 'mat6');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.duplicate('sec7', 'sec6');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec7').feature('mat1').set('noderef', 'mat7');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.duplicate('sec8', 'sec7');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec8').feature('mat1').set('noderef', 'mat8');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.duplicate('sec9', 'sec8');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec9').feature('mat1').set('noderef', 'mat9');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.duplicate('sec10', 'sec9');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec10').feature('mat1').set('noderef', 'mat10');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.duplicate('sec11', 'sec10');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec11').feature('mat1').set('noderef', 'mat11');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.duplicate('sec12', 'sec11');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec12').feature('mat1').set('noderef', 'mat12');
model.result.report('rpt1').feature('sec2').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec3').label('Solver Tolerance');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.create('mtbl1', 'Table');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('mtbl1').set('commentssource', 'none');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('mtbl1').set('noderef', 'tbl6');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('mtbl1').set('numberformat', 'custom');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('mtbl1').set('precision', 4);
model.result.report('rpt1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').label('Equivalent Thermal Properties');
model.result.report('rpt1').feature('sec3').feature.create('mtbl1', 'Table');
model.result.report('rpt1').feature('sec3').feature('mtbl1').set('commentssource', 'none');
model.result.report('rpt1').feature('sec3').feature('mtbl1').set('noderef', 'tbl4');
model.result.report('rpt1').feature('sec3').feature('mtbl1').set('numberformat', 'custom');
model.result.report('rpt1').feature('sec3').feature('mtbl1').set('precision', 4);
model.result.report('rpt1').feature('sec3').feature.create('mtbl2', 'Table');
model.result.report('rpt1').feature('sec3').feature('mtbl2').set('commentssource', 'none');
model.result.report('rpt1').feature('sec3').feature('mtbl2').set('noderef', 'tbl5');
model.result.report('rpt1').feature('sec3').feature('mtbl2').set('numberformat', 'custom');
model.result.report('rpt1').feature('sec3').feature('mtbl2').set('precision', 4);
model.result.report('rpt1').feature('sec3').feature.create('field1', 'DoubleMatrixDataField');
model.result.report('rpt1').feature('sec3').feature('field1').label('Thermal Conductivity Tensor');
model.result.report('rpt1').feature('sec3').feature('field1').set('commentssource', 'none');
model.result.report('rpt1').feature('sec3').feature('field1').set('numberformat', 'custom');
model.result.report('rpt1').feature('sec3').feature('field1').set('precision', 4);

model.title('Equivalent Properties of Periodic Microstructures');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Visualization of a periodic structure from a unit cell' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Resetting some or all input parameters' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Export the resulting material properties as an MPH-file or an XML-file that can be imported to a COMSOL Multiphysics session' newline  newline 'Periodic microstructures are frequently found in composite materials, such as carbon fibers and honeycomb structures. They can be represented by a unit cell repeated along three directions of propagation.' newline  newline 'To reduce computational costs, simulations may replace all of the microscopic details of a composite material with a homogeneous domain with equivalent properties. This app computes the equivalent properties for a geometrical configuration and the material properties of a unit cell to be used in a macroscopic model that uses these composite materials.' newline  newline 'Nine different microstructures are given, with dimensional characteristics that are modifiable by the user, as well as thirteen predefined materials. The app calculates the equivalent density, heat capacity, and thermal conductivity or diffusivity of the composite materials.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('equivalent_properties_of_periodic_microstructures.mph');

model.modelNode.label('Components');

out = model;
