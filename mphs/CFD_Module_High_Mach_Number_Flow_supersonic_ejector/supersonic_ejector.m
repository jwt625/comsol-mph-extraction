function out = model
%
% supersonic_ejector.m
%
% Model exported on May 26 2025, 21:26 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/CFD_Module/High_Mach_Number_Flow');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('hmnf', 'HighMachNumberFlowTurbulentkeps', 'geom1');
model.physics('hmnf').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/hmnf', true);

model.geom('geom1').insertFile('supersonic_ejector_geom_sequence.mph', 'geom1');
model.geom('geom1').run('sel4');

model.param.set('P1', '5[atm]');
model.param.descr('P1', 'Total pressure, primary flow');
model.param.set('P2', '0.55[atm]');
model.param.descr('P2', 'Total pressure, secondary flow');
model.param.set('Pout', '1[atm]');
model.param.descr('Pout', 'Pressure, outlet');
model.param.set('T1', '300[K]');
model.param.descr('T1', 'Total temperature, primary flow');
model.param.set('T2', 'T1');
model.param.descr('T2', 'Total temperature, secondary flow');
model.param.set('Rs', '287[J/kg/K]');
model.param.descr('Rs', 'Specific gas constant');
model.param.set('gamma', '1.41');
model.param.descr('gamma', 'Ratio of specific heats');
model.param.set('iso_diff', '0');
model.param.descr('iso_diff', 'Isotropic diffusion');

model.physics('hmnf').prop('InconsistentStabilization').set('HeatIsotropicDiffusion', true);
model.physics('hmnf').prop('InconsistentStabilization').set('delidht', 'iso_diff');
model.physics('hmnf').prop('InconsistentStabilization').set('IsotropicDiffusion', true);
model.physics('hmnf').prop('InconsistentStabilization').set('delid', 'iso_diff');
model.physics('hmnf').feature('fluid1').set('Rs_mat', 'userdef');
model.physics('hmnf').feature('fluid1').set('Rs', 'Rs');
model.physics('hmnf').feature('fluid1').set('CpOrGammaOption', 'gamma');
model.physics('hmnf').feature('fluid1').set('gamma_mat', 'userdef');
model.physics('hmnf').feature('fluid1').set('gamma', 'gamma');
model.physics('hmnf').feature('init1').set('u_init', [0 0 100]);
model.physics('hmnf').feature('init1').set('p_init', '2[atm]');
model.physics('hmnf').create('hminl1', 'HighMachNumberFlowInlet', 1);
model.physics('hmnf').feature('hminl1').selection.named('geom1_sel2');
model.physics('hmnf').feature('hminl1').set('InputState', 'TotalConditions');
model.physics('hmnf').feature('hminl1').set('p0tot', 'P1');
model.physics('hmnf').feature('hminl1').set('T0tot', 'T1');
model.physics('hmnf').feature('hminl1').set('Ma0', 0.14);
model.physics('hmnf').create('hminl2', 'HighMachNumberFlowInlet', 1);
model.physics('hmnf').feature('hminl2').selection.named('geom1_sel3');
model.physics('hmnf').feature('hminl2').set('InputState', 'TotalConditions');
model.physics('hmnf').feature('hminl2').set('p0tot', 'P2');
model.physics('hmnf').feature('hminl2').set('T0tot', 'T2');
model.physics('hmnf').feature('hminl2').set('Ma0', 0.01);
model.physics('hmnf').create('hmout1', 'HighMachNumberFlowOutlet', 1);
model.physics('hmnf').feature('hmout1').selection.named('geom1_sel4');
model.physics('hmnf').feature('hmout1').set('FlowCondition', 'Subsonic');
model.physics('hmnf').feature('hmout1').set('BoundaryCondition', 'Pressure');
model.physics('hmnf').feature('hmout1').set('p0', 'Pout');

model.mesh('mesh1').autoMeshSize(6);
model.mesh('mesh1').run;

model.view('view1').axis.set('xmin', -0.01);
model.view('view1').axis.set('xmax', 0.03);
model.view('view1').axis.set('ymin', -0.08);
model.view('view1').axis.set('ymax', 0.02);

model.mesh.create('mesh2', 'geom1');
model.mesh('mesh2').create('size1', 'Size');
model.mesh('mesh2').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh2').feature('size1').selection.set([4 5]);
model.mesh('mesh2').feature('size1').set('table', 'cfd');
model.mesh('mesh2').feature('size1').set('hauto', 1);
model.mesh('mesh2').create('size2', 'Size');
model.mesh('mesh2').feature('size2').selection.geom('geom1', 1);
model.mesh('mesh2').feature('size2').selection.named('geom1_sel1');
model.mesh('mesh2').feature('size2').selection.set([6 7 8 9 11 12 13 14 15]);
model.mesh('mesh2').feature('size2').set('table', 'cfd');
model.mesh('mesh2').feature('size2').set('hauto', 4);
model.mesh('mesh2').create('size3', 'Size');
model.mesh('mesh2').feature('size3').selection.geom('geom1', 2);
model.mesh('mesh2').feature('size3').selection.set([2]);
model.mesh('mesh2').feature('size3').set('table', 'cfd');
model.mesh('mesh2').feature('size3').set('hauto', 1);
model.mesh('mesh2').create('size4', 'Size');
model.mesh('mesh2').feature('size4').selection.geom('geom1', 2);
model.mesh('mesh2').feature('size4').selection.set([3]);
model.mesh('mesh2').feature('size4').set('table', 'cfd');
model.mesh('mesh2').feature('size4').set('hauto', 7);
model.mesh('mesh2').feature('size').set('table', 'cfd');
model.mesh('mesh2').feature('size').set('hauto', 4);
model.mesh('mesh2').create('cr1', 'CornerRefinement');
model.mesh('mesh2').feature('cr1').selection('boundary').named('geom1_sel1');
model.mesh('mesh2').create('ftri1', 'FreeTri');
model.mesh('mesh2').create('bl1', 'BndLayer');
model.mesh('mesh2').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh2').feature('bl1').selection.geom(2);
model.mesh('mesh2').feature('bl1').selection.set([]);
model.mesh('mesh2').feature('bl1').selection.allGeom;
model.mesh('mesh2').feature('bl1').feature('blp').selection.named('geom1_sel1');
model.mesh('mesh2').feature('bl1').feature('blp').selection.set([6 7 9 11 12 13 14 15]);
model.mesh('mesh2').feature('bl1').feature('blp').set('blnlayers', 5);
model.mesh('mesh2').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh2').feature('bl1').feature('blp').set('blhmin', '5e-5');

model.view('view1').axis.set('xmin', -0.01);
model.view('view1').axis.set('xmax', 0.03);
model.view('view1').axis.set('ymin', -0.08);
model.view('view1').axis.set('ymax', 0.02);

model.mesh('mesh2').feature('bl1').create('blp1', 'BndLayerProp');
model.mesh('mesh2').feature('bl1').feature('blp1').set('blnlayers', 10);
model.mesh('mesh2').feature('bl1').feature('blp1').set('inittype', 'blhmin');
model.mesh('mesh2').feature('bl1').feature('blp1').set('blhmin', '1e-5');
model.mesh('mesh2').feature('bl1').feature('blp1').selection.set([4 5 8]);
model.mesh('mesh2').run;

model.study('std1').feature('stat').setEntry('mesh', 'geom1', 'mesh1');
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'd_throat', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'd_throat', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'P2', 0);
model.study('std1').feature('stat').setIndex('plistarr', 'Pout 0.55[atm]', 0);
model.study('std1').feature('stat').setIndex('pname', 'd_throat', 1);
model.study('std1').feature('stat').setIndex('plistarr', '', 1);
model.study('std1').feature('stat').setIndex('punit', 'm', 1);
model.study('std1').feature('stat').setIndex('pname', 'd_throat', 1);
model.study('std1').feature('stat').setIndex('plistarr', '', 1);
model.study('std1').feature('stat').setIndex('punit', 'm', 1);
model.study('std1').feature('stat').setIndex('pname', 'iso_diff', 1);
model.study('std1').feature('stat').setIndex('plistarr', '0.5 0', 1);
model.study('std1').feature('stat').set('pcontinuationmode', 'no');
model.study('std1').feature('stat').set('preusesol', 'yes');
model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat2').setEntry('mesh', 'geom1', 'mesh2');
model.study('std1').feature('stat2').set('errestandadap', 'adaption');
model.study('std1').feature('stat2').set('meshadaptmethod', 'modify');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh2').stat.selection.geom(2);
model.mesh('mesh2').stat.selection.set([1]);
model.mesh('mesh2').stat.selection.geom(2);
model.mesh('mesh2').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_T' 'comp1_p' 'comp1_u' 'comp1_hmnf_TWall_d' 'comp1_hmnf_TWall_u'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables (hmnf)');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Flow Variables u, p, T');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_k' 'comp1_ep'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.35);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s1').create('d2', 'Direct');
model.sol('sol1').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d2').label('Direct, turbulence variables (hmnf)');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Turbulence Variables');
model.sol('sol1').feature('s1').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s1').feature('se1').set('subinitcfl', 1);
model.sol('sol1').feature('s1').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s1').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s1').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s1').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s1').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s1').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s1').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s1').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s1').feature('se1').set('maxsegiter', 300);
model.sol('sol1').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.k 0 comp1.ep 0 comp1.T 1 comp1.p 1 ');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (hmnf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, turbulence variables (hmnf)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat2');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat2');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('se1', 'Segregated');
model.sol('sol1').feature('s2').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('segvar', {'comp1_T' 'comp1_p' 'comp1_u' 'comp1_hmnf_TWall_d' 'comp1_hmnf_TWall_u'});
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, fluid flow variables (hmnf)');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').label('Flow Variables u, p, T');
model.sol('sol1').feature('s2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('segvar', {'comp1_k' 'comp1_ep'});
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subdamp', 0.35);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s2').create('d2', 'Direct');
model.sol('sol1').feature('s2').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d2').label('Direct, turbulence variables (hmnf)');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').label('Turbulence Variables');
model.sol('sol1').feature('s2').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s2').feature('se1').set('subinitcfl', 1);
model.sol('sol1').feature('s2').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s2').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s2').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s2').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s2').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s2').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s2').feature('se1').set('maxsegiter', 300);
model.sol('sol1').feature('s2').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s2').feature('se1').feature('ll1').set('lowerlimit', 'comp1.k 0 comp1.ep 0 comp1.T 1 comp1.p 1 ');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, fluid flow variables (hmnf)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('AMG, turbulence variables (hmnf)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s2').feature('adDef').set('allowcoarsening', false);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('linsolver', 'i2');
model.sol('sol1').runAll;

model.result.dataset('dset3').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Velocity (hmnf)');
model.result('pg1').set('data', 'dset3');
model.result('pg1').setIndex('looplevel', 3, 0);
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset3');
model.result('pg1').setIndex('looplevel', 3, 0);
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Pressure (hmnf)');
model.result('pg2').set('data', 'dset3');
model.result('pg2').setIndex('looplevel', 3, 0);
model.result('pg2').set('dataisaxisym', 'off');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset3');
model.result('pg2').setIndex('looplevel', 3, 0);
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').label('Contour');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('expr', 'p');
model.result('pg2').feature('con1').set('number', 40);
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('smooth', 'internal');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('data', 'parent');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').label('Revolution 2D');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset3');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Velocity, 3D (hmnf)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'rev1');
model.result('pg3').setIndex('looplevel', 3, 0);
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond1/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.dataset.create('edg1', 'Edge2D');
model.result.dataset('edg1').label('Exterior Walls');
model.result.dataset('edg1').set('data', 'dset3');
model.result.dataset('edg1').selection.geom('geom1', 1);
model.result.dataset('edg1').selection.set([4 5 6 7 8 9 11 12 13 14 15]);
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Wall Resolution (hmnf)');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 3, 0);
model.result('pg4').set('dataisaxisym', 'off');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 3, 0);
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond2/pcond4/pg2');
model.result('pg4').feature.create('line1', 'Line');
model.result('pg4').feature('line1').label('Wall Resolution');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('expr', 'hmnf.Delta_wPlus');
model.result('pg4').feature('line1').set('linetype', 'tube');
model.result('pg4').feature('line1').set('smooth', 'internal');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('data', 'parent');
model.result('pg4').feature('line1').feature.create('hght1', 'Height');
model.result('pg4').feature('line1').feature('hght1').label('Height Expression');
model.result('pg4').feature('line1').feature('hght1').set('heightdata', 'expr');
model.result('pg4').feature('line1').feature('hght1').set('expr', 'hmnf.WRHeightExpr');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Temperature (hmnf)');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 3, 0);
model.result('pg5').set('dataisaxisym', 'off');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 3, 0);
model.result('pg5').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('expr', 'T');
model.result('pg5').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').label('Mach Number (hmnf)');
model.result('pg6').set('data', 'dset3');
model.result('pg6').setIndex('looplevel', 3, 0);
model.result('pg6').set('dataisaxisym', 'off');
model.result('pg6').set('data', 'dset3');
model.result('pg6').setIndex('looplevel', 3, 0);
model.result('pg6').set('defaultPlotID', 'MultiphysicsHighMachNumberFlow/icom1/pdef1/pcond1/pg1');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'hmnf.Ma');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result('pg1').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Evaluation mass flow group');
model.result.evaluationGroup('eg1').create('int1', 'IntLine');
model.result.evaluationGroup('eg1').feature('int1').set('intsurface', true);
model.result.evaluationGroup('eg1').feature('int1').setIndex('expr', 'hmnf.rho*w', 0);
model.result.evaluationGroup('eg1').feature('int1').setIndex('unit', 'kg/s', 0);
model.result.evaluationGroup('eg1').feature('int1').setIndex('descr', '', 0);
model.result.evaluationGroup('eg1').feature.duplicate('int2', 'int1');
model.result.evaluationGroup('eg1').feature.duplicate('int3', 'int2');
model.result.evaluationGroup('eg1').feature('int1').label('Primary mass flow');
model.result.evaluationGroup('eg1').feature('int1').selection.set([2]);
model.result.evaluationGroup('eg1').feature('int1').setIndex('unit', 'kg/s', 0);
model.result.evaluationGroup('eg1').feature('int1').setIndex('descr', 'Primary mass flow', 0);
model.result.evaluationGroup('eg1').feature('int2').label('Secondary mass flow');
model.result.evaluationGroup('eg1').feature('int2').selection.set([10]);
model.result.evaluationGroup('eg1').feature('int2').setIndex('unit', 'kg/s', 0);
model.result.evaluationGroup('eg1').feature('int2').setIndex('descr', 'Secondary mass flow', 0);
model.result.evaluationGroup('eg1').feature('int3').label('Mixed mass flow');
model.result.evaluationGroup('eg1').feature('int3').selection.set([3]);
model.result.evaluationGroup('eg1').feature('int3').setIndex('unit', 'kg/s', 0);
model.result.evaluationGroup('eg1').feature('int3').setIndex('descr', 'Mixed mass flow', 0);
model.result.evaluationGroup('eg1').set('type', 'general');
model.result.evaluationGroup('eg1').set('generalexpr', 'int1+int2-int3');
model.result.evaluationGroup('eg1').set('keepchildnodes', true);
model.result.evaluationGroup('eg1').set('generalheader', 'Difference between Inflow and Outflow');
model.result.evaluationGroup('eg1').run;
model.result.numerical.create('av1', 'AvLine');
model.result.numerical('av1').set('intsurface', true);
model.result.numerical('av1').label('Mach number, primary inlet');
model.result.numerical('av1').set('data', 'dset3');
model.result.numerical('av1').setIndex('looplevelinput', 'last', 0);
model.result.numerical('av1').selection.named('geom1_sel2');
model.result.numerical('av1').setIndex('expr', 'hmnf.Ma', 0);
model.result.numerical('av1').setIndex('unit', 1, 0);
model.result.numerical('av1').setIndex('descr', 'Mach number', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Mach number, primary inlet');
model.result.numerical('av1').set('table', 'tbl1');
model.result.numerical('av1').setResult;
model.result.numerical.create('av2', 'AvLine');
model.result.numerical('av2').set('intsurface', true);
model.result.numerical('av2').label('Mach number, secondary inlet');
model.result.numerical('av2').set('data', 'dset3');
model.result.numerical('av2').setIndex('looplevelinput', 'last', 0);
model.result.numerical('av2').selection.named('geom1_sel3');
model.result.numerical('av2').setIndex('expr', 'hmnf.Ma', 0);
model.result.numerical('av2').setIndex('unit', 1, 0);
model.result.numerical('av2').setIndex('descr', 'Mach number', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Mach number, secondary inlet');
model.result.numerical('av2').set('table', 'tbl2');
model.result.numerical('av2').setResult;
model.result.dataset.create('mir1', 'Mirror2D');
model.result.dataset('mir1').set('data', 'dset3');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').run;
model.result('pg7').label('Turbulent Kinetic Energy');
model.result('pg7').set('data', 'mir1');
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', 'k');
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').run;
model.result('pg8').label('Temperature, 2D');
model.result('pg8').set('data', 'mir1');
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', 'T');
model.result('pg8').feature('surf1').set('colortable', 'Thermal');
model.result('pg8').run;
model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').label('Center-line');
model.result.dataset('cln1').set('data', 'dset3');
model.result.dataset('cln1').setIndex('genpoints', 0, 1, 0);
model.result.dataset('cln1').setIndex('genpoints', 'L_mixing', 1, 1);
model.result.dataset.create('cln2', 'CutLine2D');
model.result.dataset('cln2').label('Wall');
model.result.dataset('cln2').set('data', 'dset3');
model.result.dataset('cln2').setIndex('genpoints', 'd_mixing/2', 0, 0);
model.result.dataset('cln2').setIndex('genpoints', 'd_mixing/2', 1, 0);
model.result.dataset('cln2').setIndex('genpoints', 'L_mixing', 1, 1);
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').set('legendpos', 'lowerright');
model.result('pg9').create('lngr1', 'LineGraph');
model.result('pg9').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg9').feature('lngr1').set('linewidth', 'preference');
model.result('pg9').feature('lngr1').set('data', 'cln1');
model.result('pg9').feature('lngr1').setIndex('looplevelinput', 'last', 0);
model.result('pg9').feature('lngr1').set('expr', 'p');
model.result('pg9').feature('lngr1').set('xdata', 'expr');
model.result('pg9').feature('lngr1').set('xdataexpr', 'z');
model.result('pg9').feature('lngr1').set('legend', true);
model.result('pg9').feature('lngr1').set('legendmethod', 'manual');
model.result('pg9').feature('lngr1').setIndex('legends', 'Center-line', 0);
model.result('pg9').run;
model.result('pg9').create('lngr2', 'LineGraph');
model.result('pg9').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg9').feature('lngr2').set('linewidth', 'preference');
model.result('pg9').feature('lngr2').set('data', 'cln2');
model.result('pg9').feature('lngr2').setIndex('looplevelinput', 'last', 0);
model.result('pg9').feature('lngr2').set('expr', 'p');
model.result('pg9').feature('lngr2').set('xdata', 'expr');
model.result('pg9').feature('lngr2').set('xdataexpr', 'z');
model.result('pg9').feature('lngr2').set('legend', true);
model.result('pg9').feature('lngr2').set('legendmethod', 'manual');
model.result('pg9').feature('lngr2').setIndex('legends', 'Walls', 0);
model.result('pg9').run;
model.result('pg9').run;
model.result('pg1').run;
model.result('pg1').set('data', 'mir1');
model.result('pg1').run;
model.result('pg6').run;
model.result('pg6').set('data', 'mir1');
model.result('pg6').run;

model.view('view2').axis.set('xmin', -0.06);
model.view('view2').axis.set('xmax', 0.06);
model.view('view2').axis.set('ymin', -0.05);
model.view('view2').axis.set('ymax', 0.09);

model.result('pg1').run;

model.title('Supersonic Air-to-Air Ejector');

model.description(['In this study, the compressible turbulent flow through a supersonic ejector is modeled using the High Mach Number Flow interface in the CFD Module.' newline  newline 'Ejectors are simple mechanical components used for a wide range of applications, including industrial refrigeration, vacuum generation, gas recirculation, and thrust augmentation in aircraft propulsion systems.' newline  newline 'Ejectors induce a secondary flow by momentum and energy transfer from a high-velocity primary jet. The high-energy fluid (primary flow) passes through a convergent-divergent nozzle and reaches supersonic conditions. After exiting the nozzle, it interacts with the secondary flow and is accelerated through an entrainment-induced effect. The mixing between both flows takes place along a constant-area duct called the mixing chamber where complex interactions between the mixing layer and shocks can be observed. A diffuser is usually placed before the outlet to recover pressure and bring the flow back to stagnation.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;

model.label('supersonic_ejector.mph');

model.modelNode.label('Components');

out = model;
