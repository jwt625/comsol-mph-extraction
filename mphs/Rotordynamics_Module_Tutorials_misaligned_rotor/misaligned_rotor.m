function out = model
%
% misaligned_rotor.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Rotordynamics_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('rotbm', 'BeamRotor', 'geom1');
model.physics('rotbm').model('comp1');
model.physics.create('hdb', 'HydrodynamicBearing', 'geom1');
model.physics('hdb').model('comp1');

model.multiphysics.create('brbc1', 'BeamRotorBearingCoupling', 'geom1', 2);
model.multiphysics('brbc1').set('BeamRotor_physics', 'rotbm');
model.multiphysics('brbc1').set('Bearing_physics', 'hdb');
model.multiphysics('brbc1').selection.all;

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/rotbm', true);
model.study('std1').feature('time').setSolveFor('/physics/hdb', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/brbc1', true);

model.param.set('Ow', '210[rad/s]');
model.param.descr('Ow', 'Angular speed of shaft');
model.param.set('d', '10[mm]');
model.param.descr('d', 'Shaft diameter');
model.param.set('L', '100[mm]');
model.param.descr('L', 'Shaft length');
model.param.set('a', '20[mm]');
model.param.descr('a', 'Shaft overhung length');
model.param.set('rho_d', '7780[kg/m^3]');
model.param.descr('rho_d', 'Disk density');
model.param.set('xd', '40[mm]');
model.param.descr('xd', 'Disk distance from left bearing');
model.param.set('Dd', '50[mm]');
model.param.descr('Dd', 'Disk diameter');
model.param.set('hd', '10[mm]');
model.param.descr('hd', 'Disk thickness');
model.param.set('me', '8e-9[kg*m]');
model.param.descr('me', 'Disk unbalance magnitude');
model.param.set('Lb', '5[mm]');
model.param.descr('Lb', 'Bearing length');
model.param.set('C', '0.05[mm]');
model.param.descr('C', 'Bearing initial clearance');
model.param.set('mu0', '9.4[mPa*s]');
model.param.descr('mu0', 'Oil viscosity');
model.param.set('para', '0');
model.param.descr('para', 'Misalignment switch parameter');

model.geom('geom1').lengthUnit('cm');
model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'vectors');
model.geom('geom1').feature('pol1').set('x', '0 a a+xd a+L');
model.geom('geom1').feature('pol1').set('y', 0);
model.geom('geom1').feature('pol1').set('z', 0);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Rotor');
model.geom('geom1').feature('pol1').set('contributeto', 'csel1');
model.geom('geom1').run('pol1');
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').set('type', 'surface');
model.geom('geom1').feature('cyl1').set('r', 'd/2');
model.geom('geom1').feature('cyl1').set('h', 'Lb');
model.geom('geom1').feature('cyl1').set('pos', {'a-Lb/2' '0' '0'});
model.geom('geom1').feature('cyl1').set('axistype', 'x');
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Bearing 1');
model.geom('geom1').feature('cyl1').set('contributeto', 'csel2');
model.geom('geom1').feature.duplicate('cyl2', 'cyl1');
model.geom('geom1').feature('cyl2').set('pos', {'a+L-Lb' '0' '0'});
model.geom('geom1').selection.create('csel3', 'CumulativeSelection');
model.geom('geom1').selection('csel3').label('Bearing 2');
model.geom('geom1').feature('cyl2').set('contributeto', 'csel3');

model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');

model.geom('geom1').run;

model.selection('uni1').label('Bearings');
model.selection('uni1').set('entitydim', 2);
model.selection('uni1').set('input', {'geom1_csel2_bnd' 'geom1_csel3_bnd'});
model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(1);
model.selection('sel1').set([3 17]);
model.selection('sel1').set('groupcontang', true);
model.selection('sel1').label('Bearings Left Edges');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Steel');
model.material('mat1').selection.geom('geom1', 1);
model.material('mat1').selection.named('geom1_csel1_edg');
model.material('mat1').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat1').propertyGroup('Enu').set('E', {'200[GPa]'});
model.material('mat1').propertyGroup('Enu').set('nu', {'0.29'});
model.material('mat1').propertyGroup('def').set('density', {'7780[kg/m^3]'});

model.physics('rotbm').selection.named('geom1_csel1_edg');
model.physics('rotbm').prop('RotorProperties').set('RotorSpeed', 'AngularVelocity');
model.physics('rotbm').prop('RotorProperties').set('Ovm', 'Ow');
model.physics('rotbm').feature('rcs1').set('do_circ', 'd');
model.physics('rotbm').create('disk1', 'Disk', 0);
model.physics('rotbm').feature('disk1').selection.set([11]);
model.physics('rotbm').feature('disk1').set('COM', 'Relative');
model.physics('rotbm').feature('disk1').set('zr', 'me/rotbm.disk1.mass');
model.physics('rotbm').feature('disk1').set('SpecifiedBy', 'GeomDim');
model.physics('rotbm').feature('disk1').set('rho', 'rho_d');
model.physics('rotbm').feature('disk1').set('d', 'Dd');
model.physics('rotbm').feature('disk1').set('h', 'hd');
model.physics('rotbm').create('gr1', 'Gravity', 1);
model.physics('hdb').prop('EquationType').set('EquationType', 'ReynoldsEquationWithCavitation');
model.physics('hdb').feature('hjb1').set('C_plain', 'C');
model.physics('hdb').feature('hjb1').set('BearingCenterType', 'fromGeom');
model.physics('hdb').feature('hjb1').set('mure_mat', 'userdef');
model.physics('hdb').feature('hjb1').set('mure', 'mu0');
model.physics('hdb').feature('hjb1').set('rho_c', '866[kg/m^3]');
model.physics('hdb').feature.duplicate('hjb2', 'hjb1');
model.physics('hdb').feature('hjb2').selection.named('geom1_csel3_bnd');
model.physics('hdb').feature('hjb2').create('mlgn1', 'Misalignment', 2);
model.physics('hdb').feature('hjb2').feature('mlgn1').set('u0z', '0.6*C*para');
model.physics('hdb').feature('hjb2').feature('mlgn1').set('th0z', '0.004*para');

model.multiphysics.duplicate('brbc2', 'brbc1');
model.multiphysics('brbc2').selection.named('geom1_csel3_bnd');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.named('uni1');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([8 22]);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.named('sel1');
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 10);
model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.named('geom1_csel1_edg');
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').selection.set([1]);
model.mesh('mesh1').feature('edg1').feature('dis1').set('numelem', 20);
model.mesh('mesh1').feature('edg1').feature.duplicate('dis2', 'dis1');
model.mesh('mesh1').feature('edg1').feature('dis2').selection.set([10]);
model.mesh('mesh1').feature('edg1').feature('dis2').set('numelem', 40);
model.mesh('mesh1').feature('edg1').feature.duplicate('dis3', 'dis2');
model.mesh('mesh1').feature('edg1').feature('dis3').selection.set([15]);
model.mesh('mesh1').feature('edg1').feature('dis3').set('numelem', 60);
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tlist', 'range(0,1e-3,0.5)');
model.study('std1').create('batsw', 'BatchSweep');
model.study('std1').feature('batsw').set('clearmesh', false);
model.study('std1').feature('batsw').set('clearsol', false);
model.study('std1').feature('batsw').set('maxallow', 2);
model.study('std1').feature('batsw').setIndex('pname', 'Ow', 0);
model.study('std1').feature('batsw').setIndex('plistarr', '', 0);
model.study('std1').feature('batsw').setIndex('punit', 'rad/s', 0);
model.study('std1').feature('batsw').setIndex('pname', 'Ow', 0);
model.study('std1').feature('batsw').setIndex('plistarr', '', 0);
model.study('std1').feature('batsw').setIndex('punit', 'rad/s', 0);
model.study('std1').feature('batsw').setIndex('pname', 'para', 0);
model.study('std1').feature('batsw').setIndex('plistarr', '0 1', 0);
model.study('std1').feature('batsw').setIndex('punit', '', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_pfilm').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_rotbm_phi').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_pfilm').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_pfilm').set('scaleval', '1000000');
model.sol('sol1').feature('v1').feature('comp1_rotbm_phi').set('scaleval', '1e-2');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.12083045973594572');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,1e-3,0.5)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsgenalpha', 'intermediate');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('timemethod', 'genalpha');
model.sol('sol1').feature('t1').set('rhoinf', 0.75);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');

model.batch.create('b1', 'Batch');
model.batch('b1').study('std1');
model.batch('b1').create('so1', 'Solutionseq');
model.batch('b1').feature('so1').set('seq', 'sol1');
model.batch('b1').feature('so1').set('store', 'on');
model.batch('b1').feature('so1').set('clear', 'on');
model.batch('b1').feature('so1').set('psol', 'none');
model.batch('b1').set('batchfile', 'batchmodel.mph');
model.batch('b1').set('batchfileactive', 'off');
model.batch('b1').set('batchdir', '/tmp/testusr/batchdir');
model.batch('b1').set('paramfilename', 'on');
model.batch('b1').set('synchsolutions', 'on');
model.batch('b1').set('clearsynchdata', 'on');
model.batch('b1').set('savemodelaftersynch', 'off');
model.batch('b1').attach('std1');
model.batch('b1').set('control', 'batsw');
model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');

model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').label('Accumulated Probe Table 1');

model.study('std1').feature('batsw').set('accumtable', 'tbl1');

model.batch('p1').create('jo1', 'Jobseq');
model.batch('p1').feature('jo1').set('seq', 'b1');
model.batch('p1').set('pname', {'para'});
model.batch('p1').set('plistarr', {'0 1'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'batsw');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('b1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');
model.batch('b1').feature('daDef').run;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 501, 0);
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').create('line1', 'Line');
model.result('pg1').feature('line1').set('expr', {'rotbm.mises'});
model.result('pg1').feature('line1').set('threshold', 'manual');
model.result('pg1').feature('line1').set('thresholdvalue', 0.2);
model.result('pg1').feature('line1').set('colortable', 'Rainbow');
model.result('pg1').feature('line1').set('colortabletrans', 'none');
model.result('pg1').feature('line1').set('colorscalemode', 'linear');
model.result('pg1').label('Stress (rotbm)');
model.result('pg1').feature('line1').set('colortable', 'Rainbow');
model.result('pg1').feature('line1').set('linetype', 'tube');
model.result('pg1').feature('line1').set('radiusexpr', 'rotbm.re');
model.result('pg1').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg1').feature('line1').set('tuberadiusscale', 1);
model.result('pg1').feature('line1').set('tubeendcaps', false);
model.result('pg1').feature('line1').create('def', 'Deform');
model.result('pg1').feature('line1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('line1').feature('def').set('descr', 'Displacement field');
model.result('pg1').create('line2', 'Line');
model.result('pg1').feature('line2').set('expr', {'1'});
model.result('pg1').feature('line2').set('linetype', 'tube');
model.result('pg1').feature('line2').set('radiusexpr', {'rotbm.re '});
model.result('pg1').feature('line2').set('tuberadiusscaleactive', true);
model.result('pg1').feature('line2').set('tuberadiusscale', 1);
model.result('pg1').feature('line2').set('tubeendcaps', false);
model.result('pg1').feature('line2').set('coloring', 'uniform');
model.result('pg1').feature('line2').set('color', 'custom');
model.result('pg1').feature('line2').set('customcolor', [0.9803921580314636 0.7843137383460999 0.7058823704719543]);
model.result('pg1').feature('line2').set('threshold', 'manual');
model.result('pg1').feature('line2').set('thresholdvalue', 0.2);
model.result('pg1').feature('line2').set('titletype', 'none');
model.result('pg1').feature('line2').label('Rotor');
model.result('pg1').feature('line2').create('def', 'Deform');
model.result('pg1').feature('line2').feature('def').set('scaleactive', true);
model.result('pg1').feature('line2').feature('def').set('scale', '1');
model.result('pg1').feature('line2').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj1', 'PointTrajectories');
model.result('pg1').feature('pttraj1').set('plotdata', 'points');
model.result('pg1').feature('pttraj1').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj1').selection.set([11]);
model.result('pg1').feature('pttraj1').selection.inherit(false);
model.result('pg1').feature('pttraj1').set('linetype', 'none');
model.result('pg1').feature('pttraj1').set('expr', {'X' 'Y' 'Z'});
model.result('pg1').feature('pttraj1').set('pointtype', 'ellipse');
model.result('pg1').feature('pttraj1').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj1').set('custompointcolor', [0.8039215803146362 0.5215686559677124 0.24705882370471954]);
model.result('pg1').feature('pttraj1').set('semimajorexpr', {'0.5*rotbm.disk1.de*rotbm.e20x ' '0.5*rotbm.disk1.de*rotbm.e20y ' '0.5*rotbm.disk1.de*rotbm.e20z '});
model.result('pg1').feature('pttraj1').set('semiminorexpr', {'0.5*rotbm.disk1.de*rotbm.e30x ' '0.5*rotbm.disk1.de*rotbm.e30y ' '0.5*rotbm.disk1.de*rotbm.e30z '});
model.result('pg1').feature('pttraj1').set('ellipsecount', 1);
model.result('pg1').feature('pttraj1').set('ellipsearrowscaleactive', true);
model.result('pg1').feature('pttraj1').set('ellipsearrowtype', 'none');
model.result('pg1').feature('pttraj1').set('titletype', 'none');
model.result('pg1').feature('pttraj1').label('Disk 1');
model.result('pg1').feature('pttraj1').create('def', 'Deform');
model.result('pg1').feature('pttraj1').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj1').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj1').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Fluid Pressure (hdb)');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 501, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 501, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').set('defaultPlotID', 'fluidPressure');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'pfilm');
model.result('pg2').feature('surf1').set('colortable', 'RainbowLight');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').set('expr', 'pfilm');
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('colorlegend', false);
model.result('pg2').feature('con1').set('smooth', 'internal');
model.result('pg2').feature('con1').set('inherittubescale', false);
model.result('pg2').feature('con1').set('data', 'parent');
model.result('pg2').feature('con1').set('inheritplot', 'surf1');
model.result('pg1').run;
model.result('pg1').set('view', 'new');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').feature.copy('line1', 'pg1/line1');
model.result('pg2').run;
model.result('pg2').feature('line1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg2').feature('line1').set('tuberadiusscale', 0.2);
model.result('pg2').run;
model.result('pg2').set('legendpos', 'rightdouble');
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Disk Orbit');
model.result('pg3').set('data', 'dset2');
model.result('pg3').create('ptgr1', 'PointGraph');
model.result('pg3').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg3').feature('ptgr1').set('linewidth', 'preference');
model.result('pg3').feature('ptgr1').selection.set([11]);
model.result('pg3').feature('ptgr1').set('expr', 'w');
model.result('pg3').feature('ptgr1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg3').feature('ptgr1').set('xdata', 'expr');
model.result('pg3').feature('ptgr1').set('xdataexpr', 'v');
model.result('pg3').feature('ptgr1').set('xdataunit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg3').feature('ptgr1').set('linewidth', 2);
model.result('pg3').feature('ptgr1').set('autopoint', false);
model.result('pg3').feature('ptgr1').set('legend', true);
model.result('pg3').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg3').feature('ptgr1').setIndex('legends', 'Without Misalignment', 0);
model.result('pg3').feature('ptgr1').setIndex('legends', 'With Misalignment', 1);
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').set('legendpos', 'upperleft');
model.result('pg3').set('titletype', 'label');
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Bearing 1 Orbit');
model.result('pg4').run;
model.result('pg4').feature('ptgr1').selection.set([6]);
model.result('pg4').run;
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Bearing 2 Orbit');
model.result('pg5').run;
model.result('pg5').feature('ptgr1').selection.set([18]);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').set('data', 'dset2');
model.result('pg6').label('Journal Velocity (Bearing 2)');
model.result('pg6').create('ptgr1', 'PointGraph');
model.result('pg6').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg6').feature('ptgr1').set('linewidth', 'preference');
model.result('pg6').feature('ptgr1').selection.set([18]);
model.result('pg6').feature('ptgr1').set('expr', 'vt');
model.result('pg6').feature('ptgr1').set('unit', 'mm/s');
model.result('pg6').feature('ptgr1').set('linewidth', 2);
model.result('pg6').feature('ptgr1').set('legend', true);
model.result('pg6').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg6').feature('ptgr1').setIndex('legends', 'Without misalignment', 0);
model.result('pg6').feature('ptgr1').setIndex('legends', 'With misalignment', 1);
model.result('pg6').run;
model.result.dataset.duplicate('dset3', 'dset2');
model.result.dataset('dset3').selection.geom('geom1', 2);
model.result.dataset('dset3').selection.named('geom1_csel3_bnd');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').label('Pressure Comparison: Right Bearing');
model.result('pg7').set('data', 'dset3');
model.result('pg7').setIndex('looplevel', 1, 1);
model.result('pg7').set('edges', false);
model.result('pg7').set('view', 'new');
model.result('pg7').create('con1', 'Contour');
model.result('pg7').feature('con1').set('expr', 'hdb.p');
model.result('pg7').feature('con1').set('contourtype', 'filled');
model.result('pg7').feature('con1').set('colortable', 'RainbowLight');
model.result('pg7').feature.duplicate('con2', 'con1');
model.result('pg7').run;
model.result('pg7').feature('con2').set('data', 'dset3');
model.result('pg7').feature('con2').set('inheritplot', 'con1');
model.result.setOnlyPlotWhenRequested(true);
model.result('pg7').feature('con2').create('trn1', 'Translation');
model.result('pg7').feature('con2').feature('trn1').set('trans', {'3*Lb' '0' '0'});
model.result('pg7').create('tlan1', 'TableAnnotation');
model.result('pg7').feature('tlan1').set('source', 'localtable');
model.result('pg7').feature('tlan1').setIndex('localtablematrix', 'L+6.1*Lb', 0, 0);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', '-d/2', 0, 1);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', '-d/4', 0, 2);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', 'Misaligned', 0, 3);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', 'L+3.1*Lb', 1, 0);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', '-d/2', 1, 1);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', '-d/4', 1, 2);
model.result('pg7').feature('tlan1').setIndex('localtablematrix', 'Normal', 1, 3);
model.result('pg7').feature('tlan1').set('showpoint', false);
model.result('pg7').set('legendpos', 'rightdouble');
model.result('pg7').run;

model.batch('b1').feature('daDef').set('operation', 'clearalldata');
model.batch('b1').feature('daDef').run;

model.title('Effect of Bearing Misalignment on Rotor Vibration');

model.description(['In this example, a rotor supported on two hydrodynamic bearings is analyzed. An eccentric disk located between the two bearings causes the rotor to whirl. One of the bearings is misaligned with the axis of the rotor.' newline  newline 'The built-in multiphysics interface Beam Rotor with Hydrodynamic Bearing in the Rotordynamics Module is used for the combined simulation of rotor and bearings. The analysis is performed for two cases, first without misalignment and then including the misalignment. Results for both cases are compared to understand the effect of the misalignment.' newline  newline 'Some of the results are: orbit of the disk, frequency spectrum of the rotor response at the disk, and pressure distribution in the bearings.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('misaligned_rotor.mph');

model.modelNode.label('Components');

out = model;
