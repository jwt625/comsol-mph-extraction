function out = model
%
% led_bulb.m
%
% Model exported on May 26 2025, 21:29 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Power_Electronics_and_Electronic_Cooling');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransferInSolidsAndFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics('ht').prop('ShapeProperty').set('order_temperature', '1');
model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'WeaklyCompressible');

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 3);
model.multiphysics('nitf1').set('Fluid_physics', 'spf');
model.multiphysics('nitf1').set('Heat_physics', 'ht');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/nitf1', true);

model.param.set('power', '5[W]/4');
model.param.descr('power', 'Nominal power of a quarter of a 5W LED bulb');
model.param.set('eta', '0.3');
model.param.descr('eta', 'Efficiency');
model.param.set('heat_losses', '(1-eta)*power');
model.param.descr('heat_losses', 'Part of the power dissipated through heat');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'led_bulb.mphbin');
model.geom('geom1').feature('imp1').importData;

model.view('view1').hideObjects.create('hide1');
model.view('view1').hideObjects('hide1').init(2);
model.view('view1').hideObjects('hide1').add('imp1', [44]);
model.view('view1').hideObjects('hide1').add('imp1', [261]);
model.view('view1').hideObjects('hide1').add('imp1', [43]);
model.view('view1').hideObjects('hide1').add('imp1', [41]);
model.view('view1').hideObjects('hide1').add('imp1', [42]);

model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').label('LED');
model.geom('geom1').feature('sel1').selection('selection').set('imp1', [8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 30 31 32 33 34 35 36 37 38 39 40 41]);
model.geom('geom1').run('sel1');
model.geom('geom1').create('sel2', 'ExplicitSelection');
model.geom('geom1').feature('sel2').label('PCB');

model.view('view1').hideObjects.create('hide2');
model.view('view1').hideObjects('hide2').init(3);
model.view('view1').hideObjects('hide2').add('imp1', [1]);
model.view('view1').hideObjects('hide2').add('imp1', [3]);

model.geom('geom1').feature('sel2').selection('selection').set('imp1', [4 5 7 29]);
model.geom('geom1').run('sel2');
model.geom('geom1').create('sel3', 'ExplicitSelection');
model.geom('geom1').feature('sel3').label('PCB Radiating Boundaries');
model.geom('geom1').feature('sel3').selection('selection').init(2);
model.geom('geom1').feature('sel3').selection('selection').set('imp1', [21 49 53 82 83 84 85 86 87 98 126 127 128 129 130 131 143 169 170 171 172 173 174 188 189 249 250 251 252 253 254 255 256 257 258 259 260]);
model.geom('geom1').run('sel3');
model.geom('geom1').create('sel4', 'ExplicitSelection');
model.geom('geom1').feature('sel4').label('Outlet');
model.geom('geom1').feature('sel4').selection('selection').init(2);
model.geom('geom1').feature('sel4').selection('selection').set('imp1', 13);
model.geom('geom1').run('sel4');
model.geom('geom1').create('sel5', 'ExplicitSelection');
model.geom('geom1').feature('sel5').label('Inlet');
model.geom('geom1').feature('sel5').selection('selection').init(2);
model.geom('geom1').feature('sel5').selection('selection').set('imp1', [3 44 261]);
model.geom('geom1').run('fin');

model.physics('ht').feature('fluid1').selection.set([1]);
model.physics('spf').selection.set([1]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').label('Steel AISI 4340');
model.material('mat1').set('family', 'steel');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.28');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat2').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat2').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat2').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat2').label('Air');
model.material('mat2').set('family', 'air');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat2').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat2').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat2').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat2').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat2').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('molarmass', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat2').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material('mat2').propertyGroup('def').addInput('pressure');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat2').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat2').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat2').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat2').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat2').propertyGroup('idealGas').addInput('temperature');
model.material('mat2').propertyGroup('idealGas').addInput('pressure');
model.material('mat2').materialType('nonSolid');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat3').label('Aluminum');
model.material('mat3').set('family', 'aluminum');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat3').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.33');
model.material('mat3').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat3').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat3').propertyGroup('Murnaghan').set('n', '-350[GPa]');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat4').label('Acrylic plastic');
model.material('mat4').set('family', 'custom');
model.material('mat4').set('customspecular', [0.9803921568627451 0.9803921568627451 0.9803921568627451]);
model.material('mat4').set('customdiffuse', [0.39215686274509803 0.7843137254901961 0.39215686274509803]);
model.material('mat4').set('customambient', [0.39215686274509803 0.7843137254901961 0.39215686274509803]);
model.material('mat4').set('noise', true);
model.material('mat4').set('lighting', 'phong');
model.material('mat4').set('shininess', 1000);
model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', {'7.0e-5[1/K]' '0' '0' '0' '7.0e-5[1/K]' '0' '0' '0' '7.0e-5[1/K]'});
model.material('mat4').propertyGroup('def').set('heatcapacity', '1470[J/(kg*K)]');
model.material('mat4').propertyGroup('def').set('density', '1190[kg/m^3]');
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'0.18[W/(m*K)]' '0' '0' '0' '0.18[W/(m*K)]' '0' '0' '0' '0.18[W/(m*K)]'});
model.material('mat4').propertyGroup('Enu').set('E', '3.2[GPa]');
model.material('mat4').propertyGroup('Enu').set('nu', '0.35');
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').label('Filled epoxy resin (X238) [solid]');
model.material('mat5').info.create('Composition');
model.material('mat5').info('Composition').body(['35 vol% powdered aluminum + 35 vol% SiO' native2unicode(hex2dec({'00' '82'}), 'unicode') ]);
model.material('mat5').propertyGroup('def').set('thermalconductivity', 'k(T)');
model.material('mat5').propertyGroup('def').set('INFO_PREFIX:thermalconductivity', ['Reference: V. Giaretto and M.F. Torchio, High Temperatures-High Pressures, v31, No. 6, p643 (1999)' newline 'Note: Ciba-Geigy']);
model.material('mat5').propertyGroup('def').set('density', '1.67300000e+03');
model.material('mat5').propertyGroup('def').set('INFO_PREFIX:density', ['Reference: V. Giaretto and M.F. Torchio, High Temperatures-High Pressures, v31, No. 6, p643 (1999)' newline 'Note: Ciba-Geigy, room temperature value']);
model.material('mat5').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat5').propertyGroup('def').func('k').set('funcname', 'k');
model.material('mat5').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat5').propertyGroup('def').func('k').set('extrap', 'constant');
model.material('mat5').propertyGroup('def').func('k').set('pieces', {'293.0' '353.16' '-0.03037232+0.001554161*T^1'});
model.material('mat5').propertyGroup('def').func('k').label('Piecewise');
model.material('mat5').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat5').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat5').propertyGroup('def').addInput('temperature');
model.material('mat5').set('family', 'custom');
model.material('mat5').set('lighting', 'cooktorrance');
model.material('mat5').set('specular', 'custom');
model.material('mat5').set('customspecular', [0.9803921568627451 0.9803921568627451 0.9803921568627451]);
model.material('mat5').set('ambient', 'custom');
model.material('mat5').set('customambient', [0.7058823529411765 0.7058823529411765 0.7058823529411765]);
model.material('mat5').set('diffuse', 'custom');
model.material('mat5').set('customdiffuse', [0.47058823529411764 0.47058823529411764 0.47058823529411764]);
model.material('mat5').set('fresnel', 0.3);
model.material('mat5').set('roughness', 0.6);
model.material('mat5').set('metallic', 0);
model.material('mat5').set('pearl', 0);
model.material('mat5').set('noisescale', 0.45);
model.material('mat5').set('noise', 'on');
model.material('mat5').set('noisefreq', 3);
model.material('mat5').set('normalnoisebrush', '0');
model.material('mat5').set('normalnoisetype', '0');
model.material('mat5').set('colornoisescale', 0);
model.material('mat5').set('colornoise', 'off');
model.material('mat5').set('colornoisefrequency', 1);
model.material('mat5').set('colornoisebrush', '0');
model.material('mat5').set('colornoisetype', '0');
model.material('mat5').set('colornoisenormalscale', 0);
model.material('mat5').set('noisecolor', 'custom');
model.material('mat5').set('customnoisecolor', [0 0 0]);
model.material('mat5').set('noisecolorblend', 0);
model.material('mat5').set('diffusewrap', 0);
model.material('mat5').set('clearcoat', 0);
model.material('mat5').set('reflectance', 0);
model.material('mat5').set('shininess', 100);
model.material('mat5').set('specular', 'custom');
model.material('mat5').set('customspecular', [0.39215686274509803 0.7843137254901961 0.39215686274509803]);
model.material('mat5').set('diffuse', 'custom');
model.material('mat5').set('customdiffuse', [0.39215686274509803 0.7843137254901961 0.39215686274509803]);
model.material('mat5').set('ambient', 'custom');
model.material('mat5').set('customambient', [0.39215686274509803 0.7843137254901961 0.39215686274509803]);
model.material('mat5').set('noisescale', 0.05);
model.material('mat5').set('noise', 'on');
model.material('mat5').set('noisefreq', 2.1);
model.material('mat1').label('Bulb base');

model.view('view1').set('transparency', true);
model.view('view1').set('hidestatus', 'ignore');

model.material('mat2').selection.set([1]);
model.material('mat3').label('PCB');
model.material('mat3').selection.named('geom1_sel2');
model.material('mat4').label('Plastic bulb');
model.material('mat4').selection.set([3]);
model.material('mat5').label('LED chips');
model.material('mat5').selection.named('geom1_sel1');
model.material('mat5').propertyGroup('def').set('heatcapacity', {'1200[J/kg/K]'});

model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'CompressibleMALT03');
model.physics('spf').prop('PhysicalModelProperty').set('IncludeGravity', true);
model.physics('spf').prop('PhysicalModelProperty').set('UseReducedPressure', true);
model.physics('spf').feature('init1').set('u_init', {'0' '0' '1e-2'});
model.physics('spf').create('open1', 'OpenBoundary', 2);
model.physics('spf').feature('open1').selection.set([3]);
model.physics('spf').feature('open1').set('f0', '-0.5*spf.rhoref*w^2');
model.physics('spf').create('open2', 'OpenBoundary', 2);
model.physics('spf').feature('open2').selection.set([13 44 261]);
model.physics('spf').create('sym1', 'Symmetry', 2);
model.physics('spf').feature('sym1').selection.set([1 2 7]);
model.physics('ht').create('hs1', 'HeatSource', 3);
model.physics('ht').feature('hs1').selection.named('geom1_sel1');
model.physics('ht').feature('hs1').set('heatSourceType', 'HeatRate');
model.physics('ht').feature('hs1').set('P0', 'heat_losses');
model.physics('ht').create('sar1', 'SurfaceToAmbientRadiation', 2);
model.physics('ht').feature('sar1').selection.named('geom1_sel3');
model.physics('ht').feature('sar1').set('epsilon_rad_mat', 'userdef');
model.physics('ht').feature('sar1').set('epsilon_rad', 0.9);
model.physics('ht').create('open1', 'OpenBoundary', 2);
model.physics('ht').feature('open1').selection.set([3 13 44 261]);
model.physics('ht').create('sym1', 'Symmetry', 2);
model.physics('ht').feature('sym1').selection.set([1 2 4 5 7 9 10 14 18 22 55 56 96 100 138 184 190 194 198 202 206 210]);

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('hauto', 6);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmin', '4e-4');
model.mesh('mesh1').feature('size1').set('hauto', 7);
model.mesh('mesh1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('size2').set('hminactive', true);
model.mesh('mesh1').run;

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('iDef', 'Iterative');
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('s1').feature('fc1').set('damp', 0.8);
model.sol('sol1').feature('s1').feature('fc1').set('stabacc', 'cflcmp');
model.sol('sol1').feature('s1').feature('fc1').set('initcfl', 5);
model.sol('sol1').feature('s1').feature('fc1').set('mincfl', 10000);
model.sol('sol1').feature('s1').feature('fc1').set('kppid', 0.65);
model.sol('sol1').feature('s1').feature('fc1').set('kdpid', 0.15);
model.sol('sol1').feature('s1').feature('fc1').set('kipid', 0.15);
model.sol('sol1').feature('s1').feature('fc1').set('cfltol', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('cflaa', true);
model.sol('sol1').feature('s1').feature('fc1').set('cflaacfl', 9000);
model.sol('sol1').feature('s1').feature('fc1').set('cflaafact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 150);
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, nonisothermal flow (nitf1) (Merged)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, nonisothermal flow (nitf1)');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('s1').feature('fc1').set('damp', 0.8);
model.sol('sol1').feature('s1').feature('fc1').set('stabacc', 'cflcmp');
model.sol('sol1').feature('s1').feature('fc1').set('initcfl', 5);
model.sol('sol1').feature('s1').feature('fc1').set('mincfl', 10000);
model.sol('sol1').feature('s1').feature('fc1').set('kppid', 0.65);
model.sol('sol1').feature('s1').feature('fc1').set('kdpid', 0.15);
model.sol('sol1').feature('s1').feature('fc1').set('kipid', 0.15);
model.sol('sol1').feature('s1').feature('fc1').set('cfltol', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('cflaa', true);
model.sol('sol1').feature('s1').feature('fc1').set('cflaacfl', 9000);
model.sol('sol1').feature('s1').feature('fc1').set('cflaafact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 150);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').feature('s1').feature.remove('iDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Temperature (ht)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg1').feature.create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('solutionparams', 'parent');
model.result('pg1').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('vol1').set('smooth', 'internal');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('data', 'parent');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (spf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg2').feature.create('slc1', 'Slice');
model.result('pg2').feature('slc1').label('Slice');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('expr', 'spf.U');
model.result('pg2').feature('slc1').set('smooth', 'internal');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([6 8 11 12 15 16 17 19 20 21 24 25 26 27 28 29 31 32 33 34 35 36 37 38 41 42 43 45 46 49 50 51 53 54 57 58 60 61 62 64 65 66 68 69 70 72 73 74 76 77 78 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 98 99 101 102 104 105 106 108 109 110 112 113 114 116 117 118 120 121 122 124 125 126 127 128 129 130 131 132 133 134 135 136 137 139 140 141 143 144 146 147 148 150 151 152 154 155 156 158 159 160 162 163 164 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 187 188 191 192 195 196 199 200 203 204 207 208 211 212 213 214 215 216 217 218 220 221 222 224 225 226 228 229 230 232 233 234 236 237 238 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260]);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Pressure (spf)');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond2/pcond1/pg4');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'p');
model.result('pg3').feature('surf1').set('colortable', 'Dipole');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature('surf1').feature.create('tran1', 'Transparency');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Temperature and Fluid Flow (nitf1)');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').set('data', 'dset1');
model.result('pg4').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond3/pg1');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Wall Temperature');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('solutionparams', 'parent');
model.result('pg4').feature('surf1').set('expr', 'ht.Tvar');
model.result('pg4').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result('pg4').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg4').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg4').feature('surf1').feature('sel1').selection.set([6 8 11 12 15 16 17 19 20 21 24 25 26 27 28 29 31 32 33 34 35 36 37 38 41 42 43 45 46 49 50 51 53 54 57 58 60 61 62 64 65 66 68 69 70 72 73 74 76 77 78 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 98 99 101 102 104 105 106 108 109 110 112 113 114 116 117 118 120 121 122 124 125 126 127 128 129 130 131 132 133 134 135 136 137 139 140 141 143 144 146 147 148 150 151 152 154 155 156 158 159 160 162 163 164 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 187 188 191 192 195 196 199 200 203 204 207 208 211 212 213 214 215 216 217 218 220 221 222 224 225 226 228 229 230 232 233 234 236 237 238 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260]);
model.result('pg4').feature.create('vol1', 'Volume');
model.result('pg4').feature('vol1').label('Solid Temperature');
model.result('pg4').feature('vol1').set('showsolutionparams', 'on');
model.result('pg4').feature('vol1').set('solutionparams', 'parent');
model.result('pg4').feature('vol1').set('expr', 'nitf1.T');
model.result('pg4').feature('vol1').set('smooth', 'internal');
model.result('pg4').feature('vol1').set('showsolutionparams', 'on');
model.result('pg4').feature('vol1').set('data', 'parent');
model.result('pg4').feature('vol1').feature.create('sel1', 'Selection');
model.result('pg4').feature('vol1').feature('sel1').selection.geom('geom1', 3);
model.result('pg4').feature('vol1').feature('sel1').selection.set([2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41]);
model.result('pg4').feature('vol1').set('inheritplot', 'surf1');
model.result('pg4').feature.create('arwv1', 'ArrowVolume');
model.result('pg4').feature('arwv1').label('Fluid Flow');
model.result('pg4').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg4').feature('arwv1').set('solutionparams', 'parent');
model.result('pg4').feature('arwv1').set('expr', {'nitf1.ux' 'nitf1.uy' 'nitf1.uz'});
model.result('pg4').feature('arwv1').set('xnumber', 30);
model.result('pg4').feature('arwv1').set('ynumber', 30);
model.result('pg4').feature('arwv1').set('znumber', 30);
model.result('pg4').feature('arwv1').set('arrowtype', 'cone');
model.result('pg4').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg4').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg4').feature('arwv1').set('data', 'parent');
model.result('pg4').feature('arwv1').feature.create('col1', 'Color');
model.result('pg4').feature('arwv1').feature('col1').set('showcolordata', 'off');
model.result('pg4').feature('arwv1').feature('col1').set('expr', 'spf.U');
model.result('pg4').feature('arwv1').feature.create('filt1', 'Filter');
model.result('pg4').feature('arwv1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result('pg1').run;
model.result.dataset.create('mir1', 'Mirror3D');
model.result.dataset('mir1').set('removesymelem', true);
model.result.dataset.create('mir2', 'Mirror3D');
model.result.dataset('mir2').set('data', 'mir1');
model.result.dataset('mir2').set('quickplane', 'zx');
model.result.dataset('mir2').set('removesymelem', true);

model.view('view1').hideObjects('hide1').active(false);
model.view('view1').hideObjects('hide2').active(false);

model.result('pg4').run;
model.result('pg4').set('data', 'mir2');
model.result('pg4').set('edges', false);
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').run;
model.result('pg4').feature('surf1').set('unit', 'degC');
model.result('pg4').run;
model.result('pg4').feature('vol1').set('unit', 'degC');
model.result('pg4').run;

model.view('view2').set('transparency', true);
model.view('view2').set('showaxisorientation', false);
model.view('view2').set('showgrid', false);

model.result('pg2').run;
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').run;
model.result('pg2').feature('slc1').set('quickxnumber', 1);
model.result('pg2').feature('slc1').set('data', 'mir2');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').set('data', 'mir2');
model.result('pg2').run;

model.view('view2').set('transparency', false);

model.result('pg4').run;

model.title('LED Bulb Cooling');

model.description(['This model describes the three heat transfer modes, conduction, convection, and radiation combined with nonisothermal flow in a realistic geometry representing a light bulb and the surrounding air.' newline 'The LED chips dissipate heat. The model computes the equilibrium temperature induced by these heat sources, conduction in solid parts, convective cooling due to natural convection, and radiative cooling to the ambient environment.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('led_bulb.mph');

model.modelNode.label('Components');

out = model;
