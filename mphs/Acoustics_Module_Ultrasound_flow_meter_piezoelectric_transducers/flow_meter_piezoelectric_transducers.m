function out = model
%
% flow_meter_piezoelectric_transducers.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Ultrasound');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('D', '5[mm]', 'Main duct diameter');
model.param.set('L', '4*D', 'Main duct length');
model.param.set('alpha', '45[deg]', 'Transducer tube pitch angle');
model.param.set('D_transducer', '2[mm]', 'Transducer diameter');
model.param.set('L_transducer', 'D/cos(alpha)+3/2*D_transducer/cos(alpha)*tan(alpha)', 'Transducer duct length');
model.param.set('L2', 'D/sin(alpha)', 'Transducer duct length in main flow');
model.param.set('L1', '0.5*(L_transducer-L2)', 'Transducer duct length of side branches');
model.param.set('L_matching', 'cp_match/f0/4', 'Matching layer thickness');
model.param.set('L_piezo', 'cp_pzt/f0/2', 'Piezoelectric transducer thickness');
model.param.set('nLx', 'cos(alpha)', 'Unit vector in transducer duct direction (x-component)');
model.param.set('nLy', '0', 'Unit vector in transducer duct direction (y-component)');
model.param.set('nLz', 'sin(alpha)', 'Unit vector in transducer duct direction (z-component)');
model.param.label('Geometry Parameters');
model.param.create('par2');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('Uin', '10[m/s]', 'Background mean flow average velocity at the inlet');
model.param('par2').set('V0', '50[V]', 'Driving voltage');
model.param('par2').set('f0', '2.5[MHz]', 'Carrier signal center frequency');
model.param('par2').set('T0', '1/f0', 'Carrier signal period');
model.param('par2').set('lam0', 'cp_water/f0', 'Signal wavelength in water');
model.param('par2').set('cp_water', '1481[m/s]', 'Speed of sound, water');
model.param('par2').set('cp_pzt', '4620[m/s]', 'Pressure wave speed, PZT');
model.param('par2').set('cs_pzt', '1750[m/s]', 'Shear wave speed, PZT');
model.param('par2').set('cp_match', '3400[m/s]', 'Pressure wave speed, matching material');
model.param('par2').set('cs_match', '1920[m/s]', 'Shear wave speed, matching material');
model.param('par2').set('rho_match', '2280[kg/m^3]', 'Density, matching material');
model.param('par2').set('cp_damp', '1500[m/s]', 'Pressure wave speed, damping material');
model.param('par2').set('cs_damp', '775[m/s]', 'Shear wave speed, damping material');
model.param('par2').set('rho_damp', '6580[kg/m^3]', 'Density, damping material');
model.param('par2').label('Model Parameters');

model.geom('geom1').insertFile('flow_meter_piezoelectric_transducers_geom_sequence.mph', 'geom1');
model.geom('geom1').run('ige1');

model.func.create('rect1', 'Rectangle');
model.func('rect1').set('lower', '0.5e-6');
model.func('rect1').set('upper', '1.5e-6');
model.func('rect1').set('smooth', '1e-6');
model.func.create('an1', 'Analytic');
model.func('an1').set('funcname', 'Vin');
model.func('an1').set('expr', 'V0*sin(2*pi*f0*t)*rect1(t)');
model.func('an1').set('args', 't');
model.func('an1').set('fununit', 'V');
model.func('an1').setIndex('argunit', 's', 0);
model.func('an1').setIndex('plotargs', '10*T0', 0, 2);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').set([1 2 3]);
model.selection('sel1').label('Water');
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').set([5 9]);
model.selection('sel2').label('PZT');
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').set([6 7]);
model.selection('sel3').label('Matching');
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').set([4 8]);
model.selection('sel4').label('Backing');
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').geom(2);
model.selection('sel5').set([2 6 16 22 30 33 40 46 55]);
model.selection('sel5').label('Symmetry');
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').geom(2);
model.selection('sel6').set([1]);
model.selection('sel6').label('Flow Inlet');
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').geom(2);
model.selection('sel7').set([19]);
model.selection('sel7').label('Flow Outlet');
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Solid');
model.selection('uni1').set('input', {'sel2' 'sel3' 'sel4'});

model.coordSystem.create('sys2', 'geom1', 'VectorBase');
model.coordSystem('sys2').setIndex('base', 'cos(alpha)', 0, 0);
model.coordSystem('sys2').setIndex('base', '-sin(alpha)', 0, 2);
model.coordSystem('sys2').setIndex('base', 'sin(alpha)', 2, 0);
model.coordSystem('sys2').setIndex('base', 'cos(alpha)', 2, 2);
model.coordSystem('sys2').set('orthonormal', true);
model.coordSystem('sys2').label('Transducer Coordinate System');

model.physics.create('spf', 'TurbulentFlowkomega', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').selection.set([]);
model.physics('spf').selection.named('sel1');
model.physics('spf').create('inl1', 'InletBoundary', 2);
model.physics('spf').feature('inl1').selection.named('sel6');
model.physics('spf').feature('inl1').set('BoundaryCondition', 'FullyDevelopedFlow');
model.physics('spf').feature('inl1').set('Uavfdf', 'Uin');
model.physics('spf').create('out1', 'OutletBoundary', 2);
model.physics('spf').feature('out1').selection.named('sel7');
model.physics('spf').create('sym1', 'Symmetry', 2);
model.physics('spf').feature('sym1').selection.named('sel5');
model.physics('spf').feature('dcont1').set('pairDisconnect', true);
model.physics.create('cwe', 'ConvectedWaveEquation', 'geom1');
model.physics('cwe').model('comp1');
model.physics('cwe').selection.set([]);
model.physics('cwe').selection.named('sel1');
model.physics('cwe').create('imp1', 'AcousticImpedance', 2);
model.physics('cwe').feature('imp1').selection.set([1 19]);
model.physics('cwe').create('sym1', 'Symmetry', 2);
model.physics('cwe').feature('sym1').selection.named('sel5');
model.physics.create('elte', 'ElasticWavesTimeExplicit', 'geom1');
model.physics('elte').model('comp1');
model.physics('elte').selection.set([]);
model.physics('elte').selection.named('uni1');
model.physics('elte').create('pzm1', 'PiezoelectricMaterialModel', 3);
model.physics('elte').feature('eltem1').set('IsotropicOption', 'CpCs');
model.physics('elte').feature('pzm1').selection.named('sel2');
model.physics('elte').feature('pzm1').set('coordinateSystem', 'sys2');
model.physics('elte').create('lrb1', 'LowReflectingBoundary', 2);
model.physics('elte').feature('lrb1').selection.set([21 52]);
model.physics('elte').create('sym1', 'Symmetry', 2);
model.physics('elte').feature('sym1').selection.named('sel5');
model.physics('elte').feature('eltem1').create('dmp1', 'Damping', 3);
model.physics('elte').feature('eltem1').feature('dmp1').selection.named('sel3');
model.physics('elte').feature('eltem1').feature('dmp1').set('InputParameters', 'DampingRatios');
model.physics('elte').feature('eltem1').feature('dmp1').set('f1', '0.99*f0');
model.physics('elte').feature('eltem1').feature('dmp1').set('zeta1', 0.01);
model.physics('elte').feature('eltem1').feature('dmp1').set('f2', '1.01*f0');
model.physics('elte').feature('eltem1').feature('dmp1').set('zeta2', 0.01);
model.physics('elte').feature('eltem1').create('dmp2', 'Damping', 3);
model.physics('elte').feature('eltem1').feature('dmp2').selection.named('sel4');
model.physics('elte').feature('eltem1').feature('dmp2').set('InputParameters', 'DampingRatios');
model.physics('elte').feature('eltem1').feature('dmp2').set('f1', '0.99*f0');
model.physics('elte').feature('eltem1').feature('dmp2').set('zeta1', 0.025);
model.physics('elte').feature('eltem1').feature('dmp2').set('f2', '1.01*f0');
model.physics('elte').feature('eltem1').feature('dmp2').set('zeta2', 0.025);
model.physics('elte').feature('pzm1').create('mdmp1', 'MechanicalDamping', 3);
model.physics('elte').feature('pzm1').feature('mdmp1').set('InputParameters', 'DampingRatios');
model.physics('elte').feature('pzm1').feature('mdmp1').set('f1', '0.99*f0');
model.physics('elte').feature('pzm1').feature('mdmp1').set('zeta1', 0.005);
model.physics('elte').feature('pzm1').feature('mdmp1').set('f2', '1.01*f0');
model.physics('elte').feature('pzm1').feature('mdmp1').set('zeta2', 0.005);
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics('es').selection.set([]);
model.physics('es').selection.named('sel2');
model.physics('es').create('ccnp1', 'ChargeConservationPiezo', 3);
model.physics('es').feature('ccnp1').selection.named('sel2');
model.physics('es').create('gnd1', 'Ground', 2);
model.physics('es').feature('gnd1').selection.set([29 57]);
model.physics('es').create('pot1', 'ElectricPotential', 2);
model.physics('es').feature('pot1').selection.set([32]);
model.physics('es').feature('pot1').set('V0', 'Vin(t)');
model.physics('es').create('fp1', 'FloatingPotential', 2);
model.physics('es').feature('fp1').selection.set([54]);
model.physics('es').feature('fp1').set('Group', true);
model.physics('es').create('symp1', 'SymmetryPlane', 2);
model.physics('es').feature('symp1').selection.named('sel5');

model.multiphysics.create('pzete1', 'PiezoelectricEffectTimeExplicit', 'geom1', 3);
model.multiphysics.create('cspte1', 'PairConvectedAcousticStructureBoundaryTimeExplicit', 'geom1', 2);
model.multiphysics('cspte1').set('pairs', {'ap1' 'ap2'});
model.multiphysics.create('bffc1', 'BackgroundFluidFlowCoupling', 'geom1', 3);
model.multiphysics('bffc1').selection.named('sel1');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water, liquid');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('StrainCharge', 'Strain-charge form');
model.material('mat2').propertyGroup.create('StressCharge', 'Stress-charge form');
model.material('mat2').label('Lead Zirconate Titanate (PZT-5H)');
model.material('mat2').set('family', 'lead');
model.material('mat2').propertyGroup('def').set('heatcapacity', '440[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'1.3[W/(m*K)]' '0' '0' '0' '1.3[W/(m*K)]' '0' '0' '0' '1.3[W/(m*K)]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1704.4' '0' '0' '0' '1704.4' '0' '0' '0' '1433.6'});
model.material('mat2').propertyGroup('def').set('density', '7500[kg/m^3]');
model.material('mat2').propertyGroup('StrainCharge').set('sE', {'1.65e-011[1/Pa]' '-4.78e-012[1/Pa]' '-8.45e-012[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '-4.78e-012[1/Pa]' '1.65e-011[1/Pa]' '-8.45e-012[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '0[1/Pa]' '-8.45e-012[1/Pa]' '-8.45e-012[1/Pa]' '2.07e-011[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '4.35e-011[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '4.35e-011[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '4.26e-011[1/Pa]'});
model.material('mat2').propertyGroup('StrainCharge').set('dET', {'0[C/N]' '0[C/N]' '-2.74e-010[C/N]' '0[C/N]' '0[C/N]' '-2.74e-010[C/N]' '0[C/N]' '0[C/N]' '5.93e-010[C/N]' '0[C/N]'  ...
'7.41e-010[C/N]' '0[C/N]' '7.41e-010[C/N]' '0[C/N]' '0[C/N]' '0[C/N]' '0[C/N]' '0[C/N]'});
model.material('mat2').propertyGroup('StrainCharge').set('epsilonrT', {'3130' '0' '0' '0' '3130' '0' '0' '0' '3400'});
model.material('mat2').propertyGroup('StressCharge').set('cE', {'1.27205e+011[Pa]' '8.02122e+010[Pa]' '8.46702e+010[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '8.02122e+010[Pa]' '1.27205e+011[Pa]' '8.46702e+010[Pa]' '0[Pa]'  ...
'0[Pa]' '0[Pa]' '8.46702e+010[Pa]' '8.46702e+010[Pa]' '1.17436e+011[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]'  ...
'0[Pa]' '2.29885e+010[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '2.29885e+010[Pa]' '0[Pa]'  ...
'0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '2.34742e+010[Pa]'});
model.material('mat2').propertyGroup('StressCharge').set('eES', {'0[C/m^2]' '0[C/m^2]' '-6.62281[C/m^2]' '0[C/m^2]' '0[C/m^2]' '-6.62281[C/m^2]' '0[C/m^2]' '0[C/m^2]' '23.2403[C/m^2]' '0[C/m^2]'  ...
'17.0345[C/m^2]' '0[C/m^2]' '17.0345[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]'});
model.material('mat2').propertyGroup('StressCharge').set('epsilonrS', {'1704.4' '0' '0' '0' '1704.4' '0' '0' '0' '1433.6'});
model.material('mat2').selection.named('sel2');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').selection.named('sel3');
model.material('mat3').label('Matching Material');
model.material('mat3').propertyGroup.create('CpCs', 'Pressure_wave_and_shear_wave_speeds');
model.material('mat3').propertyGroup('CpCs').set('cp', {'cp_match'});
model.material('mat3').propertyGroup('CpCs').set('cs', {'cs_match'});
model.material('mat3').propertyGroup('def').set('density', {'rho_match'});
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').selection.named('sel4');
model.material('mat4').label('Damping Material');
model.material('mat4').propertyGroup.create('CpCs', 'Pressure_wave_and_shear_wave_speeds');
model.material('mat4').propertyGroup('CpCs').set('cp', {'cp_damp'});
model.material('mat4').propertyGroup('CpCs').set('cs', {'cs_damp'});
model.material('mat4').propertyGroup('def').set('density', {'rho_damp'});

model.mesh('mesh1').contribute('physics/cwe', false);
model.mesh('mesh1').contribute('physics/elte', false);
model.mesh('mesh1').contribute('physics/es', false);
model.mesh('mesh1').contribute('multiphysics/pzete1', false);
model.mesh('mesh1').contribute('multiphysics/cspte1', false);
model.mesh('mesh1').contribute('multiphysics/bffc1', false);
model.mesh('mesh1').run;
model.mesh('mesh1').label('Mesh 1 - CFD');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/physics/cwe', false);
model.study('std1').feature('stat').setSolveFor('/physics/elte', false);
model.study('std1').feature('stat').setSolveFor('/physics/es', false);
model.study('std1').feature('stat').setSolveFor('/multiphysics/pzete1', false);
model.study('std1').feature('stat').setSolveFor('/multiphysics/cspte1', false);
model.study('std1').feature('stat').setSolveFor('/multiphysics/bffc1', false);
model.study('std1').setGenPlots(false);
model.study('std1').label('Study 1 - CFD');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u' 'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_k' 'comp1_om'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.45);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, turbulence variables (spf)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'i2');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Turbulence Variables');
model.sol('sol1').feature('s1').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s1').feature('se1').set('subinitcfl', 2);
model.sol('sol1').feature('s1').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s1').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s1').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s1').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s1').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s1').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s1').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s1').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s1').feature('se1').set('maxsegiter', 400);
model.sol('sol1').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.k 0 comp1.om 0 ');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s1').create('d2', 'Direct');
model.sol('sol1').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d2').label('Direct, turbulence variables (spf)');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.modelNode('comp1').sorder('quadratic');

model.coordSystem.create('ab1', 'geom1', 'AbsorbingLayer');
model.coordSystem('ab1').selection.set([1 3]);

model.mesh.create('mesh2', 'geom1');
model.mesh('mesh2').label('Mesh 2 - Acoustics');
model.mesh('mesh2').create('ftri1', 'FreeTri');
model.mesh('mesh2').feature('ftri1').selection.set([32 35 37 42 43 54]);
model.mesh('mesh2').feature('ftri1').create('size1', 'Size');
model.mesh('mesh2').feature('ftri1').feature('size1').selection.set([32 54]);
model.mesh('mesh2').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh2').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh2').feature('ftri1').feature('size1').set('hmax', 'cs_pzt/f0/2');
model.mesh('mesh2').feature('ftri1').create('size2', 'Size');
model.mesh('mesh2').feature('ftri1').feature('size2').selection.set([35 37 42 43]);
model.mesh('mesh2').feature('ftri1').feature('size2').set('custom', true);
model.mesh('mesh2').feature('ftri1').feature('size2').set('hmaxactive', true);
model.mesh('mesh2').feature('ftri1').feature('size2').set('hmax', 'cs_match/f0/2');
model.mesh('mesh2').create('swe1', 'Sweep');
model.mesh('mesh2').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh2').feature('swe1').selection.named('sel2');
model.mesh('mesh2').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh2').feature('swe1').feature('dis1').set('numelem', 4);
model.mesh('mesh2').create('swe2', 'Sweep');
model.mesh('mesh2').feature('swe2').selection.geom('geom1', 3);
model.mesh('mesh2').feature('swe2').selection.named('sel3');
model.mesh('mesh2').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh2').feature('swe2').feature('dis1').set('numelem', 2);
model.mesh('mesh2').create('ftet1', 'FreeTet');
model.mesh('mesh2').feature('ftet1').set('optlevel', 'high');
model.mesh('mesh2').feature('ftet1').set('optsmall', true);
model.mesh('mesh2').feature('ftet1').create('size1', 'Size');
model.mesh('mesh2').feature('ftet1').feature('size1').selection.geom('geom1', 3);
model.mesh('mesh2').feature('ftet1').feature('size1').selection.named('sel1');
model.mesh('mesh2').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh2').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh2').feature('ftet1').feature('size1').set('hmax', 'lam0/1.5');
model.mesh('mesh2').feature('ftet1').feature('size1').set('hminactive', true);
model.mesh('mesh2').feature('ftet1').feature('size1').set('hmin', 'lam0/3');
model.mesh('mesh2').feature('ftet1').create('size2', 'Size');
model.mesh('mesh2').feature('ftet1').feature('size2').selection.geom('geom1', 3);
model.mesh('mesh2').feature('ftet1').feature('size2').selection.named('sel4');
model.mesh('mesh2').feature('ftet1').feature('size2').set('custom', true);
model.mesh('mesh2').feature('ftet1').feature('size2').set('hmaxactive', true);
model.mesh('mesh2').feature('ftet1').feature('size2').set('hmax', 'cs_damp/f0/1.5');
model.mesh('mesh2').run;

model.study.create('std2');
model.study('std2').create('mapp', 'Mapping');
model.study('std2').feature('mapp').set('solnum', 'auto');
model.study('std2').feature('mapp').set('notsolnum', 'auto');
model.study('std2').feature('mapp').set('outputmap', {});
model.study('std2').feature('mapp').setSolveFor('/physics/spf', false);
model.study('std2').feature('mapp').setSolveFor('/physics/cwe', false);
model.study('std2').feature('mapp').setSolveFor('/physics/elte', false);
model.study('std2').feature('mapp').setSolveFor('/physics/es', false);
model.study('std2').feature('mapp').setSolveFor('/multiphysics/pzete1', false);
model.study('std2').feature('mapp').setSolveFor('/multiphysics/cspte1', false);
model.study('std2').feature('mapp').setSolveFor('/multiphysics/bffc1', true);
model.study('std2').feature('mapp').setSolveFor('/physics/spf', false);
model.study('std2').feature('mapp').setSolveFor('/physics/cwe', false);
model.study('std2').label('Study 2 - Mapping');
model.study('std2').setGenPlots(false);
model.study('std2').feature('mapp').set('notstudy', 'std1');

model.sol.create('sol2');

model.mesh('mesh2').stat.selection.geom(3);
model.mesh('mesh2').stat.selection.set([2]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'mapp');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'mapp');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.study.create('std3');
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').setSolveFor('/physics/spf', false);
model.study('std3').feature('time').setSolveFor('/physics/cwe', true);
model.study('std3').feature('time').setSolveFor('/physics/elte', true);
model.study('std3').feature('time').setSolveFor('/physics/es', true);
model.study('std3').feature('time').setSolveFor('/multiphysics/pzete1', true);
model.study('std3').feature('time').setSolveFor('/multiphysics/cspte1', true);
model.study('std3').feature('time').setSolveFor('/multiphysics/bffc1', false);
model.study('std3').setGenPlots(false);
model.study('std3').label('Study 3 - Acoustics');
model.study('std3').feature('time').set('tlist', 'range(0, T0/5, 30*T0)');
model.study('std3').feature('time').set('usesol', true);
model.study('std3').feature('time').set('notsolmethod', 'sol');
model.study('std3').feature('time').set('notstudy', 'std2');
model.study('std3').feature('time').setEntry('outputmap', 'spf', 'selection');
model.study('std3').feature('time').setEntry('outputselectionmap', 'spf', 'sel5');
model.study('std3').feature('time').setEntry('outputmap', 'cwe', 'selection');
model.study('std3').feature('time').setEntry('outputselectionmap', 'cwe', 'sel5');
model.study('std3').feature('time').setEntry('outputmap', 'elte', 'selection');
model.study('std3').feature('time').setEntry('outputselectionmap', 'elte', 'sel5');
model.study('std3').feature('time').setEntry('outputmap', 'es', 'selection');
model.study('std3').feature('time').setEntry('outputselectionmap', 'es', 'sel5');

model.sol.create('sol3');

model.mesh('mesh2').stat.selection.geom(3);
model.mesh('mesh2').stat.selection.set([2]);

model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'time');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'time');
model.sol('sol3').create('t1', 'Time');
model.sol('sol3').feature('t1').set('odesolvertype', 'explicit');
model.sol('sol3').feature('t1').set('timemethodexp', 'erk');
model.sol('sol3').feature('t1').set('tlist', 'range(0, T0/5, 30*T0)');
model.sol('sol3').feature('t1').set('plot', 'off');
model.sol('sol3').feature('t1').set('plotgroup', 'Default');
model.sol('sol3').feature('t1').set('plotfreq', 'tout');
model.sol('sol3').feature('t1').set('probesel', 'all');
model.sol('sol3').feature('t1').set('probes', {});
model.sol('sol3').feature('t1').set('probefreq', 'tsteps');
model.sol('sol3').feature('t1').set('exprs', {'root.comp1.cwe.wtc' 'root.comp1.cwe.wtc' 'root.comp1.elte.wtc'});
model.sol('sol3').feature('t1').set('tstepping', 'elemexprs');
model.sol('sol3').feature('t1').set('algebraicsolvemethodRK', 'n');
model.sol('sol3').feature('t1').set('control', 'time');
model.sol('sol3').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('t1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').run;
model.result('pg1').label('Background Flow Velocity');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').run;
model.result('pg2').label('Acoustic and Elastic Pressure');
model.result('pg2').set('titletype', 'label');
model.result('pg2').set('data', 'dset3');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'p2');
model.result('pg2').feature('surf1').set('colortable', 'Wave');
model.result('pg2').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg2').feature('surf1').set('resolution', 'custom');
model.result('pg2').feature('surf1').set('refine', 6);
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').create('sel1', 'Selection');
model.result('pg2').feature('surf1').feature('sel1').selection.named('sel5');
model.result('pg2').run;
model.result('pg2').feature.duplicate('surf2', 'surf1');
model.result('pg2').run;
model.result('pg2').feature('surf2').set('expr', 'elte.p');
model.result('pg2').feature('surf2').set('descr', 'Pressure');
model.result('pg2').feature('surf2').set('inheritplot', 'surf1');
model.result('pg2').create('surf3', 'Surface');
model.result('pg2').feature('surf3').set('expr', '1');
model.result('pg2').feature('surf3').create('sel1', 'Selection');
model.result('pg2').feature('surf3').feature('sel1').selection.set([3 4 7 8 9 11 12 13 17 18]);
model.result('pg2').run;
model.result('pg2').feature('surf3').create('mtrl1', 'MaterialAppearance');
model.result('pg2').run;
model.result('pg2').feature('surf3').feature('mtrl1').set('appearance', 'custom');
model.result('pg2').feature('surf3').feature('mtrl1').set('family', 'steel');
model.result('pg2').create('surf4', 'Surface');
model.result('pg2').feature('surf4').set('expr', '1');
model.result('pg2').feature('surf4').create('sel1', 'Selection');
model.result('pg2').feature('surf4').feature('sel1').selection.set([20 23 34 38 39 44 47 50]);
model.result('pg2').run;
model.result('pg2').feature('surf4').create('mtrl1', 'MaterialAppearance');
model.result('pg2').run;
model.result('pg2').feature('surf4').feature('mtrl1').set('appearance', 'custom');
model.result('pg2').feature('surf4').feature('mtrl1').set('color', 'custom');
model.result('pg2').feature('surf4').feature('mtrl1').set('customcolor', [1 0.6274510025978088 0.47843137383461]);
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 51, 0);
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 76, 0);
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 101, 0);
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 126, 0);
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Sent and Received Signals');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevelinput', 'interp', 0);
model.result('pg3').setIndex('interp', 'range(0, T0/20, 30*T0)', 0);
model.result('pg3').set('titletype', 'label');
model.result('pg3').create('ptgr1', 'PointGraph');
model.result('pg3').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg3').feature('ptgr1').set('linewidth', 'preference');
model.result('pg3').feature('ptgr1').selection.set([39]);
model.result('pg3').feature('ptgr1').set('expr', 'V/V0');
model.result('pg3').feature('ptgr1').set('legend', true);
model.result('pg3').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg3').feature('ptgr1').setIndex('legends', 'Relative driving voltage', 0);
model.result('pg3').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg3').run;
model.result('pg3').feature('ptgr2').selection.set([73]);
model.result('pg3').feature('ptgr2').setIndex('legends', 'Relative received voltage', 0);
model.result('pg3').run;
model.result('pg3').set('twoyaxes', true);
model.result('pg3').setIndex('plotonsecyaxis', true, 1, 1);
model.result('pg3').set('axislimits', true);
model.result('pg3').set('xmin', 0);
model.result('pg3').set('xmax', '30*T0');
model.result('pg3').set('ymin', -1);
model.result('pg3').set('ymax', 1);
model.result('pg3').set('yminsec', -0.015);
model.result('pg3').set('ymaxsec', 0.015);
model.result('pg3').set('legendpos', 'uppermiddle');
model.result('pg3').run;

model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledcoordinatesystems', {'ab1'});

model.result('pg2').run;

model.title('Ultrasonic Flowmeter with Piezoelectric Transducers');

model.description(['Ultrasonic flowmeters determine the velocity of a fluid flowing through a pipe by sending an ultrasonic signal across the flow at a skew angle. When there is no flow, the transmitting time between the transmitter and the receiver is the same for the signals sent in the upstream and downstream directions. Otherwise, the wave traveling downstream moves faster than the one traveling upstream, which can be used to ascertain the flow. In many cases, piezoelectric transducers are used to send and receive the ultrasonic wave.' newline  newline 'This tutorial shows how to simulate an ultrasonic flowmeter with piezoelectric transducers in the presence of a flow. The model is based on the discontinuous Galerkin (dG) method which is well suited for acoustically large transient problems. The Elastic Waves, Time Explicit and the Convected Wave Equation, Time Explicit physics interfaces model the wave propagation in the solid and fluid domains, respectively. The two are connected through the Pair Convected Acoustic' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Structure Boundary, Time Explicit multiphysics feature. The piezoelectric transducers are modeled with the Piezoelectricity, Time Explicit multiphysics feature that couples the Elastic Waves, Time Explicit and the Electrostatics physics interfaces. The model takes advantage of a geometry assembly and a nonconforming mesh.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('flow_meter_piezoelectric_transducers.mph');

model.modelNode.label('Components');

out = model;
