function out = model
%
% fuel_tank_vibration.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Fluid-Structure_Interaction');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('shell', 'Shell', 'geom1');
model.physics('shell').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');

model.study.create('std1');
model.study('std1').create('eig', 'Eigenfrequency');
model.study('std1').feature('eig').set('chkeigregion', true);
model.study('std1').feature('eig').set('conrad', '1');
model.study('std1').feature('eig').set('conradynhm', '1');
model.study('std1').feature('eig').set('storefact', false);
model.study('std1').feature('eig').set('linpsolnum', 'auto');
model.study('std1').feature('eig').set('solnum', 'auto');
model.study('std1').feature('eig').set('notsolnum', 'auto');
model.study('std1').feature('eig').set('outputmap', {});
model.study('std1').feature('eig').set('ngenAUX', '1');
model.study('std1').feature('eig').set('goalngenAUX', '1');
model.study('std1').feature('eig').set('ngenAUX', '1');
model.study('std1').feature('eig').set('goalngenAUX', '1');
model.study('std1').feature('eig').setSolveFor('/physics/shell', true);
model.study('std1').feature('eig').setSolveFor('/physics/solid', true);
model.study('std1').feature('eig').setSolveFor('/physics/acpr', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('rho0', '830[kg/m^3]', 'Density of fuel');
model.param.set('c0', '1360[m/s]', 'Speed of sound in fuel');
model.param.set('lam0', 'c0/fmax', 'Wavelength at maximum frequency');
model.param.set('mesh_size', '15[mm]', 'Maximum size for the shell boundaries');
model.param.set('min_mesh_factor', '1.5', 'Ratio between minimum and maximum mesh length');
model.param.set('strap_th', '2[mm]', 'Thickness of the fuel tank straps');
model.param.set('wall_th', '1.6[mm]', 'Thickness of the fuel tank wall');
model.param.set('a0', '1[m/s^2]', 'Acceleration reference used to excite the system');
model.param.set('d0', 'a0/(1000[Hz])^2', 'Displacement reference used to excite the system');
model.param.set('fmin', '50[Hz]', 'Minimum frequency of the analysis');
model.param.set('fmax', '250[Hz]', 'Maximum frequency of the analysis');
model.param.set('deltaf', '2.5[Hz]', 'Steps in the frequency sweep');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'fuel_tank_vibration.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').run('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Straps');

model.view('view1').set('renderwireframe', true);

model.selection('sel1').geom(2);
model.selection('sel1').set([1 2 3 4 5 6 7 8 9 83 84 85 93 97 101 173 174 175 176 177 178 203 204 205 206 207 208]);
model.selection('sel1').set('groupcontang', true);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Fuel Tank');
model.selection('sel2').geom(2);
model.selection('sel2').set([10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 86 87 88 89 90 91 104 105 106 107 108 109 110 111 112 113 116 122 123 124 125 126 129 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 152 153 154 155 156 158 159 160 161 162 164 165 166 167 168 170 171 172 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Foam');
model.selection('sel3').set([3 4 5 6]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Shells');
model.selection('uni1').set('entitydim', 2);
model.selection('uni1').set('input', {'sel1' 'sel2'});
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Fuel');
model.selection('sel4').set([2]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Wetted Surface');
model.selection('sel5').geom(2);
model.selection('sel5').set([12 14 16 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 90 91 104 105 106 107 108 109 110 111 112 125 126 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 155 156 158 159 160 161 162 164 165 166 167 168 170 171 172 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201]);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Attached Boundaries');
model.selection('sel6').geom(2);
model.selection('sel6').set([1 2 3 117 206 207 208]);
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').label('Fluid Free Surface');
model.selection('sel7').geom(2);
model.selection('sel7').set([13]);

model.massProp.create('mass1', 'MassProperties');
model.massProp('mass1').model('comp1');
model.massProp('mass1').label('Fuel Mass');
model.massProp('mass1').selection.named('sel4');
model.massProp('mass1').set('expr', 'rho0');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').label('Aluminum 6063-T83');
model.material('mat1').set('family', 'aluminum');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'3.030e7[S/m]' '0' '0' '0' '3.030e7[S/m]' '0' '0' '0' '3.030e7[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'23.4e-6[1/K]' '0' '0' '0' '23.4e-6[1/K]' '0' '0' '0' '23.4e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'201[W/(m*K)]' '0' '0' '0' '201[W/(m*K)]' '0' '0' '0' '201[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '69[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.33');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('Steel AISI 4340');
model.material('mat2').set('family', 'steel');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.28');
model.material('mat1').selection.geom('geom1', 2);
model.material('mat1').selection.named('sel2');
model.material('mat1').propertyGroup('def').set('lossfactor', {'0.01'});
model.material('mat2').selection.geom('geom1', 2);
model.material('mat2').selection.named('sel1');
model.material('mat2').propertyGroup('def').set('lossfactor', {'0.01'});
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Fuel');
model.material('mat3').selection.named('sel4');
model.material('mat3').propertyGroup('def').set('density', {'rho0'});
model.material('mat3').propertyGroup('def').set('soundspeed', {'c0'});
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').label('Foam Material');
model.material('mat4').selection.named('sel3');
model.material('mat4').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat4').propertyGroup('Enu').set('E', {'50[MPa]'});
model.material('mat4').propertyGroup('Enu').set('nu', {'0.45'});
model.material('mat4').propertyGroup('def').set('density', {'500[kg/m^3]'});
model.material('mat4').propertyGroup('def').set('lossfactor', {'0.1'});

model.physics('shell').selection.named('uni1');
model.physics('shell').feature('emm1').create('dmp1', 'Damping', 2);
model.physics('shell').feature('emm1').feature('dmp1').set('DampingType', 'IsotropicLossFactor');
model.physics('shell').feature('to1').set('d', 'wall_th');
model.physics('shell').create('to2', 'ThicknessOffset', 2);
model.physics('shell').feature('to2').selection.named('sel1');
model.physics('shell').feature('to2').set('d', 'strap_th');
model.physics('shell').create('adm1', 'AddedMass2', 2);
model.physics('shell').feature('adm1').selection.named('sel5');
model.physics('shell').feature('adm1').set('MassType', 'mTot');
model.physics('shell').feature('adm1').set('mTot', {'mass1.mass' '0' '0' '0' 'mass1.mass' '0' '0' '0' 'mass1.mass'});
model.physics('shell').create('disp1', 'Displacement2', 2);
model.physics('shell').feature('disp1').selection.named('sel6');
model.physics('shell').feature('disp1').setIndex('Direction', 'prescribed', 0);
model.physics('shell').feature('disp1').setIndex('Direction', 'prescribed', 1);
model.physics('shell').feature('disp1').setIndex('Direction', 'prescribed', 2);
model.physics('shell').feature('disp1').setIndex('U0', 'd0', 2);
model.physics('solid').selection.named('sel3');
model.physics('solid').feature('lemm1').create('dmp1', 'Damping', 3);
model.physics('solid').feature('lemm1').feature('dmp1').set('DampingType', 'IsotropicLossFactor');
model.physics('solid').create('disp1', 'Displacement2', 2);
model.physics('solid').feature('disp1').selection.named('sel6');
model.physics('solid').feature('disp1').setIndex('Direction', 'prescribed', 0);
model.physics('solid').feature('disp1').setIndex('Direction', 'prescribed', 1);
model.physics('solid').feature('disp1').setIndex('Direction', 'prescribed', 2);
model.physics('solid').feature('disp1').setIndex('U0', 'd0', 2);
model.physics('acpr').selection.named('sel4');
model.physics('acpr').create('ssb1', 'SoundSoft', 2);
model.physics('acpr').feature('ssb1').selection.named('sel7');

model.multiphysics.create('sshc1', 'SolidShellConnection', 'geom1', -1);
model.multiphysics('sshc1').set('connectionSettings', 'sharedBnd');
model.multiphysics.create('asb1', 'AcousticStructureBoundary', 'geom1', 2);
model.multiphysics('asb1').selection.named('sel5');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.set([7 8 9 11 14 15 16 17 18 19 20 21 40 43 46 47 48 49 50 51 52 53 55 58 61 63 71 72 73 74 75 76 77 78 83 84 85 86 87 88 89 91 101 104 105 106 107 108 109 110 112 113 122 123 124 125 126 129 131 132 133 134 135 136 139 140 141 142 143 144 145 146 147 148 150 152 154 173 174 175 176 177 178 179 181 183 184 186 188 189 191 193 194 202]);
model.mesh('mesh1').feature('map1').create('size1', 'Size');
model.mesh('mesh1').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmax', 'mesh_size');
model.mesh('mesh1').feature('map1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmin', 'mesh_size/min_mesh_factor');
model.mesh('mesh1').create('fq1', 'FreeQuad');
model.mesh('mesh1').feature('fq1').selection.set([116]);
model.mesh('mesh1').feature('fq1').create('size1', 'Size');
model.mesh('mesh1').feature('fq1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('fq1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('fq1').feature('size1').set('hmax', 'mesh_size');
model.mesh('mesh1').feature('fq1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('fq1').feature('size1').set('hmin', 'mesh_size/min_mesh_factor');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'lam0/6');
model.mesh('mesh1').feature('size').set('hmin', '6[mm]');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.named('sel3');
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.named('sel4');
model.mesh('mesh1').feature('ftet1').set('optcurved', false);
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftet1').feature('size1').selection.named('sel5');
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', 'mesh_size');
model.mesh('mesh1').feature('ftet1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmin', 'mesh_size/min_mesh_factor');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.remaining;
model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Modes with Added Mass');
model.study('std1').setGenPlots(false);
model.study('std1').feature('eig').set('neigsactive', true);
model.study('std1').feature('eig').set('shift', '0[Hz]');
model.study('std1').feature('eig').setEntry('activate', 'shell', true);
model.study('std1').feature('eig').setEntry('activate', 'solid', true);
model.study('std1').feature('eig').setEntry('activate', 'acpr', false);
model.study('std1').feature('eig').setEntry('activateCoupling', 'asb1', false);
model.study.create('std2');
model.study('std2').create('eig', 'Eigenfrequency');
model.study('std2').feature('eig').set('chkeigregion', true);
model.study('std2').feature('eig').set('conrad', '1');
model.study('std2').feature('eig').set('conradynhm', '1');
model.study('std2').feature('eig').set('storefact', false);
model.study('std2').feature('eig').set('linpsolnum', 'auto');
model.study('std2').feature('eig').set('solnum', 'auto');
model.study('std2').feature('eig').set('notsolnum', 'auto');
model.study('std2').feature('eig').set('outputmap', {});
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').setSolveFor('/physics/shell', true);
model.study('std2').feature('eig').setSolveFor('/physics/solid', true);
model.study('std2').feature('eig').setSolveFor('/physics/acpr', true);
model.study('std2').feature('eig').setSolveFor('/multiphysics/sshc1', true);
model.study('std2').feature('eig').setSolveFor('/multiphysics/asb1', true);
model.study.create('std3');
model.study('std3').create('freq', 'Frequency');
model.study('std3').feature('freq').setSolveFor('/physics/shell', true);
model.study('std3').feature('freq').setSolveFor('/physics/solid', true);
model.study('std3').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std3').feature('freq').setSolveFor('/multiphysics/sshc1', true);
model.study('std3').feature('freq').setSolveFor('/multiphysics/asb1', true);
model.study.create('std4');
model.study('std4').create('freq', 'Frequency');
model.study('std4').feature('freq').setSolveFor('/physics/shell', true);
model.study('std4').feature('freq').setSolveFor('/physics/solid', true);
model.study('std4').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std4').feature('freq').setSolveFor('/multiphysics/sshc1', true);
model.study('std4').feature('freq').setSolveFor('/multiphysics/asb1', true);
model.study('std2').label('Study 2 - Modes with Acoustic');
model.study('std2').setGenPlots(false);
model.study('std2').feature('eig').set('neigsactive', true);
model.study('std2').feature('eig').set('shift', '0[Hz]');
model.study('std2').feature('eig').set('useadvanceddisable', true);
model.study('std2').feature('eig').set('disabledphysics', {'shell/adm1'});
model.study('std3').label('Study 3 - Frequency Response with Added Mass');
model.study('std3').setGenPlots(false);
model.study('std3').feature('freq').set('plist', 'range(fmin,deltaf,fmax)');
model.study('std3').feature('freq').setEntry('activate', 'shell', true);
model.study('std3').feature('freq').setEntry('activate', 'solid', true);
model.study('std3').feature('freq').setEntry('activate', 'acpr', false);
model.study('std3').feature('freq').setEntry('activateCoupling', 'asb1', false);
model.study('std4').setGenPlots(false);
model.study('std4').label('Study 4 - Frequency Response with Acoustics');
model.study('std4').feature('freq').set('plist', 'range(fmin,deltaf,fmax)');
model.study('std4').feature('freq').set('useadvanceddisable', true);
model.study('std4').feature('freq').set('disabledphysics', {'shell/adm1'});

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'eig');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol1').feature('v1').set('control', 'eig');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol1').feature('e1').set('eigvfunscaleparam', '6.919999999999999E-7');
model.sol('sol1').feature('e1').set('control', 'eig');
model.sol('sol1').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;
model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'eig');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol2').feature('v1').set('control', 'eig');
model.sol('sol2').create('e1', 'Eigenvalue');
model.sol('sol2').feature('e1').set('neigs', 6);
model.sol('sol2').feature('e1').set('shift', '0');
model.sol('sol2').feature('e1').set('rtol', 1.0E-6);
model.sol('sol2').feature('e1').set('transform', 'none');
model.sol('sol2').feature('e1').set('eigref', '100');
model.sol('sol2').feature('e1').set('eigvfunscaleparam', '6.919999999999999E-7');
model.sol('sol2').feature('e1').set('control', 'eig');
model.sol('sol2').feature('e1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('e1').feature('aDef').set('matherr', true);
model.sol('sol2').feature('e1').feature('aDef').set('blocksizeactive', false);
model.sol('sol2').feature('e1').create('d1', 'Direct');
model.sol('sol2').feature('e1').feature('d1').set('linsolver', 'mumps');
model.sol('sol2').feature('e1').feature('d1').label('Suggested Direct Solver (asb1_sshc1) (Merged)');
model.sol('sol2').feature('e1').create('i1', 'Iterative');
model.sol('sol2').feature('e1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('e1').feature('i1').label('Suggested Iterative Solver (GMRES with DirectPrecond.) (asb1_sshc1)');
model.sol('sol2').feature('e1').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol2').feature('e1').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol2').feature('e1').feature('i1').feature('dp1').set('hybridvar', {'comp1_p'});
model.sol('sol2').feature('e1').feature('i1').create('dp2', 'DirectPreconditioner');
model.sol('sol2').feature('e1').feature('i1').feature('dp2').set('hybridization', 'multi');
model.sol('sol2').feature('e1').feature('i1').feature('dp2').set('hybridvar', {'comp1_u2' 'comp1_u' 'comp1_ar'});
model.sol('sol2').feature('e1').feature('i1').feature('dp2').set('pivotperturb', '1.0E-9');
model.sol('sol2').feature('e1').create('i2', 'Iterative');
model.sol('sol2').feature('e1').feature('i2').set('linsolver', 'gmres');
model.sol('sol2').feature('e1').feature('i2').label('Suggested Iterative Solver (GMRES with GMG and Direct Precond.) (asb1_sshc1)');
model.sol('sol2').feature('e1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol2').feature('e1').feature('i2').feature('mg1').set('hybridization', 'multi');
model.sol('sol2').feature('e1').feature('i2').feature('mg1').set('hybridvar', {'comp1_p'});
model.sol('sol2').feature('e1').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol2').feature('e1').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol2').feature('e1').feature('i2').feature('dp1').set('hybridvar', {'comp1_u2' 'comp1_u' 'comp1_ar'});
model.sol('sol2').feature('e1').feature('i2').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol2').feature('e1').feature('d1').active(true);
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;
model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'freq');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol3').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol3').feature('v1').set('control', 'freq');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol3').feature('s1').feature('p1').set('plistarr', {'range(fmin,deltaf,fmax)'});
model.sol('sol3').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol3').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol3').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol3').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol3').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol3').feature('s1').feature('p1').set('probes', {});
model.sol('sol3').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol3').feature('s1').set('linpmethod', 'sol');
model.sol('sol3').feature('s1').set('linpsol', 'zero');
model.sol('sol3').feature('s1').set('control', 'freq');
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').create('seDef', 'Segregated');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').feature('s1').feature.remove('seDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;
model.sol.create('sol4');
model.sol('sol4').study('std4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std4');
model.sol('sol4').feature('st1').set('studystep', 'freq');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol4').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol4').feature('v1').set('control', 'freq');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').set('stol', 0.001);
model.sol('sol4').feature('s1').create('p1', 'Parametric');
model.sol('sol4').feature('s1').feature.remove('pDef');
model.sol('sol4').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol4').feature('s1').feature('p1').set('plistarr', {'range(fmin,deltaf,fmax)'});
model.sol('sol4').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol4').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol4').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol4').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol4').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol4').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol4').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol4').feature('s1').feature('p1').set('probes', {});
model.sol('sol4').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol4').feature('s1').set('linpmethod', 'sol');
model.sol('sol4').feature('s1').set('linpsol', 'zero');
model.sol('sol4').feature('s1').set('control', 'freq');
model.sol('sol4').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol4').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol4').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol4').feature('s1').create('seDef', 'Segregated');
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol4').feature('s1').feature('d1').label('Suggested Direct Solver (asb1_sshc1) (Merged)');
model.sol('sol4').feature('s1').create('i1', 'Iterative');
model.sol('sol4').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with DirectPrecond.) (asb1_sshc1)');
model.sol('sol4').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol4').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol4').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_p'});
model.sol('sol4').feature('s1').feature('i1').create('dp2', 'DirectPreconditioner');
model.sol('sol4').feature('s1').feature('i1').feature('dp2').set('hybridization', 'multi');
model.sol('sol4').feature('s1').feature('i1').feature('dp2').set('hybridvar', {'comp1_u2' 'comp1_u' 'comp1_ar'});
model.sol('sol4').feature('s1').feature('i1').feature('dp2').set('pivotperturb', '1.0E-9');
model.sol('sol4').feature('s1').create('i2', 'Iterative');
model.sol('sol4').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol4').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with GMG and Direct Precond.) (asb1_sshc1)');
model.sol('sol4').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('hybridization', 'multi');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('hybridvar', {'comp1_p'});
model.sol('sol4').feature('s1').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol4').feature('s1').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol4').feature('s1').feature('i2').feature('dp1').set('hybridvar', {'comp1_u2' 'comp1_u' 'comp1_ar'});
model.sol('sol4').feature('s1').feature('i2').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol4').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').feature('s1').feature.remove('seDef');
model.sol('sol4').attach('std4');
model.sol('sol4').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').run;
model.result('pg1').label('Mode Shape with Added Mass');
model.result('pg1').set('looplevel', [4]);
model.result('pg1').set('edges', false);
model.result('pg1').set('showlegends', false);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', 'if(isnan(solid.disp),shell.disp,solid.disp)');
model.result('pg1').feature('surf1').set('descractive', true);
model.result('pg1').feature('surf1').set('descr', 'Mode Shape - With added mass');
model.result('pg1').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg1').feature('surf1').create('def1', 'Deform');
model.result('pg1').run;
model.result('pg1').feature('surf1').feature('def1').set('expr', {'if(isnan(u2),u,u2)' 'v' 'w'});
model.result('pg1').feature('surf1').feature('def1').setIndex('expr', 'if(isnan(v2),v,v2)', 1);
model.result('pg1').feature('surf1').feature('def1').setIndex('expr', 'if(isnan(w2),w,w2)', 2);
model.result('pg1').create('line1', 'Line');
model.result('pg1').feature('line1').set('expr', '0');
model.result('pg1').feature('line1').set('coloring', 'uniform');
model.result('pg1').feature('line1').set('color', 'black');
model.result('pg1').feature('line1').set('inheritplot', 'surf1');
model.result('pg1').feature('line1').set('inheritcolor', false);
model.result('pg1').feature('line1').set('inheritrange', false);
model.result('pg1').feature('line1').create('def1', 'Deform');
model.result('pg1').run;
model.result('pg1').feature('line1').feature('def1').set('expr', {'if(isnan(u2),u,u2)' 'v' 'w'});
model.result('pg1').feature('line1').feature('def1').setIndex('expr', 'if(isnan(v2),v,v2)', 1);
model.result('pg1').feature('line1').feature('def1').setIndex('expr', 'if(isnan(w2),w,w2)', 2);
model.result('pg1').run;
model.result('pg1').run;
model.result.duplicate('pg2', 'pg1');
model.result('pg2').run;
model.result('pg2').label('Mode Shape with Acoustics');
model.result('pg2').set('data', 'dset2');
model.result('pg2').set('looplevel', [3]);
model.result('pg2').run;
model.result('pg2').feature('surf1').set('descr', 'Mode Shape - With pressure acoustics');
model.result('pg2').run;
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('FRF: Stress at the Fuel Tank Strap');
model.result('pg3').set('titletype', 'label');
model.result('pg3').set('data', 'dset3');
model.result('pg3').set('xlabelactive', true);
model.result('pg3').set('xlabel', 'Frequency (Hz)');
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'FRF (MPa/m)');
model.result('pg3').set('xlog', true);
model.result('pg3').set('ylog', true);
model.result('pg3').set('legendpos', 'lowerleft');
model.result('pg3').create('oct1', 'OctaveBand');
model.result('pg3').feature('oct1').set('quantity', 'bandpower');
model.result('pg3').feature('oct1').set('markerpos', 'datapoints');
model.result('pg3').feature('oct1').set('linewidth', 'preference');
model.result('pg3').feature('oct1').selection.set([93]);
model.result('pg3').feature('oct1').set('expr', 'abs(shell.szz)/1e9');
model.result('pg3').feature('oct1').set('exprtype', 'general');
model.result('pg3').feature('oct1').set('generalref', 'd0');
model.result('pg3').feature('oct1').set('quantity', 'continuous');
model.result('pg3').feature('oct1').set('legend', true);
model.result('pg3').feature('oct1').set('legendmethod', 'manual');
model.result('pg3').feature('oct1').setIndex('legends', 'With added mass', 0);
model.result('pg3').feature.duplicate('oct2', 'oct1');
model.result('pg3').run;
model.result('pg3').feature('oct2').set('data', 'dset4');
model.result('pg3').feature('oct2').setIndex('legends', 'With acoustics (full model)', 0);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Absolute Stress Comparison at 90 Hz');
model.result('pg4').set('data', 'dset4');
model.result('pg4').setIndex('looplevel', 17, 0);
model.result('pg4').set('titletype', 'label');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').set('edges', false);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'if(isnan(solid.SZZ),abs(shell.szz),abs(solid.SZZ))');
model.result('pg4').feature('surf1').set('unit', 'MPa');
model.result('pg4').feature('surf1').set('rangecoloractive', true);
model.result('pg4').feature('surf1').set('rangecolormax', 10);
model.result('pg4').feature('surf1').create('def1', 'Deform');
model.result('pg4').run;
model.result('pg4').feature('surf1').feature('def1').set('expr', {'if(isnan(u2),u,u2)' 'v' 'w'});
model.result('pg4').feature('surf1').feature('def1').setIndex('expr', 'if(isnan(v2),v,v2)', 1);
model.result('pg4').feature('surf1').feature('def1').setIndex('expr', 'if(isnan(w2),w,w2)', 2);
model.result('pg4').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg4').feature('surf1').feature('def1').set('scale', 250);
model.result('pg4').create('line1', 'Line');
model.result('pg4').feature('line1').set('expr', '0');
model.result('pg4').feature('line1').set('coloring', 'uniform');
model.result('pg4').feature('line1').set('color', 'black');
model.result('pg4').feature('line1').set('inheritplot', 'surf1');
model.result('pg4').feature('line1').set('inheritcolor', false);
model.result('pg4').feature('line1').set('inheritrange', false);
model.result('pg4').feature('line1').create('def1', 'Deform');
model.result('pg4').run;
model.result('pg4').feature('line1').feature('def1').set('expr', {'if(isnan(u2),u,u2)' 'v' 'w'});
model.result('pg4').feature('line1').feature('def1').setIndex('expr', 'if(isnan(v2),v,v2)', 1);
model.result('pg4').feature('line1').feature('def1').setIndex('expr', 'if(isnan(w2),w,w2)', 2);
model.result('pg4').create('ann1', 'Annotation');
model.result('pg4').feature('ann1').set('text', 'With Acoustics');
model.result('pg4').feature('ann1').set('posyexpr', 100);
model.result('pg4').feature('ann1').set('poszexpr', -200);
model.result('pg4').feature('ann1').set('showpoint', false);
model.result('pg4').feature('ann1').set('anchorpoint', 'center');
model.result('pg4').feature('ann1').set('showframe', true);
model.result('pg4').create('surf2', 'Surface');
model.result('pg4').feature('surf2').set('data', 'dset3');
model.result('pg4').feature('surf2').setIndex('looplevel', 17, 0);
model.result('pg4').feature('surf2').set('expr', 'if(isnan(solid.SZZ),abs(shell.szz),abs(solid.SZZ))');
model.result('pg4').feature('surf2').set('unit', 'MPa');
model.result('pg4').feature('surf2').set('inheritplot', 'surf1');
model.result('pg4').feature('surf2').create('def1', 'Deform');
model.result('pg4').run;
model.result('pg4').feature('surf2').feature('def1').set('expr', {'if(isnan(u2),u,u2)' 'v' 'w'});
model.result('pg4').feature('surf2').feature('def1').setIndex('expr', 'if(isnan(v2),v,v2)', 1);
model.result('pg4').feature('surf2').feature('def1').setIndex('expr', 'if(isnan(w2),w,w2)', 2);
model.result('pg4').run;
model.result('pg4').feature('surf2').create('trn1', 'Translation');
model.result('pg4').run;
model.result('pg4').feature('surf2').feature('trn1').set('trans', [-700 0 0]);
model.result('pg4').create('line2', 'Line');
model.result('pg4').feature('line2').set('expr', '0');
model.result('pg4').feature('line2').set('data', 'dset3');
model.result('pg4').feature('line2').setIndex('looplevel', 17, 0);
model.result('pg4').feature('line2').set('coloring', 'uniform');
model.result('pg4').feature('line2').set('color', 'black');
model.result('pg4').feature('line2').set('inheritcolor', false);
model.result('pg4').feature('line2').set('inheritrange', false);
model.result('pg4').feature('line2').set('inheritplot', 'surf2');
model.result('pg4').feature('line2').create('def1', 'Deform');
model.result('pg4').run;
model.result('pg4').feature('line2').feature('def1').set('expr', {'if(isnan(u2),u,u2)' 'v' 'w'});
model.result('pg4').feature('line2').feature('def1').setIndex('expr', 'if(isnan(v2),v,v2)', 1);
model.result('pg4').feature('line2').feature('def1').setIndex('expr', 'if(isnan(w2),w,w2)', 2);
model.result('pg4').run;
model.result('pg4').feature('line2').create('trn1', 'Translation');
model.result('pg4').run;
model.result('pg4').feature('line2').feature('trn1').set('trans', [-700 0 0]);
model.result('pg4').create('ann2', 'Annotation');
model.result('pg4').feature('ann2').set('text', 'With Added Mass');
model.result('pg4').feature('ann2').set('posxexpr', -700);
model.result('pg4').feature('ann2').set('posyexpr', 100);
model.result('pg4').feature('ann2').set('poszexpr', -220);
model.result('pg4').feature('ann2').set('showpoint', false);
model.result('pg4').feature('ann2').set('showframe', true);
model.result('pg4').feature('ann2').set('anchorpoint', 'center');
model.result('pg4').run;
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Absolute Stress Comparison at 127.5 Hz');
model.result('pg5').setIndex('looplevel', 32, 0);
model.result('pg5').run;
model.result('pg5').feature('surf1').set('rangecolormax', 5);
model.result('pg5').run;
model.result('pg5').feature('surf2').setIndex('looplevel', 32, 0);
model.result('pg5').run;
model.result('pg5').feature('line2').setIndex('looplevel', 32, 0);
model.result('pg5').run;
model.result('pg5').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Eigenfrequencies with Added Mass');
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'freq*2*pi', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 'Hz', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 1, 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 1, 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup.duplicate('eg2', 'eg1');
model.result.evaluationGroup('eg2').label('Eigenfrequencies with Acoustics');
model.result.evaluationGroup('eg2').set('data', 'dset2');
model.result.evaluationGroup('eg2').run;
model.result.evaluationGroup.create('eg3', 'EvaluationGroup');
model.result.evaluationGroup('eg3').label('Fuel Mass Evaluation');
model.result.evaluationGroup('eg3').setIndex('looplevelinput', 'last', 0);
model.result.evaluationGroup('eg3').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg3').feature('gev1').setIndex('expr', 'mass1.mass', 0);
model.result.evaluationGroup('eg3').feature('gev1').setIndex('unit', 'kg', 0);
model.result.evaluationGroup('eg3').feature('gev1').setIndex('descr', 'Fuel mass', 0);
model.result.evaluationGroup('eg3').run;
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').run;
model.result('pg6').label('Thumbnail');
model.result('pg6').set('data', 'dset4');
model.result('pg6').setIndex('looplevel', 63, 0);
model.result('pg6').set('edges', false);
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').set('titletype', 'none');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'if(isnan(solid.mises),shell.mises,solid.mises)');
model.result('pg6').feature('surf1').set('unit', 'MPa');
model.result('pg6').feature('surf1').set('rangecoloractive', true);
model.result('pg6').feature('surf1').set('rangecolormax', 2);
model.result('pg6').feature('surf1').create('def1', 'Deform');
model.result('pg6').run;
model.result('pg6').feature('surf1').feature('def1').set('expr', {'if(isnan(u2),u,u2)' 'v' 'w'});
model.result('pg6').feature('surf1').feature('def1').setIndex('expr', 'if(isnan(v2),v,v2)', 1);
model.result('pg6').feature('surf1').feature('def1').setIndex('expr', 'if(isnan(w2),w,w2)', 2);
model.result('pg6').run;
model.result('pg6').feature('surf1').create('sel1', 'Selection');
model.result('pg6').feature('surf1').feature('sel1').selection.set([1 2 3 4 5 6 7 8 9 10 11 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208]);
model.result('pg6').create('line1', 'Line');
model.result('pg6').feature('line1').set('expr', '0');
model.result('pg6').feature('line1').set('coloring', 'uniform');
model.result('pg6').feature('line1').set('color', 'black');
model.result('pg6').feature('line1').set('inheritcolor', false);
model.result('pg6').feature('line1').set('inheritrange', false);
model.result('pg6').feature('line1').set('inheritplot', 'surf1');
model.result('pg6').feature('line1').create('def1', 'Deform');
model.result('pg6').run;
model.result('pg6').feature('line1').feature('def1').set('expr', {'if(isnan(u2),u,u2)' 'v' 'w'});
model.result('pg6').feature('line1').feature('def1').setIndex('expr', 'if(isnan(v2),v,v2)', 1);
model.result('pg6').feature('line1').feature('def1').setIndex('expr', 'if(isnan(w2),w,w2)', 2);
model.result('pg6').create('iso1', 'Isosurface');
model.result('pg6').feature('iso1').set('expr', 'acpr.p_t');
model.result('pg6').feature('iso1').set('number', 11);
model.result('pg6').feature('iso1').set('colortable', 'Wave');
model.result('pg6').feature('iso1').set('colorscalemode', 'linearsymmetric');
model.result('pg6').run;
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').label('Geometry');
model.result('pg7').set('titletype', 'none');
model.result('pg7').set('showlegends', false);
model.result('pg7').create('vol1', 'Volume');
model.result('pg7').feature('vol1').set('expr', '1');
model.result('pg7').feature('vol1').create('sel1', 'Selection');
model.result('pg7').feature('vol1').feature('sel1').selection.named('sel3');
model.result('pg7').run;
model.result('pg7').feature('vol1').create('mtrl1', 'MaterialAppearance');
model.result('pg7').run;
model.result('pg7').feature('vol1').feature('mtrl1').set('appearance', 'custom');
model.result('pg7').feature('vol1').feature('mtrl1').set('family', 'rubber');
model.result('pg7').feature('vol1').feature('mtrl1').set('color', 'yellow');
model.result('pg7').run;
model.result('pg7').create('vol2', 'Volume');
model.result('pg7').feature('vol2').set('expr', '1');
model.result('pg7').feature('vol2').create('sel1', 'Selection');
model.result('pg7').feature('vol2').feature('sel1').selection.named('sel4');
model.result('pg7').run;
model.result('pg7').feature('vol2').create('mtrl1', 'MaterialAppearance');
model.result('pg7').run;
model.result('pg7').feature('vol2').feature('mtrl1').set('appearance', 'custom');
model.result('pg7').feature('vol2').feature('mtrl1').set('family', 'water');
model.result('pg7').run;
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', '1');
model.result('pg7').feature('surf1').create('sel1', 'Selection');
model.result('pg7').feature('surf1').feature('sel1').selection.named('sel1');
model.result('pg7').run;
model.result('pg7').feature('surf1').create('mtrl1', 'MaterialAppearance');
model.result('pg7').run;
model.result('pg7').feature('surf1').feature('mtrl1').set('appearance', 'custom');
model.result('pg7').feature('surf1').feature('mtrl1').set('family', 'steelscratched');
model.result('pg7').run;
model.result('pg7').create('surf2', 'Surface');
model.result('pg7').feature('surf2').set('expr', '1');
model.result('pg7').feature('surf2').create('sel1', 'Selection');
model.result('pg7').feature('surf2').feature('sel1').selection.named('uni1');
model.result('pg7').run;
model.result('pg7').feature('surf2').create('mtrl1', 'MaterialAppearance');
model.result('pg7').run;
model.result('pg7').feature('surf2').feature('mtrl1').set('appearance', 'custom');
model.result('pg7').feature('surf2').feature('mtrl1').set('family', 'aluminumanodized');
model.result('pg7').run;
model.result('pg7').feature('surf2').create('tran1', 'Transparency');
model.result('pg7').run;
model.result('pg7').feature('surf2').feature('tran1').set('uniformblending', 0.5);
model.result('pg7').run;
model.result('pg7').create('arws1', 'ArrowSurface');
model.result('pg7').feature('arws1').setIndex('expr', 0, 0);
model.result('pg7').feature('arws1').set('expr', {'0' '0' '-1'});
model.result('pg7').feature('arws1').set('arrowcount', 10);
model.result('pg7').feature('arws1').set('arrowbase', 'head');
model.result('pg7').feature('arws1').create('sel1', 'Selection');
model.result('pg7').feature('arws1').feature('sel1').selection.set([117]);
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').create('arws2', 'ArrowSurface');
model.result('pg7').feature('arws2').setIndex('expr', 0, 0);
model.result('pg7').feature('arws2').set('expr', {'0' '0' '-1'});
model.result('pg7').feature('arws2').set('arrowcount', 12);
model.result('pg7').feature('arws2').set('arrowbase', 'head');
model.result('pg7').feature('arws2').create('sel1', 'Selection');
model.result('pg7').feature('arws2').feature('sel1').selection.set([1 2 3 206 207 208]);
model.result('pg7').run;

model.view('view1').set('showgrid', false);
model.view('view1').set('showaxisorientation', false);
model.view('view1').set('showgrid', true);
model.view('view1').set('showaxisorientation', true);

model.result('pg4').run;
model.result('pg4').set('view', 'new');
model.result('pg4').run;
model.result('pg5').run;
model.result('pg5').set('view', 'view2');
model.result('pg5').run;
model.result('pg6').run;

model.title('Fuel Tank Vibration');

model.description(['This model analyzes the frequency response of a fuel tank partially filled with fluid. The tank is submitted to a vertical acceleration.' newline  newline 'Two modeling methods are considered to represent the fluid: a traditional method of smearing the mass of the fluid through the wetted surface of the fuel tank, and a multiphysics approach where the acoustic pressure within the fluid is specifically modeled.' newline  newline 'The two methods show significant differences, highlighting how important it is to accurately capture the vibroacoustic behavior when predicting stress or fatigue life on fluid-filled cavities.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('fuel_tank_vibration.mph');

model.modelNode.label('Components');

out = model;
