function out = model
%
% thermoelectric_cooler.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Applications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');
model.physics.create('ec', 'ConductiveMedia', 'geom1');
model.physics('ec').model('comp1');

model.multiphysics.create('tee1', 'ThermoelectricEffect', 'geom1', 3);
model.multiphysics('tee1').set('Heat_physics', 'ht');
model.multiphysics('tee1').set('EMCurrentDensity_physics', 'ec');
model.multiphysics('tee1').selection.all;
model.multiphysics.create('emh1', 'ElectromagneticHeating', 'geom1', 3);
model.multiphysics('emh1').set('EMHeat_physics', 'ec');
model.multiphysics('emh1').set('Heat_physics', 'ht');
model.multiphysics('emh1').selection.all;

model.param.set('length', '8[mm]');
model.param.descr('length', 'Total length');
model.param.set('width', '10[mm]');
model.param.descr('width', 'Total width');
model.param.set('height', '2.5[mm]');
model.param.descr('height', 'Total height');
model.param.set('d_conductor', '100[um]');
model.param.descr('d_conductor', 'Conductor thickness');
model.param.set('d_ceramics', '0.3[mm]');
model.param.descr('d_ceramics', 'Ceramics thickness');
model.param.set('leg_length', '1[mm]');
model.param.descr('leg_length', 'Leg cross section in length');
model.param.set('leg_width', '1.2[mm]');
model.param.descr('leg_width', 'Leg cross section in width');
model.param.set('leg_height', 'height-2*(d_conductor+d_ceramics)');
model.param.descr('leg_height', 'Leg height');
model.param.set('pitch', '0.5[mm]');
model.param.descr('pitch', 'Pitch');
model.param.set('n_length', 'floor((length-2*pitch-leg_length)/(leg_length+pitch))+1-mod(floor((length-2*pitch-leg_length)/(leg_length+pitch))+1,2)');
model.param.descr('n_length', 'Number of legs in length');
model.param.set('n_width', 'floor((width-2*pitch-leg_width)/(leg_width+pitch))+1');
model.param.descr('n_width', 'Number of legs in width');
model.param.set('network_length', '(leg_length+pitch)*n_length-pitch');
model.param.descr('network_length', 'Length of legs network');
model.param.set('network_width', '(leg_width+pitch)*n_width-pitch');
model.param.descr('network_width', 'Width of legs network');
model.param.set('N', 'n_length*n_width/2');
model.param.descr('N', 'Number of thermocouples');
model.param.set('Tref', '323.15[K]');
model.param.descr('Tref', 'Hot side temperature');
model.param.set('dT0', '50[K]');
model.param.descr('dT0', 'Prescribed temperature difference');
model.param.set('I0', '1');
model.param.descr('I0', 'Prescribed relative electrical current');

model.material.create('mat1', 'Common', '');
model.material('mat1').propertyGroup('def').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('int3', 'Interpolation');
model.material('mat1').label('Bismuth Telluride - Bi2Te3');
model.material('mat1').propertyGroup('def').func('int1').label('Seebeck coefficient');
model.material('mat1').propertyGroup('def').func('int1').set('funcname', 'S');
model.material('mat1').propertyGroup('def').func('int1').set('table', {'200' '168e-6'; '250' '192e-6'; '300' '210e-6'; '350' '225e-6'; '400' '237e-6'});
model.material('mat1').propertyGroup('def').func('int1').set('interp', 'cubicspline');
model.material('mat1').propertyGroup('def').func('int1').set('fununit', {'V/K'});
model.material('mat1').propertyGroup('def').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('int2').label('Thermal conductivity');
model.material('mat1').propertyGroup('def').func('int2').set('funcname', 'k');
model.material('mat1').propertyGroup('def').func('int2').set('table', {'200' '24e-1'; '250' '19e-1'; '300' '16e-1'; '350' '16e-1'; '400' '17.5e-1'});
model.material('mat1').propertyGroup('def').func('int2').set('interp', 'cubicspline');
model.material('mat1').propertyGroup('def').func('int2').set('fununit', {'W/m/K'});
model.material('mat1').propertyGroup('def').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('int3').label('Electrical conductivity');
model.material('mat1').propertyGroup('def').func('int3').set('funcname', 'sigma');
model.material('mat1').propertyGroup('def').func('int3').set('table', {'200' '1.4286e5'; '250' '1.1111e5'; '300' '0.86957e5'; '350' '0.71429e5'; '400' '0.58824e5'});
model.material('mat1').propertyGroup('def').func('int3').set('interp', 'cubicspline');
model.material('mat1').propertyGroup('def').func('int3').set('fununit', {'S/m'});
model.material('mat1').propertyGroup('def').func('int3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '154[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('density', '7700[kg/m^3]');
model.material('mat1').propertyGroup('def').set('seebeckcoefficient', {'S(T)' '0' '0' '0' 'S(T)' '0' '0' '0' 'S(T)'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'sigma(T)' '0' '0' '0' 'sigma(T)' '0' '0' '0' 'sigma(T)'});
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material.create('mat2', 'Common', '');
model.material('mat2').label('Lead Telluride - PbTe');
model.material('mat2').propertyGroup('def').set('density', '8160[kg/m^3]');
model.material('mat2').propertyGroup('def').set('heatcapacity', '151[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('seebeckcoefficient', {'187e-6[V/K]' '0' '0' '0' '187e-6[V/K]' '0' '0' '0' '187e-6[V/K]'});
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'1.46[W/(m*K)]' '0' '0' '0' '1.46[W/(m*K)]' '0' '0' '0' '1.46[W/(m*K)]'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'6.0976e4[S/m]' '0' '0' '0' '6.0976e4[S/m]' '0' '0' '0' '6.0976e4[S/m]'});
model.material.create('mat3', 'Common', '');
model.material('mat3').propertyGroup('def').func.create('int1', 'Interpolation');
model.material('mat3').propertyGroup('def').func.create('int2', 'Interpolation');
model.material('mat3').propertyGroup('def').func.create('int3', 'Interpolation');
model.material('mat3').label('Bismuth Telluride - Bi2Te3.1');
model.material('mat3').propertyGroup('def').func('int1').label('Seebeck coefficient');
model.material('mat3').propertyGroup('def').func('int1').set('funcname', 'S');
model.material('mat3').propertyGroup('def').func('int1').set('table', {'200' '168e-6'; '250' '192e-6'; '300' '210e-6'; '350' '225e-6'; '400' '237e-6'});
model.material('mat3').propertyGroup('def').func('int1').set('interp', 'cubicspline');
model.material('mat3').propertyGroup('def').func('int1').set('fununit', {'V/K'});
model.material('mat3').propertyGroup('def').func('int1').set('argunit', {'K'});
model.material('mat3').propertyGroup('def').func('int2').label('Thermal conductivity');
model.material('mat3').propertyGroup('def').func('int2').set('funcname', 'k');
model.material('mat3').propertyGroup('def').func('int2').set('table', {'200' '24e-1'; '250' '19e-1'; '300' '16e-1'; '350' '16e-1'; '400' '17.5e-1'});
model.material('mat3').propertyGroup('def').func('int2').set('interp', 'cubicspline');
model.material('mat3').propertyGroup('def').func('int2').set('fununit', {'W/m/K'});
model.material('mat3').propertyGroup('def').func('int2').set('argunit', {'K'});
model.material('mat3').propertyGroup('def').func('int3').label('Electrical conductivity');
model.material('mat3').propertyGroup('def').func('int3').set('funcname', 'sigma');
model.material('mat3').propertyGroup('def').func('int3').set('table', {'200' '1.4286e5'; '250' '1.1111e5'; '300' '0.86957e5'; '350' '0.71429e5'; '400' '0.58824e5'});
model.material('mat3').propertyGroup('def').func('int3').set('interp', 'cubicspline');
model.material('mat3').propertyGroup('def').func('int3').set('fununit', {'S/m'});
model.material('mat3').propertyGroup('def').func('int3').set('argunit', {'K'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '154[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('density', '7700[kg/m^3]');
model.material('mat3').propertyGroup('def').set('seebeckcoefficient', {'S(T)' '0' '0' '0' 'S(T)' '0' '0' '0' 'S(T)'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'sigma(T)' '0' '0' '0' 'sigma(T)' '0' '0' '0' 'sigma(T)'});
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').addInput('temperature');
model.material.create('mat4', 'Common', '');
model.material('mat4').label('Lead Telluride - PbTe 1');
model.material('mat4').propertyGroup('def').set('density', '8160[kg/m^3]');
model.material('mat4').propertyGroup('def').set('heatcapacity', '151[J/(kg*K)]');
model.material('mat4').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('seebeckcoefficient', {'187e-6[V/K]' '0' '0' '0' '187e-6[V/K]' '0' '0' '0' '187e-6[V/K]'});
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'1.46[W/(m*K)]' '0' '0' '0' '1.46[W/(m*K)]' '0' '0' '0' '1.46[W/(m*K)]'});
model.material('mat4').propertyGroup('def').set('electricconductivity', {'6.0976e4[S/m]' '0' '0' '0' '6.0976e4[S/m]' '0' '0' '0' '6.0976e4[S/m]'});
model.material('mat1').label('Bismuth Telluride - Bi2Te3, P-Type');
model.material('mat1').propertyGroup('def').set('seebeckcoefficient', {'-S(Tref)'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'sigma(Tref)'});
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(Tref)'});
model.material('mat2').label('Lead Telluride - PbTe, P-Type');
model.material('mat2').propertyGroup('def').set('seebeckcoefficient', {'-187e-6[V/K]'});
model.material('mat3').label('Bismuth Telluride - Bi2Te3, N-Type');
model.material('mat3').propertyGroup('def').set('seebeckcoefficient', {'S(Tref)'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'sigma(Tref)'});
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'k(Tref)'});
model.material('mat4').label('Lead Telluride - PbTe, N-Type');

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'leg_width' 'leg_length' '1'});
model.geom('geom1').feature('blk1').setIndex('size', 'leg_height', 2);
model.geom('geom1').feature('blk1').set('pos', {'(width-2*pitch-((leg_width+pitch)*n_width-pitch))/2+pitch' '0' '0'});
model.geom('geom1').feature('blk1').setIndex('pos', '(length-2*pitch-((leg_length+pitch)*n_length-pitch))/2+pitch', 1);
model.geom('geom1').feature('blk1').setIndex('pos', 'd_ceramics+d_conductor', 2);
model.geom('geom1').run('blk1');
model.geom('geom1').create('arr1', 'Array');
model.geom('geom1').feature('arr1').selection('input').set({'blk1'});
model.geom('geom1').feature('arr1').set('fullsize', {'ceil(n_width/2)' '1' '1'});
model.geom('geom1').feature('arr1').setIndex('fullsize', 'ceil(n_length/2)', 1);
model.geom('geom1').feature('arr1').set('displ', {'2*(leg_width+pitch)' '0' '0'});
model.geom('geom1').feature('arr1').setIndex('displ', '2*(leg_length+pitch)', 1);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('P-Type Legs');
model.geom('geom1').feature('arr1').set('contributeto', 'csel1');
model.geom('geom1').run('arr1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', {'leg_width' 'leg_length' '1'});
model.geom('geom1').feature('blk2').setIndex('size', 'leg_height', 2);
model.geom('geom1').feature('blk2').set('pos', {'(width-2*pitch-((leg_width+pitch)*n_width-pitch))/2+pitch+leg_width+pitch' '0' '0'});
model.geom('geom1').feature('blk2').setIndex('pos', '(length-2*pitch-((leg_length+pitch)*n_length-pitch))/2+pitch+leg_length+pitch', 1);
model.geom('geom1').feature('blk2').setIndex('pos', 'd_ceramics+d_conductor', 2);
model.geom('geom1').run('blk2');
model.geom('geom1').create('arr2', 'Array');
model.geom('geom1').feature('arr2').selection('input').set({'blk2'});
model.geom('geom1').feature('arr2').set('fullsize', {'floor(n_width/2)' '1' '1'});
model.geom('geom1').feature('arr2').setIndex('fullsize', 'floor(n_length/2)', 1);
model.geom('geom1').feature('arr2').set('displ', {'2*(leg_width+pitch)' '0' '0'});
model.geom('geom1').feature('arr2').setIndex('displ', '2*(leg_length+pitch)', 1);
model.geom('geom1').feature('arr2').set('contributeto', 'csel1');
model.geom('geom1').run('arr2');
model.geom('geom1').create('blk3', 'Block');
model.geom('geom1').feature('blk3').set('size', {'leg_width' 'leg_length' '1'});
model.geom('geom1').feature('blk3').setIndex('size', 'leg_height', 2);
model.geom('geom1').feature('blk3').set('pos', {'(width-2*pitch-((leg_width+pitch)*n_width-pitch))/2+pitch+leg_width+pitch' '0' '0'});
model.geom('geom1').feature('blk3').setIndex('pos', '(length-2*pitch-((leg_length+pitch)*n_length-pitch))/2+pitch', 1);
model.geom('geom1').feature('blk3').setIndex('pos', 'd_ceramics+d_conductor', 2);
model.geom('geom1').run('blk3');
model.geom('geom1').create('arr3', 'Array');
model.geom('geom1').feature('arr3').selection('input').set({'blk3'});
model.geom('geom1').feature('arr3').set('fullsize', {'floor(n_width/2)' '1' '1'});
model.geom('geom1').feature('arr3').setIndex('fullsize', 'ceil(n_length/2)', 1);
model.geom('geom1').feature('arr3').set('displ', {'2*(leg_width+pitch)' '0' '0'});
model.geom('geom1').feature('arr3').setIndex('displ', '2*(leg_length+pitch)', 1);
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('N-Type Legs');
model.geom('geom1').feature('arr3').set('contributeto', 'csel2');
model.geom('geom1').run('arr3');
model.geom('geom1').create('blk4', 'Block');
model.geom('geom1').feature('blk4').set('size', {'leg_width' 'leg_length' '1'});
model.geom('geom1').feature('blk4').setIndex('size', 'leg_height', 2);
model.geom('geom1').feature('blk4').set('pos', {'(width-2*pitch-((leg_width+pitch)*n_width-pitch))/2+pitch' '0' '0'});
model.geom('geom1').feature('blk4').setIndex('pos', '(length-2*pitch-((leg_length+pitch)*n_length-pitch))/2+pitch+leg_length+pitch', 1);
model.geom('geom1').feature('blk4').setIndex('pos', 'd_ceramics+d_conductor', 2);
model.geom('geom1').run('blk4');
model.geom('geom1').create('arr4', 'Array');
model.geom('geom1').feature('arr4').selection('input').set({'blk4'});
model.geom('geom1').feature('arr4').set('fullsize', {'ceil(n_width/2)' '1' '1'});
model.geom('geom1').feature('arr4').setIndex('fullsize', 'floor(n_length/2)', 1);
model.geom('geom1').feature('arr4').set('displ', {'2*(leg_width+pitch)' '0' '0'});
model.geom('geom1').feature('arr4').setIndex('displ', '2*(leg_length+pitch)', 1);
model.geom('geom1').feature('arr4').set('contributeto', 'csel2');
model.geom('geom1').run('arr4');
model.geom('geom1').create('blk5', 'Block');
model.geom('geom1').feature('blk5').set('size', {'leg_width' 'leg_length' '1'});
model.geom('geom1').feature('blk5').setIndex('size', 'd_conductor', 2);
model.geom('geom1').feature('blk5').set('pos', {'(width-2*pitch-network_width)/2+pitch' '0' '0'});
model.geom('geom1').feature('blk5').setIndex('pos', '(length-2*pitch-network_length)/2+pitch', 1);
model.geom('geom1').feature('blk5').setIndex('pos', 'd_ceramics', 2);
model.geom('geom1').selection.create('csel3', 'CumulativeSelection');
model.geom('geom1').selection('csel3').label('Conductors');
model.geom('geom1').feature('blk5').set('contributeto', 'csel3');
model.geom('geom1').run('blk5');
model.geom('geom1').create('copy1', 'Copy');
model.geom('geom1').feature('copy1').selection('input').set({'blk5'});
model.geom('geom1').feature('copy1').set('displx', 'mod(n_length,2)*(network_width-leg_width)');
model.geom('geom1').feature('copy1').set('disply', 'network_length-leg_length');
model.geom('geom1').feature('copy1').set('displz', 'mod(n_length*n_width,2)*(d_conductor+leg_height)');
model.geom('geom1').selection.create('csel4', 'CumulativeSelection');
model.geom('geom1').selection('csel4').label('Grounded Conductor');
model.geom('geom1').feature('copy1').set('contributeto', 'csel4');
model.geom('geom1').run('copy1');
model.geom('geom1').create('blk6', 'Block');
model.geom('geom1').feature('blk6').set('size', {'2*leg_width+pitch' '1' '1'});
model.geom('geom1').feature('blk6').setIndex('size', 'leg_length', 1);
model.geom('geom1').feature('blk6').setIndex('size', 'd_conductor', 2);
model.geom('geom1').feature('blk6').set('pos', {'(width-2*pitch-network_width)/2+pitch' '0' '0'});
model.geom('geom1').feature('blk6').setIndex('pos', '(length-2*pitch-network_length)/2+pitch', 1);
model.geom('geom1').feature('blk6').setIndex('pos', 'd_ceramics+d_conductor+leg_height', 2);
model.geom('geom1').run('blk6');
model.geom('geom1').create('arr5', 'Array');
model.geom('geom1').feature('arr5').selection('input').set({'blk6'});
model.geom('geom1').feature('arr5').set('fullsize', {'floor(n_width/2)' '1' '1'});
model.geom('geom1').feature('arr5').setIndex('fullsize', 'n_length', 1);
model.geom('geom1').feature('arr5').set('displ', {'2*(leg_width+pitch)' '0' '0'});
model.geom('geom1').feature('arr5').setIndex('displ', 'leg_length+pitch', 1);
model.geom('geom1').feature('arr5').set('contributeto', 'csel3');
model.geom('geom1').run('arr5');
model.geom('geom1').create('blk7', 'Block');
model.geom('geom1').feature('blk7').set('size', {'2*leg_width+pitch' '1' '1'});
model.geom('geom1').feature('blk7').setIndex('size', 'leg_length', 1);
model.geom('geom1').feature('blk7').setIndex('size', 'd_conductor', 2);
model.geom('geom1').feature('blk7').set('pos', {'(width-2*pitch-network_width)/2+pitch+leg_width+pitch' '0' '0'});
model.geom('geom1').feature('blk7').setIndex('pos', '(length-2*pitch-network_length)/2+pitch', 1);
model.geom('geom1').feature('blk7').setIndex('pos', 'd_ceramics', 2);
model.geom('geom1').run('blk7');
model.geom('geom1').create('arr6', 'Array');
model.geom('geom1').feature('arr6').selection('input').set({'blk7'});
model.geom('geom1').feature('arr6').set('fullsize', {'floor((n_width-1)/2)' '1' '1'});
model.geom('geom1').feature('arr6').setIndex('fullsize', 'n_length', 1);
model.geom('geom1').feature('arr6').set('displ', {'2*(leg_width+pitch)' '0' '0'});
model.geom('geom1').feature('arr6').setIndex('displ', 'leg_length+pitch', 1);
model.geom('geom1').feature('arr6').set('contributeto', 'csel3');
model.geom('geom1').run('arr6');
model.geom('geom1').create('blk8', 'Block');
model.geom('geom1').feature('blk8').set('size', {'leg_width' '2*leg_length+pitch' '1'});
model.geom('geom1').feature('blk8').setIndex('size', 'd_conductor', 2);
model.geom('geom1').feature('blk8').set('pos', {'(width-2*pitch-network_width)/2+pitch' '0' '0'});
model.geom('geom1').feature('blk8').setIndex('pos', '(length-2*pitch-network_length)/2+pitch+leg_length+pitch', 1);
model.geom('geom1').feature('blk8').setIndex('pos', 'd_ceramics', 2);
model.geom('geom1').run('blk8');
model.geom('geom1').create('arr7', 'Array');
model.geom('geom1').feature('arr7').selection('input').set({'blk8'});
model.geom('geom1').feature('arr7').set('type', 'linear');
model.geom('geom1').feature('arr7').set('linearsize', 'floor((n_length-1)/2)');
model.geom('geom1').feature('arr7').set('displ', {'0' '2*(leg_length+pitch)' '0'});
model.geom('geom1').feature('arr7').set('contributeto', 'csel3');
model.geom('geom1').run('arr7');
model.geom('geom1').create('blk9', 'Block');
model.geom('geom1').feature('blk9').set('size', {'leg_width' '2*leg_length+pitch' '1'});
model.geom('geom1').feature('blk9').setIndex('size', 'd_conductor', 2);
model.geom('geom1').feature('blk9').set('pos', {'width-(width-2*pitch-network_width)/2-pitch-leg_width' '0' '0'});
model.geom('geom1').feature('blk9').setIndex('pos', '(length-2*pitch-network_length)/2+pitch', 1);
model.geom('geom1').feature('blk9').setIndex('pos', 'd_ceramics+mod(n_width,2)*(d_conductor+leg_height)', 2);
model.geom('geom1').run('blk9');
model.geom('geom1').create('arr8', 'Array');
model.geom('geom1').feature('arr8').selection('input').set({'blk9'});
model.geom('geom1').feature('arr8').set('type', 'linear');
model.geom('geom1').feature('arr8').set('linearsize', 'floor((n_length)/2)');
model.geom('geom1').feature('arr8').set('displ', {'0' '2*(leg_length+pitch)' '0'});
model.geom('geom1').feature('arr8').set('contributeto', 'csel3');
model.geom('geom1').run('arr8');
model.geom('geom1').create('blk10', 'Block');
model.geom('geom1').feature('blk10').set('size', {'width' 'length' '1'});
model.geom('geom1').feature('blk10').setIndex('size', 'd_ceramics', 2);
model.geom('geom1').selection.create('csel5', 'CumulativeSelection');
model.geom('geom1').selection('csel5').label('Ceramics, Bottom');
model.geom('geom1').feature('blk10').set('contributeto', 'csel5');
model.geom('geom1').run('blk10');
model.geom('geom1').create('blk11', 'Block');
model.geom('geom1').feature('blk11').set('size', {'width' 'length' '1'});
model.geom('geom1').feature('blk11').setIndex('size', 'd_ceramics', 2);
model.geom('geom1').feature('blk11').set('pos', {'0' '0' 'height-d_ceramics'});
model.geom('geom1').selection.create('csel6', 'CumulativeSelection');
model.geom('geom1').selection('csel6').label('Ceramics, Top');
model.geom('geom1').feature('blk11').set('contributeto', 'csel6');
model.geom('geom1').run('blk11');
model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').label('Hot Side');
model.geom('geom1').feature('sel1').selection('selection').init(2);
model.geom('geom1').feature('sel1').selection('selection').set('blk10', 1);
model.geom('geom1').run('sel1');
model.geom('geom1').create('sel2', 'ExplicitSelection');
model.geom('geom1').feature('sel2').label('Cold Side');
model.geom('geom1').feature('sel2').selection('selection').init(2);
model.geom('geom1').feature('sel2').selection('selection').set('blk11', 4);
model.geom('geom1').run('sel2');
model.geom('geom1').create('sel3', 'ExplicitSelection');
model.geom('geom1').feature('sel3').label('Terminal');
model.geom('geom1').feature('sel3').selection('selection').init(2);
model.geom('geom1').feature('sel3').selection('selection').set('blk5', 1);
model.geom('geom1').run('sel3');
model.geom('geom1').create('sel4', 'ExplicitSelection');
model.geom('geom1').feature('sel4').label('Ceramics Faces Toward Interior');
model.geom('geom1').feature('sel4').selection('selection').init(2);
model.geom('geom1').feature('sel4').selection('selection').set('blk10', 4);
model.geom('geom1').feature('sel4').selection('selection').set('blk11', 1);
model.geom('geom1').run('fin');

model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Ceramics');
model.selection('uni1').set('input', {'geom1_csel5_dom' 'geom1_csel6_dom'});
model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');
model.selection('box1').label('Conductors, Bottom');
model.selection('box1').set('zmin', 'd_ceramics/2');
model.selection('box1').set('zmax', 'd_ceramics+d_conductor+leg_height/2');
model.selection('box1').set('condition', 'inside');
model.selection.create('box2', 'Box');
model.selection('box2').model('comp1');
model.selection('box2').label('Conductors, Top');
model.selection('box2').set('zmin', 'd_ceramics+d_conductor+leg_height/2');
model.selection('box2').set('zmax', 'd_ceramics+5*d_conductor/2+leg_height');
model.selection('box2').set('condition', 'inside');
model.selection.create('box3', 'Box');
model.selection('box3').model('comp1');
model.selection('box3').label('Mesh, Mapped Surfaces');
model.selection('box3').set('entitydim', 2);
model.selection('box3').set('zmin', 'd_ceramics+d_conductor/2');
model.selection('box3').set('zmax', 'd_ceramics+d_conductor+leg_height/2');
model.selection('box3').set('condition', 'inside');
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Thermocouples');
model.selection('uni2').set('input', {'geom1_csel1_dom' 'geom1_csel2_dom'});
model.selection.create('uni3', 'Union');
model.selection('uni3').model('comp1');
model.selection('uni3').label('Electric Domains');
model.selection('uni3').set('input', {'uni2' 'geom1_csel3_dom'});
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Mesh, Ceramics Faces Toward Interior');
model.selection('dif1').set('entitydim', 2);
model.selection('dif1').set('add', {'geom1_sel4'});
model.selection('dif1').set('subtract', {'geom1_csel3_bnd'});
model.selection.create('int1', 'Intersection');
model.selection('int1').model('comp1');
model.selection('int1').label('Ground');
model.selection('int1').set('entitydim', 2);
model.selection('int1').set('input', {'geom1_csel4_bnd' 'geom1_sel4'});

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').label('Average: Hot Side');
model.cpl('aveop1').selection.geom('geom1', 2);
model.cpl('aveop1').selection.named('geom1_sel1');
model.cpl.create('aveop2', 'Average', 'geom1');
model.cpl('aveop2').set('axisym', true);
model.cpl('aveop2').label('Average: Cold Side');
model.cpl('aveop2').selection.geom('geom1', 2);
model.cpl('aveop2').selection.named('geom1_sel2');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('dT', 'aveop1(T)-aveop2(T)');

model.material.create('matlnk1', 'Link', 'comp1');
model.material('matlnk1').label('P-Type Legs');
model.material('matlnk1').selection.named('geom1_csel1_dom');
model.material.create('matlnk2', 'Link', 'comp1');
model.material('matlnk2').label('N-Type Legs');
model.material('matlnk2').selection.named('geom1_csel2_dom');
model.material('matlnk2').set('link', 'mat3');
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat5').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat5').label('Tungsten');
model.material('mat5').set('family', 'custom');
model.material('mat5').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat5').set('customdiffuse', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat5').set('customambient', [0.7058823529411765 0.7058823529411765 0.7058823529411765]);
model.material('mat5').set('noise', true);
model.material('mat5').set('fresnel', 0.9);
model.material('mat5').set('roughness', 0.15);
model.material('mat5').set('metallic', 0);
model.material('mat5').set('pearl', 0);
model.material('mat5').set('diffusewrap', 0);
model.material('mat5').set('clearcoat', 0);
model.material('mat5').set('reflectance', 0);
model.material('mat5').propertyGroup('def').set('thermalexpansioncoefficient', {'4.5e-6[1/K]' '0' '0' '0' '4.5e-6[1/K]' '0' '0' '0' '4.5e-6[1/K]'});
model.material('mat5').propertyGroup('def').set('density', '17800[kg/m^3]');
model.material('mat5').propertyGroup('def').set('heatcapacity', '132[J/(kg*K)]');
model.material('mat5').propertyGroup('def').set('thermalconductivity', {'175[W/(m*K)]' '0' '0' '0' '175[W/(m*K)]' '0' '0' '0' '175[W/(m*K)]'});
model.material('mat5').propertyGroup('Enu').set('E', '360[GPa]');
model.material('mat5').propertyGroup('Enu').set('nu', '0.28');
model.material('mat5').propertyGroup('Murnaghan').set('l', '-4.7e11[Pa]');
model.material('mat5').propertyGroup('Murnaghan').set('m', '-7.9e11[Pa]');
model.material('mat5').propertyGroup('Murnaghan').set('n', '-1.1e12[Pa]');
model.material.create('mat6', 'Common', 'comp1');
model.material('mat6').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat6').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat6').label('Copper');
model.material('mat6').set('family', 'copper');
model.material('mat6').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat6').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat6').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat6').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat6').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat6').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat6').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat6').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat6').propertyGroup('Enu').set('nu', '0.35');
model.material('mat6').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat6').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat6').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat6').propertyGroup('linzRes').addInput('temperature');
model.material('mat5').selection.named('uni1');
model.material('mat6').selection.named('geom1_csel3_dom');

model.physics('ht').prop('ShapeProperty').set('order_temperature', '2s');
model.physics('ht').feature('init1').set('Tinit', 'Tref');
model.physics('ht').create('temp1', 'TemperatureBoundary', 2);
model.physics('ht').feature('temp1').selection.named('geom1_sel1');
model.physics('ht').feature('temp1').set('T0', 'Tref');
model.physics('ht').create('bhs1', 'BoundaryHeatSource', 2);
model.physics('ht').feature('bhs1').label('Boundary Heat Source (Study 2)');
model.physics('ht').feature('bhs1').selection.named('geom1_sel2');
model.physics('ht').feature('bhs1').set('heatSourceType', 'HeatRate');
model.physics('ht').feature('bhs1').set('Pb', 'Qmax');
model.physics('ht').create('bhs2', 'BoundaryHeatSource', 2);
model.physics('ht').feature('bhs2').label('Boundary Heat Source (Study 4)');
model.physics('ht').feature('bhs2').selection.named('geom1_sel2');
model.physics('ht').feature('bhs2').set('heatSourceType', 'HeatRate');
model.physics('ht').feature('bhs2').set('Pb', 'Qvar');
model.physics('ht').create('ge1', 'GlobalEquations', -1);
model.physics('ht').feature('ge1').label('Global Equations (Study 2)');
model.physics('ht').feature('ge1').setIndex('name', 'Qmax', 0, 0);
model.physics('ht').feature('ge1').setIndex('equation', 'dT', 0, 0);
model.physics('ht').feature('ge1').set('DependentVariableQuantity', 'power');
model.physics('ht').feature('ge1').set('SourceTermQuantity', 'temperature');
model.physics('ht').create('ge2', 'GlobalEquations', -1);
model.physics('ht').feature('ge2').label('Global Equations (Study 4)');
model.physics('ht').feature('ge2').setIndex('name', 'Qvar', 0, 0);
model.physics('ht').feature('ge2').setIndex('equation', 'dT-dT0', 0, 0);
model.physics('ht').feature('ge2').set('DependentVariableQuantity', 'power');
model.physics('ht').feature('ge2').set('SourceTermQuantity', 'temperature');
model.physics('ec').selection.named('uni3');
model.physics('ec').create('gnd1', 'Ground', 2);
model.physics('ec').feature('gnd1').selection.named('int1');
model.physics('ec').create('term1', 'Terminal', 2);
model.physics('ec').feature('term1').label('Terminal (Study 1 and 2)');
model.physics('ec').feature('term1').selection.named('geom1_sel3');
model.physics('ec').feature('term1').set('I0', 'Imax');
model.physics('ec').create('term2', 'Terminal', 2);
model.physics('ec').feature('term2').label('Terminal (Study 3 and 4)');
model.physics('ec').feature('term2').selection.named('geom1_sel3');
model.physics('ec').feature('term2').set('I0', 'I0*Imax[A]');
model.physics.create('ge', 'GlobalEquations', 'geom1');
model.physics('ge').model('comp1');
model.physics('ge').prop('EquationForm').set('form', 'Automatic');
model.physics.create('opt', 'GeneralOptimization', 'geom1');
model.physics('opt').model('comp1');
model.physics('ge').feature('ge1').setIndex('name', 'dTmax', 0, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'dT-dTmax', 0, 0);
model.physics('ge').feature('ge1').set('DependentVariableQuantity', 'temperature');
model.physics('ge').feature('ge1').set('SourceTermQuantity', 'temperature');
model.physics('opt').create('gobj1', 'GlobalObjective', -1);
model.physics('opt').feature('gobj1').set('objectiveExpression', 'dTmax^2/(100[K])^2');
model.physics('opt').create('gcvar1', 'GlobalControlVariables', -1);
model.physics('opt').feature('gcvar1').setIndex('variableList', 'Imax', 0, 0);
model.physics('opt').feature('gcvar1').setIndex('initList', 1, 0, 0);
model.physics('opt').feature('gcvar1').setIndex('lowerBoundList', 0.1, 0, 0);
model.physics('opt').feature('gcvar1').setIndex('upperBoundList', 10, 0, 0);

model.multiphysics('tee1').selection.named('uni2');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.named('box3');
model.mesh('mesh1').feature('size').set('hauto', 4);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'min(leg_width,leg_length)/2');
model.mesh('mesh1').feature('map1').create('size1', 'Size');
model.mesh('mesh1').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmax', 'min(leg_width,leg_length)/4');
model.mesh('mesh1').feature('map1').feature('size1').set('hmin', 'min(leg_width,leg_length)/6');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.named('box1');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.all;
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 2);
model.mesh('mesh1').create('swe2', 'Sweep');
model.mesh('mesh1').feature('swe2').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe2').selection.named('uni2');
model.mesh('mesh1').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis1').selection.all;
model.mesh('mesh1').feature('swe2').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('swe2').feature('dis1').set('elemcount', 9);
model.mesh('mesh1').feature('swe2').feature('dis1').set('elemratio', 5);
model.mesh('mesh1').feature('swe2').feature('dis1').set('symmetric', true);
model.mesh('mesh1').create('swe3', 'Sweep');
model.mesh('mesh1').feature('swe3').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe3').selection.named('box2');
model.mesh('mesh1').feature('swe3').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe3').feature('dis1').selection.all;
model.mesh('mesh1').feature('swe3').feature('dis1').set('numelem', 2);
model.mesh('mesh1').create('fq1', 'FreeQuad');
model.mesh('mesh1').feature('fq1').selection.named('dif1');
model.mesh('mesh1').create('swe4', 'Sweep');
model.mesh('mesh1').feature('swe4').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe4').selection.named('uni1');
model.mesh('mesh1').feature('swe4').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe4').feature('dis1').selection.all;
model.mesh('mesh1').feature('swe4').feature('dis1').set('numelem', 2);
model.mesh('mesh1').run;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/physics/ec', true);
model.study('std1').feature('stat').setSolveFor('/physics/ge', true);
model.study('std1').feature('stat').setSolveFor('/physics/opt', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/tee1', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/emh1', true);
model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/ht', true);
model.study('std2').feature('stat').setSolveFor('/physics/ec', true);
model.study('std2').feature('stat').setSolveFor('/physics/ge', false);
model.study('std2').feature('stat').setSolveFor('/physics/opt', false);
model.study('std2').feature('stat').setSolveFor('/multiphysics/tee1', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/emh1', true);
model.study.create('std3');
model.study('std3').create('stat', 'Stationary');
model.study('std3').feature('stat').setSolveFor('/physics/ht', true);
model.study('std3').feature('stat').setSolveFor('/physics/ec', true);
model.study('std3').feature('stat').setSolveFor('/physics/ge', false);
model.study('std3').feature('stat').setSolveFor('/physics/opt', false);
model.study('std3').feature('stat').setSolveFor('/multiphysics/tee1', true);
model.study('std3').feature('stat').setSolveFor('/multiphysics/emh1', true);
model.study.create('std4');
model.study('std4').create('stat', 'Stationary');
model.study('std4').feature('stat').setSolveFor('/physics/ht', true);
model.study('std4').feature('stat').setSolveFor('/physics/ec', true);
model.study('std4').feature('stat').setSolveFor('/physics/ge', false);
model.study('std4').feature('stat').setSolveFor('/physics/opt', false);
model.study('std4').feature('stat').setSolveFor('/multiphysics/tee1', true);
model.study('std4').feature('stat').setSolveFor('/multiphysics/emh1', true);
model.study('std1').label('Study 1: Optimal Performance');
model.study('std1').setGenPlots(false);
model.study('std1').create('opt', 'Optimization');
model.study('std1').feature('opt').set('optsolver', 'snopt');
model.study('std1').feature('opt').set('opttolinner', '1.0E-3');
model.study('std1').feature('opt').set('nsolvemax', 20);
model.study('std1').feature('opt').set('objectivetype', 'maximization');
model.study('std1').feature('opt').set('useobjtable', false);
model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledphysics', {'ht/bhs1' 'ht/bhs2' 'ht/ge1' 'ht/ge2' 'ec/term2'});

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('o1', 'Optimization');
model.sol('sol1').feature('o1').set('control', 'opt');
model.sol('sol1').feature('o1').create('s1', 'StationaryAttrib');
model.sol('sol1').feature('o1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('o1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('o1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V' 'comp1_ec_term1_V0_ode' 'comp1_gcvar11'});
model.sol('sol1').feature('o1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('o1').feature('s1').feature('i1').set('linsolver', 'cg');
model.sol('sol1').feature('o1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').set('coarseningmethod', 'classic');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss1').label('Electric Currents');
model.sol('sol1').feature('o1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_ODE3' 'comp1_gcvar11'});
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss2').label('Global ODEs and DAEs');
model.sol('sol1').feature('o1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_T' 'comp1_gcvar11'});
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss3').set('subdamp', 0.8);
model.sol('sol1').feature('o1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('o1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('o1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('o1').feature('s1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'd1');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss3').label('Temperature');
model.sol('sol1').feature('o1').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('o1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('o1').feature('s1').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('o1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('o1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('o1').feature('s1').create('fc1', 'FullyCoupled');

model.study('std2').label('Study 2: Maximum Heat Dissipation');
model.study('std2').setGenPlots(false);
model.study('std2').feature('stat').set('useadvanceddisable', true);
model.study('std2').feature('stat').set('disabledphysics', {'ht/bhs2' 'ht/ge2' 'ec/term2'});
model.study('std2').feature('stat').set('usesol', true);
model.study('std2').feature('stat').set('notsolmethod', 'sol');
model.study('std2').feature('stat').set('notstudy', 'std1');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('se1', 'Segregated');
model.sol('sol2').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V' 'comp1_ec_term1_V0_ode'});
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'cg');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('coarseningmethod', 'classic');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').label('Electric Currents');
model.sol('sol2').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_T' 'comp1_ODE1'});
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').label('Temperature');
model.sol('sol2').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol2').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol2').feature('s1').create('i2', 'Iterative');
model.sol('sol2').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol2').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol2').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol2').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol2').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol2').feature('s1').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol2').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');

model.study('std3').label('Study 3: Temperature Difference vs. Electrical Current');
model.study('std3').create('param', 'Parametric');
model.study('std3').feature('param').setIndex('pname', 'length', 0);
model.study('std3').feature('param').setIndex('plistarr', '', 0);
model.study('std3').feature('param').setIndex('punit', 'm', 0);
model.study('std3').feature('param').setIndex('pname', 'length', 0);
model.study('std3').feature('param').setIndex('plistarr', '', 0);
model.study('std3').feature('param').setIndex('punit', 'm', 0);
model.study('std3').feature('param').setIndex('pname', 'I0', 0);
model.study('std3').feature('param').setIndex('plistarr', 'range(0.1,0.1,1.1)', 0);
model.study('std3').feature('param').setIndex('punit', 1, 0);
model.study('std3').feature('stat').set('useadvanceddisable', true);
model.study('std3').feature('stat').set('disabledphysics', {'ht/bhs1' 'ht/bhs2' 'ht/ge1' 'ht/ge2' 'ec/term1'});
model.study('std3').feature('stat').set('usesol', true);
model.study('std3').feature('stat').set('notsolmethod', 'sol');
model.study('std3').feature('stat').set('notstudy', 'std1');

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'stat');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'stat');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature('p1').set('pname', {'I0'});
model.sol('sol3').feature('s1').feature('p1').set('plistarr', {'range(0.1,0.1,1.1)'});
model.sol('sol3').feature('s1').feature('p1').set('punit', {'1'});
model.sol('sol3').feature('s1').feature('p1').set('sweeptype', 'sparse');
model.sol('sol3').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol3').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol3').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol3').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol3').feature('s1').feature('p1').set('probes', {});
model.sol('sol3').feature('s1').feature('p1').set('control', 'param');
model.sol('sol3').feature('s1').set('control', 'stat');
model.sol('sol3').feature('s1').create('se1', 'Segregated');
model.sol('sol3').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol3').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol3').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V' 'comp1_ec_term2_V0_ode'});
model.sol('sol3').feature('s1').create('i1', 'Iterative');
model.sol('sol3').feature('s1').feature('i1').set('linsolver', 'cg');
model.sol('sol3').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('coarseningmethod', 'classic');
model.sol('sol3').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol3').feature('s1').feature('se1').feature('ss1').label('Electric Currents');
model.sol('sol3').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol3').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_T'});
model.sol('sol3').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol3').feature('s1').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('s1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol3').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol3').feature('s1').feature('se1').feature('ss2').label('Temperature');
model.sol('sol3').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol3').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol3').feature('s1').create('i2', 'Iterative');
model.sol('sol3').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol3').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol3').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol3').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol3').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol3').feature('s1').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol3').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');

model.study('std4').label('Study 4: Coefficient of Performance');
model.study('std4').setGenPlots(false);
model.study('std4').create('param', 'Parametric');
model.study('std4').feature('param').set('sweeptype', 'filled');
model.study('std4').feature('param').setIndex('pname', 'length', 0);
model.study('std4').feature('param').setIndex('plistarr', '', 0);
model.study('std4').feature('param').setIndex('punit', 'm', 0);
model.study('std4').feature('param').setIndex('pname', 'length', 0);
model.study('std4').feature('param').setIndex('plistarr', '', 0);
model.study('std4').feature('param').setIndex('punit', 'm', 0);
model.study('std4').feature('param').setIndex('pname', 'dT0', 0);
model.study('std4').feature('param').setIndex('plistarr', '20 40 60', 0);
model.study('std4').feature('param').setIndex('punit', 'K', 0);
model.study('std4').feature('param').setIndex('pname', 'length', 1);
model.study('std4').feature('param').setIndex('plistarr', '', 1);
model.study('std4').feature('param').setIndex('punit', 'm', 1);
model.study('std4').feature('param').setIndex('pname', 'length', 1);
model.study('std4').feature('param').setIndex('plistarr', '', 1);
model.study('std4').feature('param').setIndex('punit', 'm', 1);
model.study('std4').feature('param').setIndex('pname', 'I0', 1);
model.study('std4').feature('param').setIndex('plistarr', 'range(0.1,0.05,0.3) range(0.3,0.2,1)', 1);
model.study('std4').feature('param').setIndex('punit', 1, 1);
model.study('std4').feature('stat').set('useadvanceddisable', true);
model.study('std4').feature('stat').set('disabledphysics', {'ht/bhs1' 'ht/ge1' 'ec/term1'});
model.study('std4').feature('stat').set('usesol', true);
model.study('std4').feature('stat').set('notsolmethod', 'sol');
model.study('std4').feature('stat').set('notstudy', 'std1');

model.sol.create('sol4');
model.sol('sol4').study('std4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std4');
model.sol('sol4').feature('st1').set('studystep', 'stat');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'stat');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').create('p1', 'Parametric');
model.sol('sol4').feature('s1').feature('p1').set('pname', {'dT0' 'I0'});
model.sol('sol4').feature('s1').feature('p1').set('plistarr', {'20 40 60' 'range(0.1,0.05,0.3) range(0.3,0.2,1)'});
model.sol('sol4').feature('s1').feature('p1').set('punit', {'K' '1'});
model.sol('sol4').feature('s1').feature('p1').set('sweeptype', 'filled');
model.sol('sol4').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol4').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol4').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol4').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol4').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol4').feature('s1').feature('p1').set('probes', {});
model.sol('sol4').feature('s1').feature('p1').set('control', 'param');
model.sol('sol4').feature('s1').set('control', 'stat');
model.sol('sol4').feature('s1').create('se1', 'Segregated');
model.sol('sol4').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol4').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol4').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V' 'comp1_ec_term2_V0_ode'});
model.sol('sol4').feature('s1').create('i1', 'Iterative');
model.sol('sol4').feature('s1').feature('i1').set('linsolver', 'cg');
model.sol('sol4').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('coarseningmethod', 'classic');
model.sol('sol4').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol4').feature('s1').feature('se1').feature('ss1').label('Electric Currents');
model.sol('sol4').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol4').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_T' 'comp1_ODE2'});
model.sol('sol4').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol4').feature('s1').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol4').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol4').feature('s1').feature('se1').feature('ss2').label('Temperature');
model.sol('sol4').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol4').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol4').feature('s1').create('i2', 'Iterative');
model.sol('sol4').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol4').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol4').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol4').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol4').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol4').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol4').feature('s1').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol4').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').attach('std4');
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').runAll;

model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Maximum Temperature Difference');
model.result.numerical('gev1').set('expr', {'dTmax'});
model.result.numerical('gev1').set('descr', {'State variable dTmax'});
model.result.numerical('gev1').set('unit', {'K'});
model.result.numerical('gev1').setIndex('descr', 'Maximum temperature difference', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Maximum Temperature Difference');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').label('Required Current for Maximum Temperature Difference');
model.result.numerical('gev2').set('expr', {'ec.I0_1'});
model.result.numerical('gev2').set('descr', {'Terminal current'});
model.result.numerical('gev2').set('unit', {'A'});
model.result.numerical('gev2').setIndex('descr', 'Required current for maximum temperature difference', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Required Current for Maximum Temperature Difference');
model.result.numerical('gev2').set('table', 'tbl2');
model.result.numerical('gev2').setResult;
model.result.numerical.create('gev3', 'EvalGlobal');
model.result.numerical('gev3').label('Required Voltage for Maximum Temperature Difference');
model.result.numerical('gev3').set('expr', {'ec.V0_1'});
model.result.numerical('gev3').set('descr', {'Terminal voltage'});
model.result.numerical('gev3').set('unit', {'V'});
model.result.numerical('gev3').setIndex('descr', 'Required voltage for maximum temperature difference', 0);
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').comments('Required Voltage for Maximum Temperature Difference');
model.result.numerical('gev3').set('table', 'tbl3');
model.result.numerical('gev3').setResult;
model.result.numerical.create('gev4', 'EvalGlobal');
model.result.numerical('gev4').label('Overall Electrical Resistance');
model.result.numerical('gev4').set('expr', {'ec.R11'});
model.result.numerical('gev4').set('descr', {'Resistance'});
model.result.numerical('gev4').set('unit', {['ohm' ]});
model.result.numerical('gev4').setIndex('descr', 'Overall electrical resistance', 0);
model.result.table.create('tbl4', 'Table');
model.result.table('tbl4').comments('Overall Electrical Resistance');
model.result.numerical('gev4').set('table', 'tbl4');
model.result.numerical('gev4').setResult;

model.sol('sol2').runAll;

model.result.numerical.create('gev5', 'EvalGlobal');
model.result.numerical('gev5').label('Maximum Heat Dissipation');
model.result.numerical('gev5').set('data', 'dset2');
model.result.numerical('gev5').set('expr', {'Qmax'});
model.result.numerical('gev5').set('descr', {'State variable Qmax'});
model.result.numerical('gev5').set('unit', {'W'});
model.result.numerical('gev5').setIndex('descr', 'Maximum heat dissipation', 0);
model.result.table.create('tbl5', 'Table');
model.result.table('tbl5').comments('Maximum Heat Dissipation');
model.result.numerical('gev5').set('table', 'tbl5');
model.result.numerical('gev5').setResult;

model.sol('sol3').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Temperature (ht)');
model.result('pg1').set('data', 'dset3');
model.result('pg1').setIndex('looplevel', 11, 0);
model.result('pg1').set('data', 'dset3');
model.result('pg1').setIndex('looplevel', 11, 0);
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg1').feature.create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('solutionparams', 'parent');
model.result('pg1').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('vol1').set('smooth', 'internal');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Electric Potential (ec)');
model.result('pg2').set('data', 'dset3');
model.result('pg2').setIndex('looplevel', 11, 0);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'dset3');
model.result('pg2').setIndex('looplevel', 11, 0);
model.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond2/pg1');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').set('showsolutionparams', 'on');
model.result('pg2').feature('vol1').set('solutionparams', 'parent');
model.result('pg2').feature('vol1').set('expr', 'V');
model.result('pg2').feature('vol1').set('colortable', 'Dipole');
model.result('pg2').feature('vol1').set('showsolutionparams', 'on');
model.result('pg2').feature('vol1').set('data', 'parent');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Electric Field Norm (ec)');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 11, 0);
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 11, 0);
model.result('pg3').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');
model.result('pg3').feature.create('mslc1', 'Multislice');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('solutionparams', 'parent');
model.result('pg3').feature('mslc1').set('expr', 'ec.normE');
model.result('pg3').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg3').feature('mslc1').set('xcoord', 'ec.CPx');
model.result('pg3').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg3').feature('mslc1').set('ycoord', 'ec.CPy');
model.result('pg3').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg3').feature('mslc1').set('zcoord', 'ec.CPz');
model.result('pg3').feature('mslc1').set('colortable', 'Prism');
model.result('pg3').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg3').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('data', 'parent');
model.result('pg3').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg3').feature('strmsl1').set('expr', {'ec.Ex' 'ec.Ey' 'ec.Ez'});
model.result('pg3').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg3').feature('strmsl1').set('xcoord', 'ec.CPx');
model.result('pg3').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg3').feature('strmsl1').set('ycoord', 'ec.CPy');
model.result('pg3').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg3').feature('strmsl1').set('zcoord', 'ec.CPz');
model.result('pg3').feature('strmsl1').set('titletype', 'none');
model.result('pg3').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg3').feature('strmsl1').set('udist', 0.02);
model.result('pg3').feature('strmsl1').set('maxlen', 0.4);
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('inheritcolor', false);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('data', 'parent');
model.result('pg3').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg3').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg3').feature('strmsl1').feature('col1').set('expr', 'ec.normE');
model.result('pg3').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg3').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg3').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg3').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg3').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg3').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Temperature Difference vs. Electrical Current');
model.result('pg4').set('data', 'dset3');
model.result('pg4').set('xlabelactive', true);
model.result('pg4').set('xlabel', 'I (A)');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', '\Delta T (K)');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').setIndex('expr', 'dT', 0);
model.result('pg4').feature('glob1').setIndex('unit', 'K', 0);
model.result('pg4').feature('glob1').setIndex('descr', 'Temperature difference', 0);
model.result('pg4').feature('glob1').setIndex('unit', '', 2);
model.result('pg4').feature('glob1').remove('unit', 2);
model.result('pg4').feature('glob1').remove('descr', 2);
model.result('pg4').feature('glob1').remove('expr', [2]);
model.result('pg4').feature('glob1').setIndex('unit', '', 1);
model.result('pg4').feature('glob1').remove('unit', 1);
model.result('pg4').feature('glob1').remove('descr', 1);
model.result('pg4').feature('glob1').remove('expr', [1]);
model.result('pg4').feature('glob1').set('xdata', 'expr');
model.result('pg4').feature('glob1').set('xdataexpr', 'ec.I0_2');
model.result('pg4').feature('glob1').set('xdatadescr', 'Terminal current');
model.result('pg4').feature('glob1').set('linewidth', 3);
model.result('pg4').feature('glob1').set('legend', false);
model.result('pg4').run;

model.sol('sol4').runAll;

model.result.numerical.create('gev6', 'EvalGlobal');
model.result.numerical('gev6').label('Coefficient of Performance');
model.result.numerical('gev6').set('data', 'dset4');
model.result.numerical('gev6').set('tablecols', 'level2');
model.result.numerical('gev6').set('expr', {});
model.result.numerical('gev6').set('descr', {});
model.result.numerical('gev6').setIndex('expr', 'Qvar/(ec.V0_2*ec.I0_2)', 0);
model.result.numerical('gev6').setIndex('descr', 'Coefficient of performance', 0);
model.result.table.create('tbl6', 'Table');
model.result.table('tbl6').comments('Coefficient of Performance');
model.result.numerical('gev6').set('table', 'tbl6');
model.result.numerical('gev6').setResult;
model.result.numerical.create('gev7', 'EvalGlobal');
model.result.numerical('gev7').label('Maximum Coefficient of Performance');
model.result.numerical('gev7').set('data', 'dset4');
model.result.numerical('gev7').set('tablecols', 'level2');
model.result.numerical('gev7').set('expr', {});
model.result.numerical('gev7').set('descr', {});
model.result.numerical('gev7').setIndex('expr', 'Qvar/(ec.V0_2*ec.I0_2)', 0);
model.result.numerical('gev7').setIndex('descr', 'Maximum coefficient of performance', 0);
model.result.numerical('gev7').set('dataseries', 'maximum');
model.result.table.create('tbl7', 'Table');
model.result.table('tbl7').comments('Maximum Coefficient of Performance');
model.result.numerical('gev7').set('table', 'tbl7');
model.result.numerical('gev7').setResult;
model.result.numerical.create('av1', 'AvVolume');
model.result.numerical('av1').label('Figure of Merit');
model.result.numerical('av1').selection.named('geom1_csel1_dom');
model.result.numerical('av1').set('expr', {'tee1.Zmean'});
model.result.numerical('av1').set('descr', {'Mean figure of merit'});
model.result.numerical('av1').set('unit', {'1/K'});
model.result.numerical('av1').setIndex('descr', 'Figure of merit', 0);
model.result.table.create('tbl8', 'Table');
model.result.table('tbl8').comments('Figure of Merit');
model.result.numerical('av1').set('table', 'tbl8');
model.result.numerical('av1').setResult;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'none');
model.result('pg5').create('tblp1', 'Table');
model.result('pg5').feature('tblp1').set('source', 'table');
model.result('pg5').feature('tblp1').set('table', 'tbl6');
model.result('pg5').feature('tblp1').set('linewidth', 'preference');
model.result('pg5').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg5').run;
model.result('pg5').feature('tblp1').set('linewidth', 3);
model.result('pg5').feature('tblp1').set('legend', true);
model.result('pg5').feature('tblp1').set('legendmethod', 'manual');
model.result('pg5').feature('tblp1').setIndex('legends', '\Delta<i>T</i>: 20 K', 0);
model.result('pg5').feature('tblp1').setIndex('legends', '\Delta<i>T</i>: 40 K', 1);
model.result('pg5').feature('tblp1').setIndex('legends', '\Delta<i>T</i>: 60 K', 2);
model.result('pg5').run;
model.result('pg5').label('Coefficient of Performance');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'I/Imax');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'COP');
model.result('pg5').set('legendpos', 'lowerright');
model.result('pg5').run;
model.result.dataset.create('grid1', 'Grid1D');
model.result.dataset('grid1').set('source', 'data');
model.result.dataset('grid1').set('data', 'dset2');
model.result.dataset('grid1').set('par1', 'Q');
model.result.dataset('grid1').set('parmax1', 1000);
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Temperature Difference vs. Heat Dissipation');
model.result('pg6').set('data', 'grid1');
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', '\Delta T(Q)');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'Q (W)');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', '\Delta T (K)');
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg6').feature('lngr1').set('linewidth', 'preference');
model.result('pg6').feature('lngr1').set('expr', 'if(dTmax-(dTmax/Qmax)*root.Q>0,dTmax-(dTmax/Qmax)*root.Q,NaN)');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', 'root.Q');
model.result('pg6').feature('lngr1').set('linewidth', 3);
model.result('pg1').run;

model.title('Thermoelectric Cooler');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Visualizing material appearance, color, and texture' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Showing info below the graphics about geometry parameters, results and performance depending on the selected plot action' newline  newline 'Thermoelectric coolers are widely used for electronics cooling in various application areas, ranging from consumer products to spacecraft design. A thermoelectric module is a common type of component used in thermoelectricity applications. A typical module consists of several thermoelectric legs sandwiched between two thermally conductive plates, one cold and one hot. The device that needs to be cooled down must be attached to the cold face.' newline  newline 'Due to the variety of applications, there can be many different thermoelectric cooler configurations. This app covers the basic design of a single-stage thermoelectric cooler of different sizes with different thermocouple sizes and distributions. It also serves as a starting point for more detailed calculations with additional input options and can be extended to multistage thermoelectric coolers.']);

model.label('thermoelectric_cooler.mph');

model.result('pg1').run;

model.setExpectedComputationTime('7 minutes');

model.param.set('N', '(floor((length-2*pitch-leg_length)/(leg_length+pitch))+1-mod(floor((length-2*pitch-leg_length)/(leg_length+pitch))+1,2))*((floor((width-2*pitch-leg_width)/(leg_width+pitch))+1))/2');

model.result.report.create('rpt1', 'Report');
model.result.report('rpt1').set('format', 'docx');
model.result.report('rpt1').set('filename', 'user:///thermoelectric_cooler.docx');
model.result.report('rpt1').set('imagesize', 'large');
model.result.report('rpt1').feature.create('tp1', 'TitlePage');
model.result.report('rpt1').feature('tp1').set('frontmatterlayout', 'headings');
model.result.report('rpt1').feature('tp1').set('logo', 'none');
model.result.report('rpt1').feature.create('toc1', 'TableOfContents');
model.result.report('rpt1').feature('toc1').label('Table of Contents');
model.result.report('rpt1').feature('toc1').set('levels', '1');
model.result.report('rpt1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').label('Software Information');
model.result.report('rpt1').feature('sec1').feature.create('root1', 'Model');
model.result.report('rpt1').feature('sec1').feature('root1').label('Software Properties');
model.result.report('rpt1').feature('sec1').feature('root1').set('includepath', false);
model.result.report('rpt1').feature('sec1').feature('root1').set('includename', false);
model.result.report('rpt1').feature('sec1').feature('root1').set('includeusedproducts', false);
model.result.report('rpt1').feature('sec1').feature.create('head1', 'Heading');
model.result.report('rpt1').feature('sec1').feature('head1').set('text', 'Study 1');
model.result.report('rpt1').feature('sec1').feature('head1').set('sublevel', 'level2');
model.result.report('rpt1').feature('sec1').feature.create('std1', 'Study');
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec1').feature.create('head2', 'Heading');
model.result.report('rpt1').feature('sec1').feature('head2').set('text', 'Study 2');
model.result.report('rpt1').feature('sec1').feature('head2').set('sublevel', 'level2');
model.result.report('rpt1').feature('sec1').feature.create('std2', 'Study');
model.result.report('rpt1').feature('sec1').feature('std2').set('noderef', 'std2');
model.result.report('rpt1').feature('sec1').feature('std2').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature.create('head3', 'Heading');
model.result.report('rpt1').feature('sec1').feature('head3').set('text', 'Study 3');
model.result.report('rpt1').feature('sec1').feature.create('std3', 'Study');
model.result.report('rpt1').feature('sec1').feature('std3').set('noderef', 'std3');
model.result.report('rpt1').feature('sec1').feature('std3').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature('std3').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec1').feature.create('head4', 'Heading');
model.result.report('rpt1').feature('sec1').feature('head4').set('text', 'Study 4');
model.result.report('rpt1').feature('sec1').feature('head4').set('sublevel', 'level2');
model.result.report('rpt1').feature('sec1').feature.create('std4', 'Study');
model.result.report('rpt1').feature('sec1').feature('std4').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature('std4').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec1').feature('head3').set('sublevel', 'level2');
model.result.report('rpt1').feature('sec1').feature('std1').set('commentssource', 'custom');
model.result.report('rpt1').feature('sec1').feature('std1').set('comments', 'Computes the optimal operating conditions for maximum cooling, that is, when the temperature difference between the ceramics plates reaches its maximum value. This study uses an optimization solver to find the applied current that gives the maximum temperature difference. The corresponding voltage and electrical resistance are also returned.');
model.result.report('rpt1').feature('sec1').feature('std2').set('commentssource', 'custom');
model.result.report('rpt1').feature('sec1').feature('std2').set('comments', 'In this study, the optimal electric current is the operating current in the thermoelectric cooler. Under such a condition, the study computes the limiting dissipative power at which the temperature difference between the ceramics plates is zero.');
model.result.report('rpt1').feature('sec1').feature('std3').set('commentssource', 'custom');
model.result.report('rpt1').feature('sec1').feature('std3').set('comments', 'Computes the temperature difference between the ceramics plates for different prescribed applied currents. The parametric sweep over the applied current goes from 0.1 Imax to 1.1 Imax. The results are used to produce the performance chart of temperature difference vs electric current.');
model.result.report('rpt1').feature('sec1').feature('std4').set('commentssource', 'custom');
model.result.report('rpt1').feature('sec1').feature('std4').set('comments', 'Computes the dissipative heat rate and electrical power for different prescribed applied currents at a temperature difference of 20 K, 40 K, and 60 K. This is performed by a double parametric sweep. The results are used to produce curves of coefficient of performance, ratio of dissipative heat rate and electrical power, at different values of temperature difference.');
model.result.report('rpt1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').label('Input Data');
model.result.report('rpt1').feature('sec2').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('param1').label('Parameters - Geometry');
model.result.report('rpt1').feature('sec2').feature('param1').setIndex('children', false, 14, 1);
model.result.report('rpt1').feature('sec2').feature('param1').setIndex('children', false, 15, 1);
model.result.report('rpt1').feature('sec2').feature('param1').setIndex('children', false, 16, 1);
model.result.report('rpt1').feature('sec2').feature.create('param2', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('param2').label('Parameters - Operating Conditions');
model.result.report('rpt1').feature('sec2').feature('param2').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec2').feature('param2').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec2').feature('param2').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec2').feature('param2').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec2').feature('param2').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature('sec2').feature('param2').setIndex('children', false, 5, 1);
model.result.report('rpt1').feature('sec2').feature('param2').setIndex('children', false, 6, 1);
model.result.report('rpt1').feature('sec2').feature('param2').setIndex('children', false, 7, 1);
model.result.report('rpt1').feature('sec2').feature('param2').setIndex('children', false, 8, 1);
model.result.report('rpt1').feature('sec2').feature('param2').setIndex('children', false, 9, 1);
model.result.report('rpt1').feature('sec2').feature('param2').setIndex('children', false, 10, 1);
model.result.report('rpt1').feature('sec2').feature('param2').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec2').feature('param2').setIndex('children', false, 12, 1);
model.result.report('rpt1').feature('sec2').feature('param2').setIndex('children', false, 13, 1);
model.result.report('rpt1').feature('sec2').feature.create('head1', 'Heading');
model.result.report('rpt1').feature('sec2').feature('head1').set('text', 'Materials');
model.result.report('rpt1').feature('sec2').feature.create('txt1', 'Text');
model.result.report('rpt1').feature('sec2').feature('txt1').set('text', 'For p-type semiconductor materials, a Seebeck coefficient with negative sign is used. For n-type semiconductors, the Seebeck coefficient should be positive.');
model.result.report('rpt1').feature('sec2').feature.create('mat1', 'Material');
model.result.report('rpt1').feature('sec2').feature('mat1').set('includeselection', false);
model.result.report('rpt1').feature('sec2').feature('mat1').set('includesettings', false);
model.result.report('rpt1').feature('sec2').feature('mat1').set('noderef', 'matlnk1');
model.result.report('rpt1').feature('sec2').feature('mat1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec2').feature.create('mat2', 'Material');
model.result.report('rpt1').feature('sec2').feature('mat2').set('includeselection', false);
model.result.report('rpt1').feature('sec2').feature('mat2').set('includesettings', false);
model.result.report('rpt1').feature('sec2').feature('mat2').set('noderef', 'matlnk2');
model.result.report('rpt1').feature('sec2').feature('mat2').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec2').feature.create('mat3', 'Material');
model.result.report('rpt1').feature('sec2').feature('mat3').set('noderef', 'mat5');
model.result.report('rpt1').feature('sec2').feature('mat3').set('includesettings', false);
model.result.report('rpt1').feature('sec2').feature('mat3').set('includeselection', false);
model.result.report('rpt1').feature('sec2').feature('mat3').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec2').feature('mat3').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec2').feature('mat3').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec2').feature.create('mat4', 'Material');
model.result.report('rpt1').feature('sec2').feature('mat4').set('noderef', 'mat6');
model.result.report('rpt1').feature('sec2').feature('mat4').set('includesettings', false);
model.result.report('rpt1').feature('sec2').feature('mat4').set('includeselection', false);
model.result.report('rpt1').feature('sec2').feature('mat4').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec2').feature('mat4').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec2').feature('mat4').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').label('Model');
model.result.report('rpt1').feature('sec3').feature.create('geom1', 'Geometry');
model.result.report('rpt1').feature('sec3').feature('geom1').set('includeunits', false);
model.result.report('rpt1').feature('sec3').feature('geom1').set('includestats', false);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 5, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 6, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 7, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 8, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 9, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 10, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 12, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 13, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 14, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 15, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 16, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 17, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 18, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 19, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 20, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 21, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 22, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 23, 1);
model.result.report('rpt1').feature('sec3').feature('geom1').setIndex('children', false, 24, 1);
model.result.report('rpt1').feature('sec3').feature.create('mesh1', 'Mesh');
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 5, 1);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 6, 1);
model.result.report('rpt1').feature.create('sec4', 'Section');
model.result.report('rpt1').feature('sec4').label('Results');
model.result.report('rpt1').feature('sec4').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature('sec4').feature('param1').label('Parameters');
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 14, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 15, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 16, 1);
model.result.report('rpt1').feature('sec4').feature.create('mtbl1', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl1').label('Maximum Temperature Difference');
model.result.report('rpt1').feature('sec4').feature('mtbl1').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature.create('mtbl2', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl2').label('Required Current for Maximum Temperature Difference');
model.result.report('rpt1').feature('sec4').feature('mtbl2').set('noderef', 'tbl2');
model.result.report('rpt1').feature('sec4').feature('mtbl2').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature.create('mtbl3', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl3').label('Required Voltage for Maximum Temperature Difference');
model.result.report('rpt1').feature('sec4').feature('mtbl3').set('noderef', 'tbl3');
model.result.report('rpt1').feature('sec4').feature('mtbl3').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature.create('mtbl4', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl4').label('Overall Electrical Resistance');
model.result.report('rpt1').feature('sec4').feature('mtbl4').set('noderef', 'tbl4');
model.result.report('rpt1').feature('sec4').feature('mtbl4').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature.create('mtbl5', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl5').label('Maximum Heat Dissipation');
model.result.report('rpt1').feature('sec4').feature('mtbl5').set('noderef', 'tbl5');
model.result.report('rpt1').feature('sec4').feature('mtbl5').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature.create('mtbl6', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl6').label('Coefficient of Performance');
model.result.report('rpt1').feature('sec4').feature('mtbl6').set('noderef', 'tbl6');
model.result.report('rpt1').feature('sec4').feature('mtbl6').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature.create('mtbl7', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl7').label('Maximum Coefficient of Performance');
model.result.report('rpt1').feature('sec4').feature('mtbl7').set('noderef', 'tbl7');
model.result.report('rpt1').feature('sec4').feature('mtbl7').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature.create('mtbl8', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl8').label('Figure of Merit');
model.result.report('rpt1').feature('sec4').feature('mtbl8').set('noderef', 'tbl8');
model.result.report('rpt1').feature('sec4').feature('mtbl8').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('pg1').label('Temperature');
model.result.report('rpt1').feature('sec4').feature.create('pg2', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('pg2').label('Temperature Difference vs Heat Dissipation');
model.result.report('rpt1').feature('sec4').feature('pg2').set('noderef', 'pg6');
model.result.report('rpt1').feature('sec4').feature.create('pg3', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('pg3').label('Temperature Difference vs Electric Current');
model.result.report('rpt1').feature('sec4').feature('pg3').set('noderef', 'pg4');
model.result.report('rpt1').feature('sec4').feature.create('pg4', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('pg4').label('Coefficient of Performance');
model.result.report('rpt1').feature('sec4').feature('pg4').set('noderef', 'pg5');
model.result('pg1').run;

model.title('Thermoelectric Cooler');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Visualizing material appearance, color, and texture' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Showing info below the graphics about geometry parameters, results and performance depending on the selected plot action' newline  newline 'Thermoelectric coolers are widely used for electronics cooling in various application areas, ranging from consumer products to spacecraft design. A thermoelectric module is a common type of component used in thermoelectricity applications. A typical module consists of several thermoelectric legs sandwiched between two thermally conductive plates, one cold and one hot. The device that needs to be cooled down must be attached to the cold face.' newline  newline 'Due to the variety of applications, there can be many different thermoelectric cooler configurations. This app covers the basic design of a single-stage thermoelectric cooler of different sizes with different thermocouple sizes and distributions. It also serves as a starting point for more detailed calculations with additional input options and can be extended to multistage thermoelectric coolers.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('thermoelectric_cooler.mph');

model.modelNode.label('Components');

out = model;
