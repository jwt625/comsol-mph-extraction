function out = model
%
% in_plane_switching_liquid_crystal_cell.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Wave_Optics_Module/Modulators_and_Switches');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('w', 'WeakFormPDE', 'geom1', {'u'});
model.physics('w').prop('EquationForm').set('form', 'Automatic');
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics.create('ewfd', 'ElectromagneticWavesFrequencyDomain', 'geom1');
model.physics('ewfd').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/w', true);
model.study('std1').feature('stat').setSolveFor('/physics/es', true);
model.study('std1').feature('stat').setSolveFor('/physics/ewfd', true);

model.param.label('General Parameters');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('V0', '2[V]', 'Applied potential');
model.param.set('lda0', '632[nm]', 'Wavelength');
model.param.create('par2');
model.param('par2').label('Material Parameters');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('theta_anchoring', '2[deg]', 'Anchoring angle, from x-axis in x-y plane');
model.param('par2').set('phi_anchoring', '80[deg]', 'Anchoring angle, from x-y plane');
model.param('par2').set('n_o', '1.4771', 'Refractive index, ordinary polarization');
model.param('par2').set('n_e', '1.5621', 'Refractive index, extraordinary polarization');
model.param('par2').set('eps_o', 'n_o^2', 'Relative permittivity, ordinary polarization');
model.param('par2').set('eps_e', 'n_e^2', 'Relative permittivity, extraordinary polarization');
model.param('par2').set('eps_ortho', '5.2', 'Dielectric constant, perpendicular to directors');
model.param('par2').set('delta_eps', '10.3', 'Dielectric constant difference');
model.param('par2').set('eps_parallel', 'delta_eps+eps_ortho', 'Dielectric constant, along directors');
model.param('par2').set('K_11', '9.2[pN]', 'Splay elastic constant');
model.param('par2').set('K_22', '6.1[pN]', 'Twist elastic constant');
model.param('par2').set('K_33', '14.6[pN]', 'Bend elastic constant');
model.param.create('par3');
model.param('par3').label('Geometry Parameters');

% To import content from file, use:
% model.param('par3').loadFile('FILENAME');
model.param('par3').set('t_LC', '4[um]', 'Thickness, liquid crystal cell');
model.param('par3').set('d_1', '4[um]', 'Applied potential electrode width');
model.param('par3').set('d_2', 'd_1', 'Ground electrode width');
model.param('par3').set('d_12', '8[um]', 'Electrode separation');
model.param('par3').set('width', '2*(d_1+d_2)+d_12', 'Width');
model.param('par3').set('height', 't_LC+2*(t_glass+t_PML)', 'Height');
model.param('par3').set('t_glass', 'lda0', 'Thickness, glass layer');
model.param('par3').set('t_PML', 'lda0', 'Thickness, Perfectly Matched Layer');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'width' 'height'});
model.geom('geom1').feature('r1').set('base', 'center');
model.geom('geom1').feature('r1').setIndex('layer', 't_PML', 0);
model.geom('geom1').feature('r1').setIndex('layer', 't_glass', 1);
model.geom('geom1').feature('r1').set('layertop', true);
model.geom('geom1').runPre('fin');
model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'table');
model.geom('geom1').feature('pol1').setIndex('table', '-d_12/2-d_1', 0, 0);
model.geom('geom1').feature('pol1').setIndex('table', '-t_LC/2', 0, 1);
model.geom('geom1').feature('pol1').setIndex('table', '-d_12/2', 1, 0);
model.geom('geom1').feature('pol1').setIndex('table', '-t_LC/2', 1, 1);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Electric Potential');
model.geom('geom1').feature('pol1').set('contributeto', 'csel1');
model.geom('geom1').run('pol1');
model.geom('geom1').feature.duplicate('pol2', 'pol1');
model.geom('geom1').feature('pol2').setIndex('table', 'd_12/2', 0, 0);
model.geom('geom1').feature('pol2').setIndex('table', 'd_12/2+d_2', 1, 0);
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Ground');
model.geom('geom1').feature('pol2').set('contributeto', 'csel2');
model.geom('geom1').runPre('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Liquid Crystal');
model.selection('sel1').set([3]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('PML');
model.selection('sel2').set([1 5]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Glass');
model.selection('sel3').set([1 2 4 5]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Input Port');
model.selection('sel4').geom(1);
model.selection('sel4').set([4]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Output Port');
model.selection('sel5').geom(1);
model.selection('sel5').set([10]);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Left Periodic Boundary');
model.selection('sel6').geom(1);
model.selection('sel6').set([1 3 5 7 9]);
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').label('Right Periodic Boundary');
model.selection('sel7').geom(1);
model.selection('sel7').set([16 17 18 19 20]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Periodic Boundaries');
model.selection('uni1').set('entitydim', 1);
model.selection('uni1').set('input', {'sel6' 'sel7'});
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('PML Boundaries');
model.selection('adj1').set('input', {'sel2'});
model.selection.create('int1', 'Intersection');
model.selection('int1').model('comp1');
model.selection('int1').label('PML Distribution Boundaries');
model.selection('int1').set('entitydim', 1);
model.selection('int1').set('input', {'uni1' 'adj1'});
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Non-PML');
model.selection('dif1').set('add', {'sel1' 'sel3'});
model.selection('dif1').set('subtract', {'sel2'});
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Electrodes');
model.selection('uni2').set('entitydim', 1);
model.selection('uni2').set('input', {'geom1_csel1_bnd' 'geom1_csel2_bnd'});

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Liquid Crystal Domain Variables');
model.variable('var1').selection.geom('geom1', 2);
model.variable('var1').selection.named('sel1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('nx', 'cos(theta)*cos(phi)', 'Director, x-component');
model.variable('var1').set('ny', 'sin(theta)*cos(phi)', 'Director, y-component');
model.variable('var1').set('nz', 'sin(phi)', 'Director, z-component');
model.variable('var1').set('dnxx', 'd(nx,x)', 'Director, x-derivative of x-component');
model.variable('var1').set('dnxy', 'd(nx,y)', 'Director, y-derivative of x-component');
model.variable('var1').set('dnxz', '0', 'Director, z-derivative of x-component');
model.variable('var1').set('dnyx', 'd(ny,x)', 'Director, x-derivative of y-component');
model.variable('var1').set('dnyy', 'd(ny,y)', 'Director, y-derivative of y-component');
model.variable('var1').set('dnyz', '0', 'Director, z-derivative of y-component');
model.variable('var1').set('dnzx', 'd(nz,x)', 'Director, x-derivative of z-component');
model.variable('var1').set('dnzy', 'd(nz,y)', 'Director, y-derivative of z-component');
model.variable('var1').set('dnzz', '0', 'Director, z-derivative of z-component');
model.variable('var1').set('F1', '0.5*K_11*(dnxx+dnyy+dnzz)^2', 'Free energy density, splay');
model.variable('var1').set('F2', '0.5*K_22*(nx*(dnzy-dnyz)+ny*(dnxz-dnzx)+nz*(dnyx-dnxy))^2', 'Free energy density, twist');
model.variable('var1').set('F3', '0.5*K_33*((ny*(dnyx-dnxy)-nz*(dnxz-dnzx))^2+(nz*(dnzy-dnyz)-nx*(dnyx-dnxy))^2+(nx*(dnxz-dnzx)-ny*(dnzy-dnyz))^2)', 'Free energy density, bend');
model.variable('var1').set('F', 'F1+F2+F3', 'Free energy density');

model.physics('w').label('Oseen-Frank');
model.physics('w').selection.named('sel1');
model.physics('w').prop('Units').set('DependentVariableQuantity', 'planeangle');
model.physics('w').field('dimensionless').component({'u' 'u2'});
model.physics('w').field('dimensionless').component(1, 'theta');
model.physics('w').field('dimensionless').component(2, 'phi');
model.physics('w').feature('wfeq1').setIndex('weak', 'test(F)', 0);
model.physics('w').feature('wfeq1').setIndex('weak', '-var(es.W,theta,phi)', 1);
model.physics('w').create('dir1', 'DirichletBoundary', 1);
model.physics('w').feature('dir1').label('Strong Anchoring');
model.physics('w').feature('dir1').selection.set([6 8 12 13 14 15]);
model.physics('w').feature('dir1').setIndex('r', 'theta_anchoring', 0);
model.physics('w').feature('dir1').setIndex('r', 'phi_anchoring', 1);
model.physics('w').create('pc1', 'PeriodicCondition', 1);
model.physics('w').feature('pc1').selection.named('uni1');
model.physics('es').selection.named('sel1');
model.physics('es').feature('ccn1').set('epsilonr_mat', 'userdef');
model.physics('es').feature('ccn1').set('epsilonr', {'eps_ortho*(1-nx*nx)+eps_parallel*nx*nx' 'eps_ortho*(-nx*ny)+eps_parallel*nx*ny' 'eps_ortho*(-nx*nz)+eps_parallel*nx*nz' 'eps_ortho*(-nx*ny)+eps_parallel*nx*ny' 'eps_ortho*(1-ny*ny)+eps_parallel*ny*ny' 'eps_ortho*(-ny*nz)+eps_parallel*ny*nz' 'eps_ortho*(-nx*nz)+eps_parallel*nx*nz' 'eps_ortho*(-ny*nz)+eps_parallel*ny*nz' 'eps_ortho*(1-nz*nz)+eps_parallel*nz*nz'});
model.physics('es').create('gnd1', 'Ground', 1);
model.physics('es').feature('gnd1').selection.named('geom1_csel2_bnd');
model.physics('es').create('pot1', 'ElectricPotential', 1);
model.physics('es').feature('pot1').selection.named('geom1_csel1_bnd');
model.physics('es').feature('pot1').set('V0', 'V0');
model.physics('es').create('pc1', 'PeriodicCondition', 1);
model.physics('es').feature('pc1').selection.named('uni1');

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.named('sel2');

model.physics('ewfd').feature('wee1').set('DisplacementFieldModel', 'RelativePermittivity');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Liquid Crystal');
model.material('mat1').selection.named('sel1');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'eps_o*(1-nx*nx)+eps_e*nx*nx' 'eps_o*(-nx*ny)+eps_e*nx*ny' 'eps_o*(1-ny*ny)+eps_e*ny*ny' 'eps_o*(-nx*nz)+eps_e*nx*nz' 'eps_o*(-ny*nz)+eps_e*ny*nz' 'eps_o*(1-nz*nz)+eps_e*nz*nz'});
model.material('mat1').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Glass');
model.material('mat2').selection.named('sel3');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'n_e'});
model.material('mat2').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0'});

model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Port Mode Field Polarization Variables');
model.variable('var2').selection.geom('geom1', 2);
model.variable('var2').selection.named('sel3');

% To import content from file, use:
% model.variable('var2').loadFile('FILENAME');
model.variable('var2').set('nx', 'cos(theta_anchoring)*cos(phi_anchoring)', 'Director, x-component');
model.variable('var2').set('ny', 'sin(theta_anchoring)*cos(phi_anchoring)', 'Director, y-component');
model.variable('var2').set('nz', 'sin(phi_anchoring)', 'Director, z-component');

model.physics('ewfd').create('port1', 'Port', 1);
model.physics('ewfd').feature('port1').selection.named('sel4');
model.physics('ewfd').feature('port1').set('PortType', 'Periodic');
model.physics('ewfd').feature('port1').set('PortSlit', true);
model.physics('ewfd').feature('port1').set('SlitType', 'DomainBacked');
model.physics('ewfd').feature('port1').set('Eampl', {'nx' '0' 'nz'});
model.physics('ewfd').feature('port1').create('oport1', 'OrthogonalPolarization', 1);
model.physics('ewfd').feature.duplicate('port2', 'port1');
model.physics('ewfd').feature('port2').selection.named('sel5');
model.physics('ewfd').feature('port2').set('PortExcitation', 'off');
model.physics('ewfd').feature('port2').set('PortOrientation', 'ReversePort');
model.physics('ewfd').create('pc1', 'PeriodicCondition', 1);
model.physics('ewfd').feature('pc1').selection.named('uni1');

model.mesh('mesh1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('dis1').selection.named('int1');
model.mesh('mesh1').feature('dis1').set('numelem', 10);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'lda0/n_e/6');
model.mesh('mesh1').create('id1', 'IdenticalMesh');
model.mesh('mesh1').feature('id1').selection('group1').named('sel6');
model.mesh('mesh1').feature('id1').selection('group2').named('sel7');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').selection.named('dif1');
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').run;

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'd_1', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'd_1', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'V0', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(0[V],0.5[V],5[V])', 0);
model.study('std1').feature('param').set('reusesol', true);
model.study('std1').create('wave', 'Wavelength');
model.study('std1').feature('wave').set('plist', 'lda0');
model.study('std1').feature('wave').setEntry('activate', 'w', false);
model.study('std1').feature('wave').setEntry('activate', 'es', false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'wave');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'wave');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 0.01);
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('pname', {'lambda0'});
model.sol('sol1').feature('s2').feature('p1').set('plistarr', {'lda0'});
model.sol('sol1').feature('s2').feature('p1').set('punit', {[native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']});
model.sol('sol1').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s2').feature('p1').set('probes', {});
model.sol('sol1').feature('s2').feature('p1').set('control', 'wave');
model.sol('sol1').feature('s2').set('control', 'wave');
model.sol('sol1').feature('s2').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s2').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'V0'});
model.batch('p1').set('plistarr', {'range(0[V],0.5[V],5[V])'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol3');
model.sol('sol3').study('std1');
model.sol('sol3').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol3');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset3');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 11, 1);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').label('Oseen-Frank');
model.result('pg1').feature('surf1').set('expr', 'theta');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Electric Potential (es)');
model.result('pg2').set('data', 'dset3');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').setIndex('looplevel', 11, 1);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'dset3');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').setIndex('looplevel', 11, 1);
model.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond2/pg1');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solutionparams', 'parent');
model.result('pg2').feature('surf1').set('expr', 'V');
model.result('pg2').feature('surf1').set('colortable', 'Dipole');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature.create('str1', 'Streamline');
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('solutionparams', 'parent');
model.result('pg2').feature('str1').set('expr', {'es.Ex' 'es.Ey'});
model.result('pg2').feature('str1').set('titletype', 'none');
model.result('pg2').feature('str1').set('posmethod', 'uniform');
model.result('pg2').feature('str1').set('udist', 0.02);
model.result('pg2').feature('str1').set('maxlen', 0.4);
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('inheritcolor', false);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('data', 'parent');
model.result('pg2').feature('str1').selection.geom('geom1', 1);
model.result('pg2').feature('str1').selection.set([5 6 8 12 13 14 15 18]);
model.result('pg2').feature('str1').set('inheritplot', 'surf1');
model.result('pg2').feature('str1').feature.create('col1', 'Color');
model.result('pg2').feature('str1').feature('col1').set('expr', 'V');
model.result('pg2').feature('str1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg2').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg2').feature('str1').feature.create('filt1', 'Filter');
model.result('pg2').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Electric Field Norm (es)');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').setIndex('looplevel', 11, 1);
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').setIndex('looplevel', 11, 1);
model.result('pg3').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond2/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg3').feature('surf1').set('expr', 'es.normE');
model.result('pg3').feature('surf1').set('colortable', 'Prism');
model.result('pg3').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg3').feature('surf1').set('colorcalibration', -0.8);
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature.create('str1', 'Streamline');
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('solutionparams', 'parent');
model.result('pg3').feature('str1').set('expr', {'es.Ex' 'es.Ey'});
model.result('pg3').feature('str1').set('titletype', 'none');
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('udist', 0.02);
model.result('pg3').feature('str1').set('maxlen', 0.4);
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('inheritcolor', false);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('data', 'parent');
model.result('pg3').feature('str1').selection.geom('geom1', 1);
model.result('pg3').feature('str1').selection.set([5 6 8 12 13 14 15 18]);
model.result('pg3').feature('str1').set('inheritplot', 'surf1');
model.result('pg3').feature('str1').feature.create('col1', 'Color');
model.result('pg3').feature('str1').feature('col1').set('expr', 'es.normE');
model.result('pg3').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg3').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg3').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg3').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg3').feature('str1').feature.create('filt1', 'Filter');
model.result('pg3').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Electric Field (ewfd)');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').setIndex('looplevel', 11, 1);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').setIndex('looplevel', 11, 1);
model.result('pg4').set('defaultPlotID', 'ElectromagneticWavesFrequencyDomain/phys1/pdef1/pcond2/pg1');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'ewfd.normE');
model.result('pg4').feature('surf1').set('colortable', 'RainbowLight');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'dset3');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('unit', {'' '' '' '' '' '' '' ''});
model.result('pg5').feature('glob1').set('expr', {'ewfd.Rorder_0' 'ewfd.Rorder_0_orth' 'ewfd.Rtotal' 'ewfd.Torder_0' 'ewfd.Torder_0_orth' 'ewfd.Ttotal' 'ewfd.RTtotal' 'ewfd.Atotal'});
model.result('pg5').feature('glob1').set('descr', {'Reflectance, order 0' 'Reflectance, order 0, orthogonal' 'Total reflectance' 'Transmittance, order 0' 'Transmittance, order 0, orthogonal' 'Total transmittance' 'Total reflectance and transmittance' 'Absorptance'});
model.result('pg5').label('Reflectance, Transmittance, and Absorptance (ewfd)');
model.result('pg5').feature('glob1').set('titletype', 'none');
model.result('pg5').feature('glob1').set('xdata', 'expr');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Reflectance, transmittance, and absorptance (1)');
model.result('pg5').feature('glob1').set('xdataexpr', 'V0');
model.result('pg5').feature('glob1').set('xdataunit', 'V');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').label('Polarization Plot (ewfd)');
model.result('pg6').set('data', 'dset3');
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'Polarization states, Color: Phase (Radians)');
model.result('pg6').setIndex('looplevelinput', 'manual', 0);
model.result('pg6').setIndex('looplevelinput', 'manual', 1);
model.result('pg6').setIndex('looplevel', '1', 0);
model.result('pg6').setIndex('looplevel', '1', 1);
model.result('pg6').create('plz1', 'Polarization');
model.result('pg6').feature('plz1').set('linestyle', 'solid');
model.result('pg6').feature('plz1').set('linewidth', 2);
model.result('pg6').feature('plz1').set('display', '0');
model.result('pg6').feature('plz1').create('col1', 'Color');
model.result('pg6').feature('plz1').feature('col1').set('colortable', 'Cyclic');
model.result('pg6').feature('plz1').feature('col1').set('colorlegend', true);
model.result('pg6').feature('plz1').set('legend', true);
model.result('pg6').feature('plz1').set('legendmethod', 'manual');
model.result('pg6').feature('plz1').setIndex('legends', 'Reflection', 0);
model.result('pg6').create('plz2', 'Polarization');
model.result('pg6').feature('plz2').set('linestyle', 'dashed');
model.result('pg6').feature('plz2').set('linewidth', 2);
model.result('pg6').feature('plz2').set('display', '1');
model.result('pg6').feature('plz2').create('col1', 'Color');
model.result('pg6').feature('plz2').feature('col1').set('colortable', 'Cyclic');
model.result('pg6').feature('plz2').feature('col1').set('colorlegend', false);
model.result('pg6').feature('plz2').set('legend', true);
model.result('pg6').feature('plz2').set('legendmethod', 'manual');
model.result('pg6').feature('plz2').setIndex('legends', 'Transmission', 0);
model.result('pg1').run;
model.result.dataset('dset3').selection.geom('geom1', 2);
model.result.dataset('dset3').selection.named('dif1');
model.result('pg1').run;
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('plotarrayenable', true);
model.result('pg1').set('arrayaxis', 'y');
model.result('pg1').feature('surf1').set('arraydim', '1');
model.result('pg1').run;
model.result('pg1').feature('surf1').set('unit', [native2unicode(hex2dec({'00' 'b0'}), 'unicode') ]);
model.result('pg1').feature('surf1').set('colortable', 'Dipole');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').feature.duplicate('surf2', 'surf1');
model.result('pg1').feature('surf2').set('arraydim', '1');
model.result('pg1').run;
model.result('pg1').feature('surf2').set('expr', 'phi');
model.result('pg1').feature('surf2').set('inheritplot', 'surf1');
model.result('pg1').run;
model.result('pg1').create('arws1', 'ArrowSurface');
model.result('pg1').feature('arws1').set('arraydim', '1');
model.result('pg1').feature('arws1').set('expr', {'nx' 'ny'});
model.result('pg1').feature('arws1').set('xnumber', 25);
model.result('pg1').run;
model.result('pg1').create('line1', 'Line');
model.result('pg1').feature('line1').set('arraydim', '1');
model.result('pg1').feature('line1').set('expr', '1');
model.result('pg1').feature('line1').set('linetype', 'tube');
model.result('pg1').feature('line1').set('radiusexpr', '2');
model.result('pg1').feature('line1').set('coloring', 'uniform');
model.result('pg1').feature('line1').set('color', 'black');
model.result('pg1').feature('line1').set('manualindexing', true);
model.result('pg1').feature('line1').create('sel1', 'Selection');
model.result('pg1').feature('line1').feature('sel1').selection.named('uni2');
model.result('pg1').feature('line1').set('arraydim', '1');
model.result('pg1').run;
model.result('pg1').feature.duplicate('line2', 'line1');
model.result('pg1').feature('line2').set('arraydim', '1');
model.result('pg1').run;
model.result('pg1').feature('line2').set('arrayindex', 1);
model.result('pg1').feature.duplicate('line3', 'line2');
model.result('pg1').feature('line3').set('arraydim', '1');
model.result('pg1').run;
model.result('pg1').feature('line3').set('arrayindex', 2);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').stepFirst(1);
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').run;
model.result('pg4').run;
model.result('pg4').set('xlabelactive', true);
model.result('pg4').set('xlabel', 'x');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'y');
model.result('pg4').set('plotarrayenable', true);
model.result('pg4').set('arrayaxis', 'y');
model.result('pg4').feature('surf1').set('arraydim', '1');
model.result('pg4').run;
model.result('pg4').feature('surf1').set('expr', 'nx*ewfd.Ex+nz*ewfd.Ez');
model.result('pg4').feature('surf1').set('colortable', 'WaveLight');
model.result('pg4').feature.duplicate('surf2', 'surf1');
model.result('pg4').feature('surf2').set('arraydim', '1');
model.result('pg4').run;
model.result('pg4').feature('surf2').set('expr', '-nz*ewfd.Ex+nx*ewfd.Ez');
model.result('pg4').feature('surf2').set('inheritplot', 'surf1');
model.result('pg4').run;
model.result('pg4').feature('surf2').stepFirst(1);
model.result('pg4').run;
model.result('pg5').run;
model.result('pg5').label('Transmittance (ewfd)');
model.result('pg5').set('ylabel', 'Transmittance (1)');
model.result('pg5').run;
model.result('pg5').feature('glob1').remove('unit', [0 1 2 5 6 7]);
model.result('pg5').feature('glob1').remove('descr', [0 1 2 5 6 7]);
model.result('pg5').feature('glob1').remove('expr', [0 1 2 5 6 7]);
model.result('pg5').feature('glob1').setIndex('expr', '1-ewfd.RTtotal', 2);
model.result('pg5').feature('glob1').setIndex('descr', 'Transmittance, higher orders', 2);
model.result('pg5').run;
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', [1 10], 1);
model.result('pg6').run;
model.result('pg6').feature.remove('plz1');
model.result('pg6').run;
model.result('pg6').feature('plz2').set('linestyle', 'cycle');
model.result('pg6').feature('plz2').setIndex('legends', '0 V', 0);
model.result('pg6').feature('plz2').setIndex('legends', '4.5 V', 1);
model.result('pg6').run;
model.result.dataset.duplicate('dset4', 'dset3');
model.result.dataset('dset4').selection.named('sel1');
model.result.dataset.create('extr1', 'Extrude2D');
model.result.dataset('extr1').set('data', 'dset4');
model.result.dataset('extr1').set('zmax', 't_LC');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').label('Directors and Applied Field');
model.result('pg7').create('arwv1', 'ArrowVolume');
model.result('pg7').feature('arwv1').set('expr', {'nx' 'ny' 'nz'});
model.result('pg7').feature('arwv1').set('xnumber', 11);
model.result('pg7').feature('arwv1').set('ynumber', 9);
model.result('pg7').feature('arwv1').set('znumber', 1);
model.result('pg7').feature('arwv1').set('color', 'custom');
model.result('pg7').feature('arwv1').set('customcolor', [0.4117647111415863 0.4117647111415863 0.4117647111415863]);
model.result('pg7').run;
model.result('pg7').create('slc1', 'Slice');
model.result('pg7').feature('slc1').set('expr', 'V');
model.result('pg7').feature('slc1').set('descr', 'Electric potential');
model.result('pg7').feature('slc1').set('quickplane', 'xy');
model.result('pg7').feature('slc1').set('quickznumber', 1);
model.result('pg7').feature('slc1').set('colortable', 'Dipole');
model.result('pg7').run;
model.result('pg7').set('edges', false);

model.view('view2').set('showgrid', false);

model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});
model.result('pg7').feature('str1').set('descr', 'Electric field');
model.result('pg7').feature('str1').set('posmethod', 'uniform');
model.result('pg7').feature('str1').set('color', 'gray');
model.result('pg7').run;

model.title('In-Plane Switching of a Liquid Crystal Cell');

model.description(['This model demonstrates the switching capability of a liquid crystal (LC) display cell in In-Plane Switching (IPS) configuration.' newline  newline 'The Oseen-Frank model is used to solve for the LC director (optical axis) distribution when a static electric field is applied. A Weak Form PDE interface is used to define the Oseen-Frank weak equation, whereas the Electrostatics interface is used to solve the electric potential distribution.' newline  newline 'For the given inhomogeneous anisotropic LC material, a full-wave simulation is performed using the Electromagnetic Waves, Frequency Domain interface. The results show that the cell exhibits a large dynamic range in transmission, when the polarizer and analyzer are orthogonally oriented.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;

model.label('in_plane_switching_liquid_crystal_cell.mph');

model.modelNode.label('Components');

out = model;
