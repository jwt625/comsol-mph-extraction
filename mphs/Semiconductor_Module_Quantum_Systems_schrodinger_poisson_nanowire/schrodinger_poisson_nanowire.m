function out = model
%
% schrodinger_poisson_nanowire.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Semiconductor_Module/Quantum_Systems');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 1);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('schr', 'SchrodingerEquation', 'geom1', {'psi'});
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');

model.multiphysics.create('schrp1', 'SchrodingerPoissonCoupling', 'geom1', 1);
model.multiphysics('schrp1').set('Schr_physics', 'schr');
model.multiphysics('schrp1').set('ES_physics', 'es');
model.multiphysics('schrp1').selection.all;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/schr', true);
model.study('std1').feature('stat').setSolveFor('/physics/es', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/schrp1', true);

model.geom('geom1').lengthUnit('nm');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('R0', '50[nm]', 'Radius of nanowire');
model.param.set('m', '0', 'Azimuthal quantum number');
model.param.set('meff', '0.067*me_const', 'Electron effective mass of GaAs');
model.param.set('epsr', '12.9', 'Dielectric constant of GaAs');
model.param.set('Nd', '2*10^18[cm^-3]', 'Doping');
model.param.set('T', '10[K]', 'Temperature');
model.param.set('kT', 'k_B_const*T', 'Thermal energy');
model.param.set('beta', '1/kT', '1/kT');
model.param.set('N0TF', '1/4*(2*meff/(pi*beta*hbar_const^2))^(3/2)', 'Effective DOS, Thomas-Fermi approx');
model.param.set('Ef', '0[eV]', 'Fermi energy level');
model.param.set('V_R0', '-(Ef+0.7[eV])/e_const', 'Electric potential at surface of nanowire');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('Ve', '-e_const*V', 'Electron potential energy');
model.variable('var1').set('eta', 'beta*(Ef-Ve)', 'Energy factor');
model.variable('var1').set('n_TF', 'N0TF*schr.FD_half(eta)', 'Electron density, Thomas-Fermi approx');
model.variable('var1').set('rho_TF', '-e_const*n_TF', 'Space charge density, Thomas-Fermi approx');

model.geom('geom1').create('i1', 'Interval');
model.geom('geom1').feature('i1').setIndex('coord', 'R0', 1);
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'epsr'});

model.physics('schr').prop('ModelProperties').set('m', 'm');
model.physics('schr').feature('meff1').set('meffe_psi', {'meff' '0' '0' '0' 'meff' '0' '0' '0' 'meff'});
model.physics('schr').feature('ve1').set('Ve_src', 'userdef');
model.physics('schr').feature('ve1').set('Ve', 0);
model.physics('es').create('pot1', 'ElectricPotential', 0);
model.physics('es').feature('pot1').selection.set([2]);
model.physics('es').feature('pot1').set('V0', 'V_R0');
model.physics('es').feature('pot1').set('constraintOptions', 'weakConstraints');
model.physics('es').create('scd1', 'SpaceChargeDensity', 1);
model.physics('es').feature('scd1').label('Space Charge Density 1: Ionized dopants');
model.physics('es').feature('scd1').selection.all;
model.physics('es').feature('scd1').set('rhoq', 'e_const*Nd');
model.physics('es').create('scd2', 'SpaceChargeDensity', 1);
model.physics('es').feature('scd2').label('Space Charge Density 2: Thomas Fermi');
model.physics('es').feature('scd2').selection.all;
model.physics('es').feature('scd2').set('rhoq', 'rho_TF');

model.multiphysics('schrp1').set('minput_temperature', 'T');
model.multiphysics('schrp1').set('Ef', 'Ef');
model.multiphysics('schrp1').set('md', 'meff');
model.multiphysics('schrp1').set('gi', '1+(m>0)');
model.multiphysics('schrp1').set('alpha1', 4);

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').set('numelem', 200);

model.study('std1').label('Study 1: Thomas-Fermi');
model.study('std1').feature('stat').setEntry('activate', 'schr', false);
model.study('std1').feature('stat').setEntry('activateCoupling', 'schrp1', false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').label('Electric Potential (es)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond4/pg1');
model.result('pg1').feature.create('lngr1', 'LineGraph');
model.result('pg1').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr1').set('solutionparams', 'parent');
model.result('pg1').feature('lngr1').set('xdata', 'expr');
model.result('pg1').feature('lngr1').set('xdataexpr', 'r');
model.result('pg1').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr1').set('data', 'parent');
model.result('pg1').feature('lngr1').selection.geom('geom1', 1);
model.result('pg1').feature('lngr1').selection.set([1]);
model.result('pg1').run;

model.study.create('std2');
model.study('std2').create('sdpo', 'SchrodingerPoisson');
model.study('std2').feature('sdpo').set('plotgroup', 'Default');
model.study('std2').feature('sdpo').set('neigs', '3');
model.study('std2').feature('sdpo').set('eigunit', '');
model.study('std2').feature('sdpo').set('appnreigs', '4');
model.study('std2').feature('sdpo').set('maxnreigs', '6');
model.study('std2').feature('sdpo').set('eigsr', '-0.1');
model.study('std2').feature('sdpo').set('eiglr', '0.1');
model.study('std2').feature('sdpo').set('eigsi', '-1.0E-7');
model.study('std2').feature('sdpo').set('eigli', '1.0E-7');
model.study('std2').feature('sdpo').set('conrad', '1');
model.study('std2').feature('sdpo').set('conradynhm', '1');
model.study('std2').feature('sdpo').set('conlbdy', '0');
model.study('std2').feature('sdpo').set('conubdy', '1');
model.study('std2').feature('sdpo').set('linpsolnum', 'auto');
model.study('std2').feature('sdpo').set('method', 'minimization_of_global_variable');
model.study('std2').feature('sdpo').set('expr', 'schrp1.global_err');
model.study('std2').feature('sdpo').set('atolterm', '1.0E-6');
model.study('std2').feature('sdpo').set('solnum', 'auto');
model.study('std2').feature('sdpo').set('notsolnum', 'auto');
model.study('std2').feature('sdpo').set('outputmap', {});
model.study('std2').feature('sdpo').set('ngenAUX', '1');
model.study('std2').feature('sdpo').set('goalngenAUX', '1');
model.study('std2').feature('sdpo').set('ngenAUX', '1');
model.study('std2').feature('sdpo').set('goalngenAUX', '1');
model.study('std2').feature('sdpo').setSolveFor('/physics/schr', true);
model.study('std2').feature('sdpo').setSolveFor('/physics/es', true);
model.study('std2').feature('sdpo').setSolveFor('/multiphysics/schrp1', true);
model.study('std2').feature('sdpo').set('eigmethod', 'region');
model.study('std2').feature('sdpo').set('eigsr', -0.15);
model.study('std2').feature('sdpo').set('eiglr', 0.05);
model.study('std2').feature('sdpo').set('useadvanceddisable', true);
model.study('std2').feature('sdpo').set('disabledphysics', {'es/scd2'});
model.study('std2').feature('sdpo').set('useinitsol', true);
model.study('std2').feature('sdpo').set('initmethod', 'sol');
model.study('std2').feature('sdpo').set('initstudy', 'std1');
model.study('std2').feature('sdpo').set('useparam', true);
model.study('std2').feature('sdpo').setIndex('pname', 'R0', 0);
model.study('std2').feature('sdpo').setIndex('plistarr', '', 0);
model.study('std2').feature('sdpo').setIndex('punit', 'm', 0);
model.study('std2').feature('sdpo').setIndex('pname', 'R0', 0);
model.study('std2').feature('sdpo').setIndex('plistarr', '', 0);
model.study('std2').feature('sdpo').setIndex('punit', 'm', 0);
model.study('std2').feature('sdpo').setIndex('pname', 'm', 0);
model.study('std2').feature('sdpo').setIndex('plistarr', '0 1 2 3 4 5 6', 0);
model.study('std2').label(['Study 2: Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger-Poisson']);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'sdpo');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'sdpo');
model.sol('sol2').create('for1', 'For');
model.sol('sol2').feature('for1').set('control', 'sdpo');
model.sol('sol2').feature('for1').set('iter', '5');
model.sol('sol2').create('v2', 'Variables');
model.sol('sol2').feature('v2').set('control', 'user');
model.sol('sol2').feature('v2').set('notsolmethod', 'sol');
model.sol('sol2').feature('v2').set('notsol', 'sol2');
model.sol('sol2').feature('v2').feature('comp1_psi').set('solvefor', 'off');
model.sol('sol2').feature('v2').feature('comp1_schrp1_n_sum').set('solvefor', 'off');
model.sol('sol2').feature('v2').feature('comp1_schrp1_rhoq_old').set('solvefor', 'on');
model.sol('sol2').feature('v2').feature('comp1_schrp1_V_old').set('solvefor', 'on');
model.sol('sol2').feature('v2').feature('comp1_V').set('solvefor', 'off');
model.sol('sol2').feature('v2').feature('comp1_V_lm').set('solvefor', 'off');
model.sol('sol2').feature('v2').set('initmethod', 'init');
model.sol('sol2').feature('v2').set('initsol', 'sol2');
model.sol('sol2').feature('v2').set('initsoluse', 'current');
model.sol('sol2').feature('v2').label('Dependent Variables: Copy Electric Potential from Previous Iteration');
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').feature('su1').label('Solution Store: Store Electric Potential from Previous Iteration');
model.sol('sol2').create('st2', 'StudyStep');
model.sol('sol2').feature('st2').set('studystep', 'sdpo');
model.sol('sol2').feature('st2').label(['Compile Equations 1: Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger-Poisson']);
model.sol('sol2').create('v3', 'Variables');
model.sol('sol2').feature('v3').set('control', 'user');
model.sol('sol2').feature('v3').set('notsolmethod', 'sol');
model.sol('sol2').feature('v3').set('notsol', 'sol2');
model.sol('sol2').feature('v3').set('initmethod', 'sol');
model.sol('sol2').feature('v3').set('initsol', 'sol2');
model.sol('sol2').feature('v3').feature('comp1_psi').set('solvefor', 'on');
model.sol('sol2').feature('v3').feature('comp1_schrp1_n_sum').set('solvefor', 'off');
model.sol('sol2').feature('v3').feature('comp1_schrp1_rhoq_old').set('solvefor', 'off');
model.sol('sol2').feature('v3').feature('comp1_schrp1_V_old').set('solvefor', 'off');
model.sol('sol2').feature('v3').feature('comp1_V').set('solvefor', 'off');
model.sol('sol2').feature('v3').feature('comp1_V_lm').set('solvefor', 'off');
model.sol('sol2').feature('v3').label('Dependent Variables 1: to Solve for Wave Function');
model.sol('sol2').feature('v3').set('initsoluse', 'current');
model.sol('sol2').create('e1', 'Eigenvalue');
model.sol('sol2').feature('e1').create('ep1', 'EigenvalueParam');
model.sol('sol2').feature('e1').feature('ep1').set('control', 'sdpo');
model.sol('sol2').feature('e1').set('neigs', 6);
model.sol('sol2').feature('e1').set('shift', '0');
model.sol('sol2').feature('e1').set('rtol', 1.0E-10);
model.sol('sol2').feature('e1').set('transform', 'none');
model.sol('sol2').feature('e1').set('eigref', '0.1');
model.sol('sol2').feature('e1').set('eigvfunscale', 'average');
model.sol('sol2').feature('e1').set('control', 'sdpo');
model.sol('sol2').feature('e1').label('Eigenvalue Solver 1: Solve for Wave Function');
model.sol('sol2').create('su2', 'StoreSolution');
model.sol('sol2').feature('su2').label('Solution Store: Store Wave Function');
model.sol('sol2').create('cms1', 'CombineSolution');
model.sol('sol2').feature('cms1').set('soloper', 'gensum');
model.sol('sol2').feature('cms1').set('cssol', 'current');
model.sol('sol2').feature('cms1').set('gensumexpressionactive', {'comp1_schrp1_n_sum' 'on'});
model.sol('sol2').feature('cms1').set('gensumexpression', {'comp1_schrp1_n_sum' 'comp1.schrp1.ni'});
model.sol('sol2').feature('cms1').label('Combine Solutions: Sum Particle Density');
model.sol('sol2').feature('cms1').set('control', 'sdpo');
model.sol('sol2').create('v4', 'Variables');
model.sol('sol2').feature('v4').set('control', 'user');
model.sol('sol2').feature('v4').set('notsolmethod', 'sol');
model.sol('sol2').feature('v4').set('notsol', 'sol2');
model.sol('sol2').feature('v4').set('initmethod', 'sol');
model.sol('sol2').feature('v4').set('initsol', 'sol2');
model.sol('sol2').feature('v4').feature('comp1_psi').set('solvefor', 'off');
model.sol('sol2').feature('v4').feature('comp1_schrp1_n_sum').set('solvefor', 'on');
model.sol('sol2').feature('v4').feature('comp1_schrp1_rhoq_old').set('solvefor', 'off');
model.sol('sol2').feature('v4').feature('comp1_schrp1_V_old').set('solvefor', 'off');
model.sol('sol2').feature('v4').feature('comp1_V').set('solvefor', 'off');
model.sol('sol2').feature('v4').feature('comp1_V_lm').set('solvefor', 'off');
model.sol('sol2').feature('v4').set('initsoluse', 'current');
model.sol('sol2').feature('v4').set('notsolmethod', 'sol');
model.sol('sol2').feature('v4').set('notsoluse', 'sol3');
model.sol('sol2').feature('v4').label('Dependent Variables: Collect Particle Density and Previous Electric Potential');
model.sol('sol2').create('st3', 'StudyStep');
model.sol('sol2').feature('st3').set('studystep', 'sdpo');
model.sol('sol2').feature('st3').label(['Compile Equations 2: Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger-Poisson']);
model.sol('sol2').create('v5', 'Variables');
model.sol('sol2').feature('v5').set('control', 'user');
model.sol('sol2').feature('v5').set('notsolmethod', 'sol');
model.sol('sol2').feature('v5').set('notsol', 'sol2');
model.sol('sol2').feature('v5').feature('comp1_psi').set('solvefor', 'off');
model.sol('sol2').feature('v5').feature('comp1_schrp1_n_sum').set('solvefor', 'off');
model.sol('sol2').feature('v5').feature('comp1_schrp1_rhoq_old').set('solvefor', 'off');
model.sol('sol2').feature('v5').feature('comp1_schrp1_V_old').set('solvefor', 'off');
model.sol('sol2').feature('v5').feature('comp1_V').set('solvefor', 'on');
model.sol('sol2').feature('v5').feature('comp1_V_lm').set('solvefor', 'on');
model.sol('sol2').feature('v5').set('initsoluse', 'current');
model.sol('sol2').feature('v5').set('initmethod', 'sol');
model.sol('sol2').feature('v5').set('initsol', 'sol2');
model.sol('sol2').feature('v5').label('Dependent Variables 2: to Solve for Electric Potential');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('s1').label('Stationary Solver 2: Solve for Electric Potential');
model.sol('sol2').create('endfor1', 'EndFor');
model.sol('sol2').feature('v5').set('notsolnum', 'auto');
model.sol('sol2').feature('v5').set('notsolvertype', 'solnum');
model.sol('sol2').feature('v5').set('solnum', 'auto');
model.sol('sol2').feature('v5').set('solvertype', 'solnum');
model.sol('sol2').feature('v4').set('solnum', 'auto');
model.sol('sol2').feature('v4').set('solvertype', 'solnum');
model.sol('sol2').feature('v3').set('notsolnum', 'auto');
model.sol('sol2').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol2').feature('v3').set('solnum', 'auto');
model.sol('sol2').feature('v3').set('solvertype', 'solnum');
model.sol('sol2').feature('v2').set('notsolnum', 'auto');
model.sol('sol2').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol2').feature('v2').set('solnum', 'auto');
model.sol('sol2').feature('v2').set('solvertype', 'solnum');
model.sol('sol2').attach('std2');
model.sol('sol2').runFromTo('st1', 'v1');

model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').label('Probability Density (schr)');
model.result('pg2').set('data', 'dset2');
model.result('pg2').set('defaultPlotID', 'SchrodingerEquation/phys1/pdef1/pcond1/pg4');
model.result('pg2').feature.create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').set('expr', 'schr.Pr');
model.result('pg2').feature('lngr1').set('xdata', 'expr');
model.result('pg2').feature('lngr1').set('xdataexpr', 'R');
model.result('pg2').feature('lngr1').set('smooth', 'internal');
model.result('pg2').feature('lngr1').set('data', 'parent');
model.result('pg2').feature('lngr1').selection.geom('geom1', 1);
model.result('pg2').feature('lngr1').selection.set([1]);
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').label('Potential Energy (schr)');
model.result('pg3').set('data', 'dset2');
model.result('pg3').set('defaultPlotID', 'SchrodingerEquation/phys1/pdef1/pcond1/pg2');
model.result('pg3').feature.create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('expr', 'schr.V_psi');
model.result('pg3').feature('lngr1').set('unit', 'eV');
model.result('pg3').feature('lngr1').set('xdata', 'expr');
model.result('pg3').feature('lngr1').set('xdataexpr', 'R');
model.result('pg3').feature('lngr1').set('smooth', 'everywhere');
model.result('pg3').feature('lngr1').set('data', 'parent');
model.result('pg3').feature('lngr1').selection.geom('geom1', 1);
model.result('pg3').feature('lngr1').selection.set([1]);
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').label('Effective Mass (schr)');
model.result('pg4').set('data', 'dset2');
model.result('pg4').set('defaultPlotID', 'SchrodingerEquation/phys1/pdef1/pcond1/pg3');
model.result('pg4').feature.create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').set('expr', 'schr.meff_psiRR/me_const');
model.result('pg4').feature('lngr1').set('xdata', 'expr');
model.result('pg4').feature('lngr1').set('xdataexpr', 'R');
model.result('pg4').feature('lngr1').set('smooth', 'everywhere');
model.result('pg4').feature('lngr1').set('data', 'parent');
model.result('pg4').feature('lngr1').selection.geom('geom1', 1);
model.result('pg4').feature('lngr1').selection.set([1]);
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').label('Electric Potential (es) 1');
model.result('pg5').set('data', 'dset2');
model.result('pg5').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond4/pg1');
model.result('pg5').feature.create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg5').feature('lngr1').set('solutionparams', 'parent');
model.result('pg5').feature('lngr1').set('xdata', 'expr');
model.result('pg5').feature('lngr1').set('xdataexpr', 'r');
model.result('pg5').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg5').feature('lngr1').set('data', 'parent');
model.result('pg5').feature('lngr1').selection.geom('geom1', 1);
model.result('pg5').feature('lngr1').selection.set([1]);
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').label('Compare n and V with Previous Iteration (schrp1)');
model.result('pg6').set('data', 'dset2');
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'Compare n and V with previous iteration');
model.result('pg6').set('ylabel', 'Particle density');
model.result('pg6').set('showsecylabel', 'on');
model.result('pg6').set('yseclabel', 'Potential energy (eV)');
model.result('pg6').set('twoyaxes', true);
model.result('pg6').set('data', 'dset2');
model.result('pg6').set('defaultPlotID', 'SchrodingerCouplingFeatures/domcpl1/pdef1/pcond1/pg1');
model.result('pg6').feature.create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').label('Potential Energy');
model.result('pg6').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg6').feature('lngr1').set('plotonsecyaxis', true);
model.result('pg6').feature('lngr1').set('expr', 'schrp1.zq*schrp1.V');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', 'R');
model.result('pg6').feature('lngr1').set('smooth', 'internal');
model.result('pg6').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg6').feature('lngr1').set('data', 'parent');
model.result('pg6').feature('lngr1').selection.geom('geom1', 1);
model.result('pg6').feature('lngr1').selection.set([1]);
model.result('pg6').feature.create('lngr2', 'LineGraph');
model.result('pg6').feature('lngr2').label('Potential Energy from Previous Iteration');
model.result('pg6').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg6').feature('lngr2').set('plotonsecyaxis', true);
model.result('pg6').feature('lngr2').set('expr', 'schrp1.zq*schrp1.V_old');
model.result('pg6').feature('lngr2').set('xdata', 'expr');
model.result('pg6').feature('lngr2').set('xdataexpr', 'R');
model.result('pg6').feature('lngr2').set('smooth', 'internal');
model.result('pg6').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg6').feature('lngr2').set('data', 'parent');
model.result('pg6').feature('lngr2').selection.geom('geom1', 1);
model.result('pg6').feature('lngr2').selection.set([1]);
model.result('pg6').feature.create('lngr3', 'LineGraph');
model.result('pg6').feature('lngr3').label('Particle Density from Weighted Sum');
model.result('pg6').feature('lngr3').set('showsolutionparams', 'on');
model.result('pg6').feature('lngr3').set('expr', 'schrp1.n_sum');
model.result('pg6').feature('lngr3').set('xdata', 'expr');
model.result('pg6').feature('lngr3').set('xdataexpr', 'R');
model.result('pg6').feature('lngr3').set('linestyle', 'dashed');
model.result('pg6').feature('lngr3').set('linecolor', 'black');
model.result('pg6').feature('lngr3').set('smooth', 'internal');
model.result('pg6').feature('lngr3').set('showsolutionparams', 'on');
model.result('pg6').feature('lngr3').set('data', 'parent');
model.result('pg6').feature('lngr3').selection.geom('geom1', 1);
model.result('pg6').feature('lngr3').selection.set([1]);
model.result('pg6').feature.create('lngr4', 'LineGraph');
model.result('pg6').feature('lngr4').label('Particle Density');
model.result('pg6').feature('lngr4').set('showsolutionparams', 'on');
model.result('pg6').feature('lngr4').set('expr', 'schrp1.rhoq/schrp1.q');
model.result('pg6').feature('lngr4').set('xdata', 'expr');
model.result('pg6').feature('lngr4').set('xdataexpr', 'R');
model.result('pg6').feature('lngr4').set('smooth', 'internal');
model.result('pg6').feature('lngr4').set('showsolutionparams', 'on');
model.result('pg6').feature('lngr4').set('data', 'parent');
model.result('pg6').feature('lngr4').selection.geom('geom1', 1);
model.result('pg6').feature('lngr4').selection.set([1]);
model.result('pg6').feature.create('lngr5', 'LineGraph');
model.result('pg6').feature('lngr5').label('Particle Density from Previous Iteration');
model.result('pg6').feature('lngr5').set('showsolutionparams', 'on');
model.result('pg6').feature('lngr5').set('expr', 'schrp1.rhoq_old/schrp1.q');
model.result('pg6').feature('lngr5').set('xdata', 'expr');
model.result('pg6').feature('lngr5').set('xdataexpr', 'R');
model.result('pg6').feature('lngr5').set('smooth', 'internal');
model.result('pg6').feature('lngr5').set('showsolutionparams', 'on');
model.result('pg6').feature('lngr5').set('data', 'parent');
model.result('pg6').feature('lngr5').selection.geom('geom1', 1);
model.result('pg6').feature('lngr5').selection.set([1]);
model.result('pg2').run;
model.result('pg2').set('data', 'dset4');
model.result('pg2').run;
model.result('pg6').run;
model.result.move('pg6', 4);
model.result.move('pg6', 3);
model.result.move('pg6', 2);
model.result.move('pg6', 1);
model.result('pg6').label('Compare V and n with Thomas-Fermi Approximation');
model.result('pg6').set('title', 'Compare V and n with Thomas-Fermi Approximation');
model.result('pg6').set('ylabel', 'Electron density / Nd');
model.result('pg6').set('yseclabel', 'Electron potential energy (eV)');
model.result('pg6').run;
model.result('pg6').feature('lngr1').label('Electron Potential Energy');
model.result('pg6').feature('lngr1').set('descractive', true);
model.result('pg6').feature('lngr1').set('descr', 'Electron Potential Energy');
model.result('pg6').run;
model.result('pg6').feature('lngr2').label('Electron Potential Energy from Previous Iteration');
model.result('pg6').feature('lngr2').set('descractive', true);
model.result('pg6').feature('lngr2').set('descr', 'Electron Potential Energy, Previous Iteration');
model.result('pg6').run;
model.result('pg6').feature('lngr3').label('Electron Density from Weighted Sum');
model.result('pg6').feature('lngr3').set('expr', 'schrp1.n_sum/Nd');
model.result('pg6').feature('lngr3').set('descractive', true);
model.result('pg6').feature('lngr3').set('descr', 'Electron Density, Weighted Sum');
model.result('pg6').run;
model.result('pg6').feature('lngr4').label('Electron Density');
model.result('pg6').feature('lngr4').set('expr', 'schrp1.rhoq/schrp1.q/Nd');
model.result('pg6').feature('lngr4').set('descractive', true);
model.result('pg6').feature('lngr4').set('descr', 'Electron Density');
model.result('pg6').run;
model.result('pg6').feature('lngr5').label('Electron Density from Previous Iteration');
model.result('pg6').feature('lngr5').set('expr', 'schrp1.rhoq_old/schrp1.q/Nd');
model.result('pg6').feature('lngr5').set('descractive', true);
model.result('pg6').feature('lngr5').set('descr', 'Electron Density, Previous Iteration');
model.result('pg6').feature.duplicate('lngr6', 'lngr5');
model.result('pg6').run;
model.result('pg6').feature('lngr6').label('Electron Density from Thomas-Fermi Approximation');
model.result('pg6').feature('lngr6').set('data', 'dset1');
model.result('pg6').feature('lngr6').set('expr', 'n_TF/Nd');
model.result('pg6').feature('lngr6').set('descr', 'Electron Density, Thomas-Fermi');
model.result('pg6').feature('lngr6').set('linestyle', 'dotted');
model.result('pg6').feature('lngr6').set('linecolor', 'black');
model.result('pg6').feature.duplicate('lngr7', 'lngr6');
model.result('pg6').run;
model.result('pg6').feature('lngr7').label('Electron Potential Energy from Thomas-Fermi Approximation');
model.result('pg6').feature('lngr7').set('plotonsecyaxis', true);
model.result('pg6').feature('lngr7').set('expr', '-V');
model.result('pg6').feature('lngr7').set('descr', 'Electron Potential Energy, Thomas-Fermi');
model.result('pg6').run;
model.result('pg6').create('ann1', 'Annotation');
model.result('pg6').feature('ann1').set('plotonsecyaxis', true);
model.result('pg6').feature('ann1').set('text', '$\longrightarrow$');
model.result('pg6').feature('ann1').set('posxexpr', 46);
model.result('pg6').feature('ann1').set('posyexpr', 0.47);
model.result('pg6').feature('ann1').set('showpoint', false);
model.result('pg6').feature('ann1').set('latexmarkup', true);

model.sol('sol2').feature('s1').feature('fc1').set('plot', true);
model.sol('sol2').feature('s1').feature('fc1').set('plotgroup', 'pg6');
model.sol('sol2').runAll;

model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result.move('pg7', 5);
model.result.move('pg7', 4);
model.result.move('pg7', 3);
model.result.move('pg7', 2);
model.result('pg7').set('axislimits', true);
model.result('pg7').set('xmin', 0);
model.result('pg7').set('xmax', 16);
model.result('pg7').set('ymin', 0.9);
model.result('pg7').set('ymax', 1.002);
model.result('pg7').set('yminsec', '-86.5e-3');
model.result('pg7').set('ymaxsec', '-80.5e-3');
model.result('pg7').run;
model.result('pg7').feature('ann1').set('posxexpr', 14.5);
model.result('pg7').feature('ann1').set('posyexpr', -0.0827);
model.result('pg7').run;
model.result('pg6').run;
model.result('pg6').feature.duplicate('lngr8', 'lngr6');
model.result('pg6').run;
model.result('pg6').feature('lngr8').label('Electron Density from m=0');
model.result('pg6').feature('lngr8').set('expr', 'sum(withsol(''sol4'',schrp1.ni,setval(m,0),setind(lambda,jj)),jj,1,4)/Nd');
model.result('pg6').feature('lngr8').set('descr', 'm=0');
model.result('pg6').feature('lngr8').set('linestyle', 'dashdot');
model.result('pg6').feature('lngr8').set('linecolor', 'cycle');
model.result('pg6').feature.duplicate('lngr9', 'lngr8');
model.result('pg6').run;
model.result('pg6').feature('lngr9').label('Electron Density from m=+/-1');
model.result('pg6').feature('lngr9').set('expr', 'sum(withsol(''sol4'',schrp1.ni,setval(m,1),setind(lambda,jj)),jj,1,4)/Nd');
model.result('pg6').feature('lngr9').set('descr', '|m|=1');
model.result('pg6').feature.duplicate('lngr10', 'lngr9');
model.result('pg6').run;
model.result('pg6').feature('lngr10').label('Electron Density from m=+/-2');
model.result('pg6').feature('lngr10').set('expr', 'sum(withsol(''sol4'',schrp1.ni,setval(m,2),setind(lambda,jj)),jj,1,4)/Nd');
model.result('pg6').feature('lngr10').set('descr', '|m|=2');
model.result('pg6').feature.duplicate('lngr11', 'lngr10');
model.result('pg6').run;
model.result('pg6').feature('lngr11').label('Electron Density from m=+/-3');
model.result('pg6').feature('lngr11').set('expr', 'sum(withsol(''sol4'',schrp1.ni,setval(m,3),setind(lambda,jj)),jj,1,3)/Nd');
model.result('pg6').feature('lngr11').set('descr', '|m|=3');
model.result('pg6').feature.duplicate('lngr12', 'lngr11');
model.result('pg6').run;
model.result('pg6').feature('lngr12').label('Electron Density from m=+/-4');
model.result('pg6').feature('lngr12').set('expr', 'sum(withsol(''sol4'',schrp1.ni,setval(m,4),setind(lambda,jj)),jj,1,3)/Nd');
model.result('pg6').feature('lngr12').set('descr', '|m|=4');
model.result('pg6').feature.duplicate('lngr13', 'lngr12');
model.result('pg6').run;
model.result('pg6').feature('lngr13').label('Electron Density from m=+/-5');
model.result('pg6').feature('lngr13').set('expr', 'sum(withsol(''sol4'',schrp1.ni,setval(m,5),setind(lambda,jj)),jj,1,2)/Nd');
model.result('pg6').feature('lngr13').set('descr', '|m|=5');
model.result('pg6').run;
model.result.numerical.create('pev1', 'EvalPoint');
model.result.numerical('pev1').label('Point Evaluation 1: check charge neutrality');
model.result.numerical('pev1').set('data', 'dset2');
model.result.numerical('pev1').selection.set([2]);
model.result.numerical('pev1').setIndex('expr', '(schrp1.int(2*pi*R*schrp1.n_sum)-2*pi*R*es.nD/e_const)/(pi*R^2*Nd)-1', 0);
model.result.numerical('pev1').setIndex('descr', 'Relative error', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Point Evaluation 1: check charge neutrality');
model.result.numerical('pev1').set('table', 'tbl1');
model.result.numerical('pev1').setResult;

model.title(['Self-Consistent Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Poisson Results for a GaAs Nanowire']);

model.description(['This benchmark model simulates a GaAs nanowire using the self-consistent Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Poisson theory to compute the electron density and the confining potential profiles. The predefined Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Poisson multiphysics coupling feature is combined with the dedicated Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Poisson study type to provide streamlined procedure for model setup and automated creation of self-consistent iterations with tunable parameters for optimizing the convergence under different conditions. The computed electron density and confining potential profiles compare well with the figures in the reference paper, with both profiles reproducing the distinct Friedel-type spatial oscillations at low temperatures.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('schrodinger_poisson_nanowire.mph');

model.modelNode.label('Components');

out = model;
