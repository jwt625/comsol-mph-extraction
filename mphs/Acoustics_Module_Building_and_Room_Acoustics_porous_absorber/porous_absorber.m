function out = model
%
% porous_absorber.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Building_and_Room_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('f_max', '10[kHz]', 'Maximal frequency in the model');
model.param.set('lambda_min', '343[m/s]/f_max', 'Minimal wavelength');
model.param.set('theta0', '0[deg]', 'Incident wave angle');
model.param.set('W', '20[cm]', 'Domain width');
model.param.set('H', '40[cm]', 'Air domain height');
model.param.set('Hp', '10[cm]', 'Porous layer height');
model.param.set('a', '2.5[cm]', 'Inclusion radius');
model.param.set('Hpml', '20[cm]', 'PML Domain Height');
model.param.set('mu0', '1.8e-5[Pa*s]', 'Dynamic viscosity of air');
model.param.set('epsilonP0', '0.995', 'Melamine foam porosity');
model.param.set('Rf0', '10.5e3[Pa*s/m^2]', 'Flow resistivity');
model.param.set('tau0', '1.0059', 'Tortuosity');
model.param.set('Lv0', '240[um]', 'Viscous characteristic length');
model.param.set('Lth0', '470[um]', 'Thermal characteristic length');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'W' 'H+Hpml'});
model.geom('geom1').feature('r1').set('layerbottom', false);
model.geom('geom1').feature('r1').set('layertop', true);
model.geom('geom1').feature('r1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('r1').setIndex('layer', 'Hpml', 0);
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'W' 'Hp'});
model.geom('geom1').feature('r2').set('pos', {'0' '-Hp'});
model.geom('geom1').run('r2');
model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 'a');
model.geom('geom1').feature('c1').set('pos', {'W/2' '-Hp/2'});
model.geom('geom1').run('fin');

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('kx_e', 'sin(theta0)', 'Plane wave direction, x');
model.variable('var1').set('ky_e', '-cos(theta0)', 'Plane wave direction, y');
model.variable('var1').set('k0', 'intop2(acpr.k)', 'Free-field wave number');
model.variable('var1').set('kx', 'k0*kx_e', 'Background plane wave k_x');
model.variable('var1').set('ky', 'k0*ky_e', 'Background plane wave k_y');
model.variable('var1').set('p_inc', 'acpr.p_b', 'Incident plane wave (background pressure field)');
model.variable('var1').set('p_scat', 'acpr.p_s', 'Scattered wave (air domain)');
model.variable('var1').set('Z', 'aveop1(acpr.p_t/(nx*down(acpr.vx)+ny*down(acpr.vy)))/intop2(acpr.rho*acpr.c)', 'Specific surface normal impedance');
model.variable('var1').set('R', 'aveop1(down(p_scat/p_inc))', 'Reflection coefficient (averaged)');
model.variable('var1').set('alpha_R', '1-abs(R)^2', 'Absorption coefficient (based on R)');
model.variable('var1').set('Pin', 'intop3(-acpr.I_by)', 'Incident power');
model.variable('var1').set('Pout', 'intop3(acpr.I_sy)', 'Outgoing power');
model.variable('var1').set('alpha', '1-Pout/Pin', 'Absorption coefficient');
model.variable.create('var2');
model.variable('var2').model('comp1');

% To import content from file, use:
% model.variable('var2').loadFile('FILENAME');
model.variable('var2').set('Z_ana', 'aveop1(-i*intop1(acpr.Z)*intop1(acpr.k)/kx_ana*cot(kx_ana*Hp))/intop2(acpr.rho*acpr.c)', 'Specific surface normal impedance (analytical)');
model.variable('var2').set('ky_ana', 'intop2(acpr.k)*sin(theta0)');
model.variable('var2').set('kx_ana', 'sqrt(intop1(acpr.k)^2-ky_ana^2)');
model.variable('var2').set('R_ana', '(Z_ana*cos(theta0)-1)/(Z_ana*cos(theta0)+1)', 'Reflection coefficient (analytical)');
model.variable('var2').set('alpha_ana', '1-abs(R_ana)^2', 'Absorption coefficient (analytical)');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 0);
model.cpl('intop1').selection.set([1]);
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').selection.geom('geom1', 0);
model.cpl('intop2').selection.set([3]);
model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.geom('geom1', 1);
model.cpl('aveop1').selection.set([4]);
model.cpl.create('intop3', 'Integration', 'geom1');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').selection.geom('geom1', 1);
model.cpl('intop3').selection.set([4]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Melamine Foam');
model.material('mat2').selection.set([1]);
model.material('mat2').propertyGroup('def').set('porosity', {'epsilonP0'});
model.material('mat2').propertyGroup.create('PoroacousticsModel', 'Poroacoustics_model');
model.material('mat2').propertyGroup('PoroacousticsModel').set('Rf', {'Rf0'});
model.material('mat2').propertyGroup('PoroacousticsModel').set('Lth', {'Lth0'});
model.material('mat2').propertyGroup('PoroacousticsModel').set('Lv', {'Lv0'});
model.material('mat2').propertyGroup('PoroacousticsModel').set('tau', {'tau0'});

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.set([3]);
model.coordSystem('pml1').set('stretchingType', 'rational');
model.coordSystem('pml1').set('PMLfactor', '1/cos(theta0)');

model.physics('acpr').create('bpf1', 'BackgroundPressureField', 2);
model.physics('acpr').feature('bpf1').selection.set([2]);
model.physics('acpr').feature('bpf1').set('pamp', 1);
model.physics('acpr').feature('bpf1').set('c_mat', 'from_mat');
model.physics('acpr').feature('bpf1').set('dir', {'kx_e' 'ky_e' '0'});
model.physics('acpr').feature('bpf1').set('CalculateIntensity', true);
model.physics('acpr').feature('bpf1').set('rho_mat', 'from_mat');
model.physics('acpr').create('pom1', 'PoroacousticsModel', 2);
model.physics('acpr').feature('pom1').selection.set([1]);
model.physics('acpr').feature('pom1').set('FluidModel', 'JohnsonChampouxAllard');
model.physics('acpr').feature('pom1').set('FluidMaterial', 'mat1');
model.physics('acpr').create('pc1', 'PeriodicCondition', 1);
model.physics('acpr').feature('pc1').selection.set([1 8]);
model.physics('acpr').feature('pc1').set('PeriodicType', 'Floquet');
model.physics('acpr').feature('pc1').set('kFloquet', {'kx' 'ky' '0'});
model.physics('acpr').create('pc2', 'PeriodicCondition', 1);
model.physics('acpr').feature('pc2').selection.set([3 9]);
model.physics('acpr').feature('pc2').set('PeriodicType', 'Floquet');
model.physics('acpr').feature('pc2').set('kFloquet', {'kx' 'ky' '0'});
model.physics('acpr').create('pc3', 'PeriodicCondition', 1);
model.physics('acpr').feature('pc3').selection.set([5 10]);
model.physics('acpr').feature('pc3').set('PeriodicType', 'Floquet');
model.physics('acpr').feature('pc3').set('kFloquet', {'kx' 'ky' '0'});

model.mesh('mesh1').create('id1', 'IdenticalMesh');
model.mesh('mesh1').feature('id1').selection('group1').set([1]);
model.mesh('mesh1').feature('id1').selection('group2').set([8]);
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').selection.set([1 4]);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'lambda_min/5');
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([5 10]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 10);
model.mesh('mesh1').run;

model.study('std1').feature('freq').set('plist', '{10, 12.5, 16, 20, 25, 31.5, 40, 50, 63, 80, 100, 125, 160, 200, 250, 315, 400, 500, 630, 800} {825, 850, 875, 900, 925, 950, 975, 1e3, 1.03e3, 1.06e3, 1.09e3, 1.12e3, 1.15e3, 1.18e3, 1.22e3, 1.25e3, 1.28e3, 1.32e3, 1.36e3, 1.4e3, 1.45e3, 1.5e3, 1.55e3, 1.6e3, 1.65e3, 1.7e3, 1.75e3, 1.8e3, 1.85e3, 1.9e3, 1.95e3, 2e3, 2.06e3, 2.12e3, 2.18e3, 2.24e3, 2.3e3, 2.36e3, 2.43e3, 2.5e3, 2.58e3, 2.65e3, 2.72e3, 2.8e3, 2.9e3, 3e3, 3.07e3, 3.15e3, 3.25e3, 3.35e3, 3.45e3, 3.55e3, 3.65e3, 3.75e3, 3.87e3, 4e3, 4.12e3, 4.25e3, 4.37e3, 4.5e3, 4.62e3, 4.75e3, 4.87e3, 5e3, 5.15e3, 5.3e3, 5.45e3, 5.6e3, 5.8e3, 6e3, 6.15e3, 6.3e3, 6.5e3, 6.7e3, 6.9e3, 7.1e3, 7.3e3, 7.5e3, 7.75e3, 8e3, 8.25e3, 8.5e3, 8.75e3, 9e3, 9.25e3, 9.5e3, 9.75e3, 1e4}');
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'f_max', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'Hz', 0);
model.study('std1').feature('param').setIndex('pname', 'f_max', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'Hz', 0);
model.study('std1').feature('param').setIndex('pname', 'theta0', 0);
model.study('std1').feature('param').setIndex('plistarr', '0[deg] 45[deg]', 0);
model.study('std1').feature('param').setIndex('punit', 'deg', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'{10, 12.5, 16, 20, 25, 31.5, 40, 50, 63, 80, 100, 125, 160, 200, 250, 315, 400, 500, 630, 800} {825, 850, 875, 900, 925, 950, 975, 1e3, 1.03e3, 1.06e3, 1.09e3, 1.12e3, 1.15e3, 1.18e3, 1.22e3, 1.25e3, 1.28e3, 1.32e3, 1.36e3, 1.4e3, 1.45e3, 1.5e3, 1.55e3, 1.6e3, 1.65e3, 1.7e3, 1.75e3, 1.8e3, 1.85e3, 1.9e3, 1.95e3, 2e3, 2.06e3, 2.12e3, 2.18e3, 2.24e3, 2.3e3, 2.36e3, 2.43e3, 2.5e3, 2.58e3, 2.65e3, 2.72e3, 2.8e3, 2.9e3, 3e3, 3.07e3, 3.15e3, 3.25e3, 3.35e3, 3.45e3, 3.55e3, 3.65e3, 3.75e3, 3.87e3, 4e3, 4.12e3, 4.25e3, 4.37e3, 4.5e3, 4.62e3, 4.75e3, 4.87e3, 5e3, 5.15e3, 5.3e3, 5.45e3, 5.6e3, 5.8e3, 6e3, 6.15e3, 6.3e3, 6.5e3, 6.7e3, 6.9e3, 7.1e3, 7.3e3, 7.5e3, 7.75e3, 8e3, 8.25e3, 8.5e3, 8.75e3, 9e3, 9.25e3, 9.5e3, 9.75e3, 1e4}'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'theta0'});
model.batch('p1').set('plistarr', {'0[deg] 45[deg]'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 108, 0);
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 108, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').label('Sound Pressure Level (acpr)');
model.result('pg1').run;
model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.set([1 2 4]);
model.result.dataset.create('arr1', 'Array2D');
model.result.dataset('arr1').set('data', 'dset2');
model.result.dataset('arr1').set('fullsize', [4 1]);
model.result.dataset('arr1').set('floquetper', true);
model.result.dataset('arr1').set('wavevector', {'kx' 'ky'});
model.result('pg1').run;
model.result('pg1').label('Total Acoustic Pressure');
model.result('pg1').set('data', 'arr1');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 1, 1);
model.result('pg1').run;
model.result.duplicate('pg3', 'pg1');
model.result('pg3').run;
model.result('pg3').label('Scattered Acoustic Pressure');
model.result('pg3').run;
model.result('pg3').feature('surf1').set('expr', 'acpr.p_s');
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 2, 1);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 28, 0);
model.result('pg3').run;
model.result('pg1').run;
model.result.duplicate('pg4', 'pg1');
model.result('pg4').run;
model.result('pg4').label('Incident Acoustic Pressure');
model.result('pg4').run;
model.result('pg4').feature('surf1').set('expr', 'acpr.p_b');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Point Pressure');
model.result('pg5').set('data', 'dset2');
model.result('pg5').set('titletype', 'label');
model.result('pg5').create('ptgr1', 'PointGraph');
model.result('pg5').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg5').feature('ptgr1').set('linewidth', 'preference');
model.result('pg5').feature('ptgr1').selection.set([2]);
model.result('pg5').feature('ptgr1').set('legend', true);
model.result('pg5').run;
model.result('pg5').set('xlog', true);
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Normal Impedance');
model.result('pg6').set('data', 'dset2');
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'f (Hz)');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'Z/(rho*c) (1)');
model.result('pg6').set('legendpos', 'lowerleft');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').setIndex('expr', 'Z', 0);
model.result('pg6').feature('glob1').setIndex('expr', 'Z_ana', 1);
model.result('pg6').run;
model.result('pg6').set('xlog', true);
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Absorption Coefficient');
model.result('pg7').set('data', 'dset2');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', 'f (Hz)');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', '\alpha (1)');
model.result('pg7').set('legendpos', 'lowerright');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').setIndex('expr', 'alpha', 0);
model.result('pg7').feature('glob1').setIndex('expr', 'alpha_R', 1);
model.result('pg7').feature('glob1').setIndex('expr', 'alpha_ana', 2);
model.result('pg7').run;
model.result('pg7').set('xlog', true);
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Normal Incidence Absorption');
model.result('pg8').set('data', 'dset2');
model.result('pg8').setIndex('looplevelinput', 'manual', 1);
model.result('pg8').setIndex('looplevel', [1], 1);
model.result('pg8').set('titletype', 'label');
model.result('pg8').set('xlabelactive', true);
model.result('pg8').set('xlabel', 'f (Hz)');
model.result('pg8').set('ylabelactive', true);
model.result('pg8').set('ylabel', '\alpha (1)');
model.result('pg8').set('xlog', true);
model.result('pg8').set('showlegends', false);
model.result('pg8').create('oct1', 'OctaveBand');
model.result('pg8').feature('oct1').set('quantity', 'bandpower');
model.result('pg8').feature('oct1').set('markerpos', 'datapoints');
model.result('pg8').feature('oct1').set('linewidth', 'preference');
model.result('pg8').feature('oct1').selection.geom('geom1');
model.result('pg8').feature('oct1').set('expr', 'alpha');
model.result('pg8').feature('oct1').set('exprtype', 'general');
model.result('pg8').feature('oct1').set('quantity', 'bandaveragepsd');
model.result('pg8').feature.duplicate('oct2', 'oct1');
model.result('pg8').run;
model.result('pg8').feature('oct2').set('bandtype', 'octave3');
model.result('pg8').feature.duplicate('oct3', 'oct2');
model.result('pg8').run;
model.result('pg8').feature('oct3').set('quantity', 'continuous');
model.result('pg8').feature('oct3').set('linewidth', 2);
model.result('pg8').run;
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').run;

model.title('Porous Absorber');

model.description('This is a 2D model of a porous sound-absorbing wall-lining material. The absorption coefficient alpha and specific surface impedance Z are determined as functions of frequency for two different incidence angles. The example uses Periodic Floquet boundary conditions.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('porous_absorber.mph');

model.modelNode.label('Components');

out = model;
