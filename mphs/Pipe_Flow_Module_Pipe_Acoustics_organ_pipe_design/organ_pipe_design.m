function out = model
%
% organ_pipe_design.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Pipe_Flow_Module/Pipe_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('pafd', 'FrequencyPipeAcoustics', 'geom1');
model.physics('pafd').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/pafd', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('f', '440[Hz]', 'Frequency of an A4 note');
model.param.set('Lguess', '1/2*c0/f', 'Half wavelength');
model.param.set('L', '0.3805[m]', 'Pipe length');
model.param.set('d', '3[cm]', 'Inner pipe diameter');
model.param.set('a', 'd/2', 'Inner pipe radius');
model.param.set('dw', '2[mm]', 'Pipe wall thickness');
model.param.set('Ew', '1e9[Pa]', 'Pipe wall Young''s modulus');
model.param.set('nuw', '0.4', 'Pipe wall Poisson''s ratio');
model.param.set('c0', '343[m/s]', 'Speed of sound');
model.param.set('ka', '2*pi*f/c0*a', 'Wave number times tube radius');
model.param.set('h_min', 'c0/3000[Hz]/20', 'Mesh size at 3000 Hz');
model.param.set('T0', '20[degC]', 'Ambient temperature');
model.param.set('p0', '1[atm]', 'Ambient pressure');
model.param.set('dL', '0.6*a', 'End correction');
model.param.set('f_est', 'c0/(2*(L+dL))', 'Estimated resonance frequency');

model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'table');
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 2);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 1);
model.geom('geom1').feature('pol1').setIndex('table', 'L', 1, 2);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('pafd').feature('fp1').set('minput_temperature', 'T0');
model.physics('pafd').feature('fp1').set('minput_pressure', 'p0');
model.physics('pafd').feature('pipe1').set('shape', 'Round');
model.physics('pafd').feature('pipe1').set('innerd', 'd');
model.physics('pafd').feature('pipe1').set('pipeModel', 'AnchoredAtOneEnd');
model.physics('pafd').feature('pipe1').set('E_mat', 'userdef');
model.physics('pafd').feature('pipe1').set('E', 'Ew');
model.physics('pafd').feature('pipe1').set('nu_mat', 'userdef');
model.physics('pafd').feature('pipe1').set('nu', 'nuw');
model.physics('pafd').feature('pipe1').set('dw', 'dw');
model.physics('pafd').create('endimp1', 'EndImpedance', 0);
model.physics('pafd').feature('endimp1').selection.set([2]);
model.physics('pafd').feature('endimp1').set('Type', 'UnflangedPipeCircular');
model.physics('pafd').create('pres1', 'Pressure', 0);
model.physics('pafd').feature('pres1').selection.set([1]);
model.physics('pafd').feature('pres1').set('p', 1);

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.set([1]);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'h_min');
model.mesh('mesh1').feature('size').set('hmin', 'h_min/2');
model.mesh('mesh1').run;

model.study('std1').feature('freq').set('plist', 'range(f_est-30,0.5,f_est+30)');
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'f', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'Hz', 0);
model.study('std1').feature('param').setIndex('pname', 'f', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'Hz', 0);
model.study('std1').feature('param').setIndex('pname', 'd', 0);
model.study('std1').feature('param').setIndex('plistarr', '2[cm] 2.5[cm] 3[cm] 3.5[cm] 4[cm]', 0);
model.study('std1').label('Study 1 - Inner Pipe Diameter Sweep');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(f_est-30,0.5,f_est+30)'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'d'});
model.batch('p1').set('plistarr', {'2[cm] 2.5[cm] 3[cm] 3.5[cm] 4[cm]'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Acoustic Pressure (pafd)');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 121, 0);
model.result('pg1').setIndex('looplevel', 5, 1);
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 121, 0);
model.result('pg1').setIndex('looplevel', 5, 1);
model.result('pg1').set('defaultPlotID', 'pipeacoustics_PhysicsInterfaceComponents/icom2/pdef1/pcond2/pg1');
model.result('pg1').feature.create('line1', 'Line');
model.result('pg1').feature('line1').label('Line');
model.result('pg1').feature('line1').set('showsolutionparams', 'on');
model.result('pg1').feature('line1').set('linetype', 'tube');
model.result('pg1').feature('line1').set('radiusexpr', '0.5*pafd.dh');
model.result('pg1').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg1').feature('line1').set('colortable', 'Wave');
model.result('pg1').feature('line1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').feature('line1').set('smooth', 'internal');
model.result('pg1').feature('line1').set('showsolutionparams', 'on');
model.result('pg1').feature('line1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Acoustic Velocity (pafd)');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 121, 0);
model.result('pg2').setIndex('looplevel', 5, 1);
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 121, 0);
model.result('pg2').setIndex('looplevel', 5, 1);
model.result('pg2').set('defaultPlotID', 'pipeacoustics_PhysicsInterfaceComponents/icom2/pdef1/pcond2/pg2');
model.result('pg2').feature.create('line1', 'Line');
model.result('pg2').feature('line1').label('Line');
model.result('pg2').feature('line1').set('showsolutionparams', 'on');
model.result('pg2').feature('line1').set('expr', 'u');
model.result('pg2').feature('line1').set('linetype', 'tube');
model.result('pg2').feature('line1').set('radiusexpr', '0.5*pafd.dh');
model.result('pg2').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg2').feature('line1').set('colorscalemode', 'linearsymmetric');
model.result('pg2').feature('line1').set('smooth', 'internal');
model.result('pg2').feature('line1').set('showsolutionparams', 'on');
model.result('pg2').feature('line1').set('data', 'parent');
model.result('pg1').run;

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').setSolveFor('/physics/pafd', true);
model.study('std2').feature('freq').set('plist', 'range(f_est-30,0.5,f_est+30)');
model.study('std2').feature('freq').set('useparam', true);
model.study('std2').feature('freq').setIndex('pname_aux', 'f', 0);
model.study('std2').feature('freq').setIndex('plistarr_aux', '', 0);
model.study('std2').feature('freq').setIndex('punit_aux', 'Hz', 0);
model.study('std2').feature('freq').setIndex('pname_aux', 'f', 0);
model.study('std2').feature('freq').setIndex('plistarr_aux', '', 0);
model.study('std2').feature('freq').setIndex('punit_aux', 'Hz', 0);
model.study('std2').feature('freq').setIndex('pname_aux', 'dw', 0);
model.study('std2').feature('freq').setIndex('plistarr_aux', '0.5[mm] 1[mm] 2[mm] 3[mm]', 0);
model.study('std2').label('Study 2 - Pipe Wall Thickness Sweep');
model.study('std2').setGenPlots(false);

model.sol.create('sol8');
model.sol('sol8').study('std2');
model.sol('sol8').create('st1', 'StudyStep');
model.sol('sol8').feature('st1').set('study', 'std2');
model.sol('sol8').feature('st1').set('studystep', 'freq');
model.sol('sol8').create('v1', 'Variables');
model.sol('sol8').feature('v1').set('control', 'freq');
model.sol('sol8').create('s1', 'Stationary');
model.sol('sol8').feature('s1').create('p1', 'Parametric');
model.sol('sol8').feature('s1').feature.remove('pDef');
model.sol('sol8').feature('s1').feature('p1').set('pname', {'freq' 'dw'});
model.sol('sol8').feature('s1').feature('p1').set('punit', {'Hz' 'm'});
model.sol('sol8').feature('s1').feature('p1').set('sweeptype', 'filled');
model.sol('sol8').feature('s1').feature('p1').set('plistarr', {'range(f_est-30,0.5,f_est+30)' '0.5[mm] 1[mm] 2[mm] 3[mm]'});
model.sol('sol8').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol8').feature('s1').feature('p1').set('pcontinuation', '');
model.sol('sol8').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol8').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol8').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol8').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol8').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol8').feature('s1').feature('p1').set('probes', {});
model.sol('sol8').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol8').feature('s1').set('linpmethod', 'sol');
model.sol('sol8').feature('s1').set('linpsol', 'zero');
model.sol('sol8').feature('s1').set('control', 'freq');
model.sol('sol8').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol8').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol8').feature('s1').feature.remove('fcDef');
model.sol('sol8').attach('std2');
model.sol('sol8').runAll;

model.study.create('std3');
model.study('std3').create('freq', 'Frequency');
model.study('std3').feature('freq').setSolveFor('/physics/pafd', true);
model.study('std3').feature('freq').set('plist', 'range(100,10,3000)');
model.study('std3').label('Study 3 - Extended Frequency Sweep');
model.study('std3').setGenPlots(false);

model.sol.create('sol9');
model.sol('sol9').study('std3');
model.sol('sol9').create('st1', 'StudyStep');
model.sol('sol9').feature('st1').set('study', 'std3');
model.sol('sol9').feature('st1').set('studystep', 'freq');
model.sol('sol9').create('v1', 'Variables');
model.sol('sol9').feature('v1').set('control', 'freq');
model.sol('sol9').create('s1', 'Stationary');
model.sol('sol9').feature('s1').create('p1', 'Parametric');
model.sol('sol9').feature('s1').feature.remove('pDef');
model.sol('sol9').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol9').feature('s1').feature('p1').set('plistarr', {'range(100,10,3000)'});
model.sol('sol9').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol9').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol9').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol9').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol9').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol9').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol9').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol9').feature('s1').feature('p1').set('probes', {});
model.sol('sol9').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol9').feature('s1').set('linpmethod', 'sol');
model.sol('sol9').feature('s1').set('linpsol', 'zero');
model.sol('sol9').feature('s1').set('control', 'freq');
model.sol('sol9').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol9').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol9').feature('s1').feature.remove('fcDef');
model.sol('sol9').attach('std3');
model.sol('sol9').runAll;

model.result('pg1').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').set('data', 'dset2');
model.result('pg3').label('Response: Different Pipe Diameters');
model.result('pg3').set('titletype', 'label');
model.result('pg3').create('ptgr1', 'PointGraph');
model.result('pg3').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg3').feature('ptgr1').set('linewidth', 'preference');
model.result('pg3').feature('ptgr1').selection.set([2]);
model.result('pg3').feature('ptgr1').set('expr', 'pafd.Lp');
model.result('pg3').feature('ptgr1').set('descr', 'Sound pressure level');
model.result('pg3').feature('ptgr1').set('linewidth', 2);
model.result('pg3').feature('ptgr1').set('legend', true);
model.result('pg3').feature('ptgr1').set('autopoint', false);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').set('data', 'dset3');
model.result('pg4').label('Response: Different Wall Thicknesses');
model.result('pg4').set('titletype', 'label');
model.result('pg4').create('ptgr1', 'PointGraph');
model.result('pg4').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg4').feature('ptgr1').set('linewidth', 'preference');
model.result('pg4').feature('ptgr1').selection.set([2]);
model.result('pg4').feature('ptgr1').set('expr', 'pafd.Lp');
model.result('pg4').feature('ptgr1').set('xdatasolnumtype', 'level2');
model.result('pg4').feature('ptgr1').set('linewidth', 2);
model.result('pg4').feature('ptgr1').set('legend', true);
model.result('pg4').feature('ptgr1').set('autopoint', false);
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').set('data', 'dset4');
model.result('pg5').label('Response: Pipe Resonance Frequencies');
model.result('pg5').set('titletype', 'label');
model.result('pg5').create('ptgr1', 'PointGraph');
model.result('pg5').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg5').feature('ptgr1').set('linewidth', 'preference');
model.result('pg5').feature('ptgr1').selection.set([2]);
model.result('pg5').feature('ptgr1').set('expr', 'pafd.Lp');
model.result('pg5').feature('ptgr1').set('linewidth', 2);
model.result('pg5').run;

model.title('Organ Pipe Design');

model.description(['The design of an organ pipe depends on the pipe radius and length, the material, and wall thickness.' newline  newline 'In this example, the quarter-wave resonance frequency of the pipe is found and the frequency response including harmonics is determined. In the app version of this model it is possible to play and listen to the sound produced by a given design, illustrating some of the added functionality of the Application Builder.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;

model.label('organ_pipe_design.mph');

model.modelNode.label('Components');

out = model;
