function out = model
%
% pb_flow_battery.m
%
% Model exported on May 26 2025, 21:26 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Battery_Design_Module/Flow_Batteries');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'12[mm]' '10[cm]'});
model.geom('geom1').runPre('fin');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('D_PbII', '0.7e-9[m^2/s]', 'Pb ion diffusion coefficient in electrolyte');
model.param.set('D_H', '9.3e-9[m^2/s]', 'Proton diffusion coefficient in electrolyte');
model.param.set('D_HSO4', '1.33e-9[m^2/s]', 'HSO4- diffusion coefficient in electrolyte');
model.param.set('T', '300[K]', 'Temperature');
model.param.set('c0_PbII', '500[mol/m^3]', 'Initial Pb ion concentration');
model.param.set('c0_H', '500[mol/m^3]', 'Initial proton concentration');
model.param.set('p_out', '300[kPa]', 'Outlet pressure');
model.param.set('U_in', '0.023[m/s]', 'Inlet velocity');
model.param.set('i_app', '200[A/m^2]', 'Applied current density');
model.param.set('V', '1.5e-3[m^3]', 'Tank electrolyte flow volume');
model.param.set('k0_Pb', '2.1e-7[m/s]', 'Rate constant for negative electrode reaction');
model.param.set('k0_PbO2', '2.5e-7[m/s]', 'Rate constant for positive main electrode reaction');
model.param.set('K0f', 'K0b*100000', 'Forward rate constant, PbO reaction');
model.param.set('K0b', '4.5e-7[mol/m^2/s]/10', 'Backward rate constant, PbO reaction');
model.param.set('t_charge', '3600[s]', 'Charge time');
model.param.set('t_discharge', '3600[s]', 'Discharge time');
model.param.set('t_rest', '60[s]', 'Resting time');
model.param.set('L', '0.1[m]', 'Cell thickness');
model.param.set('E0_pos', '1.8-R_const*T/(2*F_const)*(log(max(eps^2,c0_PbII/(1000[mol/m^3])))-4*log(max(eps^2,c0_H/(1000[mol/m^3]))))', 'Initial positive electrode electric potential');
model.param.set('E0_neg', '0+R_const*T/(2*F_const)*log(max(eps^2,c0_PbII/(1000[mol/m^3])))', 'Initial negative electrode potential');
model.param.set('i0ref_neg', 'F_const*k0_Pb*1[mol/l]', 'Reference exchange current density, negative electrode reaction');
model.param.set('i0ref_pos', 'F_const*k0_PbO2*1[mol/l]', 'Reference exchange current density, positive main electrode reaction');
model.param.set('Eeq_pos', '1.8[V]', 'Equilibrium potential, positive main electrode reaction');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Inlet');
model.selection('sel1').geom(1);
model.selection('sel1').set([2]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Outlet');
model.selection('sel2').geom(1);
model.selection('sel2').set([3]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Positive electrode');
model.selection('sel3').geom(1);
model.selection('sel3').set([4]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Negative electrode');
model.selection('sel4').geom(1);
model.selection('sel4').set([1]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water, liquid');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');

model.physics('spf').create('inl1', 'InletBoundary', 1);
model.physics('spf').feature('inl1').selection.named('sel1');
model.physics('spf').feature('inl1').set('BoundaryCondition', 'FullyDevelopedFlow');
model.physics('spf').feature('inl1').set('Uavfdf', 'U_in');
model.physics('spf').create('out1', 'OutletBoundary', 1);
model.physics('spf').feature('out1').selection.named('sel2');
model.physics('spf').feature('out1').set('NormalFlow', true);

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.set([1 4]);
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('edg1').feature('dis1').set('elemcount', 30);
model.mesh('mesh1').feature('edg1').feature('dis1').set('elemratio', 5);
model.mesh('mesh1').create('edg2', 'Edge');
model.mesh('mesh1').feature('edg2').selection.set([2 3]);
model.mesh('mesh1').feature('edg2').create('dis1', 'Distribution');
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(2);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').set('smoothtransition', false);
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([1 4]);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', '5e-5');
model.mesh('mesh1').run;
model.mesh('mesh1').run;

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Velocity (spf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Pressure (spf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').label('Contour');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('expr', 'p');
model.result('pg2').feature('con1').set('number', 40);
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('smooth', 'internal');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('data', 'parent');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').create('arws1', 'ArrowSurface');
model.result('pg2').feature('arws1').set('xnumber', 5);
model.result('pg2').feature('arws1').set('color', 'black');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').label('Flow');

model.physics.create('tcd', 'TertiaryCurrentDistributionNernstPlanck', 'geom1', {'cPbII' 'cH' 'cHSO4'});

model.study('std1').feature('stat').setSolveFor('/physics/tcd', false);

model.physics.create('ge', 'GlobalEquations', 'geom1');
model.physics('ge').model('comp1');

model.study('std1').feature('stat').setSolveFor('/physics/ge', false);

model.physics('ge').prop('EquationForm').set('form', 'Automatic');

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/spf', true);
model.study('std2').feature('time').setSolveFor('/physics/tcd', true);
model.study('std2').feature('time').setSolveFor('/physics/ge', true);

model.func.create('rect1', 'Rectangle');
model.func('rect1').model('comp1');
model.func('rect1').set('funcname', 'charge1');
model.func('rect1').set('lower', 0);
model.func('rect1').set('upper', 't_charge');
model.func('rect1').set('smooth', 1);
model.func.create('rect2', 'Rectangle');
model.func('rect2').model('comp1');
model.func('rect2').set('funcname', 'discharge1');
model.func('rect2').set('lower', 't_charge+t_rest');
model.func('rect2').set('upper', 't_charge+t_rest+t_discharge');
model.func('rect2').set('smooth', 1);
model.func.create('rect3', 'Rectangle');
model.func('rect3').model('comp1');
model.func('rect3').set('funcname', 'charge2');
model.func('rect3').set('lower', 't_charge+t_rest+t_discharge+t_rest');
model.func('rect3').set('upper', '2*t_charge+t_rest+t_discharge+t_rest');
model.func('rect3').set('smooth', 1);

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('i_cycle', 'i_app*(charge1(t[1/s])-discharge1(t[1/s])+charge2(t[1/s]))', 'Applied load cycle current');
model.variable('var1').set('i_PbO', 'F_const*(K0f*max(eps,tcd.c_es2_PbO/1[mol/m^2])^2*exp(F_const*(tcd.phisext-phil-tcd.Eeq_er1)/(R_const*T))-cH[mol^-1*m^3]*max(eps,tcd.c_es2_PbO2/1[mol/m^2])*K0b*exp(-F_const*(tcd.phisext-phil-tcd.Eeq_er1)/(R_const*T)))', 'Current density expression, PbO reaction');

model.physics('tcd').prop('SpeciesProperties').set('FromElectroneutrality', 3);
model.physics('tcd').feature('sp1').setIndex('z', 2, 0);
model.physics('tcd').feature('sp1').setIndex('z', 1, 1);
model.physics('tcd').feature('sp1').setIndex('z', -1, 2);
model.physics('tcd').feature('ice1').set('u_src', 'root.comp1.u');
model.physics('tcd').feature('ice1').set('D_cPbII', {'D_PbII' '0' '0' '0' 'D_PbII' '0' '0' '0' 'D_PbII'});
model.physics('tcd').feature('ice1').set('D_cH', {'D_H' '0' '0' '0' 'D_H' '0' '0' '0' 'D_H'});
model.physics('tcd').feature('ice1').set('D_cHSO4', {'D_HSO4' '0' '0' '0' 'D_HSO4' '0' '0' '0' 'D_HSO4'});
model.physics('tcd').create('in1', 'Inflow', 1);
model.physics('tcd').feature('in1').selection.named('sel1');
model.physics('tcd').feature('in1').setIndex('c0', 'cPbII_in', 0);
model.physics('tcd').feature('in1').setIndex('c0', 'cH_in', 1);
model.physics('tcd').feature('in1').set('BoundaryConditionType', 'FluxDanckwerts');
model.physics('tcd').create('out1', 'Outflow', 1);
model.physics('tcd').feature('out1').selection.named('sel2');
model.physics('tcd').create('es1', 'ElectrodeSurface', 1);
model.physics('tcd').feature('es1').label('Negative Electrode');
model.physics('tcd').feature('es1').selection.named('sel4');
model.physics('tcd').feature('es1').feature('er1').set('nm', 2);
model.physics('tcd').feature('es1').feature('er1').setIndex('Vi0', -1, 0);
model.physics('tcd').feature('es1').feature('er1').set('i0Type', 'LumpedMultistep');
model.physics('tcd').feature('es1').feature('er1').set('i0_ref', 'i0ref_neg');
model.physics('tcd').feature('es1').feature('er1').setIndex('rgeneric', 1, 0, 0);
model.physics('tcd').feature('es1').feature('er1').set('alphaa', 1);
model.physics('tcd').feature('es1').feature('er1').set('alphac', 1);
model.physics('tcd').create('es2', 'ElectrodeSurface', 1);
model.physics('tcd').feature('es2').label('Positive Electrode');
model.physics('tcd').feature('es2').selection.named('sel3');
model.physics('tcd').feature('es2').set('BoundaryCondition', 'AverageCurrentDensity');
model.physics('tcd').feature('es2').set('Ial', 'i_cycle');
model.physics('tcd').feature('es2').set('phisext0init', 'E0_pos');
model.physics('tcd').feature('es2').feature('er1').set('nm', 2);
model.physics('tcd').feature('es2').feature('er1').setIndex('Vi0', 1, 0);
model.physics('tcd').feature('es2').feature('er1').setIndex('Vi0', -4, 1);
model.physics('tcd').feature('es2').feature('er1').set('Eeq_ref', 'Eeq_pos');
model.physics('tcd').feature('es2').feature('er1').setIndex('cref', '0.5[M]', 1, 0);
model.physics('tcd').feature('es2').feature('er1').set('i0Type', 'LumpedMultistep');
model.physics('tcd').feature('es2').feature('er1').set('i0_ref', 'i0ref_pos');
model.physics('tcd').feature('es2').feature('er1').setIndex('rgeneric', 1, 0, 0);
model.physics('tcd').feature('es2').feature('er1').setIndex('rgeneric', 1, 1, 0);
model.physics('tcd').feature('es2').create('er2', 'ElectrodeReaction', 1);
model.physics('tcd').feature('es2').feature('er1').label('Main Reaction');
model.physics('tcd').feature('es2').feature('er2').label('Side Reaction');
model.physics('tcd').feature('es2').feature('er2').set('nm', 2);
model.physics('tcd').feature('es2').feature('er2').setIndex('Vi0', -2, 1);
model.physics('tcd').feature('es2').feature('er2').set('Eeq_mat', 'userdef');
model.physics('tcd').feature('es2').feature('er2').set('ilocmat_mat', 'userdef');
model.physics('tcd').feature('es2').feature('er2').set('ilocmat', 'i_PbO');
model.physics('tcd').feature('es2').setIndex('Species', 's1', 0, 0);
model.physics('tcd').feature('es2').setIndex('rhos', 8960, 0, 0);
model.physics('tcd').feature('es2').setIndex('Ms', 0.06355, 0, 0);
model.physics('tcd').feature('es2').setIndex('Species', 's1', 0, 0);
model.physics('tcd').feature('es2').setIndex('rhos', 8960, 0, 0);
model.physics('tcd').feature('es2').setIndex('Ms', 0.06355, 0, 0);
model.physics('tcd').feature('es2').setIndex('Species', 's2', 1, 0);
model.physics('tcd').feature('es2').setIndex('rhos', 8960, 1, 0);
model.physics('tcd').feature('es2').setIndex('Ms', 0.06355, 1, 0);
model.physics('tcd').feature('es2').setIndex('rhos', 8960, 1, 0);
model.physics('tcd').feature('es2').setIndex('Ms', 0.06355, 1, 0);
model.physics('tcd').feature('es2').setIndex('Species', 's2', 1, 0);
model.physics('tcd').feature('es2').setIndex('rhos', 8960, 1, 0);
model.physics('tcd').feature('es2').setIndex('Ms', 0.06355, 1, 0);
model.physics('tcd').feature('es2').setIndex('Species', 'PbO2', 0, 0);
model.physics('tcd').feature('es2').setIndex('rhos', '9.38[g/cm^3]', 0, 0);
model.physics('tcd').feature('es2').setIndex('Ms', 0.2392, 0, 0);
model.physics('tcd').feature('es2').setIndex('Species', 'PbO', 1, 0);
model.physics('tcd').feature('es2').setIndex('rhos', '9.53[g/cm^3]', 1, 0);
model.physics('tcd').feature('es2').setIndex('Ms', 0.2232, 1, 0);
model.physics('tcd').feature('es2').feature('er1').setIndex('Vib', -1, 0, 0);
model.physics('tcd').feature('es2').feature('er2').setIndex('Vib', -1, 0, 0);
model.physics('tcd').feature('es2').feature('er2').setIndex('Vib', 1, 1, 0);
model.physics('tcd').feature('init1').setIndex('initc', 'c0_PbII', 0);
model.physics('tcd').feature('init1').setIndex('initc', 'c0_H', 1);
model.physics('tcd').feature('init1').set('initphil', '-E0_neg');

model.common('cminpt').set('modified', {'temperature' 'T'});

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'int_inlet');
model.cpl('intop1').selection.geom('geom1', 1);
model.cpl('intop1').selection.named('sel1');
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').set('opname', 'int_outlet');
model.cpl('intop2').selection.geom('geom1', 1);
model.cpl('intop2').selection.named('sel2');

model.physics('ge').feature('ge1').setIndex('name', 'cPbII_in', 0, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'cPbII_int-L/V*(comp1.int_outlet(comp1.tcd.tflux_cPbIIy)-comp1.int_inlet(comp1.tcd.tflux_cPbIIy))', 0, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 'c0_PbII', 0, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Pb ion inlet concentration', 0, 0);
model.physics('ge').feature('ge1').setIndex('name', 'cH_in', 1, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 1, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 1, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 1, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 1, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'cH_int-L/V*(comp1.int_outlet(comp1.tcd.tflux_cHy)-comp1.int_inlet(comp1.tcd.tflux_cHy))', 1, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 'c0_H', 1, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Proton inlet concentration', 1, 0);
model.physics('ge').feature('ge1').set('DependentVariableQuantity', 'concentration');
model.physics('ge').feature('ge1').set('SourceTermQuantity', 'reactionrate');

model.probe.create('bnd1', 'Boundary');
model.probe('bnd1').model('comp1');
model.probe('bnd1').set('intsurface', true);
model.probe('bnd1').selection.named('sel3');
model.probe('bnd1').set('expr', 'tcd.phisext');
model.probe.create('bnd2', 'Boundary');
model.probe('bnd2').model('comp1');
model.probe('bnd2').set('intsurface', true);
model.probe('bnd2').selection.named('sel3');
model.probe('bnd2').set('expr', 'tcd.iloc_er1');
model.probe.create('bnd3', 'Boundary');
model.probe('bnd3').model('comp1');
model.probe('bnd3').set('intsurface', true);
model.probe('bnd3').selection.named('sel3');
model.probe('bnd3').set('expr', 'tcd.iloc_er2');
model.probe.create('bnd4', 'Boundary');
model.probe('bnd4').model('comp1');
model.probe('bnd4').set('intsurface', true);
model.probe('bnd4').selection.named('sel4');
model.probe('bnd4').set('expr', 'tcd.iloc_er1');
model.probe.create('bnd5', 'Boundary');
model.probe('bnd5').model('comp1');
model.probe('bnd5').set('intsurface', true);
model.probe('bnd5').selection.named('sel3');
model.probe('bnd5').set('expr', 'tcd.c_es2_PbO2');
model.probe.create('bnd6', 'Boundary');
model.probe('bnd6').model('comp1');
model.probe('bnd6').set('intsurface', true);
model.probe('bnd6').selection.named('sel3');
model.probe('bnd6').set('expr', 'tcd.c_es2_PbO');

model.study('std2').feature('time').set('tlist', 'range(0,600,3600) range(3660,600,7260) range(7320,600,10900)');
model.study('std2').feature('time').setEntry('activate', 'spf', false);
model.study('std2').feature('time').set('usesol', true);
model.study('std2').feature('time').set('notsolmethod', 'sol');
model.study('std2').feature('time').set('notstudy', 'std1');
model.study('std2').feature('time').set('notsolnum', 1);

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_tcd_es2_phisext').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_phil').set('scaleval', '1');
model.sol('sol2').feature('v1').feature('comp1_tcd_es2_phisext').set('scaleval', '1');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,600,3600) range(3660,600,7260) range(7320,600,10900)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {'bnd1' 'bnd2' 'bnd3' 'bnd4' 'bnd5' 'bnd6'});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 0.001);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('eventout', true);
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').create('seDef', 'Segregated');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('t1').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('d1').label('Direct (Merged)');
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').set('maxlinit', 1000);
model.sol('sol2').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('t1').feature('i1').label('Algebraic Multigrid (tcd)');
model.sol('sol2').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').create('i2', 'Iterative');
model.sol('sol2').feature('t1').feature('i2').set('maxlinit', 1000);
model.sol('sol2').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol2').feature('t1').feature('i2').label('Geometric Multigrid (tcd)');
model.sol('sol2').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').feature('t1').feature.remove('seDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('v1').feature('comp1_cH').set('scalemethod', 'init');
model.sol('sol2').feature('v1').feature('comp1_cPbII').set('scalemethod', 'init');
model.sol('sol2').feature('v1').feature('comp1_tcd_es2_c').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_tcd_es2_c').set('scaleval', 'c0_PbII*V/(L*1[m^2])');
model.sol('sol2').feature('v1').feature('comp1_ODE1').set('scalemethod', 'init');
model.sol('sol2').feature('t1').set('initialstepbdfactive', true);
model.sol('sol2').feature('t1').set('initialstepbdf', 0.01);

model.probe('bnd1').genResult('none');
model.probe('bnd2').genResult('none');
model.probe('bnd3').genResult('none');
model.probe('bnd4').genResult('none');
model.probe('bnd5').genResult('none');
model.probe('bnd6').genResult('none');

model.sol('sol2').runAll;

model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').set('data', 'dset2');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('unit', {''});
model.result('pg4').feature('glob1').set('expr', {'tcd.phisext_es2'});
model.result('pg4').feature('glob1').set('descr', {'External electric potential'});
model.result('pg4').label('Boundary Electrode Potential with Respect to Ground (tcd)');
model.result('pg4').feature('glob1').set('xdatasolnumtype', 'level1');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 20, 0);
model.result('pg5').label('Electrolyte Potential (tcd)');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'phil'});
model.result('pg5').create('str1', 'Streamline');
model.result('pg5').feature('str1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg5').feature('str1').set('posmethod', 'uniform');
model.result('pg5').feature('str1').set('recover', 'pprint');
model.result('pg5').feature('str1').set('pointtype', 'arrow');
model.result('pg5').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('str1').set('color', 'gray');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'dset2');
model.result('pg6').setIndex('looplevel', 20, 0);
model.result('pg6').label('Electrolyte Current Density (tcd)');
model.result('pg6').create('str1', 'Streamline');
model.result('pg6').feature('str1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg6').feature('str1').set('posmethod', 'uniform');
model.result('pg6').feature('str1').set('recover', 'pprint');
model.result('pg6').feature('str1').set('pointtype', 'arrow');
model.result('pg6').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg6').feature('str1').set('color', 'gray');
model.result('pg6').feature('str1').create('col1', 'Color');
model.result('pg6').feature('str1').feature('col1').set('expr', 'root.comp1.tcd.IlMag');
model.result('pg6').create('line1', 'Line');
model.result('pg6').feature('line1').set('expr', {'abs(tcd.itot)'});
model.result('pg6').feature('line1').set('linetype', 'tube');
model.result('pg6').feature('line1').set('inherittubescale', false);
model.result('pg6').feature('line1').set('inheritplot', 'str1');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset2');
model.result('pg7').setIndex('looplevel', 20, 0);
model.result('pg7').label('Electrode Potential with Respect to Ground (tcd)');
model.result('pg7').create('line1', 'Line');
model.result('pg7').feature('line1').set('expr', {'tcd.phisext'});
model.result('pg7').feature('line1').set('linetype', 'tube');
model.result('pg7').feature('line1').set('inherittubescale', false);
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').set('data', 'dset2');
model.result('pg8').setIndex('looplevel', 20, 0);
model.result('pg8').label('Electrode Potential vs. Adjacent Reference (tcd)');
model.result('pg8').create('str1', 'Streamline');
model.result('pg8').feature('str1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg8').feature('str1').set('posmethod', 'uniform');
model.result('pg8').feature('str1').set('recover', 'pprint');
model.result('pg8').feature('str1').set('pointtype', 'arrow');
model.result('pg8').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg8').feature('str1').set('color', 'gray');
model.result('pg8').create('line1', 'Line');
model.result('pg8').feature('line1').set('expr', {'tcd.Evsref'});
model.result('pg8').feature('line1').set('linetype', 'tube');
model.result('pg8').feature('line1').set('inherittubescale', false);
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').set('data', 'dset2');
model.result('pg9').setIndex('looplevel', 20, 0);
model.result('pg9').label('Total Electrode Thickness Change (tcd)');
model.result('pg9').create('line1', 'Line');
model.result('pg9').feature('line1').set('expr', {'tcd.sbtot'});
model.result('pg9').feature('line1').set('linetype', 'tube');
model.result('pg9').feature('line1').set('inherittubescale', false);
model.result('pg9').feature('line1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').set('data', 'dset2');
model.result('pg10').setIndex('looplevel', 20, 0);
model.result('pg10').label('Concentration, PbII (tcd)');
model.result('pg10').set('titletype', 'custom');
model.result('pg10').set('prefixintitle', 'Species PbII:');
model.result('pg10').set('expressionintitle', false);
model.result('pg10').set('typeintitle', true);
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', {'cPbII'});
model.result('pg10').create('str1', 'Streamline');
model.result('pg10').feature('str1').set('expr', {'tcd.tflux_cPbIIx' 'tcd.tflux_cPbIIy'});
model.result('pg10').feature('str1').set('posmethod', 'uniform');
model.result('pg10').feature('str1').set('recover', 'pprint');
model.result('pg10').feature('str1').set('pointtype', 'arrow');
model.result('pg10').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg10').feature('str1').set('color', 'gray');
model.result.create('pg11', 'PlotGroup2D');
model.result('pg11').set('data', 'dset2');
model.result('pg11').setIndex('looplevel', 20, 0);
model.result('pg11').label('Concentration, H (tcd)');
model.result('pg11').set('titletype', 'custom');
model.result('pg11').set('prefixintitle', 'Species H:');
model.result('pg11').set('expressionintitle', false);
model.result('pg11').set('typeintitle', true);
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('expr', {'cH'});
model.result('pg11').create('str1', 'Streamline');
model.result('pg11').feature('str1').set('expr', {'tcd.tflux_cHx' 'tcd.tflux_cHy'});
model.result('pg11').feature('str1').set('posmethod', 'uniform');
model.result('pg11').feature('str1').set('recover', 'pprint');
model.result('pg11').feature('str1').set('pointtype', 'arrow');
model.result('pg11').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg11').feature('str1').set('color', 'gray');
model.result.create('pg12', 'PlotGroup2D');
model.result('pg12').set('data', 'dset2');
model.result('pg12').setIndex('looplevel', 20, 0);
model.result('pg12').label('Concentration, HSO4 (tcd)');
model.result('pg12').set('titletype', 'custom');
model.result('pg12').set('prefixintitle', 'Species HSO4:');
model.result('pg12').set('expressionintitle', false);
model.result('pg12').set('typeintitle', true);
model.result('pg12').create('surf1', 'Surface');
model.result('pg12').feature('surf1').set('expr', {'cHSO4'});
model.result('pg12').create('str1', 'Streamline');
model.result('pg12').feature('str1').set('expr', {'tcd.tflux_cHSO4x' 'tcd.tflux_cHSO4y'});
model.result('pg12').feature('str1').set('posmethod', 'uniform');
model.result('pg12').feature('str1').set('recover', 'pprint');
model.result('pg12').feature('str1').set('pointtype', 'arrow');
model.result('pg12').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg12').feature('str1').set('color', 'gray');
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').set('data', 'dset2');
model.result.numerical('gev1').set('expr', {'cPbII_in' 'cH_in'});
model.result.numerical('gev1').set('descr', {'Pb ion inlet concentration' 'Proton inlet concentration'});
model.result.create('pg13', 'PlotGroup1D');
model.result('pg13').set('data', 'dset2');
model.result('pg13').create('glob1', 'Global');
model.result('pg13').feature('glob1').set('expr', {'cPbII_in' 'cH_in'});
model.result('pg13').feature('glob1').set('descr', {'Pb ion inlet concentration' 'Proton inlet concentration'});
model.result('pg4').run;
model.result('pg3').set('window', 'window1');
model.result('pg3').run;
model.result('pg3').label('Probe Values');
model.result.create('pg14', 'PlotGroup1D');
model.result('pg14').run;
model.result('pg14').set('titletype', 'manual');
model.result('pg14').set('title', 'Cell Potential vs. Time');
model.result('pg14').set('ylabelactive', true);
model.result('pg14').set('ylabel', 'Voltage (V)');
model.result('pg14').create('tblp1', 'Table');
model.result('pg14').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg14').feature('tblp1').set('linewidth', 'preference');
model.result('pg14').feature('tblp1').set('plotcolumninput', 'manual');
model.result('pg14').feature('tblp1').set('plotcolumns', [2]);
model.result('pg14').run;
model.result('pg14').label('Cell Potential');
model.result('pg14').run;
model.result.create('pg15', 'PlotGroup1D');
model.result('pg15').run;
model.result('pg15').set('titletype', 'manual');
model.result('pg15').set('title', 'Average local reaction current densities');
model.result('pg15').set('ylabelactive', true);
model.result('pg15').set('ylabel', 'Current density (A/m<sup>2</sup>)');
model.result('pg15').set('legendpos', 'lowerright');
model.result('pg15').create('tblp1', 'Table');
model.result('pg15').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg15').feature('tblp1').set('linewidth', 'preference');
model.result('pg15').feature('tblp1').set('plotcolumninput', 'manual');
model.result('pg15').feature('tblp1').set('plotcolumns', [3 4 5]);
model.result('pg15').feature('tblp1').set('legend', true);
model.result('pg15').feature('tblp1').set('legendmethod', 'manual');
model.result('pg15').feature('tblp1').setIndex('legends', 'PbO2 formation', 0);
model.result('pg15').feature('tblp1').setIndex('legends', 'PbO formation', 1);
model.result('pg15').feature('tblp1').setIndex('legends', 'Pb formation', 2);
model.result('pg15').run;
model.result('pg15').run;
model.result('pg15').label('Local Current Densities');
model.result.create('pg16', 'PlotGroup1D');
model.result('pg16').run;
model.result('pg16').set('titletype', 'manual');
model.result('pg16').set('title', 'Average surface concentrations');
model.result('pg16').set('xlabelactive', true);
model.result('pg16').set('xlabel', 'Time (s)');
model.result('pg16').set('ylabelactive', true);
model.result('pg16').set('ylabel', 'Electrode surface concentration (mol/m<sup>2</sup>)');
model.result('pg16').create('tblp1', 'Table');
model.result('pg16').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg16').feature('tblp1').set('linewidth', 'preference');
model.result('pg16').feature('tblp1').set('plotcolumninput', 'manual');
model.result('pg16').feature('tblp1').set('plotcolumns', [6 7]);
model.result('pg16').feature('tblp1').set('legend', true);
model.result('pg16').feature('tblp1').set('legendmethod', 'manual');
model.result('pg16').feature('tblp1').setIndex('legends', 'PbO2', 0);
model.result('pg16').feature('tblp1').setIndex('legends', 'PbO', 1);
model.result('pg16').run;
model.result('pg16').run;
model.result('pg16').label('Surface Concentrations');
model.result('pg13').run;
model.result('pg13').label('Electrolyte Concentrations');
model.result('pg13').set('titletype', 'manual');
model.result('pg13').set('title', 'Cell inlet concentrations');
model.result('pg13').set('xlabelactive', true);
model.result('pg13').set('ylabelactive', true);
model.result('pg13').set('ylabel', 'Concentration (mol/m<sup>3</sup>)');
model.result.create('pg17', 'PlotGroup2D');
model.result('pg17').run;
model.result('pg17').set('data', 'dset2');
model.result('pg17').setIndex('looplevel', 7, 0);
model.result('pg17').create('surf1', 'Surface');
model.result('pg17').feature('surf1').set('expr', 'cH');
model.result('pg17').feature('surf1').set('descr', 'Concentration');
model.result('pg17').feature('surf1').create('hght1', 'Height');
model.result('pg17').run;
model.result('pg17').run;
model.result('pg17').run;
model.result('pg17').label('H+ Concentration Distribution');
model.result('pg17').setIndex('looplevel', 14, 0);
model.result('pg17').run;
model.result.duplicate('pg18', 'pg17');
model.result('pg18').run;
model.result('pg18').setIndex('looplevel', 7, 0);
model.result('pg18').run;
model.result('pg18').feature('surf1').set('expr', 'cPbII');
model.result('pg18').feature('surf1').set('descr', 'Concentration');
model.result('pg18').run;
model.result('pg18').run;
model.result('pg18').label('PbII Concentration Distribution');
model.result('pg18').setIndex('looplevel', 14, 0);
model.result('pg18').run;
model.result.create('pg19', 'PlotGroup1D');
model.result('pg19').run;
model.result('pg19').label('PbO Surface Concentration');
model.result('pg19').create('lngr1', 'LineGraph');
model.result('pg19').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg19').feature('lngr1').set('linewidth', 'preference');
model.result('pg19').feature('lngr1').set('expr', 'tcd.c_es2_PbO');
model.result('pg19').feature('lngr1').set('data', 'dset2');
model.result('pg19').feature('lngr1').selection.named('sel3');

model.title(['Soluble Lead' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Acid Redox Flow Battery']);

model.description('This is an example of a redox flow battery that simulates charge and discharge during a load cycle. A two-dimensional model that includes mass, charge, and momentum transport is used for the electrochemical cell. A zero-dimensional tank model simulates the reactant concentrations in the electrolyte outside the cell.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('pb_flow_battery.mph');

model.modelNode.label('Components');

out = model;
