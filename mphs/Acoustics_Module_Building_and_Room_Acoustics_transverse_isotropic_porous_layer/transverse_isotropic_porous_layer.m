function out = model
%
% transverse_isotropic_porous_layer.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Building_and_Room_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('pelw', 'PoroelasticWavesSinglePhysics', 'geom1');
model.physics('pelw').model('comp1');
model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/pelw', true);
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('f0', '3000[Hz]', 'Frequency');
model.param.set('theta0', '0[deg]', 'Angle of incidence');
model.param.set('H', '6[cm]', 'Porous layer thickness');
model.param.set('W', '10[cm]', 'Domain width');
model.param.set('Hair', '20[cm]', 'Air Layer thickness');
model.param.set('Hpml', '5[cm]', 'PML layer thickness');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'W' 'H+Hair+Hpml'});
model.geom('geom1').feature('r1').setIndex('layer', 'H', 0);
model.geom('geom1').feature('r1').setIndex('layer', 'Hair', 1);
model.geom('geom1').run('fin');

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('kx_e', 'sin(theta0)', 'Plane wave direction, x');
model.variable('var1').set('ky_e', '-cos(theta0)', 'Plane wave direction, y');
model.variable('var1').set('k0', 'intop_pnt(acpr.k)', 'Free-field wave number');
model.variable('var1').set('kx', 'k0*kx_e', 'Background plane wave, k_x');
model.variable('var1').set('ky', 'k0*ky_e', 'Background plane wave, k_y');
model.variable('var1').set('Zn', 'aveop_bnd(acpr.p_t/(nx*up(acpr.vx)+ny*up(acpr.vy)))/intop_pnt(acpr.rho*acpr.c)', 'Specific surface impedance normalized');
model.variable('var1').set('Pin', 'intop_bnd(-acpr.I_by)', 'Incident power');
model.variable('var1').set('Pout', 'intop_bnd(acpr.I_sy)', 'Outgoing power');
model.variable('var1').set('alpha', '1-Pout/Pin', 'Absorption coefficient');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'intop_pnt');
model.cpl('intop1').selection.geom('geom1', 0);
model.cpl('intop1').selection.set([3]);
model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').set('opname', 'aveop_bnd');
model.cpl('aveop1').selection.geom('geom1', 1);
model.cpl('aveop1').selection.set([4]);
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').set('opname', 'intop_bnd');
model.cpl('intop2').selection.geom('geom1', 1);
model.cpl('intop2').selection.set([4]);

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.set([3]);
model.coordSystem('pml1').set('PMLfactor', '1/cos(theta0)');
model.coordSystem('pml1').set('PMLgamma', '3');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('pelw').selection.set([1]);
model.physics('pelw').feature('pm1').set('G_mat', 'userdef');
model.physics('pelw').feature('pm1').set('G', '(50+7i)[kPa]');
model.physics('pelw').feature('pm1').set('nu_mat', 'userdef');
model.physics('pelw').feature('pm1').set('nu', 0.1);
model.physics('pelw').feature('pm1').set('rhod_mat', 'userdef');
model.physics('pelw').feature('pm1').set('rhod', '60[kg/m^3]');
model.physics('pelw').feature('pm1').set('eta_s_mat', 'userdef');
model.physics('pelw').feature('pm1').set('epsilon_p_mat', 'userdef');
model.physics('pelw').feature('pm1').set('epsilon_p', 0.99);
model.physics('pelw').feature('pm1').set('Rf_mat', 'userdef');
model.physics('pelw').feature('pm1').set('Rf', '17000[N*s/m^4]');
model.physics('pelw').feature('pm1').set('tau_mat', 'userdef');
model.physics('pelw').feature('pm1').set('tau', 1.01);
model.physics('pelw').feature('pm1').set('Lv_mat', 'userdef');
model.physics('pelw').feature('pm1').set('Lv', '140[um]');
model.physics('pelw').feature('pm1').set('Lth_mat', 'userdef');
model.physics('pelw').feature('pm1').set('Lth', '150[um]');
model.physics('pelw').create('apm1', 'AnisotropicPoroelasticWavesMaterial', 2);
model.physics('pelw').feature('apm1').selection.set([1]);
model.physics('pelw').feature('apm1').set('SolidModel', 'Orthotropic');
model.physics('pelw').feature('apm1').set('Evector_mat', 'userdef');
model.physics('pelw').feature('apm1').set('Evector', [10 10 0]);
model.physics('pelw').feature('apm1').set('GvectorVo_mat', 'userdef');
model.physics('pelw').feature('apm1').set('GvectorVo', {'(50+7i)[kPa]' '(120+22i)[kPa]' '0'});
model.physics('pelw').feature('apm1').set('nuvector_mat', 'userdef');
model.physics('pelw').feature('apm1').set('nuvector', [0.1 0.1 0]);
model.physics('pelw').feature('apm1').set('rhod_mat', 'userdef');
model.physics('pelw').feature('apm1').set('rhod', '60[kg/m^3]');
model.physics('pelw').feature('apm1').set('eta_s_mat', 'userdef');
model.physics('pelw').feature('apm1').set('epsilon_p_mat', 'userdef');
model.physics('pelw').feature('apm1').set('epsilon_p', 0.99);
model.physics('pelw').feature('apm1').set('Rf_mat', 'userdef');
model.physics('pelw').feature('apm1').set('Rf', {'5000[N*s/m^4]' '0' '0' '0' '17000[N*s/m^4]' '0' '0' '0' '0'});
model.physics('pelw').feature('apm1').set('tau_mat', 'userdef');
model.physics('pelw').feature('apm1').set('tau', [1.01 0 0 0 1.01 0 0 0 1.01]);
model.physics('pelw').feature('apm1').set('Lv_mat', 'userdef');
model.physics('pelw').feature('apm1').set('Lv', {'126[um]' '0' '0' '0' '140[um]' '0' '0' '0' '0'});
model.physics('pelw').feature('apm1').set('Lth_mat', 'userdef');
model.physics('pelw').feature('apm1').set('Lth', '150[um]');
model.physics('pelw').create('pfix1', 'Fixed', 1);
model.physics('pelw').feature('pfix1').selection.set([2]);
model.physics('pelw').create('il2', 'ImperviousLayer', 1);
model.physics('pelw').feature('il2').selection.set([2]);
model.physics('pelw').create('pc1', 'PeriodicCondition', 1);
model.physics('pelw').feature('pc1').selection.set([1 8]);
model.physics('pelw').feature('pc1').set('PeriodicType', 'Floquet');
model.physics('pelw').feature('pc1').set('kFloquet', {'kx' 'ky' '0'});
model.physics('acpr').selection.set([2 3]);
model.physics('acpr').create('bpf1', 'BackgroundPressureField', 2);
model.physics('acpr').feature('bpf1').selection.set([2]);
model.physics('acpr').feature('bpf1').set('pamp', 1);
model.physics('acpr').feature('bpf1').set('c_mat', 'from_mat');
model.physics('acpr').feature('bpf1').set('dir', {'kx_e' 'ky_e' '0'});
model.physics('acpr').feature('bpf1').set('CalculateIntensity', true);
model.physics('acpr').feature('bpf1').set('rho_mat', 'from_mat');
model.physics('acpr').create('pc1', 'PeriodicCondition', 1);
model.physics('acpr').feature('pc1').selection.set([3 9]);
model.physics('acpr').feature('pc1').set('PeriodicType', 'Floquet');
model.physics('acpr').feature('pc1').set('kFloquet', {'kx' 'ky' '0'});
model.physics('acpr').create('pc2', 'PeriodicCondition', 1);
model.physics('acpr').feature('pc2').selection.set([5 10]);
model.physics('acpr').feature('pc2').set('PeriodicType', 'Floquet');
model.physics('acpr').feature('pc2').set('kFloquet', {'kx' 'ky' '0'});

model.multiphysics.create('apb1', 'AcousticPorousBoundary', 'geom1', 1);
model.multiphysics('apb1').selection.set([4]);

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'H/12');
model.mesh('mesh1').feature('size').set('hmin', 'H/12');
model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Transverse Isotropic');
model.study('std1').setGenPlots(false);
model.study('std1').feature('freq').set('plist', '500 700 1000 3000');
model.study('std1').feature('freq').set('useparam', true);
model.study('std1').feature('freq').setIndex('pname_aux', 'f0', 0);
model.study('std1').feature('freq').setIndex('plistarr_aux', '', 0);
model.study('std1').feature('freq').setIndex('punit_aux', 'Hz', 0);
model.study('std1').feature('freq').setIndex('pname_aux', 'f0', 0);
model.study('std1').feature('freq').setIndex('plistarr_aux', '', 0);
model.study('std1').feature('freq').setIndex('punit_aux', 'Hz', 0);
model.study('std1').feature('freq').setIndex('pname_aux', 'theta0', 0);
model.study('std1').feature('freq').setIndex('plistarr_aux', 'range(0,5,85)', 0);
model.study('std1').feature('freq').setIndex('punit_aux', 'deg', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq' 'theta0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz' 'deg'});
model.sol('sol1').feature('s1').feature('p1').set('sweeptype', 'filled');
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'500 700 1000 3000' 'range(0,5,85)'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pcontinuation', '');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (apb1) (Merged)');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').setSolveFor('/physics/pelw', true);
model.study('std2').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std2').feature('freq').setSolveFor('/multiphysics/apb1', true);
model.study('std2').label('Study 2 - Isotropic');
model.study('std2').setGenPlots(false);
model.study('std2').feature('freq').set('plist', '500 700 1000 3000');
model.study('std2').feature('freq').set('useadvanceddisable', true);
model.study('std2').feature('freq').set('disabledphysics', {'pelw/apm1'});
model.study('std2').feature('freq').set('useparam', true);
model.study('std2').feature('freq').setIndex('pname_aux', 'f0', 0);
model.study('std2').feature('freq').setIndex('plistarr_aux', '', 0);
model.study('std2').feature('freq').setIndex('punit_aux', 'Hz', 0);
model.study('std2').feature('freq').setIndex('pname_aux', 'f0', 0);
model.study('std2').feature('freq').setIndex('plistarr_aux', '', 0);
model.study('std2').feature('freq').setIndex('punit_aux', 'Hz', 0);
model.study('std2').feature('freq').setIndex('pname_aux', 'theta0', 0);
model.study('std2').feature('freq').setIndex('plistarr_aux', 'range(0,5,85)', 0);
model.study('std2').feature('freq').setIndex('punit_aux', 'deg', 0);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 0.001);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('pname', {'freq' 'theta0'});
model.sol('sol2').feature('s1').feature('p1').set('punit', {'Hz' 'deg'});
model.sol('sol2').feature('s1').feature('p1').set('sweeptype', 'filled');
model.sol('sol2').feature('s1').feature('p1').set('plistarr', {'500 700 1000 3000' 'range(0,5,85)'});
model.sol('sol2').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pcontinuation', '');
model.sol('sol2').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol2').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s1').feature('p1').set('probes', {});
model.sol('sol2').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol2').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('s1').set('control', 'freq');
model.sol('sol2').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol2').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol2').feature('s1').create('seDef', 'Segregated');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (apb1) (Merged)');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('s1').feature.remove('seDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.dataset.create('arr1', 'Array2D');
model.result.dataset('arr1').set('fullsize', [4 1]);
model.result.dataset('arr1').set('floquetper', true);
model.result.dataset('arr1').set('wavevector', {'kx' 'ky'});
model.result.dataset('arr1').selection.geom('geom1', 2);
model.result.dataset('arr1').selection.geom('geom1', 2);
model.result.dataset('arr1').selection.set([1 2]);
model.result.dataset.duplicate('arr2', 'arr1');
model.result.dataset('arr2').set('data', 'dset2');
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').run;
model.result('pg1').label('Displacement (pelw)');
model.result('pg1').set('data', 'arr1');
model.result('pg1').setIndex('looplevel', 10, 0);
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').create('def1', 'Deform');
model.result('pg1').run;
model.result('pg1').feature('surf1').feature('def1').set('expr', {'u' 'v'});
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').run;
model.result('pg2').label('Acoustic Pressure (acpr)');
model.result('pg2').set('data', 'arr1');
model.result('pg2').setIndex('looplevel', 10, 0);
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'apb1.p_t');
model.result('pg2').feature('surf1').set('colortable', 'Wave');
model.result('pg2').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').run;
model.result('pg3').label('Sound Pressure Level (acpr)');
model.result('pg3').set('data', 'arr1');
model.result('pg3').setIndex('looplevel', 10, 0);
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', 'acpr.Lp_t');
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Surface Impedance: 500Hz');
model.result('pg4').setIndex('looplevelinput', 'manual', 1);
model.result('pg4').setIndex('looplevel', [1], 1);
model.result('pg4').set('titletype', 'label');
model.result('pg4').set('xlabelactive', true);
model.result('pg4').set('xlabel', 'Incidence angle (deg)');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'Surface impedance (1)');
model.result('pg4').set('legendpos', 'middleright');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').setIndex('expr', 'real(-Zn)', 0);
model.result('pg4').feature('glob1').setIndex('descr', 'real(Zn)', 0);
model.result('pg4').feature('glob1').setIndex('expr', 'imag(-Zn)', 1);
model.result('pg4').feature('glob1').setIndex('descr', 'imag(Zn)', 1);
model.result('pg4').feature('glob1').set('linewidth', 2);
model.result('pg4').feature('glob1').set('autosolution', false);
model.result('pg4').feature('glob1').set('legendprefix', 'Transverse Isotropic: ');
model.result('pg4').create('glob2', 'Global');
model.result('pg4').feature('glob2').set('markerpos', 'datapoints');
model.result('pg4').feature('glob2').set('linewidth', 'preference');
model.result('pg4').feature('glob2').set('data', 'dset2');
model.result('pg4').feature('glob2').setIndex('looplevelinput', 'manual', 1);
model.result('pg4').feature('glob2').setIndex('looplevel', [1], 1);
model.result('pg4').feature('glob2').setIndex('expr', 'real(-Zn)', 0);
model.result('pg4').feature('glob2').setIndex('descr', 'real(Zn)', 0);
model.result('pg4').feature('glob2').setIndex('expr', 'imag(-Zn)', 1);
model.result('pg4').feature('glob2').setIndex('descr', 'imag(Zn)', 1);
model.result('pg4').feature('glob2').set('linestyle', 'dashed');
model.result('pg4').feature('glob2').set('linecolor', 'cyclereset');
model.result('pg4').feature('glob2').set('linewidth', 2);
model.result('pg4').feature('glob2').set('autosolution', false);
model.result('pg4').feature('glob2').set('legendprefix', 'Isotropic: ');
model.result('pg4').run;
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Surface Impedance: 700Hz');
model.result('pg5').setIndex('looplevel', [2], 1);
model.result('pg5').run;
model.result('pg5').feature('glob2').setIndex('looplevel', [2], 1);
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Surface Impedance: 1000Hz');
model.result('pg6').setIndex('looplevel', [3], 1);
model.result('pg6').run;
model.result('pg6').feature('glob2').setIndex('looplevel', [3], 1);
model.result('pg6').run;
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Surface Impedance: 3000Hz');
model.result('pg7').setIndex('looplevel', [4], 1);
model.result('pg7').run;
model.result('pg7').feature('glob2').setIndex('looplevel', [4], 1);
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Absorption Coefficients');
model.result('pg8').set('titletype', 'label');
model.result('pg8').set('xlabelactive', true);
model.result('pg8').set('xlabel', 'Incidence angle (deg)');
model.result('pg8').set('axislimits', true);
model.result('pg8').set('xmin', -0.5);
model.result('pg8').set('xmax', 85.5);
model.result('pg8').set('ymin', -0.01);
model.result('pg8').set('ymax', 1.01);
model.result('pg8').set('legendpos', 'lowerleft');
model.result('pg8').create('glob1', 'Global');
model.result('pg8').feature('glob1').set('markerpos', 'datapoints');
model.result('pg8').feature('glob1').set('linewidth', 'preference');
model.result('pg8').feature('glob1').setIndex('expr', 'alpha', 0);
model.result('pg8').feature('glob1').set('legendprefix', 'Transverse Isotropic: ');
model.result('pg8').create('glob2', 'Global');
model.result('pg8').feature('glob2').set('markerpos', 'datapoints');
model.result('pg8').feature('glob2').set('linewidth', 'preference');
model.result('pg8').feature('glob2').set('data', 'dset2');
model.result('pg8').feature('glob2').setIndex('expr', 'alpha', 0);
model.result('pg8').feature('glob2').set('linestyle', 'dashed');
model.result('pg8').feature('glob2').set('linecolor', 'cyclereset');
model.result('pg8').feature('glob2').set('legendprefix', 'Isotropic: ');
model.result('pg8').run;
model.result('pg2').run;

model.title('Transverse Isotropic Porous Layer');

model.description('This tutorial investigates the acoustic properties of a porous layer made of glass wool. The porous material has transverse isotropic properties and is modeled with the full anisotropic poroelastic material model.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('transverse_isotropic_porous_layer.mph');

model.modelNode.label('Components');

out = model;
