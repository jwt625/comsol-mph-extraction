function out = model
%
% displacement_ventilation.m
%
% Model exported on May 26 2025, 21:26 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/CFD_Module/Nonisothermal_Flow');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'TurbulentFlowkomega', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'WeaklyCompressible');
model.physics.create('ht', 'HeatTransferInFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics('ht').prop('ShapeProperty').set('order_temperature', '1');

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 3);
model.multiphysics('nitf1').set('Fluid_physics', 'spf');
model.multiphysics('nitf1').set('Heat_physics', 'ht');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/nitf1', true);

model.param.set('H', '3[m]');
model.param.descr('H', 'Room height');
model.param.set('D', '2.5[m]');
model.param.descr('D', 'Room depth');
model.param.set('W', '3.65[m]');
model.param.descr('W', 'Room width');
model.param.set('Hd', '0.5[m]');
model.param.descr('Hd', 'Diffuser inlet height');
model.param.set('Ad', '1.7[m^2]');
model.param.descr('Ad', 'Diffuser inlet area');
model.param.set('As', '0.0324[m^2]');
model.param.descr('As', 'Source inlet area');
model.param.set('Ao', '0.04[m^2]');
model.param.descr('Ao', 'Outlet area');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').set('Ms', '0.028[m^3/s]');
model.variable('var1').descr('Ms', 'Volume flow rate at source');
model.variable('var1').set('Md', '0.051[m^3/s]');
model.variable('var1').descr('Md', 'Volume flow rate at diffuser');
model.variable('var1').set('Us', 'Ms/As');
model.variable('var1').descr('Us', 'Source inlet velocity');
model.variable('var1').set('Ud', 'Md/Ad');
model.variable('var1').descr('Ud', 'Diffuser inlet velocity');
model.variable('var1').set('Tdiff', '21[degC]');
model.variable('var1').descr('Tdiff', 'Diffuser air temperature');
model.variable('var1').set('Tsource', '45[degC]');
model.variable('var1').descr('Tsource', 'Source air temperature');
model.variable('var1').set('Tout', '17[degC]');
model.variable('var1').descr('Tout', 'Outside temperature');

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'D' 'W' '2*H'});
model.geom('geom1').feature('blk1').set('pos', {'0' '-W/2' '-H'});
model.geom('geom1').run('blk1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', {'0.05[m]' '1' '2*Hd'});
model.geom('geom1').feature('blk2').setIndex('size', 'Ad/Hd', 1);
model.geom('geom1').feature('blk2').set('pos', {'-0.05[m]' '-Ad/Hd/2' '0'});
model.geom('geom1').feature('blk2').setIndex('pos', '-Hd', 2);
model.geom('geom1').run('blk2');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').set('intbnd', false);
model.geom('geom1').feature('uni1').selection('input').set({'blk1' 'blk2'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('blk3', 'Block');
model.geom('geom1').feature('blk3').set('size', {'4[m]' '4[m]' '4[m]'});
model.geom('geom1').feature('blk3').set('pos', {'-1[m]' '-2[m]' '-4[m]'});
model.geom('geom1').run('blk3');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').set('intbnd', false);
model.geom('geom1').feature('dif1').selection('input').set({'uni1'});
model.geom('geom1').feature('dif1').selection('input2').set({'blk3'});
model.geom('geom1').run('dif1');
model.geom('geom1').create('blk4', 'Block');
model.geom('geom1').feature('blk4').set('size', {'3[m]' '2[m]' '5[m]'});
model.geom('geom1').feature('blk4').set('pos', {'-0.2[m]' '-2[m]' '0'});
model.geom('geom1').feature('blk4').setIndex('pos', '-1[m]', 2);
model.geom('geom1').run('blk4');
model.geom('geom1').create('dif2', 'Difference');
model.geom('geom1').feature('dif2').set('intbnd', false);
model.geom('geom1').feature('dif2').selection('input').set({'dif1'});
model.geom('geom1').feature('dif2').selection('input2').set({'blk4'});
model.geom('geom1').run('dif2');
model.geom('geom1').create('blk5', 'Block');
model.geom('geom1').feature('blk5').set('size', {'sqrt(As)' 'sqrt(As)/2' '1'});
model.geom('geom1').feature('blk5').setIndex('size', 'H/2', 2);
model.geom('geom1').feature('blk5').set('pos', {'D/2-sqrt(As)/2' '0' '0'});
model.geom('geom1').feature('blk5').setIndex('pos', '-0.05[m]', 2);
model.geom('geom1').run('blk5');
model.geom('geom1').create('blk6', 'Block');
model.geom('geom1').feature('blk6').set('size', {'sqrt(Ao)' 'sqrt(Ao)/2' '1'});
model.geom('geom1').feature('blk6').setIndex('size', '0.45[m]', 2);
model.geom('geom1').feature('blk6').set('pos', {'D/2-sqrt(Ao)/2' '0' '0'});
model.geom('geom1').feature('blk6').setIndex('pos', 'H-0.3[m]', 2);
model.geom('geom1').run('fin');
model.geom('geom1').create('mcd1', 'MeshControlDomains');
model.geom('geom1').feature('mcd1').selection('input').set('fin', [2 5]);
model.geom('geom1').run('mcd1');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('spf').prop('PhysicalModelProperty').set('IncludeGravity', true);
model.physics('spf').prop('PhysicalModelProperty').set('rref', {'0' '0' 'H+0.15[m]'});
model.physics('spf').feature('grav1').set('buoyancyInducedTurbulence', true);
model.physics('spf').create('inl1', 'InletBoundary', 2);
model.physics('spf').feature('inl1').selection.set([13]);
model.physics('spf').feature('inl1').set('U0in', 'Us');
model.physics('spf').feature('inl1').set('IT_list', 'upper_end_fully_turbulent');
model.physics('spf').create('inl2', 'InletBoundary', 2);
model.physics('spf').feature('inl2').selection.set([1]);
model.physics('spf').feature('inl2').set('U0in', 'Ud');
model.physics('spf').create('out1', 'OutletBoundary', 2);
model.physics('spf').feature('out1').selection.set([10]);
model.physics('spf').feature('out1').set('NormalFlow', true);
model.physics('spf').create('sym1', 'Symmetry', 2);
model.physics('spf').feature('sym1').selection.set([2]);
model.physics('ht').create('sym1', 'Symmetry', 2);
model.physics('ht').feature('sym1').selection.set([2]);
model.physics('ht').create('temp1', 'TemperatureBoundary', 2);
model.physics('ht').feature('temp1').selection.set([1]);
model.physics('ht').feature('temp1').set('T0', 'Tdiff');
model.physics('ht').create('temp2', 'TemperatureBoundary', 2);
model.physics('ht').feature('temp2').selection.set([13]);
model.physics('ht').feature('temp2').set('T0', 'Tsource');
model.physics('ht').create('ofl1', 'ConvectiveOutflow', 2);
model.physics('ht').feature('ofl1').selection.set([10]);
model.physics('ht').create('hf1', 'HeatFluxBoundary', 2);
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', '0.4[W/(m^2*K)]');
model.physics('ht').feature('hf1').set('Text', 'Tout');
model.physics('ht').feature('hf1').selection.set([6 7 8 17]);

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmin', 0.015);
model.mesh('mesh1').feature('size1').selection.set([9 11 12 14 15 16]);
model.mesh('mesh1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('size1').set('hmax', 0.015);
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').feature('size1').selection.set([2 3 4 5]);
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hgradactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hgrad', 1.05);
model.mesh('mesh1').feature('bl1').feature('blp1').set('blhminfact', 3);
model.mesh('mesh1').feature('bl1').feature('blp1').set('blnlayers', 5);
model.mesh('mesh1').run;

model.result.setOnlyPlotWhenRequested(true);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u' 'comp1_T' 'comp1_nitf1_TWall_d' 'comp1_nitf1_TWall_u'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, nonisothermal flow');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Nonisothermal Flow');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_k' 'comp1_om'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.45);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, turbulence variables (spf)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'i2');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Turbulence Variables');
model.sol('sol1').feature('s1').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s1').feature('se1').set('subinitcfl', 2);
model.sol('sol1').feature('s1').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s1').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s1').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s1').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s1').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s1').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s1').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s1').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s1').feature('se1').set('maxsegiter', 400);
model.sol('sol1').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.om 0 comp1.k 0 comp1.T 0 ');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, nonisothermal flow');
model.sol('sol1').feature('s1').create('d2', 'Direct');
model.sol('sol1').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d2').label('Direct, turbulence variables (spf)');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Velocity (spf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('slc1', 'Slice');
model.result('pg1').feature('slc1').label('Slice');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('smooth', 'internal');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([3 4 5 6 7 8 9 11 12 14 15 16 17]);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Pressure (spf)');
model.result('pg2').set('data', 'surf1');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'surf1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond1/pg4');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('expr', 'p');
model.result('pg2').feature('surf1').set('colortable', 'Dipole');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature('surf1').feature.create('tran1', 'Transparency');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Wall Resolution (spf)');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond1/pg3');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Wall Resolution');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'spf.Delta_wPlus');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Temperature (ht)');
model.result('pg4').set('data', 'dset1');
model.result('pg4').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg4').feature.create('vol1', 'Volume');
model.result('pg4').feature('vol1').set('showsolutionparams', 'on');
model.result('pg4').feature('vol1').set('solutionparams', 'parent');
model.result('pg4').feature('vol1').set('expr', 'T');
model.result('pg4').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg4').feature('vol1').set('smooth', 'internal');
model.result('pg4').feature('vol1').set('showsolutionparams', 'on');
model.result('pg4').feature('vol1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Temperature and Fluid Flow (nitf1)');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').set('data', 'dset1');
model.result('pg5').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond3/pg1');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').label('Wall Temperature');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('expr', 'ht.Tvar');
model.result('pg5').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg5').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg5').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg5').feature('surf1').feature('sel1').selection.set([3 4 5 6 7 8 9 11 12 14 15 16 17]);
model.result('pg5').feature.create('arwv1', 'ArrowVolume');
model.result('pg5').feature('arwv1').label('Fluid Flow');
model.result('pg5').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg5').feature('arwv1').set('solutionparams', 'parent');
model.result('pg5').feature('arwv1').set('expr', {'nitf1.ux' 'nitf1.uy' 'nitf1.uz'});
model.result('pg5').feature('arwv1').set('xnumber', 30);
model.result('pg5').feature('arwv1').set('ynumber', 30);
model.result('pg5').feature('arwv1').set('znumber', 30);
model.result('pg5').feature('arwv1').set('arrowtype', 'cone');
model.result('pg5').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg5').feature('arwv1').set('data', 'parent');
model.result('pg5').feature('arwv1').feature.create('col1', 'Color');
model.result('pg5').feature('arwv1').feature('col1').set('showcolordata', 'off');
model.result('pg5').feature('arwv1').feature.create('filt1', 'Filter');
model.result('pg5').feature('arwv1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result('pg3').feature('surf1').set('coloring', 'uniform');
model.result('pg3').feature('surf1').set('color', 'gray');
model.result('pg3').feature('surf1').set('titletype', 'none');
model.result('pg3').create('str1', 'Streamline');
model.result('pg3').feature('str1').set('data', 'dset1');
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('udist', 0.07);
model.result('pg3').feature('str1').set('linetype', 'ribbon');
model.result('pg3').feature('str1').create('col1', 'Color');
model.result('pg3').feature('str1').feature('col1').set('expr', 'T');
model.result('pg3').feature('str1').feature('col1').set('descr', 'Temperature');
model.result('pg3').feature('str1').feature('col1').set('colortable', 'ThermalDark');
model.result('pg3').feature('str1').feature('col1').set('rangecoloractive', true);
model.result('pg3').feature('str1').feature('col1').set('rangecolormin', 293);
model.result('pg3').feature('str1').feature('col1').set('rangecolormax', 300);
model.result('pg3').feature('str1').set('titletype', 'manual');
model.result('pg3').feature('str1').set('title', 'Streamlines colored by temperature');
model.result('pg3').label('Streamlines');

model.view.create('view2', 'geom1');
model.view('view2').model('comp1');
model.view('view2').camera.set('zoomanglefull', 13.29);
model.view('view2').camera.setIndex('position', -15.2134, 0);
model.view('view2').camera.setIndex('position', -15.397, 1);
model.view('view2').camera.setIndex('position', 5.677, 2);
model.view('view2').camera.setIndex('target', 1.225, 0);
model.view('view2').camera.setIndex('target', 0.9125, 1);
model.view('view2').camera.setIndex('target', 1.55, 2);
model.view('view2').camera.setIndex('up', 0.12455, 0);
model.view('view2').camera.setIndex('up', 0.1236, 1);
model.view('view2').camera.setIndex('up', 0.9845, 2);
model.view('view2').camera.setIndex('rotationpoint', 1.225, 0);
model.view('view2').camera.setIndex('rotationpoint', 0.9125, 1);
model.view('view2').camera.setIndex('rotationpoint', 1.55, 2);
model.view('view2').camera.setIndex('viewoffset', 0.00677, 0);
model.view('view2').camera.set('viewoffset', [0.00677 0.03245]);

model.result('pg3').set('view', 'view2');
model.result('pg3').run;
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Isothermal Contours (ht)');
model.result('pg6').set('data', 'dset1');
model.result('pg6').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg3');
model.result('pg6').feature.create('iso1', 'Isosurface');
model.result('pg6').feature('iso1').set('solutionparams', 'parent');
model.result('pg6').feature('iso1').set('expr', 'T');
model.result('pg6').feature('iso1').set('number', 10);
model.result('pg6').feature('iso1').set('colortable', 'HeatCameraLight');
model.result('pg6').feature('iso1').set('smooth', 'internal');
model.result('pg6').feature('iso1').set('showsolutionparams', 'on');
model.result('pg6').feature('iso1').set('data', 'parent');
model.result('pg6').label('Isothermal Contours (ht)');
model.result('pg6').set('view', 'view2');
model.result('pg6').feature('iso1').set('unit', 'degC');
model.result('pg6').feature('iso1').set('levelmethod', 'levels');
model.result('pg6').feature('iso1').set('levels', '22 23 24 25 26');
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').importData('displacement_ventilation_exp.txt');
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').set('data', 'none');
model.result('pg7').create('tblp1', 'Table');
model.result('pg7').feature('tblp1').set('source', 'table');
model.result('pg7').feature('tblp1').set('table', 'tbl1');
model.result('pg7').feature('tblp1').set('linewidth', 'preference');
model.result('pg7').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg7').feature('tblp1').set('xaxisdata', 2);
model.result('pg7').feature('tblp1').set('linestyle', 'none');
model.result('pg7').feature('tblp1').set('linemarker', 'circle');
model.result('pg7').feature('tblp1').set('legend', true);
model.result('pg7').feature('tblp1').set('legendmethod', 'manual');
model.result('pg7').feature('tblp1').setIndex('legends', 'Experiment', 0);
model.result.dataset.create('cln1', 'CutLine3D');
model.result.dataset('cln1').setIndex('genpoints', 'D/2', 0, 0);
model.result.dataset('cln1').setIndex('genpoints', 'D/2', 1, 0);
model.result.dataset('cln1').setIndex('genpoints', 'H', 1, 2);
model.result('pg7').set('data', 'cln1');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr1').set('linewidth', 'preference');
model.result('pg7').feature('lngr1').set('expr', 'z');
model.result('pg7').feature('lngr1').set('xdata', 'expr');
model.result('pg7').feature('lngr1').set('xdataexpr', 'T');
model.result('pg7').feature('lngr1').set('xdataunit', 'degC');
model.result('pg7').feature('lngr1').set('linewidth', 3);
model.result('pg7').feature('lngr1').set('legend', true);
model.result('pg7').feature('lngr1').set('legendmethod', 'manual');
model.result('pg7').feature('lngr1').setIndex('legends', 'Model', 0);
model.result('pg7').set('titletype', 'none');
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', 'T [degC]');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'z [m]');
model.result('pg7').set('axislimits', true);
model.result('pg7').set('xmin', 0);
model.result('pg7').set('xmax', 46);
model.result('pg7').set('ymin', 0);
model.result('pg7').set('ymax', 3);
model.result('pg7').run;

model.title('Displacement Ventilation');

model.description('This example investigates the performance of a displacement ventilation system. The flow is modeled using the Nonisothermal Turbulent Flow, k-omega Model interface.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('displacement_ventilation.mph');

model.modelNode.label('Components');

out = model;
