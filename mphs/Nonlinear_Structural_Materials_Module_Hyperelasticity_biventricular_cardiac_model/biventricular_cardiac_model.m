function out = model
%
% biventricular_cardiac_model.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Nonlinear_Structural_Materials_Module/Hyperelasticity');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('wd', 'WallDistance', 'geom1');
model.physics('wd').model('comp1');
model.physics.create('wd2', 'WallDistance', 'geom1');
model.physics('wd2').model('comp1');
model.physics.create('cc', 'CurvilinearCoordinates', 'geom1');
model.physics('cc').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/wd', true);
model.study('std1').feature('stat').setSolveFor('/physics/wd2', true);
model.study('std1').feature('stat').setSolveFor('/physics/cc', true);

model.geom('geom1').insertFile('biventricular_cardiac_model_geom_sequence.mph', 'geom1');
model.geom('geom1').run('igf1');

model.param.label('Heart Geometry Parameters');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Basal Surface');
model.selection('sel1').geom(2);

model.view('view1').set('transparency', true);

model.selection('sel1').set([1 3 9 17]);

model.view('view1').set('showgrid', true);

model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('LV-Endocardium');
model.selection('sel2').geom(2);
model.selection('sel2').set([6 7 12 16]);

model.view('view1').set('showgrid', true);

model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('RV-Endocardium');
model.selection('sel3').geom(2);
model.selection('sel3').set([20 22]);

model.view('view1').set('showgrid', true);

model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Epicardium');
model.selection('sel4').geom(2);
model.selection('sel4').set([4 5 10 11 15 18 19 21]);

model.view('view1').set('showgrid', true);

model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Endocardium');
model.selection('uni1').set('entitydim', 2);
model.selection('uni1').set('input', {'sel2' 'sel3'});

model.view('view1').set('showgrid', true);

model.param.create('par2');
model.param('par2').label('Structural Mechanics Parameters');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('mu_lame', '0.2[MPa]', ['Lam' native2unicode(hex2dec({'00' 'e9'}), 'unicode') ' parameter']);
model.param('par2').set('lambda_lame', '0.5[MPa]', ['Lam' native2unicode(hex2dec({'00' 'e9'}), 'unicode') ' parameter']);
model.param('par2').set('rhos', '1370[kg/m^3]', 'Myocardial density');
model.param('par2').set('af', '1.685[kPa]', 'Fiber direction material property');
model.param('par2').set('bf', '15.779', 'Fiber direction material property');
model.param('par2').set('theta_epi_max', '-60 [deg]', 'Epicardial fiber angle at basal plane');
model.param('par2').set('theta_endo_max', '+60 [deg]', 'Endocardial fiber angle at basal plane');
model.param.create('par3');
model.param('par3').label('Electrical Parameters');

% To import content from file, use:
% model.param('par3').loadFile('FILENAME');
model.param('par3').set('gamma', '0.002', 'Recovery variable parameter');
model.param('par3').set('mu1', '0.2', 'Recovery variable parameter');
model.param('par3').set('mu2', '0.3', 'Recovery variable parameter');
model.param('par3').set('b', '0.15', 'Aliev-Panfilov parameter');
model.param('par3').set('alpha', '0.01', 'Aliev-Panfilov parameter');
model.param('par3').set('c', '8', 'Aliev-Panfilov parameter');
model.param('par3').set('Gs', '10', 'Maximum conductance, stretch-induced excitation');
model.param('par3').set('phis', '0.6', 'Resting potential of stretched-activated channels');
model.param('par3').set('d_iso', '1[mm^2/ms]', 'Isotropic conduction velocity');
model.param('par3').set('d_ani', '0.1[mm^2/ms]', 'Anisotropic conduction velocity');
model.param('par3').set('Cm', '1[F/m^2]', 'Transmembrane capacitance per unit area');
model.param('par3').set('Chi_m', '1[1/m]', 'Area to volume ratio');
model.param.create('par4');
model.param('par4').label('Active Stress Parameters');

% To import content from file, use:
% model.param('par4').loadFile('FILENAME');
model.param('par4').set('kT', '0.005[MPa/mV]', 'Saturated active stress');
model.param('par4').set('Phir', '-80[mV]', 'Resting potential');
model.param('par4').set('e0', '0.1[1/ms]', 'Rate constants of contraction');
model.param('par4').set('einf', '1[1/ms]', 'Rate constants of contraction');
model.param('par4').set('zeta', '1[1/mV]', 'Transition rate');
model.param('par4').set('Phibar', '0[mV]', 'Phase shift');
model.param('par4').set('vf', '1', 'Active stress scaling along fiber direction');
model.param('par4').set('vs', '0.4', 'Active stress scaling along sheet direction');
model.param('par4').set('vn', '0.4', 'Active stress scaling along normal to sheet direction');
model.param.create('par5');
model.param('par5').label('Conversion Factors Parameters');

% To import content from file, use:
% model.param('par5').loadFile('FILENAME');
model.param('par5').set('betaPhi', '100[mV]', 'Conversion factor');
model.param('par5').set('deltaPhi', '-80[mV]', 'Conversion factor');
model.param('par5').set('t0', '12[ms]', 'Time parameter');
model.param('par5').set('t1', '75[ms]', 'Time parameter');
model.param('par5').set('tau0', '0.55', 'Time parameter');
model.param('par5').set('ts', '12.9[ms]', 'Time parameter');

model.physics('wd').label('Wall Distance: Epicardium');
model.physics('wd').create('wall1', 'Wall', 2);
model.physics('wd').feature('wall1').selection.named('sel4');
model.physics('wd2').label('Wall Distance: Endocardium');
model.physics('wd2').create('wall1', 'Wall', 2);
model.physics('wd2').feature('wall1').selection.named('uni1');
model.physics('cc').label('Sheet Direction');
model.physics('cc').prop('Settings').set('CreateBasis', true);
model.physics('cc').feature('css1').set('SecondVector', 'z');
model.physics('cc').create('diff1', 'DiffusionMethod', 3);
model.physics('cc').feature('diff1').create('inl1', 'Inlet', 2);
model.physics('cc').feature('diff1').feature('inl1').selection.named('uni1');
model.physics('cc').feature('diff1').create('out1', 'Outlet', 2);
model.physics('cc').feature('diff1').feature('out1').selection.named('sel4');

model.mesh('mesh1').autoMeshSize(3);
model.mesh('mesh1').run;

model.study('std1').label('Study: Fiber Direction');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_cc_diff1_U'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Sheet Direction');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_G'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Wall Distance: Epicardium');
model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_G2'});
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').label('Wall Distance: Endocardium');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').create('slc1', 'Slice');
model.result('pg1').feature('slc1').set('expr', 'G');
model.result('pg1').feature('slc1').set('descr', 'Reciprocal wall distance');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('slc1', 'Slice');
model.result('pg2').feature('slc1').set('expr', 'G2');
model.result('pg2').feature('slc1').set('descr', 'Reciprocal wall distance');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Vector Field (cc)');
model.result('pg3').set('titlecolor', 'black');
model.result('pg3').set('edgecolor', 'black');
model.result('pg3').set('legendcolor', 'black');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'CurvilinearCoordinates/phys1/pdef1/pcond1/pg1');
model.result('pg3').feature.create('str1', 'Streamline');
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('udist', 0.1);
model.result('pg3').feature('str1').set('linetype', 'tube');
model.result('pg3').feature('str1').set('smooth', 'internal');
model.result('pg3').feature('str1').set('maxlen', Inf);
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('maxlen', Inf);
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('maxlen', Inf);
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('maxlen', Inf);
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('maxlen', Inf);
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').label('Coordinate system (cc)');
model.result('pg4').create('sys1', 'CoordSysVolume');
model.result('pg4').feature('sys1').set('sys', 'cc_cs');
model.result('pg1').run;
model.result('pg1').label('Wall Distance: Epicardium');
model.result('pg2').run;
model.result('pg2').label('Wall Distance: Endocardium');
model.result('pg1').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').add('plotgroup', 'pg1');
model.nodeGroup('grp1').add('plotgroup', 'pg2');
model.nodeGroup('grp1').add('plotgroup', 'pg3');
model.nodeGroup('grp1').add('plotgroup', 'pg4');
model.nodeGroup('grp1').label('Study: Fiber Direction');

model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').feature('sys1').set('znumber', 4);
model.result('pg4').run;
model.result('pg4').feature('sys1').set('ynumber', 4);
model.result('pg4').run;
model.result('pg4').feature('sys1').set('xnumber', 4);
model.result('pg4').run;

model.view('view1').set('showgrid', true);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Fiber Orientation');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('D_Epi', 'wd.Dw', 'Distance from outer boundaries (Epicardium)');
model.variable('var1').set('D_Endo', 'wd2.Dw', 'Distance from inner boundaries (Endocardium)');
model.variable('var1').set('Beta', 'if(D_Endo+D_Epi>0,D_Epi/(D_Endo+D_Epi),0.5)', 'Dimensionless wall distance');
model.variable('var1').set('theta_endo', 'theta_endo_max+(Z/cL)*(theta_endo_max)', 'Fiber orientations on endocardium');
model.variable('var1').set('theta_epi', 'theta_epi_max+(Z/cR)*(theta_epi_max)', 'Fiber orientations on epicardium');
model.variable('var1').set('theta', '(theta_epi*(1-Beta)+theta_endo*Beta)', 'Fiber orientations in the myocardium');

model.coordSystem.create('sys2', 'geom1', 'Rotated');
model.coordSystem('sys2').set('angle', {'0' 'theta' '0'});
model.coordSystem.create('sys3', 'geom1', 'Composite');
model.coordSystem('sys3').label('Fiber Reference System');
model.coordSystem('sys3').set('baseSystem', 'cc_cs');
model.coordSystem('sys3').set('relativeSystem', 'sys2');
model.coordSystem.create('sys4', 'geom1', 'Cylindrical');
model.coordSystem('sys4').set('frametype', 'material');

model.nodeGroup.create('grp2', 'Definitions', 'comp1');
model.nodeGroup('grp2').set('type', 'coordsys');
model.nodeGroup('grp2').add('coordsys', 'sys1');
model.nodeGroup('grp2').add('coordsys', 'cc_cs');
model.nodeGroup('grp2').add('coordsys', 'sys2');
model.nodeGroup('grp2').add('coordsys', 'sys3');
model.nodeGroup('grp2').add('coordsys', 'sys4');
model.nodeGroup('grp2').label('Coordinate Systems');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study('std1').feature('stat').setSolveFor('/physics/solid', false);

model.physics.create('c', 'CoefficientFormPDE', 'geom1', {'u2'});

model.study('std1').feature('stat').setSolveFor('/physics/c', false);

model.physics('c').prop('EquationForm').set('form', 'Automatic');
model.physics.create('c2', 'CoefficientFormPDE', 'geom1', {'u3'});

model.study('std1').feature('stat').setSolveFor('/physics/c2', false);

model.physics('c2').prop('EquationForm').set('form', 'Automatic');
model.physics.create('c3', 'CoefficientFormPDE', 'geom1', {'u4'});

model.study('std1').feature('stat').setSolveFor('/physics/c3', false);

model.physics('c3').prop('EquationForm').set('form', 'Automatic');
model.physics('solid').prop('StructuralTransientBehavior').set('StructuralTransientBehavior', 'Quasistatic');
model.physics('solid').prop('ShapeProperty').set('order_displacement', 1);
model.physics('solid').create('hmm1', 'HyperelasticModel', 3);
model.physics('solid').feature('hmm1').selection.all;
model.physics('solid').feature('hmm1').create('fib1', 'Fiber', 3);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Lame', 'Lame_parameters');
model.material('mat1').propertyGroup('Lame').set('lambLame', {'lambda_lame'});
model.material('mat1').propertyGroup('Lame').set('muLame', {'mu_lame'});
model.material('mat1').propertyGroup('def').set('density', {'rhos'});
model.material('mat1').propertyGroup.create('HolzapfelGasserOgden', 'Holzapfel_Gasser_Ogden');
model.material('mat1').propertyGroup('HolzapfelGasserOgden').set('k1HGO', {'af'});
model.material('mat1').propertyGroup('HolzapfelGasserOgden').set('k2HGO', {'bf'});
model.material('mat1').propertyGroup('HolzapfelGasserOgden').set('k3HGO', {'0'});

model.physics('c').label('Electrophysiology: Transmembrane Potential (Phi)');
model.physics('c').prop('Units').set('CustomDependentVariableUnit', '1');
model.physics('c').prop('Units').set('DependentVariableQuantity', 'none');
model.physics('c').prop('Units').setIndex('CustomDependentVariableUnit', 'V', 0, 0);
model.physics('c').prop('Units').setIndex('CustomSourceTermUnit', 'A/m^3', 0, 0);
model.physics('c').prop('ShapeProperty').set('order', 1);
model.physics('c').prop('ShapeProperty').set('frame', 'material');
model.physics('c').field('dimensionless').field('Phi');
model.physics('c').field('dimensionless').component(1, 'Phi');
model.physics('c2').label('Electrophysiology: Conductance of Slow Processes (r)');
model.physics('c2').prop('Units').setIndex('CustomSourceTermUnit', '1/s', 0, 0);
model.physics('c2').prop('ShapeProperty').set('order', 1);
model.physics('c2').prop('ShapeProperty').set('frame', 'material');
model.physics('c2').field('dimensionless').field('r');
model.physics('c2').field('dimensionless').component(1, 'r');
model.physics('c3').label('Active Stress (Sa)');
model.physics('c3').prop('Units').set('CustomDependentVariableUnit', '1');
model.physics('c3').prop('Units').set('DependentVariableQuantity', 'none');
model.physics('c3').prop('Units').setIndex('CustomDependentVariableUnit', 'N/m^2', 0, 0);
model.physics('c3').prop('Units').setIndex('CustomSourceTermUnit', 'N/m^2/s', 0, 0);
model.physics('c3').prop('ShapeProperty').set('order', 1);
model.physics('c3').prop('ShapeProperty').set('frame', 'material');
model.physics('c3').field('dimensionless').field('Sa');
model.physics('c3').field('dimensionless').component(1, 'Sa');

model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Electrophysiology Variables');

% To import content from file, use:
% model.variable('var2').loadFile('FILENAME');
model.variable('var2').set('phi', '(Phi-deltaPhi)/betaPhi', 'Dimensionless potential');
model.variable('var2').set('eps_delay', 'e0+(einf-e0)*exp( -exp( -zeta*(Phi-Phibar) ) )', 'Delay function');
model.variable('var2').set('tact', '50[ms]-Z/cL*50[ms]', 'Activation time');
model.variable('var2').set('betat', 'ts*(1-tau0*(tact-t0)/(t1-t0))', 'Time scaling factor');
model.variable('var2').set('lambda', 'sqrt(solid.hmm1.fib1.IaCIe)', 'Stretch in fiber direction');
model.variable('var2').set('thetaSwitch', 'if(lambda>1,1,0)', 'Activation parameter');
model.variable('var2').set('Ie', 'Cm*betaPhi/betat*(c*phi*(phi-alpha)*(phi-1)+r*phi)', 'Ionic current (pure electrical)');
model.variable('var2').set('Im', 'Cm*betaPhi/betat*thetaSwitch*Gs*(lambda-1)*(phi-phis)', 'Ionic current (stretch induced)');
model.variable('var2').set('D_iso', 'd_iso*(Cm*Chi_m)', 'Isotropic conductivity');
model.variable('var2').set('D_ani', 'd_ani*(Cm*Chi_m)', 'Anisotropic conductivity, fiber direction');
model.variable('var2').set('DfibXX', 'solid.hmm1.fib1.a0X*D_ani*solid.hmm1.fib1.a0X', 'Conductivity tensor, global coordinate system');
model.variable('var2').set('DfibXY', 'solid.hmm1.fib1.a0X*D_ani*solid.hmm1.fib1.a0Y', 'Conductivity tensor, global coordinate system');
model.variable('var2').set('DfibXZ', 'solid.hmm1.fib1.a0X*D_ani*solid.hmm1.fib1.a0Z', 'Conductivity tensor, global coordinate system');
model.variable('var2').set('DfibYY', 'solid.hmm1.fib1.a0Y*D_ani*solid.hmm1.fib1.a0Y', 'Conductivity tensor, global coordinate system');
model.variable('var2').set('DfibYZ', 'solid.hmm1.fib1.a0Y*D_ani*solid.hmm1.fib1.a0Z', 'Conductivity tensor, global coordinate system');
model.variable('var2').set('DfibZZ', 'solid.hmm1.fib1.a0Z*D_ani*solid.hmm1.fib1.a0Z', 'Conductivity tensor, global coordinate system');

model.physics('c').feature('cfeq1').setIndex('c', 'D_iso+DfibXX', 0, 0);
model.physics('c').feature('cfeq1').setIndex('c', 'D_iso+DfibXX', 0, 0);
model.physics('c').feature('cfeq1').setIndex('c', 'DfibXY', 0, 1);
model.physics('c').feature('cfeq1').setIndex('c', 'DfibXY', 0, 3);
model.physics('c').feature('cfeq1').setIndex('c', 'DfibXZ', 0, 2);
model.physics('c').feature('cfeq1').setIndex('c', 'DfibXZ', 0, 6);
model.physics('c').feature('cfeq1').setIndex('c', 'D_iso+DfibYY', 0, 4);
model.physics('c').feature('cfeq1').setIndex('c', 'D_iso+DfibYY', 0, 4);
model.physics('c').feature('cfeq1').setIndex('c', 'DfibYZ', 0, 5);
model.physics('c').feature('cfeq1').setIndex('c', 'DfibYZ', 0, 7);
model.physics('c').feature('cfeq1').setIndex('c', 'D_iso+DfibZZ', 0, 8);
model.physics('c').feature('cfeq1').setIndex('c', 'D_iso+DfibZZ', 0, 8);
model.physics('c').feature('cfeq1').setIndex('f', '-Chi_m*(Ie+Im)', 0);
model.physics('c').feature('cfeq1').setIndex('da', 'Chi_m*Cm', 0);
model.physics('c').feature('init1').set('Phi', 'Phir+70[mV]*(Z>-1e-4[mm])*(X<31[mm])*(X>0[mm])*(Y>-10[mm])*(Y<10[mm])');
model.physics('c2').feature('cfeq1').setIndex('c', [0 0 0 0 0 0 0 0 0], 0);
model.physics('c2').feature('cfeq1').setIndex('a', '(1/betat)*(gamma+(mu1/(phi+mu2))*c*phi*(phi-b-1))', 0);
model.physics('c2').feature('cfeq1').setIndex('f', '(1/betat)*(-gamma*c*phi*(phi-b-1)-mu1/(phi+mu2)*r^2)', 0);
model.physics('c3').feature('cfeq1').setIndex('c', [0 0 0 0 0 0 0 0 0], 0);
model.physics('c3').feature('cfeq1').setIndex('a', 'eps_delay', 0);
model.physics('c3').feature('cfeq1').setIndex('f', 'eps_delay*kT*(Phi-Phir)', 0);
model.physics('solid').feature('hmm1').feature('fib1').set('coordinateSystem', 'sys3');
model.physics('solid').feature('hmm1').feature('fib1').set('directionSelection', 'x3');
model.physics('solid').feature('hmm1').create('exs1', 'ExternalStress', 3);
model.physics('solid').feature('hmm1').feature('exs1').set('coordinateSystem', 'sys3');
model.physics('solid').feature('hmm1').feature('exs1').set('Sext', {'vs*Sa' '0' '0' '0' 'vn*Sa' '0' '0' '0' 'vf*Sa'});
model.physics('solid').create('disp1', 'Displacement2', 2);
model.physics('solid').feature('disp1').selection.named('sel1');
model.physics('solid').feature('disp1').setIndex('Direction', 'prescribed', 0);
model.physics('solid').feature('disp1').setIndex('Direction', 'prescribed', 1);
model.physics('solid').feature('disp1').setIndex('Direction', 'prescribed', 2);
model.physics('solid').create('enc1', 'EnclosedCavity', 2);
model.physics('solid').feature('enc1').feature.remove('fl1');
model.physics('solid').feature('enc1').label('Enclosed Cavity: Left Ventricle');
model.physics('solid').feature('enc1').selection.named('sel2');
model.physics('solid').feature('enc1').set('volumeType', 'openSurface');
model.physics('solid').feature('enc1').selection('referencePoint').set([2]);
model.physics('solid').feature.duplicate('enc2', 'enc1');
model.physics('solid').feature('enc2').label('Enclosed Cavity: Right Ventricle');
model.physics('solid').feature('enc2').selection.set([19 20 21 22]);

model.nodeGroup.create('grp3', 'Physics', 'solid');
model.nodeGroup('grp3').placeAfter('disp1');
model.nodeGroup('grp3').add('enc1');
model.nodeGroup('grp3').add('enc2');
model.nodeGroup('grp3').label('Internal Volumes');

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/wd', false);
model.study('std2').feature('time').setSolveFor('/physics/wd2', false);
model.study('std2').feature('time').setSolveFor('/physics/cc', false);
model.study('std2').feature('time').setSolveFor('/physics/solid', true);
model.study('std2').feature('time').setSolveFor('/physics/c', true);
model.study('std2').feature('time').setSolveFor('/physics/c2', true);
model.study('std2').feature('time').setSolveFor('/physics/c3', true);
model.study('std2').label('Study: Excitation-Contraction');
model.study('std2').feature('time').set('tunit', 'ms');
model.study('std2').feature('time').set('tlist', 'range(0,5,320)');
model.study('std2').feature('time').set('usesol', true);
model.study('std2').feature('time').set('notsolmethod', 'sol');
model.study('std2').feature('time').set('notstudy', 'std1');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.12272326592785902');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,5,320)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 0.001);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('t1').create('se1', 'Segregated');
model.sol('sol2').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_Phi'});
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').label('Electrophysiology: Transmembrane Potential (Phi)');
model.sol('sol2').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_r'});
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').label('Electrophysiology: Conductance of Slow Processes (r)');
model.sol('sol2').feature('t1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('segvar', {'comp1_Sa'});
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').label('Active Stress (Sa)');
model.sol('sol2').feature('t1').feature('se1').create('ss4', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss4').set('segvar', {'comp1_u'});
model.sol('sol2').feature('t1').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('t1').feature('d1').set('nliniterrefine', true);
model.sol('sol2').feature('t1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol2').feature('t1').feature('se1').feature('ss4').set('linsolver', 'd1');
model.sol('sol2').feature('t1').feature('se1').feature('ss4').label('Solid Mechanics');
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i1').set('rhob', 40);
model.sol('sol2').feature('t1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('t1').feature('i1').label('Suggested Iterative Solver (GMRES with SA AMG) (solid)');
model.sol('sol2').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runFromTo('st1', 'v1');

model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset2');
model.result('pg5').set('defaultPlotID', 'stress');
model.result('pg5').label('Stress (solid)');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').create('vol1', 'Volume');
model.result('pg5').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg5').feature('vol1').set('threshold', 'manual');
model.result('pg5').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg5').feature('vol1').set('resolution', 'custom');
model.result('pg5').feature('vol1').set('refine', 2);
model.result('pg5').feature('vol1').set('colortable', 'Prism');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset2');
model.result('pg6').create('slc1', 'Slice');
model.result('pg6').label('Electrophysiology: Transmembrane Potential (Phi)');
model.result('pg6').feature('slc1').set('expr', 'Phi');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset2');
model.result('pg7').create('slc1', 'Slice');
model.result('pg7').label('Electrophysiology: Conductance of Slow Processes (r)');
model.result('pg7').feature('slc1').set('expr', 'r');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'dset2');
model.result('pg8').create('slc1', 'Slice');
model.result('pg8').label('Active Stress (Sa)');
model.result('pg8').feature('slc1').set('expr', 'Sa');
model.result('pg5').run;
model.result.dataset('dset2').set('frametype', 'material');
model.result('pg5').run;
model.result.remove('pg5');
model.result.remove('pg6');
model.result.remove('pg7');
model.result.remove('pg8');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset2');
model.result('pg5').set('defaultPlotID', 'fiberStresshmm1');
model.result('pg5').label('Fiber, Hyperelastic Material 1 (solid)');
model.result('pg5').set('showlegends', true);
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Fiber stress, Fiber, Hyperelastic Material 1 (solid)');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').create('str1', 'Streamline');
model.result('pg5').feature('str1').set('expr', {'solid.hmm1.fib1.a0X' 'solid.hmm1.fib1.a0Y' 'solid.hmm1.fib1.a0Z'});
model.result('pg5').feature('str1').set('linetype', 'tube');
model.result('pg5').feature('str1').set('posmethod', 'uniform');
model.result('pg5').feature('str1').set('revcoordsys', 'cylindrical');
model.result('pg5').feature('str1').label('Fiber 1');
model.result('pg5').feature('str1').set('inheritplot', 'none');
model.result('pg5').feature('str1').create('col', 'Color');
model.result('pg5').feature('str1').feature('col').set('expr', 'solid.hmm1.fib1.sa');
model.result('pg5').feature('str1').feature('col').set('colortable', 'Rainbow');
model.result('pg5').label('Fiber, Hyperelastic Material 1 (solid)');
model.result('pg5').run;
model.result('pg5').label('Fiber');
model.result('pg5').set('title', 'Fiber orientation');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('str1').label('Endocardium');
model.result('pg5').feature('str1').set('posmethod', 'selection');
model.result('pg5').feature('str1').set('selpointdistr', 'meshbased');
model.result('pg5').feature('str1').set('selmeshrefine', 2);
model.result('pg5').feature('str1').selection.set([1 2 3 8 9 13 14 17]);
model.result('pg5').feature('str1').set('linetype', 'line');
model.result('pg5').feature('str1').create('filt1', 'Filter');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('str1').feature('col').set('expr', 'theta');
model.result('pg5').feature('str1').feature('col').set('unit', 'deg');
model.result('pg5').feature('str1').feature('col').set('rangecoloractive', true);
model.result('pg5').feature('str1').feature('col').set('rangecolormin', -60);
model.result('pg5').feature('str1').feature('col').set('rangecolormax', 60);
model.result('pg5').run;
model.result('pg5').feature('str1').feature('filt1').set('expr', 'Beta>0.95');
model.result('pg5').run;
model.result('pg5').feature.duplicate('str2', 'str1');
model.result('pg5').run;
model.result('pg5').feature('str2').label('Myocardium');
model.result('pg5').feature('str2').selection.set([2 8 13 14]);
model.result('pg5').feature('str2').set('selmeshrefine', 1);
model.result('pg5').feature('str2').set('inheritplot', 'str1');
model.result('pg5').run;
model.result('pg5').feature('str2').feature('filt1').set('expr', '(Beta>0.45)*(Beta<0.55)*(Z<-cL/9)');
model.result('pg5').run;
model.result('pg5').feature.duplicate('str3', 'str2');
model.result('pg5').run;
model.result('pg5').feature('str3').label('Epicardium');
model.result('pg5').feature('str3').selection.set([2 3 5 8 9 10 11 13 14 15 17 18]);
model.result('pg5').feature('str3').set('selmeshrefine', 3);
model.result('pg5').run;
model.result('pg5').feature('str3').feature('filt1').set('expr', 'Beta<0.05*((sys4.phi>-100[deg])*(sys4.phi<190[deg])*(Z>-cL/3) || (Z<-cL/3))');
model.result('pg5').run;

model.view('view1').set('showgrid', false);

model.result('pg5').run;
model.result('pg5').set('showlegends', false);

model.view('view1').set('showaxisorientation', false);

model.result('pg5').set('titletype', 'none');
model.result('pg5').set('showlegends', true);

model.view('view1').set('showaxisorientation', true);

model.result('pg5').set('titletype', 'label');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').run;
model.result('pg6').label('Potential');
model.result('pg6').set('data', 'dset2');
model.result('pg6').create('vol1', 'Volume');
model.result('pg6').feature('vol1').set('expr', 'Phi');
model.result('pg6').feature('vol1').set('unit', 'mV');
model.result('pg6').feature('vol1').set('rangecoloractive', true);
model.result('pg6').feature('vol1').set('rangecolormin', -80);
model.result('pg6').feature('vol1').set('rangecolormax', 20);
model.result('pg6').feature('vol1').create('def1', 'Deform');
model.result('pg6').run;
model.result('pg6').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg6').feature('vol1').feature('def1').set('scale', 1);

model.study('std2').setGenPlots(false);
model.study('std2').feature('time').set('plot', true);
model.study('std2').feature('time').set('plotgroup', 'pg6');

model.sol('sol2').study('std2');
model.sol('sol2').feature.remove('t1');
model.sol('sol2').feature.remove('v1');
model.sol('sol2').feature.remove('st1');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.12272326592785902');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,5,320)');
model.sol('sol2').feature('t1').set('plot', 'on');
model.sol('sol2').feature('t1').set('plotgroup', 'pg6');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 0.001);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('t1').create('se1', 'Segregated');
model.sol('sol2').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_Phi'});
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').label('Electrophysiology: Transmembrane Potential (Phi)');
model.sol('sol2').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_r'});
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').label('Electrophysiology: Conductance of Slow Processes (r)');
model.sol('sol2').feature('t1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('segvar', {'comp1_Sa'});
model.sol('sol2').feature('t1').feature('se1').feature('ss3').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature('se1').feature('ss3').label('Active Stress (Sa)');
model.sol('sol2').feature('t1').feature('se1').create('ss4', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss4').set('segvar', {'comp1_u'});
model.sol('sol2').feature('t1').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('t1').feature('d1').set('nliniterrefine', true);
model.sol('sol2').feature('t1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol2').feature('t1').feature('se1').feature('ss4').set('linsolver', 'd1');
model.sol('sol2').feature('t1').feature('se1').feature('ss4').label('Solid Mechanics');
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i1').set('rhob', 40);
model.sol('sol2').feature('t1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('t1').feature('i1').label('Suggested Iterative Solver (GMRES with SA AMG) (solid)');
model.sol('sol2').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result('pg5').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').label('Contraction, Snapshots');
model.result('pg7').set('data', 'dset2');
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', 'Potential and deformation');
model.result('pg7').set('plotarrayenable', true);
model.result('pg7').set('arrayshape', 'square');
model.result('pg7').set('arrayplane', 'xz');
model.result('pg7').create('slc1', 'Slice');
model.result('pg7').feature('slc1').set('arraydim', '2');
model.result('pg7').feature('slc1').set('data', 'dset2');
model.result('pg7').feature('slc1').setIndex('looplevel', 2, 0);
model.result('pg7').feature('slc1').set('expr', 'Phi');
model.result('pg7').feature('slc1').set('unit', 'mV');
model.result('pg7').feature('slc1').set('quickplane', 'zx');
model.result('pg7').feature('slc1').set('quickynumber', 1);
model.result('pg7').feature('slc1').set('manualindexing', true);
model.result('pg7').feature('slc1').create('def1', 'Deform');
model.result('pg7').run;
model.result('pg7').feature('slc1').feature('def1').set('scaleactive', true);
model.result('pg7').feature('slc1').feature('def1').set('scale', 1);
model.result('pg7').run;
model.result('pg7').feature('slc1').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature.duplicate('slc2', 'slc1');
model.result('pg7').feature('slc2').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('slc2').set('titletype', 'none');
model.result('pg7').feature('slc2').set('quickplane', 'xy');
model.result('pg7').feature('slc2').set('quickznumber', 1);
model.result('pg7').feature('slc2').set('colorlegend', false);
model.result('pg7').feature('slc2').set('inheritplot', 'slc1');
model.result('pg7').run;
model.result('pg7').create('ann1', 'Annotation');
model.result('pg7').feature('ann1').set('arraydim', '2');
model.result('pg7').feature('ann1').set('text', 't=5 ms');
model.result('pg7').feature('ann1').set('poszexpr', 20);
model.result('pg7').feature('ann1').set('manualindexing', true);
model.result('pg7').feature('slc1').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature.duplicate('slc3', 'slc1');
model.result('pg7').feature.duplicate('slc4', 'slc2');
model.result('pg7').feature.duplicate('ann2', 'ann1');
model.result('pg7').feature('slc3').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('slc3').set('titletype', 'none');
model.result('pg7').feature('slc3').set('colorlegend', false);
model.result('pg7').feature('slc3').set('inheritplot', 'slc1');
model.result('pg7').feature('slc3').setIndex('looplevel', 8, 0);
model.result('pg7').feature('slc3').set('colindex', 1);
model.result('pg7').feature('slc4').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('slc4').setIndex('looplevel', 8, 0);
model.result('pg7').feature('slc4').set('colindex', 1);
model.result('pg7').feature('ann2').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('ann2').set('text', 't=35 ms');
model.result('pg7').feature('ann2').set('colindex', 1);
model.result('pg7').run;
model.result('pg7').feature('slc3').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature.duplicate('slc5', 'slc3');
model.result('pg7').feature.duplicate('slc6', 'slc4');
model.result('pg7').feature.duplicate('ann3', 'ann2');
model.result('pg7').feature('slc5').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('slc5').setIndex('looplevel', 12, 0);
model.result('pg7').feature('slc5').set('colindex', 2);
model.result('pg7').feature('slc6').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('slc6').setIndex('looplevel', 12, 0);
model.result('pg7').feature('slc6').set('colindex', 2);
model.result('pg7').feature('ann3').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('ann3').set('text', 't=50 ms');
model.result('pg7').feature('ann3').set('colindex', 2);
model.result('pg7').run;
model.result('pg7').feature('slc5').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature.duplicate('slc7', 'slc5');
model.result('pg7').feature.duplicate('slc8', 'slc6');
model.result('pg7').feature.duplicate('ann4', 'ann3');
model.result('pg7').feature('slc7').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('slc7').setIndex('looplevel', 21, 0);
model.result('pg7').feature('slc7').set('colindex', 3);
model.result('pg7').feature('slc8').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('slc8').setIndex('looplevel', 21, 0);
model.result('pg7').feature('slc8').set('colindex', 3);
model.result('pg7').feature('ann4').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('ann4').set('text', 't=100 ms');
model.result('pg7').feature('ann4').set('colindex', 3);
model.result('pg7').run;
model.result('pg7').feature('slc7').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature.duplicate('slc9', 'slc7');
model.result('pg7').feature.duplicate('slc10', 'slc8');
model.result('pg7').feature.duplicate('ann5', 'ann4');
model.result('pg7').feature('slc9').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('slc9').setIndex('looplevel', 30, 0);
model.result('pg7').feature('slc9').set('rowindex', -1);
model.result('pg7').feature('slc9').set('colindex', 0);
model.result('pg7').feature('slc10').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('slc10').setIndex('looplevel', 30, 0);
model.result('pg7').feature('slc10').set('rowindex', -1);
model.result('pg7').feature('slc10').set('colindex', 0);
model.result('pg7').feature('ann5').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('ann5').set('text', 't=145 ms');
model.result('pg7').feature('ann5').set('poszexpr', -80);
model.result('pg7').feature('ann5').set('rowindex', -1);
model.result('pg7').feature('ann5').set('colindex', 0);
model.result('pg7').run;
model.result('pg7').feature('slc9').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature.duplicate('slc11', 'slc9');
model.result('pg7').feature.duplicate('slc12', 'slc10');
model.result('pg7').feature.duplicate('ann6', 'ann5');
model.result('pg7').feature('slc11').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('slc11').setIndex('looplevel', 41, 0);
model.result('pg7').feature('slc11').set('colindex', 1);
model.result('pg7').feature('slc12').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('slc12').setIndex('looplevel', 41, 0);
model.result('pg7').feature('slc12').set('colindex', 1);
model.result('pg7').feature('ann6').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('ann6').set('text', 't=200 ms');
model.result('pg7').feature('ann6').set('colindex', 1);
model.result('pg7').run;
model.result('pg7').feature('slc11').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature.duplicate('slc13', 'slc11');
model.result('pg7').feature.duplicate('slc14', 'slc12');
model.result('pg7').feature.duplicate('ann7', 'ann6');
model.result('pg7').feature('slc13').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('slc13').setIndex('looplevel', 51, 0);
model.result('pg7').feature('slc13').set('colindex', 2);
model.result('pg7').feature('slc14').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('slc14').setIndex('looplevel', 51, 0);
model.result('pg7').feature('slc14').set('colindex', 2);
model.result('pg7').feature('ann7').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('ann7').set('colindex', 2);
model.result('pg7').feature('ann7').set('text', 't=250 ms');
model.result('pg7').run;
model.result('pg7').feature('slc13').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature.duplicate('slc15', 'slc13');
model.result('pg7').feature.duplicate('slc16', 'slc14');
model.result('pg7').feature.duplicate('ann8', 'ann7');
model.result('pg7').feature('slc15').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('slc15').setIndex('looplevel', 61, 0);
model.result('pg7').feature('slc15').set('colindex', 3);
model.result('pg7').feature('slc16').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('slc16').setIndex('looplevel', 61, 0);
model.result('pg7').feature('slc16').set('colindex', 3);
model.result('pg7').feature('ann8').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('ann8').set('text', 't=300 ms');
model.result('pg7').feature('ann8').set('colindex', 3);
model.result('pg7').feature('slc2').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').run;

model.view('view1').set('transparency', false);
model.view('view1').camera.set('projection', 'orthographic');

model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Volume Change');
model.result('pg8').set('data', 'dset2');
model.result('pg8').set('ylabelactive', true);
model.result('pg8').set('titletype', 'none');
model.result('pg8').set('ylabel', 'Current volume (ml)');
model.result('pg8').set('legendpos', 'uppermiddle');
model.result('pg8').create('glob1', 'Global');
model.result('pg8').feature('glob1').set('markerpos', 'datapoints');
model.result('pg8').feature('glob1').set('linewidth', 'preference');
model.result('pg8').feature('glob1').setIndex('expr', 'solid.enc1.V', 0);
model.result('pg8').feature('glob1').setIndex('unit', 'ml', 0);
model.result('pg8').feature('glob1').setIndex('expr', 'solid.enc2.V', 1);
model.result('pg8').feature('glob1').setIndex('unit', 'ml', 1);
model.result('pg8').feature('glob1').set('legendmethod', 'manual');
model.result('pg8').feature('glob1').setIndex('legends', 'Left ventricular chamber', 0);
model.result('pg8').feature('glob1').setIndex('legends', 'Right ventricular chamber', 1);
model.result('pg8').run;
model.result.dataset.create('cpt1', 'CutPoint3D');
model.result.dataset('cpt1').label('Point at Z=-1mm');
model.result.dataset('cpt1').set('data', 'dset2');
model.result.dataset('cpt1').set('pointx', 25);
model.result.dataset('cpt1').set('pointy', 0);
model.result.dataset('cpt1').set('pointz', -1);
model.result.dataset.duplicate('cpt2', 'cpt1');
model.result.dataset('cpt2').label('Point at Z=-40mm');
model.result.dataset('cpt2').set('pointx', 20);
model.result.dataset('cpt2').set('pointz', -40);
model.result.dataset.duplicate('cpt3', 'cpt2');
model.result.dataset('cpt3').label('Point at Z=-60mm');
model.result.dataset('cpt3').set('pointx', 0);
model.result.dataset('cpt3').set('pointz', -60);
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Activation Time');
model.result('pg9').set('titletype', 'none');
model.result('pg9').create('ptgr1', 'PointGraph');
model.result('pg9').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg9').feature('ptgr1').set('linewidth', 'preference');
model.result('pg9').feature('ptgr1').set('data', 'cpt1');
model.result('pg9').feature('ptgr1').set('expr', 'Phi');
model.result('pg9').feature('ptgr1').set('unit', 'mV');
model.result('pg9').feature('ptgr1').set('legend', true);
model.result('pg9').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg9').feature('ptgr1').setIndex('legends', 'Point at Z=-1 mm', 0);
model.result('pg9').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg9').run;
model.result('pg9').feature('ptgr2').set('data', 'cpt2');
model.result('pg9').feature('ptgr2').set('titletype', 'none');
model.result('pg9').feature('ptgr2').setIndex('legends', 'Point at Z=-40 mm', 0);
model.result('pg9').feature.duplicate('ptgr3', 'ptgr2');
model.result('pg9').run;
model.result('pg9').feature('ptgr3').set('data', 'cpt3');
model.result('pg9').feature('ptgr3').setIndex('legends', 'Point at Z=-60 mm', 0);
model.result('pg9').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'fromtheme');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'off');
model.result.export('anim1').set('legend1d', 'off');
model.result.export('anim1').set('logo1d', 'off');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'off');
model.result.export('anim1').set('legend2d', 'off');
model.result.export('anim1').set('logo2d', 'off');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'off');
model.result.export('anim1').set('legend3d', 'off');
model.result.export('anim1').set('logo3d', 'off');
model.result.export('anim1').set('options3d', 'on');
model.result.export('anim1').set('axisorientation', 'off');
model.result.export('anim1').set('grid', 'off');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'off');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').label('Heart Deformation');
model.result.export('anim1').set('plotgroup', 'pg6');
model.result.export('anim1').set('maxframes', 50);
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').run;
model.result('pg5').run;

model.title('Biventricular Cardiac Model');

model.description(['The standard biventricular cardiac model of the heart is used to show how to set up fiber directions in a complex geometry. The fibers are then used to model the large deformation of the myocardium with the Holzapfel' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Gasser' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Ogden anisotropic material model.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('biventricular_cardiac_model.mph');

model.modelNode.label('Components');

out = model;
