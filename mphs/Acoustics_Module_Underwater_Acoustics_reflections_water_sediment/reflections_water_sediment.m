function out = model
%
% reflections_water_sediment.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Underwater_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('pelw', 'PoroelasticWavesSinglePhysics', 'geom1');
model.physics('pelw').model('comp1');

model.multiphysics.create('apb1', 'AcousticPorousBoundary', 'geom1', 1);
model.multiphysics('apb1').set('Acoustics_physics', 'acpr');
model.multiphysics('apb1').set('Porous_physics', 'pelw');
model.multiphysics('apb1').selection.all;

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std1').feature('freq').setSolveFor('/physics/pelw', true);
model.study('std1').feature('freq').setSolveFor('/multiphysics/apb1', true);

model.param.label('Parameters - Material');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('c0', '1414[m/s]', 'Speed of sound in water');
model.param.set('cs_poro', '130[m/s]', 'Speed of slow shear waves in the poroelastic wave domains');
model.param.set('rhoF', '1000[kg/m^3]', 'Fluid density');
model.param.set('Kf', 'rhoF*c0^2', 'Bulk modulus of fluid');
model.param.set('muF', '1e-3[Pa*s]', 'Fluid viscosity');
model.param.set('epsilonP', '0.47', 'Porosity');
model.param.set('a', '4e-3[cm]', 'Pore size parameter');
model.param.set('tau0', '1.25', 'Tortuosity');
model.param.set('kappaP', '1e-6[cm^2]', 'Permeability');
model.param.set('Kb', '4.36e7[Pa]', 'Bulk modulus of frame');
model.param.set('G', '2.61e7[Pa]', 'Shear modulus of frame');
model.param.set('Ks', '3.6e10[Pa]', 'Bulk modulus of solid grains');
model.param.set('rhos', '2650[kg/m^3]', 'Solid density');
model.param.set('rhod', 'rhos*(1-epsilonP)', 'Drained density');
model.param.set('alphaB0', '1-Kb/Ks', 'Biot-Willis coefficient');
model.param.set('logdec', '0.15', 'Logarithmic decrement factor');
model.param.set('Kbc', 'Kb*(1+i*logdec/pi)', 'Complex bulk modulus of frame');
model.param.set('Gc', 'G*(1+i*logdec/pi)', 'Complex shear modulus of frame');
model.param.create('par2');
model.param('par2').label('Parameters - Model');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('f0', '1000[Hz]', 'Driving frequency');
model.param('par2').set('theta0', '0[deg]', 'Angle of incidence');
model.param('par2').set('lam0', 'c0/f0', 'Wavelength at f0');
model.param('par2').set('W', 'lam0', 'Domain width');
model.param('par2').set('H', '2*lam0', 'Domain height');
model.param('par2').set('Hpml', 'lam0/3', 'PML height');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'W' 'H'});
model.geom('geom1').feature('r1').set('layerbottom', false);
model.geom('geom1').feature('r1').set('layertop', true);
model.geom('geom1').feature('r1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('r1').setIndex('layer', 'Hpml', 0);
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'W' 'H'});
model.geom('geom1').feature('r2').set('pos', {'0' '-H'});
model.geom('geom1').feature('r2').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('r2').setIndex('layer', 'Hpml', 0);
model.geom('geom1').runPre('fin');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('k0', 'intop1(acpr.k)', 'Wave number of incident field');
model.variable('var1').set('kx_e', 'sin(theta0)', 'Plane wave direction, x');
model.variable('var1').set('ky_e', '-cos(theta0)', 'Plane wave direction, y');
model.variable('var1').set('k0x', 'k0*kx_e', 'Wave vector x-component of incident field');
model.variable('var1').set('k0y', 'k0*ky_e', 'Wave vector y-component of incident field');
model.variable('var1').set('p_in', 'acpr.p_b', 'Incident pressure field');
model.variable('var1').set('p_re', 'acpr.p_s', 'Reflected pressure field');
model.variable('var1').set('R', 'p_re/p_in', 'Reflection coefficient');
model.variable('var1').set('absR', 'abs(aveop1(R))', 'Absolute and averaged value of the reflection coefficient');
model.variable('var1').set('alpha_R', '1-absR^2', 'Absorption coefficient (based on R)');
model.variable('var1').set('Pin', 'intop2(-acpr.I_by)', 'Incident power');
model.variable('var1').set('Pre', 'intop2(acpr.I_sy)', 'Reflected power');
model.variable('var1').set('alpha', '1-Pre/Pin', 'Absorption coefficient');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 0);
model.cpl('intop1').selection.set([4]);
model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.geom('geom1', 1);
model.cpl('aveop1').selection.set([6]);
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').selection.geom('geom1', 1);
model.cpl('intop2').selection.set([6]);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Porous Domain');
model.selection('sel1').set([1 2]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Water Domain');
model.selection('sel2').set([3 4]);

model.physics('pelw').selection.named('sel1');
model.physics('pelw').prop('ReferencePressure').set('ReferenceType', 'ReferencePressureWater');
model.physics('pelw').create('pc1', 'PeriodicCondition', 1);
model.physics('pelw').feature('pc1').selection.set([1 3 10 11]);
model.physics('pelw').feature('pc1').set('PeriodicType', 'Floquet');
model.physics('pelw').feature('pc1').set('kFloquet', {'k0x' 'k0y' '0'});
model.physics('acpr').selection.named('sel2');
model.physics('acpr').prop('ReferencePressure').set('ReferenceType', 'ReferencePressureWater');
model.physics('acpr').create('pc1', 'PeriodicCondition', 1);
model.physics('acpr').feature('pc1').selection.set([5 7 12 13]);
model.physics('acpr').feature('pc1').set('PeriodicType', 'Floquet');
model.physics('acpr').feature('pc1').set('kFloquet', {'k0x' 'k0y' '0'});
model.physics('acpr').create('bpf1', 'BackgroundPressureField', 2);
model.physics('acpr').feature('bpf1').selection.named('sel2');
model.physics('acpr').feature('bpf1').set('pamp', 1);
model.physics('acpr').feature('bpf1').set('c_mat', 'from_mat');
model.physics('acpr').feature('bpf1').set('dir', {'kx_e' 'ky_e' '0'});
model.physics('acpr').feature('bpf1').set('CalculateIntensity', true);
model.physics('acpr').feature('bpf1').set('rho_mat', 'from_mat');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Water');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Sediment');

model.physics('pelw').feature('pm1').set('PoroelasticModel', 'Biot');
model.physics('pelw').feature('pm1').set('SolidMaterial', 'mat2');
model.physics('pelw').feature('pm1').set('ViscosityModel', 'BiotsHighFrequencyRange');
model.physics('pelw').feature('pm1').set('referenceFrequencyOption', 'poreSize');
model.physics('pelw').feature('pm1').set('a', 'a');

model.material('mat1').propertyGroup('def').set('density', {'rhoF'});
model.material('mat1').propertyGroup('def').set('soundspeed', {'c0'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', {'muF'});
model.material('mat1').propertyGroup('def').set('compressibility', {'1/Kf'});
model.material('mat2').propertyGroup.create('KG', 'Bulk_modulus_and_shear_modulus');
model.material('mat2').propertyGroup('KG').set('K', {'Kbc'});
model.material('mat2').propertyGroup('KG').set('G', {'Gc'});
model.material('mat2').propertyGroup('def').set('density', {'rhod'});
model.material('mat2').propertyGroup('def').set('porosity', {'epsilonP'});
model.material('mat2').propertyGroup('def').set('hydraulicpermeability', {'kappaP'});
model.material('mat2').propertyGroup.create('PoroelasticModel', 'Poroelastic_material');
model.material('mat2').propertyGroup('PoroelasticModel').set('alphaB', {'alphaB0'});
model.material('mat2').propertyGroup.create('PoroacousticsModel', 'Poroacoustics_model');
model.material('mat2').propertyGroup('PoroacousticsModel').set('tau', {'tau0'});

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.set([1]);
model.coordSystem('pml1').set('wavelengthSource', 'pelw');
model.coordSystem('pml1').set('PMLfactor', 'if(theta0==90[deg],1e6,1/cos(theta0))');
model.coordSystem.create('pml2', 'geom1', 'PML');
model.coordSystem('pml2').selection.set([4]);
model.coordSystem('pml2').set('stretchingType', 'rational');
model.coordSystem('pml2').set('PMLfactor', 'if(theta0==90[deg],1e6,1/cos(theta0))');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'lam0/5');
model.mesh('mesh1').feature('size').set('hmin', 'lam0/10');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([1 2 3 4]);
model.mesh('mesh1').feature('map1').create('size1', 'Size');
model.mesh('mesh1').feature('map1').feature('size1').selection.named('sel1');
model.mesh('mesh1').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmax', 'cs_poro/f0/5');
model.mesh('mesh1').feature('map1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmin', 'cs_poro/f0/10');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([1 7]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 30);
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('bl1').selection.named('sel2');
model.mesh('mesh1').feature('bl1').set('smoothtransition', false);
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([6]);
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 1);
model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Detailed Angular Sweep');
model.study('std1').setGenPlots(false);
model.study('std1').feature('freq').set('plist', 'f0');
model.study('std1').feature('freq').set('useparam', true);
model.study('std1').feature('freq').set('sweeptype', 'filled');
model.study('std1').feature('freq').setIndex('pname_aux', 'a', 0);
model.study('std1').feature('freq').setIndex('plistarr_aux', '', 0);
model.study('std1').feature('freq').setIndex('punit_aux', 'm', 0);
model.study('std1').feature('freq').setIndex('pname_aux', 'a', 0);
model.study('std1').feature('freq').setIndex('plistarr_aux', '', 0);
model.study('std1').feature('freq').setIndex('punit_aux', 'm', 0);
model.study('std1').feature('freq').setIndex('pname_aux', 'theta0', 0);
model.study('std1').feature('freq').setIndex('plistarr_aux', 'range(0,10[deg],50[deg]) range(51[deg],1[deg],89[deg]) 89.5[deg]', 0);
model.study('std1').feature('freq').setIndex('punit_aux', 'deg', 0);
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'a', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'a', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'f0', 0);
model.study('std1').feature('param').setIndex('plistarr', '10 100 1000 10000', 0);
model.study('std1').feature('param').setIndex('punit', 'Hz', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq' 'theta0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz' 'deg'});
model.sol('sol1').feature('s1').feature('p1').set('sweeptype', 'filled');
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'f0' 'range(0,10[deg],50[deg]) range(51[deg],1[deg],89[deg]) 89.5[deg]'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pcontinuation', '');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (apb1) (Merged)');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'f0'});
model.batch('p1').set('plistarr', {'10 100 1000 10000'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.set([2 3]);
model.result.dataset.create('arr1', 'Array2D');
model.result.dataset('arr1').set('data', 'dset2');
model.result.dataset('arr1').set('fullsize', [4 1]);
model.result.dataset('arr1').set('floquetper', true);
model.result.dataset('arr1').set('wavevector', {'k0x' 'k0y'});
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').run;
model.result('pg1').label('Incident Pressure');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Incident Pressure');
model.result('pg1').set('paramindicator', 'f0 = eval(freq) Hz, theta0 = eval(theta0, deg) deg');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', 'acpr.p_b');
model.result('pg1').run;
model.result('pg1').create('arws1', 'ArrowSurface');
model.result('pg1').feature('arws1').set('expr', {'k0x' 'k0y'});
model.result('pg1').feature('arws1').set('xnumber', 5);
model.result('pg1').feature('arws1').set('color', 'black');
model.result('pg1').run;
model.result('pg1').set('data', 'dset2');
model.result('pg1').set('solnum', 4);
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').run;
model.result('pg2').label('Reflected Pressure');
model.result('pg2').set('data', 'dset2');
model.result('pg2').set('solnum', 4);
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Reflected Pressure');
model.result('pg2').set('paramindicator', 'f0 = eval(freq) Hz, theta0 = eval(theta0, deg) deg');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'acpr.p_s');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').create('surf2', 'Surface');
model.result('pg2').feature('surf2').set('expr', 'pelw.p_s');
model.result('pg2').feature('surf2').set('inheritplot', 'surf1');
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').run;
model.result('pg3').label('Total Pressure');
model.result('pg3').set('data', 'arr1');
model.result('pg3').set('solnum', 4);
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Total Pressure');
model.result('pg3').set('paramindicator', 'f0 = eval(freq) Hz, theta0 = eval(theta0, deg) deg');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', 'apb1.p_t');
model.result('pg3').feature('surf1').set('descr', 'Total acoustic pressure');
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').run;
model.result('pg4').label('Displacement');
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('title', 'Displacement');
model.result('pg4').set('paramindicator', 'f0 = eval(freq) Hz, theta0 = eval(theta0, deg) deg');
model.result('pg4').set('data', 'arr1');
model.result('pg4').set('solnum', 4);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'pelw.disp');
model.result('pg4').feature('surf1').set('colortable', 'Rainbow');
model.result('pg4').feature('surf1').set('colorscalemode', 'linear');
model.result('pg4').feature('surf1').create('def1', 'Deform');
model.result('pg4').run;
model.result('pg4').feature('surf1').feature('def1').set('expr', {'u' 'v'});
model.result('pg4').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg4').feature('surf1').feature('def1').set('scale', '2e9');
model.result('pg4').run;
model.result('pg3').run;
model.result('pg3').set('outersolnum', 1);
model.result('pg3').set('solnum', 26);
model.result('pg3').run;
model.result('pg3').set('outersolnum', 2);
model.result('pg3').run;
model.result('pg3').set('outersolnum', 3);
model.result('pg3').run;
model.result('pg3').set('outersolnum', 4);
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').set('outersolnum', 1);
model.result('pg4').set('solnum', 26);
model.result('pg4').run;
model.result('pg4').set('outersolnum', 2);
model.result('pg4').run;
model.result('pg4').set('outersolnum', 3);
model.result('pg4').run;
model.result('pg4').set('outersolnum', 4);
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').run;
model.result('pg5').label('Wave Speed');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', 'acpr.c');
model.result('pg5').feature('surf1').set('descr', 'Speed of sound');
model.result('pg5').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg5').feature('surf1').set('colorscalemode', 'linear');
model.result('pg5').feature('surf1').set('colortable', 'Rainbow');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').create('surf2', 'Surface');
model.result('pg5').feature('surf2').set('expr', 'pelw.cp_fast');
model.result('pg5').feature('surf2').set('titletype', 'none');
model.result('pg5').feature('surf2').set('inheritplot', 'surf1');
model.result('pg5').feature('surf2').create('filt1', 'Filter');
model.result('pg5').run;
model.result('pg5').feature('surf2').feature('filt1').set('expr', '(y>-H/3)');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature.duplicate('surf3', 'surf2');
model.result('pg5').run;
model.result('pg5').feature('surf3').set('expr', 'pelw.cp_slow');
model.result('pg5').run;
model.result('pg5').feature('surf3').feature('filt1').set('expr', '(y<-H/3)*(y>-2*H/3)');
model.result('pg5').run;
model.result('pg5').feature.duplicate('surf4', 'surf2');
model.result('pg5').run;
model.result('pg5').feature('surf4').set('expr', 'pelw.cs_poro');
model.result('pg5').run;
model.result('pg5').feature('surf4').feature('filt1').set('expr', '(y<-2*H/3)');
model.result('pg5').run;
model.result('pg5').create('ann1', 'Annotation');
model.result('pg5').feature('ann1').set('text', 'Speed of sound = eval(acpr.c) m/s');
model.result('pg5').feature('ann1').set('posxexpr', 'W');
model.result('pg5').feature('ann1').set('posyexpr', 'H/2');
model.result('pg5').run;
model.result('pg5').create('ann2', 'Annotation');
model.result('pg5').feature('ann2').set('text', 'Speed of fast pressure wave = eval(real(pelw.cp_fast)) m/s');
model.result('pg5').feature('ann2').set('posxexpr', 'W');
model.result('pg5').feature('ann2').set('posyexpr', '-H/6');
model.result('pg5').run;
model.result('pg5').create('ann3', 'Annotation');
model.result('pg5').feature('ann3').set('text', 'Speed of slow pressure wave = eval(real(pelw.cp_slow)) m/s');
model.result('pg5').feature('ann3').set('posxexpr', 'W');
model.result('pg5').feature('ann3').set('posyexpr', '-3*H/6');
model.result('pg5').run;
model.result('pg5').create('ann4', 'Annotation');
model.result('pg5').feature('ann4').set('text', 'Speed of shear-wave = eval(real(pelw.cs_poro)) m/s');
model.result('pg5').feature('ann4').set('posxexpr', 'W');
model.result('pg5').feature('ann4').set('posyexpr', '-5*H/6');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Reflection Coefficient vs. Angle of Incidence');
model.result('pg6').set('data', 'dset2');
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'Reflection coefficient: |R|');
model.result('pg6').set('axislimits', true);
model.result('pg6').set('xmin', -2);
model.result('pg6').set('xmax', 92);
model.result('pg6').set('ymin', -0.05);
model.result('pg6').set('ymax', 1.05);
model.result('pg6').set('legendpos', 'upperleft');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').setIndex('expr', 'absR', 0);
model.result('pg6').feature('glob1').set('xdata', 'expr');
model.result('pg6').feature('glob1').set('xdataexpr', 'theta0');
model.result('pg6').feature('glob1').set('xdataunit', [native2unicode(hex2dec({'00' 'b0'}), 'unicode') ]);
model.result('pg6').feature('glob1').set('autodescr', false);
model.result('pg6').run;

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std2').feature('freq').setSolveFor('/physics/pelw', true);
model.study('std2').feature('freq').setSolveFor('/multiphysics/apb1', true);

model.geom('geom1').run;

model.study('std2').label('Study 2 - Detailed Frequency Sweep');
model.study('std2').setGenPlots(false);
model.study('std2').feature('freq').set('plist', 'f0');
model.study('std2').feature('freq').set('useparam', true);
model.study('std2').feature('freq').set('sweeptype', 'filled');
model.study('std2').feature('freq').setIndex('pname_aux', 'a', 0);
model.study('std2').feature('freq').setIndex('plistarr_aux', '', 0);
model.study('std2').feature('freq').setIndex('punit_aux', 'm', 0);
model.study('std2').feature('freq').setIndex('pname_aux', 'a', 0);
model.study('std2').feature('freq').setIndex('plistarr_aux', '', 0);
model.study('std2').feature('freq').setIndex('punit_aux', 'm', 0);
model.study('std2').feature('freq').setIndex('pname_aux', 'theta0', 0);
model.study('std2').feature('freq').setIndex('plistarr_aux', '30[deg] 40[deg] 50[deg] 60[deg] 70[deg] 80[deg]', 0);
model.study('std2').feature('freq').setIndex('punit_aux', 'deg', 0);
model.study('std2').create('param', 'Parametric');
model.study('std2').feature('param').setIndex('pname', 'a', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'm', 0);
model.study('std2').feature('param').setIndex('pname', 'a', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'm', 0);
model.study('std2').feature('param').setIndex('pname', 'f0', 0);
model.study('std2').feature('param').setIndex('plistarr', '10^{range(1,4/14,5)}', 0);
model.study('std2').feature('param').setIndex('punit', 'Hz', 0);

model.sol.create('sol7');
model.sol('sol7').study('std2');
model.sol('sol7').create('st1', 'StudyStep');
model.sol('sol7').feature('st1').set('study', 'std2');
model.sol('sol7').feature('st1').set('studystep', 'freq');
model.sol('sol7').create('v1', 'Variables');
model.sol('sol7').feature('v1').set('control', 'freq');
model.sol('sol7').create('s1', 'Stationary');
model.sol('sol7').feature('s1').set('stol', 0.001);
model.sol('sol7').feature('s1').create('p1', 'Parametric');
model.sol('sol7').feature('s1').feature.remove('pDef');
model.sol('sol7').feature('s1').feature('p1').set('pname', {'freq' 'theta0'});
model.sol('sol7').feature('s1').feature('p1').set('punit', {'Hz' 'deg'});
model.sol('sol7').feature('s1').feature('p1').set('sweeptype', 'filled');
model.sol('sol7').feature('s1').feature('p1').set('plistarr', {'f0' '30[deg] 40[deg] 50[deg] 60[deg] 70[deg] 80[deg]'});
model.sol('sol7').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol7').feature('s1').feature('p1').set('pcontinuation', '');
model.sol('sol7').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol7').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol7').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol7').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol7').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol7').feature('s1').feature('p1').set('probes', {});
model.sol('sol7').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol7').feature('s1').set('linpmethod', 'sol');
model.sol('sol7').feature('s1').set('linpsol', 'zero');
model.sol('sol7').feature('s1').set('control', 'freq');
model.sol('sol7').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol7').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol7').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol7').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol7').feature('s1').create('seDef', 'Segregated');
model.sol('sol7').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol7').feature('s1').create('d1', 'Direct');
model.sol('sol7').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol7').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol7').feature('s1').feature('d1').label('Suggested Direct Solver (apb1) (Merged)');
model.sol('sol7').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol7').feature('s1').feature.remove('fcDef');
model.sol('sol7').feature('s1').feature.remove('seDef');
model.sol('sol7').attach('std2');

model.batch.create('p2', 'Parametric');
model.batch('p2').study('std2');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol7');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').set('pname', {'f0'});
model.batch('p2').set('plistarr', {'10^{range(1,4/14,5)}'});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std2');
model.batch('p2').set('control', 'param');

model.sol.create('sol8');
model.sol('sol8').study('std2');
model.sol('sol8').label('Parametric Solutions 2');

model.batch('p2').feature('so1').set('psol', 'sol8');
model.batch('p2').run('compute');

model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Reflection Coefficient vs. Driving Frequency');
model.result('pg7').set('data', 'none');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('axislimits', true);
model.result('pg7').set('xmin', 8.5);
model.result('pg7').set('xmax', 117171);
model.result('pg7').set('ymin', -0.05);
model.result('pg7').set('ymax', 1.05);
model.result('pg7').set('xlog', true);
model.result('pg7').run;
model.result('pg7').set('legendpos', 'lowerleft');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').set('data', 'dset4');
model.result('pg7').feature('glob1').set('innerinput', 'manualindices');
model.result('pg7').feature('glob1').set('solnumindices', 1);
model.result('pg7').feature('glob1').setIndex('expr', 'absR', 0);
model.result('pg7').feature('glob1').set('xdatasolnumtype', 'outer');
model.result('pg7').feature('glob1').set('xdata', 'expr');
model.result('pg7').feature('glob1').set('xdataexpr', 'f0');
model.result('pg7').feature('glob1').set('legendmethod', 'manual');
model.result('pg7').feature('glob1').setIndex('legends', 'theta0 = 30[deg]', 0);
model.result('pg7').feature.duplicate('glob2', 'glob1');
model.result('pg7').run;
model.result('pg7').feature('glob2').set('solnumindices', 2);
model.result('pg7').feature('glob2').setIndex('legends', 'theta0 = 40[deg]', 0);
model.result('pg7').feature.duplicate('glob3', 'glob2');
model.result('pg7').run;
model.result('pg7').feature('glob3').set('solnumindices', 3);
model.result('pg7').feature('glob3').setIndex('legends', 'theta0 = 50[deg]', 0);
model.result('pg7').feature.duplicate('glob4', 'glob3');
model.result('pg7').run;
model.result('pg7').feature('glob4').set('solnumindices', 4);
model.result('pg7').feature('glob4').setIndex('legends', 'theta0 = 60[deg]', 0);
model.result('pg7').feature.duplicate('glob5', 'glob4');
model.result('pg7').run;
model.result('pg7').feature('glob5').set('solnumindices', 5);
model.result('pg7').feature('glob5').setIndex('legends', 'theta0 = 70[deg]', 0);
model.result('pg7').feature.duplicate('glob6', 'glob5');
model.result('pg7').run;
model.result('pg7').feature('glob6').set('solnumindices', 6);
model.result('pg7').feature('glob6').setIndex('legends', 'theta0 = 80[deg]', 0);
model.result('pg7').run;
model.result('pg6').run;
model.result.duplicate('pg8', 'pg6');
model.result('pg8').run;
model.result('pg8').label('Absorption Coefficient vs. Angle of Incidence');
model.result('pg8').set('ylabel', 'Absorption coefficient: \alpha');
model.result('pg8').set('legendpos', 'lowerleft');
model.result('pg8').run;
model.result('pg8').feature('glob1').setIndex('expr', 'alpha', 0);
model.result('pg8').run;
model.result('pg3').run;

model.title('Acoustic Reflections off a Water-Sediment Interface');

model.description(['This example determines the reflection coefficient of plane acoustic waves off a water-sediment interface at different frequencies and angles of incidence. The example uses the Acoustic' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Poroelastic Waves Interaction multiphysics interface''s ability to model coupled acoustic and elastic waves in any porous substance to describe the water-sediment system. The model results are in good agreement with those obtained in a peer-reviewed research paper.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;
model.sol('sol20').clearSolutionData;
model.sol('sol21').clearSolutionData;
model.sol('sol22').clearSolutionData;
model.sol('sol23').clearSolutionData;

model.label('reflections_water_sediment.mph');

model.modelNode.label('Components');

out = model;
