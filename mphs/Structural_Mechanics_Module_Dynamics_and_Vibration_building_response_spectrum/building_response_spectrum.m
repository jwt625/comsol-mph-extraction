function out = model
%
% building_response_spectrum.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Dynamics_and_Vibration');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('beam', 'HermitianBeam', 'geom1');
model.physics('beam').model('comp1');

model.study.create('std1');
model.study('std1').create('eig', 'Eigenfrequency');
model.study('std1').feature('eig').set('eigmethod', 'region');
model.study('std1').feature('eig').set('shift', '0');
model.study('std1').feature('eig').set('shiftactive', false);
model.study('std1').feature('eig').set('appnreigs', '50');
model.study('std1').feature('eig').set('eigsr', '0.1');
model.study('std1').feature('eig').set('eiglr', '33');
model.study('std1').feature('eig').set('chkeigregion', true);
model.study('std1').feature('eig').set('conrad', '1');
model.study('std1').feature('eig').set('conradynhm', '1');
model.study('std1').feature('eig').set('storefact', false);
model.study('std1').feature('eig').set('solnum', 'auto');
model.study('std1').feature('eig').set('notsolnum', 'auto');
model.study('std1').feature('eig').set('outputmap', {});
model.study('std1').feature('eig').set('ngenAUX', '1');
model.study('std1').feature('eig').set('goalngenAUX', '1');
model.study('std1').feature('eig').set('ngenAUX', '1');
model.study('std1').feature('eig').set('goalngenAUX', '1');
model.study('std1').feature('eig').setSolveFor('/physics/beam', true);

model.common.create('rsp1', 'ResponseSpectrum', 'comp1');
model.common('rsp1').set('eigStudy', 'std1');

model.param.label('Geometry Parameters');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('WX', '6[m]', 'Column spacing in X-direction');
model.param.set('WY', '5[m]', 'Column spacing in Y-direction');
model.param.set('WZ', '3[m]', 'Floor height');
model.param.set('colX', '5', 'Number of columns in X-direction');
model.param.set('colY', '4', 'Number of columns in Y-direction');
model.param.set('nFloors', '3', 'Number of floors');
model.param.set('massTol', '0.01', 'Modal mass tolerance for mode filtering');
model.param.create('par2');
model.param('par2').label('Horizontal Spectrum Parameters');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('agH', '1[m/s^2]', 'Design ground acceleration');
model.param('par2').set('qH', '1.0', 'Behavior factor');
model.param('par2').set('SH', '1.5', 'Soil factor');
model.param('par2').set('TbH', '0.1[s]', 'Period time, first breakpoint');
model.param('par2').set('TcH', '0.25[s]', 'Period time, second breakpoint');
model.param('par2').set('TdH', '1.2[s]', 'Period time, third breakpoint');
model.param('par2').set('betaH', '0.2', 'Lower limit factor');
model.param.create('par3');
model.param('par3').label('Vertical Spectrum Parameters');

% To import content from file, use:
% model.param('par3').loadFile('FILENAME');
model.param('par3').set('agV', '0.45*agH', 'Ground acceleration');
model.param('par3').set('qV', '1.0', 'Behavior factor');
model.param('par3').set('SV', '1.0', 'Soil factor');
model.param('par3').set('TbV', '0.05[s]', 'Period time, first breakpoint');
model.param('par3').set('TcV', '0.15[s]', 'Period time, second breakpoint');
model.param('par3').set('TdV', '1.0[s]', 'Period time, third breakpoint');
model.param('par3').set('betaV', '0.2', 'Lower limit factor');

model.func.create('pw1', 'Piecewise');
model.func('pw1').label('Horizontal Spectrum');
model.func('pw1').set('funcname', 'hsp');
model.func('pw1').set('arg', 'T');
model.func('pw1').set('pieces', {'0' 'TbH' 'agH*SH*(2/3+T/TbH*(2.5/qH-2/3))';  ...
'TbH' 'TcH' 'agH*SH*2.5/qH';  ...
'TcH' 'TdH' 'max(agH*SH*2.5/qH*TcH/T,betaH*agH)';  ...
'TdH' '3' 'max(agH*SH*2.5/qH*TcH*TdH/T^2,betaH*agH)'});
model.func('pw1').createPlot('pg1');

model.result('pg1').run;
model.result('pg1').label('Horizontal Pseudoacceleration Spectrum');
model.result('pg1').set('xlabelactive', true);
model.result('pg1').set('xlabel', 'Period (s)');
model.result('pg1').set('ylabel', 'S (m/s^2)');
model.result('pg1').run;
model.result('pg1').feature('plot1').set('extrapolation', 'right');
model.result('pg1').feature('plot1').set('linewidth', 2);
model.result('pg1').run;

model.func.create('pw2', 'Piecewise');
model.func('pw2').label('Vertical Spectrum');
model.func('pw2').set('funcname', 'vsp');
model.func('pw2').set('arg', 'T');
model.func('pw2').set('pieces', {'0' 'TbV' 'agV*SV*(2/3+T/TbV*(2.5/qV-2/3))';  ...
'TbV' 'TcV' 'agV*SV*2.5/qV';  ...
'TcV' 'TdV' 'max(agV*SV*2.5/qV*TcV/T,betaV*agV)';  ...
'TdV' '3' 'max(agV*SV*2.5/qV*TcV*TdV/T^2,betaV*agV)'});
model.func('pw2').createPlot('pg2');

model.result('pg2').run;
model.result('pg2').label('Vertical Pseudoacceleration Spectrum');
model.result('pg2').set('xlabelactive', true);
model.result('pg2').set('xlabel', 'Period (s)');
model.result('pg2').set('ylabel', 'S (m/s^2)');
model.result('pg2').run;
model.result('pg2').feature('plot1').set('extrapolation', 'right');
model.result('pg2').feature('plot1').set('linewidth', 2);
model.result('pg2').run;
model.result('pg1').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').add('plotgroup', 'pg1');
model.nodeGroup('grp1').add('plotgroup', 'pg2');
model.nodeGroup('grp1').label('Design Response Spectra');

model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'table');
model.geom('geom1').feature('pol1').label('Column');
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 2);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 1);
model.geom('geom1').feature('pol1').setIndex('table', 'WZ', 1, 2);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Columns');
model.geom('geom1').feature('pol1').set('contributeto', 'csel1');
model.geom('geom1').run('pol1');
model.geom('geom1').create('arr1', 'Array');
model.geom('geom1').feature('arr1').selection('input').set({'pol1'});
model.geom('geom1').feature('arr1').set('fullsize', {'colX' 'colY' 'nFloors'});
model.geom('geom1').feature('arr1').set('displ', {'WX' 'WY' 'WZ'});
model.geom('geom1').feature('arr1').set('contributeto', 'csel1');
model.geom('geom1').run('arr1');
model.geom('geom1').create('pol2', 'Polygon');
model.geom('geom1').feature('pol2').set('source', 'table');
model.geom('geom1').feature('pol2').label('Horizontal X direction');
model.geom('geom1').feature('pol2').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('pol2').setIndex('table', 0, 0, 1);
model.geom('geom1').feature('pol2').setIndex('table', 'WZ', 0, 2);
model.geom('geom1').feature('pol2').setIndex('table', 'WX', 1, 0);
model.geom('geom1').feature('pol2').setIndex('table', 0, 1, 1);
model.geom('geom1').feature('pol2').setIndex('table', 'WZ', 1, 2);
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Horizontal X');
model.geom('geom1').feature('pol2').set('contributeto', 'csel2');
model.geom('geom1').feature.duplicate('arr2', 'arr1');
model.geom('geom1').runPre('arr2');
model.geom('geom1').feature('arr2').selection('input').named('csel2');
model.geom('geom1').feature('arr2').set('contributeto', 'csel2');
model.geom('geom1').feature('arr2').setIndex('fullsize', 'colX-1', 0);
model.geom('geom1').run('arr2');
model.geom('geom1').create('pol3', 'Polygon');
model.geom('geom1').feature('pol3').set('source', 'table');
model.geom('geom1').feature('pol3').label('Horizontal Y direction');
model.geom('geom1').feature('pol3').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('pol3').setIndex('table', 0, 0, 1);
model.geom('geom1').feature('pol3').setIndex('table', 'WZ', 0, 2);
model.geom('geom1').feature('pol3').setIndex('table', 0, 1, 0);
model.geom('geom1').feature('pol3').setIndex('table', 'WY', 1, 1);
model.geom('geom1').feature('pol3').setIndex('table', 'WZ', 1, 2);
model.geom('geom1').selection.create('csel3', 'CumulativeSelection');
model.geom('geom1').selection('csel3').label('Horizontal Y');
model.geom('geom1').feature('pol3').set('contributeto', 'csel3');
model.geom('geom1').feature.duplicate('arr3', 'arr2');
model.geom('geom1').runPre('arr3');
model.geom('geom1').feature('arr3').selection('input').named('csel3');
model.geom('geom1').feature('arr3').setIndex('fullsize', 'colX', 0);
model.geom('geom1').feature('arr3').setIndex('fullsize', 'colY-1', 1);
model.geom('geom1').feature('arr3').set('contributeto', 'csel3');
model.geom('geom1').runPre('fin');
model.geom('geom1').create('boxsel1', 'BoxSelection');
model.geom('geom1').feature('boxsel1').label('Foundation');
model.geom('geom1').feature('boxsel1').set('entitydim', 0);
model.geom('geom1').feature('boxsel1').set('zmax', 'WZ/2');
model.geom('geom1').run;

model.physics('beam').feature('csd1').label('Cross Section Data - Columns');
model.physics('beam').feature('csd1').set('SectionType', 'BoxSection');
model.physics('beam').feature('csd1').set('hy_box', '300[mm]');
model.physics('beam').feature('csd1').set('hz_box', '200[mm]');
model.physics('beam').feature('csd1').set('ty_box', '10[mm]');
model.physics('beam').feature('csd1').set('tz_box', '10[mm]');
model.physics('beam').feature('csd1').feature('so1').set('OrientationMethod', 'vector_beam');
model.physics('beam').feature('csd1').feature('so1').set('vector_beam', [1 0 0]);
model.physics('beam').create('csd2', 'CrossSectionBeam', 1);
model.physics('beam').feature('csd2').label('Cross Section: Horizontal X (HEA260)');
model.physics('beam').feature('csd2').selection.named('geom1_csel2_edg');
model.physics('beam').feature('csd2').set('SectionType', 'H_Profile');
model.physics('beam').feature('csd2').set('hy_H', '250[mm]');
model.physics('beam').feature('csd2').set('hz_H', '260[mm]');
model.physics('beam').feature('csd2').set('ty_H', '12.5[mm]');
model.physics('beam').feature('csd2').set('tz_H', '7.5[mm]');
model.physics('beam').feature('csd2').feature('so1').set('OrientationMethod', 'vector_beam');
model.physics('beam').feature('csd2').feature('so1').set('vector_beam', [0 0 1]);
model.physics('beam').feature.duplicate('csd3', 'csd2');
model.physics('beam').feature('csd3').label('Cross Section: Horizontal Y (HEA220)');
model.physics('beam').feature('csd3').selection.named('geom1_csel3_edg');
model.physics('beam').feature('csd3').set('hy_H', '210[mm]');
model.physics('beam').feature('csd3').set('hz_H', '220[mm]');
model.physics('beam').feature('csd3').set('ty_H', '11[mm]');
model.physics('beam').feature('csd3').set('tz_H', '7[mm]');
model.physics('beam').create('fix1', 'Fixed', 0);
model.physics('beam').create('adm1', 'AddedMass1', 1);
model.physics('beam').feature('adm1').label('Added Mass - Horizontal X');
model.physics('beam').feature('adm1').selection.named('geom1_csel2_edg');
model.physics('beam').feature('adm1').set('mPerLine', [1000 0 0 0 1000 0 0 0 1000]);
model.physics('beam').feature.duplicate('adm2', 'adm1');
model.physics('beam').feature('adm2').label('Added Mass - Horizontal Y');
model.physics('beam').feature('adm2').selection.named('geom1_csel3_edg');
model.physics('beam').feature('fix1').selection.named('geom1_boxsel1');
model.physics('beam').create('gacc1', 'GravityAcceleration', -1);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.all;
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').run;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/beam', true);
model.study('std2').label('Study: Gravity');

model.sol.create('sol1');
model.sol('sol1').study('std2');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std2');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std2');
model.sol('sol1').runAll;

model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'stress');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('line1', 'Line');
model.result('pg3').feature('line1').set('expr', {'beam.mises'});
model.result('pg3').feature('line1').set('threshold', 'manual');
model.result('pg3').feature('line1').set('thresholdvalue', 0.2);
model.result('pg3').feature('line1').set('colortable', 'Rainbow');
model.result('pg3').feature('line1').set('colortabletrans', 'none');
model.result('pg3').feature('line1').set('colorscalemode', 'linear');
model.result('pg3').label('Stress (beam)');
model.result('pg3').feature('line1').set('colortable', 'Rainbow');
model.result('pg3').feature('line1').set('linetype', 'tube');
model.result('pg3').feature('line1').set('radiusexpr', 'beam.re');
model.result('pg3').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg3').feature('line1').set('tuberadiusscale', 1);
model.result('pg3').feature('line1').set('tubeendcaps', false);
model.result('pg3').feature('line1').create('def', 'Deform');
model.result('pg3').feature('line1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg3').feature('line1').feature('def').set('descr', 'Displacement field');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('line1').set('unit', 'MPa');
model.result('pg3').run;
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').set('defaultPlotID', 'orientation');
model.result('pg4').create('line1', 'Line');
model.result('pg4').feature('line1').set('expr', {'beam.re'});
model.result('pg4').feature('line1').set('threshold', 'manual');
model.result('pg4').feature('line1').set('thresholdvalue', 0.2);
model.result('pg4').feature('line1').set('colortable', 'Rainbow');
model.result('pg4').feature('line1').set('colortabletrans', 'none');
model.result('pg4').feature('line1').set('colorscalemode', 'linear');
model.result('pg4').feature('line1').set('linetype', 'tube');
model.result('pg4').feature('line1').set('radiusexpr', 'beam.re');
model.result('pg4').feature('line1').set('coloring', 'gradient');
model.result('pg4').feature('line1').set('topcolor', 'custom');
model.result('pg4').feature('line1').set('customtopcolor', [0.3921568691730499 0 0.3921568691730499]);
model.result('pg4').feature('line1').set('bottomcolor', 'custom');
model.result('pg4').feature('line1').set('custombottomcolor', [1 0.9019607901573181 1]);
model.result('pg4').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg4').feature('line1').set('tuberadiusscale', 1);
model.result('pg4').feature('line1').set('tubeendcaps', false);
model.result('pg4').feature('line1').label('Size');
model.result('pg4').label('Beam Orientation (beam)');
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('title', 'Beam approximate radius and principal axes');
model.result('pg4').create('arws1', 'ArrowLine');
model.result('pg4').feature('arws1').label('Local Y Direction (Green)');
model.result('pg4').feature('arws1').set('expr', {'beam.beamsys.e_y1*sqrt(sqrt(beam.Izz)) ' 'beam.beamsys.e_y2*sqrt(sqrt(beam.Izz)) ' 'beam.beamsys.e_y3*sqrt(sqrt(beam.Izz)) '});
model.result('pg4').feature('arws1').set('color', 'green');
model.result('pg4').feature('arws1').set('placement', 'gausspoints');
model.result('pg4').feature('arws1').set('scale', 8);
model.result('pg4').create('arws2', 'ArrowLine');
model.result('pg4').feature('arws2').label('Local Z Direction (Blue)');
model.result('pg4').feature('arws2').set('expr', {'beam.beamsys.e_z1*sqrt(sqrt(beam.Iyy)) ' 'beam.beamsys.e_z2*sqrt(sqrt(beam.Iyy)) ' 'beam.beamsys.e_z3*sqrt(sqrt(beam.Iyy)) '});
model.result('pg4').feature('arws2').set('color', 'blue');
model.result('pg4').feature('arws2').set('placement', 'gausspoints');
model.result('pg4').feature('arws2').set('scale', 8);
model.result('pg4').label('Beam Orientation (beam)');
model.result('pg4').run;
model.result('pg3').run;

model.nodeGroup.create('grp2', 'Results');
model.nodeGroup('grp2').set('type', 'plotgroup');
model.nodeGroup.move('grp2', 1);
model.nodeGroup('grp2').add('plotgroup', 'pg3');
model.nodeGroup('grp2').add('plotgroup', 'pg4');
model.nodeGroup('grp2').label('Gravity Results');

model.study('std1').feature('eig').set('appnreigs', 600);
model.study('std1').feature('eig').set('maxnreigs', 1000);
model.study('std1').feature('eig').set('chkeigregion', false);
model.study('std1').label('Study: Eigenfrequency');
model.study('std1').create('cmbsol', 'CombineSolution');
model.study('std1').feature('cmbsol').label('Remove Low Mass Modes');
model.study('std1').feature('cmbsol').set('soloper', 'remsol');
model.study('std1').feature('cmbsol').set('excmethod', 'implicit');
model.study('std1').feature('cmbsol').set('remsolfromexprexc', '(comp1.rsp1.mEffLX<comp1.rsp1.mass*massTol)&&(comp1.rsp1.mEffLY<comp1.rsp1.mass*massTol)&&(comp1.rsp1.mEffLZ<comp1.rsp1.mass*massTol)');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std1');
model.sol('sol2').feature('st1').set('studystep', 'eig');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'eig');
model.sol('sol2').create('e1', 'Eigenvalue');
model.sol('sol2').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol2').feature('e1').set('eigvfunscaleparam', '2.9699999999999997E-5');
model.sol('sol2').feature('e1').set('control', 'eig');
model.sol('sol2').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').create('cms1', 'CombineSolution');
model.sol('sol2').feature('cms1').set('control', 'cmbsol');
model.sol('sol2').attach('std1');
model.sol('sol2').runAll;

model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').set('defaultPlotID', 'modeShape');
model.result('pg5').set('showlegends', false);
model.result('pg5').create('line1', 'Line');
model.result('pg5').feature('line1').set('expr', {'beam.disp'});
model.result('pg5').feature('line1').set('threshold', 'manual');
model.result('pg5').feature('line1').set('thresholdvalue', 0.2);
model.result('pg5').feature('line1').set('colortable', 'Rainbow');
model.result('pg5').feature('line1').set('colortabletrans', 'none');
model.result('pg5').feature('line1').set('colorscalemode', 'linear');
model.result('pg5').label('Mode Shape (beam)');
model.result('pg5').feature('line1').set('colortable', 'AuroraBorealis');
model.result('pg5').feature('line1').set('linetype', 'tube');
model.result('pg5').feature('line1').set('radiusexpr', 'beam.re');
model.result('pg5').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg5').feature('line1').set('tuberadiusscale', 1);
model.result('pg5').feature('line1').set('tubeendcaps', false);
model.result('pg5').feature('line1').create('def', 'Deform');
model.result('pg5').feature('line1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg5').feature('line1').feature('def').set('descr', 'Displacement field');
model.result.evaluationGroup.create('std1EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std1EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_beam');
model.result.evaluationGroup('std1EvgFrq').set('data', 'dset2');
model.result.evaluationGroup('std1EvgFrq').label('Eigenfrequencies (Study: Eigenfrequency)');
model.result.evaluationGroup('std1EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std1EvgFrq').run;
model.result.evaluationGroup.create('std1rsp1', 'EvaluationGroup');
model.result.evaluationGroup('std1rsp1').set('data', 'dset2');
model.result.evaluationGroup('std1rsp1').label('Participation Factors (Study: Eigenfrequency)');
model.result.evaluationGroup('std1rsp1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('expr', 'rsp1.pfLnormX', 0);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('unit', '1', 0);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('descr', 'Participation factor, normalized, X-translation', 0);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('expr', 'rsp1.pfLnormY', 1);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Y-translation', 1);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('expr', 'rsp1.pfLnormZ', 2);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Z-translation', 2);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('expr', 'rsp1.mEffLX', 3);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('unit', 'kg', 3);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('descr', 'Effective modal mass, X-translation', 3);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('expr', 'rsp1.mEffLY', 4);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('unit', 'kg', 4);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('descr', 'Effective modal mass, Y-translation', 4);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('expr', 'rsp1.mEffLZ', 5);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('unit', 'kg', 5);
model.result.evaluationGroup('std1rsp1').feature('gev1').setIndex('descr', 'Effective modal mass, Z-translation', 5);
model.result.evaluationGroup('std1rsp1').run;
model.result('pg5').run;

model.study('std1').feature('cmbsol').set('removesol', 'sol2');
model.study('std1').feature('cmbsol').set('removesoluse', 'sol3');

model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Total Modal Mass');
model.result.numerical('gev1').set('data', 'dset2');
model.result.numerical('gev1').set('expr', {'rsp1.mEffLX'});
model.result.numerical('gev1').set('descr', {'Effective modal mass, X-translation'});
model.result.numerical('gev1').set('unit', {'kg'});
model.result.numerical('gev1').setIndex('expr', 'rsp1.mEffLY', 1);
model.result.numerical('gev1').setIndex('unit', 'kg', 1);
model.result.numerical('gev1').setIndex('descr', 'Effective modal mass, Y-translation', 1);
model.result.numerical('gev1').setIndex('expr', 'rsp1.mEffLZ', 2);
model.result.numerical('gev1').setIndex('unit', 'kg', 2);
model.result.numerical('gev1').setIndex('descr', 'Effective modal mass, Z-translation', 2);
model.result.numerical('gev1').set('dataseries', 'integral');
model.result.numerical('gev1').set('dataseriesmethod', 'summation');
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Total Modal Mass');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').label('True Mass');
model.result.numerical('gev2').set('data', 'dset2');
model.result.numerical('gev2').setIndex('looplevelinput', 'first', 0);
model.result.numerical('gev2').set('expr', {'rsp1.mass'});
model.result.numerical('gev2').set('descr', {'Mass'});
model.result.numerical('gev2').set('unit', {'kg'});
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('True Mass');
model.result.numerical('gev2').set('table', 'tbl2');
model.result.numerical('gev2').setResult;
model.result.numerical.create('gev3', 'EvalGlobal');
model.result.numerical('gev3').label('Relative Modal Mass Contribution');
model.result.numerical('gev3').setIndex('expr', 'rsp1.mEffLX/rsp1.mass', 0);
model.result.numerical('gev3').setIndex('unit', 1, 0);
model.result.numerical('gev3').setIndex('descr', ['X' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'direction'], 0);
model.result.numerical('gev3').setIndex('expr', 'rsp1.mEffLY/rsp1.mass', 1);
model.result.numerical('gev3').setIndex('unit', 1, 1);
model.result.numerical('gev3').setIndex('descr', ['Y' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'direction'], 1);
model.result.numerical('gev3').setIndex('expr', 'rsp1.mEffLZ/rsp1.mass', 2);
model.result.numerical('gev3').setIndex('unit', 1, 2);
model.result.numerical('gev3').setIndex('descr', ['Z' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'direction'], 2);
model.result.numerical('gev3').set('data', 'dset3');
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').comments('Relative Modal Mass Contribution');
model.result.numerical('gev3').set('table', 'tbl3');
model.result.numerical('gev3').setResult;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').set('data', 'none');
model.result('pg6').create('tblp1', 'Table');
model.result('pg6').feature('tblp1').set('source', 'table');
model.result('pg6').feature('tblp1').set('table', 'tbl3');
model.result('pg6').feature('tblp1').set('linewidth', 'preference');
model.result('pg6').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg6').run;
model.result('pg6').feature('tblp1').set('linestyle', 'none');
model.result('pg6').feature('tblp1').set('linemarker', 'cycle');
model.result('pg6').feature('tblp1').set('legend', true);
model.result('pg6').run;
model.result('pg6').label('Relative Modal Mass');
model.result('pg6').set('legendpos', 'middleright');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'Relative modal mass');
model.result('pg6').run;
model.result('pg6').set('ylog', true);
model.result('pg6').run;
model.result('pg5').run;
model.result('pg5').create('arpt1', 'ArrowPoint');
model.result('pg5').feature('arpt1').set('inheritplot', 'line1');
model.result('pg5').feature('arpt1').create('def1', 'Deform');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').set('looplevel', [2]);
model.result('pg5').run;
model.result('pg5').set('looplevel', [14]);
model.result('pg5').run;

model.nodeGroup.create('grp3', 'Results');
model.nodeGroup('grp3').set('type', 'plotgroup');
model.nodeGroup.move('grp3', 2);
model.nodeGroup('grp3').add('plotgroup', 'pg5');
model.nodeGroup('grp3').add('plotgroup', 'pg6');
model.nodeGroup('grp3').label('Eigenfrequency Results');

model.result.dataset.create('rs1', 'ResponseSpectrum3D');
model.result.dataset('rs1').set('data', 'dset2');
model.result.dataset('rs1').set('spectrumfunof', 'periodtime');
model.result.dataset('rs1').set('primhorizspectrum', 'pw1');
model.result.dataset('rs1').set('sechorizspectrum', 'pw1');
model.result.dataset('rs1').set('vertspectrum', 'pw2');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').create('line1', 'Line');
model.result('pg7').run;
model.result('pg7').label('Stress, CQC Method');
model.result('pg7').set('showlegendsmaxmin', true);
model.result('pg7').run;
model.result('pg7').feature('line1').set('expr', 'beam.mises');
model.result('pg7').feature('line1').set('unit', 'MPa');
model.result('pg7').feature('line1').set('linetype', 'tube');
model.result('pg7').run;
model.result('pg7').set('data', 'rs1');
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('Displacement, CQC Method');
model.result('pg8').run;
model.result('pg8').feature('line1').set('expr', 'beam.disp');
model.result('pg8').feature('line1').set('unit', 'mm');
model.result('pg8').feature('line1').set('colortable', 'Spectrum');
model.result('pg8').run;

model.group.create('lgRspXTot', 'LoadGroup');
model.group('lgRspXTot').label('Load Group: Total Mass X');
model.group.create('lgRspXMode', 'LoadGroup');
model.group('lgRspXMode').label('Load Group: Modal Mass X');
model.group.create('lgRspYTot', 'LoadGroup');
model.group('lgRspYTot').label('Load Group: Total Mass Y');
model.group.create('lgRspYMode', 'LoadGroup');
model.group('lgRspYMode').label('Load Group: Modal Mass Y');
model.group.create('lgRspZTot', 'LoadGroup');
model.group('lgRspZTot').label('Load Group: Total Mass Z');
model.group.create('lgRspZMode', 'LoadGroup');
model.group('lgRspZMode').label('Load Group: Modal Mass Z');

model.nodeGroup.create('lgRspGrp', 'GlobalDefinitions');
model.nodeGroup('lgRspGrp').set('type', 'group');
model.nodeGroup('lgRspGrp').label('Load Groups for Missing Mass Correction');
model.nodeGroup('lgRspGrp').add('group', 'lgRspXTot');
model.nodeGroup('lgRspGrp').add('group', 'lgRspXMode');
model.nodeGroup('lgRspGrp').add('group', 'lgRspYTot');
model.nodeGroup('lgRspGrp').add('group', 'lgRspYMode');
model.nodeGroup('lgRspGrp').add('group', 'lgRspZTot');
model.nodeGroup('lgRspGrp').add('group', 'lgRspZMode');

model.study('std1').getSolverSequences('All');
model.study.create('stdRsp');
model.study('stdRsp').label('Study: Missing Mass Load Cases');
model.study('stdRsp').setGenPlots(false);
model.study('stdRsp').create('cmbRspX', 'CombineSolution');
model.study('stdRsp').feature('cmbRspX').label('Modal Mass Summation X');
model.study('stdRsp').create('cmbRspY', 'CombineSolution');
model.study('stdRsp').feature('cmbRspY').label('Modal Mass Summation Y');
model.study('stdRsp').create('cmbRspZ', 'CombineSolution');
model.study('stdRsp').feature('cmbRspZ').label('Modal Mass Summation Z');
model.study('stdRsp').create('statRsp', 'Stationary');
model.study('stdRsp').feature('statRsp').label('Missing Mass Static Load Cases');
model.study('stdRsp').feature('cmbRspX').set('soloper', 'wgtsum');
model.study('stdRsp').feature('cmbRspX').set('weightoneexpr', 'comp1.rsp1.pfLX');
model.study('stdRsp').feature('cmbRspY').set('soloper', 'wgtsum');
model.study('stdRsp').feature('cmbRspY').set('weightoneexpr', 'comp1.rsp1.pfLY');
model.study('stdRsp').feature('cmbRspZ').set('soloper', 'wgtsum');
model.study('stdRsp').feature('cmbRspZ').set('weightoneexpr', 'comp1.rsp1.pfLZ');
model.study('stdRsp').feature('statRsp').set('useloadcase', true);
model.study('stdRsp').feature('statRsp').setIndex('loadcase', 'Total mass X', 0);
model.study('stdRsp').feature('statRsp').setIndex('loadcase', 'Modal mass X', 1);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', true, 0, 0);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 1, 0);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 0, 1);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', true, 1, 1);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 0, 2);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 0, 2);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 1, 2);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 1, 2);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 0, 3);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 0, 3);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 1, 3);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 1, 3);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 0, 4);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 0, 4);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 1, 4);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 1, 4);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 0, 5);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 0, 5);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 1, 5);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 1, 5);
model.study('stdRsp').feature('statRsp').setIndex('loadcase', 'Total mass Y', 2);
model.study('stdRsp').feature('statRsp').setIndex('loadcase', 'Modal mass Y', 3);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 2, 0);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 2, 0);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 3, 0);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 3, 0);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 2, 1);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 2, 1);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 3, 1);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 3, 1);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', true, 2, 2);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 2, 2);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 3, 2);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 3, 2);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 2, 3);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 2, 3);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', true, 3, 3);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 3, 3);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 2, 4);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 2, 4);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 3, 4);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 3, 4);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 2, 5);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 2, 5);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 3, 5);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 3, 5);
model.study('stdRsp').feature('statRsp').setIndex('loadcase', 'Total mass Z', 4);
model.study('stdRsp').feature('statRsp').setIndex('loadcase', 'Modal mass Z', 5);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 4, 0);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 4, 0);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 5, 0);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 5, 0);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 4, 1);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 4, 1);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 5, 1);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 5, 1);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 4, 2);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 4, 2);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 5, 2);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 5, 2);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 4, 3);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 4, 3);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 5, 3);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 5, 3);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', true, 4, 4);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 4, 4);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 5, 4);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 5, 4);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', false, 4, 5);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 4, 5);
model.study('stdRsp').feature('statRsp').setIndex('loadgroup', true, 5, 5);
model.study('stdRsp').feature('statRsp').setIndex('loadgroupweight', '1.0', 5, 5);
model.study('stdRsp').getSolverSequences('All');

model.sol.create('sol4');
model.sol('sol4').study('stdRsp');
model.sol('sol4').create('cms1', 'CombineSolution');
model.sol('sol4').feature('cms1').set('control', 'cmbRspX');
model.sol('sol4').create('su1', 'StoreSolution');
model.sol('sol4').create('cms2', 'CombineSolution');
model.sol('sol4').feature('cms2').set('control', 'cmbRspY');
model.sol('sol4').create('su2', 'StoreSolution');
model.sol('sol4').create('cms3', 'CombineSolution');
model.sol('sol4').feature('cms3').set('control', 'cmbRspZ');
model.sol('sol4').create('su3', 'StoreSolution');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'stdRsp');
model.sol('sol4').feature('st1').set('studystep', 'statRsp');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('initmethod', 'sol');
model.sol('sol4').feature('v1').set('initsol', 'sol4');
model.sol('sol4').feature('v1').set('notsolmethod', 'sol');
model.sol('sol4').feature('v1').set('notsol', 'sol4');
model.sol('sol4').feature('v1').set('control', 'statRsp');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').create('p1', 'Parametric');
model.sol('sol4').feature('s1').feature.remove('pDef');
model.sol('sol4').feature('s1').feature('p1').set('control', 'statRsp');
model.sol('sol4').feature('s1').set('control', 'statRsp');
model.sol('sol4').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').feature('v1').set('notsolnum', 'auto');
model.sol('sol4').feature('v1').set('notsolvertype', 'solnum');
model.sol('sol4').feature('v1').set('solnum', 'auto');
model.sol('sol4').feature('v1').set('solvertype', 'solnum');
model.sol('sol4').attach('stdRsp');

model.study('stdRsp').getSolverSequences('All');
model.study('stdRsp').feature('cmbRspX').set('cssolwghtsum', 'sol2');
model.study('stdRsp').feature('cmbRspY').set('cssolwghtsum', 'sol2');
model.study('stdRsp').feature('cmbRspZ').set('cssolwghtsum', 'sol2');

model.physics('beam').create('laftRspX', 'LinearlyAcceleratedFrame');
model.physics('beam').feature('laftRspX').label('Total Mass Load X');
model.physics('beam').feature('laftRspX').selection.all;
model.physics('beam').feature('laftRspX').set('af', {'1' '0' '0'});
model.physics('beam').feature('laftRspX').set('loadGroup', 'lgRspXTot');
model.physics('beam').create('lafmRspX', 'LinearlyAcceleratedFrame');
model.physics('beam').feature('lafmRspX').label('Modal Mass Load X');
model.physics('beam').feature('lafmRspX').selection.all;
model.physics('beam').feature('lafmRspX').set('af', {'-(withsol(''sol5'',u/1[m])-1)*1[m/s^2]' '-(withsol(''sol5'',v/1[m]))*1[m/s^2]' '-(withsol(''sol5'',w/1[m]))*1[m/s^2]'});
model.physics('beam').feature('lafmRspX').set('loadGroup', 'lgRspXMode');
model.physics('beam').create('laftRspY', 'LinearlyAcceleratedFrame');
model.physics('beam').feature('laftRspY').label('Total Mass Load Y');
model.physics('beam').feature('laftRspY').selection.all;
model.physics('beam').feature('laftRspY').set('af', {'0' '1' '0'});
model.physics('beam').feature('laftRspY').set('loadGroup', 'lgRspYTot');
model.physics('beam').create('lafmRspY', 'LinearlyAcceleratedFrame');
model.physics('beam').feature('lafmRspY').label('Modal Mass Load Y');
model.physics('beam').feature('lafmRspY').selection.all;
model.physics('beam').feature('lafmRspY').set('af', {'-(withsol(''sol6'',u/1[m]))*1[m/s^2]' '-(withsol(''sol6'',v/1[m])-1)*1[m/s^2]' '-(withsol(''sol6'',w/1[m]))*1[m/s^2]'});
model.physics('beam').feature('lafmRspY').set('loadGroup', 'lgRspYMode');
model.physics('beam').create('laftRspZ', 'LinearlyAcceleratedFrame');
model.physics('beam').feature('laftRspZ').label('Total Mass Load Z');
model.physics('beam').feature('laftRspZ').selection.all;
model.physics('beam').feature('laftRspZ').set('af', {'0' '0' '1'});
model.physics('beam').feature('laftRspZ').set('loadGroup', 'lgRspZTot');
model.physics('beam').create('lafmRspZ', 'LinearlyAcceleratedFrame');
model.physics('beam').feature('lafmRspZ').label('Modal Mass Load Z');
model.physics('beam').feature('lafmRspZ').selection.all;
model.physics('beam').feature('lafmRspZ').set('af', {'-(withsol(''sol7'',u/1[m]))*1[m/s^2]' '-(withsol(''sol7'',v/1[m]))*1[m/s^2]' '-(withsol(''sol7'',w/1[m])-1)*1[m/s^2]'});
model.physics('beam').feature('lafmRspZ').set('loadGroup', 'lgRspZMode');

model.nodeGroup.create('mmRspGrpbeam', 'Physics', 'beam');
model.nodeGroup('mmRspGrpbeam').label('Loads for Missing Mass Correction');
model.nodeGroup('mmRspGrpbeam').add('lafmRspZ');
model.nodeGroup('mmRspGrpbeam').add('laftRspZ');
model.nodeGroup('mmRspGrpbeam').add('lafmRspY');
model.nodeGroup('mmRspGrpbeam').add('laftRspY');
model.nodeGroup('mmRspGrpbeam').add('lafmRspX');
model.nodeGroup('mmRspGrpbeam').add('laftRspX');

model.study('stdRsp').feature('statRsp').set('useadvanceddisable', true);
model.study('stdRsp').feature('statRsp').set('disabledphysics', {'beam/gacc1'});

model.sol('sol4').study('stdRsp');
model.sol('sol5').copySolution('sol8');
model.sol('sol6').copySolution('sol9');
model.sol('sol7').copySolution('sol10');

model.result.dataset('dset7').set('solution', 'none');
model.result.dataset('dset6').set('solution', 'none');
model.result.dataset('dset5').set('solution', 'none');

model.sol('sol4').feature.remove('s1');
model.sol('sol4').feature.remove('v1');
model.sol('sol4').feature.remove('st1');
model.sol('sol4').feature.remove('su3');
model.sol('sol4').feature.remove('cms3');
model.sol('sol4').feature.remove('su2');
model.sol('sol4').feature.remove('cms2');
model.sol('sol4').feature.remove('su1');
model.sol('sol4').feature.remove('cms1');
model.sol('sol10').copySolution('sol7');
model.sol.remove('sol10');
model.sol('sol7').label('Solution Store 4');

model.result.dataset.remove('dset11');

model.sol('sol9').copySolution('sol6');
model.sol.remove('sol9');
model.sol('sol6').label('Solution Store 3');

model.result.dataset.remove('dset10');

model.sol('sol8').copySolution('sol5');
model.sol.remove('sol8');
model.sol('sol5').label('Solution Store 2');

model.result.dataset.remove('dset9');

model.sol('sol4').create('cms1', 'CombineSolution');
model.sol('sol4').feature('cms1').set('control', 'cmbRspX');
model.sol('sol4').create('su1', 'StoreSolution');
model.sol('sol4').feature('su1').set('sol', 'sol5');
model.sol('sol4').feature('su1').label('Solution Store 2');
model.sol('sol4').create('cms2', 'CombineSolution');
model.sol('sol4').feature('cms2').set('control', 'cmbRspY');
model.sol('sol4').create('su2', 'StoreSolution');
model.sol('sol4').feature('su2').set('sol', 'sol6');
model.sol('sol4').feature('su2').label('Solution Store 3');
model.sol('sol4').create('cms3', 'CombineSolution');
model.sol('sol4').feature('cms3').set('control', 'cmbRspZ');
model.sol('sol4').create('su3', 'StoreSolution');
model.sol('sol4').feature('su3').set('sol', 'sol7');
model.sol('sol4').feature('su3').label('Solution Store 4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'stdRsp');
model.sol('sol4').feature('st1').set('studystep', 'statRsp');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('initmethod', 'sol');
model.sol('sol4').feature('v1').set('initsol', 'sol4');
model.sol('sol4').feature('v1').set('notsolmethod', 'sol');
model.sol('sol4').feature('v1').set('notsol', 'sol4');
model.sol('sol4').feature('v1').set('control', 'statRsp');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').create('p1', 'Parametric');
model.sol('sol4').feature('s1').feature.remove('pDef');
model.sol('sol4').feature('s1').feature('p1').set('control', 'statRsp');
model.sol('sol4').feature('s1').set('control', 'statRsp');
model.sol('sol4').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol4').feature('s1').feature.remove('fcDef');

model.result.dataset('dset5').set('solution', 'sol5');
model.result.dataset('dset7').set('solution', 'sol7');
model.result.dataset('dset6').set('solution', 'sol6');

model.sol('sol4').feature('v1').set('notsolnum', 'auto');
model.sol('sol4').feature('v1').set('notsolvertype', 'solnum');
model.sol('sol4').feature('v1').set('solnum', 'auto');
model.sol('sol4').feature('v1').set('solvertype', 'solnum');
model.sol('sol4').feature('cms3').set('solnum', 'all');
model.sol('sol4').feature('cms3').set('solvertype', 'solnum');
model.sol('sol4').feature('cms2').set('solnum', 'all');
model.sol('sol4').feature('cms2').set('solvertype', 'solnum');
model.sol('sol4').feature('cms1').set('solnum', 'all');
model.sol('sol4').feature('cms1').set('solvertype', 'solnum');
model.sol('sol4').attach('stdRsp');
model.sol('sol4').runAll;

model.result.dataset.duplicate('rs2', 'rs1');
model.result.dataset('rs2').set('rigidmodes', 'gupta');
model.result.dataset('rs2').set('freqlimitperiodic', 10);
model.result.dataset('rs2').set('freqlimitrigid', 20);
model.result.dataset('rs2').set('zeroperiodaccfreq', 30);
model.result.dataset('rs2').set('masscorrectiongupta', 'missingmass');
model.result.dataset('rs2').set('data2', 'dset4');
model.result('pg7').run;
model.result.duplicate('pg9', 'pg7');
model.result.duplicate('pg10', 'pg8');
model.result('pg9').run;
model.result('pg9').label('Stress, CQC Method with Missing Mass Correction');
model.result('pg9').set('data', 'rs2');
model.result('pg9').run;
model.result('pg9').run;
model.result('pg10').run;
model.result('pg10').label('Displacement, CQC Method with Missing Mass Correction');
model.result('pg10').set('data', 'rs2');
model.result('pg10').run;
model.result('pg8').run;

model.title('Earthquake Analysis of a Building');

model.description('This example shows how to verify the integrity of structure exposed to an earthquake using response spectrum analysis. The building is modeled as a steel frame, using beam elements. Displacements and stresses are computed.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol5').clearSolutionData;

model.label('building_response_spectrum.mph');

model.modelNode.label('Components');

out = model;
