function out = model
%
% v_flow_battery.m
%
% Model exported on May 26 2025, 21:26 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Battery_Design_Module/Flow_Batteries');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('tcd', 'TertiaryCurrentDistributionNernstPlanck', 'geom1', {'cSO4_neg' 'cHSO4_neg' 'cH_neg' 'cV2' 'cV3'});
model.physics('tcd').field('electricpotentialionicphase').field('phil_neg');
model.physics('tcd').field('electricpotential').field('phis_neg');
model.physics.create('tcd2', 'TertiaryCurrentDistributionNernstPlanck', 'geom1', {'cSO4_mem' 'cHSO4_mem' 'cH_mem' 'cV2_mem' 'cV3_mem' 'cV4_mem' 'cV5_mem'});
model.physics('tcd2').field('electricpotentialionicphase').field('phil_mem');
model.physics('tcd2').field('electricpotential').field('phis_mem');
model.physics.create('tcd3', 'TertiaryCurrentDistributionNernstPlanck', 'geom1', {'cSO4_pos' 'cHSO4_pos' 'cH_pos' 'cV4' 'cV5'});
model.physics('tcd3').field('electricpotentialionicphase').field('phil_pos');
model.physics('tcd3').field('electricpotential').field('phis_pos');

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/tcd', true);
model.study('std1').feature('cdi').setSolveFor('/physics/tcd2', true);
model.study('std1').feature('cdi').setSolveFor('/physics/tcd3', true);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/tcd', true);
model.study('std1').feature('stat').setSolveFor('/physics/tcd2', true);
model.study('std1').feature('stat').setSolveFor('/physics/tcd3', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('H_cell', '0.035[m]', 'Cell height');
model.param.set('wCell', '0.0285[m]', 'Cell depth');
model.param.set('L_e', '0.004[m]', 'Electrode thickness');
model.param.set('L_m', '203e-6[m]', 'Membrane thickness');
model.param.set('DV2', '2.4e-10[m^2/s]', 'V(2+) diffusion coefficient');
model.param.set('DV3', '2.4e-10[m^2/s]', 'V(3+) diffusion coefficient');
model.param.set('DV4', '3.9e-10[m^2/s]', 'VO(2+) diffusion coefficient');
model.param.set('DV5', '3.9e-10[m^2/s]', 'VO2(+) diffusion coefficient');
model.param.set('DH', '9.312e-9[m^2/s]', 'H(+) diffusion coefficient');
model.param.set('DSO4', '1.065e-9[m^2/s]', 'SO4(2-) diffusion coefficient');
model.param.set('DHSO4', '1.33e-9[m^2/s]', 'HSO4(-) diffusion coefficient');
model.param.set('v', '30[ml/min]/(wCell*L_e)', 'Inlet velocity');
model.param.set('T', '293.15[K]', 'Cell temperature');
model.param.set('sigma_e', '66.7[S/m]', 'Electrode conductivity');
model.param.set('epsilon', '0.93', 'Electrode porosity');
model.param.set('a', '35e4[m^2/m^3]', 'Electrode specific area');
model.param.set('E0_pos', '1.004[V]', 'Standard potential, positive reaction');
model.param.set('k_pos', '2.5e-8[m/s]', 'Rate constant, positive reaction');
model.param.set('alpha_pos', '0.55', 'Transfer coefficient, positive reaction');
model.param.set('E0_neg', '-0.255[V]', 'Standard potential, negative reaction');
model.param.set('k_neg', '7e-8[m/s]', 'Rate constant, negative reaction');
model.param.set('alpha_neg', '0.45', 'Transfer coefficient, negative reaction');
model.param.set('beta', '0.25', 'Dissociation constant');
model.param.set('kd', '1e4[mol/(m^3*s)]', 'HSO4(-) dissociation rate constant');
model.param.set('cHm', '1.99[mol/l]', 'Membrane proton concentration');
model.param.set('cV2_0', '156[mol/m^3]', 'V(2+) initial concentration');
model.param.set('cV3_0', '884[mol/m^3]', 'V(3+) initial concentration');
model.param.set('cV4_0', '884[mol/m^3]', 'VO(2+) initial concentration');
model.param.set('cV5_0', '156[mol/m^3]', 'VO2(+) initial concentration');
model.param.set('cH_0_neg', '4447.5[mol/m^3]', 'H(+) initial concentration, negative electrode');
model.param.set('cH_0_pos', '5097.5[mol/m^3]', 'H(+) initial concentration, positive electrode');
model.param.set('cHSO4_0_neg', '2668.5[mol/m^3]', 'HSO4(-) initial concentration, negative electrode');
model.param.set('cHSO4_0_pos', '3058.5[mol/m^3]', 'HSO4(-) initial concentration, positive electrode');
model.param.set('i_avg', '-100[mA/cm^2]', 'Average current density');
model.param.set('c_fix', '0[M]', '(0[M] used during Current Distribution Initialization, -cHm used after Auxiliary sweep)');
model.param.set('i0ref_neg', 'F_const*k_neg*1[mol/l]', 'Reference exchange current density, negative reaction');
model.param.set('i0ref_pos', 'F_const*k_pos*1[mol/l]', 'Reference exchange current density, positive reaction');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'L_e' 'H_cell'});
model.geom('geom1').feature('r1').set('selresult', true);
model.geom('geom1').feature('r1').label('Negative Electrode');
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'L_m' 'H_cell'});
model.geom('geom1').feature('r2').set('pos', {'L_e' '0'});
model.geom('geom1').feature('r2').set('selresult', true);
model.geom('geom1').feature('r2').label('Membrane');
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', {'L_e' 'H_cell'});
model.geom('geom1').feature('r3').set('pos', {'L_e+L_m' '0'});
model.geom('geom1').feature('r3').set('selresult', true);
model.geom('geom1').feature('r3').label('Positive Electrode');
model.geom('geom1').runPre('fin');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').selection.geom('geom1', 2);
model.variable('var1').selection.named('geom1_r1_dom');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('aV3', 'max(cV3/1[mol/l],eps)', 'V(3+) activity');
model.variable('var1').set('aV2', 'max(cV2/1[mol/l],eps)', 'V(2+) activity');
model.variable('var1').set('aH', 'max(cH_neg/1[mol/l],eps)', 'H(+) activity');
model.variable('var1').set('aHSO4', 'max(cHSO4_neg/1[mol/l],eps)', 'HSO4(-) activity');
model.variable('var1').set('aSO4', 'max(cSO4_neg/1[mol/l],eps)', 'SO4(2-) activity');
model.variable('var1').set('rd', 'kd*((aH-aHSO4)/(aH+aHSO4)-beta)', 'dissociation rate');
model.variable('var1').set('phil', 'phil_neg', 'Electrolyte potential (for postprocessing)');
model.variable('var1').set('phis', 'phis_neg', 'Electrode potential (for postprocessing)');
model.variable('var1').set('Hx', 'tcd.tflux_cH_negx', 'H(+) Flux (for postprocessing)');
model.variable('var1').set('SO4x', 'tcd.tflux_cSO4_negx', 'SO4(2-) Flux (for postprocessing)');
model.variable('var1').set('HSO4x', 'tcd.tflux_cHSO4_negx', 'HSO4(-) Flux (for postprocessing)');
model.variable('var1').label('Negative Electrode Variables');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').selection.geom('geom1', 2);
model.variable('var2').selection.named('geom1_r2_dom');

% To import content from file, use:
% model.variable('var2').loadFile('FILENAME');
model.variable('var2').set('phil', 'phil_mem', 'Electrolyte potential (for postprocessing)');
model.variable('var2').set('aH', 'max(cH_mem/1[mol/l],eps)', 'H(+) activity');
model.variable('var2').set('aHSO4', 'max(cHSO4_mem/1[mol/l],eps)', 'HSO4(-) activity');
model.variable('var2').set('aSO4', 'max(cSO4_mem/1[mol/l],eps)', 'SO4(2-) activity');
model.variable('var2').set('aV2', 'max(cV2_mem/1[mol/l],eps)', 'V(2+) activity');
model.variable('var2').set('aV3', 'max(cV3_mem/1[mol/l],eps)', 'V(3+) activity');
model.variable('var2').set('aV4', 'max(cV4_mem/1[mol/l],eps)', 'V(4+) activity');
model.variable('var2').set('aV5', 'max(cV5_mem/1[mol/l],eps)', 'V(5+) activity');
model.variable('var2').set('rd', 'kd*((aH-aHSO4)/(aH+aHSO4)-beta)', 'Dissociation rate');
model.variable('var2').set('Hx', 'tcd2.tflux_cH_memx', 'H(+) Flux (for postprocessing)');
model.variable('var2').set('SO4x', 'tcd2.tflux_cSO4_memx', 'SO4(2-) Flux (for postprocessing)');
model.variable('var2').set('HSO4x', 'tcd2.tflux_cHSO4_memx', 'HSO4(-) Flux (for postprocessing)');
model.variable('var2').label('Membrane Variables');
model.variable.create('var3');
model.variable('var3').model('comp1');
model.variable('var3').selection.geom('geom1', 2);
model.variable('var3').selection.named('geom1_r3_dom');

% To import content from file, use:
% model.variable('var3').loadFile('FILENAME');
model.variable('var3').set('aV4', 'max(cV4/1[mol/l],eps)', 'VO(2+) activity');
model.variable('var3').set('aV5', 'max(cV5/1[mol/l],eps)', 'VO2(+) activity');
model.variable('var3').set('aH', 'max(cH_pos/1[mol/l],eps)', 'H(+) activity');
model.variable('var3').set('aHSO4', 'max(cHSO4_pos/1[mol/l],eps)', 'HSO4(-) activity');
model.variable('var3').set('aSO4', 'max(cSO4_pos/1[mol/l],eps)', 'SO4(2-) activity');
model.variable('var3').set('rd', 'kd*((aH-aHSO4)/(aH+aHSO4)-beta)', 'dissociation rate');
model.variable('var3').set('phil', 'phil_pos', 'Electrolyte potential (for postprocessing)');
model.variable('var3').set('phis', 'phis_pos', 'Electrode potential (for postprocessing)');
model.variable('var3').set('Hx', 'tcd3.tflux_cH_posx', 'H(+) Flux (for postprocessing)');
model.variable('var3').set('SO4x', 'tcd3.tflux_cSO4_posx', 'SO4(2-) Flux (for postprocessing)');
model.variable('var3').set('HSO4x', 'tcd3.tflux_cHSO4_posx', 'HSO4(-) Flux (for postprocessing)');
model.variable('var3').label('Positive Electrode Variables');

model.physics('tcd').label('Tertiary Current Distribution, Nernst-Planck (Negative)');
model.physics('tcd').selection.named('geom1_r1_dom');
model.physics('tcd').prop('dz').set('dz', 'wCell');
model.physics('tcd').feature('sp1').setIndex('z', -2, 0);
model.physics('tcd').feature('sp1').setIndex('z', -1, 1);
model.physics('tcd').feature('sp1').setIndex('z', 1, 2);
model.physics('tcd').feature('sp1').setIndex('z', 2, 3);
model.physics('tcd').feature('sp1').setIndex('z', 3, 4);
model.physics('tcd').create('pce1', 'PorousElectrode', 2);
model.physics('tcd').feature('pce1').selection.named('geom1_r1_dom');
model.physics('tcd').feature('pce1').set('u', {'0' 'v' '0'});
model.physics('tcd').feature('pce1').set('sigma_mat', 'userdef');
model.physics('tcd').feature('pce1').set('sigma', {'sigma_e' '0' '0' '0' 'sigma_e' '0' '0' '0' 'sigma_e'});
model.physics('tcd').feature('pce1').set('D_cSO4_neg', {'DSO4' '0' '0' '0' 'DSO4' '0' '0' '0' 'DSO4'});
model.physics('tcd').feature('pce1').set('D_cHSO4_neg', {'DHSO4' '0' '0' '0' 'DHSO4' '0' '0' '0' 'DHSO4'});
model.physics('tcd').feature('pce1').set('D_cH_neg', {'DH' '0' '0' '0' 'DH' '0' '0' '0' 'DH'});
model.physics('tcd').feature('pce1').set('D_cV2', {'DV2' '0' '0' '0' 'DV2' '0' '0' '0' 'DV2'});
model.physics('tcd').feature('pce1').set('D_cV3', {'DV3' '0' '0' '0' 'DV3' '0' '0' '0' 'DV3'});
model.physics('tcd').feature('pce1').set('epsl', 'epsilon');
model.physics('tcd').feature('pce1').set('ElectricCorrModel', 'NoCorr');
model.physics('tcd').feature('pce1').feature('per1').setIndex('Vi0', 1, 3);
model.physics('tcd').feature('pce1').feature('per1').setIndex('Vi0', -1, 4);
model.physics('tcd').feature('pce1').feature('per1').set('Eeq_ref', 'E0_neg');
model.physics('tcd').feature('pce1').feature('per1').set('i0_ref', 'i0ref_neg');
model.physics('tcd').feature('pce1').feature('per1').set('alphaa', 'alpha_neg');
model.physics('tcd').feature('pce1').feature('per1').set('Av', 'a');
model.physics('tcd').create('reac1', 'Reactions', 2);
model.physics('tcd').feature('reac1').selection.named('geom1_r1_dom');
model.physics('tcd').feature('reac1').setIndex('R_cSO4_neg', '-rd', 0);
model.physics('tcd').feature('reac1').setIndex('R_cHSO4_neg', 'rd', 0);
model.physics('tcd').feature('reac1').setIndex('R_cH_neg', '-rd', 0);
model.physics('tcd').create('egnd1', 'ElectricGround', 1);
model.physics('tcd').feature('egnd1').selection.set([1]);
model.physics('tcd').create('in1', 'Inflow', 1);
model.physics('tcd').feature('in1').selection.set([2]);
model.physics('tcd').feature('in1').setIndex('c0', 'cHSO4_0_neg', 1);
model.physics('tcd').feature('in1').setIndex('c0', 'cH_0_neg', 2);
model.physics('tcd').feature('in1').setIndex('c0', 'cV2_0', 3);
model.physics('tcd').feature('in1').setIndex('c0', 'cV3_0', 4);
model.physics('tcd').feature('in1').set('BoundaryConditionType', 'FluxDanckwerts');
model.physics('tcd').create('out1', 'Outflow', 1);
model.physics('tcd').feature('out1').selection.set([3]);
model.physics('tcd').create('iemb1', 'IonExchangeMembraneBoundary', 1);
model.physics('tcd').feature('iemb1').selection.set([4]);
model.physics('tcd').feature('iemb1').set('phim_src', 'root.comp1.phil_mem');
model.physics('tcd').feature('iemb1').set('IEMTransportModel', 'MultipleIons');
model.physics('tcd').feature('iemb1').setIndex('cmem', 'cSO4_mem', 0);
model.physics('tcd').feature('iemb1').setIndex('species', true, 1);
model.physics('tcd').feature('iemb1').setIndex('cmem', 'cHSO4_mem', 1);
model.physics('tcd').feature('iemb1').setIndex('species', true, 2);
model.physics('tcd').feature('iemb1').setIndex('cmem', 'cH_mem', 2);
model.physics('tcd').feature('iemb1').setIndex('species', true, 3);
model.physics('tcd').feature('iemb1').setIndex('cmem', 'cV2_mem', 3);
model.physics('tcd').feature('iemb1').setIndex('species', true, 4);
model.physics('tcd').feature('iemb1').setIndex('cmem', 'cV3_mem', 4);
model.physics('tcd').create('ecd1', 'ElectrodeNormalCurrentDensity', 1);
model.physics('tcd').feature('ecd1').selection.set([4]);
model.physics('tcd').feature('ecd1').set('nis', '-tcd2.itot');
model.physics('tcd').feature('init1').setIndex('initc', 'cHSO4_0_neg', 1);
model.physics('tcd').feature('init1').setIndex('initc', 'cH_0_neg', 2);
model.physics('tcd').feature('init1').setIndex('initc', 'cV2_0', 3);
model.physics('tcd').feature('init1').setIndex('initc', 'cV3_0', 4);
model.physics('tcd2').label('Tertiary Current Distribution, Nernst-Planck (Ion Exchange Membrane)');
model.physics('tcd2').selection.named('geom1_r2_dom');
model.physics('tcd2').prop('dz').set('dz', 'wCell');
model.physics('tcd2').feature('sp1').setIndex('z', -2, 0);
model.physics('tcd2').feature('sp1').setIndex('z', -1, 1);
model.physics('tcd2').feature('sp1').setIndex('z', 1, 2);
model.physics('tcd2').feature('sp1').setIndex('z', 2, 3);
model.physics('tcd2').feature('sp1').setIndex('z', 3, 4);
model.physics('tcd2').feature('sp1').setIndex('z', 2, 5);
model.physics('tcd2').feature('sp1').setIndex('z', 1, 6);
model.physics('tcd2').create('iem1', 'IonExchangeMembrane', 2);
model.physics('tcd2').feature('iem1').selection.named('geom1_r2_dom');
model.physics('tcd2').feature('iem1').set('rhofix', 'c_fix*F_const');
model.physics('tcd2').feature('iem1').set('D_cSO4_mem', {'DSO4' '0' '0' '0' 'DSO4' '0' '0' '0' 'DSO4'});
model.physics('tcd2').feature('iem1').set('D_cHSO4_mem', {'DHSO4' '0' '0' '0' 'DHSO4' '0' '0' '0' 'DHSO4'});
model.physics('tcd2').feature('iem1').set('D_cH_mem', {'DH' '0' '0' '0' 'DH' '0' '0' '0' 'DH'});
model.physics('tcd2').feature('iem1').set('D_cV2_mem', {'DV2' '0' '0' '0' 'DV2' '0' '0' '0' 'DV2'});
model.physics('tcd2').feature('iem1').set('D_cV3_mem', {'DV3' '0' '0' '0' 'DV3' '0' '0' '0' 'DV3'});
model.physics('tcd2').feature('iem1').set('D_cV4_mem', {'DV4' '0' '0' '0' 'DV4' '0' '0' '0' 'DV4'});
model.physics('tcd2').feature('iem1').set('D_cV5_mem', {'DV5' '0' '0' '0' 'DV5' '0' '0' '0' 'DV5'});
model.physics('tcd2').feature('iem1').set('epsl', 0.1);
model.physics('tcd2').create('reac1', 'Reactions', 2);
model.physics('tcd2').feature('reac1').selection.named('geom1_r2_dom');
model.physics('tcd2').feature('reac1').setIndex('R_cSO4_mem', '-rd', 0);
model.physics('tcd2').feature('reac1').setIndex('R_cHSO4_mem', 'rd', 0);
model.physics('tcd2').feature('reac1').setIndex('R_cH_mem', '-rd', 0);
model.physics('tcd2').create('es1', 'ElectrodeSurface', 1);
model.physics('tcd2').feature('es1').selection.set([4]);
model.physics('tcd2').feature('es1').feature('er1').setIndex('Vi0', -2, 2);
model.physics('tcd2').feature('es1').feature('er1').setIndex('Vi0', 1, 4);
model.physics('tcd2').feature('es1').feature('er1').setIndex('Vi0', -1, 5);
model.physics('tcd2').feature('es1').feature('er1').set('Eeq_mat', 'userdef');
model.physics('tcd2').feature('es1').feature('er1').set('ElectrodeKinetics', 'FastIrreversibleElectrodeReaction');
model.physics('tcd2').feature('es1').feature('er1').set('RateLimitingSpeciesConcentration', 6);
model.physics('tcd2').feature('es1').create('er2', 'ElectrodeReaction', 1);
model.physics('tcd2').feature('es1').feature('er2').setIndex('Vi0', -2, 2);
model.physics('tcd2').feature('es1').feature('er2').setIndex('Vi0', 1, 5);
model.physics('tcd2').feature('es1').feature('er2').setIndex('Vi0', -1, 6);
model.physics('tcd2').feature('es1').feature('er2').set('Eeq_mat', 'userdef');
model.physics('tcd2').feature('es1').feature('er2').set('ElectrodeKinetics', 'FastIrreversibleElectrodeReaction');
model.physics('tcd2').feature('es1').feature('er2').set('RateLimitingSpeciesConcentration', 7);
model.physics('tcd2').create('es2', 'ElectrodeSurface', 1);
model.physics('tcd2').feature('es2').selection.set([7]);
model.physics('tcd2').feature('es2').feature('er1').set('Eeq_mat', 'userdef');
model.physics('tcd2').feature('es2').feature('er1').set('ElectrodeKinetics', 'FastIrreversibleElectrodeReaction');
model.physics('tcd2').feature('es2').feature('er1').set('RateLimitingSpeciesConcentration', 4);
model.physics('tcd2').feature('es2').feature('er1').setIndex('Vi0', -2, 2);
model.physics('tcd2').feature('es2').feature('er1').setIndex('Vi0', 1, 4);
model.physics('tcd2').feature('es2').feature('er1').setIndex('Vi0', -1, 5);
model.physics('tcd2').feature('es2').create('er2', 'ElectrodeReaction', 1);
model.physics('tcd2').feature('es2').feature('er2').set('Eeq_mat', 'userdef');
model.physics('tcd2').feature('es2').feature('er2').set('ElectrodeKinetics', 'FastIrreversibleElectrodeReaction');
model.physics('tcd2').feature('es2').feature('er2').set('RateLimitingSpeciesConcentration', 5);
model.physics('tcd2').feature('es2').feature('er2').setIndex('Vi0', 1, 3);
model.physics('tcd2').feature('es2').feature('er2').setIndex('Vi0', -1, 4);
model.physics('tcd2').feature('init1').setIndex('initc', '(cHSO4_0_pos+cHSO4_0_neg)/2', 1);
model.physics('tcd2').feature('init1').setIndex('initc', '(cH_0_pos+cH_0_neg)/2', 2);
model.physics('tcd2').feature('init1').setIndex('initc', 'cV2_0/2', 3);
model.physics('tcd2').feature('init1').setIndex('initc', 'cV3_0/2', 4);
model.physics('tcd2').feature('init1').setIndex('initc', 'cV4_0/2', 5);
model.physics('tcd2').feature('init1').setIndex('initc', 'cV5_0/2', 6);
model.physics('tcd2').feature('init1').set('initphil', '-E0_neg');
model.physics('tcd3').label('Tertiary Current Distribution, Nernst-Planck (Positive)');
model.physics('tcd3').selection.named('geom1_r3_dom');
model.physics('tcd3').prop('dz').set('dz', 'wCell');
model.physics('tcd3').feature('sp1').setIndex('z', -2, 0);
model.physics('tcd3').feature('sp1').setIndex('z', -1, 1);
model.physics('tcd3').feature('sp1').setIndex('z', 1, 2);
model.physics('tcd3').feature('sp1').setIndex('z', 2, 3);
model.physics('tcd3').feature('sp1').setIndex('z', 1, 4);
model.physics('tcd3').create('pce1', 'PorousElectrode', 2);
model.physics('tcd3').feature('pce1').selection.named('geom1_r3_dom');
model.physics('tcd3').feature('pce1').set('u', {'0' 'v' '0'});
model.physics('tcd3').feature('pce1').set('sigma_mat', 'userdef');
model.physics('tcd3').feature('pce1').set('sigma', {'sigma_e' '0' '0' '0' 'sigma_e' '0' '0' '0' 'sigma_e'});
model.physics('tcd3').feature('pce1').set('D_cSO4_pos', {'DSO4' '0' '0' '0' 'DSO4' '0' '0' '0' 'DSO4'});
model.physics('tcd3').feature('pce1').set('D_cHSO4_pos', {'DHSO4' '0' '0' '0' 'DHSO4' '0' '0' '0' 'DHSO4'});
model.physics('tcd3').feature('pce1').set('D_cH_pos', {'DH' '0' '0' '0' 'DH' '0' '0' '0' 'DH'});
model.physics('tcd3').feature('pce1').set('D_cV4', {'DV4' '0' '0' '0' 'DV4' '0' '0' '0' 'DV4'});
model.physics('tcd3').feature('pce1').set('D_cV5', {'DV5' '0' '0' '0' 'DV5' '0' '0' '0' 'DV5'});
model.physics('tcd3').feature('pce1').set('epsl', 'epsilon');
model.physics('tcd3').feature('pce1').set('ElectricCorrModel', 'NoCorr');
model.physics('tcd3').feature('pce1').feature('per1').setIndex('Vi0', -2, 2);
model.physics('tcd3').feature('pce1').feature('per1').setIndex('Vi0', 1, 3);
model.physics('tcd3').feature('pce1').feature('per1').setIndex('Vi0', -1, 4);
model.physics('tcd3').feature('pce1').feature('per1').set('Eeq_ref', 'E0_pos');
model.physics('tcd3').feature('pce1').feature('per1').set('i0_ref', 'i0ref_pos');
model.physics('tcd3').feature('pce1').feature('per1').set('alphaa', 'alpha_pos');
model.physics('tcd3').feature('pce1').feature('per1').set('Av', 'a');
model.physics('tcd3').create('reac1', 'Reactions', 2);
model.physics('tcd3').feature('reac1').selection.named('geom1_r3_dom');
model.physics('tcd3').feature('reac1').setIndex('R_cSO4_pos', '-rd', 0);
model.physics('tcd3').feature('reac1').setIndex('R_cHSO4_pos', 'rd', 0);
model.physics('tcd3').feature('reac1').setIndex('R_cH_pos', '-rd', 0);
model.physics('tcd3').create('ec1', 'ElectrodeCurrent', 1);
model.physics('tcd3').feature('ec1').set('ElectronicCurrentType', 'AverageCurrentDensity');
model.physics('tcd3').feature('ec1').selection.set([10]);
model.physics('tcd3').feature('ec1').set('Ias', 'i_avg');
model.physics('tcd3').create('in1', 'Inflow', 1);
model.physics('tcd3').feature('in1').selection.set([8]);
model.physics('tcd3').feature('in1').setIndex('c0', 'cHSO4_0_pos', 1);
model.physics('tcd3').feature('in1').setIndex('c0', 'cH_0_pos', 2);
model.physics('tcd3').feature('in1').setIndex('c0', 'cV4_0', 3);
model.physics('tcd3').feature('in1').setIndex('c0', 'cV5_0', 4);
model.physics('tcd3').feature('in1').set('BoundaryConditionType', 'FluxDanckwerts');
model.physics('tcd3').create('out1', 'Outflow', 1);
model.physics('tcd3').feature('out1').selection.set([9]);
model.physics('tcd3').create('iemb1', 'IonExchangeMembraneBoundary', 1);
model.physics('tcd3').feature('iemb1').selection.set([7]);
model.physics('tcd3').feature('iemb1').set('phim_src', 'root.comp1.phil_mem');
model.physics('tcd3').feature('iemb1').set('IEMTransportModel', 'MultipleIons');
model.physics('tcd3').feature('iemb1').setIndex('cmem', 'cSO4_mem', 0);
model.physics('tcd3').feature('iemb1').setIndex('species', true, 1);
model.physics('tcd3').feature('iemb1').setIndex('cmem', 'cHSO4_mem', 1);
model.physics('tcd3').feature('iemb1').setIndex('species', true, 2);
model.physics('tcd3').feature('iemb1').setIndex('cmem', 'cH_mem', 2);
model.physics('tcd3').feature('iemb1').setIndex('species', true, 3);
model.physics('tcd3').feature('iemb1').setIndex('cmem', 'cV4_mem', 3);
model.physics('tcd3').feature('iemb1').setIndex('species', true, 4);
model.physics('tcd3').feature('iemb1').setIndex('cmem', 'cV5_mem', 4);
model.physics('tcd3').create('ecd1', 'ElectrodeNormalCurrentDensity', 1);
model.physics('tcd3').feature('ecd1').selection.set([7]);
model.physics('tcd3').feature('ecd1').set('nis', '-tcd2.itot');
model.physics('tcd3').feature('init1').setIndex('initc', 'cHSO4_0_pos', 1);
model.physics('tcd3').feature('init1').setIndex('initc', 'cH_0_pos', 2);
model.physics('tcd3').feature('init1').setIndex('initc', 'cV4_0', 3);
model.physics('tcd3').feature('init1').setIndex('initc', 'cV5_0', 4);

model.common('cminpt').set('modified', {'temperature' 'T'});

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([5 6]);
model.mesh('mesh1').feature('map1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis1').set('elemcount', 20);
model.mesh('mesh1').feature('map1').feature('dis1').set('elemratio', 2);
model.mesh('mesh1').feature('map1').feature('dis1').set('symmetric', true);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([2 3]);
model.mesh('mesh1').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis2').set('elemcount', 40);
model.mesh('mesh1').feature('map1').feature('dis2').set('elemratio', 20);
model.mesh('mesh1').feature('map1').feature.duplicate('dis3', 'dis2');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([8 9]);
model.mesh('mesh1').feature('map1').feature('dis3').set('reverse', true);
model.mesh('mesh1').feature('map1').create('dis4', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis4').selection.set([1 4 7 10]);
model.mesh('mesh1').feature('map1').feature('dis4').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis4').set('elemcount', 40);
model.mesh('mesh1').feature('map1').feature('dis4').set('elemratio', 20);
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([2 8]);
model.mesh('mesh1').run;

model.study('std1').setGenPlots(false);
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'H_cell', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'H_cell', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'c_fix', 0);
model.study('std1').feature('stat').setIndex('plistarr', '0 -cHm', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_phil_neg').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phil_pos').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phis_neg').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phil_mem').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_tcd3_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phis_pos').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phil_neg').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_phil_pos').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_phis_neg').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_phil_mem').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_tcd3_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_phis_pos').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (tcd) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (tcd)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (tcd2)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_phil_neg').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phil_pos').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phis_neg').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phil_mem').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_tcd3_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phis_pos').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phil_neg').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_phil_pos').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_phis_neg').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_phil_mem').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_tcd3_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_phis_pos').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-4);
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s2').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s2').set('control', 'stat');
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').label('Direct (tcd) (Merged)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('Algebraic Multigrid (tcd)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_tcd2_es1_er1_iloc_lm' 'comp1_tcd2_es1_er2_iloc_lm' 'comp1_tcd2_es2_er1_iloc_lm' 'comp1_tcd2_es2_er2_iloc_lm'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('va1', 'Vanka');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('va1').set('vankavars', {'comp1_tcd2_es1_er1_iloc_lm' 'comp1_tcd2_es1_er2_iloc_lm' 'comp1_tcd2_es2_er1_iloc_lm' 'comp1_tcd2_es2_er2_iloc_lm'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Geometric Multigrid (tcd2)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_tcd2_es1_er1_iloc_lm' 'comp1_tcd2_es1_er2_iloc_lm' 'comp1_tcd2_es2_er1_iloc_lm' 'comp1_tcd2_es2_er2_iloc_lm'});
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('va1', 'Vanka');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('va1').set('vankavars', {'comp1_tcd2_es1_er1_iloc_lm' 'comp1_tcd2_es1_er2_iloc_lm' 'comp1_tcd2_es2_er1_iloc_lm' 'comp1_tcd2_es2_er2_iloc_lm'});
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').run;
model.result('pg1').set('titletype', 'none');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', 'cV3');
model.result('pg1').feature.duplicate('surf2', 'surf1');
model.result('pg1').run;
model.result('pg1').feature('surf2').set('expr', 'cV4');
model.result('pg1').feature('surf2').set('inheritplot', 'surf1');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').label('V3/V4 Species Concentration');
model.result.duplicate('pg2', 'pg1');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('surf1').set('expr', 'cV2');
model.result('pg2').run;
model.result('pg2').feature('surf2').set('expr', 'cV5');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').label('V2/V5 Species Concentration');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').run;
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').label('Electrolyte potential 2D');
model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').setIndex('genpoints', 'H_cell/2', 0, 1);
model.result.dataset('cln1').setIndex('genpoints', 'L_e*2+L_m', 1, 0);
model.result.dataset('cln1').setIndex('genpoints', 'H_cell/2', 1, 1);
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').set('data', 'cln1');
model.result('pg4').setIndex('looplevelinput', 'last', 0);
model.result('pg4').set('titletype', 'none');
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg4').feature('lngr1').set('linewidth', 'preference');
model.result('pg4').feature('lngr1').set('expr', 'phil');
model.result('pg4').feature('lngr1').set('descr', 'Electrolyte potential (for postprocessing)');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').label('Electrolyte potential');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').set('titletype', 'none');
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg5').feature('lngr1').set('linewidth', 'preference');
model.result('pg5').feature('lngr1').set('data', 'cln1');
model.result('pg5').feature('lngr1').setIndex('looplevelinput', 'last', 0);
model.result('pg5').feature('lngr1').set('expr', 'tcd.ivtot');
model.result('pg5').feature('lngr1').set('descr', 'Electrode reaction source');
model.result('pg5').run;
model.result('pg5').feature.duplicate('lngr2', 'lngr1');
model.result('pg5').run;
model.result('pg5').feature('lngr2').set('expr', 'tcd3.ivtot');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').label('Electrode reaction current densities');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').run;
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'log(abs(rd))');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').label('Dissociation rate');
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').set('data', 'cln1');
model.result('pg7').setIndex('looplevelinput', 'last', 0);
model.result('pg7').set('titletype', 'none');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Species activity (-)');
model.result('pg7').set('legendpos', 'middleright');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr1').set('linewidth', 'preference');
model.result('pg7').feature('lngr1').set('expr', 'aH');
model.result('pg7').feature('lngr1').set('legend', true);
model.result('pg7').feature('lngr1').set('legendmethod', 'manual');
model.result('pg7').feature('lngr1').setIndex('legends', 'H', 0);
model.result('pg7').feature.duplicate('lngr2', 'lngr1');
model.result('pg7').run;
model.result('pg7').feature('lngr2').set('expr', 'aHSO4');
model.result('pg7').feature('lngr2').setIndex('legends', 'HSO4', 0);
model.result('pg7').feature.duplicate('lngr3', 'lngr2');
model.result('pg7').run;
model.result('pg7').feature('lngr3').set('expr', 'aSO4');
model.result('pg7').feature('lngr3').setIndex('legends', 'SO4', 0);
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').label('Sulfuric acid species');
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').set('data', 'cln1');
model.result('pg8').setIndex('looplevelinput', 'last', 0);
model.result('pg8').set('titletype', 'none');
model.result('pg8').set('ylabelactive', true);
model.result('pg8').set('ylabel', 'Species activity (-)');
model.result('pg8').set('legendpos', 'middleright');
model.result('pg8').create('lngr1', 'LineGraph');
model.result('pg8').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg8').feature('lngr1').set('linewidth', 'preference');
model.result('pg8').feature('lngr1').set('expr', 'aV2');
model.result('pg8').feature('lngr1').set('legend', true);
model.result('pg8').feature('lngr1').set('legendmethod', 'manual');
model.result('pg8').feature('lngr1').setIndex('legends', 'V2', 0);
model.result('pg8').feature.duplicate('lngr2', 'lngr1');
model.result('pg8').run;
model.result('pg8').feature('lngr2').set('expr', 'aV3');
model.result('pg8').feature('lngr2').setIndex('legends', 'V3', 0);
model.result('pg8').feature.duplicate('lngr3', 'lngr2');
model.result('pg8').run;
model.result('pg8').feature('lngr3').set('expr', 'aV4');
model.result('pg8').feature('lngr3').setIndex('legends', 'V4', 0);
model.result('pg8').feature.duplicate('lngr4', 'lngr3');
model.result('pg8').run;
model.result('pg8').feature('lngr4').set('expr', 'aV5');
model.result('pg8').feature('lngr4').setIndex('legends', 'V5', 0);
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').label('V2/V3/V4/V5');
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').set('data', 'cln1');
model.result('pg9').setIndex('looplevelinput', 'last', 0);
model.result('pg9').set('titletype', 'none');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Flux (A/m<sup>2</sup>)');
model.result('pg9').create('lngr1', 'LineGraph');
model.result('pg9').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg9').feature('lngr1').set('linewidth', 'preference');
model.result('pg9').feature('lngr1').set('expr', 'Hx*F_const');
model.result('pg9').feature('lngr1').set('legend', true);
model.result('pg9').feature('lngr1').set('legendmethod', 'manual');
model.result('pg9').feature('lngr1').setIndex('legends', 'H', 0);
model.result('pg9').feature.duplicate('lngr2', 'lngr1');
model.result('pg9').run;
model.result('pg9').feature('lngr2').set('expr', '-HSO4x*F_const');
model.result('pg9').feature('lngr2').setIndex('legends', 'HSO4', 0);
model.result('pg9').feature.duplicate('lngr3', 'lngr2');
model.result('pg9').run;
model.result('pg9').feature('lngr3').set('expr', '-2*F_const*SO4x');
model.result('pg9').feature('lngr3').setIndex('legends', 'SO4', 0);
model.result('pg9').run;
model.result('pg9').run;
model.result('pg9').label('Fluxes');

model.title('Vanadium Redox Flow Battery');

model.description(['This 2D example of a vanadium flow battery demonstrates how to couple a tertiary current distribution model for an ion-exchange membrane to tertiary current distribution models for two different free electrolyte compartments of a flow battery.' newline  newline 'The Ion-Exchange Membrane boundary node specifies a boundary condition where the flux of ions is continuous, but where the electrolyte potential is discontinuous and is described by a Donnan equilibrium.' newline  newline 'This condition is typically used in electrochemical cells containing both free electrolytes and ion-exchange membranes, for instance, in dialysis problems.']);

model.label('v_flow_battery.mph');

model.modelNode.label('Components');

out = model;
