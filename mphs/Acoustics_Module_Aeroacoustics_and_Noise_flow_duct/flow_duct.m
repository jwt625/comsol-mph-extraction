function out = model
%
% flow_duct.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Aeroacoustics_and_Noise');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('cpf', 'CompressiblePotentialFlow', 'geom1');
model.physics('cpf').model('comp1');
model.physics.create('lpfbm', 'LinearizedPotentialFlowBoundaryMode', 'geom1');
model.physics('lpfbm').model('comp1');
model.physics('lpfbm').field('velocitypotential').field('phi_sp');
model.physics.create('lpfbm2', 'LinearizedPotentialFlowBoundaryMode', 'geom1');
model.physics('lpfbm2').model('comp1');
model.physics('lpfbm2').field('velocitypotential').field('phi_tp');
model.physics.create('lpff', 'LinearizedPotentialFlowFrequency', 'geom1');
model.physics('lpff').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/cpf', true);
model.study('std1').feature('stat').setSolveFor('/physics/lpfbm', true);
model.study('std1').feature('stat').setSolveFor('/physics/lpfbm2', true);
model.study('std1').feature('stat').setSolveFor('/physics/lpff', true);

model.baseSystem('none');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('gamma', '1.4', 'Ratio of specific heats');
model.param.set('M', '-0.5', 'Mean flow Mach number');
model.param.set('m', '10', 'Azimuthal mode number');
model.param.set('omega', '16', 'Angular frequency');
model.param.set('f', 'omega/(2*pi)', 'Frequency');
model.param.set('rho0', '1', 'Reference density');
model.param.set('C0', '1', 'Reference mean speed of sound');
model.param.set('A', '0.01', 'Acoustic source strength');
model.param.set('Zw', '2-i', 'Duct wall impedance');
model.param.set('zi', '1.86393', 'Axial coordinate, inlet plane');
model.param.set('ri', '0.91705', 'Radial coordinate, inlet plane');

model.geom('geom1').create('pc1', 'ParametricCurve');
model.geom('geom1').feature('pc1').set('coord', {'1-0.18453*s^2+0.10158*(exp(-11*(1-s))-exp(-11))/(1-exp(-11))' ''});
model.geom('geom1').feature('pc1').setIndex('coord', 's*zi', 1);
model.geom('geom1').run('pc1');
model.geom('geom1').create('pc2', 'ParametricCurve');
model.geom('geom1').feature('pc2').set('parmax', 0.7);
model.geom('geom1').feature('pc2').set('coord', {'0.64212-sqrt(0.04777+0.98234*s^2)' ''});
model.geom('geom1').feature('pc2').setIndex('coord', 's*zi', 1);
model.geom('geom1').run('pc2');
model.geom('geom1').create('ls1', 'LineSegment');
model.geom('geom1').feature('ls1').set('specify1', 'coord');
model.geom('geom1').feature('ls1').set('specify2', 'coord');
model.geom('geom1').feature('ls1').set('coord2', {'0' 'zi'});
model.geom('geom1').run('ls1');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'ls1' 'pc2'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('ls2', 'LineSegment');
model.geom('geom1').feature('ls2').selection('vertex1').set('uni1', 5);
model.geom('geom1').feature('ls2').selection('vertex2').set('pc1', 1);
model.geom('geom1').run('ls2');
model.geom('geom1').create('ls3', 'LineSegment');
model.geom('geom1').feature('ls3').selection('vertex1').set('uni1', 4);
model.geom('geom1').feature('ls3').selection('vertex2').set('pc1', 2);
model.geom('geom1').run('fin');
model.geom('geom1').run('ls3');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').set('uni1', [1 3]);
model.geom('geom1').run('del1');
model.geom('geom1').create('csol1', 'ConvertToSolid');
model.geom('geom1').feature('csol1').selection('input').set({'del1' 'ls2' 'ls3' 'pc1'});
model.geom('geom1').run('csol1');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'ri' '1'});
model.geom('geom1').feature('r1').set('pos', {'0' 'zi'});
model.geom('geom1').run('fin');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').selection.geom('geom1', 2);
model.variable('var1').selection.set([1]);
model.variable('var1').set('Mz', '-cpf.Vz');
model.variable('var1').descr('Mz', 'Axial Mach number');
model.variable('var1').set('pabsn', 'abs(lpff.p)/comp1.maxop1(lpff.p)');
model.variable('var1').descr('pabsn', 'Normalized pressure');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Source Plane');
model.selection('sel1').geom(1);
model.selection('sel1').set([5]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Inlet Plane');
model.selection('sel2').geom(1);
model.selection('sel2').set([3]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Terminal Plane');
model.selection('sel3').geom(1);
model.selection('sel3').set([4]);

model.cpl.create('maxop1', 'Maximum', 'geom1');
model.cpl('maxop1').selection.set([1]);
model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'intop_ip');
model.cpl('intop1').selection.geom('geom1', 1);
model.cpl('intop1').selection.named('sel2');

model.physics('cpf').prop('ReferenceValues').set('pref', 'cpf.rhoref^gamma/gamma');
model.physics('cpf').prop('ReferenceValues').set('rhoref', 'rho0');
model.physics('cpf').prop('ReferenceValues').set('vref', 'M');
model.physics('cpf').feature('cpf1').set('gamma_mat', 'userdef');
model.physics('cpf').feature('cpf1').set('gamma', 'gamma');
model.physics('cpf').create('nf1', 'NormalFlow', 1);
model.physics('cpf').feature('nf1').selection.named('sel3');
model.physics('cpf').create('mf1', 'MassFlow', 1);
model.physics('cpf').feature('mf1').selection.named('sel1');
model.physics('lpfbm').selection.named('sel1');
model.physics('lpfbm').prop('EquationSettings').set('m', 'm');
model.physics('lpfbm').feature('lpfm1').set('minput_velocity_src', 'root.comp1.cpf.Vr');
model.physics('lpfbm').feature('lpfm1').set('rho0_mat', 'root.comp1.rho');
model.physics('lpfbm').feature('lpfm1').set('c0_mat', 'root.comp1.cpf.c');
model.physics('lpfbm2').selection.named('sel3');
model.physics('lpfbm2').prop('EquationSettings').set('m', 'm');
model.physics('lpfbm2').feature('lpfm1').set('minput_velocity_src', 'root.comp1.cpf.Vr');
model.physics('lpfbm2').feature('lpfm1').set('rho0_mat', 'root.comp1.rho');
model.physics('lpfbm2').feature('lpfm1').set('c0_mat', 'root.comp1.cpf.c');

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').selection.set([1]);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').selection.geom('geom1', 0);
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([4 7]);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 0.005);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 0.015);
model.mesh('mesh1').feature('size').set('hmin', 0.001);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Background Flow');
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'gamma', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'gamma', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'M', 0);
model.study('std1').feature('param').setIndex('plistarr', '0 -0.5', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'M'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'0 -0.5'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {''});
model.sol('sol1').feature('s1').feature('p1').set('sweeptype', 'sparse');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'param');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (cpf)');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Mean Flow Velocity (cpf)');
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 2, 0);
model.result('pg1').set('defaultPlotID', 'CompressiblePotentialFlow/phys1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('expr', 'cpf.normV');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').label('Revolution 2D');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset1');
model.result.dataset('rev1').selection.geom('geom1', 2);
model.result.dataset('rev1').selection.set([1 2]);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Mean Flow Velocity, 3D (cpf)');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').set('data', 'rev1');
model.result('pg2').setIndex('looplevel', 2, 0);
model.result('pg2').set('defaultPlotID', 'CompressiblePotentialFlow/phys1/pdef1/pcond2/pcond1/pg1');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('expr', 'cpf.normV');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').create('arws1', 'ArrowSurface');
model.result('pg1').feature('arws1').set('color', 'black');
model.result('pg1').run;
model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').setIndex('genpoints', 0.8, 0, 0);
model.result.dataset('cln1').setIndex('genpoints', 0.8, 1, 0);
model.result.dataset('cln1').setIndex('genpoints', 'zi', 1, 1);
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Mean Flow: rho and Mz');
model.result('pg3').set('data', 'cln1');
model.result('pg3').setIndex('looplevelinput', 'last', 0);
model.result('pg3').set('titletype', 'label');
model.result('pg3').set('legendpos', 'middleleft');
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg3').feature('lngr1').set('linewidth', 'preference');
model.result('pg3').feature('lngr1').set('expr', 'rho');
model.result('pg3').feature('lngr1').set('xdata', 'expr');
model.result('pg3').feature('lngr1').set('xdataexpr', 'z');
model.result('pg3').feature('lngr1').set('legend', true);
model.result('pg3').feature('lngr1').set('autodescr', true);
model.result('pg3').feature('lngr1').set('legendprefix', 'Ma = ');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').create('lngr2', 'LineGraph');
model.result('pg3').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg3').feature('lngr2').set('linewidth', 'preference');
model.result('pg3').feature('lngr2').set('expr', 'Mz');
model.result('pg3').feature('lngr2').set('xdata', 'expr');
model.result('pg3').feature('lngr2').set('xdataexpr', 'z');
model.result('pg3').feature('lngr2').set('legend', true);
model.result('pg3').feature('lngr2').set('autodescr', true);
model.result('pg3').feature('lngr2').set('legendprefix', 'Ma = ');
model.result('pg3').run;

model.study.create('std2');
model.study('std2').create('mode', 'ModeAnalysis');
model.study('std2').feature('mode').set('plotgroup', 'Default');
model.study('std2').feature('mode').set('modeFreq', '100[Hz]');
model.study('std2').feature('mode').set('eigunit', '');
model.study('std2').feature('mode').set('shiftactive', false);
model.study('std2').feature('mode').set('chkeigregion', true);
model.study('std2').feature('mode').set('conrad', '1');
model.study('std2').feature('mode').set('conradynhm', '1');
model.study('std2').feature('mode').set('storefact', false);
model.study('std2').feature('mode').set('linpsolnum', 'auto');
model.study('std2').feature('mode').set('outputmap', {});
model.study('std2').feature('mode').set('ngenAUX', '1');
model.study('std2').feature('mode').set('goalngenAUX', '1');
model.study('std2').feature('mode').set('ngenAUX', '1');
model.study('std2').feature('mode').set('goalngenAUX', '1');
model.study('std2').feature('mode').setSolveFor('/physics/cpf', false);
model.study('std2').feature('mode').setSolveFor('/physics/lpfbm', true);
model.study('std2').feature('mode').setSolveFor('/physics/lpfbm2', false);
model.study('std2').feature('mode').setSolveFor('/physics/lpff', false);
model.study('std2').label('Study 2 - Source Plane Modes');
model.study('std2').create('param', 'Parametric');
model.study('std2').feature('param').setIndex('pname', 'gamma', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', '', 0);
model.study('std2').feature('param').setIndex('pname', 'gamma', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', '', 0);
model.study('std2').feature('param').setIndex('pname', 'M', 0);
model.study('std2').feature('param').setIndex('plistarr', '0 -0.5', 0);
model.study('std2').feature('mode').set('modeFreq', 'f');
model.study('std2').feature('mode').set('eigmethod', 'region');
model.study('std2').feature('mode').set('appnreigs', 5);
model.study('std2').feature('mode').set('maxnreigs', 10);
model.study('std2').feature('mode').set('eigsr', -40);
model.study('std2').feature('mode').set('eiglr', 40);
model.study('std2').feature('mode').set('eigsi', -0.1);
model.study('std2').feature('mode').set('eigli', 0.1);
model.study('std2').feature('mode').set('usesol', true);
model.study('std2').feature('mode').set('notsolmethod', 'sol');
model.study('std2').feature('mode').set('notstudy', 'std1');
model.study('std2').feature('mode').set('notsol', 'sol1');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'mode');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'mode');
model.sol('sol2').create('e1', 'Eigenvalue');
model.sol('sol2').feature('e1').set('neigs', 6);
model.sol('sol2').feature('e1').set('shift', '1');
model.sol('sol2').feature('e1').set('rtol', 1.0E-6);
model.sol('sol2').feature('e1').set('transform', 'none');
model.sol('sol2').feature('e1').set('eigref', '1');
model.sol('sol2').feature('e1').set('eigvfunscale', 'average');
model.sol('sol2').feature('e1').set('control', 'mode');
model.sol('sol2').attach('std2');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std2');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol2');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'M'});
model.batch('p1').set('plistarr', {'0 -0.5'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std2');
model.batch('p1').set('control', 'param');

model.sol.create('sol3');
model.sol('sol3').study('std2');
model.sol('sol3').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol3');
model.batch('p1').run('compute');

model.result.dataset.create('rev2', 'Revolve2D');
model.result.dataset('rev2').label('Revolution 2D 1');
model.result.dataset('rev2').set('data', 'dset3');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Acoustic Pressure (lpfbm)');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').setIndex('looplevel', 2, 1);
model.result('pg4').set('dataisaxisym', 'off');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').setIndex('looplevel', 2, 1);
model.result('pg4').set('defaultPlotID', 'linearizedpotentialflow/BoundaryModeLinearizedPotentialFlow/phys1/pdef1/pcond2/pg1');
model.result('pg4').feature.create('line1', 'Line');
model.result('pg4').feature('line1').label('Line');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('expr', 'lpfbm.p');
model.result('pg4').feature('line1').set('colortable', 'Wave');
model.result('pg4').feature('line1').set('colorscalemode', 'linearsymmetric');
model.result('pg4').feature('line1').set('smooth', 'internal');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Acoustic Pressure, 3D (lpfbm)');
model.result('pg5').set('data', 'rev2');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').setIndex('looplevel', 2, 1);
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').set('data', 'rev2');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').setIndex('looplevel', 2, 1);
model.result('pg5').set('defaultPlotID', 'linearizedpotentialflow/BoundaryModeLinearizedPotentialFlow/phys1/pdef1/pcond2/pg2');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').label('Surface');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('expr', 'lpfbm.p');
model.result('pg5').feature('surf1').set('colortable', 'Wave');
model.result('pg5').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg4').run;
model.result('pg4').label('Source Plane: Acoustic Pressure and Axial Intensity');
model.result('pg4').selection.geom('geom1', 1);
model.result('pg4').selection.named('sel1');
model.result('pg4').set('applyselectiontodatasetedges', true);
model.result('pg4').set('titletype', 'label');
model.result('pg4').create('arwl1', 'ArrowLine');
model.result('pg4').feature('arwl1').set('expr', {'lpfbm.Ir' 'lpfbm.Iz'});
model.result('pg4').feature('arwl1').set('descr', 'Intensity');
model.result('pg4').feature('arwl1').set('expr', {'0' 'lpfbm.Iz'});
model.result('pg4').feature('arwl1').set('arrowcount', 30);
model.result('pg4').feature('arwl1').set('arrowlength', 'logarithmic');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').set('looplevel', [2 2]);
model.result('pg4').run;
model.result('pg4').set('looplevel', [3 2]);
model.result('pg4').run;
model.result('pg4').set('looplevel', [4 2]);
model.result('pg4').run;
model.result.dataset('rev2').set('modenumber', 'm');
model.result.dataset('rev2').set('layermethod', 'fine');
model.result('pg5').run;
model.result('pg5').label('Source Plane: Acoustic Pressure, 3D (lpfbm)');
model.result('pg5').set('titletype', 'label');
model.result('pg5').create('surf2', 'Surface');
model.result('pg5').feature('surf2').set('data', 'rev1');
model.result('pg5').feature('surf2').set('expr', '1');
model.result('pg5').feature('surf2').set('coloring', 'uniform');
model.result('pg5').feature('surf2').set('color', 'gray');
model.result('pg5').feature('surf2').create('sel1', 'Selection');
model.result('pg5').feature('surf2').feature('sel1').selection.set([1 2]);
model.result('pg5').feature('surf2').feature('sel1').set('evalstartcap', false);
model.result('pg5').feature('surf2').feature('sel1').set('evalendcap', false);
model.result('pg5').run;
model.result('pg5').feature('surf2').create('tran1', 'Transparency');
model.result('pg5').run;
model.result('pg5').feature('surf2').feature('tran1').set('transparency', 0.2);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Source Plane: Mode Shapes, M = 0');
model.result('pg6').set('data', 'dset3');
model.result('pg6').setIndex('looplevelinput', 'first', 1);
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('legendpos', 'upperleft');
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg6').feature('lngr1').set('linewidth', 'preference');
model.result('pg6').feature('lngr1').selection.named('sel1');
model.result('pg6').feature('lngr1').set('expr', 'phi_sp');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', 'r');
model.result('pg6').feature('lngr1').set('legend', true);
model.result('pg6').run;
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Source Plane: Mode Shapes, M = -0.5');
model.result('pg7').setIndex('looplevelinput', 'last', 1);
model.result('pg7').run;

model.study.create('std3');
model.study('std3').create('mode', 'ModeAnalysis');
model.study('std3').feature('mode').set('plotgroup', 'Default');
model.study('std3').feature('mode').set('modeFreq', '100[Hz]');
model.study('std3').feature('mode').set('eigunit', '');
model.study('std3').feature('mode').set('shiftactive', false);
model.study('std3').feature('mode').set('chkeigregion', true);
model.study('std3').feature('mode').set('conrad', '1');
model.study('std3').feature('mode').set('conradynhm', '1');
model.study('std3').feature('mode').set('storefact', false);
model.study('std3').feature('mode').set('linpsolnum', 'auto');
model.study('std3').feature('mode').set('outputmap', {});
model.study('std3').feature('mode').set('ngenAUX', '1');
model.study('std3').feature('mode').set('goalngenAUX', '1');
model.study('std3').feature('mode').set('ngenAUX', '1');
model.study('std3').feature('mode').set('goalngenAUX', '1');
model.study('std3').feature('mode').setSolveFor('/physics/cpf', false);
model.study('std3').feature('mode').setSolveFor('/physics/lpfbm', false);
model.study('std3').feature('mode').setSolveFor('/physics/lpfbm2', true);
model.study('std3').feature('mode').setSolveFor('/physics/lpff', false);
model.study('std3').label('Study 3 - Terminal Plane Modes');
model.study('std3').create('param', 'Parametric');
model.study('std3').feature('param').setIndex('pname', 'gamma', 0);
model.study('std3').feature('param').setIndex('plistarr', '', 0);
model.study('std3').feature('param').setIndex('punit', '', 0);
model.study('std3').feature('param').setIndex('pname', 'gamma', 0);
model.study('std3').feature('param').setIndex('plistarr', '', 0);
model.study('std3').feature('param').setIndex('punit', '', 0);
model.study('std3').feature('param').setIndex('pname', 'M', 0);
model.study('std3').feature('param').setIndex('plistarr', '0 -0.5', 0);
model.study('std3').feature('mode').set('modeFreq', 'f');
model.study('std3').feature('mode').set('eigmethod', 'region');
model.study('std3').feature('mode').set('appnreigs', 5);
model.study('std3').feature('mode').set('maxnreigs', 10);
model.study('std3').feature('mode').set('eigsr', -40);
model.study('std3').feature('mode').set('eiglr', 40);
model.study('std3').feature('mode').set('eigsi', -0.1);
model.study('std3').feature('mode').set('eigli', 0.1);
model.study('std3').feature('mode').set('usesol', true);
model.study('std3').feature('mode').set('notsolmethod', 'sol');
model.study('std3').feature('mode').set('notstudy', 'std1');
model.study('std3').feature('mode').set('notsol', 'sol1');

model.sol.create('sol6');
model.sol('sol6').study('std3');
model.sol('sol6').create('st1', 'StudyStep');
model.sol('sol6').feature('st1').set('study', 'std3');
model.sol('sol6').feature('st1').set('studystep', 'mode');
model.sol('sol6').create('v1', 'Variables');
model.sol('sol6').feature('v1').set('control', 'mode');
model.sol('sol6').create('e1', 'Eigenvalue');
model.sol('sol6').feature('e1').set('neigs', 6);
model.sol('sol6').feature('e1').set('shift', '1');
model.sol('sol6').feature('e1').set('rtol', 1.0E-6);
model.sol('sol6').feature('e1').set('transform', 'none');
model.sol('sol6').feature('e1').set('eigref', '1');
model.sol('sol6').feature('e1').set('eigvfunscale', 'average');
model.sol('sol6').feature('e1').set('control', 'mode');
model.sol('sol6').attach('std3');

model.batch.create('p2', 'Parametric');
model.batch('p2').study('std3');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol6');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').set('pname', {'M'});
model.batch('p2').set('plistarr', {'0 -0.5'});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std3');
model.batch('p2').set('control', 'param');

model.sol.create('sol7');
model.sol('sol7').study('std3');
model.sol('sol7').label('Parametric Solutions 2');

model.batch('p2').feature('so1').set('psol', 'sol7');
model.batch('p2').run('compute');

model.result.dataset.create('rev3', 'Revolve2D');
model.result.dataset('rev3').label('Revolution 2D 2');
model.result.dataset('rev3').set('data', 'dset5');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').label('Acoustic Pressure (lpfbm2)');
model.result('pg8').set('data', 'dset5');
model.result('pg8').setIndex('looplevel', 1, 0);
model.result('pg8').setIndex('looplevel', 2, 1);
model.result('pg8').set('dataisaxisym', 'off');
model.result('pg8').set('showlegendsunit', true);
model.result('pg8').set('data', 'dset5');
model.result('pg8').setIndex('looplevel', 1, 0);
model.result('pg8').setIndex('looplevel', 2, 1);
model.result('pg8').set('defaultPlotID', 'linearizedpotentialflow/BoundaryModeLinearizedPotentialFlow/phys1/pdef1/pcond2/pg1');
model.result('pg8').feature.create('line1', 'Line');
model.result('pg8').feature('line1').label('Line');
model.result('pg8').feature('line1').set('showsolutionparams', 'on');
model.result('pg8').feature('line1').set('expr', 'lpfbm2.p');
model.result('pg8').feature('line1').set('colortable', 'Wave');
model.result('pg8').feature('line1').set('colorscalemode', 'linearsymmetric');
model.result('pg8').feature('line1').set('smooth', 'internal');
model.result('pg8').feature('line1').set('showsolutionparams', 'on');
model.result('pg8').feature('line1').set('data', 'parent');
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').label('Acoustic Pressure, 3D (lpfbm2)');
model.result('pg9').set('data', 'rev3');
model.result('pg9').setIndex('looplevel', 1, 0);
model.result('pg9').setIndex('looplevel', 2, 1);
model.result('pg9').set('showlegendsunit', true);
model.result('pg9').set('data', 'rev3');
model.result('pg9').setIndex('looplevel', 1, 0);
model.result('pg9').setIndex('looplevel', 2, 1);
model.result('pg9').set('defaultPlotID', 'linearizedpotentialflow/BoundaryModeLinearizedPotentialFlow/phys1/pdef1/pcond2/pg2');
model.result('pg9').feature.create('surf1', 'Surface');
model.result('pg9').feature('surf1').label('Surface');
model.result('pg9').feature('surf1').set('showsolutionparams', 'on');
model.result('pg9').feature('surf1').set('expr', 'lpfbm2.p');
model.result('pg9').feature('surf1').set('colortable', 'Wave');
model.result('pg9').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg9').feature('surf1').set('smooth', 'internal');
model.result('pg9').feature('surf1').set('showsolutionparams', 'on');
model.result('pg9').feature('surf1').set('data', 'parent');
model.result('pg8').set('applyselectiontodatasetedges', false);
model.result('pg8').run;
model.result('pg8').label('Terminal Plane: Acoustic Pressure and Axial Intensity');
model.result('pg8').selection.geom('geom1', 1);
model.result('pg8').selection.named('sel3');
model.result('pg8').set('applyselectiontodatasetedges', true);
model.result('pg8').set('titletype', 'label');
model.result('pg8').create('arwl1', 'ArrowLine');
model.result('pg8').feature('arwl1').set('expr', {'lpfbm2.Ir' 'lpfbm2.Iz'});
model.result('pg8').feature('arwl1').set('descr', 'Intensity');
model.result('pg8').feature('arwl1').set('expr', {'0' 'lpfbm2.Iz'});
model.result('pg8').feature('arwl1').set('arrowcount', 30);
model.result('pg8').feature('arwl1').set('arrowlength', 'logarithmic');
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').set('looplevel', [2 2]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [3 2]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [4 2]);
model.result('pg8').run;
model.result.dataset('rev3').set('modenumber', 'm');
model.result.dataset('rev3').set('layermethod', 'fine');
model.result('pg9').run;
model.result('pg9').label('Terminal Plane: Acoustic Pressure, 3D (lpfbm2)');
model.result('pg9').set('titletype', 'label');
model.result('pg9').create('surf2', 'Surface');
model.result('pg9').feature('surf2').set('data', 'rev1');
model.result('pg9').feature('surf2').set('expr', '1');
model.result('pg9').feature('surf2').set('coloring', 'uniform');
model.result('pg9').feature('surf2').set('color', 'gray');
model.result('pg9').feature('surf2').create('sel1', 'Selection');
model.result('pg9').feature('surf2').feature('sel1').selection.set([1 2]);
model.result('pg9').feature('surf2').feature('sel1').set('evalstartcap', false);
model.result('pg9').feature('surf2').feature('sel1').set('evalendcap', false);
model.result('pg9').run;
model.result('pg9').feature('surf2').create('tran1', 'Transparency');
model.result('pg9').run;
model.result('pg9').feature('surf2').feature('tran1').set('transparency', 0.2);
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('Terminal Plane: Mode Shapes, M = 0');
model.result('pg10').set('data', 'dset5');
model.result('pg10').setIndex('looplevelinput', 'first', 1);
model.result('pg10').set('titletype', 'label');
model.result('pg10').set('legendpos', 'upperleft');
model.result('pg10').create('lngr1', 'LineGraph');
model.result('pg10').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg10').feature('lngr1').set('linewidth', 'preference');
model.result('pg10').feature('lngr1').selection.named('sel3');
model.result('pg10').feature('lngr1').set('expr', 'phi_tp');
model.result('pg10').feature('lngr1').set('xdata', 'expr');
model.result('pg10').feature('lngr1').set('xdataexpr', 'r');
model.result('pg10').feature('lngr1').set('legend', true);
model.result('pg10').run;
model.result('pg10').run;
model.result.duplicate('pg11', 'pg10');
model.result('pg11').run;
model.result('pg11').label('Terminal Plane: Mode Shapes, M = -0.5');
model.result('pg11').setIndex('looplevelinput', 'last', 1);
model.result('pg11').run;

model.physics('lpff').prop('EquationSettings').set('m', 'm');
model.physics('lpff').prop('PortSweepSettings').set('ModeShapeNormalization', 'Power');

model.multiphysics.create('pfc1', 'BackgroundPotentialFlowCoupling', 'geom1', -1);

model.physics('lpff').create('imp1', 'Impedance', 1);
model.physics('lpff').feature('imp1').selection.set([6 8]);
model.physics('lpff').feature('imp1').set('Zn', 'Zw');

model.nodeGroup.create('grp1', 'Physics', 'lpff');
model.nodeGroup('grp1').label('Source Plane');

model.physics('lpff').create('port1', 'Port', 1);

model.nodeGroup('grp1').add('port1');

model.physics('lpff').feature('port1').selection.named('sel1');
model.physics('lpff').feature('port1').label('Port 1 (for M = 0)');
model.physics('lpff').feature('port1').set('phi_o', 'withsol(''sol3'',phi_sp,setval(M,0),setind(lambda,1))');
model.physics('lpff').feature('port1').set('kn_o', 'withsol(''sol3'',lpfbm.kn,setval(M,0),setind(lambda,1))');
model.physics('lpff').feature('port1').set('PortExcitation', 'on');
model.physics('lpff').feature('port1').set('phi_i', 'withsol(''sol3'',phi_sp,setval(M,0),setind(lambda,2))');
model.physics('lpff').feature('port1').set('kn_i', 'withsol(''sol3'',lpfbm.kn,setval(M,0),setind(lambda,2))');
model.physics('lpff').feature('port1').set('IncidentWave', 'ModeScale');
model.physics('lpff').feature('port1').set('Sin', 1);
model.physics('lpff').create('port2', 'Port', 1);

model.nodeGroup('grp1').add('port2');

model.physics('lpff').feature('port2').selection.named('sel1');
model.physics('lpff').feature('port2').label('Port 2 (for M = -0.5)');
model.physics('lpff').feature('port2').set('phi_o', 'withsol(''sol3'',phi_sp,setval(M,-0.5),setind(lambda,2))');
model.physics('lpff').feature('port2').set('kn_o', 'withsol(''sol3'',lpfbm.kn,setval(M,-0.5),setind(lambda,2))');
model.physics('lpff').feature('port2').set('PortExcitation', 'on');
model.physics('lpff').feature('port2').set('phi_i', 'withsol(''sol3'',phi_sp,setval(M,-0.5),setind(lambda,4))');
model.physics('lpff').feature('port2').set('kn_i', 'withsol(''sol3'',lpfbm.kn,setval(M,-0.5),setind(lambda,4))');
model.physics('lpff').feature('port2').set('IncidentWave', 'ModeScale');
model.physics('lpff').feature('port2').set('Sin', 1);
model.physics('lpff').create('port3', 'Port', 1);

model.nodeGroup('grp1').add('port3');

model.physics('lpff').feature('port3').selection.named('sel1');
model.physics('lpff').feature('port3').label('Port 3 (for M = -0.5)');
model.physics('lpff').feature('port3').set('phi_o', 'withsol(''sol3'',phi_sp,setval(M,-0.5),setind(lambda,1))');
model.physics('lpff').feature('port3').set('kn_o', 'withsol(''sol3'',lpfbm.kn,setval(M,-0.5),setind(lambda,1))');

model.nodeGroup.create('grp2', 'Physics', 'lpff');
model.nodeGroup('grp2').label('Terminal Plane');

model.physics('lpff').create('port4', 'Port', 1);

model.nodeGroup('grp2').add('port4');

model.physics('lpff').feature('port4').label('Port 4 (for M = 0)');
model.physics('lpff').feature('port4').selection.named('sel3');
model.physics('lpff').feature('port4').set('phi_o', 'withsol(''sol7'',phi_tp,setval(M,0),setind(lambda,2))');
model.physics('lpff').feature('port4').set('kn_o', 'withsol(''sol7'',lpfbm2.kn,setval(M,0),setind(lambda,2))');
model.physics('lpff').create('port5', 'Port', 1);

model.nodeGroup('grp2').add('port5');

model.physics('lpff').feature('port5').selection.named('sel3');
model.physics('lpff').feature('port5').label('Port 5 (for M = -0.5)');
model.physics('lpff').feature('port5').set('phi_o', 'withsol(''sol7'',phi_tp,setval(M,-0.5),setind(lambda,3))');
model.physics('lpff').feature('port5').set('kn_o', 'withsol(''sol7'',lpfbm2.kn,setval(M,-0.5),setind(lambda,3))');
model.physics('lpff').create('port6', 'Port', 1);

model.nodeGroup('grp2').add('port6');

model.physics('lpff').feature('port6').selection.named('sel3');
model.physics('lpff').feature('port6').label('Port 6 (for M = -0.5)');
model.physics('lpff').feature('port6').set('phi_o', 'withsol(''sol7'',phi_tp,setval(M,-0.5),setind(lambda,4))');
model.physics('lpff').feature('port6').set('kn_o', 'withsol(''sol7'',lpfbm2.kn,setval(M,-0.5),setind(lambda,4))');

model.study.create('std4');
model.study('std4').create('freq', 'Frequency');
model.study('std4').feature('freq').setSolveFor('/physics/cpf', false);
model.study('std4').feature('freq').setSolveFor('/physics/lpfbm', false);
model.study('std4').feature('freq').setSolveFor('/physics/lpfbm2', false);
model.study('std4').feature('freq').setSolveFor('/physics/lpff', true);
model.study('std4').feature('freq').setSolveFor('/multiphysics/pfc1', true);
model.study('std4').label('Study 4 - Frequency Domain (M = 0, lined)');
model.study('std4').feature('freq').set('plist', 'f');
model.study('std4').feature('freq').set('useadvanceddisable', true);
model.study('std4').feature('freq').set('disabledphysics', {'lpff/port2' 'lpff/port3' 'lpff/port5' 'lpff/port6'});
model.study('std4').feature('freq').set('usesol', true);
model.study('std4').feature('freq').set('notsolmethod', 'sol');
model.study('std4').feature('freq').set('notstudy', 'std1');
model.study('std4').feature('freq').set('notsolnum', 1);
model.study('std4').setGenPlots(false);

model.sol.create('sol10');
model.sol('sol10').study('std4');
model.sol('sol10').create('st1', 'StudyStep');
model.sol('sol10').feature('st1').set('study', 'std4');
model.sol('sol10').feature('st1').set('studystep', 'freq');
model.sol('sol10').create('v1', 'Variables');
model.sol('sol10').feature('v1').set('control', 'freq');
model.sol('sol10').create('s1', 'Stationary');
model.sol('sol10').feature('s1').create('p1', 'Parametric');
model.sol('sol10').feature('s1').feature.remove('pDef');
model.sol('sol10').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol10').feature('s1').feature('p1').set('plistarr', {'f'});
model.sol('sol10').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol10').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol10').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol10').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol10').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol10').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol10').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol10').feature('s1').feature('p1').set('probes', {});
model.sol('sol10').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol10').feature('s1').set('linpmethod', 'sol');
model.sol('sol10').feature('s1').set('linpsol', 'zero');
model.sol('sol10').feature('s1').set('control', 'freq');
model.sol('sol10').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol10').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol10').feature('s1').feature.remove('fcDef');
model.sol('sol10').attach('std4');
model.sol('sol10').runAll;

model.study.create('std5');
model.study('std5').create('freq', 'Frequency');
model.study('std5').feature('freq').setSolveFor('/physics/cpf', false);
model.study('std5').feature('freq').setSolveFor('/physics/lpfbm', false);
model.study('std5').feature('freq').setSolveFor('/physics/lpfbm2', false);
model.study('std5').feature('freq').setSolveFor('/physics/lpff', true);
model.study('std5').feature('freq').setSolveFor('/multiphysics/pfc1', true);
model.study('std5').label('Study 5 - Frequency Domain (M = 0, hard)');
model.study('std5').feature('freq').set('plist', 'f');
model.study('std5').feature('freq').set('useadvanceddisable', true);
model.study('std5').feature('freq').set('disabledphysics', {'lpff/imp1' 'lpff/port2' 'lpff/port3' 'lpff/port5' 'lpff/port6'});
model.study('std5').feature('freq').set('usesol', true);
model.study('std5').feature('freq').set('notsolmethod', 'sol');
model.study('std5').feature('freq').set('notstudy', 'std1');
model.study('std5').feature('freq').set('notsolnum', 1);
model.study('std5').setGenPlots(false);

model.sol.create('sol11');
model.sol('sol11').study('std5');
model.sol('sol11').create('st1', 'StudyStep');
model.sol('sol11').feature('st1').set('study', 'std5');
model.sol('sol11').feature('st1').set('studystep', 'freq');
model.sol('sol11').create('v1', 'Variables');
model.sol('sol11').feature('v1').set('control', 'freq');
model.sol('sol11').create('s1', 'Stationary');
model.sol('sol11').feature('s1').create('p1', 'Parametric');
model.sol('sol11').feature('s1').feature.remove('pDef');
model.sol('sol11').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol11').feature('s1').feature('p1').set('plistarr', {'f'});
model.sol('sol11').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol11').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol11').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol11').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol11').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol11').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol11').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol11').feature('s1').feature('p1').set('probes', {});
model.sol('sol11').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol11').feature('s1').set('linpmethod', 'sol');
model.sol('sol11').feature('s1').set('linpsol', 'zero');
model.sol('sol11').feature('s1').set('control', 'freq');
model.sol('sol11').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol11').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol11').feature('s1').feature.remove('fcDef');
model.sol('sol11').attach('std5');
model.sol('sol11').runAll;

model.study.create('std6');
model.study('std6').create('freq', 'Frequency');
model.study('std6').feature('freq').setSolveFor('/physics/cpf', false);
model.study('std6').feature('freq').setSolveFor('/physics/lpfbm', false);
model.study('std6').feature('freq').setSolveFor('/physics/lpfbm2', false);
model.study('std6').feature('freq').setSolveFor('/physics/lpff', true);
model.study('std6').feature('freq').setSolveFor('/multiphysics/pfc1', true);
model.study('std6').label('Study 6 - Frequency Domain (M = -0.5, lined)');
model.study('std6').feature('freq').set('plist', 'f');
model.study('std6').feature('freq').set('useadvanceddisable', true);
model.study('std6').feature('freq').set('disabledphysics', {'lpff/port1' 'lpff/port4'});
model.study('std6').feature('freq').set('usesol', true);
model.study('std6').feature('freq').set('notsolmethod', 'sol');
model.study('std6').feature('freq').set('notstudy', 'std1');
model.study('std6').feature('freq').set('notsolnum', 2);
model.study('std6').setGenPlots(false);

model.sol.create('sol12');
model.sol('sol12').study('std6');
model.sol('sol12').create('st1', 'StudyStep');
model.sol('sol12').feature('st1').set('study', 'std6');
model.sol('sol12').feature('st1').set('studystep', 'freq');
model.sol('sol12').create('v1', 'Variables');
model.sol('sol12').feature('v1').set('control', 'freq');
model.sol('sol12').create('s1', 'Stationary');
model.sol('sol12').feature('s1').create('p1', 'Parametric');
model.sol('sol12').feature('s1').feature.remove('pDef');
model.sol('sol12').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol12').feature('s1').feature('p1').set('plistarr', {'f'});
model.sol('sol12').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol12').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol12').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol12').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol12').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol12').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol12').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol12').feature('s1').feature('p1').set('probes', {});
model.sol('sol12').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol12').feature('s1').set('linpmethod', 'sol');
model.sol('sol12').feature('s1').set('linpsol', 'zero');
model.sol('sol12').feature('s1').set('control', 'freq');
model.sol('sol12').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol12').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol12').feature('s1').feature.remove('fcDef');
model.sol('sol12').attach('std6');
model.sol('sol12').runAll;

model.study.create('std7');
model.study('std7').create('freq', 'Frequency');
model.study('std7').feature('freq').setSolveFor('/physics/cpf', false);
model.study('std7').feature('freq').setSolveFor('/physics/lpfbm', false);
model.study('std7').feature('freq').setSolveFor('/physics/lpfbm2', false);
model.study('std7').feature('freq').setSolveFor('/physics/lpff', true);
model.study('std7').feature('freq').setSolveFor('/multiphysics/pfc1', true);
model.study('std7').label('Study 7 - Frequency Domain (M = -0.5, hard)');
model.study('std7').feature('freq').set('plist', 'f');
model.study('std7').feature('freq').set('useadvanceddisable', true);
model.study('std7').feature('freq').set('disabledphysics', {'lpff/imp1' 'lpff/port1' 'lpff/port4'});
model.study('std7').feature('freq').set('usesol', true);
model.study('std7').feature('freq').set('notsolmethod', 'sol');
model.study('std7').feature('freq').set('notstudy', 'std1');
model.study('std7').feature('freq').set('notsolnum', 2);
model.study('std7').setGenPlots(false);

model.sol.create('sol13');
model.sol('sol13').study('std7');
model.sol('sol13').create('st1', 'StudyStep');
model.sol('sol13').feature('st1').set('study', 'std7');
model.sol('sol13').feature('st1').set('studystep', 'freq');
model.sol('sol13').create('v1', 'Variables');
model.sol('sol13').feature('v1').set('control', 'freq');
model.sol('sol13').create('s1', 'Stationary');
model.sol('sol13').feature('s1').create('p1', 'Parametric');
model.sol('sol13').feature('s1').feature.remove('pDef');
model.sol('sol13').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol13').feature('s1').feature('p1').set('plistarr', {'f'});
model.sol('sol13').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol13').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol13').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol13').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol13').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol13').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol13').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol13').feature('s1').feature('p1').set('probes', {});
model.sol('sol13').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol13').feature('s1').set('linpmethod', 'sol');
model.sol('sol13').feature('s1').set('linpsol', 'zero');
model.sol('sol13').feature('s1').set('control', 'freq');
model.sol('sol13').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol13').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol13').feature('s1').feature.remove('fcDef');
model.sol('sol13').attach('std7');
model.sol('sol13').runAll;

model.result.create('pg12', 'PlotGroup2D');
model.result('pg12').set('applyselectiontodatasetedges', false);
model.result('pg12').run;
model.result('pg12').label('Normalized Pressure: M = 0, lined');
model.result('pg12').set('data', 'dset6');
model.result('pg12').selection.geom('geom1', 2);
model.result('pg12').selection.geom('geom1', 2);
model.result('pg12').selection.set([1]);
model.result('pg12').set('applyselectiontodatasetedges', true);
model.result('pg12').set('titletype', 'label');
model.result('pg12').create('con1', 'Contour');
model.result('pg12').feature('con1').set('expr', 'pabsn');
model.result('pg12').feature('con1').set('levelmethod', 'levels');
model.result('pg12').feature('con1').set('levels', '0.0001 0.001 0.01 0.02 0.04 0.06 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9');
model.result('pg12').feature('con1').set('contourtype', 'filled');
model.result('pg12').feature('con1').set('colorscalemode', 'logarithmic');
model.result('pg12').run;
model.result('pg12').feature.duplicate('con2', 'con1');
model.result('pg12').run;
model.result('pg12').feature('con2').set('contourtype', 'lines');
model.result('pg12').feature('con2').set('coloring', 'uniform');
model.result('pg12').feature('con2').set('color', 'black');
model.result('pg12').feature('con2').set('colorlegend', false);
model.result('pg12').run;
model.result('pg12').run;
model.result.duplicate('pg13', 'pg12');
model.result('pg13').run;
model.result('pg13').label('Normalized Pressure: M = 0, hard');
model.result('pg13').set('data', 'dset7');
model.result('pg13').run;
model.result.duplicate('pg14', 'pg13');
model.result('pg14').run;
model.result('pg14').label('Normalized Pressure: M = -0.5, lined');
model.result('pg14').set('data', 'dset8');
model.result('pg14').run;
model.result.duplicate('pg15', 'pg14');
model.result('pg15').run;
model.result('pg15').label('Normalized Pressure: M = -0.5, hard');
model.result('pg15').set('data', 'dset9');
model.result('pg15').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Evaluation Group: Attenuation');
model.result.evaluationGroup('eg1').set('data', 'none');
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').set('data', 'dset6');
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', '10*log10(lpff.port1.P_in/intop_ip(lpff.Iz))', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'M = 0, lined', 0);
model.result.evaluationGroup('eg1').create('gev2', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev2').set('data', 'dset8');
model.result.evaluationGroup('eg1').feature('gev2').setIndex('expr', '10*log10(lpff.port2.P_in/intop_ip(lpff.Iz))', 0);
model.result.evaluationGroup('eg1').feature('gev2').setIndex('descr', 'M = -0.5, lined', 0);
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup.create('eg2', 'EvaluationGroup');
model.result.evaluationGroup('eg2').label('Source Plane: Mode Solution Index');
model.result.evaluationGroup('eg2').set('data', 'dset3');
model.result.evaluationGroup('eg2').set('transpose', true);
model.result.evaluationGroup('eg2').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg2').feature('gev1').set('tablecols', 'inner');
model.result.evaluationGroup('eg2').feature('gev1').setIndex('expr', 'lpfbm.kn', 0);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('descr', 'kn', 0);
model.result.evaluationGroup('eg2').run;
model.result.evaluationGroup.duplicate('eg3', 'eg2');
model.result.evaluationGroup('eg3').label('Terminal Plane: Mode Solution Index');
model.result.evaluationGroup('eg3').set('data', 'dset5');
model.result.evaluationGroup('eg3').feature('gev1').setIndex('expr', 'lpfbm2.kn', 0);
model.result.evaluationGroup('eg3').run;
model.result('pg5').run;

model.title('Flow Duct');

model.description('The acoustic field in a model of an axially symmetric lined aero-engine duct, based on modal sound transmission, is analyzed. The source is generated by a single mode excitation at a boundary. Sources and nonreflecting conditions are applied using port boundary conditions. The model analysis is performed in three steps, first computing the background mean flow (compressible irrotational potential flow), then analyzing the propagating modes with a boundary mode analysis, and finally solving the acoustic field in the flow duct with the linearized potential flow equations. Results are presented for situations with and without a background flow and for the cases of hard and lined duct walls.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;

model.label('flow_duct.mph');

model.modelNode.label('Components');

out = model;
