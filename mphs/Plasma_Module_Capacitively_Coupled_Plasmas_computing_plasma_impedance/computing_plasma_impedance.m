function out = model
%
% computing_plasma_impedance.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Plasma_Module/Capacitively_Coupled_Plasmas');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 1);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ptp', 'ColdPlasmaTimePeriodic', 'geom1');
model.physics('ptp').model('comp1');

model.study.create('std1');
model.study('std1').create('tper', 'TimePeriodic');
model.study('std1').feature('tper').set('solnum', 'auto');
model.study('std1').feature('tper').set('notsolnum', 'auto');
model.study('std1').feature('tper').set('outputmap', {});
model.study('std1').feature('tper').set('ngenAUX', '1');
model.study('std1').feature('tper').set('ngen', '2');
model.study('std1').feature('tper').set('goalngenAUX', '1');
model.study('std1').feature('tper').set('ngenAUX', '1');
model.study('std1').feature('tper').set('ngen', '2');
model.study('std1').feature('tper').set('goalngenAUX', '1');
model.study('std1').feature('tper').setSolveFor('/physics/ptp', true);

model.param.set('L', '0.025[m]');
model.param.descr('L', 'Discharge gap');
model.param.set('de', '0.3[m]');
model.param.descr('de', 'Electrode diameter');
model.param.set('As', '0.25*pi*de^2');
model.param.descr('As', 'Electrode area');
model.param.set('P0', '10[W]');
model.param.descr('P0', 'Input power');
model.param.set('f0', '13.56E6[Hz]');
model.param.descr('f0', 'Frequency');
model.param.set('p0', '1[torr]');
model.param.descr('p0', 'Pressure');
model.param.set('T0', '300[K]');
model.param.descr('T0', 'Temperature');

model.geom('geom1').create('i1', 'Interval');
model.geom('geom1').feature('i1').setIndex('coord', 'L', 1);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.physics('ptp').prop('CrossSectionArea').set('A', 'As');
model.physics('ptp').prop('ElectronProperties').set('ReducedProps', true);
model.physics('ptp').prop('ExtraDimensionSettings').set('Period_xd', '1/f0');
model.physics('ptp').prop('ExtraDimensionSettings').set('Nelemptp', 30);
model.physics('ptp').create('xsec1', 'CrossSectionImport', -1);
model.physics('ptp').feature('xsec1').set('Filepath', 'He_xsecs.txt');
model.physics('ptp').feature('xsec1').runCommand('importData');
model.physics('ptp').feature('He').set('FromMassConstraint', true);
model.physics('ptp').feature('He').set('PresetSpeciesData', 'He');
model.physics('ptp').feature('Hes').set('PresetSpeciesData', 'He');
model.physics('ptp').feature('He_1p').set('PresetSpeciesData', 'He');
model.physics('ptp').feature('He_1p').set('InitIon', true);
model.physics('ptp').feature('He_1p').set('MobilityDiffusivitySpecification', 'SpecifyMobilityComputeDiffusivity');
model.physics('ptp').feature('He_1p').set('IonTemperatureSpecification', 'LocalFieldApproximation');
model.physics('ptp').feature('He_1p').set('MobilitySpecification', 'HeIoninHe');
model.physics('ptp').feature('pes1').set('T', 'T0');
model.physics('ptp').feature('pes1').set('pA', 'p0');
model.physics('ptp').create('sr1', 'SurfaceReaction', 0);
model.physics('ptp').feature('sr1').selection.all;
model.physics('ptp').feature('sr1').set('formula', 'He+=>He');
model.physics('ptp').feature('sr1').set('gammaf', 0);
model.physics('ptp').feature('sr1').set('gammai', 0.1);
model.physics('ptp').feature('sr1').set('ebari', 5.8);
model.physics('ptp').feature.duplicate('sr2', 'sr1');
model.physics('ptp').feature('sr2').set('formula', 'Hes=>He');
model.physics('ptp').feature('sr2').set('gammaf', 1);
model.physics('ptp').create('wall1', 'WallDriftDiffusion', 0);
model.physics('ptp').feature('wall1').selection.all;
model.physics('ptp').create('gnd1', 'Ground', 0);
model.physics('ptp').feature('gnd1').selection.set([2]);
model.physics('ptp').create('mct1', 'MetalContact', 0);
model.physics('ptp').feature('mct1').selection.set([1]);
model.physics('ptp').feature('mct1').set('Source', 'RF');
model.physics('ptp').feature('mct1').set('Prf', 'P0');
model.physics('ptp').feature('mct1').set('fp', 'f0');

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('edg1').feature('dis1').set('elemcount', 125);
model.mesh('mesh1').feature('edg1').feature('dis1').set('elemratio', 10);
model.mesh('mesh1').feature('edg1').feature('dis1').set('symmetric', true);
model.mesh('mesh1').run;

model.study('std1').label('Time Periodic');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'tper');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_Ne_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_V_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_Hes_W_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_En_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_He_1p_W_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Va_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_Ne_per').set('scaleval', '35');
model.sol('sol1').feature('v1').feature('comp1_V_per').set('scaleval', '500');
model.sol('sol1').feature('v1').feature('comp1_ptp_Hes_W_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_En_per').set('scaleval', '35');
model.sol('sol1').feature('v1').feature('comp1_ptp_He_1p_W_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Va_per').set('scaleval', '500');
model.sol('sol1').feature('v1').set('control', 'tper');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', false);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol1').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ptp)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('nlinnormlevel', 0.01);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').set('errorchk', false);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (ptp)');
model.sol('sol1').feature('s1').feature('i1').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('domdofmax', 150000);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('ndom', 4);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('usecoarse', false);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('meshoverlap', false);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('errorchk', false);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol1').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').create('lngr1', 'LineGraph');
model.result('pg1').feature('lngr1').set('xdata', 'expr');
model.result('pg1').feature('lngr1').set('xdataexpr', 'x');
model.result('pg1').feature('lngr1').selection.geom('geom1', 1);
model.result('pg1').feature('lngr1').selection.set([1]);
model.result('pg1').feature('lngr1').set('expr', {'ptp.neav'});
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').set('xdata', 'expr');
model.result('pg2').feature('lngr1').set('xdataexpr', 'x');
model.result('pg2').feature('lngr1').selection.geom('geom1', 1);
model.result('pg2').feature('lngr1').selection.set([1]);
model.result('pg2').feature('lngr1').set('expr', {'ptp.Teav'});
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('xdata', 'expr');
model.result('pg3').feature('lngr1').set('xdataexpr', 'x');
model.result('pg3').feature('lngr1').selection.geom('geom1', 1);
model.result('pg3').feature('lngr1').selection.set([1]);
model.result('pg3').feature('lngr1').set('expr', {'ptp.Vav'});
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').set('xdata', 'expr');
model.result('pg4').feature('lngr1').set('xdataexpr', {'x'});
model.result('pg4').feature('lngr1').selection.all;
model.result('pg4').feature('lngr1').set('expr', {'ptp.Pcap_av'});
model.result('pg4').feature('lngr1').set('legend', true);
model.result('pg4').feature('lngr1').set('legendmethod', 'manual');
model.result('pg4').feature('lngr1').setIndex('legends', 'Electrons', 0);
model.result('pg4').feature('lngr1').set('resolution', 'norefine');
model.result('pg4').create('lngr2', 'LineGraph');
model.result('pg4').feature('lngr2').set('xdata', 'expr');
model.result('pg4').feature('lngr2').set('xdataexpr', {'x'});
model.result('pg4').feature('lngr2').selection.all;
model.result('pg4').feature('lngr2').set('expr', {'ptp.Pcap_ions_av'});
model.result('pg4').feature('lngr2').set('legend', true);
model.result('pg4').feature('lngr2').set('legendmethod', 'manual');
model.result('pg4').feature('lngr2').setIndex('legends', 'Ions', 0);
model.result('pg4').feature('lngr2').set('resolution', 'norefine');
model.result('pg4').create('lngr3', 'LineGraph');
model.result('pg4').feature('lngr3').set('xdata', 'expr');
model.result('pg4').feature('lngr3').set('xdataexpr', {'x'});
model.result('pg4').feature('lngr3').selection.all;
model.result('pg4').feature('lngr3').set('expr', {'ptp.Pcap_ele_ions_av'});
model.result('pg4').feature('lngr3').set('legend', true);
model.result('pg4').feature('lngr3').set('legendmethod', 'manual');
model.result('pg4').feature('lngr3').setIndex('legends', 'Electrons and ions', 0);
model.result('pg4').feature('lngr3').set('resolution', 'norefine');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'Power Deposition (W/m<sup>3</sup>)');
model.result('pg4').set('titletype', 'none');
model.result('pg4').label('Capacitive Power Deposition, Period Averaged (ptp)');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').set('ylog', true);
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Neutral Species Number Density, Period Averaged (1/m<sup>3</sup>)');
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').set('ylog', true);
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'Charged Species Number Density, Period Averaged (1/m<sup>3</sup>)');
model.result('pg6').set('ylabel', 'Number density (1/m<sup>3</sup>)');
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('xdata', 'expr');
model.result('pg5').feature('lngr1').set('xdataexpr', {'x'});
model.result('pg5').feature('lngr1').selection.all;
model.result('pg5').feature('lngr1').set('expr', {'ptp.n_wHe_av'});
model.result('pg5').feature('lngr1').set('legend', true);
model.result('pg5').feature('lngr1').set('legendmethod', 'manual');
model.result('pg5').feature('lngr1').setIndex('legends', 'wHe', 0);
model.result('pg5').create('lngr2', 'LineGraph');
model.result('pg5').feature('lngr2').set('xdata', 'expr');
model.result('pg5').feature('lngr2').set('xdataexpr', {'x'});
model.result('pg5').feature('lngr2').selection.all;
model.result('pg5').feature('lngr2').set('expr', {'ptp.n_wHes_av'});
model.result('pg5').feature('lngr2').set('legend', true);
model.result('pg5').feature('lngr2').set('legendmethod', 'manual');
model.result('pg5').feature('lngr2').setIndex('legends', 'wHes', 0);
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', {'x'});
model.result('pg6').feature('lngr1').selection.all;
model.result('pg6').feature('lngr1').set('expr', {'ptp.n_wHe_1p_av'});
model.result('pg6').feature('lngr1').set('legend', true);
model.result('pg6').feature('lngr1').set('legendmethod', 'manual');
model.result('pg6').feature('lngr1').setIndex('legends', 'wHe_1p', 0);
model.result('pg6').create('lngr2', 'LineGraph');
model.result('pg6').feature('lngr2').set('xdata', 'expr');
model.result('pg6').feature('lngr2').set('xdataexpr', {'x'});
model.result('pg6').feature('lngr2').selection.all;
model.result('pg6').feature('lngr2').set('expr', {'ptp.neav'});
model.result('pg6').feature('lngr2').set('legend', true);
model.result('pg6').feature('lngr2').set('legendmethod', 'manual');
model.result('pg6').feature('lngr2').setIndex('legends', 'ne', 0);
model.result('pg5').label('Neutral Species Number Density, Period Averaged (ptp)');
model.result('pg6').label('Charged Species Number Density, Period Averaged (ptp)');
model.result('pg1').label('Electron Density, Period Averaged (ptp)');
model.result('pg2').label('Electron Temperature, Period Averaged (ptp)');
model.result('pg3').label('Electric Potential, Period Averaged (ptp)');
model.result.dataset.create('dset2', 'Solution');
model.result.dataset('dset2').set('solution', 'sol1');
model.result.dataset('dset2').set('geom', 'ptp_xdim');
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').set('data', 'dset2');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('xdata', 'expr');
model.result('pg7').feature('lngr1').set('xdataexpr', {'x1_ptp'});
model.result('pg7').feature('lngr1').selection.all;
model.result('pg7').feature('lngr1').set('expr', {'ptp.mct1.V'});
model.result('pg7').feature('lngr1').set('legend', true);
model.result('pg7').feature('lngr1').set('legendmethod', 'manual');
model.result('pg7').feature('lngr1').setIndex('legends', 'V', 0);
model.result('pg7').create('lngr2', 'LineGraph');
model.result('pg7').feature('lngr2').set('xdata', 'expr');
model.result('pg7').feature('lngr2').set('xdataexpr', {'x1_ptp'});
model.result('pg7').feature('lngr2').selection.all;
model.result('pg7').feature('lngr2').set('expr', {'ptp.mct1.I'});
model.result('pg7').feature('lngr2').set('resolution', 'norefine');
model.result('pg7').feature('lngr2').set('legend', true);
model.result('pg7').feature('lngr2').set('legendmethod', 'manual');
model.result('pg7').feature('lngr2').setIndex('legends', 'I', 0);
model.result('pg7').set('twoyaxes', true);
model.result('pg7').setIndex('plotonsecyaxis', true, 0, 1);
model.result('pg7').set('titletype', 'none');
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', 'Period fraction');
model.result('pg7').label('Current and Voltage, Metal Contact 1 (ptp)');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg3').run;
model.result('pg4').run;
model.result('pg5').run;
model.result('pg6').run;
model.result('pg7').run;

model.study.create('std2');
model.study('std2').create('tptd', 'TimePeriodicToTimeDependent');
model.study('std2').feature('tptd').set('plotgroup', 'Default');
model.study('std2').feature('tptd').set('initialtime', '0');
model.study('std2').feature('tptd').set('solnum', 'auto');
model.study('std2').feature('tptd').set('notsolnum', 'auto');
model.study('std2').feature('tptd').set('outputmap', {});
model.study('std2').feature('tptd').setSolveFor('/physics/ptp', true);
model.study('std2').feature('tptd').set('tlist', 'range(0,(1/f0-0)/100,1/f0)');
model.study('std2').feature('tptd').set('usesol', true);
model.study('std2').feature('tptd').set('notsolmethod', 'sol');
model.study('std2').feature('tptd').set('notstudy', 'std1');
model.study('std2').label('Time Periodic to Time Dependent');
model.study('std2').setGenConv(false);
model.study('std2').setGenPlots(false);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'tptd');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'tptd');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,(1/f0-0)/100,1/f0)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'Default');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('control', 'tptd');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Harmonic Content of the Current');
model.result('pg8').set('data', 'dset3');
model.result('pg8').create('glob1', 'Global');
model.result('pg8').feature('glob1').set('markerpos', 'datapoints');
model.result('pg8').feature('glob1').set('linewidth', 'preference');
model.result('pg8').feature('glob1').set('expr', {'ptp.mct1.I'});
model.result('pg8').feature('glob1').set('descr', {'Current'});
model.result('pg8').feature('glob1').set('unit', {'A'});
model.result('pg8').run;
model.result('pg8').feature('glob1').set('xdata', 'fourier');
model.result('pg8').feature('glob1').set('fouriershow', 'spectrum');
model.result('pg8').run;

model.study.create('std3');
model.study('std3').label('FFT Study to Compute Plasma Impedance');
model.study('std3').create('tffft', 'TimeToFreqFFT');
model.study('std3').feature('tffft').set('fftendtime', '1/f0');
model.study('std3').feature('tffft').set('fftmaxfreq', 'f0');
model.study('std3').feature('tffft').set('fftinputstudy', 'std2');

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'tffft');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'tffft');
model.sol('sol3').create('fft1', 'FFT');
model.sol('sol3').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol3').feature('fft1').set('fftinputdata', 'fftperiodic');
model.sol('sol3').feature('fft1').set('fftoutorder', 'sym');
model.sol('sol3').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol3').feature('fft1').set('cname', 't');
model.sol('sol3').feature('fft1').set('clist', {'0'});
model.sol('sol3').feature('fft1').set('clistctrl', {'fft1_const'});
model.sol('sol3').feature('fft1').set('control', 'tffft');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').set('expr', {'ptp.mct1.Z'});
model.result.numerical('gev1').label('Impedance (ptp, dset4)');
model.result.numerical('gev1').set('data', 'dset4');
model.result.numerical('gev1').set('descr', 'Impedance');
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').label('Impedance');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;

model.study.create('std4');
model.study('std4').label('Run all Studies');
model.study('std4').create('ref', 'StudyReference');
model.study('std4').feature('ref').set('studyref', 'std1');
model.study('std4').create('ref2', 'StudyReference');
model.study('std4').feature('ref2').set('studyref', 'std2');
model.study('std4').create('ref3', 'StudyReference');
model.study('std4').feature('ref3').set('studyref', 'std3');

model.param.set('P0', '50[W]');

model.sol.create('sol4');
model.sol('sol4').study('std4');
model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'tper');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_Ne_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_V_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_Hes_W_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_En_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_He_1p_W_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Va_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_Ne_per').set('scaleval', '35');
model.sol('sol1').feature('v1').feature('comp1_V_per').set('scaleval', '500');
model.sol('sol1').feature('v1').feature('comp1_ptp_Hes_W_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_En_per').set('scaleval', '35');
model.sol('sol1').feature('v1').feature('comp1_ptp_He_1p_W_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Va_per').set('scaleval', '500');
model.sol('sol1').feature('v1').set('control', 'tper');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', false);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol1').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ptp)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('nlinnormlevel', 0.01);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').set('errorchk', false);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (ptp)');
model.sol('sol1').feature('s1').feature('i1').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('domdofmax', 150000);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('ndom', 4);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('usecoarse', false);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('meshoverlap', false);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('errorchk', false);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol1').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('v1').set('notsolnum', 'auto');
model.sol('sol2').feature('v1').set('notsolvertype', 'solnum');

model.study('std2').feature('tptd').set('notsolnum', 'auto');
model.study('std2').feature('tptd').set('notsolvertype', 'solnum');
model.study('std2').feature('tptd').set('notsolnumhide', 'off');
model.study('std2').feature('tptd').set('notstudyhide', 'off');
model.study('std2').feature('tptd').set('notsolhide', 'on');

model.sol('sol1').attach('std1');
model.sol('sol2').study('std2');

model.study('std3').feature('tffft').set('fftinputstudystep', 'tptd');

model.sol('sol2').feature.remove('t1');
model.sol('sol2').feature.remove('v1');
model.sol('sol2').feature.remove('st1');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'tptd');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'tptd');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,(1/f0-0)/100,1/f0)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('control', 'tptd');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature.remove('fcDef');

model.study('std3').feature('tffft').set('fftinputstudystep', 'tptd');

model.sol('sol2').attach('std2');
model.sol('sol3').study('std3');
model.sol('sol3').feature.remove('fft1');
model.sol('sol3').feature.remove('v1');
model.sol('sol3').feature.remove('st1');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'tffft');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'tffft');
model.sol('sol3').create('fft1', 'FFT');
model.sol('sol3').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol3').feature('fft1').set('fftinputdata', 'fftperiodic');
model.sol('sol3').feature('fft1').set('fftoutorder', 'sym');
model.sol('sol3').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol3').feature('fft1').set('cname', 't');
model.sol('sol3').feature('fft1').set('clist', {'0'});
model.sol('sol3').feature('fft1').set('clistctrl', {'fft1_const'});
model.sol('sol3').feature('fft1').set('control', 'tffft');
model.sol('sol3').attach('std3');
model.sol('sol4').create('copy1', 'CopySolution');
model.sol('sol4').feature('copy1').set('sol', 'sol3');
model.sol('sol4').attach('std4');
model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'tper');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_Ne_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_V_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_Hes_W_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_En_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_He_1p_W_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Va_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_Ne_per').set('scaleval', '35');
model.sol('sol1').feature('v1').feature('comp1_V_per').set('scaleval', '500');
model.sol('sol1').feature('v1').feature('comp1_ptp_Hes_W_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_En_per').set('scaleval', '35');
model.sol('sol1').feature('v1').feature('comp1_ptp_He_1p_W_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Va_per').set('scaleval', '500');
model.sol('sol1').feature('v1').set('control', 'tper');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', false);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol1').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ptp)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('nlinnormlevel', 0.01);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').set('errorchk', false);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (ptp)');
model.sol('sol1').feature('s1').feature('i1').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('domdofmax', 150000);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('ndom', 4);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('usecoarse', false);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('meshoverlap', false);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('errorchk', false);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol1').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('v1').set('notsolnum', 'auto');
model.sol('sol2').feature('v1').set('notsolvertype', 'solnum');

model.study('std2').feature('tptd').set('notsolnum', 'auto');
model.study('std2').feature('tptd').set('notsolvertype', 'solnum');
model.study('std2').feature('tptd').set('notsolnumhide', 'off');
model.study('std2').feature('tptd').set('notstudyhide', 'off');
model.study('std2').feature('tptd').set('notsolhide', 'on');

model.sol('sol1').attach('std1');
model.sol('sol2').study('std2');

model.study('std3').feature('tffft').set('fftinputstudystep', 'tptd');

model.sol('sol2').feature.remove('t1');
model.sol('sol2').feature.remove('v1');
model.sol('sol2').feature.remove('st1');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'tptd');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'tptd');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,(1/f0-0)/100,1/f0)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('control', 'tptd');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature.remove('fcDef');

model.study('std3').feature('tffft').set('fftinputstudystep', 'tptd');

model.sol('sol2').attach('std2');
model.sol('sol3').study('std3');
model.sol('sol3').feature.remove('fft1');
model.sol('sol3').feature.remove('v1');
model.sol('sol3').feature.remove('st1');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'tffft');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'tffft');
model.sol('sol3').create('fft1', 'FFT');
model.sol('sol3').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol3').feature('fft1').set('fftinputdata', 'fftperiodic');
model.sol('sol3').feature('fft1').set('fftoutorder', 'sym');
model.sol('sol3').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol3').feature('fft1').set('cname', 't');
model.sol('sol3').feature('fft1').set('clist', {'0'});
model.sol('sol3').feature('fft1').set('clistctrl', {'fft1_const'});
model.sol('sol3').feature('fft1').set('control', 'tffft');
model.sol('sol3').attach('std3');

model.batch.create('s1', 'Sequence');
model.batch('s1').study('std4');
model.batch('s1').attach('std4');
model.batch('s1').set('control', 'ref');
model.batch('s1').create('so1', 'Solutionseq');
model.batch('s1').feature('so1').set('seq', 'sol1');
model.batch('s1').feature('so1').set('store', 'off');
model.batch('s1').feature('so1').set('clear', 'on');
model.batch('s1').feature('so1').set('psol', 'none');
model.batch('s1').create('so2', 'Solutionseq');
model.batch('s1').feature('so2').set('seq', 'sol2');
model.batch('s1').feature('so2').set('store', 'off');
model.batch('s1').feature('so2').set('clear', 'on');
model.batch('s1').feature('so2').set('psol', 'none');
model.batch('s1').create('so3', 'Solutionseq');
model.batch('s1').feature('so3').set('seq', 'sol3');
model.batch('s1').feature('so3').set('store', 'off');
model.batch('s1').feature('so3').set('clear', 'on');
model.batch('s1').feature('so3').set('psol', 'none');
model.batch('s1').create('so4', 'Solutionseq');
model.batch('s1').feature('so4').set('seq', 'sol4');
model.batch('s1').feature('so4').set('store', 'off');
model.batch('s1').feature('so4').set('clear', 'on');
model.batch('s1').feature('so4').set('psol', 'none');
model.batch('s1').run('compute');

model.result('pg8').run;
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').appendResult;

model.title('Computing the Plasma Impedance');

model.description('This tutorial model demonstrates how to compute the impedance of a capacitively coupled plasma. The Time Periodic study computes the time periodic solution of the plasma. Subsequently, the solution is transformed to the time domain, after which the fast Fourier transform (FFT) solver is called. This allows the plasma impedance to be computed for a given set of input parameters. This impedance value is useful when designing matching networks.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('computing_plasma_impedance.mph');

model.modelNode.label('Components');

out = model;
