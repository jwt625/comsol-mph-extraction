function out = model
%
% truck_mounted_crane_analyzer.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Applications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/mbd', true);

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'truck_mounted_crane.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('createpairs', false);
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('Enu').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('an1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('an1').set('expr', '200[GPa]*(1 - 3.34e-4[1/K]*(T - 293.15[K]))');
model.material('mat1').propertyGroup('Enu').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('Enu').func('an1').set('fununit', 'Pa');
model.material('mat1').propertyGroup('Enu').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('an1').set('plotargs', {'T' '0' '1500'});
model.material('mat1').propertyGroup('Enu').func('an2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('an2').set('expr', '0.3*(1 + 1e-4[1/K]*(T - 293.15[K]))');
model.material('mat1').propertyGroup('Enu').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('Enu').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('Enu').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('an2').set('plotargs', {'T' '0' '1500'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600[K]' '1'; '1100[K]' '0.1'; '1643[K]' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600[K]' '1'; '1100[K]' '0.1'; '1643[K]' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600[K]' '1'; '1100[K]' '0.1'; '1643[K]' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600[K]' '1'; '1100[K]' '0.1'; '1643[K]' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600[K]' '1'; '1100[K]' '0.1'; '1643[K]' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('lighting', 'cooktorrance');
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('anisotropy', 0);
model.material('mat1').set('flipanisotropy', false);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').set('ambient', 'custom');
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('diffuse', 'custom');
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('specular', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('noisecolor', 'custom');
model.material('mat1').set('customnoisecolor', [0 0 0]);
model.material('mat1').set('noisescale', 0);
model.material('mat1').set('noise', 'off');
model.material('mat1').set('noisefreq', 1);
model.material('mat1').set('normalnoisebrush', '0');
model.material('mat1').set('normalnoisetype', '0');
model.material('mat1').set('alpha', 1);
model.material('mat1').set('anisotropyaxis', [0 0 1]);

model.physics('mbd').create('rd1', 'RigidDomain', 3);
model.physics('mbd').feature('rd1').label('Base');
model.physics('mbd').feature('rd1').selection.set([1 10 17 22 23]);
model.physics('mbd').create('rd2', 'RigidDomain', 3);
model.physics('mbd').feature('rd2').label('Boom1');
model.physics('mbd').feature('rd2').selection.set([19 20 21]);
model.physics('mbd').create('rd3', 'RigidDomain', 3);
model.physics('mbd').feature('rd3').label('Boom2');
model.physics('mbd').feature('rd3').selection.set([2 4 13]);
model.physics('mbd').create('rd4', 'RigidDomain', 3);
model.physics('mbd').feature('rd4').label('Extension1');
model.physics('mbd').feature('rd4').selection.set([5 11 14]);
model.physics('mbd').create('rd5', 'RigidDomain', 3);
model.physics('mbd').feature('rd5').label('Extension2');
model.physics('mbd').feature('rd5').selection.set([6 8 12]);
model.physics('mbd').create('rd6', 'RigidDomain', 3);
model.physics('mbd').feature('rd6').label('Extension3');
model.physics('mbd').feature('rd6').selection.set([3 7 9]);
model.physics('mbd').create('rd7', 'RigidDomain', 3);
model.physics('mbd').feature('rd7').label('Cylinder1');
model.physics('mbd').feature('rd7').selection.set([29]);
model.physics('mbd').create('rd8', 'RigidDomain', 3);
model.physics('mbd').feature('rd8').label('Piston1');
model.physics('mbd').feature('rd8').selection.set([27]);
model.physics('mbd').create('rd9', 'RigidDomain', 3);
model.physics('mbd').feature('rd9').label('Cylinder2');
model.physics('mbd').feature('rd9').selection.set([30]);
model.physics('mbd').create('rd10', 'RigidDomain', 3);
model.physics('mbd').feature('rd10').label('Piston2');
model.physics('mbd').feature('rd10').selection.set([28]);
model.physics('mbd').create('rd11', 'RigidDomain', 3);
model.physics('mbd').feature('rd11').label('Link1');
model.physics('mbd').feature('rd11').selection.set([15]);
model.physics('mbd').create('rd12', 'RigidDomain', 3);
model.physics('mbd').feature('rd12').label('Link2');
model.physics('mbd').feature('rd12').selection.set([18 25 32]);
model.physics('mbd').create('rd13', 'RigidDomain', 3);
model.physics('mbd').feature('rd13').label('Link3');
model.physics('mbd').feature('rd13').selection.set([16]);
model.physics('mbd').create('rd14', 'RigidDomain', 3);
model.physics('mbd').feature('rd14').label('Link4');
model.physics('mbd').feature('rd14').selection.set([24 26 31]);
model.physics('mbd').feature('rd1').create('fix1', 'FixedConstraint', -1);
model.physics('mbd').create('hgj1', 'HingeJoint', -1);
model.physics('mbd').feature('hgj1').label('Hinge Base-Boom1');
model.physics('mbd').feature('hgj1').set('Source', 'rd1');
model.physics('mbd').feature('hgj1').set('Destination', 'rd2');
model.physics('mbd').feature('hgj1').set('JointForcesAndMoments', 'ComputedUsingWeakConstraints');
model.physics('mbd').feature('hgj1').feature('cjb1').selection.set([404 413]);
model.physics('mbd').create('hgj2', 'HingeJoint', -1);
model.physics('mbd').feature('hgj2').label('Hinge Base-Cylinder1');
model.physics('mbd').feature('hgj2').set('Source', 'rd1');
model.physics('mbd').feature('hgj2').set('Destination', 'rd7');
model.physics('mbd').feature('hgj2').set('JointForcesAndMoments', 'ComputedUsingWeakConstraints');
model.physics('mbd').feature('hgj2').feature('cjb1').selection.set([589 598]);
model.physics('mbd').create('hgj3', 'HingeJoint', -1);
model.physics('mbd').feature('hgj3').label('Hinge Base-Link1');
model.physics('mbd').feature('hgj3').set('Source', 'rd1');
model.physics('mbd').feature('hgj3').set('Destination', 'rd11');
model.physics('mbd').feature('hgj3').set('JointForcesAndMoments', 'ComputedUsingWeakConstraints');
model.physics('mbd').feature('hgj3').feature('cjb1').selection.set([365 366]);
model.physics('mbd').create('hgj4', 'HingeJoint', -1);
model.physics('mbd').feature('hgj4').label('Hinge Boom1-Link2');
model.physics('mbd').feature('hgj4').set('Source', 'rd2');
model.physics('mbd').feature('hgj4').set('Destination', 'rd12');
model.physics('mbd').feature('hgj4').set('JointForcesAndMoments', 'ComputedUsingWeakConstraints');
model.physics('mbd').feature('hgj4').feature('cjb1').selection.set([414 423]);
model.physics('mbd').create('slj1', 'SlotJoint', -1);
model.physics('mbd').feature('slj1').label('Slot Link1-Link2');
model.physics('mbd').feature('slj1').set('Source', 'rd11');
model.physics('mbd').feature('slj1').set('Destination', 'rd12');
model.physics('mbd').feature('slj1').set('JointForcesAndMoments', 'ComputedUsingWeakConstraints');
model.physics('mbd').feature('slj1').feature('cjb1').selection.set([362 363]);
model.physics('mbd').feature.duplicate('slj2', 'slj1');
model.physics('mbd').feature('slj2').label('Slot Link1-Piston1');
model.physics('mbd').feature('slj2').set('Destination', 'rd8');
model.physics('mbd').create('prj1', 'PrismaticJoint', -1);
model.physics('mbd').feature('prj1').label('Prismatic Cylinder1-Piston1');
model.physics('mbd').feature('prj1').set('Source', 'rd7');
model.physics('mbd').feature('prj1').set('Destination', 'rd8');
model.physics('mbd').feature('prj1').set('AxisOfJointType', 'SelectEdge');
model.physics('mbd').feature('prj1').set('ReverseDirection', true);
model.physics('mbd').feature('prj1').set('JointForcesAndMoments', 'ComputedUsingWeakConstraints');
model.physics('mbd').feature('prj1').feature('cjb1').selection.set([710]);
model.physics('mbd').feature('prj1').feature('ja1').selection.set([1564]);
model.physics('mbd').feature.duplicate('hgj5', 'hgj1');
model.physics('mbd').feature.duplicate('hgj6', 'hgj2');
model.physics('mbd').feature.duplicate('hgj7', 'hgj3');
model.physics('mbd').feature.duplicate('hgj8', 'hgj4');
model.physics('mbd').feature.duplicate('slj3', 'slj1');
model.physics('mbd').feature.duplicate('slj4', 'slj2');
model.physics('mbd').feature.duplicate('prj2', 'prj1');
model.physics('mbd').feature('hgj5').label('Hinge Boom1-Boom2');
model.physics('mbd').feature('hgj5').set('Source', 'rd2');
model.physics('mbd').feature('hgj5').set('Destination', 'rd3');
model.physics('mbd').feature('hgj5').feature('cjb1').selection.set([438 439]);
model.physics('mbd').feature('hgj6').label('Hinge Boom1-Cylinder2');
model.physics('mbd').feature('hgj6').set('Source', 'rd2');
model.physics('mbd').feature('hgj6').set('Destination', 'rd9');
model.physics('mbd').feature('hgj6').feature('cjb1').selection.set([424 433]);
model.physics('mbd').feature('hgj7').label('Hinge Boom1-Link3');
model.physics('mbd').feature('hgj7').set('Source', 'rd2');
model.physics('mbd').feature('hgj7').set('Destination', 'rd13');
model.physics('mbd').feature('hgj7').feature('cjb1').selection.set([391 392]);
model.physics('mbd').feature('hgj8').label('Hinge Boom2-Link4');
model.physics('mbd').feature('hgj8').set('Source', 'rd3');
model.physics('mbd').feature('hgj8').set('Destination', 'rd14');
model.physics('mbd').feature('hgj8').feature('cjb1').selection.set([603 604]);
model.physics('mbd').feature('slj3').label('Slot Link3-Link4');
model.physics('mbd').feature('slj3').set('Source', 'rd13');
model.physics('mbd').feature('slj3').set('Destination', 'rd14');
model.physics('mbd').feature('slj3').feature('cjb1').selection.set([388 389]);
model.physics('mbd').feature('slj4').label('Slot Link3-Piston2');
model.physics('mbd').feature('slj4').set('Source', 'rd13');
model.physics('mbd').feature('slj4').set('Destination', 'rd10');
model.physics('mbd').feature('slj4').feature('cjb1').selection.set([388 389]);
model.physics('mbd').feature('prj2').label('Prismatic Cylinder2-Piston2');
model.physics('mbd').feature('prj2').set('Source', 'rd9');
model.physics('mbd').feature('prj2').set('Destination', 'rd10');
model.physics('mbd').feature('prj2').set('ReverseDirection', false);
model.physics('mbd').feature('prj2').feature('cjb1').selection.set([746]);
model.physics('mbd').feature('prj2').feature('ja1').selection.set([1682]);
model.physics('mbd').create('prj3', 'PrismaticJoint', -1);
model.physics('mbd').feature('prj3').label('Prismatic Boom2-Extension1');
model.physics('mbd').feature('prj3').set('Source', 'rd3');
model.physics('mbd').feature('prj3').set('Destination', 'rd4');
model.physics('mbd').feature('prj3').set('e', [0 1 0]);
model.physics('mbd').feature('prj3').set('JointForcesAndMoments', 'ComputedUsingWeakConstraints');
model.physics('mbd').feature('prj3').feature('cjb1').selection.set([315 316]);
model.physics('mbd').create('prj4', 'PrismaticJoint', -1);
model.physics('mbd').feature('prj4').label('Prismatic Extension1-Extension2');
model.physics('mbd').feature('prj4').set('Source', 'rd4');
model.physics('mbd').feature('prj4').set('Destination', 'rd5');
model.physics('mbd').feature('prj4').set('e', [0 1 0]);
model.physics('mbd').feature('prj4').set('JointForcesAndMoments', 'ComputedUsingWeakConstraints');
model.physics('mbd').feature('prj4').feature('cjb1').selection.set([280 284]);
model.physics('mbd').create('prj5', 'PrismaticJoint', -1);
model.physics('mbd').feature('prj5').label('Prismatic Extension2-Extension3');
model.physics('mbd').feature('prj5').set('Source', 'rd5');
model.physics('mbd').feature('prj5').set('Destination', 'rd6');
model.physics('mbd').feature('prj5').set('e', [0 1 0]);
model.physics('mbd').feature('prj5').set('JointForcesAndMoments', 'ComputedUsingWeakConstraints');
model.physics('mbd').feature('prj5').feature('cjb1').selection.set([223 224]);
model.physics('mbd').create('gacc1', 'GravityAcceleration', -1);
model.physics('mbd').create('bl1', 'BodyLoad', 3);
model.physics('mbd').feature('bl1').selection.set([3]);
model.physics('mbd').feature('bl1').set('LoadType', 'TotalForce');
model.physics('mbd').feature('bl1').set('Ftot', {'0' '0' '-1000[kg]*g_const'});

model.param.set('Angle1', '0[deg]');
model.param.descr('Angle1', 'Angle to horizontal, inner boom');
model.param.set('RelAng', '0[deg]');
model.param.descr('RelAng', 'Angle between booms');
model.param.set('ExtLen', '0[m]');
model.param.descr('ExtLen', 'Total extension length');

model.physics('mbd').create('ge1', 'GlobalEquations', -1);
model.physics('mbd').feature('ge1').setIndex('name', 'cyl1Pos', 0, 0);
model.physics('mbd').feature('ge1').setIndex('equation', 'Angle1-mbd.hgj1.th*180/pi', 0, 0);
model.physics('mbd').feature('ge1').setIndex('description', 'Inner cylinder extension', 0, 0);
model.physics('mbd').feature('ge1').set('DependentVariableQuantity', 'displacement');
model.physics('mbd').feature('ge1').setIndex('name', 'cyl2Pos', 1, 0);
model.physics('mbd').feature('ge1').setIndex('equation', '', 1, 0);
model.physics('mbd').feature('ge1').setIndex('initialValueU', 0, 1, 0);
model.physics('mbd').feature('ge1').setIndex('initialValueUt', 0, 1, 0);
model.physics('mbd').feature('ge1').setIndex('description', '', 1, 0);
model.physics('mbd').feature('ge1').setIndex('equation', 'RelAng-mbd.hgj5.th*180/pi', 1, 0);
model.physics('mbd').feature('ge1').setIndex('description', 'Outer cylinder extension', 1, 0);
model.physics('mbd').feature('prj1').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('prj1').feature('pm1').set('up', 'cyl1Pos');
model.physics('mbd').feature('prj1').feature('pm1').set('UnidirectionalConstraints', true);
model.physics('mbd').feature('prj2').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('prj2').feature('pm1').set('up', 'cyl2Pos');
model.physics('mbd').feature('prj2').feature('pm1').set('UnidirectionalConstraints', true);
model.physics('mbd').feature('prj3').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('prj3').feature('pm1').set('up', 'ExtLen/3');
model.physics('mbd').feature('prj4').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('prj4').feature('pm1').set('up', 'ExtLen/3');
model.physics('mbd').feature('prj5').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('prj5').feature('pm1').set('up', 'ExtLen/3');

model.nodeGroup.create('grp1', 'Physics', 'mbd');
model.nodeGroup('grp1').placeAfter('init1');
model.nodeGroup('grp1').add('rd1');
model.nodeGroup('grp1').add('rd2');
model.nodeGroup('grp1').add('rd3');
model.nodeGroup('grp1').add('rd4');
model.nodeGroup('grp1').add('rd5');
model.nodeGroup('grp1').add('rd6');
model.nodeGroup('grp1').add('rd7');
model.nodeGroup('grp1').add('rd8');
model.nodeGroup('grp1').add('rd9');
model.nodeGroup('grp1').add('rd10');
model.nodeGroup('grp1').add('rd11');
model.nodeGroup('grp1').add('rd12');
model.nodeGroup('grp1').add('rd13');
model.nodeGroup('grp1').add('rd14');
model.nodeGroup('grp1').label('Rigid Materials');
model.nodeGroup.create('grp2', 'Physics', 'mbd');
model.nodeGroup('grp2').placeAfter('init1');
model.nodeGroup('grp2').add('hgj1');
model.nodeGroup('grp2').add('hgj2');
model.nodeGroup('grp2').add('hgj3');
model.nodeGroup('grp2').add('hgj4');
model.nodeGroup('grp2').add('hgj5');
model.nodeGroup('grp2').add('hgj6');
model.nodeGroup('grp2').add('hgj7');
model.nodeGroup('grp2').add('hgj8');
model.nodeGroup('grp2').label('Hinge Joints');
model.nodeGroup.create('grp3', 'Physics', 'mbd');
model.nodeGroup('grp3').placeAfter('init1');
model.nodeGroup('grp3').add('slj1');
model.nodeGroup('grp3').add('slj2');
model.nodeGroup('grp3').add('slj3');
model.nodeGroup('grp3').add('slj4');
model.nodeGroup('grp3').label('Slot Joints');
model.nodeGroup.create('grp4', 'Physics', 'mbd');
model.nodeGroup('grp4').placeAfter('init1');
model.nodeGroup('grp4').add('prj1');
model.nodeGroup('grp4').add('prj2');
model.nodeGroup('grp4').add('prj3');
model.nodeGroup('grp4').add('prj4');
model.nodeGroup('grp4').add('prj5');
model.nodeGroup('grp4').label('Prismatic Joints');

model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('size').set('hauto', 3);
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').feature('size1').selection.set([2 3 4 10 15 16 17 18 19 20 21 22 23 24 31 32]);
model.mesh('mesh1').feature('ftet1').create('size2', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size2').set('hauto', 4);
model.mesh('mesh1').feature('ftet1').feature('size2').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').feature('size2').selection.set([5 6 7 17 18 19 20 23 24]);
model.mesh('mesh1').run;

model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').set('plistarr', {'-15   0  15  30  45  45  45  45  45  45  45   60   60' '0   0   0   0   0   0   0   0 -30 -60 -90 -120 -135' '5.5 5.1 5.5 5.5 5.5 4.5 3.5 2.5 1.5 1.5 1.5  1.5  1.5'});
model.study('std1').feature('stat').set('pname', {'Angle1' 'RelAng' 'ExtLen'});
model.study('std1').feature('stat').set('punit', {'rad' 'rad' 'rad'});
model.study('std1').feature('stat').set('pcontinuationmode', 'no');

model.sol.create('sol1');
model.sol('sol1').study('std1');

model.study('std1').feature('stat').set('notlistsolnum', 1);
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('listsolnum', 1);
model.study('std1').feature('stat').set('solnum', 'auto');

model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj6_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj4_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj4_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj8_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj2_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj1_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj4_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj2_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj5_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj3_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj3_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj5_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj1_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj4_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj2_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj2_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj6_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj8_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj5_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj3_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj3_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj7_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj1_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj4_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj3_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj1_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj2_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj4_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj1_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj2_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj5_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj1_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj3_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj7_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj6_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj4_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj4_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj8_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj2_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj1_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj4_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj2_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj5_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj3_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj3_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.06836232730078812');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj5_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj1_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj4_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj2_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj2_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj6_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj8_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj5_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj3_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj3_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj7_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj1_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj4_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj3_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*6.8362327300788115');
model.sol('sol1').feature('v1').feature('comp1_mbd_slj1_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj2_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj4_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj1_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_prj2_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scaleval', '0.06836232730078812');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj5_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj1_RF').set('scaleval', '1e8*(0.1*6.8362327300788115)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj3_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_hgj7_RM').set('scaleval', '1e8*(0.1*6.8362327300788115)^3');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('s1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('s1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('v1').feature('comp1_ODE1').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ODE1').set('scaleval', 0.1);
model.sol('sol1').feature('s1').set('stol', '1e-6');

model.study('std1').feature('stat').set('plot', true);

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Displacement (mbd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);

model.sol('sol1').runAll;

model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 9, 0);
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Boom Cylinder Forces');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('linewidth', 'preference');
model.result('pg2').feature('glob1').setIndex('expr', 'mbd.prj1.Fl1', 0);
model.result('pg2').feature('glob1').setIndex('unit', 'kN', 0);
model.result('pg2').feature('glob1').setIndex('descr', 'Cylinder 1', 0);
model.result('pg2').feature('glob1').setIndex('expr', 'mbd.prj2.Fl1', 1);
model.result('pg2').feature('glob1').setIndex('unit', 'kN', 1);
model.result('pg2').feature('glob1').setIndex('descr', 'Cylinder 2', 1);
model.result('pg2').feature('glob1').set('linewidth', 2);
model.result('pg2').feature('glob1').set('linemarker', 'cycle');
model.result('pg2').run;
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Force [kN]');
model.result('pg2').set('titletype', 'none');
model.result('pg2').run;
model.result.duplicate('pg3', 'pg2');
model.result('pg3').run;
model.result('pg3').label('Extension Cylinder Forces');
model.result('pg3').run;
model.result('pg3').feature('glob1').setIndex('expr', 'mbd.prj3.Fl1', 0);
model.result('pg3').feature('glob1').setIndex('unit', 'kN', 0);
model.result('pg3').feature('glob1').setIndex('descr', 'Extension cylinder 1', 0);
model.result('pg3').feature('glob1').setIndex('expr', 'mbd.prj4.Fl1', 1);
model.result('pg3').feature('glob1').setIndex('unit', 'kN', 1);
model.result('pg3').feature('glob1').setIndex('descr', 'Extension cylinder 2', 1);
model.result('pg3').feature('glob1').setIndex('expr', 'mbd.prj5.Fl1', 2);
model.result('pg3').feature('glob1').setIndex('unit', 'kN', 2);
model.result('pg3').feature('glob1').setIndex('descr', 'Extension cylinder 3', 2);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Hinge Forces');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').setIndex('expr', 'mbd.hgj1.Fy', 0);
model.result('pg4').feature('glob1').setIndex('unit', 'kN', 0);
model.result('pg4').feature('glob1').setIndex('descr', 'Inner hinge force, y', 0);
model.result('pg4').feature('glob1').setIndex('expr', 'mbd.hgj1.Fz', 1);
model.result('pg4').feature('glob1').setIndex('unit', 'kN', 1);
model.result('pg4').feature('glob1').setIndex('descr', 'Inner hinge force, z', 1);
model.result('pg4').feature('glob1').setIndex('expr', 'mbd.hgj5.Fy', 2);
model.result('pg4').feature('glob1').setIndex('unit', 'kN', 2);
model.result('pg4').feature('glob1').setIndex('descr', 'Outer hinge force, y', 2);
model.result('pg4').feature('glob1').setIndex('expr', 'mbd.hgj5.Fz', 3);
model.result('pg4').feature('glob1').setIndex('unit', 'kN', 3);
model.result('pg4').feature('glob1').setIndex('descr', 'Outer hinge force, z', 3);
model.result('pg4').feature('glob1').set('linewidth', 2);
model.result('pg4').feature('glob1').set('linemarker', 'cycle');
model.result('pg4').run;
model.result('pg4').set('legendpos', 'lowerright');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'Force [kN]');
model.result('pg4').set('titletype', 'none');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Crane Tip Trajectory');
model.result('pg5').create('ptgr1', 'PointGraph');
model.result('pg5').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg5').feature('ptgr1').set('linewidth', 'preference');
model.result('pg5').feature('ptgr1').selection.set([350]);
model.result('pg5').feature('ptgr1').set('expr', 'w');
model.result('pg5').feature('ptgr1').set('xdata', 'expr');
model.result('pg5').feature('ptgr1').set('xdataexpr', 'v');
model.result('pg5').feature('ptgr1').set('linewidth', 2);
model.result('pg5').feature('ptgr1').set('linemarker', 'circle');
model.result('pg5').run;
model.result('pg5').set('titletype', 'none');
model.result('pg5').set('preserveaspect', true);
model.result('pg5').run;
model.result('pg1').run;
model.result('pg1').run;

model.title('Truck Mounted Crane');

model.description(['Many trucks are equipped with cranes for load handling. Such cranes have a number of hydraulic cylinders controlling the motion, and several mechanisms.' newline  newline 'In this example, a rigid body analysis of a crane is performed in order to find cylinder forces and axle forces during a load cycle.']);

model.label('truck_mounted_crane.mph');

model.result('pg1').run;

model.group.create('lg1', 'LoadGroup');

model.view('view1').camera.set('zoomanglefull', 15.03746223449707);
model.view('view1').camera.setIndex('position', 46.370758056640625, 0);
model.view('view1').camera.setIndex('position', 2.068922996520996, 1);
model.view('view1').camera.setIndex('position', 2.2658677101135254, 2);
model.view('view1').camera.setIndex('target', 2.068922996520996, 1);
model.view('view1').camera.setIndex('target', 2.2658677101135254, 2);
model.view('view1').camera.setIndex('up', 0, 0);
model.view('view1').camera.setIndex('up', 0, 1);
model.view('view1').camera.set('up', [0 0 1]);
model.view('view1').camera.setIndex('rotationpoint', 2.068922996520996, 1);
model.view('view1').camera.setIndex('rotationpoint', 2.2658677101135254, 2);
model.view('view1').camera.setIndex('viewoffset', 0, 0);
model.view('view1').camera.set('viewoffset', [0 0]);
model.view('view1').set('locked', true);

model.physics('mbd').feature('bl1').set('Ftot', {'0' '0' '-Wp*g_const'});
model.physics('mbd').feature('bl1').set('loadGroup', 'lg1');

model.modelNode.create('comp2', true);

model.geom.create('geom2', 3);
model.geom('geom2').model('comp2');

model.mesh.create('mesh2', 'geom2');

model.view('view2').camera.set('zoomanglefull', 15.03746223449707);
model.view('view2').camera.set('position', [46.370758056640625 -4 3]);
model.view('view2').camera.setIndex('position', 2.068922996520996, 1);
model.view('view2').camera.setIndex('position', 2.2658677101135254, 2);
model.view('view2').camera.set('target', [0 2.068922996520996 0]);
model.view('view2').camera.setIndex('target', 2.2658677101135254, 2);
model.view('view2').camera.set('rotationpoint', [0 2.068922996520996 0]);
model.view('view2').camera.setIndex('rotationpoint', 2.2658677101135254, 2);
model.view('view2').set('locked', true);

model.geom('geom2').create('imp1', 'Import');
model.geom('geom2').feature('imp1').set('filename', 'truck_mounted_crane.mphbin');
model.geom('geom2').feature('imp1').importData;
model.geom('geom2').create('del1', 'Delete');
model.geom('geom2').feature('del1').selection('input').init(3);
model.geom('geom2').feature('del1').selection('input').set({'imp1(7)' 'imp1(8)' 'imp1(9)' 'imp1(10)' 'imp1(11)' 'imp1(12)' 'imp1(13)' 'imp1(14)' 'imp1(15)' 'imp1(16)'  ...
'imp1(17)' 'imp1(18)' 'imp1(19)' 'imp1(20)' 'imp1(21)' 'imp1(22)' 'imp1(23)' 'imp1(24)' 'imp1(25)' 'imp1(26)'  ...
'imp1(27)' 'imp1(28)' 'imp1(29)' 'imp1(30)' 'imp1(31)' 'imp1(32)' 'imp1(1)' 'imp1(2)' 'imp1(3)' 'imp1(4)'  ...
'imp1(5)' 'imp1(6)'}, [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1]);
model.geom('geom2').feature('del1').selection('input').clear({'imp1(11)' 'imp1(12)' 'imp1(13)' 'imp1(14)' 'imp1(25)' 'imp1(26)' 'imp1(27)' 'imp1(28)'});
model.geom('geom2').feature('del1').selection('input').set({'imp1(7)' 'imp1(8)' 'imp1(9)' 'imp1(10)' 'imp1(15)' 'imp1(16)' 'imp1(17)' 'imp1(18)' 'imp1(19)' 'imp1(20)'  ...
'imp1(21)' 'imp1(22)' 'imp1(23)' 'imp1(24)' 'imp1(29)' 'imp1(30)' 'imp1(31)' 'imp1(32)' 'imp1(1)' 'imp1(2)'  ...
'imp1(3)' 'imp1(4)' 'imp1(5)' 'imp1(6)'}, [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1]);
model.geom('geom2').run('del1');
model.geom('geom2').create('mov1', 'Move');
model.geom('geom2').feature('mov1').selection('input').set({'imp1(13)'});
model.geom('geom2').feature('mov1').set('disply', 'ExtLen');
model.geom('geom2').run('mov1');
model.geom('geom2').create('mov2', 'Move');
model.geom('geom2').feature('mov2').selection('input').set({'imp1(12)'});
model.geom('geom2').feature('mov2').set('disply', '2*ExtLen/3');
model.geom('geom2').run('mov2');
model.geom('geom2').create('mov3', 'Move');
model.geom('geom2').feature('mov3').selection('input').set({'imp1(11)'});
model.geom('geom2').feature('mov3').set('disply', 'ExtLen/3');
model.geom('geom2').run('mov3');
model.geom('geom2').create('rot1', 'Rotate');
model.geom('geom2').feature('rot1').set('axistype', 'x');
model.geom('geom2').feature('rot1').set('pos', [0 1.515 2.019]);
model.geom('geom2').feature('rot1').set('rot', 'RelAng');
model.geom('geom2').feature('rot1').selection('input').set({'imp1(14)' 'mov1' 'mov2' 'mov3'});
model.geom('geom2').run('rot1');
model.geom('geom2').create('rot2', 'Rotate');
model.geom('geom2').feature('rot2').set('axistype', 'x');
model.geom('geom2').feature('rot2').set('pos', [0 -0.825 1.945]);
model.geom('geom2').feature('rot2').set('rot', 'Angle1');
model.geom('geom2').feature('rot2').selection('input').set({'imp1(25)' 'rot1'});
model.geom('geom2').feature('fin').set('action', 'assembly');
model.geom('geom2').feature('fin').set('createpairs', false);

model.study('std1').feature('stat').setIndex('plistarr', 45, 0);
model.study('std1').feature('stat').setIndex('plistarr', -30, 1);
model.study('std1').feature('stat').setIndex('plistarr', 1.5, 2);
model.study('std1').feature('stat').set('useloadcase', true);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std1').feature('stat').setIndex('loadgroup', true, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroup', true, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', 0, 1, 0);

model.sol('sol1').feature('s1').set('stol', 'rtol');

model.param.set('Wp', '100[kg]');
model.param.descr('Wp', 'Payload');
model.param.set('rtol', '1e-6');
model.param.descr('rtol', 'Relative tolerance');

model.sol('sol1').runAll;

model.result('pg1').run;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').setIndex('expr', 'mbd.prj3.Fl1', 0);
model.result.numerical('gev1').setIndex('unit', 'N', 0);
model.result.numerical('gev1').setIndex('descr', 'Joint force, local coordinate system, 1 component', 0);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').set('coloring', 'uniform');
model.result('pg1').feature('surf1').set('color', 'gray');
model.result('pg1').run;
model.result('pg1').set('titletype', 'none');

model.geom('geom2').run('fin');

model.title('Truck Mounted Crane');

model.description(['Many trucks are equipped with cranes for load handling. Such cranes have a number of hydraulic cylinders controlling the motion, and several mechanisms.' newline  newline 'In this example, a rigid body analysis of a crane is performed in order to find cylinder forces and axle forces during a load cycle.']);

model.label('truck_mounted_crane_analyzer_embedded.mph');

model.result.report.create('rpt1', 'Report');
model.result.report('rpt1').set('format', 'docx');
model.result.report('rpt1').set('filename', 'user:///TruckMountedCraneAnalyzer.docx');
model.result.report('rpt1').set('templatesource', 'complete');
model.result.report('rpt1').set('enumlevel', 'all');
model.result.report('rpt1').set('imagesize', 'large');
model.result.report('rpt1').set('numberformat', 'custom');
model.result.report('rpt1').set('precision', 4);
model.result.report('rpt1').feature.create('tp1', 'TitlePage');
model.result.report('rpt1').feature('tp1').label('Truck Mounted Crane Analyzer');
model.result.report('rpt1').feature('tp1').set('frontmatterlayout', 'headings');
model.result.report('rpt1').feature('tp1').set('includeauthor', false);
model.result.report('rpt1').feature('tp1').set('reportdate', 'none');
model.result.report('rpt1').feature('tp1').set('includecompany', false);
model.result.report('rpt1').feature('tp1').set('includeversion', false);
model.result.report('rpt1').feature('tp1').set('summary', ['Many trucks are equipped with cranes for load handling. Such cranes have a number of hydraulic cylinders that control the crane''s motion, and several mechanisms. ' newline  newline 'In this application, a rigid body analysis of a crane is performed in order to find the payload capacity for the specified orientation and extension of the crane. The application also provides the usage of all the hydraulic cylinders and highlights the limiting cylinder. The capacity of the hydraulic cylinders can be modified in order to improve the payload capacity and the usage of the hydraulic cylinders.']);
model.result.report('rpt1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').label('Software Information');
model.result.report('rpt1').feature('sec1').feature.create('root1', 'Model');
model.result.report('rpt1').feature('sec1').feature('root1').label('About the Software');
model.result.report('rpt1').feature('sec1').feature('root1').set('includeunitsystem', false);
model.result.report('rpt1').feature('sec1').feature.create('std1', 'Study');
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').label('Inputs');
model.result.report('rpt1').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec1').label('Orientation and Extension');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('field1', 'StringDataField');
model.result.report('rpt1').feature('sec2').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec2').label('Capacity of Hydraulic Cylinders');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.create('field1', 'StringDataField');
model.result.report('rpt1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').label('Configuration');
model.result.report('rpt1').feature('sec3').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('pg1').set('caption', 'custom');
model.result.report('rpt1').feature('sec3').feature('pg1').set('customcaption', 'Configuration of the crane');
model.result.report('rpt1').feature.create('sec4', 'Section');
model.result.report('rpt1').feature('sec4').label('Results');
model.result.report('rpt1').feature('sec4').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec4').feature('sec1').label('Payload Capacity and Usage of Hydraulic Cylinders');
model.result.report('rpt1').feature('sec4').feature('sec1').feature.create('field1', 'DoubleDataField');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('field1').set('commentssource', 'custom');
model.result.report('rpt1').feature('sec4').feature('sec1').feature('field1').set('comments', 'The payload capacity of the crane and the usage of hydraulic cylinders are computed only when the crane can lift its own weight in the specified orientation and extension. Otherwise they are shown as zero.');
model.result.report('rpt1').feature('sec4').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec4').feature('sec2').label('Minimum Capacity of Hydraulic Cylinders');
model.result.report('rpt1').feature('sec4').feature('sec2').feature.create('field1', 'DoubleDataField');
model.result.report('rpt1').feature('sec4').feature('sec2').feature('field1').set('commentssource', 'custom');
model.result.report('rpt1').feature('sec4').feature('sec2').feature('field1').set('comments', 'The minimum capacity of the hydraulic cylinders is computed only when the crane is not able to lift its own weight in the specified orientation and extension. Otherwise it is shown as zero.');

model.setExpectedComputationTime('25 seconds');

model.result.report('rpt1').feature('sec2').feature('sec1').feature('field1').setIndex('include', false, 0);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('field1').setIndex('include', false, 4);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('field1').setIndex('include', false, 5);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('field1').setIndex('include', false, 6);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('field1').setIndex('include', false, 7);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('field1').setIndex('include', false, 8);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('field1').setIndex('include', false, 9);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('field1').setIndex('include', false, 10);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('field1').setIndex('include', false, 11);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('field1').setIndex('include', false, 12);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('field1').setIndex('include', false, 13);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('field1').setIndex('include', false, 0);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('field1').setIndex('include', false, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('field1').setIndex('include', false, 2);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('field1').setIndex('include', false, 3);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('field1').setIndex('include', false, 7);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('field1').setIndex('include', false, 8);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('field1').setIndex('include', false, 9);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('field1').setIndex('include', false, 10);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('field1').setIndex('include', false, 11);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('field1').setIndex('include', false, 12);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('field1').setIndex('include', false, 13);
model.result.report('rpt1').feature('sec4').feature('sec1').feature('field1').setIndex('include', false, 0);
model.result.report('rpt1').feature('sec4').feature('sec1').feature('field1').setIndex('include', false, 1);
model.result.report('rpt1').feature('sec4').feature('sec1').feature('field1').setIndex('include', false, 2);
model.result.report('rpt1').feature('sec4').feature('sec1').feature('field1').setIndex('include', false, 3);
model.result.report('rpt1').feature('sec4').feature('sec1').feature('field1').setIndex('include', false, 4);
model.result.report('rpt1').feature('sec4').feature('sec1').feature('field1').setIndex('include', false, 5);
model.result.report('rpt1').feature('sec4').feature('sec1').feature('field1').setIndex('include', false, 10);
model.result.report('rpt1').feature('sec4').feature('sec1').feature('field1').setIndex('include', false, 11);
model.result.report('rpt1').feature('sec4').feature('sec1').feature('field1').setIndex('include', false, 12);
model.result.report('rpt1').feature('sec4').feature('sec2').feature('field1').setIndex('include', false, 0);
model.result.report('rpt1').feature('sec4').feature('sec2').feature('field1').setIndex('include', false, 1);
model.result.report('rpt1').feature('sec4').feature('sec2').feature('field1').setIndex('include', false, 2);
model.result.report('rpt1').feature('sec4').feature('sec2').feature('field1').setIndex('include', false, 3);
model.result.report('rpt1').feature('sec4').feature('sec2').feature('field1').setIndex('include', false, 4);
model.result.report('rpt1').feature('sec4').feature('sec2').feature('field1').setIndex('include', false, 5);
model.result.report('rpt1').feature('sec4').feature('sec2').feature('field1').setIndex('include', false, 6);
model.result.report('rpt1').feature('sec4').feature('sec2').feature('field1').setIndex('include', false, 7);
model.result.report('rpt1').feature('sec4').feature('sec2').feature('field1').setIndex('include', false, 8);
model.result.report('rpt1').feature('sec4').feature('sec2').feature('field1').setIndex('include', false, 9);

model.title('Truck Mounted Crane Analyzer');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Using the knob form object' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Updating the geometry by rotating a knob' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Provides info if the results are above or below certain critical values' newline  newline 'Many trucks are equipped with cranes for handling loads and such cranes have a number of hydraulic cylinders that control the motion of the crane. These cylinders and other components that make up the crane are subjected to large forces when handling heavy loads. In order to determine the load-carrying capacity of the crane, these forces must be computed.' newline  newline 'In the app, a rigid-body analysis of a crane is performed in order to find the payload capacity for the specified orientation and extension of the crane.' newline  newline 'Inputs include the angle between the booms, the total extension length, the capacity of the inner and outer boom cylinders, and the capacity extension cylinders. Results from the app include the payload capacity and hydraulic cylinder usage.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('truck_mounted_crane_analyzer.mph');

model.modelNode.label('Components');

out = model;
