function out = model
%
% hydrogel_swelling.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Porous_Media_Flow_Module/Poromechanics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics('solid').prop('StructuralTransientBehavior').set('StructuralTransientBehavior', 'Quasistatic');
model.physics('solid').feature('lemm1').set('geometricNonlinearity', {'totalLagrangian'});
model.physics.create('dl', 'PorousMediaFlowDarcy', 'geom1');
model.physics('dl').model('comp1');
model.physics('dl').prop('ShapeProperty').set('order_pressure', '1');
model.physics('dl').feature('porous1').set('storageModelType', {'poroelastic'});

model.multiphysics.create('poro1', 'PoroelasticCoupling', 'geom1', 2);
model.multiphysics('poro1').set('Solid_physics', 'solid');
model.multiphysics('poro1').set('PorousMediaFlow_physics', 'dl');
model.multiphysics('poro1').selection.all;

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/solid', true);
model.study('std1').feature('time').setSolveFor('/physics/dl', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/poro1', true);

model.param.label('Geometrical Parameters');
model.param.set('height', '1[mm]');
model.param.descr('height', 'Gel height');
model.param.set('ar', '0.2');
model.param.descr('ar', 'Gel aspect ratio');
model.param.set('radius', 'ar*height/2');
model.param.descr('radius', 'Gel radius');
model.param.set('elsize_sw', 'if(ar<=2,0.05*height,0.10*height)');
model.param.descr('elsize_sw', 'Element size, swelling load case');
model.param.set('elsize_c', '0.01*height');
model.param.descr('elsize_c', 'Element size, consolidation load case');
model.param.create('par2');
model.param('par2').label('Material Parameters');
model.param('par2').set('G', '4e4[Pa]');
model.param('par2').descr('G', 'Initial shear modulus');
model.param('par2').set('Kmix', '4e7[Pa]');
model.param('par2').descr('Kmix', 'Bulk modulus of mixing');
model.param('par2').set('chi', '0.1');
model.param('par2').descr('chi', 'Enthalpy of mixing');
model.param('par2').set('temp', '293.15[K]');
model.param('par2').descr('temp', 'Reference temperature');
model.param('par2').set('Vm', '1e-28[m^3]*N_A_const');
model.param('par2').descr('Vm', 'Solvent molar volume');
model.param('par2').set('D', '1e3[m^2/s]');
model.param('par2').descr('D', 'Solvent diffusivity');
model.param('par2').set('M0', 'Vm*D/(N_A_const*k_B_const*temp)');
model.param('par2').descr('M0', 'Solvent mobility');
model.param('par2').set('rhof', '1[g/cm^3]');
model.param('par2').descr('rhof', 'Solvent density');
model.param('par2').set('muf', '1e-3[mPa*s]');
model.param('par2').descr('muf', 'Solvent viscosity');
model.param('par2').set('kappa0', 'M0*muf');
model.param('par2').descr('kappa0', 'Permeability');
model.param.create('par3');
model.param('par3').label('Model Parameters');
model.param('par3').set('stretch0', '2');
model.param('par3').descr('stretch0', 'Free swelling stretch');
model.param('par3').set('J0', 'stretch0^3');
model.param('par3').descr('J0', 'Free swelling volume ratio');
model.param('par3').set('mu_ref', 'G/J0*(stretch0^2-1)+Kmix*(log(1-1/J0)+1/J0+chi/(J0^2))');
model.param('par3').descr('mu_ref', 'Reference chemical potential');
model.param('par3').set('mu_sw', '0[Pa]');
model.param('par3').descr('mu_sw', 'Chemical potential of pure solvent');
model.param('par3').set('poro0', '1-1/J0');
model.param('par3').descr('poro0', 'Initial porosity');
model.param('par3').set('t_end', '1000[s]');
model.param('par3').descr('t_end', 'Duration');

model.func.create('int1', 'Interpolation');
model.func('int1').setIndex('table', 0, 0, 0);
model.func('int1').setIndex('table', 'mu_ref', 0, 1);
model.func('int1').setIndex('table', 't_end', 1, 0);
model.func('int1').setIndex('table', 'mu_sw', 1, 1);
model.func('int1').setIndex('fununit', 'Pa', 0);
model.func('int1').setIndex('argunit', 's', 0);

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'radius' 'height'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'1.4*radius' '0.1*height'});
model.geom('geom1').feature('r2').set('pos', {'0' '-0.1*height'});
model.geom('geom1').run('r2');
model.geom('geom1').create('pare1', 'PartitionEdges');
model.geom('geom1').feature('pare1').selection('edge').set('r2', 3);
model.geom('geom1').feature('pare1').setIndex('param', '1/1.4', 0);
model.geom('geom1').run('fin');
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('createpairs', false);
model.geom('geom1').run('fin');

model.modelNode('comp1').sorder('quadratic');

model.pair.create('p1', 'Contact', 'geom1');
model.pair('p1').source.set([4]);
model.pair('p1').destination.set([9]);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').selection.geom('geom1', 2);
model.variable('var1').selection.set([2]);

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('J', 'solid.J*J0', 'Swelling volume ratio');
model.variable('var1').set('Psi_s', 'G/(2*J0)*(stretch0^2*solid.I1Cel-3-2*log(J0*solid.Jel))', 'Free energy of stretching');
model.variable('var1').set('Psi_mix', '-Kmix*((solid.Jel-J0^(-1))*log(J0*solid.Jel/(J0*solid.Jel-1))+chi/(J0^2*solid.Jel))', 'Free energy of mixing');
model.variable('var1').set('Kdef', '(solid.J-J0^(-1))*kappa0', 'Deformation-dependent permeability');
model.variable('var1').set('KRR', 'Kdef*solid.Cil11', 'Permeability, RR component');
model.variable('var1').set('KRZ', 'Kdef*solid.Cil13', 'Permeability, RZ component');
model.variable('var1').set('KZZ', 'Kdef*solid.Cil33', 'Permeability, ZZ component');

model.physics('solid').prop('ShapeProperty').set('order_displacement', 2);
model.physics('solid').create('rd1', 'RigidDomain', 2);
model.physics('solid').feature('rd1').selection.set([1]);
model.physics('solid').feature('rd1').create('fix1', 'FixedConstraint', -1);
model.physics('solid').create('hmm1', 'HyperelasticModel', 2);
model.physics('solid').feature('hmm1').selection.set([2]);
model.physics('solid').feature('hmm1').set('MaterialModel', 'userDefined');
model.physics('solid').feature('hmm1').set('Ws', 'Psi_s+Psi_mix');
model.physics('solid').feature('hmm1').set('Eequ', '3*G');
model.physics('solid').feature('dcnt1').set('penaltyCtrlPenalty', 'ManualTuning');
model.physics('solid').feature('dcnt1').set('fp_penalty', 10);
model.physics('solid').create('fix1', 'Fixed', 1);
model.physics('solid').feature('fix1').selection.set([7]);
model.physics('dl').selection.set([2]);
model.physics('dl').field('pressure').field('mu');
model.physics('dl').feature('porous1').feature('fluid1').set('fluidType', 'incompressible');
model.physics('dl').feature('porous1').feature('fluid1').set('rhoref_mat', 'userdef');
model.physics('dl').feature('porous1').feature('fluid1').set('rhoref', 'rhof');
model.physics('dl').feature('porous1').feature('fluid1').set('mu_mat', 'userdef');
model.physics('dl').feature('porous1').feature('fluid1').set('mu', 'muf');
model.physics('dl').feature('porous1').feature('pm1').set('epsilon_mat', 'userdef');
model.physics('dl').feature('porous1').feature('pm1').set('epsilon', 'poro0');
model.physics('dl').feature('porous1').feature('pm1').set('kappa_mat', 'userdef');
model.physics('dl').feature('porous1').feature('pm1').set('kappa', {'KRR' '0' 'KRZ' '0' '0' '0' 'KRZ' '0' 'KZZ'});
model.physics('dl').feature('init1').set('p', 'mu_ref');
model.physics('dl').feature('dcont1').set('pairDisconnect', true);
model.physics('dl').create('pr1', 'Pressure', 1);
model.physics('dl').feature('pr1').label('Contact (Swelling)');
model.physics('dl').feature('pr1').selection.set([9]);
model.physics('dl').feature('pr1').set('p0', 'if(incontact_p1,mu,int1(t))');
model.physics('dl').create('pr2', 'Pressure', 1);
model.physics('dl').feature('pr2').label('Free Flow (Swelling)');
model.physics('dl').feature('pr2').set('p0', 'int1(t)');
model.physics('dl').feature('pr2').selection.set([8]);

model.multiphysics('poro1').set('poroelasticityModel', 'biphasic');
model.multiphysics('poro1').set('pfref_src', 'root.comp1.dl.pref');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([2]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([7 8]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 'floor(radius/elsize_sw)+1');
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([6 9]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 'floor(height/elsize_sw)+1');
model.mesh('mesh1').create('map2', 'Map');
model.mesh('mesh1').feature('map2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map2').selection.set([1]);
model.mesh('mesh1').feature('map2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis1').selection.set([2]);
model.mesh('mesh1').feature('map2').feature('dis1').set('numelem', 'floor(1.4*radius/elsize_sw)+1');
model.mesh('mesh1').feature('map2').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis2').selection.set([1 5]);
model.mesh('mesh1').feature('map2').feature('dis2').set('numelem', 1);
model.mesh('mesh1').run;

model.study('std1').label('Inhomogeneous Swelling');
model.study('std1').setGenPlots(false);
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'ar', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'ar', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('plistarr', '0.1 0.6 1.0 2.0 6.0 10.0 20.0 100.0', 0);
model.study('std1').feature('time').set('tlist', 'range(0,0.1,1)*t_end');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('scaleval', '1.108873302050329E-5');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.001108873302050329');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.1,1)*t_end');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('minstep', 0.5);
model.sol('sol1').feature('t1').feature('fc1').set('useminsteprecovery', 'on');
model.sol('sol1').feature('t1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 4);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('minstep', 0.5);
model.sol('sol1').feature('t1').feature('fc1').set('useminsteprecovery', 'on');
model.sol('sol1').feature('t1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 4);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('v1').feature('comp1_mu').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mu').set('scaleval', '1e5');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', 'height');
model.sol('sol1').feature('t1').set('endtimeinterpolation', false);
model.sol('sol1').feature('t1').set('reacf', false);
model.sol('sol1').feature('t1').set('storeudot', false);
model.sol('sol1').feature('t1').feature('dDef').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 10);

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'ar'});
model.batch('p1').set('plistarr', {'0.1 0.6 1.0 2.0 6.0 10.0 20.0 100.0'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 11, 0);
model.result('pg1').setIndex('looplevel', 8, 1);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').set('resolution', 'normal');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('scaleactive', true);
model.result('pg1').feature('surf1').feature('def').set('scale', '1');
model.result('pg1').feature('surf1').feature('def').set('expr', {'u' 'w'});
model.result('pg1').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg1').label('Stress (solid)');
model.result('pg1').run;
model.result('pg1').label('Swelling Ratio');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Surface: Swelling volume ratio (1)');
model.result('pg1').set('edges', false);
model.result('pg1').run;
model.result('pg1').feature('surf1').set('expr', 'comp1.J');
model.result('pg1').feature('surf1').set('data', 'dset2');
model.result('pg1').feature('surf1').setIndex('looplevel', 2, 1);
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('colortabletype', 'discrete');
model.result('pg1').run;
model.result('pg1').create('mesh1', 'Mesh');
model.result('pg1').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg1').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg1').feature('mesh1').set('data', 'dset2');
model.result('pg1').feature('mesh1').setIndex('looplevel', 2, 1);
model.result('pg1').feature('mesh1').set('elemcolor', 'none');
model.result('pg1').feature('mesh1').set('inheritplot', 'surf1');
model.result('pg1').feature('mesh1').create('def1', 'Deform');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature.duplicate('surf2', 'surf1');
model.result('pg1').feature.duplicate('mesh2', 'mesh1');
model.result('pg1').run;
model.result('pg1').feature('surf2').setIndex('looplevel', 4, 1);
model.result('pg1').feature('surf2').set('inheritplot', 'surf1');
model.result('pg1').feature('surf2').create('trn1', 'Translation');
model.result('pg1').run;
model.result('pg1').feature('surf2').feature('trn1').set('trans', [1.25 0]);
model.result('pg1').run;
model.result('pg1').feature('mesh2').setIndex('looplevel', 4, 1);
model.result('pg1').feature('mesh2').create('trn1', 'Translation');
model.result('pg1').run;
model.result('pg1').feature('mesh2').feature('trn1').set('trans', [1.25 0]);
model.result('pg1').run;
model.result('pg1').feature.duplicate('surf3', 'surf2');
model.result('pg1').feature.duplicate('mesh3', 'mesh2');
model.result('pg1').run;
model.result('pg1').feature('surf3').setIndex('looplevel', 6, 1);
model.result('pg1').run;
model.result('pg1').feature('surf3').feature('trn1').set('trans', [3.5 0]);
model.result('pg1').run;
model.result('pg1').feature('mesh3').setIndex('looplevel', 6, 1);
model.result('pg1').run;
model.result('pg1').feature('mesh3').feature('trn1').set('trans', [3.5 0]);
model.result('pg1').run;
model.result('pg1').create('tlan1', 'TableAnnotation');
model.result('pg1').feature('tlan1').set('source', 'localtable');
model.result('pg1').feature('tlan1').setIndex('localtablematrix', 0.2, 0, 0);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', -0.35, 0, 1);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', 'D/H = 0.6', 0, 2);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', '2.0', 1, 0);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', -0.35, 1, 1);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', 'D/H = 2', 1, 2);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', '6.0', 2, 0);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', -0.35, 2, 1);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', 'D/H = 10', 2, 2);
model.result('pg1').feature('tlan1').set('showpoint', false);
model.result('pg1').feature('tlan1').set('anchorpoint', 'center');
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Gel Height');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevelinput', 'last', 0);
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Equilibrium gel height');
model.result('pg2').set('xlabelactive', true);
model.result('pg2').set('xlabel', 'Gel aspect ratio (1)');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Normalized gel height h/H<sub>0</sub>');
model.result('pg2').set('axislimits', true);
model.result('pg2').set('xmin', 0.1);
model.result('pg2').set('xmax', 100);
model.result('pg2').set('ymin', 3.2);
model.result('pg2').set('ymax', 5);
model.result('pg2').set('xlog', true);
model.result('pg2').set('manualgrid', true);
model.result('pg2').set('yspacing', 0.2);
model.result('pg2').set('showlegends', false);
model.result('pg2').create('ptgr1', 'PointGraph');
model.result('pg2').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg2').feature('ptgr1').set('linewidth', 'preference');
model.result('pg2').feature('ptgr1').selection.set([7]);
model.result('pg2').feature('ptgr1').set('expr', '(height+w)/(height/stretch0)');
model.result('pg2').feature('ptgr1').set('xdatasolnumtype', 'level2');
model.result('pg2').feature('ptgr1').set('linewidth', 2);
model.result('pg2').feature('ptgr1').set('linemarker', 'circle');

model.physics.create('ge', 'GlobalEquations', 'geom1');
model.physics('ge').model('comp1');

model.study('std1').feature('time').setSolveFor('/physics/ge', true);

model.physics('ge').prop('EquationForm').set('form', 'Automatic');

model.geom('geom1').run;

model.physics('ge').feature('ge1').setIndex('name', 'lam0_free', 0, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'G/(lam0_free^3)*(lam0_free^2-1)+Kmix*(log(1-lam0_free^(-3))+lam0_free^(-3)+chi*lam0_free^(-6))-mu_sw', 0, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 2, 0, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Free swelling ratio', 0, 0);
model.physics('ge').feature('ge1').setIndex('name', 'lam0_ua', 1, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 1, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 1, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 1, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 1, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'G/(stretch0^2*lam0_ua)*(lam0_ua^2-1)+Kmix*(log(1-1/(stretch0^2*lam0_ua))+1/(stretch0^2*lam0_ua)+chi/(stretch0^4*lam0_ua^2))-mu_sw', 1, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 2, 1, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Uniaxial swelling ratio', 1, 0);
model.physics('ge').feature('ge1').set('CustomSourceTermUnit', '1');
model.physics('ge').feature('ge1').set('SourceTermQuantity', 'none');
model.physics('ge').feature('ge1').setIndex('CustomSourceTermUnit', 'Pa', 0, 0);

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/solid', true);
model.study('std2').feature('stat').setSolveFor('/physics/dl', true);
model.study('std2').feature('stat').setSolveFor('/physics/ge', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/poro1', true);
model.study('std2').label('Homogeneous Swelling');
model.study('std2').setGenPlots(false);
model.study('std2').feature('stat').set('useadvanceddisable', true);
model.study('std2').feature('stat').set('disabledpair', {'p1'});
model.study('std2').feature('stat').setSolveFor('/physics/solid', false);
model.study('std2').feature('stat').setSolveFor('/physics/dl', false);
model.study('std2').feature('stat').set('disabledphysics', {'solid' 'dl'});
model.study('std2').feature('stat').setSolveFor('/multiphysics/poro1', false);
model.study('std2').feature('stat').set('disabledcoupling', {'poro1'});
model.study('std2').feature('stat').setEntry('mesh', 'geom1', 'nomesh');

model.sol.create('sol11');
model.sol('sol11').study('std2');
model.sol('sol11').create('st1', 'StudyStep');
model.sol('sol11').feature('st1').set('study', 'std2');
model.sol('sol11').feature('st1').set('studystep', 'stat');
model.sol('sol11').create('v1', 'Variables');
model.sol('sol11').feature('v1').set('control', 'stat');
model.sol('sol11').create('s1', 'Stationary');
model.sol('sol11').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol11').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol11').feature('s1').feature.remove('fcDef');
model.sol('sol11').attach('std2');
model.sol('sol11').runAll;

model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Homogeneous Swelling Stretches');
model.result.evaluationGroup('eg1').set('data', 'dset3');
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').run;
model.result('pg2').run;
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('linewidth', 'preference');
model.result('pg2').feature('glob1').setIndex('expr', '3.3900', 0);
model.result('pg2').feature('glob1').setIndex('descr', 'Free homogeneous swelling', 0);
model.result('pg2').feature('glob1').setIndex('expr', 4.7815, 1);
model.result('pg2').feature('glob1').setIndex('descr', 'Uniaxial homogeneous swelling', 1);
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'level2');
model.result('pg2').feature('glob1').set('linewidth', 2);
model.result('pg2').run;
model.result('pg2').create('tlan1', 'TableAnnotation');
model.result('pg2').feature('tlan1').set('source', 'localtable');
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 3.2, 0, 0);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 3.45, 0, 1);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 'Free swelling', 0, 2);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 3.2, 1, 0);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 4.85, 1, 1);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 'Uniaxial swelling', 1, 2);
model.result('pg2').feature('tlan1').set('showpoint', false);
model.result('pg2').feature('tlan1').set('anchorpoint', 'center');
model.result('pg2').run;

model.param('par2').set('chi', '0.2');
model.param('par2').set('D', '8e-10[m^2/s]');
model.param('par3').set('stretch0', '3.215');
model.param('par3').set('mu_ref', '0[Pa]');
model.param('par3').set('stress', '0.05*Kmix/(stretch0^2)');
model.param('par3').descr('stress', 'Nominal stress');

model.func.create('step1', 'Step');
model.func('step1').set('location', 0.05);

model.physics('solid').create('bndl1', 'BoundaryLoad', 1);
model.physics('solid').feature('bndl1').selection.set([8]);
model.physics('solid').feature('bndl1').set('FperArea', {'0' '0' '-stress*step1(t/(1[s]))'});
model.physics('solid').create('roll1', 'Roller', 1);
model.physics('solid').feature('roll1').selection.set([9]);
model.physics('dl').create('pr3', 'Pressure', 1);
model.physics('dl').feature('pr3').label('Free Flow (Consolidation)');
model.physics('dl').feature('pr3').selection.set([8]);
model.physics('dl').feature('pr3').set('p0', 'mu_ref');

model.mesh.create('mesh2', 'geom1');
model.mesh('mesh2').create('map1', 'Map');
model.mesh('mesh2').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh2').feature('map1').selection.set([2]);
model.mesh('mesh2').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh2').feature('map1').feature('dis1').selection.set([7 8]);
model.mesh('mesh2').feature('map1').feature('dis1').set('numelem', 1);
model.mesh('mesh2').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh2').feature('map1').feature('dis2').selection.set([6 9]);
model.mesh('mesh2').feature('map1').feature('dis2').set('numelem', 'floor(height/elsize_c)+1');
model.mesh('mesh2').create('map2', 'Map');
model.mesh('mesh2').feature('map2').selection.geom('geom1', 2);
model.mesh('mesh2').feature('map2').selection.set([1]);
model.mesh('mesh2').feature('map2').create('dis1', 'Distribution');
model.mesh('mesh2').feature('map2').feature('dis1').selection.set([1 5]);
model.mesh('mesh2').feature('map2').feature('dis1').set('numelem', 1);
model.mesh('mesh2').run;

model.study.create('std3');
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').setSolveFor('/physics/solid', true);
model.study('std3').feature('time').setSolveFor('/physics/dl', true);
model.study('std3').feature('time').setSolveFor('/physics/ge', true);
model.study('std3').feature('time').setSolveFor('/multiphysics/poro1', true);
model.study('std3').setGenPlots(false);
model.study('std3').label('Uniaxial Consolidation');
model.study('std3').feature('time').set('tlist', '{0 1 2 5 10 20 50 100 200 1000}*(height/stretch0)^2/D');
model.study('std3').feature('time').set('useadvanceddisable', true);
model.study('std3').feature('time').set('disabledpair', {'p1'});
model.study('std3').feature('time').set('disabledphysics', {'dl/pr1' 'dl/pr2'});
model.study('std3').feature('time').setSolveFor('/physics/ge', false);
model.study('std3').feature('time').set('disabledphysics', {'dl/pr1' 'dl/pr2' 'ge'});

model.sol.create('sol12');

model.mesh('mesh2').stat.selection.geom(2);
model.mesh('mesh2').stat.selection.set([2]);

model.sol('sol12').study('std3');
model.sol('sol12').create('st1', 'StudyStep');
model.sol('sol12').feature('st1').set('study', 'std3');
model.sol('sol12').feature('st1').set('studystep', 'time');
model.sol('sol12').create('v1', 'Variables');
model.sol('sol12').feature('v1').feature('comp1_solid_rd_disp').set('scalemethod', 'manual');
model.sol('sol12').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol12').feature('v1').feature('comp1_solid_rd_disp').set('resscalemethod', 'parent');
model.sol('sol12').feature('v1').feature('comp1_solid_rd_disp').set('scaleval', '1.108873302050329E-5');
model.sol('sol12').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.001108873302050329');
model.sol('sol12').feature('v1').set('control', 'time');
model.sol('sol12').create('t1', 'Time');
model.sol('sol12').feature('t1').set('tlist', '{0 1 2 5 10 20 50 100 200 1000}*(height/stretch0)^2/D');
model.sol('sol12').feature('t1').set('plot', 'off');
model.sol('sol12').feature('t1').set('plotgroup', 'pg1');
model.sol('sol12').feature('t1').set('plotfreq', 'tout');
model.sol('sol12').feature('t1').set('probesel', 'all');
model.sol('sol12').feature('t1').set('probes', {});
model.sol('sol12').feature('t1').set('probefreq', 'tsteps');
model.sol('sol12').feature('t1').set('rtol', 0.001);
model.sol('sol12').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol12').feature('t1').set('reacf', true);
model.sol('sol12').feature('t1').set('storeudot', true);
model.sol('sol12').feature('t1').set('endtimeinterpolation', true);
model.sol('sol12').feature('t1').set('maxorder', 2);
model.sol('sol12').feature('t1').set('stabcntrl', true);
model.sol('sol12').feature('t1').set('control', 'time');
model.sol('sol12').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol12').feature('t1').create('seDef', 'Segregated');
model.sol('sol12').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol12').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol12').feature('t1').feature.remove('fcDef');
model.sol('sol12').feature('t1').feature.remove('seDef');
model.sol('sol12').attach('std3');
model.sol('sol12').feature('v1').feature('comp1_mu').set('scalemethod', 'manual');
model.sol('sol12').feature('v1').feature('comp1_mu').set('scaleval', '1.0e5');
model.sol('sol12').feature('v1').feature('comp1_u').set('scaleval', 'height');
model.sol('sol12').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol12').feature('t1').set('initialstepbdfactive', true);
model.sol('sol12').feature('t1').feature('dDef').set('linsolver', 'pardiso');
model.sol('sol12').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol12').feature('t1').feature('fc1').set('maxiter', 10);
model.sol('sol12').runAll;

model.result.dataset('dset4').selection.geom('geom1', 2);
model.result.dataset('dset4').selection.geom('geom1', 2);
model.result.dataset('dset4').selection.set([2]);
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset4');
model.result('pg3').setIndex('looplevel', 10, 0);
model.result('pg3').set('defaultPlotID', 'stress');
model.result('pg3').label('Stress (solid)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg3').feature('surf1').set('threshold', 'manual');
model.result('pg3').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg3').feature('surf1').set('colortable', 'Prism');
model.result('pg3').feature('surf1').set('colortabletrans', 'none');
model.result('pg3').feature('surf1').set('colorscalemode', 'linear');
model.result('pg3').feature('surf1').set('resolution', 'normal');
model.result('pg3').feature('surf1').create('def', 'Deform');
model.result('pg3').feature('surf1').feature('def').set('scaleactive', true);
model.result('pg3').feature('surf1').feature('def').set('scale', '1');
model.result('pg3').feature('surf1').feature('def').set('expr', {'u' 'w'});
model.result('pg3').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg3').label('Stress (solid)');
model.result('pg3').run;
model.result('pg3').label('Stress and Chemical Potential');
model.result('pg3').setIndex('looplevel', 9, 0);
model.result('pg3').set('plotarrayenable', true);
model.result('pg3').set('displacementlinear', 'absolute');
model.result('pg3').set('celldisp', 0.4);
model.result('pg3').feature('surf1').set('arraydim', '1');
model.result('pg3').run;
model.result('pg3').feature('surf1').label('Mixture Stress');
model.result('pg3').feature('surf1').set('expr', '-poro1.sGpzz');
model.result('pg3').feature('surf1').set('unit', 'kPa');
model.result('pg3').feature('surf1').set('descractive', true);
model.result('pg3').feature('surf1').set('descr', 'Normal stress');
model.result('pg3').feature.duplicate('surf2', 'surf1');
model.result('pg3').feature('surf2').set('arraydim', '1');
model.result('pg3').run;
model.result('pg3').feature('surf2').label('Chemical Potential');
model.result('pg3').feature('surf2').set('expr', 'mu');
model.result('pg3').feature('surf2').set('descr', 'Chemical potential');
model.result('pg3').feature('surf2').set('inheritplot', 'surf1');
model.result('pg3').run;
model.result('pg3').create('arws1', 'ArrowSurface');
model.result('pg3').feature('arws1').set('arraydim', '1');
model.result('pg3').feature('arws1').set('expr', {'dl.u' 'dl.w'});
model.result('pg3').feature('arws1').set('xnumber', 4);
model.result('pg3').feature('arws1').set('ynumber', 20);
model.result('pg3').feature('arws1').set('inheritplot', 'surf1');
model.result('pg3').feature('arws1').set('inheritarrowscale', false);
model.result('pg3').feature('arws1').set('inheritcolor', false);
model.result('pg3').feature('arws1').set('inheritrange', false);
model.result('pg3').feature('arws1').set('manualindexing', true);
model.result('pg3').feature('arws1').set('arrayindex', 1);
model.result('pg3').feature('arws1').create('def1', 'Deform');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').create('tlan1', 'TableAnnotation');
model.result('pg3').feature('tlan1').set('arraydim', '1');
model.result('pg3').feature('tlan1').set('source', 'localtable');
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 0.05, 0, 0);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', -0.015, 0, 1);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 'Normal stress $-\sigma_{zz}$', 0, 2);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 0.45, 1, 0);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', -0.015, 1, 1);
model.result('pg3').feature('tlan1').setIndex('localtablematrix', 'Chemical potential $\mu$', 1, 2);
model.result('pg3').feature('tlan1').set('latexmarkup', true);
model.result('pg3').feature('tlan1').set('showpoint', false);
model.result('pg3').feature('tlan1').set('anchorpoint', 'center');
model.result('pg3').run;
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', ['Surface: Normal stress (kPa) Surface: Chemical potential (kPa)' newline 'Arrow Surface: Total Darcy velocity field (spatial frame)']);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Thickness Stretch');
model.result('pg4').set('data', 'dset4');
model.result('pg4').set('xlabelactive', true);
model.result('pg4').set('xlabel', 'Z/H');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', '\lambda<sub>3</sub>');
model.result('pg4').set('axislimits', true);
model.result('pg4').set('xmin', 0);
model.result('pg4').set('ymin', 0.5);
model.result('pg4').set('ymax', 3.5);
model.result('pg4').set('manualgrid', true);
model.result('pg4').set('xspacing', 0.2);
model.result('pg4').set('yspacing', 0.5);
model.result('pg4').set('showlegends', false);
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg4').feature('lngr1').set('linewidth', 'preference');
model.result('pg4').feature('lngr1').selection.set([6]);
model.result('pg4').feature('lngr1').set('expr', 'solid.stchp3*stretch0');
model.result('pg4').feature('lngr1').set('descractive', true);
model.result('pg4').feature('lngr1').set('descr', 'Third principal stretch');
model.result('pg4').feature('lngr1').set('xdata', 'expr');
model.result('pg4').feature('lngr1').set('xdataexpr', '1-Z/height');
model.result('pg4').feature('lngr1').set('colorcycle', 'long');
model.result('pg4').run;
model.result('pg4').create('tlan1', 'TableAnnotation');
model.result('pg4').feature('tlan1').set('source', 'localtable');
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0, 0, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 3.2, 0, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', '$0^+$', 0, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0.06, 1, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 2.9, 1, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 1, 1, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0.09, 2, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 2.8, 2, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 2, 2, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0.14, 3, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 2.7, 3, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 5, 3, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0.2, 4, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 2.6, 4, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 10, 4, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0.28, 5, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 2.5, 5, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 20, 5, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0.43, 6, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 2.2, 6, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 50, 6, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0.59, 7, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', '2.0', 7, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 100, 7, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0.76, 8, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 1.5, 8, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', '$Dt/H_0^2 = 200$', 8, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0.8, 9, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0.8, 9, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 1000, 9, 2);
model.result('pg4').feature('tlan1').set('latexmarkup', true);
model.result('pg4').feature('tlan1').set('showpoint', false);
model.result('pg4').feature('tlan1').set('anchorpoint', 'lowerleft');
model.result('pg4').run;
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').label('Reference Data, Hong et al. (2008), t=2');
model.result.table('tbl1').importData('C:\comsoloutputpatch\hydrogel_swelling_uniaxial_t2.txt');
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').label('Reference Data, Hong et al. (2008), t=20');
model.result.table('tbl2').importData('C:\comsoloutputpatch\hydrogel_swelling_uniaxial_t20.txt');
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').label('Reference Data, Hong et al. (2008), t=100');
model.result.table('tbl3').importData('C:\comsoloutputpatch\hydrogel_swelling_uniaxial_t100.txt');
model.result('pg4').run;
model.result('pg4').create('tblp1', 'Table');
model.result('pg4').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg4').feature('tblp1').set('linewidth', 'preference');
model.result('pg4').feature('tblp1').set('linestyle', 'none');
model.result('pg4').feature('tblp1').set('linemarker', 'circle');
model.result('pg4').feature('tblp1').set('linecolor', 'fromtheme');
model.result('pg4').feature('tblp1').label('Reference Data, Hong et al. (2008), t=2');
model.result('pg4').feature.duplicate('tblp2', 'tblp1');
model.result('pg4').run;
model.result('pg4').feature('tblp2').set('table', 'tbl2');
model.result('pg4').feature('tblp2').label('Reference Data, Hong et al. (2008), t=20');
model.result('pg4').feature.duplicate('tblp3', 'tblp2');
model.result('pg4').run;
model.result('pg4').feature('tblp3').label('Reference Data, Hong et al. (2008), t=100');
model.result('pg4').feature('tblp3').set('table', 'tbl3');
model.result('pg4').run;

model.param('par2').set('chi', '0.1');
model.param('par2').set('D', '1e3[m^2/s]');
model.param('par3').set('stretch0', '2');
model.param('par3').set('mu_ref', '-2.6376e5[Pa]');

model.study('std1').feature('time').set('useadvanceddisable', true);
model.study('std1').feature('time').setSolveFor('/physics/ge', false);
model.study('std1').feature('time').set('disabledphysics', {'ge' 'solid/bndl1' 'solid/roll1' 'dl/pr3'});

model.result('pg1').run;

model.title('Large Swelling in Polymer Hydrogels');

model.description('Polymer hydrogels consist of a crosslinked network of long-chained polymers that has imbibed a large number of solvent molecules. Such materials are used in many biomedical applications, such as targeted drug delivery, tissue engineering, and stimuli-sensitive actuators. This benchmark model demonstrates how to simulate large swelling in polymer hydrogels by implementing a coupled field theory of large deformation and solvent diffusion based on the work by Hong, Zhao, Zhou, and Suo, JMPS 56:1779-1793 (2008).');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;

model.result('pg4').feature('tlan1').set('xaxisdata', 'auto');
model.result('pg4').feature('tlan1').set('yaxisdata', 'auto');
model.result('pg3').feature('tlan1').set('xaxisdata', 'auto');
model.result('pg3').feature('tlan1').set('yaxisdata', 'auto');
model.result('pg2').feature('tlan1').set('xaxisdata', 'auto');
model.result('pg2').feature('tlan1').set('yaxisdata', 'auto');

model.label('hydrogel_swelling.mph');

model.modelNode.label('Components');

out = model;
