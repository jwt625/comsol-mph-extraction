function out = model
%
% dual_rotors.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Rotordynamics_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('rotbm', 'BeamRotor', 'geom1');
model.physics('rotbm').model('comp1');

model.study.create('std1');
model.study('std1').create('eig', 'Eigenfrequency');
model.study('std1').feature('eig').setSolveFor('/physics/rotbm', true);

model.param.label('Parameters: Geometry');
model.param.set('x1', '0[cm]');
model.param.descr('x1', 'Position of station 1');
model.param.set('x2', '7.62[cm]');
model.param.descr('x2', 'Position of station 2');
model.param.set('x3', '25.4[cm]');
model.param.descr('x3', 'Position of station 3');
model.param.set('x4', '40.64[cm]');
model.param.descr('x4', 'Position of station 4');
model.param.set('x5', '45.72[cm]');
model.param.descr('x5', 'Position of station 5');
model.param.set('x6', '50.8[cm]');
model.param.descr('x6', 'Position of station 6');
model.param.set('x7', '15.24[cm]');
model.param.descr('x7', 'Position of station 7');
model.param.set('x8', '20.32[cm]');
model.param.descr('x8', 'Position of station 8');
model.param.set('x9', '35.56[cm]');
model.param.descr('x9', 'Position of station 9');
model.param.set('x10', '40.64[cm]');
model.param.descr('x10', 'Position of station 10');
model.param.set('r1', '1.52[cm]');
model.param.descr('r1', 'Radius of the inner rotor');
model.param.set('r2i', '1.905[cm]');
model.param.descr('r2i', 'Inner radius of the outer rotor');
model.param.set('r2o', '2.54[cm]');
model.param.descr('r2o', 'Outer radius of the outer rotor');
model.param.create('par2');
model.param('par2').label('Parameters: Bearing');
model.param('par2').set('k1', '27.95e6[N/m]');
model.param('par2').descr('k1', 'Stiffness, bearing at station 1');
model.param('par2').set('k4', '8.7598e6[N/m]');
model.param('par2').descr('k4', 'Stiffness, bearing between stations 4 and 10');
model.param('par2').set('k6', '17.519e6[N/m]');
model.param('par2').descr('k6', 'Stiffness, bearing at station 6');
model.param('par2').set('k7', '17.519e6[N/m]');
model.param('par2').descr('k7', 'Stiffness, bearing at station 7');
model.param.create('par3');
model.param('par3').label('Parameters: Material');
model.param('par3').set('Es', '206.9[GPa]');
model.param('par3').descr('Es', 'Young''s modulus of the rotors');
model.param('par3').set('rhos', '8304[kg/m^3]');
model.param('par3').descr('rhos', 'Density of the rotors');
model.param('par3').set('nus', '0.3');
model.param('par3').descr('nus', 'Poisson''s ratio of the rotors');
model.param('par3').set('m2', '4.904[kg]');
model.param('par3').descr('m2', 'Mass at station 2');
model.param('par3').set('m5', '4.203[kg]');
model.param('par3').descr('m5', 'Mass at station 5');
model.param('par3').set('m8', '3.327[kg]');
model.param('par3').descr('m8', 'Mass at station 8');
model.param('par3').set('m9', '2.227[kg]');
model.param('par3').descr('m9', 'Mass at station 9');
model.param('par3').set('Ip2', '0.02712[kg*m^2]');
model.param('par3').descr('Ip2', 'Polar moment of inertia at station 2');
model.param('par3').set('Ip5', '0.02034[kg*m^2]');
model.param('par3').descr('Ip5', 'Polar moment of inertia at station 5');
model.param('par3').set('Ip8', '0.01469[kg*m^2]');
model.param('par3').descr('Ip8', 'Polar moment of inertia at station 8');
model.param('par3').set('Ip9', '0.00972[kg*m^2]');
model.param('par3').descr('Ip9', 'Polar moment of inertia at station 9');
model.param('par3').set('Id2', 'Ip2/2');
model.param('par3').descr('Id2', 'Diametral moment of inertia at station 2');
model.param('par3').set('Id5', 'Ip5/2');
model.param('par3').descr('Id5', 'Diametral moment of inertia at station 5');
model.param('par3').set('Id8', 'Ip8/2');
model.param('par3').descr('Id8', 'Diametral moment of inertia at station 8');
model.param('par3').set('Id9', 'Ip9/2');
model.param('par3').descr('Id9', 'Diametral moment of inertia at station 9');
model.param.create('par4');
model.param('par4').label('Parameters: Angular speed');
model.param('par4').set('fr', '1000[rpm]');
model.param('par4').descr('fr', 'Angular speed of the inner rotor');
model.param('par4').set('fr2', '1.5*fr');
model.param('par4').descr('fr2', 'Angular speed of the outer rotor');

model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'table');
model.geom('geom1').feature('pol1').setIndex('table', 'x1', 0, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 2);
model.geom('geom1').feature('pol1').setIndex('table', 'x2', 1, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 2);
model.geom('geom1').feature('pol1').setIndex('table', 'x3', 2, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 2, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 2, 2);
model.geom('geom1').feature('pol1').setIndex('table', 'x4', 3, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 3, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 3, 2);
model.geom('geom1').feature('pol1').setIndex('table', 'x5', 4, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 4, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 4, 2);
model.geom('geom1').feature('pol1').setIndex('table', 'x6', 5, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 5, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 5, 2);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Inner Rotor');
model.geom('geom1').feature('pol1').set('contributeto', 'csel1');
model.geom('geom1').run('pol1');
model.geom('geom1').create('pol2', 'Polygon');
model.geom('geom1').feature('pol2').set('source', 'table');
model.geom('geom1').feature('pol2').setIndex('table', 'x7', 0, 0);
model.geom('geom1').feature('pol2').setIndex('table', 0, 0, 1);
model.geom('geom1').feature('pol2').setIndex('table', '6*r2o', 0, 2);
model.geom('geom1').feature('pol2').setIndex('table', 'x8', 1, 0);
model.geom('geom1').feature('pol2').setIndex('table', 0, 1, 1);
model.geom('geom1').feature('pol2').setIndex('table', '6*r2o', 1, 2);
model.geom('geom1').feature('pol2').setIndex('table', 'x9', 2, 0);
model.geom('geom1').feature('pol2').setIndex('table', 0, 2, 1);
model.geom('geom1').feature('pol2').setIndex('table', '6*r2o', 2, 2);
model.geom('geom1').feature('pol2').setIndex('table', 'x10', 3, 0);
model.geom('geom1').feature('pol2').setIndex('table', 0, 3, 1);
model.geom('geom1').feature('pol2').setIndex('table', '6*r2o', 3, 2);
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Outer Rotor');
model.geom('geom1').feature('pol2').set('contributeto', 'csel2');
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat1').propertyGroup('Enu').set('E', {'Es'});
model.material('mat1').propertyGroup('Enu').set('nu', {'nus'});
model.material('mat1').propertyGroup('def').set('density', {'rhos'});

model.physics('rotbm').prop('RotorProperties').set('rpt', 'fr');
model.physics('rotbm').feature('rcs1').set('do_circ', '2*r1');
model.physics('rotbm').create('rcs2', 'RotorCrossSection', 1);
model.physics('rotbm').feature('rcs2').selection.named('geom1_csel2_edg');
model.physics('rotbm').feature('rcs2').set('SectionType', 'PipeSection');
model.physics('rotbm').feature('rcs2').set('do_pipe', '2*r2o');
model.physics('rotbm').feature('rcs2').set('di_pipe', '2*r2i');
model.physics('rotbm').create('rsp1', 'RotorSpeed', 1);
model.physics('rotbm').feature('rsp1').selection.named('geom1_csel2_edg');
model.physics('rotbm').feature('rsp1').set('rpt', 'fr2');
model.physics('rotbm').create('disk1', 'Disk', 0);
model.physics('rotbm').feature('disk1').selection.set([2]);
model.physics('rotbm').feature('disk1').set('mass', 'm2');
model.physics('rotbm').feature('disk1').set('Ip', 'Ip2');
model.physics('rotbm').feature('disk1').set('Id', 'Id2');
model.physics('rotbm').create('disk2', 'Disk', 0);
model.physics('rotbm').feature('disk2').selection.set([9]);
model.physics('rotbm').feature('disk2').set('mass', 'm5');
model.physics('rotbm').feature('disk2').set('Ip', 'Ip5');
model.physics('rotbm').feature('disk2').set('Id', 'Id5');
model.physics('rotbm').create('disk3', 'Disk', 0);
model.physics('rotbm').feature('disk3').selection.set([4]);
model.physics('rotbm').feature('disk3').set('mass', 'm8');
model.physics('rotbm').feature('disk3').set('Ip', 'Ip8');
model.physics('rotbm').feature('disk3').set('Id', 'Id8');
model.physics('rotbm').create('disk4', 'Disk', 0);
model.physics('rotbm').feature('disk4').selection.set([6]);
model.physics('rotbm').feature('disk4').set('mass', 'm9');
model.physics('rotbm').feature('disk4').set('Ip', 'Ip9');
model.physics('rotbm').feature('disk4').set('Id', 'Id9');
model.physics('rotbm').create('jrb1', 'JournalBearing', 0);
model.physics('rotbm').feature('jrb1').selection.set([1]);
model.physics('rotbm').feature('jrb1').set('BearingModel', 'kTot');
model.physics('rotbm').feature('jrb1').set('k_u', {'k1' '0' '0' 'k1'});
model.physics('rotbm').create('msb1', 'MultiSpoolBearing', 0);
model.physics('rotbm').feature('msb1').selection.set([7]);
model.physics('rotbm').feature('msb1').selection('Destination').set([8]);
model.physics('rotbm').feature('msb1').set('DispCon', 'Flexible');
model.physics('rotbm').feature('msb1').set('ku', {'k4' '0' '0' 'k4'});
model.physics('rotbm').create('jrb2', 'JournalBearing', 0);
model.physics('rotbm').feature('jrb2').selection.set([10]);
model.physics('rotbm').feature('jrb2').set('BearingModel', 'kTot');
model.physics('rotbm').feature('jrb2').set('k_u', {'k6' '0' '0' 'k6'});
model.physics('rotbm').create('jrb3', 'JournalBearing', 0);
model.physics('rotbm').feature('jrb3').selection.set([3]);
model.physics('rotbm').feature('jrb3').set('BearingModel', 'kTot');
model.physics('rotbm').feature('jrb3').set('k_u', {'k7' '0' '0' 'k7'});

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'Es', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'Pa', 0);
model.study('std1').feature('param').setIndex('pname', 'Es', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'Pa', 0);
model.study('std1').feature('param').setIndex('pname', 'fr', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(0,1000,20000) range(20500,500,25000)', 0);
model.study('std1').feature('param').setIndex('punit', 'rpm', 0);
model.study('std1').feature('eig').set('neigsactive', true);
model.study('std1').feature('eig').set('neigs', 8);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'eig');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.5303675706526559');
model.sol('sol1').feature('v1').set('control', 'eig');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('control', 'eig');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'fr'});
model.batch('p1').set('plistarr', {'range(0,1000,20000) range(20500,500,25000)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 31, 1);
model.result('pg1').set('defaultPlotID', 'whirl');
model.result('pg1').label('Whirl (rotbm)');
model.result('pg1').create('wp1', 'Whirl');
model.result('pg1').feature('wp1').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('wp1').set('descr', 'Displacement field');
model.result('pg1').feature('wp1').set('nplanes', '1');
model.result('pg1').feature('wp1').set('nrings', '10');
model.result('pg1').feature('wp1').set('colortable', 'TrafficLight');
model.result('pg1').feature('wp1').set('ringcolor', 'blue');
model.result('pg1').feature('wp1').selection.geom('geom1', 1);
model.result('pg1').feature('wp1').selection.set([1 2 3 4 5 6 7 8]);
model.result('pg1').feature('wp1').selection.inherit(false);
model.result.evaluationGroup.create('std1EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std1EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_rotbm');
model.result.evaluationGroup('std1EvgFrq').set('data', 'dset2');
model.result.evaluationGroup('std1EvgFrq').label('Eigenfrequencies (Study 1)');
model.result.evaluationGroup('std1EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std1EvgFrq').run;
model.result('pg1').create('line1', 'Line');
model.result('pg1').feature('line1').set('expr', {'1'});
model.result('pg1').feature('line1').set('linetype', 'tube');
model.result('pg1').feature('line1').set('radiusexpr', {'rotbm.re '});
model.result('pg1').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg1').feature('line1').set('tuberadiusscale', 1);
model.result('pg1').feature('line1').set('tubeendcaps', false);
model.result('pg1').feature('line1').set('coloring', 'uniform');
model.result('pg1').feature('line1').set('color', 'custom');
model.result('pg1').feature('line1').set('customcolor', [0.9803921580314636 0.7843137383460999 0.7058823704719543]);
model.result('pg1').feature('line1').set('threshold', 'manual');
model.result('pg1').feature('line1').set('thresholdvalue', 0.2);
model.result('pg1').feature('line1').set('titletype', 'none');
model.result('pg1').feature('line1').label('Rotor');
model.result('pg1').feature('line1').create('def', 'Deform');
model.result('pg1').feature('line1').feature('def').set('scaleactive', true);
model.result('pg1').feature('line1').feature('def').set('scale', '1');
model.result('pg1').feature('line1').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj1', 'PointTrajectories');
model.result('pg1').feature('pttraj1').set('plotdata', 'points');
model.result('pg1').feature('pttraj1').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj1').selection.set([2]);
model.result('pg1').feature('pttraj1').selection.inherit(false);
model.result('pg1').feature('pttraj1').set('linetype', 'none');
model.result('pg1').feature('pttraj1').set('expr', {'X' 'Y' 'Z'});
model.result('pg1').feature('pttraj1').set('pointtype', 'ellipse');
model.result('pg1').feature('pttraj1').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj1').set('custompointcolor', [0.8039215803146362 0.5215686559677124 0.24705882370471954]);
model.result('pg1').feature('pttraj1').set('semimajorexpr', {'0.5*rotbm.disk1.de*rotbm.e20x ' '0.5*rotbm.disk1.de*rotbm.e20y ' '0.5*rotbm.disk1.de*rotbm.e20z '});
model.result('pg1').feature('pttraj1').set('semiminorexpr', {'0.5*rotbm.disk1.de*rotbm.e30x ' '0.5*rotbm.disk1.de*rotbm.e30y ' '0.5*rotbm.disk1.de*rotbm.e30z '});
model.result('pg1').feature('pttraj1').set('ellipsecount', 1);
model.result('pg1').feature('pttraj1').set('ellipsearrowscaleactive', true);
model.result('pg1').feature('pttraj1').set('ellipsearrowtype', 'none');
model.result('pg1').feature('pttraj1').set('titletype', 'none');
model.result('pg1').feature('pttraj1').label('Disk 1');
model.result('pg1').feature('pttraj1').create('def', 'Deform');
model.result('pg1').feature('pttraj1').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj1').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj1').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj2', 'PointTrajectories');
model.result('pg1').feature('pttraj2').set('plotdata', 'points');
model.result('pg1').feature('pttraj2').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj2').selection.set([9]);
model.result('pg1').feature('pttraj2').selection.inherit(false);
model.result('pg1').feature('pttraj2').set('linetype', 'none');
model.result('pg1').feature('pttraj2').set('expr', {'X' 'Y' 'Z'});
model.result('pg1').feature('pttraj2').set('pointtype', 'ellipse');
model.result('pg1').feature('pttraj2').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj2').set('custompointcolor', [0.8039215803146362 0.5215686559677124 0.24705882370471954]);
model.result('pg1').feature('pttraj2').set('semimajorexpr', {'0.5*rotbm.disk2.de*rotbm.e20x ' '0.5*rotbm.disk2.de*rotbm.e20y ' '0.5*rotbm.disk2.de*rotbm.e20z '});
model.result('pg1').feature('pttraj2').set('semiminorexpr', {'0.5*rotbm.disk2.de*rotbm.e30x ' '0.5*rotbm.disk2.de*rotbm.e30y ' '0.5*rotbm.disk2.de*rotbm.e30z '});
model.result('pg1').feature('pttraj2').set('ellipsecount', 1);
model.result('pg1').feature('pttraj2').set('ellipsearrowscaleactive', true);
model.result('pg1').feature('pttraj2').set('ellipsearrowtype', 'none');
model.result('pg1').feature('pttraj2').set('titletype', 'none');
model.result('pg1').feature('pttraj2').label('Disk 2');
model.result('pg1').feature('pttraj2').create('def', 'Deform');
model.result('pg1').feature('pttraj2').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj2').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj2').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj3', 'PointTrajectories');
model.result('pg1').feature('pttraj3').set('plotdata', 'points');
model.result('pg1').feature('pttraj3').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj3').selection.set([4]);
model.result('pg1').feature('pttraj3').selection.inherit(false);
model.result('pg1').feature('pttraj3').set('linetype', 'none');
model.result('pg1').feature('pttraj3').set('expr', {'X' 'Y' 'Z'});
model.result('pg1').feature('pttraj3').set('pointtype', 'ellipse');
model.result('pg1').feature('pttraj3').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj3').set('custompointcolor', [0.8039215803146362 0.5215686559677124 0.24705882370471954]);
model.result('pg1').feature('pttraj3').set('semimajorexpr', {'0.5*rotbm.disk3.de*rotbm.e20x ' '0.5*rotbm.disk3.de*rotbm.e20y ' '0.5*rotbm.disk3.de*rotbm.e20z '});
model.result('pg1').feature('pttraj3').set('semiminorexpr', {'0.5*rotbm.disk3.de*rotbm.e30x ' '0.5*rotbm.disk3.de*rotbm.e30y ' '0.5*rotbm.disk3.de*rotbm.e30z '});
model.result('pg1').feature('pttraj3').set('ellipsecount', 1);
model.result('pg1').feature('pttraj3').set('ellipsearrowscaleactive', true);
model.result('pg1').feature('pttraj3').set('ellipsearrowtype', 'none');
model.result('pg1').feature('pttraj3').set('titletype', 'none');
model.result('pg1').feature('pttraj3').label('Disk 3');
model.result('pg1').feature('pttraj3').create('def', 'Deform');
model.result('pg1').feature('pttraj3').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj3').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj3').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj4', 'PointTrajectories');
model.result('pg1').feature('pttraj4').set('plotdata', 'points');
model.result('pg1').feature('pttraj4').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj4').selection.set([6]);
model.result('pg1').feature('pttraj4').selection.inherit(false);
model.result('pg1').feature('pttraj4').set('linetype', 'none');
model.result('pg1').feature('pttraj4').set('expr', {'X' 'Y' 'Z'});
model.result('pg1').feature('pttraj4').set('pointtype', 'ellipse');
model.result('pg1').feature('pttraj4').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj4').set('custompointcolor', [0.8039215803146362 0.5215686559677124 0.24705882370471954]);
model.result('pg1').feature('pttraj4').set('semimajorexpr', {'0.5*rotbm.disk4.de*rotbm.e20x ' '0.5*rotbm.disk4.de*rotbm.e20y ' '0.5*rotbm.disk4.de*rotbm.e20z '});
model.result('pg1').feature('pttraj4').set('semiminorexpr', {'0.5*rotbm.disk4.de*rotbm.e30x ' '0.5*rotbm.disk4.de*rotbm.e30y ' '0.5*rotbm.disk4.de*rotbm.e30z '});
model.result('pg1').feature('pttraj4').set('ellipsecount', 1);
model.result('pg1').feature('pttraj4').set('ellipsearrowscaleactive', true);
model.result('pg1').feature('pttraj4').set('ellipsearrowtype', 'none');
model.result('pg1').feature('pttraj4').set('titletype', 'none');
model.result('pg1').feature('pttraj4').label('Disk 4');
model.result('pg1').feature('pttraj4').create('def', 'Deform');
model.result('pg1').feature('pttraj4').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj4').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj4').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj5', 'PointTrajectories');
model.result('pg1').feature('pttraj5').set('plotdata', 'points');
model.result('pg1').feature('pttraj5').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj5').selection.set([1]);
model.result('pg1').feature('pttraj5').selection.inherit(false);
model.result('pg1').feature('pttraj5').set('linetype', 'none');
model.result('pg1').feature('pttraj5').set('pointtype', 'arrow');
model.result('pg1').feature('pttraj5').set('expr', {'X-1.0*rotbm.re*rotbm.jrb1.e3gx ' 'Y-1.0*rotbm.re*rotbm.jrb1.e3gy ' 'Z-1.0*rotbm.re*rotbm.jrb1.e3gz '});
model.result('pg1').feature('pttraj5').set('arrowexpr', {'rotbm.re*rotbm.jrb1.e3gx ' 'rotbm.re*rotbm.jrb1.e3gy ' 'rotbm.re*rotbm.jrb1.e3gz '});
model.result('pg1').feature('pttraj5').set('arrowtype', 'arrowhead');
model.result('pg1').feature('pttraj5').set('arrowbase', 'head');
model.result('pg1').feature('pttraj5').set('arrowscale', '10');
model.result('pg1').feature('pttraj5').set('arrowscaleactive', true);
model.result('pg1').feature('pttraj5').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj5').set('custompointcolor', [0.5882353186607361 0.8627451062202454 0.5882353186607361]);
model.result('pg1').feature('pttraj5').set('titletype', 'none');
model.result('pg1').feature('pttraj5').label('Journal Bearing 1');
model.result('pg1').feature('pttraj5').create('def', 'Deform');
model.result('pg1').feature('pttraj5').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj5').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj5').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj6', 'PointTrajectories');
model.result('pg1').feature('pttraj6').set('plotdata', 'points');
model.result('pg1').feature('pttraj6').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj6').selection.set([10]);
model.result('pg1').feature('pttraj6').selection.inherit(false);
model.result('pg1').feature('pttraj6').set('linetype', 'none');
model.result('pg1').feature('pttraj6').set('pointtype', 'arrow');
model.result('pg1').feature('pttraj6').set('expr', {'X-1.0*rotbm.re*rotbm.jrb2.e3gx ' 'Y-1.0*rotbm.re*rotbm.jrb2.e3gy ' 'Z-1.0*rotbm.re*rotbm.jrb2.e3gz '});
model.result('pg1').feature('pttraj6').set('arrowexpr', {'rotbm.re*rotbm.jrb2.e3gx ' 'rotbm.re*rotbm.jrb2.e3gy ' 'rotbm.re*rotbm.jrb2.e3gz '});
model.result('pg1').feature('pttraj6').set('arrowtype', 'arrowhead');
model.result('pg1').feature('pttraj6').set('arrowbase', 'head');
model.result('pg1').feature('pttraj6').set('arrowscale', '10');
model.result('pg1').feature('pttraj6').set('arrowscaleactive', true);
model.result('pg1').feature('pttraj6').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj6').set('custompointcolor', [0.5882353186607361 0.8627451062202454 0.5882353186607361]);
model.result('pg1').feature('pttraj6').set('titletype', 'none');
model.result('pg1').feature('pttraj6').label('Journal Bearing 2');
model.result('pg1').feature('pttraj6').create('def', 'Deform');
model.result('pg1').feature('pttraj6').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj6').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj6').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj7', 'PointTrajectories');
model.result('pg1').feature('pttraj7').set('plotdata', 'points');
model.result('pg1').feature('pttraj7').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj7').selection.set([3]);
model.result('pg1').feature('pttraj7').selection.inherit(false);
model.result('pg1').feature('pttraj7').set('linetype', 'none');
model.result('pg1').feature('pttraj7').set('pointtype', 'arrow');
model.result('pg1').feature('pttraj7').set('expr', {'X-1.0*rotbm.re*rotbm.jrb3.e3gx ' 'Y-1.0*rotbm.re*rotbm.jrb3.e3gy ' 'Z-1.0*rotbm.re*rotbm.jrb3.e3gz '});
model.result('pg1').feature('pttraj7').set('arrowexpr', {'rotbm.re*rotbm.jrb3.e3gx ' 'rotbm.re*rotbm.jrb3.e3gy ' 'rotbm.re*rotbm.jrb3.e3gz '});
model.result('pg1').feature('pttraj7').set('arrowtype', 'arrowhead');
model.result('pg1').feature('pttraj7').set('arrowbase', 'head');
model.result('pg1').feature('pttraj7').set('arrowscale', '10');
model.result('pg1').feature('pttraj7').set('arrowscaleactive', true);
model.result('pg1').feature('pttraj7').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj7').set('custompointcolor', [0.5882353186607361 0.8627451062202454 0.5882353186607361]);
model.result('pg1').feature('pttraj7').set('titletype', 'none');
model.result('pg1').feature('pttraj7').label('Journal Bearing 3');
model.result('pg1').feature('pttraj7').create('def', 'Deform');
model.result('pg1').feature('pttraj7').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj7').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj7').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').set('view', 'new');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('line1').active(false);
model.result('pg1').feature('pttraj1').active(false);
model.result('pg1').feature('pttraj2').active(false);
model.result('pg1').feature('pttraj3').active(false);
model.result('pg1').feature('pttraj4').active(false);
model.result('pg1').feature('pttraj5').active(false);
model.result('pg1').feature('pttraj6').active(false);
model.result('pg1').feature('pttraj7').active(false);
model.result('pg1').run;
model.result('pg1').set('looplevel', [2 31]);
model.result('pg1').run;
model.result('pg1').set('looplevel', [4 31]);
model.result('pg1').run;
model.result('pg1').set('looplevel', [6 31]);
model.result('pg1').run;
model.result('pg1').set('looplevel', [8 31]);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('line1').active(true);
model.result('pg1').feature('pttraj1').active(true);
model.result('pg1').feature('pttraj2').active(true);
model.result('pg1').feature('pttraj3').active(true);
model.result('pg1').feature('pttraj4').active(true);
model.result('pg1').feature('pttraj5').active(true);
model.result('pg1').feature('pttraj6').active(true);
model.result('pg1').feature('pttraj7').active(true);
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset2');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('unit', {''});
model.result('pg2').feature('glob1').set('expr', {'rotbm.omegaf'});
model.result('pg2').feature('glob1').set('descr', {'Forward angular frequency'});
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').feature('glob1').set('xdataexpr', 'rotbm.Ovg');
model.result('pg2').feature('glob1').set('xdataunit', 'rad/s');
model.result('pg2').feature('glob1').label('Forward Whirl Mode');
model.result('pg2').feature('glob1').set('linestyle', 'dashed');
model.result('pg2').feature('glob1').set('linecolor', 'blue');
model.result('pg2').feature('glob1').set('linewidth', 3);
model.result('pg2').feature('glob1').set('legend', false);
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'outer');
model.result('pg2').feature('glob1').create('gmrk1', 'GraphMarker');
model.result('pg2').feature('glob1').feature('gmrk1').set('displaymode', 'intersection');
model.result('pg2').feature('glob1').feature('gmrk1').set('intersectionline', 'identity');
model.result('pg2').feature('glob1').feature('gmrk1').set('precision', 4);
model.result('pg2').feature('glob1').feature('gmrk1').set('labelprefix', 'f: ');
model.result('pg2').feature('glob1').feature('gmrk1').set('pointradius', 4);
model.result('pg2').feature('glob1').feature('gmrk1').set('color', 'custom');
model.result('pg2').feature('glob1').feature('gmrk1').set('customcolor', [1 0.501960813999176 0.250980406999588]);
model.result('pg2').feature('glob1').feature('gmrk1').set('anchorpoint', 'lowermiddle');
model.result('pg2').set('defaultPlotID', 'campbell');
model.result('pg2').label('Campbell Plot (rotbm)');
model.result('pg2').create('glob2', 'Global');
model.result('pg2').feature('glob2').set('expr', {'rotbm.omegab'});
model.result('pg2').feature('glob2').set('xdata', 'expr');
model.result('pg2').feature('glob2').set('xdataexpr', 'rotbm.Ovg');
model.result('pg2').feature('glob2').set('xdataunit', 'rad/s');
model.result('pg2').feature('glob2').set('linestyle', 'dotted');
model.result('pg2').feature('glob2').set('linecolor', 'blue');
model.result('pg2').feature('glob2').set('linewidth', 3);
model.result('pg2').feature('glob2').set('legend', false);
model.result('pg2').feature('glob2').label('Backward Whirl Mode');
model.result('pg2').feature('glob2').set('xdatasolnumtype', 'outer');
model.result('pg2').feature('glob2').create('gmrk1', 'GraphMarker');
model.result('pg2').feature('glob2').feature('gmrk1').set('displaymode', 'intersection');
model.result('pg2').feature('glob2').feature('gmrk1').set('intersectionline', 'identity');
model.result('pg2').feature('glob2').feature('gmrk1').set('precision', 4);
model.result('pg2').feature('glob2').feature('gmrk1').set('labelprefix', 'b: ');
model.result('pg2').feature('glob2').feature('gmrk1').set('pointradius', 4);
model.result('pg2').feature('glob2').feature('gmrk1').set('color', 'custom');
model.result('pg2').feature('glob2').feature('gmrk1').set('customcolor', [0.7490196228027344 0.1411764770746231 0.3686274588108063]);
model.result('pg2').feature('glob2').feature('gmrk1').set('anchorpoint', 'uppermiddle');
model.result('pg2').create('glob3', 'Global');
model.result('pg2').feature('glob3').set('expr', {'rotbm.omegan'});
model.result('pg2').feature('glob3').set('xdata', 'expr');
model.result('pg2').feature('glob3').set('xdataexpr', 'rotbm.Ovg');
model.result('pg2').feature('glob3').set('xdataunit', 'rad/s');
model.result('pg2').feature('glob3').set('linecolor', 'blue');
model.result('pg2').feature('glob3').set('linewidth', 3);
model.result('pg2').feature('glob3').set('legend', false);
model.result('pg2').feature('glob3').label('Planar or Torsional Mode');
model.result('pg2').feature('glob3').set('xdatasolnumtype', 'outer');
model.result('pg2').feature('glob3').create('gmrk1', 'GraphMarker');
model.result('pg2').feature('glob3').feature('gmrk1').set('displaymode', 'intersection');
model.result('pg2').feature('glob3').feature('gmrk1').set('intersectionline', 'identity');
model.result('pg2').feature('glob3').feature('gmrk1').set('precision', 4);
model.result('pg2').feature('glob3').feature('gmrk1').set('labelprefix', 't,p: ');
model.result('pg2').feature('glob3').feature('gmrk1').set('pointradius', 4);
model.result('pg2').feature('glob3').feature('gmrk1').set('color', 'custom');
model.result('pg2').feature('glob3').feature('gmrk1').set('customcolor', [0.03529411926865578 0.4627451002597809 0.03529411926865578]);
model.result('pg2').feature('glob3').feature('gmrk1').set('anchorpoint', 'uppermiddle');
model.result('pg2').create('glob4', 'Global');
model.result('pg2').feature('glob4').set('expr', {'if(rotbm.Ovg<=1.4*rotbm.omega,rotbm.Ovg,NaN)'});
model.result('pg2').feature('glob4').set('data', 'dset2');
model.result('pg2').feature('glob4').set('xdata', 'expr');
model.result('pg2').feature('glob4').set('xdataexpr', 'rotbm.Ovg');
model.result('pg2').feature('glob4').set('xdataunit', 'rad/s');
model.result('pg2').feature('glob4').set('linecolor', 'red');
model.result('pg2').feature('glob4').set('linewidth', 3);
model.result('pg2').feature('glob4').label('omega=Omega');
model.result('pg2').feature('glob4').set('xdatasolnumtype', 'outer');
model.result('pg2').feature('glob4').set('solutionparams', 'manual');
model.result('pg2').feature('glob4').setIndex('looplevelinput', 'last', 0);
model.result('pg2').feature('glob4').set('legend', true);
model.result('pg2').feature('glob4').set('legendmethod', 'manual');
model.result('pg2').feature('glob4').setIndex('legends', '\omega=\Omega', 0);
model.result('pg2').set('ylabel', 'Angular frequency (rad/s)');
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Campbell plot');
model.result('pg2').label('Campbell Plot (rotbm)');
model.result('pg2').run;
model.result('pg2').set('xlabelactive', true);
model.result('pg2').set('xlabel', 'Rotor speed (rad/s)');
model.result('pg2').run;
model.result('pg2').feature('glob1').feature('gmrk1').set('intersectionline', 'general');
model.result('pg2').feature('glob1').feature('gmrk1').set('generalcoeffa', '1 1.5');
model.result('pg2').feature('glob1').feature('gmrk1').set('generalcoeffb', -1);
model.result('pg2').feature('glob1').feature('gmrk1').set('generalcoeffc', 0);
model.result('pg2').feature('glob1').feature('gmrk1').set('inclxcoord', false);
model.result('pg2').run;
model.result('pg2').feature('glob2').feature('gmrk1').set('intersectionline', 'general');
model.result('pg2').feature('glob2').feature('gmrk1').set('generalcoeffa', '1 1.5');
model.result('pg2').feature('glob2').feature('gmrk1').set('generalcoeffb', -1);
model.result('pg2').feature('glob2').feature('gmrk1').set('generalcoeffc', 0);
model.result('pg2').feature('glob2').feature('gmrk1').set('inclxcoord', false);
model.result('pg2').run;
model.result('pg2').feature('glob4').setIndex('legends', '\omega=\Omega<sub>1</sub>', 0);
model.result('pg2').feature.duplicate('glob5', 'glob4');
model.result('pg2').run;
model.result('pg2').feature('glob5').setIndex('expr', 'if(rotbm.Ovg<=0.8*rotbm.omega,2*pi[rad]*fr2,NaN)', 0);
model.result('pg2').feature('glob5').setIndex('unit', '', 0);
model.result('pg2').feature('glob5').setIndex('descr', '', 0);
model.result('pg2').feature('glob5').setIndex('legends', '\omega=\Omega<sub>2</sub>', 0);
model.result('pg2').feature('glob5').set('linecolor', 'magenta');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg1').run;

model.title('Critical Speed of a Dual Rotor System');

model.description('Due to the demand for larger power with a smaller size, dual shaft systems with intershaft bearings are becoming a standard configuration for gas turbine engines. Such systems consist of two coaxial rotors running at different speeds, interlinked through a multi-spool bearing. In this example, eigenfrequency analysis is performed for such a dual rotor system in order to determine the critical speed. Cross-exciting vibrations through multi-spool bearings makes the dynamic behavior of one shaft dependent on the dynamic behavior of the other.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;
model.sol('sol20').clearSolutionData;
model.sol('sol21').clearSolutionData;
model.sol('sol22').clearSolutionData;
model.sol('sol23').clearSolutionData;
model.sol('sol24').clearSolutionData;
model.sol('sol25').clearSolutionData;
model.sol('sol26').clearSolutionData;
model.sol('sol27').clearSolutionData;
model.sol('sol28').clearSolutionData;
model.sol('sol29').clearSolutionData;
model.sol('sol30').clearSolutionData;
model.sol('sol31').clearSolutionData;
model.sol('sol32').clearSolutionData;
model.sol('sol33').clearSolutionData;

model.label('dual_rotors.mph');

model.modelNode.label('Components');

out = model;
