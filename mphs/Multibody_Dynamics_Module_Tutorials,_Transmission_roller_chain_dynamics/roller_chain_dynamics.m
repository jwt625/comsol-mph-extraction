function out = model
%
% roller_chain_dynamics.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Tutorials,_Transmission');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/mbd', true);

model.param.set('omega', '10[rad/s]');
model.param.descr('omega', 'Angular velocity of drive shaft');
model.param.set('T_ext', '0.01[N*m]');
model.param.descr('T_ext', 'External torque');
model.param.set('I_ext', '1e-5[kg*m^2]');
model.param.descr('I_ext', 'External moment of inertia');
model.param.set('kb', '1e5[N/m]');
model.param.descr('kb', 'Spring constant, bushing');
model.param.set('cb', '1e5[N*s/m]');
model.param.descr('cb', 'Damping coefficient, bushing');
model.param.set('para', '0');
model.param.descr('para', 'Load parameter');

model.func.create('step1', 'Step');
model.func('step1').model('comp1');
model.func('step1').set('location', '5[ms]');
model.func('step1').set('smooth', '1e-2');
model.func.duplicate('step2', 'step1');
model.func('step2').set('location', '15[ms]');

model.geom.load({'part1'}, 'Multibody_Dynamics_Module/2D/Roller_Chains/roller_chain_sprocket_assembly_2d.mph', {'part1'});
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', true);
model.geom('geom1').run('pi1');
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('createpairs', false);
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.physics('mbd').prop('d').set('d', '2[mm]');
model.physics('mbd').create('cdr1', 'ChainDrive', -1);
model.physics('mbd').feature('cdr1').set('SprocketType', 'RigidSprocket');
model.physics('mbd').feature('cdr1').set('pc', 'mbd.cdr1.Eequ*(0.1*mbd.diag)/1e5');
model.physics('mbd').feature('cdr1').set('JointElasticity', 'ElasticJoint');
model.physics('mbd').feature('cdr1').feature('je1').set('k_u', {'kb' '0' '0' '0' 'kb' '0' '0' '0' 'kb'});
model.physics('mbd').feature('cdr1').feature('je1').set('c_u', {'cb' '0' '0' '0' 'cb' '0' '0' '0' 'cb'});
model.physics('mbd').feature('cdr1').runCommand('createChainDrive');
model.physics('mbd').feature('rd2').create('mmi1', 'MassInertia', -1);
model.physics('mbd').feature('rd2').feature('mmi1').set('Iz', 'I_ext*para');
model.physics('mbd').feature('hgj1').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('hgj1').feature('pm1').set('PrescribedMotionThroughRotational', 'AngularVelocity');
model.physics('mbd').feature('hgj1').feature('pm1').set('omegap', 'omega*step1(t)');
model.physics('mbd').feature('hgj2').create('afm1', 'AppliedForceAndMoment', -1);
model.physics('mbd').feature('hgj2').feature('afm1').set('AppliedOnSelectedAttachment', 'Joint');
model.physics('mbd').feature('hgj2').feature('afm1').set('Ms', '-T_ext*step2(t)*para');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('Flj_1', 'sqrt(mbd.cdr1hgj1.F_elx^2+mbd.cdr1hgj1.F_ely^2)');
model.variable('var1').descr('Flj_1', 'Link joint force (elastic) , joint 1');

model.study('std1').feature('time').set('tlist', 'range(0,1e-4,0.3)');
model.study('std1').feature('time').set('usertol', true);
model.study('std1').feature('time').set('useparam', true);
model.study('std1').feature('time').setIndex('pname', 'omega', 0);
model.study('std1').feature('time').setIndex('plistarr', '', 0);
model.study('std1').feature('time').setIndex('punit', 'rad/s', 0);
model.study('std1').feature('time').setIndex('pname', 'omega', 0);
model.study('std1').feature('time').setIndex('plistarr', '', 0);
model.study('std1').feature('time').setIndex('punit', 'rad/s', 0);
model.study('std1').feature('time').setIndex('pname', 'para', 0);
model.study('std1').feature('time').setIndex('plistarr', '0 1', 0);
model.study('std1').feature('time').setIndex('punit', '', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.0014444476869958215');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scaleval', '0.0014444476869958215');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.14444476869958214');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,1e-4,0.3)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').create('tp1', 'TimeParametric');
model.sol('sol1').feature('t1').feature.remove('tpDef');
model.sol('sol1').feature('t1').feature('tp1').set('control', 'time');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 5);
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Displacement (mbd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 3001, 0);
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Velocity (mbd)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 3001, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').set('defaultPlotID', 'velocity');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('expr', 'mod(dom,10)');
model.result('pg2').feature('surf1').set('unit', '1');
model.result('pg2').feature('surf1').set('colortable', 'Cyclic');
model.result('pg2').feature('surf1').set('colorlegend', false);
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature('surf1').feature.create('def1', 'Deform');
model.result('pg2').feature('surf1').feature('def1').label('Deformation');
model.result('pg2').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg2').feature.create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').label('Arrow Line');
model.result('pg2').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY'});
model.result('pg2').feature('arwl1').set('placement', 'elements');
model.result('pg2').feature('arwl1').set('data', 'parent');
model.result('pg2').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg2').feature('arwl1').feature('def1').label('Deformation');
model.result('pg2').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg1').run;

model.view('view1').set('showgrid', false);

model.result('pg1').run;
model.result.duplicate('pg3', 'pg1');
model.result('pg3').run;
model.result('pg3').label('Link Motion [Unloaded]');
model.result('pg3').setIndex('looplevel', 1, 1);
model.result('pg3').run;
model.result('pg3').feature('surf1').label('Surface: All');
model.result('pg3').feature('surf1').set('expr', '1');
model.result('pg3').feature('surf1').set('titletype', 'none');
model.result('pg3').feature('surf1').set('coloring', 'uniform');
model.result('pg3').feature('surf1').set('color', 'gray');
model.result('pg3').feature.duplicate('surf2', 'surf1');
model.result('pg3').run;
model.result('pg3').feature('surf2').label('Surface: Roller Plates');
model.result('pg3').feature('surf2').set('color', 'yellow');
model.result('pg3').feature('surf2').create('sel1', 'Selection');
model.result('pg3').feature('surf2').feature('sel1').selection.named('geom1_pi1_unisel4');
model.result('pg3').run;
model.result('pg3').feature.duplicate('surf3', 'surf2');
model.result('pg3').run;
model.result('pg3').feature('surf3').label('Surface: Link');
model.result('pg3').feature('surf3').set('color', 'magenta');
model.result('pg3').run;
model.result('pg3').feature('surf3').feature('sel1').selection.set([89]);
model.result('pg3').run;
model.result('pg3').create('arwl1', 'ArrowLine');
model.result('pg3').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY'});
model.result('pg3').feature('arwl1').set('arrowcount', 50);
model.result('pg3').feature('arwl1').create('def1', 'Deform');
model.result('pg3').run;
model.result('pg3').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg3').feature('arwl1').feature('def1').set('scale', 1);
model.result('pg3').run;
model.result('pg3').feature('arwl1').create('sel1', 'Selection');
model.result('pg3').feature('arwl1').feature('sel1').selection.named('geom1_pi1_unisel11');
model.result('pg3').run;
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Link Motion [Loaded]');
model.result('pg4').setIndex('looplevel', 2, 1);
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').run;
model.result('pg5').label('Contact Forces [Unloaded]');
model.result('pg5').setIndex('looplevel', 1, 1);
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').create('arwl1', 'ArrowLine');
model.result('pg5').feature('arwl1').set('expr', {'mbd.cdr1.Fnx' 'v'});
model.result('pg5').feature('arwl1').setIndex('expr', 'mbd.cdr1.Fny', 1);
model.result('pg5').feature('arwl1').create('def1', 'Deform');
model.result('pg5').run;
model.result('pg5').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg5').feature('arwl1').feature('def1').set('scale', 1);
model.result('pg5').run;
model.result('pg5').feature('arwl1').set('arrowcount', 2000);
model.result('pg5').run;
model.result('pg5').create('line1', 'Line');
model.result('pg5').feature('line1').set('expr', 'mbd.cdr1.F');
model.result('pg5').feature('line1').set('linetype', 'tube');
model.result('pg5').feature('line1').set('colortable', 'RainbowLight');
model.result('pg5').feature('line1').create('def1', 'Deform');
model.result('pg5').run;
model.result('pg5').feature('line1').feature('def1').set('scaleactive', true);
model.result('pg5').feature('line1').feature('def1').set('scale', 1);
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Contact Forces [Loaded]');
model.result('pg6').setIndex('looplevel', 2, 1);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Link Joint Rotation');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('xlabel', 'Time (s)');
model.result('pg7').set('ylabel', 'Rotation (rad)');
model.result('pg7').set('legendpos', 'upperleft');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').setIndex('expr', 'mbd.cdr1hgj1.th', 0);
model.result('pg7').feature('glob1').setIndex('unit', 'rad', 0);
model.result('pg7').feature('glob1').setIndex('descr', 'Relative rotation', 0);
model.result('pg7').feature('glob1').set('legendmethod', 'manual');
model.result('pg7').feature('glob1').setIndex('legends', 'Unloaded', 0);
model.result('pg7').feature('glob1').setIndex('legends', 'Loaded', 1);
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('Link Joint Force, Magnitude');
model.result('pg8').set('ylabel', 'Force [N]');
model.result('pg8').set('legendpos', 'upperright');
model.result('pg8').run;
model.result('pg8').feature('glob1').setIndex('expr', 'Flj_1', 0);
model.result('pg8').feature('glob1').setIndex('unit', 'N', 0);
model.result('pg8').feature('glob1').setIndex('descr', 'Link joint force, joint 1', 0);
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Sprocket Rotation');
model.result('pg9').set('titletype', 'label');
model.result('pg9').set('xlabelactive', true);
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('xlabel', 'Time (s)');
model.result('pg9').set('ylabel', 'Rotation (rad)');
model.result('pg9').set('legendpos', 'upperleft');
model.result('pg9').create('glob1', 'Global');
model.result('pg9').feature('glob1').set('markerpos', 'datapoints');
model.result('pg9').feature('glob1').set('linewidth', 'preference');
model.result('pg9').feature('glob1').set('data', 'dset1');
model.result('pg9').feature('glob1').setIndex('looplevelinput', 'first', 1);
model.result('pg9').feature('glob1').setIndex('expr', 'mbd.hgj1.th', 0);
model.result('pg9').feature('glob1').setIndex('unit', 'rad', 0);
model.result('pg9').feature('glob1').setIndex('descr', 'Relative rotation', 0);
model.result('pg9').feature('glob1').set('legendmethod', 'manual');
model.result('pg9').feature('glob1').setIndex('legends', 'Driver', 0);
model.result('pg9').feature.duplicate('glob2', 'glob1');
model.result('pg9').run;
model.result('pg9').feature('glob2').setIndex('looplevelinput', 'all', 1);
model.result('pg9').feature('glob2').setIndex('expr', 'mbd.hgj2.th', 0);
model.result('pg9').feature('glob2').setIndex('unit', 'rad', 0);
model.result('pg9').feature('glob2').setIndex('descr', 'Relative rotation', 0);
model.result('pg9').feature('glob2').setIndex('legends', 'Driven (unloaded)', 0);
model.result('pg9').feature('glob2').setIndex('legends', 'Driven (loaded)', 1);
model.result('pg9').run;
model.result.duplicate('pg10', 'pg9');
model.result('pg10').run;
model.result('pg10').label('Sprocket Angular Velocity');
model.result('pg10').set('ylabel', 'Angular velocity (rad/s)');
model.result('pg10').set('legendpos', 'upperright');
model.result('pg10').run;
model.result('pg10').feature('glob1').setIndex('expr', 'mbd.hgj1.Tht', 0);
model.result('pg10').feature('glob1').setIndex('unit', 'rad/s', 0);
model.result('pg10').feature('glob1').setIndex('descr', 'Relative angular velocity', 0);
model.result('pg10').run;
model.result('pg10').feature('glob2').setIndex('expr', 'mbd.hgj2.Tht', 0);
model.result('pg10').feature('glob2').setIndex('unit', 'rad/s', 0);
model.result('pg10').feature('glob2').setIndex('descr', 'Relative angular velocity', 0);
model.result('pg10').run;
model.result.duplicate('pg11', 'pg10');
model.result('pg11').run;
model.result('pg11').label('Sprocket Angular Acceleration');
model.result('pg11').set('ylabel', 'Angular acceleration (rad/s^2)');
model.result('pg11').run;
model.result('pg11').feature('glob1').setIndex('expr', 'mbd.hgj1.Thtt', 0);
model.result('pg11').feature('glob1').setIndex('unit', 'rad/s^2', 0);
model.result('pg11').feature('glob1').setIndex('descr', 'Relative rotation, second time derivative', 0);
model.result('pg11').run;
model.result('pg11').feature('glob2').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg11').feature('glob2').setIndex('looplevelindices', 'range(2,1,3001)', 0);
model.result('pg11').feature('glob2').setIndex('expr', 'mbd.hgj2.Thtt', 0);
model.result('pg11').feature('glob2').setIndex('unit', 'rad/s^2', 0);
model.result('pg11').feature('glob2').setIndex('descr', 'Relative rotation, second time derivative', 0);
model.result('pg11').run;
model.result.duplicate('pg12', 'pg11');
model.result('pg12').run;
model.result('pg12').label('Sprocket Angular Acceleration [Frequency]');
model.result('pg12').set('xlabelactive', false);
model.result('pg12').set('ylabelactive', false);
model.result('pg12').run;
model.result('pg12').feature('glob1').set('xdata', 'fourier');
model.result('pg12').feature('glob1').set('fouriershow', 'spectrum');
model.result('pg12').run;
model.result('pg12').feature('glob2').set('xdata', 'fourier');
model.result('pg12').feature('glob2').set('fouriershow', 'spectrum');
model.result('pg12').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').label('Displacement');
model.result.export('anim1').set('maxframes', 100);
model.result.export.duplicate('anim2', 'anim1');
model.result.export('anim2').showFrame;
model.result.export('anim2').label('Link Motion [Unloaded]');
model.result.export('anim2').set('plotgroup', 'pg3');
model.result.export.duplicate('anim3', 'anim2');
model.result.export('anim3').showFrame;
model.result.export('anim3').label('Link Motion [Loaded]');
model.result.export('anim3').set('plotgroup', 'pg4');
model.result.export.duplicate('anim4', 'anim3');
model.result.export('anim4').showFrame;
model.result.export('anim4').label('Contact Forces [Unloaded]');
model.result.export('anim4').set('plotgroup', 'pg5');
model.result.export('anim4').set('synchronize', false);
model.result.export.duplicate('anim5', 'anim4');
model.result.export('anim5').showFrame;
model.result.export('anim5').label('Contact Forces [Loaded]');
model.result.export('anim5').set('plotgroup', 'pg6');
model.result('pg1').run;

model.title('Dynamics of a Roller Chain Sprocket Assembly');

model.description(['This example simulates the dynamics of a chain sprocket assembly. The system consists of a roller chain wrapped around two sprockets in 2D. The roller chain is constructed by assembling rigid roller plates and pin plates in such a way that the relative rotation between chain links are unrestricted. This chain is used to transmit rotational motion between two sprockets located at a distance.' newline  newline 'An angular velocity is prescribed on the driver sprocket and load torque is applied on the driven sprocket. Using a transient study, the dynamics of the system is analyzed for two cases; when the driven shaft is loaded and unloaded. The results show the comparison of chain link motion, contact forces, and other parameters for both cases.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('roller_chain_dynamics.mph');

model.modelNode.label('Components');

out = model;
