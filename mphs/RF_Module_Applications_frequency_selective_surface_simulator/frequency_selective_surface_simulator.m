function out = model
%
% frequency_selective_surface_simulator.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/RF_Module/Applications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('emw', 'ElectromagneticWaves', 'geom1');
model.physics('emw').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('solnum', 'auto');
model.study('std1').feature('freq').set('notsolnum', 'auto');
model.study('std1').feature('freq').set('outputmap', {});
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').setSolveFor('/physics/emw', true);

model.param.set('theta', '0[deg]');
model.param.descr('theta', 'Elevation angle');
model.param.set('phi', '0[deg]');
model.param.descr('phi', 'Azimuth angle');
model.param.set('f0', '4.6[GHz]');
model.param.descr('f0', 'Input frequency [GHz]');
model.param.set('lda0', 'c_const/f0');
model.param.descr('lda0', 'Wavelength, free space');
model.param.set('o_type', '3');
model.param.descr('o_type', 'Object type');
model.param.set('w_ring', '1.5[mm]');
model.param.descr('w_ring', 'Ring width');
model.param.set('r_ring', '4.25[mm]');
model.param.descr('r_ring', 'Ring radius');
model.param.set('g_ring', '1[mm]');
model.param.descr('g_ring', 'Ring gap size');
model.param.set('periodicity', '15[mm]');
model.param.descr('periodicity', 'Cell periodicity');
model.param.set('t_sub', '2[mm]');
model.param.descr('t_sub', 'Substrate thickness');
model.param.set('rc_length', '10[mm]');
model.param.descr('rc_length', 'Rectangle length');
model.param.set('rc_width', '1[mm]');
model.param.descr('rc_width', 'Rectangle width');
model.param.set('cr_length1', '10[mm]');
model.param.descr('cr_length1', 'Cross length 1');
model.param.set('cr_width1', '1[mm]');
model.param.descr('cr_width1', 'Cross width 1');
model.param.set('cr_length2', '10[mm]');
model.param.descr('cr_length2', 'Cross length 1');
model.param.set('cr_width2', '1[mm]');
model.param.descr('cr_width2', 'Cross width 2');
model.param.set('r_circle', '4[mm]');
model.param.descr('r_circle', 'Circle radius');
model.param.set('bw', '1[GHz]');
model.param.descr('bw', 'Bandwidth');
model.param.set('s_eps', '2.1');
model.param.descr('s_eps', 'Substrate permittivity');
model.param.set('s_mu', '1');
model.param.descr('s_mu', 'Substrate permeability');
model.param.set('rot', '0[deg]');
model.param.descr('rot', 'Rotation angle');
model.param.set('nvalues', '21');
model.param.descr('nvalues', 'The number of frequency');

model.geom.create('part1', 'Part', 2);
model.geom('part1').label('Ring');
model.geom('part1').create('c1', 'Circle');
model.geom('part1').feature('c1').set('r', 'r_ring+w_ring/2');
model.geom('part1').run('c1');
model.geom('part1').create('c2', 'Circle');
model.geom('part1').feature('c2').set('r', 'r_ring-w_ring/2');
model.geom('part1').run('c2');
model.geom.create('part2', 'Part', 2);
model.geom('part2').label('Split ring');
model.geom('part2').feature.copy('c1', 'part1/c1');
model.geom('part2').feature.copy('c2', 'part1/c2');
model.geom('part2').run('c2');
model.geom('part2').create('r1', 'Rectangle');
model.geom('part2').feature('r1').set('size', {'r_ring+w_ring/2' '1'});
model.geom('part2').feature('r1').setIndex('size', 'g_ring', 1);
model.geom('part2').feature('r1').set('pos', {'(r_ring+w_ring/2)/2' '0'});
model.geom('part2').feature('r1').set('base', 'center');
model.geom('part2').run('r1');
model.geom('part2').create('dif1', 'Difference');
model.geom('part2').feature('dif1').selection('input').set({'c1'});
model.geom('part2').feature('dif1').selection('input2').set({'c2' 'r1'});
model.geom('part2').run('dif1');
model.geom('part2').create('rot1', 'Rotate');
model.geom('part2').feature('rot1').selection('input').set({'dif1'});
model.geom('part2').feature('rot1').set('rot', 'rot');
model.geom('part2').run('rot1');
model.geom.create('part3', 'Part', 2);
model.geom('part3').label('Rectangle');
model.geom('part3').create('r1', 'Rectangle');
model.geom('part3').feature('r1').set('size', {'rc_length' 'rc_width'});
model.geom('part3').feature('r1').set('base', 'center');
model.geom('part3').run('r1');
model.geom('part3').create('rot1', 'Rotate');
model.geom('part3').feature('rot1').selection('input').set({'r1'});
model.geom('part3').feature('rot1').set('rot', 'rot');
model.geom('part3').run('rot1');
model.geom.create('part4', 'Part', 2);
model.geom('part4').label('Cross');
model.geom('part4').create('r1', 'Rectangle');
model.geom('part4').feature('r1').set('size', {'cr_length1' 'cr_width1'});
model.geom('part4').feature('r1').set('base', 'center');
model.geom('part4').run('r1');
model.geom('part4').create('r2', 'Rectangle');
model.geom('part4').feature('r2').set('size', {'cr_width2' 'cr_length2'});
model.geom('part4').feature('r2').set('base', 'center');
model.geom('part4').run('r2');
model.geom('part4').create('uni1', 'Union');
model.geom('part4').feature('uni1').selection('input').set({'r1' 'r2'});
model.geom('part4').feature('uni1').set('intbnd', false);
model.geom('part4').run('uni1');
model.geom('part4').create('rot1', 'Rotate');
model.geom('part4').feature('rot1').selection('input').set({'uni1'});
model.geom('part4').feature('rot1').set('rot', 'rot');
model.geom('part4').run('rot1');
model.geom.create('part5', 'Part', 2);
model.geom('part5').label('Circle');
model.geom('part5').create('c1', 'Circle');
model.geom('part5').feature('c1').set('r', 'r_circle');
model.geom('part5').run('c1');
model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'periodicity' '1' '1'});
model.geom('geom1').feature('blk1').setIndex('size', 'periodicity', 1);
model.geom('geom1').feature('blk1').setIndex('size', 'lda0*0.8', 2);
model.geom('geom1').feature('blk1').set('base', 'center');
model.geom('geom1').run('blk1');
model.geom('geom1').create('blk2', 'Block');

model.view('view1').set('transparency', true);

model.geom('geom1').feature('blk2').set('size', {'periodicity' '1' '1'});
model.geom('geom1').feature('blk2').setIndex('size', 'periodicity', 1);
model.geom('geom1').feature('blk2').setIndex('size', 't_sub', 2);
model.geom('geom1').feature('blk2').set('base', 'center');
model.geom('geom1').feature('blk2').set('pos', {'0' '0' '-t_sub/2'});
model.geom('geom1').run('blk2');
model.geom('geom1').create('blk3', 'Block');
model.geom('geom1').feature('blk3').set('size', {'periodicity' '1' '1'});
model.geom('geom1').feature('blk3').setIndex('size', 'periodicity', 1);
model.geom('geom1').feature('blk3').setIndex('size', 'lda0*1.4', 2);
model.geom('geom1').feature('blk3').set('base', 'center');
model.geom('geom1').run('blk3');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').geom.create('if1', 'If');
model.geom('geom1').feature('wp1').geom.feature.createAfter('endif1', 'EndIf', 'if1');
model.geom('geom1').feature('wp1').geom.feature('if1').set('condition', 'o_type==1');
model.geom('geom1').feature('wp1').geom.run('if1');
model.geom('geom1').feature('wp1').geom.create('pi1', 'PartInstance');
model.geom('geom1').feature('wp1').geom.feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('wp1').geom.feature('pi1').set('part', 'part5');
model.geom('geom1').feature('wp1').geom.run('pi1');
model.geom('geom1').feature('wp1').geom.create('elseif1', 'ElseIf');
model.geom('geom1').feature('wp1').geom.feature('elseif1').set('condition', 'o_type==2');
model.geom('geom1').feature('wp1').geom.run('elseif1');
model.geom('geom1').feature('wp1').geom.create('pi2', 'PartInstance');
model.geom('geom1').feature('wp1').geom.feature('pi2').set('selkeepnoncontr', false);
model.geom('geom1').feature('wp1').geom.feature('pi2').set('part', 'part1');
model.geom('geom1').feature('wp1').geom.run('pi2');
model.geom('geom1').feature('wp1').geom.create('elseif2', 'ElseIf');
model.geom('geom1').feature('wp1').geom.feature('elseif2').set('condition', 'o_type==3');
model.geom('geom1').feature('wp1').geom.run('elseif2');
model.geom('geom1').feature('wp1').geom.create('pi3', 'PartInstance');
model.geom('geom1').feature('wp1').geom.feature('pi3').set('selkeepnoncontr', false);
model.geom('geom1').feature('wp1').geom.feature('pi3').set('part', 'part2');
model.geom('geom1').feature('wp1').geom.run('pi3');
model.geom('geom1').feature('wp1').geom.create('elseif3', 'ElseIf');
model.geom('geom1').feature('wp1').geom.feature('elseif3').set('condition', 'o_type==4');
model.geom('geom1').feature('wp1').geom.run('elseif3');
model.geom('geom1').feature('wp1').geom.create('pi4', 'PartInstance');
model.geom('geom1').feature('wp1').geom.feature('pi4').set('selkeepnoncontr', false);
model.geom('geom1').feature('wp1').geom.feature('pi4').set('part', 'part3');
model.geom('geom1').feature('wp1').geom.run('pi4');
model.geom('geom1').feature('wp1').geom.create('else1', 'Else');
model.geom('geom1').feature('wp1').geom.create('pi5', 'PartInstance');
model.geom('geom1').feature('wp1').geom.feature('pi5').set('selkeepnoncontr', false);
model.geom('geom1').feature('wp1').geom.feature('pi5').set('part', 'part4');
model.geom('geom1').feature('wp1').geom.run('endif1');
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Substrate');
model.material('mat2').selection.set([3]);
model.material('mat2').propertyGroup('def').set('relpermittivity', {'s_eps'});
model.material('mat2').propertyGroup('def').set('relpermeability', {'s_mu'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0'});

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('k_x', 'emw.k0*sin(theta)*cos(phi)');
model.variable('var1').descr('k_x', 'kx for incident wave');
model.variable('var1').set('k_y', 'emw.k0*sin(theta)*sin(phi)');
model.variable('var1').descr('k_y', 'ky for incident wave');
model.variable('var1').set('k_z', 'emw.k0*cos(theta)');
model.variable('var1').descr('k_z', 'kz for incident wave');

model.physics('emw').create('pec2', 'PerfectElectricConductor', 2);
model.physics('emw').feature('pec2').selection.set([12]);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(2);
model.selection('sel1').label('PEC');
model.selection('sel1').set([12]);

model.physics('emw').feature('pec2').selection.named('sel1');
model.physics('emw').create('pc1', 'PeriodicCondition', 2);
model.physics('emw').feature('pc1').selection.set([4 7 10 24 25 26]);
model.physics('emw').feature('pc1').set('PeriodicType', 'Floquet');
model.physics('emw').feature('pc1').set('kFloquet', {'k_x' 'k_y' '0'});
model.physics('emw').feature.duplicate('pc2', 'pc1');
model.physics('emw').feature('pc2').selection.set([1 13 23 27]);
model.physics('emw').feature.duplicate('pc3', 'pc2');
model.physics('emw').feature('pc3').selection.set([5 8 11 18 19 20]);
model.physics('emw').feature.duplicate('pc4', 'pc3');
model.physics('emw').feature('pc4').selection.set([2 14 17 21]);
model.physics('emw').create('port1', 'Port', 2);
model.physics('emw').feature('port1').set('PortSlit', true);
model.physics('emw').feature('port1').set('SlitType', 'DomainBacked');
model.physics('emw').feature('port1').selection.set([15]);
model.physics('emw').feature('port1').set('PortOrientation', 'ReversePort');
model.physics('emw').feature('port1').set('E0', {'exp(-i*k_x*x)*exp(-i*k_y*y)[V/m]' '0' '0'});
model.physics('emw').feature('port1').set('beta', 'abs(k_z)');
model.physics('emw').feature.duplicate('port2', 'port1');
model.physics('emw').feature('port2').selection.set([6]);
model.physics('emw').feature('port2').set('PortExcitation', 'off');
model.physics('emw').create('sctr1', 'Scattering', 2);
model.physics('emw').feature('sctr1').selection.set([3 16]);

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.set([5]);
model.coordSystem('pml1').set('wavelengthSourceType', 'userDefined');
model.coordSystem('pml1').set('typicalWavelength', '2*pi/abs(k_z)');
model.coordSystem.duplicate('pml2', 'pml1');
model.coordSystem('pml2').selection.set([1]);

model.physics.create('emw2', 'ElectromagneticWaves', 'geom1');
model.physics('emw2').model('comp1');

model.study('std1').feature('freq').setSolveFor('/physics/emw2', true);

model.physics('emw2').selection.set([3]);

model.study('std1').feature('freq').set('plist', 'range(f0-bw/2,(f0+bw/2-(f0-bw/2))/(nvalues-1),f0+bw/2)');
model.study('std1').feature('freq').setEntry('activate', 'emw2', false);
model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').set('solnum', 'auto');
model.study('std2').feature('freq').set('notsolnum', 'auto');
model.study('std2').feature('freq').set('outputmap', {});
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').setSolveFor('/physics/emw', true);
model.study('std2').feature('freq').setSolveFor('/physics/emw2', true);
model.study('std2').feature('freq').set('plist', 'f0');
model.study('std2').feature('freq').setEntry('activate', 'emw', false);
model.study('std2').setGenPlots(false);
model.study('std2').setGenConv(false);

model.mesh('mesh1').autoMeshSize(1);

model.physics('emw').prop('MeshControl').set('SizeControlParameter', 'UserDefined');
model.physics('emw').prop('MeshControl').set('PhysicsControlledMeshMaximumElementSize', 'lda0/10');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(f0-bw/2,(f0+bw/2-(f0-bw/2))/(nvalues-1),f0+bw/2)'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (emw)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankasolv', {'stored'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankarelax', 0.95);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Electric Field (emw)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 21, 0);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').label('Multislice');
model.result('pg1').feature('mslc1').set('smooth', 'internal');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result('pg1').feature('mslc1').feature.create('filt1', 'Filter');
model.result('pg1').feature('mslc1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('unit', {'' ''});
model.result('pg2').feature('glob1').set('expr', {'emw.S11dB' 'emw.S21dB'});
model.result('pg2').feature('glob1').set('descr', {'S11' 'S21'});
model.result('pg2').label('S-parameter (emw)');
model.result('pg2').feature('glob1').set('titletype', 'none');
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'S-parameter (dB)');
model.result('pg2').feature('glob1').set('xdataexpr', 'freq');
model.result('pg2').feature('glob1').set('xdataunit', 'GHz');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg3', 'SmithGroup');
model.result('pg3').set('data', 'dset1');
model.result('pg3').create('rgr1', 'ReflectionGraph');
model.result('pg3').feature('rgr1').set('unit', {''});
model.result('pg3').feature('rgr1').set('expr', {'emw.S11'});
model.result('pg3').feature('rgr1').set('descr', {'S11'});
model.result('pg3').label('Smith Plot (emw)');
model.result('pg3').feature('rgr1').set('titletype', 'manual');
model.result('pg3').feature('rgr1').set('title', 'Reflection Graph: S-parameter, Color: Frequency (GHz)');
model.result('pg3').feature('rgr1').set('linemarker', 'point');
model.result('pg3').feature('rgr1').set('markerpos', 'datapoints');
model.result('pg3').feature('rgr1').create('col1', 'Color');
model.result('pg3').feature('rgr1').feature('col1').set('expr', 'emw.freq/1e9');
model.result('pg3').feature('rgr1').feature('col1').set('colortable', 'Spectrum');
model.result('pg1').run;

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 0.01);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol2').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol2').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol2').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol2').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s1').feature('p1').set('probes', {});
model.sol('sol2').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol2').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('s1').set('control', 'freq');
model.sol('sol2').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol2').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (emw2)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E2'});
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E2'});
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.dataset('dset2').selection.geom('geom1', 3);
model.result.dataset('dset2').selection.geom('geom1', 3);
model.result.dataset('dset2').selection.set([3]);
model.result.dataset.create('dset3', 'Solution');
model.result.dataset('dset3').set('solution', 'sol2');
model.result.dataset('dset3').label('Metal');
model.result.dataset('dset3').selection.geom('geom1', 2);
model.result.dataset('dset3').selection.named('sel1');
model.result.dataset.create('dset4', 'Solution');
model.result.dataset('dset4').label('Dielectric');
model.result.dataset('dset4').set('solution', 'sol2');
model.result.dataset('dset4').selection.geom('geom1', 2);
model.result.dataset('dset4').selection.geom('geom1', 2);
model.result.dataset('dset4').selection.set([7 8 9 19 22 25]);
model.result.dataset.create('arr1', 'Array3D');
model.result.dataset('arr1').label('Array 3D Metal');
model.result.dataset('arr1').set('data', 'dset3');
model.result.dataset('arr1').set('fullsize', [10 10 1]);
model.result.dataset.create('arr2', 'Array3D');
model.result.dataset('arr2').label('Array 3D Dielectric');
model.result.dataset('arr2').set('data', 'dset4');
model.result.dataset('arr2').set('fullsize', [10 10 1]);
model.result.dataset.create('dset5', 'Solution');
model.result.dataset('dset5').selection.geom('geom1', 3);
model.result.dataset('dset5').selection.geom('geom1', 3);
model.result.dataset('dset5').selection.set([2 3 4]);
model.result.dataset.create('cpl1', 'CutPlane');
model.result.dataset('cpl1').set('data', 'dset5');
model.result.dataset('cpl1').set('quickplane', 'xz');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Virtual array view');
model.result('pg4').set('data', 'dset2');
model.result('pg4').set('titletype', 'none');
model.result('pg4').set('view', 'new');
model.result('pg4').run;
model.result('pg4').create('arwv1', 'ArrowVolume');
model.result('pg4').feature('arwv1').setIndex('expr', 0, 0);
model.result('pg4').feature('arwv1').set('expr', {'0' '0' '-1'});
model.result('pg4').feature('arwv1').set('xnumber', 1);
model.result('pg4').feature('arwv1').set('ynumber', 1);
model.result('pg4').feature('arwv1').set('znumber', 1);
model.result('pg4').feature('arwv1').set('arrowbase', 'head');
model.result('pg4').feature('arwv1').set('scaleactive', true);
model.result('pg4').feature('arwv1').set('scale', 20);
model.result('pg4').feature('arwv1').create('def1', 'Deform');
model.result('pg4').run;
model.result('pg4').feature('arwv1').feature('def1').set('expr', {'periodicity*0' '' ''});
model.result('pg4').feature('arwv1').feature('def1').setIndex('expr', 'periodicity*0', 1);
model.result('pg4').feature('arwv1').feature('def1').setIndex('expr', 't_sub/2+1[mm]', 2);
model.result('pg4').feature('arwv1').feature('def1').set('scaleactive', true);
model.result('pg4').feature('arwv1').feature('def1').set('scale', 1);
model.result('pg4').run;
model.result('pg4').feature.duplicate('arwv2', 'arwv1');
model.result('pg4').run;
model.result('pg4').feature('arwv2').set('expr', {'1' '0' '0'});
model.result('pg4').feature('arwv2').set('arrowbase', 'tail');
model.result('pg4').feature('arwv2').set('scale', 5);
model.result('pg4').feature('arwv2').set('color', 'blue');
model.result('pg4').run;
model.result('pg4').feature('arwv2').feature('def1').setIndex('expr', 't_sub/2+21[mm]', 2);
model.result('pg4').run;
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', '1');
model.result('pg4').feature('surf1').set('data', 'arr1');
model.result('pg4').feature('surf1').set('coloring', 'uniform');
model.result('pg4').feature('surf1').set('color', 'custom');
model.result('pg4').feature('surf1').set('customcolor', [0.7803921699523926 0.4588235318660736 0.027450980618596077]);
model.result('pg4').run;
model.result('pg4').create('surf2', 'Surface');
model.result('pg4').feature('surf2').set('data', 'arr2');
model.result('pg4').feature('surf2').set('expr', '1');
model.result('pg4').feature('surf2').set('coloring', 'uniform');
model.result('pg4').feature('surf2').set('color', 'custom');
model.result('pg4').feature('surf2').set('customcolor', [0.9803921580314636 0.9411764740943909 0.9019607901573181]);

model.view('view8').label('View 3D array');
model.view('view8').set('showgrid', false);
model.view('view8').camera.set('zoomanglefull', 42.84846496582031);
model.view('view8').camera.setIndex('position', -29.665245056152344, 0);
model.view('view8').camera.setIndex('position', -56.52446746826172, 1);
model.view('view8').camera.setIndex('position', 44.58572769165039, 2);
model.view('view8').camera.set('target', [554.8160400390625 0 -1]);
model.view('view8').camera.setIndex('target', 833.3695678710938, 1);
model.view('view8').camera.setIndex('target', -303.78875732421875, 2);
model.view('view8').camera.setIndex('up', 0.1354120671749115, 0);
model.view('view8').camera.setIndex('up', 0.2828001379966736, 1);
model.view('view8').camera.setIndex('up', 0.9495759606361389, 2);
model.view('view8').camera.set('rotationpoint', [67.5 67.5 9.5]);
model.view('view8').camera.setIndex('viewoffset', -0.040856845676898956, 0);
model.view('view8').camera.setIndex('viewoffset', 0.25924259424209595, 1);
model.view.create('view9', 'geom1');
model.view('view9').model('comp1');
model.view('view9').set('renderwireframe', true);
model.view.duplicate('view10', 'view9');
model.view('view1').hideEntities.create('hide1');
model.view('view1').hideEntities('hide1').set([1 5]);
model.view('view9').hideEntities.create('hide1');
model.view('view9').hideEntities('hide1').set([1 5]);
model.view('view10').hideEntities.create('hide1');
model.view('view10').hideEntities('hide1').set([1 2 4 5]);

model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').run;
model.result('pg5').label('Field plot1');
model.result('pg5').set('view', 'view10');
model.result('pg5').create('slc1', 'Slice');
model.result('pg5').feature('slc1').set('quickplane', 'xy');
model.result('pg5').feature('slc1').set('quickzmethod', 'coord');
model.result('pg5').feature('slc1').set('colortable', 'Thermal');
model.result('pg5').feature('slc1').set('colortabletrans', 'reverse');
model.result('pg5').feature('slc1').create('def1', 'Deform');
model.result('pg5').run;
model.result('pg5').feature('slc1').feature('def1').set('expr', {'0' '0' '-emw.normE'});
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').run;
model.result('pg6').label('Field plot2');
model.result('pg6').set('view', 'view9');
model.result('pg6').create('con1', 'Contour');
model.result('pg6').feature('con1').set('expr', '20*log10(emw.normE)');
model.result('pg6').feature('con1').set('contourtype', 'filled');
model.result('pg6').feature('con1').set('data', 'cpl1');
model.result('pg6').feature('con1').set('legendtype', 'filled');
model.result('pg6').run;
model.result('pg2').run;
model.result('pg2').set('ylabelactive', false);
model.result('pg2').run;
model.result('pg2').feature('glob1').set('linemarker', 'point');
model.result('pg2').feature('glob1').setIndex('descr', 'S11dB', 0);
model.result('pg2').feature('glob1').setIndex('descr', 'S21dB', 1);
model.result('pg2').run;
model.result('pg2').set('legendpos', 'lowerright');

model.title('Frequency Selective Surface Simulator');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Designing an app for small screens such as smartphones' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' User-interface navigation with a top menu typically used on websites' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Geometry parts and parameterized geometries' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Visualizing periodicity of a geometry with material rendering' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Warning messages on icons when properties are not updated' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Sending an email with a report attached when the computation is finished' newline  newline 'Frequency selective surfaces (FSS) are periodic structures that generate a bandpass or a bandstop frequency response. They are used to filter or block RF, microwave, or, in fact, any electromagnetic wave frequency. For example, you see these selective surfaces on the doors of microwave ovens, which allow you to view the food being heated without being heated yourself in the process.' newline  newline 'The app simulates a user-specified periodic structure chosen from the built-in unit cell types. It provides five unit cell types popularly used in FSS simulations along with two predefined polarizations in one fixed direction of propagation that has normal incidence on the FSS. The analysis includes the reflection and transmission spectra, the electric field norm on the top surface of the unit cell, and the dB-scaled electric field norm shown on a vertical cut plane in the unit cell domain.' newline  newline 'You can change the polarization, center frequency, bandwidth, number of frequencies, substrate thickness and its material properties, and unit cell type (circle, ring, split ring, etc.) as well as their geometry parameters, including periodicity (cell size).']);

model.label('frequency_selective_surface_simulator.mph');

model.result('pg2').run;

model.setExpectedComputationTime('44 seconds');

model.result.report.create('rpt1', 'Report');
model.result.report('rpt1').set('filename', 'user:///frequency_selective_surface_simulator');
model.result.report('rpt1').set('imagesize', 'xlarge');
model.result.report('rpt1').feature.create('tp1', 'TitlePage');
model.result.report('rpt1').feature('tp1').set('summary', 'Frequency selective surfaces (FSS) are periodic structures that generate a bandpass or a bandstop frequency response. This application simulates a user-specified periodic structure chosen from the built-in unit cell types. It provides five popular FSS unit cell types, with two predefined polarizations and propagation at normal incidence. The analysis includes the reflection and transmission spectra, the electric field norm on the top surface of the unit cell, and the dB-scaled electric field norm shown on a vertical cut plane in the unit cell domain.');
model.result.report('rpt1').feature('tp1').set('includeversion', false);
model.result.report('rpt1').feature('tp1').set('includecompany', false);
model.result.report('rpt1').feature('tp1').set('frontmatterlayout', 'headings');
model.result.report('rpt1').feature('tp1').set('titleimage', 'none');
model.result.report('rpt1').feature.create('toc1', 'TableOfContents');
model.result.report('rpt1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').label('Global Definitions');
model.result.report('rpt1').feature('sec1').feature.create('root1', 'Model');
model.result.report('rpt1').feature('sec1').feature('root1').label('About the Software');
model.result.report('rpt1').feature('sec1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').feature('sec1').label('Parameters 1');
model.result.report('rpt1').feature('sec1').feature('sec1').set('source', 'firstchild');
model.result.report('rpt1').feature('sec1').feature('sec1').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec1').feature('sec1').feature('param1').setIndex('children', false, 17, 1);
model.result.report('rpt1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').label('Component 1');
model.result.report('rpt1').feature('sec2').feature.create('comp1', 'ModelNode');
model.result.report('rpt1').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec1').label('Geometry 1');
model.result.report('rpt1').feature('sec2').feature('sec1').set('source', 'firstchild');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('geom1', 'Geometry');
model.result.report('rpt1').feature('sec2').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec2').label('Materials');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.create('mat1', 'Material');
model.result.report('rpt1').set('templatesource', 'brief');
model.result.report('rpt1').feature('sec2').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec3').label('Electromagnetic Waves, Frequency Domain');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.create('phys1', 'Physics');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('phys1').set('includeselection', true);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('phys1').set('includesettings', true);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('phys1').set('includefeaturetable', false);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('phys1').setIndex('children', true, 0, 3);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('phys1').setIndex('children', true, 1, 3);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('phys1').setIndex('children', true, 2, 3);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('phys1').setIndex('children', true, 4, 3);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('phys1').setIndex('children', true, 5, 3);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('phys1').setIndex('children', true, 6, 3);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('phys1').setIndex('children', true, 7, 3);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('phys1').setIndex('children', true, 8, 3);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('phys1').setIndex('children', true, 9, 3);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('phys1').setIndex('children', true, 10, 3);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('phys1').setIndex('children', true, 11, 3);
model.result.report('rpt1').feature('sec2').feature.create('sec4', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec4').label('Mesh 1');
model.result.report('rpt1').feature('sec2').feature('sec4').set('source', 'firstchild');
model.result.report('rpt1').feature('sec2').feature('sec4').feature.create('mesh1', 'Mesh');
model.result.report('rpt1').set('templatesource', 'intermediate');
model.result.report('rpt1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').label('Results');
model.result.report('rpt1').feature('sec3').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').label('Plot Groups');
model.result.report('rpt1').feature('sec3').feature('sec1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec1').label('S-Parameter (emw)');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec1').set('source', 'firstchild');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec1').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec1').feature('pg1').set('noderef', 'pg2');
model.result.report('rpt1').feature('sec3').feature('sec1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').label('Virtual Array View');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').feature('pg1').set('noderef', 'pg4');
model.result.report('rpt1').feature('sec3').feature('sec1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec3').label('Electric Field Norm (Horizontal)');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec3').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec3').feature('pg1').set('noderef', 'pg5');
model.result.report('rpt1').feature('sec3').feature('sec1').feature.create('sec4', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec4').label('Electric Field Norm (Vertical, dB)');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec4').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec4').feature('pg1').set('noderef', 'pg6');

model.title('Frequency Selective Surface Simulator');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Designing an app for small screens such as smartphones' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' User-interface navigation with a top menu typically used on websites' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Geometry parts and parameterized geometries' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Visualizing periodicity of a geometry with material rendering' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Warning messages on icons when properties are not updated' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Sending an email with a report attached when the computation is finished' newline  newline 'Frequency selective surfaces (FSS) are periodic structures that generate a bandpass or a bandstop frequency response. They are used to filter or block RF, microwave, or, in fact, any electromagnetic wave frequency. For example, you see these selective surfaces on the doors of microwave ovens, which allow you to view the food being heated without being heated yourself in the process.' newline  newline 'The app simulates a user-specified periodic structure chosen from the built-in unit cell types. It provides five unit cell types popularly used in FSS simulations along with two predefined polarizations in one fixed direction of propagation that has normal incidence on the FSS. The analysis includes the reflection and transmission spectra, the electric field norm on the top surface of the unit cell, and the dB-scaled electric field norm shown on a vertical cut plane in the unit cell domain.' newline  newline 'You can change the polarization, center frequency, bandwidth, number of frequencies, substrate thickness and its material properties, and unit cell type (circle, ring, split ring, etc.) as well as their geometry parameters, including periodicity (cell size).']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('frequency_selective_surface_simulator.mph');

model.modelNode.label('Components');

out = model;
