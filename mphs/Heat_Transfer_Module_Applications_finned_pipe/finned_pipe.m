function out = model
%
% finned_pipe.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Applications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransferInSolidsAndFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics('ht').prop('ShapeProperty').set('order_temperature', '1');
model.physics.create('spf', 'TurbulentFlowAlgebraicYplus', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'WeaklyCompressible');

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 3);
model.multiphysics('nitf1').set('Fluid_physics', 'spf');
model.multiphysics('nitf1').set('Heat_physics', 'ht');

model.study.create('std1');
model.study('std1').create('wdi', 'WallDistanceInitialization');
model.study('std1').feature('wdi').set('solnum', 'auto');
model.study('std1').feature('wdi').set('notsolnum', 'auto');
model.study('std1').feature('wdi').set('outputmap', {});
model.study('std1').feature('wdi').set('ngenAUX', '1');
model.study('std1').feature('wdi').set('goalngenAUX', '1');
model.study('std1').feature('wdi').set('ngenAUX', '1');
model.study('std1').feature('wdi').set('goalngenAUX', '1');
model.study('std1').feature('wdi').setSolveFor('/physics/ht', true);
model.study('std1').feature('wdi').setSolveFor('/physics/spf', true);
model.study('std1').feature('wdi').setSolveFor('/multiphysics/nitf1', true);
model.study('std1').feature('wdi').setSolveFor('/physics/ht', false);
model.study('std1').feature('wdi').setSolveFor('/multiphysics/nitf1', false);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/nitf1', true);

model.param.set('th_i', '0.2[cm]');
model.param.descr('th_i', 'Pipe thickness');
model.param.set('Rinn_i', '1.27[cm]');
model.param.descr('Rinn_i', 'Pipe inner radius');
model.param.set('Rout_i', 'Rinn_i+th_i');
model.param.descr('Rout_i', 'Pipe outer radius');
model.param.set('L0_i', '1.27[cm]');
model.param.descr('L0_i', 'Pipe length');
model.param.set('th_fins_i', '0.2[mm]');
model.param.descr('th_fins_i', 'Fins thickness');
model.param.set('th_grvs_i', '0.3[cm]');
model.param.descr('th_grvs_i', 'Grooves thickness');
model.param.set('th_innfins_i', '0.2[mm]');
model.param.descr('th_innfins_i', 'Inner fins thickness');
model.param.set('th_inngrvs_i', '0.3[cm]');
model.param.descr('th_inngrvs_i', 'Inner grooves thickness');
model.param.set('n_innfins_i', '8');
model.param.descr('n_innfins_i', 'Number of inner fins');
model.param.set('n_inngrvs_i', '8');
model.param.descr('n_inngrvs_i', 'Number of inner grooves');
model.param.set('L_fins_i', '1.47[cm]');
model.param.descr('L_fins_i', 'Fins length');
model.param.set('L_grvs_i', 'th_i/3');
model.param.descr('L_grvs_i', 'Grooves depth');
model.param.set('L_innfins_i', '0.635[cm]');
model.param.descr('L_innfins_i', 'Inner fins length');
model.param.set('L_inngrvs_i', 'min(th_i/3,pi*Rinn_i/n_inngrvs_i)');
model.param.descr('L_inngrvs_i', 'Inner grooves depth');
model.param.set('mfr0_inner', '0.25[kg/s]');
model.param.descr('mfr0_inner', 'Inlet mass flow rate, inner fluid');
model.param.set('u0_outer', '1[m/s]');
model.param.descr('u0_outer', 'Inlet velocity, outer fluid');
model.param.set('T0', '293.15[K]');
model.param.descr('T0', 'Air inlet temperature');
model.param.set('pA0', '1[atm]');
model.param.descr('pA0', 'Inlet absolute pressure');
model.param.set('dT', '10[K]');
model.param.descr('dT', 'Temperature difference between inner and outer fluids');
model.param.set('rtol', '1e-3');
model.param.descr('rtol', 'Solver relative tolerance');
model.param.set('u0_outer_min', '0.5[m/s]');
model.param.descr('u0_outer_min', 'Minimum air velocity');
model.param.set('u0_outer_max', '6[m/s]');
model.param.descr('u0_outer_max', 'Maximum air velocity');
model.param.set('u0_outer_steps', '2');
model.param.descr('u0_outer_steps', 'Number of steps for air velocity');

model.geom.create('part1', 'Part', 3);
model.geom('part1').label('Part: Inner, None');
model.geom('part1').inputParam.set('Rinn', '1.27[cm]');
model.geom('part1').inputParam.descr('Rinn', 'Pipe inner radius');
model.geom('part1').inputParam.set('L0', '1.27[cm]');
model.geom('part1').inputParam.descr('L0', 'Pipe length');
model.geom('part1').create('cyl1', 'Cylinder');
model.geom('part1').feature('cyl1').set('r', 'Rinn');
model.geom('part1').feature('cyl1').set('h', 'L0');
model.geom('part1').feature('cyl1').set('pos', {'-L0/2' '0' '0'});
model.geom('part1').feature('cyl1').set('axistype', 'x');
model.geom('part1').run('cyl1');
model.geom('part1').create('sel1', 'ExplicitSelection');
model.geom('part1').feature('sel1').label('Selection: Inner Fluid Domain');
model.geom('part1').feature('sel1').selection('selection').set('cyl1', 1);
model.geom('part1').run('sel1');
model.geom('part1').create('sel2', 'ExplicitSelection');
model.geom('part1').feature('sel2').label('Selection: Inner Fluid Inlet');
model.geom('part1').feature('sel2').selection('selection').init(2);
model.geom('part1').feature('sel2').selection('selection').set('cyl1', 3);
model.geom('part1').run('sel2');
model.geom('part1').create('sel3', 'ExplicitSelection');
model.geom('part1').feature('sel3').label('Selection: Inner Fluid Outlet');
model.geom('part1').feature('sel3').selection('selection').init(2);
model.geom('part1').feature('sel3').selection('selection').set('cyl1', 4);
model.geom('part1').run('sel3');
model.geom('part1').create('unisel1', 'UnionSelection');
model.geom('part1').feature('unisel1').label('Selection: Flow Periodicity');
model.geom('part1').feature('unisel1').set('entitydim', 2);
model.geom('part1').feature('unisel1').set('input', {'sel2' 'sel3'});
model.geom('part1').run('unisel1');
model.geom('part1').create('sel4', 'ExplicitSelection');
model.geom('part1').feature('sel4').label('Selection: Pressure Constraint');
model.geom('part1').feature('sel4').selection('selection').init(0);
model.geom('part1').feature('sel4').selection('selection').set('cyl1', 2);
model.geom.create('part2', 'Part', 3);
model.geom('part2').label('Part: Inner, Straight Grooves');
model.geom('part2').inputParam.set('Rinn', '1.27[cm]');
model.geom('part2').inputParam.descr('Rinn', 'Pipe inner radius');
model.geom('part2').inputParam.set('L0', '1.27[cm]');
model.geom('part2').inputParam.descr('L0', 'Pipe length');
model.geom('part2').inputParam.set('th_inngrvs', '0.3[cm]');
model.geom('part2').inputParam.descr('th_inngrvs', 'Inner grooves thickness');
model.geom('part2').inputParam.set('n_inngrvs', '8');
model.geom('part2').inputParam.descr('n_inngrvs', 'Number of inner grooves');
model.geom('part2').inputParam.set('L_inngrvs', '0.2[cm]/3');
model.geom('part2').inputParam.descr('L_inngrvs', 'Inner grooves depth');
model.geom('part2').create('cyl1', 'Cylinder');
model.geom('part2').feature('cyl1').set('r', 'Rinn');
model.geom('part2').feature('cyl1').set('h', 'L0');
model.geom('part2').feature('cyl1').set('pos', {'-L0/2' '0' '0'});
model.geom('part2').feature('cyl1').set('axistype', 'x');
model.geom('part2').run('cyl1');
model.geom('part2').create('wp1', 'WorkPlane');
model.geom('part2').feature('wp1').set('unite', true);
model.geom('part2').feature('wp1').set('planetype', 'faceparallel');
model.geom('part2').feature('wp1').selection('face').set('cyl1', 3);
model.geom('part2').feature('wp1').geom.create('c1', 'Circle');
model.geom('part2').feature('wp1').geom.feature('c1').set('r', 'th_inngrvs/2');
model.geom('part2').feature('wp1').geom.feature('c1').set('pos', {'0' 'Rinn-(th_inngrvs/2)/3'});
model.geom('part2').feature('wp1').geom.run('c1');
model.geom('part2').feature('wp1').geom.create('rot1', 'Rotate');
model.geom('part2').feature('wp1').geom.feature('rot1').selection('input').set({'c1'});
model.geom('part2').feature('wp1').geom.feature('rot1').set('rot', 'range(0,360/n_inngrvs,360-360/n_inngrvs)');
model.geom('part2').run('wp1');
model.geom('part2').feature.create('ext1', 'Extrude');
model.geom('part2').feature('ext1').setIndex('distance', 'L0', 0);
model.geom('part2').feature('ext1').set('reverse', true);
model.geom('part2').run('ext1');
model.geom('part2').create('cyl2', 'Cylinder');
model.geom('part2').feature('cyl2').set('r', 'Rinn+2*L_inngrvs');
model.geom('part2').feature('cyl2').set('h', 'L0');
model.geom('part2').feature('cyl2').set('pos', {'-L0/2' '0' '0'});
model.geom('part2').feature('cyl2').set('axistype', 'x');
model.geom('part2').run('cyl2');
model.geom('part2').create('dif1', 'Difference');
model.geom('part2').feature('dif1').selection('input').set({'cyl2'});
model.geom('part2').feature('dif1').selection('input2').set({'cyl1' 'ext1'});
model.geom('part2').run('dif1');
model.geom('part2').create('cyl3', 'Cylinder');
model.geom('part2').feature('cyl3').set('r', 'Rinn+2*L_inngrvs');
model.geom('part2').feature('cyl3').set('h', 'L0');
model.geom('part2').feature('cyl3').set('pos', {'-L0/2' '0' '0'});
model.geom('part2').feature('cyl3').set('axistype', 'x');
model.geom('part2').run('cyl3');
model.geom('part2').create('dif2', 'Difference');
model.geom('part2').feature('dif2').selection('input').set({'cyl3'});
model.geom('part2').feature('dif2').selection('input2').set({'dif1'});
model.geom('part2').run('dif2');
model.geom('part2').create('sel1', 'ExplicitSelection');
model.geom('part2').feature('sel1').label('Selection: Inner Fluid Domain');
model.geom('part2').feature('sel1').selection('selection').set('dif2', 1);
model.geom('part2').run('sel1');
model.geom('part2').create('sel2', 'ExplicitSelection');
model.geom('part2').feature('sel2').label('Selection: Inner Fluid Inlet');
model.geom('part2').feature('sel2').selection('selection').init(2);
model.geom('part2').feature('sel2').selection('selection').set('dif2', 1);
model.geom('part2').run('sel2');
model.geom('part2').create('sel3', 'ExplicitSelection');
model.geom('part2').feature('sel3').label('Selection: Inner Fluid Outlet');
model.geom('part2').feature('sel3').selection('selection').init(2);
model.geom('part2').feature('sel3').selection('selection').set('dif2', 26);
model.geom('part2').run('sel3');
model.geom('part2').create('unisel1', 'UnionSelection');
model.geom('part2').feature('unisel1').label('Inner Part: Straight Grooves');
model.geom('part2').feature('unisel1').set('entitydim', 2);
model.geom('part2').feature('unisel1').set('input', {'sel2' 'sel3'});
model.geom('part2').run('unisel1');
model.geom('part2').create('sel4', 'ExplicitSelection');
model.geom('part2').feature('sel4').selection('selection').init(0);
model.geom('part2').feature('sel4').selection('selection').set('dif2', 37);
model.geom('part2').feature('sel4').label('Selection: Pressure Constraint');
model.geom.create('part3', 'Part', 3);
model.geom('part3').label('Part: Inner, Help');
model.geom('part3').create('pi1', 'PartInstance');
model.geom('part3').feature('pi1').set('selkeepnoncontr', false);
model.geom('part3').feature('pi1').set('part', 'part2');
model.geom('part3').selection.create('csel1', 'CumulativeSelection');
model.geom('part3').selection('csel1').label('Inner Fluid Domain');
model.geom('part3').feature('pi1').setEntry('selcontributetodom', 'pi1_sel1', 'csel1');
model.geom('part3').selection.create('csel2', 'CumulativeSelection');
model.geom('part3').selection('csel2').label('Inner Fluid Inlet');
model.geom('part3').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel2', 'csel2');
model.geom('part3').selection.create('csel3', 'CumulativeSelection');
model.geom('part3').selection('csel3').label('Inner Fluid Outlet');
model.geom('part3').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel3', 'csel3');
model.geom('part3').selection.create('csel4', 'CumulativeSelection');
model.geom('part3').selection('csel4').label('Flow Periodicity');
model.geom('part3').feature('pi1').setEntry('selcontributetobnd', 'pi1_unisel1', 'csel4');
model.geom('part3').selection.create('csel5', 'CumulativeSelection');
model.geom('part3').selection('csel5').label('Pressure Constraint');
model.geom('part3').feature('pi1').setEntry('selkeeppnt', 'pi1_sel4', false);
model.geom('part3').feature('pi1').setEntry('selcontributetopnt', 'pi1_sel4', 'csel5');
model.geom('part3').run('pi1');
model.geom('part3').run('pi1');
model.geom.create('part4', 'Part', 3);
model.geom('part4').label('Part: Outer, None');
model.geom('part4').inputParam.set('Rout', '1.47[cm]');
model.geom('part4').inputParam.descr('Rout', 'Pipe outer radius');
model.geom('part4').inputParam.set('L0', '1.27[cm]');
model.geom('part4').inputParam.descr('L0', 'Pipe length');
model.geom('part4').create('cyl1', 'Cylinder');
model.geom('part4').feature('cyl1').set('r', 'Rout');
model.geom('part4').feature('cyl1').set('h', 'L0');
model.geom('part4').feature('cyl1').set('pos', {'-L0/2' '0' '0'});
model.geom('part4').feature('cyl1').set('axistype', 'x');
model.geom('part4').run('cyl1');
model.geom('part4').create('pi1', 'PartInstance');
model.geom('part4').feature('pi1').set('selkeepnoncontr', false);
model.geom('part4').feature('pi1').set('part', 'part3');
model.geom('part4').run('pi1');
model.geom('part4').selection.create('csel1', 'CumulativeSelection');
model.geom('part4').selection('csel1').label('Inner Fluid Domain');
model.geom('part4').feature('pi1').setEntry('selcontributetodom', 'pi1_csel1.dom', 'csel1');
model.geom('part4').selection.create('csel2', 'CumulativeSelection');
model.geom('part4').selection('csel2').label('Inner Fluid Inlet');
model.geom('part4').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel2.bnd', 'csel2');
model.geom('part4').selection.create('csel3', 'CumulativeSelection');
model.geom('part4').selection('csel3').label('Inner Fluid Outlet');
model.geom('part4').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel3.bnd', 'csel3');
model.geom('part4').selection.create('csel4', 'CumulativeSelection');
model.geom('part4').selection('csel4').label('Flow Periodicity');
model.geom('part4').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel4.bnd', 'csel4');
model.geom('part4').create('co1', 'Compose');
model.geom('part4').feature('co1').set('formula', 'cyl1-pi1+pi1');
model.geom('part4').run('co1');
model.geom('part4').create('sel1', 'ExplicitSelection');
model.geom('part4').feature('sel1').label('Selection: Temperature Periodicity');
model.geom('part4').feature('sel1').selection('selection').init(2);
model.geom('part4').feature('sel1').selection('selection').set('co1', [1 4 31 32]);
model.geom('part4').run('sel1');
model.geom('part4').create('sel2', 'ExplicitSelection');
model.geom('part4').feature('sel2').label('Selection: Exterior Fins');
model.geom('part4').feature('sel2').selection('selection').init(2);
model.geom('part4').run('sel2');
model.geom('part4').create('sel3', 'ExplicitSelection');
model.geom('part4').feature('sel3').label('Selection: Composite Faces');
model.geom('part4').feature('sel3').selection('selection').init(2);
model.geom('part4').selection.create('csel5', 'CumulativeSelection');
model.geom('part4').selection('csel5').label('Pressure Constraint');
model.geom('part4').feature('pi1').setEntry('selcontributetopnt', 'pi1_csel5.pnt', 'csel5');
model.geom('part4').run('sel3');
model.geom.create('part5', 'Part', 3);
model.geom('part5').label('Part: Outer, Disk-Stacked Blades');
model.geom('part5').inputParam.set('Rout', '1.47[cm]');
model.geom('part5').inputParam.descr('Rout', 'Pipe outer radius');
model.geom('part5').inputParam.set('L0', '1.27[cm]');
model.geom('part5').inputParam.descr('L0', 'Pipe length');
model.geom('part5').inputParam.set('L_fins', '1.47[cm]');
model.geom('part5').inputParam.descr('L_fins', 'Fins length');
model.geom('part5').create('cyl1', 'Cylinder');
model.geom('part5').feature('cyl1').set('r', 'Rout');
model.geom('part5').feature('cyl1').set('h', 'L0');
model.geom('part5').feature('cyl1').set('pos', {'-L0/2' '0' '0'});
model.geom('part5').feature('cyl1').set('axistype', 'x');
model.geom('part5').run('cyl1');
model.geom('part5').create('wp1', 'WorkPlane');
model.geom('part5').feature('wp1').set('unite', true);
model.geom('part5').feature('wp1').set('planetype', 'faceparallel');
model.geom('part5').feature('wp1').selection('face').set('cyl1', 3);
model.geom('part5').feature('wp1').set('offset', '-L0/2');
model.geom('part5').feature('wp1').geom.create('c1', 'Circle');
model.geom('part5').feature('wp1').geom.feature('c1').set('r', 'Rout+L_fins');
model.geom('part5').feature('wp1').geom.run('c1');
model.geom('part5').feature('wp1').geom.create('c2', 'Circle');
model.geom('part5').feature('wp1').geom.feature('c2').set('r', 'Rout');
model.geom('part5').feature('wp1').geom.run('c2');
model.geom('part5').feature('wp1').geom.create('dif1', 'Difference');
model.geom('part5').feature('wp1').geom.feature('dif1').selection('input').set({'c1'});
model.geom('part5').feature('wp1').geom.feature('dif1').selection('input2').set({'c2'});
model.geom('part5').feature('wp1').geom.run('dif1');
model.geom('part5').run('wp1');
model.geom('part5').create('pi1', 'PartInstance');
model.geom('part5').feature('pi1').set('selkeepnoncontr', false);
model.geom('part5').feature('pi1').set('part', 'part3');
model.geom('part5').run('pi1');
model.geom('part5').selection.create('csel1', 'CumulativeSelection');
model.geom('part5').selection('csel1').label('Inner Fluid Domain');
model.geom('part5').feature('pi1').setEntry('selcontributetodom', 'pi1_csel1.dom', 'csel1');
model.geom('part5').selection.create('csel2', 'CumulativeSelection');
model.geom('part5').selection('csel2').label('Inner Fluid Inlet');
model.geom('part5').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel2.bnd', 'csel2');
model.geom('part5').selection.create('csel3', 'CumulativeSelection');
model.geom('part5').selection('csel3').label('Inner Fluid Outlet');
model.geom('part5').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel3.bnd', 'csel3');
model.geom('part5').selection.create('csel4', 'CumulativeSelection');
model.geom('part5').selection('csel4').label('Flow Periodicity');
model.geom('part5').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel4.bnd', 'csel4');
model.geom('part5').create('co1', 'Compose');
model.geom('part5').feature('co1').set('formula', 'cyl1-pi1+cyl1+wp1+pi1');
model.geom('part5').run('co1');
model.geom('part5').create('sel1', 'ExplicitSelection');
model.geom('part5').feature('sel1').label('Selection: Temperature Periodicity');
model.geom('part5').feature('sel1').selection('selection').init(2);
model.geom('part5').feature('sel1').selection('selection').set('co1', [1 4 36 37]);
model.geom('part5').run('sel1');
model.geom('part5').create('sel2', 'ExplicitSelection');
model.geom('part5').feature('sel2').label('Selection: Exterior Fins');
model.geom('part5').feature('sel2').selection('selection').init(2);
model.geom('part5').feature('sel2').selection('selection').set('co1', 31);
model.geom('part5').run('sel2');
model.geom('part5').create('sel3', 'ExplicitSelection');
model.geom('part5').feature('sel3').label('Selection: Composite Faces');
model.geom('part5').feature('sel3').selection('selection').init(2);
model.geom('part5').selection.create('csel5', 'CumulativeSelection');
model.geom('part5').selection('csel5').label('Pressure Constraint');
model.geom('part5').feature('pi1').setEntry('selkeeppnt', 'pi1_csel5.pnt', false);
model.geom('part5').feature('pi1').setEntry('selcontributetopnt', 'pi1_csel5.pnt', 'csel5');
model.geom('part5').run('sel3');
model.geom.create('part6', 'Part', 3);
model.geom('part6').label('Part: Outer, Circular Grooves');
model.geom('part6').inputParam.set('Rout', '1.47[cm]');
model.geom('part6').inputParam.descr('Rout', 'Pipe outer radius');
model.geom('part6').inputParam.set('L0', '1.27[cm]');
model.geom('part6').inputParam.descr('L0', 'Pipe length');
model.geom('part6').inputParam.set('th_grvs', '0.3[cm]');
model.geom('part6').inputParam.descr('th_grvs', 'Fins thickness');
model.geom('part6').inputParam.set('L_grvs', '0.2[cm]/3');
model.geom('part6').inputParam.descr('L_grvs', 'Grooves depth');
model.geom('part6').create('cyl1', 'Cylinder');
model.geom('part6').feature('cyl1').set('r', 'Rout');
model.geom('part6').feature('cyl1').set('h', 'L0');
model.geom('part6').feature('cyl1').set('pos', {'-L0/2' '0' '0'});
model.geom('part6').feature('cyl1').set('axistype', 'x');
model.geom('part6').run('cyl1');
model.geom('part6').create('cyl2', 'Cylinder');
model.geom('part6').feature('cyl2').set('r', 'Rout');
model.geom('part6').feature('cyl2').set('h', 'th_grvs');
model.geom('part6').feature('cyl2').set('pos', {'-th_grvs/2' '0' '0'});
model.geom('part6').feature('cyl2').set('axistype', 'x');
model.geom('part6').feature('cyl2').setIndex('layername', 'Layer 1', 0);
model.geom('part6').feature('cyl2').setIndex('layer', 'L_grvs', 0);
model.geom('part6').run('cyl2');
model.geom('part6').create('del1', 'Delete');
model.geom('part6').feature('del1').selection('input').init(3);
model.geom('part6').feature('del1').selection('input').set('cyl2', 3);
model.geom('part6').run('del1');
model.geom('part6').create('dif1', 'Difference');
model.geom('part6').feature('dif1').selection('input').set({'cyl1'});
model.geom('part6').feature('dif1').selection('input2').set({'del1'});
model.geom('part6').run('dif1');
model.geom('part6').create('pi1', 'PartInstance');
model.geom('part6').feature('pi1').set('selkeepnoncontr', false);
model.geom('part6').feature('pi1').set('part', 'part3');
model.geom('part6').run('pi1');
model.geom('part6').selection.create('csel1', 'CumulativeSelection');
model.geom('part6').selection('csel1').label('Inner Fluid Domain');
model.geom('part6').feature('pi1').setEntry('selcontributetodom', 'pi1_csel1.dom', 'csel1');
model.geom('part6').selection.create('csel2', 'CumulativeSelection');
model.geom('part6').selection('csel2').label('Inner Fluid Inlet');
model.geom('part6').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel2.bnd', 'csel2');
model.geom('part6').selection.create('csel3', 'CumulativeSelection');
model.geom('part6').selection('csel3').label('Inner Fluid Outlet');
model.geom('part6').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel3.bnd', 'csel3');
model.geom('part6').selection.create('csel4', 'CumulativeSelection');
model.geom('part6').selection('csel4').label('Flow Periodicity');
model.geom('part6').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel4.bnd', 'csel4');
model.geom('part6').create('co1', 'Compose');
model.geom('part6').feature('co1').set('formula', 'dif1-pi1+pi1');
model.geom('part6').run('co1');
model.geom('part6').create('sel1', 'ExplicitSelection');
model.geom('part6').feature('sel1').label('Selection: Temperature Periodicity');
model.geom('part6').feature('sel1').selection('selection').init(2);
model.geom('part6').feature('sel1').selection('selection').set('co1', [1 4 47 48]);
model.geom('part6').run('sel1');
model.geom('part6').create('sel2', 'ExplicitSelection');
model.geom('part6').feature('sel2').label('Selection: Exterior Fins');
model.geom('part6').feature('sel2').selection('selection').init(2);
model.geom('part6').run('sel2');
model.geom('part6').create('sel3', 'ExplicitSelection');
model.geom('part6').feature('sel3').label('Selection: Composite Faces');
model.geom('part6').feature('sel3').selection('selection').init(2);
model.geom('part6').selection.create('csel5', 'CumulativeSelection');
model.geom('part6').selection('csel5').label('Pressure Constraint');
model.geom('part6').feature('pi1').setEntry('selkeeppnt', 'pi1_csel5.pnt', false);
model.geom('part6').feature('pi1').setEntry('selcontributetopnt', 'pi1_csel5.pnt', 'csel5');
model.geom('part6').run('sel3');
model.geom.create('part7', 'Part', 3);
model.geom('part7').label('Part: Outer, Helical Blade');
model.geom('part7').inputParam.set('Rout', '1.47[cm]');
model.geom('part7').inputParam.descr('Rout', 'Pipe outer radius');
model.geom('part7').inputParam.set('L0', '1.27[cm]');
model.geom('part7').inputParam.descr('L0', 'Pipe length');
model.geom('part7').inputParam.set('L_fins', '1.47[cm]');
model.geom('part7').inputParam.descr('L_fins', 'Fins length');
model.geom('part7').create('cyl1', 'Cylinder');
model.geom('part7').feature('cyl1').set('r', 'Rout');
model.geom('part7').feature('cyl1').set('h', 'L0');
model.geom('part7').feature('cyl1').set('pos', {'-L0/2' '0' '0'});
model.geom('part7').feature('cyl1').set('axistype', 'x');
model.geom('part7').run('cyl1');
model.geom('part7').create('ps1', 'ParametricSurface');
model.geom('part7').feature('ps1').set('parmin1', '-L0/2');
model.geom('part7').feature('ps1').set('parmax1', 'L0/2');
model.geom('part7').feature('ps1').set('parmax2', 'L_fins');
model.geom('part7').feature('ps1').set('coord', {'s1' '(Rout+s2)*cos(2*pi*s1/L0[1/m])' ''});
model.geom('part7').feature('ps1').setIndex('coord', '(Rout+s2)*sin(2*pi*s1/L0[1/m])', 2);
model.geom('part7').feature('ps1').set('rtol', '1e-9');
model.geom('part7').feature('ps1').set('maxknots', 1000);
model.geom('part7').run('ps1');
model.geom('part7').create('pi1', 'PartInstance');
model.geom('part7').feature('pi1').set('selkeepnoncontr', false);
model.geom('part7').feature('pi1').set('part', 'part3');
model.geom('part7').run('pi1');
model.geom('part7').selection.create('csel1', 'CumulativeSelection');
model.geom('part7').selection('csel1').label('Inner Fluid Domain');
model.geom('part7').feature('pi1').setEntry('selcontributetodom', 'pi1_csel1.dom', 'csel1');
model.geom('part7').selection.create('csel2', 'CumulativeSelection');
model.geom('part7').selection('csel2').label('Inner Fluid Inlet');
model.geom('part7').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel2.bnd', 'csel2');
model.geom('part7').selection.create('csel3', 'CumulativeSelection');
model.geom('part7').selection('csel3').label('Inner Fluid Outlet');
model.geom('part7').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel3.bnd', 'csel3');
model.geom('part7').selection.create('csel4', 'CumulativeSelection');
model.geom('part7').selection('csel4').label('Flow Periodicity');
model.geom('part7').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel4.bnd', 'csel4');
model.geom('part7').create('uni1', 'Union');
model.geom('part7').feature('uni1').selection('input').set({'cyl1' 'ps1'});
model.geom('part7').feature('uni1').set('repairtoltype', 'relative');
model.geom('part7').run('uni1');
model.geom('part7').create('co1', 'Compose');
model.geom('part7').feature('co1').set('formula', 'uni1-pi1+pi1');
model.geom('part7').run('co1');
model.geom('part7').create('sel1', 'ExplicitSelection');
model.geom('part7').feature('sel1').label('Selection: Temperature Periodicity');
model.geom('part7').feature('sel1').selection('selection').init(2);
model.geom('part7').feature('sel1').selection('selection').set('co1', [2 6 16 17]);
model.geom('part7').run('sel1');
model.geom('part7').create('sel2', 'ExplicitSelection');
model.geom('part7').feature('sel2').label('Selection: Exterior Fins');
model.geom('part7').feature('sel2').selection('selection').init(2);
model.geom('part7').feature('sel2').selection('selection').set('co1', 1);
model.geom('part7').run('sel2');
model.geom('part7').create('sel3', 'ExplicitSelection');
model.geom('part7').feature('sel3').label('Selection: Composite Faces');
model.geom('part7').feature('sel3').selection('selection').init(2);
model.geom('part7').selection.create('csel5', 'CumulativeSelection');
model.geom('part7').selection('csel5').label('Pressure Constraint');
model.geom('part7').feature('pi1').setEntry('selkeeppnt', 'pi1_csel5.pnt', false);
model.geom('part7').feature('pi1').setEntry('selcontributetopnt', 'pi1_csel5.pnt', 'csel5');
model.geom('part7').run('sel3');
model.geom.create('part8', 'Part', 3);
model.geom('part8').label('Part: Outer, Helical Grooves');
model.geom('part8').inputParam.set('Rout', '1.47[cm]');
model.geom('part8').inputParam.descr('Rout', 'Pipe outer radius');
model.geom('part8').inputParam.set('L0', '1.27[cm]');
model.geom('part8').inputParam.descr('L0', 'Pipe length');
model.geom('part8').inputParam.set('L_fins', '1.47[cm]');
model.geom('part8').inputParam.descr('L_fins', 'Fins length');
model.geom('part8').inputParam.set('th_grvs', '0.3[cm]');
model.geom('part8').inputParam.descr('th_grvs', 'Fins thickness');
model.geom('part8').inputParam.set('L_grvs', '0.2[cm]/3');
model.geom('part8').inputParam.descr('L_grvs', 'Grooves depth');
model.geom('part8').create('cyl1', 'Cylinder');
model.geom('part8').feature('cyl1').set('r', 'Rout');
model.geom('part8').feature('cyl1').set('h', 'L0');
model.geom('part8').feature('cyl1').set('pos', {'-L0/2' '0' '0'});
model.geom('part8').feature('cyl1').set('axistype', 'x');
model.geom('part8').feature('cyl1').setIndex('layername', 'Layer 1', 0);
model.geom('part8').feature('cyl1').setIndex('layer', 'L0/4', 0);
model.geom('part8').feature('cyl1').set('layerside', false);
model.geom('part8').feature('cyl1').set('layerbottom', true);
model.geom('part8').feature('cyl1').set('layertop', true);
model.geom('part8').run('cyl1');
model.geom('part8').create('pc1', 'ParametricCurve');
model.geom('part8').feature('pc1').set('parmin', '-L0');
model.geom('part8').feature('pc1').set('parmax', 'L0');
model.geom('part8').feature('pc1').set('coord', {'s' 'Rout*cos(2*pi*s/L0[1/m])' ''});
model.geom('part8').feature('pc1').setIndex('coord', 'Rout*sin(2*pi*s/L0[1/m])', 2);
model.geom('part8').run('pc1');
model.geom('part8').create('wp1', 'WorkPlane');
model.geom('part8').feature('wp1').set('unite', true);
model.geom('part8').feature('wp1').set('planetype', 'coordinates');
model.geom('part8').feature('wp1').setIndex('genpoints', '-L0', 0, 0);
model.geom('part8').feature('wp1').setIndex('genpoints', 'Rout', 0, 1);
model.geom('part8').feature('wp1').setIndex('genpoints', '-L0', 1, 0);
model.geom('part8').feature('wp1').setIndex('genpoints', 'Rout+1', 1, 1);
model.geom('part8').feature('wp1').setIndex('genpoints', '-L0+1', 2, 0);
model.geom('part8').feature('wp1').setIndex('genpoints', 'Rout', 2, 1);
model.geom('part8').run('wp1');
model.geom('part8').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('part8').feature('wp1').geom.feature('r1').set('size', {'2*L_grvs' 'th_grvs'});
model.geom('part8').feature('wp1').geom.feature('r1').set('pos', {'-L_grvs' '-th_grvs/2'});
model.geom('part8').feature('wp1').geom.run('r1');
model.geom('part8').run('wp1');
model.geom('part8').create('swe1', 'Sweep');
model.geom('part8').feature('swe1').set('includefinal', false);
model.geom('part8').feature('swe1').set('crossfaces', true);
model.geom('part8').feature('swe1').set('manualdir', false);
model.geom('part8').feature('swe1').selection('enttosweep').set('wp1', 1);
model.geom('part8').feature('swe1').selection('edge').set('pc1', 1);
model.geom('part8').feature('swe1').set('keep', false);
model.geom('part8').feature('swe1').set('twisting', 'curvature');
model.geom('part8').run('swe1');
model.geom('part8').create('spl1', 'Split');
model.geom('part8').feature('spl1').selection('input').set({'cyl1'});
model.geom('part8').run('spl1');
model.geom('part8').create('dif1', 'Difference');
model.geom('part8').feature('dif1').selection('input').set({'spl1'});
model.geom('part8').feature('dif1').selection('input2').set({'swe1'});
model.geom('part8').run('dif1');
model.geom('part8').create('uni1', 'Union');
model.geom('part8').feature('uni1').selection('input').set({'dif1'});
model.geom('part8').feature('uni1').set('intbnd', false);
model.geom('part8').run('uni1');
model.geom('part8').create('pi1', 'PartInstance');
model.geom('part8').feature('pi1').set('selkeepnoncontr', false);
model.geom('part8').feature('pi1').set('part', 'part3');
model.geom('part8').run('pi1');
model.geom('part8').selection.create('csel1', 'CumulativeSelection');
model.geom('part8').selection('csel1').label('Inner Fluid Domain');
model.geom('part8').feature('pi1').setEntry('selcontributetodom', 'pi1_csel1.dom', 'csel1');
model.geom('part8').selection.create('csel2', 'CumulativeSelection');
model.geom('part8').selection('csel2').label('Inner Fluid Inlet');
model.geom('part8').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel2.bnd', 'csel2');
model.geom('part8').selection.create('csel3', 'CumulativeSelection');
model.geom('part8').selection('csel3').label('Inner Fluid Outlet');
model.geom('part8').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel3.bnd', 'csel3');
model.geom('part8').selection.create('csel4', 'CumulativeSelection');
model.geom('part8').selection('csel4').label('Flow Periodicity');
model.geom('part8').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel4.bnd', 'csel4');
model.geom('part8').create('co1', 'Compose');
model.geom('part8').feature('co1').set('formula', 'uni1-pi1+pi1');
model.geom('part8').run('co1');
model.geom('part8').create('sel1', 'ExplicitSelection');
model.geom('part8').feature('sel1').label('Selection: Temperature Periodicity');
model.geom('part8').feature('sel1').selection('selection').init(2);
model.geom('part8').feature('sel1').selection('selection').set('co1', [1 2 52 53]);
model.geom('part8').run('sel1');
model.geom('part8').create('sel2', 'ExplicitSelection');
model.geom('part8').feature('sel2').label('Selection: Exterior Fins');
model.geom('part8').feature('sel2').selection('selection').init(2);
model.geom('part8').run('sel2');
model.geom('part8').create('sel3', 'ExplicitSelection');
model.geom('part8').feature('sel3').label('Selection: Composite Faces');
model.geom('part8').feature('sel3').selection('selection').init(2);
model.geom('part8').feature('sel3').selection('selection').set('co1', 36);
model.geom('part8').feature('sel3').set('groupcontang', true);
model.geom('part8').selection.create('csel5', 'CumulativeSelection');
model.geom('part8').selection('csel5').label('Pressure Constraint');
model.geom('part8').feature('pi1').setEntry('selkeeppnt', 'pi1_csel5.pnt', false);
model.geom('part8').feature('pi1').setEntry('selcontributetopnt', 'pi1_csel5.pnt', 'csel5');
model.geom('part8').run('sel3');
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part5');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'Rout', 'Rout_i');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'L0', 'L0_i');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'L_fins', 'L_fins_i');
model.geom('geom1').run('pi1');
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Inner Fluid Domain');
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_csel1.dom', 'csel1');
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Temperature Periodicity');
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel1', 'csel2');
model.geom('geom1').selection.create('csel3', 'CumulativeSelection');
model.geom('geom1').selection('csel3').label('Exterior Fins');
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel2', 'csel3');
model.geom('geom1').selection.create('csel4', 'CumulativeSelection');
model.geom('geom1').selection('csel4').label('Composite Faces');
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel3', 'csel4');
model.geom('geom1').selection.create('csel5', 'CumulativeSelection');
model.geom('geom1').selection('csel5').label('Inner Fluid Inlet');
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel2.bnd', 'csel5');
model.geom('geom1').selection.create('csel6', 'CumulativeSelection');
model.geom('geom1').selection('csel6').label('Inner Fluid Outlet');
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel3.bnd', 'csel6');
model.geom('geom1').selection.create('csel7', 'CumulativeSelection');
model.geom('geom1').selection('csel7').label('Flow Periodicity');
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel4.bnd', 'csel7');
model.geom('geom1').selection.create('csel8', 'CumulativeSelection');
model.geom('geom1').selection('csel8').label('Pressure Constraint');
model.geom('geom1').feature('pi1').setEntry('selcontributetopnt', 'pi1_csel5.pnt', 'csel8');
model.geom('geom1').create('boxsel1', 'BoxSelection');
model.geom('geom1').feature('boxsel1').label('Selection: Whole Pipe');
model.geom('geom1').feature('boxsel1').set('entitydim', 2);
model.geom('geom1').run('boxsel1');
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').set('type', 'surface');
model.geom('geom1').feature('cyl1').set('r', '2.5*Rout_i');
model.geom('geom1').feature('cyl1').set('h', 'L0_i');
model.geom('geom1').feature('cyl1').set('pos', {'-L0_i/2' '0' '0'});
model.geom('geom1').feature('cyl1').set('axistype', 'x');
model.geom('geom1').run('cyl1');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'L0_i' '20*(Rout_i+Rinn_i)' '1'});
model.geom('geom1').feature('blk1').setIndex('size', '5*(Rout_i+Rinn_i)', 2);
model.geom('geom1').feature('blk1').set('pos', {'-L0_i/2' '-20*(Rout_i+Rinn_i)/4' '0'});
model.geom('geom1').feature('blk1').setIndex('pos', '-5*(Rout_i+Rinn_i)/2', 2);
model.geom('geom1').run('blk1');
model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').label('Selection: Mesh, Left Boundary');
model.geom('geom1').feature('sel1').selection('selection').init(2);
model.geom('geom1').feature('sel1').selection('selection').set('blk1', 2);
model.geom('geom1').run('sel1');
model.geom('geom1').create('sel2', 'ExplicitSelection');
model.geom('geom1').feature('sel2').label('Selection: Outer Fluid Inlet');
model.geom('geom1').feature('sel2').selection('selection').init(2);
model.geom('geom1').feature('sel2').selection('selection').set('blk1', 3);
model.geom('geom1').run('sel2');
model.geom('geom1').create('sel3', 'ExplicitSelection');
model.geom('geom1').feature('sel3').label('Selection: Outer Fluid Outlet');
model.geom('geom1').feature('sel3').selection('selection').init(2);
model.geom('geom1').feature('sel3').selection('selection').set('blk1', 6);
model.geom('geom1').run('sel3');
model.geom('geom1').create('sel4', 'ExplicitSelection');
model.geom('geom1').feature('sel4').label('Selection: Mesh Control Faces');
model.geom('geom1').feature('sel4').selection('selection').init(2);
model.geom('geom1').feature('sel4').selection('selection').set('cyl1', [1 2 3 4]);
model.geom('geom1').run('fin');
model.geom('geom1').create('cmf1', 'CompositeFaces');
model.geom('geom1').feature('cmf1').selection('input').named('csel4');
model.geom('geom1').run('cmf1');
model.geom('geom1').create('mcf1', 'MeshControlFaces');
model.geom('geom1').feature('mcf1').selection('input').named('sel4');
model.geom('geom1').run('mcf1');
model.geom('geom1').run('mcf1');

model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');
model.selection('box1').label('Fluid Slip Condition');
model.selection('box1').set('entitydim', 2);
model.selection('box1').set('xmin', '-L0_i');
model.selection('box1').set('xmax', 'L0_i');
model.selection('box1').set('ymin', '9*(Rout_i+Rinn_i)');
model.selection('box1').set('ymax', '10*(Rout_i+Rinn_i)');
model.selection('box1').set('zmin', '-5*(Rout_i+Rinn_i)');
model.selection('box1').set('zmax', '5*(Rout_i+Rinn_i)');
model.selection.duplicate('box2', 'box1');
model.selection('box2').label('Exterior Fluid Domain');
model.selection('box2').set('entitydim', 3);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Fluid Domains');
model.selection('uni1').set('input', {'box2' 'geom1_csel1_dom'});
model.selection.create('com1', 'Complement');
model.selection('com1').model('comp1');
model.selection('com1').label('Pipe Domain');
model.selection('com1').set('input', {'uni1'});
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('All Pipe Boundaries');
model.selection('adj1').set('input', {'com1'});
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Periodicity');
model.selection('uni2').set('entitydim', 2);
model.selection('uni2').set('input', {'geom1_csel2_bnd' 'geom1_csel7_bnd'});
model.selection.create('adj2', 'Adjacent');
model.selection('adj2').model('comp1');
model.selection('adj2').label('Pipe Inner Walls');
model.selection('adj2').set('input', {'geom1_csel1_dom'});
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Pipe Walls');
model.selection('dif1').set('entitydim', 2);
model.selection('dif1').set('add', {'geom1_boxsel1'});
model.selection('dif1').set('subtract', {'geom1_csel7_bnd'});
model.selection.create('int1', 'Intersection');
model.selection('int1').model('comp1');
model.selection('int1').label('Mesh, Pipe and Inlet');
model.selection('int1').set('entitydim', 2);
model.selection('int1').set('input', {'uni2' 'geom1_sel1'});
model.selection.create('dif2', 'Difference');
model.selection('dif2').model('comp1');
model.selection('dif2').label('Inner Heat Exchange Walls');
model.selection('dif2').set('entitydim', 2);
model.selection('dif2').set('add', {'adj2'});
model.selection('dif2').set('subtract', {'geom1_csel5_bnd' 'geom1_csel6_bnd'});
model.selection.create('dif3', 'Difference');
model.selection('dif3').model('comp1');
model.selection('dif3').label('Outer Heat Exchange Walls');
model.selection('dif3').set('entitydim', 2);
model.selection('dif3').set('add', {'adj1'});
model.selection('dif3').set('subtract', {'uni2' 'dif2' 'geom1_csel3_bnd'});
model.selection.create('uni3', 'Union');
model.selection('uni3').model('comp1');
model.selection('uni3').label('All Pipe Walls and Fins');
model.selection('uni3').set('entitydim', 2);
model.selection('uni3').set('input', {'adj1' 'geom1_csel3_bnd'});

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').label('Average: Inner Fluid Inlet');
model.cpl('aveop1').selection.geom('geom1', 2);
model.cpl('aveop1').selection.named('geom1_csel5_bnd');
model.cpl.create('aveop2', 'Average', 'geom1');
model.cpl('aveop2').set('axisym', true);
model.cpl('aveop2').label('Average: Inner Fluid Outlet');
model.cpl('aveop2').selection.geom('geom1', 2);
model.cpl('aveop2').selection.named('geom1_csel6_bnd');
model.cpl.create('aveop3', 'Average', 'geom1');
model.cpl('aveop3').set('axisym', true);
model.cpl('aveop3').label('Average: Outer Fluid Inlet');
model.cpl('aveop3').selection.geom('geom1', 2);
model.cpl('aveop3').selection.named('geom1_sel2');
model.cpl.create('aveop4', 'Average', 'geom1');
model.cpl('aveop4').set('axisym', true);
model.cpl('aveop4').label('Average: Outer Fluid Outlet');
model.cpl('aveop4').selection.geom('geom1', 2);
model.cpl('aveop4').selection.named('geom1_sel3');
model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').label('Integration: Inner Heat Exchange Walls');
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.named('dif2');
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').label('Integration: Inner Fluid Inlet');
model.cpl('intop2').selection.geom('geom1', 2);
model.cpl('intop2').selection.named('geom1_csel5_bnd');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat2').label('Water, liquid');
model.material('mat2').set('family', 'water');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat2').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat2').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat2').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat2').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat2').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat3').label('Copper');
model.material('mat3').set('family', 'copper');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.35');
model.material('mat3').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat3').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat3').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat3').propertyGroup('linzRes').addInput('temperature');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat4').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat4').label('Copper 1');
model.material('mat4').set('family', 'copper');
model.material('mat4').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat4').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat4').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat4').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat4').propertyGroup('Enu').set('nu', '0.35');
model.material('mat4').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat4').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat4').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat4').propertyGroup('linzRes').addInput('temperature');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', {'eta(T0)'});
model.material('mat1').propertyGroup('def').set('density', {'rho(pA0,T0)'});
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T0)'});
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', {'Cp(T0)'});
model.material('mat2').propertyGroup('def').set('dynamicviscosity', {'eta(T0)'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'Cp(T0)'});
model.material('mat2').propertyGroup('def').set('density', {'rho(T0)'});
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T0)'});
model.material('mat2').selection.named('geom1_csel1_dom');
model.material('mat3').selection.named('com1');
model.material('mat4').label('Copper Fins');
model.material('mat4').selection.geom('geom1', 2);
model.material('mat4').selection.named('geom1_csel3_bnd');
model.material('mat4').propertyGroup.create('shell', 'Shell');
model.material('mat4').propertyGroup('shell').set('lth', {'th_fins_i'});

model.physics('ht').feature('fluid1').selection.named('uni1');
model.physics('ht').feature('init1').set('Tinit', 'T0');
model.physics('ht').create('init2', 'init', 3);
model.physics('ht').feature('init2').selection.named('geom1_csel1_dom');
model.physics('ht').feature('init2').set('Tinit', 'T0+dT');
model.physics('ht').create('sls1', 'SolidLayeredShell', 2);
model.physics('ht').feature('sls1').selection.named('geom1_csel3_bnd');
model.physics('ht').feature('sls1').set('LayerType', 'Conductive');
model.physics('ht').create('ifl1', 'Inflow', 2);
model.physics('ht').feature('ifl1').selection.named('geom1_sel2');
model.physics('ht').feature('ifl1').set('Tustr', 'T0');
model.physics('ht').create('ofl1', 'ConvectiveOutflow', 2);
model.physics('ht').feature('ofl1').selection.named('geom1_sel3');
model.physics('ht').create('pc1', 'PeriodicHeat', 2);
model.physics('ht').feature('pc1').selection.named('uni2');
model.physics('ht').feature('pc1').set('DeltaT', 'dT_pipe');
model.physics('ht').create('ge1', 'GlobalEquations', -1);
model.physics('ht').feature('ge1').setIndex('name', 'dT_pipe', 0, 0);
model.physics('ht').feature('ge1').setIndex('equation', '(T0+dT-aveop1(T))*1e6', 0, 0);
model.physics('ht').feature('ge1').set('DependentVariableQuantity', 'temperature');
model.physics('ht').feature('ge1').set('SourceTermQuantity', 'temperature');
model.physics('spf').selection.named('uni1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'Incompressible');
model.physics('spf').prop('TurbulenceModelProperty').set('WallTreatment', 'LowReynoldsNumber');
model.physics('spf').prop('PhysicalModelProperty').set('pref', 'pA0');
model.physics('spf').feature('init1').set('u_init', {'0' 'u0_outer' '0'});
model.physics('spf').create('init2', 'init', 3);
model.physics('spf').feature('init2').selection.named('geom1_csel1_dom');
model.physics('spf').feature('init2').set('u_init', {'mfr0_inner/intop2(mat2.def.rho(T0[1/K])[kg/m^3])' '0' '0'});
model.physics('spf').create('wallbc2', 'WallBC', 2);
model.physics('spf').feature('wallbc2').selection.named('box1');
model.physics('spf').feature('wallbc2').set('BoundaryCondition', 'Slip');
model.physics('spf').create('iwbc1', 'InteriorWallBC', 2);
model.physics('spf').feature('iwbc1').selection.named('geom1_csel3_bnd');
model.physics('spf').create('inl1', 'InletBoundary', 2);
model.physics('spf').feature('inl1').selection.named('geom1_sel2');
model.physics('spf').feature('inl1').set('BoundaryCondition', 'Pressure');
model.physics('spf').feature('inl1').set('p0', 'dp_outer');
model.physics('spf').create('out1', 'OutletBoundary', 2);
model.physics('spf').feature('out1').selection.named('geom1_sel3');
model.physics('spf').create('pfc1', 'PeriodicFlowCondition', 2);
model.physics('spf').feature('pfc1').selection.named('geom1_csel7_bnd');
model.physics('spf').feature('pfc1').set('pdiff', 'dp_inner');
model.physics('spf').create('prpc1', 'PressurePointConstraint', 0);
model.physics('spf').feature('prpc1').selection.named('geom1_csel8_pnt');
model.physics('spf').create('ge1', 'GlobalEquations', -1);
model.physics('spf').feature('ge1').setIndex('name', 'dp_inner', 0, 0);
model.physics('spf').feature('ge1').setIndex('equation', 'aveop1(u)-mfr0_inner/intop2(mat2.def.rho(T0))', 0, 0);
model.physics('spf').feature('ge1').setIndex('name', 'dp_outer', 1, 0);
model.physics('spf').feature('ge1').setIndex('equation', '', 1, 0);
model.physics('spf').feature('ge1').setIndex('initialValueU', 0, 1, 0);
model.physics('spf').feature('ge1').setIndex('initialValueUt', 0, 1, 0);
model.physics('spf').feature('ge1').setIndex('description', '', 1, 0);
model.physics('spf').feature('ge1').setIndex('equation', 'aveop3(v)-u0_outer', 1, 0);
model.physics('spf').feature('ge1').set('DependentVariableQuantity', 'pressure');
model.physics('spf').feature('ge1').set('SourceTermQuantity', 'velocity');

model.mesh('mesh1').label('Mesh: No Fins/Grooves');
model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('size1').selection.named('com1');
model.mesh('mesh1').feature('size1').set('table', 'cfd');
model.mesh('mesh1').feature('size1').set('hauto', 4);
model.mesh('mesh1').feature('size1').active(false);
model.mesh('mesh1').feature.duplicate('size2', 'size1');
model.mesh('mesh1').feature('size2').selection.set([4]);
model.mesh('mesh1').feature('size').set('table', 'cfd');
model.mesh('mesh1').feature('size').set('hauto', 6);
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.named('geom1_sel1');
model.mesh('mesh1').feature('ftri1').active(false);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.named('int1');
model.mesh('mesh1').feature('ftri1').feature('size1').set('table', 'cfd');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hauto', 4);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').active(false);
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 3);
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(3);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('bl1').selection.named('uni1');
model.mesh('mesh1').feature('bl1').set('sharpcorners', 'trim');
model.mesh('mesh1').feature('bl1').active(false);
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('uni3');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 2);
model.mesh('mesh1').feature('bl1').feature('blp').set('blhminfact', 5);
model.mesh.create('mesh2', 'geom1');
model.mesh('mesh2').label('Mesh: Fins/Grooves');
model.mesh('mesh2').create('size1', 'Size');
model.mesh('mesh2').feature('size').set('table', 'cfd');
model.mesh('mesh2').feature('size').set('hauto', 6);
model.mesh('mesh2').feature('size1').selection.geom('geom1', 3);
model.mesh('mesh2').feature('size1').selection.named('com1');
model.mesh('mesh2').feature('size1').set('table', 'cfd');
model.mesh('mesh2').feature('size1').set('hauto', 4);
model.mesh('mesh2').feature.duplicate('size2', 'size1');
model.mesh('mesh2').feature('size2').selection.set([4]);
model.mesh('mesh2').create('size3', 'Size');
model.mesh('mesh2').feature('size3').selection.geom('geom1', 3);
model.mesh('mesh2').feature('size3').selection.named('geom1_csel1_dom');
model.mesh('mesh2').feature('size3').set('table', 'cfd');
model.mesh('mesh2').feature('size3').set('hauto', 2);
model.mesh('mesh2').create('ftri1', 'FreeTri');
model.mesh('mesh2').feature('ftri1').selection.named('geom1_sel1');
model.mesh('mesh2').feature('ftri1').create('size1', 'Size');
model.mesh('mesh2').feature('ftri1').feature('size1').selection.named('int1');
model.mesh('mesh2').feature('ftri1').feature('size1').set('table', 'cfd');
model.mesh('mesh2').feature('ftri1').feature('size1').set('hauto', 3);
model.mesh('mesh2').create('swe1', 'Sweep');
model.mesh('mesh2').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh2').feature('swe1').selection.named('geom1_csel1_dom');
model.mesh('mesh2').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh2').feature('swe1').feature('dis1').selection.all;
model.mesh('mesh2').feature('swe1').feature('dis1').set('numelem', 3);
model.mesh('mesh2').feature.duplicate('swe2', 'swe1');
model.mesh('mesh2').feature('swe2').selection.set([1]);
model.mesh('mesh2').create('conv1', 'Convert');
model.mesh('mesh2').feature('conv1').selection.geom('geom1', 2);
model.mesh('mesh2').feature('conv1').selection.named('dif2');
model.mesh('mesh2').create('conv2', 'Convert');
model.mesh('mesh2').feature('conv2').selection.geom('geom1', 2);
model.mesh('mesh2').feature('conv2').selection.set([46 47 48 49]);
model.mesh('mesh2').create('ftri2', 'FreeTri');
model.mesh('mesh2').feature('ftri2').selection.named('geom1_csel3_bnd');
model.mesh('mesh2').feature('ftri2').create('size1', 'Size');
model.mesh('mesh2').feature('ftri2').feature('size1').set('table', 'cfd');
model.mesh('mesh2').feature('ftri2').feature('size1').set('hauto', 3);
model.mesh('mesh2').create('ftet1', 'FreeTet');
model.mesh('mesh2').feature('ftet1').set('smoothcontrol', false);
model.mesh('mesh2').create('bl1', 'BndLayer');
model.mesh('mesh2').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh2').feature('bl1').selection.geom(3);
model.mesh('mesh2').feature('bl1').selection.set([]);
model.mesh('mesh2').feature('bl1').selection.allGeom;
model.mesh('mesh2').feature('bl1').selection.geom('geom1', 3);
model.mesh('mesh2').feature('bl1').selection.named('uni1');
model.mesh('mesh2').feature('bl1').set('sharpcorners', 'trim');
model.mesh('mesh2').feature('bl1').set('smoothtransition', false);
model.mesh('mesh2').feature('bl1').create('blp1', 'BndLayerProp');
model.mesh('mesh2').feature('bl1').feature('blp').selection.named('dif1');
model.mesh('mesh2').feature('bl1').feature('blp').set('blnlayers', 5);
model.mesh('mesh2').feature('bl1').feature('blp').set('blhminfact', 2);
model.mesh('mesh2').feature('bl1').feature('blp1').selection.named('dif2');
model.mesh('mesh2').feature('bl1').feature('blp1').set('blnlayers', 4);
model.mesh('mesh2').feature('bl1').feature('blp1').set('blhminfact', 8);
model.mesh('mesh2').run;

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'th_i', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'th_i', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'u0_outer', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(u0_outer_min,(u0_outer_max-(u0_outer_min))/(u0_outer_steps-1),u0_outer_max)', 0);
model.study('std1').feature('param').setIndex('punit', 'm/s', 0);
model.study('std1').feature('wdi').setEntry('activateCoupling', 'nitf1', false);
model.study('std1').feature('wdi').setEntry('mesh', 'geom1', 'mesh2');
model.study('std1').feature('stat').setEntry('activate', 'ht', false);
model.study('std1').feature('stat').setEntry('activateCoupling', 'nitf1', false);
model.study('std1').feature('stat').setEntry('mesh', 'geom1', 'mesh2');
model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat2').setEntry('activate', 'spf', false);

model.sol.create('sol1');

model.mesh('mesh2').stat.selection.geom(3);
model.mesh('mesh2').stat.selection.set([1 3]);
model.mesh('mesh2').stat.selection.geom(3);
model.mesh('mesh2').stat.selection.set([1 3]);
model.mesh('mesh2').stat.selection.geom(3);
model.mesh('mesh2').stat.selection.set([1 3]);
model.mesh('mesh2').stat.selection.geom(3);
model.mesh('mesh2').stat.selection.set([1 3]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'wdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'wdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-6);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, wall distance (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, wall distance (spf)');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('se1', 'Segregated');
model.sol('sol1').feature('s2').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u' 'comp1_ODE2'});
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_ODE2'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_ODE2'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('segvar', {'comp1_yPlus'});
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subdamp', 0.45);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i2').set('rhob', 400);
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('AMG, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('linsolver', 'i2');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').label('Turbulence Variables');
model.sol('sol1').feature('s2').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s2').feature('se1').set('subinitcfl', 2);
model.sol('sol1').feature('s2').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s2').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s2').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s2').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s2').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s2').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s2').feature('se1').set('maxsegiter', 400);
model.sol('sol1').feature('s2').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s2').feature('se1').feature('ll1').set('lowerlimit', 'comp1.yPlus 0 ');
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'stat2');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'stat2');
model.sol('sol1').create('s3', 'Stationary');
model.sol('sol1').feature('s3').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s3').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('s3').feature('fc1').set('damp', 0.8);
model.sol('sol1').feature('s3').feature('fc1').set('stabacc', 'cflcmp');
model.sol('sol1').feature('s3').feature('fc1').set('initcfl', 2);
model.sol('sol1').feature('s3').feature('fc1').set('mincfl', 10000);
model.sol('sol1').feature('s3').feature('fc1').set('kppid', 0.65);
model.sol('sol1').feature('s3').feature('fc1').set('kdpid', 0.05);
model.sol('sol1').feature('s3').feature('fc1').set('kipid', 0.05);
model.sol('sol1').feature('s3').feature('fc1').set('cfltol', 0.1);
model.sol('sol1').feature('s3').feature('fc1').set('cflaa', true);
model.sol('sol1').feature('s3').feature('fc1').set('cflaacfl', 9000);
model.sol('sol1').feature('s3').feature('fc1').set('cflaafact', 1);
model.sol('sol1').feature('s3').feature('fc1').set('maxiter', 300);
model.sol('sol1').feature('s3').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('d1').label('Direct, heat transfer variables (ht) (nitf1)');
model.sol('sol1').feature('s3').create('i1', 'Iterative');
model.sol('sol1').feature('s3').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s3').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s3').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('s3').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i1').label('AMG, heat transfer variables (ht) (nitf1)');
model.sol('sol1').feature('s3').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s3').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('s3').feature('fc1').set('damp', 0.8);
model.sol('sol1').feature('s3').feature('fc1').set('stabacc', 'cflcmp');
model.sol('sol1').feature('s3').feature('fc1').set('initcfl', 2);
model.sol('sol1').feature('s3').feature('fc1').set('mincfl', 10000);
model.sol('sol1').feature('s3').feature('fc1').set('kppid', 0.65);
model.sol('sol1').feature('s3').feature('fc1').set('kdpid', 0.05);
model.sol('sol1').feature('s3').feature('fc1').set('kipid', 0.05);
model.sol('sol1').feature('s3').feature('fc1').set('cfltol', 0.1);
model.sol('sol1').feature('s3').feature('fc1').set('cflaa', true);
model.sol('sol1').feature('s3').feature('fc1').set('cflaacfl', 9000);
model.sol('sol1').feature('s3').feature('fc1').set('cflaafact', 1);
model.sol('sol1').feature('s3').feature('fc1').set('maxiter', 300);
model.sol('sol1').feature('s3').feature.remove('fcDef');
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v3').set('solnum', 'auto');
model.sol('sol1').feature('v3').set('solvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'u0_outer'});
model.batch('p1').set('plistarr', {'range(u0_outer_min,(u0_outer_max-(u0_outer_min))/(u0_outer_steps-1),u0_outer_max)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol('sol1').feature('s1').set('stol', 'rtol');
model.sol('sol1').feature('s1').feature('dDef').active(true);
model.sol('sol1').feature('s1').feature('dDef').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('s1').feature('fc1').set('damp', '0.5');
model.sol('sol1').feature('s2').set('stol', 'rtol');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s3').set('stol', 'rtol');
model.sol.create('sol4');
model.sol('sol4').study('std1');
model.sol('sol4').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol4');
model.batch('p1').run('compute');

model.result.dataset.create('lshl1', 'LayeredMaterial');
model.result.dataset('lshl1').set('data', 'dset4');
model.result.dataset('lshl1').selection.geom('geom1', 2);
model.result.dataset('lshl1').selection.set([36]);
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Temperature (ht)');
model.result('pg1').set('data', 'dset4');
model.result('pg1').setIndex('looplevel', 2, 0);
model.result('pg1').set('data', 'dset4');
model.result('pg1').setIndex('looplevel', 2, 0);
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond2/pcond1/pg1');
model.result('pg1').selection.geom('geom1', 3);
model.result('pg1').selection.set([1 2 3]);
model.result('pg1').feature.create('vol1', 'Volume');
model.result('pg1').feature('vol1').label('Domain');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('solutionparams', 'parent');
model.result('pg1').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('vol1').set('smooth', 'internal');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('data', 'parent');
model.result('pg1').feature.create('vol2', 'Volume');
model.result('pg1').feature('vol2').label('Layered Shell');
model.result('pg1').feature('vol2').set('data', 'lshl1');
model.result('pg1').feature('vol2').setIndex('looplevel', 2, 0);
model.result('pg1').feature('vol2').set('solutionparams', 'parent');
model.result('pg1').feature('vol2').set('titletype', 'none');
model.result('pg1').feature('vol2').set('smooth', 'internal');
model.result('pg1').feature('vol2').set('data', 'lshl1');
model.result('pg1').feature('vol2').set('inheritplot', 'vol1');
model.result('pg1').feature.create('line1', 'Line');
model.result('pg1').feature('line1').label('Layered Shell Edges');
model.result('pg1').feature('line1').set('data', 'lshl1');
model.result('pg1').feature('line1').setIndex('looplevel', 2, 0);
model.result('pg1').feature('line1').set('solutionparams', 'parent');
model.result('pg1').feature('line1').set('expr', '1');
model.result('pg1').feature('line1').set('titletype', 'none');
model.result('pg1').feature('line1').set('coloring', 'uniform');
model.result('pg1').feature('line1').set('color', 'fromtheme');
model.result('pg1').feature('line1').set('smooth', 'internal');
model.result('pg1').feature('line1').set('data', 'lshl1');
model.result.dataset('dset4').set('geom', 'geom1');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (spf)');
model.result('pg2').set('data', 'dset4');
model.result('pg2').setIndex('looplevel', 2, 0);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset4');
model.result('pg2').setIndex('looplevel', 2, 0);
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg2').feature.create('slc1', 'Slice');
model.result('pg2').feature('slc1').label('Slice');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('expr', 'spf.U');
model.result('pg2').feature('slc1').set('smooth', 'internal');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'none');
model.result.dataset.create('surf2', 'Surface');
model.result.dataset('surf2').label('Interior Walls');
model.result.dataset('surf2').set('data', 'none');
model.result.dataset('surf1').set('data', 'dset4');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([1 3 4 6 7 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 37 38 39 40 41]);
model.result.dataset('surf2').set('data', 'dset4');
model.result.dataset('surf2').selection.geom('geom1', 2);
model.result.dataset('surf2').selection.set([36]);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Pressure (spf)');
model.result('pg3').set('data', 'dset4');
model.result('pg3').setIndex('looplevel', 2, 0);
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset4');
model.result('pg3').setIndex('looplevel', 2, 0);
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond2/pg4');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('data', 'surf1');
model.result('pg3').feature('surf1').setIndex('looplevel', 2, 0);
model.result('pg3').feature('surf1').set('expr', 'p');
model.result('pg3').feature('surf1').set('colortable', 'Dipole');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('data', 'surf1');
model.result('pg3').feature('surf1').feature.create('tran1', 'Transparency');
model.result('pg3').feature.create('slit1', 'SurfaceSlit');
model.result('pg3').feature('slit1').set('data', 'surf2');
model.result('pg3').feature('slit1').setIndex('looplevel', 2, 0);
model.result('pg3').feature('slit1').set('upexpr', 'up(p)');
model.result('pg3').feature('slit1').set('downexpr', 'down(p)');
model.result('pg3').feature('slit1').set('titletype', 'none');
model.result('pg3').feature('slit1').set('smooth', 'internal');
model.result('pg3').feature('slit1').set('data', 'surf2');
model.result('pg3').feature('slit1').set('inheritplot', 'surf1');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Wall Resolution (spf)');
model.result('pg4').set('data', 'dset4');
model.result('pg4').setIndex('looplevel', 2, 0);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset4');
model.result('pg4').setIndex('looplevel', 2, 0);
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond2/pg3');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Wall Resolution');
model.result('pg4').feature('surf1').set('data', 'surf1');
model.result('pg4').feature('surf1').setIndex('looplevel', 2, 0);
model.result('pg4').feature('surf1').set('expr', 'spf.Delta_wPlus');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('data', 'surf1');
model.result('pg4').feature.create('slit1', 'SurfaceSlit');
model.result('pg4').feature('slit1').label('Wall Resolution, Interior Walls');
model.result('pg4').feature('slit1').set('data', 'surf2');
model.result('pg4').feature('slit1').setIndex('looplevel', 2, 0);
model.result('pg4').feature('slit1').set('upexpr', 'spf.Delta_wPlus_u');
model.result('pg4').feature('slit1').set('downexpr', 'spf.Delta_wPlus_d');
model.result('pg4').feature('slit1').set('smooth', 'internal');
model.result('pg4').feature('slit1').set('data', 'surf2');
model.result('pg4').feature('slit1').set('inheritplot', 'surf1');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Temperature and Fluid Flow (nitf1)');
model.result('pg5').set('data', 'dset4');
model.result('pg5').setIndex('looplevel', 2, 0);
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').set('data', 'dset4');
model.result('pg5').setIndex('looplevel', 2, 0);
model.result('pg5').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond3/pg1');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').label('Wall Temperature');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('expr', 'ht.Tvar');
model.result('pg5').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg5').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg5').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg5').feature('surf1').feature('sel1').selection.set([1 3 4 6 7 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 36 37 38 39 40 41]);
model.result('pg5').feature.create('vol1', 'Volume');
model.result('pg5').feature('vol1').label('Solid Temperature');
model.result('pg5').feature('vol1').set('showsolutionparams', 'on');
model.result('pg5').feature('vol1').set('solutionparams', 'parent');
model.result('pg5').feature('vol1').set('expr', 'nitf1.T');
model.result('pg5').feature('vol1').set('smooth', 'internal');
model.result('pg5').feature('vol1').set('showsolutionparams', 'on');
model.result('pg5').feature('vol1').set('data', 'parent');
model.result('pg5').feature('vol1').feature.create('sel1', 'Selection');
model.result('pg5').feature('vol1').feature('sel1').selection.geom('geom1', 3);
model.result('pg5').feature('vol1').feature('sel1').selection.set([2]);
model.result('pg5').feature('vol1').set('inheritplot', 'surf1');
model.result('pg5').feature.create('arwv1', 'ArrowVolume');
model.result('pg5').feature('arwv1').label('Fluid Flow');
model.result('pg5').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg5').feature('arwv1').set('solutionparams', 'parent');
model.result('pg5').feature('arwv1').set('expr', {'nitf1.ux' 'nitf1.uy' 'nitf1.uz'});
model.result('pg5').feature('arwv1').set('xnumber', 30);
model.result('pg5').feature('arwv1').set('ynumber', 30);
model.result('pg5').feature('arwv1').set('znumber', 30);
model.result('pg5').feature('arwv1').set('arrowtype', 'cone');
model.result('pg5').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg5').feature('arwv1').set('data', 'parent');
model.result('pg5').feature('arwv1').feature.create('col1', 'Color');
model.result('pg5').feature('arwv1').feature('col1').set('showcolordata', 'off');
model.result('pg5').feature('arwv1').feature('col1').set('expr', 'spf.U');
model.result('pg5').feature('arwv1').feature.create('filt1', 'Filter');
model.result('pg5').feature('arwv1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result('pg1').run;
model.result.dataset.create('surf3', 'Surface');
model.result.dataset('surf3').label('All Pipe Walls with Fins');
model.result.dataset('surf3').set('data', 'dset4');
model.result.dataset('surf3').selection.named('uni3');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').run;
model.result('pg6').label('Pipe Temperature, Fluid Velocity');
model.result('pg6').set('data', 'dset4');
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'Pipe Temperature, Fluid Velocity');
model.result('pg6').set('edges', false);
model.result('pg6').set('legendpos', 'alternating');

model.view('view1').set('showgrid', false);
model.view('view1').set('showaxisorientation', false);

model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('data', 'surf3');
model.result('pg6').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg6').feature.duplicate('surf2', 'surf1');
model.result('pg6').run;
model.result('pg6').feature('surf2').set('expr', 'T+dT_pipe');
model.result('pg6').feature('surf2').set('inheritplot', 'surf1');
model.result('pg6').feature('surf2').create('trn1', 'Translation');
model.result('pg6').run;
model.result('pg6').feature('surf2').feature('trn1').set('trans', {'-L0_i' '0' '0'});
model.result('pg6').feature('surf2').feature('trn1').set('applytodatasetedges', false);
model.result('pg6').run;
model.result('pg6').feature.duplicate('surf3', 'surf2');
model.result('pg6').run;
model.result('pg6').feature('surf3').set('expr', 'T+2*dT_pipe');
model.result('pg6').run;
model.result('pg6').feature('surf3').feature('trn1').set('trans', {'-2*L0_i' '0' '0'});
model.result('pg6').run;
model.result('pg6').feature.duplicate('surf4', 'surf2');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').feature('surf3').set('expr', 'T-dT_pipe');
model.result('pg6').run;
model.result('pg6').feature('surf3').feature('trn1').set('trans', {'L0_i' '0' '0'});
model.result('pg6').run;
model.result('pg6').feature.duplicate('surf5', 'surf3');
model.result('pg6').run;
model.result('pg6').feature('surf5').set('expr', 'T-2*dT_pipe');
model.result('pg6').run;
model.result('pg6').feature('surf5').feature('trn1').set('trans', {'2*L0_i' '0' '0'});
model.result('pg6').run;
model.result('pg6').create('mslc1', 'Multislice');
model.result('pg6').feature('mslc1').set('expr', 'spf.U');
model.result('pg6').feature('mslc1').set('descr', 'Velocity magnitude');
model.result('pg6').feature('mslc1').set('xnumber', '2');
model.result('pg6').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg6').feature('mslc1').set('ycoord', 0);
model.result('pg6').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg6').feature('mslc1').set('zcoord', 0);
model.result('pg6').feature.duplicate('mslc2', 'mslc1');
model.result('pg6').run;
model.result('pg6').feature('mslc2').set('xnumber', '0');
model.result('pg6').feature('mslc2').set('inheritplot', 'mslc1');
model.result('pg6').feature('mslc2').create('trn1', 'Translation');
model.result('pg6').run;
model.result('pg6').feature('mslc2').feature('trn1').set('trans', {'-L0_i' '0' '0'});
model.result('pg6').feature('mslc2').feature('trn1').set('applytodatasetedges', false);
model.result('pg6').run;
model.result('pg6').feature.duplicate('mslc3', 'mslc2');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').feature('mslc3').feature('trn1').set('trans', {'L0_i' '0' '0'});
model.result('pg6').run;
model.result('pg6').create('arwv1', 'ArrowVolume');
model.result('pg6').feature('arwv1').set('expr', {'u' 'v' 'w'});
model.result('pg6').feature('arwv1').set('descr', 'Velocity field');
model.result('pg6').feature('arwv1').set('xnumber', 1);
model.result('pg6').feature('arwv1').set('ynumber', 11);
model.result('pg6').feature('arwv1').set('arrowtype', 'cone');
model.result('pg6').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg6').feature('arwv1').set('color', 'custom');
model.result('pg6').feature('arwv1').set('customcolor', [0.21176470816135406 0.5490196347236633 0.7960784435272217]);
model.result('pg6').feature('arwv1').create('trn1', 'Translation');
model.result('pg6').run;
model.result('pg6').feature('arwv1').feature('trn1').set('trans', {'-L0_i' '0' '0'});
model.result('pg6').feature('arwv1').feature('trn1').set('applytodatasetedges', false);
model.result('pg6').run;
model.result('pg6').feature.duplicate('arwv2', 'arwv1');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').feature('arwv2').feature('trn1').set('trans', {'L0_i' '0' '0'});
model.result('pg6').run;
model.result('pg6').create('arwv3', 'ArrowVolume');
model.result('pg6').feature('arwv3').setIndex('expr', 'u', 0);
model.result('pg6').feature('arwv3').set('expr', {'u' 'v' 'w'});
model.result('pg6').feature('arwv3').set('xnumber', 1);
model.result('pg6').feature('arwv3').set('ynumber', 4);
model.result('pg6').feature('arwv3').set('znumber', 4);
model.result('pg6').feature('arwv3').set('arrowtype', 'cone');
model.result('pg6').feature('arwv3').set('arrowlength', 'logarithmic');
model.result('pg6').feature('arwv3').set('color', 'custom');
model.result('pg6').feature('arwv3').set('customcolor', [0.6980392336845398 0.13333334028720856 0.13333334028720856]);
model.result('pg6').feature('arwv3').create('sel1', 'Selection');
model.result('pg6').feature('arwv3').feature('sel1').selection.named('geom1_csel1_dom');
model.result('pg6').run;
model.result('pg6').feature('arwv3').create('trn1', 'Translation');
model.result('pg6').run;
model.result('pg6').feature('arwv3').feature('trn1').set('trans', {'-3*L0_i' '0' '0'});
model.result('pg6').feature('arwv3').feature('trn1').set('applytodatasetedges', false);
model.result('pg6').run;
model.result('pg6').feature.duplicate('arwv4', 'arwv3');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').feature('arwv4').feature('trn1').set('trans', {'3*L0_i' '0' '0'});
model.result('pg6').run;
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Heat Dissipation Rate');
model.result('pg7').set('data', 'dset4');
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', 'Heat Dissipation Rate');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').setIndex('expr', 'abs(intop1(ht.ntflux))/(L0_i*abs(aveop1(T)-aveop3(T)))', 0);
model.result('pg7').feature('glob1').setIndex('unit', 'W/(m*K)', 0);
model.result('pg7').feature('glob1').setIndex('descr', 'Heat dissipation rate', 0);
model.result('pg7').feature('glob1').set('linewidth', 3);
model.result('pg7').feature('glob1').set('linemarker', 'star');
model.result('pg7').set('showlegends', false);
model.result('pg7').run;
model.result('pg7').run;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Heat Dissipation Rate');
model.result.numerical('gev1').set('data', 'dset4');
model.result.numerical('gev1').setIndex('expr', 'abs(intop1(ht.ntflux))/(L0_i*abs(aveop1(T)-aveop3(T)))', 0);
model.result.numerical('gev1').setIndex('descr', 'Heat dissipation rate', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Heat Dissipation Rate');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').label('Pressure Drop, Outer Fluid');
model.result.numerical('gev2').set('data', 'dset4');
model.result.numerical('gev2').setIndex('expr', 'aveop3(p)-aveop4(p)', 0);
model.result.numerical('gev2').setIndex('descr', 'Pressure drop, outer fluid', 0);
model.result.numerical('gev2').set('table', 'tbl1');
model.result.numerical('gev2').appendResult;
model.result.numerical.create('gev3', 'EvalGlobal');
model.result.numerical('gev3').label('Pressure Drop, Inner Fluid');
model.result.numerical('gev3').set('data', 'dset4');
model.result.numerical('gev3').setIndex('expr', '(aveop1(p)-aveop2(p))*1[m]/L0_i', 0);
model.result.numerical('gev3').setIndex('descr', 'Pressure drop, inner fluid', 0);
model.result.numerical('gev3').set('table', 'tbl1');
model.result.numerical('gev3').appendResult;
model.result.numerical.create('gev4', 'EvalGlobal');
model.result.numerical('gev4').label('Temperature Drop, Inner Fluid');
model.result.numerical('gev4').set('data', 'dset4');
model.result.numerical('gev4').setIndex('expr', 'dT_pipe*1[m]/L0_i', 0);
model.result.numerical('gev4').setIndex('descr', 'Temperature drop, inner fluid', 0);
model.result.numerical('gev4').set('table', 'tbl1');
model.result.numerical('gev4').appendResult;
model.result('pg6').run;

model.title('Finned Pipe');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Geometry parts and parameterized geometry' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' A results table form object containing outputs' newline  newline 'Finned pipes are used for coolers, heaters, or heat exchangers to increase heat transfer. They come in different sizes and designs depending on the application and requirements.' newline  newline 'When the fins are placed outside the pipe, they increase the heat exchange surface of the pipe so that a cooling or heating external fluid can exchange heat more efficiently. When placed inside the pipe, it is the inner fluid that benefits from an increased heat exchange surface. Instead of fins, grooves can also increase the heat exchange surface, particularly inside the pipe where space is limited.' newline  newline 'With this app, you can customize a long cylindrical pipe with predefined inner and outer fins or grooves to observe and evaluate their cooling effects. The app calculates the thermal performance of a pipe that is filled with water and then cooled or heated by surrounding air with forced convection.' newline  newline 'Various geometric configurations are available for the outer structure (disk-stacked blades, circular grooves, helical blades, helical grooves, or none) and for the inner structure (straight grooves or none).' newline  newline 'The app computes the dissipated power and the pressure drop as functions of the geometry and air velocity.']);

model.label('finned_pipe.mph');

model.result('pg6').run;

model.param.set('rho_pipe', '8960[kg/m^3]');
model.param.descr('rho_pipe', 'Pipe material density');
model.param.set('vol_pipe', '(pi*(Rout_i^2-Rinn_i^2)*L0_i+pi*((Rout_i+L_fins_i)^2-Rout_i^2)*th_fins_i)*1[m]/L0_i');
model.param.descr('vol_pipe', 'Pipe volume');
model.param.set('mass_pipe', 'rho_pipe*vol_pipe');
model.param.descr('mass_pipe', 'Pipe mass');
model.param.set('vol_innfluid', '(pi*Rinn_i^2)*1[m]');
model.param.descr('vol_innfluid', 'Inner fluid volume');
model.param.set('area_innerexch', '2*pi*Rinn_i*1[m]');
model.param.descr('area_innerexch', 'Inner heat exchange surface');
model.param.set('area_outerexch', '(2*pi*Rout_i*(L0_i-th_fins_i)+2*pi*((Rout_i+L_fins_i)^2-Rout_i^2)+2*pi*(Rout_i+L_fins_i)*th_fins_i)*1[m]/L0_i');
model.param.descr('area_outerexch', 'Outer heat exchange surface');
model.param.set('T0_water', 'T0[1/K]+10');
model.param.descr('T0_water', 'Water inlet temperature');

model.modelNode.create('comp2', true);

model.geom.create('geom2', 3);
model.geom('geom2').model('comp2');

model.mesh.create('mesh3', 'geom2');

model.geom('geom2').create('pi1', 'PartInstance');
model.geom('geom2').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom2').feature('pi1').set('part', 'part5');
model.geom('geom2').feature('pi1').setEntry('inputexpr', 'Rout', 'Rout_i');
model.geom('geom2').feature('pi1').setEntry('inputexpr', 'L0', 'L0_i');
model.geom('geom2').feature('pi1').setEntry('inputexpr', 'L_fins', 'L_fins_i');
model.geom('geom2').run('pi1');
model.geom('geom2').selection.create('csel1', 'CumulativeSelection');
model.geom('geom2').selection('csel1').label('Inner Fluid Domain');
model.geom('geom2').feature('pi1').setEntry('selcontributetodom', 'pi1_csel1.dom', 'csel1');
model.geom('geom2').create('arr1', 'Array');
model.geom('geom2').feature('arr1').selection('input').set({'pi1'});
model.geom('geom2').feature('arr1').set('type', 'linear');
model.geom('geom2').feature('arr1').set('linearsize', 5);
model.geom('geom2').feature('arr1').set('displ', {'L0_i' '0' '0'});
model.geom('geom2').run('arr1');

model.view('view14').hideObjects.create('hide1');
model.view('view14').hideObjects('hide1').init(3);
model.view('view14').hideObjects('hide1').named('csel1');

model.geom('geom2').run('fin');

model.mesh.remove('mesh3');

model.sol('sol1').updateSolution;
model.sol('sol4').updateSolution;

model.result.report.create('rpt1', 'Report');

model.setExpectedComputationTime('10 minutes');

model.result.report('rpt1').set('format', 'docx');
model.result.report('rpt1').set('filename', 'user:///finned_pipe.docx');
model.result.report('rpt1').set('imagesize', 'large');
model.result.report('rpt1').feature.create('tp1', 'TitlePage');
model.result.report('rpt1').feature('tp1').set('frontmatterlayout', 'headings');
model.result.report('rpt1').feature('tp1').set('logo', 'none');
model.result.report('rpt1').feature('tp1').set('includeacknowledgment', false);
model.result.report('rpt1').feature.create('toc1', 'TableOfContents');
model.result.report('rpt1').feature('toc1').label('Table of Contents');
model.result.report('rpt1').feature('toc1').set('levels', '1');
model.result.report('rpt1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').label('Software Information');
model.result.report('rpt1').feature('sec1').feature.create('comp1', 'ModelNode');
model.result.report('rpt1').feature('sec1').feature('comp1').label('Software Properties');
model.result.report('rpt1').feature('sec1').feature('comp1').set('includeauthor', true);
model.result.report('rpt1').feature('sec1').feature('comp1').set('includeversion', true);
model.result.report('rpt1').feature('sec1').feature('comp1').set('commentssource', 'none');
model.result.report('rpt1').feature('sec1').feature('comp1').set('noderef', 'none');
model.result.report('rpt1').feature('sec1').feature('comp1').set('includeunitsystem', false);
model.result.report('rpt1').feature('sec1').feature.create('std1', 'Study');
model.result.report('rpt1').feature('sec1').feature('std1').set('children', {'param' 'off'; 'wdi' 'off'; 'stat' 'off'; 'stat2' 'off'});
model.result.report('rpt1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').label('Input Data');
model.result.report('rpt1').feature('sec2').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('param1').label('Parameters');
model.result.report('rpt1').feature('sec2').feature('param1').setIndex('children', false, 18, 1);
model.result.report('rpt1').feature('sec2').feature('param1').setIndex('children', false, 23, 1);
model.result.report('rpt1').feature('sec2').feature('param1').setIndex('children', false, 24, 1);
model.result.report('rpt1').feature('sec2').feature('param1').setIndex('children', false, 25, 1);
model.result.report('rpt1').feature('sec2').feature('param1').setIndex('children', false, 26, 1);
model.result.report('rpt1').feature('sec2').feature('param1').setIndex('children', false, 27, 1);
model.result.report('rpt1').feature('sec2').feature('param1').setIndex('children', false, 28, 1);
model.result.report('rpt1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').label('Component');
model.result.report('rpt1').feature('sec3').feature.create('geom1', 'Geometry');
model.result.report('rpt1').feature('sec3').feature('geom1').set('noderef', 'geom2');
model.result.report('rpt1').feature('sec3').feature('geom1').set('includeunits', false);
model.result.report('rpt1').feature('sec3').feature('geom1').set('includestats', false);
model.result.report('rpt1').feature('sec3').feature('geom1').set('children', {'pi1' 'off'; 'arr1' 'off'; 'fin' 'off'});
model.result.report('rpt1').feature('sec3').feature.create('mesh1', 'Mesh');
model.result.report('rpt1').feature('sec3').feature('mesh1').set('includestats', true);
model.result.report('rpt1').feature('sec3').feature('mesh1').set('children', {'size' 'off';  ...
'size1' 'off';  ...
'size2' 'off';  ...
'ftri1' 'off';  ...
'swe1' 'off';  ...
'bl1' 'off'});
model.result.report('rpt1').feature('sec3').feature.create('mesh2', 'Mesh');
model.result.report('rpt1').feature('sec3').feature('mesh2').set('noderef', 'mesh2');
model.result.report('rpt1').feature('sec3').feature('mesh2').set('includestats', true);
model.result.report('rpt1').feature('sec3').feature('mesh2').set('children', {'size' 'off';  ...
'size1' 'off';  ...
'size2' 'off';  ...
'size3' 'off';  ...
'ftri1' 'off';  ...
'swe1' 'off';  ...
'swe2' 'off';  ...
'conv1' 'off';  ...
'conv2' 'off';  ...
'ftri2' 'off';  ...
'ftet1' 'off';  ...
'bl1' 'off'});
model.result.report('rpt1').feature.create('sec4', 'Section');
model.result.report('rpt1').feature('sec4').label('Results');
model.result.report('rpt1').feature('sec4').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature('sec4').feature('param1').label('Parameters');
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 5, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 6, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 7, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 8, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 9, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 10, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 12, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 13, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 14, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 15, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 16, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 17, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 18, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 19, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 20, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 21, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 22, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 23, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 24, 1);
model.result.report('rpt1').feature('sec4').feature('param1').setIndex('children', false, 29, 1);
model.result.report('rpt1').feature('sec4').feature('param1').set('numberformat', 'custom');
model.result.report('rpt1').feature('sec4').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('pg1').label('Heat Dissipation Rate');
model.result.report('rpt1').feature('sec4').feature('pg1').set('noderef', 'pg7');
model.result.report('rpt1').feature('sec4').feature.create('pg2', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('pg2').label('Pipe Temperature, Fluid Velocity');
model.result.report('rpt1').feature('sec4').feature('pg2').set('noderef', 'pg6');
model.result.report('rpt1').feature('sec4').feature.create('mtbl1', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl1').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature('mtbl1').set('numberformat', 'custom');
model.result('pg6').run;

model.title('Finned Pipe');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Geometry parts and parameterized geometry' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' A results table form object containing outputs' newline  newline 'Finned pipes are used for coolers, heaters, or heat exchangers to increase heat transfer. They come in different sizes and designs depending on the application and requirements.' newline  newline 'When the fins are placed outside the pipe, they increase the heat exchange surface of the pipe so that a cooling or heating external fluid can exchange heat more efficiently. When placed inside the pipe, it is the inner fluid that benefits from an increased heat exchange surface. Instead of fins, grooves can also increase the heat exchange surface, particularly inside the pipe where space is limited.' newline  newline 'With this app, you can customize a long cylindrical pipe with predefined inner and outer fins or grooves to observe and evaluate their cooling effects. The app calculates the thermal performance of a pipe that is filled with water and then cooled or heated by surrounding air with forced convection.' newline  newline 'Various geometric configurations are available for the outer structure (disk-stacked blades, circular grooves, helical blades, helical grooves, or none) and for the inner structure (straight grooves or none).' newline  newline 'The app computes the dissipated power and the pressure drop as functions of the geometry and air velocity.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;

model.label('finned_pipe.mph');

model.modelNode.label('Components');

out = model;
