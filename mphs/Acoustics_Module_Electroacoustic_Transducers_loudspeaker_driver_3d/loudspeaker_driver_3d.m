function out = model
%
% loudspeaker_driver_3d.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Electroacoustic_Transducers');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mf', 'InductionCurrents', 'geom1');
model.physics('mf').model('comp1');
model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('ccc', 'CoilCurrentCalculation');
model.study('std1').feature('ccc').set('CoilName', '1');
model.study('std1').feature('ccc').set('outputmap', {});
model.study('std1').feature('ccc').set('ngenAUX', '1');
model.study('std1').feature('ccc').set('goalngenAUX', '1');
model.study('std1').feature('ccc').set('ngenAUX', '1');
model.study('std1').feature('ccc').set('goalngenAUX', '1');
model.study('std1').feature('ccc').setSolveFor('/physics/mf', true);
model.study('std1').feature('ccc').setSolveFor('/physics/acpr', true);
model.study('std1').feature('ccc').setSolveFor('/physics/solid', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('N0', '100', 'Number of turns in coil');
model.param.set('V0', '3.55[V]', 'Peak driving voltage');
model.param.set('f_loss', '40[Hz]', 'Frequency at which loss factor is given');
model.param.set('omega_loss', '2*pi*f_loss', 'Angular frequency at which loss factor is given');
model.param.set('fmax', '4000[Hz]', 'Maximum frequency');
model.param.set('h_slit1', '0.2[mm]', 'Magnetic gap slit 1');
model.param.set('h_slit2', '0.4[mm]', 'Magnetic gap slit 2');
model.param.set('deltaS', '165[mm]*50', 'Artificial skin depth in free space domain');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').geomRep('cadps');
model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'loudspeaker_driver_3d.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').run('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Symmetry');
model.selection('sel1').geom(2);
model.selection('sel1').set([1 2 4 5 7 8 11 15 21 25 28 31 34 37 40 43 45 48 51 56 59 62 65 69 72 75 80 85 91 97 132 138 146 152 155 160 174 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 205 212 219 221 222 223]);
model.selection('sel1').set('groupcontang', true);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Coil');

model.view('view1').set('renderwireframe', true);

model.selection('sel2').set([16 17 18]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Air Domain');
model.selection('sel3').set([1 3 5 6 12 19 21 23 29 32]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Aluminum Domain');
model.selection('sel4').set([25 27 30]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Magnet');
model.selection('sel5').set([26]);

model.variable.create('var1');
model.variable('var1').model('comp1');

model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Pole Pieces');
model.selection('sel6').set([4 24]);
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').label('Non-Conductive Solid Domains');
model.selection('sel7').set([7 8 9 10 11 13 14 20]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('BHCurve', 'B-H Curve');
model.material('mat2').propertyGroup('BHCurve').func.create('BH', 'Interpolation');
model.material('mat2').propertyGroup.create('EffectiveBHCurve', 'Effective B-H Curve');
model.material('mat2').propertyGroup('EffectiveBHCurve').func.create('BHeff', 'Interpolation');
model.material('mat2').label('Soft Iron (With Losses)');
model.material('mat2').set('family', 'iron');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'1.12e7[S/m]' '0' '0' '0' '1.12e7[S/m]' '0' '0' '0' '1.12e7[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('BHCurve').label('B-H Curve');
model.material('mat2').propertyGroup('BHCurve').func('BH').label('Interpolation 1');
model.material('mat2').propertyGroup('BHCurve').func('BH').set('table', {'0' '0';  ...
'663.146' '1';  ...
'1067.5' '1.1';  ...
'1705.23' '1.2';  ...
'2463.11' '1.3';  ...
'3841.67' '1.4';  ...
'5425.74' '1.5';  ...
'7957.75' '1.6';  ...
'12298.3' '1.7';  ...
'20462.8' '1.8';  ...
'32169.6' '1.9';  ...
'61213.4' '2';  ...
'111408' '2.1';  ...
'188487.757' '2.2';  ...
'267930.364' '2.3';  ...
'347507.836' '2.4'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('extrap', 'linear');
model.material('mat2').propertyGroup('BHCurve').func('BH').set('fununit', {'T'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('argunit', {'A/m'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('defineinv', true);
model.material('mat2').propertyGroup('BHCurve').func('BH').set('defineprimfun', true);
model.material('mat2').propertyGroup('BHCurve').set('normB', 'BH(normHin)');
model.material('mat2').propertyGroup('BHCurve').set('normH', 'BH_inv(normBin)');
model.material('mat2').propertyGroup('BHCurve').set('Wpm', 'BH_prim(normHin)');
model.material('mat2').propertyGroup('BHCurve').descr('normHin', 'Magnetic field norm');
model.material('mat2').propertyGroup('BHCurve').descr('normBin', 'Magnetic flux density norm');
model.material('mat2').propertyGroup('BHCurve').addInput('magneticfield');
model.material('mat2').propertyGroup('BHCurve').addInput('magneticfluxdensity');
model.material('mat2').propertyGroup('EffectiveBHCurve').label('Effective B-H Curve');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').label('Interpolation 1');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('table', {'0' '0';  ...
'663.146' '1.000000051691021';  ...
'1067.5' '1.4936495124126294';  ...
'1705.23' '1.9415328461315795';  ...
'2463.11' '2.257765669366018';  ...
'3841.67' '2.609980642431287';  ...
'5425.74' '2.8664452090837504';  ...
'7957.75' '3.1441438097176118';  ...
'12298.3' '3.448538051654125';  ...
'20462.8' '3.7816711973679054';  ...
'32169.6' '4.058345590113038';  ...
'61213.4' '4.420646552950275';  ...
'111408' '4.721274089545955';  ...
'188487.757' '4.972148140718701';  ...
'267930.364' '5.145510860855953';  ...
'347507.836' '5.245510861426532'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('extrap', 'linear');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('fununit', {'T'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('argunit', {'A/m'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('defineinv', true);
model.material('mat2').propertyGroup('EffectiveBHCurve').set('normBeff', 'BHeff(normHeffin)');
model.material('mat2').propertyGroup('EffectiveBHCurve').set('normHeff', 'BHeff_inv(normBeffin)');
model.material('mat2').propertyGroup('EffectiveBHCurve').descr('normHeffin', 'Effective magnetic field norm');
model.material('mat2').propertyGroup('EffectiveBHCurve').descr('normBeffin', 'Effective magnetic flux density norm');
model.material('mat2').propertyGroup('EffectiveBHCurve').addInput('magneticfield');
model.material('mat2').propertyGroup('EffectiveBHCurve').addInput('magneticfluxdensity');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat3').label('Aluminum');
model.material('mat3').set('family', 'aluminum');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat3').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.33');
model.material('mat3').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat3').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat3').propertyGroup('Murnaghan').set('n', '-350[GPa]');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').label('Composite');
model.material('mat4').propertyGroup('def').set('youngsmodulus', '2[GPa]');
model.material('mat4').propertyGroup('def').set('poissonsratio', '0.42');
model.material('mat4').propertyGroup('def').set('density', '1200[kg/m^3]');
model.material('mat4').propertyGroup('def').set('lossfactor', '0.04');
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').label('Cloth');
model.material('mat5').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat5').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat5').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat5').propertyGroup('def').set('youngsmodulus', '0.58[GPa]');
model.material('mat5').propertyGroup('def').set('poissonsratio', '0.3');
model.material('mat5').propertyGroup('def').set('density', '650[kg/m^3]');
model.material.create('mat6', 'Common', 'comp1');
model.material('mat6').label('Foam');
model.material('mat6').propertyGroup('def').set('youngsmodulus', '5[MPa]');
model.material('mat6').propertyGroup('def').set('poissonsratio', '0.4');
model.material('mat6').propertyGroup('def').set('density', '67[kg/m^3]');
model.material.create('mat7', 'Common', 'comp1');
model.material('mat7').label('Coil');
model.material('mat7').propertyGroup('def').set('lossfactor', '0.05');
model.material('mat7').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('youngsmodulus', '110[GPa]');
model.material('mat7').propertyGroup('def').set('poissonsratio', '0.35');
model.material('mat7').propertyGroup('def').set('density', '4500[kg/m^3]');
model.material.create('mat8', 'Common', 'comp1');
model.material('mat8').label('Glass Fiber');
model.material('mat8').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat8').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat8').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat8').propertyGroup('def').set('youngsmodulus', '70[GPa]');
model.material('mat8').propertyGroup('def').set('poissonsratio', '0.33');
model.material('mat8').propertyGroup('def').set('density', '2000[kg/m^3]');
model.material('mat8').propertyGroup('def').set('lossfactor', '0.04');
model.material.create('mat9', 'Common', 'comp1');
model.material('mat9').propertyGroup.create('RemanentFluxDensity', 'Remanent flux density');
model.material('mat9').label('Generic Ferrite');
model.material('mat9').propertyGroup('def').set('lossfactor', '0.01');
model.material('mat9').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat9').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat9').propertyGroup('def').set('poissonsratio', '0.3');
model.material('mat9').propertyGroup('def').set('youngsmodulus', '200[GPa]');
model.material('mat9').propertyGroup('def').set('density', '5000[kg/m^3]');
model.material('mat9').propertyGroup('RemanentFluxDensity').set('murec', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat9').propertyGroup('RemanentFluxDensity').set('normBr', '0.4[T]');
model.material('mat2').selection.named('sel6');
model.material('mat2').propertyGroup('def').set('density', {'7800[kg/m^3]'});
model.material('mat2').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat2').propertyGroup('Enu').set('E', {'180[GPa]'});
model.material('mat2').propertyGroup('Enu').set('nu', {'0.29'});
model.material('mat3').selection.named('sel4');
model.material('mat4').selection.set([2 22]);
model.material('mat5').selection.set([20]);
model.material('mat6').selection.set([28 31]);
model.material('mat7').selection.named('sel2');
model.material('mat8').selection.set([7 8 9 10 11 13 14 15]);
model.material('mat9').selection.named('sel5');

model.physics('mf').selection.set([1 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 26 27 29 32]);
model.physics('mf').feature('fsp1').set('sigma_stab_mat', 'from_delta_s');
model.physics('mf').feature('fsp1').set('delta_s', 'deltaS');
model.physics('mf').create('als1', 'AmperesLawSolid', 3);
model.physics('mf').feature('als1').selection.named('sel7');
model.physics('mf').feature('als1').set('sigma_mat', 'userdef');
model.physics('mf').feature('als1').set('sigma', {'5[S/m]' '0' '0' '0' '5[S/m]' '0' '0' '0' '5[S/m]'});
model.physics('mf').create('als2', 'AmperesLawSolid', 3);
model.physics('mf').feature('als2').selection.named('sel5');
model.physics('mf').feature('als2').set('ConstitutiveRelationBH', 'RemanentFluxDensity');
model.physics('mf').feature('als2').set('e_crel_BH_RemanentFluxDensity', [0 0 1]);
model.physics('mf').feature('als2').set('sigma_mat', 'userdef');
model.physics('mf').feature('als2').set('sigma', {'5[S/m]' '0' '0' '0' '5[S/m]' '0' '0' '0' '5[S/m]'});
model.physics('mf').create('als3', 'AmperesLawSolid', 3);
model.physics('mf').feature('als3').selection.named('sel6');
model.physics('mf').feature('als3').set('ConstitutiveRelationBH', 'BHCurve');
model.physics('mf').create('als4', 'AmperesLawSolid', 3);
model.physics('mf').feature('als4').selection.named('sel4');
model.physics('mf').create('coil1', 'Coil', 3);
model.physics('mf').feature('coil1').selection.named('sel2');
model.physics('mf').feature('coil1').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil1').set('CoilType', 'Numeric');
model.physics('mf').feature('coil1').set('CoilExcitation', 'Voltage');
model.physics('mf').feature('coil1').set('VCoil', 'linper(V0)');
model.physics('mf').feature('coil1').set('N', 'N0');
model.physics('mf').feature('coil1').set('coilWindArea', '3.5e-8[m^2]');
model.physics('mf').feature('coil1').feature('ccc1').set('fl', 4);
model.physics('mf').feature('coil1').feature('ccc1').feature('ct1').selection.set([190 191 192]);
model.physics('mf').feature('coil1').feature('ccc1').create('cg1', 'CoilGround', 2);
model.physics('mf').feature('coil1').feature('ccc1').feature('cg1').selection.set([56 59 62]);
model.physics('mf').create('symp1', 'SymmetryPlane', 2);
model.physics('mf').feature('symp1').selection.named('sel1');
model.physics('acpr').selection.named('sel3');
model.physics('acpr').create('sym1', 'Symmetry', 2);
model.physics('acpr').feature('sym1').selection.named('sel1');
model.physics('acpr').create('efc1', 'ExteriorFieldCalculation', 2);
model.physics('acpr').feature('efc1').selection.set([10]);
model.physics('acpr').feature('efc1').set('SymmetryType', 'SectorSymmetryWithPlane');
model.physics('acpr').feature('efc1').set('TransformationType', 'RotationAndReflection');
model.physics('acpr').feature('efc1').set('n', 4);
model.physics('acpr').create('pmb1', 'PerfectlyMatchedBoundary', 2);
model.physics('acpr').feature('pmb1').selection.set([3 10]);
model.physics('acpr').create('nra1', 'NarrowRegionAcousticsModel', 3);
model.physics('acpr').feature('nra1').selection.set([23]);
model.physics('acpr').feature('nra1').set('DuctType', 'Slit');
model.physics('acpr').feature('nra1').set('h', 'h_slit1');
model.physics('acpr').create('nra2', 'NarrowRegionAcousticsModel', 3);
model.physics('acpr').feature('nra2').selection.set([6]);
model.physics('acpr').feature('nra2').set('DuctType', 'Slit');
model.physics('acpr').feature('nra2').set('h', 'h_slit2');
model.physics('acpr').create('nra3', 'NarrowRegionAcousticsModel', 3);
model.physics('acpr').feature('nra3').selection.set([12]);
model.physics('acpr').feature('nra3').set('DuctType', 'CircularDuct');
model.physics('acpr').feature('nra3').set('a', '1.5[mm]');
model.physics('solid').selection.set([2 4 7 8 9 10 11 13 14 15 16 17 18 20 22 24 25 26 27 28 30 31]);
model.physics('solid').feature('lemm1').create('dmp1', 'Damping', 3);
model.physics('solid').feature('lemm1').feature('dmp1').selection.set([2 7 8 9 10 11 13 14 15 22]);
model.physics('solid').feature('lemm1').feature('dmp1').set('DampingType', 'IsotropicLossFactor');
model.physics('solid').feature('lemm1').create('dmp2', 'Damping', 3);
model.physics('solid').feature('lemm1').feature('dmp2').selection.set([20]);
model.physics('solid').feature('lemm1').feature('dmp2').set('beta_dK', '0.14/omega_loss');
model.physics('solid').feature('lemm1').create('dmp3', 'Damping', 3);
model.physics('solid').feature('lemm1').feature('dmp3').selection.set([28 31]);
model.physics('solid').feature('lemm1').feature('dmp3').set('beta_dK', '0.46/omega_loss');
model.physics('solid').create('sym1', 'SymmetrySolid', 2);
model.physics('solid').feature('sym1').selection.named('sel1');
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.set([159 168 169 170]);

model.multiphysics.create('asb1', 'AcousticStructureBoundary', 'geom1', 2);
model.multiphysics('asb1').selection.all;
model.multiphysics.create('mmcpl1', 'Magnetomechanics', 'geom1', 3);
model.multiphysics('mmcpl1').selection.named('sel2');
model.multiphysics('mmcpl1').set('OnlyLorentz', true);

model.study('std1').label('Study 1 - Frequency Response');
model.study('std1').setGenPlots(false);
model.study('std1').feature('ccc').set('geometricNonlinearity', false);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setEntry('activate', 'solid', false);
model.study('std1').feature('stat').setEntry('activateCoupling', 'mmcpl1', false);
model.study('std1').create('frlin', 'Frequencylinearized');
model.study('std1').feature('frlin').set('plist', '{31.5, 63, 125, 250, 500, 1e3, 2e3, 4e3}');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', '343[m/s]/fmax/5');
model.mesh('mesh1').feature('size').set('hmin', '1[mm]');
model.mesh('mesh1').feature('map1').selection.set([181 190 191 192 194 197]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([288 318]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 16);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([283 309 310 311 313 317 320 321 330 331 371 372 377 393]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 2);
model.mesh('mesh1').feature('map1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([335 336 342 343 353 354 355 356 364 365 380]);
model.mesh('mesh1').feature('map1').feature('dis3').set('numelem', 4);
model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.set([298 312 314]);
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').selection.set([312]);
model.mesh('mesh1').feature('edg1').feature('dis1').set('numelem', 3);
model.mesh('mesh1').feature('edg1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis2').selection.set([286 298 302 314 317]);
model.mesh('mesh1').feature('edg1').feature('dis2').set('numelem', 2);
model.mesh('mesh1').create('map2', 'Map');
model.mesh('mesh1').feature('map2').selection.set([182 183 184 185 187 188 189]);
model.mesh('mesh1').feature('map2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis1').selection.set([301]);
model.mesh('mesh1').feature('map2').feature('dis1').set('numelem', 6);
model.mesh('mesh1').feature('map2').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis2').selection.set([285 295]);
model.mesh('mesh1').feature('map2').feature('dis2').set('numelem', 2);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([6 7 8 9 10 13 14 15 16 17 18 20 23]);
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.set([6 7 8 9 10 11 12 13 14 15 16 17 18 20 23]);
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 18);
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.set([38 41]);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', '3[mm]');
model.mesh('mesh1').create('swe2', 'Sweep');
model.mesh('mesh1').feature('swe2').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe2').selection.set([11 12]);
model.mesh('mesh1').create('map3', 'Map');
model.mesh('mesh1').feature('map3').selection.set([93 94 111 112 120 121 122 123 126 127 128 129 137 141]);
model.mesh('mesh1').feature('map3').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map3').feature('dis1').selection.set([328 329]);
model.mesh('mesh1').feature('map3').feature('dis1').set('numelem', 10);
model.mesh('mesh1').feature('map3').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map3').feature('dis2').selection.set([369 370]);
model.mesh('mesh1').feature('map3').feature('dis2').set('numelem', 2);
model.mesh('mesh1').feature('map3').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map3').feature('dis3').selection.set([375 376]);
model.mesh('mesh1').feature('map3').feature('dis3').set('numelem', 3);
model.mesh('mesh1').feature('map3').create('dis4', 'Distribution');
model.mesh('mesh1').feature('map3').feature('dis4').selection.set([358 359]);
model.mesh('mesh1').feature('map3').feature('dis4').set('numelem', 4);
model.mesh('mesh1').feature('map3').create('dis5', 'Distribution');
model.mesh('mesh1').feature('map3').feature('dis5').selection.set([190]);
model.mesh('mesh1').feature('map3').feature('dis5').set('numelem', 18);
model.mesh('mesh1').create('ftri2', 'FreeTri');
model.mesh('mesh1').feature('ftri2').selection.set([9 78 140 151]);
model.mesh('mesh1').feature('ftri2').create('size1', 'Size');
model.mesh('mesh1').feature('ftri2').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri2').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri2').feature('size1').set('hmax', '5[mm]');
model.mesh('mesh1').feature('ftri2').feature('size1').set('hcurveactive', true);
model.mesh('mesh1').feature('ftri2').feature('size1').set('hcurve', 0.4);
model.mesh('mesh1').create('swe3', 'Sweep');
model.mesh('mesh1').feature('swe3').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe3').selection.set([2 22 28]);
model.mesh('mesh1').feature('swe3').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe3').feature('dis1').set('numelem', 2);
model.mesh('mesh1').create('map4', 'Map');
model.mesh('mesh1').feature('map4').selection.set([154 157 161 164 166]);
model.mesh('mesh1').feature('map4').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map4').feature('dis1').selection.set([439]);
model.mesh('mesh1').feature('map4').feature('dis1').set('numelem', 4);
model.mesh('mesh1').feature('map4').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map4').feature('dis2').selection.set([436 441]);
model.mesh('mesh1').feature('map4').feature('dis2').set('numelem', 2);
model.mesh('mesh1').create('ftri3', 'FreeTri');
model.mesh('mesh1').feature('ftri3').selection.set([143 148 207 222 223]);
model.mesh('mesh1').feature('ftri3').create('size1', 'Size');
model.mesh('mesh1').feature('ftri3').feature('size1').selection.set([143 148 207]);
model.mesh('mesh1').feature('ftri3').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri3').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri3').feature('size1').set('hmax', '6[mm]');
model.mesh('mesh1').create('swe4', 'Sweep');
model.mesh('mesh1').feature('swe4').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe4').selection.set([30 31]);
model.mesh('mesh1').create('swe5', 'Sweep');
model.mesh('mesh1').feature('swe5').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe5').selection.set([27 29 32]);
model.mesh('mesh1').feature('swe5').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe5').feature('dis1').set('numelem', 2);
model.mesh('mesh1').create('swe6', 'Sweep');
model.mesh('mesh1').feature('swe6').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe6').selection.set([25]);
model.mesh('mesh1').create('ftri4', 'FreeTri');
model.mesh('mesh1').feature('ftri4').selection.set([174 198 200]);
model.mesh('mesh1').feature('ftri4').create('size1', 'Size');
model.mesh('mesh1').feature('ftri4').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri4').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri4').feature('size1').set('hmax', '2[mm]');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('bl1').selection.set([174 198]);
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([150 258 259 260 276 278 279 280 281 322 323 324 325 326 328 357 362]);
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 5);
model.mesh('mesh1').feature('bl1').feature('blp').set('blhminfact', 1.1);
model.mesh('mesh1').create('swe7', 'Sweep');
model.mesh('mesh1').feature('swe7').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe7').selection.set([4 24 26]);
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.set([1 3 5 19 21]);
model.mesh('mesh1').create('bl2', 'BndLayer');
model.mesh('mesh1').feature('bl2').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl2').selection.geom(3);
model.mesh('mesh1').feature('bl2').selection.set([]);
model.mesh('mesh1').feature('bl2').selection.allGeom;
model.mesh('mesh1').feature('bl2').selection.geom('geom1', 3);
model.mesh('mesh1').feature('bl2').selection.set([3]);
model.mesh('mesh1').feature('bl2').set('smoothtransition', false);
model.mesh('mesh1').feature('bl2').feature('blp').selection.set([10]);
model.mesh('mesh1').feature('bl2').feature('blp').set('blnlayers', 1);
model.mesh('mesh1').run;

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'ccc');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'ccc');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_mf_coil1_ccc1_s'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_mf_coil1_ccc1_p' 'comp1_mf_coil1_ccc1_lm'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').set('segterm', 'itertol');
model.sol('sol1').feature('s1').feature('se1').set('segiter', 6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('se1', 'Segregated');
model.sol('sol1').feature('s2').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('segvar', {'comp1_A'});
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'fgmres');
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('ams1', 'AMS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('ams1').set('prefun', 'ams');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('ams1').set('sorvecdof', {'comp1_A'});
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').label('Magnetic Fields');
model.sol('sol1').feature('s2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('segvar', {'comp1_mf_coil1_ICoil_ode'});
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').label('Coil Ode Variables');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'frlin');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('initsoluse', 'sol3');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'frlin');
model.sol('sol1').create('s3', 'Stationary');
model.sol('sol1').feature('s3').set('stol', 1.0E-5);
model.sol('sol1').feature('s3').create('p1', 'Parametric');
model.sol('sol1').feature('s3').feature.remove('pDef');
model.sol('sol1').feature('s3').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s3').feature('p1').set('plistarr', {'{31.5, 63, 125, 250, 500, 1e3, 2e3, 4e3}'});
model.sol('sol1').feature('s3').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s3').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s3').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s3').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s3').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s3').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s3').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s3').feature('p1').set('probes', {});
model.sol('sol1').feature('s3').feature('p1').set('control', 'frlin');
model.sol('sol1').feature('s3').set('nonlin', 'linper');
model.sol('sol1').feature('s3').set('storelinpoint', true);
model.sol('sol1').feature('s3').set('linpsolnum', 'all');
model.sol('sol1').feature('s3').set('control', 'frlin');
model.sol('sol1').feature('s3').set('linpmethod', 'sol');
model.sol('sol1').feature('s3').set('linpsol', 'sol1');
model.sol('sol1').feature('s3').set('linpsoluse', 'sol3');
model.sol('sol1').feature('s3').set('control', 'frlin');
model.sol('sol1').feature('s3').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s3').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s3').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s3').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s3').create('seDef', 'Segregated');
model.sol('sol1').feature('s3').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s3').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s3').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s3').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('s3').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s3').feature('d1').label('Suggested Direct Solver (asb1_mmcpl1) (Merged)');
model.sol('sol1').feature('s3').create('i1', 'Iterative');
model.sol('sol1').feature('s3').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s3').feature('i1').set('itrestart', 500);
model.sol('sol1').feature('s3').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) (asb1_mmcpl1)');
model.sol('sol1').feature('s3').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('hybridization', 'multi');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('hybridvar', {'comp1_p' 'comp1_A'});
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_A'});
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_A'});
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s3').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s3').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s3').feature('i1').feature('dp1').set('hybridvar', {'comp1_mf_coil1_ICoil_ode'});
model.sol('sol1').feature('s3').feature('i1').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i1').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s3').feature('i1').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s3').feature('i1').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s3').feature('i1').feature('dp2').set('hybridvar', {'comp1_u'});
model.sol('sol1').feature('s3').feature('i1').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i1').feature('dp2').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s3').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s3').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s3').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s3').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('s3').feature.remove('fcDef');
model.sol('sol1').feature('s3').feature.remove('seDef');
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s3').feature('i1').active(true);
model.sol('sol1').runAll;

model.study.create('std2');
model.study('std2').create('eig', 'Eigenfrequency');
model.study('std2').feature('eig').set('chkeigregion', true);
model.study('std2').feature('eig').set('conrad', '1');
model.study('std2').feature('eig').set('conradynhm', '1');
model.study('std2').feature('eig').set('storefact', false);
model.study('std2').feature('eig').set('linpsolnum', 'auto');
model.study('std2').feature('eig').set('solnum', 'auto');
model.study('std2').feature('eig').set('notsolnum', 'auto');
model.study('std2').feature('eig').set('outputmap', {});
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').setSolveFor('/physics/mf', true);
model.study('std2').feature('eig').setSolveFor('/physics/acpr', true);
model.study('std2').feature('eig').setSolveFor('/physics/solid', true);
model.study('std2').feature('eig').setSolveFor('/multiphysics/asb1', true);
model.study('std2').feature('eig').setSolveFor('/multiphysics/mmcpl1', true);
model.study('std2').label('Study 2 - Structural Eigenmodes');
model.study('std2').setGenPlots(false);
model.study('std2').feature('eig').set('eigwhich', 'lr');
model.study('std2').feature('eig').setEntry('activate', 'mf', false);
model.study('std2').feature('eig').setEntry('activate', 'acpr', false);
model.study('std2').feature('eig').setEntry('activateCoupling', 'asb1', false);
model.study('std2').feature('eig').setEntry('activateCoupling', 'mmcpl1', false);

model.sol.create('sol4');
model.sol('sol4').study('std2');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std2');
model.sol('sol4').feature('st1').set('studystep', 'eig');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'eig');
model.sol('sol4').create('e1', 'Eigenvalue');
model.sol('sol4').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol4').feature('e1').set('eigvfunscaleparam', '4.04E-7');
model.sol('sol4').feature('e1').set('control', 'eig');
model.sol('sol4').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol4').attach('std2');
model.sol('sol4').runAll;

model.result.dataset.create('sec1', 'Sector3D');
model.result.dataset('sec1').set('sectors', 4);
model.result.dataset('sec1').set('include', 'manual');
model.result.dataset('sec1').set('startsector', 3);
model.result.dataset('sec1').set('sectorsinclude', 3);
model.result.dataset('sec1').set('trans', 'rotrefl');
model.result.dataset.create('sec2', 'Sector3D');
model.result.dataset('sec2').set('data', 'dset4');
model.result.dataset('sec2').set('sectors', 4);
model.result.dataset('sec2').set('include', 'manual');
model.result.dataset('sec2').set('startsector', 3);
model.result.dataset('sec2').set('sectorsinclude', 3);
model.result.dataset('sec2').set('trans', 'rotrefl');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').run;
model.result('pg1').label('Geometry');
model.result('pg1').set('data', 'dset3');
model.result('pg1').set('titletype', 'label');
model.result('pg1').set('edges', false);
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', '1');
model.result('pg1').feature('vol1').create('sel1', 'Selection');
model.result('pg1').feature('vol1').feature('sel1').selection.set([25 27 30]);
model.result('pg1').run;
model.result('pg1').feature('vol1').create('mtrl1', 'MaterialAppearance');
model.result('pg1').run;
model.result('pg1').feature('vol1').feature('mtrl1').set('appearance', 'custom');
model.result('pg1').feature('vol1').feature('mtrl1').set('family', 'aluminum');
model.result('pg1').create('vol2', 'Volume');
model.result('pg1').feature('vol2').set('expr', '1');
model.result('pg1').feature('vol2').set('coloring', 'uniform');
model.result('pg1').feature('vol2').set('color', 'custom');
model.result('pg1').feature('vol2').set('customcolor', [0.16470588743686676 0.1921568661928177 0.2980392277240753]);
model.result('pg1').feature('vol2').create('sel1', 'Selection');
model.result('pg1').feature('vol2').feature('sel1').selection.set([2 22 28 31]);
model.result('pg1').run;
model.result('pg1').feature('vol2').create('mtrl1', 'MaterialAppearance');
model.result('pg1').run;
model.result('pg1').feature('vol2').feature('mtrl1').set('appearance', 'custom');
model.result('pg1').feature('vol2').feature('mtrl1').set('family', 'textile');
model.result('pg1').feature('vol2').feature('mtrl1').set('useplotcolors', true);
model.result('pg1').create('vol3', 'Volume');
model.result('pg1').feature('vol3').set('expr', '1');
model.result('pg1').feature('vol3').set('coloring', 'uniform');
model.result('pg1').feature('vol3').set('color', 'custom');
model.result('pg1').feature('vol3').set('customcolor', [0.7686274647712708 0.4156862795352936 0.2823529541492462]);
model.result('pg1').feature('vol3').create('sel1', 'Selection');
model.result('pg1').feature('vol3').feature('sel1').selection.set([20]);
model.result('pg1').run;
model.result('pg1').feature('vol3').create('mtrl1', 'MaterialAppearance');
model.result('pg1').run;
model.result('pg1').feature('vol3').feature('mtrl1').set('appearance', 'custom');
model.result('pg1').feature('vol3').feature('mtrl1').set('family', 'textile');
model.result('pg1').feature('vol3').feature('mtrl1').set('useplotcolors', true);
model.result('pg1').create('vol4', 'Volume');
model.result('pg1').feature('vol4').set('expr', '1');
model.result('pg1').feature('vol4').create('sel1', 'Selection');
model.result('pg1').feature('vol4').feature('sel1').selection.set([7 8 9 10 11 13 14 15]);
model.result('pg1').run;
model.result('pg1').feature('vol4').create('mtrl1', 'MaterialAppearance');
model.result('pg1').run;
model.result('pg1').feature('vol4').feature('mtrl1').set('appearance', 'custom');
model.result('pg1').feature('vol4').feature('mtrl1').set('family', 'chrome');
model.result('pg1').create('vol5', 'Volume');
model.result('pg1').feature('vol5').set('expr', '1');
model.result('pg1').feature('vol5').create('sel1', 'Selection');
model.result('pg1').feature('vol5').feature('sel1').selection.named('sel2');
model.result('pg1').run;
model.result('pg1').feature('vol5').create('mtrl1', 'MaterialAppearance');
model.result('pg1').run;
model.result('pg1').feature('vol5').feature('mtrl1').set('appearance', 'custom');
model.result('pg1').feature('vol5').feature('mtrl1').set('family', 'copper');
model.result('pg1').create('vol6', 'Volume');
model.result('pg1').feature('vol6').set('expr', '1');
model.result('pg1').feature('vol6').set('coloring', 'uniform');
model.result('pg1').feature('vol6').set('color', 'custom');
model.result('pg1').feature('vol6').set('customcolor', [0.6549019813537598 0.6901960968971252 0.7568627595901489]);
model.result('pg1').feature('vol6').create('sel1', 'Selection');
model.result('pg1').feature('vol6').feature('sel1').selection.set([4 24]);
model.result('pg1').run;
model.result('pg1').feature('vol6').create('mtrl1', 'MaterialAppearance');
model.result('pg1').run;
model.result('pg1').feature('vol6').feature('mtrl1').set('appearance', 'custom');
model.result('pg1').feature('vol6').feature('mtrl1').set('family', 'iron');
model.result('pg1').feature('vol6').feature('mtrl1').set('useplotcolors', true);
model.result('pg1').create('vol7', 'Volume');
model.result('pg1').feature('vol7').set('expr', '1');
model.result('pg1').feature('vol7').set('coloring', 'uniform');
model.result('pg1').feature('vol7').set('color', 'custom');
model.result('pg1').feature('vol7').set('customcolor', [0.4117647111415863 0.4117647111415863 0.4117647111415863]);
model.result('pg1').feature('vol7').create('sel1', 'Selection');
model.result('pg1').feature('vol7').feature('sel1').selection.set([26]);
model.result('pg1').run;
model.result('pg1').feature('vol7').create('mtrl1', 'MaterialAppearance');
model.result('pg1').run;
model.result('pg1').feature('vol7').feature('mtrl1').set('appearance', 'custom');
model.result('pg1').feature('vol7').feature('mtrl1').set('family', 'soil');
model.result('pg1').feature('vol7').feature('mtrl1').set('useplotcolors', true);
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').run;
model.result('pg2').label('Static Magnetic Field');
model.result('pg2').set('data', 'dset3');
model.result('pg2').set('titletype', 'label');
model.result('pg2').set('edges', false);
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').create('str1', 'Streamline');
model.result('pg2').feature('str1').set('selnumber', 50);
model.result('pg2').feature('str1').selection.set([100]);
model.result('pg2').feature('str1').set('linetype', 'tube');
model.result('pg2').feature('str1').set('radiusexpr', '0.2');
model.result('pg2').feature('str1').set('tuberadiusscaleactive', true);
model.result('pg2').feature('str1').create('col1', 'Color');
model.result('pg2').run;
model.result('pg2').create('vol1', 'Volume');
model.result('pg2').feature('vol1').set('expr', '1');
model.result('pg2').feature('vol1').create('sel1', 'Selection');
model.result('pg2').feature('vol1').feature('sel1').selection.named('sel4');
model.result('pg2').run;
model.result('pg2').feature('vol1').create('mtrl1', 'MaterialAppearance');
model.result('pg2').run;
model.result('pg2').feature('vol1').feature('mtrl1').set('appearance', 'custom');
model.result('pg2').feature('vol1').feature('mtrl1').set('family', 'aluminum');
model.result('pg2').create('line1', 'Line');
model.result('pg2').feature('line1').set('expr', '1');
model.result('pg2').feature('line1').set('linetype', 'tube');
model.result('pg2').feature('line1').set('radiusexpr', '0.3');
model.result('pg2').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg2').feature('line1').set('coloring', 'uniform');
model.result('pg2').feature('line1').set('color', 'black');
model.result('pg2').feature('line1').create('sel1', 'Selection');
model.result('pg2').feature('line1').feature('sel1').selection.set([12 13 14 15 16 17 18 19 20 21 22 23 27 28 31 32 33 34 35 36 38 39 63 64 65 66 67 69 70 92 93 95 96 102 103 106 107 108 119 120 121 122 123 132 133 142 147 148 149 150 151 153 154 159 160 161 258 259 260 276 277 278 279 282 284 285 286 287 289 301 302 303 305 317 319 323 325 326 332 333 334 352 357 360 361 362 363 366]);
model.result('pg2').run;
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('Current Density');
model.result('pg3').setIndex('looplevel', 5, 0);
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', 'mf.normJ');
model.result('pg3').feature('surf1').set('colortable', 'Dipole');
model.result('pg3').feature('surf1').create('sel1', 'Selection');
model.result('pg3').feature('surf1').feature('sel1').selection.set([11 12 14 20 85 88 90 91 92 94 110 112 132 174 190 191 192 198 199 205]);
model.result('pg3').run;
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Acoustic Pressure and SPL');
model.result('pg4').setIndex('looplevel', 7, 0);
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'acpr.p_t');
model.result('pg4').feature('surf1').set('colortable', 'Wave');
model.result('pg4').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg4').run;
model.result('pg4').create('surf2', 'Surface');
model.result('pg4').feature('surf2').set('expr', 'acpr.Lp_t');
model.result('pg4').feature('surf2').create('trn1', 'Translation');
model.result('pg4').run;
model.result('pg4').feature('surf2').feature('trn1').set('trans', [300 0 0]);
model.result('pg4').run;
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').run;
model.result('pg5').label('Displacement');
model.result('pg5').set('data', 'sec1');
model.result('pg5').setIndex('looplevel', 5, 0);
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', 'solid.disp');
model.result('pg5').feature('surf1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg5').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg5').feature('surf1').create('def1', 'Deform');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').run;
model.result('pg6').label('Lorentz-Force (z-Component)');
model.result('pg6').setIndex('looplevel', 5, 0);
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').create('vol1', 'Volume');
model.result('pg6').feature('vol1').set('expr', 'mmcpl1.FLtzz');
model.result('pg6').feature('vol1').set('differential', true);
model.result('pg6').run;
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').label('Coil Current Density Jx');
model.result('pg7').setIndex('looplevel', 5, 0);
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').create('vol1', 'Volume');
model.result('pg7').feature('vol1').set('expr', 'mf.Jx');
model.result('pg7').feature('vol1').set('differential', true);
model.result('pg7').feature('vol1').set('colortable', 'Thermal');
model.result('pg7').feature('vol1').create('sel1', 'Selection');
model.result('pg7').feature('vol1').feature('sel1').selection.named('sel2');
model.result('pg7').run;
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').run;
model.result('pg8').label('Coil Current Density Jy');
model.result('pg8').setIndex('looplevel', 5, 0);
model.result('pg8').set('showlegendsunit', true);
model.result('pg8').create('vol1', 'Volume');
model.result('pg8').feature('vol1').set('expr', 'mf.Jy');
model.result('pg8').feature('vol1').set('differential', true);
model.result('pg8').feature('vol1').set('colortable', 'Thermal');
model.result('pg8').feature('vol1').create('sel1', 'Selection');
model.result('pg8').feature('vol1').feature('sel1').selection.named('sel2');
model.result('pg8').run;
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('On-Axis Response');
model.result('pg9').set('titletype', 'label');
model.result('pg9').set('xlog', true);
model.result('pg9').set('xlabelactive', true);
model.result('pg9').set('xlabel', 'Frequency (Hz)');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'dB(Z)');
model.result('pg9').create('oct1', 'OctaveBand');
model.result('pg9').feature('oct1').set('quantity', 'bandpower');
model.result('pg9').feature('oct1').set('markerpos', 'datapoints');
model.result('pg9').feature('oct1').set('linewidth', 'preference');
model.result('pg9').feature('oct1').selection.geom('geom1');
model.result('pg9').feature('oct1').set('expr', 'pext(0,0,1[m])');
model.result('pg9').feature('oct1').set('quantity', 'continuous');
model.result('pg9').run;
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('Coil Electric Impedance');
model.result('pg10').set('titletype', 'label');
model.result('pg10').set('xlabelactive', true);
model.result('pg10').set('xlabel', 'Frequency (Hz)');
model.result('pg10').set('ylabelactive', true);
model.result('pg10').set('ylabel', 'Z(\Omega)');
model.result('pg10').set('xlog', true);
model.result('pg10').set('legendpos', 'upperleft');
model.result('pg10').create('glob1', 'Global');
model.result('pg10').feature('glob1').set('markerpos', 'datapoints');
model.result('pg10').feature('glob1').set('linewidth', 'preference');
model.result('pg10').feature('glob1').setIndex('expr', 'abs(mf.ZCoil_1)', 0);
model.result('pg10').feature('glob1').setIndex('unit', ['ohm' ], 0);
model.result('pg10').feature('glob1').setIndex('descr', 'abs(Z)', 0);
model.result('pg10').feature('glob1').setIndex('expr', 'real(mf.ZCoil_1)', 1);
model.result('pg10').feature('glob1').setIndex('unit', ['ohm' ], 1);
model.result('pg10').feature('glob1').setIndex('descr', 'real(Z)', 1);
model.result('pg10').feature('glob1').setIndex('expr', 'imag(mf.ZCoil_1)', 2);
model.result('pg10').feature('glob1').setIndex('unit', ['ohm' ], 2);
model.result('pg10').feature('glob1').setIndex('descr', 'imag(Z)', 2);
model.result('pg10').run;
model.result('pg10').run;
model.result.create('pg11', 'PolarGroup');
model.result('pg11').run;
model.result('pg11').label('Spatial Response');
model.result('pg11').set('zeroangle', 'up');
model.result('pg11').create('rp1', 'RadiationPattern');
model.result('pg11').feature('rp1').set('markerpos', 'datapoints');
model.result('pg11').feature('rp1').set('linewidth', 'preference');
model.result('pg11').feature('rp1').set('anglerestr', 'manual');
model.result('pg11').feature('rp1').set('phimin', -90);
model.result('pg11').feature('rp1').set('phirange', 180);
model.result('pg11').feature('rp1').set('normal', [1 0 0]);
model.result('pg11').feature('rp1').set('radius', '1[m]');
model.result('pg11').feature('rp1').set('refdir', [0 0 1]);
model.result('pg11').feature('rp1').set('legend', true);
model.result('pg11').run;
model.result('pg11').run;
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').set('data', 'dset4');
model.result('pg12').setIndex('looplevel', 1, 0);
model.result('pg12').set('defaultPlotID', 'modeShape');
model.result('pg12').label('Mode Shape (solid)');
model.result('pg12').set('showlegends', false);
model.result('pg12').create('surf1', 'Surface');
model.result('pg12').feature('surf1').set('expr', {'solid.disp'});
model.result('pg12').feature('surf1').set('threshold', 'manual');
model.result('pg12').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg12').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg12').feature('surf1').set('colortabletrans', 'none');
model.result('pg12').feature('surf1').set('colorscalemode', 'linear');
model.result('pg12').feature('surf1').create('def', 'Deform');
model.result('pg12').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg12').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg12').label('Mode Shape (solid)');
model.result('pg12').run;
model.result('pg12').set('data', 'sec2');
model.result('pg12').set('looplevel', [6]);
model.result('pg12').run;
model.result('pg12').set('looplevel', [1]);
model.result('pg12').run;
model.result('pg12').set('looplevel', [2]);
model.result('pg12').run;
model.result('pg12').set('looplevel', [3]);
model.result('pg12').run;
model.result('pg12').set('looplevel', [4]);
model.result('pg12').run;
model.result('pg12').set('looplevel', [5]);
model.result('pg12').run;
model.result('pg1').run;

model.title(['Loudspeaker Driver in 3D ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Frequency-Domain Analysis']);

model.description('This tutorial shows how to best solve full 3D vibroelectroacoustic multiphysics models of loudspeakers. The model is based on a 3D representation of the existing 2D axisymmetric Application Library model loudspeaker_driver. The physics setup is essentially the same in this 3D version as in the 2D axisymmetric version. In the 3D model an iterative solver suggestion is selected for the frequency-domain analysis. This suggestion ensures that the coupled acoustic, structure, and electromagnetic problem is solved efficiently.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('loudspeaker_driver_3d.mph');

model.modelNode.label('Components');

out = model;
