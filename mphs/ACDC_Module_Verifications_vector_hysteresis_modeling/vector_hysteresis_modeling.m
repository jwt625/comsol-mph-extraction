function out = model
%
% vector_hysteresis_modeling.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Verifications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mf', 'InductionCurrents', 'geom1');
model.physics('mf').model('comp1');

model.study.create('std1');
model.study('std1').create('ccc', 'CoilCurrentCalculation');
model.study('std1').feature('ccc').set('CoilName', '1');
model.study('std1').feature('ccc').set('outputmap', {});
model.study('std1').feature('ccc').set('ngenAUX', '1');
model.study('std1').feature('ccc').set('goalngenAUX', '1');
model.study('std1').feature('ccc').set('ngenAUX', '1');
model.study('std1').feature('ccc').set('goalngenAUX', '1');
model.study('std1').feature('ccc').setSolveFor('/physics/mf', true);

model.param.set('W', '174.5[mm]');
model.param.descr('W', 'Width of the core');
model.param.set('H', '180[mm]');
model.param.descr('H', 'Height of the core');
model.param.set('w', '30[mm]');
model.param.descr('w', 'Width of the central limb');
model.param.set('h1', 'H-2*w');
model.param.descr('h1', 'Height of the windows');
model.param.set('w1', '(W-3*w)/2');
model.param.descr('w1', 'Width of the windows');
model.param.set('Th', '5*0.48[mm]');
model.param.descr('Th', 'Thickness of the core');
model.param.set('f', '10[Hz]');
model.param.descr('f', 'Feeding voltage frequency');
model.param.set('R_coil', '11.42[ohm]');
model.param.descr('R_coil', 'Coil resistance');

model.func.create('step1', 'Step');
model.func('step1').model('comp1');
model.func('step1').set('location', 0.5);
model.func('step1').set('smooth', 1);

model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', {'W' 'H/2'});
model.geom('geom1').feature('wp1').geom.feature('r1').set('base', 'center');
model.geom('geom1').feature('wp1').geom.feature('r1').set('pos', {'0' '3*H/4'});
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').feature('wp1').geom.create('r2', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r2').set('size', {'w1' 'h1/2'});
model.geom('geom1').feature('wp1').geom.feature('r2').set('base', 'center');
model.geom('geom1').feature('wp1').geom.feature('r2').set('pos', {'-(w+w1)/2' 'H-h1/4'});
model.geom('geom1').feature('wp1').geom.run('r2');
model.geom('geom1').feature('wp1').geom.create('r3', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r3').set('size', {'w1' 'h1/2'});
model.geom('geom1').feature('wp1').geom.feature('r3').set('base', 'center');
model.geom('geom1').feature('wp1').geom.feature('r3').set('pos', {'(w+w1)/2' 'H-h1/4'});
model.geom('geom1').feature('wp1').geom.run('r3');
model.geom('geom1').feature('wp1').geom.create('dif1', 'Difference');
model.geom('geom1').feature('wp1').geom.feature('dif1').selection('input').set({'r1'});
model.geom('geom1').feature('wp1').geom.feature('dif1').selection('input2').set({'r2' 'r3'});
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').set('workplane', 'wp1');
model.geom('geom1').feature('ext1').selection('input').set({'wp1'});
model.geom('geom1').feature('ext1').setIndex('distance', 'Th/2', 0);
model.geom('geom1').run('ext1');
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').set('r', 'w*0.7');
model.geom('geom1').feature('cyl1').set('h', 'h1/2');
model.geom('geom1').feature('cyl1').set('pos', {'-w-w1' 'H-h1/2' '0'});
model.geom('geom1').feature('cyl1').set('axistype', 'y');
model.geom('geom1').feature('cyl1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('cyl1').setIndex('layer', '0.1*w', 0);
model.geom('geom1').run('cyl1');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').init(3);
model.geom('geom1').feature('del1').selection('input').set('cyl1', [3 4 5]);
model.geom('geom1').run('del1');
model.geom('geom1').create('copy1', 'Copy');
model.geom('geom1').feature('copy1').selection('input').set({'del1'});
model.geom('geom1').feature('copy1').set('displx', '(w+w1)*2');
model.geom('geom1').run('copy1');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'2*W' 'H' '3*w'});
model.geom('geom1').feature('blk1').set('pos', {'-W' '0' '0'});
model.geom('geom1').run('fin');

model.view('view1').set('renderwireframe', true);

model.physics('mf').create('symp1', 'SymmetryPlane', 2);
model.physics('mf').feature('symp1').selection.set([5 9 11 16 21 30 37 42 44 49]);
model.physics('mf').feature('symp1').set('Symmetry_type', 'Antisymmetry');
model.physics('mf').create('als1', 'AmperesLawSolid', 3);
model.physics('mf').feature('als1').selection.set([3]);
model.physics('mf').feature('als1').set('ConstitutiveRelationBH', 'JilesAtherton');
model.physics('mf').create('coil1', 'Coil', 3);
model.physics('mf').feature('coil1').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil1').set('CoilType', 'Numeric');
model.physics('mf').feature('coil1').set('CoilExcitation', 'Voltage');
model.physics('mf').feature('coil1').set('VCoil', '14.5[V]*sin(2*pi*f*t)*step1(f*t)');
model.physics('mf').feature('coil1').set('N', 90);
model.physics('mf').feature('coil1').set('wireProperties', 'Resistance');
model.physics('mf').feature('coil1').set('RCoilDC', 'R_coil');
model.physics('mf').feature('coil1').selection.set([5 6]);
model.physics('mf').feature('coil1').feature('ccc1').set('fl', 2);
model.physics('mf').feature('coil1').feature('ccc1').set('fA', 2);
model.physics('mf').feature('coil1').feature('ccc1').feature('ct1').selection.set([51]);
model.physics('mf').feature('coil1').feature('ccc1').create('cg1', 'CoilGround', 2);
model.physics('mf').feature('coil1').feature('ccc1').feature('cg1').selection.set([35]);
model.physics('mf').create('coil2', 'Coil', 3);
model.physics('mf').feature('coil2').selection.set([2 4]);
model.physics('mf').feature('coil2').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil2').set('CoilType', 'Numeric');
model.physics('mf').feature('coil2').set('CoilExcitation', 'Voltage');
model.physics('mf').feature('coil2').set('VCoil', '14.5[V]*cos(2*pi*f*t)*step1(f*t)');
model.physics('mf').feature('coil2').set('N', 90);
model.physics('mf').feature('coil2').set('wireProperties', 'Resistance');
model.physics('mf').feature('coil2').set('RCoilDC', 'R_coil');
model.physics('mf').feature('coil2').feature('ccc1').set('fl', 2);
model.physics('mf').feature('coil2').feature('ccc1').set('fA', 2);
model.physics('mf').feature('coil2').feature('ccc1').feature('ct1').selection.set([26]);
model.physics('mf').feature('coil2').feature('ccc1').create('cg1', 'CoilGround', 2);
model.physics('mf').feature('coil2').feature('ccc1').feature('cg1').selection.set([6]);
model.physics('mf').create('gfa1', 'GaugeFixingA', 3);
model.physics('mf').prop('ShapeProperty').set('order_magneticvectorpotential', 1);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').selection.set([2 4 5 6]);
model.material('mat1').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat1').label('Coil');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('JilesAtherton', ['Jiles' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Atherton model parameters']);
model.material('mat2').label(['Jiles' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Atherton Hysteretic Material']);
model.material('mat2').set('family', 'iron');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('JilesAtherton').set('MsJA', {'1.6e6[A/m]' '0' '0' '0' '1.6e6[A/m]' '0' '0' '0' '1.6e6[A/m]'});
model.material('mat2').propertyGroup('JilesAtherton').set('aJA', {'560[A/m]' '0' '0' '0' '560[A/m]' '0' '0' '0' '560[A/m]'});
model.material('mat2').propertyGroup('JilesAtherton').set('kJA', {'1200[A/m]' '0' '0' '0' '1200[A/m]' '0' '0' '0' '1200[A/m]'});
model.material('mat2').propertyGroup('JilesAtherton').set('cJA', {'0.1' '0' '0' '0' '0.1' '0' '0' '0' '0.1'});
model.material('mat2').propertyGroup('JilesAtherton').set('alphaJA', {'0.0007' '0' '0' '0' '0.0007' '0' '0' '0' '0.0007'});
model.material('mat2').selection.set([3]);
model.material('mat2').propertyGroup('def').set('electricconductivity', {'1'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat2').propertyGroup('JilesAtherton').set('MsJA', {'1.31e6[A/m]' '0' '0' '0' '1.33e6[A/m]' '0' '0' '0' '1.31e6[A/m]'});
model.material('mat2').propertyGroup('JilesAtherton').set('aJA', {'233.78[A/m]' '0' '0' '0' '172.856[A/m]' '0' '0' '0' '233.78[A/m]'});
model.material('mat2').propertyGroup('JilesAtherton').set('kJA', {'374.975[A/m]' '0' '0' '0' '232.652[A/m]' '0' '0' '0' '374.975[A/m]'});
model.material('mat2').propertyGroup('JilesAtherton').set('cJA', {'736e-3' '0' '0' '0' '652e-3' '0' '0' '0' '736e-3'});
model.material('mat2').propertyGroup('JilesAtherton').set('alphaJA', {'562e-6' '0' '0' '0' '417e-6' '0' '0' '0' '562e-6'});
model.material('mat2').label('Jiles-Atherton Anisotropic Hysteretic Material');

model.mesh('mesh1').autoMeshSize(7);
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.set([14]);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 'w/10');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hgradactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hgrad', 1.3);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([3]);
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 1);
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').run;

model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('tunit', 'ms');
model.study('std1').feature('time').set('tlist', 'range(0,2.5,300)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'ccc');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'ccc');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_mf_coil1_ccc1_s' 'comp1_mf_coil2_ccc1_s'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_mf_coil1_ccc1_p' 'comp1_mf_coil1_ccc1_lm' 'comp1_mf_coil2_ccc1_p' 'comp1_mf_coil2_ccc1_lm'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').set('segterm', 'itertol');
model.sol('sol1').feature('s1').feature('se1').set('segiter', 6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,2.5,300)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('tout', 'tstepsclosest');
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.2);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').label('Suggested Direct Solver (mf)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'fgmres');
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('t1').feature('i1').create('asamg1', 'AuxiliarySpaceAMG');
model.sol('sol1').feature('t1').feature('i1').feature('asamg1').set('interm', {'vanka'});
model.sol('sol1').feature('t1').feature('i1').feature('asamg1').set('vankavars', {'comp1_mf_psi'});
model.sol('sol1').feature('t1').feature('i1').feature('asamg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('asamg1').feature('pr').feature('so1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('asamg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('asamg1').feature('po').feature('so1').set('iter', 0);
model.sol('sol1').feature('t1').feature('i1').feature('asamg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('asamg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.2);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('v2').feature('comp1_A').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_A').set('scaleval', '5e-3');
model.sol('sol1').feature('v2').feature('comp1_mf_als1_H_').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_mf_als1_H_').set('scaleval', '1e4');
model.sol('sol1').feature('v2').feature('comp1_mf_als1_M_').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_mf_als1_M_').set('scaleval', '1e6');
model.sol('sol1').feature('v2').feature('comp1_mf_psi').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_mf_coil1_ICoil_ode').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_mf_coil2_ICoil_ode').set('scalemethod', 'manual');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('dDef').set('linsolver', 'pardiso');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Magnetic Flux Density Norm (mf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('solutionparams', 'parent');
model.result('pg1').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg1').feature('mslc1').set('xcoord', 'mf.CPx');
model.result('pg1').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg1').feature('mslc1').set('ycoord', 'mf.CPy');
model.result('pg1').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('mslc1').set('zcoord', 'mf.CPz');
model.result('pg1').feature('mslc1').set('colortable', 'Prism');
model.result('pg1').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result('pg1').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg1').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg1').feature('strmsl1').set('xcoord', 'mf.CPx');
model.result('pg1').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg1').feature('strmsl1').set('ycoord', 'mf.CPy');
model.result('pg1').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('strmsl1').set('zcoord', 'mf.CPz');
model.result('pg1').feature('strmsl1').set('titletype', 'none');
model.result('pg1').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg1').feature('strmsl1').set('udist', 0.02);
model.result('pg1').feature('strmsl1').set('maxlen', 0.4);
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('inheritcolor', false);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('data', 'parent');
model.result('pg1').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg1').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg1').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg1').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg1').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg1').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg1').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('mslc1').set('xcoord', 'W');
model.result('pg1').feature('mslc1').set('ycoord', 'H');
model.result('pg1').feature('mslc1').set('zcoord', 0);
model.result('pg1').run;
model.result('pg1').feature('strmsl1').set('xcoord', 'W');
model.result('pg1').feature('strmsl1').set('ycoord', 'H');
model.result('pg1').feature('strmsl1').set('zcoord', 0);
model.result('pg1').run;

model.view.create('view3', 3);
model.view('view3').set('locked', true);

model.result('pg1').run;
model.result('pg1').set('view', 'view3');
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 111, 0);
model.result('pg1').run;
model.result.dataset.create('cpt1', 'CutPoint3D');
model.result.dataset('cpt1').set('pointx', 0);
model.result.dataset('cpt1').set('pointy', 'H-61.5[mm]');
model.result.dataset('cpt1').set('pointz', 0);
model.result.dataset.create('av1', 'Average');
model.result.dataset('av1').set('intsurface', true);
model.result.dataset('av1').set('intvolume', true);
model.result.dataset('av1').set('showlevel', 'off');
model.result.dataset('av1').selection.geom('geom1', 2);
model.result.dataset('av1').selection.set([30]);
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').selection.set([14]);
model.result.dataset('surf1').set('param', 'xy');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').set('data', 'cpt1');
model.result('pg2').create('ptgr1', 'PointGraph');
model.result('pg2').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg2').feature('ptgr1').set('linewidth', 'preference');
model.result('pg2').feature('ptgr1').set('expr', 'mf.By');
model.result('pg2').feature('ptgr1').set('xdata', 'expr');
model.result('pg2').feature('ptgr1').set('xdataexpr', 'mf.Bx');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').setIndex('looplevelinput', 'interp', 0);
model.result('pg2').setIndex('interp', 'range(200,2.5,300)', 0);
model.result('pg2').run;
model.result('pg2').label('Rotating Field');
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').set('expr', {'mf.ICoil_1'});
model.result('pg3').feature('glob1').set('descr', {'Coil current'});
model.result('pg3').feature('glob1').set('unit', {'A'});
model.result('pg3').run;
model.result('pg3').setIndex('looplevelinput', 'interp', 0);
model.result('pg3').setIndex('interp', 'range(200,2,300)', 0);
model.result('pg3').run;
model.result('pg3').label('Coil Current');
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Electric Current Harmonic Pollution');
model.result('pg4').set('titletype', 'label');
model.result('pg4').set('showlegends', false);
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').setIndex('expr', 'mf.ICoil_1-mf.VCoil_1/mf.RCoil_1', 0);
model.result('pg4').feature('glob1').setIndex('unit', 'A', 0);
model.result('pg4').feature('glob1').setIndex('descr', '', 0);
model.result('pg4').feature('glob1').set('xdata', 'fourier');
model.result('pg4').feature('glob1').set('fouriershow', 'spectrum');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').set('legendpos', 'lowerright');
model.result('pg5').set('data', 'av1');
model.result('pg5').setIndex('looplevelinput', 'interp', 0);
model.result('pg5').setIndex('interp', 'range(200,1,300)', 0);
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').setIndex('expr', 'mf.By', 0);
model.result('pg5').feature('glob1').setIndex('unit', 'T', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'Magnetic flux density, y-component', 0);
model.result('pg5').feature('glob1').set('xdata', 'expr');
model.result('pg5').feature('glob1').set('xdataexpr', 'mf.Hy');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').label('Hysteresis');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 111, 0);
model.result('pg6').create('arws1', 'ArrowSurface');
model.result('pg6').feature('arws1').set('expr', {'mf.Mx' 'mf.My'});
model.result('pg6').feature('arws1').set('xnumber', 41);
model.result('pg6').feature('arws1').set('arrowtype', 'cone');
model.result('pg6').feature.duplicate('arws2', 'arws1');
model.result('pg6').run;
model.result('pg6').feature('arws2').set('scaleactive', true);
model.result('pg6').feature('arws2').set('scale', '7e-9');
model.result('pg6').feature('arws2').set('data', 'surf1');
model.result('pg6').feature('arws2').set('color', 'blue');
model.result('pg6').feature('arws2').set('titletype', 'none');
model.result('pg6').run;
model.result('pg6').feature('arws1').set('scaleactive', true);
model.result('pg6').feature('arws1').set('scale', '7e-9');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').label('Magnetization');
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Magnetic Field');
model.result('pg7').run;
model.result('pg7').feature('arws1').set('expr', {'mf.Hx' 'mf.Hy'});
model.result('pg7').feature('arws1').set('scale', '2e-5');
model.result('pg7').run;
model.result('pg7').feature('arws2').set('expr', {'mf.Hx' 'mf.Hy'});
model.result('pg7').feature('arws2').set('scale', '2e-5');
model.result('pg7').run;

model.view('view3').set('locked', false);

model.result('pg5').run;

model.title('Vector Hysteresis Modeling');

model.description(['This tutorial is a benchmark model that reproduces the Testing Electromagnetic Analysis Method (TEAM) Problem 32, which evaluates numerical methods for the simulation of anisotropic magnetic hysteresis. A hysteretic three-limbed laminated iron core is subject to a time-varying magnetic field generated by two coils. The Jiles' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Atherton material model (available in the Magnetic Fields interface) is used to simulate the response of the material, reproducing published experimental and numerical data.' newline  newline 'The coils are excited by AC voltage sources that are phase-shifted by 90 degrees with respect to each other, creating a magnetic field that rotates in some regions of the core. The applied magnetic field is mainly oriented in the xy-plane, while the material is anisotropic and so reacts differently to fields applied along the x or y' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'direction.' newline  newline 'A vector hysteresis model is necessary to accurately simulate the time-dependent field, and the hysteretic behavior is displayed by plotting the magnetic flux density as a function of the magnetic field during one AC cycle (corresponding to one hysteresis loop). A direct solver (PARDISO) is used instead of the default iterative solver where the Gauge Fixing for A-Field feature is applied.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('vector_hysteresis_modeling.mph');

model.modelNode.label('Components');

out = model;
