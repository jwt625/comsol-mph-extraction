function out = model
%
% fresnel_equations.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Wave_Optics_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ewfd', 'ElectromagneticWavesFrequencyDomain', 'geom1');
model.physics('ewfd').model('comp1');

model.study.create('std1');
model.study('std1').create('wave', 'Wavelength');
model.study('std1').feature('wave').set('solnum', 'auto');
model.study('std1').feature('wave').set('notsolnum', 'auto');
model.study('std1').feature('wave').set('outputmap', {});
model.study('std1').feature('wave').set('ngenAUX', '1');
model.study('std1').feature('wave').set('goalngenAUX', '1');
model.study('std1').feature('wave').set('ngenAUX', '1');
model.study('std1').feature('wave').set('goalngenAUX', '1');
model.study('std1').feature('wave').setSolveFor('/physics/ewfd', true);

model.param.set('n_air', '1');
model.param.descr('n_air', 'Refractive index, air');
model.param.set('n_slab', '1.5');
model.param.descr('n_slab', 'Refractive index, slab');
model.param.set('lda0', '1[m]');
model.param.descr('lda0', 'Wavelength');
model.param.set('alpha', '70[deg]');
model.param.descr('alpha', 'Angle of incidence');
model.param.set('beta', 'asin(n_air*sin(alpha)/n_slab)');
model.param.descr('beta', 'Refraction angle');
model.param.set('alpha_brewster', 'atan(n_slab/n_air)');
model.param.descr('alpha_brewster', 'Brewster angle, TM only');
model.param.set('r_s', '(n_air*cos(alpha)-n_slab*cos(beta))/(n_air*cos(alpha)+n_slab*cos(beta))');
model.param.descr('r_s', 'Reflection coefficient, TE');
model.param.set('r_p', '(n_slab*cos(alpha)-n_air*cos(beta))/(n_air*cos(beta)+n_slab*cos(alpha))');
model.param.descr('r_p', 'Reflection coefficient, TM');
model.param.set('t_s', '(2*n_air*cos(alpha))/(n_air*cos(alpha)+n_slab*cos(beta))');
model.param.descr('t_s', 'Transmission coefficient, TE');
model.param.set('t_p', '(2*n_air*cos(alpha))/(n_air*cos(beta)+n_slab*cos(alpha))');
model.param.descr('t_p', 'Transmission coefficient, TM');

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', [0.2 0.2 0.8]);
model.geom('geom1').feature('blk1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('blk1').setIndex('layer', 0.4, 0);
model.geom('geom1').runPre('fin');

model.view('view1').set('renderwireframe', true);

model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Air');
model.material('mat1').selection.set([2]);
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'n_air'});
model.material('mat1').propertyGroup('RefractiveIndex').set('ki', {'0'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Glass');
model.material('mat2').selection.set([1]);
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'n_slab'});
model.material('mat2').propertyGroup('RefractiveIndex').set('ki', {'0'});

model.physics('ewfd').label('Electromagnetic Waves, Frequency Domain (ewfd, TE)');
model.physics('ewfd').create('port1', 'Port', 2);
model.physics('ewfd').feature('port1').selection.set([7]);
model.physics('ewfd').feature('port1').set('PortType', 'Periodic');
model.physics('ewfd').feature('port1').set('Eampl', [0 1 0]);
model.physics('ewfd').feature('port1').set('n', {'n_air' '0' '0' '0' 'n_air' '0' '0' '0' 'n_air'});
model.physics('ewfd').feature('port1').set('alpha1_inc', 'alpha');
model.physics('ewfd').create('port2', 'Port', 2);
model.physics('ewfd').feature('port2').selection.set([3]);
model.physics('ewfd').feature('port2').set('PortType', 'Periodic');
model.physics('ewfd').feature('port2').set('Eampl', [0 1 0]);
model.physics('ewfd').feature('port2').set('n', {'n_slab' '0' '0' '0' 'n_slab' '0' '0' '0' 'n_slab'});
model.physics('ewfd').create('pc1', 'PeriodicCondition', 2);
model.physics('ewfd').feature('pc1').selection.set([1 4 10 11]);
model.physics('ewfd').feature('pc1').set('PeriodicType', 'Floquet');
model.physics('ewfd').feature('pc1').set('Floquet_source', 'FromPeriodicPort');
model.physics('ewfd').create('pc2', 'PeriodicCondition', 2);
model.physics('ewfd').feature('pc2').selection.set([2 5 8 9]);
model.physics('ewfd').feature('pc2').set('PeriodicType', 'Floquet');
model.physics('ewfd').feature('pc2').set('Floquet_source', 'FromPeriodicPort');

model.study('std1').label('Study 1 (ewfd, TE)');
model.study('std1').feature('wave').set('plist', 'lda0');
model.study('std1').feature('wave').set('useparam', true);
model.study('std1').feature('wave').setIndex('pname_aux', 'n_air', 0);
model.study('std1').feature('wave').setIndex('plistarr_aux', '', 0);
model.study('std1').feature('wave').setIndex('punit_aux', '', 0);
model.study('std1').feature('wave').setIndex('pname_aux', 'n_air', 0);
model.study('std1').feature('wave').setIndex('plistarr_aux', '', 0);
model.study('std1').feature('wave').setIndex('punit_aux', '', 0);
model.study('std1').feature('wave').setIndex('pname_aux', 'alpha', 0);
model.study('std1').feature('wave').setIndex('plistarr_aux', 'range(0,2[deg],88[deg])', 0);
model.study('std1').feature('wave').setIndex('punit_aux', 'deg', 0);

model.mesh('mesh1').run;

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'wave');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'wave');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'lambda0' 'alpha'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {[native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm'] 'deg'});
model.sol('sol1').feature('s1').feature('p1').set('sweeptype', 'filled');
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'lda0' 'range(0,2[deg],88[deg])'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pcontinuation', '');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'wave');
model.sol('sol1').feature('s1').set('control', 'wave');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (ewfd)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankasolv', {'stored'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankarelax', 0.95);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Electric Field (ewfd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 45, 0);
model.result('pg1').setIndex('looplevel', 1, 1);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWavesFrequencyDomain/phys1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('smooth', 'internal');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('unit', {'' '' '' ''});
model.result('pg2').feature('glob1').set('expr', {'ewfd.Rorder_0_0' 'ewfd.Torder_0_0' 'ewfd.RTtotal' 'ewfd.Atotal'});
model.result('pg2').feature('glob1').set('descr', {'Reflectance, order [0,0]' 'Transmittance, order [0,0]' 'Total reflectance and transmittance' 'Absorptance'});
model.result('pg2').label('Reflectance, Transmittance, and Absorptance (ewfd)');
model.result('pg2').feature('glob1').set('titletype', 'none');
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Reflectance, transmittance, and absorptance (1)');
model.result('pg2').feature('glob1').set('xdataexpr', 'alpha');
model.result('pg2').feature('glob1').set('xdataunit', 'deg');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').label('Polarization Plot (ewfd)');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Polarization states, Color: Phase (Radians)');
model.result('pg3').setIndex('looplevelinput', 'manual', 0);
model.result('pg3').setIndex('looplevelinput', 'manual', 1);
model.result('pg3').setIndex('looplevel', '1', 0);
model.result('pg3').setIndex('looplevel', '1', 1);
model.result('pg3').create('plz1', 'Polarization');
model.result('pg3').feature('plz1').set('linestyle', 'solid');
model.result('pg3').feature('plz1').set('linewidth', 2);
model.result('pg3').feature('plz1').set('display', '0');
model.result('pg3').feature('plz1').create('col1', 'Color');
model.result('pg3').feature('plz1').feature('col1').set('colortable', 'Cyclic');
model.result('pg3').feature('plz1').feature('col1').set('colorlegend', true);
model.result('pg3').feature('plz1').set('legend', true);
model.result('pg3').feature('plz1').set('legendmethod', 'manual');
model.result('pg3').feature('plz1').setIndex('legends', 'Reflection', 0);
model.result('pg3').create('plz2', 'Polarization');
model.result('pg3').feature('plz2').set('linestyle', 'dashed');
model.result('pg3').feature('plz2').set('linewidth', 2);
model.result('pg3').feature('plz2').set('display', '1');
model.result('pg3').feature('plz2').create('col1', 'Color');
model.result('pg3').feature('plz2').feature('col1').set('colortable', 'Cyclic');
model.result('pg3').feature('plz2').feature('col1').set('colorlegend', false);
model.result('pg3').feature('plz2').set('legend', true);
model.result('pg3').feature('plz2').set('legendmethod', 'manual');
model.result('pg3').feature('plz2').setIndex('legends', 'Transmission', 0);
model.result('pg1').run;
model.result('pg1').label('Electric Field (ewfd, TE)');
model.result('pg1').run;
model.result('pg1').feature('mslc1').set('expr', 'ewfd.Ey');
model.result('pg1').feature('mslc1').set('descr', 'Electric field, y-component');
model.result('pg1').feature('mslc1').set('xnumber', '0');
model.result('pg1').feature('mslc1').set('znumber', '0');
model.result('pg1').feature('mslc1').set('colortable', 'WaveLight');
model.result('pg1').run;
model.result('pg1').create('arwv1', 'ArrowVolume');
model.result('pg1').feature('arwv1').set('expr', {'ewfd.Poavx' 'ewfd.Poavy' 'ewfd.Poavz'});
model.result('pg1').feature('arwv1').set('descr', 'Power flow, time average');
model.result('pg1').feature('arwv1').set('ynumber', 1);
model.result('pg1').feature('arwv1').set('color', 'green');
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 36, 0);
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').label('Reflectance, Transmittance, and Absorptance (ewfd, TE)');
model.result('pg2').set('titletype', 'none');
model.result('pg2').set('xlabelactive', true);
model.result('pg2').set('legendpos', 'middleleft');
model.result('pg2').run;
model.result('pg2').feature('glob1').set('linestyle', 'none');
model.result('pg2').feature('glob1').set('linemarker', 'cycle');
model.result('pg2').feature('glob1').set('markerpos', 'interp');
model.result('pg2').run;
model.result('pg2').create('glob2', 'Global');
model.result('pg2').feature('glob2').set('markerpos', 'datapoints');
model.result('pg2').feature('glob2').set('linewidth', 'preference');
model.result('pg2').feature('glob2').setIndex('expr', 'abs(r_s)^2', 0);
model.result('pg2').feature('glob2').setIndex('unit', '', 0);
model.result('pg2').feature('glob2').setIndex('descr', 'Reflectance, analytic', 0);
model.result('pg2').feature('glob2').setIndex('expr', 'n_slab*cos(beta)/(n_air*cos(alpha))*abs(t_s)^2', 1);
model.result('pg2').feature('glob2').setIndex('unit', '', 1);
model.result('pg2').feature('glob2').setIndex('descr', 'Transmittance, analytic', 1);
model.result('pg2').feature('glob2').set('xdataparamunit', [native2unicode(hex2dec({'00' 'b0'}), 'unicode') ]);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').label('Polarization Plot (ewfd, TE)');
model.result('pg3').run;

model.physics.copy('ewfd2', 'ewfd', 'comp1');
model.physics('ewfd2').label('Electromagnetic Waves, Frequency Domain (ewfd2, TM)');
model.physics('ewfd2').feature('port1').set('InputType', 'H');
model.physics('ewfd2').feature('port1').set('Hampl', [0 1 0]);
model.physics('ewfd2').feature('port2').set('InputType', 'H');
model.physics('ewfd2').feature('port2').set('Hampl', [0 1 0]);

model.study.create('std2');
model.study('std2').label('Study 2 (ewfd2, TM)');
model.study('std2').feature.copy('wave1', 'std1/wave');
model.study('std2').feature('wave1').setEntry('activate', 'ewfd', false);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'wave1');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'wave1');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 0.01);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('pname', {'lambda0' 'alpha'});
model.sol('sol2').feature('s1').feature('p1').set('punit', {[native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm'] 'deg'});
model.sol('sol2').feature('s1').feature('p1').set('sweeptype', 'filled');
model.sol('sol2').feature('s1').feature('p1').set('plistarr', {'lda0' 'range(0,2[deg],88[deg])'});
model.sol('sol2').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pcontinuation', '');
model.sol('sol2').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol2').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s1').feature('p1').set('probes', {});
model.sol('sol2').feature('s1').feature('p1').set('control', 'wave1');
model.sol('sol2').feature('s1').set('control', 'wave1');
model.sol('sol2').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (ewfd2)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol2').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (ewfd2)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_E2'});
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankasolv', {'stored'});
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankarelax', 0.95);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E2'});
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Electric Field (ewfd2)');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 45, 0);
model.result('pg4').setIndex('looplevel', 1, 1);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 45, 0);
model.result('pg4').setIndex('looplevel', 1, 1);
model.result('pg4').set('defaultPlotID', 'ElectromagneticWavesFrequencyDomain/phys1/pdef1/pcond1/pg1');
model.result('pg4').feature.create('mslc1', 'Multislice');
model.result('pg4').feature('mslc1').set('expr', 'ewfd2.normE');
model.result('pg4').feature('mslc1').set('smooth', 'internal');
model.result('pg4').feature('mslc1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'dset2');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('unit', {'' '' '' ''});
model.result('pg5').feature('glob1').set('expr', {'ewfd2.Rorder_0_0' 'ewfd2.Torder_0_0' 'ewfd2.RTtotal' 'ewfd2.Atotal'});
model.result('pg5').feature('glob1').set('descr', {'Reflectance, order [0,0]' 'Transmittance, order [0,0]' 'Total reflectance and transmittance' 'Absorptance'});
model.result('pg5').label('Reflectance, Transmittance, and Absorptance (ewfd2)');
model.result('pg5').feature('glob1').set('titletype', 'none');
model.result('pg5').feature('glob1').set('xdata', 'expr');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Reflectance, transmittance, and absorptance (1)');
model.result('pg5').feature('glob1').set('xdataexpr', 'alpha');
model.result('pg5').feature('glob1').set('xdataunit', 'deg');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').label('Polarization Plot (ewfd2)');
model.result('pg6').set('data', 'dset2');
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'Polarization states, Color: Phase (Radians)');
model.result('pg6').setIndex('looplevelinput', 'manual', 0);
model.result('pg6').setIndex('looplevelinput', 'manual', 1);
model.result('pg6').setIndex('looplevel', '1', 0);
model.result('pg6').setIndex('looplevel', '1', 1);
model.result('pg6').create('plz1', 'Polarization');
model.result('pg6').feature('plz1').set('linestyle', 'solid');
model.result('pg6').feature('plz1').set('linewidth', 2);
model.result('pg6').feature('plz1').set('display', '2');
model.result('pg6').feature('plz1').create('col1', 'Color');
model.result('pg6').feature('plz1').feature('col1').set('colortable', 'Cyclic');
model.result('pg6').feature('plz1').feature('col1').set('colorlegend', true);
model.result('pg6').feature('plz1').set('legend', true);
model.result('pg6').feature('plz1').set('legendmethod', 'manual');
model.result('pg6').feature('plz1').setIndex('legends', 'Reflection', 0);
model.result('pg6').create('plz2', 'Polarization');
model.result('pg6').feature('plz2').set('linestyle', 'dashed');
model.result('pg6').feature('plz2').set('linewidth', 2);
model.result('pg6').feature('plz2').set('display', '3');
model.result('pg6').feature('plz2').create('col1', 'Color');
model.result('pg6').feature('plz2').feature('col1').set('colortable', 'Cyclic');
model.result('pg6').feature('plz2').feature('col1').set('colorlegend', false);
model.result('pg6').feature('plz2').set('legend', true);
model.result('pg6').feature('plz2').set('legendmethod', 'manual');
model.result('pg6').feature('plz2').setIndex('legends', 'Transmission', 0);
model.result('pg4').run;
model.result('pg4').label('Magnetic Field (ewfd2, TM)');
model.result('pg4').run;
model.result('pg4').feature('mslc1').set('expr', 'ewfd2.Hy');
model.result('pg4').feature('mslc1').set('xnumber', '0');
model.result('pg4').feature('mslc1').set('znumber', '0');
model.result('pg4').feature('mslc1').set('colortable', 'WaveLight');
model.result('pg4').run;
model.result('pg4').create('arwv1', 'ArrowVolume');
model.result('pg4').feature('arwv1').setIndex('expr', 'ewfd2.Poavx', 0);
model.result('pg4').feature('arwv1').setIndex('expr', 'ewfd2.Poavy', 1);
model.result('pg4').feature('arwv1').setIndex('expr', 'ewfd2.Poavz', 2);
model.result('pg4').feature('arwv1').set('ynumber', 1);
model.result('pg4').feature('arwv1').set('color', 'green');
model.result('pg4').run;
model.result('pg5').run;
model.result('pg5').label('Reflectance, Transmittance, and Absorptance (ewfd2, TM)');
model.result('pg5').set('titletype', 'none');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('legendpos', 'middleleft');
model.result('pg5').run;
model.result('pg5').feature('glob1').set('linestyle', 'none');
model.result('pg5').feature('glob1').set('linemarker', 'cycle');
model.result('pg5').feature('glob1').set('markerpos', 'interp');
model.result('pg5').run;
model.result('pg5').create('glob2', 'Global');
model.result('pg5').feature('glob2').set('markerpos', 'datapoints');
model.result('pg5').feature('glob2').set('linewidth', 'preference');
model.result('pg5').feature('glob2').setIndex('expr', 'abs(r_p)^2', 0);
model.result('pg5').feature('glob2').setIndex('unit', '', 0);
model.result('pg5').feature('glob2').setIndex('descr', 'Reflectance, analytic', 0);
model.result('pg5').feature('glob2').setIndex('expr', 'n_slab*cos(beta)/(n_air*cos(alpha))*abs(t_p)^2', 1);
model.result('pg5').feature('glob2').setIndex('unit', '', 1);
model.result('pg5').feature('glob2').setIndex('descr', 'Transmittance, analytic', 1);
model.result('pg5').feature('glob2').set('xdataparamunit', [native2unicode(hex2dec({'00' 'b0'}), 'unicode') ]);
model.result('pg5').run;
model.result('pg6').run;
model.result('pg6').label('Polarization Plot (ewfd2, TM)');
model.result('pg6').run;

model.physics.create('ewbe', 'ElectromagneticWavesBeamEnvelopes', 'geom1');
model.physics('ewbe').model('comp1');

model.study('std1').feature('wave').setSolveFor('/physics/ewbe', true);
model.study('std2').feature('wave1').setSolveFor('/physics/ewbe', true);

model.physics('ewbe').label('Electromagnetic Waves, Beam Envelopes (ewbe, TE)');
model.physics('ewbe').selection.set([2]);
model.physics('ewbe').prop('WaveVector').set('k1', {'ewbe.k0*sin(alpha)' '0' '-ewbe.k0*cos(alpha)'});
model.physics('ewbe').prop('WaveVector').set('k2', {'ewbe.k1x' 'ewbe.k1y' '-ewbe.k1z'});
model.physics('ewbe').feature.copy('port1', 'ewfd/port1');
model.physics('ewbe').feature.copy('pc1', 'ewfd/pc1');
model.physics('ewbe').feature.copy('pc2', 'ewfd/pc2');
model.physics('ewbe').create('imp1', 'Impedance', 2);
model.physics('ewbe').feature('imp1').selection.set([6]);
model.physics('ewbe').feature('imp1').set('PropagationDirection', 'FromWaveVector');

model.material.duplicate('mat3', 'mat2');
model.material('mat3').label('Glass (Boundary)');
model.material('mat3').selection.geom('geom1', 2);
model.material('mat3').selection.set([6]);

model.mesh('mesh1').contribute('physics/ewbe', false);
model.mesh.create('mesh2', 'geom1');
model.mesh('mesh2').contribute('physics/ewfd', false);
model.mesh('mesh2').contribute('physics/ewfd2', false);

model.physics('ewbe').prop('MeshControl').set('elemCountT', 1);
model.physics('ewbe').prop('MeshControl').set('elemCountL', 1);

model.mesh('mesh2').run;

model.study.create('std3');
model.study('std3').label('Study 3 (ewbe, TE)');
model.study('std3').feature.copy('wave1', 'std2/wave1');
model.study('std3').feature('wave1').setEntry('activate', 'ewfd2', false);
model.study('std3').feature('wave1').setEntry('mesh', 'geom1', 'mesh2');

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'wave1');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'wave1');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('pname', {'lambda0' 'alpha'});
model.sol('sol3').feature('s1').feature('p1').set('punit', {[native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm'] 'deg'});
model.sol('sol3').feature('s1').feature('p1').set('sweeptype', 'filled');
model.sol('sol3').feature('s1').feature('p1').set('plistarr', {'lda0' 'range(0,2[deg],88[deg])'});
model.sol('sol3').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol3').feature('s1').feature('p1').set('pcontinuation', '');
model.sol('sol3').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol3').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol3').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol3').feature('s1').feature('p1').set('probes', {});
model.sol('sol3').feature('s1').feature('p1').set('control', 'wave1');
model.sol('sol3').feature('s1').set('control', 'wave1');
model.sol('sol3').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol3').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol3').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol3').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').label('Electric Field (ewbe)');
model.result('pg7').set('data', 'dset3');
model.result('pg7').setIndex('looplevel', 45, 0);
model.result('pg7').setIndex('looplevel', 1, 1);
model.result('pg7').set('data', 'dset3');
model.result('pg7').setIndex('looplevel', 45, 0);
model.result('pg7').setIndex('looplevel', 1, 1);
model.result('pg7').set('defaultPlotID', 'ElectromagneticWavesBeamEnvelopes/phys1/pdef1/pcond1/pg1');
model.result('pg7').feature.create('mslc1', 'Multislice');
model.result('pg7').feature('mslc1').label('Electric Field');
model.result('pg7').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg7').feature('mslc1').set('expr', 'ewbe.normE');
model.result('pg7').feature('mslc1').set('smooth', 'internal');
model.result('pg7').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg7').feature('mslc1').set('data', 'parent');
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').set('data', 'dset3');
model.result('pg8').create('glob1', 'Global');
model.result('pg8').feature('glob1').set('unit', {''});
model.result('pg8').feature('glob1').set('expr', {'ewbe.Rorder_0_0'});
model.result('pg8').feature('glob1').set('descr', {'Reflectance, order [0,0]'});
model.result('pg8').label('Reflectance (ewbe)');
model.result('pg8').feature('glob1').set('titletype', 'none');
model.result('pg8').feature('glob1').set('xdata', 'expr');
model.result('pg8').set('ylabelactive', true);
model.result('pg8').set('ylabel', 'Reflectance (1)');
model.result('pg8').feature('glob1').set('xdataexpr', 'alpha');
model.result('pg8').feature('glob1').set('xdataunit', 'deg');
model.result('pg8').feature('glob1').set('markerpos', 'datapoints');
model.result('pg8').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').label('Polarization Plot (ewbe)');
model.result('pg9').set('data', 'dset3');
model.result('pg9').set('titletype', 'manual');
model.result('pg9').set('title', 'Polarization states, Color: Phase (Radians)');
model.result('pg9').setIndex('looplevelinput', 'manual', 0);
model.result('pg9').setIndex('looplevelinput', 'manual', 1);
model.result('pg9').setIndex('looplevel', '1', 0);
model.result('pg9').setIndex('looplevel', '1', 1);
model.result('pg9').create('plz1', 'Polarization');
model.result('pg9').feature('plz1').set('linestyle', 'solid');
model.result('pg9').feature('plz1').set('linewidth', 2);
model.result('pg9').feature('plz1').set('display', '4');
model.result('pg9').feature('plz1').create('col1', 'Color');
model.result('pg9').feature('plz1').feature('col1').set('colortable', 'Cyclic');
model.result('pg9').feature('plz1').feature('col1').set('colorlegend', true);
model.result('pg9').feature('plz1').set('legend', true);
model.result('pg9').feature('plz1').set('legendmethod', 'manual');
model.result('pg9').feature('plz1').setIndex('legends', 'Reflection', 0);
model.result('pg7').run;
model.result('pg7').label('Electric Field (ewbe, TE)');
model.result('pg7').setIndex('looplevel', 36, 0);
model.result('pg7').run;
model.result('pg7').feature('mslc1').set('expr', 'ewbe.Ey');
model.result('pg7').feature('mslc1').set('xnumber', '0');
model.result('pg7').feature('mslc1').set('znumber', '0');
model.result('pg7').feature('mslc1').set('colortable', 'WaveLight');
model.result('pg4').run;
model.result('pg7').run;
model.result('pg7').feature.copy('arwv1', 'pg4/arwv1');
model.result('pg7').run;
model.result('pg7').feature('arwv1').set('expr', {'ewbe.Poavx' 'ewbe.Poavy' 'ewbe.Poavz'});
model.result('pg7').feature('arwv1').set('descr', 'Power flow, time average');
model.result('pg7').run;
model.result('pg8').run;
model.result('pg8').label('Reflectance (ewbe, TE)');
model.result('pg8').run;
model.result('pg2').run;
model.result('pg2').feature.duplicate('glob3', 'glob1');
model.result('pg2').run;
model.result('pg2').feature('glob3').set('data', 'dset3');
model.result('pg2').feature('glob3').set('expr', {'ewbe.Rorder_0_0'});
model.result('pg2').feature('glob3').set('descr', {'Reflectance, order [0,0]'});
model.result('pg2').feature('glob3').set('unit', {'1'});
model.result('pg2').feature('glob3').setIndex('unit', 1, 0);
model.result('pg2').feature('glob3').setIndex('descr', 'Reflectance, order [0,0] (ewbe)', 0);
model.result('pg2').run;
model.result('pg9').run;
model.result('pg9').label('Polarization Plot (ewbe, TE)');
model.result('pg9').run;

model.physics.copy('ewbe2', 'ewbe', 'comp1');
model.physics('ewbe2').label('Electromagnetic Waves, Beam Envelopes (ewbe2, TM)');
model.physics('ewbe2').feature('port1').set('InputType', 'H');
model.physics('ewbe2').feature('port1').set('Hampl', [0 1 0]);

model.study.create('std4');
model.study('std4').label('Study 4 (ewbe2, TM)');
model.study('std4').feature.copy('wave1', 'std3/wave1');
model.study('std4').feature('wave1').setEntry('activate', 'ewbe', false);

model.sol.create('sol4');
model.sol('sol4').study('std4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std4');
model.sol('sol4').feature('st1').set('studystep', 'wave1');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'wave1');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').create('p1', 'Parametric');
model.sol('sol4').feature('s1').feature.remove('pDef');
model.sol('sol4').feature('s1').feature('p1').set('pname', {'lambda0' 'alpha'});
model.sol('sol4').feature('s1').feature('p1').set('punit', {[native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm'] 'deg'});
model.sol('sol4').feature('s1').feature('p1').set('sweeptype', 'filled');
model.sol('sol4').feature('s1').feature('p1').set('plistarr', {'lda0' 'range(0,2[deg],88[deg])'});
model.sol('sol4').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol4').feature('s1').feature('p1').set('pcontinuation', '');
model.sol('sol4').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol4').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol4').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol4').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol4').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol4').feature('s1').feature('p1').set('probes', {});
model.sol('sol4').feature('s1').feature('p1').set('control', 'wave1');
model.sol('sol4').feature('s1').set('control', 'wave1');
model.sol('sol4').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol4').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol4').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol4').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol4').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').attach('std4');
model.sol('sol4').runAll;

model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').label('Electric Field (ewbe2)');
model.result('pg10').set('data', 'dset4');
model.result('pg10').setIndex('looplevel', 45, 0);
model.result('pg10').setIndex('looplevel', 1, 1);
model.result('pg10').set('data', 'dset4');
model.result('pg10').setIndex('looplevel', 45, 0);
model.result('pg10').setIndex('looplevel', 1, 1);
model.result('pg10').set('defaultPlotID', 'ElectromagneticWavesBeamEnvelopes/phys1/pdef1/pcond1/pg1');
model.result('pg10').feature.create('mslc1', 'Multislice');
model.result('pg10').feature('mslc1').label('Electric Field');
model.result('pg10').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg10').feature('mslc1').set('expr', 'ewbe2.normE');
model.result('pg10').feature('mslc1').set('smooth', 'internal');
model.result('pg10').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg10').feature('mslc1').set('data', 'parent');
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').set('data', 'dset4');
model.result('pg11').create('glob1', 'Global');
model.result('pg11').feature('glob1').set('unit', {''});
model.result('pg11').feature('glob1').set('expr', {'ewbe2.Rorder_0_0'});
model.result('pg11').feature('glob1').set('descr', {'Reflectance, order [0,0]'});
model.result('pg11').label('Reflectance (ewbe2)');
model.result('pg11').feature('glob1').set('titletype', 'none');
model.result('pg11').feature('glob1').set('xdata', 'expr');
model.result('pg11').set('ylabelactive', true);
model.result('pg11').set('ylabel', 'Reflectance (1)');
model.result('pg11').feature('glob1').set('xdataexpr', 'alpha');
model.result('pg11').feature('glob1').set('xdataunit', 'deg');
model.result('pg11').feature('glob1').set('markerpos', 'datapoints');
model.result('pg11').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg12', 'PlotGroup1D');
model.result('pg12').label('Polarization Plot (ewbe2)');
model.result('pg12').set('data', 'dset4');
model.result('pg12').set('titletype', 'manual');
model.result('pg12').set('title', 'Polarization states, Color: Phase (Radians)');
model.result('pg12').setIndex('looplevelinput', 'manual', 0);
model.result('pg12').setIndex('looplevelinput', 'manual', 1);
model.result('pg12').setIndex('looplevel', '1', 0);
model.result('pg12').setIndex('looplevel', '1', 1);
model.result('pg12').create('plz1', 'Polarization');
model.result('pg12').feature('plz1').set('linestyle', 'solid');
model.result('pg12').feature('plz1').set('linewidth', 2);
model.result('pg12').feature('plz1').set('display', '5');
model.result('pg12').feature('plz1').create('col1', 'Color');
model.result('pg12').feature('plz1').feature('col1').set('colortable', 'Cyclic');
model.result('pg12').feature('plz1').feature('col1').set('colorlegend', true);
model.result('pg12').feature('plz1').set('legend', true);
model.result('pg12').feature('plz1').set('legendmethod', 'manual');
model.result('pg12').feature('plz1').setIndex('legends', 'Reflection', 0);
model.result('pg10').run;
model.result('pg10').label('Magnetic Field (ewbe2, TM)');
model.result('pg10').setIndex('looplevel', 36, 0);
model.result('pg10').run;
model.result('pg10').feature('mslc1').set('expr', 'ewbe2.Hy');
model.result('pg10').feature('mslc1').set('xnumber', '0');
model.result('pg10').feature('mslc1').set('znumber', '0');
model.result('pg10').feature('mslc1').set('colortable', 'WaveLight');
model.result('pg10').run;
model.result('pg10').create('arwv1', 'ArrowVolume');
model.result('pg10').feature('arwv1').set('expr', {'ewbe2.Poavx' 'ewbe2.Poavy' 'ewbe2.Poavz'});
model.result('pg10').feature('arwv1').set('descr', 'Power flow, time average');
model.result('pg10').feature('arwv1').set('ynumber', 1);
model.result('pg10').feature('arwv1').set('color', 'green');
model.result('pg10').run;
model.result('pg11').run;
model.result('pg11').label('Reflectance (ewbe2, TM)');
model.result('pg11').run;
model.result('pg5').run;
model.result('pg5').feature.duplicate('glob3', 'glob1');
model.result('pg5').run;
model.result('pg5').feature('glob3').set('data', 'dset4');
model.result('pg5').feature('glob3').set('expr', {'ewbe2.Rorder_0_0'});
model.result('pg5').feature('glob3').set('descr', {'Reflectance, order [0,0]'});
model.result('pg5').feature('glob3').set('unit', {'1'});
model.result('pg5').feature('glob3').setIndex('unit', 1, 0);
model.result('pg5').feature('glob3').setIndex('descr', 'Reflectance, order [0,0] (ewbe2)', 0);
model.result('pg5').run;
model.result('pg12').run;
model.result('pg12').label('Polarization Plot (ewbe2, TM)');
model.result('pg12').run;

model.mesh('mesh1').contribute('physics/ewbe', false);
model.mesh('mesh1').contribute('physics/ewbe2', false);

model.study('std1').feature('wave').setEntry('activate', 'ewfd2', false);
model.study('std1').feature('wave').setEntry('activate', 'ewbe', false);
model.study('std1').feature('wave').setEntry('activate', 'ewbe2', false);
model.study('std2').feature('wave1').setEntry('activate', 'ewbe', false);
model.study('std2').feature('wave1').setEntry('activate', 'ewbe2', false);
model.study('std3').feature('wave1').setEntry('activate', 'ewbe2', false);

model.result('pg4').run;

model.title('Fresnel Equations');

model.description('A plane electromagnetic wave propagating through free space is incident at an angle upon an infinite dielectric medium. This example computes the reflection and transmission coefficients and compares the results to those given by the Fresnel equations.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('fresnel_equations.mph');

model.modelNode.label('Components');

out = model;
