function out = model
%
% axisymmetric_approximation_of_inductor_3d.m
%
% Model exported on May 26 2025, 21:24 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Devices,_Inductive');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('mef', 'ElectricInductionCurrents', 'geom1');
model.physics('mef').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/mef', true);

model.geom.create('part1', 'Part', 3);
model.geom('part1').create('imp1', 'Import');
model.geom('part1').feature('imp1').set('filename', 'inductor_3d.mphbin');
model.geom('part1').feature('imp1').importData;
model.geom('part1').create('wp1', 'WorkPlane');
model.geom('part1').feature('wp1').set('unite', true);
model.geom('part1').feature('wp1').set('quickplane', 'xz');
model.geom('part1').feature('wp1').geom.create('cro1', 'CrossSection');
model.geom('part1').feature('wp1').geom.run('cro1');
model.geom('part1').run('wp1');
model.geom('part1').create('del1', 'Delete');
model.geom('part1').feature('del1').selection('input').init(3);
model.geom('part1').feature('del1').selection('input').set('imp1', [2 3 4 5]);
model.geom('part1').run('del1');
model.geom('part1').create('wp2', 'WorkPlane');
model.geom('part1').feature('wp2').set('unite', true);
model.geom('part1').feature('wp2').set('quickz', '5[mm]');
model.geom('part1').feature('wp2').geom.create('cro1', 'CrossSection');
model.geom('part1').feature('wp2').geom.run('cro1');
model.geom('part1').run('wp2');
model.geom('part1').create('wp3', 'WorkPlane');
model.geom('part1').feature('wp3').set('unite', true);
model.geom('part1').feature('wp3').set('planetype', 'faceparallel');
model.geom('part1').feature('wp3').selection('face').set('del1', 46);
model.geom('part1').feature('wp3').geom.create('cro1', 'CrossSection');
model.geom('part1').feature('wp3').geom.run('cro1');
model.geom('part1').run('wp3');

model.view('view2').set('renderwireframe', true);

model.geom('part1').run('wp3');
model.geom('part1').measure.selection.init(0);
model.geom('part1').measure.selection.set('wp2', [9 14]);
model.geom('part1').measure.selection.init(0);
model.geom('part1').measure.selection.set('wp2', 7);
model.geom('part1').measure.selection.set('wp3', 8);
model.geom('part1').measure.selection.init(2);
model.geom('part1').measure.selection.set('wp2', [1 2 5 6]);
model.geom('part1').measure.selection.init(2);
model.geom('part1').measure.selection.set('wp3', [1 5]);

model.param.set('inner_diameter', '0.07[m]');
model.param.descr('inner_diameter', '3D diameter of central column');
model.param.set('outer_diameter', '0.13[m]');
model.param.descr('outer_diameter', '3D inner distance between external columns');
model.param.set('external_area', '0.001992 [m^2]');
model.param.descr('external_area', '3D area of one of the two lateral columns');
model.param.set('upper_area', '7.5e-4[m^2]');
model.param.descr('upper_area', '3D area of the upper magnetic circuit closure');
model.param.set('r_in', 'outer_diameter/2');
model.param.descr('r_in', '2Daxi equivalence for external radius of lateral column');
model.param.set('r_out', 'sqrt(external_area/pi+r_in^2)');
model.param.descr('r_out', '2Daxi equivalence for external radius of lateral column');
model.param.set('h_eq', 'upper_area/pi/r_in');
model.param.descr('h_eq', '2Daxi equivalence for height of upper magnetic circuit closure');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('type', 'sequence');
model.geom('geom1').feature('imp1').set('sequence', 'part1/wp1');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'r_out' '0.0325+2*h_eq'});
model.geom('geom1').feature('r1').set('pos', {'0' '-0.004-h_eq'});
model.geom('geom1').run('r1');
model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 0.1);
model.geom('geom1').feature('c1').set('pos', [0 0.01]);
model.geom('geom1').feature('c1').set('angle', 180);
model.geom('geom1').feature('c1').set('rot', -90);
model.geom('geom1').run('c1');
model.geom('geom1').create('int1', 'Intersection');
model.geom('geom1').feature('int1').selection('input').set({'imp1' 'r1'});
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').selection.set([2]);
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').selection.set([4 5 6]);
model.material('mat3').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'6e7'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1'});

model.physics('mef').create('alc2', 'ElectromagneticModel', 2);
model.physics('mef').feature('alc2').selection.set([2]);
model.physics('mef').feature('alc2').set('ConstitutiveRelationBH', 'MagneticLosses');
model.physics('mef').feature('mi1').create('ein1', 'ElectricInsulation', 1);
model.physics('mef').feature('mi1').feature('ein1').selection.set([25 26]);

model.material('mat2').propertyGroup.create('MagneticLosses', 'Magnetic_losses');
model.material('mat2').propertyGroup('MagneticLosses').set('murPrim', {'1200'});
model.material('mat2').propertyGroup('MagneticLosses').set('murBis', {'100'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1'});

model.physics('mef').create('al1', 'AmperesLaw', 2);
model.physics('mef').feature('al1').selection.set([4 5 6]);
model.physics('mef').create('rlccg1', 'RLCCoilGroup', 2);
model.physics('mef').feature('rlccg1').selection.set([4 5 6]);
model.physics('mef').feature('rlccg1').set('DomainSpec', 'manual');
model.physics('mef').feature('rlccg1').set('DomainsList', '5, 4, 6');
model.physics('mef').feature('rlccg1').set('V0', '1[mV]');

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').selection.set([2 3 4 5 6]);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([2 3]);
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', '2e-3');
model.mesh('mesh1').feature('ftri1').create('size2', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size2').selection.set([4 5 6]);
model.mesh('mesh1').feature('ftri1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size2').set('hmax', '5e-4');
model.mesh('mesh1').create('ftri2', 'FreeTri');
model.mesh('mesh1').run('ftri2');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(2);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('bl1').selection.set([4 5 6]);
model.mesh('mesh1').feature('bl1').feature('blp').selection.all;
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 12);
model.mesh('mesh1').feature('bl1').feature('blp').set('blstretch', 1.3);
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', '10[um]');
model.mesh('mesh1').run('bl1');

model.study('std1').feature('freq').set('punit', 'MHz');
model.study('std1').feature('freq').set('plist', 'range(1,0.25,10)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(1,0.25,10)'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'MHz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Magnetic Flux Density Norm (mef)');
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 37, 0);
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').feature('surf1').set('expr', 'mef.normB');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('surf1').set('colorcalibration', -0.8);
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature.create('str1', 'Streamline');
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('solutionparams', 'parent');
model.result('pg1').feature('str1').set('titletype', 'none');
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('udist', 0.03);
model.result('pg1').feature('str1').set('maxlen', 0.4);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('inheritcolor', false);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('data', 'parent');
model.result('pg1').feature('str1').selection.geom('geom1', 1);
model.result('pg1').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27]);
model.result('pg1').feature('str1').set('inheritplot', 'surf1');
model.result('pg1').feature('str1').feature.create('col1', 'Color');
model.result('pg1').feature('str1').feature('col1').set('expr', 'mef.normB');
model.result('pg1').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg1').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg1').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg1').feature('str1').feature.create('filt1', 'Filter');
model.result('pg1').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').feature.create('con1', 'Contour');
model.result('pg1').feature('con1').set('showsolutionparams', 'on');
model.result('pg1').feature('con1').set('solutionparams', 'parent');
model.result('pg1').feature('con1').set('expr', 'r*mef.Aphi');
model.result('pg1').feature('con1').set('titletype', 'none');
model.result('pg1').feature('con1').set('number', 10);
model.result('pg1').feature('con1').set('levelrounding', false);
model.result('pg1').feature('con1').set('coloring', 'uniform');
model.result('pg1').feature('con1').set('colorlegend', false);
model.result('pg1').feature('con1').set('color', 'custom');
model.result('pg1').feature('con1').set('customcolor', [0.3764705955982208 0.3764705955982208 0.3764705955982208]);
model.result('pg1').feature('con1').set('resolution', 'fine');
model.result('pg1').feature('con1').set('inheritcolor', false);
model.result('pg1').feature('con1').set('showsolutionparams', 'on');
model.result('pg1').feature('con1').set('data', 'parent');
model.result('pg1').feature('con1').set('inheritplot', 'surf1');
model.result('pg1').feature('con1').feature.create('filt1', 'Filter');
model.result('pg1').feature('con1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset1');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Magnetic Flux Density Norm, Revolved Geometry (mef)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'rev1');
model.result('pg2').setIndex('looplevel', 37, 0);
model.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond3/pg1');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').set('showsolutionparams', 'on');
model.result('pg2').feature('vol1').set('solutionparams', 'parent');
model.result('pg2').feature('vol1').set('expr', 'mef.normB');
model.result('pg2').feature('vol1').set('colortable', 'Prism');
model.result('pg2').feature('vol1').set('colortabletrans', 'nonlinear');
model.result('pg2').feature('vol1').set('colorcalibration', -0.8);
model.result('pg2').feature('vol1').set('showsolutionparams', 'on');
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('solutionparams', 'parent');
model.result('pg2').feature('con1').set('expr', 'r*mef.Aphi');
model.result('pg2').feature('con1').set('titletype', 'none');
model.result('pg2').feature('con1').set('number', 10);
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('coloring', 'uniform');
model.result('pg2').feature('con1').set('colorlegend', false);
model.result('pg2').feature('con1').set('color', 'custom');
model.result('pg2').feature('con1').set('customcolor', [0.3764705955982208 0.3764705955982208 0.3764705955982208]);
model.result('pg2').feature('con1').set('resolution', 'fine');
model.result('pg2').feature('con1').set('inheritcolor', false);
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('data', 'parent');
model.result('pg2').feature('con1').set('inheritplot', 'vol1');
model.result('pg2').feature('con1').feature.create('filt1', 'Filter');
model.result('pg2').feature('con1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg2').feature('con1').feature('filt1').set('shownodespec', 'on');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Electric Potential (mef)');
model.result('pg3').set('dataisaxisym', 'off');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 37, 0);
model.result('pg3').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond2/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg3').feature('surf1').set('colortable', 'Dipole');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature.create('str1', 'Streamline');
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('solutionparams', 'parent');
model.result('pg3').feature('str1').set('expr', {'mef.Er' 'mef.Ez'});
model.result('pg3').feature('str1').set('titletype', 'none');
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('udist', 0.02);
model.result('pg3').feature('str1').set('maxlen', 0.4);
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('inheritcolor', false);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('data', 'parent');
model.result('pg3').feature('str1').selection.geom('geom1', 1);
model.result('pg3').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27]);
model.result('pg3').feature('str1').set('inheritplot', 'surf1');
model.result('pg3').feature('str1').feature.create('col1', 'Color');
model.result('pg3').feature('str1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg3').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg3').feature('str1').feature.create('filt1', 'Filter');
model.result('pg3').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').run;
model.result.dataset('dset1').selection.geom('geom1', 2);
model.result.dataset('dset1').selection.geom('geom1', 2);
model.result.dataset('dset1').selection.set([2 4 5 6]);
model.result('pg2').run;
model.result.dataset.create('dset2', 'Solution');
model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.set([3 4 5 6]);
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').run;
model.result('pg4').label('Resistive Losses');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'log(mef.Qrh+0.1)');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').run;
model.result('pg5').label('Electric Field');
model.result('pg5').set('data', 'dset2');
model.result('pg5').create('arws1', 'ArrowSurface');
model.result('pg5').feature('arws1').set('xnumber', 20);
model.result('pg5').feature('arws1').set('ynumber', 20);
model.result('pg5').feature('arws1').set('expr', {'mef.Er' 'mef.Ez'});
model.result('pg5').feature('arws1').set('descr', 'Electric field');
model.result('pg5').feature('arws1').create('col1', 'Color');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').setIndex('looplevel', 22, 0);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Impedance');
model.result('pg6').set('titletype', 'none');
model.result('pg6').set('legendpos', 'upperleft');
model.result('pg6').set('twoyaxes', true);
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').run;
model.result('pg6').create('glob2', 'Global');
model.result('pg6').feature('glob2').set('markerpos', 'datapoints');
model.result('pg6').feature('glob2').set('linewidth', 'preference');
model.result('pg6').run;
model.result('pg6').feature('glob1').setIndex('expr', 'real(mef.VCoil_1/1[A])', 0);
model.result('pg6').feature('glob1').setIndex('descr', 'Real part of impedance', 0);
model.result('pg6').run;
model.result('pg6').feature('glob2').set('plotonsecyaxis', true);
model.result('pg6').feature('glob2').setIndex('expr', 'imag(mef.VCoil_1/1[A])', 0);
model.result('pg6').feature('glob2').setIndex('descr', 'Imaginary part of impedance', 0);
model.result('pg6').run;

model.title('Axisymmetric Approximation of 3D Inductor');

model.description(['Inductive devices experience capacitative coupling between conductors at high frequencies. Modeling this phenomenon requires that you describe electric fields that have components both parallel with and perpendicular to the wire. This consideration might lead to the conclusion that a 3D model is always necessary to model the phenomenon, even if the coil is a helix, which is actually not the case.' newline  newline 'The 3D inductor example demonstrates how to extract information related to the self-resonance of a 3D inductor by means of an axisymmetric simulation. In order to achieve a correct 2D axisymmetric model, an effective axisymmetric core is created, and the RLC Coil Group feature is employed. This lean method is particularly suitable for studying systems with thousands of turns, such as sensors or transformers, thus keeping the computational costs low.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('axisymmetric_approximation_of_inductor_3d.mph');

model.modelNode.label('Components');

out = model;
