function out = model
%
% si_inversion_layer_density_gradient_and_schrodinger_poisson.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Semiconductor_Module/Device_Building_Blocks');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 1);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('semi', 'Semiconductor', 'geom1');
model.physics('semi').model('comp1');

model.study.create('std1');
model.study('std1').create('semie', 'SemiconductorEquilibrium');
model.study('std1').feature('semie').set('solnum', 'auto');
model.study('std1').feature('semie').set('notsolnum', 'auto');
model.study('std1').feature('semie').set('outputmap', {});
model.study('std1').feature('semie').set('ngenAUX', '1');
model.study('std1').feature('semie').set('goalngenAUX', '1');
model.study('std1').feature('semie').set('ngenAUX', '1');
model.study('std1').feature('semie').set('goalngenAUX', '1');
model.study('std1').feature('semie').setSolveFor('/physics/semi', true);

model.geom('geom1').lengthUnit('nm');
model.geom('geom1').create('i1', 'Interval');
model.geom('geom1').feature('i1').set('coordsource', 'vector');
model.geom('geom1').feature('i1').set('coordvec', '0, 10, 70, 300, 1e3');

model.param.label('Parameters for Density-Gradient');
model.param.set('T0', '300[K]');
model.param.descr('T0', 'Temperature');
model.param.set('mnDG', 'me_const/3');
model.param.descr('mnDG', 'Density-gradient effective mass');
model.param.set('Na0', '3.8e16[1/cm^3]');
model.param.descr('Na0', 'Doping concentration');
model.param.set('Vg', '0[V]');
model.param.descr('Vg', 'Gate voltage');
model.param.set('epsrOx', '3.9');
model.param.descr('epsrOx', 'Oxide dielectric constant');
model.param.set('dOx', '3.1[nm]');
model.param.descr('dOx', 'Oxide thickness');
model.param.set('Phi0', '4.01[V]');
model.param.descr('Phi0', 'Gate metal work function');

model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('SemicondMaterial', 'Semiconductor_material');
model.material('mat1').propertyGroup('SemicondMaterial').set('mun', {'1450[cm^2/(V*s)]'});
model.material('mat1').propertyGroup('SemicondMaterial').set('mup', {'500[cm^2/(V*s)]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'11.9'});
model.material('mat1').propertyGroup('SemicondMaterial').set('Eg0', {'1.12[V]'});
model.material('mat1').propertyGroup('SemicondMaterial').set('chi0', {'4.05[V]'});
model.material('mat1').propertyGroup('SemicondMaterial').set('Nc', {'2.80e19[cm^-3]'});
model.material('mat1').propertyGroup('SemicondMaterial').set('Nv', {'2.65e19[cm^-3]'});

model.physics('semi').prop('ModelProperties').set('CarrierStatistics', 'FermiDirac');
model.physics('semi').prop('ShapeProperty').set('Formulation', 'FEM2DG');
model.physics('semi').feature('smm1').set('minput_temperature', 'T0');
model.physics('semi').feature('smm1').set('meDG', {'mnDG' '0' '0' '0' 'mnDG' '0' '0' '0' 'mnDG'});
model.physics('semi').feature('smm1').set('mhDG', {'10*me_const' '0' '0' '0' '10*me_const' '0' '0' '0' '10*me_const'});
model.physics('semi').create('adm1', 'AnalyticDopingModel', 1);
model.physics('semi').feature('adm1').selection.all;
model.physics('semi').feature('adm1').set('NAc', 'Na0');
model.physics('semi').create('mc1', 'MetalContact', 0);
model.physics('semi').feature('mc1').selection.set([5]);
model.physics('semi').create('gc1', 'GateContact', 0);
model.physics('semi').feature('gc1').selection.set([1]);
model.physics('semi').feature('gc1').set('V0', 'Vg');
model.physics('semi').feature('gc1').set('epsilon_ins', 'epsrOx');
model.physics('semi').feature('gc1').set('d_ins', 'dOx');
model.physics('semi').feature('gc1').set('Phi', 'Phi0');
model.physics('semi').feature('gc1').set('DGexteriorBC', 'barrier');
model.physics('semi').feature('gc1').set('Phi_nOx', '1e4[V]');
model.physics('semi').feature('gc1').set('Phi_pOx', '0[V]');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('hauto', 4);
model.mesh('mesh1').feature('size1').selection.set([5]);
model.mesh('mesh1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('size2').set('hmax', '1e-4');
model.mesh('mesh1').create('size3', 'Size');
model.mesh('mesh1').feature.move('size3', 3);
model.mesh('mesh1').feature('size3').selection.geom('geom1', 1);
model.mesh('mesh1').feature('size3').selection.set([1 2 3]);
model.mesh('mesh1').feature('size3').set('table', 'semi');
model.mesh('mesh1').feature('size3').set('hauto', 3);
model.mesh('mesh1').feature('size3').set('custom', true);
model.mesh('mesh1').feature('size3').set('hmaxactive', true);
model.mesh('mesh1').feature('size3').set('hmax', 0.5);

model.study('std1').label('Study 1: Density-Gradient');
model.study('std1').feature('semie').set('useparam', true);
model.study('std1').feature('semie').setIndex('pname', 'T0', 0);
model.study('std1').feature('semie').setIndex('plistarr', '', 0);
model.study('std1').feature('semie').setIndex('punit', 'K', 0);
model.study('std1').feature('semie').setIndex('pname', 'T0', 0);
model.study('std1').feature('semie').setIndex('plistarr', '', 0);
model.study('std1').feature('semie').setIndex('punit', 'K', 0);
model.study('std1').feature('semie').setIndex('pname', 'Vg', 0);
model.study('std1').feature('semie').setIndex('plistarr', '-1 0.2 1', 0);
model.study('std1').feature('semie').setIndex('punit', 'V', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'semie');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_V').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_Efn_').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phi_p').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_Efp_').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phi_n').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_V').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_Efn_').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_phi_p').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_Efp_').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_phi_n').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_V').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_Efn_').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_phi_p').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_Efp_').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_phi_n').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'semie');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-6);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s1').feature('p1').set('control', 'semie');
model.sol('sol1').feature('s1').set('control', 'semie');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', false);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').feature('aDef').set('assemtol', 0);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol1').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').set('mumpsalloc', 1.2);
model.sol('sol1').feature('s1').feature('d1').set('ooc', 'auto');
model.sol('sol1').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol1').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').label('Energy Levels (semi)');
model.result('pg1').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Energy Diagram');
model.result('pg1').set('ylabel', 'Energy (eV)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond1/pg2');
model.result('pg1').feature.create('lngr1', 'LineGraph');
model.result('pg1').feature('lngr1').label('Conduction Band Energy Level');
model.result('pg1').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr1').set('expr', 'semi.Ec_e');
model.result('pg1').feature('lngr1').set('unit', 'eV');
model.result('pg1').feature('lngr1').set('linecolor', 'blue');
model.result('pg1').feature('lngr1').set('legend', true);
model.result('pg1').feature('lngr1').set('legendmethod', 'manual');
model.result('pg1').feature('lngr1').set('legends', {'Ec'});
model.result('pg1').feature('lngr1').set('resolution', 'norefine');
model.result('pg1').feature('lngr1').set('smooth', 'everywhere');
model.result('pg1').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr1').set('data', 'parent');
model.result('pg1').feature('lngr1').selection.geom('geom1', 1);
model.result('pg1').feature('lngr1').selection.set([1 2 3 4]);
model.result('pg1').feature.create('lngr2', 'LineGraph');
model.result('pg1').feature('lngr2').label('Electron Quasi-Fermi Energy Level');
model.result('pg1').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr2').set('expr', 'semi.Efn_e');
model.result('pg1').feature('lngr2').set('unit', 'eV');
model.result('pg1').feature('lngr2').set('linestyle', 'dashed');
model.result('pg1').feature('lngr2').set('linecolor', 'black');
model.result('pg1').feature('lngr2').set('legend', true);
model.result('pg1').feature('lngr2').set('legendmethod', 'manual');
model.result('pg1').feature('lngr2').set('legends', {'Efn'});
model.result('pg1').feature('lngr2').set('resolution', 'norefine');
model.result('pg1').feature('lngr2').set('smooth', 'everywhere');
model.result('pg1').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr2').set('data', 'parent');
model.result('pg1').feature('lngr2').selection.geom('geom1', 1);
model.result('pg1').feature('lngr2').selection.set([1 2 3 4]);
model.result('pg1').feature.create('lngr3', 'LineGraph');
model.result('pg1').feature('lngr3').label('Hole Quasi-Fermi Energy Level');
model.result('pg1').feature('lngr3').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr3').set('expr', 'semi.Efp_e');
model.result('pg1').feature('lngr3').set('unit', 'eV');
model.result('pg1').feature('lngr3').set('linestyle', 'dotted');
model.result('pg1').feature('lngr3').set('linecolor', 'black');
model.result('pg1').feature('lngr3').set('legend', true);
model.result('pg1').feature('lngr3').set('legendmethod', 'manual');
model.result('pg1').feature('lngr3').set('legends', {'Efp'});
model.result('pg1').feature('lngr3').set('resolution', 'norefine');
model.result('pg1').feature('lngr3').set('smooth', 'everywhere');
model.result('pg1').feature('lngr3').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr3').set('data', 'parent');
model.result('pg1').feature('lngr3').selection.geom('geom1', 1);
model.result('pg1').feature('lngr3').selection.set([1 2 3 4]);
model.result('pg1').feature.create('lngr4', 'LineGraph');
model.result('pg1').feature('lngr4').label('Valence Band Energy Level');
model.result('pg1').feature('lngr4').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr4').set('expr', 'semi.Ev_e');
model.result('pg1').feature('lngr4').set('unit', 'eV');
model.result('pg1').feature('lngr4').set('linecolor', 'green');
model.result('pg1').feature('lngr4').set('legend', true);
model.result('pg1').feature('lngr4').set('legendmethod', 'manual');
model.result('pg1').feature('lngr4').set('legends', {'Ev'});
model.result('pg1').feature('lngr4').set('resolution', 'norefine');
model.result('pg1').feature('lngr4').set('smooth', 'everywhere');
model.result('pg1').feature('lngr4').set('showsolutionparams', 'on');
model.result('pg1').feature('lngr4').set('data', 'parent');
model.result('pg1').feature('lngr4').selection.geom('geom1', 1);
model.result('pg1').feature('lngr4').selection.set([1 2 3 4]);
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').label('Carrier Concentrations (semi)');
model.result('pg2').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg2').set('ylabel', 'Carrier concentration (1/cm^3)');
model.result('pg2').set('ylog', true);
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond1/pg3');
model.result('pg2').feature.create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').label('Electron Concentration');
model.result('pg2').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg2').feature('lngr1').set('expr', 'semi.N');
model.result('pg2').feature('lngr1').set('unit', '1/cm^3');
model.result('pg2').feature('lngr1').set('legend', true);
model.result('pg2').feature('lngr1').set('legendmethod', 'manual');
model.result('pg2').feature('lngr1').set('legends', {'electrons'});
model.result('pg2').feature('lngr1').set('resolution', 'norefine');
model.result('pg2').feature('lngr1').set('smooth', 'everywhere');
model.result('pg2').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg2').feature('lngr1').set('data', 'parent');
model.result('pg2').feature('lngr1').selection.geom('geom1', 1);
model.result('pg2').feature('lngr1').selection.set([1 2 3 4]);
model.result('pg2').feature.create('lngr2', 'LineGraph');
model.result('pg2').feature('lngr2').label('Hole Concentration');
model.result('pg2').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg2').feature('lngr2').set('expr', 'semi.P');
model.result('pg2').feature('lngr2').set('unit', '1/cm^3');
model.result('pg2').feature('lngr2').set('legend', true);
model.result('pg2').feature('lngr2').set('legendmethod', 'manual');
model.result('pg2').feature('lngr2').set('legends', {'holes'});
model.result('pg2').feature('lngr2').set('resolution', 'norefine');
model.result('pg2').feature('lngr2').set('smooth', 'everywhere');
model.result('pg2').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg2').feature('lngr2').set('data', 'parent');
model.result('pg2').feature('lngr2').selection.geom('geom1', 1);
model.result('pg2').feature('lngr2').selection.set([1 2 3 4]);
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').label('Electric Potential (semi)');
model.result('pg3').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg3').set('ylabel', 'Electric Potential (V)');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond1/pg4');
model.result('pg3').feature.create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg3').feature('lngr1').set('expr', 'V');
model.result('pg3').feature('lngr1').set('resolution', 'norefine');
model.result('pg3').feature('lngr1').set('smooth', 'everywhere');
model.result('pg3').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg3').feature('lngr1').set('data', 'parent');
model.result('pg3').feature('lngr1').selection.geom('geom1', 1);
model.result('pg3').feature('lngr1').selection.set([1 2 3 4]);
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').label('Quantum Potentials (semi)');
model.result('pg4').set('showlooplevelinput', {'off' 'off' 'off'});
model.result('pg4').set('data', 'dset1');
model.result('pg4').set('defaultPlotID', 'Semiconductor/phys3/pdef1/pcond1/pcond1/pg1');
model.result('pg4').feature.create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').label('Quantum Potential, Electron');
model.result('pg4').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg4').feature('lngr1').set('expr', 'semi.VnDG');
model.result('pg4').feature('lngr1').set('smooth', 'internal');
model.result('pg4').feature('lngr1').set('showsolutionparams', 'on');
model.result('pg4').feature('lngr1').set('data', 'parent');
model.result('pg4').feature('lngr1').selection.geom('geom1', 1);
model.result('pg4').feature('lngr1').selection.set([1 2 3 4]);
model.result('pg4').feature.create('lngr2', 'LineGraph');
model.result('pg4').feature('lngr2').label('Quantum Potential, Hole');
model.result('pg4').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg4').feature('lngr2').set('expr', 'semi.VpDG');
model.result('pg4').feature('lngr2').set('smooth', 'internal');
model.result('pg4').feature('lngr2').set('showsolutionparams', 'on');
model.result('pg4').feature('lngr2').set('data', 'parent');
model.result('pg4').feature('lngr2').selection.geom('geom1', 1);
model.result('pg4').feature('lngr2').selection.set([1 2 3 4]);
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').create('lngr2', 'LineGraph');
model.result('pg5').feature('lngr1').selection.all;
model.result('pg5').feature('lngr1').set('xdataexpr', 'X');
model.result('pg5').feature('lngr1').set('expr', 'semi.Nnetdop');
model.result('pg5').feature('lngr1').set('unit', '1/cm^3');
model.result('pg5').feature('lngr1').set('linecolor', 'red');
model.result('pg5').feature('lngr1').set('legend', true);
model.result('pg5').feature('lngr1').set('legendmethod', 'manual');
model.result('pg5').feature('lngr1').set('legends', {'P-type (Red)'});
model.result('pg5').feature('lngr1').feature.create('filt1', 'LineGraphFilter');
model.result('pg5').feature('lngr1').feature('filt1').set('expr', 'semi.Na-semi.Nd > 1[1/cm^3]');
model.result('pg5').feature('lngr2').selection.all;
model.result('pg5').feature('lngr2').set('xdataexpr', 'X');
model.result('pg5').feature('lngr2').set('expr', 'semi.Nnetdop');
model.result('pg5').feature('lngr2').set('unit', '1/cm^3');
model.result('pg5').feature('lngr2').set('linecolor', 'blue');
model.result('pg5').feature('lngr2').set('legend', true);
model.result('pg5').feature('lngr2').set('legendmethod', 'manual');
model.result('pg5').feature('lngr2').set('legends', {'N-type (Blue)'});
model.result('pg5').feature('lngr2').feature.create('filt1', 'LineGraphFilter');
model.result('pg5').feature('lngr2').feature('filt1').set('expr', 'semi.Nd-semi.Na > 1[1/cm^3]');
model.result('pg5').set('titletype', 'none');
model.result('pg5').set('legendpos', 'uppermiddle');
model.result('pg5').set('ylabel', 'Net Dopant Concentration \vert N<sub>d</sub> - N<sub>a</sub>\vert, 1/cm<sup>3</sup>');
model.result('pg5').set('ylog', true);
model.result('pg5').feature('lngr1').label('P-type');
model.result('pg5').feature('lngr2').label('N-type');
model.result('pg5').label('Net Dopant Concentration (semi)');
model.result('pg1').run;
model.result('pg5').run;
model.result.remove('pg5');
model.result('pg2').run;
model.result.duplicate('pg5', 'pg2');
model.result('pg5').run;
model.result('pg5').label('Electron Concentration Comparison');
model.result('pg5').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg5').setIndex('looplevelindices', '2 3', 0);
model.result('pg5').run;
model.result('pg5').feature.remove('lngr2');
model.result('pg5').run;
model.result('pg5').feature('lngr1').selection.set([1 2]);
model.result('pg5').feature('lngr1').label('Density-Gradient');
model.result('pg5').feature('lngr1').set('linestyle', 'dashed');
model.result('pg5').feature('lngr1').set('legendmethod', 'automatic');
model.result('pg5').feature('lngr1').set('legendprefix', 'DG ');
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg5').run;
model.result('pg5').set('axislimits', true);
model.result('pg5').set('xmin', -1);
model.result('pg5').set('xmax', 10);
model.result('pg5').set('ymin', '3e16');
model.result('pg5').set('ymax', '1e20');

model.physics.create('schr', 'SchrodingerEquation', 'geom1', {'psi'});

model.study('std1').feature('semie').setSolveFor('/physics/schr', false);

model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');

model.study('std1').feature('semie').setSolveFor('/physics/es', false);

model.multiphysics.create('schrp1', 'SchrodingerPoissonCoupling', 'geom1', 1);

model.study('std1').feature('semie').setSolveFor('/multiphysics/schrp1', false);

model.multiphysics('schrp1').set('Schr_physics', 'schr');
model.multiphysics('schrp1').set('ES_physics', 'es');
model.multiphysics('schrp1').selection.all;

model.param.create('par2');
model.param('par2').label(['Parameters for Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger-Poisson']);
model.param('par2').set('nv', '2');
model.param('par2').descr('nv', 'Valley degeneracy');
model.param('par2').set('fm3', '0.916');
model.param('par2').descr('fm3', 'Longitudinal effective mass factor');
model.param('par2').set('fm1', '0.190');
model.param('par2').descr('fm1', 'Transverse effective mass factor 1');
model.param('par2').set('fm2', '0.190');
model.param('par2').descr('fm2', 'Transverse effective mass factor 2');
model.param('par2').set('m3', 'fm3*me_const');
model.param('par2').descr('m3', 'Longitudinal effective mass');
model.param('par2').set('m1', 'fm1*me_const');
model.param('par2').descr('m1', 'Transverse effective mass 1');
model.param('par2').set('m2', 'fm2*me_const');
model.param('par2').descr('m2', 'Transverse effective mass 2');
model.param('par2').set('md', 'sqrt(m1*m2)');
model.param('par2').descr('md', 'Density of states effective mass');

model.physics('schr').selection.set([1 2 3]);
model.physics('es').selection.set([1 2 3]);
model.physics('schr').feature('meff1').set('meffe_psi', {'m3' '0' '0' '0' 'm3' '0' '0' '0' 'm3'});
model.physics('schr').feature('ve1').set('Ve_src', 'userdef');
model.physics('schr').feature('ve1').set('Ve', 0);
model.physics('schr').create('zprb1', 'ZeroProbability', 0);
model.physics('schr').feature('zprb1').selection.set([1]);
model.physics('es').create('scd1', 'SpaceChargeDensity', 1);
model.physics('es').feature('scd1').label('Space Charge Density 1: initial electron density');
model.physics('es').feature('scd1').selection.all;
model.physics('es').feature('scd1').set('rhoq', '-e_const*semi.N');
model.physics('es').feature.duplicate('scd2', 'scd1');
model.physics('es').feature('scd2').label('Space Charge Density 2: holes and ionized dopants');
model.physics('es').feature('scd2').set('rhoq', 'e_const*(semi.P+semi.Ndplus-semi.Naminus)');
model.physics('es').create('pot1', 'ElectricPotential', 0);
model.physics('es').feature('pot1').selection.set([4]);
model.physics('es').feature('pot1').set('V0', '-semi.Ec');
model.physics('es').create('df1', 'DisplacementField', 0);
model.physics('es').feature('df1').selection.set([1]);
model.physics('es').feature('df1').set('D0', {'epsilon0_const*epsrOx*(Vg-(Phi0-semi.chi_semi)-V2)/dOx' '0' '0'});

model.multiphysics('schrp1').set('minput_temperature', 'T0');
model.multiphysics('schrp1').set('Ef', 'e_const*withsol(''sol1'',semi.Ef_0,setval(Vg,Vg))');
model.multiphysics('schrp1').set('md', 'md');
model.multiphysics('schrp1').set('gi', 'nv');

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/semi', false);
model.study('std2').feature('stat').setSolveFor('/physics/schr', false);
model.study('std2').feature('stat').setSolveFor('/physics/es', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/schrp1', false);
model.study('std2').create('param', 'Parametric');
model.study('std2').feature('param').setIndex('pname', 'dOx', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'm', 0);
model.study('std2').feature('param').setIndex('pname', 'dOx', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'm', 0);
model.study('std2').feature('param').setIndex('pname', 'Vg', 0);
model.study('std2').feature('param').setIndex('plistarr', 0.2, 0);
model.study('std2').feature('param').setIndex('punit', 'V', 0);
model.study('std2').feature('stat').set('usesol', true);
model.study('std2').feature('stat').set('notsolmethod', 'sol');
model.study('std2').feature('stat').set('notstudy', 'std1');
model.study('std2').feature('stat').set('notsolnum', 2);
model.study('std2').label(['Study 2: Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger-Poisson Vg=0.2V']);
model.study('std2').setGenPlots(false);
model.study('std2').create('sdpo', 'SchrodingerPoisson');
model.study('std2').feature('sdpo').set('eigmethod', 'region');
model.study('std2').feature('sdpo').set('appnreigs', 100);
model.study('std2').feature('sdpo').set('maxnreigs', 300);
model.study('std2').feature('sdpo').set('eigunit', '');
model.study('std2').feature('sdpo').set('eigsr', -0.1);
model.study('std2').feature('sdpo').set('eiglr', 1);
model.study('std2').feature('sdpo').set('eigsi', '-1e-7');
model.study('std2').feature('sdpo').set('eigli', '1e-7');
model.study('std2').feature('sdpo').set('useadvanceddisable', true);
model.study('std2').feature('sdpo').set('disabledphysics', {'es/scd1'});
model.study('std2').feature('sdpo').set('method', 'minimization_of_global_variable');
model.study('std2').feature('sdpo').set('expr', 'schrp1.global_err');
model.study('std2').feature('sdpo').set('atolterm', '1e-6');
model.study('std2').feature('sdpo').set('useparam', true);
model.study('std2').feature('sdpo').setIndex('pname', 'dOx', 0);
model.study('std2').feature('sdpo').setIndex('plistarr', '', 0);
model.study('std2').feature('sdpo').setIndex('punit', 'm', 0);
model.study('std2').feature('sdpo').setIndex('pname', 'dOx', 0);
model.study('std2').feature('sdpo').setIndex('plistarr', '', 0);
model.study('std2').feature('sdpo').setIndex('punit', 'm', 0);
model.study('std2').feature('sdpo').setIndex('pname', 'nv', 0);
model.study('std2').feature('sdpo').setIndex('plistarr', '2 4', 0);
model.study('std2').feature('sdpo').setIndex('pname', 'dOx', 1);
model.study('std2').feature('sdpo').setIndex('plistarr', '', 1);
model.study('std2').feature('sdpo').setIndex('punit', 'm', 1);
model.study('std2').feature('sdpo').setIndex('pname', 'dOx', 1);
model.study('std2').feature('sdpo').setIndex('plistarr', '', 1);
model.study('std2').feature('sdpo').setIndex('punit', 'm', 1);
model.study('std2').feature('sdpo').setIndex('pname', 'fm3', 1);
model.study('std2').feature('sdpo').setIndex('plistarr', '0.916 0.190', 1);
model.study('std2').feature('sdpo').setIndex('pname', 'dOx', 2);
model.study('std2').feature('sdpo').setIndex('plistarr', '', 2);
model.study('std2').feature('sdpo').setIndex('punit', 'm', 2);
model.study('std2').feature('sdpo').setIndex('pname', 'dOx', 2);
model.study('std2').feature('sdpo').setIndex('plistarr', '', 2);
model.study('std2').feature('sdpo').setIndex('punit', 'm', 2);
model.study('std2').feature('sdpo').setIndex('pname', 'fm2', 2);
model.study('std2').feature('sdpo').setIndex('plistarr', '0.190 0.916', 2);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').create('st2', 'StudyStep');
model.sol('sol2').feature('st2').set('study', 'std2');
model.sol('sol2').feature('st2').set('studystep', 'sdpo');
model.sol('sol2').create('v2', 'Variables');
model.sol('sol2').feature('v2').set('initmethod', 'sol');
model.sol('sol2').feature('v2').set('initsol', 'sol2');
model.sol('sol2').feature('v2').set('initsoluse', 'sol3');
model.sol('sol2').feature('v2').set('notsolmethod', 'sol');
model.sol('sol2').feature('v2').set('notsol', 'sol2');
model.sol('sol2').feature('v2').set('control', 'sdpo');
model.sol('sol2').create('for1', 'For');
model.sol('sol2').feature('for1').set('control', 'sdpo');
model.sol('sol2').feature('for1').set('iter', '5');
model.sol('sol2').create('v3', 'Variables');
model.sol('sol2').feature('v3').set('initmethod', 'sol');
model.sol('sol2').feature('v3').set('initsol', 'sol2');
model.sol('sol2').feature('v3').set('initsoluse', 'sol3');
model.sol('sol2').feature('v3').set('notsolmethod', 'sol');
model.sol('sol2').feature('v3').set('notsol', 'sol2');
model.sol('sol2').feature('v3').set('control', 'user');
model.sol('sol2').feature('v3').set('notsolmethod', 'sol');
model.sol('sol2').feature('v3').set('notsol', 'sol2');
model.sol('sol2').feature('v3').feature('comp1_Efn_').set('solvefor', 'off');
model.sol('sol2').feature('v3').feature('comp1_Efp_').set('solvefor', 'off');
model.sol('sol2').feature('v3').feature('comp1_phi_n').set('solvefor', 'off');
model.sol('sol2').feature('v3').feature('comp1_phi_p').set('solvefor', 'off');
model.sol('sol2').feature('v3').feature('comp1_psi').set('solvefor', 'off');
model.sol('sol2').feature('v3').feature('comp1_schrp1_n_sum').set('solvefor', 'off');
model.sol('sol2').feature('v3').feature('comp1_schrp1_rhoq_old').set('solvefor', 'on');
model.sol('sol2').feature('v3').feature('comp1_schrp1_V_old').set('solvefor', 'on');
model.sol('sol2').feature('v3').feature('comp1_V').set('solvefor', 'off');
model.sol('sol2').feature('v3').feature('comp1_V2').set('solvefor', 'off');
model.sol('sol2').feature('v3').set('initmethod', 'init');
model.sol('sol2').feature('v3').set('initsol', 'sol2');
model.sol('sol2').feature('v3').set('initsoluse', 'current');
model.sol('sol2').feature('v3').label('Dependent Variables: Copy Electric Potential from Previous Iteration');
model.sol('sol2').create('su2', 'StoreSolution');
model.sol('sol2').feature('su2').label('Solution Store: Store Electric Potential from Previous Iteration');
model.sol('sol2').create('st3', 'StudyStep');
model.sol('sol2').feature('st3').set('studystep', 'sdpo');
model.sol('sol2').feature('st3').label(['Compile Equations 1: Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger-Poisson']);
model.sol('sol2').create('v4', 'Variables');
model.sol('sol2').feature('v4').set('initmethod', 'sol');
model.sol('sol2').feature('v4').set('initsol', 'sol2');
model.sol('sol2').feature('v4').set('initsoluse', 'sol3');
model.sol('sol2').feature('v4').set('notsolmethod', 'sol');
model.sol('sol2').feature('v4').set('notsol', 'sol2');
model.sol('sol2').feature('v4').set('control', 'user');
model.sol('sol2').feature('v4').set('notsolmethod', 'sol');
model.sol('sol2').feature('v4').set('notsol', 'sol2');
model.sol('sol2').feature('v4').set('initmethod', 'sol');
model.sol('sol2').feature('v4').set('initsol', 'sol2');
model.sol('sol2').feature('v4').feature('comp1_Efn_').set('solvefor', 'off');
model.sol('sol2').feature('v4').feature('comp1_Efp_').set('solvefor', 'off');
model.sol('sol2').feature('v4').feature('comp1_phi_n').set('solvefor', 'off');
model.sol('sol2').feature('v4').feature('comp1_phi_p').set('solvefor', 'off');
model.sol('sol2').feature('v4').feature('comp1_psi').set('solvefor', 'on');
model.sol('sol2').feature('v4').feature('comp1_schrp1_n_sum').set('solvefor', 'off');
model.sol('sol2').feature('v4').feature('comp1_schrp1_rhoq_old').set('solvefor', 'off');
model.sol('sol2').feature('v4').feature('comp1_schrp1_V_old').set('solvefor', 'off');
model.sol('sol2').feature('v4').feature('comp1_V').set('solvefor', 'off');
model.sol('sol2').feature('v4').feature('comp1_V2').set('solvefor', 'off');
model.sol('sol2').feature('v4').label('Dependent Variables 1: to Solve for Wave Function');
model.sol('sol2').feature('v4').set('initsoluse', 'current');
model.sol('sol2').create('e1', 'Eigenvalue');
model.sol('sol2').feature('e1').create('ep1', 'EigenvalueParam');
model.sol('sol2').feature('e1').feature('ep1').set('control', 'sdpo');
model.sol('sol2').feature('e1').set('neigs', 6);
model.sol('sol2').feature('e1').set('shift', '0');
model.sol('sol2').feature('e1').set('rtol', 1.0E-10);
model.sol('sol2').feature('e1').set('transform', 'none');
model.sol('sol2').feature('e1').set('eigref', '0.1');
model.sol('sol2').feature('e1').set('eigvfunscale', 'average');
model.sol('sol2').feature('e1').set('control', 'sdpo');
model.sol('sol2').feature('e1').label('Eigenvalue Solver 1: Solve for Wave Function');
model.sol('sol2').create('su3', 'StoreSolution');
model.sol('sol2').feature('su3').label('Solution Store: Store Wave Function');
model.sol('sol2').create('cms1', 'CombineSolution');
model.sol('sol2').feature('cms1').set('soloper', 'gensum');
model.sol('sol2').feature('cms1').set('cssol', 'current');
model.sol('sol2').feature('cms1').set('gensumexpressionactive', {'comp1_schrp1_n_sum' 'on'});
model.sol('sol2').feature('cms1').set('gensumexpression', {'comp1_schrp1_n_sum' 'comp1.schrp1.ni'});
model.sol('sol2').feature('cms1').label('Combine Solutions: Sum Particle Density');
model.sol('sol2').feature('cms1').set('control', 'sdpo');
model.sol('sol2').create('v5', 'Variables');
model.sol('sol2').feature('v5').set('initmethod', 'sol');
model.sol('sol2').feature('v5').set('initsol', 'sol2');
model.sol('sol2').feature('v5').set('initsoluse', 'sol3');
model.sol('sol2').feature('v5').set('notsolmethod', 'sol');
model.sol('sol2').feature('v5').set('notsol', 'sol2');
model.sol('sol2').feature('v5').set('control', 'user');
model.sol('sol2').feature('v5').set('notsolmethod', 'sol');
model.sol('sol2').feature('v5').set('notsol', 'sol2');
model.sol('sol2').feature('v5').set('initmethod', 'sol');
model.sol('sol2').feature('v5').set('initsol', 'sol2');
model.sol('sol2').feature('v5').feature('comp1_Efn_').set('solvefor', 'off');
model.sol('sol2').feature('v5').feature('comp1_Efp_').set('solvefor', 'off');
model.sol('sol2').feature('v5').feature('comp1_phi_n').set('solvefor', 'off');
model.sol('sol2').feature('v5').feature('comp1_phi_p').set('solvefor', 'off');
model.sol('sol2').feature('v5').feature('comp1_psi').set('solvefor', 'off');
model.sol('sol2').feature('v5').feature('comp1_schrp1_n_sum').set('solvefor', 'on');
model.sol('sol2').feature('v5').feature('comp1_schrp1_rhoq_old').set('solvefor', 'off');
model.sol('sol2').feature('v5').feature('comp1_schrp1_V_old').set('solvefor', 'off');
model.sol('sol2').feature('v5').feature('comp1_V').set('solvefor', 'off');
model.sol('sol2').feature('v5').feature('comp1_V2').set('solvefor', 'off');
model.sol('sol2').feature('v5').set('initsoluse', 'current');
model.sol('sol2').feature('v5').set('notsolmethod', 'sol');
model.sol('sol2').feature('v5').set('notsoluse', 'sol4');
model.sol('sol2').feature('v5').label('Dependent Variables: Collect Particle Density and Previous Electric Potential');
model.sol('sol2').create('st4', 'StudyStep');
model.sol('sol2').feature('st4').set('studystep', 'sdpo');
model.sol('sol2').feature('st4').label(['Compile Equations 2: Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger-Poisson']);
model.sol('sol2').create('v6', 'Variables');
model.sol('sol2').feature('v6').set('initmethod', 'sol');
model.sol('sol2').feature('v6').set('initsol', 'sol2');
model.sol('sol2').feature('v6').set('initsoluse', 'sol3');
model.sol('sol2').feature('v6').set('notsolmethod', 'sol');
model.sol('sol2').feature('v6').set('notsol', 'sol2');
model.sol('sol2').feature('v6').set('control', 'user');
model.sol('sol2').feature('v6').set('notsolmethod', 'sol');
model.sol('sol2').feature('v6').set('notsol', 'sol2');
model.sol('sol2').feature('v6').feature('comp1_Efn_').set('solvefor', 'off');
model.sol('sol2').feature('v6').feature('comp1_Efp_').set('solvefor', 'off');
model.sol('sol2').feature('v6').feature('comp1_phi_n').set('solvefor', 'off');
model.sol('sol2').feature('v6').feature('comp1_phi_p').set('solvefor', 'off');
model.sol('sol2').feature('v6').feature('comp1_psi').set('solvefor', 'off');
model.sol('sol2').feature('v6').feature('comp1_schrp1_n_sum').set('solvefor', 'off');
model.sol('sol2').feature('v6').feature('comp1_schrp1_rhoq_old').set('solvefor', 'off');
model.sol('sol2').feature('v6').feature('comp1_schrp1_V_old').set('solvefor', 'off');
model.sol('sol2').feature('v6').feature('comp1_V').set('solvefor', 'off');
model.sol('sol2').feature('v6').feature('comp1_V2').set('solvefor', 'on');
model.sol('sol2').feature('v6').set('initsoluse', 'current');
model.sol('sol2').feature('v6').set('initmethod', 'sol');
model.sol('sol2').feature('v6').set('initsol', 'sol2');
model.sol('sol2').feature('v6').label('Dependent Variables 2: to Solve for Electric Potential');
model.sol('sol2').create('s2', 'Stationary');
model.sol('sol2').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s2').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('s2').feature.remove('fcDef');
model.sol('sol2').feature('s2').label('Stationary Solver 2: Solve for Electric Potential');
model.sol('sol2').create('endfor1', 'EndFor');
model.sol('sol2').feature('v6').set('notsolnum', 'auto');
model.sol('sol2').feature('v6').set('notsolvertype', 'solnum');
model.sol('sol2').feature('v6').set('solnum', 'auto');
model.sol('sol2').feature('v6').set('solvertype', 'solnum');
model.sol('sol2').feature('v5').set('solnum', 'auto');
model.sol('sol2').feature('v5').set('solvertype', 'solnum');
model.sol('sol2').feature('v4').set('notsolnum', 'auto');
model.sol('sol2').feature('v4').set('notsolvertype', 'solnum');
model.sol('sol2').feature('v4').set('solnum', 'auto');
model.sol('sol2').feature('v4').set('solvertype', 'solnum');
model.sol('sol2').feature('v3').set('notsolnum', 'auto');
model.sol('sol2').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol2').feature('v3').set('solnum', 'auto');
model.sol('sol2').feature('v3').set('solvertype', 'solnum');
model.sol('sol2').feature('v2').set('notsolnum', 'auto');
model.sol('sol2').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol2').feature('v2').set('solnum', 'auto');
model.sol('sol2').feature('v2').set('solvertype', 'solnum');
model.sol('sol2').attach('std2');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std2');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol2');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'Vg'});
model.batch('p1').set('plistarr', {'0.2'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std2');
model.batch('p1').set('control', 'param');

model.sol.create('sol6');
model.sol('sol6').study('std2');
model.sol('sol6').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol6');
model.batch('p1').run('compute');

model.result('pg5').run;
model.result('pg5').feature.duplicate('lngr2', 'lngr1');
model.result('pg5').run;
model.result('pg5').feature('lngr2').set('data', 'dset2');
model.result('pg5').feature('lngr2').label(['Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger-Poisson Vg=0.2V']);
model.result('pg5').feature('lngr2').set('expr', 'schrp1.n_sum');
model.result('pg5').feature('lngr2').set('linestyle', 'solid');
model.result('pg5').feature('lngr2').set('legendmethod', 'manual');
model.result('pg5').feature('lngr2').setIndex('legends', 'SP 0.2 V', 0);
model.result('pg5').run;
model.result('pg5').feature.copy('lngr3', 'pg5/lngr2');
model.result('pg5').run;
model.result('pg5').run;

model.study.create('std3');
model.study('std3').feature.copy('param1', 'std2/param');
model.study('std3').feature.copy('stat1', 'std2/stat');
model.study('std3').feature.copy('sdpo1', 'std2/sdpo');
model.study('std3').label(['Study 3: Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger-Poisson Vg=1.0V']);
model.study('std3').setGenPlots(false);
model.study('std3').feature('param1').setIndex('plistarr', '1.0', 0);
model.study('std3').feature('stat1').set('notsolnum', 3);

model.sol.create('sol8');
model.sol('sol8').study('std3');
model.sol('sol8').create('st1', 'StudyStep');
model.sol('sol8').feature('st1').set('study', 'std3');
model.sol('sol8').feature('st1').set('studystep', 'stat1');
model.sol('sol8').create('v1', 'Variables');
model.sol('sol8').feature('v1').set('control', 'stat1');
model.sol('sol8').create('s1', 'Stationary');
model.sol('sol8').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol8').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol8').feature('s1').feature.remove('fcDef');
model.sol('sol8').create('su1', 'StoreSolution');
model.sol('sol8').create('st2', 'StudyStep');
model.sol('sol8').feature('st2').set('study', 'std3');
model.sol('sol8').feature('st2').set('studystep', 'sdpo1');
model.sol('sol8').create('v2', 'Variables');
model.sol('sol8').feature('v2').set('initmethod', 'sol');
model.sol('sol8').feature('v2').set('initsol', 'sol8');
model.sol('sol8').feature('v2').set('initsoluse', 'sol9');
model.sol('sol8').feature('v2').set('notsolmethod', 'sol');
model.sol('sol8').feature('v2').set('notsol', 'sol8');
model.sol('sol8').feature('v2').set('control', 'sdpo1');
model.sol('sol8').create('for1', 'For');
model.sol('sol8').feature('for1').set('control', 'sdpo1');
model.sol('sol8').feature('for1').set('iter', '5');
model.sol('sol8').create('v3', 'Variables');
model.sol('sol8').feature('v3').set('initmethod', 'sol');
model.sol('sol8').feature('v3').set('initsol', 'sol8');
model.sol('sol8').feature('v3').set('initsoluse', 'sol9');
model.sol('sol8').feature('v3').set('notsolmethod', 'sol');
model.sol('sol8').feature('v3').set('notsol', 'sol8');
model.sol('sol8').feature('v3').set('control', 'user');
model.sol('sol8').feature('v3').set('notsolmethod', 'sol');
model.sol('sol8').feature('v3').set('notsol', 'sol8');
model.sol('sol8').feature('v3').feature('comp1_Efn_').set('solvefor', 'off');
model.sol('sol8').feature('v3').feature('comp1_Efp_').set('solvefor', 'off');
model.sol('sol8').feature('v3').feature('comp1_phi_n').set('solvefor', 'off');
model.sol('sol8').feature('v3').feature('comp1_phi_p').set('solvefor', 'off');
model.sol('sol8').feature('v3').feature('comp1_psi').set('solvefor', 'off');
model.sol('sol8').feature('v3').feature('comp1_schrp1_n_sum').set('solvefor', 'off');
model.sol('sol8').feature('v3').feature('comp1_schrp1_rhoq_old').set('solvefor', 'on');
model.sol('sol8').feature('v3').feature('comp1_schrp1_V_old').set('solvefor', 'on');
model.sol('sol8').feature('v3').feature('comp1_V').set('solvefor', 'off');
model.sol('sol8').feature('v3').feature('comp1_V2').set('solvefor', 'off');
model.sol('sol8').feature('v3').set('initmethod', 'init');
model.sol('sol8').feature('v3').set('initsol', 'sol8');
model.sol('sol8').feature('v3').set('initsoluse', 'current');
model.sol('sol8').feature('v3').label('Dependent Variables: Copy Electric Potential from Previous Iteration');
model.sol('sol8').create('su2', 'StoreSolution');
model.sol('sol8').feature('su2').label('Solution Store: Store Electric Potential from Previous Iteration');
model.sol('sol8').create('st3', 'StudyStep');
model.sol('sol8').feature('st3').set('studystep', 'sdpo1');
model.sol('sol8').feature('st3').label(['Compile Equations 1: Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger-Poisson']);
model.sol('sol8').create('v4', 'Variables');
model.sol('sol8').feature('v4').set('initmethod', 'sol');
model.sol('sol8').feature('v4').set('initsol', 'sol8');
model.sol('sol8').feature('v4').set('initsoluse', 'sol9');
model.sol('sol8').feature('v4').set('notsolmethod', 'sol');
model.sol('sol8').feature('v4').set('notsol', 'sol8');
model.sol('sol8').feature('v4').set('control', 'user');
model.sol('sol8').feature('v4').set('notsolmethod', 'sol');
model.sol('sol8').feature('v4').set('notsol', 'sol8');
model.sol('sol8').feature('v4').set('initmethod', 'sol');
model.sol('sol8').feature('v4').set('initsol', 'sol8');
model.sol('sol8').feature('v4').feature('comp1_Efn_').set('solvefor', 'off');
model.sol('sol8').feature('v4').feature('comp1_Efp_').set('solvefor', 'off');
model.sol('sol8').feature('v4').feature('comp1_phi_n').set('solvefor', 'off');
model.sol('sol8').feature('v4').feature('comp1_phi_p').set('solvefor', 'off');
model.sol('sol8').feature('v4').feature('comp1_psi').set('solvefor', 'on');
model.sol('sol8').feature('v4').feature('comp1_schrp1_n_sum').set('solvefor', 'off');
model.sol('sol8').feature('v4').feature('comp1_schrp1_rhoq_old').set('solvefor', 'off');
model.sol('sol8').feature('v4').feature('comp1_schrp1_V_old').set('solvefor', 'off');
model.sol('sol8').feature('v4').feature('comp1_V').set('solvefor', 'off');
model.sol('sol8').feature('v4').feature('comp1_V2').set('solvefor', 'off');
model.sol('sol8').feature('v4').label('Dependent Variables 1: to Solve for Wave Function');
model.sol('sol8').feature('v4').set('initsoluse', 'current');
model.sol('sol8').create('e1', 'Eigenvalue');
model.sol('sol8').feature('e1').create('ep1', 'EigenvalueParam');
model.sol('sol8').feature('e1').feature('ep1').set('control', 'sdpo1');
model.sol('sol8').feature('e1').set('neigs', 6);
model.sol('sol8').feature('e1').set('shift', '0');
model.sol('sol8').feature('e1').set('rtol', 1.0E-10);
model.sol('sol8').feature('e1').set('transform', 'none');
model.sol('sol8').feature('e1').set('eigref', '0.1');
model.sol('sol8').feature('e1').set('eigvfunscale', 'average');
model.sol('sol8').feature('e1').set('control', 'sdpo1');
model.sol('sol8').feature('e1').label('Eigenvalue Solver 1: Solve for Wave Function');
model.sol('sol8').create('su3', 'StoreSolution');
model.sol('sol8').feature('su3').label('Solution Store: Store Wave Function');
model.sol('sol8').create('cms1', 'CombineSolution');
model.sol('sol8').feature('cms1').set('soloper', 'gensum');
model.sol('sol8').feature('cms1').set('cssol', 'current');
model.sol('sol8').feature('cms1').set('gensumexpressionactive', {'comp1_schrp1_n_sum' 'on'});
model.sol('sol8').feature('cms1').set('gensumexpression', {'comp1_schrp1_n_sum' 'comp1.schrp1.ni'});
model.sol('sol8').feature('cms1').label('Combine Solutions: Sum Particle Density');
model.sol('sol8').feature('cms1').set('control', 'sdpo1');
model.sol('sol8').create('v5', 'Variables');
model.sol('sol8').feature('v5').set('initmethod', 'sol');
model.sol('sol8').feature('v5').set('initsol', 'sol8');
model.sol('sol8').feature('v5').set('initsoluse', 'sol9');
model.sol('sol8').feature('v5').set('notsolmethod', 'sol');
model.sol('sol8').feature('v5').set('notsol', 'sol8');
model.sol('sol8').feature('v5').set('control', 'user');
model.sol('sol8').feature('v5').set('notsolmethod', 'sol');
model.sol('sol8').feature('v5').set('notsol', 'sol8');
model.sol('sol8').feature('v5').set('initmethod', 'sol');
model.sol('sol8').feature('v5').set('initsol', 'sol8');
model.sol('sol8').feature('v5').feature('comp1_Efn_').set('solvefor', 'off');
model.sol('sol8').feature('v5').feature('comp1_Efp_').set('solvefor', 'off');
model.sol('sol8').feature('v5').feature('comp1_phi_n').set('solvefor', 'off');
model.sol('sol8').feature('v5').feature('comp1_phi_p').set('solvefor', 'off');
model.sol('sol8').feature('v5').feature('comp1_psi').set('solvefor', 'off');
model.sol('sol8').feature('v5').feature('comp1_schrp1_n_sum').set('solvefor', 'on');
model.sol('sol8').feature('v5').feature('comp1_schrp1_rhoq_old').set('solvefor', 'off');
model.sol('sol8').feature('v5').feature('comp1_schrp1_V_old').set('solvefor', 'off');
model.sol('sol8').feature('v5').feature('comp1_V').set('solvefor', 'off');
model.sol('sol8').feature('v5').feature('comp1_V2').set('solvefor', 'off');
model.sol('sol8').feature('v5').set('initsoluse', 'current');
model.sol('sol8').feature('v5').set('notsolmethod', 'sol');
model.sol('sol8').feature('v5').set('notsoluse', 'sol10');
model.sol('sol8').feature('v5').label('Dependent Variables: Collect Particle Density and Previous Electric Potential');
model.sol('sol8').create('st4', 'StudyStep');
model.sol('sol8').feature('st4').set('studystep', 'sdpo1');
model.sol('sol8').feature('st4').label(['Compile Equations 2: Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger-Poisson']);
model.sol('sol8').create('v6', 'Variables');
model.sol('sol8').feature('v6').set('initmethod', 'sol');
model.sol('sol8').feature('v6').set('initsol', 'sol8');
model.sol('sol8').feature('v6').set('initsoluse', 'sol9');
model.sol('sol8').feature('v6').set('notsolmethod', 'sol');
model.sol('sol8').feature('v6').set('notsol', 'sol8');
model.sol('sol8').feature('v6').set('control', 'user');
model.sol('sol8').feature('v6').set('notsolmethod', 'sol');
model.sol('sol8').feature('v6').set('notsol', 'sol8');
model.sol('sol8').feature('v6').feature('comp1_Efn_').set('solvefor', 'off');
model.sol('sol8').feature('v6').feature('comp1_Efp_').set('solvefor', 'off');
model.sol('sol8').feature('v6').feature('comp1_phi_n').set('solvefor', 'off');
model.sol('sol8').feature('v6').feature('comp1_phi_p').set('solvefor', 'off');
model.sol('sol8').feature('v6').feature('comp1_psi').set('solvefor', 'off');
model.sol('sol8').feature('v6').feature('comp1_schrp1_n_sum').set('solvefor', 'off');
model.sol('sol8').feature('v6').feature('comp1_schrp1_rhoq_old').set('solvefor', 'off');
model.sol('sol8').feature('v6').feature('comp1_schrp1_V_old').set('solvefor', 'off');
model.sol('sol8').feature('v6').feature('comp1_V').set('solvefor', 'off');
model.sol('sol8').feature('v6').feature('comp1_V2').set('solvefor', 'on');
model.sol('sol8').feature('v6').set('initsoluse', 'current');
model.sol('sol8').feature('v6').set('initmethod', 'sol');
model.sol('sol8').feature('v6').set('initsol', 'sol8');
model.sol('sol8').feature('v6').label('Dependent Variables 2: to Solve for Electric Potential');
model.sol('sol8').create('s2', 'Stationary');
model.sol('sol8').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol8').feature('s2').feature('fc1').set('linsolver', 'dDef');
model.sol('sol8').feature('s2').feature.remove('fcDef');
model.sol('sol8').feature('s2').label('Stationary Solver 2: Solve for Electric Potential');
model.sol('sol8').create('endfor1', 'EndFor');
model.sol('sol8').feature('v6').set('notsolnum', 'auto');
model.sol('sol8').feature('v6').set('notsolvertype', 'solnum');
model.sol('sol8').feature('v6').set('solnum', 'auto');
model.sol('sol8').feature('v6').set('solvertype', 'solnum');
model.sol('sol8').feature('v5').set('solnum', 'auto');
model.sol('sol8').feature('v5').set('solvertype', 'solnum');
model.sol('sol8').feature('v4').set('notsolnum', 'auto');
model.sol('sol8').feature('v4').set('notsolvertype', 'solnum');
model.sol('sol8').feature('v4').set('solnum', 'auto');
model.sol('sol8').feature('v4').set('solvertype', 'solnum');
model.sol('sol8').feature('v3').set('notsolnum', 'auto');
model.sol('sol8').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol8').feature('v3').set('solnum', 'auto');
model.sol('sol8').feature('v3').set('solvertype', 'solnum');
model.sol('sol8').feature('v2').set('notsolnum', 'auto');
model.sol('sol8').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol8').feature('v2').set('solnum', 'auto');
model.sol('sol8').feature('v2').set('solvertype', 'solnum');
model.sol('sol8').attach('std3');

model.batch.create('p2', 'Parametric');
model.batch('p2').study('std3');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol8');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').set('pname', {'Vg'});
model.batch('p2').set('plistarr', {'1.0'});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std3');
model.batch('p2').set('control', 'param1');

model.sol.create('sol12');
model.sol('sol12').study('std3');
model.sol('sol12').label('Parametric Solutions 2');

model.batch('p2').feature('so1').set('psol', 'sol12');
model.batch('p2').run('compute');

model.result('pg5').run;
model.result('pg5').feature.duplicate('lngr4', 'lngr2');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('lngr3').label(['Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger-Poisson Vg=1.0V']);
model.result('pg5').feature('lngr3').set('data', 'dset7');
model.result('pg5').feature('lngr3').setIndex('legends', 'SP 1 V', 0);
model.result('pg5').run;
model.result('pg6').run;
model.result('pg6').feature.copy('lngr3', 'pg5/lngr3');
model.result('pg6').run;
model.result('pg6').run;

model.title(['Density-Gradient and Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Poisson Results for a Silicon Inversion Layer']);

model.description(['This tutorial demonstrates the use of the density-gradient formulation to include the effect of quantum confinement in the device physics simulation of a silicon inversion layer. This formulation requires only a moderate increase of computational resources as compared to the conventional drift-diffusion equation. Thus, it allows much speedier engineering investigation than other more sophisticated quantum-mechanical methods. The result of the density-gradient theory is compared with the solution of the Schr' native2unicode(hex2dec({'00' 'f6'}), 'unicode') 'dinger' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Poisson equation. The computed electron density profiles from both theories show the expected behavior of quantum confinement and both agree well with the published figures in the reference paper.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;

model.label('si_inversion_layer_density_gradient_and_schrodinger_poisson.mph');

model.modelNode.label('Components');

out = model;
