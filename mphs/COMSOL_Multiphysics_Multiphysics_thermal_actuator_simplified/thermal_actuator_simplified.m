function out = model
%
% thermal_actuator_simplified.m
%
% Model exported on May 26 2025, 21:27 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/COMSOL_Multiphysics/Multiphysics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ec', 'ConductiveMedia', 'geom1');
model.physics('ec').model('comp1');
model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.multiphysics.create('emh1', 'ElectromagneticHeating', 'geom1', 3);
model.multiphysics('emh1').set('EMHeat_physics', 'ec');
model.multiphysics('emh1').set('Heat_physics', 'ht');
model.multiphysics('emh1').selection.all;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/ec', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/emh1', true);

model.modelNode('comp1').label('Thermal Actuator');

model.param.set('d', '3[um]');
model.param.descr('d', 'Height of the hot arm');
model.param.set('dw', '15[um]');
model.param.descr('dw', 'Height of the cold arm');
model.param.set('gap', '3[um]');
model.param.descr('gap', 'Gap between arms');
model.param.set('wb', '10[um]');
model.param.descr('wb', 'Width of the base');
model.param.set('wv', '25[um]');
model.param.descr('wv', 'Difference in length between hot arms');
model.param.set('L', '240[um]');
model.param.descr('L', 'Actuator length');
model.param.set('L1', 'L-wb');
model.param.descr('L1', 'Length of the longest hot arm');
model.param.set('L2', 'L-wb-wv');
model.param.descr('L2', 'Length of the shortest hot arm');
model.param.set('L3', 'L-2*wb-wv-L/48-L/6');
model.param.descr('L3', 'Length of the cold arm, thick part');
model.param.set('L4', 'L/6');
model.param.descr('L4', 'Length of the cold arm, thin part');
model.param.set('htc_s', '0.04[W/(m*K)]/2[um]');
model.param.descr('htc_s', 'Heat transfer coefficient');
model.param.set('htc_us', '0.04[W/(m*K)]/100[um]');
model.param.descr('htc_us', 'Heat transfer coefficient, upper surface');
model.param.set('DV', '5[V]');
model.param.descr('DV', 'Applied voltage');
model.param.set('alphaps', '2.6e-6[1/K]');
model.param.descr('alphaps', 'Coefficient of thermal expansion');
model.param.set('T0', '293.15[K]');
model.param.descr('T0', 'Strain reference temperature');
model.param.set('noa', '3');
model.param.descr('noa', 'Number of arms');

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom1').create('if1', 'If');
model.geom('geom1').feature.createAfter('endif1', 'EndIf', 'if1');
model.geom('geom1').feature('if1').set('condition', '(noa==3)');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', {'L3' 'dw'});
model.geom('geom1').feature('wp1').geom.feature('r1').set('pos', {'L-L3' '0'});
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').feature('wp1').geom.create('r2', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r2').set('size', {'L4' 'd'});
model.geom('geom1').feature('wp1').geom.feature('r2').set('pos', {'L-L3-L4' 'dw-d'});
model.geom('geom1').feature('wp1').geom.run('r2');
model.geom('geom1').feature('wp1').geom.create('r3', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r3').set('size', {'wb' 'dw'});
model.geom('geom1').feature('wp1').geom.feature('r3').set('pos', {'L-L3-L4-wb' '0'});
model.geom('geom1').feature('wp1').geom.run('r3');
model.geom('geom1').feature('wp1').geom.create('r4', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r4').set('size', {'L2' 'd'});
model.geom('geom1').feature('wp1').geom.feature('r4').set('pos', {'L-L2' 'dw+gap'});
model.geom('geom1').feature('wp1').geom.run('r4');
model.geom('geom1').feature('wp1').geom.create('r5', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r5').set('size', {'wb' 'dw+gap+d'});
model.geom('geom1').feature('wp1').geom.feature('r5').set('pos', {'L-L2-wb' '0'});
model.geom('geom1').feature('wp1').geom.run('r5');
model.geom('geom1').feature('wp1').geom.create('r6', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r6').set('size', {'L1' 'd'});
model.geom('geom1').feature('wp1').geom.feature('r6').set('pos', {'L-L1' 'dw+d+2*gap'});
model.geom('geom1').feature('wp1').geom.run('r6');
model.geom('geom1').feature('wp1').geom.create('r7', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r7').set('size', {'wb' 'dw+gap+d'});
model.geom('geom1').feature('wp1').geom.feature('r7').set('pos', {'0' 'dw+d+2*gap'});
model.geom('geom1').feature('wp1').geom.run('r7');
model.geom('geom1').feature('wp1').geom.create('r8', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r8').set('size', {'d' 'gap'});
model.geom('geom1').feature('wp1').geom.feature('r8').set('pos', {'L-d' 'dw+gap+d'});
model.geom('geom1').feature('wp1').geom.run('r8');
model.geom('geom1').feature('wp1').geom.create('r9', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r9').set('size', {'d' 'gap'});
model.geom('geom1').feature('wp1').geom.feature('r9').set('pos', {'L-d' 'dw'});
model.geom('geom1').feature('wp1').geom.run('r9');
model.geom('geom1').feature('wp1').geom.create('uni1', 'Union');
model.geom('geom1').feature('wp1').geom.feature('uni1').selection('input').set({'r1' 'r2' 'r3' 'r4' 'r5' 'r6' 'r7' 'r8' 'r9'});
model.geom('geom1').feature('wp1').geom.feature('uni1').set('intbnd', false);
model.geom('geom1').feature('wp1').geom.run('uni1');
model.geom('geom1').feature('wp1').geom.create('fil1', 'Fillet');
model.geom('geom1').feature('wp1').geom.feature('fil1').selection('point').set('uni1', [1 2 4 5 6 7 8 9 11 12 13 14 16 17 19 20 21 22 23 28]);
model.geom('geom1').feature('wp1').geom.feature('fil1').set('radius', 'd/3');
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').setIndex('distance', 2, 0);
model.geom('geom1').run('ext1');
model.geom('geom1').create('wp2', 'WorkPlane');
model.geom('geom1').feature('wp2').set('unite', true);
model.geom('geom1').feature('wp2').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp2').geom.feature('r1').set('size', {'wb-2*d' '2.5*(wb-2*d)'});
model.geom('geom1').feature('wp2').geom.feature('r1').set('pos', {'d' '(dw+d+2*gap)+(dw+gap+d)-2.5*(wb-2*d)-d'});
model.geom('geom1').feature('wp2').geom.run('r1');
model.geom('geom1').feature('wp2').geom.create('r2', 'Rectangle');
model.geom('geom1').feature('wp2').geom.feature('r2').set('size', {'wb-2*d' '2.5*(wb-2*d)'});
model.geom('geom1').feature('wp2').geom.feature('r2').set('pos', {'L-L2-wb+d' 'd'});
model.geom('geom1').feature('wp2').geom.run('r2');
model.geom('geom1').feature('wp2').geom.create('r3', 'Rectangle');
model.geom('geom1').feature('wp2').geom.feature('r3').set('size', {'wb-2*d' '2.5*(wb-2*d)'});
model.geom('geom1').feature('wp2').geom.feature('r3').set('pos', {'L-L3-L4-wb+d' '0'});
model.geom('geom1').feature('wp2').geom.feature('r3').setIndex('pos', 'd', 1);
model.geom('geom1').feature('wp2').geom.run('r3');
model.geom('geom1').feature('wp2').geom.create('fil1', 'Fillet');
model.geom('geom1').feature('wp2').geom.feature('fil1').selection('pointinsketch').set('r1', [1 2 3 4]);
model.geom('geom1').feature('wp2').geom.feature('fil1').selection('pointinsketch').set('r2', [1 2 3 4]);
model.geom('geom1').feature('wp2').geom.feature('fil1').selection('pointinsketch').set('r3', [1 2 3 4]);
model.geom('geom1').feature('wp2').geom.feature('fil1').set('radius', 'd/3');
model.geom('geom1').feature('wp2').geom.run('fil1');
model.geom('geom1').feature('wp2').geom.create('c1', 'Circle');
model.geom('geom1').feature('wp2').geom.feature('c1').set('r', 'd/2');
model.geom('geom1').feature('wp2').geom.feature('c1').set('pos', {'L-L3/4' 'dw/2'});
model.geom('geom1').feature('wp2').geom.run('c1');
model.geom('geom1').feature('wp2').geom.create('c2', 'Circle');
model.geom('geom1').feature('wp2').geom.feature('c2').set('r', 'd/2');
model.geom('geom1').feature('wp2').geom.feature('c2').set('pos', {'L-L3/2' 'dw/2'});
model.geom('geom1').feature('wp2').geom.run('c2');
model.geom('geom1').feature('wp2').geom.create('c3', 'Circle');
model.geom('geom1').feature('wp2').geom.feature('c3').set('r', 'd/2');
model.geom('geom1').feature('wp2').geom.feature('c3').set('pos', {'L-3*L3/4' 'dw/2'});
model.geom('geom1').run('wp2');
model.geom('geom1').feature.create('ext2', 'Extrude');
model.geom('geom1').feature('ext2').setIndex('distance', 2, 0);
model.geom('geom1').feature('ext2').set('reverse', true);
model.geom('geom1').run('ext2');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'ext1' 'ext2'});
model.geom('geom1').feature('uni1').set('intbnd', false);
model.geom('geom1').run('uni1');
model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').selection('selection').init(2);
model.geom('geom1').feature('sel1').selection('selection').set('uni1', 10);
model.geom('geom1').feature('sel1').set('selkeep', false);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Ground');
model.geom('geom1').feature('sel1').set('contributeto', 'csel1');
model.geom('geom1').run('sel1');
model.geom('geom1').create('sel2', 'ExplicitSelection');
model.geom('geom1').feature('sel2').selection('selection').init(2);
model.geom('geom1').feature('sel2').selection('selection').set('uni1', 29);
model.geom('geom1').feature('sel2').set('selkeep', false);
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Applied Voltage');
model.geom('geom1').feature('sel2').set('contributeto', 'csel2');
model.geom('geom1').run('sel2');
model.geom('geom1').create('sel3', 'ExplicitSelection');
model.geom('geom1').feature('sel3').selection('selection').init(2);
model.geom('geom1').feature('sel3').selection('selection').set('uni1', 48);
model.geom('geom1').feature('sel3').set('selkeep', false);
model.geom('geom1').selection.create('csel3', 'CumulativeSelection');
model.geom('geom1').selection('csel3').label('Third');
model.geom('geom1').feature('sel3').set('contributeto', 'csel3');
model.geom('geom1').run('sel3');
model.geom('geom1').create('sel4', 'ExplicitSelection');
model.geom('geom1').feature('sel4').selection('selection').init(2);
model.geom('geom1').feature('sel4').selection('selection').set('uni1', 4);
model.geom('geom1').feature('sel4').set('selkeep', false);
model.geom('geom1').selection.create('csel4', 'CumulativeSelection');
model.geom('geom1').selection('csel4').label('Upper Surface');
model.geom('geom1').feature('sel4').set('contributeto', 'csel4');
model.geom('geom1').run('sel4');
model.geom('geom1').create('sel5', 'ExplicitSelection');
model.geom('geom1').feature('sel5').selection('selection').init(2);
model.geom('geom1').feature('sel5').selection('selection').set('uni1', [1 2 3 5 6 7 8 9 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92]);
model.geom('geom1').feature('sel5').set('selkeep', false);
model.geom('geom1').selection.create('csel5', 'CumulativeSelection');
model.geom('geom1').selection('csel5').label('Other Surface');
model.geom('geom1').feature('sel5').set('contributeto', 'csel5');
model.geom('geom1').run('sel5');
model.geom('geom1').create('sel6', 'ExplicitSelection');
model.geom('geom1').feature('sel6').selection('selection').init(0);
model.geom('geom1').feature('sel6').selection('selection').set('uni1', 154);
model.geom('geom1').feature('sel6').set('selkeep', false);
model.geom('geom1').selection.create('csel6', 'CumulativeSelection');
model.geom('geom1').selection('csel6').label('Tip');
model.geom('geom1').feature('sel6').set('contributeto', 'csel6');
model.geom('geom1').run('sel6');
model.geom('geom1').create('sel7', 'ExplicitSelection');
model.geom('geom1').feature('sel7').selection('selection').init(2);
model.geom('geom1').feature('sel7').selection('selection').set('uni1', [67 72 77]);
model.geom('geom1').feature('sel7').set('selkeep', false);
model.geom('geom1').selection.create('csel7', 'CumulativeSelection');
model.geom('geom1').selection('csel7').label('Dimples');
model.geom('geom1').feature('sel7').set('contributeto', 'csel7');
model.geom('geom1').run('endif1');

model.param.set('noa', '2');

model.geom('geom1').run('endif1');
model.geom('geom1').create('if2', 'If');
model.geom('geom1').feature.createAfter('endif2', 'EndIf', 'if2');
model.geom('geom1').feature('if2').set('condition', '(noa==2)');
model.geom('geom1').feature.duplicate('wp3', 'wp1');
model.geom('geom1').feature('wp3').geom.feature('r6').active(false);
model.geom('geom1').feature('wp3').geom.feature('r7').active(false);
model.geom('geom1').feature('wp3').geom.feature('r8').active(false);
model.geom('geom1').feature.duplicate('ext3', 'ext1');
model.geom('geom1').feature('ext3').set('workplane', 'wp3');
model.geom('geom1').runPre('ext3');
model.geom('geom1').feature('ext3').selection('input').set({'wp3'});
model.geom('geom1').run('ext3');
model.geom('geom1').feature.duplicate('wp4', 'wp2');
model.geom('geom1').feature('wp4').geom.feature('r1').active(false);
model.geom('geom1').feature.duplicate('ext4', 'ext2');
model.geom('geom1').feature('ext4').set('workplane', 'wp4');
model.geom('geom1').runPre('ext4');
model.geom('geom1').feature('ext4').selection('input').set({'wp4'});
model.geom('geom1').run('ext4');
model.geom('geom1').feature.duplicate('uni2', 'uni1');
model.geom('geom1').feature('uni2').selection('input').set({'ext3' 'ext4'});
model.geom('geom1').feature.duplicate('sel8', 'sel1');
model.geom('geom1').runPre('sel8');
model.geom('geom1').feature('sel8').selection('selection').set('uni2', 28);
model.geom('geom1').run('sel8');
model.geom('geom1').feature.duplicate('sel9', 'sel2');
model.geom('geom1').feature('sel9').selection('selection').set('uni2', 10);
model.geom('geom1').run('sel9');
model.geom('geom1').feature.duplicate('sel10', 'sel4');
model.geom('geom1').feature('sel10').selection('selection').set('uni2', 4);
model.geom('geom1').run('sel10');
model.geom('geom1').feature.duplicate('sel11', 'sel5');
model.geom('geom1').feature('sel11').selection('selection').set('uni2', [1 2 3 5 6 7 8 9 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66]);
model.geom('geom1').run('sel11');
model.geom('geom1').feature.duplicate('sel12', 'sel6');
model.geom('geom1').feature('sel12').selection('selection').set('uni2', 108);
model.geom('geom1').run('sel12');
model.geom('geom1').feature.duplicate('sel13', 'sel7');
model.geom('geom1').feature('sel13').selection('selection').set('uni2', [47 52 57]);
model.geom('geom1').run('sel13');
model.geom('geom1').run('fin');

model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').set('entitydim', 2);
model.selection('uni1').set('input', {'geom1_csel1_bnd' 'geom1_csel2_bnd' 'geom1_csel3_bnd'});
model.selection('uni1').label('Surface Contact');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('sigma', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('alpha', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Analytic');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat1').label('Polysilicon');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.7);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').func('sigma').set('expr', '1/(2e-5*(1+1.25e-3*(T-298.15)))');
model.material('mat1').propertyGroup('def').func('sigma').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('sigma').set('dermethod', 'manual');
model.material('mat1').propertyGroup('def').func('sigma').set('argders', {'T' 'd(1/(2e-5*(1+1.25e-3*(T-298.15))), T)'});
model.material('mat1').propertyGroup('def').func('sigma').set('fununit', 'S/m');
model.material('mat1').propertyGroup('def').func('sigma').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('sigma').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('sigma').set('plotargs', {'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('alpha').set('expr', '(3.725*(1-exp(-5.88e-3*(T-125)))+5.548e-4*T)*1e-6');
model.material('mat1').propertyGroup('def').func('alpha').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('alpha').set('dermethod', 'manual');
model.material('mat1').propertyGroup('def').func('alpha').set('argders', {'T' 'd((3.725*(1-exp(-5.88e-3*(T-125)))+5.548e-4*T)*1e-6, T)'});
model.material('mat1').propertyGroup('def').func('alpha').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('alpha').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('alpha').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('alpha').set('plotargs', {'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('expr', '1/(-2.2e-11*T^3 + 9e-8*T^2 - 1e-5*T + 0.014)');
model.material('mat1').propertyGroup('def').func('k').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('k').set('dermethod', 'manual');
model.material('mat1').propertyGroup('def').func('k').set('argders', {'T' 'd(1/(-2.2e-11*T^3 + 9e-8*T^2 - 1e-5*T + 0.014), T)'});
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('k').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('k').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('k').set('plotargs', {'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'sigma(T)' '0' '0' '0' 'sigma(T)' '0' '0' '0' 'sigma(T)'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha(T)' '0' '0' '0' 'alpha(T)' '0' '0' '0' 'alpha(T)'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '678[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'4.5' '0' '0' '0' '4.5' '0' '0' '0' '4.5'});
model.material('mat1').propertyGroup('def').set('density', '2320[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('Enu').set('E', '169[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.22');
model.material('mat1').propertyGroup('linzRes').set('rho0', '2e-5');
model.material('mat1').propertyGroup('linzRes').set('alpha', '1.25e-3');
model.material('mat1').propertyGroup('linzRes').set('Tref', '298.15[K]');
model.material('mat1').propertyGroup('linzRes').addInput('temperature');

model.physics('ec').create('pot1', 'ElectricPotential', 2);
model.physics('ec').feature('pot1').selection.named('geom1_csel2_bnd');
model.physics('ec').feature('pot1').set('V0', 'DV');
model.physics('ec').create('gnd1', 'Ground', 2);
model.physics('ec').feature('gnd1').selection.named('geom1_csel1_bnd');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 2);
model.physics('ht').feature('hf1').selection.named('geom1_csel5_bnd');
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 'htc_s');
model.physics('ht').create('hf2', 'HeatFluxBoundary', 2);
model.physics('ht').feature('hf2').selection.named('geom1_csel4_bnd');
model.physics('ht').feature('hf2').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf2').set('h', 'htc_us');
model.physics('ht').create('temp1', 'TemperatureBoundary', 2);
model.physics('ht').feature('temp1').selection.named('uni1');
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.named('uni1');
model.physics('solid').create('roll1', 'Roller', 2);
model.physics('solid').feature('roll1').selection.named('geom1_csel7_bnd');
model.physics('solid').feature('lemm1').featureInfo('info').set('solid.eXX', 0, {'uX-alphaps*(T-T0)'});
model.physics('solid').feature('lemm1').featureInfo('info').set('solid.eYY', 0, {'vY-alphaps*(T-T0)'});
model.physics('solid').feature('lemm1').featureInfo('info').set('solid.eZZ', 0, {'wZ-alphaps*(T-T0)'});

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V'});
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'cg');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('coarseningmethod', 'classic');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Electric Currents');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_T'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Temperature');
model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_u'});
model.sol('sol1').feature('s1').create('d2', 'Direct');
model.sol('sol1').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d2').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d2').label('Suggested Direct Solver (solid)');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'd2');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').label('Solid Mechanics');
model.sol('sol1').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('i3', 'Iterative');
model.sol('sol1').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i3').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i3').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i3').label('Suggested Iterative Solver (solid)');
model.sol('sol1').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Electric Potential (ec)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond2/pg1');
model.result('pg1').feature.create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('solutionparams', 'parent');
model.result('pg1').feature('vol1').set('colortable', 'Dipole');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Electric Field Norm (ec)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');
model.result('pg2').feature.create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('solutionparams', 'parent');
model.result('pg2').feature('mslc1').set('expr', 'ec.normE');
model.result('pg2').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('mslc1').set('xcoord', 'ec.CPx');
model.result('pg2').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('mslc1').set('ycoord', 'ec.CPy');
model.result('pg2').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('mslc1').set('zcoord', 'ec.CPz');
model.result('pg2').feature('mslc1').set('colortable', 'Prism');
model.result('pg2').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg2').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('data', 'parent');
model.result('pg2').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg2').feature('strmsl1').set('expr', {'ec.Ex' 'ec.Ey' 'ec.Ez'});
model.result('pg2').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('strmsl1').set('xcoord', 'ec.CPx');
model.result('pg2').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('strmsl1').set('ycoord', 'ec.CPy');
model.result('pg2').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('strmsl1').set('zcoord', 'ec.CPz');
model.result('pg2').feature('strmsl1').set('titletype', 'none');
model.result('pg2').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg2').feature('strmsl1').set('udist', 0.02);
model.result('pg2').feature('strmsl1').set('maxlen', 0.4);
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('inheritcolor', false);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('data', 'parent');
model.result('pg2').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg2').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg2').feature('strmsl1').feature('col1').set('expr', 'ec.normE');
model.result('pg2').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg2').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg2').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg2').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg2').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg2').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Temperature (ht)');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg3').feature.create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('showsolutionparams', 'on');
model.result('pg3').feature('vol1').set('solutionparams', 'parent');
model.result('pg3').feature('vol1').set('expr', 'T');
model.result('pg3').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg3').feature('vol1').set('smooth', 'internal');
model.result('pg3').feature('vol1').set('showsolutionparams', 'on');
model.result('pg3').feature('vol1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').set('defaultPlotID', 'stress');
model.result('pg4').label('Stress (solid)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').create('vol1', 'Volume');
model.result('pg4').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg4').feature('vol1').set('threshold', 'manual');
model.result('pg4').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg4').feature('vol1').set('colortable', 'Rainbow');
model.result('pg4').feature('vol1').set('colortabletrans', 'none');
model.result('pg4').feature('vol1').set('colorscalemode', 'linear');
model.result('pg4').feature('vol1').set('resolution', 'custom');
model.result('pg4').feature('vol1').set('refine', 2);
model.result('pg4').feature('vol1').set('colortable', 'Prism');
model.result('pg4').feature('vol1').create('def', 'Deform');
model.result('pg4').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg4').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result('pg1').run;
model.result.numerical.create('pev1', 'EvalPoint');
model.result.numerical('pev1').selection.named('geom1_csel6_pnt');
model.result.numerical('pev1').setIndex('expr', 'solid.disp', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Point Evaluation 1');
model.result.numerical('pev1').set('table', 'tbl1');
model.result.numerical('pev1').setResult;
model.result.numerical.create('max1', 'MaxVolume');
model.result.numerical('max1').selection.all;
model.result.numerical('max1').setIndex('expr', 'T', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Volume Maximum 1');
model.result.numerical('max1').set('table', 'tbl2');
model.result.numerical('max1').setResult;

model.view('view1').camera.set('zoomanglefull', 10.7);
model.view('view1').camera.setIndex('position', 1033, 0);
model.view('view1').camera.setIndex('position', -714, 1);
model.view('view1').camera.set('position', [1033 -714 -517]);
model.view('view1').camera.setIndex('up', -0.3, 0);
model.view('view1').camera.setIndex('up', 0.25, 1);
model.view('view1').camera.set('up', [-0.3 0.25 -0.9]);
model.view('view1').camera.setIndex('viewoffset', 0.0286, 0);
model.view('view1').camera.set('viewoffset', [0.0286 0.0256]);

model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('vol1').create('def1', 'Deform');
model.result('pg3').run;
model.result('pg3').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg3').feature('vol1').feature('def1').set('scale', 5);
model.result('pg3').run;

model.param.set('noa', '3');

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V'});
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'cg');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('coarseningmethod', 'classic');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Electric Currents');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_T'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Temperature');
model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_u'});
model.sol('sol1').feature('s1').create('d2', 'Direct');
model.sol('sol1').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d2').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d2').label('Suggested Direct Solver (solid)');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'd2');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').label('Solid Mechanics');
model.sol('sol1').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('i3', 'Iterative');
model.sol('sol1').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i3').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i3').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i3').label('Suggested Iterative Solver (solid)');
model.sol('sol1').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result('pg1').run;
model.result.numerical('pev1').set('table', 'tbl1');
model.result.numerical('pev1').appendResult;
model.result.numerical('max1').set('table', 'tbl2');
model.result.numerical('max1').appendResult;
model.result('pg3').run;

model.title('Thermal Microactuator Simplified');

model.description('This tutorial illustrates how to model electrothermal actuation of a microdevice. It uses the Joule Heating interface to simulate the heating of an actuator caused by an electric voltage applied to the device. Thermal expansion is manually added using the equation view. This example uses the programming operation in the geometry sequence to consider different geometry cases.');

model.label('thermal_actuator_simplified.mph');

model.modelNode.label('Components');

out = model;
