function out = model
%
% isfet.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Semiconductor_Module/Photonic_Devices_and_Sensors');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('semi', 'Semiconductor', 'geom1');
model.physics('semi').model('comp1');

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('Vd', '10[mV]', 'Drain voltage');
model.param.set('Vga', '0[V]', 'Gate voltage (applied)');
model.param.set('pHb', '3', 'pH of bulk electrolyte');
model.param.set('T0', '25[degC]', 'Temperature');
model.param.set('V_therm', 'R_const*T0/F_const', 'Thermal voltage');
model.param.set('WAg', '4.6[V]', 'Work function of Ag');
model.param.set('Eeq', '0.2[V]', 'Equilibrium potential of reference electrode');
model.param.set('DA', '1e-9[m^2/s]', 'Diffusion coefficient, cation');
model.param.set('DX', 'DA', 'Diffusion coefficient, anion');
model.param.set('DH', '36.3e-4[cm^2/V/s]*V_therm', 'Diffusion coefficient, H+');
model.param.set('DOH', '20.5e-4[cm^2/V/s]*V_therm', 'Diffusion coefficient, OH-');
model.param.set('c0', '0.1[M]', 'Concentration parameter');
model.param.set('cH_bulk', '10^-pHb[M]', 'Bulk H+ concentration');
model.param.set('cOH_bulk', '10^-14[M^2]/cH_bulk', 'Bulk OH- concentration');
model.param.set('cA_bulk', 'c0+cOH_bulk', 'Bulk cation concentration');
model.param.set('cX_bulk', 'c0+cH_bulk', 'Bulk anion concentration');
model.param.set('zA', '+1', 'Cation charge');
model.param.set('zX', '-1', 'Anion charge');
model.param.set('Istr_bulk', '0.5*(zA^2*cA_bulk+zX^2*cX_bulk+cOH_bulk+cH_bulk)', 'Bulk ionic strength');
model.param.set('eps_H2O', '78.5', 'Relative permittivity of water');
model.param.set('xD', 'sqrt(epsilon0_const*eps_H2O*V_therm/(2*F_const*Istr_bulk))', 'Debye length');
model.param.set('xS', '0.5[nm]', 'Stern layer thickness');
model.param.set('epsr_st', '11', 'Relative permittivity of Stern layer');
model.param.set('Ci_st', 'epsilon0_const*epsr_st/xS', 'Stern layer capacitance');
model.param.set('h_max', '0.1[um]', 'Maximum mesh element size (electrolyte domain)');
model.param.set('h_max_surf', '9.572087e-12[m]', 'Maximum mesh element size (oxide surface) ~xD/100');
model.param.set('Ka', '10^-6[M]', 'Equilibrium constant');
model.param.set('Kb', '100[M]', 'Equilibrium constant');
model.param.set('Ns', '5e14[1/cm^2]', 'Oxide surface binding site density');
model.param.set('phi2_aprx', '-0.01[V]', 'Potential at outer Helmholtz plane (control parameter for 1D approx.)');
model.param.set('rhos0_aprx', 'sqrt(8*R_const*T0*epsilon0_const*eps_H2O*c0)*sinh(phi2_aprx/V_therm/2)', 'Surface charge density (1D approx.)');
model.param.set('Psi0_aprx', 'phi2_aprx+rhos0_aprx/Ci_st', 'Potential at oxide surface (1D approx.)');
model.param.set('eNs', 'e_const*Ns', 'Help variable');
model.param.set('aHs_aprx', 'if(eNs^2>rhos0_aprx^2,(Kb*rhos0_aprx+sqrt((Kb*rhos0_aprx)^2+4*Ka*Kb*(eNs^2-rhos0_aprx^2)))/(2*(eNs-rhos0_aprx)),NaN[M])', 'Activity of adsorped H+ on oxide surface (1D approx.)');
model.param.set('pHb_aprx', '-log10(aHs_aprx/1[M]*exp(Psi0_aprx/V_therm))', 'pH of bulk electrolyte (1D approx.)');
model.param.set('ramp', '1', 'Continuation parameter');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', [3 0.7]);
model.geom('geom1').feature('r1').set('pos', [0 -0.7]);
model.geom('geom1').run('r1');
model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'table');
model.geom('geom1').feature('pol1').set('type', 'closed');
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('pol1').setIndex('table', -0.03, 0, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0.5, 2, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 2, 1);
model.geom('geom1').feature('pol1').setIndex('table', 2.5, 3, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 3, 1);
model.geom('geom1').feature('pol1').setIndex('table', 3, 4, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 4, 1);
model.geom('geom1').feature('pol1').setIndex('table', 3, 5, 0);
model.geom('geom1').feature('pol1').setIndex('table', -0.03, 5, 1);
model.geom('geom1').run('pol1');
model.geom('geom1').create('pol2', 'Polygon');
model.geom('geom1').feature('pol2').set('source', 'table');
model.geom('geom1').feature('pol2').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('pol2').setIndex('table', 1, 0, 1);
model.geom('geom1').feature('pol2').setIndex('table', 0.7, 1, 0);
model.geom('geom1').feature('pol2').setIndex('table', 0, 1, 1);
model.geom('geom1').feature('pol2').setIndex('table', 2.3, 2, 0);
model.geom('geom1').feature('pol2').setIndex('table', 0, 2, 1);
model.geom('geom1').feature('pol2').setIndex('table', 3, 3, 0);
model.geom('geom1').feature('pol2').setIndex('table', 1, 3, 1);
model.geom('geom1').run('pol2');
model.geom('geom1').create('pol3', 'Polygon');
model.geom('geom1').feature('pol3').set('source', 'table');
model.geom('geom1').feature('pol3').set('type', 'open');
model.geom('geom1').feature('pol3').setIndex('table', 1.5, 0, 0);
model.geom('geom1').feature('pol3').setIndex('table', 0, 0, 1);
model.geom('geom1').feature('pol3').setIndex('table', 1.5, 1, 0);
model.geom('geom1').feature('pol3').setIndex('table', 1, 1, 1);
model.geom('geom1').run('fin');
model.geom('geom1').create('mce1', 'MeshControlEdges');
model.geom('geom1').feature('mce1').selection('input').set('fin', 4);

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').label('Variables for applying specified gate voltage (Vg)');
model.variable('var1').set('phil_bulk_g', 'Vga-WAg-Eeq');
model.variable('var1').descr('phil_bulk_g', 'Bulk electrolyte potential');
model.variable.duplicate('var2', 'var1');
model.variable('var2').label('Variables for adjusting Vg to obtain specified drain current');
model.variable('var2').rename('phil_bulk_g', 'phil_bulk_d');
model.variable('var2').set('phil_bulk_d', 'Vg-WAg-Eeq');
model.variable.create('var3');
model.variable('var3').model('comp1');
model.variable('var3').label('Variables on oxide surface');
model.variable('var3').selection.geom('geom1', 1);
model.variable('var3').selection.set([7 9]);
model.variable('var3').set('aHs_g', 'cH_bulk*exp(-(phiM-phil_bulk_g)/V_therm)');
model.variable('var3').descr('aHs_g', 'Activity of H+');
model.variable('var3').set('rhos0_g', 'e_const*Ns*(aHs_g^2-Ka*Kb)/(Ka*Kb+Kb*aHs_g+aHs_g^2)');
model.variable('var3').descr('rhos0_g', 'Surface charge density');
model.variable('var3').set('aHs_d', 'cH_bulk*exp(-(phiM-phil_bulk_d)/V_therm)');
model.variable('var3').descr('aHs_d', 'Activity of H+');
model.variable('var3').set('rhos0_d', 'e_const*Ns*(aHs_d^2-Ka*Kb)/(Ka*Kb+Kb*aHs_d+aHs_d^2)');
model.variable('var3').descr('rhos0_d', 'Surface charge density');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('AroraMobilityModel', 'Arora mobility model');
model.material('mat1').propertyGroup.create('PowerLawMobilityModel', 'Power law mobility model');
model.material('mat1').propertyGroup.create('Auger', 'Auger recombination');
model.material('mat1').propertyGroup.create('Direct', 'Direct recombination');
model.material('mat1').propertyGroup.create('SRH', ['Shockley' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Read' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Hall recombination']);
model.material('mat1').propertyGroup.create('FletcherMobilityModel', 'Fletcher mobility model');
model.material('mat1').propertyGroup.create('CaugheyThomasMobilityModel', ['Caughey' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Thomas mobility model']);
model.material('mat1').propertyGroup.create('SemicondMaterial', 'Semiconductor material');
model.material('mat1').propertyGroup.create('LombardiSurfaceMobilityModel', 'Lombardi surface mobility model');
model.material('mat1').propertyGroup.create('ImpactIonization', 'Impact ionization');
model.material('mat1').propertyGroup.create('SlotboomModel', 'Slotboom model');
model.material('mat1').propertyGroup.create('JainRoulstonModel', ['Jain' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Roulston model']);
model.material('mat1').propertyGroup.create('KlaassenUnifiedMobilityModel', 'Klaassen unified mobility model');
model.material('mat1').label('Si - Silicon');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'11.7' '0' '0' '0' '11.7' '0' '0' '0' '11.7'});
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'131[W/(m*K)]' '0' '0' '0' '131[W/(m*K)]' '0' '0' '0' '131[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('density', '2329[kg/m^3]');
model.material('mat1').propertyGroup('def').set('heatcapacity', '700[J/(kg*K)]');
model.material('mat1').propertyGroup('AroraMobilityModel').set('mun0_ref_arora', '1252[cm^2/(V*s)]');
model.material('mat1').propertyGroup('AroraMobilityModel').set('mup0_ref_arora', '407[cm^2/(V*s)]');
model.material('mat1').propertyGroup('AroraMobilityModel').set('mun_min_ref_arora', '88[cm^2/(V*s)]');
model.material('mat1').propertyGroup('AroraMobilityModel').set('mup_min_ref_arora', '54.3[cm^2/(V*s)]');
model.material('mat1').propertyGroup('AroraMobilityModel').set('Nn0_ref_arora', '1.26e17[1/cm^3]');
model.material('mat1').propertyGroup('AroraMobilityModel').set('Np0_ref_arora', '2.35e17[1/cm^3]');
model.material('mat1').propertyGroup('AroraMobilityModel').set('alpha0_arora', '0.88');
model.material('mat1').propertyGroup('AroraMobilityModel').set('beta1_arora', '-0.57');
model.material('mat1').propertyGroup('AroraMobilityModel').set('beta2_arora', '-2.33');
model.material('mat1').propertyGroup('AroraMobilityModel').set('beta3_arora', '-2.33');
model.material('mat1').propertyGroup('AroraMobilityModel').set('beta4_arora', '-0.146');
model.material('mat1').propertyGroup('AroraMobilityModel').set('Tref_arora', '300[K]');
model.material('mat1').propertyGroup('PowerLawMobilityModel').set('mun0_pl', '1448[cm^2/(V*s)]');
model.material('mat1').propertyGroup('PowerLawMobilityModel').set('mup0_pl', '473[cm^2/(V*s)]');
model.material('mat1').propertyGroup('PowerLawMobilityModel').set('alphan_pl', '2.33');
model.material('mat1').propertyGroup('PowerLawMobilityModel').set('alphap_pl', '2.23');
model.material('mat1').propertyGroup('PowerLawMobilityModel').set('Tref_pl', '300[K]');
model.material('mat1').propertyGroup('Auger').set('Cn', '2.8e-31[cm^6/s]');
model.material('mat1').propertyGroup('Auger').set('Cp', '9.9e-32[cm^6/s]');
model.material('mat1').propertyGroup('Direct').set('C', '0[cm^3/s]');
model.material('mat1').propertyGroup('SRH').set('taun', '10[us]');
model.material('mat1').propertyGroup('SRH').set('taup', '10[us]');
model.material('mat1').propertyGroup('FletcherMobilityModel').set('F1_fl', '1.04e21[1/(cm^1*V*s)]');
model.material('mat1').propertyGroup('FletcherMobilityModel').set('F2_fl', '7.45e13[1/cm^2]');
model.material('mat1').propertyGroup('FletcherMobilityModel').set('Tref_fl', '300[K]');
model.material('mat1').propertyGroup('CaugheyThomasMobilityModel').label(['Caughey' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Thomas mobility model']);
model.material('mat1').propertyGroup('CaugheyThomasMobilityModel').set('alphan0_ct', '1.11');
model.material('mat1').propertyGroup('CaugheyThomasMobilityModel').set('alphap0_ct', '1.21');
model.material('mat1').propertyGroup('CaugheyThomasMobilityModel').set('vn0_ct', '1e7[cm/s]');
model.material('mat1').propertyGroup('CaugheyThomasMobilityModel').set('vp0_ct', '8.37e6[cm/s]');
model.material('mat1').propertyGroup('CaugheyThomasMobilityModel').set('betan1_ct', '0.66');
model.material('mat1').propertyGroup('CaugheyThomasMobilityModel').set('betap1_ct', '0.17');
model.material('mat1').propertyGroup('CaugheyThomasMobilityModel').set('betan2_ct', '-0.87');
model.material('mat1').propertyGroup('CaugheyThomasMobilityModel').set('betap2_ct', '-0.52');
model.material('mat1').propertyGroup('CaugheyThomasMobilityModel').set('Tref_ct', '300[K]');
model.material('mat1').propertyGroup('SemicondMaterial').set('Eg0', '1.12[V]');
model.material('mat1').propertyGroup('SemicondMaterial').set('chi0', '4.05[V]');
model.material('mat1').propertyGroup('SemicondMaterial').set('Nv', '(T/300[K])^(3/2)*1.04e19[1/cm^3]');
model.material('mat1').propertyGroup('SemicondMaterial').set('Nc', '(T/300[K])^(3/2)*2.8e19[1/cm^3]');
model.material('mat1').propertyGroup('SemicondMaterial').set('mun', '1450[cm^2/(V*s)]');
model.material('mat1').propertyGroup('SemicondMaterial').set('mup', '500[cm^2/(V*s)]');
model.material('mat1').propertyGroup('SemicondMaterial').addInput('temperature');
model.material('mat1').propertyGroup('LombardiSurfaceMobilityModel').set('deltan_ls', '5.82e14[V/s]');
model.material('mat1').propertyGroup('LombardiSurfaceMobilityModel').set('deltap_ls', '2.05e14[V/s]');
model.material('mat1').propertyGroup('LombardiSurfaceMobilityModel').set('mun1_ls', '4.75e7[cm^2/(V*s)]');
model.material('mat1').propertyGroup('LombardiSurfaceMobilityModel').set('mup1_ls', '9.93e7[cm^2/(V*s)]');
model.material('mat1').propertyGroup('LombardiSurfaceMobilityModel').set('mun2_ls', '1.74e5[cm^2/(V*s)]');
model.material('mat1').propertyGroup('LombardiSurfaceMobilityModel').set('mup2_ls', '8.84e5[cm^2/(V*s)]');
model.material('mat1').propertyGroup('LombardiSurfaceMobilityModel').set('alphan_ls', '0.125');
model.material('mat1').propertyGroup('LombardiSurfaceMobilityModel').set('alphap_ls', '0.0317');
model.material('mat1').propertyGroup('LombardiSurfaceMobilityModel').set('Tref_ls', '1[K]');
model.material('mat1').propertyGroup('LombardiSurfaceMobilityModel').set('Eref_ls', '1[V/cm]');
model.material('mat1').propertyGroup('LombardiSurfaceMobilityModel').set('Nref_ls', '1[1/cm^3]');
model.material('mat1').propertyGroup('ImpactIonization').set('an', '0.426');
model.material('mat1').propertyGroup('ImpactIonization').set('ap', '0.243');
model.material('mat1').propertyGroup('ImpactIonization').set('bn', '4.81E5[V/cm]');
model.material('mat1').propertyGroup('ImpactIonization').set('bp', '6.53E5[V/cm]');
model.material('mat1').propertyGroup('ImpactIonization').set('cnii', '3.05E-4');
model.material('mat1').propertyGroup('ImpactIonization').set('cpii', '5.35E-4');
model.material('mat1').propertyGroup('ImpactIonization').set('dn', '6.86E-4');
model.material('mat1').propertyGroup('ImpactIonization').set('dp', '5.67E-4');
model.material('mat1').propertyGroup('SlotboomModel').set('Eref_sb', '0.00692[V]');
model.material('mat1').propertyGroup('SlotboomModel').set('Nref_sb', '1.3e17[1/cm^3]');
model.material('mat1').propertyGroup('SlotboomModel').set('alpha_sb', '0.5');
model.material('mat1').propertyGroup('JainRoulstonModel').set('An_jr', '3.5e-8[V]');
model.material('mat1').propertyGroup('JainRoulstonModel').set('Bn_jr', '0[V]');
model.material('mat1').propertyGroup('JainRoulstonModel').set('Cn_jr', '0[V]');
model.material('mat1').propertyGroup('JainRoulstonModel').set('Ap_jr', '3.5e-8[V]');
model.material('mat1').propertyGroup('JainRoulstonModel').set('Bp_jr', '0[V]');
model.material('mat1').propertyGroup('JainRoulstonModel').set('Cp_jr', '0[V]');
model.material('mat1').propertyGroup('JainRoulstonModel').set('Nref_jr', '1[1/cm^3]');
model.material('mat1').propertyGroup('JainRoulstonModel').set('alpha_jr', '0.5');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('T_ref_kl', '300[K]');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('mu_e_max_kl', '1414.0[cm^2/V/s]');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('mu_h_max_kl', '470.5[cm^2/V/s]');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('mu_e_min_kl', '68.5[cm^2/V/s]');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('mu_h_min_kl', '44.9[cm^2/V/s]');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('theta_e_kl', '2.285');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('theta_h_kl', '2.247');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('alpha_e_1_kl', '0.711');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('alpha_h_1_kl', '0.719');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('N_ref_e_1_kl', '9.20e16[cm^-3]');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('N_ref_h_1_kl', '2.23e17[cm^-3]');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('c_D_kl', '0.21');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('c_A_kl', '0.50');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('N_ref_D_kl', '4.0e20[cm^-3]');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('N_ref_A_kl', '7.2e20[cm^-3]');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('f_BH_kl', '3.828');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('f_CW_kl', '2.459');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('N_BH_kl', '1.36e20[cm^-3]');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('P_CW_kl', '3.97e13');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('s_1_kl', '0.89233');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('s_2_kl', '0.41372');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('s_3_kl', '0.19778');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('s_4_kl', '0.28227');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('s_5_kl', '0.005978');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('s_6_kl', '1.80618');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('s_7_kl', '0.72169');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('r_1_kl', '0.7643');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('r_2_kl', '2.2999');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('r_3_kl', '6.5502');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('r_4_kl', '2.3670');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('r_5_kl', '-0.01552');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('r_6_kl', '0.6478');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('m_e_kl', 'me_const');
model.material('mat1').propertyGroup('KlaassenUnifiedMobilityModel').set('m_h_kl', '1.258*me_const');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Electrolyte');
model.material('mat2').selection.set([2 3]);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(2);
model.selection('sel1').label('Electrolyte domains');
model.selection('sel1').set([2 3]);

model.material('mat2').selection.named('sel1');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'eps_H2O'});

model.physics('semi').selection.set([1]);
model.physics('semi').prop('ModelProperties').set('CarrierStatistics', 'FermiDirac');
model.physics('semi').feature('smm1').set('minput_temperature', 'T0');
model.physics('semi').create('adm1', 'AnalyticDopingModel', 2);
model.physics('semi').feature('adm1').label('Uniform background doping');
model.physics('semi').feature('adm1').selection.set([1]);
model.physics('semi').feature('adm1').set('NAc', '1e17[1/cm^3]');
model.physics('semi').create('adm2', 'AnalyticDopingModel', 2);
model.physics('semi').feature('adm2').label('Source doping');
model.physics('semi').feature('adm2').selection.set([1]);
model.physics('semi').feature('adm2').set('impurityDistribution', 'box');
model.physics('semi').feature('adm2').set('impurityType', 'donor');
model.physics('semi').feature('adm2').set('NDc', '1e20[1/cm^3]');
model.physics('semi').feature('adm2').set('rb', {'0[um]' '-0.1[um]' '0'});
model.physics('semi').feature('adm2').set('jwidth', '0.6[um]');
model.physics('semi').feature('adm2').set('jdepth', '0.1[um]');
model.physics('semi').feature('adm2').set('AsymmetricJunctionDepth', true);
model.physics('semi').feature('adm2').set('jda', {'0.2[um]' '0.25[um]' '0'});
model.physics('semi').feature('adm2').set('Nb_src', 'root.comp1.semi.adm1.NAc');
model.physics('semi').feature.duplicate('adm3', 'adm2');
model.physics('semi').feature('adm3').label('Drain doping');
model.physics('semi').feature('adm3').set('rb', {'2.4[um]' '-0.1[um]' '0'});
model.physics('semi').create('tar1', 'TrapAssistedRecombination', 2);
model.physics('semi').feature('tar1').selection.set([1]);
model.physics('semi').create('mc1', 'MetalContact', 1);
model.physics('semi').feature('mc1').label('Source');
model.physics('semi').feature('mc1').selection.set([3]);
model.physics('semi').create('mc2', 'MetalContact', 1);
model.physics('semi').feature('mc2').label('Drain');
model.physics('semi').feature('mc2').selection.set([13]);
model.physics('semi').feature('mc2').set('V0', 'Vd');
model.physics('semi').create('mc3', 'MetalContact', 1);
model.physics('semi').feature('mc3').label('Body');
model.physics('semi').feature('mc3').selection.set([2]);
model.physics('semi').create('gc1', 'GateContact', 1);
model.physics('semi').feature('gc1').selection.set([7 9]);
model.physics('semi').feature('gc1').set('V0', 'phiM');
model.physics('semi').feature('gc1').set('epsilon_ins', 4.5);
model.physics('semi').feature('gc1').set('d_ins', '30[nm]');
model.physics('semi').feature('gc1').set('Phi', '0[V]');
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics('es').field('electricpotential').field('phil');
model.physics('es').selection.named('sel1');
model.physics.create('tds', 'DilutedSpecies', 'geom1', {'cA' 'cX' 'cH' 'cOH'});
model.physics('tds').selection.named('sel1');
model.physics.create('bode', 'BoundaryODE', 'geom1', {'phiM'});
model.physics('bode').prop('EquationForm').set('form', 'Automatic');
model.physics('bode').selection.set([7 9]);
model.physics.create('ge', 'GlobalEquations', 'geom1');
model.physics('ge').model('comp1');
model.physics('ge').prop('EquationForm').set('form', 'Automatic');
model.physics.create('ge2', 'GlobalEquations', 'geom1');
model.physics('ge2').model('comp1');
model.physics('ge2').prop('EquationForm').set('form', 'Automatic');
model.physics('es').label('Electrostatics (electrolyte)');
model.physics('es').prop('d').set('d', '1e-6[m]');
model.physics('tds').label('Transport of Diluted Species (electrolyte)');
model.physics('tds').prop('TransportMechanism').set('Convection', false);
model.physics('tds').prop('TransportMechanism').set('Migration', true);
model.physics('tds').prop('ShapeProperty').set('order_concentration', 2);
model.physics('bode').label('Boundary ODE for oxide surface potential phiM');
model.physics('bode').prop('Units').set('DependentVariableQuantity', 'electricpotential');
model.physics('bode').prop('Units').set('SourceTermQuantity', 'electricpotential');
model.physics('ge').label('Global ODE to copy specified Vg value');
model.physics('ge2').label('Global ODE to adjust Vg for specified drain current');

model.multiphysics.create('pc1', 'PotentialCoupling', 'geom1', 2);
model.multiphysics('pc1').selection.all;
model.multiphysics.create('scdc1', 'SpaceChargeDensityCoupling', 'geom1', 2);
model.multiphysics('scdc1').selection.all;

model.physics('es').create('pot1', 'ElectricPotential', 1);
model.physics('es').feature('pot1').selection.set([5 10]);
model.physics('es').feature('pot1').set('V0', 'phil_bulk_g');
model.physics('es').create('pot2', 'ElectricPotential', 1);
model.physics('es').feature('pot2').selection.set([5 10]);
model.physics('es').feature('pot2').set('V0', 'phil_bulk_d');
model.physics('es').create('df1', 'DisplacementField', 1);
model.physics('es').feature('df1').label('Electric Displacement Field from semiconductor side');
model.physics('es').feature('df1').selection.set([7 9]);
model.physics('es').feature('df1').set('D0', {'semi.nD_ins*semi.nX' 'semi.nD_ins*semi.nY' '0'});
model.physics('es').create('sfcd1', 'SurfaceChargeDensity', 1);
model.physics('es').feature('sfcd1').selection.set([7 9]);
model.physics('es').feature('sfcd1').set('rhoqs', 'rhos0_g');
model.physics('es').create('sfcd2', 'SurfaceChargeDensity', 1);
model.physics('es').feature('sfcd2').selection.set([7 9]);
model.physics('es').feature('sfcd2').set('rhoqs', 'rhos0_d');
model.physics('tds').feature('sp1').setIndex('z', 'zA', 0);
model.physics('tds').feature('sp1').setIndex('z', 'zX', 1);
model.physics('tds').feature('sp1').setIndex('z', 1, 2);
model.physics('tds').feature('sp1').setIndex('z', -1, 3);
model.physics('tds').feature('cdm1').set('minput_temperature_src', 'userdef');
model.physics('tds').feature('cdm1').set('minput_temperature', 'T0');
model.physics('tds').feature('cdm1').set('D_cA', {'DA' '0' '0' '0' 'DA' '0' '0' '0' 'DA'});
model.physics('tds').feature('cdm1').set('D_cX', {'DX' '0' '0' '0' 'DX' '0' '0' '0' 'DX'});
model.physics('tds').feature('cdm1').set('D_cH', {'DH' '0' '0' '0' 'DH' '0' '0' '0' 'DH'});
model.physics('tds').feature('cdm1').set('D_cOH', {'DOH' '0' '0' '0' 'DOH' '0' '0' '0' 'DOH'});
model.physics('tds').feature('init1').setIndex('initc', 'cA_bulk', 0);
model.physics('tds').feature('init1').setIndex('initc', 'cX_bulk', 1);
model.physics('tds').feature('init1').setIndex('initc', 'cH_bulk', 2);
model.physics('tds').feature('init1').setIndex('initc', 'cOH_bulk', 3);
model.physics('tds').create('conc1', 'Concentration', 1);
model.physics('tds').feature('conc1').selection.set([5 10]);
model.physics('tds').feature('conc1').setIndex('species', true, 0);
model.physics('tds').feature('conc1').setIndex('c0', 'cA_bulk', 0);
model.physics('tds').feature('conc1').setIndex('species', true, 1);
model.physics('tds').feature('conc1').setIndex('c0', 'cX_bulk', 1);
model.physics('tds').feature('conc1').setIndex('species', true, 2);
model.physics('tds').feature('conc1').setIndex('c0', 'cH_bulk', 2);
model.physics('tds').feature('conc1').setIndex('species', true, 3);
model.physics('tds').feature('conc1').setIndex('c0', 'cOH_bulk', 3);
model.physics('bode').feature('dode1').setIndex('f', 'phil+es.nD/Ci_st-phiM', 0);
model.physics('bode').feature('dode1').setIndex('da', 0, 0);
model.physics('bode').feature('init1').set('phiM', 'phil_bulk_g-0.01[V]');
model.physics('bode').feature.duplicate('init2', 'init1');
model.physics('bode').feature('init2').set('phiM', 'phil_bulk_d-0.01[V]');
model.physics('ge').feature('ge1').setIndex('name', 'Vg', 0, 0);
model.physics('ge').feature('ge1').setIndex('equation', '(Vg-Vga)/1[V]', 0, 0);
model.physics('ge').feature('ge1').set('DependentVariableQuantity', 'electricpotential');
model.physics('ge2').feature('ge1').set('DependentVariableQuantity', 'electricpotential');
model.physics('ge2').feature('ge1').setIndex('name', 'Vg', 0, 0);
model.physics('ge2').feature('ge1').setIndex('equation', 'semi.I0_2/18[uA]-1', 0, 0);

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'h_max');
model.mesh('mesh1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('size1').set('hgradactive', true);
model.mesh('mesh1').feature('size1').set('hgrad', 1.05);
model.mesh('mesh1').feature.remove('size2');
model.mesh('mesh1').feature.remove('size3');
model.mesh('mesh1').feature.remove('ftri1');
model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.set([3 6 7 9 11 13]);
model.mesh('mesh1').feature('edg1').set('smoothcontrol', false);
model.mesh('mesh1').feature('edg1').create('size1', 'Size');
model.mesh('mesh1').feature('edg1').feature('size1').set('table', 'semi');
model.mesh('mesh1').feature('edg1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('edg1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('edg1').feature('size1').set('hmax', 0.03);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([4]);
model.mesh('mesh1').feature('map1').set('smoothcontrol', false);
model.mesh('mesh1').feature('map1').set('adjustedgdistr', true);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([15]);
model.mesh('mesh1').feature('map1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis1').set('elemcount', 8);
model.mesh('mesh1').feature('map1').feature('dis1').set('elemratio', 9);
model.mesh('mesh1').feature('map1').feature('dis1').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map1').feature('dis1').set('reverse', true);
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').selection.set([1]);
model.mesh('mesh1').feature('ftri1').set('smoothcontrol', false);
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(2);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('bl1').selection.named('sel1');
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([7 9]);
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 20);
model.mesh('mesh1').feature('bl1').feature('blp').set('blstretch', 1.3);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', 'h_max_surf');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/semi', false);
model.study('std1').feature('stat').setSolveFor('/physics/es', true);
model.study('std1').feature('stat').setSolveFor('/physics/tds', true);
model.study('std1').feature('stat').setSolveFor('/physics/bode', true);
model.study('std1').feature('stat').setSolveFor('/physics/ge', false);
model.study('std1').feature('stat').setSolveFor('/physics/ge2', false);
model.study('std1').feature('stat').setSolveFor('/multiphysics/pc1', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/scdc1', true);
model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledvariables', {'var2'});
model.study('std1').feature('stat').set('disabledphysics', {'es/pot2' 'es/df1' 'es/sfcd2' 'bode/init2' 'ge2'});
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'Vd', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'V', 0);
model.study('std1').feature('stat').setIndex('pname', 'Vd', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'V', 0);
model.study('std1').feature('stat').setIndex('pname', 'pHb', 0);
model.study('std1').feature('stat').setIndex('plistarr', 'range(3,1,11)', 0);
model.study('std1').label('Electrolyte only');
model.study('std1').setGenPlots(false);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2 3]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').label('Direct (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, concentrations (tds)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.numerical.create('pev1', 'EvalPoint');
model.result.numerical('pev1').selection.set([6]);
model.result.numerical('pev1').setIndex('expr', 'phil-phil_bulk_g', 0);
model.result.numerical('pev1').setIndex('descr', 'Electrolyte potential to plug into 1D approximation formula', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Point Evaluation 1');
model.result.numerical('pev1').set('table', 'tbl1');
model.result.numerical('pev1').setResult;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/semi', false);
model.study('std2').feature('stat').setSolveFor('/physics/es', false);
model.study('std2').feature('stat').setSolveFor('/physics/tds', false);
model.study('std2').feature('stat').setSolveFor('/physics/bode', false);
model.study('std2').feature('stat').setSolveFor('/physics/ge', false);
model.study('std2').feature('stat').setSolveFor('/physics/ge2', false);
model.study('std2').feature('stat').setSolveFor('/multiphysics/pc1', false);
model.study('std2').feature('stat').setSolveFor('/multiphysics/scdc1', false);
model.study('std2').feature('stat').set('useadvanceddisable', true);
model.study('std2').feature('stat').set('disabledvariables', {'var2' 'var3'});
model.study('std2').feature('stat').set('disabledphysics', {'es/pot2' 'es/sfcd2' 'bode/init2' 'ge2'});
model.study('std2').feature('stat').set('useparam', true);
model.study('std2').feature('stat').setIndex('pname', 'Vd', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'V', 0);
model.study('std2').feature('stat').setIndex('pname', 'Vd', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'V', 0);
model.study('std2').feature('stat').setIndex('pname', 'phi2_aprx', 0);
model.study('std2').feature('stat').setIndex('plistarr', '-9.084249078E-4 -0.004637217778 -0.01188430850 -0.02083132004 -0.03018603909 -0.03930650544 -0.04789552279 -0.05583282929 -0.06297207279', 0);
model.study('std2').feature('stat').setIndex('punit', 'V', 0);
model.study('std2').label('1D approx for electrolyte only');
model.study('std2').setGenPlots(false);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol2').feature('s1').set('control', 'stat');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').label('phil: 2D Model vs. 1D Approx.');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Electrolyte potential (V) - solid curves: 2D model, dotted curves: 1D approx.');
model.result('pg1').create('lngr1', 'LineGraph');
model.result('pg1').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg1').feature('lngr1').set('linewidth', 'preference');
model.result('pg1').feature('lngr1').label('Line Graph: 2D model');
model.result('pg1').feature('lngr1').selection.set([8]);
model.result('pg1').feature('lngr1').set('expr', 'phil-phil_bulk_g');
model.result('pg1').feature('lngr1').set('xdata', 'expr');
model.result('pg1').feature('lngr1').set('xdataexpr', 'y');
model.result('pg1').feature.duplicate('lngr2', 'lngr1');
model.result('pg1').run;
model.result('pg1').feature('lngr2').label('Line Graph: 1D approx.');
model.result('pg1').feature('lngr2').set('data', 'dset2');
model.result('pg1').feature('lngr2').set('expr', 'phi2_aprx*exp(-y/xD)');
model.result('pg1').feature('lngr2').set('linestyle', 'dotted');
model.result('pg1').feature('lngr2').set('linewidth', 3);
model.result('pg1').set('xlog', true);
model.result('pg1').run;

model.study.create('std3');
model.study('std3').create('stat', 'Stationary');
model.study('std3').feature('stat').setSolveFor('/physics/semi', true);
model.study('std3').feature('stat').setSolveFor('/physics/es', false);
model.study('std3').feature('stat').setSolveFor('/physics/tds', false);
model.study('std3').feature('stat').setSolveFor('/physics/bode', false);
model.study('std3').feature('stat').setSolveFor('/physics/ge', false);
model.study('std3').feature('stat').setSolveFor('/physics/ge2', false);
model.study('std3').feature('stat').setSolveFor('/multiphysics/pc1', false);
model.study('std3').feature('stat').setSolveFor('/multiphysics/scdc1', false);
model.study('std3').feature('stat').set('useadvanceddisable', true);
model.study('std3').feature('stat').set('disabledvariables', {'var2'});
model.study('std3').feature('stat').set('disabledphysics', {'es/pot2' 'es/sfcd2' 'bode/init2' 'ge2'});
model.study('std3').feature('stat').set('usesol', true);
model.study('std3').feature('stat').set('notsolmethod', 'sol');
model.study('std3').feature('stat').set('notstudy', 'std1');
model.study('std3').feature('stat').set('notsolnum', 'first');
model.study('std3').feature('stat').set('useparam', true);
model.study('std3').feature('stat').setIndex('pname', 'Vd', 0);
model.study('std3').feature('stat').setIndex('plistarr', '', 0);
model.study('std3').feature('stat').setIndex('punit', 'V', 0);
model.study('std3').feature('stat').setIndex('pname', 'Vd', 0);
model.study('std3').feature('stat').setIndex('plistarr', '', 0);
model.study('std3').feature('stat').setIndex('punit', 'V', 0);
model.study('std3').feature('stat').setIndex('plistarr', '0 10', 0);
model.study('std3').feature('stat').setIndex('punit', 'mV', 0);
model.study('std3').label('Semiconductor only');
model.study('std3').setGenPlots(false);

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'stat');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'stat');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').set('stol', 1.0E-6);
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol3').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol3').feature('s1').set('control', 'stat');
model.sol('sol3').feature('s1').feature('aDef').set('complexfun', false);
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol3').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol3').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol3').feature('s1').feature('aDef').set('assemtol', 0);
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol3').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol3').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol3').feature('s1').feature('fc1').set('initstep', 0.1);
model.sol('sol3').feature('s1').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol3').feature('s1').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol3').feature('s1').feature('d1').set('mumpsalloc', 1.2);
model.sol('sol3').feature('s1').feature('d1').set('ooc', 'off');
model.sol('sol3').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol3').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol3').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol3').feature('s1').feature('fc1').set('initstep', 0.1);
model.sol('sol3').feature('s1').feature('fc1').set('minsteprecovery', 0.001);
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.study.create('std4');
model.study('std4').create('stat', 'Stationary');
model.study('std4').feature('stat').setSolveFor('/physics/semi', true);
model.study('std4').feature('stat').setSolveFor('/physics/es', true);
model.study('std4').feature('stat').setSolveFor('/physics/tds', true);
model.study('std4').feature('stat').setSolveFor('/physics/bode', true);
model.study('std4').feature('stat').setSolveFor('/physics/ge', false);
model.study('std4').feature('stat').setSolveFor('/physics/ge2', false);
model.study('std4').feature('stat').setSolveFor('/multiphysics/pc1', true);
model.study('std4').feature('stat').setSolveFor('/multiphysics/scdc1', true);
model.study('std4').feature('stat').set('useadvanceddisable', true);
model.study('std4').feature('stat').set('disabledvariables', {'var2'});
model.study('std4').feature('stat').set('disabledphysics', {'es/pot2' 'es/sfcd2' 'bode/init2' 'ge2'});
model.study('std4').feature('stat').set('useinitsol', true);
model.study('std4').feature('stat').set('initmethod', 'sol');
model.study('std4').feature('stat').set('initstudy', 'std3');
model.study('std4').feature('stat').set('solnum', 'last');
model.study('std4').feature('stat').set('useparam', true);
model.study('std4').feature('stat').setIndex('pname', 'Vd', 0);
model.study('std4').feature('stat').setIndex('plistarr', '', 0);
model.study('std4').feature('stat').setIndex('punit', 'V', 0);
model.study('std4').feature('stat').setIndex('pname', 'Vd', 0);
model.study('std4').feature('stat').setIndex('plistarr', '', 0);
model.study('std4').feature('stat').setIndex('punit', 'V', 0);
model.study('std4').feature('stat').setIndex('pname', 'Vga', 0);
model.study('std4').feature('stat').setIndex('plistarr', 'range(0,0.2,3)', 0);
model.study('std4').feature('stat').setIndex('punit', 'V', 0);
model.study('std4').label('Sweep Vg with constant pH');
model.study('std4').setGenPlots(false);

model.sol.create('sol4');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2 3]);

model.sol('sol4').study('std4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std4');
model.sol('sol4').feature('st1').set('studystep', 'stat');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'stat');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').set('stol', 1.0E-6);
model.sol('sol4').feature('s1').create('p1', 'Parametric');
model.sol('sol4').feature('s1').feature.remove('pDef');
model.sol('sol4').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol4').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol4').feature('s1').set('control', 'stat');
model.sol('sol4').feature('s1').feature('aDef').set('complexfun', false);
model.sol('sol4').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol4').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol4').feature('s1').feature('aDef').set('assemtol', 0);
model.sol('sol4').feature('s1').create('seDef', 'Segregated');
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol4').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol4').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol4').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol4').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol4').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol4').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol4').feature('s1').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol4').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s1').feature('d1').label('Direct (Merged)');
model.sol('sol4').feature('s1').create('i1', 'Iterative');
model.sol('sol4').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol4').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol4').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol4').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol4').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol4').feature('s1').feature('i1').label('AMG, concentrations (tds)');
model.sol('sol4').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol4').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol4').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol4').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol4').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol4').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol4').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol4').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').feature('s1').feature.remove('seDef');
model.sol('sol4').attach('std4');
model.sol('sol4').feature('s1').feature('d1').set('nliniterrefine', true);
model.sol('sol4').runAll;

model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Id vs. Vg');
model.result('pg2').set('data', 'dset4');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('linewidth', 'preference');
model.result('pg2').feature('glob1').set('expr', {'semi.I0_2'});
model.result('pg2').feature('glob1').set('descr', {'Terminal current'});
model.result('pg2').feature('glob1').set('unit', {'A'});
model.result('pg2').feature('glob1').setIndex('unit', 'uA', 0);
model.result('pg2').feature('glob1').setIndex('descr', 'Drain current', 0);
model.result('pg2').feature('glob1').set('legend', false);
model.result('pg2').run;

model.study.create('std5');
model.study('std5').label('Sweep pH and Vd with fixed Vg');
model.study('std5').setGenPlots(false);
model.study('std5').feature.copy('stat1', 'std4/stat');
model.study('std5').feature('stat1').setSolveFor('/physics/ge', true);
model.study('std5').feature('stat1').set('initstudy', 'std4');
model.study('std5').feature('stat1').set('solnum', 14);
model.study('std5').feature('stat1').set('sweeptype', 'filled');
model.study('std5').feature('stat1').setIndex('plistarr', 2.6, 0);
model.study('std5').feature('stat1').setIndex('pname', 'Vd', 1);
model.study('std5').feature('stat1').setIndex('plistarr', '', 1);
model.study('std5').feature('stat1').setIndex('punit', 'V', 1);
model.study('std5').feature('stat1').setIndex('pname', 'Vd', 1);
model.study('std5').feature('stat1').setIndex('plistarr', '', 1);
model.study('std5').feature('stat1').setIndex('punit', 'V', 1);
model.study('std5').feature('stat1').setIndex('pname', 'pHb', 1);
model.study('std5').feature('stat1').setIndex('plistarr', '3 7 11', 1);
model.study('std5').feature('stat1').setIndex('pname', 'Vd', 2);
model.study('std5').feature('stat1').setIndex('plistarr', '', 2);
model.study('std5').feature('stat1').setIndex('punit', 'V', 2);
model.study('std5').feature('stat1').setIndex('pname', 'Vd', 2);
model.study('std5').feature('stat1').setIndex('plistarr', '', 2);
model.study('std5').feature('stat1').setIndex('punit', 'V', 2);
model.study('std5').feature('stat1').setIndex('plistarr', 'range(0,0.2,1.2)^2', 2);
model.study('std5').feature('stat1').setIndex('punit', 'V', 2);
model.study('std5').feature('stat1').set('preusesol', 'auto');

model.sol.create('sol5');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2 3]);

model.sol('sol5').study('std5');
model.sol('sol5').create('st1', 'StudyStep');
model.sol('sol5').feature('st1').set('study', 'std5');
model.sol('sol5').feature('st1').set('studystep', 'stat1');
model.sol('sol5').create('v1', 'Variables');
model.sol('sol5').feature('v1').set('control', 'stat1');
model.sol('sol5').create('s1', 'Stationary');
model.sol('sol5').feature('s1').set('stol', 1.0E-6);
model.sol('sol5').feature('s1').create('p1', 'Parametric');
model.sol('sol5').feature('s1').feature.remove('pDef');
model.sol('sol5').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol5').feature('s1').feature('p1').set('control', 'stat1');
model.sol('sol5').feature('s1').set('control', 'stat1');
model.sol('sol5').feature('s1').feature('aDef').set('complexfun', false);
model.sol('sol5').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol5').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol5').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol5').feature('s1').feature('aDef').set('assemtol', 0);
model.sol('sol5').feature('s1').create('seDef', 'Segregated');
model.sol('sol5').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol5').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol5').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol5').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol5').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol5').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol5').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol5').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol5').feature('s1').create('d1', 'Direct');
model.sol('sol5').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol5').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol5').feature('s1').feature('d1').label('Direct (Merged)');
model.sol('sol5').feature('s1').create('i1', 'Iterative');
model.sol('sol5').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol5').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol5').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol5').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol5').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol5').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol5').feature('s1').feature('i1').label('AMG, concentrations (tds)');
model.sol('sol5').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol5').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol5').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol5').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol5').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol5').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol5').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol5').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol5').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol5').feature('s1').feature.remove('fcDef');
model.sol('sol5').feature('s1').feature.remove('seDef');
model.sol('sol5').attach('std5');
model.sol('sol5').feature('s1').feature('d1').set('nliniterrefine', true);
model.sol('sol5').runAll;

model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Id-Vd curves for 3 different pH values');
model.result('pg3').set('data', 'dset5');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').set('expr', {'semi.I0_2'});
model.result('pg3').feature('glob1').set('descr', {'Terminal current'});
model.result('pg3').feature('glob1').set('unit', {'A'});
model.result('pg3').feature('glob1').setIndex('unit', 'uA', 0);
model.result('pg3').feature('glob1').setIndex('descr', 'Drain current', 0);
model.result('pg3').feature('glob1').set('autodescr', false);
model.result('pg3').run;

model.study.create('std6');
model.study('std6').label('Sweep pH with fixed Id');
model.study('std6').setGenPlots(false);
model.study('std6').feature.copy('stat1', 'std5/stat1');
model.study('std6').feature('stat1').set('disabledvariables', {'var1'});
model.study('std6').feature('stat1').set('disabledphysics', {'ge2' 'es/pot1' 'es/sfcd1'});
model.study('std6').feature('stat1').setSolveFor('/physics/ge', false);
model.study('std6').feature('stat1').set('disabledphysics', {'ge2' 'es/pot1' 'es/sfcd1' 'ge'});
model.study('std6').feature('stat1').setSolveFor('/physics/ge2', true);
model.study('std6').feature('stat1').set('initstudy', 'std5');
model.study('std6').feature('stat1').set('solnum', 6);
model.study('std6').feature('stat1').remove('pname', 0);
model.study('std6').feature('stat1').remove('punit', 0);
model.study('std6').feature('stat1').remove('plistarr', [0]);
model.study('std6').feature('stat1').setIndex('plistarr', '3 5 7 9 11', 0);
model.study('std6').feature('stat1').move('pname', [0], 1);
model.study('std6').feature('stat1').move('plistarr', [0], 1);
model.study('std6').feature('stat1').move('punit', [0], 1);
model.study('std6').feature('stat1').setIndex('plistarr', 1, 0);
model.study('std6').feature('stat1').set('pcontinuationmode', 'no');
model.study('std6').feature('stat1').set('preusesol', 'yes');

model.sol.create('sol6');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2 3]);

model.sol('sol6').study('std6');
model.sol('sol6').create('st1', 'StudyStep');
model.sol('sol6').feature('st1').set('study', 'std6');
model.sol('sol6').feature('st1').set('studystep', 'stat1');
model.sol('sol6').create('v1', 'Variables');
model.sol('sol6').feature('v1').set('control', 'stat1');
model.sol('sol6').create('s1', 'Stationary');
model.sol('sol6').feature('s1').set('stol', 1.0E-6);
model.sol('sol6').feature('s1').create('p1', 'Parametric');
model.sol('sol6').feature('s1').feature.remove('pDef');
model.sol('sol6').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol6').feature('s1').feature('p1').set('control', 'stat1');
model.sol('sol6').feature('s1').set('control', 'stat1');
model.sol('sol6').feature('s1').feature('aDef').set('complexfun', false);
model.sol('sol6').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol6').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol6').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol6').feature('s1').feature('aDef').set('assemtol', 0);
model.sol('sol6').feature('s1').create('seDef', 'Segregated');
model.sol('sol6').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol6').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol6').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol6').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol6').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol6').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol6').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol6').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol6').feature('s1').create('d1', 'Direct');
model.sol('sol6').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol6').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol6').feature('s1').feature('d1').label('Direct (Merged)');
model.sol('sol6').feature('s1').create('i1', 'Iterative');
model.sol('sol6').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol6').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol6').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol6').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol6').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol6').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol6').feature('s1').feature('i1').label('AMG, concentrations (tds)');
model.sol('sol6').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol6').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol6').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol6').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol6').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol6').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol6').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol6').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol6').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol6').feature('s1').feature.remove('fcDef');
model.sol('sol6').feature('s1').feature.remove('seDef');
model.sol('sol6').attach('std6');
model.sol('sol6').feature('s1').feature('d1').set('nliniterrefine', true);
model.sol('sol6').runAll;

model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Vg vs. pH - sensitivity curve of the ISFET');
model.result('pg4').set('data', 'dset6');
model.result('pg4').set('showlegends', false);
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').setIndex('descr', 'Output V of pH sensor', 0);
model.result('pg4').feature('glob1').set('xdata', 'expr');
model.result('pg4').feature('glob1').set('xdataexpr', 'pHb');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').run;
model.result('pg5').set('data', 'dset6');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature.duplicate('surf2', 'surf1');
model.result('pg5').run;
model.result('pg5').feature('surf2').set('expr', 'V');
model.result('pg5').feature('surf2').set('resolution', 'norefine');
model.result('pg5').feature('surf2').set('inheritplot', 'surf1');
model.result('pg5').run;

model.title('Simulation of an Ion-Sensitive Field-Effect Transistor (ISFET)');

model.description(['An ion-sensitive field-effect transistor (ISFET) is constructed by replacing the gate contact of a MOSFET with an electrolyte of interest. The concentration of a specific ionic species in the electrolyte can be determined by measuring the change in the gate voltage due to the interaction between the ions and the gate dielectric.' newline  newline 'This tutorial of an ISFET pH sensor illustrates the procedure to set up the coupling between the semiconductor model and the electrolyte model. It also shows the technique of using a simple global equation to extract operating parameters, without the need to explicitly model the actual feedback circuitry.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;

model.label('isfet.mph');

model.modelNode.label('Components');

out = model;
