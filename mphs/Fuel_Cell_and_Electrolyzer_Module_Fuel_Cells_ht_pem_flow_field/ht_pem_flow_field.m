function out = model
%
% ht_pem_flow_field.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fuel_Cell_and_Electrolyzer_Module/Fuel_Cells');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('fc', 'HydrogenFuelCell', 'geom1');
model.physics('fc').model('comp1');
model.physics('fc').prop('H2GasMixture').set('H2O', '1');
model.physics('fc').prop('H2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('O2GasMixture').set('H2O', '1');
model.physics('fc').prop('O2GasMixture').set('N2', '1');
model.physics('fc').prop('O2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('ElectrolyteType', 'ProtonExchange');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('OperationMode', 'FuelCell');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('TRHE', '50[degC]');
model.physics.create('fp', 'FreeAndPorousMediaFlow', 'geom1');
model.physics('fp').model('comp1');

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/fc', true);
model.study('std1').feature('cdi').setSolveFor('/physics/fp', true);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/fc', true);
model.study('std1').feature('stat').setSolveFor('/physics/fp', true);

model.geom('geom1').insertFile('ht_pem_flow_field_geom_sequence.mph', 'geom1');
model.geom('geom1').run('difsel6');

model.param.label('Geometry Parameters');
model.param.create('par2');
model.param('par2').label('Physics Parameters');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('T', '180+273.15[K]', 'Cell temperature');
model.param('par2').set('eps_gdl', '0.4', 'GDL porosity');
model.param('par2').set('kappa_gdl', '1.18e-11[m^2]', 'GDL permeability');
model.param('par2').set('U_in', '2[m/s]', 'Inlet velocity');
model.param('par2').set('sigma_l', '9.825[S/m]', 'Electrolyte conductivity');
model.param('par2').set('sigma_gdl', '222[S/m]', 'GDL electronic conductivity');
model.param('par2').set('T_hum', '28[degC]', 'Humidification temperature of inlet gases');
model.param('par2').set('H_electrode', '50[um]', 'Electrode thickness');
model.param('par2').set('i0_H2_ref', '1e2[A/m^2]', 'Reference exchange current density, H2 oxidation');
model.param('par2').set('i0_O2_ref', '1e-3[A/m^2]', 'Reference exchange current density, O2 reduction');
model.param('par2').set('Av', '1e7[m^2/m^3]', 'Specific surface area');
model.param('par2').set('alpha_a_O2', '3', 'Anodic transfer coefficient, O2 reduction');
model.param('par2').set('alpha_a_H2', '0.5', 'Anodic transfer coefficient, H2 oxidation');
model.param('par2').set('E_cell', '1[V]', 'Cell voltage (varied in auxiliary sweep)');

model.multiphysics.create('rfo1', 'ReactingFlowO2GasPhase', 'geom1', 3);

model.physics('fc').prop('H2GasMixture').set('H2O', false);
model.physics('fc').create('mem1', 'Membrane', 3);
model.physics('fc').feature('mem1').selection.named('geom1_ext2_dom');
model.physics('fc').create('h2gdl1', 'H2GasDiffusionLayer', 3);
model.physics('fc').feature('h2gdl1').selection.named('geom1_intsel3');
model.physics('fc').feature('h2gdl1').set('sigmas', {'sigma_gdl' '0' '0' '0' 'sigma_gdl' '0' '0' '0' 'sigma_gdl'});
model.physics('fc').create('o2gdl1', 'O2GasDiffusionLayer', 3);
model.physics('fc').feature('o2gdl1').selection.named('geom1_intsel4');
model.physics('fc').feature('o2gdl1').set('sigmas', {'sigma_gdl' '0' '0' '0' 'sigma_gdl' '0' '0' '0' 'sigma_gdl'});
model.physics('fc').feature('o2gdl1').set('epsg', 'eps_gdl');
model.physics('fc').create('th2gde1', 'ThinH2GasDiffusionElectrode', 2);
model.physics('fc').feature('th2gde1').selection.named('geom1_boxsel8');
model.physics('fc').feature('th2gde1').set('d_gde', 'H_electrode');
model.physics('fc').feature('th2gde1').feature('th2gder1').set('i0_ref', 'i0_H2_ref');
model.physics('fc').feature('th2gde1').feature('th2gder1').set('alphaa', 'alpha_a_H2');
model.physics('fc').feature('th2gde1').feature('th2gder1').set('Av', 'Av');
model.physics('fc').create('to2gde1', 'ThinO2GasDiffusionElectrode', 2);
model.physics('fc').feature('to2gde1').selection.named('geom1_boxsel7');
model.physics('fc').feature('to2gde1').set('d_gde', 'H_electrode');
model.physics('fc').feature('to2gde1').feature('to2gder1').set('i0_ref', 'i0_O2_ref');
model.physics('fc').feature('to2gde1').feature('to2gder1').set('alphaa', 'alpha_a_O2');
model.physics('fc').feature('to2gde1').feature('to2gder1').set('Av', 'Av');
model.physics('fc').create('o2fch1', 'O2FlowChannel', 3);
model.physics('fc').feature('o2fch1').selection.named('geom1_intsel2');
model.physics('fc').feature('icph1').set('sigmal_mat', 'userdef');
model.physics('fc').feature('icph1').set('sigmal', {'sigma_l' '0' '0' '0' 'sigma_l' '0' '0' '0' 'sigma_l'});
model.physics('fc').feature('ecph1').create('egnd1', 'ElectricGround', 2);
model.physics('fc').feature('ecph1').feature('egnd1').selection.named('geom1_difsel5');
model.physics('fc').feature('ecph1').create('pot1', 'ElectricPotential', 2);
model.physics('fc').feature('ecph1').feature('pot1').selection.named('geom1_difsel2');
model.physics('fc').feature('ecph1').feature('pot1').set('phisbnd', 'E_cell');
model.physics('fc').feature('o2gasph1').create('o2in1', 'O2Inlet', 2);
model.physics('fc').feature('o2gasph1').feature('o2in1').selection.named('geom1_boxsel4');
model.physics('fc').feature('o2gasph1').create('o2out1', 'O2Outlet', 2);
model.physics('fc').feature('o2gasph1').feature('o2out1').selection.named('geom1_boxsel5');
model.physics('fc').feature('o2gasph1').feature('init1').set('MixtureSpecification', 'HumidifiedAir');
model.physics('fc').feature('o2gasph1').feature('init1').set('T_hum', 'T_hum');
model.physics('fp').selection.named('geom1_unisel1');
model.physics('fp').prop('PhysicalModelProperty').set('Compressibility', 'WeaklyCompressible');
model.physics('fp').create('porous1', 'PorousMedium', 3);
model.physics('fp').feature('porous1').selection.named('geom1_intsel4');
model.physics('fp').feature('porous1').feature('pm1').set('epsilon_p_mat', 'userdef');
model.physics('fp').feature('porous1').feature('pm1').set('epsilon_p', 'eps_gdl');
model.physics('fp').feature('porous1').feature('pm1').set('kappa_mat', 'userdef');
model.physics('fp').feature('porous1').feature('pm1').set('kappa', {'kappa_gdl' '0' '0' '0' 'kappa_gdl' '0' '0' '0' 'kappa_gdl'});
model.physics('fp').create('inl1', 'InletBoundary', 2);
model.physics('fp').feature('inl1').selection.named('geom1_boxsel4');
model.physics('fp').feature('inl1').set('BoundaryCondition', 'FullyDevelopedFlow');
model.physics('fp').feature('inl1').set('multipleInlets', false);
model.physics('fp').feature('inl1').set('Uavfdf', 'U_in');
model.physics('fp').create('out1', 'OutletBoundary', 2);
model.physics('fp').feature('out1').selection.named('geom1_boxsel5');
model.physics('fp').create('wallbc2', 'WallBC', 2);
model.physics('fp').feature('wallbc2').selection.named('geom1_difsel3');
model.physics('fp').feature('wallbc2').set('BoundaryCondition', 'Slip');

model.common('cminpt').set('modified', {'temperature' 'T'});

model.mesh('mesh1').autoMeshSize(3);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.named('geom1_intsel5');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.all;
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 4);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.named('geom1_boxsel1');
model.mesh('mesh1').feature('swe1').create('size1', 'Size');
model.mesh('mesh1').feature('swe1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmax', 'W_ch/1.1');
model.mesh('mesh1').run('swe1');
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.named('geom1_difsel1');
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', 'W_ch/2.1');
model.mesh('mesh1').run('ftet1');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(3);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('bl1').selection.named('geom1_ext1_dom');
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('geom1_difsel4');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 2);
model.mesh('mesh1').feature('bl1').feature('blp').set('blstretch', 1.5);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', 'W_ch/10');
model.mesh('mesh1').run('bl1');
model.mesh('mesh1').create('map2', 'Map');
model.mesh('mesh1').feature('map2').selection.named('geom1_intsel6');
model.mesh('mesh1').run('map2');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.named('geom1_difsel6');
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').create('bl2', 'BndLayer');
model.mesh('mesh1').feature('bl2').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('bl2').selection.named('geom1_difsel2');
model.mesh('mesh1').feature('bl2').feature('blp').selection.named('geom1_ext1_edg');
model.mesh('mesh1').feature('bl2').feature('blp').set('blnlayers', 2);
model.mesh('mesh1').feature('bl2').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl2').feature('blp').set('blhmin', 'W_rib/10');
model.mesh('mesh1').create('ftri2', 'FreeTri');
model.mesh('mesh1').feature('ftri2').selection.named('geom1_boxsel9');
model.mesh('mesh1').feature('ftri2').create('size1', 'Size');
model.mesh('mesh1').feature('ftri2').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri2').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri2').feature('size1').set('hmax', 'W_rib/1.2');
model.mesh('mesh1').run('ftri2');
model.mesh('mesh1').create('swe2', 'Sweep');
model.mesh('mesh1').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis1').selection.named('geom1_intsel4');
model.mesh('mesh1').feature('swe2').feature('dis1').set('numelem', 8);
model.mesh('mesh1').feature('swe2').create('dis2', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis2').selection.named('geom1_ext2_dom');
model.mesh('mesh1').feature('swe2').feature('dis2').set('numelem', 1);
model.mesh('mesh1').feature('swe2').create('dis3', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis3').selection.named('geom1_intsel3');
model.mesh('mesh1').feature('swe2').feature('dis3').set('numelem', 3);
model.mesh('mesh1').run('swe2');

model.study('std1').feature('stat').setEntry('activate', 'fc', false);
model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat2').set('useparam', true);
model.study('std1').feature('stat2').setIndex('pname', 'alpha_a_H2', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', '', 0);
model.study('std1').feature('stat2').setIndex('pname', 'alpha_a_H2', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', '', 0);
model.study('std1').feature('stat2').setIndex('pname', 'E_cell', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '0.9 0.7 0.5', 0);
model.study('std1').feature('stat2').setIndex('punit', 'V', 0);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 4]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 4]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, fluid flow variables (fp)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_fp_inl1_Pinlfdf'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_fp_inl1_Pinlfdf'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, fluid flow variables (fp)');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'stat2');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_wN2_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_O2').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_wN2_O2').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('initsoluse', 'sol3');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'stat2');
model.sol('sol1').create('s3', 'Stationary');
model.sol('sol1').feature('s3').set('stol', 1.0E-4);
model.sol('sol1').feature('s3').create('p1', 'Parametric');
model.sol('sol1').feature('s3').feature.remove('pDef');
model.sol('sol1').feature('s3').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s3').feature('p1').set('control', 'stat2');
model.sol('sol1').feature('s3').set('control', 'stat2');
model.sol('sol1').feature('s3').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s3').create('se1', 'Segregated');
model.sol('sol1').feature('s3').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s3').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s3').feature('se1').feature('ss1').set('segvar', {'comp1_fc_phil' 'comp1_fc_phis'});
model.sol('sol1').feature('s3').feature('se1').feature('ss1').set('subdtech', 'auto');
model.sol('sol1').feature('s3').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s3').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s3').feature('se1').feature('ss1').label('Hydrogen Fuel Cell, Potential Variables');
model.sol('sol1').feature('s3').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s3').feature('se1').feature('ss2').set('segvar', {'comp1_fc_wH2O_O2' 'comp1_fc_wN2_O2'});
model.sol('sol1').feature('s3').create('i1', 'Iterative');
model.sol('sol1').feature('s3').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s3').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('se1').feature('ss2').set('linsolver', 'i1');
model.sol('sol1').feature('s3').feature('se1').feature('ss2').label('Hydrogen Fuel Cell, Oxygen Gas Mixture');
model.sol('sol1').feature('s3').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s3').feature('se1').feature('ss3').set('segvar', {'comp1_p' 'comp1_u' 'comp1_fp_inl1_Pinlfdf'});
model.sol('sol1').feature('s3').feature('se1').feature('ss3').set('subdamp', 0.5);
model.sol('sol1').feature('s3').create('i2', 'Iterative');
model.sol('sol1').feature('s3').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s3').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s3').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i2').label('AMG, fluid flow variables (fp)');
model.sol('sol1').feature('s3').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_fp_inl1_Pinlfdf'});
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_fp_inl1_Pinlfdf'});
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('se1').feature('ss3').set('linsolver', 'i2');
model.sol('sol1').feature('s3').feature('se1').feature('ss3').label('Velocity u, Pressure p');
model.sol('sol1').feature('s3').feature('se1').set('maxsegiter', 200);
model.sol('sol1').feature('s3').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s3').feature('se1').set('subinitcfl', 5);
model.sol('sol1').feature('s3').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s3').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s3').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s3').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s3').create('i3', 'Iterative');
model.sol('sol1').feature('s3').feature('i3').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i3').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s3').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').create('d2', 'Direct');
model.sol('sol1').feature('s3').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('d2').label('Direct, fluid flow variables (fp)');
model.sol('sol1').feature('s3').feature.remove('fcDef');
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 3, 0);
model.result('pg1').label('Electrode Potential with Respect to Ground (fc)');
model.result('pg1').create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('expr', {'fc.phis'});
model.result('pg1').create('arwv1', 'ArrowVolume');
model.result('pg1').feature('arwv1').set('expr', {'fc.Isx' 'fc.Isy' 'fc.Isz'});
model.result('pg1').feature('arwv1').set('arrowbase', 'center');
model.result('pg1').feature('arwv1').set('color', 'gray');
model.result('pg1').feature('arwv1').create('filt1', 'Filter');
model.result('pg1').feature('arwv1').feature('filt1').set('expr', 'isdefined(root.comp1.fc.phis)');
model.result('pg1').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 3, 0);
model.result('pg2').label('Electrolyte Potential (fc)');
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('expr', {'fc.phil'});
model.result('pg2').create('arwv1', 'ArrowVolume');
model.result('pg2').feature('arwv1').set('expr', {'fc.Ilx' 'fc.Ily' 'fc.Ilz'});
model.result('pg2').feature('arwv1').set('arrowbase', 'center');
model.result('pg2').feature('arwv1').set('color', 'gray');
model.result('pg2').feature('arwv1').create('filt1', 'Filter');
model.result('pg2').feature('arwv1').feature('filt1').set('expr', 'isdefined(fc.phil)');
model.result('pg2').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 3, 0);
model.result('pg3').label('Mole Fraction, O2, Streamline (fc)');
model.result('pg3').set('titletype', 'custom');
model.result('pg3').set('typeintitle', true);
model.result('pg3').set('prefixintitle', 'Species O2:');
model.result('pg3').create('str1', 'Streamline');
model.result('pg3').feature('str1').set('expr', {'fc.tfluxO2x' 'fc.tfluxO2y' 'fc.tfluxO2z'});
model.result('pg3').feature('str1').set('posmethod', 'start');
model.result('pg3').feature('str1').set('pointtype', 'arrow');
model.result('pg3').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('str1').set('color', 'gray');
model.result('pg3').feature('str1').create('col', 'Color');
model.result('pg3').feature('str1').feature('col').set('expr', 'fc.xO2');
model.result('pg3').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 3, 0);
model.result('pg4').label('Mole Fraction, O2, Surface (fc)');
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('prefixintitle', 'Species O2:');
model.result('pg4').set('expressionintitle', false);
model.result('pg4').set('typeintitle', false);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'fc.xO2'});
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 3, 0);
model.result('pg5').label('Mole Fraction, H2O, Streamline (fc)');
model.result('pg5').set('titletype', 'custom');
model.result('pg5').set('typeintitle', true);
model.result('pg5').set('prefixintitle', 'Species H2O:');
model.result('pg5').create('str1', 'Streamline');
model.result('pg5').feature('str1').set('expr', {'fc.tfluxH2Ox' 'fc.tfluxH2Oy' 'fc.tfluxH2Oz'});
model.result('pg5').feature('str1').set('posmethod', 'start');
model.result('pg5').feature('str1').set('pointtype', 'arrow');
model.result('pg5').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('str1').set('color', 'gray');
model.result('pg5').feature('str1').create('col', 'Color');
model.result('pg5').feature('str1').feature('col').set('expr', 'fc.xH2O');
model.result('pg5').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 3, 0);
model.result('pg6').label('Mole Fraction, H2O, Surface (fc)');
model.result('pg6').set('titletype', 'custom');
model.result('pg6').set('prefixintitle', 'Species H2O:');
model.result('pg6').set('expressionintitle', false);
model.result('pg6').set('typeintitle', false);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'fc.xH2O'});
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 3, 0);
model.result('pg7').label('Mole Fraction, N2, Streamline (fc)');
model.result('pg7').set('titletype', 'custom');
model.result('pg7').set('typeintitle', true);
model.result('pg7').set('prefixintitle', 'Species N2:');
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('expr', {'fc.tfluxN2x' 'fc.tfluxN2y' 'fc.tfluxN2z'});
model.result('pg7').feature('str1').set('posmethod', 'start');
model.result('pg7').feature('str1').set('pointtype', 'arrow');
model.result('pg7').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg7').feature('str1').set('color', 'gray');
model.result('pg7').feature('str1').create('col', 'Color');
model.result('pg7').feature('str1').feature('col').set('expr', 'fc.xN2');
model.result('pg7').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'dset1');
model.result('pg8').setIndex('looplevel', 3, 0);
model.result('pg8').label('Mole Fraction, N2, Surface (fc)');
model.result('pg8').set('titletype', 'custom');
model.result('pg8').set('prefixintitle', 'Species N2:');
model.result('pg8').set('expressionintitle', false);
model.result('pg8').set('typeintitle', false);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'fc.xN2'});
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').label('Velocity (fp)');
model.result('pg9').set('frametype', 'spatial');
model.result('pg9').set('data', 'dset1');
model.result('pg9').setIndex('looplevel', 3, 0);
model.result('pg9').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg9').feature.create('slc1', 'Slice');
model.result('pg9').feature('slc1').label('Slice');
model.result('pg9').feature('slc1').set('showsolutionparams', 'on');
model.result('pg9').feature('slc1').set('expr', 'fp.U');
model.result('pg9').feature('slc1').set('smooth', 'internal');
model.result('pg9').feature('slc1').set('showsolutionparams', 'on');
model.result('pg9').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([33 34 35 36 38 40 41 42 44 46 47 48 50 52 53 54 55 56 58 59 60 61 62 65 66 69 70 71 72 73 74 75 76 77 78 79 80 81 82 85 86 89 90 91 92 93 94 95 96 97 98 99 100 101 102 105 106 109 110 111 112 113 114 115 116 117 118 119 120 121 122 124 125 128 129 131 132 133 134 135 136 137 138 139 140 141 142 144 145 148 149 151 152 153 154 155 156 157 158 159 160 161 162 164 165 168 169 171 172 173 174 175 176 177 178 180]);
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').label('Pressure (fp)');
model.result('pg10').set('data', 'surf1');
model.result('pg10').setIndex('looplevel', 3, 0);
model.result('pg10').set('frametype', 'spatial');
model.result('pg10').set('data', 'surf1');
model.result('pg10').setIndex('looplevel', 3, 0);
model.result('pg10').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond2/pcond1/pg4');
model.result('pg10').feature.create('surf1', 'Surface');
model.result('pg10').feature('surf1').label('Surface');
model.result('pg10').feature('surf1').set('showsolutionparams', 'on');
model.result('pg10').feature('surf1').set('expr', 'p');
model.result('pg10').feature('surf1').set('colortable', 'Dipole');
model.result('pg10').feature('surf1').set('smooth', 'internal');
model.result('pg10').feature('surf1').set('showsolutionparams', 'on');
model.result('pg10').feature('surf1').set('data', 'parent');
model.result('pg10').feature('surf1').feature.create('tran1', 'Transparency');
model.result('pg1').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 2, 0);
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 3, 0);
model.result('pg4').run;
model.result('pg9').run;
model.result('pg9').label('Channel Velocity');
model.result('pg9').run;
model.result('pg9').feature('slc1').set('quickplane', 'xy');
model.result('pg9').feature('slc1').set('quickzmethod', 'coord');
model.result('pg9').feature('slc1').set('quickz', 'H_mem/2+H_gdl+H_ch/2');
model.result('pg9').run;
model.result('pg9').run;
model.result.duplicate('pg11', 'pg9');
model.result('pg11').run;
model.result('pg11').label('GDL Velocity');
model.result('pg11').run;
model.result('pg11').feature('slc1').set('quickz', 'H_mem/2+H_gdl/2');
model.result('pg11').run;
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').run;
model.result('pg12').label('O2 GDE Current Density');
model.result('pg12').create('surf1', 'Surface');
model.result('pg12').feature('surf1').set('expr', 'fc.nIl');
model.result('pg12').feature('surf1').set('descr', 'Normal electrolyte current density');
model.result('pg12').feature('surf1').set('unit', 'A/cm^2');
model.result('pg12').feature('surf1').create('sel1', 'Selection');
model.result('pg12').feature('surf1').feature('sel1').selection.named('geom1_boxsel7');
model.result('pg12').run;
model.result('pg12').setIndex('looplevel', 2, 0);
model.result('pg12').set('edges', false);
model.result('pg12').run;
model.result('pg12').setIndex('looplevel', 3, 0);
model.result('pg12').run;

model.title('High Temperature PEM Fuel Cell with Serpentine Flow Field');

model.description(['This example models the flow and mass transport in the channels and the gas diffusion layer (GDL) of the oxygen side of a polymer electrolyte fuel cell.' newline  newline 'The cathode electrode reaction of the oxygen gas diffusion electrode (GDE) is modeled as an internal boundary condition, where the local current density depends on the overpotential and the local oxygen concentration.' newline  newline 'The membrane, anode GDE and anode GDL voltage losses are also included in the model.' newline  newline 'The gas stream at the anode side is assumed to be 100% hydrogen, thus excluding the need to model mass and momentum transport at this side of the cell.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('ht_pem_flow_field.mph');

model.modelNode.label('Components');

out = model;
