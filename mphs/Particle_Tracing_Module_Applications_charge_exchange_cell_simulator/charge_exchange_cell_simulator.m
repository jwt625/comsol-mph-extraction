function out = model
%
% charge_exchange_cell_simulator.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Particle_Tracing_Module/Applications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('fmf', 'FreeMolecularFlow', 'geom1', {'G'});
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics.create('cpt', 'ChargedParticleTracing', 'geom1');
model.physics('cpt').model('comp1');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('M_gas', '40[g/mol]', 'Molar mass: neutral gas (Ar)');
model.param.set('M_p', '1[g/mol]', 'Molar mass: particles (H+)');
model.param.set('E_p', '1[keV]', 'Energy: particles (H+)');
model.param.set('N0', '1000', 'Number of particles');
model.param.set('E1', '2.16[eV]', 'Energy loss collision 1');
model.param.set('E2', '13.6[eV]', 'Energy loss collision 2');
model.param.set('E3', '15.6[eV]', 'Energy loss collision 3');
model.param.set('Rin', '2[mm]', 'Aperture radius (Rin)');
model.param.set('Rcell', '20[mm]', 'Cell inner radius (Rcell)');
model.param.set('Lcell', '100[mm]', 'Cell length (Lcell)');
model.param.set('wthcell', '1.5[mm]', 'Cell wall thickness');
model.param.set('owth', '4[mm]', 'Outgasing wall thickness');
model.param.set('Low', '10[mm]', 'Outgasing wall length (Low)');
model.param.set('Rvac', '32[mm]', 'Vacuum chamber inner radius (Rvac)');
model.param.set('Lvac', '200[mm]', 'Vacuum chamber length (Lvac)');
model.param.set('wdp', '5*Rin', 'Width deflection plates');
model.param.set('Ldp', '30[mm]', 'Length deflection plate (Ldp)');
model.param.set('thdp', 'wthcell', 'Thickness deflection plate');
model.param.set('ddp', '8[mm]', 'Distance between deflection plates (Ddp)');
model.param.set('T0', '293.15[K]', 'Surface temperature');
model.param.set('sccm', '0.05', 'Outgasing rate in sccm units');
model.param.set('pspeed', '63[l/s]', 'Pump speed');
model.param.set('V0', '200[V]', 'Electric potential upper plate');
model.param.set('beta', '1[m]', 'Beam Twiss parameter');
model.param.set('erms', '0.1[um]', 'Beam rms emittance');
model.param.set('Emp', '1[keV]', 'Most probable particle energy');
model.param.set('I0', '1[nA]', 'Beam initial current');
model.param.set('tmax', '1.1*Lvac/sqrt(Emp/(1/2*M_p/N_A_const))', 'Simulation time');
model.param.set('nstep', '50', 'Minimum number of time steps');
model.param.set('nsec', '1000', 'Maximum number of secondary particles');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').repairTolType('relative');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', false);
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', {'owth' 'Low'});
model.geom('geom1').feature('wp1').geom.feature('r1').set('pos', {'Rcell+wthcell-owth' '0'});
model.geom('geom1').feature('wp1').geom.feature('r1').setIndex('pos', '-Low/2', 1);
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').feature('wp1').geom.create('r2', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r2').set('size', {'wthcell' 'Lcell'});
model.geom('geom1').feature('wp1').geom.feature('r2').set('pos', {'Rcell' '-Lcell/2'});
model.geom('geom1').feature('wp1').geom.run('r2');
model.geom('geom1').feature('wp1').geom.create('r3', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r3').set('size', {'Rcell+wthcell-Rin' '1'});
model.geom('geom1').feature('wp1').geom.feature('r3').setIndex('size', 'wthcell', 1);
model.geom('geom1').feature('wp1').geom.feature('r3').set('pos', {'Rin' 'Lcell/2'});
model.geom('geom1').feature('wp1').geom.run('r3');
model.geom('geom1').feature('wp1').geom.create('r4', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r4').set('size', {'Rcell+wthcell-Rin' '1'});
model.geom('geom1').feature('wp1').geom.feature('r4').setIndex('size', 'wthcell', 1);
model.geom('geom1').feature('wp1').geom.feature('r4').set('pos', {'Rin' '-Lcell/2-wthcell'});
model.geom('geom1').feature('wp1').geom.run('r4');
model.geom('geom1').feature('wp1').geom.create('uni1', 'Union');
model.geom('geom1').feature('wp1').geom.feature('uni1').selection('input').set({'r1' 'r2' 'r3' 'r4'});
model.geom('geom1').feature('wp1').geom.run('uni1');
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('rev1', 'Revolve');
model.geom('geom1').feature('rev1').set('angtype', 'full');
model.geom('geom1').run('rev1');
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').set('r', 'Rvac');
model.geom('geom1').feature('cyl1').set('h', 'Lvac');
model.geom('geom1').feature('cyl1').set('pos', {'0' '-Lvac/2' '0'});
model.geom('geom1').feature('cyl1').set('axistype', 'y');
model.geom('geom1').run('cyl1');
model.geom('geom1').create('cyl2', 'Cylinder');
model.geom('geom1').feature('cyl2').set('r', 'Rvac');
model.geom('geom1').feature('cyl2').set('h', 'Lvac/2');
model.geom('geom1').feature('cyl2').set('pos', {'0' '0' '-Lvac/2'});
model.geom('geom1').run('cyl2');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'cyl1' 'cyl2'});
model.geom('geom1').feature('uni1').set('intbnd', false);
model.geom('geom1').run('uni1');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'wdp' 'Ldp' 'thdp'});
model.geom('geom1').feature('blk1').set('base', 'center');
model.geom('geom1').feature('blk1').set('pos', {'0' '3*Lvac/8' 'ddp/2+thdp/2'});
model.geom('geom1').run('blk1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', {'wdp' 'Ldp' 'thdp'});
model.geom('geom1').feature('blk2').set('base', 'center');
model.geom('geom1').feature('blk2').set('pos', {'0' '3*Lvac/8' '-(ddp/2+thdp/2)'});
model.geom('geom1').run('blk2');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').selection('input').set({'uni1'});
model.geom('geom1').feature('dif1').selection('input2').set({'blk1' 'blk2' 'rev1'});
model.geom('geom1').run('dif1');
model.geom('geom1').create('wp2', 'WorkPlane');
model.geom('geom1').feature('wp2').set('unite', true);
model.geom('geom1').feature('wp2').set('quickplane', 'xz');
model.geom('geom1').feature('wp2').set('quicky', -100);
model.geom('geom1').feature('wp2').geom.create('c1', 'Circle');
model.geom('geom1').feature('wp2').geom.feature('c1').set('r', 'Rin');
model.geom('geom1').feature('wp2').geom.run('c1');
model.geom('geom1').run('fin');

model.func.create('int1', 'Interpolation');
model.func('int1').model('comp1');
model.func('int1').label('Ar+H+=>H+Ar+');
model.func('int1').set('source', 'file');
model.func('int1').set('filename', 'charge_exchange_cell_simulator_embedded_Qex1.txt');
model.func('int1').importData;
model.func('int1').set('funcname', 'Qex1');
model.func('int1').setIndex('argunit', 'eV', 0);
model.func('int1').setIndex('fununit', 'm^2', 0);
model.func.create('int2', 'Interpolation');
model.func('int2').model('comp1');
model.func('int2').label('H+Ar=>Ar+H+');
model.func('int2').set('source', 'file');
model.func('int2').set('filename', 'charge_exchange_cell_simulator_embedded_Qex2.txt');
model.func('int2').importData;
model.func('int2').set('funcname', 'Qex2');
model.func('int2').setIndex('argunit', 'eV', 0);
model.func('int2').setIndex('fununit', 'm^2', 0);
model.func.create('int3', 'Interpolation');
model.func('int3').model('comp1');
model.func('int3').label('H+Ar=>H+Ar+');
model.func('int3').set('source', 'file');
model.func('int3').set('filename', 'charge_exchange_cell_simulator_embedded_Qex3.txt');
model.func('int3').importData;
model.func('int3').set('funcname', 'Qex3');
model.func('int3').setIndex('argunit', 'eV', 0);
model.func('int3').setIndex('fununit', 'm^2', 0);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('Nc1', 'cpt.sum(if(isnan(qx),0,cpt.col1.ncex1.Nc))');
model.variable('var1').descr('Nc1', 'Number of collisions, type 1');
model.variable('var1').set('Nc2', 'cpt.sum(if(isnan(qx),0,cpt.col2.ncex1.Nc))');
model.variable('var1').descr('Nc2', 'Number of collisions, type 2');
model.variable('var1').set('Nc3', 'cpt.sum(if(isnan(qx),0,cpt.col3.ncex1.Nc))');
model.variable('var1').descr('Nc3', 'Number of collisions, type 3');
model.variable('var1').set('Nctot', 'Nc1+Nc2+Nc3');
model.variable('var1').descr('Nctot', 'Total number of collisions');

model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');
model.selection('box1').set('entitydim', 2);
model.selection('box1').set('xmax', 0);
model.selection('box1').set('condition', 'allvertices');

model.physics('fmf').feature('fmfp1').setIndex('Mn_G', 'M_gas', 0);
model.physics('fmf').feature('st1').set('T', 'T0');
model.physics('fmf').create('wall2', 'Wall', 2);
model.physics('fmf').feature('wall2').selection.set([35 36 69 71]);
model.physics('fmf').feature('wall2').set('BCType', 'OutgassingWall');
model.physics('fmf').feature('wall2').set('BoundaryCondition', 'NumberOfSCCM');
model.physics('fmf').feature('wall2').setIndex('sccmmfr', 'sccm', 0);
model.physics('fmf').feature('wall2').set('StandardFlowRateDefinedBy', 'StandardP');
model.physics('fmf').create('pmp1', 'VacuumPump', 2);
model.physics('fmf').feature('pmp1').selection.set([6]);
model.physics('fmf').feature('pmp1').set('SpecifyPump', 'PumpSpeed');
model.physics('fmf').feature('pmp1').setIndex('pspeed', 'pspeed', 0);
model.physics('fmf').create('ndr1', 'NumberDensityReconDomain', 3);
model.physics('fmf').feature('ndr1').selection.set([1]);
model.physics('es').feature('ccn1').set('epsilonr_mat', 'userdef');
model.physics('es').create('pot1', 'ElectricPotential', 2);
model.physics('es').feature('pot1').selection.set([41 42 43 44 46 90]);
model.physics('es').feature('pot1').set('V0', 'V0');
model.physics('es').create('gnd1', 'Ground', 2);
model.physics('es').feature('gnd1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 45 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89]);
model.physics('cpt').prop('MaximumSecondary').setIndex('MaximumSecondary', 'nsec', 0);
model.physics('cpt').prop('StoreParticleStatusData').setIndex('StoreParticleStatusData', 1, 0);
model.physics('cpt').feature('pp1').label('H+');
model.physics('cpt').feature('pp1').set('mp', 'M_p/N_A_const');
model.physics('cpt').feature('pp1').set('Z', 1);
model.physics('cpt').create('pp2', 'ParticlePropertiesOther', -1);
model.physics('cpt').feature('pp2').label('H');
model.physics('cpt').feature('pp2').set('mp', 'M_p/N_A_const');
model.physics('cpt').feature('pp2').set('Z', 0);
model.physics('cpt').create('pp3', 'ParticlePropertiesOther', -1);
model.physics('cpt').feature('pp3').label('Ar+');
model.physics('cpt').feature('pp3').set('mp', 'M_gas/N_A_const');
model.physics('cpt').feature('pp3').set('Z', 1);
model.physics('cpt').create('pbeam1', 'ParticleBeam', 2);
model.physics('cpt').feature('pbeam1').selection.set([47]);
model.physics('cpt').feature('pbeam1').setIndex('N', 'N0', 0);
model.physics('cpt').feature('pbeam1').set('twbeta0', 'beta');
model.physics('cpt').feature('pbeam1').set('e1rms', 'erms');
model.physics('cpt').feature('pbeam1').set('El', 'Emp');
model.physics('cpt').create('ef1', 'ElectricForce', 3);
model.physics('cpt').feature('ef1').selection.set([1]);
model.physics('cpt').feature('ef1').set('E_src', 'root.comp1.es.Ex');
model.physics('cpt').create('col1', 'Collisions', 3);
model.physics('cpt').feature('col1').label('Ar+H+=>H+Ar+');
model.physics('cpt').feature('col1').selection.set([1]);
model.physics('cpt').feature('col1').set('Nd', 'fmf.n_G');
model.physics('cpt').feature('col1').set('T', 'T0');
model.physics('cpt').feature('col1').set('ParticlesToAffect', 'SingleSpecies');
model.physics('cpt').feature('col1').create('ncex1', 'NonResonantChargeExchange', 3);
model.physics('cpt').feature('col1').feature('ncex1').set('xsec', 'Qex1(cpt.Ep)');
model.physics('cpt').feature('col1').feature('ncex1').set('dE', 'E1');
model.physics('cpt').feature('col1').feature('ncex1').set('CountCollisions', true);
model.physics('cpt').feature('col1').feature('ncex1').set('SpeciesToRelease', 'IonAndNeutral');
model.physics('cpt').feature('col1').feature('ncex1').set('ReleasedIonProperties', 'pp3');
model.physics('cpt').feature('col1').feature('ncex1').set('ReleasedNeutralProperties', 'pp2');
model.physics('cpt').create('col2', 'Collisions', 3);
model.physics('cpt').feature('col2').label('H+Ar=>Ar+H+');
model.physics('cpt').feature('col2').selection.set([1]);
model.physics('cpt').feature('col2').set('Nd', 'fmf.n_G');
model.physics('cpt').feature('col2').set('T', 'T0');
model.physics('cpt').feature('col2').set('ParticlesToAffect', 'SingleSpecies');
model.physics('cpt').feature('col2').set('AffectedParticleProperties', 'pp2');
model.physics('cpt').feature('col2').create('ncex1', 'NonResonantChargeExchange', 3);
model.physics('cpt').feature('col2').feature('ncex1').set('xsec', 'Qex2(cpt.Ep)');
model.physics('cpt').feature('col2').feature('ncex1').set('dE', 'E2');
model.physics('cpt').feature('col2').feature('ncex1').set('CountCollisions', true);
model.physics('cpt').create('col3', 'Collisions', 3);
model.physics('cpt').feature('col3').label('H+Ar=>H+Ar+');
model.physics('cpt').feature('col3').selection.set([1]);
model.physics('cpt').feature('col3').set('Nd', 'fmf.n_G');
model.physics('cpt').feature('col3').set('T', 'T0');
model.physics('cpt').feature('col3').set('ParticlesToAffect', 'SingleSpecies');
model.physics('cpt').feature('col3').set('AffectedParticleProperties', 'pp2');
model.physics('cpt').feature('col3').create('ncex1', 'NonResonantChargeExchange', 3);
model.physics('cpt').feature('col3').feature('ncex1').set('xsec', 'Qex3(cpt.Ep)');
model.physics('cpt').feature('col3').feature('ncex1').set('dE', 'E3');
model.physics('cpt').feature('col3').feature('ncex1').set('ReleasedIonProperties', 'pp3');
model.physics('cpt').feature('col3').feature('ncex1').set('CountCollisions', true);

model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('size').set('hauto', 4);
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh1').feature('ftet1').feature('size1').selection.set([33 34 43 44 46 47 48 49 71 72 74 75 98 99 101 103 114 117 126 128 140 142 145 146]);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hauto', 3);
model.mesh('mesh1').run;
model.mesh('mesh1').run;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/fmf', true);
model.study('std1').feature('stat').setSolveFor('/physics/es', true);
model.study('std1').feature('stat').setSolveFor('/physics/cpt', false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V'});
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'cg');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('coarseningmethod', 'classic');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Electrostatics');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_G'});
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mcasegen', 'any');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.4);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.4);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'i2');
model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_fmf_p_G'});
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'i2');
model.sol('sol1').feature('s1').feature('se1').create('ss4', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss4').set('segvar', {'comp1_fmf_N_G' 'comp1_fmf_ndr1_Nr_G'});
model.sol('sol1').feature('s1').feature('se1').feature('ss4').set('linsolver', 'i2');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Incident Molecular Flux (fmf)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'FreeMolecularFlow/phys1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('expr', 'fmf.Gtot');
model.result('pg1').feature('surf1').set('resolution', 'norefine');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Total Number Density (fmf)');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'FreeMolecularFlow/phys1/pdef1/pcond1/pcond1/pg1');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('expr', 'fmf.ntot');
model.result('pg2').feature('surf1').set('resolution', 'norefine');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Total Pressure (fmf)');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'FreeMolecularFlow/phys1/pdef1/pcond1/pcond2/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'fmf.ptot');
model.result('pg3').feature('surf1').set('resolution', 'norefine');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Electric Potential (es)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').set('data', 'dset1');
model.result('pg4').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond1/pg1');
model.result('pg4').feature.create('mslc1', 'Multislice');
model.result('pg4').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg4').feature('mslc1').set('solutionparams', 'parent');
model.result('pg4').feature('mslc1').set('expr', 'V');
model.result('pg4').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg4').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg4').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg4').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg4').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg4').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg4').feature('mslc1').set('colortable', 'Dipole');
model.result('pg4').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg4').feature('mslc1').set('data', 'parent');
model.result('pg4').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg4').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg4').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg4').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg4').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg4').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg4').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg4').feature('strmsl1').set('titletype', 'none');
model.result('pg4').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg4').feature('strmsl1').set('udist', 0.02);
model.result('pg4').feature('strmsl1').set('maxlen', 0.4);
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('inheritcolor', false);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('data', 'parent');
model.result('pg4').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg4').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg4').feature('strmsl1').feature('col1').set('expr', 'V');
model.result('pg4').feature('strmsl1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg4').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg4').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg4').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Electric Field Norm (es)');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('showlegendsmaxmin', true);
model.result('pg5').set('data', 'dset1');
model.result('pg5').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');
model.result('pg5').feature.create('mslc1', 'Multislice');
model.result('pg5').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg5').feature('mslc1').set('solutionparams', 'parent');
model.result('pg5').feature('mslc1').set('expr', 'es.normE');
model.result('pg5').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg5').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg5').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg5').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg5').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg5').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg5').feature('mslc1').set('colortable', 'Prism');
model.result('pg5').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg5').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg5').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg5').feature('mslc1').set('data', 'parent');
model.result('pg5').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg5').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg5').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg5').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg5').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg5').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg5').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg5').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg5').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg5').feature('strmsl1').set('titletype', 'none');
model.result('pg5').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg5').feature('strmsl1').set('udist', 0.02);
model.result('pg5').feature('strmsl1').set('maxlen', 0.4);
model.result('pg5').feature('strmsl1').set('maxtime', Inf);
model.result('pg5').feature('strmsl1').set('inheritcolor', false);
model.result('pg5').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg5').feature('strmsl1').set('maxtime', Inf);
model.result('pg5').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg5').feature('strmsl1').set('maxtime', Inf);
model.result('pg5').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg5').feature('strmsl1').set('maxtime', Inf);
model.result('pg5').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg5').feature('strmsl1').set('maxtime', Inf);
model.result('pg5').feature('strmsl1').set('data', 'parent');
model.result('pg5').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg5').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg5').feature('strmsl1').feature('col1').set('expr', 'es.normE');
model.result('pg5').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg5').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg5').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg5').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg5').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg5').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').run;
model.result.remove('pg1');
model.result('pg2').run;
model.result.remove('pg2');
model.result('pg3').run;
model.result.dataset.duplicate('dset2', 'dset1');
model.result.dataset('dset2').label('Study 1/Solution 1 box selection');
model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.named('box1');
model.result.dataset.create('cln1', 'CutLine3D');
model.result.dataset('cln1').setIndex('genpoints', -100, 0, 1);
model.result.dataset('cln1').setIndex('genpoints', 100, 1, 1);
model.result('pg3').run;
model.result('pg3').label('Pressure');
model.result('pg3').set('data', 'dset2');
model.result('pg3').set('edges', false);
model.result('pg3').run;
model.result('pg3').feature('surf1').set('unit', 'Torr');
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').label('Electric Potential');
model.result('pg4').run;
model.result('pg4').feature('mslc1').set('multiplaneymethod', 'number');
model.result('pg4').feature('mslc1').set('ynumber', '0');
model.result('pg4').feature('mslc1').set('multiplanezmethod', 'number');
model.result('pg4').feature('mslc1').set('znumber', '0');
model.result('pg4').run;
model.result('pg4').feature('strmsl1').set('multiplaneymethod', 'number');
model.result('pg4').feature('strmsl1').set('ynumber', '0');
model.result('pg4').feature('strmsl1').set('multiplanezmethod', 'number');
model.result('pg4').feature('strmsl1').set('znumber', '0');
model.result('pg4').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Gas number density');
model.result('pg6').set('data', 'cln1');
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg6').feature('lngr1').set('linewidth', 'preference');
model.result('pg6').feature('lngr1').set('expr', 'fmf.ntot');
model.result('pg6').run;

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/fmf', false);
model.study('std2').feature('time').setSolveFor('/physics/es', false);
model.study('std2').feature('time').setSolveFor('/physics/cpt', true);
model.study('std2').feature('time').set('tlist', 'range(0,0.01,1)*tmax');
model.study('std2').feature('time').set('usesol', true);
model.study('std2').feature('time').set('notsolmethod', 'sol');
model.study('std2').feature('time').set('notstudy', 'std1');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,0.01,1)*tmax');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg3');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 1.0E-5);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsgenalpha', 'strict');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('timemethod', 'genalpha');
model.sol('sol2').feature('t1').set('estrat', 'exclude');
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'i1');
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('t1').set('maxstepconstraintgenalpha', 'const');
model.sol('sol2').feature('t1').set('maxstepgenalpha', 'tmax/nstep');
model.sol('sol2').runAll;

model.result.dataset.create('part1', 'Particle');
model.result.dataset('part1').set('solution', 'sol2');
model.result.dataset('part1').set('posdof', {'comp1.qx' 'comp1.qy' 'comp1.qz'});
model.result.dataset('part1').set('geom', 'geom1');
model.result.dataset('part1').set('pgeom', 'pgeom_cpt');
model.result.dataset('part1').set('pgeomspec', 'fromphysics');
model.result.dataset('part1').set('physicsinterface', 'cpt');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'part1');
model.result('pg7').setIndex('looplevel', 101, 0);
model.result('pg7').label('Particle Trajectories (cpt)');
model.result('pg7').create('traj1', 'ParticleTrajectories');
model.result('pg7').feature('traj1').set('pointtype', 'point');
model.result('pg7').feature('traj1').set('linetype', 'none');
model.result('pg7').feature('traj1').create('col1', 'Color');
model.result('pg7').feature('traj1').feature('col1').set('expr', 'cpt.V');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'part1');
model.result('pg8').setIndex('looplevel', 101, 0);
model.result('pg8').label('Average Beam Position (cpt)');
model.result('pg8').create('pttraj1', 'PointTrajectories');
model.result('pg8').feature('pttraj1').set('plotdata', 'global');
model.result('pg8').feature('pttraj1').set('globalexpr', {'cpt.qavx' 'cpt.qavy' 'cpt.qavz'});
model.result('pg8').feature('pttraj1').create('col1', 'Color');
model.result('pg8').feature('pttraj1').feature('col1').set('expr', 'cpt.e1hrms');
model.result('pg7').run;
model.result.dataset.duplicate('part2', 'part1');
model.result.dataset('part2').selection.geom('geom1', 2);
model.result.dataset('part2').selection.set([8]);
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').feature('traj1').set('linetype', 'line');
model.result('pg7').feature('traj1').set('pointtype', 'none');
model.result('pg7').run;
model.result('pg7').feature('traj1').feature('col1').set('expr', 'cpt.Z');
model.result('pg7').run;
model.result('pg8').run;
model.result.remove('pg8');
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Efficiency');
model.result.numerical('gev1').set('data', 'part2');
model.result.numerical('gev1').setIndex('expr', 'cpt.Nsel/N0*100', 0);
model.result.numerical('gev1').setIndex('descr', 'cpt.Nsel/N0*100', 0);
model.result.numerical.duplicate('gev2', 'gev1');
model.result.numerical('gev2').label('Nc1/Nctot');
model.result.numerical('gev2').setIndex('expr', 'Nc1/Nctot*100', 0);
model.result.numerical('gev2').setIndex('descr', 'Nc1/Nctot*100', 0);
model.result.numerical.duplicate('gev3', 'gev2');
model.result.numerical('gev3').label('Nc2/Nctot');
model.result.numerical('gev3').setIndex('expr', 'Nc2/Nctot*100', 0);
model.result.numerical('gev3').setIndex('descr', 'Nc2/Nctot*100', 0);
model.result.numerical.duplicate('gev4', 'gev3');
model.result.numerical('gev4').label('Nc3/Nctot');
model.result.numerical('gev4').setIndex('expr', 'Nc3/Nctot*100', 0);
model.result.numerical('gev4').setIndex('descr', 'Nc3/Nctot*100', 0);
model.result.numerical.duplicate('gev5', 'gev4');
model.result.numerical('gev5').label('All Secondary used?');
model.result.numerical('gev5').setIndex('expr', 'cpt.cptop_all1(cpt.fs<1)<1', 0);
model.result.numerical('gev5').setIndex('descr', 'cpt.cptop_all1(cpt.fs<1)<1', 0);

model.study.create('std3');
model.study('std3').label('Plot Geometry');
model.study('std3').setGenPlots(false);
model.study('std3').setGenConv(false);

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.dataset('dset4').selection.geom('geom1', 2);
model.result.dataset('dset4').selection.named('box1');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').run;
model.result('pg8').label('Geometry');
model.result('pg8').set('data', 'dset4');
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', '1');
model.result('pg8').feature('surf1').set('coloring', 'uniform');
model.result('pg8').feature('surf1').set('color', 'gray');
model.result('pg8').run;

model.title([]);

model.description('');

model.label('charge_exchange_cell_simulator_embedded.mph');

model.result('pg8').run;

model.title('Charge Exchange Cell Simulator');

model.description(['A charge exchange cell consists of a region of gas at an elevated pressure within a vacuum chamber. When an ion beam interacts with the higher-density gas, the ions undergo charge exchange reactions with the gas which then create energetic neutral particles. It is likely that only a fraction of the beam ions will undergo charge exchange reactions. Therefore, in order to neutralize the beam, a pair of charged deflecting plates are positioned outside the cell. In this way, an energetic neutral source can be produced.' newline  newline 'This app simulates the interaction of a proton beam with a charge exchange cell containing neutral argon. User input includes several geometric parameters for the gas cell and vacuum chamber, beam properties, and the properties of the charged plates that are used to deflect the remaining ions.' newline  newline 'The simulation app computes the efficiency of the charge exchange cell, measured as the fraction of ions that are neutralized, and records statistics about the different types of collisions that occur.']);

model.setExpectedComputationTime('1 minute, 30 seconds');

model.result.report.create('rpt1', 'Report');
model.result.report('rpt1').set('format', 'docx');
model.result.report('rpt1').feature.create('tp1', 'TitlePage');
model.result.report('rpt1').feature('tp1').set('frontmatterlayout', 'headings');
model.result.report('rpt1').feature('tp1').set('includecompany', false);
model.result.report('rpt1').feature('tp1').set('includeversion', false);
model.result.report('rpt1').feature('tp1').set('summary', ['Beams of high-velocity neutral particles can be obtained using charge exchange cells. A charge exchange cell is a region of high-density gas placed on the path of an ion beam. The region of high gas density creates a medium in which fast ions can be neutralized to generate a beam of neutral particles at the exit of the cell. Since the probability of electron capture is not very high, charged particles are still present in the beam as it exits the cell. In order to get a pure neutral beam at the end of the process, charged plates can be used to deflect the charged particles before the beam reaches its target.' newline 'This model uses the Molecular Flow Module to compute the pressure in the charge exchange cell. The Electrostatics interface is used to compute the electric field that deflects the charged particles. The Charged Particle Tracing interface is used to compute the trajectories and to simulate collisions between the particles and ambient neutral atoms. For this particular application a beam of high energy protons undergo charge exchange with argon atoms.']);
model.result.report('rpt1').feature('tp1').set('includeacknowledgment', false);
model.result.report('rpt1').feature.create('toc1', 'TableOfContents');
model.result.report('rpt1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').label('Software Information');
model.result.report('rpt1').feature('sec1').feature.create('root1', 'Model');
model.result.report('rpt1').feature('sec1').feature('root1').label('About the Software');
model.result.report('rpt1').feature('sec1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').feature('sec1').label('Stationary Study');
model.result.report('rpt1').feature('sec1').feature('sec1').feature.create('std1', 'Study');
model.result.report('rpt1').feature('sec1').feature('sec1').feature('std1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec1').feature('sec2').label('Time Dependent Study');
model.result.report('rpt1').feature('sec1').feature('sec2').feature.create('std1', 'Study');
model.result.report('rpt1').feature('sec1').feature('sec2').feature('std1').set('noderef', 'std2');
model.result.report('rpt1').set('filename', 'user:///charge_exchange_cell_simulator');
model.result.report('rpt1').set('imagesize', 'xlarge');
model.result.report('rpt1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').label('Input Data');
model.result.report('rpt1').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec1').label('Parameters 1');
model.result.report('rpt1').feature('sec2').feature('sec1').set('source', 'firstchild');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 5, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 6, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 10, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 15, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 17, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 26, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 27, 1);
model.result.report('rpt1').feature('sec2').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec2').label('Variables');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.create('var1', 'Variables');
model.result.report('rpt1').feature('sec2').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec3').label('Geometry');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('pg1').set('noderef', 'pg7');
model.result.report('rpt1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').label('Results');
model.result.report('rpt1').feature('sec3').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').label('Derived Values');
model.result.report('rpt1').feature('sec3').feature('sec1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec1').label('Efficiency');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec1').feature.create('num1', 'DerivedValues');
model.result.report('rpt1').feature('sec3').feature('sec1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').label('Collisions Statistics');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').feature.create('num1', 'DerivedValues');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').feature('num1').set('noderef', 'gev2');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').feature.duplicate('num2', 'num1');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').feature('num2').set('noderef', 'gev3');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').feature.duplicate('num3', 'num2');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').feature('num3').set('noderef', 'gev4');
model.result.report('rpt1').feature('sec3').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec2').label('Plot Groups');
model.result.report('rpt1').feature('sec3').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec1').label('Pressure');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec1').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec2').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec2').label('Electric Potential');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec2').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec2').feature('pg1').set('noderef', 'pg4');
model.result.report('rpt1').feature('sec3').feature('sec2').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec3').label('Gas Number Density');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec3').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec3').feature('pg1').set('noderef', 'pg5');
model.result.report('rpt1').feature('sec3').feature('sec2').feature.create('sec4', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec4').label('Particle Trajectories');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec4').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec4').feature('pg1').set('noderef', 'pg6');

model.title('Charge Exchange Cell Simulator');

model.description(['A charge exchange cell consists of a region of gas at an elevated pressure within a vacuum chamber. When an ion beam interacts with the higher-density gas, the ions undergo charge exchange reactions with the gas which then create energetic neutral particles. It is likely that only a fraction of the beam ions will undergo charge exchange reactions. Therefore, in order to neutralize the beam, a pair of charged deflecting plates are positioned outside the cell. In this way, an energetic neutral source can be produced.' newline  newline 'This app simulates the interaction of a proton beam with a charge exchange cell containing neutral argon. User input includes several geometric parameters for the gas cell and vacuum chamber, beam properties, and the properties of the charged plates that are used to deflect the remaining ions.' newline  newline 'The simulation app computes the efficiency of the charge exchange cell, measured as the fraction of ions that are neutralized, and records statistics about the different types of collisions that occur.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('charge_exchange_cell_simulator.mph');

model.modelNode.label('Components');

out = model;
