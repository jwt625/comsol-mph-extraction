function out = model
%
% helicopter_swashplate.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Automotive_and_Aerospace');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/mbd', true);

model.geom('geom1').run;

model.mesh('mesh1').create('imp1', 'Import');
model.mesh('mesh1').feature('imp1').set('filename', 'helicopter_swashplate.mphbin');
model.mesh('mesh1').feature('imp1').importData;

model.func.create('rm1', 'Ramp');
model.func('rm1').set('location', '0.002[s]');
model.func('rm1').set('cutoffactive', true);
model.func('rm1').set('cutoff', '0.05[s]');
model.func('rm1').set('smoothzonelocactive', true);
model.func('rm1').set('smoothzoneloc', 0.005);
model.func('rm1').set('smoothzonecutoffactive', true);
model.func('rm1').set('smoothzonecutoff', 0.005);
model.func.duplicate('rm2', 'rm1');
model.func('rm2').set('location', '0.004[s]');
model.func('rm2').set('cutoff', '0.1[s]');
model.func('rm2').set('smoothzoneloc', 0.01);
model.func('rm2').set('smoothzonecutoff', 0.01);

model.variable.create('var1');
model.variable('var1').set('vf', '100[km/h]');
model.variable('var1').descr('vf', 'Forward speed of helicopter');
model.variable('var1').set('rpm', '300');
model.variable('var1').descr('rpm', 'RPM of helicopter rotor');
model.variable('var1').set('omega', '2*pi*rpm/60[s]');
model.variable('var1').descr('omega', 'Angular velocity of rotor');
model.variable('var1').set('theta', 'omega*t[rad]');
model.variable('var1').descr('theta', 'Angular rotation of rotor');
model.variable('var1').set('vp', '0.5[m/s]');
model.variable('var1').descr('vp', 'Speed of pushrod motion');
model.variable('var1').set('up1', 'vp*rm1(t)');
model.variable('var1').descr('up1', 'Motion of pushrod 1 and 3');
model.variable('var1').set('up2', 'vp*rm2(t)');
model.variable('var1').descr('up2', 'Motion of pushrod 2');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.mesh('mesh1').run;

model.selection('sel1').label('Blade1');
model.selection('sel1').set([1 2 4 5 8 9 10 12]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Blade2');
model.selection('sel2').set([17 19 20 21 22 23 24 26]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Blade3');
model.selection('sel3').set([25 29 30 31 32 33 36 37]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Blades');
model.selection('uni1').set('input', {'sel1' 'sel2' 'sel3'});
model.selection.create('com1', 'Complement');
model.selection('com1').model('comp1');
model.selection('com1').label('Without Blades');
model.selection('com1').set('input', {'sel1'});

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.physics('mbd').prop('InitialValues').set('omega_Init', {'0' '0' 'omega'});
model.physics('mbd').create('rd1', 'RigidDomain', 3);
model.physics('mbd').feature('rd1').label('Rigid Material: Baseplate');
model.physics('mbd').feature('rd1').selection.set([7]);
model.physics('mbd').feature('rd1').set('InitialValueType', 'locallyDefined');
model.physics('mbd').feature('rd1').create('fix1', 'FixedConstraint', -1);
model.physics('mbd').create('rd2', 'RigidDomain', 3);
model.physics('mbd').feature('rd2').label('Rigid Material: Pushrod1');
model.physics('mbd').feature('rd2').selection.set([6]);
model.physics('mbd').feature('rd2').set('InitialValueType', 'locallyDefined');
model.physics('mbd').feature.duplicate('rd3', 'rd2');
model.physics('mbd').feature('rd3').label('Rigid Material: Pushrod2');
model.physics('mbd').feature('rd3').selection.set([13]);
model.physics('mbd').feature.duplicate('rd4', 'rd3');
model.physics('mbd').feature('rd4').label('Rigid Material: Pushrod3');
model.physics('mbd').feature('rd4').selection.set([35]);
model.physics('mbd').feature.duplicate('rd5', 'rd4');
model.physics('mbd').feature('rd5').label('Rigid Material: Baseplate-Swashplate Link1');
model.physics('mbd').feature('rd5').selection.set([27]);
model.physics('mbd').feature.duplicate('rd6', 'rd5');
model.physics('mbd').feature('rd6').label('Rigid Material: Baseplate-Swashplate Link2');
model.physics('mbd').feature('rd6').selection.set([28]);
model.physics('mbd').feature.duplicate('rd7', 'rd6');
model.physics('mbd').feature('rd7').label('Rigid Material: Lower Swashplate');
model.physics('mbd').feature('rd7').selection.set([3]);
model.physics('mbd').create('rd8', 'RigidDomain', 3);
model.physics('mbd').feature('rd8').label('Rigid Material: Rotor Hub');
model.physics('mbd').feature('rd8').selection.set([14]);
model.physics('mbd').feature('rd8').create('pdr1', 'PrescribedDispRot', -1);
model.physics('mbd').feature('rd8').feature('pdr1').set('CenterOfRotationType', 'userDefined');
model.physics('mbd').feature('rd8').feature('pdr1').setIndex('Direction', true, 0);
model.physics('mbd').feature('rd8').feature('pdr1').setIndex('Direction', true, 1);
model.physics('mbd').feature('rd8').feature('pdr1').setIndex('Direction', true, 2);
model.physics('mbd').feature('rd8').feature('pdr1').set('RotationType', 'PrescribedRotationGroup');
model.physics('mbd').feature('rd8').feature('pdr1').set('Omega', [0 0 1]);
model.physics('mbd').feature('rd8').feature('pdr1').set('phi0', 'theta');
model.physics('mbd').create('rd9', 'RigidDomain', 3);
model.physics('mbd').feature('rd9').label('Rigid Material: Upper Swashplate');
model.physics('mbd').feature('rd9').selection.set([11]);
model.physics('mbd').feature.duplicate('rd10', 'rd9');
model.physics('mbd').feature('rd10').label('Rigid Material: Sphere');
model.physics('mbd').feature('rd10').selection.set([18]);
model.physics('mbd').feature.duplicate('rd11', 'rd10');
model.physics('mbd').feature('rd11').label('Rigid Material: Swashplate-Blade Link1');
model.physics('mbd').feature('rd11').selection.set([16]);
model.physics('mbd').feature.duplicate('rd12', 'rd11');
model.physics('mbd').feature('rd12').label('Rigid Material: Swashplate-Blade Link2');
model.physics('mbd').feature('rd12').selection.set([15]);
model.physics('mbd').feature.duplicate('rd13', 'rd12');
model.physics('mbd').feature('rd13').label('Rigid Material: Swashplate-Blade Link3');
model.physics('mbd').feature('rd13').selection.set([34]);
model.physics('mbd').feature.duplicate('rd14', 'rd13');
model.physics('mbd').feature('rd14').label('Rigid Material: Rotor Blade1');
model.physics('mbd').feature('rd14').selection.named('sel1');
model.physics('mbd').feature.duplicate('rd15', 'rd14');
model.physics('mbd').feature('rd15').label('Rigid Material: Rotor Blade2');
model.physics('mbd').feature('rd15').selection.named('sel2');
model.physics('mbd').feature.duplicate('rd16', 'rd15');
model.physics('mbd').feature('rd16').label('Rigid Material: Rotor Blade3');
model.physics('mbd').feature('rd16').selection.named('sel3');
model.physics('mbd').create('att1', 'Attachment', 2);
model.physics('mbd').feature('att1').label('Attachment: Swashplate-Blade1');
model.physics('mbd').feature('att1').selection.set([265 266 290 291]);
model.physics('mbd').create('att2', 'Attachment', 2);
model.physics('mbd').feature('att2').label('Attachment: Swashplate-Blade2');
model.physics('mbd').feature('att2').selection.set([313 314 340 341]);
model.physics('mbd').create('att3', 'Attachment', 2);
model.physics('mbd').feature('att3').label('Attachment: Swashplate-Blade3');
model.physics('mbd').feature('att3').selection.set([687 688 695 696]);
model.physics('mbd').create('att4', 'Attachment', 2);
model.physics('mbd').feature('att4').label('Attachment: Hub-Blade1');
model.physics('mbd').feature('att4').selection.set([152 153 197 198]);
model.physics('mbd').create('att5', 'Attachment', 2);
model.physics('mbd').feature('att5').label('Attachment: Hub-Blade2');
model.physics('mbd').feature('att5').selection.set([414 415 445 447]);
model.physics('mbd').create('att6', 'Attachment', 2);
model.physics('mbd').feature('att6').label('Attachment: Hub-Blade3');
model.physics('mbd').feature('att6').selection.set([470 471 480 482]);
model.physics('mbd').create('prj1', 'PrismaticJoint', -1);
model.physics('mbd').feature('prj1').set('Source', 'rd1');
model.physics('mbd').feature('prj1').set('Destination', 'rd2');
model.physics('mbd').feature('prj1').set('EntityLevel', 'Point');
model.physics('mbd').feature('prj1').set('e', [0 0 1]);
model.physics('mbd').feature('prj1').feature('cjp1').selection.set([48 107]);
model.physics('mbd').feature('prj1').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('prj1').feature('pm1').set('up', 'up1');
model.physics('mbd').create('rslj1', 'ReducedSlotJoint', -1);
model.physics('mbd').feature('rslj1').set('Source', 'rd1');
model.physics('mbd').feature('rslj1').set('Destination', 'rd3');
model.physics('mbd').feature('rslj1').set('EntityLevel', 'Point');
model.physics('mbd').feature('rslj1').set('JointTranslationalAxis', 'AttachedOnSource');
model.physics('mbd').feature('rslj1').set('e_tr', [0 0 1]);
model.physics('mbd').feature('rslj1').set('e_rot', {'cos(pi/6)' 'sin(pi/6)' '0'});
model.physics('mbd').feature('rslj1').feature('cjp1').selection.set([197 248 274 378]);
model.physics('mbd').feature('rslj1').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('rslj1').feature('pm1').set('up', 'up2');
model.physics('mbd').feature('rslj1').feature('pm1').set('ActivationConditionRotational', 'neverActive');
model.physics('mbd').create('prj2', 'PrismaticJoint', -1);
model.physics('mbd').feature('prj2').set('Source', 'rd1');
model.physics('mbd').feature('prj2').set('Destination', 'rd4');
model.physics('mbd').feature('prj2').set('EntityLevel', 'Point');
model.physics('mbd').feature('prj2').set('e', [0 0 1]);
model.physics('mbd').feature('prj2').feature('cjp1').selection.set([1115 1219]);
model.physics('mbd').feature('prj2').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('prj2').feature('pm1').set('up', 'up1');
model.physics('mbd').create('hgj1', 'HingeJoint', -1);
model.physics('mbd').feature('hgj1').set('Source', 'rd1');
model.physics('mbd').feature('hgj1').set('Destination', 'rd5');
model.physics('mbd').feature('hgj1').set('EntityLevel', 'Point');
model.physics('mbd').feature('hgj1').set('AxisOfJointType', 'SelectEdge');
model.physics('mbd').feature('hgj1').feature('cjp1').selection.set([757 774 863 896]);
model.physics('mbd').feature('hgj1').feature('ja1').selection.set([1236]);
model.physics('mbd').create('hgj2', 'HingeJoint', -1);
model.physics('mbd').feature('hgj2').set('Source', 'rd5');
model.physics('mbd').feature('hgj2').set('Destination', 'rd6');
model.physics('mbd').feature('hgj2').set('EntityLevel', 'Point');
model.physics('mbd').feature('hgj2').set('AxisOfJointType', 'SelectEdge');
model.physics('mbd').feature('hgj2').feature('cjp1').selection.set([914 930 980 996]);
model.physics('mbd').feature('hgj2').feature('ja1').selection.set([1509]);
model.physics('mbd').create('blj1', 'BallJoint', -1);
model.physics('mbd').feature('blj1').set('Source', 'rd2');
model.physics('mbd').feature('blj1').set('Destination', 'rd7');
model.physics('mbd').feature('blj1').set('EntityLevel', 'Point');
model.physics('mbd').feature('blj1').feature('cjp1').selection.set([73 75]);
model.physics('mbd').create('blj2', 'BallJoint', -1);
model.physics('mbd').feature('blj2').set('Source', 'rd3');
model.physics('mbd').feature('blj2').set('Destination', 'rd7');
model.physics('mbd').feature('blj2').set('EntityLevel', 'Point');
model.physics('mbd').feature('blj2').feature('cjp1').selection.set([263 265]);
model.physics('mbd').create('blj3', 'BallJoint', -1);
model.physics('mbd').feature('blj3').set('Source', 'rd4');
model.physics('mbd').feature('blj3').set('Destination', 'rd7');
model.physics('mbd').feature('blj3').set('EntityLevel', 'Point');
model.physics('mbd').feature('blj3').feature('cjp1').selection.set([1062 1240]);
model.physics('mbd').create('blj4', 'BallJoint', -1);
model.physics('mbd').feature('blj4').set('Source', 'rd6');
model.physics('mbd').feature('blj4').set('Destination', 'rd7');
model.physics('mbd').feature('blj4').set('EntityLevel', 'Point');
model.physics('mbd').feature('blj4').feature('cjp1').selection.set([798 834]);
model.physics('mbd').create('blj5', 'BallJoint', -1);
model.physics('mbd').feature('blj5').set('Source', 'rd10');
model.physics('mbd').feature('blj5').set('Destination', 'rd7');
model.physics('mbd').feature('blj5').set('EntityLevel', 'Point');
model.physics('mbd').feature('blj5').feature('cjp1').selection.set([558 723]);
model.physics('mbd').create('blj6', 'BallJoint', -1);
model.physics('mbd').feature('blj6').set('Source', 'rd9');
model.physics('mbd').feature('blj6').set('Destination', 'rd11');
model.physics('mbd').feature('blj6').set('EntityLevel', 'Point');
model.physics('mbd').feature('blj6').feature('cjp1').selection.set([337 490]);
model.physics('mbd').create('blj7', 'BallJoint', -1);
model.physics('mbd').feature('blj7').set('Source', 'rd9');
model.physics('mbd').feature('blj7').set('Destination', 'rd12');
model.physics('mbd').feature('blj7').set('EntityLevel', 'Point');
model.physics('mbd').feature('blj7').feature('cjp1').selection.set([342 491]);
model.physics('mbd').create('blj8', 'BallJoint', -1);
model.physics('mbd').feature('blj8').set('Source', 'rd9');
model.physics('mbd').feature('blj8').set('Destination', 'rd13');
model.physics('mbd').feature('blj8').set('EntityLevel', 'Point');
model.physics('mbd').feature('blj8').feature('cjp1').selection.set([993 1208]);
model.physics('mbd').create('plj1', 'PlanarJoint', -1);
model.physics('mbd').feature('plj1').set('Source', 'rd7');
model.physics('mbd').feature('plj1').set('Destination', 'rd9');
model.physics('mbd').feature('plj1').set('CenterOfJointType', 'UserDefined');
model.physics('mbd').feature('plj1').set('e', [0 0 1]);
model.physics('mbd').create('clj1', 'CylindricalJoint', -1);
model.physics('mbd').feature('clj1').set('Source', 'rd10');
model.physics('mbd').feature('clj1').set('Destination', 'rd8');
model.physics('mbd').feature('clj1').set('CenterOfJointType', 'UserDefined');
model.physics('mbd').feature('clj1').set('e', [0 0 1]);
model.physics('mbd').feature('clj1').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('clj1').feature('pm1').set('ActivationConditionTranslational', 'neverActive');
model.physics('mbd').create('hgj3', 'HingeJoint', -1);
model.physics('mbd').feature('hgj3').set('Source', 'rd11');
model.physics('mbd').feature('hgj3').set('Destination', 'att1');
model.physics('mbd').feature('hgj3').set('AxisOfJointType', 'SelectEdge');
model.physics('mbd').feature('hgj3').feature('ja1').selection.set([551]);
model.physics('mbd').create('hgj4', 'HingeJoint', -1);
model.physics('mbd').feature('hgj4').set('Source', 'rd12');
model.physics('mbd').feature('hgj4').set('Destination', 'att2');
model.physics('mbd').feature('hgj4').set('AxisOfJointType', 'SelectEdge');
model.physics('mbd').feature('hgj4').feature('ja1').selection.set([660]);
model.physics('mbd').create('hgj5', 'HingeJoint', -1);
model.physics('mbd').feature('hgj5').set('Source', 'rd13');
model.physics('mbd').feature('hgj5').set('Destination', 'att3');
model.physics('mbd').feature('hgj5').set('AxisOfJointType', 'SelectEdge');
model.physics('mbd').feature('hgj5').feature('ja1').selection.set([1681]);
model.physics('mbd').create('hgj6', 'HingeJoint', -1);
model.physics('mbd').feature('hgj6').set('Source', 'rd8');
model.physics('mbd').feature('hgj6').set('Destination', 'att4');
model.physics('mbd').feature('hgj6').set('AxisOfJointType', 'SelectEdge');
model.physics('mbd').feature('hgj6').feature('ja1').selection.set([535]);
model.physics('mbd').create('hgj7', 'HingeJoint', -1);
model.physics('mbd').feature('hgj7').set('Source', 'rd8');
model.physics('mbd').feature('hgj7').set('Destination', 'att5');
model.physics('mbd').feature('hgj7').set('AxisOfJointType', 'SelectEdge');
model.physics('mbd').feature('hgj7').feature('ja1').selection.set([1053]);
model.physics('mbd').create('hgj8', 'HingeJoint', -1);
model.physics('mbd').feature('hgj8').set('Source', 'rd8');
model.physics('mbd').feature('hgj8').set('Destination', 'att6');
model.physics('mbd').feature('hgj8').set('AxisOfJointType', 'SelectEdge');
model.physics('mbd').feature('hgj8').feature('ja1').selection.set([1144]);

model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').selection.geom('geom1', 3);
model.variable('var2').selection.named('sel1');
model.variable('var2').set('alpha', '-mbd.hgj6.th');
model.variable('var2').descr('alpha', 'Angle of attack');
model.variable.create('var3');
model.variable('var3').model('comp1');
model.variable('var3').selection.geom('geom1', 3);
model.variable('var3').selection.named('sel2');
model.variable('var3').set('alpha', 'mbd.hgj7.th', 'Angle of attack');
model.variable('var3').descr('alpha', 'Angle of attack');
model.variable.create('var4');
model.variable('var4').model('comp1');
model.variable('var4').selection.geom('geom1', 3);
model.variable('var4').selection.named('sel3');
model.variable('var4').set('alpha', 'mbd.hgj8.th', 'Angle of attack');
model.variable('var4').descr('alpha', 'Angle of attack');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.set([3]);
model.cpl('intop1').set('frame', 'material');
model.cpl.duplicate('intop2', 'intop1');
model.cpl('intop2').selection.set([400]);
model.cpl.duplicate('intop3', 'intop2');
model.cpl('intop3').selection.set([714]);
model.cpl.duplicate('intop4', 'intop3');
model.cpl('intop4').selection.geom('geom1', 0);
model.cpl('intop4').selection.set([580]);

model.variable.create('var5');
model.variable('var5').model('comp1');
model.variable('var5').set('d', 'sqrt(x^2+y^2)');
model.variable('var5').descr('d', 'Distance from the center');
model.variable('var5').set('Ur', 'omega*d-vf*y/d');
model.variable('var5').descr('Ur', 'Relative velocity');
model.variable('var5').set('CL', '4*alpha');
model.variable('var5').descr('CL', 'Lift coefficient');
model.variable('var5').set('FL', '0.5*1[kg/m^3]*Ur^2*CL*sign(Ur)');
model.variable('var5').descr('FL', 'Lift force');
model.variable('var5').set('FL_tot1', 'intop1(FL)');
model.variable('var5').descr('FL_tot1', 'Total lift force - blade1');
model.variable('var5').set('FL_tot2', 'intop2(FL)');
model.variable('var5').descr('FL_tot2', 'Total lift force - blade2');
model.variable('var5').set('FL_tot3', 'intop3(FL)');
model.variable('var5').descr('FL_tot3', 'Total lift force - blade3');
model.variable('var5').set('alphaM', '9.4[deg]');
model.variable('var5').descr('alphaM', 'Mean angle of attack');
model.variable('var5').set('CL_alphaM', '4*alphaM');
model.variable('var5').descr('CL_alphaM', 'Mean lift coefficient');
model.variable('var5').set('FL_tot1_alphaM', 'intop1(0.5*1[kg/m^3]*Ur^2*CL_alphaM*sign(Ur))');
model.variable('var5').descr('FL_tot1_alphaM', 'Total lift force (mean)- blade1');
model.variable('var5').set('w_tip', 'intop4(w)');
model.variable('var5').descr('w_tip', 'Tip displacement z direction');

model.physics('mbd').create('bndl1', 'BoundaryLoad', 2);
model.physics('mbd').feature('bndl1').selection.set([3 400 714]);
model.physics('mbd').feature('bndl1').set('FperArea', {'0' '0' 'FL'});

model.nodeGroup.create('grp1', 'Physics', 'mbd');
model.nodeGroup('grp1').placeAfter('init1');
model.nodeGroup('grp1').add('rd1');
model.nodeGroup('grp1').add('rd2');
model.nodeGroup('grp1').add('rd3');
model.nodeGroup('grp1').add('rd4');
model.nodeGroup('grp1').add('rd5');
model.nodeGroup('grp1').add('rd6');
model.nodeGroup('grp1').add('rd7');
model.nodeGroup('grp1').add('rd8');
model.nodeGroup('grp1').add('rd9');
model.nodeGroup('grp1').add('rd10');
model.nodeGroup('grp1').add('rd11');
model.nodeGroup('grp1').add('rd12');
model.nodeGroup('grp1').add('rd13');
model.nodeGroup('grp1').add('rd14');
model.nodeGroup('grp1').add('rd15');
model.nodeGroup('grp1').add('rd16');
model.nodeGroup('grp1').label('Rigid Materials');
model.nodeGroup.create('grp2', 'Physics', 'mbd');
model.nodeGroup('grp2').placeAfter('init1');
model.nodeGroup('grp2').add('att1');
model.nodeGroup('grp2').add('att2');
model.nodeGroup('grp2').add('att3');
model.nodeGroup('grp2').add('att4');
model.nodeGroup('grp2').add('att5');
model.nodeGroup('grp2').add('att6');
model.nodeGroup('grp2').label('Attachments');
model.nodeGroup.create('grp3', 'Physics', 'mbd');
model.nodeGroup('grp3').placeAfter('init1');
model.nodeGroup('grp3').add('prj1');
model.nodeGroup('grp3').add('prj2');
model.nodeGroup('grp3').label('Prismatic Joints');
model.nodeGroup.create('grp4', 'Physics', 'mbd');
model.nodeGroup('grp4').placeAfter('rslj1');
model.nodeGroup('grp4').add('hgj1');
model.nodeGroup('grp4').add('hgj2');
model.nodeGroup('grp4').add('hgj3');
model.nodeGroup('grp4').add('hgj4');
model.nodeGroup('grp4').add('hgj5');
model.nodeGroup('grp4').add('hgj6');
model.nodeGroup('grp4').add('hgj7');
model.nodeGroup('grp4').add('hgj8');
model.nodeGroup('grp4').label('Hinge Joints');
model.nodeGroup.create('grp5', 'Physics', 'mbd');
model.nodeGroup('grp5').placeAfter('rslj1');
model.nodeGroup('grp5').add('blj1');
model.nodeGroup('grp5').add('blj2');
model.nodeGroup('grp5').add('blj3');
model.nodeGroup('grp5').add('blj4');
model.nodeGroup('grp5').add('blj5');
model.nodeGroup('grp5').add('blj6');
model.nodeGroup('grp5').add('blj7');
model.nodeGroup('grp5').add('blj8');
model.nodeGroup('grp5').label('Ball Joints');

model.study('std1').feature('time').set('tlist', 'range(0,0.001,0.3)');
model.study('std1').label('Study: Rigid Blades');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.052250745565808');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scaleval', '0.052250745565808');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*5.2250745565807994');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.001,0.3)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Displacement (mbd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 301, 0);
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (mbd)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 301, 0);
model.result('pg2').set('defaultPlotID', 'velocity');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').label('Volume');
model.result('pg2').feature('vol1').set('expr', 'mod(dom,10)');
model.result('pg2').feature('vol1').set('unit', '1');
model.result('pg2').feature('vol1').set('colortable', 'Cyclic');
model.result('pg2').feature('vol1').set('colorlegend', false);
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg2').feature('vol1').feature.create('def1', 'Deform');
model.result('pg2').feature('vol1').feature('def1').label('Deformation');
model.result('pg2').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg2').feature.create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').label('Arrow Line');
model.result('pg2').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY' 'mbd.u_tZ'});
model.result('pg2').feature('arwl1').set('placement', 'elements');
model.result('pg2').feature('arwl1').set('data', 'parent');
model.result('pg2').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg2').feature('arwl1').feature('def1').label('Deformation');
model.result('pg2').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg1').run;

model.physics('mbd').prop('Results').set('ReferenceFrame', 'att4');

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/mbd', true);
model.study('std2').feature('time').set('tlist', 'range(0,0.001,0.3)');
model.study('std2').feature('time').set('useadvanceddisable', true);
model.study('std2').feature('time').set('disabledphysics', {'mbd/rd14' 'mbd/rd15' 'mbd/rd16'});
model.study('std2').label('Study: Flexible Blades');
model.study('std2').setGenPlots(false);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_att_rot').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_jnt_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_att_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_att_rot').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_jnt_disp').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_att_disp').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.052250745565808');
model.sol('sol2').feature('v1').feature('comp1_mbd_att_rot').set('scaleval', '0.1');
model.sol('sol2').feature('v1').feature('comp1_mbd_jnt_disp').set('scaleval', '0.052250745565808');
model.sol('sol2').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol2').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol2').feature('v1').feature('comp1_mbd_att_disp').set('scaleval', '0.052250745565808');
model.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-2*5.2250745565807994');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,0.001,0.3)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 0.001);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol2').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('eventtol', 0.01);
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('minorder', 1);
model.sol('sol2').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol2').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol2').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol2').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol2').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol2').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol2').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol2').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol2').runAll;

model.result('pg1').run;

model.view('view1').set('showgrid', false);
model.view('view1').camera.set('zoomanglefull', 4.80118);
model.view('view1').camera.setIndex('position', -22.33969, 1);
model.view('view1').camera.setIndex('position', -20.16879, 0);
model.view('view1').camera.setIndex('position', 8.90362, 2);
model.view('view1').camera.setIndex('target', -0.01849, 0);
model.view('view1').camera.setIndex('target', -0.00188, 1);
model.view('view1').camera.setIndex('target', 0.3075, 2);
model.view('view1').camera.setIndex('up', 0.14811, 0);
model.view('view1').camera.setIndex('up', 0.23598, 1);
model.view('view1').camera.setIndex('up', 0.9604, 2);
model.view('view1').camera.setIndex('rotationpoint', -0.00188, 1);
model.view('view1').camera.setIndex('rotationpoint', -0.01848, 0);
model.view('view1').camera.setIndex('rotationpoint', 0.3075, 2);
model.view('view1').camera.setIndex('viewoffset', 0.02918, 0);
model.view('view1').camera.set('viewoffset', [0.02918 -0.05925]);

model.result('pg2').run;
model.result('pg2').set('view', 'new');
model.result('pg2').run;

model.view('view2').set('showgrid', false);
model.view('view2').set('locked', true);
model.view('view2').camera.set('zoomanglefull', '5.82790327072143550');
model.view('view2').camera.setIndex('position', '-16.0212020874023440', 0);
model.view('view2').camera.setIndex('position', '-21.8696937561035160', 1);
model.view('view2').camera.setIndex('position', '6.5783033370971680', 2);
model.view('view2').camera.setIndex('target', 1.087188720703125E-4, 0);
model.view('view2').camera.setIndex('target', '-0.50794601440429690', 1);
model.view('view2').camera.setIndex('target', '0.31434726715087890', 2);
model.view('view2').camera.setIndex('up', '0.137031629681587220', 0);
model.view('view2').camera.setIndex('up', '0.182708844542503360', 1);
model.view('view2').camera.setIndex('up', '0.9735707044601440', 2);
model.view('view2').camera.setIndex('rotationpoint', '-0.10087585449218750', 0);
model.view('view2').camera.setIndex('rotationpoint', '-0.69149017333984380', 1);
model.view('view2').camera.setIndex('rotationpoint', '0.59656715393066410', 2);
model.view('view2').camera.setIndex('viewoffset', '-0.0070089641958475110', 0);
model.view('view2').camera.setIndex('viewoffset', '-0.161172971129417420', 1);

model.result.dataset.duplicate('dset3', 'dset2');
model.result.dataset('dset3').selection.geom('geom1', 3);
model.result.dataset('dset3').selection.named('sel1');
model.result.dataset.duplicate('dset4', 'dset3');
model.result.dataset('dset4').selection.geom('geom1', 3);
model.result.dataset('dset4').selection.set([]);
model.result.dataset('dset4').selection.named('com1');
model.result('pg1').run;
model.result.duplicate('pg3', 'pg1');
model.result('pg3').run;
model.result('pg3').label('Displacement: Flexible Blade1');
model.result('pg3').set('data', 'dset3');
model.result('pg3').set('frametype', 'material');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('surf1').set('expr', 'mbd.disp_ref');
model.result('pg3').run;
model.result('pg3').feature('surf1').feature('def1').set('expr', {'u_ref' 'v_ref' 'w_ref'});
model.result('pg3').feature('surf1').feature('def1').set('scale', 50);
model.result('pg3').run;
model.result('pg3').set('view', 'new');
model.result('pg3').run;

model.view('view3').set('showgrid', false);
model.view('view3').set('locked', true);
model.view('view3').camera.set('zoomanglefull', 12.311409950256348);
model.view('view3').camera.set('position', [-0.9995189309120178 -4 3]);
model.view('view3').camera.setIndex('position', -0.6051123738288879, 1);
model.view('view3').camera.setIndex('position', 12.741739273071289, 2);
model.view('view3').camera.set('target', [-0.9995189309120178 0 0]);
model.view('view3').camera.setIndex('target', -0.6051123738288879, 1);
model.view('view3').camera.setIndex('target', 0.7098960876464844, 2);
model.view('view3').camera.set('up', [0 1 4.371138828673793E-8]);
model.view('view3').camera.set('rotationpoint', [0 -0.6051123738288879 0]);
model.view('view3').camera.setIndex('rotationpoint', 0.7098965644836426, 2);
model.view('view3').camera.set('viewoffset', {'-0.044732440263032910' '0'});
model.view('view3').camera.setIndex('viewoffset', '-0.0273865405470132830', 1);

model.result('pg3').run;
model.result('pg3').set('view', 'new');
model.result('pg3').run;

model.view('view4').set('showgrid', false);
model.view('view4').set('locked', true);
model.view('view4').camera.set('zoomanglefull', 7.5);
model.view('view4').camera.set('position', [11.016724586486816 -4 3]);
model.view('view4').camera.setIndex('position', -0.6032822728157043, 1);
model.view('view4').camera.setIndex('position', 0.7063717842102051, 2);
model.view('view4').camera.set('target', [-0.9995193481445312 0 0]);
model.view('view4').camera.setIndex('target', -0.6032822728157043, 1);
model.view('view4').camera.setIndex('target', 0.7098965644836426, 2);
model.view('view4').camera.set('up', [4.371138828673793E-8 0 1]);
model.view('view4').camera.set('rotationpoint', [0 -0.6032822728157043 0]);
model.view('view4').camera.setIndex('rotationpoint', 0.7098965644836426, 2);
model.view('view4').camera.set('viewoffset', [-0.044732432812452316 0]);
model.view('view4').camera.setIndex('viewoffset', -0.027646133676171303, 1);

model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Stress: Flexible Blade1');
model.result('pg4').set('data', 'dset2');
model.result('pg4').set('view', 'view1');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').run;
model.result('pg4').feature('surf1').set('data', 'dset3');
model.result('pg4').feature('surf1').set('solutionparams', 'parent');
model.result('pg4').feature('surf1').set('expr', 'mbd.mises');
model.result('pg4').feature('surf1').set('rangecoloractive', true);
model.result('pg4').feature('surf1').set('rangecolormin', 0);
model.result('pg4').feature('surf1').set('rangecolormax', '3e7');
model.result('pg4').run;
model.result('pg4').feature('surf1').feature('def1').set('expr', {'u' 'v' 'w+10*w_ref'});
model.result('pg4').feature('surf1').feature('def1').set('scale', 1);
model.result('pg4').run;
model.result('pg4').feature.duplicate('surf2', 'surf1');
model.result('pg4').run;
model.result('pg4').feature('surf2').set('data', 'dset4');
model.result('pg4').feature('surf2').set('expr', 'dom');
model.result('pg4').feature('surf2').set('titletype', 'none');
model.result('pg4').feature('surf2').set('coloring', 'uniform');
model.result('pg4').feature('surf2').set('color', 'gray');
model.result('pg4').run;
model.result('pg4').feature('surf2').feature('def1').set('expr', {'u' 'v' 'w'});
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Angle of Attack');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').setIndex('expr', '-mbd.hgj6.th', 0);
model.result('pg5').feature('glob1').setIndex('unit', 'deg', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'Relative rotation', 0);
model.result('pg5').feature('glob1').setIndex('expr', 'mbd.hgj7.th', 1);
model.result('pg5').feature('glob1').setIndex('unit', 'deg', 1);
model.result('pg5').feature('glob1').setIndex('descr', 'Relative rotation', 1);
model.result('pg5').feature('glob1').setIndex('expr', 'mbd.hgj8.th', 2);
model.result('pg5').feature('glob1').setIndex('unit', 'deg', 2);
model.result('pg5').feature('glob1').setIndex('descr', 'Relative rotation', 2);
model.result('pg5').feature('glob1').set('xdata', 'expr');
model.result('pg5').feature('glob1').set('xdataexpr', 'theta*180/pi');
model.result('pg5').feature('glob1').set('linewidth', 2);
model.result('pg5').feature('glob1').set('linemarker', 'cycle');
model.result('pg5').feature('glob1').set('markerpos', 'interp');
model.result('pg5').feature('glob1').set('legendmethod', 'manual');
model.result('pg5').feature('glob1').setIndex('legends', 'Angle of attack: blade1', 0);
model.result('pg5').feature('glob1').setIndex('legends', 'Angle of attack: blade2', 1);
model.result('pg5').feature('glob1').setIndex('legends', 'Angle of attack: blade3', 2);
model.result('pg5').run;
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'Angular rotation of rotor (deg)');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Angle of attack (deg)');
model.result('pg5').set('titletype', 'none');
model.result('pg5').run;
model.result('pg5').set('axislimits', true);
model.result('pg5').set('ymax', 25);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Total Lift Force');
model.result('pg6').setIndex('looplevelinput', 'interp', 0);
model.result('pg6').setIndex('interp', 'range(0,0.003,0.3)', 0);
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').set('expr', {'FL_tot1'});
model.result('pg6').feature('glob1').set('descr', {'Total lift force - blade1'});
model.result('pg6').feature('glob1').set('unit', {'N'});
model.result('pg6').feature('glob1').set('expr', {'FL_tot1' 'FL_tot2'});
model.result('pg6').feature('glob1').set('descr', {'Total lift force - blade1' 'Total lift force - blade2'});
model.result('pg6').feature('glob1').set('expr', {'FL_tot1' 'FL_tot2' 'FL_tot3'});
model.result('pg6').feature('glob1').set('descr', {'Total lift force - blade1' 'Total lift force - blade2' 'Total lift force - blade3'});
model.result('pg6').feature('glob1').set('xdata', 'expr');
model.result('pg6').feature('glob1').set('xdataexpr', 'theta*180/pi');
model.result('pg6').feature('glob1').set('linewidth', 2);
model.result('pg6').feature('glob1').set('linemarker', 'cycle');
model.result('pg6').feature('glob1').set('markerpos', 'interp');
model.result('pg6').run;
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'Angular rotation of rotor (deg)');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'Total lift force (N)');
model.result('pg6').set('titletype', 'none');
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Total Lift Force: Blade1');
model.result('pg7').setIndex('interp', 'range(0.1,0.003,0.3)', 0);
model.result('pg7').run;
model.result('pg7').feature('glob1').set('expr', {'FL_tot1'});
model.result('pg7').feature('glob1').set('descr', {'Total lift force - blade1'});
model.result('pg7').feature('glob1').set('unit', {'N'});
model.result('pg7').feature('glob1').set('expr', {'FL_tot1' 'FL_tot1_alphaM'});
model.result('pg7').feature('glob1').set('descr', {'Total lift force - blade1' 'Total lift force (mean)- blade1'});
model.result('pg7').run;
model.result('pg7').set('ylabel', 'Total lift force on blade1 (N)');
model.result('pg7').run;
model.result('pg7').set('legendpos', 'upperleft');
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Tip Displacement');
model.result('pg8').create('glob1', 'Global');
model.result('pg8').feature('glob1').set('markerpos', 'datapoints');
model.result('pg8').feature('glob1').set('linewidth', 'preference');
model.result('pg8').feature('glob1').set('data', 'dset1');
model.result('pg8').feature('glob1').set('expr', {'w_tip'});
model.result('pg8').feature('glob1').set('descr', {'Tip displacement z direction'});
model.result('pg8').feature('glob1').set('unit', {'m'});
model.result('pg8').feature('glob1').setIndex('unit', 'mm', 0);
model.result('pg8').feature('glob1').setIndex('descr', 'Tip displacement z direction', 0);
model.result('pg8').feature('glob1').set('xdata', 'expr');
model.result('pg8').feature('glob1').set('xdataexpr', 'theta*180/pi');
model.result('pg8').feature('glob1').set('linewidth', 2);
model.result('pg8').feature('glob1').set('linemarker', 'cycle');
model.result('pg8').feature('glob1').set('markerpos', 'interp');
model.result('pg8').feature('glob1').set('legendmethod', 'manual');
model.result('pg8').feature('glob1').setIndex('legends', 'Tip disp. z direction (Rigid blades)', 0);
model.result('pg8').feature.duplicate('glob2', 'glob1');
model.result('pg8').run;
model.result('pg8').feature('glob2').set('data', 'dset3');
model.result('pg8').feature('glob2').setIndex('legends', 'Tip disp. z direction (Flexible blades)', 0);
model.result('pg8').run;
model.result('pg8').set('legendpos', 'upperleft');
model.result('pg8').set('titletype', 'none');
model.result('pg8').set('xlabelactive', true);
model.result('pg8').set('xlabel', 'Angular rotation of rotor (deg)');
model.result('pg8').run;

model.study.create('std3');
model.study('std3').create('eig', 'Eigenfrequency');
model.study('std3').feature('eig').set('plotgroup', 'Default');
model.study('std3').feature('eig').set('chkeigregion', true);
model.study('std3').feature('eig').set('conrad', '1');
model.study('std3').feature('eig').set('conradynhm', '1');
model.study('std3').feature('eig').set('storefact', false);
model.study('std3').feature('eig').set('solnum', 'auto');
model.study('std3').feature('eig').set('notsolnum', 'auto');
model.study('std3').feature('eig').set('outputmap', {});
model.study('std3').feature('eig').set('ngenAUX', '1');
model.study('std3').feature('eig').set('goalngenAUX', '1');
model.study('std3').feature('eig').set('ngenAUX', '1');
model.study('std3').feature('eig').set('goalngenAUX', '1');
model.study('std3').feature('eig').setSolveFor('/physics/mbd', true);
model.study('std3').feature('eig').set('neigsactive', true);
model.study('std3').feature('eig').set('neigs', 20);
model.study('std3').feature('eig').set('useadvanceddisable', true);
model.study('std3').feature('eig').set('disabledphysics', {'mbd/rd14' 'mbd/rd15' 'mbd/rd16' 'mbd/prj1/pm1' 'mbd/prj2/pm1' 'mbd/rslj1/pm1'});
model.study('std3').label('Study: Flexible Blades[Eigenfrequency]');

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'eig');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_mbd_att_rot').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_mbd_jnt_disp').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_mbd_att_disp').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol3').feature('v1').feature('comp1_mbd_att_rot').set('resscalemethod', 'parent');
model.sol('sol3').feature('v1').feature('comp1_mbd_jnt_disp').set('resscalemethod', 'parent');
model.sol('sol3').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol3').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol3').feature('v1').feature('comp1_mbd_att_disp').set('resscalemethod', 'parent');
model.sol('sol3').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.052250745565808');
model.sol('sol3').feature('v1').feature('comp1_mbd_att_rot').set('scaleval', '0.1');
model.sol('sol3').feature('v1').feature('comp1_mbd_jnt_disp').set('scaleval', '0.052250745565808');
model.sol('sol3').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol3').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol3').feature('v1').feature('comp1_mbd_att_disp').set('scaleval', '0.052250745565808');
model.sol('sol3').feature('v1').feature('comp1_u').set('scaleval', '1e-2*5.2250745565807994');
model.sol('sol3').feature('v1').set('control', 'eig');
model.sol('sol3').create('e1', 'Eigenvalue');
model.sol('sol3').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol3').feature('e1').set('eigvfunscaleparam', '5.23E-6');
model.sol('sol3').feature('e1').set('control', 'eig');
model.sol('sol3').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').label('Mode Shape (mbd)');
model.result('pg9').set('data', 'dset5');
model.result('pg9').setIndex('looplevel', 1, 0);
model.result('pg9').set('showlegends', 'off');
model.result('pg9').set('data', 'dset5');
model.result('pg9').setIndex('looplevel', 1, 0);
model.result('pg9').set('defaultPlotID', 'modeShape');
model.result('pg9').feature.create('surf1', 'Surface');
model.result('pg9').feature('surf1').label('Surface');
model.result('pg9').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg9').feature('surf1').set('data', 'parent');
model.result('pg9').feature('surf1').feature.create('def1', 'Deform');
model.result('pg9').feature('surf1').feature('def1').label('Deformation');
model.result.evaluationGroup.create('std3EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std3EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_mbd');
model.result.evaluationGroup('std3EvgFrq').set('data', 'dset5');
model.result.evaluationGroup('std3EvgFrq').label('Eigenfrequencies (Study: Flexible Blades[Eigenfrequency])');
model.result.evaluationGroup('std3EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std3EvgFrq').run;
model.result('pg9').run;
model.result('pg9').set('looplevel', [6]);
model.result('pg9').run;
model.result('pg9').run;
model.result('pg9').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg9').feature('surf1').feature('def1').set('scale', 0.02);

model.view('view1').camera.set('zoomanglefull', 12.47314);
model.view('view1').camera.setIndex('position', -14.13765, 0);
model.view('view1').camera.setIndex('position', -18.34599, 1);
model.view('view1').camera.setIndex('position', 14.46585, 2);
model.view('view1').camera.setIndex('target', '7.54356e-4', 0);
model.view('view1').camera.setIndex('target', 0.32744, 2);
model.view('view1').camera.setIndex('target', 0.50522, 1);
model.view('view1').camera.setIndex('up', 0.3087, 0);
model.view('view1').camera.setIndex('up', 0.4116, 1);
model.view('view1').camera.setIndex('up', 0.85749, 2);
model.view('view1').camera.setIndex('rotationpoint', '7.54118e-4', 0);
model.view('view1').camera.setIndex('rotationpoint', 0.32744, 2);
model.view('view1').camera.setIndex('rotationpoint', 0.50522, 1);
model.view('view1').camera.setIndex('viewoffset', -0.16501, 0);
model.view('view1').camera.set('viewoffset', [-0.16501 0.0492]);
model.view('view1').set('locked', true);

model.result('pg9').run;
model.result('pg9').set('view', 'view1');
model.result('pg9').run;
model.result('pg9').set('looplevel', [16]);
model.result('pg9').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').set('maxframes', 50);
model.result.export.duplicate('anim2', 'anim1');
model.result.export('anim2').showFrame;
model.result.export('anim2').set('plotgroup', 'pg3');
model.result.export.duplicate('anim3', 'anim2');
model.result.export('anim3').showFrame;
model.result.export('anim3').set('plotgroup', 'pg4');
model.result('pg4').run;
model.result('pg4').set('view', 'view2');
model.result('pg4').run;

model.title('Helicopter Swashplate Mechanism');

model.description('This example illustrates the modeling of a swashplate mechanism, used to control the orientation of helicopter rotor blades. The rotor blades are modeled as both rigid and flexible in two different cases. The deformation of the rotor blades, rotating about two different axes, is computed. The other parts of the mechanism are modeled as rigid. An eigenfrequency analysis of this mechanism is also performed.');

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('helicopter_swashplate.mph');

model.modelNode.label('Components');

out = model;
