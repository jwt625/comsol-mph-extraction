function out = model
%
% large_deformation_beam.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics.create('beam', 'HermitianBeam', 'geom1');
model.physics('beam').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/physics/beam', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('F_Lx', '-3.844[MN]', 'Maximum compressive load');
model.param.set('F_Ly', '1e-3*F_Lx', 'Transverse load');
model.param.set('NCL', '0', 'Normalized compressive load');
model.param.set('d', '0.1[m]', 'Cross-section dimension of the beam');
model.param.set('l', '3.2[m]', 'Length of the beam');
model.param.set('vMax_Ref', '-2.58[m]', 'Reference value for maximum vertical displacement at the tip');
model.param.set('vFinal_Ref', '-1.36[m]', 'Reference value for final vertical displacement at the tip');
model.param.set('uFinal_Ref', '-5.04[m]', 'Reference value for final horizontal displacement at the tip');
model.param.set('I', 'd^4/12', 'Area moment of inertia of the beam');
model.param.set('Fcr', 'pi^2*2.1e5[MPa]*I/(4*l^2)', 'First critical buckling load');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'l' 'd'});
model.geom('geom1').run('r1');
model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'table');
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('pol1').setIndex('table', '5*d', 0, 1);
model.geom('geom1').feature('pol1').setIndex('table', 'l', 1, 0);
model.geom('geom1').feature('pol1').setIndex('table', '5*d', 1, 1);
model.geom('geom1').runPre('fin');
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', '');
model.material('mat1').propertyGroup('def').set('density', '');
model.material('mat1').propertyGroup('def').set('poissonsratio', '');
model.material('mat1').propertyGroup('def').set('youngsmodulus', '');
model.material('mat1').propertyGroup('def').set('density', {'7850'});
model.material('mat1').propertyGroup('def').set('poissonsratio', {'0'});
model.material('mat1').propertyGroup('def').set('youngsmodulus', {'2.1e5[MPa]'});
model.material.create('matlnk1', 'Link', 'comp1');
model.material.create('matlnk2', 'Link', 'comp1');
model.material('matlnk2').selection.geom('geom1', 1);
model.material('matlnk2').selection.set([4]);

model.physics('solid').prop('Type2D').set('Type2D', 'PlaneStress');
model.physics('solid').prop('d').set('d', 'd');
model.physics('solid').create('fix1', 'Fixed', 1);
model.physics('solid').feature('fix1').selection.set([1]);
model.physics('solid').create('bndl1', 'BoundaryLoad', 1);
model.physics('solid').feature('bndl1').selection.set([5]);
model.physics('solid').feature('bndl1').set('LoadType', 'TotalForce');
model.physics('solid').feature('bndl1').set('Ftot', {'NCL*F_Lx' 'F_Ly' '0'});
model.physics('beam').selection.set([4]);
model.physics('beam').feature('csd1').set('SectionType', 'RectangularSection');
model.physics('beam').feature('csd1').set('hy_rect', 'd');
model.physics('beam').feature('csd1').set('hz_rect', 'd');
model.physics('beam').create('fix1', 'Fixed', 0);
model.physics('beam').feature('fix1').selection.set([3]);
model.physics('beam').create('pl1', 'PointLoad', 0);
model.physics('beam').feature('pl1').set('Fp', {'NCL*F_Lx' 'F_Ly' '0'});
model.physics('beam').feature('pl1').selection.set([6]);
model.physics('beam').feature.duplicate('pl2', 'pl1');
model.physics('beam').feature('pl2').set('Fp', [-1 0 0]);

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.set([2 3 4]);
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').selection.all;
model.mesh('mesh1').feature('edg1').feature('dis1').selection.set([4]);
model.mesh('mesh1').feature('edg1').feature('dis1').set('numelem', 40);
model.mesh('mesh1').feature('edg1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis2').selection.all;
model.mesh('mesh1').feature('edg1').feature('dis2').selection.set([2 3]);
model.mesh('mesh1').feature('edg1').feature('dis2').set('numelem', 20);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').run;

model.study('std1').feature('stat').set('geometricNonlinearity', true);
model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledphysics', {'beam/pl2'});
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'F_Lx', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'N', 0);
model.study('std1').feature('stat').setIndex('pname', 'F_Lx', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'N', 0);
model.study('std1').feature('stat').setIndex('pname', 'NCL', 0);
model.study('std1').feature('stat').setIndex('plistarr', 'range(0,0.01,1)', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runFromTo('st1', 'v1');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').set('resolution', 'normal');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('scaleactive', true);
model.result('pg1').feature('surf1').feature('def').set('scale', '1');
model.result('pg1').feature('surf1').feature('def').set('expr', {'u' 'v'});
model.result('pg1').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').set('defaultPlotID', 'stress');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').create('line1', 'Line');
model.result('pg2').feature('line1').set('expr', {'beam.mises'});
model.result('pg2').feature('line1').set('threshold', 'manual');
model.result('pg2').feature('line1').set('thresholdvalue', 0.2);
model.result('pg2').feature('line1').set('colortable', 'Rainbow');
model.result('pg2').feature('line1').set('colortabletrans', 'none');
model.result('pg2').feature('line1').set('colorscalemode', 'linear');
model.result('pg2').label('Stress (beam)');
model.result('pg2').feature('line1').set('colortable', 'Rainbow');
model.result('pg2').feature('line1').set('linetype', 'tube');
model.result('pg2').feature('line1').set('radiusexpr', 'beam.re');
model.result('pg2').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg2').feature('line1').set('tuberadiusscale', 1);
model.result('pg2').feature('line1').set('tubeendcaps', false);
model.result('pg2').feature('line1').create('def', 'Deform');
model.result('pg2').feature('line1').feature('def').set('scaleactive', true);
model.result('pg2').feature('line1').feature('def').set('scale', '1');
model.result('pg2').feature('line1').feature('def').set('expr', {'u2' 'v2'});
model.result('pg2').feature('line1').feature('def').set('descr', 'Displacement field');
model.result('pg1').run;

model.sol('sol1').feature('s1').set('stol', '1e-4');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').set('segterm', 'iter');
model.sol('sol1').feature('s1').feature('se1').feature('ssDef').set('segvar', {'comp1_solid_wZ' 'comp1_u'});
model.sol('sol1').feature('s1').feature('se1').feature('ssDef').set('subtermconst', 'tol');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_beam_thLin' 'comp1_beam_uLin'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subdtech', 'auto');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('maxsubiter', 200);
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subntolfact', 1);

model.study('std1').feature('stat').set('plot', true);
model.study('std1').feature('stat').set('plotgroup', 'pg2');

model.sol('sol1').runAll;

model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').feature('line1').set('unit', 'MPa');
model.result('pg1').run;
model.result('pg1').feature.copy('line1', 'pg2/line1');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').set('unit', 'MPa');
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').run;
model.result('pg1').feature('line1').set('inheritplot', 'surf1');
model.result('pg1').feature('line1').set('inherittubescale', false);
model.result('pg1').run;
model.result('pg1').label('Stress (solid and beam)');
model.result('pg1').set('frametype', 'material');
model.result('pg1').run;
model.result.dataset.create('cpt1', 'CutPoint2D');
model.result.dataset('cpt1').set('pointx', 'l');
model.result.dataset('cpt1').set('pointy', 'd/2');
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Tip Displacement');
model.result('pg3').set('data', 'cpt1');
model.result('pg3').create('ptgr1', 'PointGraph');
model.result('pg3').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg3').feature('ptgr1').set('linewidth', 'preference');
model.result('pg3').feature('ptgr1').set('expr', 'u');
model.result('pg3').feature('ptgr1').set('descr', 'Displacement field, X-component');
model.result('pg3').feature('ptgr1').set('linewidth', 3);
model.result('pg3').feature('ptgr1').set('legend', true);
model.result('pg3').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg3').feature('ptgr1').setIndex('legends', 'u (solid)', 0);
model.result('pg3').run;
model.result('pg3').create('ptgr2', 'PointGraph');
model.result('pg3').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg3').feature('ptgr2').set('linewidth', 'preference');
model.result('pg3').feature('ptgr2').set('expr', 'v');
model.result('pg3').feature('ptgr2').set('descr', 'Displacement field, Y-component');
model.result('pg3').feature('ptgr2').set('linestyle', 'dashed');
model.result('pg3').feature('ptgr2').set('linewidth', 3);
model.result('pg3').feature('ptgr2').set('legend', true);
model.result('pg3').feature('ptgr2').set('legendmethod', 'manual');
model.result('pg3').feature('ptgr2').setIndex('legends', 'v (solid)', 0);
model.result('pg3').run;
model.result('pg3').create('ptgr3', 'PointGraph');
model.result('pg3').feature('ptgr3').set('markerpos', 'datapoints');
model.result('pg3').feature('ptgr3').set('linewidth', 'preference');
model.result('pg3').feature('ptgr3').set('data', 'dset1');
model.result('pg3').feature('ptgr3').selection.set([6]);
model.result('pg3').feature('ptgr3').set('expr', 'u2');
model.result('pg3').feature('ptgr3').set('descr', 'Displacement field, X-component');
model.result('pg3').feature('ptgr3').set('linestyle', 'dotted');
model.result('pg3').feature('ptgr3').set('linemarker', 'asterisk');
model.result('pg3').feature('ptgr3').set('markerpos', 'interp');
model.result('pg3').feature('ptgr3').set('linewidth', 3);
model.result('pg3').feature('ptgr3').set('legend', true);
model.result('pg3').feature('ptgr3').set('legendmethod', 'manual');
model.result('pg3').feature('ptgr3').setIndex('legends', 'u (beam)', 0);
model.result('pg3').feature.duplicate('ptgr4', 'ptgr3');
model.result('pg3').run;
model.result('pg3').feature('ptgr4').set('expr', 'v2');
model.result('pg3').feature('ptgr4').set('descr', 'Displacement field, Y-component');
model.result('pg3').feature('ptgr4').set('linemarker', 'circle');
model.result('pg3').feature('ptgr4').setIndex('legends', 'v (beam)', 0);
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Tip displacement components (m) vs. normalized compressive load');
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'Tip displacement');
model.result('pg3').run;
model.result.numerical.create('pev1', 'EvalPoint');
model.result.numerical('pev1').set('data', 'cpt1');
model.result.numerical('pev1').setIndex('looplevelinput', 'last', 0);
model.result.numerical('pev1').set('expr', {'u'});
model.result.numerical('pev1').set('descr', {'Displacement field, X-component'});
model.result.numerical('pev1').set('unit', {'m'});
model.result.numerical('pev1').setIndex('expr', 'u', 0);
model.result.numerical('pev1').setIndex('unit', 'm', 0);
model.result.numerical('pev1').setIndex('descr', 'Solid: x-disp', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Point Evaluation 1');
model.result.numerical('pev1').set('table', 'tbl1');
model.result.numerical('pev1').setResult;
model.result.numerical.duplicate('pev2', 'pev1');
model.result.numerical('pev2').set('data', 'dset1');
model.result.numerical('pev2').selection.set([6]);
model.result.numerical('pev2').setIndex('expr', 'u2', 0);
model.result.numerical('pev2').setIndex('unit', 'm', 0);
model.result.numerical('pev2').setIndex('descr', 'Beam: x-disp', 0);
model.result.numerical('pev2').setIndex('expr', 'uFinal_Ref', 1);
model.result.numerical('pev2').setIndex('unit', 'm', 1);
model.result.numerical('pev2').setIndex('descr', 'Reference value for final horizontal displacement at the tip', 1);
model.result.numerical('pev2').set('table', 'tbl1');
model.result.numerical('pev2').appendResult;
model.result.numerical.duplicate('pev3', 'pev1');
model.result.numerical('pev3').setIndex('expr', 'v', 0);
model.result.numerical('pev3').setIndex('unit', 'm', 0);
model.result.numerical('pev3').setIndex('descr', 'Solid: y-disp', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Point Evaluation 3');
model.result.numerical('pev3').set('table', 'tbl2');
model.result.numerical('pev3').setResult;
model.result.numerical.duplicate('pev4', 'pev2');
model.result.numerical('pev4').setIndex('expr', 'v2', 0);
model.result.numerical('pev4').setIndex('unit', 'm', 0);
model.result.numerical('pev4').setIndex('descr', 'Beam: y-disp', 0);
model.result.numerical('pev4').setIndex('expr', 'vFinal_Ref', 1);
model.result.numerical('pev4').setIndex('unit', 'm', 1);
model.result.numerical('pev4').setIndex('descr', 'Reference value for final vertical displacement at the tip', 1);
model.result.numerical('pev4').set('table', 'tbl2');
model.result.numerical('pev4').appendResult;
model.result.numerical.duplicate('pev5', 'pev3');
model.result.numerical('pev5').setIndex('looplevelinput', 'all', 0);
model.result.numerical('pev5').setIndex('expr', 'abs(v)', 0);
model.result.numerical('pev5').setIndex('unit', 'm', 0);
model.result.numerical('pev5').setIndex('descr', 'Solid: y-disp', 0);
model.result.numerical('pev5').set('dataseries', 'maximum');
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').comments('Point Evaluation 5');
model.result.numerical('pev5').set('table', 'tbl3');
model.result.numerical('pev5').setResult;
model.result.numerical.duplicate('pev6', 'pev4');
model.result.numerical('pev6').setIndex('looplevelinput', 'all', 0);
model.result.numerical('pev6').setIndex('expr', 'abs(v2)', 0);
model.result.numerical('pev6').setIndex('unit', 'm', 0);
model.result.numerical('pev6').setIndex('descr', 'Beam: y-disp', 0);
model.result.numerical('pev6').setIndex('expr', 'abs(vMax_Ref)', 1);
model.result.numerical('pev6').setIndex('unit', 'm', 1);
model.result.numerical('pev6').setIndex('descr', '', 1);
model.result.numerical('pev6').set('dataseries', 'maximum');
model.result.numerical('pev6').set('table', 'tbl3');
model.result.numerical('pev6').appendResult;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').set('plotgroup', 'Default');
model.study('std2').feature('stat').set('solnum', 'auto');
model.study('std2').feature('stat').set('notsolnum', 'auto');
model.study('std2').feature('stat').set('outputmap', {});
model.study('std2').feature('stat').set('ngenAUX', '1');
model.study('std2').feature('stat').set('goalngenAUX', '1');
model.study('std2').feature('stat').set('ngenAUX', '1');
model.study('std2').feature('stat').set('goalngenAUX', '1');
model.study('std2').feature('stat').setSolveFor('/physics/solid', true);
model.study('std2').feature('stat').setSolveFor('/physics/beam', true);
model.study('std2').create('buckling', 'LinearBuckling');
model.study('std2').feature('buckling').set('plotgroup', 'Default');
model.study('std2').feature('buckling').set('neigsactive', true);
model.study('std2').feature('buckling').set('solnum', 'auto');
model.study('std2').feature('buckling').set('notsolnum', 'auto');
model.study('std2').feature('buckling').set('outputmap', {});
model.study('std2').feature('buckling').set('ngenAUX', '1');
model.study('std2').feature('buckling').set('goalngenAUX', '1');
model.study('std2').feature('buckling').set('ngenAUX', '1');
model.study('std2').feature('buckling').set('goalngenAUX', '1');
model.study('std2').feature('buckling').setSolveFor('/physics/solid', true);
model.study('std2').feature('buckling').setSolveFor('/physics/beam', true);
model.study('std2').feature('stat').set('useadvanceddisable', true);
model.study('std2').feature('stat').setSolveFor('/physics/solid', false);
model.study('std2').feature('stat').set('disabledphysics', {'solid' 'beam/pl1'});
model.study('std2').feature('buckling').set('useadvanceddisable', true);
model.study('std2').feature('buckling').setSolveFor('/physics/solid', false);
model.study('std2').feature('buckling').set('disabledphysics', {'solid' 'beam/pl1'});

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').create('st2', 'StudyStep');
model.sol('sol2').feature('st2').set('study', 'std2');
model.sol('sol2').feature('st2').set('studystep', 'buckling');
model.sol('sol2').create('v2', 'Variables');
model.sol('sol2').feature('v2').set('initmethod', 'sol');
model.sol('sol2').feature('v2').set('initsol', 'sol2');
model.sol('sol2').feature('v2').set('initsoluse', 'sol3');
model.sol('sol2').feature('v2').set('notsolmethod', 'sol');
model.sol('sol2').feature('v2').set('notsol', 'sol2');
model.sol('sol2').feature('v2').set('control', 'buckling');
model.sol('sol2').create('e1', 'Eigenvalue');
model.sol('sol2').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol2').feature('e1').set('eigvfunscaleparam', '3.24E-6');
model.sol('sol2').feature('e1').set('control', 'buckling');
model.sol('sol2').feature('e1').set('linpmethod', 'sol');
model.sol('sol2').feature('e1').set('linpsol', 'sol2');
model.sol('sol2').feature('e1').set('linpsoluse', 'sol3');
model.sol('sol2').feature('e1').set('control', 'buckling');
model.sol('sol2').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('v2').set('notsolnum', 'auto');
model.sol('sol2').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.dataset('dset2').set('frametype', 'spatial');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('defaultPlotID', 'modeShape');
model.result('pg4').set('showlegends', false);
model.result('pg4').create('line1', 'Line');
model.result('pg4').feature('line1').set('expr', {'beam.disp'});
model.result('pg4').feature('line1').set('threshold', 'manual');
model.result('pg4').feature('line1').set('thresholdvalue', 0.2);
model.result('pg4').feature('line1').set('colortable', 'Rainbow');
model.result('pg4').feature('line1').set('colortabletrans', 'none');
model.result('pg4').feature('line1').set('colorscalemode', 'linear');
model.result('pg4').label('Mode Shape (beam)');
model.result('pg4').feature('line1').set('colortable', 'AuroraBorealis');
model.result('pg4').feature('line1').set('linetype', 'tube');
model.result('pg4').feature('line1').set('radiusexpr', 'beam.re');
model.result('pg4').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg4').feature('line1').set('tuberadiusscale', 1);
model.result('pg4').feature('line1').set('tubeendcaps', false);
model.result('pg4').feature('line1').create('def', 'Deform');
model.result('pg4').feature('line1').feature('def').set('expr', {'u2' 'v2'});
model.result('pg4').feature('line1').feature('def').set('descr', 'Displacement field');
model.result('pg4').run;
model.result.numerical.create('pev7', 'EvalPoint');
model.result.numerical('pev7').set('data', 'dset2');
model.result.numerical('pev7').selection.set([6]);
model.result.numerical('pev7').setIndex('expr', 'Fcr', 0);
model.result.numerical('pev7').setIndex('unit', 'N', 0);
model.result.numerical('pev7').setIndex('descr', 'First critical buckling load', 0);
model.result.table.create('tbl4', 'Table');
model.result.table('tbl4').comments('Point Evaluation 7');
model.result.numerical('pev7').set('table', 'tbl4');
model.result.numerical('pev7').setResult;
model.result('pg3').run;

model.title('Large Deformation Analysis of a Beam');

model.description('The beam is modeled using both the Solid Mechanics interface and the Beam interface. The results are compared with each other and with a benchmark solution from NAFEMS. In addition, a linear buckling analysis is performed and the critical load obtained from this study is compared with Euler''s critical load.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('large_deformation_beam.mph');

model.modelNode.label('Components');

out = model;
