function out = model
%
% li_air_battery_1d.m
%
% Model exported on May 26 2025, 21:26 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Battery_Design_Module/Batteries,_Lithium-Ion');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 1);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('liion', 'LithiumIonBatteryMPH', 'geom1');
model.physics('liion').model('comp1');
model.physics('liion').field('concentration').field('cLi');
model.physics.create('tds', 'DilutedSpeciesInPorousMedia', 'geom1', {'cO2'});
model.physics.create('dode', 'DomainODE', 'geom1', {'ecLi2O2'});
model.physics('dode').prop('EquationForm').set('form', 'Automatic');
model.physics('dode').prop('Units').set('DependentVariableQuantity', 'concentration');
model.physics('dode').prop('Units').set('SourceTermQuantity', 'reactionrate');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/liion', true);
model.study('std1').feature('time').setSolveFor('/physics/tds', true);
model.study('std1').feature('time').setSolveFor('/physics/dode', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('Lsep', '5e-5[m]', 'Length of Separator');
model.param.set('Lpos', '7.5e-4[m]', 'Length of positive electrode');
model.param.set('Kpos', '10[S/m]', 'Conductivity of positive electrode');
model.param.set('epsilonl0', '0.73', 'Initial porosity of positive electrode');
model.param.set('epsilons0', '1-epsilonl0', 'Initial active material solid fraction of positive electrode');
model.param.set('epsilonsep', '0.87', 'Porosity of separator');
model.param.set('rpos0', '25e-9[m]', 'Particle radius in the positive electrode');
model.param.set('apos0', '3*epsilons0/rpos0', 'Initial active specific surface area in positive electrode');
model.param.set('Rfilm', '50[ohm*m^2]', 'Film resistance across Li2O2 film');
model.param.set('cLi0', '1000[mol/m^3]', 'Initial concentration of Li+ in electrolyte');
model.param.set('SolO2', '0.40', 'Solubility factor of oxygen in electrolyte');
model.param.set('cO2ext', '9.46[mol/m^3]', 'External oxygen concentration in air at 1atm');
model.param.set('cO20', 'SolO2*cO2ext', 'Initial oxygen concentration in positive electrode');
model.param.set('cmaxLi2O2', '0.09[mol/m^3]', 'Solubility limit of Li2O2 dissolved in electrolyte');
model.param.set('DLi', '2.11e-9[m^2/s]', 'Diffusion coefficient of Li+ in electrolyte');
model.param.set('DO2', '7e-10[m^2/s]', 'Oxygen diffusion coefficient');
model.param.set('kappaLi', '1.085[S/m]', 'Conductivity of Li+ in electrolyte');
model.param.set('tplus', '0.2594', 'Transference number of Li+ in electrolyte');
model.param.set('dlnfdlnc', '-1.03', 'Activity dependence');
model.param.set('ka', '1.11e-15[m/s]', 'Reaction rate coefficient anodic current');
model.param.set('kc', '3.4e-17[m^7/s/mol^2]', 'Reaction rate coefficient cathodic current');
model.param.set('i0refLi', '9.65e-1[A/m^2]', 'Reference exchange current density Li metal');
model.param.set('Eeq', '2.96[V]', 'Equilibrium potential for oxygen reduction reaction');
model.param.set('n', '2', 'Number of transferred electrons');
model.param.set('rhoLi2O2', '2140[kg/m^3]', 'Density of Li2O2');
model.param.set('MLi2O2', '45.88e-3[kg/mol]', 'Molecular weight of Li2O2');
model.param.set('rhocarbon', '2260[kg/m^3]', 'Density of carbon');
model.param.set('T', '300[K]', 'Temperature');
model.param.set('i_app', '-0.05*a[mA/cm^2]', 'Applied current density');
model.param.set('a', '1', 'Used in parametric sweep');

model.geom('geom1').create('i1', 'Interval');
model.geom('geom1').feature('i1').set('specify', 'len');
model.geom('geom1').feature('i1').setIndex('len', 'Lsep', 0);
model.geom('geom1').feature('i1').setIndex('len', 'Lpos', 1);
model.geom('geom1').run('fin');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').selection.geom('geom1', 1);
model.variable('var1').selection.set([2]);

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('epsilonLi2O2', 'liion.deltaepstot_pce1', 'Volume fraction of Li2O2');
model.variable('var1').set('capacity', 'abs(i_app)*t/(epsilons0*Lpos*rhocarbon*3600)', 'Specific capacity of cell');
model.variable('var1').set('cLi2O2', 'ecLi2O2/epsilonl0', 'Concentration of Li2O2 based on  volume of solution in pores');
model.variable('var1').set('apos', 'apos0*(1-max((epsilonLi2O2/epsilonl0),eps)^0.5)', 'Active specific surface area in positive electrode');
model.variable('var1').set('CRpos', 'ka*min(cLi2O2,cmaxLi2O2)*(n*F_const)/(1[A/m^2])', 'Reduced species expression for positive electrode');
model.variable('var1').set('COpos', 'kc*cLi^2*cO2*(n*F_const)/(1[A/m^2])', 'Oxidized species expression for positive electrode');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'EndTerminal');
model.cpl('intop1').selection.geom('geom1', 0);
model.cpl('intop1').selection.set([3]);

model.physics('liion').feature('sep1').set('sigmal_mat', 'userdef');
model.physics('liion').feature('sep1').set('sigmal', {'kappaLi' '0' '0' '0' 'kappaLi' '0' '0' '0' 'kappaLi'});
model.physics('liion').feature('sep1').set('Dl_mat', 'userdef');
model.physics('liion').feature('sep1').set('Dl', 'DLi');
model.physics('liion').feature('sep1').set('transpNum_mat', 'userdef');
model.physics('liion').feature('sep1').set('transpNum', 'tplus');
model.physics('liion').feature('sep1').set('fcl_mat', 'userdef');
model.physics('liion').feature('sep1').set('fcl', 'dlnfdlnc');
model.physics('liion').feature('sep1').set('epsl', 'epsilonsep');
model.physics('liion').create('pce1', 'PorousElectrode', 1);
model.physics('liion').feature('pce1').selection.set([2]);
model.physics('liion').feature('pce1').set('sigmal_mat', 'userdef');
model.physics('liion').feature('pce1').set('sigmal', {'kappaLi' '0' '0' '0' 'kappaLi' '0' '0' '0' 'kappaLi'});
model.physics('liion').feature('pce1').set('Dl_mat', 'userdef');
model.physics('liion').feature('pce1').set('Dl', 'DLi');
model.physics('liion').feature('pce1').set('transpNum_mat', 'userdef');
model.physics('liion').feature('pce1').set('transpNum', 'tplus');
model.physics('liion').feature('pce1').set('fcl_mat', 'userdef');
model.physics('liion').feature('pce1').set('fcl', 'dlnfdlnc');
model.physics('liion').feature('pce1').set('sigma', {'Kpos' '0' '0' '0' 'Kpos' '0' '0' '0' 'Kpos'});
model.physics('liion').feature('pce1').set('IntercalationOption', 'NonIntercalatingParticles');
model.physics('liion').feature('pce1').set('epss', 'epsilons0');
model.physics('liion').feature('pce1').set('epsl', 'epsilonl0');
model.physics('liion').feature('pce1').setIndex('Species', 's1', 0, 0);
model.physics('liion').feature('pce1').setIndex('rhos', 8960, 0, 0);
model.physics('liion').feature('pce1').setIndex('Ms', 0.06355, 0, 0);
model.physics('liion').feature('pce1').setIndex('Species', 's1', 0, 0);
model.physics('liion').feature('pce1').setIndex('rhos', 8960, 0, 0);
model.physics('liion').feature('pce1').setIndex('Ms', 0.06355, 0, 0);
model.physics('liion').feature('pce1').setIndex('rhos', 'rhoLi2O2', 0, 0);
model.physics('liion').feature('pce1').setIndex('Ms', 'MLi2O2', 0, 0);
model.physics('liion').feature('pce1').set('AddVolumeChangeToElectrodeVolumeFraction', false);
model.physics('liion').feature('pce1').set('FilmResistanceType', 'SurfaceResistance');
model.physics('liion').feature('pce1').set('Rfilm', 'Rfilm*epsilonLi2O2');
model.physics('liion').feature('pce1').feature('per1').set('Eeq_mat', 'userdef');
model.physics('liion').feature('pce1').feature('per1').set('Eeq', 'Eeq');
model.physics('liion').feature('pce1').feature('per1').set('ElectrodeKinetics', 'ConcentrationDependentKinetics');
model.physics('liion').feature('pce1').feature('per1').set('i0', 1);
model.physics('liion').feature('pce1').feature('per1').set('alphaa', '0.5*n');
model.physics('liion').feature('pce1').feature('per1').set('alphac', '0.5*n');
model.physics('liion').feature('pce1').feature('per1').set('CR', 'CRpos');
model.physics('liion').feature('pce1').feature('per1').set('CO', 'COpos');
model.physics('liion').feature('pce1').feature('per1').set('ActiveSpecificSurfaceAreaType', 'userdef');
model.physics('liion').feature('pce1').feature('per1').set('Av', 'apos');
model.physics('liion').feature('pce1').feature('per1').set('nm', 'n');
model.physics('liion').feature('pce1').feature('per1').set('VLiPlus', -2);
model.physics('liion').feature('pce1').feature('per1').setIndex('Vib', '1*(cLi2O2>=cmaxLi2O2)', 0, 0);
model.physics('liion').feature('pce1').feature('per1').set('dEeqdT_mat', 'userdef');
model.physics('liion').create('es1', 'ElectrodeSurface', 0);
model.physics('liion').feature('es1').selection.set([1]);
model.physics('liion').feature('es1').feature('er1').set('Eeq_mat', 'userdef');
model.physics('liion').feature('es1').feature('er1').set('i0_ref', 'i0refLi');
model.physics('liion').feature('es1').feature('er1').set('dEeqdT_mat', 'userdef');
model.physics('liion').create('ecd1', 'ElectrodeNormalCurrentDensity', 0);
model.physics('liion').feature('ecd1').selection.set([3]);
model.physics('liion').feature('ecd1').set('nis', 'i_app');
model.physics('liion').feature('init1').set('cLi', 'cLi0');
model.physics('liion').feature('init1').set('phis', 'Eeq');
model.physics('liion').create('init2', 'init', 1);
model.physics('liion').feature('init2').selection.set([1]);
model.physics('liion').feature('init2').set('cLi', 'cLi0');
model.physics('tds').selection.set([2]);
model.physics('tds').prop('TransportMechanism').set('Convection', false);
model.physics('tds').prop('ShapeProperty').set('order_concentration', 2);
model.physics('tds').feature('porous1').feature('fluid1').set('DF_cO2', {'DO2' '0' '0' '0' 'DO2' '0' '0' '0' 'DO2'});
model.physics('tds').feature('porous1').feature('fluid1').set('FluidDiffusivityModelType', 'BruggemanModel');
model.physics('tds').feature('porous1').feature('pm1').set('poro_mat', 'userdef');
model.physics('tds').feature('porous1').feature('pm1').set('poro', 'liion.epsl');
model.physics('tds').create('conc1', 'Concentration', 0);
model.physics('tds').feature('conc1').selection.set([3]);
model.physics('tds').feature('conc1').setIndex('species', true, 0);
model.physics('tds').feature('conc1').setIndex('c0', 'cO20', 0);
model.physics('tds').feature('init1').setIndex('initc', 'cO20', 0);
model.physics('tds').create('pec1', 'PorousElectrodeCoupling', 1);
model.physics('tds').feature('pec1').selection.set([2]);
model.physics('tds').feature('pec1').feature('rc1').set('iv_src', 'root.comp1.liion.pce1.per1.iv');
model.physics('tds').feature('pec1').feature('rc1').set('nm', 'n');
model.physics('tds').feature('pec1').feature('rc1').setIndex('Vi', -1, 0);
model.physics('dode').label('Domain ODEs and DAEs: Concentration of Li2O2');
model.physics('dode').selection.set([2]);
model.physics('dode').prop('ShapeProperty').set('shapeFunctionType', 'shlag');
model.physics('dode').feature('dode1').setIndex('f', '((-liion.ivtot*1)/(2*F_const))*(cLi2O2<cmaxLi2O2)', 0);

model.common('cminpt').set('modified', {'temperature' 'T'});

model.mesh('mesh1').autoMeshSize(3);
model.mesh('mesh1').run;

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'Lsep', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'Lsep', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'a', 0);
model.study('std1').feature('param').setIndex('plistarr', '1 2 4 10', 0);
model.study('std1').feature('time').set('tlist', '0 1e7');
model.study('std1').feature('time').set('usertol', true);
model.study('std1').feature('time').set('rtol', '1e-4');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(1);
model.mesh('mesh1').stat.selection.set([2]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_cLi').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_cLi').set('scaleval', '1000');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', '0 1e7');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 1.0E-4);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventout', true);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('initialstepbdfactive', true);
model.sol('sol1').feature('t1').set('initialstepbdf', '(1)[s]');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct (Merged)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('Algebraic Multigrid (liion)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').create('i2', 'Iterative');
model.sol('sol1').feature('t1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i2').label('Geometric Multigrid (liion)');
model.sol('sol1').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').create('i3', 'Iterative');
model.sol('sol1').feature('t1').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i3').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i3').set('rhob', 400);
model.sol('sol1').feature('t1').feature('i3').set('maxlinit', 50);
model.sol('sol1').feature('t1').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i3').label('AMG, concentrations (tds)');
model.sol('sol1').feature('t1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'a'});
model.batch('p1').set('plistarr', {'1 2 4 10'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol('sol1').feature('t1').set('tout', 'tsteps');
model.sol('sol1').feature('t1').set('tstepsstore', 3);
model.sol('sol1').feature('t1').create('st1', 'StopCondition');
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', 'comp1.EndTerminal(comp1.phis)<2.5', 0);
model.sol('sol1').feature('t1').feature('st1').set('stopcondwarn', false);

model.study('std1').setGenPlots(false);

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').label('Cell Voltages for different iapp');
model.result('pg1').set('data', 'dset2');
model.result('pg1').create('ptgr1', 'PointGraph');
model.result('pg1').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg1').feature('ptgr1').set('linewidth', 'preference');
model.result('pg1').feature('ptgr1').selection.set([3]);
model.result('pg1').feature('ptgr1').set('expr', 'phis');
model.result('pg1').feature('ptgr1').set('descr', 'Electric potential');
model.result('pg1').feature('ptgr1').set('xdata', 'expr');
model.result('pg1').feature('ptgr1').set('xdataexpr', 'capacity');
model.result('pg1').feature('ptgr1').set('xdatadescr', 'Specific capacity of cell');
model.result('pg1').feature('ptgr1').set('legend', true);
model.result('pg1').feature('ptgr1').set('legendmethod', 'evaluated');
model.result('pg1').feature('ptgr1').set('legendpattern', 'eval(-i_app,mA/cm^2) mA/cm^2');
model.result('pg1').run;
model.result('pg1').set('xlabelactive', true);
model.result('pg1').set('xlabel', 'Specific capacity of cell (mAh/g)');
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'Cell Voltage (V)');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Cell Voltage');
model.result('pg1').set('legendpos', 'lowerright');
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Oxygen conc in positive electrode, iapp = 0.1mA/cm2');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevelinput', 'manual', 1);
model.result('pg2').setIndex('looplevel', [2], 1);
model.result('pg2').create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg2').feature('lngr1').set('linewidth', 'preference');
model.result('pg2').feature('lngr1').selection.set([2]);
model.result('pg2').feature('lngr1').set('expr', 'cO2');
model.result('pg2').feature('lngr1').set('descr', 'Concentration');
model.result('pg2').feature('lngr1').set('xdata', 'expr');
model.result('pg2').feature('lngr1').set('xdataexpr', 'x/(Lsep+Lpos)');
model.result('pg2').feature('lngr1').set('xdatadescractive', true);
model.result('pg2').feature('lngr1').set('xdatadescr', 'Dimensionless thickness of positive electrode');
model.result('pg2').run;
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Oxygen concentration in positive electrode');
model.result('pg2').run;
model.result.duplicate('pg3', 'pg2');
model.result('pg3').run;
model.result('pg3').label('Oxygen conc in positive electrode, iapp = 0.5mA/cm2');
model.result('pg3').setIndex('looplevel', [4], 1);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Volume fraction of Li2O2 in positive electrode, iapp = 0.1mA/cm2');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevelinput', 'manual', 1);
model.result('pg4').setIndex('looplevel', [2], 1);
model.result('pg4').setIndex('looplevelinput', 'interp', 0);
model.result('pg4').setIndex('interp', '1 2e5 5e5 1e6 1.15e6', 0);
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg4').feature('lngr1').set('linewidth', 'preference');
model.result('pg4').feature('lngr1').selection.set([2]);
model.result('pg4').feature('lngr1').set('expr', 'epsilonLi2O2');
model.result('pg4').feature('lngr1').set('descr', 'Volume fraction of Li2O2');
model.result('pg4').feature('lngr1').set('xdata', 'expr');
model.result('pg4').feature('lngr1').set('xdataexpr', 'x/(Lsep+Lpos)');
model.result('pg4').feature('lngr1').set('xdatadescractive', true);
model.result('pg4').feature('lngr1').set('xdatadescr', 'Dimensionless thickness of positive electrode');
model.result('pg4').run;
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('title', 'Volume fraction of Li2O2 in positive electrode');
model.result('pg4').set('axislimits', true);
model.result('pg4').set('ymax', 0.6);
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Volume fraction of Li2O2 in positive electrode, iapp = 0.5mA/cm2');
model.result('pg5').setIndex('looplevel', [4], 1);
model.result('pg5').setIndex('interp', '1 5e3 2e4 4e4', 0);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Porosity of positive electrode, iapp = 0.1mA/cm2');
model.result('pg6').set('data', 'dset2');
model.result('pg6').setIndex('looplevelinput', 'manual', 1);
model.result('pg6').setIndex('looplevel', [2], 1);
model.result('pg6').setIndex('looplevelinput', 'interp', 0);
model.result('pg6').setIndex('interp', '1 2e5 5e5 1e6 1.15e6', 0);
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg6').feature('lngr1').set('linewidth', 'preference');
model.result('pg6').feature('lngr1').selection.set([2]);
model.result('pg6').feature('lngr1').set('expr', 'liion.epsl');
model.result('pg6').feature('lngr1').set('descractive', true);
model.result('pg6').feature('lngr1').set('descr', 'Porosity');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', 'x/(Lsep+Lpos)');
model.result('pg6').feature('lngr1').set('xdatadescractive', true);
model.result('pg6').feature('lngr1').set('xdatadescr', 'Dimensionless thickness of positive electrode');
model.result('pg6').run;
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'Porosity of positive electrode');
model.result('pg6').set('axislimits', true);
model.result('pg6').set('ymin', 0.15);
model.result('pg6').set('ymax', 0.75);
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Porosity of positive electrode, iapp = 0.5mA/cm2');
model.result('pg7').setIndex('looplevel', [4], 1);
model.result('pg7').setIndex('interp', '1 5e3 2e4 4e4', 0);
model.result('pg7').run;

model.title(['1D Isothermal Lithium' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Air Battery']);

model.description(['This example uses the Lithium-Ion Battery interface for studying the discharge of a lithium' native2unicode(hex2dec({'20' '13'}), 'unicode') 'air battery. The transport of oxygen in the porous positive electrode is modeled using the Transport of Diluted Species in Porous Media interface. The electrochemical reaction of oxygen reduction in the positive electrode leads to changes in concentration of the reaction product and electrode porosity. The geometry is in one dimension and the model is isothermal.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;

model.label('li_air_battery_1d.mph');

model.modelNode.label('Components');

out = model;
