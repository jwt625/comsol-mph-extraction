function out = model
%
% fuel_cell_cathode.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fuel_Cell_and_Electrolyzer_Module/Fuel_Cells');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('fc', 'HydrogenFuelCell', 'geom1');
model.physics('fc').model('comp1');
model.physics('fc').prop('H2GasMixture').set('H2O', '1');
model.physics('fc').prop('H2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('O2GasMixture').set('H2O', '1');
model.physics('fc').prop('O2GasMixture').set('N2', '1');
model.physics('fc').prop('O2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('ElectrolyteType', 'ProtonExchange');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('OperationMode', 'FuelCell');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('TRHE', '50[degC]');

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/fc', true);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/fc', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('T', '70[degC]', 'Temperature');
model.param.set('perm', '1e-13[m^2]', 'Permeability');
model.param.set('eps_l', '0.3', 'Electrolyte volume fraction in porous electrode');
model.param.set('eps_gas', '0.4', 'Gas phase volume fraction in porous electrode');
model.param.set('sigma_s', '164[S/m]', 'Electrode conductivity');
model.param.set('E_cell', '1[V]', 'Cell voltage');
model.param.set('i0_ref_H2', '1e4[A/m^2]', 'Reference exchange current density, anode');
model.param.set('i0_ref_O2', '1e-3[A/m^2]', 'Reference exchange current density, cathode');
model.param.set('Av', '1e9[1/m]', 'Specific area');
model.param.set('RH', '90[%]', 'Relative humidity');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').label('Membrane');
model.geom('geom1').feature('blk1').set('size', [1.5 1.5 0.075]);
model.geom('geom1').feature('blk1').set('selresult', true);
model.geom('geom1').feature.duplicate('blk2', 'blk1');
model.geom('geom1').feature('blk2').label('Cathode Gas Diffusion Electrode');
model.geom('geom1').feature('blk2').set('pos', [0 0 0.075]);
model.geom('geom1').feature.duplicate('blk3', 'blk2');
model.geom('geom1').feature('blk3').label('Anode Gas Diffusion Electrode');
model.geom('geom1').feature('blk3').set('pos', [0 0 -0.075]);
model.geom('geom1').run('blk3');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').label('Inlet');
model.geom('geom1').feature('wp1').set('quickz', 0.15);
model.geom('geom1').feature('wp1').set('selresult', true);
model.geom('geom1').feature('wp1').geom.create('c1', 'Circle');
model.geom('geom1').feature('wp1').geom.feature('c1').set('angle', 90);
model.geom('geom1').feature('wp1').geom.feature('c1').set('pos', [1.5 1.5]);
model.geom('geom1').feature('wp1').geom.feature('c1').set('rot', 180);
model.geom('geom1').feature('wp1').geom.run('c1');
model.geom('geom1').run('fin');

model.physics('fc').prop('H2GasMixture').set('GasPhaseDiffusion', false);
model.physics('fc').prop('O2GasMixture').set('GasPhaseDiffusion', false);
model.physics('fc').create('mem1', 'Membrane', 3);
model.physics('fc').feature('mem1').selection.named('geom1_blk1_dom');
model.physics('fc').create('h2gde1', 'H2GasDiffusionElectrode', 3);
model.physics('fc').feature('h2gde1').selection.named('geom1_blk3_dom');
model.physics('fc').create('o2gde1', 'O2GasDiffusionElectrode', 3);
model.physics('fc').feature('o2gde1').selection.named('geom1_blk2_dom');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('ElectrolyteConductivity', 'Electrolyte conductivity');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('MembraneCrossover', 'Membrane crossover');
model.material('mat1').propertyGroup.create('PolymerElectrolyteWaterTransport', 'Polymer electrolyte water transport');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('PolymerElectrolyteWaterAbsorptionDesorption', 'Polymer electrolyte water absorption-desorption');
model.material('mat1').label('Nafion, EW 1100, Vapor Equilibrated, Protonated');
model.material('mat1').set('family', 'glass');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'(0.177+3.7e-3*lambda)[W/m/K]' '0' '0' '0' '(0.177+3.7e-3*lambda)[W/m/K]' '0' '0' '0' '(0.177+3.7e-3*lambda)[W/m/K]'});
model.material('mat1').propertyGroup('def').set('INFO_PREFIX:thermalconductivity', ['Ex situ measurements of through-plane thermal conductivities' newline 'in a polymer electrolyte fuel cell,' newline 'O Burheim, P Vie, J Pharoah, S. Kjelstrup, Journal of Power Sources 195 (2010) 249' native2unicode(hex2dec({'20' '13'}), 'unicode') '256']);
model.material('mat1').propertyGroup('def').set('lambda', 'pewt.lambda');
model.material('mat1').propertyGroup('def').descr('lambda', '');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('source', 'file');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('importedname', 'nafion_1100_conductivity_vapor_eq.csv');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('importeddim', '2D');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('funcs', {'sigma_vs_T_and_RH' '1'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('fununit', {'S/cm'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('argunit', {'1' '1'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('sourcetype', 'model');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('nargs', '2');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('struct', 'spreadsheet');
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('sigmal', {'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))' '0' '0' '0' 'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))' '0' '0' '0' 'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('INFO_PREFIX:sigmal', ['Yoshitsugu Sone et al 1996 J. Electrochem. Soc. 143 1254' newline '(Conductivity data refers to the "E-form" values, Figure 5a and 5b)']);
model.material('mat1').propertyGroup('ElectrolyteConductivity').addInput('temperature');
model.material('mat1').propertyGroup('ElectrolyteConductivity').addInput('relativehumidity');
model.material('mat1').propertyGroup('MembraneCrossover').set('Psi_H2', '(2.2e-11*f+2.9e-12)[mol/cm/s/bar]*exp(21[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat1').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_H2', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041' newline ]);
model.material('mat1').propertyGroup('MembraneCrossover').set('Psi_O2', '(1.9e-11*f+1.1e-12)[mol/cm/s/bar]*exp(22[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat1').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_O2', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat1').propertyGroup('MembraneCrossover').set('Psi_N2', 'Psi_O2');
model.material('mat1').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_N2', 'Approximated as equal to oxygen value (no reference).');
model.material('mat1').propertyGroup('MembraneCrossover').set('lambda', 'pewt.lambda');
model.material('mat1').propertyGroup('MembraneCrossover').descr('lambda', 'Water uptake');
model.material('mat1').propertyGroup('MembraneCrossover').set('EW', '1100[g/mol]');
model.material('mat1').propertyGroup('MembraneCrossover').descr('EW', 'Polymer electrolyte equivalent weight');
model.material('mat1').propertyGroup('MembraneCrossover').set('Vm', 'EW/2[g/cm^3]');
model.material('mat1').propertyGroup('MembraneCrossover').descr('Vm', 'Partial molar volume of dry polymer');
model.material('mat1').propertyGroup('MembraneCrossover').set('V0', '18[g/mol]/1000[kg/m^3]');
model.material('mat1').propertyGroup('MembraneCrossover').descr('V0', 'Water partial molar volume');
model.material('mat1').propertyGroup('MembraneCrossover').set('f', 'lambda*V0/(Vm+lambda*V0)');
model.material('mat1').propertyGroup('MembraneCrossover').descr('f', 'Water volume fraction in polymer');
model.material('mat1').propertyGroup('MembraneCrossover').addInput('relativehumidity');
model.material('mat1').propertyGroup('MembraneCrossover').addInput('temperature');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('funcname', 'lambda');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('table', {'0.00' '0.0';  ...
'0.14' '1.9';  ...
'0.37' '2.9';  ...
'0.45' '3.1';  ...
'0.51' '3.7';  ...
'0.57' '4.3';  ...
'0.79' '6.3';  ...
'0.80' '6.8';  ...
'0.81' '7.9';  ...
'0.88' '10.0';  ...
'0.91' '12.0';  ...
'0.96' '13.2';  ...
'1.00' '14.0'});
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('argunit', {'1'});
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('alpha', 'max(c0*Dmu/(R_const*T*(1-x0)),1e-9)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('INFO_PREFIX:alpha', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('xi', 'if(lambda>1,1,lambda)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('INFO_PREFIX:xi', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('lambda', 'lambda(phi)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('lambda', 'Water uptake');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('EW', '1100[g/mol]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('EW', 'Polymer electrolyte equivalent weight');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('Vm', 'EW/2[g/cm^3]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('Vm', 'Partial molar volume of dry polymer');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('V0', '18[g/mol]/1000[kg/m^3]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('V0', 'Water partial molar volume');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('f', 'lambda*V0/(Vm+lambda*V0)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('f', 'Water volume fraction in polymer');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('Dmu', '1.8e-5[cm^2/s]*f*exp(20[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('Dmu', 'Water diffusion coefficient');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('c0', 'lambda/(V0*lambda+Vm)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('c0', 'Water concentration');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('x0', 'lambda/(lambda+1)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('x0', 'Water mole fraction');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').addInput('temperature');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').addInput('relativehumidity');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').set('k_abs_dsp', '1.04e-7*exp(4.48*max(min(phi,0.85),0.25))[mol/cm^2/s]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').set('INFO_PREFIX:k_abs_dsp', ['Kientiz, Yamada, Nonoyama, Weber,' newline 'Journal of Fuel Cell Science and Technology, Feb 2011, Vol. 8,  Article Number 011013']);
model.material('mat1').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').addInput('relativehumidity');

model.common('cminpt').set('modified', {'temperature' 'T'});

model.physics('fc').feature('mem1').set('aw_mem', 'RH');
model.physics('fc').feature('h2gasph1').set('MixtureSpecification', 'HumidifiedMixture');
model.physics('fc').feature('h2gasph1').set('RH_hum', 'RH');
model.physics('fc').feature('h2gasph1').set('T_hum', 'T');
model.physics('fc').feature('o2gasph1').set('MixtureSpecification', 'HumidifiedAir');
model.physics('fc').feature('o2gasph1').set('RH_hum', 'RH');
model.physics('fc').feature('o2gasph1').set('T_hum', 'T');
model.physics('fc').feature('h2gde1').set('sigmas', {'sigma_s' '0' '0' '0' 'sigma_s' '0' '0' '0' 'sigma_s'});
model.physics('fc').feature('h2gde1').set('epsl', 'eps_l');
model.physics('fc').feature('h2gde1').feature('h2gder1').set('ElectrodeKinetics', 'LinButlerVolmer');
model.physics('fc').feature('h2gde1').feature('h2gder1').set('i0_ref', 'i0_ref_H2');
model.physics('fc').feature('h2gde1').feature('h2gder1').set('Av', 'Av');
model.physics('fc').feature('o2gde1').set('sigmas', {'sigma_s' '0' '0' '0' 'sigma_s' '0' '0' '0' 'sigma_s'});
model.physics('fc').feature('o2gde1').set('epsl', 'eps_l');
model.physics('fc').feature('o2gde1').feature('o2gder1').set('i0_ref', 'i0_ref_O2');
model.physics('fc').feature('o2gde1').feature('o2gder1').set('Av', 'Av');
model.physics('fc').feature('ecph1').create('egnd1', 'ElectricGround', 2);
model.physics('fc').feature('ecph1').feature('egnd1').selection.set([3]);
model.physics('fc').feature('ecph1').create('pot1', 'ElectricPotential', 2);
model.physics('fc').feature('ecph1').feature('pot1').selection.set([10]);
model.physics('fc').feature('ecph1').feature('pot1').set('phisbnd', 'E_cell');

model.mesh('mesh1').run;
model.mesh('mesh1').autoMeshSize(4);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection('sourceface').set([10 14]);
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.named('geom1_blk2_dom');
model.mesh('mesh1').feature('swe1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('swe1').feature('dis1').set('elemratio', 5);
model.mesh('mesh1').feature('swe1').feature('dis1').set('reverse', true);
model.mesh('mesh1').run;
model.mesh('mesh1').feature('swe1').create('size1', 'Size');
model.mesh('mesh1').feature('swe1').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh1').feature('swe1').feature('size1').selection.set([19]);
model.mesh('mesh1').feature('swe1').feature('size1').set('hauto', 2);
model.mesh('mesh1').feature('swe1').create('size2', 'Size');
model.mesh('mesh1').feature('swe1').feature('size2').selection.geom('geom1', 1);
model.mesh('mesh1').feature('swe1').feature('size2').selection.set([10 11]);
model.mesh('mesh1').feature('swe1').feature('size2').set('hauto', 3);
model.mesh('mesh1').feature('swe1').create('size3', 'Size');
model.mesh('mesh1').feature('swe1').feature('size3').selection.geom('geom1', 0);
model.mesh('mesh1').feature('swe1').feature('size3').selection.set([4]);
model.mesh('mesh1').feature('swe1').feature('size3').set('hauto', 2);
model.mesh('mesh1').run;

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-4);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').label('Electrode Potential with Respect to Ground (fc)');
model.result('pg1').create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('expr', {'fc.phis'});
model.result('pg1').create('arwv1', 'ArrowVolume');
model.result('pg1').feature('arwv1').set('expr', {'fc.Isx' 'fc.Isy' 'fc.Isz'});
model.result('pg1').feature('arwv1').set('arrowbase', 'center');
model.result('pg1').feature('arwv1').set('color', 'gray');
model.result('pg1').feature('arwv1').create('filt1', 'Filter');
model.result('pg1').feature('arwv1').feature('filt1').set('expr', 'isdefined(root.comp1.fc.phis)');
model.result('pg1').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').label('Electrolyte Potential (fc)');
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('expr', {'fc.phil'});
model.result('pg2').create('arwv1', 'ArrowVolume');
model.result('pg2').feature('arwv1').set('expr', {'fc.Ilx' 'fc.Ily' 'fc.Ilz'});
model.result('pg2').feature('arwv1').set('arrowbase', 'center');
model.result('pg2').feature('arwv1').set('color', 'gray');
model.result('pg2').feature('arwv1').create('filt1', 'Filter');
model.result('pg2').feature('arwv1').feature('filt1').set('expr', 'isdefined(fc.phil)');
model.result('pg2').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result('pg1').run;
model.result('pg1').run;

model.probe.create('bnd1', 'Boundary');
model.probe('bnd1').model('comp1');
model.probe('bnd1').set('intsurface', true);
model.probe('bnd1').selection.set([3]);
model.probe('bnd1').set('expr', 'fc.nIs');
model.probe('bnd1').set('descr', 'Normal electrode current density');
model.probe('bnd1').set('expr', '-fc.nIs');
model.probe('bnd1').set('unit', 'A/cm^2');
model.probe('bnd1').set('descractive', true);
model.probe('bnd1').set('descr', 'Average cell current density');

model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'T', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'K', 0);
model.study('std1').feature('stat').setIndex('pname', 'T', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'K', 0);
model.study('std1').feature('stat').setIndex('pname', 'E_cell', 0);
model.study('std1').feature('stat').setIndex('plistarr', 'range(1,-0.1,0.5)', 0);
model.study('std1').feature('stat').setIndex('punit', 'V', 0);

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);

model.sol('sol1').study('std1');

model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('notsolvertype', 'solnum');
model.study('std1').feature('stat').set('notsolnumhide', 'off');
model.study('std1').feature('stat').set('notstudyhide', 'off');
model.study('std1').feature('stat').set('notsolhide', 'off');

model.sol('sol2').copySolution('sol3');

model.study('std1').feature('stat').set('notlistsolnum', 1);
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('listsolnum', 1);
model.study('std1').feature('stat').set('solnum', 'auto');

model.result.dataset('dset2').set('solution', 'none');

model.sol('sol1').feature.remove('s2');
model.sol('sol1').feature.remove('v2');
model.sol('sol1').feature.remove('st2');
model.sol('sol1').feature.remove('su1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol3').copySolution('sol2');
model.sol.remove('sol3');
model.sol('sol2').label('Solution Store 1');

model.result.dataset.remove('dset4');

model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').feature('su1').set('sol', 'sol2');
model.sol('sol1').feature('su1').label('Solution Store 1');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');

model.study('std1').feature('stat').set('initsoluse', 'sol2');

model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-4);
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s2').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s2').set('control', 'stat');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature.remove('fcDef');

model.result.dataset('dset2').set('solution', 'sol2');

model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');

model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('notsolvertype', 'solnum');
model.study('std1').feature('stat').set('notsolnumhide', 'off');
model.study('std1').feature('stat').set('notstudyhide', 'off');
model.study('std1').feature('stat').set('notsolhide', 'off');

model.sol('sol1').attach('std1');

model.probe('bnd1').genResult('none');

model.sol('sol1').runAll;

model.result('pg1').run;
model.result('pg3').set('window', 'window1');
model.result('pg3').run;
model.result('pg3').label('Polarization Curve');
model.result('pg3').set('switchxy', true);
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'Cell voltage (V)');
model.result('pg3').set('window', 'window1');
model.result('pg3').run;

model.physics('fc').prop('O2GasMixture').set('GasPhaseDiffusion', true);
model.physics('fc').prop('O2GasMixture').set('GasMixtureDarcy', true);
model.physics('fc').feature('o2gasph1').feature('init1').set('MixtureSpecification', 'HumidifiedAir');
model.physics('fc').feature('o2gasph1').feature('init1').set('RH_hum', 'RH');
model.physics('fc').feature('o2gasph1').feature('init1').set('T_hum', 'T');
model.physics('fc').feature('o2gasph1').create('o2in1', 'O2Inlet', 2);
model.physics('fc').feature('o2gasph1').feature('o2in1').selection.named('geom1_wp1_bnd');
model.physics('fc').feature('o2gde1').set('epsg', 'eps_gas');
model.physics('fc').feature('o2gde1').set('kappag', {'perm' '0' '0' '0' 'perm' '0' '0' '0' 'perm'});

model.result.table.duplicate('tbl2', 'tbl1');
model.result.table('tbl2').label('Unlimited O2 gas phase transport');

model.sol.remove('sol1');
model.sol.remove('sol2');
model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_wN2_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_O2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_wN2_O2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-4);
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s2').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s2').set('control', 'stat');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');

model.probe('bnd1').genResult('none');

model.sol('sol1').runAll;

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 6, 0);
model.result('pg4').label('Electrode Potential with Respect to Ground (fc)');
model.result('pg4').create('mslc1', 'Multislice');
model.result('pg4').feature('mslc1').set('expr', {'fc.phis'});
model.result('pg4').create('arwv1', 'ArrowVolume');
model.result('pg4').feature('arwv1').set('expr', {'fc.Isx' 'fc.Isy' 'fc.Isz'});
model.result('pg4').feature('arwv1').set('arrowbase', 'center');
model.result('pg4').feature('arwv1').set('color', 'gray');
model.result('pg4').feature('arwv1').create('filt1', 'Filter');
model.result('pg4').feature('arwv1').feature('filt1').set('expr', 'isdefined(root.comp1.fc.phis)');
model.result('pg4').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 6, 0);
model.result('pg5').label('Electrolyte Potential (fc)');
model.result('pg5').create('mslc1', 'Multislice');
model.result('pg5').feature('mslc1').set('expr', {'fc.phil'});
model.result('pg5').create('arwv1', 'ArrowVolume');
model.result('pg5').feature('arwv1').set('expr', {'fc.Ilx' 'fc.Ily' 'fc.Ilz'});
model.result('pg5').feature('arwv1').set('arrowbase', 'center');
model.result('pg5').feature('arwv1').set('color', 'gray');
model.result('pg5').feature('arwv1').create('filt1', 'Filter');
model.result('pg5').feature('arwv1').feature('filt1').set('expr', 'isdefined(fc.phil)');
model.result('pg5').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 6, 0);
model.result('pg6').label('Mole Fraction, O2, Streamline (fc)');
model.result('pg6').set('titletype', 'custom');
model.result('pg6').set('typeintitle', true);
model.result('pg6').set('prefixintitle', 'Species O2:');
model.result('pg6').create('str1', 'Streamline');
model.result('pg6').feature('str1').set('expr', {'fc.tfluxO2x' 'fc.tfluxO2y' 'fc.tfluxO2z'});
model.result('pg6').feature('str1').set('posmethod', 'start');
model.result('pg6').feature('str1').set('pointtype', 'arrow');
model.result('pg6').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg6').feature('str1').set('color', 'gray');
model.result('pg6').feature('str1').create('col', 'Color');
model.result('pg6').feature('str1').feature('col').set('expr', 'fc.xO2');
model.result('pg6').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 6, 0);
model.result('pg7').label('Mole Fraction, O2, Surface (fc)');
model.result('pg7').set('titletype', 'custom');
model.result('pg7').set('prefixintitle', 'Species O2:');
model.result('pg7').set('expressionintitle', false);
model.result('pg7').set('typeintitle', false);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'fc.xO2'});
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'dset1');
model.result('pg8').setIndex('looplevel', 6, 0);
model.result('pg8').label('Mole Fraction, H2O, Streamline (fc)');
model.result('pg8').set('titletype', 'custom');
model.result('pg8').set('typeintitle', true);
model.result('pg8').set('prefixintitle', 'Species H2O:');
model.result('pg8').create('str1', 'Streamline');
model.result('pg8').feature('str1').set('expr', {'fc.tfluxH2Ox' 'fc.tfluxH2Oy' 'fc.tfluxH2Oz'});
model.result('pg8').feature('str1').set('posmethod', 'start');
model.result('pg8').feature('str1').set('pointtype', 'arrow');
model.result('pg8').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg8').feature('str1').set('color', 'gray');
model.result('pg8').feature('str1').create('col', 'Color');
model.result('pg8').feature('str1').feature('col').set('expr', 'fc.xH2O');
model.result('pg8').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').set('data', 'dset1');
model.result('pg9').setIndex('looplevel', 6, 0);
model.result('pg9').label('Mole Fraction, H2O, Surface (fc)');
model.result('pg9').set('titletype', 'custom');
model.result('pg9').set('prefixintitle', 'Species H2O:');
model.result('pg9').set('expressionintitle', false);
model.result('pg9').set('typeintitle', false);
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', {'fc.xH2O'});
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').set('data', 'dset1');
model.result('pg10').setIndex('looplevel', 6, 0);
model.result('pg10').label('Mole Fraction, N2, Streamline (fc)');
model.result('pg10').set('titletype', 'custom');
model.result('pg10').set('typeintitle', true);
model.result('pg10').set('prefixintitle', 'Species N2:');
model.result('pg10').create('str1', 'Streamline');
model.result('pg10').feature('str1').set('expr', {'fc.tfluxN2x' 'fc.tfluxN2y' 'fc.tfluxN2z'});
model.result('pg10').feature('str1').set('posmethod', 'start');
model.result('pg10').feature('str1').set('pointtype', 'arrow');
model.result('pg10').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg10').feature('str1').set('color', 'gray');
model.result('pg10').feature('str1').create('col', 'Color');
model.result('pg10').feature('str1').feature('col').set('expr', 'fc.xN2');
model.result('pg10').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg11', 'PlotGroup3D');
model.result('pg11').set('data', 'dset1');
model.result('pg11').setIndex('looplevel', 6, 0);
model.result('pg11').label('Mole Fraction, N2, Surface (fc)');
model.result('pg11').set('titletype', 'custom');
model.result('pg11').set('prefixintitle', 'Species N2:');
model.result('pg11').set('expressionintitle', false);
model.result('pg11').set('typeintitle', false);
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('expr', {'fc.xN2'});
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').set('data', 'dset1');
model.result('pg12').setIndex('looplevel', 6, 0);
model.result('pg12').label('Pressure (fc)');
model.result('pg12').create('mslc1', 'Multislice');
model.result('pg12').feature('mslc1').set('expr', {'fc.p'});
model.result('pg12').create('str1', 'Streamline');
model.result('pg12').feature('str1').set('expr', {'fc.u' 'fc.v' 'fc.w'});
model.result('pg12').feature('str1').set('posmethod', 'start');
model.result('pg12').feature('str1').set('pointtype', 'arrow');
model.result('pg12').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg12').feature('str1').set('color', 'gray');
model.result('pg4').run;
model.result('pg3').set('window', 'window1');
model.result('pg3').run;
model.result('pg3').set('window', 'window1');
model.result('pg3').run;
model.result('pg3').feature('tblp1').label('Probe Table Graph: Limited O2 gas phase transport');
model.result('pg3').feature('tblp1').set('legendmethod', 'manual');
model.result('pg3').feature('tblp1').setIndex('legends', 'Limited O2 gas phase transport', 0);
model.result('pg3').feature.duplicate('tblp2', 'tblp1');
model.result('pg3').set('window', 'window1');
model.result('pg3').run;
model.result('pg3').feature('tblp2').label('Probe Table Graph: Unlimited O2 gas phase transport');
model.result('pg3').feature('tblp2').set('table', 'tbl2');
model.result('pg3').feature('tblp2').setIndex('legends', 'Unlimited O2 gas phase transport', 0);
model.result('pg3').set('window', 'window1');
model.result('pg3').run;
model.result('pg3').set('window', 'window1');
model.result('pg3').run;
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 4, 0);
model.result('pg7').run;
model.result('pg7').setIndex('looplevel', 4, 0);
model.result('pg12').run;
model.result('pg12').setIndex('looplevel', 4, 0);
model.result.create('pg13', 'PlotGroup3D');
model.result('pg13').run;
model.result('pg13').label('Overpotential in Cathode');
model.result('pg13').setIndex('looplevel', 4, 0);
model.result('pg13').create('surf1', 'Surface');
model.result('pg13').feature('surf1').set('expr', 'fc.eta_o2gder1');
model.result('pg13').feature('surf1').set('descr', 'Overpotential');
model.result('pg13').run;
model.result.create('pg14', 'PlotGroup3D');
model.result('pg14').run;
model.result('pg14').label('Local Volumetric Current Density in Cathode');
model.result('pg14').setIndex('looplevel', 4, 0);
model.result('pg14').create('surf1', 'Surface');
model.result('pg14').feature('surf1').set('expr', 'fc.iv_o2gder1');
model.result('pg14').feature('surf1').set('descr', 'Local current source');
model.result('pg14').run;
model.result.create('pg15', 'PlotGroup3D');
model.result('pg15').run;
model.result('pg15').label('Current Density at Anode Boundary');
model.result('pg15').setIndex('looplevel', 4, 0);
model.result('pg15').create('surf1', 'Surface');
model.result('pg15').feature('surf1').set('expr', 'fc.nIl');
model.result('pg15').feature('surf1').set('descr', 'Normal electrolyte current density');
model.result('pg15').feature('surf1').set('expr', 'abs(fc.nIl)');
model.result('pg15').feature('surf1').set('descractive', true);
model.result('pg15').feature('surf1').set('descr', 'Current density');
model.result('pg15').feature('surf1').create('sel1', 'Selection');
model.result('pg15').feature('surf1').feature('sel1').selection.set([6]);
model.result('pg15').run;

model.title('Mass Transport and Electrochemical Reaction in a Fuel Cell Cathode');

model.description('This is a stationary 3D model of a generic fuel cell cathode describing the mass-fraction distributions of oxygen, water, and nitrogen, as well as the current distribution.');

model.label('fuel_cell_cathode.mph');

model.modelNode.label('Components');

out = model;
