function out = model
%
% eyeglass_frame_fatigue.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fatigue_Module/Strain_Life');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'eyeglass_frame_fatigue.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', [10 4]);
model.geom('geom1').feature('r1').set('pos', [55 -8]);
model.geom('geom1').run('r1');
model.geom('geom1').create('int1', 'Intersection');
model.geom('geom1').feature('int1').selection('input').set({'imp1' 'r1'});
model.geom('geom1').feature('int1').set('keep', true);
model.geom('geom1').run('int1');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').init(2);
model.geom('geom1').feature('del1').selection('input').set('r1', 1);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Monel 400 [solid,annealed]');
model.material('mat1').info.create('UNS');
model.material('mat1').info('UNS').body('N04400');
model.material('mat1').info.create('WNR');
model.material('mat1').info('WNR').body('2.4360');
model.material('mat1').info.create('EN_DIN');
model.material('mat1').info('EN_DIN').body('NiCu30Fe');
model.material('mat1').info.create('JIS');
model.material('mat1').info('JIS').body('NW4400');
model.material('mat1').info.create('AFNOR');
model.material('mat1').info('AFNOR').body('NW4400');
model.material('mat1').info.create('Composition');
model.material('mat1').info('Composition').body('63 Ni+Co min, (28-34) Cu, 2.5 Fe max, 2 Mn max, 0.5 Si max, 0.3 C max (wt%)');
model.material('mat1').info.create('Note');
model.material('mat1').info('Note').body(['Curie temperature = 21 ' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C (294 K) to 49 ' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C (322 K)']);
model.material('mat1').propertyGroup('def').set('thermalconductivity', 'k_solid_annealed_1(T)');
model.material('mat1').propertyGroup('def').set('INFO_PREFIX:thermalconductivity', ['Reference: Product Reference Guide, Special Metals Corporation, Huntington, WV and V.J. Johnson, A Compendium Of The Properties Of Materials At Low Temperature (PHASE 1) Part 2. Properties Of Solids, WADD TR60-56, pt 2, AD0249786 (1960) available online at http://contrails.iit.edu/reports/6593' newline 'Note: annealed']);
model.material('mat1').propertyGroup('def').set('resistivity', 'res(T)');
model.material('mat1').propertyGroup('def').set('INFO_PREFIX:resistivity', 'Reference: Product Reference Guide, Special Metals Corporation, Huntington, WV');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '(alpha(T)+(Tempref-293[K])*if(abs(T-Tempref)>1e-3,(alpha(T)-alpha(Tempref))/(T-Tempref),d(alpha(T),T)))/(1+alpha(Tempref)*(Tempref-293[K]))');
model.material('mat1').propertyGroup('def').set('INFO_PREFIX:thermalexpansioncoefficient', ['Reference: A. Goldsmith, H.J. Hirschhorn and T.E. Waterman, Thermophysical properties of solid materials. volume II: alloys (melting temperature above 1000 F), WADC Technical Report 58-476, v2, AD253710 (1960) available online at http://contrails.iit.edu/reports/6803 and Special Metals Corporation Product Data Sheet SMC-053 (2005)' newline 'Note: the reference temperature is 20 ' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C (293 K), average of values from annealed, hot-rolled, cast and cold-rolled materials, calculated from the linear expansion' newline 'Reference temperature: 293.00[K]']);
model.material('mat1').propertyGroup('def').set('heatcapacity', 'C(T)');
model.material('mat1').propertyGroup('def').set('INFO_PREFIX:heatcapacity', 'Reference: Product Reference Guide, Special Metals Corporation, Huntington, WV');
model.material('mat1').propertyGroup('def').set('electricconductivity', 'sigma(T)');
model.material('mat1').propertyGroup('def').set('INFO_PREFIX:electricconductivity', ['Reference: Product Reference Guide, Special Metals Corporation, Huntington, WV' newline 'Note: calculated as the reciprocal of the resistivity']);
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('INFO_PREFIX:density', ['Reference: A. Goldsmith, H.J. Hirschhorn and T.E. Waterman, Thermophysical properties of solid materials. volume II: alloys (melting temperature above 1000 F), WADC Technical Report 58-476, v2, AD253710 (1960) available online at http://contrails.iit.edu/reports/6803 and Special Metals Corporation Product Data Sheet SMC-053 (2005)' newline 'Note: average of values from annealed, hot-rolled, cast and cold-rolled materials, calculated from the linear expansion and the room temperature density']);
model.material('mat1').propertyGroup('def').set('TD', 'TD_solid_annealed_1(T)');
model.material('mat1').propertyGroup('def').set('INFO_PREFIX:TD', ['Reference: Product Reference Guide, Special Metals Corporation, Huntington, WV and Product Reference Guide, Special Metals Corporation, Huntington, WV and V.J. Johnson, A Compendium Of The Properties Of Materials At Low Temperature (PHASE 1) Part 2. Properties Of Solids, WADD TR60-56, pt 2, AD0249786 (1960) available online at http://contrails.iit.edu/reports/6593' newline 'Note: calculated from the thermal conductivity, density, and specific heat']);
model.material('mat1').propertyGroup('def').func.create('k_solid_annealed_1', 'Piecewise');
model.material('mat1').propertyGroup('def').func('k_solid_annealed_1').set('funcname', 'k_solid_annealed_1');
model.material('mat1').propertyGroup('def').func('k_solid_annealed_1').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k_solid_annealed_1').set('extrap', 'constant');
model.material('mat1').propertyGroup('def').func('k_solid_annealed_1').set('pieces', {'4.0' '31.0' '-0.841836615+0.566916548*T^1-0.0605683264*T^2+0.00748462102*T^3-4.10323569E-4*T^4+1.03187276E-5*T^5-9.85066671E-8*T^6'; '31.0' '147.0' '-0.668360576+0.56426554*T^1-0.00857232135*T^2+7.73363649E-5*T^3-4.01902534E-7*T^4+1.12650186E-9*T^5-1.32470245E-12*T^6'; '147.0' '1255.41' '8.64587155+0.126065325*T^1-5.44120506E-4*T^2+1.34580192E-6*T^3-1.64780184E-9*T^4+9.83384922E-13*T^5-2.28302509E-16*T^6'});
model.material('mat1').propertyGroup('def').func('k_solid_annealed_1').label('Piecewise');
model.material('mat1').propertyGroup('def').func('k_solid_annealed_1').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('k_solid_annealed_1').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func.create('res', 'Piecewise');
model.material('mat1').propertyGroup('def').func('res').set('funcname', 'res');
model.material('mat1').propertyGroup('def').func('res').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('res').set('extrap', 'constant');
model.material('mat1').propertyGroup('def').func('res').set('pieces', {'77.0' '1366.51' '2.391838E-7+1.5204E-9*T^1-2.652848E-12*T^2+2.145325E-15*T^3-6.108918E-19*T^4'});
model.material('mat1').propertyGroup('def').func('res').label('Piecewise 1');
model.material('mat1').propertyGroup('def').func('res').set('fununit', 'ohm*m');
model.material('mat1').propertyGroup('def').func('res').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func.create('alpha', 'Piecewise');
model.material('mat1').propertyGroup('def').func('alpha').set('funcname', 'alpha');
model.material('mat1').propertyGroup('def').func('alpha').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('alpha').set('extrap', 'constant');
model.material('mat1').propertyGroup('def').func('alpha').set('pieces', {'0.0' '107.0' '8.76079383E-6+2.92792879E-8*T^1+8.48123065E-11*T^2-6.21111671E-13*T^3'; '107.0' '177.0' '-3.79504719E-6+3.43583437E-7*T^1-2.68754176E-9*T^2+9.39102813E-12*T^3-1.22011586E-14*T^4'; '177.0' '1366.51' '1.20635034E-5+4.89832173E-9*T^1-2.98610907E-13*T^2'});
model.material('mat1').propertyGroup('def').func('alpha').label('Piecewise 2');
model.material('mat1').propertyGroup('def').func('alpha').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('alpha').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func.create('C', 'Piecewise');
model.material('mat1').propertyGroup('def').func('C').set('funcname', 'C');
model.material('mat1').propertyGroup('def').func('C').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('C').set('extrap', 'constant');
model.material('mat1').propertyGroup('def').func('C').set('pieces', {'88.0' '588.71' '-100.987409+4.83633162*T^1-0.0170401517*T^2+2.74397264E-5*T^3-1.63381644E-8*T^4'});
model.material('mat1').propertyGroup('def').func('C').label('Piecewise 3');
model.material('mat1').propertyGroup('def').func('C').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('C').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func.create('sigma', 'Piecewise');
model.material('mat1').propertyGroup('def').func('sigma').set('funcname', 'sigma');
model.material('mat1').propertyGroup('def').func('sigma').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('sigma').set('extrap', 'constant');
model.material('mat1').propertyGroup('def').func('sigma').set('pieces', {'77.0' '1366.51' '1/(-6.108918E-19*T^4+2.145325E-15*T^3-2.652848E-12*T^2+1.520400E-09*T+2.391838E-07)'});
model.material('mat1').propertyGroup('def').func('sigma').label('Piecewise 4');
model.material('mat1').propertyGroup('def').func('sigma').set('fununit', 'S/m');
model.material('mat1').propertyGroup('def').func('sigma').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func('rho').set('funcname', 'rho');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('extrap', 'constant');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'0.0' '257.0' '8865.19456-0.0478555357*T^1+0.00144207487*T^2-2.56021094E-5*T^3+1.01351547E-7*T^4-1.30099574E-10*T^5'; '257.0' '1366.51' '8891.11187-0.284243638*T^1-1.28304726E-4*T^2+1.48689125E-8*T^3'});
model.material('mat1').propertyGroup('def').func('rho').label('Piecewise 5');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func.create('TD_solid_annealed_1', 'Piecewise');
model.material('mat1').propertyGroup('def').func('TD_solid_annealed_1').set('funcname', 'TD_solid_annealed_1');
model.material('mat1').propertyGroup('def').func('TD_solid_annealed_1').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('TD_solid_annealed_1').set('extrap', 'constant');
model.material('mat1').propertyGroup('def').func('TD_solid_annealed_1').set('pieces', {'88.0' '231.0' '3.01716296E-5-5.29371819E-7*T^1+4.99526666E-9*T^2-2.46459928E-11*T^3+6.20932699E-14*T^4-6.29459694E-17*T^5'; '231.0' '588.71' '1.11749236E-5-5.48060344E-8*T^1+2.04320228E-10*T^2-3.16920836E-13*T^3+1.86668075E-16*T^4'});
model.material('mat1').propertyGroup('def').func('TD_solid_annealed_1').label('Piecewise 6');
model.material('mat1').propertyGroup('def').func('TD_solid_annealed_1').set('fununit', 'm^2/s');
model.material('mat1').propertyGroup('def').func('TD_solid_annealed_1').set('argunit', 'K');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('strainreferencetemperature');
model.material('mat1').propertyGroup.create('ThermalExpansion', 'Thermal_expansion');
model.material('mat1').propertyGroup('ThermalExpansion').set('dL', '(dL(T)-dL(Tempref))/(1+dL(Tempref))');
model.material('mat1').propertyGroup('ThermalExpansion').set('INFO_PREFIX:dL', ['Reference: A. Goldsmith, H.J. Hirschhorn and T.E. Waterman, Thermophysical properties of solid materials. volume II: alloys (melting temperature above 1000 F), WADC Technical Report 58-476, v2, AD253710 (1960) available online at http://contrails.iit.edu/reports/6803 and Special Metals Corporation Product Data Sheet SMC-053 (2005)' newline 'Note: the reference temperature is 20 ' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C (293 K), average of values from annealed, hot-rolled, cast and cold-rolled materials' newline 'Reference temperature: 293.00[K]']);
model.material('mat1').propertyGroup('ThermalExpansion').set('alphatan', 'CTE(T)');
model.material('mat1').propertyGroup('ThermalExpansion').set('INFO_PREFIX:alphatan', ['Reference: A. Goldsmith, H.J. Hirschhorn and T.E. Waterman, Thermophysical properties of solid materials. volume II: alloys (melting temperature above 1000 F), WADC Technical Report 58-476, v2, AD253710 (1960) available online at http://contrails.iit.edu/reports/6803 and Special Metals Corporation Product Data Sheet SMC-053 (2005)' newline 'Note: average of values from annealed, hot-rolled, cast and cold-rolled materials, calculated from the linear expansion']);
model.material('mat1').propertyGroup('ThermalExpansion').func.create('dL', 'Piecewise');
model.material('mat1').propertyGroup('ThermalExpansion').func('dL').set('funcname', 'dL');
model.material('mat1').propertyGroup('ThermalExpansion').func('dL').set('arg', 'T');
model.material('mat1').propertyGroup('ThermalExpansion').func('dL').set('extrap', 'constant');
model.material('mat1').propertyGroup('ThermalExpansion').func('dL').set('pieces', {'0.0' '152.0' '-0.00256624558-1.28314837E-7*T^1+1.69605795E-8*T^2+1.05143788E-10*T^3+3.61264601E-14*T^4'; '152.0' '1366.51' '-0.00353508663+1.06299338E-5*T^1+4.98581477E-9*T^2-2.98610934E-13*T^3'});
model.material('mat1').propertyGroup('ThermalExpansion').func('dL').label('Piecewise');
model.material('mat1').propertyGroup('ThermalExpansion').func('dL').set('fununit', '');
model.material('mat1').propertyGroup('ThermalExpansion').func('dL').set('argunit', 'K');
model.material('mat1').propertyGroup('ThermalExpansion').func.create('CTE', 'Piecewise');
model.material('mat1').propertyGroup('ThermalExpansion').func('CTE').set('funcname', 'CTE');
model.material('mat1').propertyGroup('ThermalExpansion').func('CTE').set('arg', 'T');
model.material('mat1').propertyGroup('ThermalExpansion').func('CTE').set('extrap', 'constant');
model.material('mat1').propertyGroup('ThermalExpansion').func('CTE').set('pieces', {'0.0' '107.0' '3.3921159E-8*T^1+3.15431364E-10*T^2+1.4450584E-13*T^3'; '107.0' '177.0' '4.29323658E-4-1.41551639E-5*T^1+1.83065472E-7*T^2-1.14439337E-9*T^3+3.48744061E-12*T^4-4.16533532E-15*T^5'; '177.0' '1366.51' '1.07681883E-5+9.97162954E-9*T^1-8.95832802E-13*T^2'});
model.material('mat1').propertyGroup('ThermalExpansion').func('CTE').label('Piecewise 1');
model.material('mat1').propertyGroup('ThermalExpansion').func('CTE').set('fununit', '1/K');
model.material('mat1').propertyGroup('ThermalExpansion').func('CTE').set('argunit', 'K');
model.material('mat1').propertyGroup('ThermalExpansion').addInput('temperature');
model.material('mat1').propertyGroup('ThermalExpansion').addInput('strainreferencetemperature');
model.material('mat1').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('INFO_PREFIX:E', 'Reference: Product Reference Guide, Special Metals Corporation, Huntington, WV');
model.material('mat1').propertyGroup('Enu').set('nu', '3.20000000e-01');
model.material('mat1').propertyGroup('Enu').set('INFO_PREFIX:nu', ['Reference: Special Metals Corporation Product Data Sheet SMC-053 (2005)' newline 'Note: room temperature value']);
model.material('mat1').propertyGroup('Enu').func.create('E', 'Piecewise');
model.material('mat1').propertyGroup('Enu').func('E').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('E').set('arg', 'T');
model.material('mat1').propertyGroup('Enu').func('E').set('extrap', 'constant');
model.material('mat1').propertyGroup('Enu').func('E').set('pieces', {'293.0' '1144.0' '2.092662E11-1.166588E8*T^1+172116.1*T^2-116.639*T^3'});
model.material('mat1').propertyGroup('Enu').func('E').label('Piecewise');
model.material('mat1').propertyGroup('Enu').func('E').set('fununit', 'Pa');
model.material('mat1').propertyGroup('Enu').func('E').set('argunit', 'K');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup.create('KG', 'Bulk_modulus_and_shear_modulus');
model.material('mat1').propertyGroup('KG').set('G', '7.08057955e+10');
model.material('mat1').propertyGroup('KG').set('INFO_PREFIX:G', ['Reference: Product Reference Guide, Special Metals Corporation, Huntington, WV' newline 'Note: calculated from E and v, errors may be large, room temperature value']);
model.material('mat1').propertyGroup('KG').set('K', '1.73080833e+11');
model.material('mat1').propertyGroup('KG').set('INFO_PREFIX:K', ['Reference: Product Reference Guide, Special Metals Corporation, Huntington, WV' newline 'Note: calculated from E and v, errors may be large, room temperature value']);
model.material('mat1').set('family', 'custom');
model.material('mat1').set('lighting', 'cooktorrance');
model.material('mat1').set('specular', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.1);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').set('shininess', 130);
model.material('mat1').propertyGroup('def').set('density', {'0.32'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('CR-39');
model.material('mat2').selection.set([4 5]);
model.material('mat2').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat2').propertyGroup('Enu').set('E', {'2.1[GPa]'});
model.material('mat2').propertyGroup('Enu').set('nu', {'0.4'});
model.material('mat2').propertyGroup('def').set('density', {'1.3[g/cm^3]'});

model.physics('solid').prop('d').set('d', 0.001);
model.physics('solid').create('fix1', 'Fixed', 1);
model.physics('solid').feature('fix1').selection.set([3]);
model.physics('solid').create('bndl1', 'BoundaryLoad', 1);
model.physics('solid').feature('bndl1').selection.set([42]);
model.physics('solid').feature('bndl1').set('LoadType', 'TotalForce');
model.physics('solid').feature('bndl1').set('Ftot', [0 1 0]);

model.group.create('lg1', 'LoadGroup');

model.physics('solid').feature('bndl1').set('loadGroup', 'lg1');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([2]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([1]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 15);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([22]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 20);
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').run;

model.study('std1').feature('stat').set('useloadcase', true);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 3', 2);
model.study('std1').feature('stat').setIndex('loadgroup', false, 2, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 2, 0);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 3', 2);
model.study('std1').feature('stat').setIndex('loadgroup', false, 2, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 2, 0);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 4', 3);
model.study('std1').feature('stat').setIndex('loadgroup', false, 3, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 3, 0);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 4', 3);
model.study('std1').feature('stat').setIndex('loadgroup', false, 3, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 3, 0);
model.study('std1').feature('stat').setIndex('loadgroup', true, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', 0, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroup', true, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', 4, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroup', true, 2, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', -4, 2, 0);
model.study('std1').feature('stat').setIndex('loadgroup', true, 3, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', 0, 3, 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 4, 0);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').set('resolution', 'normal');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('expr', {'u' 'v'});
model.result('pg1').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 2, 0);
model.result('pg1').run;
model.result('pg1').feature('surf1').set('unit', 'MPa');
model.result('pg1').run;
model.result('pg1').feature('surf1').feature('def').set('scaleactive', true);
model.result('pg1').feature('surf1').feature('def').set('scale', 1);
model.result('pg1').run;
model.result('pg1').run;
model.result.duplicate('pg2', 'pg1');
model.result('pg2').run;
model.result('pg2').label('Principal strain (solid)');
model.result('pg2').set('edges', false);
model.result('pg2').set('legendpos', 'bottom');
model.result('pg2').run;
model.result('pg2').feature('surf1').set('data', 'dset1');
model.result('pg2').feature('surf1').setIndex('looplevel', 2, 0);
model.result('pg2').feature('surf1').set('expr', 'solid.ep1');
model.result('pg2').run;
model.result('pg2').feature('surf1').feature('def').set('expr', {'u' 'v+0.020'});
model.result('pg2').run;
model.result('pg2').feature.duplicate('surf2', 'surf1');
model.result('pg2').run;
model.result('pg2').feature('surf2').setIndex('looplevel', 3, 0);
model.result('pg2').feature('surf2').set('expr', 'solid.ep3');
model.result('pg2').run;
model.result('pg2').feature('surf2').feature('def').set('expr', {'u' 'v-0.020'});
model.result('pg2').run;

model.physics.create('ftg', 'Fatigue', 'geom1');
model.physics('ftg').model('comp1');

model.study('std1').feature('stat').setSolveFor('/physics/ftg', false);

model.physics('ftg').create('elif1', 'StrainLifeModel', 2);
model.physics('ftg').feature('elif1').selection.set([1 2 3]);
model.physics('ftg').feature('elif1').set('ftgElifCrit', 'CombinedBAndCM');
model.physics('ftg').feature('elif1').set('fatigueInputPhysics', 'solid');
model.physics('ftg').feature('elif1').set('Ncut', '5.75e6');

model.material('mat1').propertyGroup.create('fatigueStressBasquin', 'Basquin[Fatigue]');
model.material('mat1').propertyGroup('fatigueStressBasquin').set('sigmaf_Basquin', {'970[MPa]'});
model.material('mat1').propertyGroup('fatigueStressBasquin').set('b_Basquin', {'-0.077'});
model.material('mat1').propertyGroup.create('fatigueStrainCoffinManson', 'Coffin-Manson[Fatigue]');
model.material('mat1').propertyGroup('fatigueStrainCoffinManson').set('epsilonf_CM', {'0.738'});
model.material('mat1').propertyGroup('fatigueStrainCoffinManson').set('c_CM', {'-0.54'});

model.study.create('std2');
model.study('std2').create('ftge', 'Fatigue');
model.study('std2').feature('ftge').set('solnum', 'auto');
model.study('std2').feature('ftge').set('usesol', 'off');
model.study('std2').feature('ftge').setSolveFor('/physics/solid', false);
model.study('std2').feature('ftge').setSolveFor('/physics/ftg', true);
model.study('std2').feature('ftge').set('usesol', true);
model.study('std2').feature('ftge').set('notsolmethod', 'sol');
model.study('std2').feature('ftge').set('notstudy', 'std1');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'ftge');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'ftge');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset2');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'ftg.ctf'});
model.result('pg3').feature('surf1').set('colortable', 'Rainbow');
model.result('pg3').feature('surf1').set('colortabletrans', 'none');
model.result('pg3').feature('surf1').set('colorscalemode', 'logarithmic');
model.result('pg3').feature('surf1').set('colortablerev', true);
model.result('pg3').feature('surf1').set('colortable', 'Traffic');
model.result('pg3').label('Cycles to Failure (ftg)');
model.result('pg3').feature('surf1').create('mrkr1', 'Marker');
model.result('pg3').feature('surf1').feature('mrkr1').set('precision', 3);
model.result('pg3').feature('surf1').feature('mrkr1').set('display', 'min');
model.result('pg3').run;
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').feature('surf1').set('colorlegend', false);
model.result('pg2').run;
model.result('pg2').feature('surf2').set('colorlegend', false);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('surf1').set('colorlegend', true);
model.result('pg2').run;
model.result('pg2').feature('surf2').set('colorlegend', true);
model.result('pg2').run;

model.title('Fatigue Failure of an Eyeglass Frame');

model.description(['In the search for weight reduction, the cross-section of an eyeglass frame is continuously reduced. The thin section over the nose transfers the entire load between the two halves. This example predicts the fatigue life using the combined Basquin and Coffin' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Manson model when eyeglasses are subjected to bending.']);

model.label('eyeglass_frame_fatigue.mph');

model.modelNode.label('Components');

out = model;
