function out = model
%
% piezo_mems_speaker.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Electroacoustic_Transducers');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics('solid').create('pzm1', 'PiezoelectricMaterialModel');
model.physics('solid').feature('pzm1').selection.all;
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics('es').create('ccnp1', 'ChargeConservationPiezo');
model.physics('es').feature('ccnp1').selection.all;
model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('ta', 'ThermoacousticsSinglePhysics', 'geom1');
model.physics('ta').model('comp1');

model.multiphysics.create('pze1', 'PiezoelectricEffect', 'geom1', 3);
model.multiphysics('pze1').set('Solid_physics', 'solid');
model.multiphysics('pze1').set('Electrostatics_physics', 'es');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/physics/es', true);
model.study('std1').feature('stat').setSolveFor('/physics/acpr', true);
model.study('std1').feature('stat').setSolveFor('/physics/ta', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/pze1', true);
model.study('std1').create('frlin', 'Frequencylinearized');
model.study('std1').feature('frlin').set('outputmap', {});
model.study('std1').feature('frlin').set('ngenAUX', '1');
model.study('std1').feature('frlin').set('goalngenAUX', '1');
model.study('std1').feature('frlin').set('ngenAUX', '1');
model.study('std1').feature('frlin').set('goalngenAUX', '1');
model.study('std1').feature('frlin').setSolveFor('/physics/solid', true);
model.study('std1').feature('frlin').setSolveFor('/physics/es', true);
model.study('std1').feature('frlin').setSolveFor('/physics/acpr', true);
model.study('std1').feature('frlin').setSolveFor('/physics/ta', true);
model.study('std1').feature('frlin').setSolveFor('/multiphysics/pze1', true);

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('fmax', '20[kHz]', 'Maximum frequency');
model.param.set('c0', '343 [m/s]', 'Speed of sound in air');
model.param.set('lambda_min', 'c0/fmax', 'Minimum wavelength');
model.param.set('dvisc', '0.22[mm]*sqrt(100[Hz]/fmax)', 'Viscous boundary layer thickness');
model.param.set('V_DC', '1[V]', 'Bias voltage');
model.param.set('V_AC', '0.2[V]', 'Alternating voltage');
model.param.set('th_pt', '400[nm]', 'Thickness of the Pt layer');
model.param.set('th_au', '250[nm]', 'Thickness of the Au layer');
model.param.set('rho_pt', '21450[kg/m^3]', 'Density of Pt');
model.param.set('rho_au', '19300[kg/m^3]', 'Density of Au');

model.geom('geom1').insertFile('piezo_mems_speaker_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');

model.view('view1').set('showgrid', false);
model.view('view1').set('transparency', false);

model.cpl.create('linext1', 'LinearExtrusion', 'geom1');
model.cpl('linext1').selection.geom('geom1', 1);
model.cpl('linext1').selection.set([36 91 141]);
model.cpl('linext1').selection('srcvertex1').set([11]);
model.cpl('linext1').selection('srcvertex2').set([65]);
model.cpl('linext1').selection('dstvertex1').set([11]);
model.cpl('linext1').selection('dstvertex2').set([65]);

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.named('geom1_difsel3');
model.coordSystem('pml1').set('ScalingType', 'Cylindrical');
model.coordSystem('pml1').set('wavelengthSource', 'acpr');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('StrainCharge', 'Strain-charge form');
model.material('mat2').propertyGroup.create('StressCharge', 'Stress-charge form');
model.material('mat2').label('Lead Zirconate Titanate (PZT-4)');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat2').set('customdiffuse', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat2').set('noise', true);
model.material('mat2').set('fresnel', 0.9);
model.material('mat2').set('roughness', 0.1);
model.material('mat2').set('metallic', 0);
model.material('mat2').set('pearl', 0);
model.material('mat2').set('diffusewrap', 0);
model.material('mat2').set('clearcoat', 0);
model.material('mat2').set('reflectance', 0);
model.material('mat2').propertyGroup('def').set('relpermittivity', {'762.5' '0' '0' '0' '762.5' '0' '0' '0' '663.2'});
model.material('mat2').propertyGroup('def').set('density', '7500[kg/m^3]');
model.material('mat2').propertyGroup('StrainCharge').set('sE', {'1.23e-011[1/Pa]' '-4.05e-012[1/Pa]' '-5.31e-012[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '-4.05e-012[1/Pa]' '1.23e-011[1/Pa]' '-5.31e-012[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '0[1/Pa]' '-5.31e-012[1/Pa]' '-5.31e-012[1/Pa]' '1.55e-011[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '3.9e-011[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '3.9e-011[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '3.27e-011[1/Pa]'});
model.material('mat2').propertyGroup('StrainCharge').set('dET', {'0[C/N]' '0[C/N]' '-1.23e-010[C/N]' '0[C/N]' '0[C/N]' '-1.23e-010[C/N]' '0[C/N]' '0[C/N]' '2.89e-010[C/N]' '0[C/N]'  ...
'4.96e-010[C/N]' '0[C/N]' '4.96e-010[C/N]' '0[C/N]' '0[C/N]' '0[C/N]' '0[C/N]' '0[C/N]'});
model.material('mat2').propertyGroup('StrainCharge').set('epsilonrT', {'1475' '0' '0' '0' '1475' '0' '0' '0' '1300'});
model.material('mat2').propertyGroup('StressCharge').set('cE', {'1.38999e+011[Pa]' '7.78366e+010[Pa]' '7.42836e+010[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '7.78366e+010[Pa]' '1.38999e+011[Pa]' '7.42836e+010[Pa]' '0[Pa]'  ...
'0[Pa]' '0[Pa]' '7.42836e+010[Pa]' '7.42836e+010[Pa]' '1.15412e+011[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]'  ...
'0[Pa]' '2.5641e+010[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '2.5641e+010[Pa]' '0[Pa]'  ...
'0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '3.0581e+010[Pa]'});
model.material('mat2').propertyGroup('StressCharge').set('eES', {'0[C/m^2]' '0[C/m^2]' '-5.20279[C/m^2]' '0[C/m^2]' '0[C/m^2]' '-5.20279[C/m^2]' '0[C/m^2]' '0[C/m^2]' '15.0804[C/m^2]' '0[C/m^2]'  ...
'12.7179[C/m^2]' '0[C/m^2]' '12.7179[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]'});
model.material('mat2').propertyGroup('StressCharge').set('epsilonrS', {'762.5' '0' '0' '0' '762.5' '0' '0' '0' '663.2'});
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat3').label('Silicon');
model.material('mat3').set('family', 'custom');
model.material('mat3').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat3').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat3').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat3').set('noise', true);
model.material('mat3').set('fresnel', 0.7);
model.material('mat3').set('metallic', 0);
model.material('mat3').set('pearl', 0);
model.material('mat3').set('diffusewrap', 0);
model.material('mat3').set('clearcoat', 0);
model.material('mat3').set('reflectance', 0);
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'1e-12[S/m]' '0' '0' '0' '1e-12[S/m]' '0' '0' '0' '1e-12[S/m]'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '700[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'11.7' '0' '0' '0' '11.7' '0' '0' '0' '11.7'});
model.material('mat3').propertyGroup('def').set('density', '2329[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '170[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.28');
model.material('mat3').propertyGroup('RefractiveIndex').set('n', {'3.48' '0' '0' '0' '3.48' '0' '0' '0' '3.48'});
model.material('mat3').selection.named('geom1_difsel1');
model.material('mat2').selection.named('geom1_difsel2');
model.material('mat1').selection.named('geom1_unisel4');

model.physics('solid').selection.named('geom1_unisel2');
model.physics('solid').feature('pzm1').selection.named('geom1_difsel2');
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.set([45 46 111 113 142 143 144 146]);
model.physics('solid').create('sym1', 'SymmetrySolid', 2);
model.physics('solid').feature('sym1').selection.named('geom1_difsel5');
model.physics('solid').create('adm1', 'AddedMass2', 2);
model.physics('solid').feature('adm1').label('Added Mass - Pt Electrode');
model.physics('solid').feature('adm1').selection.named('geom1_sel2');
model.physics('solid').feature('adm1').set('mPerArea', {'rho_pt*th_pt' '0' '0' '0' 'rho_pt*th_pt' '0' '0' '0' 'rho_pt*th_pt'});
model.physics('solid').create('adm2', 'AddedMass2', 2);
model.physics('solid').feature('adm2').label('Added Mass - Au Electrode');
model.physics('solid').feature('adm2').selection.named('geom1_sel3');
model.physics('solid').feature('adm2').set('mPerArea', {'rho_au*th_au' '0' '0' '0' 'rho_au*th_au' '0' '0' '0' 'rho_au*th_au'});
model.physics('es').selection.named('geom1_unisel3');
model.physics('es').feature('ccnp1').selection.named('geom1_difsel2');
model.physics('es').create('gnd1', 'Ground', 2);
model.physics('es').feature('gnd1').selection.named('geom1_sel2');
model.physics('es').create('term1', 'Terminal', 2);
model.physics('es').feature('term1').selection.named('geom1_sel3');
model.physics('es').feature('term1').set('TerminalType', 'Voltage');
model.physics('es').feature('term1').set('V0', 'V_DC+linper(V_AC)');
model.physics('acpr').selection.named('geom1_difsel4');
model.physics('acpr').create('sym1', 'Symmetry', 2);
model.physics('acpr').feature('sym1').selection.named('geom1_difsel5');
model.physics('acpr').create('efc1', 'ExteriorFieldCalculation', 2);
model.physics('acpr').feature('efc1').selection.named('geom1_sel1');
model.physics('acpr').feature('efc1').setIndex('SymmetryCondition0', 1, 0);
model.physics('acpr').feature('efc1').setIndex('SymmetryCondition1', 1, 0);
model.physics('acpr').feature('efc1').setIndex('SymmetryCondition2', 1, 0);
model.physics('acpr').create('tvb1', 'ThermoviscousBoundaryLayerImpedance', 2);
model.physics('acpr').feature('tvb1').set('FluidMaterial', 'mat1');
model.physics('acpr').feature('tvb1').selection.set([3 44 47 141]);
model.physics('ta').selection.named('geom1_unisel1');
model.physics('ta').create('sym1', 'Symmetry', 2);
model.physics('ta').feature('sym1').selection.named('geom1_difsel5');

model.multiphysics.create('tsb1', 'ThermoacousticStructureBoundary', 'geom1', 2);
model.multiphysics('tsb1').selection.all;
model.multiphysics.create('atb1', 'AcousticThermoacousticBoundary', 'geom1', 2);
model.multiphysics('atb1').selection.all;
model.multiphysics.create('asb1', 'AcousticStructureBoundary', 'geom1', 2);
model.multiphysics('asb1').selection.all;
model.multiphysics('asb1').feature.create('tvb1', 'CouplingThermoviscousBoundaryLayerImpedance', 'geom1', 2);
model.multiphysics('asb1').feature('tvb1').selection.named('geom1_boxsel3');
model.multiphysics('asb1').feature('tvb1').set('FluidMaterial', 'mat1');

model.mesh('mesh1').create('map1', 'Map');

model.view('view1').set('renderwireframe', true);

model.mesh('mesh1').feature('map1').selection.set([36 73 81 90 121]);
model.mesh('mesh1').feature('map1').set('adjustedgdistr', true);
model.mesh('mesh1').feature('map1').create('size1', 'Size');
model.mesh('mesh1').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmax', 'dvisc*4');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([35]);
model.mesh('mesh1').feature('map1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis1').set('elemratio', 2);
model.mesh('mesh1').feature('map1').feature('dis1').set('symmetric', true);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([102]);
model.mesh('mesh1').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis2').set('elemratio', 3);
model.mesh('mesh1').feature('map1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([81]);
model.mesh('mesh1').feature('map1').feature('dis3').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis3').set('elemratio', 3);
model.mesh('mesh1').feature('map1').feature('dis3').set('reverse', true);
model.mesh('mesh1').feature('map1').create('dis4', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis4').selection.set([72 141]);
model.mesh('mesh1').feature('map1').feature('dis4').set('numelem', 3);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'lambda_min/6');
model.mesh('mesh1').feature('size').set('hmin', 'dvisc/2');
model.mesh('mesh1').feature('size').set('hgrad', 1.3);
model.mesh('mesh1').run;
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.set([16 35 43 63 97 108 130 140]);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 'dvisc*15');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hgradactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hgrad', 1.2);
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([3 4 8 9 10 11 12 13 16 17 19 20 21 22 23 24 25 26 27 28 30 32 33 34 35 36 37]);
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.set([4 10 11 13 17 20 23 25 27 30 33 35 37]);
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 2);
model.mesh('mesh1').run('swe1');
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.set([1 2 5 6 29 31]);
model.mesh('mesh1').run('ftet1');
model.mesh('mesh1').create('swe2', 'Sweep');
model.mesh('mesh1').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis1').set('numelem', 8);
model.mesh('mesh1').run('swe2');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(3);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('bl1').selection.set([6]);
model.mesh('mesh1').feature('bl1').set('smoothtransition', false);
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('geom1_sel1');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 1);
model.mesh('mesh1').run('bl1');

model.study('std1').feature('frlin').set('plist', '10 5000 6000 7000 8000 9000 9200 9400 9475 9550 9600 9650 9725 9800 10000 10200 11000 12000 20000');
model.study('std1').feature('frlin').set('geometricNonlinearity', true);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (pze1) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (pze1)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'frlin');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'frlin');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 0.001);
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s2').feature('p1').set('plistarr', {'10 5000 6000 7000 8000 9000 9200 9400 9475 9550 9600 9650 9725 9800 10000 10200 11000 12000 20000'});
model.sol('sol1').feature('s2').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s2').feature('p1').set('probes', {});
model.sol('sol1').feature('s2').feature('p1').set('control', 'frlin');
model.sol('sol1').feature('s2').set('nonlin', 'linper');
model.sol('sol1').feature('s2').set('storelinpoint', true);
model.sol('sol1').feature('s2').set('linpsolnum', 'all');
model.sol('sol1').feature('s2').set('control', 'frlin');
model.sol('sol1').feature('s2').set('linpmethod', 'sol');
model.sol('sol1').feature('s2').set('linpsol', 'sol1');
model.sol('sol1').feature('s2').set('linpsoluse', 'sol2');
model.sol('sol1').feature('s2').set('control', 'frlin');
model.sol('sol1').feature('s2').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s2').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Suggested Direct Solver (pze1_tsb1_asb1_atb1) (Merged)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').label('Suggested Iterative Solver (GMRES with Direct Precon.) (pze1_tsb1_asb1_atb1)');
model.sol('sol1').feature('s2').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('hybridvar', {'comp1_p' 'comp1_u2' 'comp1_p2'});
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s2').feature('i1').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i1').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i1').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('s2').feature('i1').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s2').feature('i1').create('dp3', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i1').feature('dp3').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i1').feature('dp3').set('hybridvar', {'comp1_u' 'comp1_V'});
model.sol('sol1').feature('s2').feature('i1').feature('dp3').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('dp3').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').label('Suggested Iterative Solver (GMRES with DD) (pze1_tsb1_asb1_atb1)');
model.sol('sol1').feature('s2').feature('i2').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('hybridvar', {'comp1_u2' 'comp1_p2' 'comp1_T'});
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('domdofmax', 200000);
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('userac', false);
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('usecoarse', 'aggregation');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridvar', {'comp1_u2' 'comp1_p2'});
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('dp1').set('hybridvar', {'comp1_p' 'comp1_u' 'comp1_V'});
model.sol('sol1').feature('s2').feature('i2').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s2').feature('i1').active(true);
model.sol('sol1').runAll;

model.result.dataset('dset1').set('frametype', 'spatial');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 19, 0);
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.misesGp_peak'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('differential', true);
model.result('pg1').feature('vol1').set('colortable', 'Rainbow');
model.result('pg1').feature('vol1').set('colortabletrans', 'none');
model.result('pg1').feature('vol1').set('colorscalemode', 'linear');
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').set('colortable', 'Prism');
model.result('pg1').feature('vol1').create('def', 'Deform');
model.result('pg1').feature('vol1').feature('def').set('differential', true);
model.result('pg1').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Electric Potential (es)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 19, 0);
model.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond1/pg1');
model.result('pg2').feature.create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('solutionparams', 'parent');
model.result('pg2').feature('mslc1').set('expr', 'V');
model.result('pg2').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg2').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg2').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg2').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg2').feature('mslc1').set('colortable', 'Dipole');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg2').feature('mslc1').set('data', 'parent');
model.result('pg2').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg2').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});
model.result('pg2').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg2').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg2').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg2').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg2').feature('strmsl1').set('titletype', 'none');
model.result('pg2').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg2').feature('strmsl1').set('udist', 0.02);
model.result('pg2').feature('strmsl1').set('maxlen', 0.4);
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('inheritcolor', false);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('data', 'parent');
model.result('pg2').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg2').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg2').feature('strmsl1').feature('col1').set('expr', 'V');
model.result('pg2').feature('strmsl1').feature('col1').set('evalmethodactive', 'off');
model.result('pg2').feature('strmsl1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg2').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg2').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg2').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Electric Field Norm (es)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 19, 0);
model.result('pg3').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');
model.result('pg3').feature.create('mslc1', 'Multislice');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('solutionparams', 'parent');
model.result('pg3').feature('mslc1').set('expr', 'es.normE');
model.result('pg3').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg3').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg3').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg3').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg3').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg3').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg3').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg3').feature('mslc1').set('colortable', 'Prism');
model.result('pg3').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg3').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg3').feature('mslc1').set('data', 'parent');
model.result('pg3').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg3').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});
model.result('pg3').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg3').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg3').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg3').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg3').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg3').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg3').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg3').feature('strmsl1').set('titletype', 'none');
model.result('pg3').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg3').feature('strmsl1').set('udist', 0.02);
model.result('pg3').feature('strmsl1').set('maxlen', 0.4);
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('inheritcolor', false);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('data', 'parent');
model.result('pg3').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg3').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg3').feature('strmsl1').feature('col1').set('expr', 'es.normE');
model.result('pg3').feature('strmsl1').feature('col1').set('evalmethodactive', 'off');
model.result('pg3').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg3').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg3').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg3').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg3').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg3').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 19, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg4').feature('surf1').set('colortable', 'Wave');
model.result('pg4').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').label('Acoustic Pressure (acpr)');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 19, 0);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg5').feature('surf1').set('colortable', 'Rainbow');
model.result('pg5').feature('surf1').set('colorscalemode', 'linear');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').label('Sound Pressure Level (acpr)');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 19, 0);
model.result('pg6').create('iso1', 'Isosurface');
model.result('pg6').feature('iso1').set('expr', {'acpr.p_t'});
model.result('pg6').feature('iso1').set('number', '10');
model.result('pg6').feature('iso1').set('colortable', 'Wave');
model.result('pg6').feature('iso1').set('colorscalemode', 'linearsymmetric');
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').label('Acoustic Pressure, Isosurfaces (acpr)');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').label('Acoustic Pressure (ta)');
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 19, 0);
model.result('pg7').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg3');
model.result('pg7').feature.create('mslc1', 'Multislice');
model.result('pg7').feature('mslc1').label('Multislice');
model.result('pg7').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg7').feature('mslc1').set('expr', 'ta.p_t');
model.result('pg7').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg7').feature('mslc1').set('colortable', 'Wave');
model.result('pg7').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg7').feature('mslc1').set('smooth', 'internal');
model.result('pg7').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg7').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg7').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg7').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg7').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg7').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg7').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg7').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg7').feature('mslc1').set('data', 'parent');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').label('Acoustic Velocity (ta)');
model.result('pg8').set('showlegendsunit', true);
model.result('pg8').set('data', 'dset1');
model.result('pg8').setIndex('looplevel', 19, 0);
model.result('pg8').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg1');
model.result('pg8').feature.create('slc1', 'Slice');
model.result('pg8').feature('slc1').label('Slice');
model.result('pg8').feature('slc1').set('showsolutionparams', 'on');
model.result('pg8').feature('slc1').set('expr', 'ta.v_inst');
model.result('pg8').feature('slc1').set('evalmethodactive', 'off');
model.result('pg8').feature('slc1').set('smooth', 'internal');
model.result('pg8').feature('slc1').set('showsolutionparams', 'on');
model.result('pg8').feature('slc1').set('evalmethodactive', 'off');
model.result('pg8').feature('slc1').set('showsolutionparams', 'on');
model.result('pg8').feature('slc1').set('evalmethodactive', 'off');
model.result('pg8').feature('slc1').set('showsolutionparams', 'on');
model.result('pg8').feature('slc1').set('evalmethodactive', 'off');
model.result('pg8').feature('slc1').set('showsolutionparams', 'on');
model.result('pg8').feature('slc1').set('evalmethodactive', 'off');
model.result('pg8').feature('slc1').set('data', 'parent');
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').label('Temperature Variation (ta)');
model.result('pg9').set('showlegendsunit', true);
model.result('pg9').set('data', 'dset1');
model.result('pg9').setIndex('looplevel', 19, 0);
model.result('pg9').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg2');
model.result('pg9').feature.create('mslc1', 'Multislice');
model.result('pg9').feature('mslc1').label('Multislice');
model.result('pg9').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg9').feature('mslc1').set('expr', 'ta.T_t');
model.result('pg9').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg9').feature('mslc1').set('colortable', 'ThermalWave');
model.result('pg9').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg9').feature('mslc1').set('smooth', 'internal');
model.result('pg9').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg9').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg9').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg9').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg9').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg9').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg9').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg9').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg9').feature('mslc1').set('data', 'parent');
model.result('pg1').run;
model.result('pg5').run;
model.result.remove('pg5');
model.result('pg6').run;
model.result('pg7').run;
model.result.remove('pg7');
model.result('pg8').run;
model.result('pg2').run;
model.result('pg2').selection.geom('geom1', 3);
model.result('pg2').selection.named('geom1_unisel3');
model.result('pg2').set('applyselectiontodatasetedges', true);
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('mslc1').set('multiplanexmethod', 'number');
model.result('pg2').feature('mslc1').set('xnumber', '0');
model.result('pg2').feature('mslc1').set('multiplaneymethod', 'number');
model.result('pg2').feature('mslc1').set('ynumber', '5');
model.result('pg2').feature('mslc1').set('multiplanezmethod', 'number');
model.result('pg2').feature('mslc1').set('znumber', '0');
model.result('pg2').run;
model.result('pg2').feature('strmsl1').set('multiplanexmethod', 'number');
model.result('pg2').feature('strmsl1').set('xnumber', '0');
model.result('pg2').feature('strmsl1').set('multiplaneymethod', 'number');
model.result('pg2').feature('strmsl1').set('ynumber', '5');
model.result('pg2').feature('strmsl1').set('multiplanezmethod', 'number');
model.result('pg2').feature('strmsl1').set('znumber', '0');
model.result('pg2').run;
model.result('pg4').set('applyselectiontodatasetedges', false);
model.result('pg4').run;
model.result('pg4').label('Acoustic Pressure (ta+acpr)');
model.result('pg4').selection.geom('geom1', 3);
model.result('pg4').selection.geom('geom1', 3);
model.result('pg4').selection.set([2 3 4 5 8 9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37]);
model.result('pg4').selection.named('geom1_comsel1');
model.result('pg4').set('applyselectiontodatasetedges', true);
model.result('pg4').run;
model.result('pg4').feature.remove('surf1');
model.result('pg4').run;
model.result('pg4').create('vol1', 'Volume');
model.result('pg4').feature('vol1').set('expr', 'atb1.p_t');
model.result('pg4').feature('vol1').set('descr', 'Total acoustic pressure');
model.result('pg4').feature('vol1').set('descractive', true);
model.result('pg4').feature('vol1').set('descr', 'Acoustic pressure');
model.result('pg4').feature('vol1').set('colortable', 'Wave');
model.result('pg4').feature('vol1').set('colorscalemode', 'linearsymmetric');
model.result('pg4').feature('vol1').create('filt1', 'Filter');
model.result('pg4').run;
model.result('pg4').feature('vol1').feature('filt1').set('expr', '(x<y)');
model.result('pg4').run;
model.result('pg6').set('applyselectiontodatasetedges', false);
model.result('pg6').run;
model.result('pg6').label('Acoustic Pressure, Isosurfaces (ta+acpr)');
model.result('pg6').selection.geom('geom1', 3);
model.result('pg6').selection.named('geom1_comsel1');
model.result('pg6').set('applyselectiontodatasetedges', true);
model.result('pg6').run;
model.result('pg6').feature('iso1').set('expr', 'atb1.p_t');
model.result('pg6').feature('iso1').set('descr', 'Total acoustic pressure');
model.result('pg6').feature('iso1').set('descractive', true);
model.result('pg6').feature('iso1').set('descr', 'Acoustic pressure');
model.result('pg6').run;
model.result('pg8').set('applyselectiontodatasetedges', false);
model.result('pg8').run;
model.result('pg8').setIndex('looplevel', 11, 0);
model.result('pg8').selection.geom('geom1', 3);
model.result('pg8').selection.named('geom1_unisel1');
model.result('pg8').set('applyselectiontodatasetedges', true);
model.result('pg8').set('edges', false);
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').feature('slc1').set('planetype', 'general');
model.result('pg8').feature('slc1').set('genmethod', 'pointnormal');
model.result('pg8').feature('slc1').set('genpnpoint', [20 20 0]);
model.result('pg8').feature('slc1').set('genpnvec', [1 1 0]);
model.result('pg8').feature('slc1').set('genparaactive', true);
model.result('pg8').feature('slc1').set('gennumber', 10);
model.result('pg8').run;
model.result('pg8').feature('slc1').set('gennumber', 0);
model.result('pg8').run;
model.result('pg8').feature('slc1').set('gennumber', 10);
model.result('pg8').run;
model.result('pg9').set('applyselectiontodatasetedges', false);
model.result('pg9').run;
model.result('pg9').setIndex('looplevel', 11, 0);
model.result('pg9').selection.geom('geom1', 3);
model.result('pg9').selection.geom('geom1', 3);
model.result('pg9').selection.set([2 3 4 5 9 11 19 21 22 23 29 31 32 33 36 37]);
model.result('pg9').selection.named('geom1_unisel1');
model.result('pg9').set('applyselectiontodatasetedges', true);
model.result('pg9').set('edges', false);
model.result('pg9').run;
model.result('pg9').run;
model.result('pg9').feature.remove('mslc1');
model.result('pg9').run;
model.result('pg9').create('slc1', 'Slice');
model.result('pg9').feature('slc1').set('expr', 'ta.T_t');
model.result('pg9').feature('slc1').set('planetype', 'general');
model.result('pg9').feature('slc1').set('genmethod', 'pointnormal');
model.result('pg9').feature('slc1').set('genpnpoint', [20 20 0]);
model.result('pg9').feature('slc1').set('genpnvec', [1 1 0]);
model.result('pg9').feature('slc1').set('genparaactive', true);
model.result('pg9').feature('slc1').set('gennumber', 10);
model.result('pg9').feature('slc1').set('colortable', 'ThermalWave');
model.result('pg9').feature('slc1').set('colorscalemode', 'linearsymmetric');
model.result('pg9').run;
model.result('pg9').feature('slc1').set('gennumber', 0);
model.result('pg9').run;
model.result('pg9').feature('slc1').set('gennumber', 10);
model.result('pg9').run;
model.result('pg9').run;
model.result.duplicate('pg10', 'pg9');
model.result('pg10').run;
model.result('pg10').label('Logarithmic Thermoviscous Losses (ta)');
model.result('pg10').run;
model.result('pg10').feature('slc1').set('expr', 'log10(ta.diss_tot)');
model.result('pg10').feature('slc1').set('descractive', true);
model.result('pg10').feature('slc1').set('descr', 'log10(Thermoviscous losses)');
model.result('pg10').feature('slc1').set('rangecoloractive', true);
model.result('pg10').feature('slc1').set('rangecolormin', 6.1);
model.result('pg10').feature('slc1').set('rangecolormax', 8.1);
model.result('pg10').feature('slc1').set('colortable', 'HeatCameraLight');
model.result('pg10').feature('slc1').set('colorscalemode', 'linear');
model.result('pg10').feature('slc1').set('gennumber', 0);
model.result('pg10').run;
model.result('pg10').feature('slc1').set('gennumber', 10);
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Terminal Impedance');
model.result('pg11').set('titletype', 'label');
model.result('pg11').set('twoyaxes', true);
model.result('pg11').set('axislimits', true);
model.result('pg11').set('xmin', 18);
model.result('pg11').set('xmax', 20000);
model.result('pg11').set('ymin', 0.1);
model.result('pg11').set('ymax', 150);
model.result('pg11').set('yminsec', -91);
model.result('pg11').set('ymaxsec', -20);
model.result('pg11').set('xlog', true);
model.result('pg11').set('ylog', true);
model.result('pg11').set('legendpos', 'lowerleft');
model.result('pg11').create('glob1', 'Global');
model.result('pg11').feature('glob1').set('markerpos', 'datapoints');
model.result('pg11').feature('glob1').set('linewidth', 'preference');
model.result('pg11').feature('glob1').setIndex('expr', 'abs(1/es.Y11)/4', 0);
model.result('pg11').feature('glob1').setIndex('unit', ['k' 'ohm' ], 0);
model.result('pg11').feature('glob1').setIndex('descr', 'Magnitude', 0);
model.result('pg11').run;
model.result('pg11').run;
model.result('pg11').create('glob2', 'Global');
model.result('pg11').feature('glob2').set('markerpos', 'datapoints');
model.result('pg11').feature('glob2').set('linewidth', 'preference');
model.result('pg11').feature('glob2').set('plotonsecyaxis', true);
model.result('pg11').feature('glob2').setIndex('expr', 'arg((1/es.Y11))', 0);
model.result('pg11').feature('glob2').setIndex('unit', 'deg', 0);
model.result('pg11').feature('glob2').setIndex('descr', 'Phase', 0);
model.result('pg11').run;
model.result.dataset.create('dset3', 'Solution');
model.result.dataset('dset3').selection.geom('geom1', 3);
model.result.dataset('dset3').selection.named('geom1_unisel3');
model.result.dataset.create('sec1', 'Sector3D');
model.result.dataset('sec1').set('data', 'dset3');
model.result.dataset('sec1').set('sectors', 4);
model.result.dataset('sec1').set('trans', 'rotrefl');
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').set('applyselectiontodatasetedges', false);
model.result('pg12').run;
model.result('pg12').label('Model Thumbnail');
model.result('pg12').set('data', 'sec1');
model.result('pg12').setIndex('looplevel', 11, 0);
model.result('pg12').set('edges', false);
model.result('pg12').set('showlegendsunit', true);
model.result('pg12').run;

model.view('view5').set('showgrid', false);

model.result('pg12').create('vol1', 'Volume');
model.result('pg12').feature('vol1').create('def1', 'Deform');
model.result('pg12').run;
model.result('pg12').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg12').feature('vol1').feature('def1').set('scale', 100);
model.result('pg12').run;
model.result('pg12').run;
model.result('pg12').create('slc1', 'Slice');
model.result('pg12').feature('slc1').set('expr', 'ta.v_inst');
model.result('pg12').feature('slc1').set('planetype', 'general');
model.result('pg12').feature('slc1').set('genmethod', 'pointnormal');
model.result('pg12').feature('slc1').set('genpnvec', [1 1 0]);
model.result('pg12').feature('slc1').set('genparaactive', true);
model.result('pg12').feature('slc1').set('gennumber', 20);
model.result('pg12').feature('slc1').set('colorlegend', false);
model.result('pg12').feature('slc1').set('colortable', 'Traffic');
model.result('pg12').feature('slc1').set('inheritplot', 'vol1');
model.result('pg12').feature('slc1').set('inheritcolor', false);
model.result('pg12').feature('slc1').set('inheritrange', false);
model.result('pg12').run;
model.result('pg12').feature('slc1').create('def1', 'Deform');
model.result('pg12').run;
model.result('pg12').feature('slc1').feature('def1').set('expr', {'0' '0' 'linext1(w)'});
model.result('pg12').run;
model.result('pg12').feature.duplicate('slc2', 'slc1');
model.result('pg12').run;
model.result('pg12').feature('slc2').set('genpnvec', [-1 1 0]);
model.result('pg12').feature('slc2').set('titletype', 'none');
model.result('pg12').run;
model.result('pg12').run;
model.result('pg12').create('line1', 'Line');
model.result('pg12').feature('line1').set('expr', '0');
model.result('pg12').feature('line1').set('titletype', 'none');
model.result('pg12').feature('line1').set('coloring', 'uniform');
model.result('pg12').feature('line1').set('color', 'black');
model.result('pg12').feature('line1').set('inheritplot', 'vol1');
model.result('pg12').feature('line1').set('inheritcolor', false);
model.result('pg12').feature('line1').set('inheritrange', false);
model.result('pg12').feature('line1').create('def1', 'Deform');
model.result('pg12').run;
model.result('pg12').run;
model.result('pg12').run;
model.result.create('pg13', 'PlotGroup3D');
model.result('pg13').run;
model.result('pg13').label('Stationary Deformation (prestress)');
model.result('pg13').set('data', 'dset2');
model.result('pg13').set('titletype', 'label');
model.result('pg13').set('showlegendsunit', true);
model.result('pg13').create('surf1', 'Surface');
model.result('pg13').feature('surf1').set('expr', 'abs(w)');
model.result('pg13').feature('surf1').create('def1', 'Deform');
model.result('pg13').run;
model.result('pg13').run;
model.result.create('pg14', 'PlotGroup1D');
model.result('pg14').run;
model.result('pg14').label('On-Axis Response at 10 cm');
model.result('pg14').set('titletype', 'label');
model.result('pg14').create('oct1', 'OctaveBand');
model.result('pg14').feature('oct1').set('quantity', 'bandpower');
model.result('pg14').feature('oct1').set('markerpos', 'datapoints');
model.result('pg14').feature('oct1').set('linewidth', 'preference');
model.result('pg14').feature('oct1').selection.geom('geom1');
model.result('pg14').feature('oct1').set('expr', 'pext(0,0,10[cm])');
model.result('pg14').feature('oct1').set('quantity', 'continuous');
model.result('pg14').run;
model.result.create('pg15', 'PlotGroup3D');
model.result('pg15').set('data', 'dset1');
model.result('pg15').setIndex('looplevel', 19, 0);
model.result('pg15').set('defaultPlotID', 'displacement');
model.result('pg15').label('Displacement (solid)');
model.result('pg15').set('frametype', 'spatial');
model.result('pg15').set('showlegends', true);
model.result('pg15').create('vol1', 'Volume');
model.result('pg15').feature('vol1').set('expr', {'solid.disp'});
model.result('pg15').feature('vol1').set('threshold', 'manual');
model.result('pg15').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg15').feature('vol1').set('colortable', 'SpectrumLight');
model.result('pg15').feature('vol1').set('colortabletrans', 'none');
model.result('pg15').feature('vol1').set('colorscalemode', 'linear');
model.result('pg15').feature('vol1').set('resolution', 'custom');
model.result('pg15').feature('vol1').set('refine', 2);
model.result('pg15').feature('vol1').create('def', 'Deform');
model.result('pg15').feature('vol1').feature('def').set('differential', true);
model.result('pg15').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg15').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result('pg15').label('Displacement (solid)');
model.result('pg15').run;
model.result('pg15').setIndex('looplevel', 11, 0);
model.result('pg15').set('edges', false);
model.result('pg15').set('showlegendsunit', true);
model.result('pg15').run;
model.result('pg12').run;

model.title('Piezoelectric MEMS Speaker');

model.description('This model analyzes a piezoelectric microelectromechanical system (MEMS) speaker. The speaker, composed of four triangular membranes, uses a layer of lead zirconate titanate (PZT) material with two electrodes on top of a silicon layer as actuators. The triangular membranes are separated by narrow gaps of air that allow for larger deflections of the membrane. The thermoviscous losses in the gaps limit the airflow, thus allowing the four actuators to behave acoustically as a single membrane.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('piezo_mems_speaker.mph');

model.modelNode.label('Components');

out = model;
