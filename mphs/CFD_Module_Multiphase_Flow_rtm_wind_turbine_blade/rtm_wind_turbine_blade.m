function out = model
%
% rtm_wind_turbine_blade.m
%
% Model exported on May 26 2025, 21:26 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/CFD_Module/Multiphase_Flow');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('br', 'PorousMediaFlowBrinkman', 'geom1');
model.physics('br').model('comp1');
model.physics.create('ls', 'LevelSetPorousMedia', 'geom1');
model.physics('ls').model('comp1');

model.multiphysics.create('tpf1', 'TwoPhaseFlowLevelSet', 'geom1', 3);
model.multiphysics('tpf1').set('Fluid_physics', 'br');
model.multiphysics('tpf1').set('Mathematics_physics', 'ls');
model.multiphysics('tpf1').selection.all;
model.multiphysics.create('ww1', 'WettedWall', 'geom1', 2);
model.multiphysics('ww1').set('Fluid_physics', 'br');
model.multiphysics('ww1').set('Mathematics_physics', 'ls');

model.study.create('std1');
model.study('std1').create('phasei', 'PhaseInitialization');
model.study('std1').feature('phasei').set('solnum', 'auto');
model.study('std1').feature('phasei').set('notsolnum', 'auto');
model.study('std1').feature('phasei').set('outputmap', {});
model.study('std1').feature('phasei').set('ngenAUX', '1');
model.study('std1').feature('phasei').set('goalngenAUX', '1');
model.study('std1').feature('phasei').set('ngenAUX', '1');
model.study('std1').feature('phasei').set('goalngenAUX', '1');
model.study('std1').feature('phasei').setSolveFor('/physics/br', true);
model.study('std1').feature('phasei').setSolveFor('/physics/ls', true);
model.study('std1').feature('phasei').setSolveFor('/multiphysics/tpf1', true);
model.study('std1').feature('phasei').setSolveFor('/physics/br', false);
model.study('std1').feature('phasei').setSolveFor('/multiphysics/ww1', true);
model.study('std1').feature('phasei').setSolveFor('/physics/br', false);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('initstudy', 'std1');
model.study('std1').feature('time').set('notstudy', 'std1');
model.study('std1').feature('time').set('initialtime', '0');
model.study('std1').feature('time').set('useinitsol', 'on');
model.study('std1').feature('time').set('notsolmethod', 'sol');
model.study('std1').feature('time').set('outputmap', {});
model.study('std1').feature('time').setSolveFor('/physics/br', true);
model.study('std1').feature('time').setSolveFor('/physics/ls', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/tpf1', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/ww1', true);

model.geom('geom1').geomRep('cadps');
model.geom('geom1').insertFile('rtm_wind_turbine_blade_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');

model.param.create('par2');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('rho_air', '1[kg/m^3]', 'Density of air');
model.param('par2').set('mu_air', '1e-5[Pa*s]', 'Viscosity of air');
model.param('par2').set('rho_resin', '1250[kg/m^3]', 'Density of resin');
model.param('par2').set('mu_resin', '0.195[Pa*s]', 'Viscosity of resin');
model.param('par2').set('epsilon_1', '0.45', 'Porosity of material 1');
model.param('par2').set('epsilon_2', '0.5', 'Porosity of material 2');
model.param('par2').set('epsilon_3', '0.5', 'Porosity of material 3');
model.param('par2').set('p_in', '800[kPa]', 'Inlet pressure');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Air');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Resin');
model.material.create('pmat1', 'PorousMedia', 'comp1');
model.material('pmat1').selection.set([1 8]);
model.material('pmat1').set('porosity', 'epsilon_1');
model.material.create('pmat2', 'PorousMedia', 'comp1');
model.material('pmat2').selection.set([4 5 6 7]);
model.material('pmat2').set('porosity', 'epsilon_2');
model.material.create('pmat3', 'PorousMedia', 'comp1');
model.material('pmat3').selection.set([2 3]);
model.material('pmat3').set('porosity', 'epsilon_3');

model.physics('br').create('inl1', 'InletBoundary', 2);
model.physics('br').feature('inl1').selection.set([26 37 46]);
model.physics('br').feature('inl1').set('BoundaryCondition', 'Pressure');
model.physics('br').feature('inl1').set('p0', '800[kPa]');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(2);
model.selection('sel1').label('Inlet');
model.selection('sel1').set([26 37 46]);

model.physics('br').feature('inl1').selection.named('sel1');
model.physics('br').create('out1', 'OutletBoundary', 2);
model.physics('br').feature('out1').selection.set([1 4 22 31 33 41 54 55 56 57]);

model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').geom(2);
model.selection('sel2').label('Outlet');
model.selection('sel2').set([1 4 22 31 33 41 54 55 56 57]);

model.physics('br').feature('out1').selection.named('sel2');
model.physics('ls').feature('porous1').feature('lsmp1').set('gamma', '2e-4');
model.physics('ls').feature('porous1').feature('lsmp1').set('epsilon_ls', '2*d_i');
model.physics('ls').feature('initfluid2').selection.set([5 6 7]);
model.physics('ls').create('inl1', 'InletBoundary', 2);
model.physics('ls').feature('inl1').selection.named('sel1');
model.physics('ls').feature('inl1').set('lscond', 'Fluid2ls');
model.physics('ls').create('out1', 'Outlet', 2);
model.physics('ls').feature('out1').selection.named('sel2');

model.multiphysics('tpf1').set('Fluid1', 'mat1');
model.multiphysics('tpf1').set('Fluid2', 'mat2');

model.material('mat1').propertyGroup('def').set('density', {'1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', {'1e-5'});
model.material('mat2').propertyGroup('def').set('density', {'1250'});
model.material('mat2').propertyGroup('def').set('dynamicviscosity', {'0.195'});
model.material('pmat1').propertyGroup('def').set('hydraulicpermeability', {'2.9e-10' '8e-11' '2.9e-10'});
model.material('pmat2').propertyGroup('def').set('hydraulicpermeability', {'2.5e-10' '7e-11' '2.5e-10'});
model.material('pmat3').propertyGroup('def').set('hydraulicpermeability', {'1.7e-10' '8e-11' '1.7e-10'});

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.named('geom1_difsel1');
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', '1.5*d_i');
model.mesh('mesh1').feature('ftri1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('ftri1').feature('dis1').selection.named('geom1_unisel1');
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.named('geom1_thi2_dom');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').run('swe1');
model.mesh('mesh1').create('swe2', 'Sweep');
model.mesh('mesh1').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis1').set('numelem', 2);
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tunit', 'min');
model.study('std1').feature('time').set('tlist', 'range(0,1,60)');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6 7 8]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6 7 8]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6 7 8]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6 7 8]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'phasei');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'phasei');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, interface distance (ls)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, interface distance (ls)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_phils').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phils').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,1,60)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.005);
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_GI' 'global' 'comp1_p' 'scaled' 'comp1_phils' 'scaled' 'comp1_u' 'global'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_GI' 'factor' 'comp1_p' 'factor' 'comp1_phils' 'factor' 'comp1_u' 'factor'});
model.sol('sol1').feature('t1').set('atolfactor', {'comp1_GI' '0.1' 'comp1_p' '1' 'comp1_phils' '0.01' 'comp1_u' '0.1'});
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('rhoinf', 0.5);
model.sol('sol1').feature('t1').set('predictor', 'constant');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', true);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.01');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('se1', 'Segregated');
model.sol('sol1').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_u' 'comp1_p'});
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subjtech', 'once');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 100);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, fluid flow variables (br)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_phils'});
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subjtech', 'once');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, level set variable (ls)');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').label('Level Set Variable, Phils');
model.sol('sol1').feature('t1').feature('se1').set('ntolfact', 0.5);
model.sol('sol1').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol1').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol1').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol1').feature('t1').feature('se1').set('segaaccdelay', 1);
model.sol('sol1').feature('t1').feature('se1').set('maxsegiter', 10);
model.sol('sol1').feature('t1').create('d2', 'Direct');
model.sol('sol1').feature('t1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d2').label('Direct, fluid flow variables (br)');
model.sol('sol1').feature('t1').create('i2', 'Iterative');
model.sol('sol1').feature('t1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i2').set('maxlinit', 50);
model.sol('sol1').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i2').label('AMG, level set variable (ls)');
model.sol('sol1').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');

model.massProp.create('mass1', 'MassProperties');
model.massProp('mass1').model('comp1');
model.massProp('mass1').selection.set([1 2 3 4 8]);
model.massProp('mass1').set('createMass', false);
model.massProp('mass1').set('createCenterOfMass', false);
model.massProp('mass1').set('createMomentOfInertia', false);
model.massProp('mass1').set('createPrincipalInertia', false);

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.all;
model.cpl('intop1').selection.set([1 2 3 4 8]);

model.sol('sol1').feature('t1').create('st1', 'StopCondition');
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', 'comp1.intop1(comp1.ls.Vf2)/comp1.mass1.volume > 0.95', 0);
model.sol('sol1').feature('t1').feature('st1').set('storestopcondsol', 'stepafter');
model.sol('sol1').feature('t1').feature('st1').set('stopcondwarn', false);
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Velocity (br)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 46, 0);
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('slc1', 'Slice');
model.result('pg1').feature('slc1').label('Slice');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('smooth', 'internal');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([2 3 5 6 8 9 10 14 15 16 19 20 23 24 27 28 29 30 32 34 35 38 39 40 42 43 44 47 48 51 52]);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Pressure (br)');
model.result('pg2').set('data', 'surf1');
model.result('pg2').setIndex('looplevel', 46, 0);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'surf1');
model.result('pg2').setIndex('looplevel', 46, 0);
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond2/pcond1/pg4');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('expr', 'p');
model.result('pg2').feature('surf1').set('colortable', 'Dipole');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature('surf1').feature.create('tran1', 'Transparency');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Volume Fraction of Fluid 1 (ls)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 46, 0);
model.result('pg3').set('defaultPlotID', 'StandaloneTwoPhaseFlowPhysicsInterfaces/icom1/pdef1/pcond2/pg1');
model.result('pg3').feature.create('slc1', 'Slice');
model.result('pg3').feature('slc1').set('expr', 'ls.Vf1');
model.result('pg3').feature('slc1').set('smooth', 'internal');
model.result('pg3').feature('slc1').set('data', 'parent');
model.result('pg3').feature.create('iso1', 'Isosurface');
model.result('pg3').feature('iso1').set('expr', 'ls.Vf1');
model.result('pg3').feature('iso1').set('levelmethod', 'levels');
model.result('pg3').feature('iso1').set('levels', '0.5');
model.result('pg3').feature('iso1').set('coloring', 'uniform');
model.result('pg3').feature('iso1').set('colorlegend', false);
model.result('pg3').feature('iso1').set('color', 'gray');
model.result('pg3').feature('iso1').set('smooth', 'none');
model.result('pg3').feature('iso1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('slc1').active(false);
model.result('pg1').run;
model.result('pg1').selection.geom('geom1', 2);
model.result('pg1').selection.named('geom1_difsel1');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('colorscalemode', 'logarithmic');
model.result('pg1').run;
model.result('pg1').create('arws1', 'ArrowSurface');
model.result('pg1').feature('arws1').set('plotcomp', 'tangential');
model.result('pg1').feature('arws1').set('arrowlength', 'normalized');
model.result('pg1').feature('arws1').set('color', 'white');
model.result('pg1').feature('arws1').set('scaleactive', true);
model.result('pg1').feature('arws1').set('scale', 80);
model.result('pg1').run;
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').create('con1', 'Contour');
model.result('pg2').feature('con1').set('expr', 'p');
model.result('pg2').feature('con1').set('number', 40);
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('inheritplot', 'surf1');
model.result('pg2').feature('con1').set('colorlegend', false);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').feature('slc1').active(false);
model.result('pg3').run;
model.result('pg3').feature('iso1').set('expr', 'ls.Vf2');
model.result('pg3').feature('iso1').set('levels', '0 0.5 1');
model.result('pg3').feature('iso1').set('surfacetype', 'filled');
model.result('pg3').feature('iso1').set('coloring', 'colortable');
model.result('pg3').feature('iso1').set('colortable', 'AuroraAustralisDark');
model.result('pg3').run;
model.result('pg3').set('looplevel', [16]);
model.result('pg3').label('Volume Fraction of Fluid 2 (ls)');
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Volume Fraction of Fluid 2 - Array');
model.result('pg4').set('plotarrayenable', true);
model.result('pg4').set('arrayshape', 'square');
model.result('pg4').feature('iso1').set('arraydim', '2');
model.result('pg4').run;
model.result('pg4').feature('iso1').set('data', 'dset1');
model.result('pg4').feature('iso1').set('looplevel', [6]);
model.result('pg4').feature('iso1').set('manualindexing', true);
model.result('pg4').feature('iso1').set('rowindex', 1);
model.result('pg4').feature.duplicate('iso2', 'iso1');
model.result('pg4').feature('iso2').set('arraydim', '2');
model.result('pg4').run;
model.result('pg4').feature('iso2').set('looplevel', [11]);
model.result('pg4').feature('iso2').set('colindex', 1);
model.result('pg4').feature('iso1').set('arraydim', '2');
model.result('pg4').run;
model.result('pg4').feature.duplicate('iso3', 'iso1');
model.result('pg4').feature.duplicate('iso4', 'iso2');
model.result('pg4').feature('iso3').set('arraydim', '2');
model.result('pg4').run;
model.result('pg4').feature('iso3').set('looplevel', [21]);
model.result('pg4').feature('iso3').set('rowindex', 0);
model.result('pg4').feature('iso4').set('arraydim', '2');
model.result('pg4').run;
model.result('pg4').feature('iso4').set('looplevel', [31]);
model.result('pg4').feature('iso4').set('rowindex', 0);
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').create('tlan1', 'TableAnnotation');
model.result('pg4').feature('tlan1').set('arraydim', '2');
model.result('pg4').feature('tlan1').set('source', 'localtable');
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 2, 0, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 1.5, 0, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0.5, 0, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 't = 5 min', 0, 3);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 9, 1, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 1.5, 1, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0.5, 1, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 't = 10 min', 1, 3);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 2, 2, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', -1, 2, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0.5, 2, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 't = 20 min', 2, 3);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 9, 3, 0);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', -1, 3, 1);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 0.5, 3, 2);
model.result('pg4').feature('tlan1').setIndex('localtablematrix', 't = 30 min', 3, 3);
model.result('pg4').run;
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('title', 'Isosurface: Volume fraction of fluid 2 at different output times');
model.result('pg4').set('paramindicator', '');
model.result('pg4').run;

model.title('Resin Transfer Molding of a Wind Turbine Blade');

model.description('This example shows the modeling of a resin transfer molding (RTM) process for a wind turbine blade using the Two-Phase Flow, Level Set, Brinkman Equations interface. Resin is injected into a preform consisting of different composites with different anisotropic permeabilities.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('rtm_wind_turbine_blade.mph');

model.modelNode.label('Components');

out = model;
