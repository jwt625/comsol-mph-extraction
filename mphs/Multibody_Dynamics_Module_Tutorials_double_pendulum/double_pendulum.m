function out = model
%
% double_pendulum.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/mbd', true);

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', [1 0.5 10]);
model.geom('geom1').run('blk1');
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').set('r', 0.3);
model.geom('geom1').feature('cyl1').set('h', 0.5);
model.geom('geom1').feature('cyl1').set('pos', [0.5 0 9.5]);
model.geom('geom1').feature('cyl1').set('axistype', 'y');
model.geom('geom1').run('cyl1');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').selection('input').set({'blk1'});
model.geom('geom1').feature('dif1').selection('input2').set({'cyl1'});
model.geom('geom1').run('dif1');
model.geom('geom1').create('cyl2', 'Cylinder');
model.geom('geom1').feature('cyl2').set('r', 0.3);
model.geom('geom1').feature('cyl2').set('h', 1.25);
model.geom('geom1').feature('cyl2').set('pos', [0.5 -0.75 0.5]);
model.geom('geom1').feature('cyl2').set('axistype', 'y');
model.geom('geom1').run('cyl2');
model.geom('geom1').create('copy1', 'Copy');
model.geom('geom1').feature('copy1').selection('input').set({'cyl2'});
model.geom('geom1').run('copy1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', [10 0.5 1]);
model.geom('geom1').feature('blk2').set('pos', [0 -0.625 0]);
model.geom('geom1').run('blk2');
model.geom('geom1').create('dif2', 'Difference');
model.geom('geom1').feature('dif2').selection('input').set({'blk2'});
model.geom('geom1').feature('dif2').selection('input2').set({'copy1'});
model.geom('geom1').run('dif2');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'cyl2' 'dif1'});
model.geom('geom1').feature('uni1').set('intbnd', false);
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').run('fin');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.set([1 2]);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('Wp', 'intop1(mbd.rho*g_const*w)');
model.variable('var1').descr('Wp', 'Potential energy');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.physics('mbd').create('gacc1', 'GravityAcceleration', -1);
model.physics('mbd').create('att1', 'Attachment', 2);
model.physics('mbd').feature('att1').selection.set([19 20 24 25]);
model.physics('mbd').create('hgj1', 'HingeJoint', -1);
model.physics('mbd').feature('hgj1').set('Source', 'fixed');
model.physics('mbd').feature('hgj1').set('Destination', 'att1');
model.physics('mbd').feature('hgj1').set('e', [0 1 0]);
model.physics('mbd').feature('hgj1').set('JointForcesAndMoments', 'DoNotCompute');
model.physics('mbd').create('att2', 'Attachment', 2);
model.physics('mbd').feature('att2').selection.set([16 17 22 23]);
model.physics('mbd').create('att3', 'Attachment', 2);
model.physics('mbd').feature('att3').selection.set([6 7 8 9]);
model.physics('mbd').create('hgj2', 'HingeJoint', -1);
model.physics('mbd').feature('hgj2').set('Source', 'att2');
model.physics('mbd').feature('hgj2').set('Destination', 'att3');
model.physics('mbd').feature('hgj2').set('e', [0 1 0]);

model.study('std1').feature('time').set('tlist', 'range(0,0.02,1.5)');
model.study('std1').label('Study: Basic');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_disp').set('scaleval', '0.14197270864500686');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*14.197270864500684');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.02,1.5)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Displacement (mbd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 76, 0);
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (mbd)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 76, 0);
model.result('pg2').set('defaultPlotID', 'velocity');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').label('Volume');
model.result('pg2').feature('vol1').set('expr', 'mod(dom,10)');
model.result('pg2').feature('vol1').set('unit', '1');
model.result('pg2').feature('vol1').set('colortable', 'Cyclic');
model.result('pg2').feature('vol1').set('colorlegend', false);
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg2').feature('vol1').feature.create('def1', 'Deform');
model.result('pg2').feature('vol1').feature('def1').label('Deformation');
model.result('pg2').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg2').feature.create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').label('Arrow Line');
model.result('pg2').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY' 'mbd.u_tZ'});
model.result('pg2').feature('arwl1').set('placement', 'elements');
model.result('pg2').feature('arwl1').set('data', 'parent');
model.result('pg2').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg2').feature('arwl1').feature('def1').label('Deformation');
model.result('pg2').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg1').run;
model.result('pg1').create('pttraj1', 'PointTrajectories');
model.result('pg1').feature('pttraj1').selection.set([14 21]);
model.result('pg1').feature('pttraj1').set('linetype', 'tube');
model.result('pg1').feature('pttraj1').create('col1', 'Color');
model.result('pg1').run;
model.result('pg1').feature('pttraj1').feature('col1').set('expr', 't');
model.result('pg1').feature('pttraj1').feature('col1').set('colorlegend', false);
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Relative rotation');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').set('expr', {'mbd.hgj2.th'});
model.result('pg3').feature('glob1').set('descr', {'Relative rotation'});
model.result('pg3').feature('glob1').set('unit', {'rad'});
model.result('pg3').feature('glob1').setIndex('unit', 'deg', 0);
model.result('pg3').feature('glob1').setIndex('descr', 'Relative rotation', 0);
model.result('pg3').feature('glob1').set('titletype', 'none');
model.result('pg3').feature('glob1').set('legend', false);
model.result('pg3').feature('glob1').set('linewidth', 2);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Joint forces');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').set('expr', {'mbd.hgj2.Fx'});
model.result('pg4').feature('glob1').set('descr', {'Joint force, x-component'});
model.result('pg4').feature('glob1').set('unit', {'N'});
model.result('pg4').feature('glob1').set('expr', {'mbd.hgj2.Fx' 'mbd.hgj2.Fy'});
model.result('pg4').feature('glob1').set('descr', {'Joint force, x-component' 'Joint force, y-component'});
model.result('pg4').feature('glob1').set('expr', {'mbd.hgj2.Fx' 'mbd.hgj2.Fy' 'mbd.hgj2.Fz'});
model.result('pg4').feature('glob1').set('descr', {'Joint force, x-component' 'Joint force, y-component' 'Joint force, z-component'});
model.result('pg4').feature('glob1').set('titletype', 'none');
model.result('pg4').feature('glob1').set('linewidth', 2);
model.result('pg4').feature('glob1').set('linemarker', 'cycle');
model.result('pg4').feature('glob1').set('markerpos', 'interp');
model.result('pg4').run;
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'Joint forces (N)');
model.result('pg4').set('legendpos', 'upperleft');
model.result('pg4').run;

model.physics('mbd').feature('hgj2').set('CenterOfJointType', 'UserDefined');
model.physics('mbd').feature('hgj2').set('xc', [0.5 0 0.5]);
model.physics('mbd').feature('hgj2').set('AxisOfJointType', 'SelectFromCS');
model.physics('mbd').feature('hgj2').set('AxisToUse', 2);
model.physics('mbd').feature('hgj2').create('ct1', 'Constraints', -1);
model.physics('mbd').feature('hgj2').feature('ct1').set('th_max', 'pi/4');
model.physics('mbd').feature('hgj1').create('pm1', 'PrescribedMotion', -1);

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/mbd', true);
model.study('std2').feature('time').set('tlist', 'range(0,0.01,1.5)');
model.study('std2').label('Study: Constraints');
model.study('std2').setGenPlots(false);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_mbd_att_rot').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_hgj2_ct1_i_th').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_att_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_mbd_att_rot').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_hgj2_ct1_i_th').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_att_disp').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_mbd_att_rot').set('scaleval', '0.1');
model.sol('sol2').feature('v1').feature('comp1_mbd_hgj2_ct1_i_th').set('scaleval', '100*pi');
model.sol('sol2').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol2').feature('v1').feature('comp1_mbd_att_disp').set('scaleval', '0.14197270864500686');
model.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-2*14.197270864500684');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,0.01,1.5)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 0.001);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol2').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('eventtol', 0.01);
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('minorder', 1);
model.sol('sol2').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol2').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol2').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol2').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol2').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol2').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result('pg3').run;
model.result.duplicate('pg5', 'pg3');
model.result('pg5').run;
model.result('pg5').label('Relative rotation: Constraints');
model.result('pg5').set('data', 'dset2');
model.result('pg5').run;
model.result('pg4').run;
model.result.duplicate('pg6', 'pg4');
model.result('pg6').run;
model.result('pg6').label('Joint moments: Constraints');
model.result('pg6').set('data', 'dset2');
model.result('pg6').run;
model.result('pg6').feature('glob1').set('expr', {'mbd.hgj2.Mx'});
model.result('pg6').feature('glob1').set('descr', {'Joint moment, x-component'});
model.result('pg6').feature('glob1').set('unit', {'N*m'});
model.result('pg6').feature('glob1').set('expr', {'mbd.hgj2.Mx' 'mbd.hgj2.My'});
model.result('pg6').feature('glob1').set('descr', {'Joint moment, x-component' 'Joint moment, y-component'});
model.result('pg6').feature('glob1').set('expr', {'mbd.hgj2.Mx' 'mbd.hgj2.My' 'mbd.hgj2.Mz'});
model.result('pg6').feature('glob1').set('descr', {'Joint moment, x-component' 'Joint moment, y-component' 'Joint moment, z-component'});
model.result('pg6').run;
model.result('pg6').set('legendpos', 'lowerleft');
model.result('pg6').set('ylabel', 'Joint moments (N-m)');
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Energy: Constraints');
model.result('pg7').run;
model.result('pg7').feature('glob1').set('expr', {'Wp'});
model.result('pg7').feature('glob1').set('descr', {'Potential energy'});
model.result('pg7').feature('glob1').set('unit', {'N*m'});
model.result('pg7').feature('glob1').set('expr', {'Wp' 'mbd.Wk_tot'});
model.result('pg7').feature('glob1').set('descr', {'Potential energy' 'Total kinetic energy'});
model.result('pg7').feature('glob1').set('expr', {'Wp' 'mbd.Wk_tot' 'mbd.Ws_tot'});
model.result('pg7').feature('glob1').set('descr', {'Potential energy' 'Total kinetic energy' 'Total elastic strain energy'});
model.result('pg7').run;
model.result('pg7').set('legendpos', 'upperleft');
model.result('pg7').set('ylabel', 'Energy (J)');
model.result('pg7').run;

model.physics('mbd').feature('hgj2').set('AxisOfJointType', 'SelectEdge');
model.physics('mbd').feature('hgj2').feature('ja1').selection.set([33]);
model.physics('mbd').feature('hgj2').set('CenterOfJointType', 'CentroidOfSelectedEntities');
model.physics('mbd').feature('hgj2').set('EntityLevel', 'Edge');
model.physics('mbd').feature('hgj2').feature('cje1').selection.set([34 35 46 48]);
model.physics('mbd').feature('hgj2').create('lk1', 'Locking', -1);
model.physics('mbd').feature('hgj2').feature('lk1').set('th_max', 'pi/4');

model.study.create('std3');
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').setSolveFor('/physics/mbd', true);
model.study('std3').feature('time').set('tlist', 'range(0,0.005,1.5)');
model.study('std3').feature('time').set('useadvanceddisable', true);
model.study('std3').feature('time').set('disabledphysics', {'mbd/hgj1/pm1' 'mbd/hgj2/ct1'});
model.study('std3').label('Study: Locking');
model.study('std3').setGenPlots(false);

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'time');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').feature('comp1_mbd_att_rot').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_mbd_att_disp').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_mbd_att_rot').set('resscalemethod', 'parent');
model.sol('sol3').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol3').feature('v1').feature('comp1_mbd_att_disp').set('resscalemethod', 'parent');
model.sol('sol3').feature('v1').feature('comp1_mbd_att_rot').set('scaleval', '0.1');
model.sol('sol3').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol3').feature('v1').feature('comp1_mbd_att_disp').set('scaleval', '0.14197270864500686');
model.sol('sol3').feature('v1').feature('comp1_u').set('scaleval', '1e-2*14.197270864500684');
model.sol('sol3').feature('v1').set('control', 'time');
model.sol('sol3').create('t1', 'Time');
model.sol('sol3').feature('t1').set('tlist', 'range(0,0.005,1.5)');
model.sol('sol3').feature('t1').set('plot', 'off');
model.sol('sol3').feature('t1').set('plotgroup', 'pg1');
model.sol('sol3').feature('t1').set('plotfreq', 'tout');
model.sol('sol3').feature('t1').set('probesel', 'all');
model.sol('sol3').feature('t1').set('probes', {});
model.sol('sol3').feature('t1').set('probefreq', 'tsteps');
model.sol('sol3').feature('t1').set('rtol', 0.001);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol3').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('eventtol', 0.01);
model.sol('sol3').feature('t1').set('reacf', true);
model.sol('sol3').feature('t1').set('storeudot', true);
model.sol('sol3').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol3').feature('t1').set('endtimeinterpolation', true);
model.sol('sol3').feature('t1').set('maxorder', 2);
model.sol('sol3').feature('t1').set('minorder', 1);
model.sol('sol3').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol3').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol3').feature('t1').set('control', 'time');
model.sol('sol3').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol3').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol3').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol3').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol3').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol3').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol3').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol3').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol3').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol3').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol3').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol3').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol3').feature('t1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol3').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').runAll;

model.result('pg3').run;
model.result.duplicate('pg8', 'pg3');
model.result('pg8').run;
model.result('pg8').label('Relative rotation: Locking');
model.result('pg8').set('data', 'dset3');
model.result('pg8').run;
model.result('pg6').run;
model.result.duplicate('pg9', 'pg6');
model.result('pg9').run;
model.result('pg9').label('Joint moments: Locking');
model.result('pg9').set('data', 'dset3');
model.result('pg9').run;

model.physics('mbd').create('rd1', 'RigidDomain', 3);
model.physics('mbd').feature('rd1').selection.set([2]);
model.physics('mbd').feature('rd1').create('fix1', 'FixedConstraint', -1);
model.physics('mbd').create('rd2', 'RigidDomain', 3);
model.physics('mbd').feature('rd2').selection.set([1]);
model.physics('mbd').create('hgj3', 'HingeJoint', -1);
model.physics('mbd').feature('hgj3').set('Source', 'rd1');
model.physics('mbd').feature('hgj3').set('Destination', 'rd2');
model.physics('mbd').feature('hgj3').set('CenterOfJointType', 'UserDefined');
model.physics('mbd').feature('hgj3').set('xc', [0.5 0 0.5]);
model.physics('mbd').feature('hgj3').set('e', [0 1 0]);
model.physics('mbd').feature('hgj3').create('sd1', 'SpringAndDamper', -1);
model.physics('mbd').feature('hgj3').feature('sd1').set('k_th', '5e6');
model.physics('mbd').feature('hgj3').feature('sd1').set('c_th', '1e6');
model.physics('mbd').create('ge1', 'GlobalEquations', -1);
model.physics('mbd').feature('ge1').label('Energy: Damper');
model.physics('mbd').feature('ge1').setIndex('name', 'Wd', 0, 0);
model.physics('mbd').feature('ge1').setIndex('equation', 'd(Wd,t)-mbd.hgj3.Qdamper', 0, 0);
model.physics('mbd').feature('ge1').setIndex('description', 'Energy dissipated in damper', 0, 0);
model.physics('mbd').feature('ge1').set('DependentVariableQuantity', 'energy');
model.physics('mbd').feature('ge1').set('SourceTermQuantity', 'power');

model.study.create('std4');
model.study('std4').create('time', 'Transient');
model.study('std4').feature('time').setSolveFor('/physics/mbd', true);
model.study('std4').feature('time').set('tlist', 'range(0,0.02,5)');
model.study('std4').feature('time').set('useadvanceddisable', true);
model.study('std4').feature('time').set('disabledphysics', {'mbd/hgj1' 'mbd/att1' 'mbd/att2' 'mbd/att3' 'mbd/hgj2'});
model.study('std4').label('Study: Spring-Damper');
model.study('std4').setGenPlots(false);

model.sol.create('sol4');
model.sol('sol4').study('std4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std4');
model.sol('sol4').feature('st1').set('studystep', 'time');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol4').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol4').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol4').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.14197270864500686');
model.sol('sol4').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol4').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol4').feature('v1').feature('comp1_u').set('scaleval', '1e-2*14.197270864500684');
model.sol('sol4').feature('v1').set('control', 'time');
model.sol('sol4').create('t1', 'Time');
model.sol('sol4').feature('t1').set('tlist', 'range(0,0.02,5)');
model.sol('sol4').feature('t1').set('plot', 'off');
model.sol('sol4').feature('t1').set('plotgroup', 'pg1');
model.sol('sol4').feature('t1').set('plotfreq', 'tout');
model.sol('sol4').feature('t1').set('probesel', 'all');
model.sol('sol4').feature('t1').set('probes', {});
model.sol('sol4').feature('t1').set('probefreq', 'tsteps');
model.sol('sol4').feature('t1').set('rtol', 0.001);
model.sol('sol4').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol4').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol4').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol4').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol4').feature('t1').set('eventtol', 0.01);
model.sol('sol4').feature('t1').set('reacf', true);
model.sol('sol4').feature('t1').set('storeudot', true);
model.sol('sol4').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol4').feature('t1').set('endtimeinterpolation', true);
model.sol('sol4').feature('t1').set('maxorder', 2);
model.sol('sol4').feature('t1').set('minorder', 1);
model.sol('sol4').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol4').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol4').feature('t1').set('control', 'time');
model.sol('sol4').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol4').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol4').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol4').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol4').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol4').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol4').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol4').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol4').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol4').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol4').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol4').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol4').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol4').feature('t1').feature.remove('fcDef');
model.sol('sol4').attach('std4');
model.sol('sol4').runAll;

model.result('pg3').run;
model.result.duplicate('pg10', 'pg3');
model.result('pg10').run;
model.result('pg9').run;
model.result('pg9').label('Relative rotation: Spring-Damper');
model.result('pg9').set('data', 'none');
model.result('pg9').run;
model.result('pg9').feature('glob1').set('expr', {'comp1.mbd.hgj3.th'});
model.result('pg9').feature('glob1').set('descr', {'Relative rotation'});
model.result('pg9').feature('glob1').set('unit', {'rad'});
model.result('pg9').feature('glob1').setIndex('unit', 'deg', 0);
model.result('pg9').feature('glob1').setIndex('descr', 'Relative rotation', 0);
model.result('pg9').run;
model.result('pg9').set('data', 'dset4');
model.result('pg9').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Energy: Spring-Damper');
model.result('pg11').set('data', 'dset4');
model.result('pg11').create('glob1', 'Global');
model.result('pg11').feature('glob1').set('markerpos', 'datapoints');
model.result('pg11').feature('glob1').set('linewidth', 'preference');
model.result('pg11').feature('glob1').set('expr', {'Wp'});
model.result('pg11').feature('glob1').set('descr', {'Potential energy'});
model.result('pg11').feature('glob1').set('unit', {'J'});
model.result('pg11').feature('glob1').set('expr', {'Wp' 'mbd.Wk_tot'});
model.result('pg11').feature('glob1').set('descr', {'Potential energy' 'Total kinetic energy'});
model.result('pg11').feature('glob1').setIndex('expr', 'mbd.hgj3.Wspring', 2);
model.result('pg11').feature('glob1').setIndex('unit', 'J', 2);
model.result('pg11').feature('glob1').setIndex('descr', 'Energy stored in spring', 2);
model.result('pg11').feature('glob1').setIndex('expr', 'Wd', 3);
model.result('pg11').feature('glob1').setIndex('unit', 'J', 3);
model.result('pg11').feature('glob1').setIndex('descr', 'Energy dissipated in damper', 3);
model.result('pg11').feature('glob1').set('titletype', 'none');
model.result('pg11').feature('glob1').set('linewidth', 2);
model.result('pg11').feature('glob1').set('linemarker', 'cycle');
model.result('pg11').feature('glob1').set('markerpos', 'interp');
model.result('pg11').run;
model.result('pg11').set('ylabelactive', true);
model.result('pg11').set('ylabel', 'Energy (J)');
model.result('pg11').run;
model.result('pg11').set('axislimits', true);
model.result('pg11').set('ymax', '1e6');
model.result('pg11').run;

model.physics('mbd').feature('hgj3').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('hgj3').feature('pm1').set('PrescribedMotionThroughRotational', 'AngularVelocity');
model.physics('mbd').feature('hgj3').feature('pm1').set('omegap', 't');
model.physics('mbd').feature('hgj3').feature('pm1').set('ActivationConditionRotational', 'conditionallyActive');
model.physics('mbd').feature('hgj3').feature('pm1').set('i_thp', 't>1');

model.study.create('std5');
model.study('std5').create('time', 'Transient');
model.study('std5').feature('time').setSolveFor('/physics/mbd', true);
model.study('std5').feature('time').set('tlist', 'range(0,0.02,2)');
model.study('std5').feature('time').set('useadvanceddisable', true);
model.study('std5').feature('time').set('disabledphysics', {'mbd/gacc1' 'mbd/att1' 'mbd/hgj1' 'mbd/att2' 'mbd/att3' 'mbd/hgj2' 'mbd/hgj3/sd1' 'mbd/ge1'});
model.study('std5').label('Study: Prescribed motion');
model.study('std5').setGenPlots(false);

model.sol.create('sol5');
model.sol('sol5').study('std5');
model.sol('sol5').create('st1', 'StudyStep');
model.sol('sol5').feature('st1').set('study', 'std5');
model.sol('sol5').feature('st1').set('studystep', 'time');
model.sol('sol5').create('v1', 'Variables');
model.sol('sol5').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol5').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol5').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol5').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.14197270864500686');
model.sol('sol5').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol5').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol5').feature('v1').feature('comp1_u').set('scaleval', '1e-2*14.197270864500684');
model.sol('sol5').feature('v1').set('control', 'time');
model.sol('sol5').create('t1', 'Time');
model.sol('sol5').feature('t1').set('tlist', 'range(0,0.02,2)');
model.sol('sol5').feature('t1').set('plot', 'off');
model.sol('sol5').feature('t1').set('plotgroup', 'pg1');
model.sol('sol5').feature('t1').set('plotfreq', 'tout');
model.sol('sol5').feature('t1').set('probesel', 'all');
model.sol('sol5').feature('t1').set('probes', {});
model.sol('sol5').feature('t1').set('probefreq', 'tsteps');
model.sol('sol5').feature('t1').set('rtol', 0.001);
model.sol('sol5').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol5').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol5').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol5').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol5').feature('t1').set('eventtol', 0.01);
model.sol('sol5').feature('t1').set('reacf', true);
model.sol('sol5').feature('t1').set('storeudot', true);
model.sol('sol5').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol5').feature('t1').set('endtimeinterpolation', true);
model.sol('sol5').feature('t1').set('maxorder', 2);
model.sol('sol5').feature('t1').set('minorder', 1);
model.sol('sol5').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol5').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol5').feature('t1').set('control', 'time');
model.sol('sol5').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol5').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol5').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol5').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol5').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol5').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol5').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol5').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol5').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol5').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol5').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol5').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol5').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol5').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol5').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol5').feature('t1').feature.remove('fcDef');
model.sol('sol5').attach('std5');
model.sol('sol5').runAll;

model.result('pg9').run;
model.result.duplicate('pg12', 'pg9');
model.result('pg12').run;
model.result('pg12').label('Relative rotation: Prescribed motion');
model.result('pg12').set('data', 'dset5');
model.result('pg12').run;
model.result('pg9').run;
model.result.duplicate('pg13', 'pg9');
model.result('pg13').run;
model.result('pg13').label('Relative velocity: Prescribed motion');
model.result('pg13').set('data', 'dset5');
model.result('pg13').run;
model.result('pg13').feature('glob1').set('expr', {'mbd.hgj3.th_t'});
model.result('pg13').feature('glob1').set('descr', {'Relative angular velocity'});
model.result('pg13').feature('glob1').set('unit', {'rad/s'});
model.result('pg13').feature('glob1').setIndex('unit', 'deg/s', 0);
model.result('pg13').feature('glob1').setIndex('descr', 'Relative angular velocity', 0);
model.result('pg13').run;
model.result('pg13').run;

model.physics('mbd').feature('hgj3').set('JointForcesAndMoments', 'ComputedUsingWeakConstraints');
model.physics('mbd').feature('hgj3').create('fric1', 'Friction', -1);
model.physics('mbd').feature('hgj3').feature('fric1').set('mu', 0.6);
model.physics('mbd').feature('hgj3').feature('fric1').set('rh', 0.3);
model.physics('mbd').feature.duplicate('ge2', 'ge1');
model.physics('mbd').feature('ge2').label('Energy: Friction');
model.physics('mbd').feature('ge2').setIndex('name', 'Wf', 0, 0);
model.physics('mbd').feature('ge2').setIndex('equation', 'd(Wf,t)-mbd.hgj3.Qfriction', 0, 0);
model.physics('mbd').feature('ge2').setIndex('description', 'Energy loss due to friction', 0, 0);

model.study.create('std6');
model.study('std6').create('time', 'Transient');
model.study('std6').feature('time').setSolveFor('/physics/mbd', true);
model.study('std6').feature('time').set('tlist', 'range(0,0.05,10)');
model.study('std6').feature('time').set('useadvanceddisable', true);
model.study('std6').feature('time').set('disabledphysics', {'mbd/att1' 'mbd/hgj1' 'mbd/att2' 'mbd/att3' 'mbd/hgj2' 'mbd/hgj3/sd1' 'mbd/hgj3/pm1' 'mbd/ge1'});
model.study('std6').label('Study: Friction');
model.study('std6').setGenPlots(false);

model.sol.create('sol6');
model.sol('sol6').study('std6');
model.sol('sol6').create('st1', 'StudyStep');
model.sol('sol6').feature('st1').set('study', 'std6');
model.sol('sol6').feature('st1').set('studystep', 'time');
model.sol('sol6').create('v1', 'Variables');
model.sol('sol6').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol6').feature('v1').feature('comp1_mbd_hgj3_RF').set('scalemethod', 'manual');
model.sol('sol6').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol6').feature('v1').feature('comp1_mbd_hgj3_RM').set('scalemethod', 'manual');
model.sol('sol6').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol6').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol6').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol6').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol6').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol6').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.14197270864500686');
model.sol('sol6').feature('v1').feature('comp1_mbd_hgj3_RF').set('scaleval', '1e8*(0.1*14.197270864500684)^2');
model.sol('sol6').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol6').feature('v1').feature('comp1_mbd_hgj3_RM').set('scaleval', '1e8*(0.1*14.197270864500684)^3');
model.sol('sol6').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol6').feature('v1').feature('comp1_u').set('scaleval', '1e-2*14.197270864500684');
model.sol('sol6').feature('v1').set('control', 'time');
model.sol('sol6').create('t1', 'Time');
model.sol('sol6').feature('t1').set('tlist', 'range(0,0.05,10)');
model.sol('sol6').feature('t1').set('plot', 'off');
model.sol('sol6').feature('t1').set('plotgroup', 'pg1');
model.sol('sol6').feature('t1').set('plotfreq', 'tout');
model.sol('sol6').feature('t1').set('probesel', 'all');
model.sol('sol6').feature('t1').set('probes', {});
model.sol('sol6').feature('t1').set('probefreq', 'tsteps');
model.sol('sol6').feature('t1').set('rtol', 0.001);
model.sol('sol6').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol6').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol6').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol6').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol6').feature('t1').set('eventtol', 0.01);
model.sol('sol6').feature('t1').set('reacf', true);
model.sol('sol6').feature('t1').set('storeudot', true);
model.sol('sol6').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol6').feature('t1').set('endtimeinterpolation', true);
model.sol('sol6').feature('t1').set('maxorder', 2);
model.sol('sol6').feature('t1').set('minorder', 1);
model.sol('sol6').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol6').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol6').feature('t1').set('control', 'time');
model.sol('sol6').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol6').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol6').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol6').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol6').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol6').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol6').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol6').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol6').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol6').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol6').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol6').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol6').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol6').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol6').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol6').feature('t1').feature.remove('fcDef');
model.sol('sol6').attach('std6');
model.sol('sol6').feature('v1').feature('comp1_ODE2').set('scalemethod', 'manual');
model.sol('sol6').feature('v1').feature('comp1_ODE2').set('scaleval', '1e6');
model.sol('sol6').runAll;

model.result('pg9').run;
model.result.duplicate('pg14', 'pg9');
model.result('pg14').run;
model.result('pg14').label('Relative rotation: Friction');
model.result('pg14').set('data', 'dset6');
model.result('pg14').run;
model.result.duplicate('pg15', 'pg14');
model.result('pg15').run;
model.result('pg15').label('Friction moment');
model.result('pg15').run;
model.result('pg15').feature('glob1').setIndex('expr', 'mbd.hgj3.fric1.Mf', 0);
model.result('pg15').run;
model.result('pg15').run;
model.result.create('pg16', 'PlotGroup1D');
model.result('pg16').run;
model.result('pg16').label('Energy: Friction');
model.result('pg16').set('data', 'dset6');
model.result('pg16').setIndex('looplevelinput', 'interp', 0);
model.result('pg16').setIndex('interp', 'range(0,0.2,10)', 0);
model.result('pg16').create('glob1', 'Global');
model.result('pg16').feature('glob1').set('markerpos', 'datapoints');
model.result('pg16').feature('glob1').set('linewidth', 'preference');
model.result('pg16').feature('glob1').set('expr', {'Wp'});
model.result('pg16').feature('glob1').set('descr', {'Potential energy'});
model.result('pg16').feature('glob1').set('unit', {'J'});
model.result('pg16').feature('glob1').set('expr', {'Wp' 'mbd.Wk_tot'});
model.result('pg16').feature('glob1').set('descr', {'Potential energy' 'Total kinetic energy'});
model.result('pg16').feature('glob1').setIndex('expr', 'Wf', 2);
model.result('pg16').feature('glob1').setIndex('unit', 'J', 2);
model.result('pg16').feature('glob1').setIndex('descr', 'Energy loss due to friction', 2);
model.result('pg16').feature('glob1').set('titletype', 'none');
model.result('pg16').feature('glob1').set('linewidth', 2);
model.result('pg16').feature('glob1').set('linemarker', 'cycle');
model.result('pg16').feature('glob1').set('markerpos', 'interp');
model.result('pg16').run;
model.result('pg16').set('ylabelactive', true);
model.result('pg16').set('ylabel', 'Energy (J)');
model.result('pg16').run;
model.result('pg16').set('axislimits', true);
model.result('pg16').set('ymax', '3e6');
model.result('pg16').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').set('maxframes', 50);

model.study('std5').feature('time').set('disabledphysics', {'mbd/gacc1' 'mbd/att1' 'mbd/hgj1' 'mbd/att2' 'mbd/att3' 'mbd/hgj2' 'mbd/hgj3/sd1' 'mbd/ge1' 'mbd/hgj3/fric1' 'mbd/ge2'});
model.study('std4').feature('time').set('disabledphysics', {'mbd/hgj1' 'mbd/att1' 'mbd/att2' 'mbd/att3' 'mbd/hgj2' 'mbd/hgj3/pm1' 'mbd/hgj3/fric1' 'mbd/ge2'});
model.study('std3').feature('time').set('disabledphysics', {'mbd/hgj1/pm1' 'mbd/hgj2/ct1' 'mbd/rd1' 'mbd/rd2' 'mbd/hgj3' 'mbd/ge1' 'mbd/ge2'});
model.study('std2').feature('time').set('useadvanceddisable', true);
model.study('std2').feature('time').set('disabledphysics', {'mbd/hgj2/lk1' 'mbd/rd1' 'mbd/rd2' 'mbd/hgj3' 'mbd/ge1' 'mbd/ge2'});
model.study('std1').feature('time').set('useadvanceddisable', true);
model.study('std1').feature('time').set('disabledphysics', {'mbd/hgj1/pm1' 'mbd/hgj2/ct1' 'mbd/hgj2/lk1' 'mbd/rd1' 'mbd/rd2' 'mbd/hgj3' 'mbd/ge1' 'mbd/ge2'});

model.result('pg1').run;

model.title('Double-Pendulum Dynamics');

model.description(['This example illustrates the multibody dynamic simulation of double pendulum. Both arms are modeled as flexible elements as well as rigid elements in different cases. Various features on joints such as stop condition, lock condition, spring' native2unicode(hex2dec({'20' '13'}), 'unicode') 'damper and prescribed motion are demonstrated in this example.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;

model.label('double_pendulum.mph');

model.modelNode.label('Components');

out = model;
