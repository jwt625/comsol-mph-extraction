function out = model
%
% nonlinear_transfer_impedance.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Nonlinear_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('ta', 'ThermoacousticsSinglePhysics', 'geom1');
model.physics('ta').model('comp1');
model.physics.create('tatd', 'ThermoacousticsSinglePhysicsTransient', 'geom1');
model.physics('tatd').model('comp1');
model.physics.create('actd', 'TransientPressureAcoustics', 'geom1');
model.physics('actd').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/ta', true);
model.study('std1').feature('freq').setSolveFor('/physics/tatd', true);
model.study('std1').feature('freq').setSolveFor('/physics/actd', true);

model.param.label('Parameters 1 - Geometry');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('ab', '0.75', 'Ratio a/b');
model.param.set('ac', '0.4[mm]', 'Orifice center radius');
model.param.set('tp', '1[mm]', 'Plate thickness');
model.param.set('delta', 'ac*(1-ab)/(1+ab)', 'Radius shift');
model.param.set('a', 'ac-delta', 'Orifice bottom radius');
model.param.set('b', 'ac+delta', 'Orifice top radius');
model.param.set('Lpml', '0.5[mm]', 'PML thickness');
model.param.set('N0', '50', 'Fillet fraction of radius');
model.param.set('r0', 'ac/N0', 'Fillet radius');
model.param.set('NH', '25', 'Height geometry factor');
model.param.set('NR', '6', 'Radial geometry factor');
model.param.create('par2');
model.param('par2').label('Parameters 2 - Model');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('fmax', '2000[Hz]', 'Maximum study frequency');
model.param('par2').set('dvisc', '220[um]*sqrt(100[Hz]/fmax)', 'Viscous boundary layer thickness at fmax');
model.param('par2').set('f0', '500[Hz]', 'Frequency');
model.param('par2').set('omega0', '2*pi*f0', 'Angular frequency');
model.param('par2').set('T0', '1/f0', 'Period');
model.param('par2').set('pin', '10[Pa]', 'Incident pressure amplitude');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'table');
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('pol1').setIndex('table', '-tp/2', 0, 1);
model.geom('geom1').feature('pol1').setIndex('table', 'a', 1, 0);
model.geom('geom1').feature('pol1').setIndex('table', '-tp/2', 1, 1);
model.geom('geom1').feature('pol1').setIndex('table', 'b', 2, 0);
model.geom('geom1').feature('pol1').setIndex('table', 'tp/2', 2, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 3, 0);
model.geom('geom1').feature('pol1').setIndex('table', 'tp/2', 3, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 4, 0);
model.geom('geom1').feature('pol1').setIndex('table', '-tp/2', 4, 1);
model.geom('geom1').run('pol1');
model.geom('geom1').create('ls1', 'LineSegment');
model.geom('geom1').feature('ls1').set('specify1', 'coord');
model.geom('geom1').feature('ls1').set('specify2', 'coord');
model.geom('geom1').feature('ls1').set('coord2', {'ac' '0'});
model.geom('geom1').run('ls1');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'NR*ac' 'NH*ac'});
model.geom('geom1').feature('r1').set('pos', {'0' 'tp/2'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'NR*ac' 'NH*ac'});
model.geom('geom1').feature('r2').set('pos', {'0' 'tp/2-NH*ac-tp'});
model.geom('geom1').run('r2');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'ls1' 'pol1' 'r1' 'r2'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').set('uni1', [4 8]);
model.geom('geom1').run('del1');
model.geom('geom1').create('fil1', 'Fillet');
model.geom('geom1').feature('fil1').selection('point').set('del1', [6 8]);
model.geom('geom1').feature('fil1').set('radius', 'r0');
model.geom('geom1').run('fil1');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', {'NR*ac' 'NH*ac'});
model.geom('geom1').feature('r3').set('pos', {'0' 'tp/2+NH*ac'});
model.geom('geom1').run('r3');
model.geom('geom1').create('r4', 'Rectangle');
model.geom('geom1').feature('r4').set('size', {'NR*ac' 'NH*ac'});
model.geom('geom1').feature('r4').set('pos', {'0' 'tp/2-NH*ac-tp-NH*ac'});
model.geom('geom1').run('r4');
model.geom('geom1').create('ls2', 'LineSegment');
model.geom('geom1').feature('ls2').selection('vertex1').set('fil1', 2);
model.geom('geom1').feature('ls2').set('specify2', 'coord');
model.geom('geom1').feature('ls2').set('coord2', {'a' '-tp/2'});
model.geom('geom1').run('ls2');
model.geom('geom1').create('ls3', 'LineSegment');
model.geom('geom1').feature('ls3').selection('vertex1').set('fil1', 4);
model.geom('geom1').feature('ls3').set('specify2', 'coord');
model.geom('geom1').feature('ls3').set('coord2', {'b' 'tp/2'});
model.geom('geom1').run('fin');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Variables 1 - Linear Analytical Model');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('Ztrans', '(intop_in(ta.p_t)/intop_in(1)-intop_out(ta.p_t)/intop_in(1))/(intop_mid(w)/intop_mid(1))/(rho0*c0)', 'Transfer impedance');
model.variable('var1').set('iomega0', 'i*2*pi*freq', 'Complex angular frequency');
model.variable('var1').set('kv', 'sqrt(-rho0*iomega0/mu0)', 'Viscous wave number');
model.variable('var1').set('kth', 'sqrt(-iomega0*rho0*Cp0/kappa0)', 'Thermal wave number');
model.variable('var1').set('Gv', '-besselj(2,kv*a)/besselj(0,kv*a)', 'Help variable');
model.variable('var1').set('Gth', '-besselj(2,kth*a)/besselj(0,kth*a)', 'Help variable');
model.variable('var1').set('Zc', '1/sqrt((gamma0-(gamma0-1)*Gth)*Gv)', 'Characteristic impedance');
model.variable('var1').set('kc', '2*pi*freq/c0*sqrt((gamma0-(gamma0-1)*Gth)/Gv)', 'Complex wave number');
model.variable('var1').set('Zlin_NOec', '2*i*Zc*sin(kc*tp/2)', 'Linear transfer impedance (no end correction)');
model.variable('var1').set('EC', '16*a/(3*pi)', 'End correction');
model.variable('var1').set('ECfit', '0.8', 'End correction fitting factor');
model.variable('var1').set('Zlin', '2*i*Zc*sin(kc*(tp+ECfit*EC)/2)', 'Linear transfer impedance (analytical)');
model.variable('var1').set('Ztrans_rms', '(abs(intop_in(ta.p_t))/intop_in(1)-abs(intop_out(ta.p_t))/intop_in(1))/(abs(intop_mid(w))/intop_mid(1))/(rho0*c0)', 'Transfer impedance from model (RMS)');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Variables 2 - Material Parameters');

% To import content from file, use:
% model.variable('var2').loadFile('FILENAME');
model.variable('var2').set('rho0', 'intop_pnt(ta.rho0)', 'Equilibrium density');
model.variable('var2').set('mu0', 'intop_pnt(ta.mu)', 'Viscosity');
model.variable('var2').set('c0', 'intop_pnt(ta.c)', 'Speed of sound');
model.variable('var2').set('gamma0', 'intop_pnt(ta.gamma)', 'Ratio of specific heats');
model.variable('var2').set('Cp0', 'intop_pnt(ta.Cp)', 'Heat capacity at constant pressure');
model.variable('var2').set('kappa0', 'intop_pnt(ta.kcond)', 'Thermal conductivity');
model.variable.create('var3');
model.variable('var3').model('comp1');
model.variable('var3').label('Variables 3 - Nonlinear Analytical Model');

% To import content from file, use:
% model.variable('var3').loadFile('FILENAME');
model.variable('var3').set('Cd', '0.7', 'Discharge coefficient');
model.variable('var3').set('Znonlin', 'rho0*sqrt(0.5*U*conj(U))*1/(2*Cd^2)/(rho0*c0)', 'Nonlinear contribution to the impedance');
model.variable('var3').set('U', 'intop_mid(w)/intop_mid(1)', 'Average velocity in orifice');
model.variable('var3').set('U2', 'sqrt(2)*w_rms', 'Average velocity in orifice');
model.variable('var3').set('Sr', '2*pi*freq*2*ac/abs(U)', 'Strouhal number (frequency)');
model.variable('var3').set('Sr2', 'omega0*2*ac/abs(U2)', 'Strouhal number (transient)');
model.variable('var3').set('Sh', '2*ac*sqrt(2*pi*freq*rho0/(4*mu0))', 'Shear number (frequency)');
model.variable('var3').set('Sh2', '2*ac*sqrt(omega0*rho0/(4*mu0))', 'Shear number (transient)');
model.variable('var3').set('FC', '1/(1+2*Sr*(1+0.06*exp(3.74/Sh)))', 'Help variable');
model.variable('var3').set('GC', 'if(Sr>1,GC2,GC1)', 'Help variable');
model.variable('var3').set('GC1', '0.2-0.5/Sr*(1-0.42/Sh^2)+0.05/Sr^2*(1-0.68/Sh^2)', 'Help variable');
model.variable('var3').set('GC2', '-0.05*(1/Sr*(1-1/Sh))-0.6*(1/Sr*(1-1/Sh))^2', 'Help variable');
model.variable('var3').set('Rnonlin', 'real(Zlin)+FC*U*rho0/(2*Cd^2)/(rho0*c0)', 'Nonlinear resistance (Temiz at al.)');
model.variable('var3').set('Dnonlin', 'imag(Zlin)+GC*2*pi*freq*rho0*2*a/(2*rho0*c0)', 'Nonlinear reactance (Temiz at al.)');
model.variable.create('var4');
model.variable('var4').model('comp1');
model.variable('var4').label('Variables 4 - Time Domain Impedance');

% To import content from file, use:
% model.variable('var4').loadFile('FILENAME');
model.variable('var4').set('Ztime', 'Dp_rms/w_rms/(rho0*c0)', 'Transfer impedance (time domain RMS based)');
model.variable('var4').set('Dp_rms', 'sqrt(1/(T0)*timeint(4*T0,5*T0,(intop_in(tatd.p_t)-intop_out(tatd.p_t))^2,1e-3,T0[1/s]/50))/intop_in(1)', 'Pressure drop RMS');
model.variable('var4').set('pin_rms', 'sqrt(1/(T0)*timeint(4*T0,5*T0,intop_in(tatd.p_t)^2,1e-3,T0[1/s]/50))/intop_in(1)', 'Incident pressure RMS');
model.variable('var4').set('pout_rms', 'sqrt(1/(T0)*timeint(4*T0,5*T0,intop_out(tatd.p_t)^2,1e-3,T0[1/s]/50))/intop_out(1)', 'Transmitted pressure RMS');
model.variable('var4').set('w_rms', 'sqrt(1/(T0)*timeint(4*T0,5*T0,intop_mid(w2)^2,1e-3,T0[1/s]/50))/intop_mid(1)', 'Center velocity RMS');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'intop_mid');
model.cpl('intop1').selection.geom('geom1', 1);
model.cpl('intop1').selection.set([8]);
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').set('opname', 'intop_in');
model.cpl('intop2').selection.geom('geom1', 1);
model.cpl('intop2').selection.set([6 15]);
model.cpl.create('intop3', 'Integration', 'geom1');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').set('opname', 'intop_out');
model.cpl('intop3').selection.geom('geom1', 1);
model.cpl('intop3').selection.set([10 17]);
model.cpl.create('intop4', 'Integration', 'geom1');
model.cpl('intop4').set('axisym', true);
model.cpl('intop4').set('opname', 'intop_pnt');
model.cpl('intop4').selection.geom('geom1', 0);
model.cpl('intop4').selection.set([11]);
model.cpl('intop4').set('axisym', false);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('ta').selection.set([2 3]);
model.physics('ta').create('wall2', 'Wall', 1);
model.physics('ta').feature('wall2').selection.set([19 20]);
model.physics('ta').feature('wall2').set('MechanicalCondition', 'Slip');
model.physics('ta').feature('wall2').set('ThermalCondition', 'Adiabatic');
model.physics('ta').create('port1', 'Port', 1);
model.physics('ta').feature('port1').selection.set([4]);
model.physics('ta').feature('port1').set('PortType', 'PlaneWave');
model.physics('ta').feature('port1').set('pamp', 'pin');
model.physics('ta').create('port2', 'Port', 1);
model.physics('ta').feature('port2').selection.set([12]);
model.physics('ta').feature('port2').set('PortType', 'PlaneWave');
model.physics('tatd').selection.set([2 3]);
model.physics('tatd').prop('Stabilization').set('selStab', 'GLSStab');
model.physics('tatd').prop('TransientSettings').set('fmax', 'f0');
model.physics('tatd').create('wall2', 'Wall', 1);
model.physics('tatd').feature('wall2').selection.set([19 20]);
model.physics('tatd').feature('wall2').set('MechanicalCondition', 'Slip');
model.physics('tatd').feature('wall2').set('ThermalCondition', 'Adiabatic');
model.physics('tatd').create('ntac1', 'NonlinearThermoviscousAcousticsContributions', 2);
model.physics('tatd').feature('ntac1').selection.set([2 3]);
model.physics('actd').selection.set([1 4]);
model.physics('actd').prop('TransientSettings').set('fmax', 'f0');
model.physics('actd').create('pwr1', 'PlaneWaveRadiation', 1);
model.physics('actd').feature('pwr1').selection.set([2 13]);
model.physics('actd').feature('pwr1').create('ipf1', 'IncidentPressureField', 1);
model.physics('actd').feature('pwr1').feature('ipf1').set('pamp', 'pin');
model.physics('actd').feature('pwr1').feature('ipf1').set('c_mat', 'from_mat');
model.physics('actd').feature('pwr1').feature('ipf1').set('PressureFieldMaterial', 'mat1');
model.physics('actd').feature('pwr1').feature('ipf1').set('dir', [0 0 1]);
model.physics('actd').feature('pwr1').feature('ipf1').set('f0', 'f0');

model.multiphysics.create('atb1', 'AcousticThermoacousticBoundary', 'geom1', 1);
model.multiphysics('atb1').selection.set([4 12]);
model.multiphysics('atb1').set('Thermoacoustics_physics', 'tatd');

model.mesh('mesh1').create('cr1', 'CornerRefinement');
model.mesh('mesh1').feature('cr1').selection('boundary').set([14 15 16 17 22 23]);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'a');
model.mesh('mesh1').feature('size').set('hmin', 4.8E-6);
model.mesh('mesh1').feature('size').set('hgrad', 1.2);
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([5 6 7 8 10]);
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 'a/7');
model.mesh('mesh1').feature('ftri1').create('size2', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').feature('size2').selection.set([2 3]);
model.mesh('mesh1').feature('ftri1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size2').set('hmax', 'a/3');
model.mesh('mesh1').feature('ftri1').create('size3', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size3').selection.geom('geom1', 1);
model.mesh('mesh1').feature('ftri1').feature('size3').selection.set([14 16 22 23]);
model.mesh('mesh1').feature('ftri1').feature('size3').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size3').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size3').set('hmax', 'dvisc');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([14 15 16 17 22 23]);
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 3);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', '0.1*dvisc');
model.mesh('mesh1').run;

model.study('std1').setGenPlots(false);
model.study('std1').label('Study 1 - Frequency Domain');
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'a', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'a', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'ab', 0);
model.study('std1').feature('param').setIndex('plistarr', '0.5 0.75 1', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('freq').set('plist', 'range(10,5,95) range(100,10,190) range(200,100,2000)');
model.study('std1').feature('freq').setEntry('activate', 'ta', true);
model.study('std1').feature('freq').setEntry('activate', 'actd', false);
model.study('std1').feature('freq').setEntry('activateCoupling', 'atb1', false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(10,5,95) range(100,10,190) range(200,100,2000)'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'ab'});
model.batch('p1').set('plistarr', {'0.5 0.75 1'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/ta', true);
model.study('std2').feature('time').setSolveFor('/physics/tatd', true);
model.study('std2').feature('time').setSolveFor('/physics/actd', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/atb1', true);
model.study.create('std3');
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').setSolveFor('/physics/ta', true);
model.study('std3').feature('time').setSolveFor('/physics/tatd', true);
model.study('std3').feature('time').setSolveFor('/physics/actd', true);
model.study('std3').feature('time').setSolveFor('/multiphysics/atb1', true);
model.study('std2').label('Study 2 - Time Domain Linear');
model.study('std2').setGenPlots(false);
model.study('std2').create('param', 'Parametric');
model.study('std2').feature('param').setIndex('pname', 'a', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'm', 0);
model.study('std2').feature('param').setIndex('pname', 'a', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'm', 0);
model.study('std2').feature('param').setIndex('pname', 'ab', 0);
model.study('std2').feature('param').setIndex('plistarr', '0.5 0.75 1', 0);
model.study('std2').feature('param').setIndex('punit', '', 0);
model.study('std2').feature('param').setIndex('pname', 'a', 1);
model.study('std2').feature('param').setIndex('plistarr', '', 1);
model.study('std2').feature('param').setIndex('punit', 'm', 1);
model.study('std2').feature('param').setIndex('pname', 'a', 1);
model.study('std2').feature('param').setIndex('plistarr', '', 1);
model.study('std2').feature('param').setIndex('punit', 'm', 1);
model.study('std2').feature('param').setIndex('pname', 'f0', 1);
model.study('std2').feature('param').setIndex('plistarr', '10 20 50 100 200 500 1000', 1);
model.study('std2').feature('param').setIndex('punit', 'Hz', 1);
model.study('std2').feature('param').set('sweeptype', 'filled');
model.study('std2').feature('time').set('tlist', 'range(0,T0,3*T0) range(4*T0,T0/50,5*T0)');
model.study('std2').feature('time').set('useadvanceddisable', true);
model.study('std2').feature('time').set('disabledphysics', {'tatd/ntac1'});

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,T0,3*T0) range(4*T0,T0/50,5*T0)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'Default');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 1.0E-4);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsgenalpha', 'manual');
model.sol('sol2').feature('t1').set('timestepgenalpha', 'min(1/(60*f0),1/(60*f0))');
model.sol('sol2').feature('t1').set('timestepbdf', 'min(1/(60*f0),1/(60*f0))');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('timemethod', 'genalpha');
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('initialstepbdfactive', true);
model.sol('sol2').feature('t1').set('initialstepbdf', 'min(1/(100*f0),1/(100*f0))');
model.sol('sol2').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol2').feature('t1').set('maxstepbdf', 'min(min(1e100,1/(30*f0)),1/(30*f0))');
model.sol('sol2').feature('t1').set('initialstepgenalphaactive', true);
model.sol('sol2').feature('t1').set('initialstepgenalpha', 'min(1/(100*f0),1/(100*f0))');
model.sol('sol2').feature('t1').set('maxstepconstraintgenalpha', 'const');
model.sol('sol2').feature('t1').set('maxstepgenalpha', 'min(min(1e100,1/(30*f0)),1/(30*f0))');
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').create('seDef', 'Segregated');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').feature('t1').feature.remove('seDef');
model.sol('sol2').attach('std2');

model.batch.create('p2', 'Parametric');
model.batch('p2').study('std2');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol2');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').set('pname', {'ab' 'f0'});
model.batch('p2').set('plistarr', {'0.5 0.75 1' '10 20 50 100 200 500 1000'});
model.batch('p2').set('sweeptype', 'filled');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std2');
model.batch('p2').set('control', 'param');

model.study('std3').label('Study 3 - Time Domain Nonlinear');
model.study('std3').setGenPlots(false);
model.study('std3').create('param', 'Parametric');
model.study('std3').feature('param').setIndex('pname', 'a', 0);
model.study('std3').feature('param').setIndex('plistarr', '', 0);
model.study('std3').feature('param').setIndex('punit', 'm', 0);
model.study('std3').feature('param').setIndex('pname', 'a', 0);
model.study('std3').feature('param').setIndex('plistarr', '', 0);
model.study('std3').feature('param').setIndex('punit', 'm', 0);
model.study('std3').feature('param').setIndex('pname', 'ab', 0);
model.study('std3').feature('param').setIndex('plistarr', '0.5 0.75 1', 0);
model.study('std3').feature('param').setIndex('punit', '', 0);
model.study('std3').feature('param').setIndex('pname', 'a', 1);
model.study('std3').feature('param').setIndex('plistarr', '', 1);
model.study('std3').feature('param').setIndex('punit', 'm', 1);
model.study('std3').feature('param').setIndex('pname', 'a', 1);
model.study('std3').feature('param').setIndex('plistarr', '', 1);
model.study('std3').feature('param').setIndex('punit', 'm', 1);
model.study('std3').feature('param').setIndex('pname', 'f0', 1);
model.study('std3').feature('param').setIndex('plistarr', '10 20 50 100 200 500', 1);
model.study('std3').feature('param').setIndex('punit', 'Hz', 1);
model.study('std3').feature('param').set('sweeptype', 'filled');
model.study('std3').feature('time').set('tlist', 'range(0,T0,3*T0) range(4*T0,T0/50,5*T0)');

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'time');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'time');
model.sol('sol3').create('t1', 'Time');
model.sol('sol3').feature('t1').set('tlist', 'range(0,T0,3*T0) range(4*T0,T0/50,5*T0)');
model.sol('sol3').feature('t1').set('plot', 'off');
model.sol('sol3').feature('t1').set('plotgroup', 'Default');
model.sol('sol3').feature('t1').set('plotfreq', 'tout');
model.sol('sol3').feature('t1').set('probesel', 'all');
model.sol('sol3').feature('t1').set('probes', {});
model.sol('sol3').feature('t1').set('probefreq', 'tsteps');
model.sol('sol3').feature('t1').set('rtol', 1.0E-4);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('reacf', true);
model.sol('sol3').feature('t1').set('storeudot', true);
model.sol('sol3').feature('t1').set('tstepsgenalpha', 'manual');
model.sol('sol3').feature('t1').set('timestepgenalpha', 'min(1/(60*f0),1/(60*f0))');
model.sol('sol3').feature('t1').set('timestepbdf', 'min(1/(60*f0),1/(60*f0))');
model.sol('sol3').feature('t1').set('endtimeinterpolation', true);
model.sol('sol3').feature('t1').set('timemethod', 'genalpha');
model.sol('sol3').feature('t1').set('maxorder', 2);
model.sol('sol3').feature('t1').set('initialstepbdfactive', true);
model.sol('sol3').feature('t1').set('initialstepbdf', 'min(1/(100*f0),1/(100*f0))');
model.sol('sol3').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol3').feature('t1').set('maxstepbdf', 'min(min(1e100,1/(30*f0)),1/(30*f0))');
model.sol('sol3').feature('t1').set('initialstepgenalphaactive', true);
model.sol('sol3').feature('t1').set('initialstepgenalpha', 'min(1/(100*f0),1/(100*f0))');
model.sol('sol3').feature('t1').set('maxstepconstraintgenalpha', 'const');
model.sol('sol3').feature('t1').set('maxstepgenalpha', 'min(min(1e100,1/(30*f0)),1/(30*f0))');
model.sol('sol3').feature('t1').set('control', 'time');
model.sol('sol3').feature('t1').create('seDef', 'Segregated');
model.sol('sol3').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol3').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol3').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol3').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol3').feature('t1').create('d1', 'Direct');
model.sol('sol3').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol3').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol3').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol3').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol3').feature('t1').feature.remove('fcDef');
model.sol('sol3').feature('t1').feature.remove('seDef');
model.sol('sol3').attach('std3');

model.batch.create('p3', 'Parametric');
model.batch('p3').study('std3');
model.batch('p3').create('so1', 'Solutionseq');
model.batch('p3').feature('so1').set('seq', 'sol3');
model.batch('p3').feature('so1').set('store', 'on');
model.batch('p3').feature('so1').set('clear', 'on');
model.batch('p3').feature('so1').set('psol', 'none');
model.batch('p3').set('pname', {'ab' 'f0'});
model.batch('p3').set('plistarr', {'0.5 0.75 1' '10 20 50 100 200 500'});
model.batch('p3').set('sweeptype', 'filled');
model.batch('p3').set('probesel', 'all');
model.batch('p3').set('probes', {});
model.batch('p3').set('plot', 'off');
model.batch('p3').set('err', 'on');
model.batch('p3').attach('std3');
model.batch('p3').set('control', 'param');

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(10,5,95) range(100,10,190) range(200,100,2000)'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch('p1').feature.remove('so1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'ab'});
model.batch('p1').set('plistarr', {'0.5 0.75 1'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol4');
model.sol('sol4').study('std1');
model.sol('sol4').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol4');
model.batch('p1').run('compute');

model.sol('sol2').study('std2');
model.sol('sol2').feature.remove('t1');
model.sol('sol2').feature.remove('v1');
model.sol('sol2').feature.remove('st1');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,T0,3*T0) range(4*T0,T0/50,5*T0)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'Default');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 1.0E-4);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsgenalpha', 'manual');
model.sol('sol2').feature('t1').set('timestepgenalpha', 'min(1/(60*f0),1/(60*f0))');
model.sol('sol2').feature('t1').set('timestepbdf', 'min(1/(60*f0),1/(60*f0))');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('timemethod', 'genalpha');
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('initialstepbdfactive', true);
model.sol('sol2').feature('t1').set('initialstepbdf', 'min(1/(100*f0),1/(100*f0))');
model.sol('sol2').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol2').feature('t1').set('maxstepbdf', 'min(min(1e100,1/(30*f0)),1/(30*f0))');
model.sol('sol2').feature('t1').set('initialstepgenalphaactive', true);
model.sol('sol2').feature('t1').set('initialstepgenalpha', 'min(1/(100*f0),1/(100*f0))');
model.sol('sol2').feature('t1').set('maxstepconstraintgenalpha', 'const');
model.sol('sol2').feature('t1').set('maxstepgenalpha', 'min(min(1e100,1/(30*f0)),1/(30*f0))');
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').create('seDef', 'Segregated');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').feature('t1').feature.remove('seDef');
model.sol('sol2').attach('std2');

model.batch('p2').feature.remove('so1');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol2');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').set('pname', {'ab' 'f0'});
model.batch('p2').set('plistarr', {'0.5 0.75 1' '10 20 50 100 200 500 1000'});
model.batch('p2').set('sweeptype', 'filled');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std2');
model.batch('p2').set('control', 'param');

model.sol.create('sol8');
model.sol('sol8').study('std2');
model.sol('sol8').label('Parametric Solutions 2');

model.batch('p2').feature('so1').set('psol', 'sol8');
model.batch('p2').run('compute');

model.sol('sol3').study('std3');
model.sol('sol3').feature.remove('t1');
model.sol('sol3').feature.remove('v1');
model.sol('sol3').feature.remove('st1');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'time');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'time');
model.sol('sol3').create('t1', 'Time');
model.sol('sol3').feature('t1').set('tlist', 'range(0,T0,3*T0) range(4*T0,T0/50,5*T0)');
model.sol('sol3').feature('t1').set('plot', 'off');
model.sol('sol3').feature('t1').set('plotgroup', 'Default');
model.sol('sol3').feature('t1').set('plotfreq', 'tout');
model.sol('sol3').feature('t1').set('probesel', 'all');
model.sol('sol3').feature('t1').set('probes', {});
model.sol('sol3').feature('t1').set('probefreq', 'tsteps');
model.sol('sol3').feature('t1').set('rtol', 1.0E-4);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('reacf', true);
model.sol('sol3').feature('t1').set('storeudot', true);
model.sol('sol3').feature('t1').set('tstepsgenalpha', 'manual');
model.sol('sol3').feature('t1').set('timestepgenalpha', 'min(1/(60*f0),1/(60*f0))');
model.sol('sol3').feature('t1').set('timestepbdf', 'min(1/(60*f0),1/(60*f0))');
model.sol('sol3').feature('t1').set('endtimeinterpolation', true);
model.sol('sol3').feature('t1').set('timemethod', 'genalpha');
model.sol('sol3').feature('t1').set('maxorder', 2);
model.sol('sol3').feature('t1').set('initialstepbdfactive', true);
model.sol('sol3').feature('t1').set('initialstepbdf', 'min(1/(100*f0),1/(100*f0))');
model.sol('sol3').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol3').feature('t1').set('maxstepbdf', 'min(min(1e100,1/(30*f0)),1/(30*f0))');
model.sol('sol3').feature('t1').set('initialstepgenalphaactive', true);
model.sol('sol3').feature('t1').set('initialstepgenalpha', 'min(1/(100*f0),1/(100*f0))');
model.sol('sol3').feature('t1').set('maxstepconstraintgenalpha', 'const');
model.sol('sol3').feature('t1').set('maxstepgenalpha', 'min(min(1e100,1/(30*f0)),1/(30*f0))');
model.sol('sol3').feature('t1').set('control', 'time');
model.sol('sol3').feature('t1').create('seDef', 'Segregated');
model.sol('sol3').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol3').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol3').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol3').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol3').feature('t1').create('d1', 'Direct');
model.sol('sol3').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol3').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol3').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol3').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol3').feature('t1').feature.remove('fcDef');
model.sol('sol3').feature('t1').feature.remove('seDef');
model.sol('sol3').attach('std3');

model.batch('p3').feature.remove('so1');
model.batch('p3').create('so1', 'Solutionseq');
model.batch('p3').feature('so1').set('seq', 'sol3');
model.batch('p3').feature('so1').set('store', 'on');
model.batch('p3').feature('so1').set('clear', 'on');
model.batch('p3').feature('so1').set('psol', 'none');
model.batch('p3').set('pname', {'ab' 'f0'});
model.batch('p3').set('plistarr', {'0.5 0.75 1' '10 20 50 100 200 500'});
model.batch('p3').set('sweeptype', 'filled');
model.batch('p3').set('probesel', 'all');
model.batch('p3').set('probes', {});
model.batch('p3').set('plot', 'off');
model.batch('p3').set('err', 'on');
model.batch('p3').attach('std3');
model.batch('p3').set('control', 'param');

model.sol.create('sol30');
model.sol('sol30').study('std3');
model.sol('sol30').label('Parametric Solutions 3');

model.batch('p3').feature('so1').set('psol', 'sol30');
model.batch('p3').run('compute');

model.result.dataset.create('mir1', 'Mirror2D');
model.result.dataset('mir1').label('Mirror 2D - Frequency');
model.result.dataset('mir1').set('data', 'dset4');
model.result.dataset.create('mir2', 'Mirror2D');
model.result.dataset('mir2').label('Mirror 2D - Linear');
model.result.dataset('mir2').set('data', 'dset5');
model.result.dataset.create('mir3', 'Mirror2D');
model.result.dataset('mir3').label('Mirror 2D - Nonlinear');
model.result.dataset('mir3').set('data', 'dset6');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'dset6');
model.result.dataset('rev1').set('revangle', 130);
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Acoustic Pressure (ta)');
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').set('data', 'dset4');
model.result('pg1').setIndex('looplevel', 47, 0);
model.result('pg1').setIndex('looplevel', 3, 1);
model.result('pg1').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond2/pg2');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').label('Acoustic Pressure (ta)');
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 29, 0);
model.result('pg1').set('edges', false);
model.result('pg1').run;
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Acoustic Velocity (ta)');
model.result('pg2').set('dataisaxisym', 'off');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').set('data', 'dset4');
model.result('pg2').setIndex('looplevel', 47, 0);
model.result('pg2').setIndex('looplevel', 3, 1);
model.result('pg2').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond2/pg1');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('expr', 'ta.v_inst');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').label('Acoustic Velocity (ta)');
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 29, 0);
model.result('pg2').set('edges', false);
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').run;
model.result('pg3').label('Temperature (ta)');
model.result('pg3').set('data', 'dset4');
model.result('pg3').setIndex('looplevel', 29, 0);
model.result('pg3').set('edges', false);
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', 'ta.T_t');
model.result('pg3').feature('surf1').set('unit', 'mK');
model.result('pg3').feature('surf1').set('colortable', 'ThermalWave');
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').run;
model.result('pg4').label('T and V (ta)');
model.result('pg4').set('data', 'dset4');
model.result('pg4').setIndex('looplevel', 1, 1);
model.result('pg4').setIndex('looplevel', 19, 0);
model.result('pg4').set('titletype', 'label');
model.result('pg4').set('edges', false);
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('data', 'mir1');
model.result('pg4').feature('surf1').set('solutionparams', 'parent');
model.result('pg4').feature('surf1').set('expr', 'ta.T_t');
model.result('pg4').feature('surf1').set('unit', 'mK');
model.result('pg4').feature('surf1').set('colortable', 'ThermalWave');
model.result('pg4').create('surf2', 'Surface');
model.result('pg4').feature('surf2').set('expr', 'ta.v_inst');
model.result('pg4').create('arws1', 'ArrowSurface');
model.result('pg4').feature('arws1').set('arrowxmethod', 'coord');
model.result('pg4').feature('arws1').set('xcoord', 'range(0,0.06,0.6)');
model.result('pg4').feature('arws1').set('arrowymethod', 'coord');
model.result('pg4').feature('arws1').set('ycoord', 'range(-1.2,0.24,1.2)');
model.result('pg4').feature('arws1').set('scaleactive', true);
model.result('pg4').feature('arws1').set('scale', 0.15);
model.result('pg4').feature('arws1').set('color', 'white');
model.result('pg4').feature('arws1').create('sel1', 'Selection');
model.result('pg4').feature('arws1').feature('sel1').selection.set([2 3]);
model.result('pg4').create('line1', 'Line');
model.result('pg4').feature('line1').set('expr', '1');
model.result('pg4').feature('line1').set('coloring', 'uniform');
model.result('pg4').feature('line1').set('color', 'black');
model.result('pg4').feature('line1').create('sel1', 'Selection');
model.result('pg4').feature('line1').feature('sel1').selection.set([3 5 7 9 14 15 16 17 22 23]);
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Transfer Impedance (Frequency Domain)');
model.result('pg5').set('data', 'none');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'Frequency (Hz)');
model.result('pg5').set('titletype', 'label');
model.result('pg5').set('xlog', true);
model.result('pg5').set('ylog', true);
model.result('pg5').set('legendpos', 'upperleft');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').set('data', 'dset4');
model.result('pg5').feature('glob1').setIndex('looplevelinput', 'last', 1);
model.result('pg5').feature('glob1').setIndex('expr', 'real(Ztrans)', 0);
model.result('pg5').feature('glob1').setIndex('unit', 1, 0);
model.result('pg5').feature('glob1').setIndex('descr', 'COMSOL, real(Z)', 0);
model.result('pg5').feature('glob1').setIndex('expr', 'imag(Ztrans)', 1);
model.result('pg5').feature('glob1').setIndex('unit', 1, 1);
model.result('pg5').feature('glob1').setIndex('descr', 'COMSOL, imag(Z)', 1);
model.result('pg5').feature('glob1').setIndex('expr', 'abs(Ztrans)', 2);
model.result('pg5').feature('glob1').setIndex('unit', 1, 2);
model.result('pg5').feature('glob1').setIndex('descr', 'COMSOL, abs(Z)', 2);
model.result('pg5').feature('glob1').set('xdatasolnumtype', 'level1');
model.result('pg5').create('glob2', 'Global');
model.result('pg5').feature('glob2').set('markerpos', 'datapoints');
model.result('pg5').feature('glob2').set('linewidth', 'preference');
model.result('pg5').feature('glob2').set('data', 'dset1');
model.result('pg5').feature('glob2').setIndex('expr', 'real(Zlin)', 0);
model.result('pg5').feature('glob2').setIndex('unit', 1, 0);
model.result('pg5').feature('glob2').setIndex('descr', 'Analytical, real(Z)', 0);
model.result('pg5').feature('glob2').setIndex('expr', 'imag(Zlin)', 1);
model.result('pg5').feature('glob2').setIndex('unit', 1, 1);
model.result('pg5').feature('glob2').setIndex('descr', 'Analytical, imag(Z)', 1);
model.result('pg5').feature('glob2').setIndex('expr', 'abs(Zlin)', 2);
model.result('pg5').feature('glob2').setIndex('unit', 1, 2);
model.result('pg5').feature('glob2').setIndex('descr', 'Analytical, abs(Z)', 2);
model.result('pg5').feature('glob2').set('linestyle', 'dashed');
model.result('pg5').feature('glob2').set('linecolor', 'cyclereset');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Transfer Impedance vs. Frequency');
model.result('pg6').set('data', 'none');
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'Frequency (Hz)');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'Z/\rho c (1)');
model.result('pg6').set('xlog', true);
model.result('pg6').set('ylog', true);
model.result('pg6').set('legendpos', 'upperleft');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').set('data', 'dset4');
model.result('pg6').feature('glob1').setIndex('expr', 'abs(Ztrans)', 0);
model.result('pg6').feature('glob1').setIndex('unit', 1, 0);
model.result('pg6').feature('glob1').setIndex('descr', '', 0);
model.result('pg6').feature('glob1').set('xdatasolnumtype', 'level1');
model.result('pg6').feature('glob1').set('linestyle', 'cycle');
model.result('pg6').feature('glob1').set('linecolor', 'blue');
model.result('pg6').feature('glob1').set('linewidth', 2);
model.result('pg6').feature('glob1').set('legendsuffix', ', Frequency Domain (COMSOL)');
model.result('pg6').create('glob2', 'Global');
model.result('pg6').feature('glob2').set('markerpos', 'datapoints');
model.result('pg6').feature('glob2').set('linewidth', 'preference');
model.result('pg6').feature('glob2').set('data', 'dset4');
model.result('pg6').feature('glob2').setIndex('looplevelinput', 'last', 1);
model.result('pg6').feature('glob2').setIndex('expr', 'abs(Zlin)', 0);
model.result('pg6').feature('glob2').setIndex('unit', 1, 0);
model.result('pg6').feature('glob2').setIndex('descr', 'Linear Analytical', 0);
model.result('pg6').feature('glob2').set('xdatasolnumtype', 'level1');
model.result('pg6').feature('glob2').set('linecolor', 'red');
model.result('pg6').feature('glob2').set('linewidth', 2);
model.result('pg6').create('glob3', 'Global');
model.result('pg6').feature('glob3').set('markerpos', 'datapoints');
model.result('pg6').feature('glob3').set('linewidth', 'preference');
model.result('pg6').feature('glob3').set('data', 'dset4');
model.result('pg6').feature('glob3').setIndex('looplevelinput', 'last', 1);
model.result('pg6').feature('glob3').setIndex('expr', 'abs(Rnonlin+i*Dnonlin)', 0);
model.result('pg6').feature('glob3').setIndex('unit', 1, 0);
model.result('pg6').feature('glob3').setIndex('descr', 'Nonlinear Analytical', 0);
model.result('pg6').feature('glob3').set('xdatasolnumtype', 'level1');
model.result('pg6').feature('glob3').set('linestyle', 'dashdot');
model.result('pg6').feature('glob3').set('linecolor', 'red');
model.result('pg6').feature('glob3').set('linewidth', 2);
model.result('pg6').create('glob4', 'Global');
model.result('pg6').feature('glob4').set('markerpos', 'datapoints');
model.result('pg6').feature('glob4').set('linewidth', 'preference');
model.result('pg6').feature('glob4').set('data', 'dset5');
model.result('pg6').feature('glob4').setIndex('looplevelinput', 'first', 0);
model.result('pg6').feature('glob4').setIndex('expr', 'Ztime', 0);
model.result('pg6').feature('glob4').setIndex('unit', 1, 0);
model.result('pg6').feature('glob4').setIndex('descr', 'Transfer impedance (time domain RMS based)', 0);
model.result('pg6').feature('glob4').set('xdatasolnumtype', 'outer');
model.result('pg6').feature('glob4').set('xdata', 'expr');
model.result('pg6').feature('glob4').set('xdataexpr', 'f0');
model.result('pg6').feature('glob4').set('linestyle', 'none');
model.result('pg6').feature('glob4').set('linecolor', 'custom');
model.result('pg6').feature('glob4').set('customlinecolor', [0.43921568989753723 0.686274528503418 0.10196078568696976]);
model.result('pg6').feature('glob4').set('linewidth', 2);
model.result('pg6').feature('glob4').set('linemarker', 'point');
model.result('pg6').feature('glob4').set('legendmethod', 'manual');
model.result('pg6').feature('glob4').setIndex('legends', 'Linear Transient (COMSOL)', 0);
model.result('pg6').create('glob5', 'Global');
model.result('pg6').feature('glob5').set('markerpos', 'datapoints');
model.result('pg6').feature('glob5').set('linewidth', 'preference');
model.result('pg6').feature('glob5').set('data', 'dset6');
model.result('pg6').feature('glob5').setIndex('looplevelinput', 'first', 2);
model.result('pg6').feature('glob5').setIndex('looplevelinput', 'first', 0);
model.result('pg6').feature('glob5').setIndex('expr', 'Ztime', 0);
model.result('pg6').feature('glob5').setIndex('unit', 1, 0);
model.result('pg6').feature('glob5').setIndex('descr', 'Transfer impedance (time domain RMS based)', 0);
model.result('pg6').feature('glob5').set('xdatasolnumtype', 'outer');
model.result('pg6').feature('glob5').set('xdata', 'expr');
model.result('pg6').feature('glob5').set('xdataexpr', 'f0');
model.result('pg6').feature('glob5').set('linestyle', 'none');
model.result('pg6').feature('glob5').set('linecolor', 'black');
model.result('pg6').feature('glob5').set('linewidth', 2);
model.result('pg6').feature('glob5').set('linemarker', 'cycle');
model.result('pg6').feature('glob5').set('legendmethod', 'manual');
model.result('pg6').feature('glob5').setIndex('legends', 'ab=0.5, Nonlinear Transient (COMSOL)', 0);
model.result('pg6').create('glob6', 'Global');
model.result('pg6').feature('glob6').set('markerpos', 'datapoints');
model.result('pg6').feature('glob6').set('linewidth', 'preference');
model.result('pg6').feature('glob6').set('data', 'dset6');
model.result('pg6').feature('glob6').setIndex('looplevelinput', 'manual', 2);
model.result('pg6').feature('glob6').setIndex('looplevel', [2], 2);
model.result('pg6').feature('glob6').setIndex('looplevelinput', 'first', 0);
model.result('pg6').feature('glob6').setIndex('expr', 'Ztime', 0);
model.result('pg6').feature('glob6').setIndex('unit', 1, 0);
model.result('pg6').feature('glob6').setIndex('descr', 'Transfer impedance (time domain RMS based)', 0);
model.result('pg6').feature('glob6').set('xdatasolnumtype', 'outer');
model.result('pg6').feature('glob6').set('xdata', 'expr');
model.result('pg6').feature('glob6').set('xdataexpr', 'f0');
model.result('pg6').feature('glob6').set('linestyle', 'none');
model.result('pg6').feature('glob6').set('linecolor', 'black');
model.result('pg6').feature('glob6').set('linewidth', 2);
model.result('pg6').feature('glob6').set('linemarker', 'cycle');
model.result('pg6').feature('glob6').set('legendmethod', 'manual');
model.result('pg6').feature('glob6').setIndex('legends', 'ab=0.75, Nonlinear Transient (COMSOL)', 0);
model.result('pg6').create('glob7', 'Global');
model.result('pg6').feature('glob7').set('markerpos', 'datapoints');
model.result('pg6').feature('glob7').set('linewidth', 'preference');
model.result('pg6').feature('glob7').set('data', 'dset6');
model.result('pg6').feature('glob7').setIndex('looplevelinput', 'last', 2);
model.result('pg6').feature('glob7').setIndex('looplevelinput', 'first', 0);
model.result('pg6').feature('glob7').setIndex('expr', 'Ztime', 0);
model.result('pg6').feature('glob7').setIndex('unit', 1, 0);
model.result('pg6').feature('glob7').setIndex('descr', 'Transfer impedance (time domain RMS based)', 0);
model.result('pg6').feature('glob7').set('xdatasolnumtype', 'outer');
model.result('pg6').feature('glob7').set('xdata', 'expr');
model.result('pg6').feature('glob7').set('xdataexpr', 'f0');
model.result('pg6').feature('glob7').set('linestyle', 'none');
model.result('pg6').feature('glob7').set('linecolor', 'black');
model.result('pg6').feature('glob7').set('linewidth', 2);
model.result('pg6').feature('glob7').set('linemarker', 'cycle');
model.result('pg6').feature('glob7').set('legendmethod', 'manual');
model.result('pg6').feature('glob7').setIndex('legends', 'ab=1, Nonlinear Transient (COMSOL)', 0);
model.result('pg6').run;
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Transfer Impedance vs. Strouhal Number');
model.result('pg7').set('xlabel', 'Sr (1)');
model.result('pg7').run;
model.result('pg7').feature('glob1').set('xdata', 'expr');
model.result('pg7').feature('glob1').set('xdataexpr', 'Sr');
model.result('pg7').run;
model.result('pg7').feature('glob2').set('xdata', 'expr');
model.result('pg7').feature('glob2').set('xdataexpr', 'Sr');
model.result('pg7').run;
model.result('pg7').feature('glob3').set('xdata', 'expr');
model.result('pg7').feature('glob3').set('xdataexpr', 'Sr');
model.result('pg7').run;
model.result('pg7').feature('glob4').set('xdataexpr', 'Sr2');
model.result('pg7').run;
model.result('pg7').feature('glob5').set('xdataexpr', 'Sr2');
model.result('pg7').run;
model.result('pg7').feature('glob6').set('xdataexpr', 'Sr2');
model.result('pg7').run;
model.result('pg7').feature('glob7').set('xdataexpr', 'Sr2');
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').run;
model.result('pg8').label('Acoustic Pressure (tatd)');
model.result('pg8').set('data', 'mir3');
model.result('pg8').set('looplevel', [55 3 2]);
model.result('pg8').set('titletype', 'label');
model.result('pg8').set('showlegendsunit', true);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', 'tatd.p_t');
model.result('pg8').feature('surf1').set('colortable', 'Wave');
model.result('pg8').create('surf2', 'Surface');
model.result('pg8').feature('surf2').set('expr', 'actd.p_t');
model.result('pg8').feature('surf2').set('inheritplot', 'surf1');
model.result('pg8').run;
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').run;
model.result('pg9').label('T and V (tatd)');
model.result('pg9').set('data', 'dset6');
model.result('pg9').set('looplevel', [30 4 1]);
model.result('pg9').set('titletype', 'label');
model.result('pg9').set('edges', false);
model.result('pg9').set('showlegendsunit', true);
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('data', 'mir3');
model.result('pg9').feature('surf1').set('solutionparams', 'parent');
model.result('pg9').feature('surf1').set('expr', 'tatd.T_t');
model.result('pg9').feature('surf1').set('unit', 'mK');
model.result('pg9').feature('surf1').set('colortable', 'ThermalWave');
model.result('pg9').create('surf2', 'Surface');
model.result('pg9').feature('surf2').set('expr', 'tatd.v_inst');
model.result('pg9').create('arws1', 'ArrowSurface');
model.result('pg9').feature('arws1').set('expr', {'tatd.u_tr' 'tatd.u_tz'});
model.result('pg9').feature('arws1').set('arrowxmethod', 'coord');
model.result('pg9').feature('arws1').set('xcoord', 'range(0,0.06,0.6)');
model.result('pg9').feature('arws1').set('arrowymethod', 'coord');
model.result('pg9').feature('arws1').set('ycoord', 'range(-1.2,0.21333333333333335,2)');
model.result('pg9').feature('arws1').set('color', 'white');
model.result('pg9').feature('arws1').create('sel1', 'Selection');
model.result('pg9').feature('arws1').feature('sel1').selection.set([2 3]);
model.result('pg9').create('line1', 'Line');
model.result('pg9').feature('line1').set('expr', '1');
model.result('pg9').feature('line1').set('coloring', 'uniform');
model.result('pg9').feature('line1').set('color', 'black');
model.result('pg9').feature('line1').create('sel1', 'Selection');
model.result('pg9').feature('line1').feature('sel1').selection.set([3 5 7 9 14 15 16 17 22 23]);
model.result('pg9').run;
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').run;
model.result('pg10').label('Acoustic Temperature (tatd)');
model.result('pg10').set('data', 'mir3');
model.result('pg10').set('looplevel', [17 2 2]);
model.result('pg10').set('titletype', 'label');
model.result('pg10').set('edges', false);
model.result('pg10').set('showlegendsunit', true);
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', 'tatd.T_t');
model.result('pg10').feature('surf1').set('unit', 'mK');
model.result('pg10').feature('surf1').set('colortable', 'ThermalWave');
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup3D');
model.result('pg11').run;
model.result('pg11').label('Acoustic Velocity 3D');
model.result('pg11').set('looplevel', [47 4 3]);
model.result('pg11').set('titletype', 'label');
model.result('pg11').set('edges', false);
model.result('pg11').set('showlegendsunit', true);
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('expr', 'tatd.v_inst');
model.result('pg11').create('arws1', 'ArrowSurface');
model.result('pg11').feature('arws1').set('revcoordsys', 'cylindrical');
model.result('pg11').feature('arws1').setIndex('expr', 'tatd.u_tr', 0);
model.result('pg11').feature('arws1').setIndex('expr', 0, 1);
model.result('pg11').feature('arws1').set('expr', {'tatd.u_tr' '0' 'tatd.u_tz'});
model.result('pg11').feature('arws1').set('placement', 'elements');
model.result('pg11').feature('arws1').set('color', 'white');
model.result('pg11').run;
model.result.create('pg12', 'PlotGroup1D');
model.result('pg12').run;
model.result('pg12').label('Pressure in Orifice');
model.result('pg12').set('data', 'none');
model.result('pg12').set('titletype', 'label');
model.result('pg12').set('xlog', true);
model.result('pg12').create('ptgr1', 'PointGraph');
model.result('pg12').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg12').feature('ptgr1').set('linewidth', 'preference');
model.result('pg12').feature('ptgr1').set('data', 'dset5');
model.result('pg12').feature('ptgr1').setIndex('looplevelinput', 'first', 2);
model.result('pg12').feature('ptgr1').setIndex('looplevelinput', 'manual', 1);
model.result('pg12').feature('ptgr1').setIndex('looplevel', [4], 1);
model.result('pg12').feature('ptgr1').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg12').feature('ptgr1').setIndex('looplevelindices', 'range(5,1,55)', 0);
model.result('pg12').feature('ptgr1').selection.set([3 4 5]);
model.result('pg12').feature('ptgr1').set('expr', 'tatd.p_t');
model.result('pg12').feature('ptgr1').set('xdatasolnumtype', 'level1');
model.result('pg12').create('ptgr2', 'PointGraph');
model.result('pg12').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg12').feature('ptgr2').set('linewidth', 'preference');
model.result('pg12').feature('ptgr2').set('data', 'dset6');
model.result('pg12').feature('ptgr2').setIndex('looplevelinput', 'first', 2);
model.result('pg12').feature('ptgr2').setIndex('looplevelinput', 'manual', 1);
model.result('pg12').feature('ptgr2').setIndex('looplevel', [4], 1);
model.result('pg12').feature('ptgr2').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg12').feature('ptgr2').setIndex('looplevelindices', 'range(5,1,55)', 0);
model.result('pg12').feature('ptgr2').selection.set([3 4 5]);
model.result('pg12').feature('ptgr2').set('expr', 'tatd.p_t');
model.result('pg12').feature('ptgr2').set('xdatasolnumtype', 'level1');
model.result('pg12').feature('ptgr2').set('linestyle', 'dashed');
model.result('pg12').feature('ptgr2').set('linecolor', 'cyclereset');
model.result('pg12').run;
model.result.create('pg13', 'PlotGroup1D');
model.result('pg13').run;
model.result('pg13').label('Sh VS Sr');
model.result('pg13').set('titletype', 'label');
model.result('pg13').set('xlog', true);
model.result('pg13').set('ylog', true);
model.result('pg13').set('showlegends', false);
model.result('pg13').create('glob1', 'Global');
model.result('pg13').feature('glob1').set('markerpos', 'datapoints');
model.result('pg13').feature('glob1').set('linewidth', 'preference');
model.result('pg13').feature('glob1').setIndex('expr', 'Sh', 0);
model.result('pg13').feature('glob1').setIndex('unit', 1, 0);
model.result('pg13').feature('glob1').setIndex('descr', 'Shear number (frequency)', 0);
model.result('pg13').feature('glob1').set('xdata', 'expr');
model.result('pg13').feature('glob1').set('xdataexpr', 'Sr');
model.result('pg13').run;
model.result('pg13').run;
model.result.create('pg14', 'PlotGroup3D');
model.result('pg14').run;
model.result('pg14').label('Thumbnail');
model.result('pg14').set('looplevel', [35 6 1]);
model.result('pg14').set('edges', false);
model.result('pg14').set('showlegendsunit', true);
model.result('pg14').create('surf1', 'Surface');
model.result('pg14').feature('surf1').set('expr', 'tatd.v_inst');
model.result('pg14').feature('surf1').set('colortable', 'Prism');

model.view('view3').set('showgrid', false);

model.result('pg14').create('arws1', 'ArrowSurface');
model.result('pg14').feature('arws1').set('revcoordsys', 'cylindrical');
model.result('pg14').feature('arws1').setIndex('expr', 'tatd.u_tr', 0);
model.result('pg14').feature('arws1').setIndex('expr', 0, 1);
model.result('pg14').feature('arws1').set('expr', {'tatd.u_tr' '0' 'tatd.u_tz'});
model.result('pg14').feature('arws1').set('placement', 'elements');
model.result('pg14').feature('arws1').set('scaleactive', true);
model.result('pg14').feature('arws1').set('scale', 0.12);
model.result('pg14').feature('arws1').set('color', 'white');
model.result('pg14').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 2, 1);
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 3, 1);
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 1, 1);
model.result('pg9').run;
model.result('pg9').set('looplevel', [30 4 1]);
model.result('pg13').run;

model.title('Nonlinear Transfer Impedance of a Tapered Orifice');

model.description(['This model analyzes the nonlinear transfer impedance of a tapered orifice that can be part of a perforate or microperforated plate (MPP). The analysis is carried out for various degrees of tapering of the perforate and for a frequency range.' newline  newline 'A linear analysis is set up in the frequency domain using the Thermoviscous Acoustics, Frequency Domain interface. The nonlinear analysis is carried out in the time domain using the Thermoviscous Acoustics, Transient interface and the Nonlinear Thermoviscous Acoustics Contributions feature. The linear analysis is also carried out in the time domain for selected frequencies.' newline  newline 'The results are compared with analytical and semi-analytical models in the simple straight cylindrical perforate configuration (circular orifice).']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;
model.sol('sol20').clearSolutionData;
model.sol('sol21').clearSolutionData;
model.sol('sol22').clearSolutionData;
model.sol('sol23').clearSolutionData;
model.sol('sol24').clearSolutionData;
model.sol('sol25').clearSolutionData;
model.sol('sol26').clearSolutionData;
model.sol('sol27').clearSolutionData;
model.sol('sol28').clearSolutionData;
model.sol('sol29').clearSolutionData;
model.sol('sol30').clearSolutionData;
model.sol('sol31').clearSolutionData;
model.sol('sol32').clearSolutionData;
model.sol('sol33').clearSolutionData;
model.sol('sol34').clearSolutionData;
model.sol('sol35').clearSolutionData;
model.sol('sol36').clearSolutionData;
model.sol('sol37').clearSolutionData;
model.sol('sol38').clearSolutionData;
model.sol('sol39').clearSolutionData;
model.sol('sol40').clearSolutionData;
model.sol('sol41').clearSolutionData;
model.sol('sol42').clearSolutionData;
model.sol('sol43').clearSolutionData;
model.sol('sol44').clearSolutionData;
model.sol('sol45').clearSolutionData;
model.sol('sol46').clearSolutionData;
model.sol('sol47').clearSolutionData;
model.sol('sol48').clearSolutionData;

model.label('nonlinear_transfer_impedance.mph');

model.modelNode.label('Components');

out = model;
