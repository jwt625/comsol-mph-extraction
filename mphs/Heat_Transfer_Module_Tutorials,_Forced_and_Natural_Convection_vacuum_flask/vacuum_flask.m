function out = model
%
% vacuum_flask.m
%
% Model exported on May 26 2025, 21:29 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Tutorials,_Forced_and_Natural_Convection');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/ht', true);

model.geom('geom1').insertFile('vacuum_flask_geom_sequence.mph', 'geom1');
model.geom('geom1').run('ige1');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Shell');
model.selection('sel1').geom(1);
model.selection('sel1').set([9 10 11 12 14 17 18 19 20 21 22]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Flask, Vertical Walls');
model.selection('sel2').geom(1);
model.selection('sel2').set([15 16 17 22]);

model.param.set('T_amb', '25[degC]');
model.param.descr('T_amb', 'Temperature of surrounding air');
model.param.set('T_coffee', '90[degC]');
model.param.descr('T_coffee', 'Coffee temperature');
model.param.set('d_shell', '0.5[mm]');
model.param.descr('d_shell', 'Steel-shell thickness');
model.param.set('p_amb', '1[atm]');
model.param.descr('p_amb', 'Ambient pressure');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat2').label('Water, liquid');
model.material('mat2').set('family', 'water');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat2').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat2').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat2').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat2').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat2').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').label('Nylon');
model.material('mat3').set('family', 'custom');
model.material('mat3').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat3').set('customdiffuse', [0.39215686274509803 0.39215686274509803 0.9803921568627451]);
model.material('mat3').set('customambient', [0.39215686274509803 0.39215686274509803 0.7843137254901961]);
model.material('mat3').set('noise', true);
model.material('mat3').set('lighting', 'phong');
model.material('mat3').set('shininess', 500);
model.material('mat3').propertyGroup('def').set('heatcapacity', '1700[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'4' '0' '0' '0' '4' '0' '0' '0' '4'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'280e-6[1/K]' '0' '0' '0' '280e-6[1/K]' '0' '0' '0' '280e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('density', '1150[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'0.26[W/(m*K)]' '0' '0' '0' '0.26[W/(m*K)]' '0' '0' '0' '0.26[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '2[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.4');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat4').label('Steel AISI 4340');
model.material('mat4').set('family', 'steel');
model.material('mat4').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat4').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat4').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat4').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat4').propertyGroup('Enu').set('nu', '0.28');
model.material('mat2').selection.set([2]);
model.material('mat3').selection.set([4 5]);
model.material('mat4').selection.geom('geom1', 1);
model.material('mat4').selection.named('sel1');
model.material('mat4').propertyGroup.create('shell', 'Shell');
model.material('mat4').propertyGroup('shell').set('lth', {'d_shell'});
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').label('Foam');
model.material('mat5').selection.set([1]);
model.material('mat5').propertyGroup('def').set('thermalconductivity', {'0.03'});
model.material('mat5').propertyGroup('def').set('density', {'60'});
model.material('mat5').propertyGroup('def').set('heatcapacity', {'200'});

model.common.create('ampr1', 'AmbientProperties', 'comp1');
model.common('ampr1').set('T_amb', 'T_amb');

model.physics('ht').create('fluid1', 'FluidHeatTransferModel', 2);
model.physics('ht').feature('fluid1').selection.set([3]);
model.physics('ht').feature('init1').set('Tinit_src', 'root.comp1.ampr1.T_amb');
model.physics('ht').create('id1', 'IsothermalDomain', 2);
model.physics('ht').feature('id1').selection.set([2]);
model.physics('ht').feature('idi1').set('InterfaceType', 'ConvectiveHeatFlux');
model.physics('ht').feature('idi1').set('h', 100);
model.physics('ht').create('init2', 'init', 2);
model.physics('ht').feature('init2').selection.set([2]);
model.physics('ht').feature('init2').set('Tinit', 'T_coffee');
model.physics('ht').create('sls1', 'SolidLayeredShell', 1);
model.physics('ht').feature('sls1').selection.named('sel1');
model.physics('ht').feature('sls1').set('LayerType', 'Conductive');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf1').selection.named('sel2');
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('HeatTransferCoefficientType', 'ExtNaturalConvection');
model.physics('ht').feature('hf1').set('Lwall', 'height');
model.physics('ht').feature('hf1').set('Text_src', 'root.comp1.ampr1.T_amb');
model.physics('ht').create('hf2', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf2').selection.set([8]);
model.physics('ht').feature('hf2').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf2').set('HeatTransferCoefficientType', 'ExtNaturalConvection');
model.physics('ht').feature('hf2').set('ExtNaturalConvectionType', 'HorizontalPlateUp');
model.physics('ht').feature('hf2').set('Ldia', 'radius');
model.physics('ht').feature('hf2').set('Text_src', 'root.comp1.ampr1.T_amb');

model.mesh('mesh1').autoMeshSize(2);
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tunit', 'h');
model.study('std1').feature('time').set('tlist', 'range(0,0.1,10)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.1,10)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_ht_TextFaceIso' 'global' 'comp1_T' 'global' 'comp1_ht_id1_T' 'global'});
model.sol('sol1').feature('t1').set('atol', {'comp1_ht_TextFaceIso' '1e-3' 'comp1_T' '1e-3' 'comp1_ht_id1_T' '1e-3'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_ht_TextFaceIso' 'factor' 'comp1_T' 'factor' 'comp1_ht_id1_T' 'factor'});
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset.create('lshl1', 'LayeredMaterial');
model.result.dataset('lshl1').set('data', 'dset1');
model.result.dataset('lshl1').selection.geom('geom1', 1);
model.result.dataset('lshl1').selection.set([9 10 11 12 14 17 18 19 20 21 22]);
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Temperature (ht)');
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 101, 0);
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pg1');
model.result('pg1').selection.geom('geom1', 2);
model.result('pg1').selection.set([1 2 3 4 5]);
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Domain');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature.create('surf2', 'Surface');
model.result('pg1').feature('surf2').label('Layered Shell');
model.result('pg1').feature('surf2').set('data', 'lshl1');
model.result('pg1').feature('surf2').setIndex('looplevel', 101, 0);
model.result('pg1').feature('surf2').set('solutionparams', 'parent');
model.result('pg1').feature('surf2').set('titletype', 'none');
model.result('pg1').feature('surf2').set('smooth', 'internal');
model.result('pg1').feature('surf2').set('data', 'lshl1');
model.result('pg1').feature('surf2').set('inheritplot', 'surf1');
model.result('pg1').feature.create('line1', 'Line');
model.result('pg1').feature('line1').label('Layered Shell Edges');
model.result('pg1').feature('line1').set('data', 'lshl1');
model.result('pg1').feature('line1').setIndex('looplevel', 101, 0);
model.result('pg1').feature('line1').set('solutionparams', 'parent');
model.result('pg1').feature('line1').set('expr', '1');
model.result('pg1').feature('line1').set('titletype', 'none');
model.result('pg1').feature('line1').set('coloring', 'uniform');
model.result('pg1').feature('line1').set('color', 'fromtheme');
model.result('pg1').feature('line1').set('smooth', 'internal');
model.result('pg1').feature('line1').set('data', 'lshl1');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').set('unit', 'degC');
model.result('pg1').run;
model.result('pg1').feature('surf2').set('unit', 'degC');
model.result('pg1').run;
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset1');
model.result.dataset('rev1').set('defaultPlotIDs', {'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg2|ht' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg3|ht' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg4|ht'});
model.result.dataset.create('rev2', 'Revolve2D');
model.result.dataset('rev2').set('startangle', -90);
model.result.dataset('rev2').set('revangle', 225);
model.result.dataset('rev2').set('data', 'lshl1');
model.result.dataset('rev2').selection.geom('geom1', 2);
model.result.dataset('rev2').selection.set([1 2 3 4 5]);
model.result.dataset('rev2').set('defaultPlotIDs', {'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg2|ht|vol2' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg2|ht|line1' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg3|ht|mslc2' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg3|ht|line1' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg4|ht|iso2' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg4|ht|line1'});
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Temperature (ht) 1');
model.result('pg2').set('data', 'rev1');
model.result('pg2').setIndex('looplevel', 101, 0);
model.result('pg2').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg2');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').label('Domain');
model.result('pg2').feature('vol1').set('solutionparams', 'parent');
model.result('pg2').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg2').feature('vol1').set('smooth', 'internal');
model.result('pg2').feature('vol1').set('showsolutionparams', 'on');
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg2').feature.create('vol2', 'Volume');
model.result('pg2').feature('vol2').label('Layered Shell');
model.result('pg2').feature('vol2').set('solutionparams', 'parent');
model.result('pg2').feature('vol2').set('titletype', 'none');
model.result('pg2').feature('vol2').set('smooth', 'internal');
model.result('pg2').feature('vol2').set('data', 'rev2');
model.result('pg2').feature('vol2').set('inheritplot', 'vol1');
model.result('pg2').feature.create('line1', 'Line');
model.result('pg2').feature('line1').label('Layered Shell Edges');
model.result('pg2').feature('line1').set('solutionparams', 'parent');
model.result('pg2').feature('line1').set('expr', '1');
model.result('pg2').feature('line1').set('titletype', 'none');
model.result('pg2').feature('line1').set('coloring', 'uniform');
model.result('pg2').feature('line1').set('color', 'fromtheme');
model.result('pg2').feature('line1').set('smooth', 'internal');
model.result('pg2').feature('line1').set('data', 'rev2');
model.result('pg2').label('Temperature (ht) 1');
model.result('pg2').run;
model.result('pg2').label('Temperature 3D (ht)');
model.result('pg2').run;
model.result('pg2').feature('vol1').set('unit', 'degC');
model.result('pg2').run;
model.result('pg2').feature('vol2').set('unit', 'degC');
model.result('pg2').run;

model.modelNode.create('comp2', true);

model.geom.create('geom2', 2);
model.geom('geom2').model('comp2');
model.geom('geom2').axisymmetric(true);

model.mesh.create('mesh2', 'geom2');

model.physics.create('ht2', 'HeatTransferInSolidsAndFluids', 'geom2');
model.physics('ht2').model('comp2');

model.study('std1').feature('time').setSolveFor('/physics/ht2', false);

model.physics('ht2').prop('ShapeProperty').set('order_temperature', '1');
model.physics.create('spf', 'LaminarFlow', 'geom2');
model.physics('spf').model('comp2');

model.study('std1').feature('time').setSolveFor('/physics/spf', false);

model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'WeaklyCompressible');

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom2', 2);

model.study('std1').feature('time').setSolveFor('/multiphysics/nitf1', false);

model.multiphysics('nitf1').set('Fluid_physics', 'spf');
model.multiphysics('nitf1').set('Heat_physics', 'ht2');

model.geom('geom2').run;

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/ht', false);
model.study('std2').feature('time').setSolveFor('/physics/ht2', true);
model.study('std2').feature('time').setSolveFor('/physics/spf', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/nitf1', true);

model.geom('geom2').create('imp1', 'Import');
model.geom('geom2').feature('imp1').set('type', 'sequence');
model.geom('geom2').feature('imp1').set('sequence', 'geom1');
model.geom('geom2').feature('imp1').importData;
model.geom('geom2').create('r1', 'Rectangle');
model.geom('geom2').feature('r1').set('size', {'0.1[m]' '0.5[m]'});
model.geom('geom2').runPre('fin');

model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp2');

model.geom('geom2').run;

model.selection('sel3').label('Shell');
model.selection('sel3').geom(1);
model.selection('sel3').set([11 12 13 14 16 19 22 23 24 25 26]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp2');
model.selection('sel4').label('Flask, Vertical Walls');
model.selection('sel4').geom(1);
model.selection('sel4').set([17 18 19 26]);

model.material.create('mat6', 'Common', 'comp2');
model.material('mat6').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat6').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat6').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat6').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat6').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat6').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat6').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat6').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat6').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat6').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat6').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat6').label('Air');
model.material('mat6').set('family', 'air');
model.material('mat6').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat6').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat6').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat6').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat6').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat6').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat6').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat6').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat6').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat6').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat6').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat6').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat6').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat6').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat6').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat6').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat6').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat6').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat6').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat6').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat6').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat6').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat6').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat6').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat6').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat6').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat6').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat6').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat6').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat6').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat6').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat6').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat6').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat6').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat6').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat6').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat6').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat6').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat6').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat6').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat6').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat6').propertyGroup('def').set('molarmass', '');
model.material('mat6').propertyGroup('def').set('bulkviscosity', '');
model.material('mat6').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat6').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat6').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat6').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat6').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat6').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat6').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat6').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat6').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat6').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat6').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat6').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat6').propertyGroup('def').addInput('temperature');
model.material('mat6').propertyGroup('def').addInput('pressure');
model.material('mat6').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat6').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat6').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat6').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat6').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat6').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat6').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat6').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat6').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat6').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat6').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat6').propertyGroup('idealGas').addInput('temperature');
model.material('mat6').propertyGroup('idealGas').addInput('pressure');
model.material('mat6').materialType('nonSolid');
model.material.create('mat7', 'Common', 'comp2');
model.material('mat7').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat7').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat7').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat7').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat7').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat7').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat7').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat7').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat7').label('Water, liquid');
model.material('mat7').set('family', 'water');
model.material('mat7').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat7').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat7').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat7').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat7').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat7').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat7').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat7').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat7').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat7').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat7').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat7').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat7').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat7').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat7').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat7').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat7').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat7').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat7').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat7').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat7').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat7').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat7').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat7').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat7').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat7').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat7').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat7').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat7').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat7').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat7').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat7').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat7').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat7').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat7').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat7').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat7').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat7').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat7').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat7').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat7').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat7').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat7').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat7').propertyGroup('def').set('bulkviscosity', '');
model.material('mat7').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat7').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat7').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat7').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat7').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat7').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat7').propertyGroup('def').set('density', 'rho(T)');
model.material('mat7').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat7').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat7').propertyGroup('def').addInput('temperature');
model.material.create('mat8', 'Common', 'comp2');
model.material('mat8').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat8').label('Nylon');
model.material('mat8').set('family', 'custom');
model.material('mat8').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat8').set('customdiffuse', [0.39215686274509803 0.39215686274509803 0.9803921568627451]);
model.material('mat8').set('customambient', [0.39215686274509803 0.39215686274509803 0.7843137254901961]);
model.material('mat8').set('noise', true);
model.material('mat8').set('lighting', 'phong');
model.material('mat8').set('shininess', 500);
model.material('mat8').propertyGroup('def').set('heatcapacity', '1700[J/(kg*K)]');
model.material('mat8').propertyGroup('def').set('relpermittivity', {'4' '0' '0' '0' '4' '0' '0' '0' '4'});
model.material('mat8').propertyGroup('def').set('thermalexpansioncoefficient', {'280e-6[1/K]' '0' '0' '0' '280e-6[1/K]' '0' '0' '0' '280e-6[1/K]'});
model.material('mat8').propertyGroup('def').set('density', '1150[kg/m^3]');
model.material('mat8').propertyGroup('def').set('thermalconductivity', {'0.26[W/(m*K)]' '0' '0' '0' '0.26[W/(m*K)]' '0' '0' '0' '0.26[W/(m*K)]'});
model.material('mat8').propertyGroup('Enu').set('E', '2[GPa]');
model.material('mat8').propertyGroup('Enu').set('nu', '0.4');
model.material.create('mat9', 'Common', 'comp2');
model.material('mat9').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat9').label('Steel AISI 4340');
model.material('mat9').set('family', 'steel');
model.material('mat9').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat9').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat9').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat9').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat9').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat9').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat9').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat9').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat9').propertyGroup('Enu').set('nu', '0.28');
model.material('mat7').selection.set([2]);
model.material('mat8').selection.set([4 6]);
model.material('mat9').selection.geom('geom2', 1);
model.material('mat9').selection.named('sel3');
model.material('mat9').propertyGroup.create('shell', 'Shell');
model.material('mat9').propertyGroup('shell').set('lth', {'d_shell'});
model.material.create('mat10', 'Common', 'comp2');
model.material('mat10').label('Foam');
model.material('mat10').selection.set([1]);
model.material('mat10').propertyGroup('def').set('thermalconductivity', {'0.03'});
model.material('mat10').propertyGroup('def').set('density', {'60'});
model.material('mat10').propertyGroup('def').set('heatcapacity', {'200'});

model.physics('spf').selection.set([5]);
model.physics('spf').prop('PhysicalModelProperty').set('IncludeGravity', true);

model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp2');
model.selection('sel5').geom(2);
model.selection('sel5').label('Air');
model.selection('sel5').set([5]);

model.physics('spf').selection.named('sel5');

model.common.create('ampr2', 'AmbientProperties', 'comp2');
model.common('ampr2').set('T_amb', 'T_amb');

model.physics('ht2').prop('PhysicalModelProperty').set('Tref', 'T_amb');
model.physics('ht2').feature('fluid1').selection.named('sel5');
model.physics('ht2').feature('init1').set('Tinit_src', 'root.comp2.ampr2.T_amb');
model.physics('spf').create('open1', 'OpenBoundary', 1);
model.physics('spf').feature('open1').selection.set([10 21]);
model.physics('ht2').create('fluid2', 'FluidHeatTransferModel', 2);
model.physics('ht2').feature('fluid2').selection.set([3]);
model.physics('ht2').create('id1', 'IsothermalDomain', 2);
model.physics('ht2').feature('id1').selection.set([2]);
model.physics('ht2').feature('idi1').set('InterfaceType', 'ConvectiveHeatFlux');
model.physics('ht2').feature('idi1').set('h', 100);
model.physics('ht2').create('init2', 'init', 2);
model.physics('ht2').feature('init2').selection.set([2]);
model.physics('ht2').feature('init2').set('Tinit', 'T_coffee');
model.physics('ht2').create('sls1', 'SolidLayeredShell', 1);
model.physics('ht2').feature('sls1').selection.named('sel3');
model.physics('ht2').feature('sls1').set('LayerType', 'Conductive');
model.physics('ht2').create('open1', 'OpenBoundary', 1);
model.physics('ht2').feature('open1').selection.set([10 21]);
model.physics('ht2').feature('open1').set('Tustr', 'T_amb');

model.mesh('mesh2').autoMeshSize(3);
model.mesh('mesh2').run;

model.study('std2').feature('time').set('tunit', 'h');
model.study('std2').feature('time').set('tlist', 'range(0,0.1,10)[s] range(0.1,0.1,10)');

model.sol.create('sol2');

model.mesh('mesh2').stat.selection.geom(2);
model.mesh('mesh2').stat.selection.set([5]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,0.1,10)[s] range(0.1,0.1,10)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 0.005);
model.sol('sol2').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol2').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('atolmethod', {'comp1_ht_TextFaceIso' 'global' 'comp1_T' 'global' 'comp2_ht2_TextFaceIso' 'global' 'comp2_nitf1_Uave' 'global' 'comp2_p' 'scaled'  ...
'comp2_T2' 'global' 'comp2_u' 'global' 'comp1_ht_id1_T' 'global' 'comp2_ht2_id1_T' 'global'});
model.sol('sol2').feature('t1').set('atol', {'comp1_ht_TextFaceIso' '1e-3' 'comp1_T' '1e-3' 'comp2_ht2_TextFaceIso' '1e-3' 'comp2_nitf1_Uave' '1e-3' 'comp2_p' '1e-3'  ...
'comp2_T2' '1e-3' 'comp2_u' '1e-3' 'comp1_ht_id1_T' '1e-3' 'comp2_ht2_id1_T' '1e-3'});
model.sol('sol2').feature('t1').set('atolvaluemethod', {'comp1_ht_TextFaceIso' 'factor' 'comp1_T' 'factor' 'comp2_ht2_TextFaceIso' 'factor' 'comp2_nitf1_Uave' 'factor' 'comp2_p' 'factor'  ...
'comp2_T2' 'factor' 'comp2_u' 'factor' 'comp1_ht_id1_T' 'factor' 'comp2_ht2_id1_T' 'factor'});
model.sol('sol2').feature('t1').set('atolfactor', {'comp1_ht_TextFaceIso' '0.1' 'comp1_T' '0.1' 'comp2_ht2_TextFaceIso' '0.1' 'comp2_nitf1_Uave' '0.1' 'comp2_p' '1'  ...
'comp2_T2' '0.1' 'comp2_u' '0.1' 'comp1_ht_id1_T' '0.1' 'comp2_ht2_id1_T' '0.1'});
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('estrat', 'exclude');
model.sol('sol2').feature('t1').set('rhoinf', 0.5);
model.sol('sol2').feature('t1').set('predictor', 'constant');
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('stabcntrl', true);
model.sol('sol2').feature('t1').set('bwinitstepfrac', '0.01');
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('t1').create('seDef', 'Segregated');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 0.5);
model.sol('sol2').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol2').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol2').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol2').feature('t1').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('d1').label('Direct, nonisothermal flow (nitf1) (Merged)');
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol2').feature('t1').feature('i1').set('maxlinit', 100);
model.sol('sol2').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('t1').feature('i1').label('AMG, nonisothermal flow (nitf1)');
model.sol('sol2').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 0.5);
model.sol('sol2').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol2').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol2').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').feature('t1').feature.remove('seDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol2').runAll;

model.result.dataset.create('lshl2', 'LayeredMaterial');
model.result.dataset('lshl2').set('data', 'dset3');
model.result.dataset('lshl2').selection.geom('geom2', 1);
model.result.dataset('lshl2').selection.set([11 12 13 14 16 19 22 23 24 25 26]);
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Temperature (ht2)');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 201, 0);
model.result('pg3').set('dataisaxisym', 'off');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 201, 0);
model.result('pg3').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pg1');
model.result('pg3').selection.geom('geom2', 2);
model.result('pg3').selection.set([1 2 3 4 5 6]);
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Domain');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg3').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature.create('surf2', 'Surface');
model.result('pg3').feature('surf2').label('Layered Shell');
model.result('pg3').feature('surf2').set('data', 'lshl2');
model.result('pg3').feature('surf2').setIndex('looplevel', 201, 0);
model.result('pg3').feature('surf2').set('solutionparams', 'parent');
model.result('pg3').feature('surf2').set('titletype', 'none');
model.result('pg3').feature('surf2').set('smooth', 'internal');
model.result('pg3').feature('surf2').set('data', 'lshl2');
model.result('pg3').feature('surf2').set('inheritplot', 'surf1');
model.result('pg3').feature.create('line1', 'Line');
model.result('pg3').feature('line1').label('Layered Shell Edges');
model.result('pg3').feature('line1').set('data', 'lshl2');
model.result('pg3').feature('line1').setIndex('looplevel', 201, 0);
model.result('pg3').feature('line1').set('solutionparams', 'parent');
model.result('pg3').feature('line1').set('expr', '1');
model.result('pg3').feature('line1').set('titletype', 'none');
model.result('pg3').feature('line1').set('coloring', 'uniform');
model.result('pg3').feature('line1').set('color', 'fromtheme');
model.result('pg3').feature('line1').set('smooth', 'internal');
model.result('pg3').feature('line1').set('data', 'lshl2');
model.result.dataset('dset3').set('geom', 'geom2');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Velocity (spf)');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 201, 0);
model.result('pg4').set('dataisaxisym', 'off');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 201, 0);
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Surface');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('expr', 'spf.U');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Pressure (spf)');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 201, 0);
model.result('pg5').set('dataisaxisym', 'off');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 201, 0);
model.result('pg5').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg5').feature.create('con1', 'Contour');
model.result('pg5').feature('con1').label('Contour');
model.result('pg5').feature('con1').set('showsolutionparams', 'on');
model.result('pg5').feature('con1').set('expr', 'p');
model.result('pg5').feature('con1').set('number', 40);
model.result('pg5').feature('con1').set('levelrounding', false);
model.result('pg5').feature('con1').set('smooth', 'internal');
model.result('pg5').feature('con1').set('showsolutionparams', 'on');
model.result('pg5').feature('con1').set('data', 'parent');
model.result.dataset.create('rev3', 'Revolve2D');
model.result.dataset('rev3').label('Revolution 2D');
model.result.dataset('rev3').set('data', 'none');
model.result.dataset('rev3').set('startangle', -90);
model.result.dataset('rev3').set('revangle', 225);
model.result.dataset('rev3').set('data', 'dset3');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Velocity, 3D (spf)');
model.result('pg6').set('data', 'rev3');
model.result('pg6').setIndex('looplevel', 201, 0);
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('data', 'rev3');
model.result('pg6').setIndex('looplevel', 201, 0);
model.result('pg6').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond1/pg1');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').label('Surface');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('expr', 'spf.U');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').label('Temperature and Fluid Flow (nitf1)');
model.result('pg7').set('data', 'dset3');
model.result('pg7').setIndex('looplevel', 201, 0);
model.result('pg7').set('dataisaxisym', 'off');
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').set('data', 'dset3');
model.result('pg7').setIndex('looplevel', 201, 0);
model.result('pg7').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond4/pcond4/pcond1/pg2');
model.result('pg7').feature.create('surf1', 'Surface');
model.result('pg7').feature('surf1').label('Fluid Temperature');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('solutionparams', 'parent');
model.result('pg7').feature('surf1').set('expr', 'nitf1.T');
model.result('pg7').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg7').feature('surf1').set('smooth', 'internal');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('data', 'parent');
model.result('pg7').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg7').feature('surf1').feature('sel1').selection.geom('geom2', 2);
model.result('pg7').feature('surf1').feature('sel1').selection.set([5]);
model.result('pg7').feature.create('surf2', 'Surface');
model.result('pg7').feature('surf2').label('Solid Temperature');
model.result('pg7').feature('surf2').set('showsolutionparams', 'on');
model.result('pg7').feature('surf2').set('solutionparams', 'parent');
model.result('pg7').feature('surf2').set('expr', 'nitf1.T');
model.result('pg7').feature('surf2').set('smooth', 'internal');
model.result('pg7').feature('surf2').set('showsolutionparams', 'on');
model.result('pg7').feature('surf2').set('data', 'parent');
model.result('pg7').feature('surf2').feature.create('sel1', 'Selection');
model.result('pg7').feature('surf2').feature('sel1').selection.geom('geom2', 2);
model.result('pg7').feature('surf2').feature('sel1').selection.set([1 4 6]);
model.result('pg7').feature('surf2').set('inheritplot', 'surf1');
model.result('pg7').feature.create('arws1', 'ArrowSurface');
model.result('pg7').feature('arws1').label('Fluid Flow');
model.result('pg7').feature('arws1').set('showsolutionparams', 'on');
model.result('pg7').feature('arws1').set('solutionparams', 'parent');
model.result('pg7').feature('arws1').set('expr', {'nitf1.ur' 'nitf1.uz'});
model.result('pg7').feature('arws1').set('xnumber', 30);
model.result('pg7').feature('arws1').set('ynumber', 30);
model.result('pg7').feature('arws1').set('arrowtype', 'cone');
model.result('pg7').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg7').feature('arws1').set('showsolutionparams', 'on');
model.result('pg7').feature('arws1').set('data', 'parent');
model.result('pg7').feature('arws1').feature.create('col1', 'Color');
model.result('pg7').feature('arws1').feature('col1').set('showcolordata', 'off');
model.result('pg7').feature('arws1').feature('col1').set('expr', 'spf.U');
model.result('pg7').feature('arws1').feature.create('filt1', 'Filter');
model.result('pg7').feature('arws1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result('pg3').run;
model.result('pg1').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').add('plotgroup', 'pg1');
model.nodeGroup('grp1').add('plotgroup', 'pg2');
model.nodeGroup('grp1').label('Study 1');

model.result('pg3').run;

model.nodeGroup.create('grp2', 'Results');
model.nodeGroup('grp2').set('type', 'plotgroup');
model.nodeGroup.move('grp2', 1);
model.nodeGroup('grp2').add('plotgroup', 'pg3');
model.nodeGroup('grp2').add('plotgroup', 'pg4');
model.nodeGroup('grp2').add('plotgroup', 'pg5');
model.nodeGroup('grp2').add('plotgroup', 'pg6');
model.nodeGroup('grp2').add('plotgroup', 'pg7');
model.nodeGroup('grp2').label('Study 2');

model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('surf1').set('unit', 'degC');
model.result('pg3').run;
model.result('pg3').feature('surf2').set('unit', 'degC');
model.result.dataset.create('rev4', 'Revolve2D');
model.result.dataset('rev4').set('startangle', -90);
model.result.dataset('rev4').set('revangle', 225);
model.result.dataset('rev4').set('data', 'dset3');
model.result.dataset('rev4').set('defaultPlotIDs', {'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg2|ht2' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg3|ht2' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg4|ht2'});
model.result.dataset.create('rev5', 'Revolve2D');
model.result.dataset('rev5').set('startangle', -90);
model.result.dataset('rev5').set('revangle', 225);
model.result.dataset('rev5').set('data', 'lshl2');
model.result.dataset('rev5').selection.geom('geom2', 2);
model.result.dataset('rev5').selection.set([1 2 3 4 5 6]);
model.result.dataset('rev5').set('defaultPlotIDs', {'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg2|ht2|vol2' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg2|ht2|line1' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg3|ht2|mslc2' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg3|ht2|line1' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg4|ht2|iso2' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg4|ht2|line1'});
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').label('Temperature (ht2) 1');
model.result('pg8').set('data', 'rev4');
model.result('pg8').setIndex('looplevel', 201, 0);
model.result('pg8').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond1/pcond2/pg2');
model.result('pg8').feature.create('vol1', 'Volume');
model.result('pg8').feature('vol1').label('Domain');
model.result('pg8').feature('vol1').set('solutionparams', 'parent');
model.result('pg8').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg8').feature('vol1').set('smooth', 'internal');
model.result('pg8').feature('vol1').set('showsolutionparams', 'on');
model.result('pg8').feature('vol1').set('data', 'parent');
model.result('pg8').feature.create('vol2', 'Volume');
model.result('pg8').feature('vol2').label('Layered Shell');
model.result('pg8').feature('vol2').set('solutionparams', 'parent');
model.result('pg8').feature('vol2').set('titletype', 'none');
model.result('pg8').feature('vol2').set('smooth', 'internal');
model.result('pg8').feature('vol2').set('data', 'rev5');
model.result('pg8').feature('vol2').set('inheritplot', 'vol1');
model.result('pg8').feature.create('line1', 'Line');
model.result('pg8').feature('line1').label('Layered Shell Edges');
model.result('pg8').feature('line1').set('solutionparams', 'parent');
model.result('pg8').feature('line1').set('expr', '1');
model.result('pg8').feature('line1').set('titletype', 'none');
model.result('pg8').feature('line1').set('coloring', 'uniform');
model.result('pg8').feature('line1').set('color', 'fromtheme');
model.result('pg8').feature('line1').set('smooth', 'internal');
model.result('pg8').feature('line1').set('data', 'rev5');
model.result('pg8').label('Temperature (ht2) 1');

model.nodeGroup('grp2').add('plotgroup', 'pg8');

model.result('pg8').run;
model.result('pg8').label('Temperature 3D (ht2)');
model.result('pg8').run;
model.result('pg8').feature('vol1').set('unit', 'degC');
model.result('pg8').run;
model.result('pg8').feature('vol2').set('unit', 'degC');
model.result('pg6').run;
model.result.create('pg9', 'PlotGroup2D');

model.nodeGroup('grp2').add('plotgroup', 'pg9');

model.result('pg9').run;
model.result('pg9').label('Velocity, Streamlines');
model.result('pg9').set('data', 'dset3');
model.result('pg9').setIndex('looplevel', 201, 0);
model.result('pg9').set('showlegendsunit', true);
model.result('pg9').create('str1', 'Streamline');
model.result('pg9').feature('str1').set('expr', {'u' 'w'});
model.result('pg9').feature('str1').set('descr', 'Velocity field');
model.result('pg9').feature('str1').set('posmethod', 'magnitude');
model.result('pg9').feature('str1').set('pointtype', 'arrow');
model.result('pg9').feature('str1').create('col1', 'Color');
model.result('pg9').run;
model.result('pg9').feature('str1').feature('col1').set('expr', 'spf.U');
model.result('pg9').feature('str1').feature('col1').set('descr', 'Velocity magnitude');
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('Coffee Temperature vs. Time');
model.result('pg10').set('titletype', 'manual');
model.result('pg10').set('title', 'Coffee temperature evolution');
model.result('pg10').set('ylabelactive', true);
model.result('pg10').set('ylabel', 'Temperature (degC)');
model.result('pg10').create('glob1', 'Global');
model.result('pg10').feature('glob1').set('markerpos', 'datapoints');
model.result('pg10').feature('glob1').set('linewidth', 'preference');
model.result('pg10').feature('glob1').set('expr', {'ht.id1.T'});
model.result('pg10').feature('glob1').set('descr', {'Isothermal domain temperature'});
model.result('pg10').feature('glob1').set('unit', {'K'});
model.result('pg10').feature('glob1').setIndex('unit', 'degC', 0);
model.result('pg10').feature('glob1').setIndex('descr', 'Isothermal domain temperature - flow not computed', 0);
model.result('pg10').feature('glob1').set('linemarker', 'cycle');
model.result('pg10').feature('glob1').set('legendmethod', 'manual');
model.result('pg10').feature('glob1').setIndex('legends', 'Flow not computed', 0);
model.result('pg10').run;
model.result('pg10').create('glob2', 'Global');
model.result('pg10').feature('glob2').set('markerpos', 'datapoints');
model.result('pg10').feature('glob2').set('linewidth', 'preference');
model.result('pg10').feature('glob2').set('data', 'dset3');
model.result('pg10').feature('glob2').set('expr', {'ht2.id1.T'});
model.result('pg10').feature('glob2').set('descr', {'Isothermal domain temperature'});
model.result('pg10').feature('glob2').set('unit', {'K'});
model.result('pg10').feature('glob2').setIndex('unit', 'degC', 0);
model.result('pg10').feature('glob2').setIndex('descr', 'Isothermal domain temperature - flow computed', 0);
model.result('pg10').feature('glob2').set('linestyle', 'none');
model.result('pg10').feature('glob2').set('linemarker', 'cycle');
model.result('pg10').feature('glob2').set('legendmethod', 'manual');
model.result('pg10').feature('glob2').setIndex('legends', 'Flow computed', 0);
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Heat Transfer Coefficient');
model.result('pg11').setIndex('looplevelinput', 'last', 0);
model.result('pg11').set('titletype', 'manual');
model.result('pg11').set('title', 'Heat transfer coefficient comparison');
model.result('pg11').set('ylabelactive', true);
model.result('pg11').set('ylabel', 'Heat transfer coefficient (W/(m^2*K))');
model.result('pg11').set('legendpos', 'upperleft');
model.result('pg11').create('lngr1', 'LineGraph');
model.result('pg11').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg11').feature('lngr1').set('linewidth', 'preference');
model.result('pg11').feature('lngr1').selection.named('sel2');
model.result('pg11').feature('lngr1').set('expr', 'ht.hf1.h');
model.result('pg11').feature('lngr1').set('xdata', 'expr');
model.result('pg11').feature('lngr1').set('xdataexpr', 'z');
model.result('pg11').feature('lngr1').set('legend', true);
model.result('pg11').feature('lngr1').set('legendmethod', 'manual');
model.result('pg11').feature('lngr1').setIndex('legends', 'Estimated, flow not computed', 0);
model.result('pg11').run;
model.result('pg11').create('lngr2', 'LineGraph');
model.result('pg11').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg11').feature('lngr2').set('linewidth', 'preference');
model.result('pg11').feature('lngr2').set('data', 'dset3');
model.result('pg11').feature('lngr2').setIndex('looplevelinput', 'last', 0);
model.result('pg11').feature('lngr2').selection.named('sel4');
model.result('pg11').feature('lngr2').set('expr', 'abs(ht2.ntflux)/(T2-T_amb)');
model.result('pg11').feature('lngr2').set('xdata', 'expr');
model.result('pg11').feature('lngr2').set('xdataexpr', 'z');
model.result('pg11').feature('lngr2').set('legend', true);
model.result('pg11').feature('lngr2').set('legendmethod', 'manual');
model.result('pg11').feature('lngr2').setIndex('legends', 'Calculated, flow computed', 0);
model.result('pg11').run;
model.result('pg11').run;

model.title('Natural Convection Cooling of a Vacuum Flask');

model.description('This example calculates how much heat a vacuum flask holding hot fluid dissipates per unit time. This example treats the natural convection cooling using two approaches. First approach is to use heat transfer coefficients to describe the thermal dissipation. Second approach is to model the convective flow of air outside the flask.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('vacuum_flask.mph');

model.modelNode.label('Components');

out = model;
