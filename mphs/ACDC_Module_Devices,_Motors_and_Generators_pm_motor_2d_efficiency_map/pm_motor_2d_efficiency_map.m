function out = model
%
% pm_motor_2d_efficiency_map.m
%
% Model exported on May 26 2025, 21:24 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Devices,_Motors_and_Generators');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.geom('geom1').lengthUnit('mm');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('Np', '10', 'Number of poles');
model.param.set('Ns', '12', 'Number of slots');
model.param.set('L', '50[mm]', 'Out-of-plane thickness of motor');
model.param.set('init_ang', '198[deg]', 'Initial current angle');
model.param.set('w_rot', '12000[rpm]', 'Shaft speed');
model.param.set('f_el', 'w_rot*(Np/2)', 'Electrical frequency');
model.param.set('Ipk', '30[A]', 'Phase current peak value');
model.param.set('Nturn', '10', 'Number of turns per coil');
model.param.set('ff_slot', '0.8', 'Slot filling factor');
model.param.set('lam_rho', '7500[kg/m^3]', 'Laminated core density');
model.param.set('Nframes', '10', 'Number of time frames');
model.param.set('Cu_rho0', '1.667e-8[ohm*m]', 'Copper reference resistivity');
model.param.set('Cu_alpha', '3.862e-3[1/K]', 'Copper resistivity temperature coefficient');
model.param.set('Cu_Tref', '293.15[K]', 'Copper reference temperature');
model.param.set('Nsec', 'gcd(Np,Ns)', 'Number of modeled sectors (1 = full circle)');
model.param.set('PM_Br_ref', '1.31[T]', 'Magnet reference remanence flux density');
model.param.set('PM_alpha', '-0.12[%/K]', 'Magnet remanence temperature coefficient');
model.param.set('PM_Tref', '20[degC]', 'Magnet reference temperature');

model.geom.load({'part1'}, 'ACDC_Module\Rotating_Machinery_2D\Rotors\Internal\surface_mounted_magnet_internal_rotor_2d.mph', {'part1'});
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'number_of_poles', 'Np');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'number_of_modeled_poles', 'Np/Nsec');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_shaft.dom', true);
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_rotor_iron.dom', true);
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_rotor_magnets', true);
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_rotor_solid_domains.dom', true);
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_rotor_air.dom', true);
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_all.dom', true);
model.geom.load({'part2'}, 'ACDC_Module\Rotating_Machinery_2D\Stators\External\slotted_external_stator_2d.mph', {'part1'});
model.geom('geom1').run('pi1');
model.geom('geom1').create('pi2', 'PartInstance');
model.geom('geom1').feature('pi2').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi2').set('part', 'part2');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'number_of_slots', 'Ns');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'number_of_modeled_slots', 'Ns/Nsec');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'slot_winding_type', 2);
model.geom('geom1').feature('pi2').setEntry('selkeepdom', 'pi2_stator_iron.dom', true);
model.geom('geom1').feature('pi2').setEntry('selkeepdom', 'pi2_stator_slots', true);
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').run('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Stator Housing');
model.selection('sel1').set([1]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Solid Materials');
model.selection('uni1').set('input', {'sel1' 'geom1_pi1_shaft_dom' 'geom1_pi1_rotor_iron_dom' 'geom1_pi1_rotor_magnets' 'geom1_pi2_stator_iron_dom' 'geom1_pi2_stator_slots'});
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Solid Materials - External Boundaries');
model.selection('adj1').set('input', {'uni1'});
model.selection.create('disk1', 'Disk');
model.selection('disk1').model('comp1');
model.selection('disk1').label('Airgap Heat Flux Boundaries');
model.selection('disk1').set('entitydim', 1);
model.selection('disk1').set('inputent', 'selections');
model.selection('disk1').set('input', {'adj1'});
model.selection('disk1').set('r', 18);
model.selection('disk1').set('rin', 11);
model.selection('disk1').set('condition', 'inside');
model.selection.create('disk2', 'Disk');
model.selection('disk2').model('comp1');
model.selection('disk2').label('Laminated Core - Housing Boundaries');
model.selection('disk2').set('entitydim', 1);
model.selection('disk2').set('r', 25.5);
model.selection('disk2').set('rin', 24.5);
model.selection('disk2').set('condition', 'inside');
model.selection.create('adj2', 'Adjacent');
model.selection('adj2').model('comp1');
model.selection('adj2').label('Winding Insulation Boundaries');
model.selection('adj2').set('input', {'geom1_pi2_stator_slots'});
model.selection.create('disk3', 'Disk');
model.selection('disk3').model('comp1');
model.selection('disk3').label('Water Jacket - External Boundaries');
model.selection('disk3').set('entitydim', 1);
model.selection('disk3').set('r', 28.8);
model.selection('disk3').set('rin', 27.5);
model.selection('disk3').set('condition', 'inside');
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Stator Solid Materials');
model.selection('uni2').set('input', {'sel1' 'geom1_pi2_stator_iron_dom' 'geom1_pi2_stator_slots'});

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').label('Average 1 - Winding');
model.cpl('aveop1').selection.named('geom1_pi2_stator_slots');
model.cpl.create('aveop2', 'Average', 'geom1');
model.cpl('aveop2').set('axisym', true);
model.cpl('aveop2').label('Average 2 - Stator Solid Materials');
model.cpl('aveop2').selection.named('uni2');

model.physics.create('mmtp', 'MagneticMachineryTimePeriodic', 'geom1');
model.physics('mmtp').model('comp1');
model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('BHCurve', 'B-H Curve');
model.material('mat2').propertyGroup('BHCurve').func.create('BH', 'Interpolation');
model.material('mat2').propertyGroup.create('EffectiveBHCurve', 'Effective B-H Curve');
model.material('mat2').propertyGroup('EffectiveBHCurve').func.create('BHeff', 'Interpolation');
model.material('mat2').label('Soft Iron (Without Losses)');
model.material('mat2').set('family', 'iron');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('BHCurve').label('B-H Curve');
model.material('mat2').propertyGroup('BHCurve').func('BH').label('Interpolation 1');
model.material('mat2').propertyGroup('BHCurve').func('BH').set('table', {'0' '0';  ...
'663.146' '1';  ...
'1067.5' '1.1';  ...
'1705.23' '1.2';  ...
'2463.11' '1.3';  ...
'3841.67' '1.4';  ...
'5425.74' '1.5';  ...
'7957.75' '1.6';  ...
'12298.3' '1.7';  ...
'20462.8' '1.8';  ...
'32169.6' '1.9';  ...
'61213.4' '2';  ...
'111408' '2.1';  ...
'188487.757' '2.2';  ...
'267930.364' '2.3';  ...
'347507.836' '2.4'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('extrap', 'linear');
model.material('mat2').propertyGroup('BHCurve').func('BH').set('fununit', {'T'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('argunit', {'A/m'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('defineinv', true);
model.material('mat2').propertyGroup('BHCurve').func('BH').set('defineprimfun', true);
model.material('mat2').propertyGroup('BHCurve').set('normB', 'BH(normHin)');
model.material('mat2').propertyGroup('BHCurve').set('normH', 'BH_inv(normBin)');
model.material('mat2').propertyGroup('BHCurve').set('Wpm', 'BH_prim(normHin)');
model.material('mat2').propertyGroup('BHCurve').descr('normHin', 'Magnetic field norm');
model.material('mat2').propertyGroup('BHCurve').descr('normBin', 'Magnetic flux density norm');
model.material('mat2').propertyGroup('BHCurve').addInput('magneticfield');
model.material('mat2').propertyGroup('BHCurve').addInput('magneticfluxdensity');
model.material('mat2').propertyGroup('EffectiveBHCurve').label('Effective B-H Curve');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').label('Interpolation 1');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('table', {'0' '0';  ...
'663.146' '1.000000051691021';  ...
'1067.5' '1.4936495124126294';  ...
'1705.23' '1.9415328461315795';  ...
'2463.11' '2.257765669366018';  ...
'3841.67' '2.609980642431287';  ...
'5425.74' '2.8664452090837504';  ...
'7957.75' '3.1441438097176118';  ...
'12298.3' '3.448538051654125';  ...
'20462.8' '3.7816711973679054';  ...
'32169.6' '4.058345590113038';  ...
'61213.4' '4.420646552950275';  ...
'111408' '4.721274089545955';  ...
'188487.757' '4.972148140718701';  ...
'267930.364' '5.145510860855953';  ...
'347507.836' '5.245510861426532'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('extrap', 'linear');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('fununit', {'T'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('argunit', {'A/m'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('defineinv', true);
model.material('mat2').propertyGroup('EffectiveBHCurve').set('normBeff', 'BHeff(normHeffin)');
model.material('mat2').propertyGroup('EffectiveBHCurve').set('normHeff', 'BHeff_inv(normBeffin)');
model.material('mat2').propertyGroup('EffectiveBHCurve').descr('normHeffin', 'Effective magnetic field norm');
model.material('mat2').propertyGroup('EffectiveBHCurve').descr('normBeffin', 'Effective magnetic flux density norm');
model.material('mat2').propertyGroup('EffectiveBHCurve').addInput('magneticfield');
model.material('mat2').propertyGroup('EffectiveBHCurve').addInput('magneticfluxdensity');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat3').label('Copper');
model.material('mat3').set('family', 'copper');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('emissivity', '0.5');
model.material('mat3').propertyGroup('def').set('density', '8940[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '126e9[Pa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.34');
model.material('mat3').propertyGroup('linzRes').set('rho0', '1.667e-8[ohm*m]');
model.material('mat3').propertyGroup('linzRes').set('alpha', '3.862e-3[1/K]');
model.material('mat3').propertyGroup('linzRes').set('Tref', '293.15[K]');
model.material('mat3').propertyGroup('linzRes').addInput('temperature');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').propertyGroup.create('RemanentFluxDensity', 'Remanent flux density');
model.material('mat4').label('N54 (Sintered NdFeB)');
model.material('mat4').set('family', 'chrome');
model.material('mat4').propertyGroup('def').set('electricconductivity', {'1/1.4[uohm*m]' '0' '0' '0' '1/1.4[uohm*m]' '0' '0' '0' '1/1.4[uohm*m]'});
model.material('mat4').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('RemanentFluxDensity').set('murec', {'1.05' '0' '0' '0' '1.05' '0' '0' '0' '1.05'});
model.material('mat4').propertyGroup('RemanentFluxDensity').set('normBr', '1.47[T]');
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat5').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat5').label('High-strength alloy steel');
model.material('mat5').set('family', 'custom');
model.material('mat5').set('customspecular', [0.9803921568627451 0.9803921568627451 0.9803921568627451]);
model.material('mat5').set('customdiffuse', [0.9803921568627451 0.9803921568627451 0.9803921568627451]);
model.material('mat5').set('customambient', [0.5882352941176471 0.5882352941176471 0.5882352941176471]);
model.material('mat5').set('noise', true);
model.material('mat5').set('fresnel', 0.99);
model.material('mat5').set('roughness', 0.12);
model.material('mat5').set('metallic', 0);
model.material('mat5').set('pearl', 0);
model.material('mat5').set('diffusewrap', 0);
model.material('mat5').set('clearcoat', 0);
model.material('mat5').set('reflectance', 0);
model.material('mat5').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat5').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat5').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat5').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat5').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat5').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat5').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat5').propertyGroup('Enu').set('E', '200[GPa]');
model.material('mat5').propertyGroup('Enu').set('nu', '0.30');
model.material('mat5').propertyGroup('Murnaghan').set('l', '-300[GPa]');
model.material('mat5').propertyGroup('Murnaghan').set('m', '-620[GPa]');
model.material('mat5').propertyGroup('Murnaghan').set('n', '-720[GPa]');
model.material('mat2').selection.set([2 18]);
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'20'});
model.material('mat2').propertyGroup('def').set('density', {'1'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'1'});
model.material('mat3').selection.named('geom1_pi2_stator_slots');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'2[W/(m*K)]'});
model.material('mat4').selection.named('geom1_pi1_rotor_magnets');
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'9'});
model.material('mat4').propertyGroup('def').set('density', {'1'});
model.material('mat4').propertyGroup('def').set('heatcapacity', {'1'});
model.material('mat5').selection.set([1 20]);

model.view('view1').set('showmaterial', true);

model.physics('mmtp').prop('d').set('d', 'L');
model.physics('mmtp').prop('TimePeriodicSettings').set('nTP', 'Nframes');
model.physics('mmtp').prop('TimePeriodicSettings').set('freqTP', 'w_rot');
model.physics('mmtp').prop('MotionSettings').set('NoPoles', 'Np');
model.physics('mmtp').create('rcon1', 'RotationalContinuityPair', 1);
model.physics('mmtp').create('rper1', 'RotationalPeriodicity', 1);
model.physics('mmtp').feature('rper1').selection.set([1 2 10 30 31 36 121 123 127 129 132 136]);
model.physics('mmtp').create('tprot1', 'TimePeriodicRotatingDomain', 2);
model.physics('mmtp').feature('tprot1').set('TimePeriodicRotationType', 'FullMechanicalRevolution');
model.physics('mmtp').create('lc1', 'LaminatedCore', 2);
model.physics('mmtp').feature('lc1').selection.set([2 18]);
model.physics('mmtp').create('mag1', 'Magnet', 2);
model.physics('mmtp').feature('mag1').selection.named('geom1_pi1_rotor_magnets');
model.physics('mmtp').feature('mag1').set('PatternType', 'CircularPattern');
model.physics('mmtp').feature('mag1').set('PeriodicType', 'Alternating');
model.physics('mmtp').feature('mag1').set('normBr_crel_BH_RemanentFluxDensity_mat', 'userdef');
model.physics('mmtp').feature('mag1').set('normBr_crel_BH_RemanentFluxDensity', 'PM_Br_ref*(1+PM_alpha*(T-PM_Tref))');
model.physics('mmtp').feature('mag1').feature('north1').selection.set([163 165 166]);
model.physics('mmtp').feature('mag1').feature('south1').selection.set([161]);
model.physics('mmtp').create('wnd1', 'MultiphaseWinding', 2);
model.physics('mmtp').feature('wnd1').selection.named('geom1_pi2_stator_slots');
model.physics('mmtp').feature('wnd1').set('Ipk', 'Ipk');
model.physics('mmtp').feature('wnd1').set('alpha_i', 'init_ang');
model.physics('mmtp').feature('wnd1').set('freq_signal', 'f_el');
model.physics('mmtp').feature('wnd1').set('WindingLayout', 'automatic');
model.physics('mmtp').feature('wnd1').set('NoSlots', 'Ns');
model.physics('mmtp').feature('wnd1').create('aPh1', 'Phase');
model.physics('mmtp').feature('wnd1').feature('aPh1').label('Automatic Phase 1');
model.physics('mmtp').feature('wnd1').feature('aPh1').create('rcd1', 'ReversedCurrentDirection', 2);
model.physics('mmtp').feature('wnd1').create('aPh2', 'Phase');
model.physics('mmtp').feature('wnd1').feature('aPh2').label('Automatic Phase 2');
model.physics('mmtp').feature('wnd1').feature('aPh2').create('rcd1', 'ReversedCurrentDirection', 2);
model.physics('mmtp').feature('wnd1').create('aPh3', 'Phase');
model.physics('mmtp').feature('wnd1').feature('aPh3').label('Automatic Phase 3');
model.physics('mmtp').feature('wnd1').feature('aPh3').create('rcd1', 'ReversedCurrentDirection', 2);
model.physics('mmtp').feature('wnd1').feature('aPh1').selection.set([13 14 3 15]);
model.physics('mmtp').feature('wnd1').feature('aPh1').feature('rcd1').selection.set([13]);
model.physics('mmtp').feature('wnd1').feature('aPh1').active(true);
model.physics('mmtp').feature('wnd1').feature('aPh1').feature('rcd1').active(true);
model.physics('mmtp').feature('wnd1').feature('aPh2').selection.set([10 11 9 12]);
model.physics('mmtp').feature('wnd1').feature('aPh2').feature('rcd1').selection.set([10 11]);
model.physics('mmtp').feature('wnd1').feature('aPh2').active(true);
model.physics('mmtp').feature('wnd1').feature('aPh2').feature('rcd1').active(true);
model.physics('mmtp').feature('wnd1').feature('aPh3').selection.set([4 8 5 7]);
model.physics('mmtp').feature('wnd1').feature('aPh3').feature('rcd1').selection.set([4 8]);
model.physics('mmtp').feature('wnd1').feature('aPh3').active(true);
model.physics('mmtp').feature('wnd1').feature('aPh3').feature('rcd1').active(true);
model.physics('mmtp').feature('wnd1').feature.move('aPh1', 3);
model.physics('mmtp').feature('wnd1').feature.move('aPh2', 3);
model.physics('mmtp').feature('wnd1').feature.move('aPh3', 3);
model.physics('mmtp').feature('wnd1').feature('aPh1').set('alpha_o', '0[deg]');
model.physics('mmtp').feature('wnd1').feature('aPh2').set('alpha_o', '-120[deg]');
model.physics('mmtp').feature('wnd1').feature('aPh3').set('alpha_o', '-240[deg]');
model.physics('mmtp').feature('wnd1').set('N', 'Nturn');
model.physics('mmtp').feature('wnd1').set('sigmaCoil', '1/(Cu_rho0*(1+Cu_alpha*(aveop1(T)-Cu_Tref)))');
model.physics('mmtp').feature('wnd1').set('AreaFrom', 'FillingFactor');
model.physics('mmtp').feature('wnd1').set('FillingFactor', 'ff_slot');
model.physics('ht').selection.named('uni1');
model.physics('ht').prop('PhysicalModelProperty').set('dz', 'L');
model.physics('ht').prop('ShapeProperty').set('order_temperature', 1);
model.physics('ht').create('sls1', 'SolidLayeredShell', 1);
model.physics('ht').feature('sls1').label('Thin Layer 1 - Laminated Core <> Housing');
model.physics('ht').feature('sls1').selection.named('disk2');
model.physics('ht').feature('sls1').set('lth_mat', 'userdef');
model.physics('ht').feature('sls1').set('lth', '0.5e-4[m]');
model.physics('ht').feature('sls1').set('k_mat', 'userdef');
model.physics('ht').feature('sls1').set('k', [0.02 0 0 0 0.02 0 0 0 0.02]);
model.physics('ht').create('sls2', 'SolidLayeredShell', 1);
model.physics('ht').feature('sls2').label('Thin Layer 2 - Winding Insulation');
model.physics('ht').feature('sls2').selection.named('adj2');
model.physics('ht').feature('sls2').set('lth_mat', 'userdef');
model.physics('ht').feature('sls2').set('lth', '2e-4[m]');
model.physics('ht').feature('sls2').set('k_mat', 'userdef');
model.physics('ht').feature('sls2').set('k', [0.2 0 0 0 0.2 0 0 0 0.2]);
model.physics('ht').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf1').label('Heat Flux 1 - Water Jacket');
model.physics('ht').feature('hf1').selection.named('disk3');
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 500);
model.physics('ht').feature('hf1').set('Text', '25[degC]');
model.physics('ht').create('hf2', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf2').label('Heat Flux 2 - Airgap');
model.physics('ht').feature('hf2').selection.named('disk1');
model.physics('ht').feature('hf2').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf2').set('h', 50);
model.physics('ht').feature('hf2').set('Text', 'aveop2(T)');
model.physics('ht').create('pc1', 'PeriodicHeat', 1);
model.physics('ht').feature('pc1').selection.set([1 2 31 36 123 127 129 132]);

model.multiphysics.create('emh1', 'ElectromagneticHeating', 'geom1', 2);

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hcurve', 0.6);
model.mesh('mesh1').feature('size').set('hnarrow', 0.5);
model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature.move('size1', 1);
model.mesh('mesh1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('size1').selection.named('geom1_pi2_stator_iron_dom');
model.mesh('mesh1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('size1').set('hmax', 1);
model.mesh('mesh1').run;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/mmtp', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/emh1', true);
model.study('std1').label('Study 1 - Convergence with Number of Time Frames');
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'Np', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'Np', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'Nframes', 0);
model.study('std1').feature('param').setIndex('plistarr', '10 30 60 120 180 240', 0);
model.study('std1').feature('param').set('paramselect', false);
model.study('std1').feature('param').set('reusesol', true);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables (ht) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'Nframes'});
model.batch('p1').set('plistarr', {'10 30 60 120 180 240'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature('ssDef').label('Magnetic Field');
model.sol('sol1').feature('s1').feature('se1').feature('ssDef').set('segvar', {'comp1_mmtp_AZ_tp0' 'comp1_mmtp_rcon1_AZLM_tp0' 'comp1_mmtp_mag1_V_0'});
model.sol('sol1').feature('s1').feature('se1').feature('ssDef').set('subtermconst', 'tol');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Temperature Field');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_ht_TextFace' 'comp1_T'});
model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Magnetic Flux Density Norm (mmtp)');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 6, 0);
model.result('pg1').set('titletype', 'label');
model.result('pg1').set('edges', 'off');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 6, 0);
model.result('pg1').set('defaultPlotID', 'MagneticFluxDensityNormPlot');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').feature('surf1').set('expr', 'mmtp.normB(phase)');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('surf1').set('colorcalibration', -0.8);
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').set('expr', {'mmtp.displX(phase)' 'mmtp.displY(phase)'});
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg1').feature.create('str1', 'Streamline');
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('expr', {'mmtp.BX(phase)' 'mmtp.BY(phase)'});
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('udist', 0.03);
model.result('pg1').feature('str1').set('smooth', 'internal');
model.result('pg1').feature('str1').set('maxlen', Inf);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxlen', Inf);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxlen', Inf);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxlen', Inf);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxlen', Inf);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('data', 'parent');
model.result('pg1').feature('str1').selection.geom('geom1', 1);
model.result('pg1').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166]);
model.result('pg1').feature('str1').feature.create('col1', 'Color');
model.result('pg1').feature('str1').feature('col1').set('expr', 'mmtp.normB(phase)');
model.result('pg1').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg1').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg1').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg1').feature('str1').feature.create('filt1', 'Filter');
model.result('pg1').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').feature('str1').feature.create('def1', 'Deform');
model.result('pg1').feature('str1').feature('def1').set('expr', {'mmtp.displX(phase)' 'mmtp.displY(phase)'});
model.result('pg1').feature('str1').feature('def1').set('scaleactive', true);
model.result('pg1').feature.create('con1', 'Contour');
model.result('pg1').feature('con1').set('showsolutionparams', 'on');
model.result('pg1').feature('con1').set('solutionparams', 'parent');
model.result('pg1').feature('con1').set('expr', 'mmtp.AZ(phase)');
model.result('pg1').feature('con1').set('number', 10);
model.result('pg1').feature('con1').set('levelrounding', false);
model.result('pg1').feature('con1').set('coloring', 'uniform');
model.result('pg1').feature('con1').set('colorlegend', false);
model.result('pg1').feature('con1').set('color', 'custom');
model.result('pg1').feature('con1').set('customcolor', [0.4117647111415863 0.4117647111415863 0.4117647111415863]);
model.result('pg1').feature('con1').set('smooth', 'internal');
model.result('pg1').feature('con1').set('showsolutionparams', 'on');
model.result('pg1').feature('con1').set('data', 'parent');
model.result('pg1').feature('con1').feature.create('filt1', 'Filter');
model.result('pg1').feature('con1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').feature('con1').feature.create('def1', 'Deform');
model.result('pg1').feature('con1').feature('def1').set('expr', {'mmtp.displX(phase)' 'mmtp.displY(phase)'});
model.result('pg1').feature('con1').feature('def1').set('scaleactive', true);
model.result('pg1').feature.create('line1', 'Line');
model.result('pg1').feature('line1').set('showsolutionparams', 'on');
model.result('pg1').feature('line1').set('expr', '1');
model.result('pg1').feature('line1').set('coloring', 'uniform');
model.result('pg1').feature('line1').set('color', 'fromtheme');
model.result('pg1').feature('line1').set('smooth', 'internal');
model.result('pg1').feature('line1').set('showsolutionparams', 'on');
model.result('pg1').feature('line1').set('data', 'parent');
model.result('pg1').feature('line1').feature.create('def1', 'Deform');
model.result('pg1').feature('line1').feature('def1').set('expr', {'mmtp.displX(phase)' 'mmtp.displY(phase)'});
model.result('pg1').feature('line1').feature('def1').set('scaleactive', true);
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Temperature (ht)');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 6, 0);
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 6, 0);
model.result('pg2').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond2/pg1');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solutionparams', 'parent');
model.result('pg2').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg1').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').set('expr', {'mmtp.rcon1.Tax_tpavg'});
model.result.evaluationGroup('eg1').feature('gev1').set('descr', {'Axial torque, time periodic average'});
model.result.evaluationGroup('eg1').feature('gev1').set('unit', {'N*m'});
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Torque', 0);
model.result.evaluationGroup('eg1').create('int1', 'IntSurface');
model.result.evaluationGroup('eg1').feature('int1').set('intvolume', true);
model.result.evaluationGroup('eg1').feature('int1').selection.named('geom1_pi2_stator_slots');
model.result.evaluationGroup('eg1').feature('int1').setIndex('expr', 'mmtp.Qh*L*Nsec', 0);
model.result.evaluationGroup('eg1').feature('int1').setIndex('descr', 'Winding', 0);
model.result.evaluationGroup('eg1').feature.duplicate('int2', 'int1');
model.result.evaluationGroup('eg1').feature('int2').selection.named('geom1_pi2_stator_iron_dom');
model.result.evaluationGroup('eg1').feature('int2').setIndex('descr', 'Stator core', 0);
model.result.evaluationGroup('eg1').feature.duplicate('int3', 'int2');
model.result.evaluationGroup('eg1').feature('int3').selection.named('geom1_pi1_rotor_magnets');
model.result.evaluationGroup('eg1').feature('int3').setIndex('descr', 'Magnets', 0);
model.result.evaluationGroup('eg1').feature.duplicate('int4', 'int3');
model.result.evaluationGroup('eg1').feature('int4').selection.named('geom1_pi1_rotor_iron_dom');
model.result.evaluationGroup('eg1').feature('int4').setIndex('descr', 'Rotor core', 0);
model.result.evaluationGroup('eg1').set('data', 'dset2');
model.result.evaluationGroup('eg1').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Convergence with Number of Frames');
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'Electromagnetic loss [W]');
model.result('pg3').set('twoyaxes', true);
model.result('pg3').set('legendpos', 'middleright');
model.result('pg3').create('tblp1', 'Table');
model.result('pg3').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg3').feature('tblp1').set('linewidth', 'preference');
model.result('pg3').feature('tblp1').set('source', 'evaluationgroup');
model.result('pg3').feature('tblp1').set('xaxisdata', 1);
model.result('pg3').feature('tblp1').set('plotcolumninput', 'manual');
model.result('pg3').feature('tblp1').set('plotcolumns', [2]);
model.result('pg3').feature('tblp1').set('plotonsecyaxis', true);
model.result('pg3').feature('tblp1').set('linewidth', 2);
model.result('pg3').feature('tblp1').set('legend', true);
model.result('pg3').feature.duplicate('tblp2', 'tblp1');
model.result('pg3').run;
model.result('pg3').feature('tblp2').set('plotcolumns', [3 4 5 6]);
model.result('pg3').feature('tblp2').set('plotonsecyaxis', false);
model.result('pg3').run;

model.param.set('Nframes', '120');

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/mmtp', true);
model.study('std2').feature('stat').setSolveFor('/physics/ht', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/emh1', true);
model.study('std2').label('Study 2 - Efficiency Map');
model.study('std2').create('param', 'Parametric');
model.study('std2').feature('param').set('sweeptype', 'filled');
model.study('std2').feature('param').setIndex('pname', 'Np', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', '', 0);
model.study('std2').feature('param').setIndex('pname', 'Np', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', '', 0);
model.study('std2').feature('param').setIndex('pname', 'w_rot', 0);
model.study('std2').feature('param').setIndex('plistarr', 'range(1200,3600,12000)', 0);
model.study('std2').feature('param').setIndex('punit', 'rpm', 0);
model.study('std2').feature('param').setIndex('pname', 'Np', 1);
model.study('std2').feature('param').setIndex('plistarr', '', 1);
model.study('std2').feature('param').setIndex('punit', '', 1);
model.study('std2').feature('param').setIndex('pname', 'Np', 1);
model.study('std2').feature('param').setIndex('plistarr', '', 1);
model.study('std2').feature('param').setIndex('punit', '', 1);
model.study('std2').feature('param').setIndex('pname', 'Ipk', 1);
model.study('std2').feature('param').setIndex('plistarr', 'range(3,6.75,30)', 1);
model.study('std2').feature('param').set('reusesol', true);

model.sol.create('sol9');
model.sol('sol9').study('std2');
model.sol('sol9').create('st1', 'StudyStep');
model.sol('sol9').feature('st1').set('study', 'std2');
model.sol('sol9').feature('st1').set('studystep', 'stat');
model.sol('sol9').create('v1', 'Variables');
model.sol('sol9').feature('v1').set('control', 'stat');
model.sol('sol9').create('s1', 'Stationary');
model.sol('sol9').feature('s1').create('p1', 'Parametric');
model.sol('sol9').feature('s1').feature('p1').set('pname', {'w_rot' 'Ipk'});
model.sol('sol9').feature('s1').feature('p1').set('plistarr', {'range(1200,3600,12000)' 'range(3,6.75,30)'});
model.sol('sol9').feature('s1').feature('p1').set('punit', {'rpm' 'A'});
model.sol('sol9').feature('s1').feature('p1').set('sweeptype', 'filled');
model.sol('sol9').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol9').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol9').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol9').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol9').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol9').feature('s1').feature('p1').set('probes', {});
model.sol('sol9').feature('s1').feature('p1').set('control', 'param');
model.sol('sol9').feature('s1').set('control', 'stat');
model.sol('sol9').feature('s1').create('seDef', 'Segregated');
model.sol('sol9').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol9').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol9').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol9').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol9').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol9').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol9').feature('s1').create('d1', 'Direct');
model.sol('sol9').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol9').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol9').feature('s1').feature('d1').label('Direct, heat transfer variables (ht) (Merged)');
model.sol('sol9').feature('s1').create('i1', 'Iterative');
model.sol('sol9').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol9').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol9').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol9').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol9').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol9').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol9').feature('s1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol9').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol9').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol9').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol9').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol9').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol9').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol9').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol9').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol9').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol9').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol9').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol9').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol9').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol9').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol9').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol9').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol9').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol9').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol9').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol9').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol9').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol9').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol9').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol9').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol9').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol9').feature('s1').feature.remove('fcDef');
model.sol('sol9').feature('s1').feature.remove('seDef');
model.sol('sol9').attach('std2');
model.sol('sol9').feature('s1').create('se1', 'Segregated');
model.sol('sol9').feature('s1').feature('se1').feature('ssDef').label('Magnetic Field');
model.sol('sol9').feature('s1').feature('se1').feature('ssDef').set('segvar', {'comp1_mmtp_AZ_tp0' 'comp1_mmtp_rcon1_AZLM_tp0' 'comp1_mmtp_mag1_V_0'});
model.sol('sol9').feature('s1').feature('se1').feature('ssDef').set('subtermconst', 'tol');
model.sol('sol9').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol9').feature('s1').feature('se1').feature('ss1').label('Temperature Field');
model.sol('sol9').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_ht_TextFace' 'comp1_T'});
model.sol('sol9').runAll;

model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Magnetic Flux Density Norm (mmtp) 1');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 5, 0);
model.result('pg4').setIndex('looplevel', 4, 1);
model.result('pg4').set('titletype', 'label');
model.result('pg4').set('edges', 'off');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 5, 0);
model.result('pg4').setIndex('looplevel', 4, 1);
model.result('pg4').set('defaultPlotID', 'MagneticFluxDensityNormPlot');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('solutionparams', 'parent');
model.result('pg4').feature('surf1').set('expr', 'mmtp.normB(phase)');
model.result('pg4').feature('surf1').set('colortable', 'Prism');
model.result('pg4').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('surf1').set('colorcalibration', -0.8);
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result('pg4').feature('surf1').feature.create('def1', 'Deform');
model.result('pg4').feature('surf1').feature('def1').set('expr', {'mmtp.displX(phase)' 'mmtp.displY(phase)'});
model.result('pg4').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg4').feature.create('str1', 'Streamline');
model.result('pg4').feature('str1').set('showsolutionparams', 'on');
model.result('pg4').feature('str1').set('expr', {'mmtp.BX(phase)' 'mmtp.BY(phase)'});
model.result('pg4').feature('str1').set('posmethod', 'uniform');
model.result('pg4').feature('str1').set('udist', 0.03);
model.result('pg4').feature('str1').set('smooth', 'internal');
model.result('pg4').feature('str1').set('maxlen', Inf);
model.result('pg4').feature('str1').set('maxtime', Inf);
model.result('pg4').feature('str1').set('showsolutionparams', 'on');
model.result('pg4').feature('str1').set('maxlen', Inf);
model.result('pg4').feature('str1').set('maxtime', Inf);
model.result('pg4').feature('str1').set('showsolutionparams', 'on');
model.result('pg4').feature('str1').set('maxlen', Inf);
model.result('pg4').feature('str1').set('maxtime', Inf);
model.result('pg4').feature('str1').set('showsolutionparams', 'on');
model.result('pg4').feature('str1').set('maxlen', Inf);
model.result('pg4').feature('str1').set('maxtime', Inf);
model.result('pg4').feature('str1').set('showsolutionparams', 'on');
model.result('pg4').feature('str1').set('maxlen', Inf);
model.result('pg4').feature('str1').set('maxtime', Inf);
model.result('pg4').feature('str1').set('data', 'parent');
model.result('pg4').feature('str1').selection.geom('geom1', 1);
model.result('pg4').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166]);
model.result('pg4').feature('str1').feature.create('col1', 'Color');
model.result('pg4').feature('str1').feature('col1').set('expr', 'mmtp.normB(phase)');
model.result('pg4').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg4').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg4').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg4').feature('str1').feature.create('filt1', 'Filter');
model.result('pg4').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg4').feature('str1').feature.create('def1', 'Deform');
model.result('pg4').feature('str1').feature('def1').set('expr', {'mmtp.displX(phase)' 'mmtp.displY(phase)'});
model.result('pg4').feature('str1').feature('def1').set('scaleactive', true);
model.result('pg4').feature.create('con1', 'Contour');
model.result('pg4').feature('con1').set('showsolutionparams', 'on');
model.result('pg4').feature('con1').set('solutionparams', 'parent');
model.result('pg4').feature('con1').set('expr', 'mmtp.AZ(phase)');
model.result('pg4').feature('con1').set('number', 10);
model.result('pg4').feature('con1').set('levelrounding', false);
model.result('pg4').feature('con1').set('coloring', 'uniform');
model.result('pg4').feature('con1').set('colorlegend', false);
model.result('pg4').feature('con1').set('color', 'custom');
model.result('pg4').feature('con1').set('customcolor', [0.4117647111415863 0.4117647111415863 0.4117647111415863]);
model.result('pg4').feature('con1').set('smooth', 'internal');
model.result('pg4').feature('con1').set('showsolutionparams', 'on');
model.result('pg4').feature('con1').set('data', 'parent');
model.result('pg4').feature('con1').feature.create('filt1', 'Filter');
model.result('pg4').feature('con1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg4').feature('con1').feature.create('def1', 'Deform');
model.result('pg4').feature('con1').feature('def1').set('expr', {'mmtp.displX(phase)' 'mmtp.displY(phase)'});
model.result('pg4').feature('con1').feature('def1').set('scaleactive', true);
model.result('pg4').feature.create('line1', 'Line');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('expr', '1');
model.result('pg4').feature('line1').set('coloring', 'uniform');
model.result('pg4').feature('line1').set('color', 'fromtheme');
model.result('pg4').feature('line1').set('smooth', 'internal');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('data', 'parent');
model.result('pg4').feature('line1').feature.create('def1', 'Deform');
model.result('pg4').feature('line1').feature('def1').set('expr', {'mmtp.displX(phase)' 'mmtp.displY(phase)'});
model.result('pg4').feature('line1').feature('def1').set('scaleactive', true);
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Temperature (ht) 1');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 5, 0);
model.result('pg5').setIndex('looplevel', 4, 1);
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 5, 0);
model.result('pg5').setIndex('looplevel', 4, 1);
model.result('pg5').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond2/pg1');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg4').run;
model.result.evaluationGroup.duplicate('eg2', 'eg1');
model.result.evaluationGroup('eg2').set('data', 'dset3');
model.result.evaluationGroup('eg2').feature.duplicate('gev2', 'gev1');
model.result.evaluationGroup('eg2').feature('gev2').setIndex('expr', 'mmtp.rcon1.Tax_tpavg*w_rot*2*pi', 0);
model.result.evaluationGroup('eg2').feature('gev2').setIndex('unit', 'W', 0);
model.result.evaluationGroup('eg2').feature('gev2').setIndex('descr', 'Shaft power', 0);
model.result.evaluationGroup('eg2').set('type', 'general');
model.result.evaluationGroup('eg2').set('keepchildnodes', true);
model.result.evaluationGroup('eg2').set('generalexpr', 'gev2/(gev2+int1+int2+int3+int4)');
model.result.evaluationGroup('eg2').set('generalheader', 'Efficiency');
model.result.evaluationGroup('eg2').run;
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'none');
model.result('pg6').create('tblc1', 'TableContour');
model.result('pg6').feature('tblc1').set('source', 'evaluationgroup');
model.result('pg6').feature('tblc1').set('evaluationgroup', 'eg2');
model.result('pg6').run;
model.result('pg6').feature('tblc1').set('coly', 4);
model.result('pg6').feature.duplicate('tblc2', 'tblc1');
model.result('pg6').run;
model.result('pg6').feature('tblc2').set('contourtype', 'lines');
model.result('pg6').feature('tblc2').set('contourlabels', true);
model.result('pg6').feature('tblc2').set('labelprec', 2);
model.result('pg6').feature('tblc2').set('labelcolor', 'black');
model.result('pg6').feature('tblc2').set('colortable', 'RainbowDark');
model.result('pg6').feature('tblc2').set('colorlegend', false);
model.result('pg6').feature('tblc2').set('titletype', 'none');
model.result('pg6').run;
model.result('pg6').label('Motor Efficiency Map');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'Speed (rpm)');
model.result('pg6').run;
model.result('pg5').run;
model.result('pg5').feature('surf1').set('data', 'dset3');
model.result('pg5').feature('surf1').set('solutionparams', 'manual');
model.result('pg5').feature('surf1').setIndex('looplevel', 1, 1);
model.result('pg5').feature('surf1').setIndex('looplevel', 1, 0);
model.result('pg5').feature('surf1').set('unit', 'degC');
model.result('pg5').feature('surf1').set('titletype', 'none');
model.result('pg5').run;
model.result('pg5').create('ann1', 'Annotation');
model.result('pg5').feature('ann1').set('data', 'dset3');
model.result('pg5').feature('ann1').setIndex('looplevel', 1, 1);
model.result('pg5').feature('ann1').setIndex('looplevel', 1, 0);
model.result('pg5').feature('ann1').set('text', 'speed = eval(w_rot,rpm,5)  Ipk = eval(Ipk,A,3)');
model.result('pg5').feature('ann1').set('posxexpr', -16);
model.result('pg5').feature('ann1').set('posyexpr', 6);
model.result('pg5').feature('ann1').set('showpoint', false);
model.result('pg5').feature('ann1').set('backgroundcolor', 'fromtheme');
model.result('pg5').feature('ann1').set('showframe', true);
model.result('pg5').run;
model.result('pg5').feature.duplicate('surf2', 'surf1');
model.result('pg5').feature.duplicate('ann2', 'ann1');
model.result('pg5').run;
model.result('pg5').feature('surf2').setIndex('looplevel', 5, 0);
model.result('pg5').feature('surf2').set('inheritplot', 'surf1');
model.result('pg5').feature('surf2').create('trn1', 'Translation');
model.result('pg5').run;
model.result('pg5').feature('surf2').feature('trn1').set('trans', [0 30]);
model.result('pg5').run;
model.result('pg5').feature('ann2').create('trn1', 'Translation');
model.result('pg5').run;
model.result('pg5').feature('ann2').feature('trn1').set('trans', [0 30]);
model.result('pg5').run;
model.result('pg5').feature('ann2').setIndex('looplevel', 5, 0);
model.result('pg5').run;
model.result('pg5').feature.duplicate('surf3', 'surf2');
model.result('pg5').feature.duplicate('ann3', 'ann2');
model.result('pg5').run;
model.result('pg5').feature('surf3').setIndex('looplevel', 4, 1);
model.result('pg5').run;
model.result('pg5').feature('surf3').feature('trn1').set('trans', [60 30]);
model.result('pg5').run;
model.result('pg5').feature('ann3').setIndex('looplevel', 4, 1);
model.result('pg5').run;
model.result('pg5').feature('ann3').feature('trn1').set('trans', [60 30]);
model.result('pg5').run;
model.result('pg5').feature.duplicate('surf4', 'surf3');
model.result('pg5').feature.duplicate('ann4', 'ann3');
model.result('pg5').run;
model.result('pg5').feature('surf4').setIndex('looplevel', 1, 0);
model.result('pg5').run;
model.result('pg5').feature('surf4').feature('trn1').set('trans', [60 0]);
model.result('pg5').run;
model.result('pg5').feature('ann4').setIndex('looplevel', 1, 0);
model.result('pg5').run;
model.result('pg5').feature('ann4').feature('trn1').set('trans', [60 0]);
model.result('pg5').run;
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Temperature fields of four operating points');
model.result('pg5').set('paramindicator', '');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').run;
model.result.duplicate('pg7', 'pg5');
model.result('pg7').run;
model.result('pg7').label('Electromagnetic Loss');
model.result('pg7').set('title', 'Electromagnetic loss distribution of four operating points');
model.result('pg7').run;
model.result('pg7').feature('surf1').set('expr', 'mmtp.Qh');
model.result('pg7').feature('surf1').set('descr', 'Volumetric loss density, electromagnetic');
model.result('pg7').feature('surf1').set('colortable', 'Rainbow');
model.result('pg7').run;
model.result('pg7').feature('surf2').set('expr', 'mmtp.Qh');
model.result('pg7').feature('surf2').set('descr', 'Volumetric loss density, electromagnetic');
model.result('pg7').run;
model.result('pg7').feature('surf3').set('expr', 'mmtp.Qh');
model.result('pg7').feature('surf3').set('descr', 'Volumetric loss density, electromagnetic');
model.result('pg7').run;
model.result('pg7').feature('surf4').set('expr', 'mmtp.Qh');
model.result('pg7').feature('surf4').set('descr', 'Volumetric loss density, electromagnetic');
model.result('pg7').run;
model.result('pg6').run;

model.title('Permanent Magnet Motor with Efficiency Map');

model.description('A model demonstrating how to couple Magnetic Machinery Time Periodic with Heat Transfer (two-way) and generating an efficiency map of a sweep over current amplitude and rotor speed.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;

model.result('pg6').feature('tblc2').set('showparam', false);
model.result('pg6').feature('tblc1').set('showparam', false);

model.label('pm_motor_2d_efficiency_map.mph');

model.modelNode.label('Components');

out = model;
