function out = model
%
% acoustics_particulate_filter.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Automotive');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics.create('pelw', 'PoroelasticWavesSinglePhysics', 'geom1');
model.physics('pelw').model('comp1');

model.multiphysics.create('asb1', 'AcousticStructureBoundary', 'geom1', 1);
model.multiphysics('asb1').set('Acoustics_physics', 'acpr');
model.multiphysics('asb1').set('Structure_physics', 'solid');
model.multiphysics('asb1').selection.all;
model.multiphysics.create('psb1', 'PorousStructureBoundary', 'geom1', 1);
model.multiphysics('psb1').set('Porous_physics', 'pelw');
model.multiphysics('psb1').set('Structure_physics', 'solid');
model.multiphysics('psb1').selection.all;
model.multiphysics.create('apb1', 'AcousticPorousBoundary', 'geom1', 1);
model.multiphysics('apb1').set('Acoustics_physics', 'acpr');
model.multiphysics('apb1').set('Porous_physics', 'pelw');
model.multiphysics('apb1').selection.all;

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std1').feature('freq').setSolveFor('/physics/solid', true);
model.study('std1').feature('freq').setSolveFor('/physics/pelw', true);
model.study('std1').feature('freq').setSolveFor('/multiphysics/asb1', true);
model.study('std1').feature('freq').setSolveFor('/multiphysics/psb1', true);
model.study('std1').feature('freq').setSolveFor('/multiphysics/apb1', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('p0', '1[Pa]', 'Incident pressure');
model.param.set('tauP', '1', 'Tortuosity');
model.param.set('Rfilter', '150[mm]', 'Filter radius');
model.param.set('Rtube', '50[mm]', 'Inlet/outlet tube radius');
model.param.set('Lfilter', '200[mm]', 'Porous filter length');
model.param.set('Lair', '50[mm]', 'Length of air part in filter');
model.param.set('Ltube', '100[mm]', 'Inlet/outlet tube length');
model.param.set('dh', '5[mm]', 'Air channel width');
model.param.set('ht', '3.2[mm]', 'Porous wall thickness');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'Rtube' 'Ltube'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'Rfilter' 'Lair'});
model.geom('geom1').feature('r2').set('pos', {'0' 'Ltube'});
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', {'Rfilter' 'Lfilter'});
model.geom('geom1').feature('r3').set('pos', {'0' 'Ltube+Lair'});
model.geom('geom1').feature('r3').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('r3').setIndex('layer', 'ht', 0);
model.geom('geom1').feature('r3').set('layertop', true);
model.geom('geom1').run('r3');
model.geom('geom1').create('r4', 'Rectangle');
model.geom('geom1').feature('r4').set('size', {'Rfilter' 'Lair'});
model.geom('geom1').feature('r4').set('pos', {'0' 'Ltube+Lair+Lfilter'});
model.geom('geom1').run('r4');
model.geom('geom1').create('r5', 'Rectangle');
model.geom('geom1').feature('r5').set('size', {'Rtube' 'Ltube'});
model.geom('geom1').feature('r5').set('pos', {'0' 'Ltube+2*Lair+Lfilter'});
model.geom('geom1').run('r5');
model.geom('geom1').create('r6', 'Rectangle');
model.geom('geom1').feature('r6').set('size', {'dh' 'Lfilter'});
model.geom('geom1').feature('r6').set('pos', {'ht' 'Ltube+Lair'});
model.geom('geom1').run('r6');
model.geom('geom1').create('arr1', 'Array');
model.geom('geom1').feature('arr1').selection('input').set({'r6'});
model.geom('geom1').feature('arr1').set('fullsize', [18 1]);
model.geom('geom1').feature('arr1').set('displ', {'(dh+ht)' '0'});
model.geom('geom1').run('fin');

model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');
model.selection('box1').label('All domains');
model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Poroelastic Waves Domains');
model.selection('sel1').set([3 4 5 11 12 13 17 18 19 23 24 25 29 30 31 35 36 37 41 42 43 47 48 49 53 54 55 59 60 61 65 66 67 71 72 73 77 78 79 83 84 85 89 90 91 95 96 97 101 102 103 107 108 109 113 114 115]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Steel Domains');
model.selection('sel2').set([10 14 22 26 34 38 46 50 58 62 70 74 82 86 94 98 106 110]);
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Air Domains');
model.selection('dif1').set('add', {'box1'});
model.selection('dif1').set('subtract', {'sel1' 'sel2'});

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('SiC matrix');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').label('Steel AISI 4340');
model.material('mat3').set('family', 'steel');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.28');
model.material('mat3').selection.named('sel2');

model.physics('pelw').selection.named('sel1');
model.physics('pelw').feature('pm1').set('PoroelasticModel', 'Biot');
model.physics('pelw').feature('pm1').set('SolidMaterial', 'mat2');
model.physics('pelw').feature('pm1').set('IsotropicOption', 'Enu');
model.physics('solid').selection.named('sel2');
model.physics('pelw').create('pfix1', 'Fixed', 1);
model.physics('pelw').feature('pfix1').selection.set([273 274 275]);
model.physics('acpr').selection.named('dif1');
model.physics('acpr').create('port1', 'Port', 1);
model.physics('acpr').feature('port1').selection.set([2]);
model.physics('acpr').feature('port1').set('PortType', 'Circular');
model.physics('acpr').feature('port1').set('pamp', 'p0');
model.physics('acpr').create('port2', 'Port', 1);
model.physics('acpr').feature('port2').selection.set([15]);
model.physics('acpr').feature('port2').set('PortType', 'Circular');

model.material('mat1').propertyGroup('def').set('compressibility', {'1/1[atm]'});
model.material('mat2').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat2').propertyGroup('Enu').set('E', {'20[GPa]'});
model.material('mat2').propertyGroup('Enu').set('nu', {'0.4'});
model.material('mat2').propertyGroup('def').set('density', {'1000'});
model.material('mat2').propertyGroup('def').set('porosity', {'0.3'});
model.material('mat2').propertyGroup('def').set('hydraulicpermeability', {'1e-11'});
model.material('mat2').propertyGroup.create('PoroelasticModel', 'Poroelastic_material');
model.material('mat2').propertyGroup('PoroelasticModel').set('alphaB', {'0.3'});
model.material('mat2').propertyGroup.create('PoroacousticsModel', 'Poroacoustics_model');
model.material('mat2').propertyGroup('PoroacousticsModel').set('tau', {'tauP'});

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('size').set('hauto', 2);
model.mesh('mesh1').feature('map1').set('adjustedgdistr', true);
model.mesh('mesh1').feature('map1').create('size1', 'Size');
model.mesh('mesh1').feature('map1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').feature('size1').selection.named('sel1');
model.mesh('mesh1').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmax', 'ht');
model.mesh('mesh1').run;
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(2);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('bl1').selection.set([2 6]);
model.mesh('mesh1').feature('bl1').set('smoothtransition', false);
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([6 12 17 22 24 29 31 36 38 43 45 50 52 57 59 64 66 71 73 78 80 85 87 92 94 99 105 110 112 117 119 124 126 131 133 138 140 145 147 152 154 159 161 166 168 173 175 180 182 187 189 194 196 201 203 208 210 215 217 222 224 229 231 236 238 243 245 250 252 257 259 264 266 271]);
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 4);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', 'ht/2');
model.mesh('mesh1').run;

model.study('std1').feature('freq').set('plist', 'range(20,20,2000)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(20,20,2000)'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (apb1) (Merged)');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 100, 0);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 100, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').label('Sound Pressure Level (acpr)');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'dset1');
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('hasspacevars', false);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'rev1');
model.result('pg3').setIndex('looplevel', 100, 0);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg3').feature('surf1').set('colortable', 'Wave');
model.result('pg3').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').label('Acoustic Pressure, 3D (acpr)');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'rev1');
model.result('pg4').setIndex('looplevel', 100, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg4').feature('surf1').set('colortable', 'Rainbow');
model.result('pg4').feature('surf1').set('colorscalemode', 'linear');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').label('Sound Pressure Level, 3D (acpr)');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 100, 0);
model.result('pg5').set('defaultPlotID', 'stress');
model.result('pg5').label('Stress (solid)');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'solid.misesGp_peak'});
model.result('pg5').feature('surf1').set('threshold', 'manual');
model.result('pg5').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg5').feature('surf1').set('colortable', 'Rainbow');
model.result('pg5').feature('surf1').set('colortabletrans', 'none');
model.result('pg5').feature('surf1').set('colorscalemode', 'linear');
model.result('pg5').feature('surf1').set('resolution', 'normal');
model.result('pg5').feature('surf1').set('colortable', 'Prism');
model.result('pg5').feature('surf1').create('def', 'Deform');
model.result('pg5').feature('surf1').feature('def').set('expr', {'u' 'w'});
model.result('pg5').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.dataset.create('dset1solidrev', 'Revolve2D');
model.result.dataset('dset1solidrev').set('data', 'dset1');
model.result.dataset('dset1solidrev').set('revangle', 225);
model.result.dataset('dset1solidrev').set('startangle', -90);
model.result.dataset('dset1solidrev').set('hasspacevars', true);
model.result.dataset('dset1solidrev').set('modenumber', 'solid.mk');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset1solidrev');
model.result('pg6').setIndex('looplevel', 100, 0);
model.result('pg6').set('defaultPlotID', 'stress3D');
model.result('pg6').label('Stress, 3D (solid)');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'solid.misesGp_peak'});
model.result('pg6').feature('surf1').set('threshold', 'manual');
model.result('pg6').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg6').feature('surf1').set('colortable', 'Rainbow');
model.result('pg6').feature('surf1').set('colortabletrans', 'none');
model.result('pg6').feature('surf1').set('colorscalemode', 'linear');
model.result('pg6').feature('surf1').set('colortable', 'Prism');
model.result('pg6').feature('surf1').create('def', 'Deform');
model.result.dataset('dset1solidrev').set('hasspacevars', true);
model.result('pg6').feature('surf1').feature('def').set('revcoordsys', 'cylindrical');
model.result('pg6').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg6').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg6').feature('surf1').feature('def').set('descractive', true);
model.result.dataset.create('rev2', 'Revolve2D');
model.result.dataset('rev2').label('Revolution 2D 3');
model.result.dataset('rev2').set('data', 'none');
model.result.dataset('rev2').set('startangle', -90);
model.result.dataset('rev2').set('revangle', 225);
model.result.dataset('rev2').set('hasspacevars', 'on');
model.result.dataset('rev2').set('spacevars', {'rev1x' 'rev1y' 'rev1z'});
model.result.dataset('rev2').set('anglevar', 'rev1phi');
model.result.dataset('rev2').set('data', 'dset1');
model.result.dataset('rev2').selection.geom('geom1', 2);
model.result.dataset('rev2').selection.set([3 4 5 11 12 13 17 18 19 23 24 25 29 30 31 35 36 37 41 42 43 47 48 49 53 54 55 59 60 61 65 66 67 71 72 73 77 78 79 83 84 85 89 90 91 95 96 97 101 102 103 107 108 109 113 114 115]);
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').label('Displacement (pelw)');
model.result('pg7').set('dataisaxisym', 'off');
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 100, 0);
model.result('pg7').set('defaultPlotID', 'poroelasticwaves/PoroelasticWavesSinglePhysics/icom5/pdef1/pcond2/pg1');
model.result('pg7').feature.create('surf1', 'Surface');
model.result('pg7').feature('surf1').label('Surface');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('expr', 'pelw.disp');
model.result('pg7').feature('surf1').set('colortable', 'Rainbow');
model.result('pg7').feature('surf1').set('colorscalemode', 'linear');
model.result('pg7').feature('surf1').set('smooth', 'internal');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('data', 'parent');
model.result('pg7').feature('surf1').feature.create('def1', 'Deform');
model.result('pg7').feature('surf1').feature('def1').label('Deformation');
model.result('pg7').feature('surf1').feature('def1').set('expr', {'u2' 'w2'});
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').label('Displacement, 3D (pelw)');
model.result('pg8').set('data', 'rev2');
model.result('pg8').setIndex('looplevel', 100, 0);
model.result('pg8').set('showlegendsunit', true);
model.result('pg8').set('data', 'rev2');
model.result('pg8').setIndex('looplevel', 100, 0);
model.result('pg8').set('defaultPlotID', 'poroelasticwaves/PoroelasticWavesSinglePhysics/icom5/pdef1/pcond2/pg2');
model.result('pg8').feature.create('surf1', 'Surface');
model.result('pg8').feature('surf1').label('Surface');
model.result('pg8').feature('surf1').set('showsolutionparams', 'on');
model.result('pg8').feature('surf1').set('expr', 'pelw.disp');
model.result('pg8').feature('surf1').set('colortable', 'Rainbow');
model.result('pg8').feature('surf1').set('colorscalemode', 'linear');
model.result('pg8').feature('surf1').set('smooth', 'internal');
model.result('pg8').feature('surf1').set('showsolutionparams', 'on');
model.result('pg8').feature('surf1').set('data', 'parent');
model.result('pg8').feature('surf1').feature.create('def1', 'Deform');
model.result('pg8').feature('surf1').feature('def1').label('Deformation');
model.result('pg8').feature('surf1').feature('def1').set('expr', {'cos(rev1phi)*u2' 'sin(rev1phi)*u2' 'w2'});
model.result('pg1').run;
model.result('pg7').run;
model.result('pg7').create('surf2', 'Surface');
model.result('pg7').feature('surf2').set('expr', 'solid.disp');
model.result('pg7').feature('surf2').set('inheritplot', 'surf1');
model.result('pg7').feature('surf2').set('titletype', 'none');
model.result('pg7').feature('surf2').create('def1', 'Deform');
model.result('pg7').run;
model.result('pg8').run;
model.result('pg8').create('surf2', 'Surface');
model.result('pg8').feature('surf2').set('expr', 'solid.disp');
model.result('pg8').feature('surf2').set('inheritplot', 'surf1');
model.result('pg8').feature('surf2').set('titletype', 'none');
model.result('pg8').feature('surf2').create('def1', 'Deform');
model.result('pg8').feature('surf2').feature('def1').set('revcoordsys', 'cylindrical');
model.result('pg8').run;
model.result('pg8').feature('surf2').feature('def1').set('expr', {'cos(rev1phi)*u2' 'v' 'w'});
model.result('pg8').feature('surf2').feature('def1').setIndex('expr', 'sin(rev1phi)*v2', 1);
model.result('pg8').run;
model.result('pg8').setIndex('looplevel', 1, 0);
model.result('pg8').run;
model.result('pg2').run;
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('SPL at inlet and outlet');
model.result('pg9').create('oct1', 'OctaveBand');
model.result('pg9').feature('oct1').set('quantity', 'bandpower');
model.result('pg9').feature('oct1').set('markerpos', 'datapoints');
model.result('pg9').feature('oct1').set('linewidth', 'preference');
model.result('pg9').feature('oct1').selection.geom('geom1', 1);
model.result('pg9').feature('oct1').selection.set([15]);
model.result('pg9').feature('oct1').set('quantity', 'continuous');
model.result('pg9').feature('oct1').set('legend', true);
model.result('pg9').feature('oct1').set('legendmethod', 'manual');
model.result('pg9').feature('oct1').setIndex('legends', 'SPL at outlet', 0);
model.result('pg9').feature.duplicate('oct2', 'oct1');
model.result('pg9').run;
model.result('pg9').feature('oct2').selection.set([2]);
model.result('pg9').feature('oct2').setIndex('legends', 'SPL at inlet', 0);
model.result('pg9').run;
model.result('pg9').set('legendpos', 'lowerright');
model.result('pg9').set('xlog', false);
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('Transmission Loss');
model.result('pg10').create('oct1', 'OctaveBand');
model.result('pg10').feature('oct1').set('quantity', 'bandpower');
model.result('pg10').feature('oct1').set('markerpos', 'datapoints');
model.result('pg10').feature('oct1').set('linewidth', 'preference');
model.result('pg10').feature('oct1').selection.geom('geom1');
model.result('pg10').feature('oct1').set('expr', 'acpr.port1.P_in');
model.result('pg10').feature('oct1').set('exprtype', 'power');
model.result('pg10').feature('oct1').set('powerref', 'acpr.port2.P_out');
model.result('pg10').feature('oct1').set('quantity', 'continuous');
model.result('pg10').run;
model.result('pg10').set('titletype', 'none');
model.result('pg10').set('ylabelactive', true);
model.result('pg10').set('ylabel', 'Transmission loss (dB)');
model.result('pg10').set('xlog', false);
model.result('pg10').run;
model.result('pg8').run;

model.title('Acoustics of a Particulate-Filter-Like System');

model.description('This 2D axisymmetric model computes the acoustic transmission loss through a particulate-filter-like system using the Poroelastic Waves interface. The example couples pressure acoustics at the inlet and outlet with poroelastic waves in the filter matrix.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('acoustics_particulate_filter.mph');

model.modelNode.label('Components');

out = model;
