function out = model
%
% seated_human_body.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Biomechanics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('eig', 'Eigenfrequency');
model.study('std1').feature('eig').set('chkeigregion', true);
model.study('std1').feature('eig').set('conrad', '1');
model.study('std1').feature('eig').set('conradynhm', '1');
model.study('std1').feature('eig').set('storefact', false);
model.study('std1').feature('eig').set('solnum', 'auto');
model.study('std1').feature('eig').set('notsolnum', 'auto');
model.study('std1').feature('eig').set('outputmap', {});
model.study('std1').feature('eig').set('ngenAUX', '1');
model.study('std1').feature('eig').set('goalngenAUX', '1');
model.study('std1').feature('eig').set('ngenAUX', '1');
model.study('std1').feature('eig').set('goalngenAUX', '1');
model.study('std1').feature('eig').setSolveFor('/physics/mbd', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('m_head', '7.24[kg]', 'Mass of head');
model.param.set('I_head', '0.411[kg*m^2]', 'Moment of inertia of head');
model.param.set('m_torso', '19.9[kg]', 'Mass of torso');
model.param.set('I_torso', '1.627[kg*m^2]', 'Moment of inertia of torso');
model.param.set('m_pelvis', '11.01[kg]', 'Mass of pelvis');
model.param.set('I_pelvis', '0.692[kg*m^2]', 'Moment of inertia of pelvis');
model.param.set('m_thigh', '20.35[kg]', 'Mass of thigh');
model.param.set('I_thigh', '1.18[kg*m^2]', 'Moment of inertia of thigh');
model.param.set('m_viscera', '12.92[kg]', 'Mass of viscera');
model.param.set('k1', '113.7[kN/m]', 'Translational stiffness, head-torso joint');
model.param.set('c1', '0.066[kN/(m/s)]', 'Translational damping coefficient, head-torso joint');
model.param.set('kr1', '0.915[kN*m/rad]', 'Rotational stiffness, head-torso joint');
model.param.set('cr1', '0.340[kN*m/(rad/s)]', 'Rotational damping coefficient, head-torso joint');
model.param.set('k2', '0.299[kN/m]', 'Translational stiffness, torso-pelvis joint');
model.param.set('c2', '1.79[kN/(m/s)]', 'Translational damping coefficient, torso-pelvis joint');
model.param.set('kr2', '0.328[kN*m/rad]', 'Rotational stiffness, torso-pelvis joint');
model.param.set('cr2', '0.724[kN*m/(rad/s)]', 'Rotational damping coefficient, torso-pelvis joint');
model.param.set('k3', '6.40[kN/m]', 'Translational stiffness, pelvis-thigh joint');
model.param.set('c3', '0.061[kN/(m/s)]', 'Translational damping coefficient, pelvis-thigh joint');
model.param.set('kr3', '0.162[kN*m/rad]', 'Rotational stiffness, pelvis-thigh joint');
model.param.set('cr3', '0.030[kN*m/(rad/s)]', 'Rotational damping coefficient, pelvis-thigh joint');
model.param.set('k4', '23.55[kN/m]', 'Translational stiffness, thigh-leg joint');
model.param.set('c4', '0.154[kN/(m/s)]', 'Translational damping coefficient, thigh-leg joint');
model.param.set('kr4', '0.220[kN*m/rad]', 'Rotational stiffness, thigh-leg joint');
model.param.set('cr4', '0.104[kN*m/(rad/s)]', 'Rotational damping coefficient, thigh-leg joint');
model.param.set('kh5', '1.93[kN/m]', 'Horizontal stiffness, viscera-torso joint');
model.param.set('ch5', '0.079[kN/(m/s)]', 'Horizontal damping coefficient, viscera-torso joint');
model.param.set('kv6', '18.37[kN/m]', 'Vertical stiffness, viscera-pelvis joint');
model.param.set('cv6', '0.197[kN/(m/s)]', 'Vertical damping coefficient, viscera-pelvis joint');
model.param.set('kh7', '0.905[kN/m]', 'Horizontal stiffness, seat-pelvis joint');
model.param.set('ch7', '0.015[kN/(m/s)]', 'Horizontal damping coefficient, seat-pelvis joint');
model.param.set('kv7', '121.3[kN/m]', 'Vertical stiffness, seat-pelvis joint');
model.param.set('cv7', '0.047[kN/(m/s)]', 'Vertical damping coefficient, seat-pelvis joint');
model.param.set('kh8', '0.614[kN/m]', 'Horizontal stiffness, seat-thigh joint');
model.param.set('ch8', '0.014[kN/(m/s)]', 'Horizontal damping coefficient, seat-thigh joint');
model.param.set('kv8', '16.71[kN/m]', 'Vertical stiffness, seat-thigh joint');
model.param.set('cv8', '8.01[kN/(m/s)]', 'Vertical damping coefficient, seat-thigh joint');
model.param.set('vtt_in', '1[m/s^2]', 'Input acceleration');
model.param.set('i_c', '1', 'Damping controller');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'seated_human_body.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').run('fin');

model.physics('mbd').prop('AutoModeling').set('MassMI', true);
model.physics('mbd').prop('AutoModeling').runCommand('createRigidDomains');
model.physics('mbd').feature('rd1').label('Rigid Material: Pelvis');
model.physics('mbd').feature('rd1').feature('mmi1').set('mt', 'm_pelvis');
model.physics('mbd').feature('rd1').feature('mmi1').set('Iz', 'I_pelvis');
model.physics('mbd').feature('rd1').feature('mmi1').set('CenterOfMassType', 'CentroidOfSelectedEntities');
model.physics('mbd').feature('rd1').feature('mmi1').set('EntityLevel', 'Point');
model.physics('mbd').feature('rd1').feature('mmi1').feature('cmp1').selection.set([11]);
model.physics('mbd').feature('rd2').label('Rigid Material: Head');
model.physics('mbd').feature('rd2').feature('mmi1').set('mt', 'm_head');
model.physics('mbd').feature('rd2').feature('mmi1').set('Iz', 'I_head');
model.physics('mbd').feature('rd2').feature('mmi1').set('CenterOfMassType', 'CentroidOfSelectedEntities');
model.physics('mbd').feature('rd2').feature('mmi1').set('EntityLevel', 'Point');
model.physics('mbd').feature('rd2').feature('mmi1').feature('cmp1').selection.set([25]);
model.physics('mbd').feature('rd3').label('Rigid Material: Torso');
model.physics('mbd').feature('rd3').feature('mmi1').set('mt', 'm_torso');
model.physics('mbd').feature('rd3').feature('mmi1').set('Iz', 'I_torso');
model.physics('mbd').feature('rd3').feature('mmi1').set('CenterOfMassType', 'CentroidOfSelectedEntities');
model.physics('mbd').feature('rd3').feature('mmi1').set('EntityLevel', 'Point');
model.physics('mbd').feature('rd3').feature('mmi1').feature('cmp1').selection.set([46]);
model.physics('mbd').feature('rd4').label('Rigid Material: Viscera');
model.physics('mbd').feature('rd4').feature('mmi1').set('mt', 'm_viscera');
model.physics('mbd').feature('rd4').feature('mmi1').set('CenterOfMassType', 'CentroidOfSelectedEntities');
model.physics('mbd').feature('rd4').feature('mmi1').set('EntityLevel', 'Point');
model.physics('mbd').feature('rd4').feature('mmi1').feature('cmp1').selection.set([55]);
model.physics('mbd').feature('rd5').label('Rigid Material: Thigh');
model.physics('mbd').feature('rd5').feature('mmi1').set('mt', 'm_thigh');
model.physics('mbd').feature('rd5').feature('mmi1').set('Iz', 'I_thigh');
model.physics('mbd').feature('rd5').feature('mmi1').set('CenterOfMassType', 'CentroidOfSelectedEntities');
model.physics('mbd').feature('rd5').feature('mmi1').set('EntityLevel', 'Point');
model.physics('mbd').feature('rd5').feature('mmi1').feature('cmp1').selection.set([62]);
model.physics('mbd').feature('rd4').create('pdr1', 'PrescribedDispRot', -1);
model.physics('mbd').feature('rd4').feature('pdr1').set('RotationType', 'ConstrainedRotationGroup');
model.physics('mbd').feature('rd6').label('Rigid Material: Leg');
model.physics('mbd').create('bsm1', 'BaseMotion', -1);
model.physics('mbd').feature('bsm1').label('Base Motion: Seat');
model.physics('mbd').feature('bsm1').set('BaseMotionType', 'Acceleration');
model.physics('mbd').feature('bsm1').set('ab', {'0' 'vtt_in' '0'});
model.physics('mbd').create('fxj1', 'FixedJoint', -1);
model.physics('mbd').feature('fxj1').label('Fixed Joint: Head-Torso');
model.physics('mbd').feature('fxj1').set('Source', 'rd2');
model.physics('mbd').feature('fxj1').set('Destination', 'rd3');
model.physics('mbd').feature('fxj1').set('EntityLevel', 'Point');
model.physics('mbd').feature('fxj1').set('JointElasticity', 'ElasticJoint');
model.physics('mbd').feature('fxj1').feature('cjp1').selection.set([24]);
model.physics('mbd').feature('fxj1').feature('je1').set('k_u', {'k1' '0' '0' '0' 'k1' '0' '0' '0' '0'});
model.physics('mbd').feature('fxj1').feature('je1').set('k_th', 'kr1');
model.physics('mbd').feature('fxj1').feature('je1').set('c_u', {'if(i_c==1,c1,0)' '0' '0' '0' 'if(i_c==1,c1,0)' '0' '0' '0' '0'});
model.physics('mbd').feature('fxj1').feature('je1').set('c_th', 'if(i_c==1,cr1,0)');
model.physics('mbd').feature.duplicate('fxj2', 'fxj1');
model.physics('mbd').feature('fxj2').label('Fixed Joint: Torso-Pelvis');
model.physics('mbd').feature('fxj2').set('Source', 'rd3');
model.physics('mbd').feature('fxj2').set('Destination', 'rd1');
model.physics('mbd').feature('fxj2').feature('cjp1').selection.set([39]);
model.physics('mbd').feature('fxj2').feature('je1').set('k_u', {'k2' '0' '0' '0' 'k2' '0' '0' '0' 'k2'});
model.physics('mbd').feature('fxj2').feature('je1').set('k_th', 'kr2');
model.physics('mbd').feature('fxj2').feature('je1').set('c_u', {'if(i_c==1,c2,0)' '0' '0' '0' 'if(i_c==1,c2,0)' '0' '0' '0' 'if(i_c==1,c2,0)'});
model.physics('mbd').feature('fxj2').feature('je1').set('c_th', 'if(i_c==1,cr2,0)');
model.physics('mbd').feature.duplicate('fxj3', 'fxj2');
model.physics('mbd').feature('fxj3').label('Fixed Joint: Pelvis-Thigh');
model.physics('mbd').feature('fxj3').set('Source', 'rd1');
model.physics('mbd').feature('fxj3').set('Destination', 'rd5');
model.physics('mbd').feature('fxj3').feature('cjp1').selection.set([14]);
model.physics('mbd').feature('fxj3').feature('je1').set('k_u', {'k3' '0' '0' '0' 'k3' '0' '0' '0' 'k3'});
model.physics('mbd').feature('fxj3').feature('je1').set('k_th', 'kr3');
model.physics('mbd').feature('fxj3').feature('je1').set('c_u', {'if(i_c==1,c3,0)' '0' '0' '0' 'if(i_c==1,c3,0)' '0' '0' '0' 'if(i_c==1,c3,0)'});
model.physics('mbd').feature('fxj3').feature('je1').set('c_th', 'if(i_c==1,cr3,0)');
model.physics('mbd').feature.duplicate('fxj4', 'fxj3');
model.physics('mbd').feature('fxj4').label('Fixed Joint: Thigh-Leg');
model.physics('mbd').feature('fxj4').set('Source', 'rd5');
model.physics('mbd').feature('fxj4').set('Destination', 'rd6');
model.physics('mbd').feature('fxj4').feature('cjp1').selection.set([64]);
model.physics('mbd').feature('fxj4').feature('je1').set('k_u', {'k4' '0' '0' '0' 'k4' '0' '0' '0' 'k4'});
model.physics('mbd').feature('fxj4').feature('je1').set('k_th', 'kr4');
model.physics('mbd').feature('fxj4').feature('je1').set('c_u', {'if(i_c==1,c4,0)' '0' '0' '0' 'if(i_c==1,c4,0)' '0' '0' '0' 'if(i_c==1,c4,0)'});
model.physics('mbd').feature('fxj4').feature('je1').set('c_th', 'if(i_c==1,cr4,0)');
model.physics('mbd').feature.duplicate('fxj5', 'fxj4');
model.physics('mbd').feature('fxj5').label('Fixed Joint: Viscera-Torso');
model.physics('mbd').feature('fxj5').set('Source', 'rd4');
model.physics('mbd').feature('fxj5').set('Destination', 'rd3');
model.physics('mbd').feature('fxj5').feature('cjp1').selection.set([55]);
model.physics('mbd').feature('fxj5').feature('je1').set('k_u', {'kh5' '0' '0' '0' '0' '0' '0' '0' '0'});
model.physics('mbd').feature('fxj5').feature('je1').set('k_th', 0);
model.physics('mbd').feature('fxj5').feature('je1').set('c_u', {'if(i_c==1,ch5,0)' '0' '0' '0' '0' '0' '0' '0' '0'});
model.physics('mbd').feature('fxj5').feature('je1').set('c_th', 0);
model.physics('mbd').feature.duplicate('fxj6', 'fxj5');
model.physics('mbd').feature('fxj6').label('Fixed Joint: Viscera-Pelvis');
model.physics('mbd').feature('fxj6').set('Destination', 'rd1');
model.physics('mbd').feature('fxj6').feature('je1').set('k_u', {'0' '0' '0' '0' 'kv6' '0' '0' '0' '0'});
model.physics('mbd').feature('fxj6').feature('je1').set('c_u', {'0' '0' '0' '0' 'if(i_c==1,cv6,0)' '0' '0' '0' '0'});
model.physics('mbd').feature.duplicate('fxj7', 'fxj6');
model.physics('mbd').feature('fxj7').label('Fixed Joint: Seat-Pelvis');
model.physics('mbd').feature('fxj7').set('Source', 'bsm1');
model.physics('mbd').feature('fxj7').feature('cjp1').selection.set([13]);
model.physics('mbd').feature('fxj7').feature('je1').set('k_u', {'kh7' '0' '0' '0' 'kv7' '0' '0' '0' '0'});
model.physics('mbd').feature('fxj7').feature('je1').set('c_u', {'if(i_c==1,ch7,0)' '0' '0' '0' 'if(i_c==1,cv7,0)' '0' '0' '0' '0'});
model.physics('mbd').feature.duplicate('fxj8', 'fxj7');
model.physics('mbd').feature('fxj8').label('Fixed Joint: Seat-Thigh');
model.physics('mbd').feature('fxj8').set('Destination', 'rd5');
model.physics('mbd').feature('fxj8').feature('cjp1').selection.set([61]);
model.physics('mbd').feature('fxj8').feature('je1').set('k_u', {'kh8' '0' '0' '0' 'kv8' '0' '0' '0' '0'});
model.physics('mbd').feature('fxj8').feature('je1').set('c_u', {'if(i_c==1,ch8,0)' '0' '0' '0' 'if(i_c==1,cv8,0)' '0' '0' '0' '0'});
model.physics('mbd').feature.duplicate('fxj9', 'fxj8');
model.physics('mbd').feature('fxj9').label('Fixed Joint: Seat-Leg');
model.physics('mbd').feature('fxj9').set('Destination', 'rd6');
model.physics('mbd').feature('fxj9').feature('cjp1').selection.set([69 70]);
model.physics('mbd').feature('fxj9').set('JointElasticity', 'RigidJoint');
model.physics('mbd').feature('fxj8').set('JointForcesAndMoments', 'ComputedUsingWeakConstraints');
model.physics('mbd').feature('fxj7').set('JointForcesAndMoments', 'ComputedUsingWeakConstraints');

model.nodeGroup.create('grp2', 'Physics', 'mbd');
model.nodeGroup('grp2').placeAfter('bsm1');
model.nodeGroup('grp2').add('fxj1');
model.nodeGroup('grp2').add('fxj2');
model.nodeGroup('grp2').add('fxj3');
model.nodeGroup('grp2').add('fxj4');
model.nodeGroup('grp2').add('fxj5');
model.nodeGroup('grp2').add('fxj6');
model.nodeGroup('grp2').add('fxj7');
model.nodeGroup('grp2').add('fxj8');
model.nodeGroup('grp2').add('fxj9');
model.nodeGroup('grp2').label('Fixed Joints');

model.mesh('mesh1').autoMeshSize(7);
model.mesh('mesh1').run;

model.study('std1').label('Study 1: Eigenfrequency');
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'm_head', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'kg', 0);
model.study('std1').feature('param').setIndex('pname', 'm_head', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'kg', 0);
model.study('std1').feature('param').setIndex('pname', 'i_c', 0);
model.study('std1').feature('param').setIndex('plistarr', '0 1', 0);
model.study('std1').feature('eig').set('neigsactive', true);
model.study('std1').feature('eig').set('neigs', 12);
model.study('std1').feature('eig').set('shift', '0');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'eig');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_fxj8_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_fxj7_Rphi').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_fxj8_Rphi').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_fxj7_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.012066654877709018');
model.sol('sol1').feature('v1').feature('comp1_mbd_fxj8_RF').set('scaleval', '1e8*(0.1*1.2066654877709018)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_fxj7_Rphi').set('scaleval', '1e8*(0.1*1.2066654877709018)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scaleval', '0.012066654877709018');
model.sol('sol1').feature('v1').feature('comp1_mbd_fxj8_Rphi').set('scaleval', '1e8*(0.1*1.2066654877709018)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_fxj7_RF').set('scaleval', '1e8*(0.1*1.2066654877709018)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*1.2066654877709018');
model.sol('sol1').feature('v1').set('control', 'eig');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol1').feature('e1').set('eigvfunscaleparam', '1.2099999999999998E-6');
model.sol('sol1').feature('e1').set('control', 'eig');
model.sol('sol1').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'i_c'});
model.batch('p1').set('plistarr', {'0 1'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Mode Shape (mbd)');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').set('showlegends', 'off');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').set('defaultPlotID', 'modeShape');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result.evaluationGroup.create('std1EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std1EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_mbd');
model.result.evaluationGroup('std1EvgFrq').set('data', 'dset2');
model.result.evaluationGroup('std1EvgFrq').label('Eigenfrequencies (Study 1: Eigenfrequency)');
model.result.evaluationGroup('std1EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std1EvgFrq').run;
model.result('pg1').run;
model.result('pg1').set('looplevel', [12 2]);
model.result('pg1').run;
model.result('pg1').set('looplevel', [14 2]);
model.result('pg1').run;
model.result('pg1').set('looplevel', [11 1]);
model.result('pg1').run;

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').setSolveFor('/physics/mbd', true);
model.study('std2').label('Study 2: Frequency Response');
model.study('std2').feature('freq').set('plist', 'range(2,0.2,20)');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('H_vert', 'abs(mbd.rd2.u_tty)/vtt_in');
model.variable('var1').descr('H_vert', 'Vertical transmissibility');
model.variable('var1').set('H_rot', 'abs(mbd.rd2.th_ttz)/vtt_in');
model.variable('var1').descr('H_rot', 'Rotational transmissibility');
model.variable('var1').set('M_a', 'abs(mbd.fxj7.Fy+mbd.fxj8.Fy)/vtt_in');
model.variable('var1').descr('M_a', 'Apparent mass');

model.sol.create('sol5');
model.sol('sol5').study('std2');
model.sol('sol5').create('st1', 'StudyStep');
model.sol('sol5').feature('st1').set('study', 'std2');
model.sol('sol5').feature('st1').set('studystep', 'freq');
model.sol('sol5').create('v1', 'Variables');
model.sol('sol5').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp1_mbd_fxj8_RF').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp1_mbd_fxj7_Rphi').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp1_mbd_jnt_disp').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp1_mbd_fxj8_Rphi').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp1_mbd_fxj7_RF').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol5').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol5').feature('v1').feature('comp1_mbd_jnt_disp').set('resscalemethod', 'parent');
model.sol('sol5').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol5').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol5').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.012066654877709018');
model.sol('sol5').feature('v1').feature('comp1_mbd_fxj8_RF').set('scaleval', '1e8*(0.1*1.2066654877709018)^2');
model.sol('sol5').feature('v1').feature('comp1_mbd_fxj7_Rphi').set('scaleval', '1e8*(0.1*1.2066654877709018)^3');
model.sol('sol5').feature('v1').feature('comp1_mbd_jnt_disp').set('scaleval', '0.012066654877709018');
model.sol('sol5').feature('v1').feature('comp1_mbd_fxj8_Rphi').set('scaleval', '1e8*(0.1*1.2066654877709018)^3');
model.sol('sol5').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol5').feature('v1').feature('comp1_mbd_fxj7_RF').set('scaleval', '1e8*(0.1*1.2066654877709018)^2');
model.sol('sol5').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol5').feature('v1').feature('comp1_u').set('scaleval', '1e-2*1.2066654877709018');
model.sol('sol5').feature('v1').set('control', 'freq');
model.sol('sol5').create('s1', 'Stationary');
model.sol('sol5').feature('s1').create('p1', 'Parametric');
model.sol('sol5').feature('s1').feature.remove('pDef');
model.sol('sol5').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol5').feature('s1').feature('p1').set('plistarr', {'range(2,0.2,20)'});
model.sol('sol5').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol5').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol5').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol5').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol5').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol5').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol5').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol5').feature('s1').feature('p1').set('probes', {});
model.sol('sol5').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol5').feature('s1').set('linpmethod', 'sol');
model.sol('sol5').feature('s1').set('linpsol', 'zero');
model.sol('sol5').feature('s1').set('control', 'freq');
model.sol('sol5').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol5').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol5').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol5').feature('s1').feature('fc1').set('jtech', 'onevery');
model.sol('sol5').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol5').feature('s1').feature('fc1').set('damp', 1);
model.sol('sol5').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol5').feature('s1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol5').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol5').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol5').feature('s1').feature('fc1').set('jtech', 'onevery');
model.sol('sol5').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol5').feature('s1').feature('fc1').set('damp', 1);
model.sol('sol5').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol5').feature('s1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol5').feature('s1').feature.remove('fcDef');
model.sol('sol5').attach('std2');
model.sol('sol5').runAll;

model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Displacement (mbd)');
model.result('pg2').set('data', 'dset3');
model.result('pg2').setIndex('looplevel', 91, 0);
model.result('pg2').set('data', 'dset3');
model.result('pg2').setIndex('looplevel', 91, 0);
model.result('pg2').set('defaultPlotID', 'displacement');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature('surf1').feature.create('def1', 'Deform');
model.result('pg2').feature('surf1').feature('def1').label('Deformation');
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Vertical Transmissibility');
model.result('pg3').set('data', 'dset3');
model.result('pg3').set('titletype', 'none');
model.result('pg3').set('xlabelactive', true);
model.result('pg3').set('xlabel', 'Frequency (Hz)');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').set('expr', {'H_vert'});
model.result('pg3').feature('glob1').set('descr', {'Vertical transmissibility'});
model.result('pg3').feature('glob1').set('unit', {'1'});
model.result('pg3').feature('glob1').set('linewidth', 2);
model.result('pg3').feature('glob1').set('legend', false);
model.result('pg3').run;
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Rotational Transmissibility');
model.result('pg4').run;
model.result('pg4').feature('glob1').setIndex('expr', 'H_rot', 0);
model.result('pg4').feature('glob1').setIndex('unit', 'deg/m', 0);
model.result('pg4').feature('glob1').setIndex('descr', 'Rotational transmissibility', 0);
model.result('pg4').run;
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Apparent Mass');
model.result('pg5').run;
model.result('pg5').feature('glob1').set('expr', {'M_a'});
model.result('pg5').feature('glob1').set('descr', {'Apparent mass'});
model.result('pg5').feature('glob1').set('unit', {'kg'});
model.result('pg5').run;
model.result('pg1').run;

model.title('Biomechanical Model of the Human Body in a Sitting Posture');

model.description('A biomechanical model of the human body is developed for evaluating the dynamic response to the vertical vibrations in a sitting posture. The Multibody Dynamics interface is used to model various parts, and connections in a human body and study the whole body vibrations (WBV) in the same.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;

model.label('seated_human_body.mph');

model.modelNode.label('Components');

out = model;
