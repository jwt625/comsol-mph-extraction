function out = model
%
% cu_trench_deposition.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Electrodeposition_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('tcd', 'TertiaryCurrentDistributionNernstPlanck', 'geom1', {'cCu' 'cSO4'});

model.multiphysics.create('ndbdg1', 'NonDeformingBoundaryDeformedGeometry', 'geom1', 1);
model.multiphysics('ndbdg1').set('Echem_physics', 'tcd');
model.multiphysics('ndbdg1').selection.all;
model.multiphysics.create('desdg1', 'DeformingElectrodeSurfaceDeformedGeometry', 'geom1', 1);
model.multiphysics('desdg1').set('Echem_physics', 'tcd');
model.multiphysics('desdg1').selection.all;

model.common.create('free1', 'DeformingDomainDeformedGeometry', 'comp1');
model.common('free1').set('smoothingType', 'hyperelastic');
model.common('free1').selection.all;

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/tcd', true);
model.study('std1').feature('cdi').setSolveFor('/multiphysics/ndbdg1', true);
model.study('std1').feature('cdi').setSolveFor('/multiphysics/desdg1', true);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('initialtime', '0');
model.study('std1').feature('time').set('solnum', 'auto');
model.study('std1').feature('time').set('notsolnum', 'auto');
model.study('std1').feature('time').set('outputmap', {});
model.study('std1').feature('time').setSolveFor('/physics/tcd', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/ndbdg1', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/desdg1', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('Cinit', '500[mol/(m^3)]', 'Initial concentration');
model.param.set('T0', '298[K]', 'System temperature');
model.param.set('i0_ref', '250[A/m^2]', 'Exchange current density for reference conditions');
model.param.set('phis_anode', '0.135[V]', 'Anode potential');
model.param.set('phis_cathode', '-0.135[V]', 'Cathode potential');
model.param.set('alpha_a', '1.5[1]', 'Symmetry factor');
model.param.set('z_Cu', '2[1]', 'Charge, species Cu');
model.param.set('z_SO4', '-2[1]', 'Charge, species SO4');
model.param.set('D_Cu', '2e-9[m^2/s]', 'Diffusivity, species Cu');
model.param.set('D_SO4', 'D_Cu', 'Diffusivity, species SO4 ');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'1.6e-5' '3e-5'});
model.geom('geom1').feature('r1').set('pos', {'-0.8e-5' '1e-5'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'0.4e-5' '1e-5'});
model.geom('geom1').feature('r2').set('pos', {'-0.2e-5' '0'});
model.geom('geom1').run('r2');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').set('intbnd', false);
model.geom('geom1').feature('uni1').selection('input').set({'r1' 'r2'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('fil1', 'Fillet');
model.geom('geom1').feature('fil1').selection('point').set('uni1', [3 4 5 6]);
model.geom('geom1').feature('fil1').set('radius', '1e-6');
model.geom('geom1').run('fin');

model.physics('tcd').feature('sp1').setIndex('z', 'z_Cu', 0);
model.physics('tcd').feature('sp1').setIndex('z', 'z_SO4', 1);
model.physics('tcd').feature('ice1').set('D_cCu', {'D_Cu' '0' '0' '0' 'D_Cu' '0' '0' '0' 'D_Cu'});
model.physics('tcd').feature('ice1').set('D_cSO4', {'D_SO4' '0' '0' '0' 'D_SO4' '0' '0' '0' 'D_SO4'});
model.physics('tcd').create('es1', 'ElectrodeSurface', 1);
model.physics('tcd').feature('es1').selection.set([3]);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(1);
model.selection('sel1').label('Anode');
model.selection('sel1').set([3]);

model.physics('tcd').feature('es1').selection.named('sel1');
model.physics('tcd').feature('es1').set('phisext0', 'phis_anode');
model.physics('tcd').feature('es1').setIndex('Species', 's1', 0, 0);
model.physics('tcd').feature('es1').setIndex('rhos', 8960, 0, 0);
model.physics('tcd').feature('es1').setIndex('Ms', 0.06355, 0, 0);
model.physics('tcd').feature('es1').setIndex('Species', 's1', 0, 0);
model.physics('tcd').feature('es1').setIndex('rhos', 8960, 0, 0);
model.physics('tcd').feature('es1').setIndex('Ms', 0.06355, 0, 0);
model.physics('tcd').feature('es1').setIndex('Species', 'cdep_anode', 0, 0);
model.physics('tcd').feature('es1').feature('er1').set('nm', 2);
model.physics('tcd').feature('es1').feature('er1').setIndex('Vib', 1, 0, 0);
model.physics('tcd').feature('es1').feature('er1').set('i0_ref', 'i0_ref');
model.physics('tcd').feature('es1').feature('er1').set('alphaa', 'alpha_a');
model.physics('tcd').feature.duplicate('es2', 'es1');
model.physics('tcd').feature('es2').selection.set([2 4 5 6 7 9 10 11 12]);

model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').geom(1);
model.selection('sel2').label('Cathode');
model.selection('sel2').set([2 4 5 6 7 9 10 11 12]);

model.physics('tcd').feature('es2').selection.named('sel2');
model.physics('tcd').feature('es2').set('phisext0', 'phis_cathode');
model.physics('tcd').feature('es2').feature('er1').setIndex('Vib', 1, 0, 0);
model.physics('tcd').feature('init1').setIndex('initc', 'Cinit', 1);

model.common('cminpt').set('modified', {'temperature' 'T0'});

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('hauto', 2);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', '5e-7');
model.mesh('mesh1').feature('size').set('hcurve', 1);
model.mesh('mesh1').feature('size').set('hnarrow', 10);
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tlist', 'range(0,0.5,5)');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_material_disp').set('scaleval', '1.8481755868964397E-7');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_material_disp').set('scaleval', '1.8481755868964397E-7');
model.sol('sol1').feature('v2').feature('comp1_material_lm').set('out', 'off');
model.sol('sol1').feature('v2').feature('comp1_material_lm_nv').set('out', 'off');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.5,5)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventout', true);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('mumpsalloc', 1.4);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 11, 0);
model.result('pg1').label('Electrolyte Potential (tcd)');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'phil'});
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('recover', 'pprint');
model.result('pg1').feature('str1').set('pointtype', 'arrow');
model.result('pg1').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg1').feature('str1').set('color', 'gray');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 11, 0);
model.result('pg2').label('Electrolyte Current Density (tcd)');
model.result('pg2').create('str1', 'Streamline');
model.result('pg2').feature('str1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg2').feature('str1').set('posmethod', 'uniform');
model.result('pg2').feature('str1').set('recover', 'pprint');
model.result('pg2').feature('str1').set('pointtype', 'arrow');
model.result('pg2').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg2').feature('str1').set('color', 'gray');
model.result('pg2').feature('str1').create('col1', 'Color');
model.result('pg2').feature('str1').feature('col1').set('expr', 'root.comp1.tcd.IlMag');
model.result('pg2').create('line1', 'Line');
model.result('pg2').feature('line1').set('expr', {'abs(tcd.itot)'});
model.result('pg2').feature('line1').set('linetype', 'tube');
model.result('pg2').feature('line1').set('inherittubescale', false);
model.result('pg2').feature('line1').set('inheritplot', 'str1');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 11, 0);
model.result('pg3').label('Electrode Potential with Respect to Ground (tcd)');
model.result('pg3').create('line1', 'Line');
model.result('pg3').feature('line1').set('expr', {'tcd.phisext'});
model.result('pg3').feature('line1').set('linetype', 'tube');
model.result('pg3').feature('line1').set('inherittubescale', false);
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 11, 0);
model.result('pg4').label('Electrode Potential vs. Adjacent Reference (tcd)');
model.result('pg4').create('str1', 'Streamline');
model.result('pg4').feature('str1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg4').feature('str1').set('posmethod', 'uniform');
model.result('pg4').feature('str1').set('recover', 'pprint');
model.result('pg4').feature('str1').set('pointtype', 'arrow');
model.result('pg4').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg4').feature('str1').set('color', 'gray');
model.result('pg4').create('line1', 'Line');
model.result('pg4').feature('line1').set('expr', {'tcd.Evsref'});
model.result('pg4').feature('line1').set('linetype', 'tube');
model.result('pg4').feature('line1').set('inherittubescale', false);
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 11, 0);
model.result('pg5').label('Total Electrode Thickness Change (tcd)');
model.result('pg5').create('line1', 'Line');
model.result('pg5').feature('line1').set('expr', {'tcd.sbtot'});
model.result('pg5').feature('line1').set('linetype', 'tube');
model.result('pg5').feature('line1').set('inherittubescale', false);
model.result('pg5').feature('line1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 11, 0);
model.result('pg6').label('Concentration, Cu (tcd)');
model.result('pg6').set('titletype', 'custom');
model.result('pg6').set('prefixintitle', 'Species Cu:');
model.result('pg6').set('expressionintitle', false);
model.result('pg6').set('typeintitle', true);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'cCu'});
model.result('pg6').create('str1', 'Streamline');
model.result('pg6').feature('str1').set('expr', {'tcd.tflux_cCux' 'tcd.tflux_cCuy'});
model.result('pg6').feature('str1').set('posmethod', 'uniform');
model.result('pg6').feature('str1').set('recover', 'pprint');
model.result('pg6').feature('str1').set('pointtype', 'arrow');
model.result('pg6').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg6').feature('str1').set('color', 'gray');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 11, 0);
model.result('pg7').label('Concentration, SO4 (tcd)');
model.result('pg7').set('titletype', 'custom');
model.result('pg7').set('prefixintitle', 'Species SO4:');
model.result('pg7').set('expressionintitle', false);
model.result('pg7').set('typeintitle', true);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'cSO4'});
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('expr', {'tcd.tflux_cSO4x' 'tcd.tflux_cSO4y'});
model.result('pg7').feature('str1').set('posmethod', 'uniform');
model.result('pg7').feature('str1').set('recover', 'pprint');
model.result('pg7').feature('str1').set('pointtype', 'arrow');
model.result('pg7').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg7').feature('str1').set('color', 'gray');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').set('data', 'dset1');
model.result('pg8').setIndex('looplevel', 11, 0);
model.result('pg8').label('Deformed Geometry');
model.result('pg8').create('mesh1', 'Mesh');
model.result('pg8').feature('mesh1').set('meshdomain', 'surface');
model.result('pg8').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg8').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg8').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg8').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg8').feature('mesh1').feature('sel1').selection.set([1]);
model.result('pg8').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg8').feature('mesh1').set('qualexpr', 'comp1.material.relVol');
model.result('pg8').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg1').run;
model.result('pg6').run;
model.result('pg6').create('con1', 'Contour');
model.result('pg6').feature('con1').set('expr', 'cCu');
model.result('pg6').feature('con1').set('descr', 'Concentration');
model.result('pg6').feature('con1').set('coloring', 'uniform');
model.result('pg6').feature('con1').set('color', 'black');
model.result('pg6').feature('con1').set('colorlegend', false);
model.result('pg6').run;
model.result('pg6').feature('str1').set('posmethod', 'selection');
model.result('pg6').feature('str1').selection.named('sel1');
model.result('pg6').feature('str1').set('selnumber', 15);
model.result('pg6').run;
model.result('pg6').create('line1', 'Line');
model.result('pg6').feature('line1').set('data', 'dset1');
model.result('pg6').feature('line1').setIndex('looplevel', 1, 0);
model.result('pg6').feature('line1').set('coloring', 'uniform');
model.result('pg6').feature('line1').set('color', 'black');
model.result('pg6').feature('line1').set('titletype', 'none');
model.result('pg6').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Deposition Thickness');
model.result('pg9').set('titletype', 'manual');
model.result('pg9').set('title', 'Profile of deposited layer on vertical wall');
model.result('pg9').set('xlabelactive', true);
model.result('pg9').set('xlabel', 'Distance from cavity bottom (\mu m)');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Thickness of deposited layer (\mu m)');
model.result('pg9').create('lngr1', 'LineGraph');
model.result('pg9').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg9').feature('lngr1').set('linewidth', 'preference');
model.result('pg9').feature('lngr1').selection.set([4]);
model.result('pg9').feature('lngr1').set('expr', 'x-Xg');
model.result('pg9').feature('lngr1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg9').feature('lngr1').set('xdata', 'expr');
model.result('pg9').feature('lngr1').set('xdataexpr', 'y');
model.result('pg9').feature('lngr1').set('xdataunit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg9').run;

model.study.create('std2');
model.study('std2').create('cdi', 'CurrentDistributionInitialization');
model.study('std2').feature('cdi').set('solnum', 'auto');
model.study('std2').feature('cdi').set('notsolnum', 'auto');
model.study('std2').feature('cdi').set('outputmap', {});
model.study('std2').feature('cdi').set('ngenAUX', '1');
model.study('std2').feature('cdi').set('goalngenAUX', '1');
model.study('std2').feature('cdi').set('ngenAUX', '1');
model.study('std2').feature('cdi').set('goalngenAUX', '1');
model.study('std2').feature('cdi').setSolveFor('/physics/tcd', true);
model.study('std2').feature('cdi').setSolveFor('/multiphysics/ndbdg1', true);
model.study('std2').feature('cdi').setSolveFor('/multiphysics/desdg1', true);
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').set('plotgroup', 'Default');
model.study('std2').feature('time').set('initialtime', '0');
model.study('std2').feature('time').set('solnum', 'auto');
model.study('std2').feature('time').set('notsolnum', 'auto');
model.study('std2').feature('time').set('outputmap', {});
model.study('std2').feature('time').setSolveFor('/physics/tcd', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/ndbdg1', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/desdg1', true);
model.study('std2').feature('time').set('tlist', 'range(0,1,14)');
model.study('std2').feature('time').set('autoremesh', true);
model.study('std2').setGenPlots(false);

model.sol.create('sol3');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol3').study('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'cdi');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_phil').set('scaleval', '1');
model.sol('sol3').feature('v1').feature('comp1_material_disp').set('scaleval', '1.8481755868964397E-7');
model.sol('sol3').feature('v1').set('control', 'cdi');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').set('stol', 1.0E-4);
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').create('su1', 'StoreSolution');
model.sol('sol3').create('st2', 'StudyStep');
model.sol('sol3').feature('st2').set('study', 'std2');
model.sol('sol3').feature('st2').set('studystep', 'time');
model.sol('sol3').create('v2', 'Variables');
model.sol('sol3').feature('v2').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol3').feature('v2').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol3').feature('v2').feature('comp1_phil').set('scaleval', '1');
model.sol('sol3').feature('v2').feature('comp1_material_disp').set('scaleval', '1.8481755868964397E-7');
model.sol('sol3').feature('v2').feature('comp1_material_lm').set('out', 'off');
model.sol('sol3').feature('v2').feature('comp1_material_lm_nv').set('out', 'off');
model.sol('sol3').feature('v2').set('initmethod', 'sol');
model.sol('sol3').feature('v2').set('initsol', 'sol3');
model.sol('sol3').feature('v2').set('initsoluse', 'sol4');
model.sol('sol3').feature('v2').set('notsolmethod', 'sol');
model.sol('sol3').feature('v2').set('notsol', 'sol3');
model.sol('sol3').feature('v2').set('notsoluse', 'sol4');
model.sol('sol3').feature('v2').set('control', 'time');
model.sol('sol3').create('t1', 'Time');
model.sol('sol3').feature('t1').set('tlist', 'range(0,1,14)');
model.sol('sol3').feature('t1').set('plot', 'off');
model.sol('sol3').feature('t1').set('plotgroup', 'Default');
model.sol('sol3').feature('t1').set('plotfreq', 'tout');
model.sol('sol3').feature('t1').set('probesel', 'all');
model.sol('sol3').feature('t1').set('probes', {});
model.sol('sol3').feature('t1').set('probefreq', 'tsteps');
model.sol('sol3').feature('t1').set('rtol', 0.001);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('eventout', true);
model.sol('sol3').feature('t1').set('reacf', true);
model.sol('sol3').feature('t1').set('storeudot', true);
model.sol('sol3').feature('t1').set('endtimeinterpolation', true);
model.sol('sol3').feature('t1').set('maxorder', 2);
model.sol('sol3').feature('t1').set('control', 'time');
model.sol('sol3').feature('t1').feature('arDef').set('autoremeshgeom', 'geom1');
model.sol('sol3').feature('t1').feature('arDef').set('stopcondtype', 'quality');
model.sol('sol3').feature('t1').feature('arDef').set('stopexpr', 'comp1.material.minqual');
model.sol('sol3').feature('t1').feature('arDef').set('stopval', '0.2');
model.sol('sol3').feature('t1').feature('arDef').set('consistentremesh', 'bweuler');
model.sol('sol3').feature('t1').create('seDef', 'Segregated');
model.sol('sol3').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('t1').create('d1', 'Direct');
model.sol('sol3').feature('t1').feature('d1').set('mumpsalloc', 1.4);
model.sol('sol3').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('t1').feature.remove('fcDef');
model.sol('sol3').feature('t1').feature.remove('seDef');
model.sol('sol3').attach('std2');
model.sol.create('sol5');
model.sol('sol5').label('Remeshed Solution 1');
model.sol('sol5').study('std2');
model.sol('sol3').feature('t1').feature('arDef').set('tadapsol', 'sol5');
model.sol('sol3').runAll;

model.result('pg6').run;
model.result('pg6').set('data', 'dset5');
model.result('pg6').set('looplevel', {'interp'});
model.result('pg6').set('interp', [14]);
model.result('pg6').run;

model.title('Copper Deposition in a Trench');

model.description('This example illustrates how to model the deformed geometry as electrodeposition of copper takes place on a cathode surface. Both concentration dependent electrode kinetics as well as ion transport by diffusion and migration are accounted for, and the model is therefore referred to as a tertiary current density distribution model.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;

model.label('cu_trench_deposition.mph');

model.modelNode.label('Components');

out = model;
