function out = model
%
% les_3d_hill.m
%
% Model exported on May 26 2025, 21:26 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/CFD_Module/Single-Phase_Flow');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'LESRBVM', 'geom1');
model.physics('spf').model('comp1');
model.physics.create('ipf', 'IncompressiblePotentialFlow', 'geom1');
model.physics('ipf').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/physics/ipf', true);

model.param.set('H', '1[m]');
model.param.descr('H', 'Hill height');
model.param.set('ReH', '1.3e5');
model.param.descr('ReH', 'Reynolds number based on H');
model.param.set('rho', '1[kg/m^3]');
model.param.descr('rho', 'Density of the fluid');
model.param.set('U', '2[m/s]');
model.param.descr('U', 'Velocity of the fluid');
model.param.set('mu', 'rho*U*H/ReH');
model.param.descr('mu', 'Viscosity of the fluid');
model.param.set('LTin', '0.1*H');
model.param.descr('LTin', 'Turbulence length scale at the inlet');

model.func.create('an1', 'Analytic');
model.func('an1').model('comp1');
model.func('an1').label('Axisymmetric Hill Profile');
model.func('an1').set('funcname', 'hill');
model.func('an1').set('expr', '-(besselj(0,3.1962)*besseli(0, 3.1962*x/(2*H))-besseli(0,3.1962)*besselj(0, 3.1962*x/(2*H)))*H/6.04844');
model.func('an1').setIndex('plotargs', '2*H', 0, 2);

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'19.8*H' '3.2*H' '1'});
model.geom('geom1').feature('blk1').setIndex('size', '11.7*H', 2);
model.geom('geom1').feature('blk1').set('pos', {'-4.1*H' '0' '-11.7*H/2'});
model.geom('geom1').run('blk1');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').set('quickplane', 'xz');
model.geom('geom1').feature('wp1').geom.create('sq1', 'Square');
model.geom('geom1').feature('wp1').geom.feature('sq1').set('size', '4.5*H');
model.geom('geom1').feature('wp1').geom.feature('sq1').set('base', 'center');
model.geom('geom1').feature('wp1').geom.run('sq1');
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', {'19.8*H' '4.5*H'});
model.geom('geom1').feature('wp1').geom.feature('r1').set('pos', {'-4.1*H' '-2.25*H'});
model.geom('geom1').run('wp1');
model.geom('geom1').create('ls1', 'LineSegment');
model.geom('geom1').feature('ls1').set('specify1', 'coord');
model.geom('geom1').feature('ls1').set('coord1', {'-4.1*H' '0' '0'});
model.geom('geom1').feature('ls1').set('specify2', 'coord');
model.geom('geom1').feature('ls1').set('coord2', {'5*H' '0' '0'});
model.geom('geom1').feature('ls1').set('selresult', true);
model.geom('geom1').run('ls1');
model.geom('geom1').create('wp2', 'WorkPlane');
model.geom('geom1').feature('wp2').set('unite', true);
model.geom('geom1').feature('wp2').set('quickplane', 'zy');
model.geom('geom1').feature('wp2').geom.create('pc1', 'ParametricCurve');
model.geom('geom1').feature('wp2').geom.feature('pc1').set('parmax', '2*H');
model.geom('geom1').feature('wp2').geom.feature('pc1').set('coord', {'s' 'hill(s)'});
model.geom('geom1').feature('wp2').geom.run('pc1');
model.geom('geom1').feature('wp2').geom.create('ls1', 'LineSegment');
model.geom('geom1').feature('wp2').geom.feature('ls1').set('specify1', 'coord');
model.geom('geom1').feature('wp2').geom.feature('ls1').set('specify2', 'coord');
model.geom('geom1').feature('wp2').geom.feature('ls1').set('coord2', {'2*H' '0'});
model.geom('geom1').feature('wp2').geom.run('ls1');
model.geom('geom1').feature('wp2').geom.create('ls2', 'LineSegment');
model.geom('geom1').feature('wp2').geom.feature('ls2').set('specify1', 'coord');
model.geom('geom1').feature('wp2').geom.feature('ls2').set('specify2', 'coord');
model.geom('geom1').feature('wp2').geom.feature('ls2').set('coord2', {'0' 'H'});
model.geom('geom1').feature('wp2').geom.run('ls2');
model.geom('geom1').feature('wp2').geom.create('csol1', 'ConvertToSolid');
model.geom('geom1').feature('wp2').geom.feature('csol1').selection('input').set({'ls1' 'ls2' 'pc1'});
model.geom('geom1').run('wp2');
model.geom('geom1').feature.create('rev1', 'Revolve');
model.geom('geom1').feature('rev1').set('workplane', 'wp2');
model.geom('geom1').feature('rev1').selection('input').set({'wp2'});
model.geom('geom1').feature('rev1').set('angtype', 'full');
model.geom('geom1').run('rev1');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').selection('input').set({'blk1' 'ls1' 'wp1'});
model.geom('geom1').feature('dif1').selection('input2').set({'rev1'});
model.geom('geom1').run('fin');
model.geom('geom1').create('mce1', 'MeshControlEdges');
model.geom('geom1').feature('mce1').selection('input').set('fin', [5 9 15 16 17 19 29 30 31 33]);
model.geom('geom1').run('mce1');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Edge for Cp plot');
model.selection('sel1').geom(1);
model.selection('sel1').set([5 13 18 19]);

model.physics('ipf').prop('PressureProperty').set('UScale', 'U');
model.physics('ipf').prop('ShapeProperty').set('order_velocitypotential', 1);
model.physics('ipf').feature('fp1').set('rho_mat', 'userdef');
model.physics('ipf').feature('fp1').set('rho', 'rho');
model.physics('ipf').create('velbc1', 'Velocity', 2);
model.physics('ipf').feature('velbc1').selection.set([1]);
model.physics('ipf').feature('velbc1').set('Uin', 'U');
model.physics('ipf').create('open1', 'OpenBoundary', 2);
model.physics('ipf').feature('open1').selection.set([10]);
model.physics('spf').prop('TurbulenceModelProperty').set('LESWallTreatment', 'Automatic');
model.physics('spf').feature('fp1').set('rho_mat', 'userdef');
model.physics('spf').feature('fp1').set('rho', 'rho');
model.physics('spf').feature('fp1').set('mu_mat', 'userdef');
model.physics('spf').feature('fp1').set('mu', 'mu');
model.physics('spf').feature.duplicate('init2', 'init1');
model.physics('spf').feature('init2').set('u_init', {'ipf.u' 'ipf.v' 'ipf.w'});
model.physics('spf').feature('init2').set('p_init', 'ipf.p');
model.physics('spf').create('wallbc2', 'WallBC', 2);
model.physics('spf').feature('wallbc2').set('BoundaryCondition', 'Slip');
model.physics('spf').feature('wallbc2').selection.set([3 4]);
model.physics('spf').create('inl1', 'InletBoundary', 2);
model.physics('spf').feature('inl1').selection.set([1]);
model.physics('spf').feature('inl1').set('U0in', 'U*abs(y/(3.2*H))^(1/7)*abs(1-(y/(3.2*H)))^(1/7)/0.75644');
model.physics('spf').feature('inl1').set('includeSyntheticTurb', true);
model.physics('spf').feature('inl1').set('IT_list', 'low_turbulent_intensity');
model.physics('spf').feature('inl1').set('LT_list', 'user_defined');
model.physics('spf').feature('inl1').set('LT', 'LTin');
model.physics('spf').feature('inl1').set('N', 600);
model.physics('spf').create('out1', 'OutletBoundary', 2);
model.physics('spf').feature('out1').selection.set([10]);
model.physics('spf').feature('out1').set('SuppressBackflow', false);

model.mesh('mesh1').contribute('physics/spf', false);
model.mesh('mesh1').contribute('physics/ipf', false);
model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('table', 'cfd');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', '0.1222*H');
model.mesh('mesh1').feature('size').set('hmin', '0.0390*H');
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.set([2 11 12 13 16]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([4 24 36 38]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 25);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([1]);
model.mesh('mesh1').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis2').set('elemcount', 25);
model.mesh('mesh1').feature('map1').feature('dis2').set('elemratio', 2.5);
model.mesh('mesh1').feature('map1').feature('dis2').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map1').feature('dis2').set('reverse', true);
model.mesh('mesh1').feature('map1').feature.duplicate('dis3', 'dis2');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([25]);
model.mesh('mesh1').feature('map1').feature('dis3').set('reverse', false);
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.set([7 9 14]);
model.mesh('mesh1').create('cpf1', 'CopyFace');
model.mesh('mesh1').feature('cpf1').selection('source').geom(2);
model.mesh('mesh1').feature('cpf1').selection('destination').geom(2);
model.mesh('mesh1').feature('cpf1').selection('source').set([7 9 14]);
model.mesh('mesh1').feature('cpf1').selection('destination').set([6 8 15]);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('swe1').feature('dis1').set('elemcount', 82);
model.mesh('mesh1').feature('swe1').feature('dis1').set('elemratio', 82);
model.mesh('mesh1').feature('swe1').feature('dis1').set('growthrate', 'exponential');
model.mesh('mesh1').feature('swe1').feature('dis1').set('symmetric', true);
model.mesh('mesh1').feature('ftet1').active(false);
model.mesh('mesh1').run;

model.study('std1').setGenPlots(false);
model.study('std1').label('Study 1: Stationary Potential-Flow Solution');
model.study('std1').feature('stat').setEntry('activate', 'spf', false);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_phi'});
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, potential flow (ipf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Velocity Potential');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_uPhi'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 1);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, smoothed velocity from potential flow (ipf)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'i2');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Smoothed Velocity from Potential Flow');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, potential flow (ipf)');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledphysics', {'spf/init2'});
model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/spf', true);
model.study('std2').feature('time').setSolveFor('/physics/ipf', false);
model.study('std2').setGenPlots(false);
model.study('std2').label('Study 2: Time-Dependent LES Solution');
model.study('std2').setStoreSolution(true);
model.study('std2').feature('time').set('tlist', 'range(0,20*H/U,20*H/U) range(20*H/U,(20*H/U)/400,40*H/U)');
model.study('std2').feature('time').set('useinitsol', true);
model.study('std2').feature('time').set('initstudy', 'std1');
model.study('std2').feature('time').set('usesol', true);
model.study('std2').feature('time').set('notsolmethod', 'sol');
model.study('std2').feature('time').set('notstudy', 'std1');
model.study('std2').create('cmbsol', 'CombineSolution');
model.study('std2').feature('cmbsol').set('soloper', 'remsol');
model.study('std2').feature('cmbsol').set('solnum', 'manual');
model.study('std2').feature('cmbsol').set('manualsolnum', '1 2');
model.study('std2').feature('cmbsol').set('clearsrcsol', true);

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,20*H/U,20*H/U) range(20*H/U,(20*H/U)/400,40*H/U)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'Default');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 0.005);
model.sol('sol2').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol2').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('atolmethod', {'comp1_p' 'scaled' 'comp1_phi' 'global' 'comp1_u' 'global' 'comp1_uPhi' 'global'});
model.sol('sol2').feature('t1').set('atolvaluemethod', {'comp1_p' 'factor' 'comp1_phi' 'factor' 'comp1_u' 'factor' 'comp1_uPhi' 'factor'});
model.sol('sol2').feature('t1').set('atolfactor', {'comp1_p' '1' 'comp1_phi' '0.1' 'comp1_u' '0.1' 'comp1_uPhi' '0.1'});
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('timemethod', 'genalpha');
model.sol('sol2').feature('t1').set('estrat', 'exclude');
model.sol('sol2').feature('t1').set('rhoinf', 0.5);
model.sol('sol2').feature('t1').set('predictor', 'constant');
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('stabcntrl', true);
model.sol('sol2').feature('t1').set('maxstepconstraintgenalpha', 'expr');
model.sol('sol2').feature('t1').set('maxstepexpressiongenalpha', 'comp1.spf.dt_CFL');
model.sol('sol2').feature('t1').set('bwinitstepfrac', '0.01');
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 0.5);
model.sol('sol2').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol2').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol2').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol2').feature('t1').feature('i1').set('maxlinit', 100);
model.sol('sol2').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('t1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol2').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'i1');
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 0.5);
model.sol('sol2').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol2').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol2').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').create('cms1', 'CombineSolution');
model.sol('sol2').feature('cms1').set('control', 'cmbsol');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('t1').set('maxstepconstraintgenalpha', 'auto');
model.sol('sol2').runAll;

model.study.create('std3');
model.study('std3').label('Study 3: Time-Averaged LES Solution');
model.study('std3').setGenConv(false);
model.study('std3').setGenPlots(false);
model.study('std3').create('cmbsol', 'CombineSolution');
model.study('std3').feature('cmbsol').set('soloper', 'wgtsum');
model.study('std3').feature('cmbsol').set('cssolwghtsum', 'sol2');
model.study('std3').feature('cmbsol').set('weightoneexpr', '1.0/401');

model.sol.create('sol4');
model.sol('sol4').study('std3');
model.sol('sol4').create('cms1', 'CombineSolution');
model.sol('sol4').feature('cms1').set('control', 'cmbsol');
model.sol('sol4').attach('std3');
model.sol('sol4').runAll;

model.study('std2').create('cmbsol2', 'CombineSolution');
model.study('std2').feature('cmbsol2').set('soloper', 'remsol');
model.study('std2').feature('cmbsol2').set('excludeorinclude', 'include');
model.study('std2').feature('cmbsol2').set('solnum', 'manual');
model.study('std2').feature('cmbsol2').set('manualsolnum', 401);
model.study('std2').feature('cmbsol2').set('clearsrcsol', true);

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol2').study('std2');
model.sol('sol3').copySolution('sol5');

model.result.dataset('dset3').set('solution', 'none');

model.sol.remove('sol5');
model.sol('sol2').create('su2', 'StoreSolution');
model.sol('sol2').create('cms2', 'CombineSolution');
model.sol('sol2').feature('cms2').set('control', 'cmbsol2');

model.result.dataset('dset3').set('solution', 'sol3');

model.sol('sol2').feature('cms2').set('solnum', 'manual');
model.sol('sol2').feature('cms2').set('solvertype', 'solnum');
model.sol('sol2').copySolution('sol5');
model.sol('sol2').runFrom('cms2');

model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset4');
model.result.dataset('surf1').selection.all;
model.result.dataset.create('edg1', 'Edge3D');
model.result.dataset('edg1').label('Edge at z=0');
model.result.dataset('edg1').set('data', 'dset4');
model.result.dataset('edg1').selection.set([5 13 18 19]);
model.result.dataset.create('cpl1', 'CutPlane');
model.result.dataset('cpl1').label('Cut Plane at z=0');
model.result.dataset('cpl1').set('data', 'dset4');
model.result.dataset('cpl1').set('quickplane', 'xy');
model.result.dataset.create('cpl2', 'CutPlane');
model.result.dataset('cpl2').label('Cut Plane at x=3.69*H');
model.result.dataset('cpl2').set('data', 'dset4');
model.result.dataset('cpl2').set('quickx', '3.69*H');
model.result.setOnlyPlotWhenRequested(true);
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').run;
model.result('pg1').set('view', 'new');
model.result('pg1').run;
model.result('pg1').label('Cp Contours on the hill');
model.result('pg1').set('data', 'dset4');
model.result('pg1').set('legendactive', true);
model.result('pg1').set('legendtrailingzeros', true);
model.result('pg1').set('legendprecision', 5);
model.result('pg1').create('con1', 'Contour');
model.result('pg1').feature('con1').set('expr', 'p/(0.5*rho*U^2)');
model.result('pg1').feature('con1').set('descractive', true);
model.result('pg1').feature('con1').set('descr', 'Cp');
model.result('pg1').feature('con1').set('levelmethod', 'levels');
model.result('pg1').feature('con1').set('levels', '3.08E-01 2.13E-01 1.19E-01 2.40E-02 -7.05E-02 -1.65E-01 -2.60E-01 -3.54E-01 -4.49E-01 -5.43E-01 -6.38E-01 -7.32E-01 -8.27E-01 -9.21E-01 -1.02E+00');
model.result('pg1').feature('con1').set('contourtype', 'filled');
model.result('pg1').feature('con1').set('legendtype', 'filled');
model.result('pg1').create('con2', 'Contour');
model.result('pg1').feature('con2').set('expr', 'p/(0.5*rho*U^2)');
model.result('pg1').feature('con2').set('descractive', true);
model.result('pg1').feature('con2').set('descr', 'Cp');
model.result('pg1').feature('con2').set('titletype', 'none');
model.result('pg1').feature('con2').set('levelmethod', 'levels');
model.result('pg1').feature('con2').set('levels', '3.08E-01 2.13E-01 1.19E-01 2.40E-02 -7.05E-02 -1.65E-01 -2.60E-01 -3.54E-01 -4.49E-01 -5.43E-01 -6.38E-01 -7.32E-01 -8.27E-01 -9.21E-01 -1.02E+00');
model.result('pg1').feature('con2').set('coloring', 'uniform');
model.result('pg1').feature('con2').set('color', 'gray');
model.result('pg1').feature('con2').set('colorlegend', false);
model.result('pg1').run;

model.view('view5').camera.set('projection', 'orthographic');

model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').run;
model.result('pg2').set('view', 'new');
model.result('pg2').run;
model.result('pg2').label('Nondimensional Vorticity Flux');
model.result('pg2').set('data', 'dset4');
model.result('pg2').set('edges', false);
model.result('pg2').selection.geom('geom1', 2);
model.result('pg2').selection.geom('geom1', 2);
model.result('pg2').selection.set([6 7 8 9]);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', '1');
model.result('pg2').feature('surf1').set('titletype', 'none');
model.result('pg2').feature('surf1').set('coloring', 'uniform');
model.result('pg2').feature('surf1').set('color', 'gray');
model.result('pg2').create('arws1', 'ArrowSurface');
model.result('pg2').feature('arws1').set('expr', {'(nz*dtang(p, y)-ny*dtang(p, z))/(0.5*rho*U^2)' '' ''});
model.result('pg2').feature('arws1').setIndex('expr', '(nx*dtang(p, z)-nz*dtang(p, x))/(0.5*rho*U^2)', 1);
model.result('pg2').feature('arws1').setIndex('expr', '(ny*dtang(p, x)-nx*dtang(p, y))/(0.5*rho*U^2)', 2);
model.result('pg2').feature('arws1').set('plotcomp', 'tangential');
model.result('pg2').feature('arws1').set('titletype', 'manual');
model.result('pg2').feature('arws1').set('title', 'Arrow Surface: Nondimensional vorticity flux');
model.result('pg2').feature('arws1').set('arrowcount', 400);
model.result('pg2').feature('arws1').set('scaleactive', true);
model.result('pg2').feature('arws1').set('scale', 0.25);
model.result('pg2').run;

model.view('view6').camera.set('projection', 'orthographic');

model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').set('view', 'new');
model.result('pg3').run;
model.result('pg3').label('Velocity Vectors at z=0');
model.result('pg3').set('data', 'none');
model.result('pg3').create('arws1', 'ArrowSurface');
model.result('pg3').feature('arws1').set('data', 'cpl1');
model.result('pg3').feature('arws1').setIndex('expr', 'u', 0);
model.result('pg3').feature('arws1').set('expr', {'u' 'v' 'w'});
model.result('pg3').feature('arws1').set('plotcomp', 'tangential');
model.result('pg3').feature('arws1').set('titletype', 'manual');
model.result('pg3').feature('arws1').set('title', 'Arrow Surface: Velocity field at z=0.');
model.result('pg3').feature('arws1').set('placement', 'elements');
model.result('pg3').feature('arws1').set('scaleactive', true);
model.result('pg3').feature('arws1').set('scale', 0.08);
model.result('pg3').feature('arws1').create('filt1', 'Filter');
model.result('pg3').feature('arws1').feature('filt1').set('expr', '(x>=0) && (x<=2*H) && (y<= 1.2*H)');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('data', 'cpl1');
model.result('pg3').feature('surf1').set('expr', '1');
model.result('pg3').feature('surf1').set('titletype', 'manual');
model.result('pg3').feature('surf1').set('title', 'Backflow region in magenta.');
model.result('pg3').feature('surf1').set('coloring', 'uniform');
model.result('pg3').feature('surf1').set('color', 'magenta');
model.result('pg3').feature('surf1').create('filt1', 'Filter');
model.result('pg3').feature('surf1').feature('filt1').set('expr', '(u<=0) && (x>=0) && (x<=2*H) && (y<= 1.2*H)');
model.result('pg3').run;

model.view('view7').camera.set('projection', 'orthographic');

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').set('view', 'new');
model.result('pg4').run;
model.result('pg4').label('Velocity Vectors at x=3.69H');
model.result('pg4').set('data', 'none');
model.result('pg4').create('arws1', 'ArrowSurface');
model.result('pg4').feature('arws1').set('data', 'cpl2');
model.result('pg4').feature('arws1').setIndex('expr', 'u', 0);
model.result('pg4').feature('arws1').set('expr', {'u' 'v' 'w'});
model.result('pg4').feature('arws1').set('plotcomp', 'tangential');
model.result('pg4').feature('arws1').set('titletype', 'manual');
model.result('pg4').feature('arws1').set('title', 'Arrow Surface: Velocity field at x=3.69H.');
model.result('pg4').feature('arws1').set('arrowcount', '4e4');
model.result('pg4').feature('arws1').set('scaleactive', true);
model.result('pg4').feature('arws1').set('scale', 0.6);
model.result('pg4').feature('arws1').create('filt1', 'Filter');
model.result('pg4').feature('arws1').feature('filt1').set('expr', '(y>=0) && (y<=H) && (z>=0) && (z<=2.5*H)');
model.result('pg4').run;

model.view('view8').camera.set('projection', 'orthographic');

model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').run;
model.result('pg5').set('view', 'new');
model.result('pg5').run;
model.result('pg5').label('Instantaneous Streamlines');
model.result('pg5').set('data', 'dset2');
model.result('pg5').set('legendpos', 'bottom');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', '1');
model.result('pg5').feature('surf1').set('titletype', 'none');
model.result('pg5').feature('surf1').set('coloring', 'uniform');
model.result('pg5').feature('surf1').set('color', 'white');
model.result('pg5').feature('surf1').create('filt1', 'Filter');
model.result('pg5').feature('surf1').feature('filt1').set('expr', '(x>=-4*H) && (x<=6*H) && (z>=-3*H) && (z<=3*H) && (y>=0) && (y<=1.5*H)');
model.result('pg5').set('edges', false);
model.result('pg5').create('str1', 'Streamline');
model.result('pg5').feature('str1').set('posmethod', 'start');
model.result('pg5').feature('str1').set('startmethod', 'coord');
model.result('pg5').feature('str1').set('xcoord', '-4*H');
model.result('pg5').feature('str1').set('ycoord', '0.01*H');
model.result('pg5').feature('str1').set('zcoord', 'range(-2*H,4*H/10,2*H)');
model.result('pg5').feature('str1').set('linetype', 'tube');
model.result('pg5').feature('str1').set('radiusexpr', '0.01*H');
model.result('pg5').feature('str1').set('tuberadiusscaleactive', true);
model.result('pg5').feature('str1').create('col1', 'Color');
model.result('pg5').feature('str1').create('filt1', 'Filter');
model.result('pg5').feature('str1').feature('filt1').set('expr', '(x>=-4*H) && (x<=6*H) && (z>=-3*H) && (z<=3*H) && (y>=0) && (y<=1.5*H)');
model.result('pg5').feature.duplicate('str2', 'str1');
model.result('pg5').feature('str2').set('titletype', 'none');
model.result('pg5').feature('str2').set('ycoord', 'range(0,0.2*H,1.6*H)');
model.result('pg5').feature('str2').set('zcoord', 0);
model.result('pg5').feature('str2').set('inheritplot', 'str1');
model.result('pg5').feature.duplicate('str3', 'str2');
model.result('pg5').feature('str3').set('xcoord', '2*H');
model.result('pg5').feature('str3').set('ycoord', '0.01*H');
model.result('pg5').feature('str3').set('zcoord', 'range(-2*H,4*H/10,2*H)');
model.result('pg5').feature.duplicate('str4', 'str3');
model.result('pg5').feature('str4').set('ycoord', '0.1*H');
model.result('pg5').feature.duplicate('str5', 'str4');
model.result('pg5').feature('str5').set('ycoord', '0.3*H');
model.result('pg5').create('slc1', 'Slice');
model.result('pg5').feature('slc1').set('quickplane', 'xy');
model.result('pg5').feature('slc1').set('quickznumber', 1);
model.result('pg5').feature('slc1').set('inheritplot', 'str1');
model.result('pg5').feature('slc1').create('trn1', 'Translation');
model.result('pg5').feature('slc1').feature('trn1').set('trans', {'0' '0' '-2.9*H'});
model.result('pg5').feature('slc1').create('filt1', 'Filter');
model.result('pg5').feature('slc1').feature('filt1').set('expr', '(x>=-4*H) && (x<=6*H) && (z>=-3*H) && (z<=3*H) && (y>=0) && (y<=1.5*H)');
model.result('pg5').run;

model.view('view9').camera.set('position', [-66.81538391113281 -4 3]);
model.view('view9').camera.setIndex('position', 64.47892761230469, 1);
model.view('view9').camera.setIndex('position', 75.17528533935547, 2);
model.view('view9').camera.setIndex('target', 5.718170166015625, 0);
model.view('view9').camera.setIndex('target', 1.5617790222167969, 1);
model.view('view9').camera.setIndex('target', 0.06719970703125, 2);
model.view('view9').camera.set('up', [0.6154333353042603 0 1]);
model.view('view9').camera.setIndex('up', 0.447165846824646, 1);
model.view('view9').camera.setIndex('up', -0.6490663290023804, 2);
model.view('view9').camera.set('rotationpoint', [1 0.949999988079071 0]);
model.view('view9').camera.set('viewoffset', [0.2787371873855591 0]);
model.view('view9').camera.setIndex('viewoffset', 0.25127044320106506, 1);
model.view('view9').camera.set('projection', 'orthographic');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_phi'});
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, potential flow (ipf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Velocity Potential');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_uPhi'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 1);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, smoothed velocity from potential flow (ipf)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'i2');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Smoothed Velocity from Potential Flow');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, potential flow (ipf)');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('v1').set('notsolnum', 'auto');
model.sol('sol2').feature('v1').set('notsolvertype', 'solnum');
model.sol('sol2').feature('v1').set('solnum', 'auto');
model.sol('sol2').feature('v1').set('solvertype', 'solnum');

model.study('std2').feature('time').set('notsolnum', 'auto');
model.study('std2').feature('time').set('notsolvertype', 'solnum');
model.study('std2').feature('time').set('notsolnumhide', 'off');
model.study('std2').feature('time').set('notstudyhide', 'off');
model.study('std2').feature('time').set('notsolhide', 'on');
model.study('std2').feature('time').set('solnum', 'auto');
model.study('std2').feature('time').set('solvertype', 'solnum');
model.study('std2').feature('time').set('solnumhide', 'off');
model.study('std2').feature('time').set('initstudyhide', 'off');
model.study('std2').feature('time').set('initsolhide', 'on');

model.sol('sol1').feature.move('st1', 0);
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').feature.move('v1', 1);
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').feature.move('s1', 2);
model.sol('sol1').feature('s1').set('control', 'stat');

model.title('Large Eddy Simulation of a 3D Hill Geometry');

model.description('The present example simulates the turbulent flow over a 3D hill geometry using the Large Eddy Simulation (LES) interface with synthetic turbulence at the inlet boundary.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;

model.label('les_3d_hill.mph');

model.modelNode.label('Components');

out = model;
