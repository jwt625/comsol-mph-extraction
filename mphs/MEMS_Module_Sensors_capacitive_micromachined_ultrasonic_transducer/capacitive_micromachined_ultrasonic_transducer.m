function out = model
%
% capacitive_micromachined_ultrasonic_transducer.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/MEMS_Module/Sensors');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics('es').feature('ccn1').set('materialType', {'solid'});
model.physics('es').feature('ccn1').label('Charge Conservation, Solid');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics.create('cir', 'Circuit', 'geom1');
model.physics('cir').model('comp1');

model.multiphysics.create('eme1', 'ElectromechanicalForces', 'geom1', 3);
model.multiphysics('eme1').set('Solid_physics', 'solid');
model.multiphysics('eme1').set('Electrostatics_physics', 'es');

model.common.create('free1', 'DeformingDomain', 'comp1');
model.common('free1').set('smoothingType', 'hyperelastic');
model.common('free1').selection.set([]);
model.common.create('sym1', 'Symmetry', 'comp1');
model.common('sym1').selection.set([]);

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/es', true);
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/physics/cir', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/eme1', true);
model.study('std1').create('frlin', 'Frequencylinearized');
model.study('std1').feature('frlin').set('outputmap', {});
model.study('std1').feature('frlin').set('ngenAUX', '1');
model.study('std1').feature('frlin').set('goalngenAUX', '1');
model.study('std1').feature('frlin').set('ngenAUX', '1');
model.study('std1').feature('frlin').set('goalngenAUX', '1');
model.study('std1').feature('frlin').setSolveFor('/physics/es', true);
model.study('std1').feature('frlin').setSolveFor('/physics/solid', true);
model.study('std1').feature('frlin').setSolveFor('/physics/cir', true);
model.study('std1').feature('frlin').setSolveFor('/multiphysics/eme1', true);

model.param.set('l', '63.5[um]');
model.param.descr('l', 'Length of device');
model.param.set('l_et', '33[um]');
model.param.descr('l_et', 'Length of top electrode');
model.param.set('l_eb', '35[um]');
model.param.descr('l_eb', 'Length of bottom electrode');
model.param.set('t_ox', '1[um]');
model.param.descr('t_ox', 'Thickness of oxide');
model.param.set('t_m2', '0.64[um]');
model.param.descr('t_m2', 'Thickness of sacrificial metal, M2');
model.param.set('t_m3', '0.64[um]');
model.param.descr('t_m3', 'Thickness of top electrode, M3');
model.param.set('t_m4', '1.28[um]');
model.param.descr('t_m4', 'Thickness of support metal, M4');
model.param.set('t_w', '3.4[um]');
model.param.descr('t_w', 'Thickness of wall');
model.param.set('w_ox', '11.25[um]');
model.param.descr('w_ox', 'Width of oxide around top electrode');
model.param.set('l_v43', '12[um]');
model.param.descr('l_v43', 'Length of via 4-3');
model.param.set('l_m4', '15[um]');
model.param.descr('l_m4', 'Length of support metal');
model.param.set('w_b', '3.6[um]');
model.param.descr('w_b', 'Width of support beam');
model.param.set('t_np', '1[um]');
model.param.descr('t_np', 'Thickness of nitride passivation layer');
model.param.set('p_max', '1[MPa]');
model.param.descr('p_max', 'Maximum pressure');
model.param.set('R_load', '1[Gohm]');
model.param.descr('R_load', 'Load resistance');
model.param.set('V_a', '5[V]');
model.param.descr('V_a', 'Applied voltage');

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').geom.create('sq1', 'Square');
model.geom('geom1').feature('wp1').geom.feature('sq1').label('Device');
model.geom('geom1').feature('wp1').geom.feature('sq1').set('size', 'l/2');
model.geom('geom1').feature('wp1').geom.run('sq1');
model.geom('geom1').feature('wp1').geom.create('sq2', 'Square');
model.geom('geom1').feature('wp1').geom.feature('sq2').label('Piston');
model.geom('geom1').feature('wp1').geom.feature('sq2').set('size', 'l_eb/2+w_ox');
model.geom('geom1').feature('wp1').geom.run('sq2');
model.geom('geom1').feature('wp1').geom.create('sq3', 'Square');
model.geom('geom1').feature('wp1').geom.feature('sq3').label('Inside Wall');
model.geom('geom1').feature('wp1').geom.feature('sq3').set('size', 'l/2-t_w/2');
model.geom('geom1').feature('wp1').geom.run('sq3');
model.geom('geom1').feature('wp1').geom.create('sq4', 'Square');
model.geom('geom1').feature('wp1').geom.feature('sq4').label('Bottom Electrode');
model.geom('geom1').feature('wp1').geom.feature('sq4').set('size', 'l_eb/2');
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').label('Oxide 1');
model.geom('geom1').feature('ext1').setIndex('distance', 't_ox', 0);
model.geom('geom1').run('ext1');
model.geom('geom1').feature.create('ext2', 'Extrude');
model.geom('geom1').feature('ext2').label('Metal 2');
model.geom('geom1').feature('ext2').set('extrudefrom', 'faces');
model.geom('geom1').feature('ext2').selection('inputface').set('ext1', [8 16 4 12]);
model.geom('geom1').feature('ext2').set('inputhandling', 'keep');
model.geom('geom1').feature('ext2').setIndex('distance', 't_m2', 0);
model.geom('geom1').run('ext2');
model.geom('geom1').feature.create('ext3', 'Extrude');
model.geom('geom1').feature('ext3').label('Oxide 2');
model.geom('geom1').feature('ext3').set('extrudefrom', 'faces');
model.geom('geom1').feature('ext3').selection('inputface').set('ext2', [8 16 4 12]);
model.geom('geom1').feature('ext3').set('inputhandling', 'keep');
model.geom('geom1').feature('ext3').setIndex('distance', 't_ox', 0);
model.geom('geom1').run('ext3');
model.geom('geom1').feature.create('ext4', 'Extrude');
model.geom('geom1').feature('ext4').label('Metal 3');
model.geom('geom1').feature('ext4').set('extrudefrom', 'faces');
model.geom('geom1').feature('ext4').selection('inputface').set('ext3', [8 16 4 12]);
model.geom('geom1').feature('ext4').set('inputhandling', 'keep');
model.geom('geom1').feature('ext4').setIndex('distance', 't_m3', 0);
model.geom('geom1').run('ext4');
model.geom('geom1').feature.create('ext5', 'Extrude');
model.geom('geom1').feature('ext5').label('Oxide 3');
model.geom('geom1').feature('ext5').set('extrudefrom', 'faces');
model.geom('geom1').feature('ext5').selection('inputface').set('ext4', [8 16 4 12]);
model.geom('geom1').feature('ext5').set('inputhandling', 'keep');
model.geom('geom1').feature('ext5').setIndex('distance', 't_ox', 0);
model.geom('geom1').run('ext5');
model.geom('geom1').create('wp2', 'WorkPlane');
model.geom('geom1').feature('wp2').set('unite', true);
model.geom('geom1').feature('wp2').set('quickz', 't_ox+t_m2+t_ox+t_m3+t_ox');
model.geom('geom1').feature('wp2').geom.create('sq1', 'Square');
model.geom('geom1').feature('wp2').geom.feature('sq1').label('Support, Center');
model.geom('geom1').feature('wp2').geom.feature('sq1').set('size', 'l_m4/2');
model.geom('geom1').feature('wp2').geom.run('sq1');
model.geom('geom1').feature('wp2').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp2').geom.feature('r1').label('Support, x');
model.geom('geom1').feature('wp2').geom.feature('r1').set('size', {'l/2-l_m4/2' 'w_b/2'});
model.geom('geom1').feature('wp2').geom.feature('r1').set('pos', {'l_m4/2' '0'});
model.geom('geom1').feature('wp2').geom.run('r1');
model.geom('geom1').feature('wp2').geom.create('r2', 'Rectangle');
model.geom('geom1').feature('wp2').geom.feature('r2').label('Support, y');
model.geom('geom1').feature('wp2').geom.feature('r2').set('size', {'w_b/2' 'l/2-l_m4/2'});
model.geom('geom1').feature('wp2').geom.feature('r2').set('pos', {'0' 'l_m4/2'});
model.geom('geom1').feature('wp2').geom.run('r2');
model.geom('geom1').feature('wp2').geom.create('sq2', 'Square');
model.geom('geom1').feature('wp2').geom.feature('sq2').label('Device, Upper');
model.geom('geom1').feature('wp2').geom.feature('sq2').set('size', 'l/2');
model.geom('geom1').feature('wp2').geom.run('sq2');
model.geom('geom1').feature('wp2').geom.create('sq3', 'Square');
model.geom('geom1').feature('wp2').geom.feature('sq3').label('Inside Wall, Upper');
model.geom('geom1').feature('wp2').geom.feature('sq3').set('size', 'l/2-t_w/2');
model.geom('geom1').run('wp2');
model.geom('geom1').feature.create('ext6', 'Extrude');
model.geom('geom1').feature('ext6').set('workplane', 'wp2');
model.geom('geom1').feature('ext6').selection('input').set({'wp2'});
model.geom('geom1').feature('ext6').label('Metal 4');
model.geom('geom1').feature('ext6').set('inputhandling', 'keep');
model.geom('geom1').feature('ext6').setIndex('distance', 't_m4', 0);
model.geom('geom1').run('ext6');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').label('Nitride');
model.geom('geom1').feature('blk1').set('size', {'l/2' 'l/2' 't_np'});
model.geom('geom1').feature('blk1').set('pos', {'0' '0' 't_ox+t_m2+t_ox+t_m3+t_ox+t_m4'});
model.geom('geom1').feature('blk1').set('selresult', true);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Passivation');
model.geom('geom1').feature('blk1').set('contributeto', 'csel1');
model.geom('geom1').feature('blk1').set('color', 'custom');
model.geom('geom1').feature('blk1').set('customcolor', [1 1 0.6078431606292725]);
model.geom('geom1').run('blk1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').label('Via');
model.geom('geom1').feature('blk2').set('size', {'l_v43/2' 'l_v43/2' '1'});
model.geom('geom1').feature('blk2').setIndex('size', 't_ox', 2);
model.geom('geom1').feature('blk2').set('pos', {'0' '0' 't_ox+t_m2+t_ox+t_m3'});
model.geom('geom1').run('blk2');
model.geom('geom1').create('blk3', 'Block');
model.geom('geom1').feature('blk3').label('Top Electrode');
model.geom('geom1').feature('blk3').set('size', {'l_et/2' 'l_et/2' '1'});
model.geom('geom1').feature('blk3').setIndex('size', 't_m3', 2);
model.geom('geom1').feature('blk3').set('pos', {'0' '0' 't_ox+t_m2+t_ox'});
model.geom('geom1').run('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Gap');
model.selection('sel1').set([2 12 17 18 19 20 27]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Oxide');
model.selection('sel2').set([1 3 8 10 11 13 14 15 16 21 22 23 24 25 28]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Electrode');
model.selection('sel3').set([4 5 6 9 26 29 30]);
model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');
model.selection('box1').label('Edge, Center');
model.selection('box1').set('entitydim', 1);
model.selection('box1').set('xmax', 0);
model.selection('box1').set('ymax', 0);
model.selection('box1').set('condition', 'inside');

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.geom('geom1', 2);
model.cpl('aveop1').selection.set([12]);
model.cpl.create('minop1', 'Minimum', 'geom1');
model.cpl('minop1').selection.geom('geom1', 2);
model.cpl('minop1').selection.set([12]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').label('Al - Aluminum');
model.material('mat1').set('family', 'aluminum');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'35.5e6[S/m]' '0' '0' '0' '35.5e6[S/m]' '0' '0' '0' '35.5e6[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'23.1e-6[1/K]' '0' '0' '0' '23.1e-6[1/K]' '0' '0' '0' '23.1e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '904[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'237[W/(m*K)]' '0' '0' '0' '237[W/(m*K)]' '0' '0' '0' '237[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '70.0e9[Pa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.35');
model.material('mat1').selection.named('sel3');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('SiO2 - Silicon oxide');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'0.5e-6[1/K]' '0' '0' '0' '0.5e-6[1/K]' '0' '0' '0' '0.5e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '730[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'4.2' '0' '0' '0' '4.2' '0' '0' '0' '4.2'});
model.material('mat2').propertyGroup('def').set('density', '2200[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'1.4[W/(m*K)]' '0' '0' '0' '1.4[W/(m*K)]' '0' '0' '0' '1.4[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '70e9[Pa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.17');
model.material('mat2').selection.named('sel2');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').label('Si3N4 - Silicon nitride');
model.material('mat3').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'2.3e-6[1/K]' '0' '0' '0' '2.3e-6[1/K]' '0' '0' '0' '2.3e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '700[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'9.7' '0' '0' '0' '9.7' '0' '0' '0' '9.7'});
model.material('mat3').propertyGroup('def').set('density', '3100[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'20[W/(m*K)]' '0' '0' '0' '20[W/(m*K)]' '0' '0' '0' '20[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '250e9[Pa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.23');
model.material('mat3').selection.named('geom1_csel1_dom');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat4').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat4').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat4').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat4').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat4').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat4').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat4').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat4').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat4').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat4').label('Air');
model.material('mat4').set('family', 'air');
model.material('mat4').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat4').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat4').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat4').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat4').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat4').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat4').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat4').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat4').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat4').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat4').propertyGroup('def').func('rho').set('dermethod', 'manual');
model.material('mat4').propertyGroup('def').func('rho').set('argders', {'pA' 'd(pA*0.02897/R_const/T,pA)'; 'T' 'd(pA*0.02897/R_const/T,T)'});
model.material('mat4').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat4').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat4').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat4').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat4').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat4').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat4').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat4').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat4').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat4').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat4').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat4').propertyGroup('def').func('cs').set('dermethod', 'manual');
model.material('mat4').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat4').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat4').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat4').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat4').propertyGroup('def').func('an1').label('Analytic ');
model.material('mat4').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat4').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat4').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat4').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat4').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat4').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat4').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat4').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat4').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat4').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat4').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat4').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat4').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat4').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat4').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat4').propertyGroup('def').set('molarmass', '');
model.material('mat4').propertyGroup('def').set('bulkviscosity', '');
model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat4').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat4').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat4').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat4').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat4').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat4').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat4').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat4').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat4').propertyGroup('def').addInput('temperature');
model.material('mat4').propertyGroup('def').addInput('pressure');
model.material('mat4').propertyGroup('NonlinearModel').set('BA', '(def.gamma+1)/2');
model.material('mat4').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat4').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat4').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat4').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat4').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat4').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat4').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat4').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat4').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat4').propertyGroup('idealGas').addInput('temperature');
model.material('mat4').propertyGroup('idealGas').addInput('pressure');
model.material('mat4').materialType('nonSolid');
model.material('mat4').selection.named('sel1');
model.material('mat4').propertyGroup('def').set('relpermittivity', {'1'});

model.common('free1').selection.named('sel1');
model.common('sym1').selection.set([4 5 38 54 57 60 63 117 128 130 132 134]);

model.physics('es').create('ccn2', 'ChargeConservation', 3);
model.physics('es').feature('ccn2').selection.named('sel1');
model.physics('es').create('term1', 'DomainTerminal', 3);
model.physics('es').feature('term1').selection.named('sel3');
model.physics('es').feature('term1').set('TerminalType', 'Circuit');
model.physics('es').create('gnd1', 'Ground', 2);
model.physics('es').feature('gnd1').selection.set([3]);
model.physics('es').create('symp1', 'SymmetryPlane', 2);
model.physics('es').feature('symp1').selection.set([2 5 8 11 14 17 20 105 107 113 115 117 119 121 123 126 128 130 132 134 137 139 141 143 145 147]);
model.physics('es').create('symp2', 'SymmetryPlane', 2);
model.physics('es').feature('symp2').selection.set([1 4 7 10 13 16 19 23 27 31 35 38 41 44 47 51 54 57 60 63 67 70 73 76 79 82]);
model.physics('solid').create('sym1', 'SymmetrySolid', 2);
model.physics('solid').feature('sym1').selection.set([2 8 11 14 17 20 105 107 113 115 119 121 123 126 137 139 141 143 145 147]);
model.physics('solid').create('sym2', 'SymmetrySolid', 2);
model.physics('solid').feature('sym2').selection.set([1 7 10 13 16 19 23 27 31 35 41 44 47 51 67 70 73 76 79 82]);
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.set([3 37 53 69 86 87 88 89 90 91 92 103 152 153 154 155 156 157 158 159]);
model.physics('solid').create('bndl1', 'BoundaryLoad', 2);
model.physics('solid').feature('bndl1').selection.set([22]);
model.physics('solid').feature('bndl1').set('LoadType', 'FollowerPressure');
model.physics('solid').feature('bndl1').set('FollowerPressure', 'p_max');
model.physics('solid').feature('bndl1').set('harmonicPerturbation', true);
model.physics('cir').create('IvsU1', 'ModelDeviceIV', -1);
model.physics('cir').feature('IvsU1').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('IvsU1').set('V_src', 'root.comp1.es.V0_1');
model.physics('cir').create('R1', 'Resistor', -1);
model.physics('cir').feature('R1').setIndex('Connections', 1, 0, 0);
model.physics('cir').feature('R1').setIndex('Connections', 2, 1, 0);
model.physics('cir').feature('R1').set('R', 'R_load');
model.physics('cir').create('V1', 'VoltageSource', -1);
model.physics('cir').feature('V1').setIndex('Connections', 2, 0, 0);
model.physics('cir').feature('V1').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('V1').set('value', 'V_a');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('hauto', 8);
model.mesh('mesh1').run;

model.study('std1').setGenPlots(false);
model.study('std1').feature('frlin').set('punit', 'MHz');
model.study('std1').feature('frlin').set('plist', 'range(1.5,0.2,2.5)');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 12 17 18 19 20 27]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 12 17 18 19 20 27]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*4.537795279648478E-5');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*4.537795279648478E-5');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V' 'comp1_es_term1_V0_ode' 'comp1_es_term1_Q0_ode' 'comp1_currents'});
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Electric Potential');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Displacement Field');
model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subdtech', 'const');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subjtech', 'onevery');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').label('Spatial Mesh Displacement');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'frlin');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_spatial_disp').set('scaleval', '7.233417327025301E-7');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'frlin');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s2').feature('p1').set('plistarr', {'range(1.5,0.2,2.5)'});
model.sol('sol1').feature('s2').feature('p1').set('punit', {'MHz'});
model.sol('sol1').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s2').feature('p1').set('probes', {});
model.sol('sol1').feature('s2').feature('p1').set('control', 'frlin');
model.sol('sol1').feature('s2').set('nonlin', 'linper');
model.sol('sol1').feature('s2').set('storelinpoint', true);
model.sol('sol1').feature('s2').set('linpsolnum', 'all');
model.sol('sol1').feature('s2').set('control', 'frlin');
model.sol('sol1').feature('s2').set('linpmethod', 'sol');
model.sol('sol1').feature('s2').set('linpsol', 'sol1');
model.sol('sol1').feature('s2').set('linpsoluse', 'sol2');
model.sol('sol1').feature('s2').set('control', 'frlin');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').label('Direct (Merged)');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').label('Terminal Current vs. Frequency');
model.result('pg1').set('legendpos', 'lowerright');
model.result('pg1').create('glob1', 'Global');
model.result('pg1').feature('glob1').set('markerpos', 'datapoints');
model.result('pg1').feature('glob1').set('linewidth', 'preference');
model.result('pg1').feature('glob1').setIndex('expr', 'es.I0_1', 0);
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Electrode Profile');
model.result('pg2').set('legendpos', 'upperleft');
model.result('pg2').create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg2').feature('lngr1').set('linewidth', 'preference');
model.result('pg2').feature('lngr1').selection.set([12 144 159 207]);
model.result('pg2').feature('lngr1').set('expr', 'z');
model.result('pg2').feature('lngr1').set('descractive', true);
model.result('pg2').feature('lngr1').set('xdata', 'expr');
model.result('pg2').feature('lngr1').set('xdataexpr', 'x');
model.result('pg2').feature('lngr1').set('xdatadescractive', true);
model.result('pg2').feature('lngr1').set('differential', true);
model.result('pg2').feature('lngr1').set('legend', true);
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('Displacement Magnitude');
model.result('pg3').setIndex('looplevel', 2, 0);
model.result('pg3').create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('expr', 'solid.disp');
model.result('pg3').feature('vol1').set('descr', 'Displacement magnitude');
model.result('pg3').feature('vol1').set('descractive', true);
model.result('pg3').feature('vol1').set('colortable', 'RainbowLight');
model.result('pg3').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Displacement Uniformity Factor');
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'aveop1(w)/minop1(w)', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Displacement uniformity factor', 0);
model.result.evaluationGroup('eg1').run;

model.study.create('std2');
model.study('std2').create('eig', 'Eigenfrequency');
model.study('std2').feature('eig').set('plotgroup', 'Default');
model.study('std2').feature('eig').set('shift', '1[Hz]');
model.study('std2').feature('eig').set('chkeigregion', true);
model.study('std2').feature('eig').set('conrad', '1');
model.study('std2').feature('eig').set('conradynhm', '1');
model.study('std2').feature('eig').set('storefact', false);
model.study('std2').feature('eig').set('linpsolnum', 'auto');
model.study('std2').feature('eig').set('solnum', 'auto');
model.study('std2').feature('eig').set('notsolnum', 'auto');
model.study('std2').feature('eig').set('outputmap', {});
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').setSolveFor('/physics/es', true);
model.study('std2').feature('eig').setSolveFor('/physics/solid', true);
model.study('std2').feature('eig').setSolveFor('/physics/cir', true);
model.study('std2').feature('eig').setSolveFor('/multiphysics/eme1', true);

model.common.create('mpf1', 'ParticipationFactors', 'comp1');

model.study('std2').feature('eig').set('neigsactive', true);
model.study('std2').feature('eig').set('neigs', 1);
model.study('std2').feature('eig').set('eigunit', 'MHz');
model.study('std2').feature('eig').set('shift', '7.5');
model.study('std2').setGenPlots(false);

model.sol.create('sol3');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 12 17 18 19 20 27]);

model.sol('sol3').study('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'eig');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*4.537795279648478E-5');
model.sol('sol3').feature('v1').feature('comp1_u').set('scaleval', '1e-2*4.537795279648478E-5');
model.sol('sol3').feature('v1').set('control', 'eig');
model.sol('sol3').create('e1', 'Eigenvalue');
model.sol('sol3').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol3').feature('e1').set('eigvfunscaleparam', '4.54E-11');
model.sol('sol3').feature('e1').set('storelinpoint', true);
model.sol('sol3').feature('e1').set('control', 'eig');
model.sol('sol3').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('e1').create('d1', 'Direct');
model.sol('sol3').feature('e1').feature('d1').label('Direct (Merged)');
model.sol('sol3').attach('std2');
model.sol('sol3').runAll;

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Eigenmode');
model.result('pg4').set('data', 'dset3');
model.result('pg4').set('looplevel', [2]);
model.result('pg4').create('vol1', 'Volume');
model.result('pg4').feature('vol1').set('expr', 'solid.disp');
model.result('pg4').feature('vol1').set('descr', 'Displacement magnitude');
model.result('pg4').feature('vol1').set('descractive', true);
model.result('pg4').feature('vol1').set('colortable', 'RainbowLight');
model.result('pg4').run;

model.title('Capacitive Micromachined Ultrasonic Transducer');

model.description('A capacitive micromachined ultrasonic transducer (CMUT) is a microscale receiver that converts ultrasound to an electrical signal for high-resolution imaging applications. This model analyzes a CMUT design with optimized force-displacement characteristics for increased transduction efficiency. Central to the improvement is the displacement uniformity factor, which can be calculated using a Frequency Domain, Prestressed study. This particular design improves upon a well-established medical imaging technology based on piezoelectric transducers and promises miniaturization and higher resolution.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('capacitive_micromachined_ultrasonic_transducer.mph');

model.modelNode.label('Components');

out = model;
