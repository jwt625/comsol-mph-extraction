function out = model
%
% sma_stent.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Nonlinear_Structural_Materials_Module/Shape_Memory_Alloys');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);

model.geom('geom1').insertFile('sma_stent_geom_sequence.mph', 'geom1');
model.geom('geom1').run('ige1');

model.param.set('para', '0');
model.param.descr('para', 'Sweep parameter');
model.param.set('pload', '0[N/m^2]');
model.param.descr('pload', 'Applied pressure');

model.func.create('int1', 'Interpolation');
model.func('int1').model('comp1');
model.func('int1').set('funcname', 'ro');
model.func('int1').setIndex('table', 0, 0, 0);
model.func('int1').setIndex('table', 'Ro', 0, 1);
model.func('int1').setIndex('table', 1, 1, 0);
model.func('int1').setIndex('table', '1.4[mm]', 1, 1);
model.func('int1').setIndex('table', 2, 2, 0);
model.func('int1').setIndex('table', '1.4[mm]', 2, 1);
model.func('int1').setIndex('fununit', 'm', 0);
model.func.create('int2', 'Interpolation');
model.func('int2').model('comp1');
model.func('int2').set('funcname', 'temperature');
model.func('int2').setIndex('table', 0, 0, 0);
model.func('int2').setIndex('table', -27, 0, 1);
model.func('int2').setIndex('table', 1, 1, 0);
model.func('int2').setIndex('table', -27, 1, 1);
model.func('int2').setIndex('table', 2, 2, 0);
model.func('int2').setIndex('table', 37, 2, 1);
model.func('int2').setIndex('fununit', 'degC', 0);
model.func.create('pw1', 'Piecewise');
model.func('pw1').model('comp1');
model.func('pw1').setIndex('pieces', 0, 0, 0);
model.func('pw1').setIndex('pieces', 1, 0, 1);
model.func('pw1').setIndex('pieces', 1, 0, 2);
model.func('pw1').setIndex('pieces', 1, 1, 0);
model.func('pw1').setIndex('pieces', 2, 1, 1);
model.func('pw1').setIndex('pieces', -1, 1, 2);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('General');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Austenite');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Martensite');

model.physics('solid').create('sma1', 'ShapeMemoryAlloy', 3);
model.physics('solid').feature('sma1').selection.all;
model.physics('solid').feature('sma1').set('minput_temperature_src', 'userdef');
model.physics('solid').feature('sma1').set('minput_temperature', 'temperature(para)');
model.physics('solid').feature('sma1').set('AusteniteMaterial', 'mat2');
model.physics('solid').feature('sma1').set('MartensiteMaterial', 'mat3');
model.physics('solid').feature('sma1').set('geometricNonlinearity', 'linear');
model.physics('solid').feature('sma1').set('reducedIntegration', true);
model.physics('solid').feature('sma1').feature('trdir1').set('TransformationDirectionType', 'UserDefined');
model.physics('solid').feature('sma1').feature('trdir1').set('trdir', 'pw1(para)');
model.physics('solid').feature('sma1').create('te1', 'ThermalExpansion', 3);

model.common('cminpt').set('modified', {'strainreferencetemperature' '-27[degC]'});

model.physics('solid').feature('sma1').feature('te1').set('AusteniteMaterial', 'mat2');
model.physics('solid').feature('sma1').feature('te1').set('MartensiteMaterial', 'mat3');
model.physics('solid').create('sym1', 'SymmetrySolid', 2);
model.physics('solid').feature('sym1').selection.set([2 13]);
model.physics('solid').create('disp1', 'Displacement0', 0);
model.physics('solid').feature('disp1').selection.set([16]);
model.physics('solid').feature('disp1').setIndex('Direction', 'prescribed', 2);
model.physics('solid').create('bndl1', 'BoundaryLoad', 2);
model.physics('solid').feature('bndl1').selection.set([14 15 16]);
model.physics('solid').feature('bndl1').set('LoadType', 'FollowerPressure');
model.physics('solid').feature('bndl1').set('FollowerPressure', 'pload');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('frame', 'material');
model.cpl('intop1').selection.geom('geom1', 0);
model.cpl('intop1').selection.set([16]);

model.physics('solid').create('ge1', 'GlobalEquations', -1);
model.physics('solid').feature('ge1').setIndex('name', 'pload', 0, 0);
model.physics('solid').feature('ge1').setIndex('equation', 'intop1(x)-ro(para)', 0, 0);
model.physics('solid').feature('ge1').set('CustomDependentVariableUnit', '1');
model.physics('solid').feature('ge1').set('DependentVariableQuantity', 'none');
model.physics('solid').feature('ge1').setIndex('CustomDependentVariableUnit', 'Pa', 0, 0);
model.physics('solid').feature('ge1').set('CustomSourceTermUnit', '1');
model.physics('solid').feature('ge1').set('SourceTermQuantity', 'none');
model.physics('solid').feature('ge1').setIndex('CustomSourceTermUnit', 'm', 0, 0);

model.material('mat1').propertyGroup.create('LagoudasModel', 'Lagoudas_model');
model.material('mat1').propertyGroup('LagoudasModel').set('T0', {'293.15[K]'});
model.material('mat1').propertyGroup('def').set('poissonsratio', {'0.33'});
model.material('mat1').propertyGroup('LagoudasModel').set('TMs', {'-28[degC]'});
model.material('mat1').propertyGroup('LagoudasModel').set('TMf', {'-43[degC]'});
model.material('mat1').propertyGroup('LagoudasModel').set('CM', {'7.4e6'});
model.material('mat1').propertyGroup('LagoudasModel').set('TAs', {'-3[degC]'});
model.material('mat1').propertyGroup('LagoudasModel').set('TAf', {'7[degC]'});
model.material('mat1').propertyGroup('LagoudasModel').set('CA', {'7.4e6'});
model.material('mat1').propertyGroup('LagoudasModel').set('etrmaxLagoudas', {'0.056'});
model.material('mat1').propertyGroup('LagoudasModel').set('sigmaStar', {'0'});
model.material('mat1').propertyGroup('def').set('density', {'6500'});
model.material('mat2').propertyGroup.create('ShapeMemoryAlloyAustenite', 'Austenite_phase');
model.material('mat2').propertyGroup('ShapeMemoryAlloyAustenite').set('E_A', {'55[GPa]'});
model.material('mat2').propertyGroup('ShapeMemoryAlloyAustenite').set('Cp_A', {'400'});
model.material('mat2').propertyGroup.create('ShapeMemoryAlloyThermalExpansionAustenite', 'Thermal_expansion,_austenite_phase');
model.material('mat2').propertyGroup('ShapeMemoryAlloyThermalExpansionAustenite').set('alpha_A', {'22e-6'});
model.material('mat3').propertyGroup.create('ShapeMemoryAlloyMartensite', 'Martensite_phase');
model.material('mat3').propertyGroup('ShapeMemoryAlloyMartensite').set('E_M', {'46[GPa]'});
model.material('mat3').propertyGroup('ShapeMemoryAlloyMartensite').set('Cp_M', {'400'});
model.material('mat3').propertyGroup.create('ShapeMemoryAlloyThermalExpansionMartensite', 'Thermal_expansion,_martensite_phase');
model.material('mat3').propertyGroup('ShapeMemoryAlloyThermalExpansionMartensite').set('alpha_M', {'22e-6'});

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.set([13]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([16]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 4);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([18]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 3);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.set([1 3]);
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 20);
model.mesh('mesh1').feature('swe1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis2').selection.set([2]);
model.mesh('mesh1').feature('swe1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('swe1').feature('dis2').set('elemcount', 40);
model.mesh('mesh1').feature('swe1').feature('dis2').set('elemratio', 8);
model.mesh('mesh1').feature('swe1').feature('dis2').set('symmetric', true);
model.mesh('mesh1').run;

model.cpl.create('maxop1', 'Maximum', 'geom1');
model.cpl('maxop1').selection.geom('geom1', 2);
model.cpl('maxop1').selection.set([12]);
model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.all;
model.cpl('aveop1').set('frame', 'material');

model.study('std1').feature('stat').set('geometricNonlinearity', true);
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'Ro', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'Ro', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'para', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', '', 0);
model.study('std1').feature('stat').setIndex('plistarr', 'range(0,0.05,2)', 0);
model.study('std1').setGenPlots(false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d1').set('nliniterrefine', true);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 40);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 41, 0);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('colortable', 'Prism');
model.result('pg1').feature('vol1').set('colortabletrans', 'none');
model.result('pg1').feature('vol1').set('colorscalemode', 'linear');
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').create('def', 'Deform');
model.result('pg1').feature('vol1').feature('def').set('scaleactive', true);
model.result('pg1').feature('vol1').feature('def').set('scale', '1');
model.result('pg1').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result('pg1').label('Stress (solid)');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('vol1').set('unit', 'MPa');
model.result('pg1').run;
model.result('pg1').set('view', 'new');
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 21, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 41, 0);
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Martensite Volume Fraction');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('linewidth', 'preference');
model.result('pg2').feature('glob1').setIndex('expr', 'maxop1(solid.xiGp_M)', 0);
model.result('pg2').feature('glob1').setIndex('unit', 1, 0);
model.result('pg2').feature('glob1').setIndex('descr', 'Surface Maximum', 0);
model.result('pg2').feature('glob1').setIndex('expr', 'aveop1(solid.xiGp_M)', 1);
model.result('pg2').feature('glob1').setIndex('unit', 1, 1);
model.result('pg2').feature('glob1').setIndex('descr', 'Volume Average', 1);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Martensite Volume Fraction');
model.result('pg2').set('legendpos', 'upperleft');
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Pressure vs. Temperature');
model.result('pg3').setIndex('looplevelinput', 'manual', 0);
model.result('pg3').setIndex('looplevel', [21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41], 0);
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').setIndex('expr', 'pload', 0);
model.result('pg3').feature('glob1').setIndex('unit', 'kPa', 0);
model.result('pg3').feature('glob1').setIndex('descr', 'State variable pload', 0);
model.result('pg3').feature('glob1').set('xdata', 'expr');
model.result('pg3').feature('glob1').set('xdataexpr', 'temperature(para)');
model.result('pg3').feature('glob1').set('xdataunit', 'degC');
model.result('pg3').feature('glob1').set('xdatadescractive', true);
model.result('pg3').feature('glob1').set('xdatadescr', 'Temperature');
model.result('pg3').run;
model.result('pg3').set('showlegends', false);
model.result('pg3').run;
model.result.dataset.create('sec1', 'Sector3D');
model.result.dataset('sec1').set('sectors', '2*Ns');
model.result.dataset('sec1').set('trans', 'rotrefl');
model.result.dataset.create('arr1', 'Array3D');
model.result.dataset('arr1').set('data', 'sec1');
model.result.dataset('arr1').set('fullsize', [1 1 4]);
model.result.dataset('arr1').set('displmethod', 'manual');
model.result.dataset('arr1').set('displ', {'0' '0' 'hs*1.1'});
model.result('pg1').run;
model.result.duplicate('pg4', 'pg1');
model.result('pg4').run;
model.result('pg4').label('Stress, Whole Stent');
model.result('pg4').set('data', 'arr1');
model.result('pg4').run;
model.result('pg4').set('view', 'new');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 21, 0);
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 41, 0);
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Transformation, Whole Stent');
model.result('pg5').run;
model.result('pg5').feature('vol1').set('expr', 'solid.xiGp_M');
model.result('pg5').feature('vol1').set('descr', 'Martensite volume fraction');
model.result('pg5').feature('vol1').set('colortable', 'Viridis');
model.result('pg5').feature('vol1').set('colortabletrans', 'reverse');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').setIndex('looplevel', 21, 0);
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').setIndex('looplevel', 41, 0);
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '12');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'transparent');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'off');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'off');
model.result.export('anim1').set('options3d', 'on');
model.result.export('anim1').set('axisorientation', 'off');
model.result.export('anim1').set('grid', 'off');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').label('Stress');
model.result.export('anim1').set('plotgroup', 'pg4');
model.result.export('anim1').set('framesel', 'all');
model.result.export('anim1').set('frametime', 0.2);
model.result.export('anim1').run;
model.result.export.duplicate('anim2', 'anim1');
model.result.export('anim2').showFrame;
model.result.export('anim2').label('Transformation');
model.result.export('anim2').set('plotgroup', 'pg5');
model.result.export('anim2').run;
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').run;
model.result('pg6').set('data', 'arr1');
model.result('pg6').set('titletype', 'none');
model.result('pg6').set('edges', false);
model.result('pg6').set('view', 'view5');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').create('mtrl1', 'MaterialAppearance');
model.result('pg6').run;
model.result('pg6').feature('surf1').feature('mtrl1').set('appearance', 'custom');
model.result('pg6').feature('surf1').feature('mtrl1').set('family', 'steel');
model.result('pg6').run;
model.result('pg6').run;
model.result.remove('pg6');
model.result('pg5').run;

model.title('Shape Memory Alloy Self-Expanding Stent');

model.description('This model studies the crimping at low temperature of a shape memory alloy stent, followed by heating up to body temperature. The results show the stress increase during heating and the pressure applied to the inner wall of the artery.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('sma_stent.mph');

model.modelNode.label('Components');

out = model;
