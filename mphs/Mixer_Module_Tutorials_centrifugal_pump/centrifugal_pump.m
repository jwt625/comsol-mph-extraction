function out = model
%
% centrifugal_pump.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Mixer_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'TurbulentFlowkomega', 'geom1');
model.physics('spf').model('comp1');

model.common.create('rot1', 'RotatingDomain', 'comp1');
model.common('rot1').set('rotationType', 'rotationalVelocity');
model.common('rot1').set('rotationalVelocityExpression', 'generalRevolutionsPerTime');
model.common('rot1').selection.all;

model.study.create('std1');
model.study('std1').create('wdi', 'WallDistanceInitialization');
model.study('std1').feature('wdi').set('solnum', 'auto');
model.study('std1').feature('wdi').set('notsolnum', 'auto');
model.study('std1').feature('wdi').set('outputmap', {});
model.study('std1').feature('wdi').set('ngenAUX', '1');
model.study('std1').feature('wdi').set('goalngenAUX', '1');
model.study('std1').feature('wdi').set('ngenAUX', '1');
model.study('std1').feature('wdi').set('goalngenAUX', '1');
model.study('std1').feature('wdi').setSolveFor('/physics/spf', true);
model.study('std1').create('frrot', 'FrozenRotor');
model.study('std1').feature('frrot').set('solnum', 'auto');
model.study('std1').feature('frrot').set('notsolnum', 'auto');
model.study('std1').feature('frrot').set('outputmap', {});
model.study('std1').feature('frrot').set('ngenAUX', '1');
model.study('std1').feature('frrot').set('goalngenAUX', '1');
model.study('std1').feature('frrot').set('ngenAUX', '1');
model.study('std1').feature('frrot').set('goalngenAUX', '1');
model.study('std1').feature('frrot').setSolveFor('/physics/spf', true);

model.geom('geom1').insertFile('centrifugal_pump_geom_sequence.mph', 'geom1');
model.geom('geom1').run('unisel1');

model.view('view1').camera.set('projection', 'orthographic');
model.view('view1').camera.set('orthoscale', 0.3891032636165619);
model.view('view1').camera.setIndex('position', 0.31379783153533936, 0);
model.view('view1').camera.setIndex('position', 0.8447152376174927, 1);
model.view('view1').camera.setIndex('position', 1.710774540901184, 2);
model.view('view1').camera.setIndex('target', 0.051702141761779785, 0);
model.view('view1').camera.setIndex('target', -0.06113511323928833, 1);
model.view('view1').camera.setIndex('target', 0.04987502098083496, 2);
model.view('view1').camera.setIndex('up', -0.14331845939159393, 0);
model.view('view1').camera.setIndex('up', -0.859171986579895, 1);
model.view('view1').camera.setIndex('up', 0.4912063777446747, 2);
model.view('view1').camera.setIndex('rotationpoint', 0.051702141761779785, 0);
model.view('view1').camera.setIndex('rotationpoint', -0.061135098338127136, 1);
model.view('view1').camera.setIndex('viewoffset', -0.016187520697712898, 0);
model.view('view1').camera.setIndex('viewoffset', 0.04815436154603958, 1);
model.view('view1').set('showgrid', false);
model.view('view1').hideObjects.create('hide1');
model.view('view1').set('renderwireframe', true);
model.view('view1').hideObjects('hide1').init(2);
model.view('view1').hideObjects('hide1').set('cmf2', [4 5 6 7 8 9 12 13 14 17 18 33 48 49 50 51 52 73 75 77 78 85 91 92 94]);
model.view('view1').set('renderwireframe', false);
model.view('view1').hideObjects.remove('hide1');

model.geom('geom1').create('pard1', 'PartitionDomains');
model.geom('geom1').feature('pard1').set('partitionwith', 'extendedfaces');
model.geom('geom1').feature('pard1').selection('extendedface').set('cmf2', [73 13 14 94]);
model.geom('geom1').feature('pard1').selection('domain').set('cmf2', 1);
model.geom('geom1').run('pard1');

model.param.set('p_tot_in', '-0.05[bar]');
model.param.descr('p_tot_in', 'Total pressure at the inlet');
model.param.set('rot_rpm', '1000[rpm]');
model.param.descr('rot_rpm', 'Rotational speed');
model.param.set('T_ref', '20[degC]');
model.param.descr('T_ref', 'Reference temperature');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water, liquid');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');

model.probe.create('bnd1', 'Boundary');
model.probe('bnd1').model('comp1');
model.probe('bnd1').set('intsurface', true);
model.probe('bnd1').set('probename', 'm_in');
model.probe('bnd1').set('type', 'integral');
model.probe('bnd1').selection.set([58]);
model.probe('bnd1').set('expr', '-rhoRef*(u*nx+v*ny+w*nz)');
model.probe('bnd1').set('window', 'window1');
model.probe('bnd1').set('windowtitle', 'Probe Plot 1');
model.probe.create('bnd2', 'Boundary');
model.probe('bnd2').model('comp1');
model.probe('bnd2').set('intsurface', true);
model.probe('bnd2').set('probename', 'm_out');
model.probe('bnd2').set('type', 'integral');
model.probe('bnd2').selection.set([9]);
model.probe('bnd2').set('expr', 'rhoRef*(u*nx+v*ny+w*nz)');
model.probe('bnd2').set('window', 'window1');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'int_rot');
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.named('geom1_csel1_bnd');
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').set('opname', 'int_in');
model.cpl('intop2').selection.geom('geom1', 2);
model.cpl('intop2').selection.set([57]);
model.cpl.create('intop3', 'Integration', 'geom1');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').set('opname', 'int_out');
model.cpl('intop3').selection.geom('geom1', 2);
model.cpl('intop3').selection.set([6]);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('rhoRef', 'spf.rhoref');
model.variable('var1').descr('rhoRef', 'Reference density');
model.variable('var1').set('delta_p', 'int_out(p)/int_out(1)-int_in(p)/int_in(1)');
model.variable('var1').descr('delta_p', 'Static pressure increase');
model.variable('var1').set('delta_p_tot', '((int_out(p+1/2*rhoRef*spf.U^2)/int_out(1)-int_in(p+1/2*rhoRef*spf.U^2)/int_in(1)))');
model.variable('var1').descr('delta_p_tot', 'Total pressure increase');
model.variable('var1').set('Torque', 'int_rot(+spf.T_stressx*y-spf.T_stressy*x)');
model.variable('var1').descr('Torque', 'Torque');
model.variable('var1').set('Power', 'abs(int_rot(rot1.alphat)*Torque/int_rot(1))');
model.variable('var1').descr('Power', 'Shaft power consumption');
model.variable('var1').set('flowrate', 'int_in(u*nx+v*ny+w*nz)');
model.variable('var1').descr('flowrate', 'Flow rate');
model.variable('var1').set('massflow', 'rhoRef*flowrate');
model.variable('var1').descr('massflow', 'Mass flow');
model.variable('var1').set('H_power', 'abs(massflow*delta_p_tot/rhoRef)');
model.variable('var1').descr('H_power', 'Power given to fluid');
model.variable('var1').set('H', 'delta_p_tot/(rhoRef*g_const)');
model.variable('var1').descr('H', 'Head');
model.variable('var1').set('eta', 'H_power/Power');
model.variable('var1').descr('eta', 'Pump efficiency');

model.common('rot1').selection.named('geom1_rev3_dom');
model.common('rot1').set('revolutionsPerTime', 'rot_rpm');
model.common('rot1').set('rotationAxis', {'0' '0' '-1'});

model.physics('spf').create('inl1', 'InletBoundary', 2);
model.physics('spf').feature('inl1').selection.set([58]);
model.physics('spf').feature('inl1').set('BoundaryCondition', 'Pressure');
model.physics('spf').feature('inl1').set('PressureType', 'TotalPressure');
model.physics('spf').feature('inl1').set('AverageTotalPressure', true);
model.physics('spf').feature('inl1').set('p0', 'p_tot_in');
model.physics('spf').feature('inl1').set('Uref', '3[m/s]');
model.physics('spf').create('out1', 'OutletBoundary', 2);
model.physics('spf').feature('out1').set('PressureType', 'TotalPressure');
model.physics('spf').feature('out1').selection.set([9]);
model.physics('spf').create('wallbc2', 'WallBC', 2);
model.physics('spf').feature('wallbc2').selection.set([64 65 87 93]);
model.physics('spf').feature('wallbc2').set('TranslationalVelocityOption', 'ZeroFixedWall');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size1').set('hauto', 5);
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.set([1 3 4 5]);
model.mesh('mesh1').feature('bl1').selection.set([1 3 4 5]);
model.mesh('mesh1').feature('bl1').set('trimminangle', 280);
model.mesh('mesh1').feature('bl1').feature('blp1').set('blnlayers', 5);
model.mesh('mesh1').feature('bl1').feature('blp1').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp1').set('blhmin', '2.5e-4');
model.mesh('mesh1').feature('bl1').feature.duplicate('blp2', 'blp1');
model.mesh('mesh1').feature('bl1').feature('blp2').set('blhmin', '6e-5');
model.mesh('mesh1').feature('bl1').feature('blp2').selection.set([24 27 31 36 42 45 48 75 105]);
model.mesh('mesh1').feature('bl1').feature.duplicate('blp3', 'blp2');
model.mesh('mesh1').feature('bl1').feature('blp3').selection.set([4]);
model.mesh('mesh1').feature('bl1').feature('blp3').set('blhmin', '1.2e-4');
model.mesh('mesh1').feature('bl1').feature.duplicate('blp4', 'blp3');
model.mesh('mesh1').feature('bl1').feature('blp4').selection.set([15 64 65 66 67 68 69 87 88 89 90 92 93]);
model.mesh('mesh1').feature('bl1').feature('blp4').set('blhmin', '2e-4');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.set([6]);
model.mesh('mesh1').feature('swe1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('swe1').feature('dis1').set('elemcount', 10);
model.mesh('mesh1').feature('swe1').feature('dis1').set('elemratio', 4);
model.mesh('mesh1').feature('swe1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis2').selection.set([2]);
model.mesh('mesh1').feature('swe1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('swe1').feature('dis2').set('elemcount', 20);
model.mesh('mesh1').feature('swe1').feature('dis2').set('elemratio', 4);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature.move('map1', 1);
model.mesh('mesh1').feature('map1').selection.set([11 113]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([36 247]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 20);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([16 245]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 3);
model.mesh('mesh1').create('map2', 'Map');
model.mesh('mesh1').feature('map2').selection.set([39 54 55 83 84 97]);
model.mesh('mesh1').feature('map2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis1').selection.set([66 159]);
model.mesh('mesh1').feature('map2').feature('dis1').set('numelem', 20);
model.mesh('mesh1').feature('map2').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis2').selection.set([158 189 190]);
model.mesh('mesh1').feature('map2').feature('dis2').set('numelem', 3);
model.mesh('mesh1').create('conv1', 'Convert');
model.mesh('mesh1').run;

model.study('std1').feature('frrot').set('probesel', 'none');
model.study('std1').feature('frrot').set('useparam', true);
model.study('std1').feature('frrot').setIndex('pname', 'beta_in', 0);
model.study('std1').feature('frrot').setIndex('plistarr', '', 0);
model.study('std1').feature('frrot').setIndex('punit', 'rad', 0);
model.study('std1').feature('frrot').setIndex('pname', 'beta_in', 0);
model.study('std1').feature('frrot').setIndex('plistarr', '', 0);
model.study('std1').feature('frrot').setIndex('punit', 'rad', 0);
model.study('std1').feature('frrot').setIndex('pname', 'p_tot_in', 0);
model.study('std1').feature('frrot').setIndex('plistarr', 'range(-0.05,-0.1/4,-0.15)', 0);
model.study('std1').feature('frrot').setIndex('punit', 'bar', 0);
model.study('std1').feature('frrot').set('pcontinuationmode', 'no');
model.study('std1').feature('frrot').set('preusesol', 'yes');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'wdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'wdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'frrot');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'frrot');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('control', 'frrot');
model.sol('sol1').feature('s2').set('control', 'frrot');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('se1', 'Segregated');
model.sol('sol1').feature('s2').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u'});
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, fluid flow variables ()');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('segvar', {'comp1_k' 'comp1_om'});
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subdamp', 0.45);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('AMG, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('linsolver', 'i2');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').label('Turbulence Variables');
model.sol('sol1').feature('s2').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s2').feature('se1').set('subinitcfl', 2);
model.sol('sol1').feature('s2').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s2').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s2').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s2').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s2').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s2').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s2').feature('se1').set('maxsegiter', 400);
model.sol('sol1').feature('s2').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s2').feature('se1').feature('ll1').set('lowerlimit', 'comp1.om 0 comp1.k 0 ');
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, fluid flow variables ()');
model.sol('sol1').feature('s2').create('d2', 'Direct');
model.sol('sol1').feature('s2').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d2').label('Direct, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s2').feature('se1').set('probesel', 'all');

model.probe('bnd1').genResult('none');
model.probe('bnd2').genResult('none');

model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (spf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 5, 0);
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg2').feature.create('slc1', 'Slice');
model.result('pg2').feature('slc1').label('Slice');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('smooth', 'internal');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([1 2 3 4 5 7 8 10 11 12 15 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 59 60 61 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 82 83 84 85 87 88 89 90 92 93 94 97 98 99 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115]);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Pressure (spf)');
model.result('pg3').set('data', 'surf1');
model.result('pg3').setIndex('looplevel', 5, 0);
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'surf1');
model.result('pg3').setIndex('looplevel', 5, 0);
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond1/pg4');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'p');
model.result('pg3').feature('surf1').set('colortable', 'Dipole');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature('surf1').feature.create('tran1', 'Transparency');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Wall Resolution (spf)');
model.result('pg4').set('data', 'surf1');
model.result('pg4').setIndex('looplevel', 5, 0);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'surf1');
model.result('pg4').setIndex('looplevel', 5, 0);
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond1/pg3');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Wall Resolution');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('expr', 'spf.Delta_wPlus');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result('pg2').run;
model.result.dataset('dset1').selection.geom('geom1', 3);
model.result.dataset('dset1').selection.geom('geom1', 3);
model.result.dataset('dset1').selection.set([1 3 4 5 6]);
model.result.dataset('surf1').selection.named('geom1_unisel1');
model.result.numerical.create('av1', 'AvSurface');
model.result.numerical('av1').set('intvolume', true);
model.result.numerical('av1').selection.set([58]);
model.result.numerical('av1').setIndex('expr', 'w', 0);
model.result.numerical('av1').setIndex('unit', 'm/s', 0);
model.result.numerical('av1').setIndex('descr', 'Velocity field, z-component', 0);
model.result.numerical.create('av2', 'AvSurface');
model.result.numerical('av2').set('intvolume', true);
model.result.numerical('av2').selection.set([58]);
model.result.numerical('av2').setIndex('expr', 'p', 0);
model.result.numerical('av2').setIndex('unit', 'bar', 0);
model.result.numerical('av2').setIndex('descr', 'Pressure', 0);
model.result.numerical.create('av3', 'AvVolume');
model.result.numerical('av3').selection.all;
model.result.numerical('av3').label('Performance data');
model.result.numerical('av3').setIndex('expr', 'delta_p', 0);
model.result.numerical('av3').setIndex('unit', 'N/m^2', 0);
model.result.numerical('av3').setIndex('descr', 'static pressure increase', 0);
model.result.numerical('av3').setIndex('expr', 'delta_p_tot', 1);
model.result.numerical('av3').setIndex('unit', 'N/m^2', 1);
model.result.numerical('av3').setIndex('descr', 'total pressure increase', 1);
model.result.numerical('av3').setIndex('expr', 'Torque', 2);
model.result.numerical('av3').setIndex('unit', 'N*m', 2);
model.result.numerical('av3').setIndex('descr', 'torque', 2);
model.result.numerical('av3').setIndex('expr', 'Power', 3);
model.result.numerical('av3').setIndex('unit', 'N*m/s', 3);
model.result.numerical('av3').setIndex('descr', 'shaft power consumption', 3);
model.result.numerical('av3').setIndex('expr', 'H_power', 4);
model.result.numerical('av3').setIndex('unit', 'N*m/s', 4);
model.result.numerical('av3').setIndex('descr', 'power given to fluid', 4);
model.result.numerical('av3').setIndex('expr', 'eta', 5);
model.result.numerical('av3').setIndex('unit', 1, 5);
model.result.numerical('av3').setIndex('descr', 'pump efficiency', 5);
model.result.numerical('av3').setIndex('expr', 'H', 6);
model.result.numerical('av3').setIndex('unit', 1, 6);
model.result.numerical('av3').setIndex('descr', 'Head', 6);
model.result.numerical('av3').setIndex('expr', 'flowrate', 7);
model.result.numerical('av3').setIndex('unit', 'l/min', 7);
model.result.numerical('av3').setIndex('descr', 'flowrate', 7);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Performance data');
model.result.numerical('av3').set('table', 'tbl2');
model.result.numerical('av3').setResult;
model.result.table('tbl2').label('Performance data');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Pump Curve');
model.result('pg5').set('data', 'none');
model.result('pg5').create('tblp1', 'Table');
model.result('pg5').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg5').feature('tblp1').set('linewidth', 'preference');
model.result('pg5').feature('tblp1').set('table', 'tbl2');
model.result('pg5').feature('tblp1').set('plotcolumninput', 'manual');
model.result('pg5').feature('tblp1').set('plotcolumns', [8]);
model.result('pg5').feature('tblp1').set('xaxisdata', 9);
model.result('pg5').feature('tblp1').set('linemarker', 'point');
model.result('pg5').run;
model.result('pg2').run;
model.result('pg2').set('edges', false);
model.result('pg2').setIndex('looplevel', 2, 0);
model.result('pg2').set('titletype', 'none');
model.result('pg2').run;
model.result('pg2').feature('slc1').set('titletype', 'none');
model.result('pg2').feature('slc1').set('quickplane', 'xy');
model.result('pg2').feature('slc1').set('quickznumber', 1);
model.result('pg2').feature('slc1').set('interactive', true);
model.result('pg2').feature('slc1').set('shift', -0.04);
model.result('pg2').feature('slc1').set('colorlegend', false);
model.result('pg2').run;
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('data', 'surf1');
model.result('pg2').feature('surf1').set('expr', '1');
model.result('pg2').feature('surf1').set('titletype', 'none');
model.result('pg2').feature('surf1').set('coloring', 'uniform');
model.result('pg2').feature('surf1').set('color', 'gray');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').create('slc2', 'Slice');
model.result('pg2').feature('slc2').set('expr', 'p');
model.result('pg2').feature('slc2').set('unit', 'bar');
model.result('pg2').feature('slc2').set('titletype', 'manual');
model.result('pg2').feature('slc2').set('title', 'Relative pressure (left, Pa) - Velocity (right, m/s)');
model.result('pg2').feature('slc2').set('quickplane', 'xy');
model.result('pg2').feature('slc2').set('quickznumber', 1);
model.result('pg2').feature('slc2').set('interactive', true);
model.result('pg2').feature('slc2').set('colortable', 'AuroraAustralis');
model.result('pg2').feature('slc2').set('shift', -0.04);
model.result('pg2').feature('slc2').create('def1', 'Deform');
model.result('pg2').run;
model.result('pg2').feature('slc2').feature('def1').set('expr', {'8[cm]*sqrt(2)' '' ''});
model.result('pg2').feature('slc2').feature('def1').setIndex('expr', '-8[cm]*sqrt(2)', 1);
model.result('pg2').feature('slc2').feature('def1').set('scaleactive', true);
model.result('pg2').feature('slc2').feature('def1').set('scale', 1);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').create('slc3', 'Slice');
model.result('pg2').feature('slc3').set('titletype', 'none');
model.result('pg2').feature('slc3').set('quickplane', 'zx');
model.result('pg2').feature('slc3').set('quickynumber', 1);
model.result('pg2').feature('slc3').set('interactive', true);
model.result('pg2').feature('slc3').set('inheritplot', 'slc1');
model.result('pg2').feature('slc3').set('shift', 0.006);
model.result('pg2').run;
model.result('pg2').create('surf2', 'Surface');
model.result('pg2').feature('surf2').set('data', 'surf1');
model.result('pg2').feature('surf2').set('expr', '1');
model.result('pg2').feature('surf2').set('titletype', 'manual');
model.result('pg2').feature('surf2').set('coloring', 'uniform');
model.result('pg2').feature('surf2').set('color', 'gray');
model.result('pg2').feature('surf2').create('def1', 'Deform');
model.result('pg2').run;
model.result('pg2').feature('surf2').feature('def1').set('expr', {'8[cm]*sqrt(2)' '' ''});
model.result('pg2').feature('surf2').feature('def1').setIndex('expr', '-8[cm]*sqrt(2)', 1);
model.result('pg2').feature('surf2').feature('def1').set('scaleactive', true);
model.result('pg2').feature('surf2').feature('def1').set('scale', 1);
model.result('pg2').run;
model.result('pg2').set('titletype', 'auto');
model.result('pg2').set('legendpos', 'alternating');
model.result('pg2').run;
model.result('pg2').feature('slc1').set('colorlegend', true);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('surf1').set('unit', 'bar');
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').feature('surf1').set('data', 'surf1');
model.result('pg4').feature('surf1').set('expr', 'spf.d_w_plus');
model.result('pg4').run;
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'mass flow (kg/s)');
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result('pg1').feature('tblp1').set('linemarker', 'cycle');
model.result('pg1').feature('tblp1').set('legendmethod', 'manual');
model.result('pg1').feature('tblp1').setIndex('legends', 'm_in (kg/s)', 0);
model.result('pg1').feature('tblp1').setIndex('legends', 'm_out  (kg/s)', 1);
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result.dataset.create('surf2', 'Surface');
model.result.dataset('surf2').label('Exterior Walls  2');
model.result.dataset('surf2').selection.set([1 2 3 5 7 8 10 11 15 25 26 27 28 29 30 31 32 33 34 35 36 37 38 40 41 42 43 44 45 46 47 48 49 50 51 52 53 56 59 60 61 66 67 68 69 70 71 72 73 74 75 76 77 78 82 85 88 89 90 92 94 99 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115]);
model.result.dataset.create('dset4', 'Solution');
model.result.dataset.create('cpl1', 'CutPlane');
model.result.dataset('cpl1').set('data', 'dset4');
model.result.dataset('cpl1').set('quickplane', 'xy');
model.result.dataset('cpl1').set('quickz', 0.0125);
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').run;
model.result('pg6').set('data', 'dset4');
model.result('pg6').setIndex('looplevel', 2, 0);
model.result('pg6').set('edges', false);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('data', 'surf2');
model.result('pg6').feature('surf1').setIndex('looplevel', 2, 0);
model.result('pg6').feature('surf1').set('coloring', 'uniform');
model.result('pg6').feature('surf1').set('color', 'gray');
model.result('pg6').run;
model.result('pg6').create('surf2', 'Surface');
model.result('pg6').feature('surf2').set('data', 'cpl1');
model.result('pg6').feature('surf2').setIndex('looplevel', 2, 0);
model.result('pg6').feature('surf2').set('colortable', 'JupiterAuroraBorealis');
model.result('pg6').run;
model.result('pg6').create('str1', 'StreamlineSurface');
model.result('pg6').feature('str1').set('data', 'cpl1');
model.result('pg6').feature('str1').setIndex('looplevel', 2, 0);
model.result('pg6').feature('str1').set('posmethod', 'uniform');
model.result('pg6').feature('str1').set('udist', 0.01);
model.result('pg6').feature('str1').set('linetype', 'tube');
model.result('pg6').feature('str1').set('radiusexpr', '0.05');
model.result('pg6').feature('str1').set('tuberadiusscaleactive', true);
model.result('pg6').feature('str1').set('tuberadiusscale', 0.005);
model.result('pg6').feature('str1').set('color', 'custom');
model.result('pg6').feature('str1').set('customcolor', [0.4117647111415863 0.4117647111415863 0.4117647111415863]);
model.result('pg6').run;
model.result('pg6').create('str2', 'Streamline');
model.result('pg6').feature('str2').set('selnumber', 14);
model.result('pg6').feature('str2').selection.set([58]);
model.result('pg6').feature('str2').set('linetype', 'tube');
model.result('pg6').feature('str2').set('radiusexpr', '0.05');
model.result('pg6').feature('str2').set('tuberadiusscaleactive', true);
model.result('pg6').feature('str2').set('tuberadiusscale', 0.005);
model.result('pg6').feature('str2').set('color', 'custom');
model.result('pg6').feature('str2').set('customcolor', [0.4117647111415863 0.4117647111415863 0.4117647111415863]);
model.result('pg6').run;

model.title('Centrifugal Pump');

model.description(['Centrifugal pumps are used in various applications and can be found in many industries. The size of the pump in this model is typical for automotive applications. This model shows how to set up rotating machinery simulations using the frozen rotor approximation for modeling centrifugal pumps. The model Includes the computation of a series of interesting parameters for pumps using component couplings and especially evaluates the pump curve. The geometry is built with COMSOL' native2unicode(hex2dec({'20' '19'}), 'unicode') 's geometry tools.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('centrifugal_pump.mph');

model.modelNode.label('Components');

out = model;
