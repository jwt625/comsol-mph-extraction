function out = model
%
% rotor_thermal_stress.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Rotordynamics_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('htlsh', 'HeatTransferInFilmsLM', 'geom1');
model.physics('htlsh').model('comp1');
model.physics.create('hdb', 'HydrodynamicBearing', 'geom1');
model.physics('hdb').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics('solid').prop('StructuralTransientBehavior').set('StructuralTransientBehavior', 'Quasistatic');
model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');

model.multiphysics.create('te1', 'ThermalExpansion', 'geom1', 3);
model.multiphysics('te1').set('Heat_physics', 'ht');
model.multiphysics('te1').set('Solid_physics', 'solid');
model.multiphysics('te1').selection.all;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/htlsh', true);
model.study('std1').feature('stat').setSolveFor('/physics/hdb', true);
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/te1', true);

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'rotor_thermal_stress.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('imprint', true);
model.geom('geom1').run('fin');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('dJ', '0.05[m]', 'Journal diameter');
model.param.set('Lb', '0.04[m]', 'Bushing length');
model.param.set('C', '1e-3*dJ', 'Bearing clearance');
model.param.set('W', '2000[N]', 'Static Load on Rotor');
model.param.set('muO', '0.0028[Pa*s]', 'Oil viscosity');
model.param.set('rhoO', '866[kg/m^3]', 'Oil density');
model.param.set('kO', '0.13[W/m/K]', 'Oil conductivity');
model.param.set('CpO', '2000[J/kg/K]', 'Oil heat capacity');
model.param.set('gammaO', '1.4', 'Oil heat capacity ratio');
model.param.set('fr', '3000[rpm]', 'Rotor angular speed');
model.param.set('nu_air', '17e-6[m^2/s]', 'Air kinematic viscosity');
model.param.set('k_air', '2.8e-2[W/m/K]', 'Air thermal conductivity');
model.param.set('Cp_air', '1.006[kJ/kg/K]', 'Air heat capacity');
model.param.set('rho_air', '1.225[kg/m^3]', 'Air density');
model.param.set('Rd', '287[J/kg/K]', 'Gas constant for air');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').set([28 29]);
model.selection('sel1').label('Bearing Housing');
model.selection.create('com1', 'Complement');
model.selection('com1').model('comp1');
model.selection('com1').label('Rotor');
model.selection('com1').set('input', {'sel1'});
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').geom(2);
model.selection('sel2').label('Journal 1');
model.selection('sel2').set([149 150 184 185]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').geom(2);
model.selection('sel3').label('Bearing 1');
model.selection('sel3').set([388 389 393 394]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').geom(2);
model.selection('sel4').label('Journal 2');
model.selection('sel4').set([159 160 336 337]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').geom(2);
model.selection('sel5').label('Bearing 2');
model.selection('sel5').set([451 452 456 457]);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Housing foundation');
model.selection('sel6').geom(2);
model.selection('sel6').set([367 409 430 472]);
model.selection('sel6').set('groupcontang', true);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Journals');
model.selection('uni1').set('entitydim', 2);
model.selection('uni1').set('input', {'sel2' 'sel4'});
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Bearings');
model.selection('uni2').set('entitydim', 2);
model.selection('uni2').set('input', {'sel3' 'sel5'});
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').set('input', {'com1'});
model.selection('adj1').label('Shaft Exterior');
model.selection.duplicate('adj2', 'adj1');
model.selection('adj2').set('input', {'sel1'});
model.selection('adj2').label('Housing Exterior');
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').set('entitydim', 2);
model.selection('dif1').set('add', {'adj1'});
model.selection('dif1').set('subtract', {'uni1'});
model.selection('dif1').label('Convective boundaries (Shaft)');
model.selection.duplicate('dif2', 'dif1');
model.selection('dif2').label('Convective boundaries (Housing)');
model.selection('dif2').set('add', {'adj2'});
model.selection('dif2').set('subtract', {'uni2'});
model.selection.create('adj3', 'Adjacent');
model.selection('adj3').model('comp1');
model.selection('adj3').set('entitydim', 2);
model.selection('adj3').set('input', {'uni1'});
model.selection('adj3').set('outputdim', 1);
model.selection('adj3').label('Exterior Edges (Journal)');
model.selection.duplicate('adj4', 'adj3');
model.selection('adj4').label('Interior Edges (Journal)');
model.selection('adj4').set('exterior', false);
model.selection('adj4').set('interior', true);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').selection.geom('geom1', 2);
model.variable('var1').selection.named('dif1');
model.variable('var1').set('d_rot', '2*sqrt(X^2+Z^2)');
model.variable('var1').descr('d_rot', 'Diameter of the shaft');
model.variable('var1').set('Re_air', '2*pi*fr*d_rot^2/nu_air');
model.variable('var1').descr('Re_air', 'Reynolds number for the flow');
model.variable('var1').set('Pr_air', 'Cp_air*rho_air*nu_air/k_air');
model.variable('var1').descr('Pr_air', 'Prandtl number for air');
model.variable('var1').set('h_shaft', 'k_air*Re_air^(2/3)*Pr_air^(1/3)/(15*d_rot/2)');
model.variable('var1').descr('h_shaft', 'Heat transfer coefficient of the shaft');

model.cpl.create('genext1', 'GeneralExtrusion', 'geom1');
model.cpl('genext1').selection.geom('geom1', 2);
model.cpl('genext1').selection.named('uni2');
model.cpl('genext1').set('dstmap', {'X' 'Y' 'Z'});
model.cpl('genext1').set('srcframe', 'material');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').selection.geom('geom1', 2);
model.material('mat2').selection.named('uni1');

model.physics('htlsh').selection.named('uni1');
model.physics('hdb').selection.named('uni1');

model.material('mat2').propertyGroup('def').set('thermalconductivity', {'kO'});
model.material('mat2').propertyGroup('def').set('density', {'rhoO'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'CpO'});
model.material('mat2').propertyGroup.create('shell', 'Shell');
model.material('mat2').propertyGroup('shell').set('lth', {'C'});
model.material('mat2').propertyGroup('shell').set('lrot', {'0.0'});
model.material('mat2').propertyGroup('shell').set('lne', {'2'});
model.material('mat2').propertyGroup('def').set('dynamicviscosity', {'muO'});
model.material('mat2').label('Material: Oil');

model.physics('htlsh').feature('fls1').set('LayerType', 'General');
model.physics('htlsh').feature('fls1').set('u_src', 'root.comp1.hdb.vavex');
model.physics('htlsh').create('hs1', 'HeatSource', 2);
model.physics('htlsh').feature('hs1').selection.named('uni1');
model.physics('htlsh').feature('hs1').set('Q0_src', 'root.comp1.hdb.Qvd');
model.physics('htlsh').create('tempi1', 'TemperatureInterface', 2);
model.physics('htlsh').feature('tempi1').set('applyTo', 'top');
model.physics('htlsh').feature('tempi1').set('T0', 'T2');
model.physics('htlsh').feature('tempi1').selection.named('uni1');
model.physics('htlsh').feature.duplicate('tempi2', 'tempi1');
model.physics('htlsh').feature('tempi2').set('applyTo', 'bottom');
model.physics('htlsh').feature('tempi2').set('T0', 'genext1(T2)');
model.physics('hdb').prop('EquationType').set('EquationType', 'ReynoldsEquationWithCavitation');
model.physics('hdb').feature('hjb1').set('C_plain', 'C');
model.physics('hdb').feature('hjb1').set('BearingCenterType', 'fromGeom');
model.physics('hdb').feature('hjb1').set('Specify', 'Load');
model.physics('hdb').feature('hjb1').set('W', {'0' '0' '-W/2'});
model.physics('hdb').feature('hjb1').set('Ow', '2*pi[rad]*fr');
model.physics('hdb').feature.duplicate('hjb2', 'hjb1');
model.physics('hdb').feature('hjb2').selection.named('sel4');
model.physics('hdb').feature('bax1').set('bearingAxis', 'yAxis');
model.physics('hdb').feature('bax1').set('e_aux', [1 0 0]);
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.named('sel6');
model.physics('solid').create('disp1', 'Displacement2', 2);
model.physics('solid').feature('disp1').selection.set([9 10 41 42 89 90 165 168 226 231 354 355]);
model.physics('solid').feature('disp1').setIndex('Direction', 'prescribed', 1);
model.physics('solid').create('disp2', 'Displacement1', 1);
model.physics('solid').feature('disp2').selection.set([219 479]);
model.physics('solid').feature('disp2').setIndex('Direction', 'prescribed', 0);
model.physics('solid').feature('disp2').setIndex('Direction', 'prescribed', 2);
model.physics('ht').create('hf1', 'HeatFluxBoundary', 2);
model.physics('ht').feature('hf1').label('Heat Flux: Shaft');
model.physics('ht').feature('hf1').selection.named('dif1');
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 'h_shaft');
model.physics('ht').feature.duplicate('hf2', 'hf1');
model.physics('ht').feature('hf2').label('Heat Flux: Housing');
model.physics('ht').feature('hf2').selection.named('dif2');
model.physics('ht').feature('hf2').set('h', 5);

model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.named('com1');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 40);
model.mesh('mesh1').feature('swe1').create('size1', 'Size');
model.mesh('mesh1').feature('swe1').feature('size1').selection.set([26 27]);
model.mesh('mesh1').feature('swe1').feature('size1').set('hauto', 3);
model.mesh('mesh1').create('cpf1', 'CopyFace');
model.mesh('mesh1').feature('cpf1').selection('source').named('uni1');
model.mesh('mesh1').feature('cpf1').selection('destination').named('uni2');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.set([362 404 425 467]);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hauto', 4);
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').run;
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').run;

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_pfilm').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_pfilm').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_pfilm').set('scaleval', '1000000');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_T2'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subdamp', 1);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables ht (te1)');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Temperature');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_pfilm' 'comp1_hdb_hjb1_uJ' 'comp1_hdb_hjb2_uJ' 'comp1_T'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol1').feature('s1').create('d2', 'Direct');
model.sol('sol1').feature('s1').feature('d2').label('Direct (Merged)');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Merged Variables');
model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_u'});
model.sol('sol1').feature('s1').create('d3', 'Direct');
model.sol('sol1').feature('s1').feature('d3').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d3').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d3').label('Suggested Direct Solver solid (te1)');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'd3');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').label('Solid Mechanics');
model.sol('sol1').feature('s1').feature('se1').set('segtermonres', 'off');
model.sol('sol1').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T2 0 comp1.T 0 ');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver solid (te1)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, heat transfer variables ht (te1)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('i3', 'Iterative');
model.sol('sol1').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i3').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i3').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i3').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i3').label('AMG, heat transfer variables (htlsh)');
model.sol('sol1').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').runAll;

model.result.dataset.create('lshl1', 'LayeredMaterial');
model.result.dataset('lshl1').set('data', 'dset1');
model.result.dataset('lshl1').selection.geom('geom1', 2);
model.result.dataset('lshl1').selection.set([149 150 159 160 184 185 336 337]);
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Temperature, Shell (htlsh)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'htlsh/HTLSH_PhysicsInterfaces/icom36/pdef1/pcond4/pcond1/pg1');
model.result('pg1').feature.create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('data', 'lshl1');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('solutionparams', 'parent');
model.result('pg1').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('vol1').set('smooth', 'internal');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('data', 'lshl1');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Fluid Pressure (hdb)');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'fluidPressure');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'pfilm');
model.result('pg2').feature('surf1').set('colortable', 'RainbowLight');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').set('expr', 'pfilm');
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('colorlegend', false);
model.result('pg2').feature('con1').set('smooth', 'internal');
model.result('pg2').feature('con1').set('inherittubescale', false);
model.result('pg2').feature('con1').set('data', 'parent');
model.result('pg2').feature('con1').set('inheritplot', 'surf1');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'stress');
model.result('pg3').label('Stress (solid)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg3').feature('vol1').set('threshold', 'manual');
model.result('pg3').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg3').feature('vol1').set('colortable', 'Rainbow');
model.result('pg3').feature('vol1').set('colortabletrans', 'none');
model.result('pg3').feature('vol1').set('colorscalemode', 'linear');
model.result('pg3').feature('vol1').set('resolution', 'custom');
model.result('pg3').feature('vol1').set('refine', 2);
model.result('pg3').feature('vol1').set('colortable', 'Prism');
model.result('pg3').feature('vol1').create('def', 'Deform');
model.result('pg3').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg3').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Temperature (ht)');
model.result('pg4').set('data', 'dset1');
model.result('pg4').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg4').feature.create('vol1', 'Volume');
model.result('pg4').feature('vol1').set('showsolutionparams', 'on');
model.result('pg4').feature('vol1').set('solutionparams', 'parent');
model.result('pg4').feature('vol1').set('expr', 'T2');
model.result('pg4').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg4').feature('vol1').set('smooth', 'internal');
model.result('pg4').feature('vol1').set('showsolutionparams', 'on');
model.result('pg4').feature('vol1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('vol1').set('rangecoloractive', true);
model.result('pg3').feature('vol1').set('rangecolormax', 400000000);
model.result('pg3').run;
model.result('pg3').feature('vol1').feature('def').set('scaleactive', true);
model.result('pg3').feature('vol1').feature('def').set('scale', 50);
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').run;
model.result('pg5').label('Viscous Heat');
model.result('pg5').set('view', 'new');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', 'hdb.Qvd');
model.result('pg5').feature('surf1').set('descr', 'Viscous dissipation');
model.result('pg5').feature('surf1').set('colortable', 'Prism');
model.result('pg5').run;
model.result('pg3').run;

model.title('Thermal Stress in a Rotor due to Bearing Heat Loss');

model.description(['Hydrodynamic bearings generate heat due to the viscous losses in the lubricant. As a result, the temperature of the rotor increases causing deformation and thermal stresses in both the rotor and the bearing housing.' newline  newline 'This example shows how to model different physical phenomena that are involved in the heat transfer in a rotor bearing system and how they affect each other.' newline  newline 'The results include pressure distribution and viscous heat loss in the bearing; temperature profile in the lubricant film, rotor, and bearing housing; and stress and deformation in the rotor and the bearing housing.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('rotor_thermal_stress.mph');

model.modelNode.label('Components');

out = model;
