function out = model
%
% small_punch_test.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Nonlinear_Structural_Materials_Module/Viscoplasticity');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/solid', true);

model.param.label('Geometrical Parameters');
model.param.set('D', '6.4[mm]');
model.param.descr('D', 'Diameter of specimen');
model.param.set('th', '0.5[mm]');
model.param.descr('th', 'Thickness of specimen');
model.param.set('r_punch', '1.27[mm]');
model.param.descr('r_punch', 'Radius of punch');
model.param.set('rout_clamp', '3.22[mm]');
model.param.descr('rout_clamp', 'Outer radius of clamp');
model.param.set('r_bottom', '1.3[mm]');
model.param.descr('r_bottom', 'Bottom radius of clamp');
model.param.set('r_top', '1.94[mm]');
model.param.descr('r_top', 'Top radius of clamp');
model.param.set('h_punch', '3.27[mm]');
model.param.descr('h_punch', 'Height of punch');
model.param.set('r_fillet', '0.25[mm]');
model.param.descr('r_fillet', 'Fillet radius');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'D/2' 'th'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'rout_clamp-r_bottom' '1'});
model.geom('geom1').feature('r2').setIndex('size', 'th/4', 1);
model.geom('geom1').feature('r2').set('pos', {'r_bottom' '-th/4'});
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', {'rout_clamp-r_top' '1'});
model.geom('geom1').feature('r3').setIndex('size', 'th', 1);
model.geom('geom1').feature('r3').set('pos', {'r_top' 'th'});
model.geom('geom1').run('r3');
model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 'r_punch');
model.geom('geom1').feature('c1').set('angle', 90);
model.geom('geom1').feature('c1').set('pos', {'0' '-r_punch'});
model.geom('geom1').run('c1');
model.geom('geom1').create('r4', 'Rectangle');
model.geom('geom1').feature('r4').set('size', {'r_punch' 'h_punch-r_punch'});
model.geom('geom1').feature('r4').set('pos', {'0' '-h_punch'});
model.geom('geom1').run('r4');
model.geom('geom1').create('fil1', 'Fillet');
model.geom('geom1').feature('fil1').selection('pointinsketch').set('r3', 1);
model.geom('geom1').feature('fil1').set('radius', 'r_fillet');
model.geom('geom1').run('fil1');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'c1' 'r4'});
model.geom('geom1').run('uni1');
model.geom('geom1').run('uni1');
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('pairtype', 'contact');
model.geom('geom1').run('fin');
model.geom('geom1').create('mce1', 'MeshControlEdges');
model.geom('geom1').feature('mce1').selection('input').set('fin', 4);
model.geom('geom1').run('mce1');

model.pair('ap1').swap;
model.pair('ap2').swap;
model.pair('ap2').manualSelection(true);
model.pair('ap2').source.set([12 14 16]);
model.pair.create('p3', 'Contact', 'geom1');
model.pair('p3').source.set([3]);
model.pair('p3').destination.set([5]);

model.param.create('par2');
model.param('par2').label('Material Parameters');
model.param('par2').set('mu_initial', '10[MPa]');
model.param('par2').descr('mu_initial', 'Initial shear modulus');
model.param('par2').set('mu', '9.4[MPa]');
model.param('par2').descr('mu', 'Macroscopic shear modulus');
model.param('par2').set('betav1', '20');
model.param('par2').descr('betav1', 'Energy factor, branch 1');
model.param('par2').set('betav2_i', '29.3');
model.param('par2').descr('betav2_i', 'Initial energy factor, branch 2');
model.param('par2').set('betav2_f', '7.91');
model.param('par2').descr('betav2_f', 'Final energy factor, branch 2');
model.param('par2').set('q', '0.23');
model.param('par2').descr('q', 'Relative contribution of I2 on strain energy');
model.param('par2').set('lambdalock', '3.25');
model.param('par2').descr('lambdalock', 'Lock stretch');
model.param('par2').set('N', 'lambdalock^2');
model.param('par2').descr('N', 'Number of segments');
model.param('par2').set('Kappa', '6[GPa]');
model.param('par2').descr('Kappa', 'Bulk modulus');
model.param('par2').set('sig1res', '3.25[MPa]*sqrt(3/2)');
model.param('par2').descr('sig1res', 'Flow resistance, branch 1');
model.param('par2').set('sig2res', '20.1[MPa]*sqrt(3/2)');
model.param('par2').descr('sig2res', 'Flow resistance, branch 2');
model.param('par2').set('a', '0.073*sqrt(3/2)');
model.param('par2').descr('a', 'Coupling pressure coefficient');
model.param('par2').set('n', '20');
model.param('par2').descr('n', 'Stress exponent');
model.param('par2').set('alfa_rate', '31.9');
model.param('par2').descr('alfa_rate', 'Evolution rate coefficient of shear modulus');

model.physics('solid').create('hmm1', 'HyperelasticModel', 2);
model.physics('solid').feature('hmm1').selection.set([2]);
model.physics('solid').feature('hmm1').set('MaterialModel', 'ArrudaBoyce');
model.physics('solid').feature('hmm1').set('Compressibility_ArrudaBoyce', 'CompressibleUncoupled');
model.physics('solid').feature('hmm1').set('reducedIntegration', true);
model.physics('solid').feature('hmm1').set('CalculateDissipatedEnergy', true);
model.physics('solid').feature('hmm1').create('pvp1', 'PolymerViscoplasticity', 2);
model.physics('solid').feature('hmm1').feature('pvp1').set('ViscoplasticityModel', 'BergstromBischoff');
model.physics('solid').feature('hmm1').feature('pvp1').set('betav1', 'betav1/(1/(1+q))');
model.physics('solid').feature('hmm1').feature('pvp1').set('betav2_i', 'betav2_i/(1/(1+q))');
model.physics('solid').feature('hmm1').feature('pvp1').set('betav2_f', 'betav2_f/(1/(1+q))');
model.physics('solid').feature('hmm1').feature('pvp1').set('alpha', 'alfa_rate');
model.physics('solid').feature('hmm1').feature('pvp1').set('timeMethod', 'ode');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').selection.set([2]);
model.material('mat1').label('UHMWPE');
model.material('mat1').propertyGroup.create('KG', 'Bulk_modulus_and_shear_modulus');
model.material('mat1').propertyGroup('KG').set('K', {'Kappa*(1/(1+q))+2*Kappa'});
model.material('mat1').propertyGroup.create('ArrudaBoyce', 'Arruda-Boyce');
model.material('mat1').propertyGroup('ArrudaBoyce').set('Nseg', {'N'});
model.material('mat1').propertyGroup('ArrudaBoyce').set('mu0', {'mu*(1/(1+q))'});
model.material('mat1').propertyGroup('def').set('density', {'0'});
model.material('mat1').propertyGroup.create('BergstromBischoff', 'Bergstrom-Bischoff_viscoplasticity');
model.material('mat1').propertyGroup('BergstromBischoff').set('A_BeBi', {'1[1/s]*sqrt(2/3)'});
model.material('mat1').propertyGroup('BergstromBischoff').set('sigRes1_BeBi', {'sig1res'});
model.material('mat1').propertyGroup('BergstromBischoff').set('n1_BeBi', {'if(t<1[s],1,n)'});
model.material('mat1').propertyGroup('BergstromBischoff').set('a1_BeBi', {'a/((1/(1+q))+2)'});
model.material('mat1').propertyGroup('BergstromBischoff').set('sigRes2_BeBi', {'sig2res'});
model.material('mat1').propertyGroup('BergstromBischoff').set('n2_BeBi', {'if(t<1[s],1,n)'});
model.material('mat1').propertyGroup('BergstromBischoff').set('a2_BeBi', {'1/((1/(1+q))+2)'});

model.physics('solid').feature('hmm1').create('exs1', 'ExternalStress', 2);
model.physics('solid').feature('hmm1').feature('exs1').set('Sext', {'q/(1+q)*mu_initial*solid.J^(-2/3)*solid.I1CIel' '0' '0' '0' 'q/(1+q)*mu_initial*solid.J^(-2/3)*solid.I1CIel' '0' '0' '0' 'q/(1+q)*mu_initial*solid.J^(-2/3)*solid.I1CIel'});
model.physics('solid').feature('hmm1').create('exs2', 'ExternalStress', 2);
model.physics('solid').feature('hmm1').feature('exs2').set('StressInputType', 'StressTensorSpatial');
model.physics('solid').feature('hmm1').feature('exs2').set('sext', {'-(2/3)*q/(1+q)*mu_initial*solid.I2CIel/solid.J' '0' '0' '0' '-(2/3)*q/(1+q)*mu_initial*solid.I2CIel/solid.J' '0' '0' '0' '-(2/3)*q/(1+q)*mu_initial*solid.I2CIel/solid.J'});
model.physics('solid').feature('hmm1').create('exs3', 'ExternalStress', 2);
model.physics('solid').feature('hmm1').feature('exs3').set('Sext', {'-(q/(1+q))*mu_initial*solid.J^(-4/3)*solid.Cel11' '-(q/(1+q))*mu_initial*solid.J^(-4/3)*solid.Cel12' '-(q/(1+q))*mu_initial*solid.J^(-4/3)*solid.Cel13' '-(q/(1+q))*mu_initial*solid.J^(-4/3)*solid.Cel12' '-(q/(1+q))*mu_initial*solid.J^(-4/3)*solid.Cel22' '-(q/(1+q))*mu_initial*solid.J^(-4/3)*solid.Cel23' '-(q/(1+q))*mu_initial*solid.J^(-4/3)*solid.Cel13' '-(q/(1+q))*mu_initial*solid.J^(-4/3)*solid.Cel23' '-(q/(1+q))*mu_initial*solid.J^(-4/3)*solid.Cel33'});

model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').selection.set([1 3 4]);
model.material('mat2').label('Steel');
model.material('mat2').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat2').propertyGroup('Enu').set('E', {'210[GPa]'});
model.material('mat2').propertyGroup('Enu').set('nu', {'0.3'});
model.material('mat2').propertyGroup('def').set('density', {'7800[kg/m^3]'});

model.physics('solid').create('rd1', 'RigidDomain', 2);
model.physics('solid').feature('rd1').label('Rigid Material: Clamp');
model.physics('solid').feature('rd1').selection.set([3 4]);
model.physics('solid').feature('rd1').create('fix1', 'FixedConstraint', -1);
model.physics('solid').create('rd2', 'RigidDomain', 2);
model.physics('solid').feature('rd2').selection.set([1]);
model.physics('solid').feature('rd2').label('Rigid Material: Punch');

model.param.create('par3');
model.param('par3').label('Test Parameters');
model.param('par3').set('wdot', '0.5[mm/min]');
model.param('par3').descr('wdot', 'Speed of punch');
model.param('par3').set('wmax', '4[mm]');
model.param('par3').descr('wmax', 'Maximum displacement');
model.param('par3').set('Dt', 'wmax/wdot');
model.param('par3').descr('Dt', 'Time of movement');
model.param('par3').set('Dt_transient', '12[s]');
model.param('par3').descr('Dt_transient', 'Time of transient');
model.param('par3').set('Dt_tot', '2*Dt+Dt_transient');
model.param('par3').descr('Dt_tot', 'Total time of simulation');

model.func.create('tri1', 'Triangle');
model.func('tri1').model('comp1');
model.func('tri1').label('Punch Displacement');
model.func('tri1').set('lower', 'Dt_transient');
model.func('tri1').set('upper', 'Dt_tot');
model.func('tri1').set('amplitude', 'wmax');
model.func('tri1').set('smooth', '20[s]');

model.physics('solid').feature('rd2').create('pdr1', 'PrescribedDispRot', -1);
model.physics('solid').feature('rd2').feature('pdr1').set('W0', 'tri1(t)');
model.physics('solid').feature('rd2').feature('pdr1').set('WeakConstraints', true);
model.physics('solid').prop('StructuralTransientBehavior').set('StructuralTransientBehavior', 'Quasistatic');
model.physics('solid').feature('dcnt1').set('E_char', 'solid.Eequ*(1+betav1+betav2_i)');
model.physics('solid').feature('dcnt1').create('fric1', 'Friction', 1);
model.physics('solid').feature('dcnt1').feature('fric1').set('mu_fric', 0.05);
model.physics('solid').feature('dcnt1').feature('fric1').set('penaltyCtrlFrictionPenalty', 'ManualTuning');
model.physics('solid').feature('dcnt1').feature('fric1').set('ft_penalty', 0.1);

model.param.create('par4');
model.param('par4').label('Mesh Parameters');
model.param('par4').set('w_mesh', 'D/2/50');
model.param('par4').descr('w_mesh', 'Mesh element width');
model.param('par4').set('th_mesh', 'th/8');
model.param('par4').descr('th_mesh', 'Mesh element height');

model.geom('geom1').run('uni1');
model.geom('geom1').create('r5', 'Rectangle');
model.geom('geom1').feature('r5').set('size', {'w_mesh*8' 'th_mesh*2'});
model.geom('geom1').feature('r5').set('pos', {'w_mesh*28' 'th-th_mesh*2'});
model.geom('geom1').run('r5');
model.geom('geom1').create('pard1', 'PartitionDomains');
model.geom('geom1').feature('pard1').selection('domain').set('r1', 1);
model.geom('geom1').feature('pard1').set('partitionwith', 'objects');
model.geom('geom1').feature('pard1').selection('object').set({'r5'});
model.geom('geom1').feature('pard1').set('keepobject', false);
model.geom('geom1').run('pard1');
model.geom('geom1').create('r6', 'Rectangle');
model.geom('geom1').feature('r6').set('size', {'D/2' 'th_mesh*2'});
model.geom('geom1').feature('r6').set('pos', {'0' 'th-th_mesh*2'});
model.geom('geom1').run('r6');
model.geom('geom1').feature.duplicate('pard2', 'pard1');
model.geom('geom1').feature('pard2').selection('domain').set('pard1', 1);
model.geom('geom1').feature('pard2').selection('object').set({'r6'});
model.geom('geom1').run('pard2');
model.geom('geom1').runPre('mce1');
model.geom('geom1').feature('mce1').selection('input').set('fin', [4 10 12 13 15 16]);
model.geom('geom1').run;

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([7]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([26]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 8);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([25]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 2);
model.mesh('mesh1').run('map1');
model.mesh('mesh1').create('conv1', 'Convert');
model.mesh('mesh1').feature('conv1').set('splitmethod', 'center');
model.mesh('mesh1').feature('conv1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('conv1').selection.set([7]);
model.mesh('mesh1').run('conv1');
model.mesh('mesh1').create('map2', 'Map');
model.mesh('mesh1').feature('map2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map2').selection.set([2 6 8]);
model.mesh('mesh1').feature('map2').set('smoothcontrol', false);
model.mesh('mesh1').feature('map2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis1').selection.set([5]);
model.mesh('mesh1').feature('map2').feature('dis1').set('numelem', 50);
model.mesh('mesh1').feature('map2').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis2').selection.set([4]);
model.mesh('mesh1').feature('map2').feature('dis2').set('numelem', 6);
model.mesh('mesh1').feature('map2').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis3').selection.set([19]);
model.mesh('mesh1').feature('map2').feature('dis3').set('numelem', 2);
model.mesh('mesh1').run('map2');
model.mesh('mesh1').create('map3', 'Map');
model.mesh('mesh1').feature('map3').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map3').selection.set([1 3]);
model.mesh('mesh1').feature('map3').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map3').feature('dis1').selection.set([9 18]);
model.mesh('mesh1').feature('map3').feature('dis1').set('numelem', 1);
model.mesh('mesh1').run('map3');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').set('smoothcontrol', false);
model.mesh('mesh1').feature('size').set('hauto', 3);
model.mesh('mesh1').run;

model.study('std1').setGenPlots(false);
model.study('std1').feature('time').set('tlist', 'range(0,2,Dt_tot)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('scaleval', '5.348018324575936E-5');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.005348018324575936');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,2,Dt_tot)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('minstep', 0.5);
model.sol('sol1').feature('t1').feature('fc1').set('useminsteprecovery', 'on');
model.sol('sol1').feature('t1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 4);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('minstep', 0.5);
model.sol('sol1').feature('t1').feature('fc1').set('useminsteprecovery', 'on');
model.sol('sol1').feature('t1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 4);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('v1').feature('comp1_solid_hmm1_pvp1_evp1').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_hmm1_pvp1_evp1').set('scaleval', 3);
model.sol('sol1').feature('v1').feature('comp1_solid_hmm1_pvp1_evp2').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_hmm1_pvp1_evp2').set('scaleval', 3);
model.sol('sol1').feature('v1').feature('comp1_solid_hmm1_pvp1_evpe1').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_hmm1_pvp1_evpe1').set('scaleval', 3);
model.sol('sol1').feature('v1').feature('comp1_solid_hmm1_pvp1_evpe2').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_hmm1_pvp1_evpe2').set('scaleval', 3);
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '4[mm]');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('scaleval', '4[mm]');
model.sol('sol1').feature('v1').feature('comp1_solid_rd2_RFz').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rd2_RFz').set('scaleval', 100);
model.sol('sol1').feature('v1').feature('comp1_solid_Wvp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_Wvp').set('scaleval', '1.0E7');
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').feature('dDef').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('fc1').set('minstep', 0.3);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 20);
model.sol('sol1').runFromTo('st1', 'v1');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').run;
model.result('pg1').label('Displacement Magnitude');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Polymer');
model.result('pg1').feature('surf1').create('sel1', 'Selection');
model.result('pg1').feature('surf1').feature('sel1').selection.set([2]);
model.result('pg1').run;
model.result('pg1').feature('surf1').create('def1', 'Deform');
model.result('pg1').run;
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg1').feature('surf1').feature('def1').set('scale', 1);
model.result('pg1').run;
model.result('pg1').create('surf2', 'Surface');
model.result('pg1').feature('surf2').label('Punch and Clamp');
model.result('pg1').feature('surf2').set('titletype', 'none');
model.result('pg1').feature('surf2').set('expr', '1');
model.result('pg1').feature('surf2').set('coloring', 'uniform');
model.result('pg1').feature('surf2').set('color', 'gray');
model.result('pg1').feature('surf2').create('sel1', 'Selection');
model.result('pg1').feature('surf2').feature('sel1').selection.set([1 3 4]);
model.result('pg1').run;
model.result('pg1').feature('surf2').create('def1', 'Deform');
model.result('pg1').run;
model.result('pg1').feature('surf2').feature('def1').set('scaleactive', true);
model.result('pg1').feature('surf2').feature('def1').set('scale', 1);

model.sol('sol1').feature('t1').feature('fc1').set('plot', true);
model.sol('sol1').runAll;

model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Punch Force');
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Punch Contact Force');
model.result('pg2').set('xlabelactive', true);
model.result('pg2').set('xlabel', 'Punch displacement (mm)');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Punch force (N)');
model.result('pg2').set('manualgrid', true);
model.result('pg2').set('xspacing', 0.5);
model.result('pg2').set('yspacing', 20);
model.result('pg2').set('legendpos', 'upperleft');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('linewidth', 'preference');
model.result('pg2').feature('glob1').setIndex('expr', 'solid.rd2.RFz', 0);
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').feature('glob1').set('xdataexpr', 'tri1(t)');
model.result('pg2').feature('glob1').set('linewidth', 2);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').label('Reference');
model.result.table('tbl1').importData('small_punch_test_numerical.txt');
model.result('pg2').run;
model.result('pg2').create('tblp1', 'Table');
model.result('pg2').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg2').feature('tblp1').set('linewidth', 'preference');
model.result('pg2').feature('tblp1').label('Reference');
model.result('pg2').feature('tblp1').set('linestyle', 'none');
model.result('pg2').feature('tblp1').set('linemarker', 'circle');
model.result('pg2').feature('tblp1').set('legend', true);
model.result('pg2').feature('tblp1').set('autoplotlabel', true);
model.result('pg2').feature('tblp1').set('autoheaders', false);
model.result('pg2').run;
model.result('pg2').feature('glob1').label('Comsol');
model.result('pg2').feature('glob1').set('autoplotlabel', true);
model.result('pg2').feature('glob1').set('autosolution', false);
model.result('pg2').feature('glob1').set('autodescr', false);
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Dissipated Energy');
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Dissipated Energy');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').set('expr', {'solid.Wvp_tot'});
model.result('pg3').feature('glob1').set('descr', {'Total viscoplastic dissipation'});
model.result('pg3').feature('glob1').set('unit', {'J'});
model.result('pg3').feature('glob1').set('xdata', 'expr');
model.result('pg3').feature('glob1').set('xdataexpr', 'tri1(t)');
model.result('pg3').feature('glob1').set('linewidth', 2);
model.result('pg3').feature('glob1').set('legend', false);
model.result('pg3').run;
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').label('Revolution 2D: Polymer');
model.result.dataset('rev1').set('startangle', -60);
model.result.dataset('rev1').set('revangle', 270);
model.result.dataset('rev1').selection.geom('geom1', 2);
model.result.dataset('rev1').selection.geom('geom1', 2);
model.result.dataset('rev1').selection.set([2]);
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('First Principal Strain');
model.result('pg4').set('edges', false);
model.result('pg4').set('titletype', 'label');
model.result('pg4').create('vol1', 'Volume');
model.result('pg4').feature('vol1').set('expr', 'solid.ep1');
model.result('pg4').feature('vol1').set('colortable', 'Prism');
model.result('pg4').feature('vol1').label('Polymer');
model.result('pg4').feature('vol1').create('def1', 'Deform');
model.result('pg4').feature('vol1').feature('def1').set('revcoordsys', 'cylindrical');
model.result('pg4').run;
model.result('pg4').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg4').feature('vol1').feature('def1').set('scale', 1);
model.result.dataset.duplicate('rev2', 'rev1');
model.result.dataset('rev2').label('Revolution 2D: Punch');
model.result.dataset('rev2').set('startangle', 0);
model.result.dataset('rev2').set('revangle', 360);
model.result.dataset('rev2').selection.geom('geom1', 2);
model.result.dataset('rev2').selection.set([1]);
model.result('pg4').run;
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Punch');
model.result('pg4').feature('surf1').set('data', 'rev2');
model.result('pg4').feature('surf1').set('solutionparams', 'parent');
model.result('pg4').feature('surf1').set('expr', '1');
model.result('pg4').feature('surf1').set('coloring', 'uniform');
model.result('pg4').feature('surf1').set('color', 'gray');
model.result('pg4').feature('surf1').create('def1', 'Deform');
model.result('pg4').feature('surf1').feature('def1').set('revcoordsys', 'cylindrical');
model.result('pg4').run;
model.result('pg4').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg4').feature('surf1').feature('def1').set('scale', 1);
model.result.dataset.duplicate('rev3', 'rev2');
model.result.dataset('rev3').label('Revolution 2D: Clamp');
model.result.dataset('rev3').set('startangle', -60);
model.result.dataset('rev3').set('revangle', 270);
model.result.dataset('rev3').selection.geom('geom1', 2);
model.result.dataset('rev3').selection.set([3 4]);
model.result('pg4').run;
model.result('pg4').create('vol2', 'Volume');
model.result('pg4').feature('vol2').label('Clamp');
model.result('pg4').feature('vol2').set('data', 'rev3');
model.result('pg4').feature('vol2').set('solutionparams', 'parent');
model.result('pg4').feature('vol2').set('expr', '1');
model.result('pg4').feature('vol2').set('coloring', 'uniform');
model.result('pg4').feature('vol2').set('color', 'gray');
model.result('pg4').feature('vol2').create('mtrl1', 'MaterialAppearance');
model.result('pg4').run;
model.result('pg4').feature('vol2').feature('mtrl1').set('appearance', 'custom');
model.result('pg4').feature('vol2').feature('mtrl1').set('family', 'steelscratched');
model.result('pg4').run;

model.view('view2').set('showgrid', true);

model.title('Small Punch Test for Ultra-High Molecular Weight Polyethylene');

model.description(['Ultra-High Molecular Weight Polyethylene (UHMWPE) is a material commonly employed in knee and hip joint replacements. The ' native2unicode(hex2dec({'20' '1c'}), 'unicode') 'small punch test' native2unicode(hex2dec({'20' '1d'}), 'unicode') ' is designed to assess mechanical properties using very small samples, such that because of their size they can directly be explanted. This example demonstrates the use of the Bergstrom' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Bischoff material model in the Polymer Viscoplasticity feature available in the Nonlinear Structural Materials Module.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('small_punch_test.mph');

model.modelNode.label('Components');

out = model;
