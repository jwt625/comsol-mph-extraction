function out = model
%
% phase_transformations_in_a_round_bar.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Metal_Processing_Module/Tutorial_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');
model.physics.create('metp', 'MetalPhaseTransformation', 'geom1');
model.physics('metp').model('comp1');
model.physics('metp').prop('HeatTransfer').set('latentheat', '1');

model.multiphysics.create('lht1', 'PhaseTransformationLatentHeat', 'geom1', 2);
model.multiphysics('lht1').set('Metphase_physics', 'metp');
model.multiphysics('lht1').set('HeatTransfer_physics', 'ht');
model.multiphysics('lht1').selection.all;

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/ht', true);
model.study('std1').feature('time').setSolveFor('/physics/metp', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/lht1', true);

model.param.set('r', '0.04[m]');
model.param.descr('r', 'Bar radius');
model.param.set('latheat', '670000[kJ/m^3]');
model.param.descr('latheat', 'Phase transformation latent heat');

model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 'r');
model.geom('geom1').feature('c1').set('angle', 15);
model.geom('geom1').runPre('fin');

model.func.create('int1', 'Interpolation');
model.func('int1').model('comp1');
model.func('int1').set('funcname', 'K');
model.func('int1').setIndex('table', 600, 0, 0);
model.func('int1').setIndex('table', '0.0001', 0, 1);
model.func('int1').setIndex('table', 620, 1, 0);
model.func('int1').setIndex('table', 0.0018, 1, 1);
model.func('int1').setIndex('table', 800, 2, 0);
model.func('int1').setIndex('table', 0, 2, 1);
model.func('int1').setIndex('argunit', 'degC', 0);
model.func('int1').setIndex('fununit', '1/s', 0);
model.func.create('int2', 'Interpolation');
model.func('int2').model('comp1');
model.func('int2').set('funcname', 'L');
model.func('int2').setIndex('table', 600, 0, 0);
model.func('int2').setIndex('table', 0, 0, 1);
model.func('int2').setIndex('table', 620, 1, 0);
model.func('int2').setIndex('table', '0.0002', 1, 1);
model.func('int2').setIndex('table', 800, 2, 0);
model.func('int2').setIndex('table', 0.002, 2, 1);
model.func('int2').setIndex('argunit', 'degC', 0);
model.func('int2').setIndex('fununit', '1/s', 0);
model.func.create('int3', 'Interpolation');
model.func('int3').model('comp1');
model.func('int3').set('funcname', 'F');
model.func('int3').setIndex('table', 340, 0, 0);
model.func('int3').setIndex('table', 0, 0, 1);
model.func('int3').setIndex('table', 350, 1, 0);
model.func('int3').setIndex('table', 0.014, 1, 1);
model.func('int3').setIndex('table', 450, 2, 0);
model.func('int3').setIndex('table', 0.067, 2, 1);
model.func('int3').setIndex('table', 550, 3, 0);
model.func('int3').setIndex('table', 0, 3, 1);
model.func('int3').setIndex('argunit', 'degC', 0);
model.func('int3').setIndex('fununit', '1/s', 0);
model.func.create('int4', 'Interpolation');
model.func('int4').model('comp1');
model.func('int4').set('funcname', 'G');
model.func('int4').setIndex('table', 450, 0, 0);
model.func('int4').setIndex('table', 0, 0, 1);
model.func('int4').setIndex('table', 550, 1, 0);
model.func('int4').setIndex('table', 0.067, 1, 1);
model.func('int4').setIndex('argunit', 'degC', 0);
model.func('int4').setIndex('fununit', '1/s', 0);
model.func.create('int5', 'Interpolation');
model.func('int5').model('comp1');
model.func('int5').set('funcname', 'H');
model.func('int5').setIndex('table', -43000, 0, 0);
model.func('int5').setIndex('table', 0.2, 0, 1);
model.func('int5').setIndex('table', -15000, 1, 0);
model.func('int5').setIndex('table', 1, 1, 1);
model.func('int5').setIndex('table', -7200, 2, 0);
model.func('int5').setIndex('table', 1.5, 2, 1);
model.func('int5').setIndex('table', -1500, 3, 0);
model.func('int5').setIndex('table', 0.22, 3, 1);
model.func('int5').setIndex('table', -700, 4, 0);
model.func('int5').setIndex('table', 0.1, 4, 1);
model.func('int5').setIndex('table', -70, 5, 0);
model.func('int5').setIndex('table', 0.0044, 5, 1);
model.func('int5').setIndex('argunit', 'K/h', 0);
model.func('int5').setIndex('fununit', 1, 0);
model.func.create('int6', 'Interpolation');
model.func('int6').model('comp1');
model.func('int6').set('funcname', 'htc');
model.func('int6').setIndex('table', 300, 0, 0);
model.func('int6').setIndex('table', 200, 0, 1);
model.func('int6').setIndex('table', 500, 1, 0);
model.func('int6').setIndex('table', 3000, 1, 1);
model.func('int6').setIndex('table', 650, 2, 0);
model.func('int6').setIndex('table', 700, 2, 1);
model.func('int6').set('interp', 'piecewisecubic');
model.func('int6').setIndex('argunit', 'degC', 0);
model.func('int6').setIndex('fununit', 'W/(m^2*K)', 0);

model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Austenite');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'25'});
model.material('mat1').propertyGroup('def').set('density', {'7900'});
model.material('mat1').propertyGroup('def').set('heatcapacity', {'550'});
model.material.duplicate('mat2', 'mat1');
model.material('mat2').label('Ferrite and Pearlite');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'45'});
model.material('mat2').propertyGroup('def').set('density', {'7800'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'700'});
model.material.duplicate('mat3', 'mat2');
model.material('mat3').label('Bainite');
model.material.duplicate('mat4', 'mat3');
model.material('mat4').label('Martensite');

model.physics('metp').prop('MaterialProperties').set('htprops', true);
model.physics('metp').prop('MaterialProperties').runCommand('makecompoundmaterial');
model.physics('metp').feature('phase1').label('Austenite');
model.physics('metp').feature('phase1').set('phaseMaterial', 'mat1');
model.physics('metp').feature('phase2').label('Ferrite and Pearlite');
model.physics('metp').feature('phase2').set('phaseMaterial', 'mat2');
model.physics('metp').create('phase3', 'MetallurgicalPhase', 2);
model.physics('metp').feature('phase3').label('Bainite');
model.physics('metp').feature('phase3').set('phaseMaterial', 'mat3');
model.physics('metp').create('phase4', 'MetallurgicalPhase', 2);
model.physics('metp').feature('phase4').label('Martensite');
model.physics('metp').feature('phase4').set('phaseMaterial', 'mat4');
model.physics('metp').feature('ptran1').label('Austenite to Ferrite and Pearlite');
model.physics('metp').feature('ptran1').set('K', 'K(metp.T)');
model.physics('metp').feature('ptran1').set('L', 'L(metp.T)');
model.physics('metp').feature('ptran1').set('dH', 'latheat');
model.physics('metp').create('ptran2', 'PhaseTransformation', 2);
model.physics('metp').feature('ptran2').label('Austenite to Bainite');
model.physics('metp').feature('ptran2').set('phasei', 'phase1');
model.physics('metp').feature('ptran2').set('phasej', 'phase3');
model.physics('metp').feature('ptran2').set('K', 'F(metp.T)*H(metp.Tt)');
model.physics('metp').feature('ptran2').set('L', 'G(metp.T)*H(metp.Tt)');
model.physics('metp').feature('ptran2').set('dH', 'latheat');
model.physics('metp').create('ptran3', 'PhaseTransformation', 2);
model.physics('metp').feature('ptran3').label('Austenite to Martensite');
model.physics('metp').feature('ptran3').set('phasei', 'phase1');
model.physics('metp').feature('ptran3').set('phasej', 'phase4');
model.physics('metp').feature('ptran3').set('ptModel', 'KoistinenMarburger');
model.physics('metp').feature('ptran3').set('Ms', '370[degC]');
model.physics('metp').feature('ptran3').set('dH', 'latheat');

model.material('metpmat').selection.set([1]);

model.physics('ht').feature('init1').set('Tinit', '900[degC]');
model.physics('ht').create('sym1', 'Symmetry', 1);
model.physics('ht').feature('sym1').selection.set([1 2]);
model.physics('ht').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf1').selection.set([3]);
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 'htc(T)');
model.physics('ht').feature('hf1').set('Text', '80[degC]');

model.mesh('mesh1').autoMeshSize(2);

model.study('std1').feature('time').set('tlist', 'range(0,10,1800)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_metp_phasefractions').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_metp_phasefractions').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,10,1800)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_metp_phasefractions' 'global' 'comp1_T' 'global'});
model.sol('sol1').feature('t1').set('atol', {'comp1_metp_phasefractions' '1e-3' 'comp1_T' '1e-3'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_metp_phasefractions' 'factor' 'comp1_T' 'factor'});
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, heat transfer variables (ht) (Merged)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Temperature (ht)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 181, 0);
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 181, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'metp.phase1.xi'});
model.result('pg2').label('Austenite (metp)');
model.result('pg2').feature('surf1').set('coloring', 'gradient');
model.result('pg2').feature('surf1').set('topcolor', 'custom');
model.result('pg2').feature('surf1').set('customtopcolor', [0.9 0.4 0.15]);
model.result('pg2').feature('surf1').set('bottomcolor', 'custom');
model.result('pg2').feature('surf1').set('custombottomcolor', [0 0 0.5]);
model.result('pg2').feature('surf1').set('colortablerev', false);
model.result('pg2').feature('surf1').set('titletype', 'manual');
model.result('pg2').feature('surf1').set('title', 'Austenite');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 181, 0);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'metp.phase2.xi'});
model.result('pg3').label('Ferrite and Pearlite (metp)');
model.result('pg3').feature('surf1').set('coloring', 'gradient');
model.result('pg3').feature('surf1').set('topcolor', 'custom');
model.result('pg3').feature('surf1').set('customtopcolor', [0.9 0.4 0.15]);
model.result('pg3').feature('surf1').set('bottomcolor', 'custom');
model.result('pg3').feature('surf1').set('custombottomcolor', [0 0 0.5]);
model.result('pg3').feature('surf1').set('colortablerev', false);
model.result('pg3').feature('surf1').set('titletype', 'manual');
model.result('pg3').feature('surf1').set('title', 'Ferrite and Pearlite');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 181, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'metp.phase3.xi'});
model.result('pg4').label('Bainite (metp)');
model.result('pg4').feature('surf1').set('coloring', 'gradient');
model.result('pg4').feature('surf1').set('topcolor', 'custom');
model.result('pg4').feature('surf1').set('customtopcolor', [0.9 0.4 0.15]);
model.result('pg4').feature('surf1').set('bottomcolor', 'custom');
model.result('pg4').feature('surf1').set('custombottomcolor', [0 0 0.5]);
model.result('pg4').feature('surf1').set('colortablerev', false);
model.result('pg4').feature('surf1').set('titletype', 'manual');
model.result('pg4').feature('surf1').set('title', 'Bainite');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 181, 0);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'metp.phase4.xi'});
model.result('pg5').label('Martensite (metp)');
model.result('pg5').feature('surf1').set('coloring', 'gradient');
model.result('pg5').feature('surf1').set('topcolor', 'custom');
model.result('pg5').feature('surf1').set('customtopcolor', [0.9 0.4 0.15]);
model.result('pg5').feature('surf1').set('bottomcolor', 'custom');
model.result('pg5').feature('surf1').set('custombottomcolor', [0 0 0.5]);
model.result('pg5').feature('surf1').set('colortablerev', false);
model.result('pg5').feature('surf1').set('titletype', 'manual');
model.result('pg5').feature('surf1').set('title', 'Martensite');
model.result('pg1').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').setIndex('looplevelinput', 'last', 0);
model.result('pg6').set('titletype', 'none');
model.result('pg6').set('legendpos', 'middleright');
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg6').feature('lngr1').set('linewidth', 'preference');
model.result('pg6').feature('lngr1').set('expr', 'metp.phase1.xi');
model.result('pg6').feature('lngr1').set('descr', 'Phase fraction');
model.result('pg6').feature('lngr1').set('xdata', 'reversedarc');
model.result('pg6').feature('lngr1').set('linewidth', 2);
model.result('pg6').feature('lngr1').set('legend', true);
model.result('pg6').feature('lngr1').set('legendmethod', 'manual');
model.result('pg6').feature('lngr1').setIndex('legends', 'Austenite fraction', 0);
model.result('pg6').feature('lngr1').selection.set([2]);
model.result('pg6').feature.duplicate('lngr2', 'lngr1');
model.result('pg6').run;
model.result('pg6').feature('lngr2').set('expr', 'metp.phase2.xi');
model.result('pg6').feature('lngr2').setIndex('legends', 'Ferrite and Pearlite fraction', 0);
model.result('pg6').feature.duplicate('lngr3', 'lngr2');
model.result('pg6').run;
model.result('pg6').feature('lngr3').set('expr', 'metp.phase3.xi');
model.result('pg6').feature('lngr3').setIndex('legends', 'Bainite fraction', 0);
model.result('pg6').feature.duplicate('lngr4', 'lngr3');
model.result('pg6').run;
model.result('pg6').feature('lngr4').setIndex('legends', 'fraction', 0);
model.result('pg6').feature('lngr4').set('expr', 'metp.phase4.xi');
model.result('pg6').feature('lngr4').setIndex('legends', 'Martensite fraction', 0);
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').set('titletype', 'none');
model.result('pg7').set('legendpos', 'middleright');
model.result('pg7').create('ptgr1', 'PointGraph');
model.result('pg7').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr1').set('linewidth', 'preference');
model.result('pg7').feature('ptgr1').selection.set([1]);
model.result('pg7').feature('ptgr1').set('unit', 'degC');
model.result('pg7').feature('ptgr1').set('linewidth', 2);
model.result('pg7').feature('ptgr1').set('legend', true);
model.result('pg7').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg7').feature('ptgr1').setIndex('legends', 'Center', 0);
model.result('pg7').run;
model.result('pg7').create('ptgr2', 'PointGraph');
model.result('pg7').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr2').set('linewidth', 'preference');
model.result('pg7').feature('ptgr2').selection.set([3]);
model.result('pg7').feature('ptgr2').set('unit', 'degC');
model.result('pg7').feature('ptgr2').set('linewidth', 2);
model.result('pg7').feature('ptgr2').set('legend', true);
model.result('pg7').feature('ptgr2').set('legendmethod', 'manual');
model.result('pg7').feature('ptgr2').setIndex('legends', 'Surface', 0);
model.result('pg2').run;

model.view('view1').set('showgrid', false);

model.result('pg3').run;
model.result('pg4').run;
model.result('pg6').run;
model.result('pg7').run;
model.result('pg5').run;

model.title('Phase Transformations in a Round Bar');

model.description('A 2D model of a steel bar is used to simulate oil quenching from an austenitic state. Both diffusive and displacive phase transformations are used, and the phase composition is computed in the radial direction of the bar.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('phase_transformations_in_a_round_bar.mph');

model.modelNode.label('Components');

out = model;
