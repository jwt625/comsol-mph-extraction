function out = model
%
% whispering_gallery_mode_resonator.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Wave_Optics_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('ewfd', 'ElectromagneticWavesFrequencyDomain', 'geom1');
model.physics('ewfd').model('comp1');

model.study.create('std1');
model.study('std1').create('eig', 'Eigenfrequency');
model.study('std1').feature('eig').set('conrad', '1');
model.study('std1').feature('eig').set('conradynhm', '1');
model.study('std1').feature('eig').set('linpsolnum', 'auto');
model.study('std1').feature('eig').set('solnum', 'auto');
model.study('std1').feature('eig').set('notsolnum', 'auto');
model.study('std1').feature('eig').set('outputmap', {});
model.study('std1').feature('eig').set('ngenAUX', '1');
model.study('std1').feature('eig').set('goalngenAUX', '1');
model.study('std1').feature('eig').set('ngenAUX', '1');
model.study('std1').feature('eig').set('goalngenAUX', '1');
model.study('std1').feature('eig').setSolveFor('/physics/ewfd', true);

model.param.label('Resonator Parameters');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('h_air', 'r_res', 'Height of air domain');
model.param.set('r_air', 'r_res*1.5', 'Radius of air domain');
model.param.set('r_res', '30[um]', 'Radius of resonator');
model.param.set('r_cut', 'r_res*0.5', 'Geometry cutoff radius');
model.param.set('t_PML', '1[um]', 'Thickness of PML');
model.param.set('n_m', '250', 'Azimuthal mode number');
model.param.set('n_res', '1.4457', 'Refractive index, real part');
model.param.set('k_res', '1e-10', 'Refractive index, imaginary part');
model.param.set('n_a', '1', 'Refractive index, host medium');
model.param.set('m', 'n_res/n_a', 'Relative index of refraction');
model.param.set('nu_fsr', 'c_const/(2*pi*n_res*r_res)', 'Free spectral range');
model.param.set('alpha', '4*pi*k_res/(lam_res)', 'Attenuation coefficient');
model.param.set('Q_mat', '2*pi*n_res/(alpha*lam_res)', 'Material losses');
model.param.set('damp', '0.5*omega_res/Q_mat', 'Damping from material losses');
model.param.create('par2');
model.param('par2').label('Analytic Higher Order Approximation - Schiller');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('p', '1', '1 for TE, 1/m^2 for TM');
model.param('par2').set('l', '1', 'Radial mode number');
model.param('par2').set('nu', 'n_m+1/2');
model.param('par2').set('xn', 'nu/m - Ai(l)/m*(nu/2)^(1/3) + dk(0)/(nu^(0/3) * (m^2 - 1)^((0+1)/2)) + dk(1)/(nu^(1/3) * (m^2 - 1)^((1+1)/2)) + dk(2)/(nu^(2/3) * (m^2 - 1)^((2+1)/2)) + dk(3)/(nu^(3/3) * (m^2 - 1)^((3+1)/2))', 'Resonance size parameter');
model.param('par2').set('omega_res', 'xn *c_const/(n_a*r_res)', 'Angular frequency');
model.param('par2').set('f_res', 'omega_res/(2*pi)', 'Resonance frequency');
model.param('par2').set('lam_res', 'c_const/f_res', 'Resonance wavelength');

model.func.create('int1', 'Interpolation');
model.func('int1').label('Airy Function Zeroes');
model.func('int1').set('funcname', 'Ai');
model.func('int1').set('table', {'1' '-2.33811';  ...
'2' '-4.08795';  ...
'3' '-5.52056';  ...
'4' '-6.7867144';  ...
'5' '-7.94413';  ...
'6' '-9.02265'});
model.func.create('pw1', 'Piecewise');
model.func('pw1').set('funcname', 'dk');
model.func('pw1').set('pieces', {'0' '0.5' '-p';  ...
'0.5' '1.5' '2^(1/3)*3*(m^2-1)*Ai(l)^2/(20*m)';  ...
'1.5' '2.5' '-2^(2/3)*m^2*p*(-3+2*p^2)*Ai(l)/6';  ...
'2.5' '3.5' '(350*m^4*(1-p)*p*(-1+p+p^2)+(m^2-1)^2*(10+Ai(l)^3))/(700*m)'});

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'r_air-r_cut' '1'});
model.geom('geom1').feature('r1').setIndex('size', 'h_air', 1);
model.geom('geom1').feature('r1').set('pos', {'r_cut' '-h_air/2'});
model.geom('geom1').feature('r1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('r1').setIndex('layer', 't_PML', 0);
model.geom('geom1').feature('r1').set('layerright', true);
model.geom('geom1').feature('r1').set('layertop', true);
model.geom('geom1').run('r1');
model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 'r_res');
model.geom('geom1').feature('c1').set('rot', 45);
model.geom('geom1').run('c1');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'c1' 'r1'});
model.geom('geom1').run('uni1');
model.geom('geom1').feature.create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').init;
model.geom('geom1').feature('del1').selection('input').init(2);
model.geom('geom1').feature('del1').selection('input').set('uni1', 1);
model.geom('geom1').runPre('fin');
model.geom('geom1').create('pare1', 'PartitionEdges');
model.geom('geom1').feature('pare1').selection('edge').set('del1', 24);
model.geom('geom1').feature('pare1').setIndex('param', 0.25, 0);
model.geom('geom1').feature('pare1').setIndex('param', 0.75, 1);
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Host Medium');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'n_a'});
model.material('mat1').propertyGroup('RefractiveIndex').set('ki', {'0'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Sphere');
model.material('mat2').selection.set([1 2 3]);
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'n_res'});
model.material('mat2').propertyGroup('RefractiveIndex').set('ki', {'k_res'});

model.physics('ewfd').prop('outofplanewavenumber').set('mFloquet', 'n_m');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'res');
model.cpl('intop1').selection.set([2]);
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').set('opname', 'air');
model.cpl('intop2').selection.set([6]);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('ModeLoc', 'res(ewfd.normE)/(res(ewfd.normE)+air(ewfd.normE))');
model.variable('var1').descr('ModeLoc', 'Mode localization');

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.set([1 3 4 5 7 8 9]);
model.coordSystem('pml1').set('ScalingType', 'Cylindrical');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('hmax', 1.25);
model.mesh('mesh1').feature('size').set('hmin', 0.1);
model.mesh('mesh1').feature('size1').set('hmax', 1);
model.mesh('mesh1').feature('size1').set('hmin', 0.009);
model.mesh('mesh1').feature('size1').set('hgrad', 1.04);
model.mesh('mesh1').create('size2', 'Size');
model.mesh('mesh1').feature.move('size2', 2);
model.mesh('mesh1').feature('size2').selection.geom('geom1', 1);
model.mesh('mesh1').feature('size2').selection.set([26]);
model.mesh('mesh1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('size2').set('hmax', 0.15);
model.mesh('mesh1').run;

model.study('std1').label('Filtered Eigenfrequency Study');
model.study('std1').feature('eig').set('neigsactive', true);
model.study('std1').feature('eig').set('neigs', 200);
model.study('std1').feature('eig').set('shift', 'f_res');
model.study('std1').create('cmbsol', 'CombineSolution');
model.study('std1').feature('cmbsol').set('soloper', 'remsol');
model.study('std1').feature('cmbsol').set('excludeorinclude', 'include');
model.study('std1').feature('cmbsol').set('incmethod', 'implicit');
model.study('std1').feature('cmbsol').set('remsolfromexprinc', 'comp1.ModeLoc>0.5');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'eig');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'eig');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('control', 'eig');
model.sol('sol1').feature('e1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('e1').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('e1').create('d1', 'Direct');
model.sol('sol1').feature('e1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('e1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('cms1', 'CombineSolution');
model.sol('sol1').feature('cms1').set('control', 'cmbsol');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Electric Field (ewfd)');
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWavesFrequencyDomain/phys1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset1');
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Eigenfrequencies (ewfd)');
model.result.numerical('gev1').set('data', 'dset2');
model.result.numerical('gev1').set('expr', {'ewfd.freq' 'ewfd.Qfactor'});
model.result.numerical('gev1').set('unit', {'THz' '1'});
model.result.table.create('tbl1', 'Table');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').run;
model.result.numerical('gev1').setResult;
model.result('pg1').run;
model.result('pg1').label('Electric Field - Filtered Modes');
model.result('pg1').run;
model.result('pg1').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg1').run;
model.result('pg1').create('arws1', 'ArrowSurface');
model.result('pg1').feature('arws1').set('expr', {'ewfd.Er' 'ewfd.Ez'});
model.result('pg1').feature('arws1').set('descr', 'Electric field');
model.result('pg1').feature('arws1').set('xnumber', 40);
model.result('pg1').feature('arws1').set('ynumber', 40);
model.result('pg1').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg1').feature('arws1').set('color', 'black');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').set('looplevel', [45]);
model.result('pg1').run;
model.result('pg1').set('looplevel', [1]);
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Mode Localization');
model.result('pg2').set('data', 'dset2');
model.result('pg2').set('twoyaxes', true);
model.result('pg2').set('ylogsec', true);
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('linewidth', 'preference');
model.result('pg2').feature('glob1').setIndex('expr', 'ModeLoc', 0);
model.result('pg2').feature('glob1').setIndex('unit', 1, 0);
model.result('pg2').feature('glob1').setIndex('descr', 'Mode localization', 0);
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').feature('glob1').set('xdataexpr', 'ewfd.freq');
model.result('pg2').feature('glob1').set('xdataunit', 'THz');
model.result('pg2').feature('glob1').set('linestyle', 'none');
model.result('pg2').feature('glob1').set('linemarker', 'circle');
model.result('pg2').run;
model.result('pg2').create('glob2', 'Global');
model.result('pg2').feature('glob2').set('markerpos', 'datapoints');
model.result('pg2').feature('glob2').set('linewidth', 'preference');
model.result('pg2').feature('glob2').set('plotonsecyaxis', true);
model.result('pg2').feature('glob2').setIndex('expr', 'ewfd.Qfactor', 0);
model.result('pg2').feature('glob2').setIndex('unit', 1, 0);
model.result('pg2').feature('glob2').setIndex('descr', 'Quality factor', 0);
model.result('pg2').feature('glob2').set('xdata', 'expr');
model.result('pg2').feature('glob2').set('xdataexpr', 'ewfd.freq');
model.result('pg2').feature('glob2').set('xdataunit', 'THz');
model.result('pg2').feature('glob2').set('linemarker', 'point');
model.result('pg2').run;
model.result('pg2').set('legendpos', 'middleleft');
model.result('pg2').run;
model.result('pg1').run;
model.result.duplicate('pg3', 'pg1');
model.result('pg3').run;
model.result('pg3').label('Electric Field - All Modes');
model.result('pg3').set('data', 'dset2');
model.result('pg3').run;

model.study.create('std2');
model.study('std2').create('eig', 'Eigenfrequency');
model.study('std2').feature('eig').set('plotgroup', 'Default');
model.study('std2').feature('eig').set('conrad', '1');
model.study('std2').feature('eig').set('conradynhm', '1');
model.study('std2').feature('eig').set('linpsolnum', 'auto');
model.study('std2').feature('eig').set('solnum', 'auto');
model.study('std2').feature('eig').set('notsolnum', 'auto');
model.study('std2').feature('eig').set('outputmap', {});
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').setSolveFor('/physics/ewfd', true);
model.study('std2').label('Eigenfrequency Region Search');
model.study('std2').feature('eig').set('eigmethod', 'region');
model.study('std2').feature('eig').set('appnreigs', 100);
model.study('std2').feature('eig').set('eigsr', 'f_res-5[THz]');
model.study('std2').feature('eig').set('eiglr', 'f_res+20[THz]');
model.study('std2').feature('eig').set('eigli', '(damp+500[kHz])/(2*pi)');

model.sol.create('sol3');
model.sol('sol3').study('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'eig');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'eig');
model.sol('sol3').create('e1', 'Eigenvalue');
model.sol('sol3').feature('e1').set('control', 'eig');
model.sol('sol3').feature('e1').feature('aDef').set('complexfun', true);
model.sol('sol3').feature('e1').feature('aDef').set('cachepattern', false);
model.sol('sol3').feature('e1').create('d1', 'Direct');
model.sol('sol3').feature('e1').feature('d1').set('linsolver', 'mumps');
model.sol('sol3').feature('e1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol3').attach('std2');
model.sol('sol3').runAll;

model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Electric Field (ewfd)');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').set('dataisaxisym', 'off');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').set('defaultPlotID', 'ElectromagneticWavesFrequencyDomain/phys1/pdef1/pcond2/pg1');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result.dataset.create('rev2', 'Revolve2D');
model.result.dataset('rev2').set('data', 'none');
model.result.dataset('rev2').set('startangle', -90);
model.result.dataset('rev2').set('revangle', 225);
model.result.dataset('rev2').set('data', 'dset3');
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').label('Eigenfrequencies (ewfd) 1');
model.result.numerical('gev2').set('data', 'dset3');
model.result.numerical('gev2').set('expr', {'ewfd.freq' 'ewfd.Qfactor'});
model.result.numerical('gev2').set('unit', {'THz' '1'});
model.result.table.create('tbl2', 'Table');
model.result.numerical('gev2').set('table', 'tbl2');
model.result.numerical('gev2').run;
model.result.numerical('gev2').setResult;
model.result('pg4').run;
model.result('pg4').label('Electric Field - Region Search');
model.result('pg4').set('looplevel', [27]);
model.result('pg4').run;
model.result('pg4').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg1').run;
model.result('pg4').run;
model.result('pg4').feature.copy('arws1', 'pg1/arws1');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg2').run;
model.result.duplicate('pg5', 'pg2');
model.result('pg5').run;
model.result('pg5').label('Filter Criterion');
model.result('pg5').set('twoyaxes', false);
model.result('pg5').set('ylog', true);
model.result('pg5').set('legendpos', 'upperright');
model.result('pg5').run;
model.result('pg5').feature('glob1').set('expr', {'ewfd.damp'});
model.result('pg5').feature('glob1').set('descr', {'Damping in time'});
model.result('pg5').feature('glob1').set('unit', {'Hz'});
model.result('pg5').feature('glob1').setIndex('unit', 'THz', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'Damping in time', 0);
model.result('pg5').feature('glob1').set('linemarker', 'point');
model.result('pg5').run;
model.result('pg5').feature('glob2').set('data', 'dset3');
model.result('pg5').feature('glob2').setIndex('expr', '(damp+500[kHz])', 0);
model.result('pg5').feature('glob2').setIndex('unit', 'THz', 0);
model.result('pg5').feature('glob2').setIndex('descr', 'Search region', 0);
model.result('pg5').feature('glob2').set('linecolor', 'black');
model.result('pg5').feature('glob2').set('linemarker', 'none');
model.result('pg5').run;
model.result('pg5').feature.duplicate('glob3', 'glob1');
model.result('pg5').run;
model.result('pg5').feature('glob3').set('data', 'dset3');
model.result('pg5').feature('glob3').set('linemarker', 'circle');
model.result('pg5').run;

model.study.create('std3');
model.study('std3').create('eig', 'Eigenfrequency');
model.study('std3').feature('eig').set('plotgroup', 'Default');
model.study('std3').feature('eig').set('conrad', '1');
model.study('std3').feature('eig').set('conradynhm', '1');
model.study('std3').feature('eig').set('linpsolnum', 'auto');
model.study('std3').feature('eig').set('solnum', 'auto');
model.study('std3').feature('eig').set('notsolnum', 'auto');
model.study('std3').feature('eig').set('outputmap', {});
model.study('std3').feature('eig').set('ngenAUX', '1');
model.study('std3').feature('eig').set('goalngenAUX', '1');
model.study('std3').feature('eig').set('ngenAUX', '1');
model.study('std3').feature('eig').set('goalngenAUX', '1');
model.study('std3').feature('eig').setSolveFor('/physics/ewfd', true);
model.study('std3').label('Parametric Sweep Eigenfrequency Study');
model.study('std3').feature('eig').set('neigsactive', true);
model.study('std3').feature('eig').set('neigs', 1);
model.study('std3').feature('eig').set('shift', 'f_res');
model.study('std3').create('param', 'Parametric');
model.study('std3').feature('param').setIndex('pname', 'alpha', 0);
model.study('std3').feature('param').setIndex('plistarr', '', 0);
model.study('std3').feature('param').setIndex('punit', '1/m', 0);
model.study('std3').feature('param').setIndex('pname', 'alpha', 0);
model.study('std3').feature('param').setIndex('plistarr', '', 0);
model.study('std3').feature('param').setIndex('punit', '1/m', 0);
model.study('std3').feature('param').setIndex('pname', 'r_res', 0);
model.study('std3').feature('param').setIndex('plistarr', '10 20 30', 0);
model.study('std3').feature('param').setIndex('punit', 'um', 0);
model.study('std3').feature('param').setIndex('pname', 'alpha', 1);
model.study('std3').feature('param').setIndex('plistarr', '', 1);
model.study('std3').feature('param').setIndex('punit', '1/m', 1);
model.study('std3').feature('param').setIndex('pname', 'alpha', 1);
model.study('std3').feature('param').setIndex('plistarr', '', 1);
model.study('std3').feature('param').setIndex('punit', '1/m', 1);
model.study('std3').feature('param').setIndex('pname', 'n_m', 1);
model.study('std3').feature('param').setIndex('plistarr', '80 165 250', 1);
model.study('std3').feature('param').setIndex('punit', '', 1);
model.study('std3').create('param2', 'Parametric');
model.study('std3').feature.move('param2', 1);
model.study('std3').feature('param2').setIndex('pname', 'alpha', 0);
model.study('std3').feature('param2').setIndex('plistarr', '', 0);
model.study('std3').feature('param2').setIndex('punit', '1/m', 0);
model.study('std3').feature('param2').setIndex('pname', 'alpha', 0);
model.study('std3').feature('param2').setIndex('plistarr', '', 0);
model.study('std3').feature('param2').setIndex('punit', '1/m', 0);
model.study('std3').feature('param2').setIndex('pname', 'p', 0);
model.study('std3').feature('param2').setIndex('plistarr', '1 1/m^2', 0);
model.study('std3').feature('param2').setIndex('punit', '', 0);
model.study('std3').feature('param2').setIndex('pname', 'alpha', 1);
model.study('std3').feature('param2').setIndex('plistarr', '', 1);
model.study('std3').feature('param2').setIndex('punit', '1/m', 1);
model.study('std3').feature('param2').setIndex('pname', 'alpha', 1);
model.study('std3').feature('param2').setIndex('plistarr', '', 1);
model.study('std3').feature('param2').setIndex('punit', '1/m', 1);
model.study('std3').feature('param2').setIndex('pname', 'l', 1);
model.study('std3').feature('param2').setIndex('plistarr', '1 2 3', 1);
model.study('std3').feature('param2').setIndex('punit', '', 1);
model.study('std3').feature('param2').set('sweeptype', 'filled');

model.sol.create('sol4');
model.sol('sol4').study('std3');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std3');
model.sol('sol4').feature('st1').set('studystep', 'eig');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'eig');
model.sol('sol4').create('e1', 'Eigenvalue');
model.sol('sol4').feature('e1').set('control', 'eig');
model.sol('sol4').feature('e1').feature('aDef').set('complexfun', true);
model.sol('sol4').feature('e1').feature('aDef').set('cachepattern', false);
model.sol('sol4').feature('e1').create('d1', 'Direct');
model.sol('sol4').feature('e1').feature('d1').set('linsolver', 'mumps');
model.sol('sol4').feature('e1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol4').attach('std3');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std3');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol4');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'p' 'l'});
model.batch('p1').set('plistarr', {'1 1/m^2' '1 2 3'});
model.batch('p1').set('sweeptype', 'filled');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std3');
model.batch('p1').set('control', 'param2');
model.batch.create('p2', 'Parametric');
model.batch('p2').study('std3');
model.batch('p2').create('jo1', 'Jobseq');
model.batch('p2').feature('jo1').set('seq', 'p1');
model.batch('p2').set('pname', {'r_res' 'n_m'});
model.batch('p2').set('plistarr', {'10 20 30' '80 165 250'});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std3');
model.batch('p2').set('control', 'param');

model.sol.create('sol5');
model.sol('sol5').study('std3');
model.sol('sol5').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol5');
model.batch('p2').run('compute');

model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').label('Electric Field (ewfd)');
model.result('pg6').set('data', 'dset5');
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').setIndex('looplevel', 3, 1);
model.result('pg6').setIndex('looplevel', 6, 2);
model.result('pg6').set('dataisaxisym', 'off');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('data', 'dset5');
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').setIndex('looplevel', 3, 1);
model.result('pg6').setIndex('looplevel', 6, 2);
model.result('pg6').set('defaultPlotID', 'ElectromagneticWavesFrequencyDomain/phys1/pdef1/pcond2/pg1');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result.dataset.create('rev3', 'Revolve2D');
model.result.dataset('rev3').set('data', 'none');
model.result.dataset('rev3').set('startangle', -90);
model.result.dataset('rev3').set('revangle', 225);
model.result.dataset('rev3').set('data', 'dset5');
model.result.numerical.create('gev3', 'EvalGlobal');
model.result.numerical('gev3').label('Eigenfrequencies (ewfd) 2');
model.result.numerical('gev3').set('data', 'dset5');
model.result.numerical('gev3').set('expr', {'ewfd.freq' 'ewfd.Qfactor'});
model.result.numerical('gev3').set('unit', {'THz' '1'});
model.result.table.create('tbl3', 'Table');
model.result.numerical('gev3').set('table', 'tbl3');
model.result.numerical('gev3').run;
model.result.numerical('gev3').setResult;
model.result('pg6').run;
model.result('pg6').label('Electric Field - Different Configurations');
model.result('pg6').set('looplevel', [1 2 2]);
model.result('pg6').run;
model.result('pg6').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg4').run;
model.result('pg6').run;
model.result('pg6').feature.copy('arws1', 'pg4/arws1');
model.result('pg6').run;
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').label('3D Sector');
model.result('pg7').set('data', 'rev3');
model.result('pg7').set('looplevel', [1 3 1]);
model.result('pg7').create('mslc1', 'Multislice');
model.result('pg7').feature('mslc1').set('xnumber', '0');
model.result('pg7').feature('mslc1').set('ynumber', '0');
model.result('pg7').feature('mslc1').set('colortable', 'AuroraBorealis');
model.result.dataset('rev3').set('layermethod', 'custom');
model.result.dataset('rev3').set('revlayers', 100);
model.result.dataset('rev3').set('startangle', -105);
model.result.dataset('rev3').set('revangle', 15);
model.result('pg7').run;
model.result('pg7').create('arwv1', 'ArrowVolume');
model.result('pg7').feature('arwv1').set('revcoordsys', 'cylindrical');
model.result('pg7').feature('arwv1').setIndex('expr', 'ewfd.Er*exp(-i*n_m*rev3phi)', 0);
model.result('pg7').feature('arwv1').setIndex('expr', 'ewfd.Ephi*exp(-i*n_m*rev3phi)', 1);
model.result('pg7').feature('arwv1').setIndex('expr', 'ewfd.Ez*exp(-i*n_m*rev3phi)', 2);
model.result('pg7').feature('arwv1').set('xnumber', 100);
model.result('pg7').feature('arwv1').set('ynumber', 100);
model.result('pg7').feature('arwv1').set('znumber', 1);
model.result('pg7').run;
model.result('pg7').create('iso1', 'Isosurface');
model.result('pg7').feature('iso1').set('expr', 'ewfd.Ephi*exp(-i*n_m*rev3phi)');
model.result('pg7').feature('iso1').set('levelmethod', 'levels');
model.result('pg7').feature('iso1').set('levels', 'range(-1.2e6,0.5e6,1.2e6)');
model.result('pg7').feature('iso1').set('colortable', 'Wave');
model.result('pg7').feature('iso1').set('colorscalemode', 'linearsymmetric');
model.result('pg7').feature('iso1').create('tran1', 'Transparency');
model.result('pg7').run;
model.result('pg7').feature('iso1').feature('tran1').set('transparency', 0.45);
model.result('pg7').run;
model.result('pg2').run;
model.result.duplicate('pg8', 'pg2');
model.result('pg8').run;
model.result('pg8').label('Quality Factor for Different Modes and Radii');
model.result('pg8').set('data', 'dset5');
model.result('pg8').set('twoyaxes', false);
model.result('pg8').set('ylog', true);
model.result('pg8').set('legendpos', 'lowerright');
model.result('pg8').run;
model.result('pg8').feature('glob1').setIndex('expr', 'Q_mat', 0);
model.result('pg8').feature('glob1').setIndex('unit', 1, 0);
model.result('pg8').feature('glob1').setIndex('descr', 'Material losses', 0);
model.result('pg8').feature('glob1').set('xdatasolnumtype', 'all');
model.result('pg8').feature('glob1').set('xdataexpr', 'r_res');
model.result('pg8').feature('glob1').set('linestyle', 'dashed');
model.result('pg8').feature('glob1').set('linecolor', 'black');
model.result('pg8').feature('glob1').set('linemarker', 'none');
model.result('pg8').run;
model.result('pg8').feature('glob2').set('xdatasolnumtype', 'all');
model.result('pg8').feature('glob2').set('xdataexpr', 'r_res');
model.result('pg8').feature('glob2').set('linestyle', 'none');
model.result('pg8').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'ewfd.lambda0', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm'], 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Wavelength', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'ewfd.Qfactor', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 1, 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Quality factor', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'Q_mat', 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 1, 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Material losses', 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'ewfd.damp', 3);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 'kHz', 3);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Damping in time', 3);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'damp', 4);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 'kHz', 4);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Damping from material losses', 4);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'ewfd.Qfactor*c_const/(ewfd.omega*n_res*r_res)', 5);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 1, 5);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Finesse', 5);
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup.create('eg2', 'EvaluationGroup');
model.result.evaluationGroup('eg2').set('data', 'dset5');
model.result.evaluationGroup('eg2').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg2').feature('gev1').setIndex('expr', 'f_res', 0);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('unit', 'THz', 0);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('descr', 'Resonance frequency', 0);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('expr', 'ewfd.Qfactor', 1);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('unit', 1, 1);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('descr', 'Quality factor', 1);
model.result.evaluationGroup('eg2').run;
model.result('pg7').run;

model.title('Whispering Gallery Mode Resonator');

model.description('Dielectric microspheres can support whispering gallery modes with high optical quality factors. This model illustrates how to compute the different eigenmodes and resonance frequencies. The resonance frequencies are either filtered by their spatial localization in the resonator or by comparing the losses of the bound modes and the, for this application undesired, air modes.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;
model.sol('sol20').clearSolutionData;
model.sol('sol21').clearSolutionData;
model.sol('sol22').clearSolutionData;
model.sol('sol23').clearSolutionData;

model.label('whispering_gallery_mode_resonator.mph');

model.modelNode.label('Components');

out = model;
