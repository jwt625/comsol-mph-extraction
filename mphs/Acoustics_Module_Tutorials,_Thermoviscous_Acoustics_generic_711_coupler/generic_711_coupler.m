function out = model
%
% generic_711_coupler.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Tutorials,_Thermoviscous_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('ta', 'ThermoacousticsSinglePhysics', 'geom1');
model.physics('ta').model('comp1');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('fmax', '20[kHz]', 'Maximal frequency');
model.param.set('Lmax', '345[m/s]/fmax/10', 'Mesh size at fmax');
model.param.set('Cmic', '0.62e-13[m^5/N]', 'Microphone acoustic compliance');
model.param.set('Lmic', '710[kg/m^4]', 'Microphone acoustic mass');
model.param.set('Rmic', '119e6[N*s/m^5]', 'Microphone acoustic resistance');
model.param.set('Tref', '23[degC]', 'Reference temperature');
model.param.set('d0', '10[um]', 'Input source displacement');

model.func.create('int1', 'Interpolation');
model.func('int1').set('source', 'file');
model.func('int1').set('filename', 'generic_711_coupler_transfer_impedance.txt');
model.func('int1').set('nargs', 1);
model.func('int1').importData;
model.func('int1').setIndex('funcs', 'int_trans', 0, 0);
model.func('int1').setIndex('funcs', 1, 0, 1);
model.func('int1').setIndex('funcs', 'int_trans_upper', 1, 0);
model.func('int1').setIndex('funcs', 2, 1, 1);
model.func('int1').setIndex('funcs', 'int_trans_lower', 2, 0);
model.func('int1').setIndex('funcs', 3, 2, 1);
model.func.create('int2', 'Interpolation');
model.func('int2').set('source', 'file');
model.func('int2').set('filename', 'generic_711_coupler_mic_response.txt');
model.func('int2').set('nargs', 1);
model.func('int2').importData;
model.func('int2').setIndex('funcs', 'int_mic', 0, 0);
model.func('int2').setIndex('funcs', 1, 0, 1);
model.func('int2').setIndex('funcs', 'int_mic_upper', 1, 0);
model.func('int2').setIndex('funcs', 2, 1, 1);
model.func('int2').setIndex('funcs', 'int_mic_lower', 2, 0);
model.func('int2').setIndex('funcs', 3, 2, 1);

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'generic_711_coupler.mphbin');
model.geom('geom1').feature('imp1').importData;

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('Ztrans', '(intop_mic(p)/intop_mic(1))/intop_in(2*acpr.vz)', 'Acoustic transfer impedance');
model.variable('var1').set('Zin', 'intop_in(acpr.Zac)/intop_in(2)', 'Acoustic input impedance');
model.variable('var1').set('L0', 'Labs-Lref', 'Microphone sound pressure level (normalized)');
model.variable('var1').set('Labs', '20*log10(abs(intop_mic(p)/intop_mic(1[Pa])))[dB]', 'Absolute level');
model.variable('var1').set('Lref', 'with(15,Labs)', 'Reference level at 500 Hz');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'intop_in');
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.set([19]);
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').set('opname', 'intop_mic');
model.cpl('intop2').selection.geom('geom1', 2);
model.cpl('intop2').selection.set([17]);
model.cpl.create('intop3', 'Integration', 'geom1');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').set('opname', 'intop_top_slit');
model.cpl('intop3').selection.set([3 6]);
model.cpl.create('intop4', 'Integration', 'geom1');
model.cpl('intop4').set('axisym', true);
model.cpl('intop4').set('opname', 'intop_bottom_slit');
model.cpl('intop4').selection.set([5]);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').set([1 2 4]);
model.selection('sel1').label('Pressure Acoustics (lossless)');
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').set([3 5 6]);
model.selection('sel2').label('Thermoviscous Acoustics');
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').geom(2);
model.selection('sel3').set([1 5 10 15 21 25 27]);
model.selection('sel3').label('Symmetry');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('acpr').selection.named('sel1');
model.physics('acpr').feature('fpam1').set('minput_temperature', 'Tref');
model.physics('acpr').create('sym1', 'Symmetry', 2);
model.physics('acpr').feature('sym1').selection.named('sel3');
model.physics('acpr').create('ndisp1', 'NormalDisplacement', 2);
model.physics('acpr').feature('ndisp1').selection.set([19]);
model.physics('acpr').feature('ndisp1').set('ndisp', 'd0');
model.physics('acpr').create('imp1', 'Impedance', 2);
model.physics('acpr').feature('imp1').selection.set([17]);
model.physics('acpr').feature('imp1').set('ImpedanceModel', 'RCL');
model.physics('acpr').feature('imp1').set('Rac', 'Rmic');
model.physics('acpr').feature('imp1').set('Cac', 'Cmic');
model.physics('acpr').feature('imp1').set('Lac', 'Lmic');
model.physics('ta').feature('tam1').set('minput_temperature', 'Tref');
model.physics('ta').selection.named('sel2');
model.physics('ta').create('sym1', 'Symmetry', 2);
model.physics('ta').feature('sym1').selection.named('sel3');

model.multiphysics.create('atb1', 'AcousticThermoacousticBoundary', 'geom1', 2);
model.multiphysics('atb1').selection.all;

model.physics.create('acpr2', 'PressureAcoustics', 'geom1');
model.physics('acpr2').model('comp1');
model.physics('acpr2').selection.named('sel2');
model.physics('acpr2').feature('fpam1').set('minput_temperature', 'Tref');
model.physics('acpr2').create('sym1', 'Symmetry', 2);
model.physics('acpr2').feature('sym1').selection.named('sel3');
model.physics('acpr2').field('pressure').field('p');
model.physics('acpr2').create('nra1', 'NarrowRegionAcousticsModel', 3);
model.physics('acpr2').feature('nra1').selection.set([5]);
model.physics('acpr2').feature('nra1').set('DuctType', 'RectangularDuct');
model.physics('acpr2').feature('nra1').set('a_rect', '2230 [um]');
model.physics('acpr2').feature('nra1').set('b_rect', '170 [um]');
model.physics('acpr2').create('nra2', 'NarrowRegionAcousticsModel', 3);
model.physics('acpr2').feature('nra2').selection.set([3 6]);
model.physics('acpr2').feature('nra2').set('DuctType', 'Slit');
model.physics('acpr2').feature('nra2').set('h', '69[um]');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.set([14 24 35]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([18 62 73 80]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 4);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([19 27]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 25);
model.mesh('mesh1').feature('map1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([63 66]);
model.mesh('mesh1').feature('map1').feature('dis3').set('numelem', 36);
model.mesh('mesh1').feature('map1').create('dis4', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis4').selection.set([79 86]);
model.mesh('mesh1').feature('map1').feature('dis4').set('numelem', 8);
model.mesh('mesh1').feature('map1').create('dis5', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis5').selection.set([36 69]);
model.mesh('mesh1').feature('map1').feature('dis5').set('numelem', 7);
model.mesh('mesh1').feature('map1').create('dis6', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis6').selection.set([37 50]);
model.mesh('mesh1').feature('map1').feature('dis6').set('numelem', 6);
model.mesh('mesh1').run('map1');

model.view('view1').set('renderwireframe', false);

model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'Lmax');
model.mesh('mesh1').feature('size').set('hmin', '0.2[mm]');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([3 5 6]);
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 3);
model.mesh('mesh1').run('swe1');
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftet1').feature('size1').selection.set([17 19]);
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', '1[mm]');
model.mesh('mesh1').run;

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std1').feature('freq').setSolveFor('/physics/ta', true);
model.study('std1').feature('freq').setSolveFor('/physics/acpr2', true);
model.study('std1').feature('freq').setSolveFor('/multiphysics/atb1', true);
model.study('std1').label('Study 1 - Thermoviscous Model');
model.study('std1').setGenPlots(false);
model.study('std1').feature('freq').set('plist', '{100, 112, 125, 140, 160, 180, 200, 224, 250, 280, 315, 355, 400, 450, 500, 560, 630, 710, 800, 900, 1e3, 1.12e3, 1.25e3, 1.4e3, 1.6e3, 1.8e3, 2e3, 2.24e3, 2.5e3, 2.8e3, 3.15e3, 3.55e3, 4e3, 4.5e3, 5e3, 5.6e3, 6.3e3, 7.1e3, 8e3, 9e3, 1e4, 1.12e4, 1.25e4, 1.4e4, 1.6e4, 1.8e4, 2e4, 2.24e4, 2.5e4}');
model.study('std1').feature('freq').set('useadvanceddisable', true);
model.study('std1').feature('freq').setSolveFor('/physics/acpr2', false);
model.study('std1').feature('freq').set('disabledphysics', {'acpr2'});

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'{100, 112, 125, 140, 160, 180, 200, 224, 250, 280, 315, 355, 400, 450, 500, 560, 630, 710, 800, 900, 1e3, 1.12e3, 1.25e3, 1.4e3, 1.6e3, 1.8e3, 2e3, 2.24e3, 2.5e3, 2.8e3, 3.15e3, 3.55e3, 4e3, 4.5e3, 5e3, 5.6e3, 6.3e3, 7.1e3, 8e3, 9e3, 1e4, 1.12e4, 1.25e4, 1.4e4, 1.6e4, 1.8e4, 2e4, 2.24e4, 2.5e4}'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (atb1) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with Direct Precon.) (atb1)');
model.sol('sol1').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_p' 'comp1_u' 'comp1_p2'});
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').feature('i1').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with DD) (atb1)');
model.sol('sol1').feature('s1').feature('i2').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('hybridvar', {'comp1_u' 'comp1_p2' 'comp1_T'});
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('domdofmax', 200000);
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('userac', false);
model.sol('sol1').feature('s1').feature('i2').feature('dd1').set('usecoarse', 'aggregation');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_p2'});
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('dd1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('hybridvar', {'comp1_p'});
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std2').feature('freq').setSolveFor('/physics/ta', false);
model.study('std2').feature('freq').setSolveFor('/physics/acpr2', true);
model.study('std2').feature('freq').setSolveFor('/multiphysics/atb1', true);
model.study('std2').label('Study 2 - Narrow Region Acoustics');
model.study('std2').setGenPlots(false);
model.study('std2').feature('freq').set('plist', '{100, 112, 125, 140, 160, 180, 200, 224, 250, 280, 315, 355, 400, 450, 500, 560, 630, 710, 800, 900, 1e3, 1.12e3, 1.25e3, 1.4e3, 1.6e3, 1.8e3, 2e3, 2.24e3, 2.5e3, 2.8e3, 3.15e3, 3.55e3, 4e3, 4.5e3, 5e3, 5.6e3, 6.3e3, 7.1e3, 8e3, 9e3, 1e4, 1.12e4, 1.25e4, 1.4e4, 1.6e4, 1.8e4, 2e4, 2.24e4, 2.5e4}');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 0.001);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol2').feature('s1').feature('p1').set('plistarr', {'{100, 112, 125, 140, 160, 180, 200, 224, 250, 280, 315, 355, 400, 450, 500, 560, 630, 710, 800, 900, 1e3, 1.12e3, 1.25e3, 1.4e3, 1.6e3, 1.8e3, 2e3, 2.24e3, 2.5e3, 2.8e3, 3.15e3, 3.55e3, 4e3, 4.5e3, 5e3, 5.6e3, 6.3e3, 7.1e3, 8e3, 9e3, 1e4, 1.12e4, 1.25e4, 1.4e4, 1.6e4, 1.8e4, 2e4, 2.24e4, 2.5e4}'});
model.sol('sol2').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol2').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol2').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s1').feature('p1').set('probes', {});
model.sol('sol2').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol2').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('s1').set('control', 'freq');
model.sol('sol2').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol2').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol2').feature('s1').create('se1', 'Segregated');
model.sol('sol2').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_p'});
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').label('Pressure Acoustics, Frequency Domain');
model.sol('sol2').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_p'});
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (acpr2)');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').label('Pressure Acoustics, Frequency Domain 2');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) (acpr2)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').create('i2', 'Iterative');
model.sol('sol2').feature('s1').feature('i2').set('linsolver', 'fgmres');
model.sol('sol2').feature('s1').feature('i2').label('Suggested Iterative Solver (FGMRES with GMG) (acpr2)');
model.sol('sol2').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').create('i3', 'Iterative');
model.sol('sol2').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i3').label('Suggested Iterative Solver (Shifted Laplace) (acpr2)');
model.sol('sol2').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('mcasegen', 'coarse');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('scale', '3');
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('slaplacemain', false);
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('slaplacemg', true);
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemain', {'acpr' 'off' 'ta' 'off'});
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemg', {'acpr' 'off' 'ta' 'off'});
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('epsslaplacemain', {'acpr2' '0.4'});
model.sol('sol2').feature('s1').feature('i3').feature('mg1').set('epsslaplacemg', {'acpr2' '0.4'});
model.sol('sol2').feature('s1').create('i4', 'Iterative');
model.sol('sol2').feature('s1').feature('i4').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i4').label('Suggested Iterative Solver (Domain Decomposition) (acpr2)');
model.sol('sol2').feature('s1').feature('i4').create('dd1', 'DomainDecomposition');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('dompernodemax', 1);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('dompernodemaxactive', 'on');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('userac', 'off');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('usecoarse', false);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('ddboundary', 'absorbing');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('slaplacemain', true);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('slaplacemg', 'on');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('alphaabsorbing', {'acpr2' '1'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('betaabsorbing', {'acpr2' '0.1'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('sndorderabsorbing', {'acpr2' 'on'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('epsslaplacemain', {'acpr2' '0.4'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('epsslaplacemg', {'acpr2' '0.4'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('slaplacemg', 'on');
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('epsslaplacemg', {'acpr2' '0.4'});
model.sol('sol2').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('iter', 1);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').runAll;

model.study.create('std3');
model.study('std3').create('freq', 'Frequency');
model.study('std3').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std3').feature('freq').setSolveFor('/physics/ta', false);
model.study('std3').feature('freq').setSolveFor('/physics/acpr2', true);
model.study('std3').feature('freq').setSolveFor('/multiphysics/atb1', false);
model.study('std3').label('Study 3 - Pressure Acoustics');
model.study('std3').setGenPlots(false);
model.study('std3').setGenConv(false);
model.study('std3').feature('freq').set('plist', '{100, 112, 125, 140, 160, 180, 200, 224, 250, 280, 315, 355, 400, 450, 500, 560, 630, 710, 800, 900, 1e3, 1.12e3, 1.25e3, 1.4e3, 1.6e3, 1.8e3, 2e3, 2.24e3, 2.5e3, 2.8e3, 3.15e3, 3.55e3, 4e3, 4.5e3, 5e3, 5.6e3, 6.3e3, 7.1e3, 8e3, 9e3, 1e4, 1.12e4, 1.25e4, 1.4e4, 1.6e4, 1.8e4, 2e4, 2.24e4, 2.5e4}');
model.study('std3').feature('freq').set('useadvanceddisable', true);
model.study('std3').feature('freq').set('disabledphysics', {'acpr2/nra1' 'acpr2/nra2'});

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'freq');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'freq');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').set('stol', 0.001);
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol3').feature('s1').feature('p1').set('plistarr', {'{100, 112, 125, 140, 160, 180, 200, 224, 250, 280, 315, 355, 400, 450, 500, 560, 630, 710, 800, 900, 1e3, 1.12e3, 1.25e3, 1.4e3, 1.6e3, 1.8e3, 2e3, 2.24e3, 2.5e3, 2.8e3, 3.15e3, 3.55e3, 4e3, 4.5e3, 5e3, 5.6e3, 6.3e3, 7.1e3, 8e3, 9e3, 1e4, 1.12e4, 1.25e4, 1.4e4, 1.6e4, 1.8e4, 2e4, 2.24e4, 2.5e4}'});
model.sol('sol3').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol3').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol3').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol3').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol3').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol3').feature('s1').feature('p1').set('probes', {});
model.sol('sol3').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol3').feature('s1').set('linpmethod', 'sol');
model.sol('sol3').feature('s1').set('linpsol', 'zero');
model.sol('sol3').feature('s1').set('control', 'freq');
model.sol('sol3').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol3').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol3').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol3').feature('s1').create('se1', 'Segregated');
model.sol('sol3').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol3').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol3').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_p'});
model.sol('sol3').feature('s1').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol3').feature('s1').feature('d1').label('Suggested Direct Solver (acpr)');
model.sol('sol3').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol3').feature('s1').feature('se1').feature('ss1').label('Pressure Acoustics, Frequency Domain');
model.sol('sol3').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol3').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_p'});
model.sol('sol3').feature('s1').create('d2', 'Direct');
model.sol('sol3').feature('s1').feature('d2').set('linsolver', 'mumps');
model.sol('sol3').feature('s1').feature('d2').label('Suggested Direct Solver (acpr2)');
model.sol('sol3').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol3').feature('s1').feature('se1').feature('ss2').label('Pressure Acoustics, Frequency Domain 2');
model.sol('sol3').feature('s1').create('i1', 'Iterative');
model.sol('sol3').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) (acpr)');
model.sol('sol3').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol3').feature('s1').create('i2', 'Iterative');
model.sol('sol3').feature('s1').feature('i2').set('linsolver', 'fgmres');
model.sol('sol3').feature('s1').feature('i2').label('Suggested Iterative Solver (FGMRES with GMG) (acpr)');
model.sol('sol3').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol3').feature('s1').create('i3', 'Iterative');
model.sol('sol3').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i3').label('Suggested Iterative Solver (Shifted Laplace) (acpr)');
model.sol('sol3').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('prefun', 'gmg');
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('iter', 1);
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('mcasegen', 'coarse');
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('scale', '3');
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('slaplacemain', false);
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('slaplacemg', true);
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemain', {'ta' 'off' 'acpr2' 'off'});
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemg', {'ta' 'off' 'acpr2' 'off'});
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol3').feature('s1').create('i4', 'Iterative');
model.sol('sol3').feature('s1').feature('i4').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i4').label('Suggested Iterative Solver (Domain Decomposition) (acpr)');
model.sol('sol3').feature('s1').feature('i4').create('dd1', 'DomainDecomposition');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('dompernodemax', 1);
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('dompernodemaxactive', 'on');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('userac', 'off');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('usecoarse', false);
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('ddboundary', 'absorbing');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('slaplacemain', true);
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('slaplacemg', 'on');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('alphaabsorbing', {'acpr' '1'});
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('betaabsorbing', {'acpr' '0.1'});
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('sndorderabsorbing', {'acpr' 'on'});
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('iter', 1);
model.sol('sol3').feature('s1').feature('i4').feature('dd1').feature('ds').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('slaplacemg', 'on');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol3').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('iter', 1);
model.sol('sol3').feature('s1').create('i5', 'Iterative');
model.sol('sol3').feature('s1').feature('i5').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i5').label('Suggested Iterative Solver (GMRES with GMG) (acpr2)');
model.sol('sol3').feature('s1').feature('i5').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i5').feature('mg1').set('prefun', 'gmg');
model.sol('sol3').feature('s1').create('i6', 'Iterative');
model.sol('sol3').feature('s1').feature('i6').set('linsolver', 'fgmres');
model.sol('sol3').feature('s1').feature('i6').label('Suggested Iterative Solver (FGMRES with GMG) (acpr2)');
model.sol('sol3').feature('s1').feature('i6').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i6').feature('mg1').set('prefun', 'gmg');
model.sol('sol3').feature('s1').create('i7', 'Iterative');
model.sol('sol3').feature('s1').feature('i7').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i7').label('Suggested Iterative Solver (Shifted Laplace) (acpr2)');
model.sol('sol3').feature('s1').feature('i7').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i7').feature('mg1').set('prefun', 'gmg');
model.sol('sol3').feature('s1').feature('i7').feature('mg1').set('iter', 1);
model.sol('sol3').feature('s1').feature('i7').feature('mg1').set('mcasegen', 'coarse');
model.sol('sol3').feature('s1').feature('i7').feature('mg1').set('scale', '3');
model.sol('sol3').feature('s1').feature('i7').feature('mg1').set('slaplacemain', false);
model.sol('sol3').feature('s1').feature('i7').feature('mg1').set('slaplacemg', true);
model.sol('sol3').feature('s1').feature('i7').feature('mg1').set('addweakcontribslaplacemain', {'acpr' 'off' 'ta' 'off'});
model.sol('sol3').feature('s1').feature('i7').feature('mg1').set('addweakcontribslaplacemg', {'acpr' 'off' 'ta' 'off'});
model.sol('sol3').feature('s1').feature('i7').feature('mg1').set('epsslaplacemain', {'acpr2' '0.4'});
model.sol('sol3').feature('s1').feature('i7').feature('mg1').set('epsslaplacemg', {'acpr2' '0.4'});
model.sol('sol3').feature('s1').create('i8', 'Iterative');
model.sol('sol3').feature('s1').feature('i8').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i8').label('Suggested Iterative Solver (Domain Decomposition) (acpr2)');
model.sol('sol3').feature('s1').feature('i8').create('dd1', 'DomainDecomposition');
model.sol('sol3').feature('s1').feature('i8').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol3').feature('s1').feature('i8').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol3').feature('s1').feature('i8').feature('dd1').set('dompernodemax', 1);
model.sol('sol3').feature('s1').feature('i8').feature('dd1').set('dompernodemaxactive', 'on');
model.sol('sol3').feature('s1').feature('i8').feature('dd1').set('userac', 'off');
model.sol('sol3').feature('s1').feature('i8').feature('dd1').set('usecoarse', false);
model.sol('sol3').feature('s1').feature('i8').feature('dd1').set('ddboundary', 'absorbing');
model.sol('sol3').feature('s1').feature('i8').feature('dd1').set('slaplacemain', true);
model.sol('sol3').feature('s1').feature('i8').feature('dd1').set('slaplacemg', 'on');
model.sol('sol3').feature('s1').feature('i8').feature('dd1').set('alphaabsorbing', {'acpr2' '1'});
model.sol('sol3').feature('s1').feature('i8').feature('dd1').set('betaabsorbing', {'acpr2' '0.1'});
model.sol('sol3').feature('s1').feature('i8').feature('dd1').set('sndorderabsorbing', {'acpr2' 'on'});
model.sol('sol3').feature('s1').feature('i8').feature('dd1').set('epsslaplacemain', {'acpr2' '0.4'});
model.sol('sol3').feature('s1').feature('i8').feature('dd1').set('epsslaplacemg', {'acpr2' '0.4'});
model.sol('sol3').feature('s1').feature('i8').feature('dd1').set('iter', 1);
model.sol('sol3').feature('s1').feature('i8').feature('dd1').feature('ds').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i8').feature('dd1').feature('ds').feature('mg1').set('slaplacemg', 'on');
model.sol('sol3').feature('s1').feature('i8').feature('dd1').feature('ds').feature('mg1').set('epsslaplacemg', {'acpr2' '0.4'});
model.sol('sol3').feature('s1').feature('i8').feature('dd1').feature('ds').feature('mg1').set('iter', 1);
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runFromTo('st1', 'v1');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('dDef').active(true);
model.sol('sol3').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').run;
model.result('pg1').label('Acoustic Pressure');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', 'atb1.p_t');
model.result('pg1').feature('vol1').set('descr', 'Total acoustic pressure');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 44, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 20, 0);
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 46, 0);
model.result('pg2').label('Streamline - Acoustic Intensity');
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Acoustic Intensity (W/m<sup>3</sup>)');
model.result('pg2').set('paramindicator', 'freq =eval(acpr.freq) Hz');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').create('str1', 'Streamline');
model.result('pg2').feature('str1').setIndex('expr', 'if(isnan(acpr.p_t),ta.Ix,acpr.Ix)', 0);
model.result('pg2').feature('str1').setIndex('expr', 'if(isnan(acpr.p_t),ta.Iy,acpr.Iy)', 1);
model.result('pg2').feature('str1').setIndex('expr', 'if(isnan(acpr.p_t),ta.Iz,acpr.Iz)', 2);
model.result('pg2').feature('str1').selection.set([11 19 29 36 41]);
model.result('pg2').feature('str1').set('selnumber', 100);
model.result('pg2').feature('str1').set('linetype', 'tube');
model.result('pg2').feature('str1').create('col1', 'Color');
model.result('pg2').run;
model.result('pg2').feature('str1').feature('col1').set('expr', 'if(isnan(acpr.p_t),(ta.I_mag),(acpr.I_mag))');
model.result('pg2').feature('str1').feature('col1').set('colortable', 'Rainbow');
model.result('pg2').feature('str1').feature('col1').set('colorscalemode', 'logarithmic');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 32, 0);
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 19, 0);
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Transfer Impedance');
model.result('pg3').set('titletype', 'label');
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', ['Z<sub>trans</sub> (dB rel. 1MPa' native2unicode(hex2dec({'00' 'b7'}), 'unicode') 's/m<sup>3</sup>)']);
model.result('pg3').set('legendpos', 'lowerleft');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').setIndex('expr', '20*log10(abs(Ztrans/1e6[Pa*s/m^3]))', 0);
model.result('pg3').feature('glob1').setIndex('unit', '', 0);
model.result('pg3').feature('glob1').setIndex('descr', 'Thermoviscous model', 0);
model.result('pg3').run;
model.result('pg3').create('glob2', 'Global');
model.result('pg3').feature('glob2').set('markerpos', 'datapoints');
model.result('pg3').feature('glob2').set('linewidth', 'preference');
model.result('pg3').feature('glob2').setIndex('expr', 'int_trans(freq)', 0);
model.result('pg3').feature('glob2').setIndex('unit', '', 0);
model.result('pg3').feature('glob2').setIndex('descr', 'Standard (IEC 60318-4)', 0);
model.result('pg3').feature('glob2').set('linecolor', 'red');
model.result('pg3').feature('glob2').set('data', 'dset1');
model.result('pg3').feature('glob2').setIndex('looplevelinput', 'manual', 0);
model.result('pg3').feature('glob2').setIndex('looplevel', [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41], 0);
model.result('pg3').run;
model.result('pg3').set('xlog', true);
model.result('pg3').feature.duplicate('glob3', 'glob2');
model.result('pg3').run;
model.result('pg3').feature('glob3').setIndex('expr', 'int_trans_upper(freq)', 0);
model.result('pg3').feature('glob3').setIndex('unit', '', 0);
model.result('pg3').feature('glob3').setIndex('descr', 'Upper tolerance', 0);
model.result('pg3').feature('glob3').setIndex('expr', 'int_trans_lower(freq)', 1);
model.result('pg3').feature('glob3').setIndex('unit', '', 1);
model.result('pg3').feature('glob3').setIndex('descr', 'Lower tolerance', 1);
model.result('pg3').feature('glob3').set('linestyle', 'dotted');
model.result('pg3').feature('glob3').set('legend', false);
model.result('pg3').run;
model.result('pg3').feature.duplicate('glob4', 'glob1');
model.result('pg3').run;
model.result('pg3').feature('glob4').set('data', 'dset2');
model.result('pg3').feature('glob4').setIndex('expr', '20*log10(abs(Ztrans/1e6[Pa*s/m^3]))', 0);
model.result('pg3').feature('glob4').setIndex('unit', '', 0);
model.result('pg3').feature('glob4').setIndex('descr', 'Narrow region acoustics model', 0);
model.result('pg3').run;
model.result('pg3').feature.duplicate('glob5', 'glob4');
model.result('pg3').run;
model.result('pg3').feature('glob5').set('data', 'dset3');
model.result('pg3').feature('glob5').setIndex('unit', '', 0);
model.result('pg3').feature('glob5').setIndex('descr', 'Pressure acoustics model (lossless)', 0);
model.result('pg3').feature('glob5').set('linecolor', 'magenta');
model.result('pg3').feature('glob5').set('linestyle', 'dashed');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').set('axislimits', true);
model.result('pg3').set('ymin', 18);
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Microphone Response');
model.result('pg4').set('ylabel', 'Microphone Response (dB SPL rel. to 500 Hz)');
model.result('pg4').set('legendpos', 'upperleft');
model.result('pg4').run;
model.result('pg4').feature('glob1').setIndex('expr', 'L0', 0);
model.result('pg4').feature('glob1').setIndex('unit', '', 0);
model.result('pg4').feature('glob1').setIndex('descr', 'Model', 0);
model.result('pg4').run;
model.result('pg4').feature('glob2').setIndex('expr', 'int_mic(freq)', 0);
model.result('pg4').feature('glob2').setIndex('unit', '', 0);
model.result('pg4').feature('glob2').setIndex('descr', 'Standard (IEC 60318-4)', 0);
model.result('pg4').run;
model.result('pg4').feature('glob3').setIndex('expr', 'int_mic_upper(freq)', 0);
model.result('pg4').feature('glob3').setIndex('unit', '', 0);
model.result('pg4').feature('glob3').setIndex('descr', 'Upper tolerance', 0);
model.result('pg4').feature('glob3').setIndex('expr', 'int_mic_lower(freq)', 1);
model.result('pg4').feature('glob3').setIndex('unit', '', 1);
model.result('pg4').feature('glob3').setIndex('descr', 'Lower tolerance', 1);
model.result('pg4').run;
model.result('pg4').feature('glob4').setIndex('expr', 'L0', 0);
model.result('pg4').feature('glob4').setIndex('unit', '', 0);
model.result('pg4').feature('glob4').setIndex('descr', 'Narrow region acoustics model', 0);
model.result('pg4').run;
model.result('pg4').feature('glob5').setIndex('expr', 'L0', 0);
model.result('pg4').feature('glob5').setIndex('unit', '', 0);
model.result('pg4').feature('glob5').setIndex('descr', 'Pressure acoustics model (lossless)', 0);
model.result('pg4').run;
model.result('pg4').set('ymin', -2);
model.result('pg4').set('ymax', 35);
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Input Impedance');
model.result('pg5').set('titletype', 'label');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', ['Z<sub>in</sub> (dB rel. 1MPa' native2unicode(hex2dec({'00' 'b7'}), 'unicode') 's/m<sup>3</sup>)']);
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').setIndex('expr', '20*log10(abs(Zin/1e6[Pa*s/m^3]))', 0);
model.result('pg5').feature('glob1').setIndex('unit', '', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'Thermoviscous model', 0);
model.result('pg5').feature.duplicate('glob2', 'glob1');
model.result('pg5').run;
model.result('pg5').feature('glob2').set('data', 'dset2');
model.result('pg5').feature('glob2').setIndex('expr', '20*log10(abs(Zin/1e6[Pa*s/m^3]))', 0);
model.result('pg5').feature('glob2').setIndex('unit', '', 0);
model.result('pg5').feature('glob2').setIndex('descr', 'Narrow region acoustics model', 0);
model.result('pg5').feature.duplicate('glob3', 'glob2');
model.result('pg5').run;
model.result('pg5').feature('glob3').set('data', 'dset3');
model.result('pg5').feature('glob3').setIndex('expr', '20*log10(abs(Zin/1e6[Pa*s/m^3]))', 0);
model.result('pg5').feature('glob3').setIndex('unit', '', 0);
model.result('pg5').feature('glob3').setIndex('descr', 'Pressure acoustics model (lossless)', 0);
model.result('pg5').feature('glob3').set('linecolor', 'magenta');
model.result('pg5').feature('glob3').set('linestyle', 'dashed');
model.result('pg5').set('xlog', true);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Normalized Losses');
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('legendpos', 'upperleft');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').setIndex('expr', '-intop_top_slit(ta.diss_tot)/intop_in(down(acpr.Iz))', 0);
model.result('pg6').feature('glob1').setIndex('unit', 1, 0);
model.result('pg6').feature('glob1').setIndex('descr', 'Top slit losses', 0);
model.result('pg6').feature('glob1').setIndex('expr', '-intop_bottom_slit(ta.diss_tot)/intop_in(down(acpr.Iz))', 1);
model.result('pg6').feature('glob1').setIndex('unit', 1, 1);
model.result('pg6').feature('glob1').setIndex('descr', 'Bottom slit losses', 1);
model.result('pg6').feature('glob1').setIndex('expr', 'intop_mic(down(acpr.Iz))/intop_in(down(acpr.Iz))', 2);
model.result('pg6').feature('glob1').setIndex('unit', 1, 2);
model.result('pg6').feature('glob1').setIndex('descr', 'Microphone losses', 2);
model.result('pg6').set('xlog', true);
model.result('pg6').run;
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 49, 0);

model.title(['Generic 711 Coupler ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' An Occluded Ear-Canal Simulator']);

model.description('This is the model of a generic ear canal simulator (or coupler). The real life couplers are used for simulating the acoustics of a standardized human ear canal and can be used for measurements on all sorts of devices. They are widely used in the hearing aid industry and also as ear canals on all sorts of acoustic manikins for recording 3D sound. The model results are compared with the IEC standard curves and with results obtained with a pure pressure acoustics model.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('generic_711_coupler.mph');

model.modelNode.label('Components');

out = model;
