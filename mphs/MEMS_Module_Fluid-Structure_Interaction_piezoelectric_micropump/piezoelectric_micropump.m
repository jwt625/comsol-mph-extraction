function out = model
%
% piezoelectric_micropump.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/MEMS_Module/Fluid-Structure_Interaction');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics('solid').create('pzm1', 'PiezoelectricMaterialModel');
model.physics('solid').feature('pzm1').selection.all;
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics('es').create('ccnp1', 'ChargeConservationPiezo');
model.physics('es').feature('ccnp1').selection.all;
model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics.create('ge', 'GlobalEquations', 'geom1');
model.physics('ge').model('comp1');
model.physics('ge').prop('EquationForm').set('form', 'Automatic');

model.multiphysics.create('pze1', 'PiezoelectricEffect', 'geom1', 3);
model.multiphysics('pze1').set('Solid_physics', 'solid');
model.multiphysics('pze1').set('Electrostatics_physics', 'es');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/solid', true);
model.study('std1').feature('time').setSolveFor('/physics/es', true);
model.study('std1').feature('time').setSolveFor('/physics/spf', true);
model.study('std1').feature('time').setSolveFor('/physics/ge', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/pze1', true);

model.geom('geom1').lengthUnit('mm');

model.param.set('w_block', '30 [mm]');
model.param.descr('w_block', 'Width of base');
model.param.set('depth_block', '30 [mm]');
model.param.descr('depth_block', 'Depth of base');
model.param.set('h_block', '5 [mm]');
model.param.descr('h_block', 'Base thickness');
model.param.set('h_exit', '5*r_inlet');
model.param.descr('h_exit', 'Height of Inlet/Outlet');
model.param.set('h_memb', '1 [mm]');
model.param.descr('h_memb', 'Height of the Membrane');
model.param.set('ID', '8[mm]');
model.param.descr('ID', 'Disc actuator inner diameter');
model.param.set('OD', '15[mm]');
model.param.descr('OD', 'Disc actuator outer diameter');
model.param.set('r_inlet', '1 [mm]');
model.param.descr('r_inlet', 'Fluid Inlet Radius');
model.param.set('r_memb', '12 [mm]');
model.param.descr('r_memb', 'Radius of the Membrane');
model.param.set('r_outlet', '1 [mm]');
model.param.descr('r_outlet', 'Fluid Outlet Radius');
model.param.set('t0', '0.1[mm]');
model.param.descr('t0', 'Piezoelectric layer thickness');
model.param.set('n', '75');
model.param.descr('n', 'Number of layers in actuator');
model.param.set('E0', '0.2[V/um]');
model.param.descr('E0', 'Electric field strength');
model.param.set('V0', 'E0*t0*n');
model.param.descr('V0', 'Applied voltage');
model.param.set('frequency', '60[Hz]');
model.param.descr('frequency', 'Frequency of piston actuation');
model.param.set('high_stress', '5e3');
model.param.descr('high_stress', 'Boundary Stress (High)');
model.param.set('low_stress', '1e-1');
model.param.descr('low_stress', 'Boundary Stress (Low)');

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').label('Block 1 - Fluid Chamber');
model.geom('geom1').feature('blk1').set('size', {'w_block' 'depth_block' '1'});
model.geom('geom1').feature('blk1').setIndex('size', 'h_block-h_memb', 2);
model.geom('geom1').feature('blk1').set('base', 'center');
model.geom('geom1').feature('blk1').set('pos', {'0' '0' '-h_memb/2'});
model.geom('geom1').run('blk1');
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').label('Cylinder 1 - Piezo OD');
model.geom('geom1').feature('cyl1').set('r', 'OD/2');
model.geom('geom1').feature('cyl1').set('h', 't0*n');
model.geom('geom1').feature('cyl1').set('pos', {'0' '0' 'h_block/2'});
model.geom('geom1').feature.duplicate('cyl2', 'cyl1');
model.geom('geom1').feature('cyl2').label('Cylinder 2 - Piezo ID');
model.geom('geom1').feature('cyl2').set('r', 'ID/2');
model.geom('geom1').run('cyl2');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').label('Difference 1 - Piezo');
model.geom('geom1').feature('dif1').selection('input').set({'cyl1'});
model.geom('geom1').feature('dif1').selection('input2').set({'cyl2'});
model.geom('geom1').run('dif1');
model.geom('geom1').create('cyl3', 'Cylinder');
model.geom('geom1').feature('cyl3').label('Cylinder 3 - Membrane');
model.geom('geom1').feature('cyl3').set('r', 'r_memb');
model.geom('geom1').feature('cyl3').set('h', 'h_memb');
model.geom('geom1').feature('cyl3').set('pos', {'0' '0' 'h_block/2-h_memb'});
model.geom('geom1').run('cyl3');
model.geom('geom1').create('cyl4', 'Cylinder');
model.geom('geom1').feature('cyl4').label('Cylinder 4 - Inlet');
model.geom('geom1').feature('cyl4').set('r', 'r_inlet');
model.geom('geom1').feature('cyl4').set('h', 'h_exit');
model.geom('geom1').feature('cyl4').set('pos', {'-(OD+ID)/4' '0' '0'});
model.geom('geom1').feature('cyl4').setIndex('pos', '-h_block/2-h_exit', 2);
model.geom('geom1').feature.duplicate('cyl5', 'cyl4');
model.geom('geom1').feature('cyl5').label('Cylinder 5 - Outlet');
model.geom('geom1').feature('cyl5').set('r', 'r_outlet');
model.geom('geom1').feature('cyl5').setIndex('pos', '(OD+ID)/4', 0);
model.geom('geom1').run('cyl5');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').label('Work Plane 1 - Symmetry Plane');
model.geom('geom1').feature('wp1').set('quickplane', 'xz');
model.geom('geom1').run('wp1');
model.geom('geom1').create('par1', 'Partition');
model.geom('geom1').feature('par1').selection('input').set({'blk1' 'cyl3' 'cyl4' 'cyl5' 'dif1'});
model.geom('geom1').feature('par1').set('partitionwith', 'workplane');
model.geom('geom1').run('par1');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').init(3);
model.geom('geom1').feature('del1').selection('input').set('par1(1)', 1);
model.geom('geom1').feature('del1').selection('input').set('par1(2)', 1);
model.geom('geom1').feature('del1').selection('input').set('par1(3)', 1);
model.geom('geom1').feature('del1').selection('input').set('par1(4)', 1);
model.geom('geom1').feature('del1').selection('input').set('par1(5)', 1);
model.geom('geom1').run('del1');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').label('Union 1 - Solid');
model.geom('geom1').feature('uni1').selection('input').set({'del1(2)' 'del1(5)'});
model.geom('geom1').feature('uni1').set('selresult', true);
model.geom('geom1').run('uni1');
model.geom('geom1').create('uni2', 'Union');
model.geom('geom1').feature('uni2').label('Union 2 - Fluid');
model.geom('geom1').feature('uni2').selection('input').set({'del1(1)' 'del1(3)' 'del1(4)'});
model.geom('geom1').feature('uni2').set('selresult', true);
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('imprint', true);
model.geom('geom1').run('fin');

model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');
model.selection('box1').label('Box 1 - Piezo');
model.selection('box1').set('xmin', 'h_block/2-h_memb/2');
model.selection('box1').set('condition', 'inside');
model.selection('box1').set('xmin', '-inf');
model.selection('box1').set('zmin', 'h_block/2-h_memb/2');
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Difference 1 - Membrane');
model.selection('dif1').set('add', {'geom1_uni1_dom'});
model.selection('dif1').set('subtract', {'box1'});
model.selection.create('box2', 'Box');
model.selection('box2').model('comp1');
model.selection('box2').label('Box 2 - Inlet');
model.selection('box2').set('entitydim', 2);
model.selection('box2').set('xmax', 0);
model.selection('box2').set('zmax', '-h_block/2-h_exit/2');
model.selection('box2').set('condition', 'inside');

model.view('view1').set('renderwireframe', true);

model.selection.duplicate('box3', 'box2');
model.selection('box3').label('Box 3 - Outlet');
model.selection('box3').set('xmin', 0);
model.selection('box3').set('xmax', Inf);
model.selection.create('box4', 'Box');
model.selection('box4').model('comp1');
model.selection('box4').label('Box 4 - Symmetry Plane');
model.selection('box4').set('entitydim', 2);
model.selection('box4').set('ymax', 'min(min(r_inlet,r_outlet),ID)/2');
model.selection('box4').set('condition', 'inside');
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Adjacent 1 - All Fluid Boundaries');
model.selection('adj1').set('input', {'geom1_uni2_dom'});
model.selection.create('dif2', 'Difference');
model.selection('dif2').model('comp1');
model.selection('dif2').label('Difference 2 - Fluid Walls');
model.selection('dif2').set('entitydim', 2);
model.selection('dif2').set('add', {'adj1'});
model.selection('dif2').set('subtract', {'box2' 'box3' 'box4'});
model.selection.create('box5', 'Box');
model.selection('box5').model('comp1');
model.selection('box5').set('entitydim', 2);
model.selection('box5').set('xmin', '-eps');
model.selection('box5').set('xmax', 'eps');
model.selection('box5').set('ymin', '-eps');
model.selection('box5').set('ymax', 'eps');
model.selection('box5').set('zmin', 'h_block/2-h_memb-eps');
model.selection.create('int1', 'Intersection');
model.selection('int1').model('comp1');
model.selection('int1').label('Intersection 1 - Fluid Membrane');
model.selection('int1').set('entitydim', 2);
model.selection('int1').set('input', {'dif2' 'box5'});
model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Explicit 1 - Fixed Boundaries');
model.selection('sel1').geom(2);
model.selection('sel1').set([18 25 30]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water, liquid');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('StrainCharge', 'Strain-charge form');
model.material('mat2').propertyGroup.create('StressCharge', 'Stress-charge form');
model.material('mat2').label('Lead Zirconate Titanate (PZT-5H)');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat2').set('customdiffuse', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat2').set('noise', true);
model.material('mat2').set('fresnel', 0.9);
model.material('mat2').set('roughness', 0.1);
model.material('mat2').set('metallic', 0);
model.material('mat2').set('pearl', 0);
model.material('mat2').set('diffusewrap', 0);
model.material('mat2').set('clearcoat', 0);
model.material('mat2').set('reflectance', 0);
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1704.4' '0' '0' '0' '1704.4' '0' '0' '0' '1433.6'});
model.material('mat2').propertyGroup('def').set('density', '7500[kg/m^3]');
model.material('mat2').propertyGroup('StrainCharge').set('sE', {'1.65e-011[1/Pa]' '-4.78e-012[1/Pa]' '-8.45e-012[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '-4.78e-012[1/Pa]' '1.65e-011[1/Pa]' '-8.45e-012[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '0[1/Pa]' '-8.45e-012[1/Pa]' '-8.45e-012[1/Pa]' '2.07e-011[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '4.35e-011[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '4.35e-011[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '4.26e-011[1/Pa]'});
model.material('mat2').propertyGroup('StrainCharge').set('dET', {'0[C/N]' '0[C/N]' '-2.74e-010[C/N]' '0[C/N]' '0[C/N]' '-2.74e-010[C/N]' '0[C/N]' '0[C/N]' '5.93e-010[C/N]' '0[C/N]'  ...
'7.41e-010[C/N]' '0[C/N]' '7.41e-010[C/N]' '0[C/N]' '0[C/N]' '0[C/N]' '0[C/N]' '0[C/N]'});
model.material('mat2').propertyGroup('StrainCharge').set('epsilonrT', {'3130' '0' '0' '0' '3130' '0' '0' '0' '3400'});
model.material('mat2').propertyGroup('StressCharge').set('cE', {'1.27205e+011[Pa]' '8.02122e+010[Pa]' '8.46702e+010[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '8.02122e+010[Pa]' '1.27205e+011[Pa]' '8.46702e+010[Pa]' '0[Pa]'  ...
'0[Pa]' '0[Pa]' '8.46702e+010[Pa]' '8.46702e+010[Pa]' '1.17436e+011[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]'  ...
'0[Pa]' '2.29885e+010[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '2.29885e+010[Pa]' '0[Pa]'  ...
'0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '2.34742e+010[Pa]'});
model.material('mat2').propertyGroup('StressCharge').set('eES', {'0[C/m^2]' '0[C/m^2]' '-6.62281[C/m^2]' '0[C/m^2]' '0[C/m^2]' '-6.62281[C/m^2]' '0[C/m^2]' '0[C/m^2]' '23.2403[C/m^2]' '0[C/m^2]'  ...
'17.0345[C/m^2]' '0[C/m^2]' '17.0345[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]'});
model.material('mat2').propertyGroup('StressCharge').set('epsilonrS', {'1704.4' '0' '0' '0' '1704.4' '0' '0' '0' '1433.6'});
model.material('mat1').selection.named('geom1_uni2_dom');
model.material('mat2').selection.named('box1');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Membrane');
model.material('mat3').selection.named('dif1');

model.physics('solid').selection.named('geom1_uni1_dom');
model.physics('solid').feature('pzm1').selection.named('box1');
model.physics('es').selection.named('box1');
model.physics('spf').selection.named('geom1_uni2_dom');

model.material('mat3').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat3').propertyGroup('Enu').set('E', {'200[MPa]'});
model.material('mat3').propertyGroup('Enu').set('nu', {'0.45'});
model.material('mat3').propertyGroup('def').set('density', {'2320[kg/m^3]'});

model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.named('sel1');
model.physics('solid').create('sym1', 'SymmetrySolid', 2);
model.physics('solid').feature('sym1').selection.named('box4');
model.physics('es').create('term1', 'Terminal', 2);
model.physics('es').feature('term1').selection.named('sel1');
model.physics('es').create('gnd1', 'Ground', 2);
model.physics('es').feature('gnd1').selection.set([24]);

model.func.create('rm1', 'Ramp');
model.func('rm1').model('comp1');
model.func('rm1').set('location', 0.1);
model.func('rm1').set('slope', 1.2);
model.func('rm1').set('cutoffactive', true);
model.func('rm1').set('smoothzonelocactive', true);
model.func('rm1').set('smoothzonecutoffactive', true);

model.physics('es').feature('term1').set('TerminalType', 'Voltage');
model.physics('es').feature('term1').set('V0', 'V0*sin(t*frequency*2*pi)*rm1(t*frequency*4/3)');
model.physics('spf').create('inl1', 'InletBoundary', 2);
model.physics('spf').feature('inl1').selection.named('box2');
model.physics('spf').create('out1', 'OutletBoundary', 2);
model.physics('spf').feature('out1').selection.named('box3');
model.physics('spf').create('sym1', 'Symmetry', 2);
model.physics('spf').feature('sym1').selection.named('box4');

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').label('Average 1 - Inlet');
model.cpl('aveop1').set('opname', 'av_in');
model.cpl('aveop1').selection.geom('geom1', 2);
model.cpl('aveop1').selection.named('box2');
model.cpl.duplicate('aveop2', 'aveop1');
model.cpl('aveop2').label('Average 2 - Outlet');
model.cpl('aveop2').set('opname', 'av_out');
model.cpl('aveop2').selection.named('box3');

model.physics('spf').feature('inl1').set('BoundaryCondition', 'Pressure');
model.physics('spf').feature('inl1').set('p0', 'if(av_in(w2)>0,-low_stress, high_stress)*(av_in(w2)^2)*av_in(spf.rho)');
model.physics('spf').feature('inl1').set('FlowDirection', 'userdef');
model.physics('spf').feature('inl1').set('d_u', [0 0 1]);
model.physics('spf').feature('out1').set('p0', 'if(av_out(w2)<0,low_stress, -high_stress)*(av_out(w2)^2)*av_out(spf.rho)');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').label('Integration 1 - Inlet');
model.cpl('intop1').set('opname', 'int_in');
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.named('box2');
model.cpl.duplicate('intop2', 'intop1');
model.cpl('intop2').label('Integration 2 - Outlet');
model.cpl('intop2').set('opname', 'int_out');
model.cpl('intop2').selection.named('box3');

model.physics('ge').feature('ge1').label('Global Equations 1 - Accumulated Flow Volume');
model.physics('ge').feature('ge1').setIndex('name', 'Q_in', 0, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'Q_int-int_in(w2)', 0, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Accumulated in flow', 0, 0);
model.physics('ge').feature('ge1').setIndex('name', 'Q_out', 1, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 1, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 1, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 1, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 1, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'Q_outt-int_out(-w2)', 1, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Accumulated out flow', 1, 0);
model.physics('ge').feature('ge1').set('CustomDependentVariableUnit', '1');
model.physics('ge').feature('ge1').set('DependentVariableQuantity', 'none');
model.physics('ge').feature('ge1').setIndex('CustomDependentVariableUnit', 'm^3', 0, 0);
model.physics('ge').feature('ge1').set('CustomSourceTermUnit', '1');
model.physics('ge').feature('ge1').set('SourceTermQuantity', 'none');
model.physics('ge').feature('ge1').setIndex('CustomSourceTermUnit', 'm^3/s', 0, 0);

model.multiphysics.create('fsip1', 'FluidStructureInteractionPair', 'geom1', 2);
model.multiphysics('fsip1').set('pairs', {'ap1'});

model.selection.create('box6', 'Box');
model.selection('box6').model('comp1');
model.selection('box6').label('Box 6 - Quad Mesh');
model.selection('box6').set('entitydim', 2);
model.selection('box6').set('zmin', 'h_block/2-eps');
model.selection('box6').set('zmax', 'h_block/2+eps');
model.selection('box6').set('condition', 'inside');

model.mesh('mesh1').create('fq1', 'FreeQuad');
model.mesh('mesh1').feature('fq1').selection.named('box6');
model.mesh('mesh1').feature('size').set('hauto', 2);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.named('geom1_uni1_dom');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.named('box1');
model.mesh('mesh1').feature('swe1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis2').selection.named('dif1');
model.mesh('mesh1').feature('swe1').feature('dis2').set('numelem', 3);
model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('size1').selection.named('geom1_uni2_dom');
model.mesh('mesh1').feature('size1').set('table', 'cfd');
model.mesh('mesh1').feature('size1').set('hauto', 4);
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(3);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('bl1').selection.named('geom1_uni2_dom');
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('dif2');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 3);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', 0.1);
model.mesh('mesh1').run;

model.cpl.create('intop3', 'Integration', 'geom1');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').label('Integration 3 - Fluid Membrane');
model.cpl('intop3').set('opname', 'int_mem');
model.cpl('intop3').selection.geom('geom1', 2);
model.cpl('intop3').selection.named('int1');

model.probe.create('var1', 'GlobalVariable');
model.probe('var1').model('comp1');
model.probe('var1').label('Global Variable Probe 1 - In flow rate');
model.probe('var1').set('probename', 'flowrate_in');
model.probe('var1').set('expr', 'int_in(w2)');
model.probe('var1').set('unit', 'ml/s');
model.probe.duplicate('var2', 'var1');
model.probe('var2').label('Global Variable Probe 2 - Out flow rate');
model.probe('var2').set('probename', 'flowrate_out');
model.probe('var2').set('expr', 'int_out(-w2)');

model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Union 1 - Inlet and Outlet');
model.selection('uni1').set('entitydim', 2);
model.selection('uni1').set('input', {'box2' 'box3'});

model.study('std1').feature('time').set('tlist', 'range(0,0.025,5)/frequency');
model.study('std1').feature('time').set('geometricNonlinearity', true);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.037831864876053896');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.025,5)/frequency');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {'var1' 'var2'});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_fsip1_vWall' 'global' 'comp1_p' 'scaled' 'comp1_u' 'global' 'comp1_u2' 'global' 'comp1_V' 'global'  ...
'comp1_ODE1' 'global'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_fsip1_vWall' 'factor' 'comp1_p' 'factor' 'comp1_u' 'factor' 'comp1_u2' 'factor' 'comp1_V' 'factor'  ...
'comp1_ODE1' 'factor'});
model.sol('sol1').feature('t1').set('atolfactor', {'comp1_fsip1_vWall' '0.1' 'comp1_p' '1' 'comp1_u' '0.1' 'comp1_u2' '0.1' 'comp1_V' '0.1'  ...
'comp1_ODE1' '0.1'});
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('rhoinf', 0.5);
model.sol('sol1').feature('t1').set('predictor', 'constant');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.01');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('se1', 'Segregated');
model.sol('sol1').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_ODE1'});
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').label('Global ODEs and DAEs');
model.sol('sol1').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_V'});
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subjtech', 'once');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('t1').feature('d1').set('nliniterrefine', true);
model.sol('sol1').feature('t1').feature('d1').label('Suggested Direct Solver (pze1) (Merged)');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').label('Electrostatics');
model.sol('sol1').feature('t1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('segvar', {'comp1_u2' 'comp1_p' 'comp1_fsip1_vWall'});
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subjtech', 'once');
model.sol('sol1').feature('t1').create('d2', 'Direct');
model.sol('sol1').feature('t1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d2').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('linsolver', 'd2');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').label('Velocity U2, Pressure p');
model.sol('sol1').feature('t1').feature('se1').create('ss4', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss4').set('segvar', {'comp1_u'});
model.sol('sol1').feature('t1').feature('se1').feature('ss4').set('subdtech', 'const');
model.sol('sol1').feature('t1').feature('se1').feature('ss4').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss4').set('subjtech', 'once');
model.sol('sol1').feature('t1').create('d3', 'Direct');
model.sol('sol1').feature('t1').feature('d3').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d3').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('t1').feature('d3').set('nliniterrefine', true);
model.sol('sol1').feature('t1').feature('d3').label('Suggested Direct Solver (solid)');
model.sol('sol1').feature('t1').feature('se1').feature('ss4').set('linsolver', 'd3');
model.sol('sol1').feature('t1').feature('se1').feature('ss4').label('Displacement Field');
model.sol('sol1').feature('t1').feature('se1').set('ntolfact', 0.5);
model.sol('sol1').feature('t1').feature('se1').set('maxsegiter', 20);
model.sol('sol1').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol1').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol1').feature('t1').feature('se1').set('segaaccdelay', 0);
model.sol('sol1').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('t1').feature('i1').set('rhob', 40);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('t1').feature('i1').label('Suggested Iterative Solver (pze1)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('mg1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('mg1').set('mglevels', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('mg1').set('maxcoarsedof', 10000);
model.sol('sol1').feature('t1').create('i2', 'Iterative');
model.sol('sol1').feature('t1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i2').set('maxlinit', 100);
model.sol('sol1').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i2').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').create('i3', 'Iterative');
model.sol('sol1').feature('t1').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i3').set('prefuntype', 'right');
model.sol('sol1').feature('t1').feature('i3').set('rhob', 40);
model.sol('sol1').feature('t1').feature('i3').set('nlinnormuse', true);
model.sol('sol1').feature('t1').feature('i3').label('Suggested Iterative Solver (solid)');
model.sol('sol1').feature('t1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('so1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('so1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('cs').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('cs').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('cs').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('cs').feature('mg1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('cs').feature('mg1').set('mglevels', 2);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('cs').feature('mg1').set('maxcoarsedof', 10000);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');

model.probe('var1').genResult('none');
model.probe('var2').genResult('none');

model.sol('sol1').runAll;

model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 201, 0);
model.result('pg2').set('defaultPlotID', 'stress');
model.result('pg2').label('Stress (solid)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').create('vol1', 'Volume');
model.result('pg2').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg2').feature('vol1').set('threshold', 'manual');
model.result('pg2').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg2').feature('vol1').set('colortable', 'Rainbow');
model.result('pg2').feature('vol1').set('colortabletrans', 'none');
model.result('pg2').feature('vol1').set('colorscalemode', 'linear');
model.result('pg2').feature('vol1').set('resolution', 'custom');
model.result('pg2').feature('vol1').set('refine', 2);
model.result('pg2').feature('vol1').set('colortable', 'Prism');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Electric Potential (es)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 201, 0);
model.result('pg3').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond1/pg1');
model.result('pg3').feature.create('mslc1', 'Multislice');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('solutionparams', 'parent');
model.result('pg3').feature('mslc1').set('expr', 'V');
model.result('pg3').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg3').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg3').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg3').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg3').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg3').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg3').feature('mslc1').set('colortable', 'Dipole');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('data', 'parent');
model.result('pg3').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg3').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});
model.result('pg3').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg3').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg3').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg3').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg3').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg3').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg3').feature('strmsl1').set('titletype', 'none');
model.result('pg3').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg3').feature('strmsl1').set('udist', 0.02);
model.result('pg3').feature('strmsl1').set('maxlen', 0.4);
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('inheritcolor', false);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg3').feature('strmsl1').set('maxtime', Inf);
model.result('pg3').feature('strmsl1').set('data', 'parent');
model.result('pg3').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg3').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg3').feature('strmsl1').feature('col1').set('expr', 'V');
model.result('pg3').feature('strmsl1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg3').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg3').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg3').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Electric Field Norm (es)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 201, 0);
model.result('pg4').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');
model.result('pg4').feature.create('mslc1', 'Multislice');
model.result('pg4').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg4').feature('mslc1').set('solutionparams', 'parent');
model.result('pg4').feature('mslc1').set('expr', 'es.normE');
model.result('pg4').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg4').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg4').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg4').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg4').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg4').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg4').feature('mslc1').set('colortable', 'Prism');
model.result('pg4').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg4').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg4').feature('mslc1').set('data', 'parent');
model.result('pg4').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg4').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});
model.result('pg4').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg4').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg4').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg4').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg4').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg4').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg4').feature('strmsl1').set('titletype', 'none');
model.result('pg4').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg4').feature('strmsl1').set('udist', 0.02);
model.result('pg4').feature('strmsl1').set('maxlen', 0.4);
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('inheritcolor', false);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('data', 'parent');
model.result('pg4').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg4').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg4').feature('strmsl1').feature('col1').set('expr', 'es.normE');
model.result('pg4').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg4').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg4').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg4').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg4').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Velocity (spf)');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 201, 0);
model.result('pg5').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg5').feature.create('slc1', 'Slice');
model.result('pg5').feature('slc1').label('Slice');
model.result('pg5').feature('slc1').set('showsolutionparams', 'on');
model.result('pg5').feature('slc1').set('expr', 'spf.U');
model.result('pg5').feature('slc1').set('smooth', 'internal');
model.result('pg5').feature('slc1').set('showsolutionparams', 'on');
model.result('pg5').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([1 3 4 5 7 11 12 16 17]);
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Pressure (spf)');
model.result('pg6').set('data', 'surf1');
model.result('pg6').setIndex('looplevel', 201, 0);
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('data', 'surf1');
model.result('pg6').setIndex('looplevel', 201, 0);
model.result('pg6').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond2/pcond1/pg4');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').label('Surface');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('expr', 'p');
model.result('pg6').feature('surf1').set('colortable', 'Dipole');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result('pg6').feature('surf1').feature.create('tran1', 'Transparency');
model.result.numerical.create('gev3', 'EvalGlobal');
model.result.numerical('gev3').set('data', 'dset1');
model.result.numerical('gev3').set('expr', {'Q_in' 'Q_out'});
model.result.numerical('gev3').set('descr', {'Accumulated in flow' 'Accumulated out flow'});
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('expr', {'Q_in' 'Q_out'});
model.result('pg7').feature('glob1').set('descr', {'Accumulated in flow' 'Accumulated out flow'});
model.result('pg2').run;
model.result('pg7').run;
model.result('pg7').label('Accumulated Flow Volume vs. Time');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Flow Volume (ul)');
model.result('pg7').set('legendpos', 'upperleft');
model.result('pg7').run;
model.result('pg7').feature('glob1').setIndex('unit', 'ul', 0);
model.result('pg7').feature('glob1').setIndex('unit', 'ul', 1);
model.result('pg7').run;
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('Flow Rate vs. Time & Volume Conservation');
model.result('pg8').set('ylabel', 'Flow Rate (ml/s)');
model.result('pg8').run;
model.result('pg8').feature('glob1').setIndex('expr', 'int_in(w2)', 0);
model.result('pg8').feature('glob1').setIndex('unit', 'ml/s', 0);
model.result('pg8').feature('glob1').setIndex('descr', 'In flow', 0);
model.result('pg8').feature('glob1').setIndex('expr', 'int_out(-w2)', 1);
model.result('pg8').feature('glob1').setIndex('unit', 'ml/s', 1);
model.result('pg8').feature('glob1').setIndex('descr', 'Out flow', 1);
model.result('pg8').feature('glob1').setIndex('expr', 'int_in(w2)+int_out(w2)+int_mem(-w2)', 2);
model.result('pg8').feature('glob1').setIndex('unit', 'ml/s', 2);
model.result('pg8').feature('glob1').setIndex('descr', 'Volume conservation', 2);
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').run;
model.result('pg9').label('Velocity Field');
model.result('pg9').set('titletype', 'label');
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', 'log10(spf.U/1[mm/s])');
model.result('pg9').feature('surf1').create('sel1', 'Selection');
model.result('pg9').feature('surf1').feature('sel1').selection.named('box4');
model.result('pg9').run;
model.result('pg9').feature.duplicate('surf2', 'surf1');
model.result('pg9').run;
model.result('pg9').feature('surf2').set('expr', 'log10(solid.vel/1[mm/s])');
model.result('pg9').feature('surf2').set('inheritplot', 'surf1');
model.result('pg9').run;
model.result('pg9').create('arws1', 'ArrowSurface');
model.result('pg9').feature('arws1').set('expr', {'u2' 'v2' 'w2'});
model.result('pg9').feature('arws1').set('arrowlength', 'normalized');
model.result('pg9').feature('arws1').set('color', 'white');
model.result('pg9').feature('arws1').create('sel1', 'Selection');
model.result('pg9').feature('arws1').feature('sel1').selection.named('box4');
model.result('pg9').run;
model.result('pg9').feature.duplicate('arws2', 'arws1');
model.result('pg9').run;
model.result('pg9').feature('arws2').set('expr', {'ut' 'vt' 'wt'});
model.result('pg9').run;
model.result('pg9').run;
model.result('pg9').setIndex('looplevel', 181, 0);
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').run;
model.result('pg10').label('Fluid Streamlines');
model.result('pg10').create('str1', 'Streamline');
model.result('pg10').feature('str1').set('expr', {'u2' 'v2' 'w2'});
model.result('pg10').feature('str1').create('col1', 'Color');
model.result('pg10').run;
model.result('pg10').feature('str1').feature('col1').set('expr', 'log10(spf.U/1[mm/s])');
model.result('pg10').run;
model.result('pg10').feature('str1').selection.named('uni1');
model.result('pg10').feature('str1').set('linetype', 'ribbon');
model.result('pg10').feature('str1').set('pointtype', 'arrow');
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').setIndex('looplevel', 181, 0);
model.result('pg10').run;

model.title('A Piezoelectric Micropump');

model.description('This tutorial model is kindly provided by Riccardo Vietri, James Ransley, and Andrew Spann at Veryst Engineering, LLC. Piezoelectric micropumps are frequently used in medical applications because of their ability to precisely control the metering of very small volumes of fluids or gases. This example shows how to simulate a simple, nonresonant micropump, suitable for low flow rate applications. The model demonstrates the combination of piezoelectric materials with a fluid-structure interaction, and also illustrates the use of a simple velocity-dependent formula to account for the presence of valves on the inlet and outlet boundaries.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('piezoelectric_micropump.mph');

model.modelNode.label('Components');

out = model;
