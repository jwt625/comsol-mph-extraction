function out = model
%
% washing_machine_walk.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Machinery_and_Robotics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/mbd', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('m_w', '15[kg]', 'Mass of washer');
model.param.set('m_cl', '3[kg]', 'Mass of unbalanced clothes');
model.param.set('m_b', '2[kg]', 'Mass of balancing mass');
model.param.set('r_cl', '0.1[m]', 'Radial position of unbalanced clothes');
model.param.set('r_b', '0.15[m]', 'Radial position of balancing mass');
model.param.set('xcx_w', '0.3[m]', 'CG of washer, x-coordinate');
model.param.set('xcy_w', '0.45[m]', 'CG of washer, y-coordinate');
model.param.set('xcz_w', '0.4[m]', 'CG of washer, z-coordinate');
model.param.set('xcx_d', '0.3[m]', 'CG of drum, x-coordinate');
model.param.set('xcy_d', '0.2[m]', 'CG of drum, y-coordinate');
model.param.set('xcz_d', '0.45[m]', 'CG of drum, z-coordinate');
model.param.set('mu', '0.2', 'Coefficient of friction');
model.param.set('phi0', '(pi/4)[rad]', 'Initial angular position of balancing mass');
model.param.set('omegaC_max', '(pi/2)[rad/s]', 'Maximum correction angular velocity');
model.param.set('k_s', '1e7', 'Stiffness of supports');
model.param.set('c_s', '1e6', 'Damping coefficient of supports');
model.param.set('i_c', '0', 'Active control state');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'washing_machine_walk.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('createpairs', false);
model.geom('geom1').run('fin');

model.physics('mbd').create('rd1', 'RigidDomain', 3);
model.physics('mbd').feature('rd1').label('Rigid Material: Washer');
model.physics('mbd').feature('rd1').selection.set([1 2 3 7 8]);
model.physics('mbd').feature('rd1').set('rho_mat', 'userdef');
model.physics('mbd').feature('rd1').create('mmi1', 'MassInertia', -1);
model.physics('mbd').feature('rd1').feature('mmi1').set('CenterOfMassType', 'userDefined');
model.physics('mbd').feature('rd1').feature('mmi1').set('xm', {'xcx_w' 'xcy_w' 'xcz_w'});
model.physics('mbd').feature('rd1').feature('mmi1').set('mt', 'm_w');
model.physics('mbd').feature('rd1').create('af1', 'AppliedForce', -1);
model.physics('mbd').feature('rd1').feature('af1').set('PointOfApplicationType', 'userDefined[RD]');
model.physics('mbd').feature('rd1').feature('af1').set('Xpa', {'xcx_w' 'xcy_w' 'xcz_w'});
model.physics('mbd').feature('rd1').feature('af1').set('Ft', {'0' '0' '-m_w*g_const'});
model.physics('mbd').feature.duplicate('rd2', 'rd1');
model.physics('mbd').feature('rd2').label('Rigid Material: Drum');
model.physics('mbd').feature('rd2').selection.set([4]);
model.physics('mbd').feature('rd2').feature('mmi1').set('xm', {'xcx_d' 'xcy_d' 'xcz_d+r_cl'});
model.physics('mbd').feature('rd2').feature('mmi1').set('mt', 'm_cl');
model.physics('mbd').feature('rd2').feature('af1').set('Xpa', {'xcx_d' 'xcy_d' 'xcz_d+r_cl'});
model.physics('mbd').feature('rd2').feature('af1').set('Ft', {'0' '0' '-m_cl*g_const'});
model.physics('mbd').feature.duplicate('rd3', 'rd2');
model.physics('mbd').feature('rd3').label('Rigid Material: Balancing mass');
model.physics('mbd').feature('rd3').selection.set([6]);
model.physics('mbd').feature('rd3').feature('mmi1').set('xm', {'xcx_d+r_b*cos(phi0)' 'xcy_d' 'xcz_d-r_b*sin(phi0)'});
model.physics('mbd').feature('rd3').feature('mmi1').set('mt', 'm_b');
model.physics('mbd').feature('rd3').feature('af1').set('Xpa', {'xcx_d+r_b*cos(phi0)' 'xcy_d' 'xcz_d-r_b*sin(phi0)'});
model.physics('mbd').feature('rd3').feature('af1').set('Ft', {'0' '0' '-m_b*g_const'});
model.physics('mbd').create('rd4', 'RigidDomain', 3);
model.physics('mbd').feature('rd4').label('Rigid Material: Slot');
model.physics('mbd').feature('rd4').selection.set([5]);
model.physics('mbd').feature('rd4').set('rho_mat', 'userdef');
model.physics('mbd').create('plj1', 'PlanarJoint', -1);
model.physics('mbd').feature('plj1').label('Planar Joint: Support 1');
model.physics('mbd').feature('plj1').set('Source', 'fixed');
model.physics('mbd').feature('plj1').set('Destination', 'rd1');
model.physics('mbd').feature('plj1').set('e', [0 0 1]);
model.physics('mbd').feature('plj1').set('JointElasticity', 'ElasticJoint');
model.physics('mbd').feature('plj1').set('JointForcesAndMoments', 'ComputedUsingWeakConstraints');
model.physics('mbd').feature('plj1').feature('cjb1').selection.set([18]);
model.physics('mbd').feature('plj1').feature('je1').set('k_u', {'k_s' '0' '0' '0' 'k_s' '0' '0' '0' 'k_s'});
model.physics('mbd').feature('plj1').feature('je1').set('k_th', {'k_s' '0' '0' '0' 'k_s' '0' '0' '0' 'k_s'});
model.physics('mbd').feature('plj1').feature('je1').set('c_u', {'c_s' '0' '0' '0' 'c_s' '0' '0' '0' 'c_s'});
model.physics('mbd').feature('plj1').feature('je1').set('c_th', {'c_s' '0' '0' '0' 'c_s' '0' '0' '0' 'c_s'});
model.physics('mbd').feature('plj1').create('fric1', 'Friction', -1);
model.physics('mbd').feature('plj1').feature('fric1').set('mu', 'mu');
model.physics('mbd').feature.duplicate('plj2', 'plj1');
model.physics('mbd').feature('plj2').label('Planar Joint: Support 2');
model.physics('mbd').feature('plj2').feature('cjb1').selection.set([52]);
model.physics('mbd').feature.duplicate('plj3', 'plj2');
model.physics('mbd').feature('plj3').label('Planar Joint: Support 3');
model.physics('mbd').feature('plj3').feature('cjb1').selection.set([58]);
model.physics('mbd').feature.duplicate('plj4', 'plj3');
model.physics('mbd').feature('plj4').label('Planar Joint: Support 4');
model.physics('mbd').feature('plj4').feature('cjb1').selection.set([24]);
model.physics('mbd').create('hgj1', 'HingeJoint', -1);
model.physics('mbd').feature('hgj1').label('Hinge Joint: Washer-drum');
model.physics('mbd').feature('hgj1').set('Source', 'rd1');
model.physics('mbd').feature('hgj1').set('Destination', 'rd2');
model.physics('mbd').feature('hgj1').set('e', [0 1 0]);
model.physics('mbd').feature('hgj1').feature('cjb1').selection.set([34]);
model.physics('mbd').feature.duplicate('hgj2', 'hgj1');
model.physics('mbd').feature('hgj2').label('Hinge Joint: Drum-slot');
model.physics('mbd').feature('hgj2').set('Source', 'rd2');
model.physics('mbd').feature('hgj2').set('Destination', 'rd4');
model.physics('mbd').create('prj1', 'PrismaticJoint', -1);
model.physics('mbd').feature('prj1').label('Prismatic Joint: Slot-balancing mass');
model.physics('mbd').feature('prj1').set('Source', 'rd4');
model.physics('mbd').feature('prj1').set('Destination', 'rd3');
model.physics('mbd').feature('prj1').set('AxisOfJointType', 'SelectEdge');
model.physics('mbd').feature('prj1').feature('cjb1').selection.set([34]);
model.physics('mbd').feature('prj1').feature('ja1').selection.set([86]);
model.physics('mbd').feature('prj1').create('pm1', 'PrescribedMotion', -1);

model.nodeGroup.create('grp1', 'Physics', 'mbd');
model.nodeGroup('grp1').placeAfter('init1');
model.nodeGroup('grp1').add('rd1');
model.nodeGroup('grp1').add('rd2');
model.nodeGroup('grp1').add('rd3');
model.nodeGroup('grp1').add('rd4');
model.nodeGroup('grp1').label('Rigid Materials');
model.nodeGroup.create('grp2', 'Physics', 'mbd');
model.nodeGroup('grp2').placeAfter('init1');
model.nodeGroup('grp2').add('plj1');
model.nodeGroup('grp2').add('plj2');
model.nodeGroup('grp2').add('plj3');
model.nodeGroup('grp2').add('plj4');
model.nodeGroup('grp2').label('Planar Joints');
model.nodeGroup.create('grp3', 'Physics', 'mbd');
model.nodeGroup('grp3').placeAfter('init1');
model.nodeGroup('grp3').add('hgj1');
model.nodeGroup('grp3').add('hgj2');
model.nodeGroup('grp3').label('Hinge Joints');

model.func.create('step1', 'Step');
model.func('step1').set('funcname', 'step_act');
model.func('step1').set('location', '7[s]');
model.func('step1').set('smooth', 0.5);
model.func.duplicate('step2', 'step1');
model.func('step2').set('funcname', 'step_deact');
model.func('step2').set('location', '5[deg]');
model.func('step2').set('smooth', '10[deg]');

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('omega', '(pi/2)[rad/s^2]*t', 'Drum angular velocity');
model.variable('var1').set('Fxl', 'm_b*r_b*omega^2*cos(phi0+mbd.hgj2.th)', 'Total imbalance, xl component');
model.variable('var1').set('Fzl', 'm_cl*r_cl*omega^2-m_b*r_b*omega^2*sin(phi0+mbd.hgj2.th)', 'Total imbalance, zl component');
model.variable('var1').set('F_tot', 'sqrt(Fxl^2+Fzl^2)', 'Total imbalance');
model.variable('var1').set('th', 'atan2(Fzl,Fxl)+phi0+mbd.hgj2.th', 'Angle between total imbalance and balancing mass');
model.variable('var1').set('d_th', 'atan2(F_tot*sin(th),(m_b*r_b*omega^2-F_tot*cos(th)))', 'Correction angle');
model.variable('var1').set('omegaC', 'step_act(t)*nojac(step_deact(abs(d_th))*sign(d_th))*omegaC_max', 'Correction angular velocity');
model.variable('var1').set('Fx', 'Fxl*cos(mbd.hgj1.th)+Fzl*sin(mbd.hgj1.th)', 'Total imbalance, x-component');
model.variable('var1').set('Fz', '-Fxl*sin(mbd.hgj1.th)+Fzl*cos(mbd.hgj1.th)', 'Total imbalance, z-component');
model.variable('var1').set('Msl1', 'abs(mu*mbd.plj1.Fz)-sqrt(mbd.plj1.Fx^2+mbd.plj1.Fy^2)', 'Slip margin, support 1');
model.variable('var1').set('Msl2', 'abs(mu*mbd.plj2.Fz)-sqrt(mbd.plj2.Fx^2+mbd.plj2.Fy^2)', 'Slip margin, support 2');
model.variable('var1').set('Msl3', 'abs(mu*mbd.plj3.Fz)-sqrt(mbd.plj3.Fx^2+mbd.plj3.Fy^2)', 'Slip margin, support 3');
model.variable('var1').set('Msl4', 'abs(mu*mbd.plj4.Fz)-sqrt(mbd.plj4.Fx^2+mbd.plj4.Fy^2)', 'Slip margin, support 4');
model.variable('var1').set('Msl_tot', 'Msl1+Msl2+Msl3+Msl4', 'Total slip margin');
model.variable('var1').set('rpm', 'omega*60[s]/(2*pi[rad])', 'Drum angular velocity (rpm)');
model.variable('var1').set('rpmC', 'omegaC*60[s]/(2*pi[rad])', 'Correction angular velocity (rpm)');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').selection.geom('geom1', 2);
model.variable('var2').selection.set([18]);
model.variable('var2').set('Fsx', 'mbd.plj1.Fx');
model.variable('var2').descr('Fsx', 'Friction force, x-component');
model.variable('var2').set('Fsy', 'mbd.plj1.Fy');
model.variable('var2').descr('Fsy', 'Friction force, y-component');
model.variable.create('var3');
model.variable('var3').model('comp1');
model.variable('var3').selection.geom('geom1', 2);
model.variable('var3').selection.set([52]);
model.variable('var3').set('Fsx', 'mbd.plj2.Fx', 'Friction force, x-component');
model.variable('var3').descr('Fsx', 'Friction force, x-component');
model.variable('var3').set('Fsy', 'mbd.plj2.Fy', 'Friction force, y-component');
model.variable('var3').descr('Fsy', 'Friction force, y-component');
model.variable.create('var4');
model.variable('var4').model('comp1');
model.variable('var4').selection.geom('geom1', 2);
model.variable('var4').selection.set([58]);
model.variable('var4').set('Fsx', 'mbd.plj3.Fx', 'Friction force, x-component');
model.variable('var4').descr('Fsx', 'Friction force, x-component');
model.variable('var4').set('Fsy', 'mbd.plj3.Fy', 'Friction force, y-component');
model.variable('var4').descr('Fsy', 'Friction force, y-component');
model.variable.create('var5');
model.variable('var5').model('comp1');
model.variable('var5').selection.geom('geom1', 2);
model.variable('var5').selection.set([24]);
model.variable('var5').set('Fsx', 'mbd.plj4.Fx', 'Friction force, x-component');
model.variable('var5').descr('Fsx', 'Friction force, x-component');
model.variable('var5').set('Fsy', 'mbd.plj4.Fy', 'Friction force, y-component');
model.variable('var5').descr('Fsy', 'Friction force, y-component');

model.physics('mbd').feature('hgj1').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('hgj1').feature('pm1').set('PrescribedMotionThroughRotational', 'AngularVelocity');
model.physics('mbd').feature('hgj1').feature('pm1').set('omegap', 'omega');
model.physics('mbd').feature('hgj2').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('hgj2').feature('pm1').set('PrescribedMotionThroughRotational', 'AngularVelocity');
model.physics('mbd').feature('hgj2').feature('pm1').set('omegap', 'i_c*omegaC');

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'm_w', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'kg', 0);
model.study('std1').feature('param').setIndex('pname', 'm_w', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'kg', 0);
model.study('std1').feature('param').setIndex('pname', 'i_c', 0);
model.study('std1').feature('param').setIndex('plistarr', '0 1', 0);
model.study('std1').feature('time').set('tlist', 'range(0,0.01,9)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj1_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj3_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj2_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj4_RF').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj1_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj4_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj2_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj3_RM').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*1.1902940813093212');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj1_RF').set('scaleval', '1e8*(0.1*1.1902940813093212)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.011902940813093213');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj3_RF').set('scaleval', '1e8*(0.1*1.1902940813093212)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj2_RF').set('scaleval', '1e8*(0.1*1.1902940813093212)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj4_RF').set('scaleval', '1e8*(0.1*1.1902940813093212)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scaleval', '0.011902940813093213');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj1_RM').set('scaleval', '1e8*(0.1*1.1902940813093212)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj4_RM').set('scaleval', '1e8*(0.1*1.1902940813093212)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj2_RM').set('scaleval', '1e8*(0.1*1.1902940813093212)^3');
model.sol('sol1').feature('v1').feature('comp1_mbd_plj3_RM').set('scaleval', '1e8*(0.1*1.1902940813093212)^3');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.01,9)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'i_c'});
model.batch('p1').set('plistarr', {'0 1'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Displacement (mbd)');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 901, 0);
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 901, 0);
model.result('pg1').setIndex('looplevel', 2, 1);
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (mbd)');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 901, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 901, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').set('defaultPlotID', 'velocity');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').label('Volume');
model.result('pg2').feature('vol1').set('expr', 'mod(dom,10)');
model.result('pg2').feature('vol1').set('unit', '1');
model.result('pg2').feature('vol1').set('colortable', 'Cyclic');
model.result('pg2').feature('vol1').set('colorlegend', false);
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg2').feature('vol1').feature.create('def1', 'Deform');
model.result('pg2').feature('vol1').feature('def1').label('Deformation');
model.result('pg2').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg2').feature.create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').label('Arrow Line');
model.result('pg2').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY' 'mbd.u_tZ'});
model.result('pg2').feature('arwl1').set('placement', 'elements');
model.result('pg2').feature('arwl1').set('data', 'parent');
model.result('pg2').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg2').feature('arwl1').feature('def1').label('Deformation');
model.result('pg2').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg1').run;
model.result.dataset.duplicate('dset3', 'dset2');
model.result.dataset('dset3').selection.geom('geom1', 3);
model.result.dataset('dset3').selection.geom('geom1', 3);
model.result.dataset('dset3').selection.set([1]);
model.result.dataset.duplicate('dset4', 'dset2');
model.result.dataset('dset4').selection.geom('geom1', 3);
model.result.dataset('dset4').selection.geom('geom1', 3);
model.result.dataset('dset4').selection.set([1 2 3 4 5 6 7 8]);
model.result.dataset('dset4').selection.geom('geom1', 3);
model.result.dataset('dset4').selection.set([2 3 4 5 6 7 8]);
model.result.dataset('dset4').selection.inherit(false);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('Washer Displacement');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 1, 1);
model.result('pg3').setIndex('looplevel', 891, 0);
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('colortable', 'SpectrumLight');
model.result('pg3').feature('vol1').create('def1', 'Deform');
model.result('pg3').run;
model.result('pg3').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg3').feature('vol1').feature('def1').set('scale', 100);
model.result('pg3').run;
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Friction Force');
model.result('pg4').set('data', 'dset4');
model.result('pg4').run;
model.result('pg4').feature('vol1').feature('def1').set('scale', 1);
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').create('arws1', 'ArrowSurface');
model.result('pg4').feature('arws1').set('expr', {'Fsx' 'Fsy' '0'});
model.result('pg4').feature('arws1').set('scaleactive', true);
model.result('pg4').feature('arws1').set('scale', 0.04);
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Total Imbalance (Local)');
model.result('pg5').set('data', 'dset2');
model.result('pg5').set('titletype', 'none');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Total imbalance (N)');
model.result('pg5').set('legendpos', 'upperleft');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').set('expr', {'Fxl'});
model.result('pg5').feature('glob1').set('descr', {'Total imbalance, xl component'});
model.result('pg5').feature('glob1').set('unit', {'N'});
model.result('pg5').feature('glob1').set('expr', {'Fxl' 'Fzl'});
model.result('pg5').feature('glob1').set('descr', {'Total imbalance, xl component' 'Total imbalance, zl component'});
model.result('pg5').feature('glob1').set('linestyle', 'cycle');
model.result('pg5').feature('glob1').set('linewidth', 2);
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Total Imbalance');
model.result('pg6').run;
model.result('pg6').feature('glob1').set('expr', {'Fx'});
model.result('pg6').feature('glob1').set('descr', {'Total imbalance, x-component'});
model.result('pg6').feature('glob1').set('unit', {'N'});
model.result('pg6').feature('glob1').set('expr', {'Fx' 'Fz'});
model.result('pg6').feature('glob1').set('descr', {'Total imbalance, x-component' 'Total imbalance, z-component'});
model.result('pg6').run;
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Slip Margin');
model.result('pg7').setIndex('looplevelinput', 'first', 1);
model.result('pg7').set('ylabel', 'Slip margin (N)');
model.result('pg7').set('legendpos', 'lowerleft');
model.result('pg7').run;
model.result('pg7').feature('glob1').set('expr', {'Msl1'});
model.result('pg7').feature('glob1').set('descr', {'Slip margin, support 1'});
model.result('pg7').feature('glob1').set('unit', {'N'});
model.result('pg7').feature('glob1').set('expr', {'Msl1' 'Msl3'});
model.result('pg7').feature('glob1').set('descr', {'Slip margin, support 1' 'Slip margin, support 3'});
model.result('pg7').run;
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('Total Slip Margin');
model.result('pg8').setIndex('looplevelinput', 'all', 1);
model.result('pg8').set('ylabelactive', false);
model.result('pg8').run;
model.result('pg8').feature('glob1').set('expr', {'Msl_tot'});
model.result('pg8').feature('glob1').set('descr', {'Total slip margin'});
model.result('pg8').feature('glob1').set('unit', {'N'});
model.result('pg8').feature('glob1').set('autodescr', false);
model.result('pg8').run;
model.result('pg8').run;
model.result.duplicate('pg9', 'pg8');
model.result('pg9').run;
model.result('pg9').label('Washer Rotation');
model.result('pg9').set('legendpos', 'upperleft');
model.result('pg9').run;
model.result('pg9').feature('glob1').set('expr', {'mbd.rd1.thz'});
model.result('pg9').feature('glob1').set('descr', {'Rigid body rotation, z-component'});
model.result('pg9').feature('glob1').set('unit', {'rad'});
model.result('pg9').feature('glob1').setIndex('unit', 'deg', 0);
model.result('pg9').feature('glob1').setIndex('descr', 'Rigid body rotation, z-component', 0);
model.result('pg9').run;
model.result('pg9').run;
model.result.duplicate('pg10', 'pg9');
model.result('pg10').run;
model.result('pg10').label('Angular Velocity');
model.result('pg10').setIndex('looplevelinput', 'last', 1);
model.result('pg10').set('ylabelactive', true);
model.result('pg10').set('ylabel', 'Angular velocity (rpm)');
model.result('pg10').run;
model.result('pg10').feature('glob1').setIndex('expr', 'rpm', 0);
model.result('pg10').feature('glob1').setIndex('unit', 1, 0);
model.result('pg10').feature('glob1').setIndex('descr', 'Drum angular velocity (rpm)', 0);
model.result('pg10').feature('glob1').setIndex('expr', 'rpmC', 1);
model.result('pg10').feature('glob1').setIndex('unit', 1, 1);
model.result('pg10').feature('glob1').setIndex('descr', 'Correction angular velocity (rpm)', 1);
model.result('pg10').feature('glob1').set('autodescr', true);
model.result('pg10').run;
model.result('pg10').run;
model.result.duplicate('pg11', 'pg10');
model.result('pg11').run;
model.result('pg11').label('Correction Angle');
model.result('pg11').set('ylabelactive', false);
model.result('pg11').run;
model.result('pg11').feature('glob1').set('expr', {'d_th'});
model.result('pg11').feature('glob1').set('descr', {'Correction angle'});
model.result('pg11').feature('glob1').set('unit', {'1'});
model.result('pg11').feature('glob1').setIndex('unit', 'deg', 0);
model.result('pg11').feature('glob1').setIndex('descr', 'Correction angle', 0);
model.result('pg11').feature('glob1').set('legend', false);
model.result('pg11').run;
model.result('pg3').run;

model.title('Walking Instability in a Washing Machine');

model.description('This example simulates a simplified model of a horizontal-axis portable washing machine and predicts the onset of walking instability during the spinning cycle. Rotational slip of the machine, which is a critical design concern, is analyzed and a control-based active balancing method is also described to eliminate the instability and vibrations present in the system.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('washing_machine_walk.mph');

model.modelNode.label('Components');

out = model;
