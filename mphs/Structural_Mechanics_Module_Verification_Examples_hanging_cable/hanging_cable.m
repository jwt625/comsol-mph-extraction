function out = model
%
% hanging_cable.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('wire', 'Wire', 'geom1');
model.physics('wire').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/wire', true);

model.param.set('L_cable', '5.4[m]');
model.param.descr('L_cable', 'Cable length');
model.param.set('D_cable', '5[mm]');
model.param.descr('D_cable', 'Cable diameter');
model.param.set('A_cable', 'pi/4*D_cable^2');
model.param.descr('A_cable', 'Cable cross section area');
model.param.set('u_support', '0.2[m]');
model.param.descr('u_support', 'End point displacement');
model.param.set('d_support', 'L_cable - 2*u_support');
model.param.descr('d_support', 'Support distance');
model.param.set('m_lamp', '0.5[kg]');
model.param.descr('m_lamp', 'Lamp mass');
model.param.set('D_lamp', '400[mm]');
model.param.descr('D_lamp', 'Lamp diameter');
model.param.set('E', '2.0e11[Pa]');
model.param.descr('E', 'Young''s modulus');
model.param.set('rho', '7850[kg/m^3]');
model.param.descr('rho', 'Density');
model.param.set('q_dyn', '(1.225[kg/m^3]/2)*(15[m/s])^2');
model.param.descr('q_dyn', 'Dynamic pressure');

model.group.create('lg1', 'LoadGroup');
model.group('lg1').label('Lamp Weight');
model.group('lg1').paramName('lgLamp');
model.group.create('lg2', 'LoadGroup');
model.group('lg2').label('Wind Load');
model.group('lg2').paramName('lgWind');

model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'table');
model.geom('geom1').feature('pol1').setIndex('table', '-L_cable/2', 0, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 2);
model.geom('geom1').feature('pol1').setIndex('table', 'L_cable/2', 1, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 2);
model.geom('geom1').run('pol1');
model.geom('geom1').create('pare1', 'PartitionEdges');
model.geom('geom1').feature('pare1').selection('edge').set('pol1', 1);
model.geom('geom1').feature('pare1').setIndex('param', 0.3, 0);
model.geom('geom1').feature('pare1').setIndex('param', 0.8, 1);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('ElasticWire', 'Elastic_wire');
model.material('mat1').propertyGroup('ElasticWire').set('k_A', {'A_cable*E'});
model.material('mat1').propertyGroup('ElasticWire').set('rho_L', {'rho*A_cable'});

model.physics('wire').feature('elw1').set('ecl', '-5e-3');
model.physics('wire').feature('elw1').set('area', 'A_cable');
model.physics('wire').create('disp1', 'Displacement0', 0);
model.physics('wire').feature('disp1').selection.set([1 4]);
model.physics('wire').feature('disp1').setIndex('Direction', 'prescribed', 0);
model.physics('wire').feature('disp1').setIndex('U0', '-sign(X)*u_support', 0);
model.physics('wire').feature('disp1').setIndex('Direction', 'prescribed', 1);
model.physics('wire').feature('disp1').setIndex('Direction', 'prescribed', 2);
model.physics('wire').create('gacc1', 'GravityAcceleration', -1);
model.physics('wire').create('el1', 'EdgeLoad', 1);
model.physics('wire').feature('el1').label('Edge Load: Wind on Cable');
model.physics('wire').feature('el1').selection.all;
model.physics('wire').feature('el1').set('LoadType', 'TotalForce');
model.physics('wire').feature('el1').set('FeTot', {'0' '1.1*q_dyn*(L_cable*D_cable)' '0'});
model.physics('wire').feature('el1').set('loadGroup', 'lg2');
model.physics('wire').create('pl1', 'PointLoad', 0);
model.physics('wire').feature('pl1').label('Point Load: Wind on Lamps');
model.physics('wire').feature('pl1').selection.set([2 3]);
model.physics('wire').feature('pl1').set('Fp', {'0' '0.45*q_dyn*pi*(D_lamp/2)^2' '0'});
model.physics('wire').feature('pl1').set('loadGroup', 'lg2');
model.physics('wire').create('pm1', 'PointMass', 0);
model.physics('wire').feature('pm1').label('Point Mass: Lamps');
model.physics('wire').feature('pm1').selection.set([2 3]);
model.physics('wire').feature('pm1').set('pointmass', 'if(group.lgLamp, group.lgLamp*m_lamp, 0)');
model.physics('wire').feature('init1').set('u', {'0' '0' '(-L_cable/2 + X)*(L_cable/2 + X)*(2/L_cable^2)*sqrt(L_cable^2 - d_support^2)'});

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.all;
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'L_cable/60');
model.mesh('mesh1').feature('size').set('hmin', 'L_cable/60');
model.mesh('mesh1').run;

model.func.create('an1', 'Analytic');
model.func('an1').set('funcname', 'y_catenary');
model.func('an1').set('expr', 'a*(cosh(X/a) - cosh(0.5*d_support/a))');
model.func('an1').set('args', 'X, a, d_support');
model.func('an1').set('fununit', 'm');
model.func('an1').setIndex('argunit', 'm', 0);
model.func('an1').setIndex('argunit', 'm', 1);
model.func('an1').setIndex('argunit', 'm', 2);

model.modelNode.create('comp2', true);

model.physics.create('ge', 'GlobalEquations');
model.physics('ge').model('comp2');

model.study('std1').feature('stat').setSolveFor('/physics/ge', true);

model.physics('ge').prop('EquationForm').set('form', 'Automatic');
model.physics('ge').feature('ge1').setIndex('name', 'a', 0, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'L_cable - 2*a*sinh(d_support/(2*a))', 0, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 3, 0, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 0, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Catenary parameter', 0, 0);
model.physics('ge').feature('ge1').set('DependentVariableQuantity', 'length');
model.physics('ge').feature('ge1').set('SourceTermQuantity', 'length');

model.study('std1').feature('stat').set('useloadcase', true);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 3', 2);
model.study('std1').feature('stat').setIndex('loadgroup', false, 2, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 2, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 2, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 2, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 3', 2);
model.study('std1').feature('stat').setIndex('loadgroup', false, 2, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 2, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 2, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 2, 1);
model.study('std1').feature('stat').setIndex('loadcase', 'Self-weight only', 0);
model.study('std1').feature('stat').setIndex('loadcase', 'With lamps', 1);
model.study('std1').feature('stat').setIndex('loadgroup', true, 1, 0);
model.study('std1').feature('stat').setIndex('loadcase', 'With lamps and wind', 2);
model.study('std1').feature('stat').setIndex('loadgroup', true, 2, 0);
model.study('std1').feature('stat').setIndex('loadgroup', true, 2, 1);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s1').set('stol', '1e-6');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 250);
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 3, 0);
model.result('pg1').set('defaultPlotID', 'axialForce');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('line1', 'Line');
model.result('pg1').feature('line1').set('expr', {'wire.Nxl'});
model.result('pg1').feature('line1').set('threshold', 'manual');
model.result('pg1').feature('line1').set('thresholdvalue', 0.2);
model.result('pg1').feature('line1').set('colortable', 'Rainbow');
model.result('pg1').feature('line1').set('colortabletrans', 'none');
model.result('pg1').feature('line1').set('colorscalemode', 'linear');
model.result('pg1').label('Force (wire)');
model.result('pg1').feature('line1').set('colortable', 'Wave');
model.result('pg1').feature('line1').set('linetype', 'tube');
model.result('pg1').feature('line1').set('radiusexpr', 'wire.re');
model.result('pg1').feature('line1').set('resolution', 'extrafine');
model.result('pg1').feature('line1').set('smooth', 'internal');
model.result('pg1').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg1').feature('line1').set('tuberadiusscale', 1);
model.result('pg1').feature('line1').set('tubeendcaps', false);
model.result('pg1').feature('line1').create('def', 'Deform');
model.result('pg1').feature('line1').feature('def').set('scaleactive', true);
model.result('pg1').feature('line1').feature('def').set('scale', '1');
model.result('pg1').feature('line1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('line1').feature('def').set('descr', 'Displacement field');
model.result('pg1').feature('line1').set('colorscalemode', 'linearsymmetric');
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').set('data', 'dset1');
model.result.numerical('gev1').set('expr', {'comp2.a'});
model.result.numerical('gev1').set('descr', {'Catenary parameter'});
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('line1').set('tuberadiusscale', 10);
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Cable Deflection');
model.result('pg2').set('titletype', 'label');
model.result('pg2').set('xlabelactive', true);
model.result('pg2').set('xlabel', 'Current horizontal position (m)');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Displacement (m)');
model.result('pg2').set('legendpos', 'uppermiddle');
model.result('pg2').create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg2').feature('lngr1').set('linewidth', 'preference');
model.result('pg2').feature('lngr1').selection.all;
model.result('pg2').feature('lngr1').set('expr', 'w');
model.result('pg2').feature('lngr1').set('xdata', 'expr');
model.result('pg2').feature('lngr1').set('xdataexpr', 'X+u');
model.result('pg2').feature('lngr1').set('legend', true);
model.result('pg2').feature('lngr1').set('legendmethod', 'manual');
model.result('pg2').feature('lngr1').setIndex('legends', 'Self-weight only', 0);
model.result('pg2').feature('lngr1').setIndex('legends', 'With lamps', 1);
model.result('pg2').feature('lngr1').setIndex('legends', 'With lamps and wind (vertical)', 2);
model.result('pg2').feature('lngr1').set('linestyle', 'cycle');
model.result('pg2').feature('lngr1').set('linewidth', 2);
model.result('pg2').feature('lngr1').create('gmrk1', 'GraphMarker');
model.result('pg2').feature('lngr1').feature('gmrk1').set('linewidth', 'preference');
model.result('pg2').run;
model.result('pg2').feature('lngr1').feature('gmrk1').set('display', 'min');
model.result('pg2').feature('lngr1').feature('gmrk1').set('precision', 3);
model.result('pg2').feature('lngr1').feature('gmrk1').set('anchorpoint', 'lowermiddle');
model.result('pg2').run;
model.result('pg2').feature.duplicate('lngr2', 'lngr1');
model.result('pg2').run;
model.result('pg2').feature('lngr2').set('data', 'dset1');
model.result('pg2').feature('lngr2').setIndex('looplevelinput', 'last', 0);
model.result('pg2').feature('lngr2').set('expr', '-sqrt(v^2+w^2)');
model.result('pg2').feature('lngr2').setIndex('legends', 'With lamps and wind (total)', 0);
model.result('pg2').feature('lngr2').setIndex('legends', '', 1);
model.result('pg2').feature('lngr2').setIndex('legends', '', 2);
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Force');
model.result('pg3').set('titletype', 'label');
model.result('pg3').set('xlabelactive', true);
model.result('pg3').set('xlabel', 'Current horizontal position (m)');
model.result('pg3').set('legendpos', 'uppermiddle');
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg3').feature('lngr1').set('linewidth', 'preference');
model.result('pg3').feature('lngr1').selection.all;
model.result('pg3').feature('lngr1').set('expr', 'wire.Nxl');
model.result('pg3').feature('lngr1').set('xdata', 'expr');
model.result('pg3').feature('lngr1').set('xdataexpr', 'X+u');
model.result('pg3').feature('lngr1').set('linestyle', 'cycle');
model.result('pg3').feature('lngr1').set('linewidth', 2);
model.result('pg3').feature('lngr1').set('legend', true);
model.result('pg3').feature('lngr1').set('resolution', 'norefine');
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Analytic vs. Computed Solution');
model.result('pg4').set('titletype', 'label');
model.result('pg4').set('xlabelactive', true);
model.result('pg4').set('xlabel', 'Horizontal position (m)');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'Displacement (m)');
model.result('pg4').setIndex('looplevelinput', 'first', 0);
model.result('pg4').set('legendpos', 'lowerright');
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg4').feature('lngr1').set('linewidth', 'preference');
model.result('pg4').feature('lngr1').selection.all;
model.result('pg4').feature('lngr1').set('expr', 'y_catenary(X, comp2.a, d_support)');
model.result('pg4').feature('lngr1').set('xdata', 'expr');
model.result('pg4').feature('lngr1').set('xdataexpr', 'X');
model.result('pg4').feature('lngr1').set('linewidth', 2);
model.result('pg4').feature('lngr1').set('linemarker', 'cycle');
model.result('pg4').feature('lngr1').set('markerpos', 'interp');
model.result('pg4').feature('lngr1').set('legend', true);
model.result('pg4').feature('lngr1').set('legendmethod', 'manual');
model.result('pg4').feature('lngr1').setIndex('legends', 'Analytic', 0);
model.result('pg4').feature.duplicate('lngr2', 'lngr1');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').feature('lngr1').create('gmrk1', 'GraphMarker');
model.result('pg4').feature('lngr1').feature('gmrk1').set('linewidth', 'preference');
model.result('pg4').run;
model.result('pg4').feature('lngr1').feature('gmrk1').set('display', 'min');
model.result('pg4').feature('lngr1').feature('gmrk1').set('precision', 3);
model.result('pg4').feature('lngr1').feature('gmrk1').set('anchorpoint', 'lowermiddle');
model.result('pg4').run;
model.result('pg4').feature('lngr2').set('expr', 'w');
model.result('pg4').feature('lngr2').set('xdataexpr', 'X+u');
model.result('pg4').feature('lngr2').setIndex('legends', 'Computed', 0);
model.result('pg4').run;
model.result('pg1').run;
model.result.duplicate('pg5', 'pg1');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 3, 0);
model.result('pg6').set('defaultPlotID', 'pointLoads');
model.result('pg6').label('Point Loads (wire)');
model.result('pg6').set('showlegends', true);
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').create('arpt1', 'ArrowPoint');
model.result('pg6').feature('arpt1').set('expr', {'wire.pl1.F_Px' 'wire.pl1.F_Py' 'wire.pl1.F_Pz'});
model.result('pg6').feature('arpt1').set('arrowbase', 'tail');
model.result('pg6').feature('arpt1').label('Point Load: Wind on Lamps');
model.result('pg6').feature('arpt1').set('inheritplot', 'none');
model.result('pg6').feature('arpt1').create('col', 'Color');
model.result('pg6').feature('arpt1').feature('col').set('colortable', 'Rainbow');
model.result('pg6').feature('arpt1').feature('col').set('colortabletrans', 'none');
model.result('pg6').feature('arpt1').feature('col').set('colorscalemode', 'linear');
model.result('pg6').feature('arpt1').feature('col').set('colordata', 'arrowlength');
model.result('pg6').feature('arpt1').feature('col').set('coloring', 'gradient');
model.result('pg6').feature('arpt1').feature('col').set('topcolor', 'red');
model.result('pg6').feature('arpt1').feature('col').set('bottomcolor', 'custom');
model.result('pg6').feature('arpt1').feature('col').set('custombottomcolor', [0.5882353186607361 0.5137255191802979 0.5176470875740051]);
model.result('pg6').feature('arpt1').set('color', 'blue');
model.result('pg6').feature('arpt1').create('def', 'Deform');
model.result('pg6').feature('arpt1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg6').feature('arpt1').feature('def').set('descr', 'Displacement field');
model.result('pg6').feature('arpt1').feature('def').set('scaleactive', true);
model.result('pg6').feature('arpt1').feature('def').set('scale', 1);
model.result('pg6').create('arpt2', 'ArrowPoint');
model.result('pg6').feature('arpt2').set('expr', {'wire.pm1.F_PX' 'wire.pm1.F_PY' 'wire.pm1.F_PZ'});
model.result('pg6').feature('arpt2').set('arrowbase', 'tail');
model.result('pg6').feature('arpt2').label('Point Mass: Lamps');
model.result('pg6').feature('arpt2').set('inheritplot', 'arpt1');
model.result('pg6').feature('arpt2').create('col', 'Color');
model.result('pg6').feature('arpt2').feature('col').set('colortable', 'Rainbow');
model.result('pg6').feature('arpt2').feature('col').set('colortabletrans', 'none');
model.result('pg6').feature('arpt2').feature('col').set('colorscalemode', 'linear');
model.result('pg6').feature('arpt2').feature('col').set('colordata', 'arrowlength');
model.result('pg6').feature('arpt2').feature('col').set('coloring', 'gradient');
model.result('pg6').feature('arpt2').feature('col').set('topcolor', 'red');
model.result('pg6').feature('arpt2').feature('col').set('bottomcolor', 'custom');
model.result('pg6').feature('arpt2').feature('col').set('custombottomcolor', [0.5882353186607361 0.5137255191802979 0.5176470875740051]);
model.result('pg6').feature('arpt2').set('color', 'blue');
model.result('pg6').feature('arpt2').create('def', 'Deform');
model.result('pg6').feature('arpt2').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg6').feature('arpt2').feature('def').set('descr', 'Displacement field');
model.result('pg6').feature('arpt2').feature('def').set('scaleactive', true);
model.result('pg6').feature('arpt2').feature('def').set('scale', 1);
model.result('pg6').label('Point Loads (wire)');
model.result('pg6').run;
model.result('pg5').run;
model.result('pg5').label('Thumbnail');
model.result('pg5').set('titletype', 'none');
model.result('pg5').setIndex('looplevel', 2, 0);
model.result('pg5').run;
model.result('pg5').feature('line1').set('colortable', 'Prism');
model.result('pg5').feature('line1').set('tuberadiusscale', 15);
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').create('arwl1', 'ArrowLine');
model.result('pg5').feature('arwl1').set('expr', {'wire.fgx' 'wire.fgy' 'wire.fgz'});
model.result('pg5').feature('arwl1').set('descr', 'Gravity force');
model.result('pg5').feature('arwl1').set('arrowcount', 30);
model.result('pg5').feature('arwl1').set('scaleactive', true);
model.result('pg5').feature('arwl1').set('scale', 4.0E-6);
model.result('pg5').feature('arwl1').set('inheritplot', 'line1');
model.result('pg5').feature('arwl1').set('inheritarrowscale', false);
model.result('pg5').feature('arwl1').set('inheritcolor', false);
model.result('pg5').feature('arwl1').set('inheritrange', false);
model.result('pg5').feature('arwl1').feature.copy('def', 'pg5/line1/def');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').create('pt1', 'Point');
model.result('pg5').feature('pt1').set('expr', 'if(abs(X) < L_cable/2, 1, nan)');
model.result('pg5').feature('pt1').set('radiusexpr', '0.15');
model.result('pg5').feature('pt1').set('sphereradiusscaleactive', true);
model.result('pg5').feature('pt1').set('coloring', 'uniform');
model.result('pg5').feature('pt1').set('color', 'gray');
model.result('pg5').feature('pt1').set('inheritplot', 'line1');
model.result('pg5').feature('pt1').set('inheritcolor', false);
model.result('pg5').feature('pt1').set('inheritrange', false);
model.result('pg5').feature('pt1').set('inheritspherescale', false);
model.result('pg5').feature('pt1').create('def1', 'Deform');
model.result('pg5').run;
model.result('pg6').run;
model.result('pg5').run;
model.result('pg5').feature.copy('arpt2', 'pg6/arpt2');
model.result('pg5').run;
model.result('pg5').feature('arpt2').set('inheritplot', 'line1');
model.result('pg5').feature('arpt2').set('inheritarrowscale', false);
model.result('pg5').feature('arpt2').set('inheritcolor', false);
model.result('pg5').feature('arpt2').set('inheritrange', false);
model.result('pg5').feature('arpt2').set('scaleactive', true);
model.result('pg5').feature('arpt2').set('scale', 0.1);
model.result('pg5').feature('arpt2').create('trn1', 'Translation');
model.result('pg5').run;
model.result('pg5').feature('arpt2').feature('trn1').set('trans', [0 0 -0.15]);
model.result('pg5').feature('arpt2').feature('trn1').set('applytodatasetedges', false);
model.result('pg5').run;
model.result('pg5').run;

model.view('view1').set('showaxisorientation', false);

model.result('pg5').set('showlegends', false);

model.view('view1').set('showgrid', false);

model.result.remove('pg5');
model.result('pg6').run;
model.result.remove('pg6');

model.view('view1').set('showgrid', true);
model.view('view1').set('showaxisorientation', true);

model.result('pg1').run;

model.title('Hanging Cable');

model.description('A cable is a structural member which has stiffness only in its tangential direction, but virtually no bending stiffness. When supported only at its two ends, it deflects under gravitational load forming a curve known as catenary. This example shows how to model components such as cables, wires or strings using the Wire interface.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('hanging_cable.mph');

model.modelNode.label('Components');

out = model;
