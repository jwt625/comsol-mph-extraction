function out = model
%
% bk_4134_microphone.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Electroacoustic_Transducers');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ta', 'ThermoacousticsSinglePhysics', 'geom1');
model.physics('ta').model('comp1');
model.physics.create('mbrn', 'StructuralMembrane', 'geom1');
model.physics('mbrn').model('comp1');
model.physics('mbrn').field('displacement').field('um');
model.physics('mbrn').field('displacement').component({'um' 'vm' 'wm'});
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('Tm0', '3160[N/m]', 'Membrane tension');
model.param.set('Em', '2.21e11[Pa]', 'Young''s modulus of membrane');
model.param.set('num', '0.4', 'Poisson''s ratio of membrane');
model.param.set('tm', '5[um]', 'Membrane thickness');
model.param.set('Hmic', '3.35[mm]', 'Microphone height');
model.param.set('rhoms', '0.0445[kg/m^2]', 'Membrane surface density');
model.param.set('rhom', 'rhoms/tm', 'Membrane density');
model.param.set('Q0', '3.145e-10[C]', 'Backplate charge at Vpol');
model.param.set('pin', '1[Pa]', 'Input pressure');
model.param.set('pvent_e', 'pin', 'Vent pressure exposed');
model.param.set('pvent_u', '0[Pa]', 'Vent pressure unexposed');
model.param.set('fmax', '20[kHz]', 'Maximal driving frequency');
model.param.set('dvisc', '0.22[mm]*sqrt(100[Hz]/fmax)', 'Viscous boundary layer thickness at fmax');
model.param.set('L0', '39.5[dB]', 'Reference sensitivity');
model.param.set('T0', '20[degC]', 'Equilibrium (ambient) temperature');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'bk_4134_microphone.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').run('fin');

model.func.create('int1', 'Interpolation');
model.func('int1').model('comp1');
model.func('int1').set('source', 'file');
model.func('int1').set('filename', 'bk_4134_microphone_sensitivity_data.txt');
model.func('int1').set('nargs', 1);
model.func('int1').importData;
model.func('int1').setIndex('funcs', 'int_ave', 0, 0);
model.func('int1').setIndex('funcs', 1, 0, 1);
model.func('int1').setIndex('funcs', 'int_min', 1, 0);
model.func('int1').setIndex('funcs', 2, 1, 1);
model.func('int1').setIndex('funcs', 'int_max', 2, 0);
model.func('int1').setIndex('funcs', 3, 2, 1);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(2);
model.selection('sel1').set([4 16 26]);
model.selection('sel1').label('Membrane');
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Symmetry');
model.selection('sel2').geom(2);

model.view('view1').set('renderwireframe', true);

model.selection('sel2').set([1 2 5 11 14 21 24 29 31 34]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Pressure Release');
model.selection('sel3').geom(2);
model.selection('sel3').set([32]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Ground');
model.selection('sel4').geom(2);
model.selection('sel4').set([3 6 7 8 9 10 12 17 19 22]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Terminal');
model.selection('sel5').geom(2);
model.selection('sel5').set([4 16 26 27 28 33 36]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Membrane Material');
model.material('mat2').selection.geom('geom1', 2);
model.material('mat2').selection.named('sel1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat2').propertyGroup('Enu').set('E', {'Em'});
model.material('mat2').propertyGroup('Enu').set('nu', {'num'});
model.material('mat2').propertyGroup('def').set('density', {'rhom'});

model.physics('ta').create('sym1', 'Symmetry', 2);
model.physics('ta').feature('sym1').selection.named('sel2');
model.physics('ta').create('pra1', 'PressureAdiabatic', 2);
model.physics('ta').feature('pra1').selection.named('sel3');
model.physics('ta').feature('pra1').set('pbnd', 'linper(pvent_e*exp(-ta.iomega*Hmic/343[m/s]))');
model.physics('ta').create('pra2', 'PressureAdiabatic', 2);
model.physics('ta').feature('pra2').selection.named('sel3');
model.physics('ta').feature('pra2').set('pbnd', 'linper(pvent_u)');
model.physics('mbrn').selection.named('sel1');
model.physics('mbrn').feature('to1').set('d', 'tm');
model.physics('mbrn').feature('lemm1').create('iss1', 'InitialStressandStrain', 2);
model.physics('mbrn').feature('lemm1').feature('iss1').set('N0', {'Tm0' '0' '0' 'Tm0'});
model.physics('mbrn').create('fix1', 'Fixed', 1);
model.physics('mbrn').feature('fix1').selection.set([74]);
model.physics('mbrn').create('sym1', 'Symmetry', 1);
model.physics('mbrn').feature('sym1').selection.set([4 5 25 42 49 57]);
model.physics('mbrn').create('fl1', 'FaceLoad', 2);
model.physics('mbrn').feature('fl1').selection.named('sel1');
model.physics('mbrn').feature('fl1').set('LoadType', 'FollowerPressure');
model.physics('mbrn').feature('fl1').set('FollowerPressure', 'linper(pin)');
model.physics('mbrn').create('fl2', 'FaceLoad', 2);
model.physics('mbrn').feature('fl2').selection.named('sel1');
model.physics('es').create('gnd1', 'Ground', 2);
model.physics('es').feature('gnd1').selection.named('sel4');
model.physics('es').create('term1', 'Terminal', 2);
model.physics('es').feature('term1').selection.named('sel5');
model.physics('es').feature('term1').set('Q0', 'Q0');
model.physics('es').create('fcal1', 'ForceCalculation', 3);
model.physics('es').feature('fcal1').selection.set([1 3 4]);
model.physics('mbrn').feature('fl2').set('FperArea_src', 'root.comp1.es.nTx_0');

model.common.create('free1', 'DeformingDomain', 'comp1');
model.common('free1').selection.all;
model.common('free1').set('smoothingType', 'laplace');
model.common('free1').selection.set([1 3 4]);
model.common.create('fix1', 'FixedBoundary', 'comp1');
model.common('fix1').selection.set([3 15 25]);
model.common.create('sym1', 'Symmetry', 'comp1');
model.common('sym1').selection.named('sel2');

model.multiphysics.create('tsb1', 'ThermoacousticStructureBoundary', 'geom1', 2);
model.multiphysics('tsb1').selection.named('sel1');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.set([33]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([61]);
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.set([4 16 18 26]);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', '0.4[mm]');
model.mesh('mesh1').feature('ftri1').create('size2', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size2').selection.geom('geom1', 1);
model.mesh('mesh1').feature('ftri1').feature('size2').selection.set([24 35 48]);
model.mesh('mesh1').feature('ftri1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size2').set('hmax', '4*dvisc');
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([1 3 4 5]);
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.set([1 3 4]);
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 3);
model.mesh('mesh1').feature('swe1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis2').selection.set([5]);
model.mesh('mesh1').feature('swe1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('swe1').feature('dis2').set('elemcount', 10);
model.mesh('mesh1').feature('swe1').feature('dis2').set('elemratio', 10);
model.mesh('mesh1').feature('swe1').feature('dis2').set('growthrate', 'exponential');
model.mesh('mesh1').run('swe1');
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', '0.5[mm]');
model.mesh('mesh1').run('ftet1');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(3);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').set('smoothtransition', false);
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([6 7 8 9 10 12 13 17 18 19 20 22 23 27 28 36]);
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 3);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhtot');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhtot', 'pi*dvisc');
model.mesh('mesh1').run;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/ta', false);
model.study('std1').feature('stat').setSolveFor('/physics/mbrn', true);
model.study('std1').feature('stat').setSolveFor('/physics/es', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/tsb1', true);
model.study('std1').label('Study 1 - Vent Exposed');
model.study('std1').setGenPlots(false);
model.study('std1').create('frlin', 'Frequencylinearized');
model.study('std1').feature('frlin').set('plist', '10^{range(0,3/10,3)} 10^{range(3.3,1/20,4.3)}');
model.study('std1').feature('frlin').set('useadvanceddisable', true);
model.study('std1').feature('frlin').set('disabledphysics', {'ta/pra2'});

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3 4]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3 4]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbrn_unn').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_um').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbrn_unn').set('scaleval', '1e-3');
model.sol('sol1').feature('v1').feature('comp1_um').set('scaleval', '1e-2*0.007430578377870649');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scaleval', '2.4356601239037427E-5');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V' 'comp1_es_term1_V0_ode'});
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'cg');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('coarseningmethod', 'classic');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Electrostatics');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_um' 'comp1_mbrn_unn'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Membrane');
model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').label('Spatial Frame Variables');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'frlin');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_mbrn_unn').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_um').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_mbrn_unn').set('scaleval', '1e-3');
model.sol('sol1').feature('v2').feature('comp1_um').set('scaleval', '1e-2*0.007430578377870649');
model.sol('sol1').feature('v2').feature('comp1_spatial_disp').set('scaleval', '2.4356601239037427E-5');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'frlin');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-6);
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s2').feature('p1').set('plistarr', {'10^{range(0,3/10,3)} 10^{range(3.3,1/20,4.3)}'});
model.sol('sol1').feature('s2').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s2').feature('p1').set('probes', {});
model.sol('sol1').feature('s2').feature('p1').set('control', 'frlin');
model.sol('sol1').feature('s2').set('nonlin', 'linper');
model.sol('sol1').feature('s2').set('storelinpoint', true);
model.sol('sol1').feature('s2').set('linpsolnum', 'all');
model.sol('sol1').feature('s2').set('control', 'frlin');
model.sol('sol1').feature('s2').set('linpmethod', 'sol');
model.sol('sol1').feature('s2').set('linpsol', 'sol1');
model.sol('sol1').feature('s2').set('linpsoluse', 'sol2');
model.sol('sol1').feature('s2').set('control', 'frlin');
model.sol('sol1').feature('s2').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s2').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').label('Direct (Merged)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').label('Suggested Iterative Solver (GMRES with Direct Precon.) (tsb1)');
model.sol('sol1').feature('s2').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_p'});
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s2').feature('i1').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i1').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i1').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('s2').feature('i1').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s2').feature('i1').create('dp3', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i1').feature('dp3').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i1').feature('dp3').set('hybridvar', {'comp1_um' 'comp1_mbrn_unn'});
model.sol('sol1').feature('s2').feature('i1').feature('dp3').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('dp3').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').label('Suggested Iterative Solver (GMRES with DD) (tsb1)');
model.sol('sol1').feature('s2').feature('i2').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('hybridvar', {'comp1_u' 'comp1_p' 'comp1_T'});
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('domdofmax', 200000);
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('userac', false);
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('usecoarse', 'aggregation');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_p'});
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('dp1').set('hybridvar', {'comp1_um' 'comp1_mbrn_unn'});
model.sol('sol1').feature('s2').feature('i2').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s2').feature('i1').active(true);
model.sol('sol1').feature('s2').feature('i1').create('dp4', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i1').feature('dp4').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('dp4').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s2').feature('i1').feature('dp4').set('hybridvar', {'comp1_spatial_disp'});
model.sol('sol1').feature('s2').feature('i1').create('dp5', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i1').feature('dp5').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('dp5').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s2').feature('i1').feature('dp5').set('hybridvar', {'comp1_V' 'comp1_es_term1_V0_ode'});
model.sol('sol1').runAll;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/ta', false);
model.study('std2').feature('stat').setSolveFor('/physics/mbrn', true);
model.study('std2').feature('stat').setSolveFor('/physics/es', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/tsb1', true);
model.study('std2').label('Study 2 - Vent Unexposed');
model.study('std2').setGenPlots(false);
model.study('std2').create('frlin', 'Frequencylinearized');
model.study('std2').feature('frlin').set('plist', '10^{range(0,3/10,3)} 10^{range(3.3,1/20,4.3)}');
model.study('std2').feature('frlin').set('useadvanceddisable', true);
model.study('std2').feature('frlin').set('disabledphysics', {'ta/pra1'});

model.sol.create('sol3');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3 4]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3 4]);

model.sol('sol3').study('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'stat');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').feature('comp1_mbrn_unn').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_um').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_mbrn_unn').set('scaleval', '1e-3');
model.sol('sol3').feature('v1').feature('comp1_um').set('scaleval', '1e-2*0.007430578377870649');
model.sol('sol3').feature('v1').feature('comp1_spatial_disp').set('scaleval', '2.4356601239037427E-5');
model.sol('sol3').feature('v1').set('control', 'stat');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').create('se1', 'Segregated');
model.sol('sol3').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol3').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol3').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V' 'comp1_es_term1_V0_ode'});
model.sol('sol3').feature('s1').create('i1', 'Iterative');
model.sol('sol3').feature('s1').feature('i1').set('linsolver', 'cg');
model.sol('sol3').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('coarseningmethod', 'classic');
model.sol('sol3').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol3').feature('s1').feature('se1').feature('ss1').label('Electrostatics');
model.sol('sol3').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol3').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_um' 'comp1_mbrn_unn'});
model.sol('sol3').feature('s1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol3').feature('s1').feature('se1').feature('ss2').label('Membrane');
model.sol('sol3').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol3').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});
model.sol('sol3').feature('s1').feature('se1').feature('ss3').set('linsolver', 'dDef');
model.sol('sol3').feature('s1').feature('se1').feature('ss3').label('Spatial Frame Variables');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').create('su1', 'StoreSolution');
model.sol('sol3').create('st2', 'StudyStep');
model.sol('sol3').feature('st2').set('study', 'std2');
model.sol('sol3').feature('st2').set('studystep', 'frlin');
model.sol('sol3').create('v2', 'Variables');
model.sol('sol3').feature('v2').feature('comp1_mbrn_unn').set('scalemethod', 'manual');
model.sol('sol3').feature('v2').feature('comp1_um').set('scalemethod', 'manual');
model.sol('sol3').feature('v2').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol3').feature('v2').feature('comp1_mbrn_unn').set('scaleval', '1e-3');
model.sol('sol3').feature('v2').feature('comp1_um').set('scaleval', '1e-2*0.007430578377870649');
model.sol('sol3').feature('v2').feature('comp1_spatial_disp').set('scaleval', '2.4356601239037427E-5');
model.sol('sol3').feature('v2').set('initmethod', 'sol');
model.sol('sol3').feature('v2').set('initsol', 'sol3');
model.sol('sol3').feature('v2').set('initsoluse', 'sol4');
model.sol('sol3').feature('v2').set('notsolmethod', 'sol');
model.sol('sol3').feature('v2').set('notsol', 'sol3');
model.sol('sol3').feature('v2').set('control', 'frlin');
model.sol('sol3').create('s2', 'Stationary');
model.sol('sol3').feature('s2').set('stol', 1.0E-6);
model.sol('sol3').feature('s2').create('p1', 'Parametric');
model.sol('sol3').feature('s2').feature.remove('pDef');
model.sol('sol3').feature('s2').feature('p1').set('pname', {'freq'});
model.sol('sol3').feature('s2').feature('p1').set('plistarr', {'10^{range(0,3/10,3)} 10^{range(3.3,1/20,4.3)}'});
model.sol('sol3').feature('s2').feature('p1').set('punit', {'Hz'});
model.sol('sol3').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol3').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol3').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol3').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol3').feature('s2').feature('p1').set('plotgroup', 'Default');
model.sol('sol3').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol3').feature('s2').feature('p1').set('probes', {});
model.sol('sol3').feature('s2').feature('p1').set('control', 'frlin');
model.sol('sol3').feature('s2').set('nonlin', 'linper');
model.sol('sol3').feature('s2').set('storelinpoint', true);
model.sol('sol3').feature('s2').set('linpsolnum', 'all');
model.sol('sol3').feature('s2').set('control', 'frlin');
model.sol('sol3').feature('s2').set('linpmethod', 'sol');
model.sol('sol3').feature('s2').set('linpsol', 'sol3');
model.sol('sol3').feature('s2').set('linpsoluse', 'sol4');
model.sol('sol3').feature('s2').set('control', 'frlin');
model.sol('sol3').feature('s2').feature('aDef').set('complexfun', true);
model.sol('sol3').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s2').feature('aDef').set('matherr', true);
model.sol('sol3').feature('s2').feature('aDef').set('blocksizeactive', false);
model.sol('sol3').feature('s2').create('seDef', 'Segregated');
model.sol('sol3').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s2').create('d1', 'Direct');
model.sol('sol3').feature('s2').feature('d1').label('Direct (Merged)');
model.sol('sol3').feature('s2').create('i1', 'Iterative');
model.sol('sol3').feature('s2').feature('i1').label('Suggested Iterative Solver (GMRES with Direct Precon.) (tsb1)');
model.sol('sol3').feature('s2').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol3').feature('s2').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol3').feature('s2').feature('i1').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_p'});
model.sol('sol3').feature('s2').feature('i1').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s2').feature('i1').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol3').feature('s2').feature('i1').create('dp2', 'DirectPreconditioner');
model.sol('sol3').feature('s2').feature('i1').feature('dp2').set('hybridization', 'multi');
model.sol('sol3').feature('s2').feature('i1').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol3').feature('s2').feature('i1').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol3').feature('s2').feature('i1').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol3').feature('s2').feature('i1').create('dp3', 'DirectPreconditioner');
model.sol('sol3').feature('s2').feature('i1').feature('dp3').set('hybridization', 'multi');
model.sol('sol3').feature('s2').feature('i1').feature('dp3').set('hybridvar', {'comp1_um' 'comp1_mbrn_unn'});
model.sol('sol3').feature('s2').feature('i1').feature('dp3').set('linsolver', 'pardiso');
model.sol('sol3').feature('s2').feature('i1').feature('dp3').set('pivotperturb', '1.0E-9');
model.sol('sol3').feature('s2').create('i2', 'Iterative');
model.sol('sol3').feature('s2').feature('i2').label('Suggested Iterative Solver (GMRES with DD) (tsb1)');
model.sol('sol3').feature('s2').feature('i2').create('dd1', 'DomainDecomposition');
model.sol('sol3').feature('s2').feature('i2').feature('dd1').set('hybridization', 'multi');
model.sol('sol3').feature('s2').feature('i2').feature('dd1').set('hybridvar', {'comp1_u' 'comp1_p' 'comp1_T'});
model.sol('sol3').feature('s2').feature('i2').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol3').feature('s2').feature('i2').feature('dd1').set('domdofmax', 200000);
model.sol('sol3').feature('s2').feature('i2').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol3').feature('s2').feature('i2').feature('dd1').set('userac', false);
model.sol('sol3').feature('s2').feature('i2').feature('dd1').set('usecoarse', 'aggregation');
model.sol('sol3').feature('s2').feature('i2').feature('dd1').feature('ds').create('dp1', 'DirectPreconditioner');
model.sol('sol3').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridization', 'multi');
model.sol('sol3').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_p'});
model.sol('sol3').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol3').feature('s2').feature('i2').feature('dd1').feature('ds').create('dp2', 'DirectPreconditioner');
model.sol('sol3').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridization', 'multi');
model.sol('sol3').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol3').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol3').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol3').feature('s2').feature('i2').feature('dd1').feature('cs').create('d1', 'Direct');
model.sol('sol3').feature('s2').feature('i2').feature('dd1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s2').feature('i2').feature('dd1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('s2').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol3').feature('s2').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol3').feature('s2').feature('i2').feature('dp1').set('hybridvar', {'comp1_um' 'comp1_mbrn_unn'});
model.sol('sol3').feature('s2').feature('i2').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s2').feature('i2').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol3').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('s2').feature.remove('fcDef');
model.sol('sol3').feature('s2').feature.remove('seDef');
model.sol('sol3').feature('v2').set('notsolnum', 'auto');
model.sol('sol3').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol3').attach('std2');
model.sol('sol3').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s2').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol3').feature('s2').feature('i1').active(true);
model.sol('sol3').feature('s2').feature('i1').create('dp4', 'DirectPreconditioner');
model.sol('sol3').feature('s2').feature('i1').feature('dp4').set('linsolver', 'pardiso');
model.sol('sol3').feature('s2').feature('i1').feature('dp4').set('pivotperturb', 1.0E-9);
model.sol('sol3').feature('s2').feature('i1').feature('dp4').set('hybridvar', {'comp1_spatial_disp'});
model.sol('sol3').feature('s2').feature('i1').create('dp5', 'DirectPreconditioner');
model.sol('sol3').feature('s2').feature('i1').feature('dp5').set('linsolver', 'pardiso');
model.sol('sol3').feature('s2').feature('i1').feature('dp5').set('pivotperturb', 1.0E-9);
model.sol('sol3').feature('s2').feature('i1').feature('dp5').set('hybridvar', {'comp1_V' 'comp1_es_term1_V0_ode'});
model.sol('sol3').runAll;

model.result.dataset('dset1').set('frametype', 'material');
model.result.dataset.create('sec1', 'Sector3D');
model.result.dataset('sec1').set('sectors', 12);
model.result.dataset('sec1').set('trans', 'rotrefl');
model.result.dataset('sec1').set('reflaxis', [0 -1 0]);
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').set('expr', {'es.V0_1'});
model.result.numerical('gev1').set('descr', {'Terminal voltage'});
model.result.numerical('gev1').set('unit', {'V'});
model.result.numerical('gev1').set('evalmethod', 'linpoint');
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Global Evaluation 1');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').run;
model.result('pg1').label('Membrane Deformation');
model.result('pg1').set('data', 'sec1');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', 'mbrn.disp');
model.result('pg1').feature('surf1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg1').feature('surf1').set('expr', 'mbrn.disp');
model.result('pg1').feature('surf1').set('descr', 'Displacement magnitude');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').create('def1', 'Deform');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 11, 0);
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').run;
model.result('pg2').label('Velocity');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').create('slc1', 'Slice');
model.result('pg2').feature('slc1').set('expr', 'ta.v_inst');
model.result('pg2').feature('slc1').set('quickplane', 'zx');
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('Sound Pressure Level');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', 'ta.Lp_t');
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Acoustic Temperature Variation');
model.result('pg4').setIndex('looplevel', 11, 0);
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'ta.T_t');
model.result('pg4').feature('surf1').set('unit', 'mK');
model.result('pg4').feature('surf1').set('colortable', 'ThermalWave');
model.result('pg4').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').run;
model.result('pg5').label('Electric Potential (stationary)');
model.result('pg5').set('data', 'sec1');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').create('mslc1', 'Multislice');
model.result('pg5').feature('mslc1').set('expr', 'V');
model.result('pg5').feature('mslc1').set('evalmethod', 'linpoint');
model.result('pg5').feature('mslc1').set('znumber', '3');
model.result('pg5').feature('mslc1').set('colortable', 'Dipole');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Sensitivity');
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'f (Hz)');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'dB (rel. 1 V/Pa)');
model.result('pg6').set('legendpos', 'lowerright');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').setIndex('expr', '20*log10(abs(es.V0_1/pin))+L0', 0);
model.result('pg6').feature('glob1').setIndex('unit', '', 0);
model.result('pg6').feature('glob1').setIndex('descr', 'Model (vent exposed)', 0);
model.result('pg6').feature('glob1').setIndex('expr', 'int_ave(freq)', 1);
model.result('pg6').feature('glob1').setIndex('unit', '', 1);
model.result('pg6').feature('glob1').setIndex('descr', 'Average measurement', 1);
model.result('pg6').feature('glob1').setIndex('expr', 'int_min(freq)', 2);
model.result('pg6').feature('glob1').setIndex('unit', '', 2);
model.result('pg6').feature('glob1').setIndex('descr', 'Lower measurement', 2);
model.result('pg6').feature('glob1').setIndex('expr', 'int_max(freq)', 3);
model.result('pg6').feature('glob1').setIndex('unit', '', 3);
model.result('pg6').feature('glob1').setIndex('descr', 'Upper measurement', 3);
model.result('pg6').run;
model.result('pg6').set('xlog', true);
model.result('pg6').run;
model.result('pg6').create('glob2', 'Global');
model.result('pg6').feature('glob2').set('markerpos', 'datapoints');
model.result('pg6').feature('glob2').set('linewidth', 'preference');
model.result('pg6').feature('glob2').set('data', 'dset3');
model.result('pg6').feature('glob2').setIndex('expr', '20*log10(abs(es.V0_1/pin))+L0', 0);
model.result('pg6').feature('glob2').setIndex('unit', '', 0);
model.result('pg6').feature('glob2').setIndex('descr', 'Model (vent unexposed)', 0);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Static Membrane Deformation');
model.result('pg7').set('titletype', 'label');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr1').set('linewidth', 'preference');
model.result('pg7').feature('lngr1').set('expr', 'wm');
model.result('pg7').feature('lngr1').selection.set([4 25 42 57]);
model.result('pg7').feature('lngr1').set('evalmethod', 'linpoint');
model.result('pg7').run;
model.result('pg7').create('lngr2', 'LineGraph');
model.result('pg7').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr2').set('linewidth', 'preference');
model.result('pg7').feature('lngr2').set('expr', 'wm');
model.result('pg7').feature('lngr2').selection.set([5 49]);
model.result('pg7').feature('lngr2').set('evalmethod', 'linpoint');
model.result('pg7').run;
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('Maxwell Stress');
model.result('pg8').run;
model.result('pg8').feature('lngr1').set('expr', 'es.dnTz');
model.result('pg8').run;
model.result('pg8').feature('lngr2').set('expr', 'es.dnTz');
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Sensitivity, 1/3 Octave Bands');
model.result('pg9').set('titletype', 'label');
model.result('pg9').create('oct1', 'OctaveBand');
model.result('pg9').feature('oct1').set('quantity', 'bandpower');
model.result('pg9').feature('oct1').set('markerpos', 'datapoints');
model.result('pg9').feature('oct1').set('linewidth', 'preference');
model.result('pg9').feature('oct1').selection.geom('geom1');
model.result('pg9').feature('oct1').set('exprtype', 'transfer');
model.result('pg9').feature('oct1').set('levelref', 'L0');
model.result('pg9').feature('oct1').set('expr', 'abs(es.V0_1/pin)^2');
model.result('pg9').feature('oct1').set('quantity', 'bandaveragepsd');
model.result('pg9').feature('oct1').set('bandtype', 'octave3');
model.result('pg9').run;

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'intop_vol');
model.cpl('intop1').selection.all;
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').set('opname', 'intop_mem');
model.cpl('intop2').selection.geom('geom1', 2);
model.cpl('intop2').selection.named('sel1');

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('Qmem', '12*intop_mem(ta.iomega*wm)', 'Membrane volume velocity');
model.variable('var1').set('Pvisc', '12*intop_vol(ta.diss_visc)', 'Viscous dissipated power');
model.variable('var1').set('Ptherm', '12*intop_vol(ta.diss_therm)', 'Thermal dissipated power');
model.variable('var1').set('Ptot', '12*intop_vol(ta.diss_tot)', 'Total thermal and viscous dissipated power');

model.sol('sol3').updateSolution;

model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('Dissipated Energy');
model.result('pg10').set('data', 'dset3');
model.result('pg10').set('titletype', 'label');
model.result('pg10').set('xlabelactive', true);
model.result('pg10').set('xlabel', 'f (Hz)');
model.result('pg10').set('ylabelactive', true);
model.result('pg10').set('ylabel', 'P (W)');
model.result('pg10').set('xlog', true);
model.result('pg10').set('ylog', true);
model.result('pg10').set('legendpos', 'upperleft');
model.result('pg10').create('glob1', 'Global');
model.result('pg10').feature('glob1').set('markerpos', 'datapoints');
model.result('pg10').feature('glob1').set('linewidth', 'preference');
model.result('pg10').feature('glob1').setIndex('expr', 'Ptot', 0);
model.result('pg10').feature('glob1').setIndex('unit', 'W', 0);
model.result('pg10').feature('glob1').setIndex('descr', 'Total thermal and viscous dissipated power', 0);
model.result('pg10').feature('glob1').setIndex('expr', 'Pvisc', 1);
model.result('pg10').feature('glob1').setIndex('unit', 'W', 1);
model.result('pg10').feature('glob1').setIndex('descr', 'Viscous dissipated power', 1);
model.result('pg10').feature('glob1').setIndex('expr', 'Ptherm', 2);
model.result('pg10').feature('glob1').setIndex('unit', 'W', 2);
model.result('pg10').feature('glob1').setIndex('descr', 'Thermal dissipated power', 2);
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Equivalent Acoustic Resistance');
model.result('pg11').set('data', 'dset3');
model.result('pg11').set('xlabelactive', true);
model.result('pg11').set('xlabel', 'f (Hz)');
model.result('pg11').set('ylabelactive', true);
model.result('pg11').set('ylabel', 'R = real(Z) (kg/(m<sup>4</sup>s))');
model.result('pg11').set('xlog', true);
model.result('pg11').set('ylog', true);
model.result('pg11').create('glob1', 'Global');
model.result('pg11').feature('glob1').set('markerpos', 'datapoints');
model.result('pg11').feature('glob1').set('linewidth', 'preference');
model.result('pg11').feature('glob1').setIndex('expr', 'real(-pin/Qmem)', 0);
model.result('pg11').feature('glob1').setIndex('unit', 'kg/(m^4*s)', 0);
model.result('pg11').feature('glob1').setIndex('descr', 'real(Z)', 0);
model.result('pg11').run;
model.result('pg11').create('glob2', 'Global');
model.result('pg11').feature('glob2').set('markerpos', 'datapoints');
model.result('pg11').feature('glob2').set('linewidth', 'preference');
model.result('pg11').feature('glob2').setIndex('expr', 'Ptot/(0.5*abs(Qmem)^2)', 0);
model.result('pg11').feature('glob2').setIndex('unit', 'kg/(m^4*s)', 0);
model.result('pg11').feature('glob2').setIndex('descr', 'real(Z) - total dissipated power', 0);
model.result('pg11').feature('glob2').setIndex('expr', 'Pvisc/(0.5*abs(Qmem)^2)', 1);
model.result('pg11').feature('glob2').setIndex('unit', 'kg/(m^4*s)', 1);
model.result('pg11').feature('glob2').setIndex('descr', 'real(Z) - viscous dissipated power', 1);
model.result('pg11').feature('glob2').setIndex('expr', 'Ptherm/(0.5*abs(Qmem)^2)', 2);
model.result('pg11').feature('glob2').setIndex('unit', 'kg/(m^4*s)', 2);
model.result('pg11').feature('glob2').setIndex('descr', 'real(Z) - thermal dissipated power', 2);
model.result('pg11').feature('glob2').set('linestyle', 'none');
model.result('pg11').feature('glob2').set('linemarker', 'point');
model.result('pg11').run;
model.result.create('pg12', 'PlotGroup1D');
model.result('pg12').run;
model.result('pg12').label('Noise Power Spectral Density');
model.result('pg12').set('data', 'dset3');
model.result('pg12').set('titletype', 'label');
model.result('pg12').set('xlabelactive', true);
model.result('pg12').set('xlabel', 'f (Hz)');
model.result('pg12').set('ylabelactive', true);
model.result('pg12').set('ylabel', 'Power Spectral Density (Pa<sup>2</sup>/Hz)');
model.result('pg12').set('xlog', true);
model.result('pg12').set('ylog', true);
model.result('pg12').set('showlegends', false);
model.result('pg12').create('glob1', 'Global');
model.result('pg12').feature('glob1').set('markerpos', 'datapoints');
model.result('pg12').feature('glob1').set('linewidth', 'preference');
model.result('pg12').feature('glob1').setIndex('expr', '4*k_B_const*T0*real(-pin/Qmem)*1[Hz]', 0);
model.result('pg12').feature('glob1').setIndex('unit', 'kg^2/(m^2*s^4)', 0);
model.result('pg12').feature('glob1').setIndex('descr', '', 0);
model.result('pg12').run;
model.result.create('pg13', 'PlotGroup1D');
model.result('pg13').run;
model.result('pg13').label('Noise Pressure Spectral Density');
model.result('pg13').set('data', 'dset3');
model.result('pg13').set('titletype', 'label');
model.result('pg13').set('xlabelactive', true);
model.result('pg13').set('xlabel', 'f (Hz)');
model.result('pg13').set('ylabelactive', true);
model.result('pg13').set('ylabel', 'Pressure Spectral Density (Pa/Hz<sup>1/2</sup>)');
model.result('pg13').set('xlog', true);
model.result('pg13').set('ylog', true);
model.result('pg13').set('showlegends', false);
model.result('pg13').create('glob1', 'Global');
model.result('pg13').feature('glob1').set('markerpos', 'datapoints');
model.result('pg13').feature('glob1').set('linewidth', 'preference');
model.result('pg13').feature('glob1').setIndex('expr', 'sqrt(4*k_B_const*T0*real(-pin/Qmem)*1[Hz])', 0);
model.result('pg13').feature('glob1').setIndex('unit', 'J/m^3', 0);
model.result('pg13').feature('glob1').setIndex('descr', '', 0);
model.result('pg13').run;
model.result.create('pg14', 'PlotGroup1D');
model.result('pg14').run;
model.result('pg14').label('Noise Floor Level');
model.result('pg14').set('data', 'dset3');
model.result('pg14').set('titletype', 'label');
model.result('pg14').set('xlabelactive', true);
model.result('pg14').set('xlabel', 'f (Hz)');
model.result('pg14').set('ylabelactive', true);
model.result('pg14').set('ylabel', 'Level (dB SPL)');
model.result('pg14').set('xlog', true);
model.result('pg14').set('showlegends', false);
model.result('pg14').create('glob1', 'Global');
model.result('pg14').feature('glob1').set('markerpos', 'datapoints');
model.result('pg14').feature('glob1').set('linewidth', 'preference');
model.result('pg14').feature('glob1').setIndex('expr', '10*log10(4*k_B_const*T0*real(-pin/Qmem)*1[Hz]/(20[uPa])^2)', 0);
model.result('pg14').feature('glob1').setIndex('unit', '', 0);
model.result('pg14').feature('glob1').setIndex('descr', '', 0);
model.result('pg14').run;
model.result('pg10').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').placeAfter('plotgroup', 'pg9');
model.nodeGroup('grp1').add('plotgroup', 'pg10');
model.nodeGroup('grp1').add('plotgroup', 'pg11');
model.nodeGroup('grp1').add('plotgroup', 'pg12');
model.nodeGroup('grp1').add('plotgroup', 'pg13');
model.nodeGroup('grp1').add('plotgroup', 'pg14');
model.nodeGroup('grp1').label('Mechanical-Thermal Noise Plots');

model.result('pg1').run;

model.title(['The Br' native2unicode(hex2dec({'00' 'fc'}), 'unicode') 'el & Kj' native2unicode(hex2dec({'00' 'e6'}), 'unicode') 'r 4134 Condenser Microphone']);

model.description(['This is a model of the Br' native2unicode(hex2dec({'00' 'fc'}), 'unicode') 'el and Kj' native2unicode(hex2dec({'00' 'e6'}), 'unicode') 'r 4134 condenser microphone. The geometry and material parameters are those of the actual microphone. The modeled sensitivity level is compared to measurements performed on an actual microphone and shows good agreement. The membrane deformation, pressure, velocity, electric field are also determined. Finally, the mechanical-thermal noise floor is computed in postprocessing.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('bk_4134_microphone.mph');

model.modelNode.label('Components');

out = model;
