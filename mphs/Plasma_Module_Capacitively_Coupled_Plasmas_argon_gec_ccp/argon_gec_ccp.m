function out = model
%
% argon_gec_ccp.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Plasma_Module/Capacitively_Coupled_Plasmas');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('ptp', 'ColdPlasmaTimePeriodic', 'geom1');
model.physics('ptp').model('comp1');

model.study.create('std1');
model.study('std1').create('tper', 'TimePeriodic');
model.study('std1').feature('tper').set('solnum', 'auto');
model.study('std1').feature('tper').set('notsolnum', 'auto');
model.study('std1').feature('tper').set('outputmap', {});
model.study('std1').feature('tper').set('ngenAUX', '1');
model.study('std1').feature('tper').set('ngen', '2');
model.study('std1').feature('tper').set('goalngenAUX', '1');
model.study('std1').feature('tper').set('ngenAUX', '1');
model.study('std1').feature('tper').set('ngen', '2');
model.study('std1').feature('tper').set('goalngenAUX', '1');
model.study('std1').feature('tper').setSolveFor('/physics/ptp', true);

model.param.set('L', '2.54[cm]');
model.param.descr('L', 'Discharge gap');
model.param.set('R1', '5.38[cm]');
model.param.descr('R1', 'Inner radius');
model.param.set('R2', '10.16[cm]');
model.param.descr('R2', 'Outer radius');
model.param.set('Hd', '10.16[cm]');
model.param.descr('Hd', 'Chamber height');
model.param.set('dThick', '3[mm]');
model.param.descr('dThick', 'Dielectric thickness');
model.param.set('f0', '13.56[MHz]');
model.param.descr('f0', 'Frequency');
model.param.set('P0', '1[W]');
model.param.descr('P0', 'Power');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'R1' 'L'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'R2-R1' 'Hd'});
model.geom('geom1').feature('r2').set('pos', {'R1' '-Hd/2+L/2'});
model.geom('geom1').runPre('fin');
model.geom('geom1').create('pt1', 'Point');
model.geom('geom1').feature('pt1').setIndex('p', 'R1-dThick', 0);
model.geom('geom1').run('pt1');
model.geom('geom1').feature.duplicate('pt2', 'pt1');
model.geom('geom1').feature('pt2').setIndex('p', 'L', 1);
model.geom('geom1').run('pt2');
model.geom('geom1').feature.duplicate('pt3', 'pt1');
model.geom('geom1').feature('pt3').setIndex('p', 'R2', 0);
model.geom('geom1').run('pt3');
model.geom('geom1').feature.duplicate('pt4', 'pt2');
model.geom('geom1').feature('pt4').setIndex('p', 'R2', 0);
model.geom('geom1').run('pt4');
model.geom('geom1').create('ls1', 'LineSegment');
model.geom('geom1').feature('ls1').selection('vertex1').set('pt2', 1);
model.geom('geom1').feature('ls1').selection('vertex2').set('pt1', 1);
model.geom('geom1').run('fin');
model.geom('geom1').create('mce1', 'MeshControlEdges');
model.geom('geom1').feature('mce1').set('includevtx', false);
model.geom('geom1').feature('mce1').selection('input').set('fin', [4 9]);
model.geom('geom1').run('mce1');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(1);
model.selection('sel1').all;
model.selection('sel1').set([2 3 4 5 6 7 8 9 10 11 12]);
model.selection('sel1').label('Walls');
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').geom(1);
model.selection('sel2').set([2]);
model.selection('sel2').label('Driven Electrode');
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').geom(1);
model.selection('sel3').set([4 6]);
model.selection('sel3').label('Dielectric Contact');
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').geom(1);
model.selection('sel4').set([3 5 7 8 9 10 11 12]);
model.selection('sel4').label('Grounded Walls');

model.physics('ptp').prop('ExtraDimensionSettings').set('Period_xd', '1/f0');
model.physics('ptp').prop('ExtraDimensionSettings').set('Nelemptp', 30);
model.physics('ptp').prop('ExtraDimensionSettings').set('HeavySpeciesSelection', 'BaseGeometry');
model.physics('ptp').create('xsec1', 'CrossSectionImport', -1);
model.physics('ptp').feature('xsec1').set('Filepath', 'Ar_xsecs_reduced.txt');
model.physics('ptp').feature('xsec1').runCommand('importData');
model.physics('ptp').feature('Ar').set('PresetSpeciesData', 'Ar');
model.physics('ptp').feature('Ar').set('FromMassConstraint', true);
model.physics('ptp').feature('Ars').active(false);
model.physics('ptp').feature('Ar_1p').set('InitIon', true);
model.physics('ptp').feature('Ar_1p').set('PresetSpeciesData', 'Ar');
model.physics('ptp').feature('Ar_1p').set('MobilityDiffusivitySpecification', 'SpecifyMobilityComputeDiffusivity');
model.physics('ptp').feature('Ar_1p').set('IonTemperatureSpecification', 'LocalFieldApproximation');
model.physics('ptp').feature('Ar_1p').set('MobilitySpecification', 'ArIoninAr');
model.physics('ptp').create('sr1', 'SurfaceReaction', 1);
model.physics('ptp').feature('sr1').selection.named('sel1');
model.physics('ptp').feature('sr1').set('formula', 'Ar+=>Ar');
model.physics('ptp').feature('sr1').set('gammaf', 0);
model.physics('ptp').feature('pes1').set('T', '300[K]');
model.physics('ptp').feature('pes1').set('pA', '0.1[torr]');
model.physics('ptp').feature('pes1').set('SpecifyElectronDensityAndEnergy', 'SpecifyMueOnly');
model.physics('ptp').feature('pes1').set('mue', {'3E5[cm^2/(V*s)]/0.1' '0' '0' '0' '3E5[cm^2/(V*s)]/0.1' '0' '0' '0' '3E5[cm^2/(V*s)]/0.1'});
model.physics('ptp').create('wall1', 'WallDriftDiffusion', 1);
model.physics('ptp').feature('wall1').selection.named('sel1');
model.physics('ptp').feature('wall1').set('re', '5/11');
model.physics('ptp').create('mct1', 'MetalContact', 1);
model.physics('ptp').feature('mct1').selection.named('sel2');
model.physics('ptp').feature('mct1').set('Prf', 'P0');
model.physics('ptp').feature('mct1').set('fp', 'f0');
model.physics('ptp').feature('mct1').set('CompBias', true);
model.physics('ptp').create('dct1', 'DielectricContact', 1);
model.physics('ptp').feature('dct1').selection.named('sel3');
model.physics('ptp').create('gnd1', 'Ground', 1);
model.physics('ptp').feature('gnd1').selection.named('sel4');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').set('smoothcontrol', false);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([4 5]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 4);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([2 3]);
model.mesh('mesh1').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis2').set('elemcount', 20);
model.mesh('mesh1').feature('map1').feature('dis2').set('elemratio', 5);
model.mesh('mesh1').feature('map1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([7 9]);
model.mesh('mesh1').feature('map1').feature('dis3').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis3').set('elemcount', 15);
model.mesh('mesh1').feature('map1').feature('dis3').set('elemratio', 10);
model.mesh('mesh1').feature('map1').feature('dis3').set('symmetric', true);
model.mesh('mesh1').feature('map1').create('dis4', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis4').selection.set([6 8 10 12]);
model.mesh('mesh1').feature('map1').feature('dis4').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis4').set('elemcount', 15);
model.mesh('mesh1').feature('map1').feature('dis4').set('elemratio', 8);
model.mesh('mesh1').feature('map1').feature('dis4').set('symmetric', true);
model.mesh('mesh1').feature('map1').create('dis5', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis5').selection.set([1 11 13 14]);
model.mesh('mesh1').feature('map1').feature('dis5').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis5').set('elemcount', 25);
model.mesh('mesh1').feature('map1').feature('dis5').set('elemratio', 3);
model.mesh('mesh1').feature('map1').feature('dis5').set('symmetric', true);
model.mesh('mesh1').run;

model.study('std1').label('Time Periodic Study');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'tper');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_Ne_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_V_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_dct1_sigs_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Vdcb_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_En_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Va_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_Ar_1p_W_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_Ne_per').set('scaleval', '35');
model.sol('sol1').feature('v1').feature('comp1_V_per').set('scaleval', '500');
model.sol('sol1').feature('v1').feature('comp1_ptp_dct1_sigs_per').set('scaleval', '1E-7');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Vdcb_per').set('scaleval', '100');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_En_per').set('scaleval', '35');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Va_per').set('scaleval', '500');
model.sol('sol1').feature('v1').feature('comp1_ptp_Ar_1p_W_per').set('scaleval', '10');
model.sol('sol1').feature('v1').set('control', 'tper');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', false);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol1').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ptp)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('nlinnormlevel', 0.01);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').set('errorchk', false);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (ptp)');
model.sol('sol1').feature('s1').feature('i1').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('domdofmax', 150000);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('ndom', 4);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('usecoarse', false);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('meshoverlap', false);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('errorchk', false);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol1').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runFromTo('st1', 'v1');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'ptp.neav'});
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'ptp.Teav'});
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'ptp.Vav'});
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'ptp.Pcap_av'});
model.result('pg4').feature('surf1').set('resolution', 'norefine');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg2').feature('surf1').set('colortable', 'Prism');
model.result('pg3').feature('surf1').set('colortable', 'Dipole');
model.result('pg4').feature('surf1').set('colortable', 'ThermalWave');
model.result('pg4').label('Capacitive Power Deposition, Period Averaged (ptp)');
model.result('pg1').label('Electron Density, Period Averaged (ptp)');
model.result('pg2').label('Electron Temperature, Period Averaged (ptp)');
model.result('pg3').label('Electric Potential, Period Averaged (ptp)');
model.result.dataset.create('dset2', 'Solution');
model.result.dataset('dset2').set('solution', 'sol1');
model.result.dataset('dset2').set('geom', 'ptp_xdim');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'dset2');
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('xdata', 'expr');
model.result('pg5').feature('lngr1').set('xdataexpr', {'x1_ptp'});
model.result('pg5').feature('lngr1').selection.all;
model.result('pg5').feature('lngr1').set('expr', {'ptp.mct1.V'});
model.result('pg5').feature('lngr1').set('legend', true);
model.result('pg5').feature('lngr1').set('legendmethod', 'manual');
model.result('pg5').feature('lngr1').setIndex('legends', 'V', 0);
model.result('pg5').create('lngr2', 'LineGraph');
model.result('pg5').feature('lngr2').set('xdata', 'expr');
model.result('pg5').feature('lngr2').set('xdataexpr', {'x1_ptp'});
model.result('pg5').feature('lngr2').selection.all;
model.result('pg5').feature('lngr2').set('expr', {'ptp.mct1.I'});
model.result('pg5').feature('lngr2').set('resolution', 'norefine');
model.result('pg5').feature('lngr2').set('legend', true);
model.result('pg5').feature('lngr2').set('legendmethod', 'manual');
model.result('pg5').feature('lngr2').setIndex('legends', 'I', 0);
model.result('pg5').set('twoyaxes', true);
model.result('pg5').setIndex('plotonsecyaxis', true, 0, 1);
model.result('pg5').set('titletype', 'none');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'Period fraction');
model.result('pg5').label('Current and Voltage, Metal Contact 1 (ptp)');
model.result('pg1').run;

model.sol('sol1').feature('s1').feature('fc1').set('plot', true);
model.sol('sol1').runAll;

model.result('pg1').run;
model.result('pg2').run;
model.result('pg3').run;
model.result('pg4').run;
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').run;
model.result('pg6').label('Ionization Source, Period-Averaged');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'ptp.Re_av');
model.result('pg6').feature('surf1').set('descr', 'Rate expression, period averaged');
model.result('pg6').feature('surf1').set('unit', '1/(cm^3*s)');
model.result('pg6').run;
model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').setIndex('genpoints', 0, 1, 0);
model.result.dataset('cln1').setIndex('genpoints', '2[cm]', 1, 1);
model.result.dataset('cln1').set('snapping', 'boundary');
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').set('data', 'cln1');
model.result('pg7').label('On Axis Electron Density');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr1').set('linewidth', 'preference');
model.result('pg7').run;
model.result.dataset.create('cln2', 'CutLine2D');
model.result.dataset('cln2').setIndex('genpoints', 'L/2', 0, 1);
model.result.dataset('cln2').setIndex('genpoints', 'R2', 1, 0);
model.result.dataset('cln2').setIndex('genpoints', 'L/2', 1, 1);
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').set('data', 'cln2');
model.result('pg8').label('Radial Electron Density');
model.result('pg8').create('lngr1', 'LineGraph');
model.result('pg8').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg8').feature('lngr1').set('linewidth', 'preference');
model.result('pg8').run;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').set('expr', {'ptp.mct1.Va_per'});
model.result.numerical('gev1').set('descr', {'Voltage amplitude'});
model.result.numerical('gev1').set('unit', {'V'});
model.result.numerical('gev1').set('expr', {'ptp.mct1.Va_per' 'ptp.mct1.Vdcb_per'});
model.result.numerical('gev1').set('descr', {'Voltage amplitude' 'DC bias voltage'});
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Global Evaluation 1');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result('pg8').run;

model.study.create('std2');
model.study('std2').create('tptd', 'TimePeriodicToTimeDependent');
model.study('std2').feature('tptd').set('plotgroup', 'Default');
model.study('std2').feature('tptd').set('initialtime', '0');
model.study('std2').feature('tptd').set('solnum', 'auto');
model.study('std2').feature('tptd').set('notsolnum', 'auto');
model.study('std2').feature('tptd').set('outputmap', {});
model.study('std2').feature('tptd').setSolveFor('/physics/ptp', true);
model.study('std2').feature('tptd').set('tlist', 'range(0,(1/f0-0)/50,1/f0)');
model.study('std2').feature('tptd').set('usesol', true);
model.study('std2').feature('tptd').set('notsolmethod', 'sol');
model.study('std2').feature('tptd').set('notstudy', 'std1');
model.study('std2').label('Time Periodic to Time Dependent');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'tptd');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'tptd');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,(1/f0-0)/50,1/f0)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'Default');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('control', 'tptd');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').set('data', 'dset3');
model.result('pg9').setIndex('looplevel', 51, 0);
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', {'ptp.ne'});
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').set('data', 'dset3');
model.result('pg10').setIndex('looplevel', 51, 0);
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', {'ptp.Te'});
model.result.create('pg11', 'PlotGroup2D');
model.result('pg11').set('data', 'dset3');
model.result('pg11').setIndex('looplevel', 51, 0);
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('expr', {'V'});
model.result('pg9').feature('surf1').set('colortable', 'Prism');
model.result('pg10').feature('surf1').set('colortable', 'Prism');
model.result('pg11').feature('surf1').set('colortable', 'Dipole');
model.result('pg9').label('Electron Density (ptp)');
model.result('pg10').label('Electron Temperature (ptp)');
model.result('pg11').label('Electric Potential (ptp)');
model.result.create('pg12', 'PlotGroup1D');
model.result('pg12').set('data', 'dset3');
model.result('pg12').create('glob1', 'Global');
model.result('pg12').feature('glob1').set('unit', {''});
model.result('pg12').feature('glob1').set('expr', {'ptp.mct1.V'});
model.result('pg12').feature('glob1').set('descr', {'Electric potential'});
model.result('pg12').feature('glob1').set('legend', true);
model.result('pg12').feature('glob1').set('legendmethod', 'manual');
model.result('pg12').feature('glob1').setIndex('legends', 'V', 0);
model.result('pg12').create('glob2', 'Global');
model.result('pg12').feature('glob2').set('unit', {''});
model.result('pg12').feature('glob2').set('expr', {'ptp.mct1.I'});
model.result('pg12').feature('glob2').set('descr', {'Current'});
model.result('pg12').feature('glob2').set('legend', true);
model.result('pg12').feature('glob2').set('legendmethod', 'manual');
model.result('pg12').feature('glob2').setIndex('legends', 'I', 0);
model.result('pg12').set('twoyaxes', true);
model.result('pg12').setIndex('plotonsecyaxis', true, 0, 1);
model.result('pg12').label('Current and Voltage, Metal Contact 1 (ptp) 1');
model.result('pg9').run;
model.result('pg11').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('plotgroup', 'pg11');
model.result.export('anim1').run;
model.result('pg1').run;

model.title('GEC CCP Reactor, Argon Chemistry');

model.description('This model investigates the GEC (Gaseous Electronics Conference) reference cell in two dimensions using the Plasma, Time Periodic interface. The cell is driven with a fixed power, and results show good agreement with those published in the literature.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('argon_gec_ccp.mph');

model.modelNode.label('Components');

out = model;
