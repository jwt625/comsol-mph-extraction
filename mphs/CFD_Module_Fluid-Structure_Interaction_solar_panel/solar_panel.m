function out = model
%
% solar_panel.m
%
% Model exported on May 26 2025, 21:26 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/CFD_Module/Fluid-Structure_Interaction');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'TurbulentFlowkeps', 'geom1');
model.physics('spf').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);

model.param.set('Utop', '25[m/s]');
model.param.descr('Utop', 'Velocity at top, Couette flow');
model.param.set('yLen', '6[m]');
model.param.descr('yLen', 'Streamwise box length');
model.param.set('yEnd', '4[m]');
model.param.descr('yEnd', 'Streamwise box end point');

model.geom('geom1').run;

model.mesh('mesh1').create('imp1', 'Import');
model.mesh('mesh1').feature('imp1').set('filename', 'solar_panel.mphbin');
model.mesh('mesh1').feature('imp1').importData;
model.mesh('mesh1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.geom('geom1', 2);
model.cpl('aveop1').selection.set([7]);

model.physics('spf').selection.set([1 2]);
model.physics('spf').prop('InconsistentStabilization').set('IsotropicDiffusion', true);
model.physics('spf').prop('InconsistentStabilization').set('delid', '0.5/CFLCMP');
model.physics('spf').feature('init1').set('u_init', {'0' 'flc1hs(z[1/m]-5,5)*Utop' '0'});
model.physics('spf').feature('init1').set('p_init', '0.5[Pa]*(yEnd-y)/yLen');
model.physics('spf').create('pfc1', 'PeriodicFlowCondition', 2);
model.physics('spf').feature('pfc1').selection.set([2 5 134 135]);
model.physics('spf').feature('pfc1').set('pdiff', 'pdiff');
model.physics('spf').create('sym1', 'Symmetry', 2);
model.physics('spf').feature('sym1').selection.set([1 4 319 320]);
model.physics('spf').create('open1', 'OpenBoundary', 2);
model.physics('spf').feature('open1').selection.set([7]);
model.physics('spf').feature('open1').set('f0', 'pdiff*(yEnd-y)/yLen');
model.physics('spf').feature('open1').set('Uref', 'spf.U');
model.physics('spf').create('ge1', 'GlobalEquations', -1);
model.physics('spf').feature('ge1').setIndex('name', 'pdiff', 0, 0);
model.physics('spf').feature('ge1').setIndex('equation', '-aveop1(v)+Utop', 0, 0);
model.physics('spf').feature('ge1').setIndex('initialValueU', '0.5[Pa]', 0, 0);
model.physics('spf').feature('ge1').set('DependentVariableQuantity', 'pressure');
model.physics('spf').feature('ge1').set('SourceTermQuantity', 'velocity');

model.view('view1').camera.set('zoomanglefull', 4.98873);
model.view('view1').camera.setIndex('position', 83.18067, 0);
model.view('view1').camera.setIndex('position', -104.07946, 1);
model.view('view1').camera.setIndex('position', 30.44896, 2);
model.view('view1').camera.setIndex('target', '1.50', 0);
model.view('view1').camera.setIndex('target', '1.0', 1);
model.view('view1').camera.set('target', {'1.50' '1.0' '3.0'});
model.view('view1').camera.setIndex('up', -0.1172, 0);
model.view('view1').camera.setIndex('up', 0.16472, 1);
model.view('view1').camera.setIndex('up', 0.9793517589569092, 2);
model.view('view1').camera.set('rotationpoint', {'1.500' '1.0' '3.00'});
model.view('view1').camera.setIndex('viewoffset', 0.003835, 0);
model.view('view1').camera.set('viewoffset', [0.003835 0.009164]);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u' 'comp1_ODE1'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_ODE1'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_ODE1'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_k' 'comp1_ep'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.45);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, turbulence variables (spf)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'i2');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Turbulence Variables');
model.sol('sol1').feature('s1').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s1').feature('se1').set('subinitcfl', 3);
model.sol('sol1').feature('s1').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s1').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s1').feature('se1').set('subkdpid', 0.15);
model.sol('sol1').feature('s1').feature('se1').set('subkipid', 0.15);
model.sol('sol1').feature('s1').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s1').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s1').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s1').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s1').feature('se1').set('maxsegiter', 400);
model.sol('sol1').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.k 0 comp1.ep 0 ');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s1').create('d2', 'Direct');
model.sol('sol1').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d2').label('Direct, turbulence variables (spf)');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Velocity (spf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('slc1', 'Slice');
model.result('pg1').feature('slc1').label('Slice');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('smooth', 'internal');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([3 9 10 11 14 17 18 19 22 23 24 25 26 27 28 30 31 33 34 35 38 41 42 43 45 46 47 53 54 55 57 60 63 66 69 99 100 101 102 104 105 106 112 113 114 116 117 120 121 122 123 127 128 130 131 132 133 141 142 143 146 147 148 150 152 153 154 156 157 159 160 161 163 164 166 167 168 169 170 171 172 173 174 176 177 179 180 181 183 184 185 187 189 192 194 195 196 197 198 200 202 203 204 205 206 207 208 209 210 211 212 214 215 216 218 219 222 223 224 225 226 229 231 234 235 236 241 242 245 246 247 248 249 254 257 258 259 263 264 265 267 268 270 271 272 273 274 276 277 278 279 280 281 282 284 285 286 287 288 289 290 292 293 294 295 296 297 298 300 301 302 303 304 305 307 308 309 310 311 312 313 314 315 316 317 318]);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Pressure (spf)');
model.result('pg2').set('data', 'surf1');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'surf1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond1/pg4');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('expr', 'p');
model.result('pg2').feature('surf1').set('colortable', 'Dipole');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature('surf1').feature.create('tran1', 'Transparency');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Wall Resolution (spf)');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond1/pg3');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Wall Resolution');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'spf.Delta_wPlus');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg1').run;
model.result.setOnlyPlotWhenRequested(true);
model.result('pg3').run;

model.view('view1').set('showgrid', false);
model.view.duplicate('view2', 'view1');
model.view('view2').camera.set('zoomanglefull', 18.111951);
model.view('view2').camera.setIndex('position', 105.75335, 0);
model.view('view2').camera.setIndex('position', -27.82139, 1);
model.view('view2').camera.setIndex('position', '47.929550', 2);
model.view('view2').camera.setIndex('target', 1.5000762, 0);
model.view('view2').camera.setIndex('target', '2.085700', 1);
model.view('view2').camera.setIndex('target', '10.000', 2);
model.view('view2').camera.setIndex('up', -0.319806, 0);
model.view('view2').camera.setIndex('up', '0.082280', 1);
model.view('view2').camera.setIndex('up', 0.9439024, 2);
model.view('view2').camera.set('rotationpoint', {'1.500' '2.085808' '3'});
model.view('view2').camera.setIndex('rotationpoint', '10.00', 2);
model.view('view2').camera.setIndex('viewoffset', -0.0134036, 0);
model.view('view2').camera.set('viewoffset', {'-0.0134036' '-0.0023040'});

model.result.dataset.create('dset2', 'Solution');
model.result.dataset('dset2').selection.geom('geom1', 1);
model.result.dataset('dset2').selection.geom('geom1', 1);
model.result.dataset('dset2').selection.set([1 4 198 200]);
model.result('pg1').feature('slc1').set('quickxmethod', 'coord');
model.result('pg1').feature('slc1').set('quickx', '1e-3');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('data', 'surf1');
model.result('pg1').feature('surf1').set('expr', '1');
model.result('pg1').feature('surf1').set('coloring', 'uniform');
model.result('pg1').feature('surf1').set('color', 'gray');
model.result('pg1').create('arwl1', 'ArrowLine');
model.result('pg1').feature('arwl1').set('data', 'dset2');
model.result('pg1').feature('arwl1').set('scaleactive', true);
model.result('pg1').feature('arwl1').set('scale', 0.09);
model.result('pg1').feature('arwl1').set('arrowcount', 100);
model.result('pg1').feature('arwl1').set('color', 'black');
model.result('pg1').run;

model.view('view2').camera.set('zoomanglefull', 13.8744935);
model.view('view2').camera.setIndex('position', 28.756454, 0);
model.view('view2').camera.setIndex('position', -24.94273, 1);
model.view('view2').camera.setIndex('position', 11.989544, 2);
model.view('view2').camera.setIndex('target', 1.500087, 0);
model.view('view2').camera.set('target', [1.500087 0.982494 10]);
model.view('view2').camera.setIndex('target', 1.63173, 2);
model.view('view2').camera.setIndex('up', -0.196717, 0);
model.view('view2').camera.setIndex('up', 0.178311, 1);
model.view('view2').camera.setIndex('up', 0.964093, 2);
model.view('view2').camera.setIndex('rotationpoint', '1.50010', 0);
model.view('view2').camera.set('rotationpoint', {'1.50010' '0.982500' '10'});
model.view('view2').camera.setIndex('rotationpoint', 1.63173, 2);
model.view('view2').camera.setIndex('viewoffset', -0.059072, 0);
model.view('view2').camera.set('viewoffset', [-0.059072 0.003542]);

model.result.dataset.create('cpl1', 'CutPlane');
model.result.dataset('cpl1').set('data', 'dset2');
model.result.dataset('cpl1').set('quickplane', 'zx');
model.result.dataset('cpl1').set('quicky', '2.0');
model.result('pg2').feature('surf1').feature.remove('tran1');
model.result('pg2').create('arws1', 'ArrowSurface');
model.result('pg2').feature('arws1').set('data', 'cpl1');
model.result('pg2').feature('arws1').set('expr', {'u' '0' 'w'});
model.result('pg2').feature('arws1').set('color', 'black');
model.result('pg2').feature('arws1').set('arrowcount', 800);
model.result('pg2').run;
model.result.duplicate('pg4', 'pg2');
model.result('pg4').label('Streamline plot');
model.result('pg4').feature('surf1').set('expr', '1');
model.result('pg4').feature('surf1').set('coloring', 'uniform');
model.result('pg4').feature('surf1').set('color', 'gray');
model.result('pg4').create('str1', 'Streamline');
model.result('pg4').feature('str1').set('data', 'dset2');
model.result('pg4').feature('str1').set('startmethod', 'coord');
model.result('pg4').feature('str1').set('xcoord', '0.5*1^range(1,7), 1.0*1^range(1,7), 1.75*1^range(1,7)');
model.result('pg4').feature('str1').set('ycoord', -2);
model.result('pg4').feature('str1').set('zcoord', 'range(0.5,3/6,3.5), range(0.5,3/6,3.5), range(0.5,3/6,3.5)');
model.result('pg4').feature('str1').set('linetype', 'ribbon');
model.result('pg4').feature('str1').set('widthscaleactive', true);
model.result('pg4').feature('str1').set('widthscale', 0.05);
model.result('pg4').feature('str1').create('col1', 'Color');
model.result('pg4').feature('str1').feature('col1').set('expr', 'k/(0.5*25^2)');
model.result('pg4').feature('str1').feature('col1').set('colortable', 'WaveLight');
model.result('pg4').run;

model.view.duplicate('view3', 'view2');
model.view('view3').camera.set('zoomanglefull', '13.026120');
model.view('view3').camera.setIndex('position', -21.9256687, 0);
model.view('view3').camera.setIndex('position', 31.06747055, 1);
model.view('view3').camera.setIndex('position', 9.904746055, 2);
model.view('view3').camera.setIndex('target', 1.500137, 0);
model.view('view3').camera.setIndex('target', '0.9825000', 1);
model.view('view3').camera.setIndex('target', 1.631793, 2);
model.view('view3').camera.setIndex('up', 0.1274994, 0);
model.view('view3').camera.setIndex('up', -0.1694078, 1);
model.view('view3').camera.setIndex('up', 0.977248, 2);
model.view('view3').camera.setIndex('rotationpoint', '1.500', 0);
model.view('view3').camera.setIndex('rotationpoint', '0.982500', 1);
model.view('view3').camera.setIndex('rotationpoint', '1.631740', 2);
model.view('view3').camera.setIndex('viewoffset', -0.03788, 0);
model.view('view3').camera.set('viewoffset', [-0.03788 -0.0057357121]);
model.view.duplicate('view4', 'view3');
model.view('view4').camera.set('zoomanglefull', 12.5);
model.view('view4').camera.setIndex('position', 33, 0);
model.view('view4').camera.setIndex('position', -24, 1);
model.view('view4').camera.set('position', [33 -24 13]);
model.view('view4').camera.setIndex('target', 0, 0);
model.view('view4').camera.setIndex('target', 1, 1);
model.view('view4').camera.set('target', [0 1 1.9]);
model.view('view4').camera.setIndex('up', -0.2, 0);
model.view('view4').camera.setIndex('up', 0.2, 1);
model.view('view4').camera.set('up', [-0.2 0.2 1]);
model.view('view4').camera.setIndex('rotationpoint', 0, 0);
model.view('view4').camera.setIndex('rotationpoint', 1, 1);
model.view('view4').camera.set('rotationpoint', [0 1 2]);
model.view('view4').camera.setIndex('viewoffset', -0.075, 0);
model.view('view4').camera.set('viewoffset', [-0.075 0.04]);
model.view('view4').light('lgt1').set('intensity', 0.6);
model.view('view4').light('lgt3').set('intensity', 0.4);

model.result('pg4').run;

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Walls');
model.selection('sel1').geom(2);
model.selection('sel1').set([3 9 10 11 14 17 18 19 22 23 24 25 26 27 28 30 31 33 34 35 38 41 42 43 45 46 47 53 54 55 57 60 63 66 69 99 100 101 102 104 105 106 112 113 114 116 117 120 121 122 123 127 128 130 131 132 133 141 142 143 146 147 148 150 152 153 154 156 157 159 160 161 163 164 166 167 168 169 170 171 172 173 174 176 177 179 180 181 183 184 185 187 189 192 194 195 196 197 198 200 202 203 204 205 206 207 208 209 210 211 212 214 215 216 218 219 222 223 224 225 226 229 231 234 235 236 241 242 245 246 247 248 249 254 257 258 259 263 264 265 267 268 270 271 272 273 274 276 277 278 279 280 281 282 284 285 286 287 288 289 290 292 293 294 295 296 297 298 300 301 302 303 304 305 307 308 309 310 311 312 313 314 315 316 317 318]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Supports');
model.selection('sel2').geom(2);
model.selection('sel2').set([29 58 93 175 182]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Symmetry');
model.selection('sel3').geom(2);
model.selection('sel3').set([8 12 15 20 32 36 39 44 48 51 56 59 62 65 68 78 81 84 91 95 103 107 110 115 118 124 129]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Structural steel');
model.selection('sel4').set([4 5 6 8 9 11 12 13 14 15 16 17 21 22 24 25 27 33 34 35 40 42 45 47]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Aluminum');
model.selection('sel5').set([3 7 10 18 19 20 23 26 28 30 36 38 41 43 46]);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Glass');
model.selection('sel6').set([29 31 32 37 39 44]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Solid Domains');
model.selection('uni1').set('input', {'sel4' 'sel5' 'sel6'});
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Solid Domains except Glass');
model.selection('uni2').set('input', {'sel4' 'sel5'});
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Exterior Boundaries to Solid Domains');
model.selection('adj1').set('input', {'uni1'});
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Floor and Solar Panel Base');
model.selection('dif1').set('entitydim', 2);
model.selection('dif1').set('add', {'sel1'});
model.selection('dif1').set('subtract', {'adj1'});

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study('std1').feature('stat').setSolveFor('/physics/solid', true);

model.physics('solid').selection.named('uni1');
model.physics('solid').feature('lemm1').create('sf1', 'Safety', 3);
model.physics('solid').feature('lemm1').feature('sf1').selection.named('uni2');
model.physics('solid').feature('lemm1').create('sf2', 'Safety', 3);
model.physics('solid').feature('lemm1').feature('sf2').selection.named('sel6');
model.physics('solid').feature('lemm1').feature('sf2').set('FailureCriterion', 'Rankine');

model.multiphysics.create('fsi1', 'FluidStructureInteractionBC', 'geom1', 2);

model.study('std1').feature('stat').setSolveFor('/multiphysics/fsi1', true);

model.multiphysics('fsi1').selection.all;
model.multiphysics('fsi1').set('Fluid_physics', 'spf');
model.multiphysics('fsi1').set('Structure_physics', 'solid');

model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'Incompressible');
model.physics('solid').prop('ShapeProperty').set('order_displacement', '2');

model.multiphysics('fsi1').set('CouplingType', 'FluidLoading');

model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat2').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat2').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat2').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat2').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat2').propertyGroup.create('Swift', 'Swift');
model.material('mat2').propertyGroup.create('Voce', 'Voce');
model.material('mat2').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat2').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat2').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup.create('Norton', 'Norton');
model.material('mat2').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat2').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat2').label('Structural steel');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat2').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat2').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat2').set('noise', true);
model.material('mat2').set('fresnel', 0.9);
model.material('mat2').set('roughness', 0.3);
model.material('mat2').set('metallic', 0);
model.material('mat2').set('pearl', 0);
model.material('mat2').set('diffusewrap', 0);
model.material('mat2').set('clearcoat', 0);
model.material('mat2').set('reflectance', 0);
model.material('mat2').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat2').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat2').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat2').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat2').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat2').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat2').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat2').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat2').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat2').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat2').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat2').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat2').propertyGroup('Enu').addInput('temperature');
model.material('mat2').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat2').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat2').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat2').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat2').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat2').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat2').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat2').propertyGroup('Ludwik').addInput('temperature');
model.material('mat2').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat2').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat2').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat2').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat2').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat2').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat2').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat2').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat2').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat2').propertyGroup('Voce').addInput('temperature');
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat2').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat2').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat2').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat2').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat2').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat2').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat2').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat2').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat2').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat2').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat2').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat2').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat2').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat2').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat2').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat3').label('Aluminum');
model.material('mat3').set('family', 'aluminum');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat3').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.33');
model.material('mat3').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat3').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat3').propertyGroup('Murnaghan').set('n', '-350[GPa]');
model.material('mat1').selection.set([1 2]);
model.material('mat2').selection.named('sel4');
model.material('mat2').propertyGroup.create('IsotropicStrengthParameters', 'Isotropic_strength_parameters');
model.material('mat2').propertyGroup('IsotropicStrengthParameters').set('sigmat', {'250[MPa]'});
model.material('mat3').selection.named('sel5');
model.material('mat3').propertyGroup.create('IsotropicStrengthParameters', 'Isotropic_strength_parameters');
model.material('mat3').propertyGroup('IsotropicStrengthParameters').set('sigmat', {'270[MPa]'});
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').label('Glass');
model.material('mat4').selection.named('sel6');
model.material('mat4').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat4').propertyGroup('Enu').set('E', {'35e8'});
model.material('mat4').propertyGroup('Enu').set('nu', {'0.33'});
model.material('mat4').propertyGroup('def').set('density', {'1000'});
model.material('mat4').propertyGroup.create('IsotropicStrengthParameters', 'Isotropic_strength_parameters');
model.material('mat4').propertyGroup('IsotropicStrengthParameters').set('sigmat', {'45[MPa]'});
model.material('mat4').propertyGroup('IsotropicStrengthParameters').set('sigmac', {'45[MPa]'});

model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.named('sel2');
model.physics('solid').create('sym1', 'SymmetrySolid', 2);
model.physics('solid').feature('sym1').selection.named('sel3');

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/spf', true);
model.study('std2').feature('stat').setSolveFor('/physics/solid', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/fsi1', true);
model.study('std2').setGenPlots(false);
model.study('std2').feature('stat').setEntry('activate', 'spf', false);
model.study('std2').feature('stat').set('usesol', true);
model.study('std2').feature('stat').set('notsolmethod', 'sol');
model.study('std2').feature('stat').set('notstudy', 'std1');

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('s1').feature('i1').active(true);
model.sol('sol2').runAll;

model.result.dataset.create('dset4', 'Solution');
model.result.dataset('dset4').label('Study 2/Solution 2, Solid Domains');
model.result.dataset('dset4').set('solution', 'sol2');
model.result.dataset('dset4').selection.geom('geom1', 3);
model.result.dataset('dset4').selection.named('uni1');
model.result.dataset.create('mir1', 'Mirror3D');
model.result.dataset('mir1').label('Mirror 3D, Solution 1');
model.result.dataset.create('mir2', 'Mirror3D');
model.result.dataset('mir2').label('Mirror 3D, Solid Domains');
model.result.dataset('mir2').set('data', 'dset4');
model.result.dataset.create('surf2', 'Surface');
model.result.dataset('surf2').label('Floor and Solar Panel Base');
model.result.dataset('surf2').selection.named('dif1');
model.result.dataset.create('mir3', 'Mirror3D');
model.result.dataset('mir3').label('Mirror 3D, Floor and Solar Panel Base');
model.result.dataset('mir3').set('data', 'surf2');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Stress (solid)');
model.result('pg5').set('data', 'dset3');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', 'solid.mises');
model.result('pg5').feature('surf1').set('colortable', 'RainbowLight');
model.result('pg5').feature('surf1').create('def1', 'Deform');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Displacement magnitude and streamlines');
model.result('pg6').set('edges', false);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('data', 'mir2');
model.result('pg6').feature('surf1').set('expr', 'solid.disp');
model.result('pg6').feature('surf1').set('descr', 'Displacement magnitude');
model.result('pg6').feature('surf1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg6').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg6').create('str1', 'Streamline');
model.result('pg6').feature('str1').set('data', 'mir1');
model.result('pg6').feature('str1').set('startmethod', 'coord');
model.result('pg6').feature('str1').set('xcoord', '-1.75*1^range(1,7), -0.5*1^range(1,7), 0.5*1^range(1,7), 1.75*1^range(1,7)');
model.result('pg6').feature('str1').set('ycoord', -2);
model.result('pg6').feature('str1').set('zcoord', 'range(0.5,3/6,3.5), range(0.5,3/6,3.5), range(0.5,3/6,3.5), range(0.5,3/6,3.5)');
model.result('pg6').feature('str1').set('linetype', 'ribbon');
model.result('pg6').feature('str1').set('widthexpr', '0.03');
model.result('pg6').feature('str1').set('widthscaleactive', true);
model.result('pg6').feature('str1').create('col1', 'Color');
model.result('pg6').feature('str1').feature('col1').set('colortable', 'WaveLight');
model.result('pg6').create('surf2', 'Surface');
model.result('pg6').feature('surf2').set('data', 'mir3');
model.result('pg6').feature('surf2').set('expr', '0');
model.result('pg6').feature('surf2').set('titletype', 'none');
model.result('pg6').feature('surf2').set('inheritplot', 'surf1');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset4');
model.result('pg7').set('edges', false);
model.result('pg7').create('vol1', 'Volume');
model.result('pg7').feature('vol1').set('expr', 'solid.lemm1.sf1.s_f');
model.result('pg7').feature('vol1').set('descr', 'von Mises safety factor');
model.result('pg7').feature('vol1').set('rangecoloractive', true);
model.result('pg7').feature('vol1').set('rangecolormax', 2000);
model.result('pg7').feature('vol1').set('colortable', 'RainbowLight');
model.result('pg7').feature('vol1').set('colortabletrans', 'reverse');
model.result('pg7').create('mmv1', 'MaxMinVolume');
model.result('pg7').feature('mmv1').set('expr', 'solid.lemm1.sf1.s_f');
model.result('pg7').feature('mmv1').set('descr', 'von Mises safety factor');
model.result('pg7').feature('mmv1').set('display', 'min');
model.result('pg7').feature('mmv1').set('backgroundcolor', 'white');
model.result('pg7').label('Safety factor, ductile materials');
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'dset4');
model.result('pg8').set('edges', false);
model.result('pg8').create('vol1', 'Volume');
model.result('pg8').feature('vol1').set('expr', 'solid.lemm1.sf2.s_f');
model.result('pg8').feature('vol1').set('descr', 'Rankine safety factor');
model.result('pg8').feature('vol1').set('rangecoloractive', true);
model.result('pg8').feature('vol1').set('rangecolormax', 2000);
model.result('pg8').feature('vol1').set('colortable', 'RainbowLight');
model.result('pg8').feature('vol1').set('colortabletrans', 'reverse');
model.result('pg8').create('mmv1', 'MaxMinVolume');
model.result('pg8').feature('mmv1').set('expr', 'solid.lemm1.sf2.s_f');
model.result('pg8').feature('mmv1').set('descr', 'Rankine safety factor');
model.result('pg8').feature('mmv1').set('display', 'min');
model.result('pg8').feature('mmv1').set('backgroundcolor', 'white');
model.result('pg8').label('Safety factor, glass');
model.result('pg8').run;

model.study('std1').feature('stat').setEntry('activate', 'solid', false);
model.study('std1').feature('stat').setEntry('activateCoupling', 'fsi1', false);

model.title('Solar Panel in Periodic Flow');

model.description(['This model exemplifies the analysis of flow around a solar panel and the corresponding structural displacement due to the strong wind load. The solar panel studied is located in a regularly spaced array of identical panels, implying that periodic flow conditions can be applied in the streamwise direction. The model solves for the flow field for a free stream velocity of 25' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'm/s and computes the resulting structural stresses and displacements.' newline  newline 'NOTE: The model requires the CFD Module and the Structural Mechanics Module.']);

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('solar_panel.mph');

model.modelNode.label('Components');

out = model;
