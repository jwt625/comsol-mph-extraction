function out = model
%
% turbulent_free_porous.m
%
% Model exported on May 26 2025, 21:26 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/CFD_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'TurbulentFlowlowRekeps', 'geom1');
model.physics('spf').model('comp1');

model.study.create('std1');
model.study('std1').create('wdi', 'WallDistanceInitialization');
model.study('std1').feature('wdi').set('solnum', 'auto');
model.study('std1').feature('wdi').set('notsolnum', 'auto');
model.study('std1').feature('wdi').set('outputmap', {});
model.study('std1').feature('wdi').set('ngenAUX', '1');
model.study('std1').feature('wdi').set('goalngenAUX', '1');
model.study('std1').feature('wdi').set('ngenAUX', '1');
model.study('std1').feature('wdi').set('goalngenAUX', '1');
model.study('std1').feature('wdi').setSolveFor('/physics/spf', true);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('H', '0.03[m]', 'Clear channel height');
model.param.set('ReH', '5500', 'Bulk Reynolds number in clear channel');
model.param.set('epsilon_p_i', '0.95', 'Porosity');
model.param.set('Da_i', '1.9e-4', 'Darcy number');
model.param.set('kappa_i', 'Da_i*H^2', 'Permeability');
model.param.set('cF_i', '0.14', 'Forchheimer parameter');
model.param.set('rho_i', '1[kg/m^3]', 'Density');
model.param.set('mu_i', 'rho_i*nu_i', 'Dynamic viscosity');
model.param.set('nu_i', '1e-5 [m^2/s]', 'Kinematic viscosity');
model.param.set('Ub', 'ReH*mu_i/(rho_i*H)', 'Bulk velocity in clear channel');
model.param.set('H_E95', '0.03[m]', 'E95 height');
model.param.set('H_06', 'round(sqrt(8.7e-8/(1.04e-4)),3)[m]', '#06 height');
model.param.set('L', '0.2*H', 'Channel length');
model.param.set('CL', '0.5*L', 'Cut line position');
model.param.set('Nmesh', '160', 'Number of mesh elements');
model.param.set('cUu', '0.25', 'Interpolation coefficient in Upper Estimate w^2=cUu*u^2+cVv*v^2');
model.param.set('cUv', '1', 'Interpolation coefficient in Upper Estimate w^2=cUu*u^2+cVv*v^2');
model.param.set('cLu', '0.1', 'Interpolation coefficient in Lower Estimate w^2=cLu*u^2+cLv*v^2');
model.param.set('cLv', '1', 'Interpolation coefficient in Lower Estimate w^2=cLu*u^2+cLv*v^2');
model.param.set('manual_x_max', '3.1', 'Manual x max limit');

model.view('view1').set('showlabels', true);

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'L' 'H'});
model.geom('geom1').feature.duplicate('r2', 'r1');
model.geom('geom1').feature('r2').set('pos', {'0' '-H'});
model.geom('geom1').run('r2');
model.geom('geom1').create('pt1', 'Point');
model.geom('geom1').feature('pt1').setIndex('p', 'CL', 0);
model.geom('geom1').feature.duplicate('pt2', 'pt1');
model.geom('geom1').feature('pt2').setIndex('p', 'H', 1);
model.geom('geom1').runPre('fin');

model.cpl.create('aveop1', 'Average', 'geom1');

model.geom('geom1').run;

model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.geom('geom1', 1);
model.cpl('aveop1').selection.set([9]);

model.probe.create('pdom1', 'DomainPoint');
model.probe('pdom1').model('comp1');
model.probe('pdom1').setIndex('coords2', 'CL', 0);
model.probe('pdom1').setIndex('coords2', 'H', 1);
model.probe('pdom1').set('bndsnap2', true);
model.probe('pdom1').feature('ppb1').label('Friction at the solid wall');
model.probe('pdom1').feature('ppb1').set('probename', 'friction_s');
model.probe('pdom1').feature('ppb1').set('expr', '-spf.nu*ppr(uy)');
model.probe.duplicate('pdom2', 'pdom1');
model.probe('pdom2').setIndex('coords2', 0, 1);
model.probe('pdom2').feature('ppb2').label('Friction at the porous interface');
model.probe('pdom2').feature('ppb2').set('probename', 'friction_p');
model.probe('pdom2').feature('ppb2').set('expr', 'side(2,(spf.nuT+spf.nu)*pprint(uy))');

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('shear_stress', 'spf.nuT*ppr(uy)', 'Shear stress');
model.variable('var1').set('Cs1000', '2000*friction_s/Ub^2', 'Friction coefficient (x1000) at the solid wall');
model.variable('var1').set('Cp1000', '2000*friction_p/Ub^2', 'Friction coefficient (x1000) at the porous interface');
model.variable('var1').set('utau_s', 'sqrt(friction_s)', 'Friction velocity at the solid wall');
model.variable('var1').set('utau_p', 'sqrt(friction_p)', 'Friction velocity at the porous interface');
model.variable('var1').set('Retp', 'utau_p*H/nu_i', 'Friction Reynolds number based on utau_p');
model.variable('var1').set('Rek', 'utau_p*sqrt(kappa_i)/nu_i', 'Permeability Reynolds number');
model.variable('var1').set('C_help_var', '2000*(nu_i/sqrt(kappa_i)/Ub)^2', 'Help variable for calculating experimental Cf and Cp');
model.variable('var1').set('y_H', 'y/H', 'Plot coordinate');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('spf').prop('PhysicalModelProperty').set('EnablePorousMediaDomains', true);
model.physics('spf').prop('TurbulenceModelProperty').set('WallTreatment', 'LowReynoldsNumber');
model.physics('spf').feature('fp1').set('rho_mat', 'userdef');
model.physics('spf').feature('fp1').set('rho', 'rho_i');
model.physics('spf').feature('fp1').set('mu_mat', 'userdef');
model.physics('spf').feature('fp1').set('mu', 'mu_i');
model.physics('spf').feature('fp1').set('LengthScaleSpecification', 'Manual');
model.physics('spf').feature('fp1').set('lref', 'H');
model.physics('spf').feature('init1').set('u_init', {'Ub*cos(2*pi*y/H)' '0' '0'});
model.physics('spf').create('porous1', 'PorousMedium', 2);
model.physics('spf').feature('porous1').selection.set([1]);
model.physics('spf').feature('porous1').feature('fluid1').set('rho_mat', 'userdef');
model.physics('spf').feature('porous1').feature('fluid1').set('rho', 'rho_i');
model.physics('spf').feature('porous1').feature('fluid1').set('mu_mat', 'userdef');
model.physics('spf').feature('porous1').feature('fluid1').set('mu', 'mu_i');
model.physics('spf').feature('porous1').feature('pm1').set('epsilon_p_mat', 'userdef');
model.physics('spf').feature('porous1').feature('pm1').set('epsilon_p', 'epsilon_p_i');
model.physics('spf').feature('porous1').feature('pm1').set('kappa_mat', 'userdef');
model.physics('spf').feature('porous1').feature('pm1').set('kappa', {'kappa_i' '0' '0' '0' 'kappa_i' '0' '0' '0' 'kappa_i'});
model.physics('spf').feature('porous1').feature('pm1').set('cf', 'cF_i');
model.physics('spf').create('pfc1', 'PeriodicFlowCondition', 1);
model.physics('spf').feature('pfc1').selection.set([1 3 8 9]);
model.physics('spf').feature('pfc1').set('PeriodicFlowConditionUserInput', 'MassFlow');
model.physics('spf').feature('pfc1').set('mf', 'rho_i*Ub*H*1[m]');
model.physics('spf').create('prpc1', 'PressurePointConstraint', 0);
model.physics('spf').feature('prpc1').selection.set([4]);
model.physics('spf').selection.set([2]);

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([4 5 6 7]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 8);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([3 9]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 'Nmesh/2');
model.mesh('mesh1').feature('map1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([1 8]);
model.mesh('mesh1').feature('map1').feature('dis3').set('numelem', 'Nmesh/2');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').set('smoothtransition', false);
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([2 5 7]);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhtot');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhtot', '3*H/Nmesh');
model.mesh('mesh1').feature.duplicate('bl2', 'bl1');
model.mesh('mesh1').feature('bl2').feature('blp').selection.set([4 6]);
model.mesh('mesh1').feature('bl2').feature('blp').set('blnlayers', 12);
model.mesh('mesh1').feature('bl2').feature('blp').set('blhtot', '4*H/Nmesh');
model.mesh('mesh1').run;

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'H', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'H', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'ReH', 0);
model.study('std1').feature('param').setIndex('plistarr', '5500 5400 9500', 0);
model.study('std1').feature('param').setIndex('punit', 1, 0);
model.study('std1').feature('param').setIndex('pname', 'H', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'm', 1);
model.study('std1').feature('param').setIndex('pname', 'H', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'm', 1);
model.study('std1').feature('param').setIndex('pname', 'H', 1);
model.study('std1').feature('param').setIndex('plistarr', 'H_E95 H_06 H_06', 1);
model.study('std1').feature('param').setIndex('punit', 'm', 1);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'wdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'wdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-6);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, wall distance (spf)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, wall distance (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('se1', 'Segregated');
model.sol('sol1').feature('s2').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u' 'comp1_spf_pfc1_delta_p'});
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('segvar', {'comp1_k' 'comp1_ep'});
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subdamp', 0.45);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s2').create('d2', 'Direct');
model.sol('sol1').feature('s2').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d2').label('Direct, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').label('Turbulence Variables');
model.sol('sol1').feature('s2').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s2').feature('se1').set('subinitcfl', 2);
model.sol('sol1').feature('s2').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s2').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s2').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s2').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s2').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s2').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s2').feature('se1').set('maxsegiter', 300);
model.sol('sol1').feature('s2').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s2').feature('se1').feature('ll1').set('lowerlimit', 'comp1.k 0 comp1.ep 0 ');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_pfc1_delta_p'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_pfc1_delta_p'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('AMG, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'ReH' 'H'});
model.batch('p1').set('plistarr', {'5500 5400 9500' 'H_E95 H_06 H_06'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {'pdom1' 'pdom2'});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol3');
model.sol('sol3').study('std1');
model.sol('sol3').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol3');

model.probe('pdom1').genResult('none');
model.probe('pdom2').genResult('none');

model.batch('p1').run('compute');

model.result.dataset('dset3').set('geom', 'geom1');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Velocity (spf)');
model.result('pg2').set('data', 'dset3');
model.result('pg2').setIndex('looplevel', 3, 0);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset3');
model.result('pg2').setIndex('looplevel', 3, 0);
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Pressure (spf)');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 3, 0);
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 3, 0);
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg3').feature.create('con1', 'Contour');
model.result('pg3').feature('con1').label('Contour');
model.result('pg3').feature('con1').set('showsolutionparams', 'on');
model.result('pg3').feature('con1').set('expr', 'p');
model.result('pg3').feature('con1').set('number', 40);
model.result('pg3').feature('con1').set('levelrounding', false);
model.result('pg3').feature('con1').set('smooth', 'internal');
model.result('pg3').feature('con1').set('showsolutionparams', 'on');
model.result('pg3').feature('con1').set('data', 'parent');
model.result.dataset.create('edg1', 'Edge2D');
model.result.dataset('edg1').label('Exterior Walls');
model.result.dataset('edg1').set('data', 'dset3');
model.result.dataset('edg1').selection.geom('geom1', 1);
model.result.dataset('edg1').selection.set([4 5 6 7]);
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Wall Resolution (spf)');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 3, 0);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 3, 0);
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond2/pcond4/pg2');
model.result('pg4').feature.create('line1', 'Line');
model.result('pg4').feature('line1').label('Wall Resolution');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('expr', 'spf.Delta_wPlus');
model.result('pg4').feature('line1').set('linetype', 'tube');
model.result('pg4').feature('line1').set('smooth', 'internal');
model.result('pg4').feature('line1').set('showsolutionparams', 'on');
model.result('pg4').feature('line1').set('data', 'parent');
model.result('pg4').feature('line1').feature.create('hght1', 'Height');
model.result('pg4').feature('line1').feature('hght1').label('Height Expression');
model.result('pg4').feature('line1').feature('hght1').set('heightdata', 'expr');
model.result('pg4').feature('line1').feature('hght1').set('expr', 'spf.WRHeightExpr');
model.result('pg2').run;

model.sol('sol3').copySolution('sol7');
model.sol('sol7').label('Clear channel flow');

model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').label('CL clear');
model.result.dataset('cln1').set('data', 'dset5');
model.result.dataset('cln1').setIndex('genpoints', 'CL', 0, 0);
model.result.dataset('cln1').setIndex('genpoints', 'CL', 1, 0);
model.result.dataset('cln1').setIndex('genpoints', '-H', 0, 1);
model.result.dataset('cln1').setIndex('genpoints', 'H', 1, 1);

model.geom('geom1').run;

model.physics('spf').selection.set([1 2]);
model.physics('spf').create('ge1', 'GlobalEquations', -1);
model.physics('spf').feature('ge1').setIndex('name', 'P_driving', 0, 0);
model.physics('spf').feature('ge1').setIndex('equation', 'aveop1(u)-Ub', 0, 0);
model.physics('spf').feature('ge1').set('CustomDependentVariableUnit', '1');
model.physics('spf').feature('ge1').set('DependentVariableQuantity', 'none');
model.physics('spf').feature('ge1').setIndex('CustomDependentVariableUnit', 'Pa', 0, 0);
model.physics('spf').feature('ge1').set('CustomSourceTermUnit', '1');
model.physics('spf').feature('ge1').set('SourceTermQuantity', 'none');
model.physics('spf').feature('ge1').setIndex('CustomSourceTermUnit', 'm/s', 0, 0);
model.physics('spf').feature('pfc1').set('PeriodicFlowConditionUserInput', 'PressureDifference');
model.physics('spf').feature('pfc1').set('pdiff', 'P_driving');

model.study('std1').feature('param').set('plistarr', {'5500 5400 9500' 'H_E95 H_06 H_06' '0.95 0.8 0.8' '0.14 0.095 0.095' '1.9e-4 1.04e-4 1.04e-4'});
model.study('std1').feature('param').set('pname', {'ReH' 'H' 'epsilon_p_i' 'cF_i' 'Da_i'});

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);

model.sol('sol1').study('std1');
model.sol('sol2').copySolution('sol11');

model.result.dataset('dset2').set('solution', 'none');

model.sol('sol1').feature.remove('s2');
model.sol('sol1').feature.remove('v2');
model.sol('sol1').feature.remove('st2');
model.sol('sol1').feature.remove('su1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol11').copySolution('sol2');
model.sol.remove('sol11');
model.sol('sol2').label('Solution Store 1');

model.result.dataset.remove('dset7');

model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'wdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'wdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-6);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, wall distance (spf)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, wall distance (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').feature('su1').set('sol', 'sol2');
model.sol('sol1').feature('su1').label('Solution Store 1');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('se1', 'Segregated');
model.sol('sol1').feature('s2').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u' 'comp1_ODE1'});
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('segvar', {'comp1_k' 'comp1_ep'});
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subdamp', 0.45);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s2').create('d2', 'Direct');
model.sol('sol1').feature('s2').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d2').label('Direct, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').label('Turbulence Variables');
model.sol('sol1').feature('s2').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s2').feature('se1').set('subinitcfl', 2);
model.sol('sol1').feature('s2').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s2').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s2').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s2').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s2').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s2').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s2').feature('se1').set('maxsegiter', 300);
model.sol('sol1').feature('s2').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s2').feature('se1').feature('ll1').set('lowerlimit', 'comp1.k 0 comp1.ep 0 ');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_ODE1'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_ODE1'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('AMG, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature.remove('fcDef');

model.result.dataset('dset2').set('solution', 'sol2');

model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);

model.sol('sol1').study('std1');
model.sol('sol2').copySolution('sol11');

model.result.dataset('dset2').set('solution', 'none');

model.sol('sol1').feature.remove('s2');
model.sol('sol1').feature.remove('v2');
model.sol('sol1').feature.remove('st2');
model.sol('sol1').feature.remove('su1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol11').copySolution('sol2');
model.sol.remove('sol11');
model.sol('sol2').label('Solution Store 1');

model.result.dataset.remove('dset7');

model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'wdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'wdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-6);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, wall distance (spf)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, wall distance (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').feature('su1').set('sol', 'sol2');
model.sol('sol1').feature('su1').label('Solution Store 1');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('se1', 'Segregated');
model.sol('sol1').feature('s2').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u' 'comp1_ODE1'});
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('segvar', {'comp1_k' 'comp1_ep'});
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subdamp', 0.45);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s2').create('d2', 'Direct');
model.sol('sol1').feature('s2').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d2').label('Direct, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').label('Turbulence Variables');
model.sol('sol1').feature('s2').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s2').feature('se1').set('subinitcfl', 2);
model.sol('sol1').feature('s2').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s2').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s2').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s2').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s2').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s2').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s2').feature('se1').set('maxsegiter', 300);
model.sol('sol1').feature('s2').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s2').feature('se1').feature('ll1').set('lowerlimit', 'comp1.k 0 comp1.ep 0 ');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_ODE1'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_ODE1'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('AMG, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature.remove('fcDef');

model.result.dataset('dset2').set('solution', 'sol2');

model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');

model.batch('p1').feature.remove('so1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'sol3');
model.batch('p1').set('pname', {'ReH' 'H' 'epsilon_p_i' 'cF_i' 'Da_i'});
model.batch('p1').set('plistarr', {'5500 5400 9500' 'H_E95 H_06 H_06' '0.95 0.8 0.8' '0.14 0.095 0.095' '1.9e-4 1.04e-4 1.04e-4'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {'pdom1' 'pdom2'});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.probe('pdom1').genResult('none');
model.probe('pdom2').genResult('none');

model.batch('p1').run('compute');

model.result('pg2').run;

model.sol('sol3').label('Adjacent free-porous flow');

model.result.dataset.duplicate('cln2', 'cln1');
model.result.dataset('cln2').label('CL adjacent free-porous flow');
model.result.dataset('cln2').set('data', 'dset3');
model.result.table.create('tbl2', 'Table');
model.result.table.create('tbl3', 'Table');
model.result.table.create('tbl4', 'Table');
model.result.table.create('tbl5', 'Table');
model.result.table.create('tbl6', 'Table');
model.result.table.create('tbl7', 'Table');
model.result.table.create('tbl8', 'Table');
model.result.table.create('tbl9', 'Table');
model.result.table('tbl2').label('U_E95');
model.result.table('tbl2').importData('turbulent_free_porous_U_E95.txt');
model.result.table('tbl3').label('k_E95');
model.result.table('tbl3').importData('turbulent_free_porous_k_E95.txt');
model.result.table('tbl4').label('uv_E95');
model.result.table('tbl4').importData('turbulent_free_porous_uv_E95.txt');
model.result.table('tbl5').label('U_06_5400');
model.result.table('tbl5').importData('turbulent_free_porous_U_#06_5400.txt');
model.result.table('tbl6').label('uv_06_5400');
model.result.table('tbl6').importData('turbulent_free_porous_uv_#06_5400.txt');
model.result.table('tbl7').label('U_06_9500');
model.result.table('tbl7').importData('turbulent_free_porous_U_#06_9500.txt');
model.result.table('tbl8').label('uv_06_9500');
model.result.table('tbl8').importData('turbulent_free_porous_uv_#06_9500.txt');
model.result.table('tbl9').label('u-rms and v-rms #06');
model.result.table('tbl9').importData('turbulent_free_porous_rms_#06.txt');

model.func.create('int1', 'Interpolation');
model.func('int1').model('comp1');
model.func('int1').label('u_rms  #06 5400');
model.func('int1').set('source', 'resultTable');
model.func('int1').set('resultTable', 'tbl9');
model.func('int1').setIndex('funcs', 'u1', 0, 0);
model.func('int1').setIndex('funcs', 1, 0, 1);
model.func.duplicate('int2', 'int1');
model.func('int2').label('v_rms  #06 5400');
model.func('int2').setIndex('funcs', 'v1', 0, 0);
model.func('int2').setIndex('funcs', 2, 0, 1);
model.func.duplicate('int3', 'int2');
model.func('int3').label('u_rms  #06 9500');
model.func('int3').setIndex('funcs', 'u2', 0, 0);
model.func('int3').setIndex('funcs', 3, 0, 1);
model.func.duplicate('int4', 'int3');
model.func('int4').label('v_rms  #06 9500');
model.func('int4').setIndex('funcs', 'v2', 0, 0);
model.func('int4').setIndex('funcs', 4, 0, 1);

model.result.dataset.create('grid1', 'Grid1D');
model.result.dataset('grid1').set('source', 'data');
model.result.dataset('grid1').label('Grid Exp');
model.result.dataset('grid1').set('source', 'function');
model.result.dataset('grid1').set('function', 'all');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('U_E95');
model.result('pg5').set('data', 'cln2');
model.result('pg5').setIndex('looplevelinput', 'manual', 0);
model.result('pg5').setIndex('looplevel', [1], 0);
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Velocity E95 Breugem et al (2006)');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'y/H');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'U/Ub');
model.result('pg5').set('axislimits', true);
model.result('pg5').set('xmin', -0.2);
model.result('pg5').set('ymin', 0);
model.result('pg5').set('ymax', 1.3);
model.result('pg5').set('legendpos', 'lowermiddle');
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg5').feature('lngr1').set('linewidth', 'preference');
model.result('pg5').feature('lngr1').label('Adjacent');
model.result('pg5').feature('lngr1').set('expr', 'u/Ub');
model.result('pg5').feature('lngr1').set('xdata', 'expr');
model.result('pg5').feature('lngr1').set('xdataexpr', 'y_H');
model.result('pg5').feature('lngr1').set('linecolor', 'red');
model.result('pg5').feature('lngr1').set('linewidth', 3);
model.result('pg5').feature('lngr1').set('legend', true);
model.result('pg5').feature('lngr1').set('autosolution', false);
model.result('pg5').feature('lngr1').set('autoplotlabel', true);
model.result('pg5').feature.duplicate('lngr2', 'lngr1');
model.result('pg5').run;
model.result('pg5').feature('lngr2').label('Clear');
model.result('pg5').feature('lngr2').set('data', 'cln1');
model.result('pg5').feature('lngr2').setIndex('looplevelinput', 'manual', 0);
model.result('pg5').feature('lngr2').setIndex('looplevel', [1], 0);
model.result('pg5').feature('lngr2').set('linecolor', 'green');
model.result('pg5').feature('lngr2').set('linewidth', 2);
model.result('pg5').run;
model.result('pg5').create('tblp1', 'Table');
model.result('pg5').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg5').feature('tblp1').set('linewidth', 'preference');
model.result('pg5').feature('tblp1').label('DNS');
model.result('pg5').feature('tblp1').set('table', 'tbl2');
model.result('pg5').feature('tblp1').set('linestyle', 'none');
model.result('pg5').feature('tblp1').set('linecolor', 'black');
model.result('pg5').feature('tblp1').set('linemarker', 'circle');
model.result('pg5').feature('tblp1').set('legend', true);
model.result('pg5').feature('tblp1').set('autoheaders', false);
model.result('pg5').feature('tblp1').set('autoplotlabel', true);
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('k_E95');
model.result('pg6').set('title', 'Turbulence kinetic energy E95 Breugem et al (2006)');
model.result('pg6').set('ylabel', 'k/u<sup>s</sup><sub>\tau</sub> <sup>2</sup>');
model.result('pg6').set('ymax', 8.5);
model.result('pg6').set('legendpos', 'upperright');
model.result('pg6').run;
model.result('pg6').feature('lngr1').set('expr', 'k/friction_s');
model.result('pg6').run;
model.result('pg6').feature('lngr2').set('expr', 'k/friction_s');
model.result('pg6').run;
model.result('pg6').feature('tblp1').set('table', 'tbl3');
model.result('pg6').feature('tblp1').set('markerpos', 'interp');
model.result('pg6').feature('tblp1').set('markers', 100);
model.result('pg5').run;
model.result.duplicate('pg7', 'pg5');
model.result('pg7').run;
model.result('pg7').set('title', 'Shear stress E95 Breugem et al (2006)');
model.result('pg7').label('uv_E95');
model.result('pg7').set('ylabel', '-u<sup>\prime</sup>v<sup>\prime</sup>/u<sup>s</sup><sub>\tau</sub> <sup>2</sup>');
model.result('pg7').set('ymin', -0.8);
model.result('pg7').set('ymax', 2.7);
model.result('pg7').set('legendpos', 'upperright');
model.result('pg7').run;
model.result('pg7').feature('lngr1').set('expr', 'shear_stress/friction_s');
model.result('pg7').run;
model.result('pg7').feature('lngr2').set('expr', 'shear_stress/friction_s');
model.result('pg7').run;
model.result('pg7').feature('tblp1').set('table', 'tbl4');
model.result('pg5').run;
model.result.duplicate('pg8', 'pg5');
model.result('pg8').run;
model.result('pg8').label('U_#06_Re=5400');
model.result('pg8').setIndex('looplevel', [2], 0);
model.result('pg8').set('title', 'Velocity #06 Re=5400 Suga et al (2010)');
model.result('pg8').run;
model.result('pg8').feature('lngr2').setIndex('looplevel', [2], 0);
model.result('pg8').run;
model.result('pg8').feature('tblp1').label('Exp');
model.result('pg8').feature('tblp1').set('table', 'tbl5');
model.result('pg6').run;
model.result.duplicate('pg9', 'pg6');
model.result('pg9').run;
model.result('pg9').label('k_#06_Re=5400');
model.result('pg9').setIndex('looplevel', [2], 0);
model.result('pg9').set('title', 'Turbulence kinetic energy #06 Re=5400 Suga et al (2010)');
model.result('pg9').run;
model.result('pg9').feature('lngr2').setIndex('looplevel', [2], 0);
model.result('pg9').feature.duplicate('lngr3', 'lngr2');
model.result('pg9').run;
model.result('pg9').run;
model.result('pg9').feature.remove('tblp1');
model.result('pg9').run;
model.result('pg9').feature('lngr3').label('Exp Upper Estimate');
model.result('pg9').feature('lngr3').set('data', 'grid1');
model.result('pg9').feature('lngr3').set('expr', '((1+cUu)*u1(x)^2+(1+cUv)*v1(x)^2)/2');
model.result('pg9').feature('lngr3').set('xdataexpr', 'x');
model.result('pg9').feature('lngr3').set('linestyle', 'dashed');
model.result('pg9').feature('lngr3').set('linecolor', 'black');
model.result('pg9').feature('lngr3').set('linewidth', 1);
model.result('pg9').feature('lngr3').set('legendmethod', 'manual');
model.result('pg9').feature('lngr3').setIndex('legends', 'Exp U.E.', 0);
model.result('pg9').feature.duplicate('lngr4', 'lngr3');
model.result('pg9').run;
model.result('pg9').feature('lngr4').label('Exp Lower Estimate');
model.result('pg9').feature('lngr4').set('expr', '((1+cLu)*u1(x)^2+(1+cLv)*v1(x)^2)/2');
model.result('pg9').feature('lngr4').set('linestyle', 'solid');
model.result('pg9').feature('lngr4').setIndex('legends', 'Exp L.E.', 0);
model.result('pg9').feature.duplicate('lngr5', 'lngr4');
model.result('pg9').run;
model.result('pg9').feature('lngr5').label('Exp Bottom Limit');
model.result('pg9').feature('lngr5').set('expr', '(u1(x)^2+2*v1(x)^2)/2');
model.result('pg9').feature('lngr5').set('linestyle', 'dotted');
model.result('pg9').feature('lngr5').setIndex('legends', 'Exp B.L.', 0);
model.result('pg7').run;
model.result.duplicate('pg10', 'pg7');
model.result('pg10').run;
model.result('pg10').label('uv_#06_Re=5400');
model.result('pg10').setIndex('looplevel', [2], 0);
model.result('pg10').set('title', 'Shear stress #06 Re=5400 Suga et al (2010)');
model.result('pg10').run;
model.result('pg10').feature('lngr2').setIndex('looplevel', [2], 0);
model.result('pg10').run;
model.result('pg10').feature('tblp1').label('Exp');
model.result('pg10').feature('tblp1').set('table', 'tbl6');
model.result('pg8').run;
model.result.duplicate('pg11', 'pg8');
model.result('pg11').run;
model.result('pg11').label('U_#06_Re=9500');
model.result('pg11').setIndex('looplevel', [3], 0);
model.result('pg11').set('title', 'Velocity #06 Re=9500 Suga et al (2010)');
model.result('pg11').run;
model.result('pg11').feature('lngr2').setIndex('looplevel', [3], 0);
model.result('pg11').run;
model.result('pg11').feature('tblp1').set('table', 'tbl7');
model.result('pg9').run;
model.result.duplicate('pg12', 'pg9');
model.result('pg12').run;
model.result('pg12').label('k_#06_Re=9500');
model.result('pg12').setIndex('looplevel', [3], 0);
model.result('pg12').set('title', 'Turbulence kinetic energy #06 Re=9500 Suga et al (2010)');
model.result('pg12').run;
model.result('pg12').feature('lngr2').setIndex('looplevel', [3], 0);
model.result('pg12').run;
model.result('pg12').feature('lngr3').set('expr', '((1+cUu)*u2(x)^2+(1+cUv)*v2(x)^2)/2');
model.result('pg12').run;
model.result('pg12').feature('lngr4').set('expr', '((1+cLu)*u2(x)^2+(1+cLv)*v2(x)^2)/2');
model.result('pg12').run;
model.result('pg12').feature('lngr5').set('expr', '(u2(x)^2+2*v2(x)^2)/2');
model.result('pg10').run;
model.result.duplicate('pg13', 'pg10');
model.result('pg13').run;
model.result('pg13').label('uv_#06_Re=9500');
model.result('pg13').setIndex('looplevel', [3], 0);
model.result('pg13').set('title', 'Shear stress #06 Re=9500 Suga et al (2010)');
model.result('pg13').run;
model.result('pg13').feature('lngr2').setIndex('looplevel', [3], 0);
model.result('pg13').run;
model.result('pg13').feature('tblp1').set('table', 'tbl8');
model.result.create('pg14', 'PlotGroup1D');
model.result('pg14').run;
model.result('pg14').label('Solid Wall Friction Coefficient (x1000)');
model.result('pg14').set('titletype', 'manual');
model.result('pg14').set('title', 'Solid Wall Friction Coefficient (x1000)');
model.result('pg14').set('axislimits', true);
model.result('pg14').set('xmin', 0.9);
model.result('pg14').set('xmax', 'manual_x_max');
model.result('pg14').set('ymin', 0);
model.result('pg14').set('ymax', 12);
model.result('pg14').set('manualgrid', true);
model.result('pg14').set('yspacing', 0.25);
model.result('pg14').create('glob1', 'Global');
model.result('pg14').feature('glob1').set('markerpos', 'datapoints');
model.result('pg14').feature('glob1').set('linewidth', 'preference');
model.result('pg14').feature('glob1').label('Adjacent');
model.result('pg14').feature('glob1').set('data', 'dset3');
model.result('pg14').feature('glob1').setIndex('expr', 'Cs1000', 0);
model.result('pg14').feature('glob1').setIndex('unit', 1, 0);
model.result('pg14').feature('glob1').setIndex('descr', 'Friction coefficient (x1000) at the solid wall', 0);
model.result('pg14').feature('glob1').set('linestyle', 'none');
model.result('pg14').feature('glob1').set('linecolor', 'black');
model.result('pg14').feature('glob1').set('linemarker', 'plus');
model.result('pg14').feature('glob1').set('autodescr', false);
model.result('pg14').feature('glob1').set('autosolution', false);
model.result('pg14').feature('glob1').set('autoplotlabel', true);
model.result('pg14').feature.duplicate('glob2', 'glob1');
model.result('pg14').run;
model.result('pg14').feature('glob2').label('Clear');
model.result('pg14').feature('glob2').set('data', 'dset5');
model.result('pg14').feature('glob2').set('linemarker', 'square');
model.result('pg14').run;
model.result('pg14').feature.duplicate('glob3', 'glob1');
model.result('pg14').run;
model.result('pg14').feature('glob3').label('DNS E95');
model.result('pg14').feature('glob3').setIndex('looplevelinput', 'manual', 0);
model.result('pg14').feature('glob3').setIndex('looplevel', [1], 0);
model.result('pg14').feature('glob3').setIndex('expr', 10.9, 0);
model.result('pg14').feature('glob3').setIndex('unit', 1, 0);
model.result('pg14').feature('glob3').setIndex('descr', '', 0);
model.result('pg14').feature('glob3').set('linecolor', 'red');
model.result('pg14').feature('glob3').set('linemarker', 'circle');
model.result('pg14').feature.duplicate('glob4', 'glob3');
model.result('pg14').run;
model.result('pg14').feature('glob4').label('Exp #06 Re=5400');
model.result('pg14').feature('glob4').setIndex('looplevel', [2], 0);
model.result('pg14').feature('glob4').setIndex('expr', 'C_help_var*(6.23/1.55)^2', 0);
model.result('pg14').feature('glob4').setIndex('unit', 1, 0);
model.result('pg14').feature('glob4').setIndex('descr', '', 0);
model.result('pg14').feature('glob4').set('linecolor', 'blue');
model.result('pg14').feature.duplicate('glob5', 'glob4');
model.result('pg14').run;
model.result('pg14').feature('glob5').label('Exp #06 Re=9500');
model.result('pg14').feature('glob5').setIndex('looplevel', [3], 0);
model.result('pg14').feature('glob5').set('linecolor', 'green');
model.result('pg14').feature('glob5').setIndex('expr', 'C_help_var*(11.05/1.63)^2', 0);
model.result('pg14').feature('glob5').setIndex('unit', 1, 0);
model.result('pg14').feature('glob5').setIndex('descr', '', 0);
model.result('pg14').run;
model.result('pg14').create('ann1', 'Annotation');
model.result('pg14').feature('ann1').set('text', 'Sol 1: E95 \\ Re=5500 \\ $\epsilon_p=0.95$ \\ Da=1.9e-4 \\ $c_F=0.14$ \\ ~ \\ Sol 2: #06 Re=5400 \\ Sol 3: #06 Re=9500 \\ $\epsilon_p$=0.8 \\ Da=1.04e-4 \\ $c_F=0.095$');
model.result('pg14').feature('ann1').set('latexmarkup', true);
model.result('pg14').feature('ann1').set('anchorpoint', 'upperright');
model.result('pg14').feature('ann1').set('posxexpr', 3.9);
model.result('pg14').feature('ann1').set('posyexpr', 5);
model.result('pg14').feature('ann1').set('showpoint', false);
model.result('pg14').feature('ann1').set('showframe', true);
model.result('pg14').feature('ann1').set('backgroundcolor', 'white');
model.result('pg14').run;
model.result('pg14').set('legendpos', 'upperright');
model.result.duplicate('pg15', 'pg14');
model.result('pg15').run;
model.result('pg15').label('Porous Interface Friction Coefficient (x1000)');
model.result('pg15').set('title', 'Porous Interface Friction Coefficient (x1000)');
model.result('pg15').set('ymax', 32);
model.result('pg15').run;
model.result('pg15').feature('glob1').setIndex('expr', 'Cp1000', 0);
model.result('pg15').feature('glob1').setIndex('unit', 1, 0);
model.result('pg15').feature('glob1').setIndex('descr', 'Friction coefficient (x1000) at the porous interface', 0);
model.result('pg15').run;
model.result('pg15').feature('glob2').setIndex('expr', 'Cp1000', 0);
model.result('pg15').feature('glob2').setIndex('unit', 1, 0);
model.result('pg15').feature('glob2').setIndex('descr', 'Friction coefficient (x1000) at the porous interface', 0);
model.result('pg15').run;
model.result('pg15').feature('glob3').setIndex('expr', 30.4, 0);
model.result('pg15').feature('glob3').setIndex('unit', 1, 0);
model.result('pg15').feature('glob3').setIndex('descr', '', 0);
model.result('pg15').run;
model.result('pg15').feature('glob4').setIndex('expr', 'C_help_var*(6.23)^2', 0);
model.result('pg15').feature('glob4').setIndex('unit', 1, 0);
model.result('pg15').feature('glob4').setIndex('descr', '', 0);
model.result('pg15').run;
model.result('pg15').feature('glob5').setIndex('expr', 'C_help_var*(11.05)^2', 0);
model.result('pg15').feature('glob5').setIndex('unit', 1, 0);
model.result('pg15').feature('glob5').setIndex('descr', '', 0);
model.result('pg15').run;
model.result('pg15').feature('ann1').set('posyexpr', 14);
model.result('pg15').run;
model.result('pg15').set('showlegends', true);
model.result.duplicate('pg16', 'pg15');
model.result('pg16').run;
model.result('pg16').label('Porous Friction Reynolds Number');
model.result('pg16').set('title', 'Porous Friction Reynolds Number Re<sub>\tau</sub> <sup>p</sup>');
model.result('pg16').set('ymax', 1100);
model.result('pg16').set('yspacing', 50);
model.result('pg16').run;
model.result('pg16').feature('glob1').setIndex('expr', 'Retp', 0);
model.result('pg16').feature('glob1').setIndex('unit', 1, 0);
model.result('pg16').feature('glob1').setIndex('descr', '', 0);
model.result('pg16').run;
model.result('pg16').feature('glob2').setIndex('expr', 'Retp', 0);
model.result('pg16').feature('glob2').setIndex('unit', 1, 0);
model.result('pg16').feature('glob2').setIndex('descr', '', 0);
model.result('pg16').run;
model.result('pg16').feature('glob3').setIndex('expr', 678, 0);
model.result('pg16').feature('glob3').setIndex('unit', 1, 0);
model.result('pg16').feature('glob3').setIndex('descr', '', 0);
model.result('pg16').run;
model.result('pg16').feature('glob4').setIndex('expr', '6.23/sqrt(Da_i)', 0);
model.result('pg16').feature('glob4').setIndex('unit', '', 0);
model.result('pg16').feature('glob4').setIndex('descr', '', 0);
model.result('pg16').run;
model.result('pg16').feature('glob5').setIndex('expr', '11.05/sqrt(Da_i)', 0);
model.result('pg16').feature('glob5').setIndex('unit', '', 0);
model.result('pg16').feature('glob5').setIndex('descr', '', 0);
model.result('pg16').run;
model.result('pg16').feature('ann1').set('posyexpr', 600);
model.result('pg16').run;
model.result('pg16').set('showlegends', true);
model.result.duplicate('pg17', 'pg16');
model.result('pg17').run;
model.result('pg17').label('Ratio of Friction Velocities');
model.result('pg17').set('title', 'Ratio of Friction Velocities u<sub>\tau</sub> <sup>p</sup>/u<sub>\tau</sub> <sup>s</sup>');
model.result('pg17').set('ymax', 1.8);
model.result('pg17').set('yspacing', 0.1);
model.result('pg17').run;
model.result('pg17').feature('glob1').setIndex('expr', 'utau_p/utau_s', 0);
model.result('pg17').feature('glob1').setIndex('unit', 1, 0);
model.result('pg17').feature('glob1').setIndex('descr', '', 0);
model.result('pg17').run;
model.result('pg17').feature('glob2').setIndex('expr', 'utau_p/utau_s', 0);
model.result('pg17').feature('glob2').setIndex('unit', 1, 0);
model.result('pg17').feature('glob2').setIndex('descr', '', 0);
model.result('pg17').run;
model.result('pg17').feature('glob3').setIndex('expr', 'sqrt(30.4/10.9)', 0);
model.result('pg17').feature('glob3').setIndex('unit', 1, 0);
model.result('pg17').feature('glob3').setIndex('descr', '', 0);
model.result('pg17').run;
model.result('pg17').feature('glob4').setIndex('expr', 1.55, 0);
model.result('pg17').feature('glob4').setIndex('unit', 1, 0);
model.result('pg17').feature('glob4').setIndex('descr', '', 0);
model.result('pg17').run;
model.result('pg17').feature('glob5').setIndex('expr', 1.63, 0);
model.result('pg17').feature('glob5').setIndex('unit', 1, 0);
model.result('pg17').feature('glob5').setIndex('descr', '', 0);
model.result('pg17').run;
model.result('pg17').feature('ann1').set('posyexpr', 1);
model.result('pg17').run;
model.result('pg17').set('showlegends', true);
model.result.create('pg18', 'PlotGroup2D');
model.result('pg18').run;
model.result('pg18').label('Arrow Surfaces E95');
model.result('pg18').set('data', 'dset3');
model.result('pg18').setIndex('looplevel', 1, 0);
model.result('pg18').set('titletype', 'manual');
model.result('pg18').set('title', 'Velocity, turbulence kinetic energy and shear stress');
model.result('pg18').set('showlegends', false);
model.result('pg18').set('plotarrayenable', true);
model.result('pg18').set('relpadding', 4);
model.result('pg18').create('arws1', 'ArrowSurface');
model.result('pg18').feature('arws1').set('arraydim', '1');
model.result('pg18').feature('arws1').label('Velocity');
model.result('pg18').feature('arws1').set('expr', {'u/Ub' '0'});
model.result('pg18').feature('arws1').set('xnumber', 1);
model.result('pg18').feature('arws1').set('ynumber', 500);
model.result('pg18').feature('arws1').set('arrowtype', 'cone');
model.result('pg18').feature('arws1').set('scaleactive', true);
model.result('pg18').feature('arws1').set('scale', '1e-2');
model.result('pg18').feature('arws1').create('col1', 'Color');
model.result('pg18').run;
model.result('pg18').feature('arws1').feature('col1').set('colordata', 'arrowlength');
model.result('pg18').feature('arws1').set('arraydim', '1');
model.result('pg18').run;
model.result('pg18').feature.duplicate('arws2', 'arws1');
model.result('pg18').feature('arws2').set('arraydim', '1');
model.result('pg18').run;
model.result('pg18').feature('arws2').label('Turbulence kinetic energy');
model.result('pg18').feature('arws2').set('expr', {'k/utau_s^2' '0'});
model.result('pg18').feature('arws2').set('scale', '2e-3');
model.result('pg18').run;
model.result('pg18').feature('arws2').feature('col1').set('colortable', 'Disco');
model.result('pg18').feature('arws2').set('arraydim', '1');
model.result('pg18').run;
model.result('pg18').feature.duplicate('arws3', 'arws2');
model.result('pg18').feature('arws3').set('arraydim', '1');
model.result('pg18').run;
model.result('pg18').feature('arws3').label('Shear stress');
model.result('pg18').feature('arws3').set('expr', {'shear_stress/utau_s^2' '0'});
model.result('pg18').feature('arws3').set('scale', '5e-3');
model.result('pg18').run;
model.result('pg18').feature('arws3').feature('col1').set('colortable', 'Plasma');
model.result('pg18').run;
model.result('pg18').create('ann1', 'Annotation');
model.result('pg18').feature('ann1').set('arraydim', '1');
model.result('pg18').feature('ann1').set('latexmarkup', true);
model.result('pg18').feature('ann1').set('text', '\Huge$\frac{u}{U_b}$');
model.result('pg18').feature('ann1').set('posxexpr', 'L');
model.result('pg18').feature('ann1').set('posyexpr', '-2*L');
model.result('pg18').feature('ann1').set('showpoint', false);
model.result('pg18').feature('ann1').set('anchorpoint', 'middleleft');
model.result('pg18').feature('ann1').set('belongstoplotarray', false);
model.result('pg18').feature.duplicate('ann2', 'ann1');
model.result('pg18').feature('ann2').set('arraydim', '1');
model.result('pg18').run;
model.result('pg18').feature('ann2').set('text', '\Huge$\frac{k}{{(u_\tau^s})^2}$');
model.result('pg18').feature('ann2').set('posxexpr', '6*L');
model.result('pg18').feature.duplicate('ann3', 'ann2');
model.result('pg18').feature('ann3').set('arraydim', '1');
model.result('pg18').run;
model.result('pg18').feature('ann3').set('text', '\Huge$\frac{-\overline{u^\prime\,v^\prime}}{{(u_\tau^s})^2}$');
model.result('pg18').feature('ann3').set('posxexpr', '11*L');
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Clear channel');
model.result.numerical('gev1').set('data', 'dset5');
model.result.numerical('gev1').setIndex('expr', 'Cs1000', 0);
model.result.numerical('gev1').setIndex('unit', 1, 0);
model.result.numerical('gev1').setIndex('descr', 'Friction coefficient (x1000) at the solid wall', 0);
model.result.numerical('gev1').setIndex('expr', 'Cp1000', 1);
model.result.numerical('gev1').setIndex('unit', 1, 1);
model.result.numerical('gev1').setIndex('descr', 'Friction coefficient (x1000) at the porous interface', 1);
model.result.numerical('gev1').setIndex('expr', 'utau_p*H/nu_i', 2);
model.result.numerical('gev1').setIndex('unit', 1, 2);
model.result.numerical('gev1').setIndex('descr', 'Reynolds number based on the porous interface friction velocity', 2);
model.result.numerical('gev1').setIndex('expr', 'utau_p/utau_s', 3);
model.result.numerical('gev1').setIndex('unit', 1, 3);
model.result.numerical('gev1').setIndex('descr', 'Ratio of friction velocities (porous interface over solid wall)', 3);
model.result.table.create('tbl10', 'Table');
model.result.table('tbl10').comments('Clear channel');
model.result.numerical('gev1').set('table', 'tbl10');
model.result.numerical('gev1').setResult;
model.result.numerical.duplicate('gev2', 'gev1');
model.result.numerical('gev2').label('Adjacent');
model.result.numerical('gev2').set('data', 'dset3');
model.result.numerical('gev2').set('table', 'tbl10');
model.result.numerical('gev2').appendResult;

model.param.set('manual_x_max', '3.95');

model.title('Turbulent Parallel Flow in a Channel with Adjacent Fluid and Porous Regions');

model.description('This setup demonstrates how the characteristics of turbulent flow in a channel are modified by the presence of an adjacent porous region. Asymmetric velocity profiles, higher turbulence levels, and higher friction coefficients both at the solid wall and the fluid-porous interface are observed in the simulations. High-permeability cases reveal excellent agreement with both DNS and experimental results without the need for specifically calibrated empirical functions.');

model.label('turbulent_free_porous.mph');

model.modelNode.label('Components');

out = model;
