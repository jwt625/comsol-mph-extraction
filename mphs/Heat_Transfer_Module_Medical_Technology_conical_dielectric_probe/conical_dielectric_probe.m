function out = model
%
% conical_dielectric_probe.m
%
% Model exported on May 26 2025, 21:29 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Medical_Technology');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('emw', 'ElectromagneticWaves', 'geom1');
model.physics('emw').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('solnum', 'auto');
model.study('std1').feature('freq').set('notsolnum', 'auto');
model.study('std1').feature('freq').set('outputmap', {});
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').setSolveFor('/physics/emw', true);

model.param.set('r1', '0.003[m]');
model.param.descr('r1', 'Waveguide radius');
model.param.set('fc', '1.841*c_const/2/pi/r1');
model.param.descr('fc', 'Cutoff frequency');
model.param.set('f0', '35[GHz]');
model.param.descr('f0', 'Frequency');
model.param.set('lda0', 'c_const/f0');
model.param.descr('lda0', 'Wavelength, free space');
model.param.set('l_probe', '12.8[mm]');
model.param.descr('l_probe', 'Tapered probe length');
model.param.set('w1_probe', '3[mm]');
model.param.descr('w1_probe', 'Tapered probe width1');
model.param.set('w2_probe', '0.58[mm]');
model.param.descr('w2_probe', 'Tapered probe width2');
model.param.set('T0', '34[degC]');
model.param.descr('T0', 'Initial skin temperature');

model.geom('geom1').run;

model.study('std1').feature('freq').set('plist', 'f0');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 75);
model.geom('geom1').feature('c1').set('angle', 180);
model.geom('geom1').feature('c1').set('rot', 270);
model.geom('geom1').feature('c1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('c1').setIndex('layer', 'lda0', 0);
model.geom('geom1').run('c1');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'r1' '50'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', [1 50]);
model.geom('geom1').feature('r2').set('pos', [3 0]);
model.geom('geom1').run('r2');
model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'vectors');
model.geom('geom1').feature('pol1').set('x', '0 w2_probe w2_probe w1_probe w1_probe 0 0 0');
model.geom('geom1').feature('pol1').set('y', '-l_probe -l_probe -l_probe 0 0 0 0 -l_probe');
model.geom('geom1').run('pol1');
model.geom('geom1').create('mir1', 'Mirror');
model.geom('geom1').feature('mir1').selection('input').set({'pol1'});
model.geom('geom1').feature('mir1').set('keep', true);
model.geom('geom1').feature('mir1').set('axis', [0 1]);
model.geom('geom1').run('mir1');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', [4 1]);
model.geom('geom1').feature('r3').set('pos', [0 -1]);
model.geom('geom1').run('r3');
model.geom('geom1').create('fil1', 'Fillet');

model.view.create('view2', 'geom1');
model.view('view2').model('comp1');
model.view('view2').axis.set('xmin', -16.82);
model.view('view2').axis.set('xmax', '27.00');
model.view('view2').axis.set('ymin', -13.55);
model.view('view2').axis.set('ymax', 13.83);

model.geom('geom1').feature('fil1').selection('point').set('r3', 2);
model.geom('geom1').feature('fil1').set('radius', 0.5);
model.geom('geom1').run('fil1');
model.geom('geom1').create('r4', 'Rectangle');
model.geom('geom1').feature('r4').set('size', [35 32.2]);
model.geom('geom1').feature('r4').set('pos', [0 -45]);
model.geom('geom1').run('r4');
model.geom('geom1').create('fil2', 'Fillet');
model.geom('geom1').feature('fil2').selection('point').set('r4', [2 3]);
model.geom('geom1').feature('fil2').set('radius', 10);
model.geom('geom1').run('fil2');
model.geom('geom1').create('r5', 'Rectangle');
model.geom('geom1').feature('r5').set('size', [6.5 0.7]);
model.geom('geom1').feature('r5').set('pos', [0 -13.5]);
model.geom('geom1').runPre('fin');

model.coordSystem.create('pml1', 'geom1', 'PML');

model.geom('geom1').run;

model.coordSystem('pml1').selection.set([1 9]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('PTFE');
model.material('mat2').selection.set([5 6 7 10]);
model.material('mat2').propertyGroup('def').set('relpermittivity', {'2.1'});
model.material('mat2').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0'});

model.physics('emw').prop('outofplanewavenumber').set('mFloquet', 1);
model.physics('emw').create('pec2', 'PerfectElectricConductor', 1);
model.physics('emw').feature('pec2').selection.set([23 24 25 27]);
model.physics('emw').create('port1', 'Port', 1);
model.physics('emw').feature('port1').selection.set([16]);
model.physics('emw').feature('port1').set('PortType', 'Circular');
model.physics('emw').feature('port1').set('Pin', '1[mW]');
model.physics('emw').feature('port1').set('PortSlit', true);
model.physics('emw').feature('port1').set('PortOrientation', 'ReversePort');
model.physics('emw').create('ffd1', 'FarFieldDomain', 2);

model.mesh('mesh1').run;

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (emw)');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Electric Field (emw)');
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').label('Revolution 2D');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset1');
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('S-parameter (emw)');
model.result.numerical('gev1').set('data', 'dset1');
model.result.numerical('gev1').set('expr', {'emw.S11dB'});
model.result.table.create('tbl1', 'Table');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').run;
model.result.numerical('gev1').setResult;
model.result.create('pg2', 'PolarGroup');
model.result('pg2').label('2D Far Field (emw)');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('rp1', 'RadiationPattern');
model.result('pg2').feature('rp1').set('legend', 'on');
model.result('pg2').feature('rp1').set('phidisc', '180');
model.result('pg2').feature('rp1').set('expr', {'emw.normEfar'});
model.result('pg2').feature('rp1').create('exp1', 'Export');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('3D Far Field, Gain (emw)');
model.result('pg3').set('data', 'none');
model.result('pg3').set('view', 'new');
model.result('pg3').set('edges', 'off');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').create('rp1', 'RadiationPattern');
model.result('pg3').feature('rp1').set('data', 'dset1');
model.result('pg3').feature('rp1').set('expr', {'emw.rGaindBEfar'});
model.result('pg3').feature('rp1').set('colorexpr', {'emw.normEfar'});
model.result('pg3').feature('rp1').set('useradiusascolor', true);
model.result('pg3').feature('rp1').set('directivityexpr', {'emw.normEfar^2'});
model.result('pg3').feature('rp1').set('thetadisc', '180');
model.result('pg3').feature('rp1').set('phidisc', '45');
model.result('pg3').feature('rp1').set('directivity', 'on');
model.result('pg3').feature('rp1').set('colortable', 'RainbowLight');
model.result('pg3').feature('rp1').create('exp1', 'Export');
model.result('pg3').feature('rp1').feature('exp1').setIndex('expr', 'comp1.emw.theta', 0);
model.result('pg2').feature('rp1').feature('exp1').setIndex('expr', 'comp1.emw.theta', 0);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').set('expr', 'emw.Er');
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').label('Radiation Pattern, Polar');
model.result('pg2').run;
model.result('pg2').feature('rp1').set('refdir', [0 1 0]);
model.result('pg2').feature('rp1').set('normal', [1 0 0]);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').label('Radiation Pattern, 3D');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').appendResult;

model.physics('emw').create('wee2', 'WaveEquationElectric', 2);
model.physics('emw').feature('wee2').selection.set([3 4]);
model.physics('emw').feature('wee2').set('DisplacementFieldModel', 'DielectricLoss');

model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Skin');
model.material('mat3').propertyGroup('def').set('heatcapacity', '3391[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('density', '1109[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'0.37[W/(m*K)]' '0' '0' '0' '0.37[W/(m*K)]' '0' '0' '0' '0.37[W/(m*K)]'});
model.material('mat3').propertyGroup('def').set('frequencyfactor', '4.575e72');
model.material('mat3').propertyGroup('def').set('activationenergy', '4.71e5');
model.material('mat3').selection.set([3 4]);
model.material('mat3').propertyGroup.create('DielectricLoss', 'Dielectric_losses');
model.material('mat3').propertyGroup('DielectricLoss').set('epsilonBis', {'10'});
model.material('mat3').propertyGroup('DielectricLoss').set('epsilonPrim', {'5'});
model.material('mat3').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'0'});

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (emw)');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result('pg1').run;
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').appendResult;
model.result('pg3').run;

model.material.duplicate('mat4', 'mat3');
model.material('mat4').label('Skin Tumor');
model.material('mat4').selection.set([4]);
model.material('mat4').propertyGroup('DielectricLoss').set('epsilonBis', {'15'});
model.material('mat4').propertyGroup('DielectricLoss').set('epsilonPrim', {'8'});

model.physics.create('ht', 'BioHeat', 'geom1');
model.physics('ht').model('comp1');

model.study('std1').feature('freq').setSolveFor('/physics/ht', true);

model.physics('ht').selection.set([3 4]);
model.physics('ht').feature('bt1').create('tdam1', 'ThermalDamage', 2);
model.physics('ht').feature('bt1').feature('tdam1').set('TransformationModel', 'ArrheniusKinetics');
model.physics('ht').feature('init1').set('Tinit', 'T0');

model.multiphysics.create('emh1', 'ElectromagneticHeating', 'geom1', 2);

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').set('plotgroup', 'Default');
model.study('std2').feature('freq').set('punit', 'Hz');
model.study('std2').feature('freq').set('plist', '1[MHz]');
model.study('std2').feature('freq').set('solnum', 'auto');
model.study('std2').feature('freq').set('notsolnum', 'auto');
model.study('std2').feature('freq').set('outputmap', {});
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').setSolveFor('/physics/emw', true);
model.study('std2').feature('freq').setSolveFor('/physics/ht', true);
model.study('std2').feature('freq').setSolveFor('/multiphysics/emh1', true);
model.study('std2').feature('freq').setSolveFor('/physics/ht', false);
model.study('std2').feature('freq').setSolveFor('/multiphysics/emh1', false);
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').set('plotgroup', 'Default');
model.study('std2').feature('time').set('initialtime', '0');
model.study('std2').feature('time').set('solnum', 'auto');
model.study('std2').feature('time').set('notsolnum', 'auto');
model.study('std2').feature('time').set('outputmap', {});
model.study('std2').feature('time').setSolveFor('/physics/emw', true);
model.study('std2').feature('time').setSolveFor('/physics/ht', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/emh1', true);
model.study('std2').feature('time').setSolveFor('/physics/emw', false);
model.study('std2').feature('freq').set('plist', 'f0');
model.study('std2').feature('time').set('tunit', 'min');
model.study('std2').feature('time').set('tlist', 'range(0,15[s],10)');
model.study('std2').setGenPlots(false);
model.study('std2').setStoreSolution(true);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 0.01);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol2').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol2').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol2').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol2').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s1').feature('p1').set('probes', {});
model.sol('sol2').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol2').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('s1').set('control', 'freq');
model.sol('sol2').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (emw)');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').create('st2', 'StudyStep');
model.sol('sol2').feature('st2').set('study', 'std2');
model.sol('sol2').feature('st2').set('studystep', 'time');
model.sol('sol2').create('v2', 'Variables');
model.sol('sol2').feature('v2').feature('comp1_ht_alpha').set('scalemethod', 'manual');
model.sol('sol2').feature('v2').feature('comp1_ht_alpha').set('scaleval', '1');
model.sol('sol2').feature('v2').set('initmethod', 'sol');
model.sol('sol2').feature('v2').set('initsol', 'sol2');
model.sol('sol2').feature('v2').set('initsoluse', 'sol3');
model.sol('sol2').feature('v2').set('notsolmethod', 'sol');
model.sol('sol2').feature('v2').set('notsol', 'sol2');
model.sol('sol2').feature('v2').set('notsoluse', 'sol3');
model.sol('sol2').feature('v2').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,15[s],10)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'Default');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('atolmethod', {'comp1_E' 'global' 'comp1_emw_Eoop' 'global' 'comp1_ht_alpha' 'scaled' 'comp1_T' 'global' 'comp1_Sparam1' 'global'});
model.sol('sol2').feature('t1').set('atol', {'comp1_E' '1e-3' 'comp1_emw_Eoop' '1e-3' 'comp1_ht_alpha' '1e-2' 'comp1_T' '1e-3' 'comp1_Sparam1' '1e-3'});
model.sol('sol2').feature('t1').set('atolvaluemethod', {'comp1_E' 'factor' 'comp1_emw_Eoop' 'factor' 'comp1_ht_alpha' 'manual' 'comp1_T' 'factor' 'comp1_Sparam1' 'factor'});
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('estrat', 'exclude');
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').create('se1', 'Segregated');
model.sol('sol2').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_T'});
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('subdamp', 0.8);
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('subjtech', 'once');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').label('Temperature');
model.sol('sol2').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_ht_alpha'});
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('subjtech', 'once');
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').label('iterative');
model.sol('sol2').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('linsolver', 'i1');
model.sol('sol2').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol2').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol2').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol2').feature('t1').feature('se1').set('segaaccdelay', 1);
model.sol('sol2').feature('t1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol2').feature('t1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');

model.result.dataset.create('rev2', 'Revolve2D');
model.result.dataset('rev2').set('data', 'dset2');
model.result.dataset('rev2').set('startangle', -90);
model.result.dataset('rev2').set('revangle', 270);

model.sol('sol2').study('std2');
model.sol('sol3').copySolution('sol4');

model.result.dataset('dset3').set('solution', 'none');

model.sol('sol2').feature.remove('t1');
model.sol('sol2').feature.remove('v2');
model.sol('sol2').feature.remove('st2');
model.sol('sol2').feature.remove('su1');
model.sol('sol2').feature.remove('s1');
model.sol('sol2').feature.remove('v1');
model.sol('sol2').feature.remove('st1');
model.sol('sol4').copySolution('sol3');
model.sol.remove('sol4');
model.sol('sol3').label('Solution Store 1');

model.result.dataset.remove('dset5');

model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 0.01);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol2').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol2').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol2').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol2').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s1').feature('p1').set('probes', {});
model.sol('sol2').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol2').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('s1').set('control', 'freq');
model.sol('sol2').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (emw)');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').feature('su1').set('sol', 'sol3');
model.sol('sol2').feature('su1').label('Solution Store 1');
model.sol('sol2').create('st2', 'StudyStep');
model.sol('sol2').feature('st2').set('study', 'std2');
model.sol('sol2').feature('st2').set('studystep', 'time');
model.sol('sol2').create('v2', 'Variables');
model.sol('sol2').feature('v2').feature('comp1_ht_alpha').set('scalemethod', 'manual');
model.sol('sol2').feature('v2').feature('comp1_ht_alpha').set('scaleval', '1');
model.sol('sol2').feature('v2').set('initmethod', 'sol');
model.sol('sol2').feature('v2').set('initsol', 'sol2');
model.sol('sol2').feature('v2').set('initsoluse', 'sol3');
model.sol('sol2').feature('v2').set('notsolmethod', 'sol');
model.sol('sol2').feature('v2').set('notsol', 'sol2');
model.sol('sol2').feature('v2').set('notsoluse', 'sol3');
model.sol('sol2').feature('v2').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,15[s],10)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'Default');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('atolmethod', {'comp1_E' 'global' 'comp1_emw_Eoop' 'global' 'comp1_ht_alpha' 'scaled' 'comp1_T' 'global' 'comp1_Sparam1' 'global'});
model.sol('sol2').feature('t1').set('atol', {'comp1_E' '1e-3' 'comp1_emw_Eoop' '1e-3' 'comp1_ht_alpha' '1e-2' 'comp1_T' '1e-3' 'comp1_Sparam1' '1e-3'});
model.sol('sol2').feature('t1').set('atolvaluemethod', {'comp1_E' 'factor' 'comp1_emw_Eoop' 'factor' 'comp1_ht_alpha' 'manual' 'comp1_T' 'factor' 'comp1_Sparam1' 'factor'});
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('estrat', 'exclude');
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').create('se1', 'Segregated');
model.sol('sol2').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_T'});
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('subdamp', 0.8);
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('subjtech', 'once');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature('se1').feature('ss1').label('Temperature');
model.sol('sol2').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_ht_alpha'});
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('subjtech', 'once');
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').label('iterative');
model.sol('sol2').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol2').feature('t1').feature('se1').feature('ss2').set('linsolver', 'i1');
model.sol('sol2').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol2').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol2').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol2').feature('t1').feature('se1').set('segaaccdelay', 1);
model.sol('sol2').feature('t1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol2').feature('t1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol2').feature('t1').feature.remove('fcDef');

model.result.dataset('dset3').set('solution', 'sol3');

model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.numerical('gev1').set('data', 'dset3');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').appendResult;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Temperature');
model.result('pg4').set('data', 'rev2');
model.result('pg4').setIndex('looplevel', 41, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'T-T0');
model.result('pg4').run;
model.result('pg4').feature('surf1').set('colortable', 'HeatCameraLight');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').run;
model.result('pg5').label('Fraction of Necrotic Tissue');
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 41, 0);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', 'ht.theta_d');
model.result('pg5').feature('surf1').set('descr', 'Fraction of damage');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').run;
model.result('pg6').label('Resistive Losses');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').run;
model.result('pg6').set('data', 'dset3');
model.result('pg6').run;
model.result('pg6').feature('surf1').set('expr', 'emw.Qrh');
model.result('pg6').feature('surf1').set('descr', 'Resistive losses');
model.result('pg6').feature('surf1').set('colortable', 'ThermalDark');
model.result('pg6').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg6').run;
model.result('pg4').run;

model.title('Modeling a Conical Dielectric Probe for Skin Cancer Diagnosis');

model.description(['This example utilizes a low-power 35' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'GHz Ka-band millimeter wave and its reflectivity to moisture for noninvasive cancer diagnosis. Since skin tumors contain more moisture than healthy skin, it leads to stronger reflections on this frequency band. Hence the probe detects abnormalities in terms of S-parameters at the tumor locations. Temperature variation of the skin and fraction of necrotic tissue analyses are performed as well.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('conical_dielectric_probe.mph');

model.modelNode.label('Components');

out = model;
