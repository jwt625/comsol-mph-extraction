function out = model
%
% pulsed_ccp_discharge.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Plasma_Module/Capacitively_Coupled_Plasmas');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 1);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ptp', 'ColdPlasmaTimePeriodic', 'geom1');
model.physics('ptp').model('comp1');

model.study.create('std1');
model.study('std1').create('tper', 'TimePeriodic');
model.study('std1').feature('tper').set('solnum', 'auto');
model.study('std1').feature('tper').set('notsolnum', 'auto');
model.study('std1').feature('tper').set('outputmap', {});
model.study('std1').feature('tper').set('ngenAUX', '1');
model.study('std1').feature('tper').set('ngen', '2');
model.study('std1').feature('tper').set('goalngenAUX', '1');
model.study('std1').feature('tper').set('ngenAUX', '1');
model.study('std1').feature('tper').set('ngen', '2');
model.study('std1').feature('tper').set('goalngenAUX', '1');
model.study('std1').feature('tper').setSolveFor('/physics/ptp', true);

model.param.set('f0', '13.56[MHz]');
model.param.descr('f0', 'Base frequency');
model.param.set('As', '0.25*pi*(0.3[m])^2');
model.param.descr('As', 'Wafer surface area');
model.param.set('p0', '0.1[torr]');
model.param.descr('p0', 'Pressure');
model.param.set('T0', '300[K]');
model.param.descr('T0', 'Temperature');
model.param.set('Prf', '1[W]');
model.param.descr('Prf', 'Single pulse power');
model.param.set('Non', '10');
model.param.descr('Non', 'Number of periods the pulse is on');
model.param.set('Noff', '100');
model.param.descr('Noff', 'Number of periods the pulse is off');
model.param.set('Nrampup', '1');
model.param.descr('Nrampup', 'Number of cycles to ramp to on state');
model.param.set('Nrampdown', '1');
model.param.descr('Nrampdown', 'Number of cycles to ramp to off state');
model.param.set('Nelon', '30');
model.param.descr('Nelon', 'Number of elements per period for the on period');
model.param.set('Neloff', '100');
model.param.descr('Neloff', 'Number of elements for the off period');
model.param.set('Ncycles', 'Non+Noff');
model.param.descr('Ncycles', 'Total number of cycles');
model.param.set('period_single', 'Ncycles/f0');
model.param.descr('period_single', 'Total period');

model.geom('geom1').create('i1', 'Interval');
model.geom('geom1').feature('i1').setIndex('coord', 0.025, 1);
model.geom('geom1').run;

model.physics('ptp').create('xsec1', 'CrossSectionImport', -1);
model.physics('ptp').feature('xsec1').set('Filepath', 'Ar_xsecs.txt');
model.physics('ptp').feature('xsec1').runCommand('importData');
model.physics('ptp').create('rxn1', 'Reaction', 1);
model.physics('ptp').feature('rxn1').set('formula', 'Ars+Ars=>e+Ar+Ar+');
model.physics('ptp').feature('rxn1').set('kf', '3.734E8');
model.physics('ptp').feature.duplicate('rxn2', 'rxn1');
model.physics('ptp').feature('rxn2').set('formula', 'Ar+Ars=>Ar+Ar');
model.physics('ptp').feature('rxn2').set('kf', 1807);
model.physics('ptp').feature('Ar').set('FromMassConstraint', true);
model.physics('ptp').feature('Ar').set('PresetSpeciesData', 'Ar');
model.physics('ptp').feature('Ars').set('PresetSpeciesData', 'Ar');
model.physics('ptp').feature('Ar_1p').set('InitIon', true);
model.physics('ptp').feature('Ar_1p').set('PresetSpeciesData', 'Ar');
model.physics('ptp').feature('Ar_1p').set('MobilityDiffusivitySpecification', 'SpecifyMobilityComputeDiffusivity');
model.physics('ptp').feature('Ar_1p').set('IonTemperatureSpecification', 'LocalFieldApproximation');
model.physics('ptp').feature('Ar_1p').set('MobilitySpecification', 'ArIoninAr');
model.physics('ptp').feature('pes1').set('T', 'T0');
model.physics('ptp').feature('pes1').set('pA', 'p0');
model.physics('ptp').create('sr1', 'SurfaceReaction', 0);
model.physics('ptp').feature('sr1').selection.all;
model.physics('ptp').feature('sr1').set('formula', 'Ar+=>Ar');
model.physics('ptp').feature('sr1').set('gammaf', 0);
model.physics('ptp').create('sr2', 'SurfaceReaction', 0);
model.physics('ptp').feature('sr2').selection.all;
model.physics('ptp').feature('sr2').set('formula', 'Ars=>Ar');
model.physics('ptp').feature('sr2').set('gammai', 0);
model.physics('ptp').feature('sr2').set('ebari', 0);
model.physics('ptp').create('wall1', 'WallDriftDiffusion', 0);
model.physics('ptp').feature('wall1').selection.all;
model.physics('ptp').create('gnd1', 'Ground', 0);
model.physics('ptp').feature('gnd1').selection.set([2]);
model.physics('ptp').create('mct1', 'MetalContact', 0);
model.physics('ptp').feature('mct1').selection.set([1]);
model.physics('ptp').feature('mct1').set('Source', 'RF');
model.physics('ptp').feature('mct1').set('PeriodicFunction', 'Pulsed');
model.physics('ptp').feature('mct1').set('Prf', 'Prf');
model.physics('ptp').feature('mct1').set('fp', 'f0');
model.physics('ptp').feature('mct1').set('CreateMeshSuggestionForExtraDimension', true);
model.physics('ptp').feature('mct1').set('nperiodOn', 'Non');
model.physics('ptp').feature('mct1').set('nperiodOff', 'Noff');
model.physics('ptp').feature('mct1').set('nperiodRampUp', 'Nrampup');
model.physics('ptp').feature('mct1').set('nperiodRampDn', 'Nrampdown');
model.physics('ptp').feature('mct1').set('nelon', 'Nelon');
model.physics('ptp').feature('mct1').set('neloff', 'Neloff');
model.physics('ptp').prop('CrossSectionArea').set('A', 'As');
model.physics('ptp').prop('ExtraDimensionSettings').set('Period_xd', 'period_single');
model.physics('ptp').prop('ExtraDimensionSettings').set('MeshSpecification', 'mct1');
model.physics('ptp').prop('ExtraDimensionSettings').set('HeavySpeciesSelection', 'BaseGeometry');

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('edg1').feature('dis1').set('elemcount', 75);
model.mesh('mesh1').feature('edg1').feature('dis1').set('elemratio', 5);
model.mesh('mesh1').feature('edg1').feature('dis1').set('symmetric', true);
model.mesh('mesh1').run;

model.study('std1').label('Single Pulse');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'tper');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_Ne_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_V_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_Ars_W_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_En_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Va_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_Ar_1p_W_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_Ne_per').set('scaleval', '35');
model.sol('sol1').feature('v1').feature('comp1_V_per').set('scaleval', '500');
model.sol('sol1').feature('v1').feature('comp1_ptp_Ars_W_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_En_per').set('scaleval', '35');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Va_per').set('scaleval', '500');
model.sol('sol1').feature('v1').feature('comp1_ptp_Ar_1p_W_per').set('scaleval', '10');
model.sol('sol1').feature('v1').set('control', 'tper');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', false);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol1').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ptp)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('nlinnormlevel', 0.01);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').set('errorchk', false);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (ptp)');
model.sol('sol1').feature('s1').feature('i1').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('domdofmax', 150000);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('ndom', 4);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('usecoarse', false);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('meshoverlap', false);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('errorchk', false);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol1').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').create('lngr1', 'LineGraph');
model.result('pg1').feature('lngr1').set('xdata', 'expr');
model.result('pg1').feature('lngr1').set('xdataexpr', 'x');
model.result('pg1').feature('lngr1').selection.geom('geom1', 1);
model.result('pg1').feature('lngr1').selection.set([1]);
model.result('pg1').feature('lngr1').set('expr', {'ptp.neav'});
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').set('xdata', 'expr');
model.result('pg2').feature('lngr1').set('xdataexpr', 'x');
model.result('pg2').feature('lngr1').selection.geom('geom1', 1);
model.result('pg2').feature('lngr1').selection.set([1]);
model.result('pg2').feature('lngr1').set('expr', {'ptp.Teav'});
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('xdata', 'expr');
model.result('pg3').feature('lngr1').set('xdataexpr', 'x');
model.result('pg3').feature('lngr1').selection.geom('geom1', 1);
model.result('pg3').feature('lngr1').selection.set([1]);
model.result('pg3').feature('lngr1').set('expr', {'ptp.Vav'});
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').set('xdata', 'expr');
model.result('pg4').feature('lngr1').set('xdataexpr', {'x'});
model.result('pg4').feature('lngr1').selection.all;
model.result('pg4').feature('lngr1').set('expr', {'ptp.Pcap_av'});
model.result('pg4').feature('lngr1').set('legend', true);
model.result('pg4').feature('lngr1').set('legendmethod', 'manual');
model.result('pg4').feature('lngr1').setIndex('legends', 'Electrons', 0);
model.result('pg4').feature('lngr1').set('resolution', 'norefine');
model.result('pg4').create('lngr2', 'LineGraph');
model.result('pg4').feature('lngr2').set('xdata', 'expr');
model.result('pg4').feature('lngr2').set('xdataexpr', {'x'});
model.result('pg4').feature('lngr2').selection.all;
model.result('pg4').feature('lngr2').set('expr', {'ptp.Pcap_ions_av'});
model.result('pg4').feature('lngr2').set('legend', true);
model.result('pg4').feature('lngr2').set('legendmethod', 'manual');
model.result('pg4').feature('lngr2').setIndex('legends', 'Ions', 0);
model.result('pg4').feature('lngr2').set('resolution', 'norefine');
model.result('pg4').create('lngr3', 'LineGraph');
model.result('pg4').feature('lngr3').set('xdata', 'expr');
model.result('pg4').feature('lngr3').set('xdataexpr', {'x'});
model.result('pg4').feature('lngr3').selection.all;
model.result('pg4').feature('lngr3').set('expr', {'ptp.Pcap_ele_ions_av'});
model.result('pg4').feature('lngr3').set('legend', true);
model.result('pg4').feature('lngr3').set('legendmethod', 'manual');
model.result('pg4').feature('lngr3').setIndex('legends', 'Electrons and ions', 0);
model.result('pg4').feature('lngr3').set('resolution', 'norefine');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'Power Deposition (W/m<sup>3</sup>)');
model.result('pg4').set('titletype', 'none');
model.result('pg4').label('Capacitive Power Deposition, Period Averaged (ptp)');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').set('ylog', true);
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Neutral Species Number Density, Period Averaged (1/m<sup>3</sup>)');
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').set('ylog', true);
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'Charged Species Number Density, Period Averaged (1/m<sup>3</sup>)');
model.result('pg6').set('ylabel', 'Number density (1/m<sup>3</sup>)');
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('xdata', 'expr');
model.result('pg5').feature('lngr1').set('xdataexpr', {'x'});
model.result('pg5').feature('lngr1').selection.all;
model.result('pg5').feature('lngr1').set('expr', {'ptp.n_wAr_av'});
model.result('pg5').feature('lngr1').set('legend', true);
model.result('pg5').feature('lngr1').set('legendmethod', 'manual');
model.result('pg5').feature('lngr1').setIndex('legends', 'wAr', 0);
model.result('pg5').create('lngr2', 'LineGraph');
model.result('pg5').feature('lngr2').set('xdata', 'expr');
model.result('pg5').feature('lngr2').set('xdataexpr', {'x'});
model.result('pg5').feature('lngr2').selection.all;
model.result('pg5').feature('lngr2').set('expr', {'ptp.n_wArs_av'});
model.result('pg5').feature('lngr2').set('legend', true);
model.result('pg5').feature('lngr2').set('legendmethod', 'manual');
model.result('pg5').feature('lngr2').setIndex('legends', 'wArs', 0);
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', {'x'});
model.result('pg6').feature('lngr1').selection.all;
model.result('pg6').feature('lngr1').set('expr', {'ptp.n_wAr_1p_av'});
model.result('pg6').feature('lngr1').set('legend', true);
model.result('pg6').feature('lngr1').set('legendmethod', 'manual');
model.result('pg6').feature('lngr1').setIndex('legends', 'wAr_1p', 0);
model.result('pg6').create('lngr2', 'LineGraph');
model.result('pg6').feature('lngr2').set('xdata', 'expr');
model.result('pg6').feature('lngr2').set('xdataexpr', {'x'});
model.result('pg6').feature('lngr2').selection.all;
model.result('pg6').feature('lngr2').set('expr', {'ptp.neav'});
model.result('pg6').feature('lngr2').set('legend', true);
model.result('pg6').feature('lngr2').set('legendmethod', 'manual');
model.result('pg6').feature('lngr2').setIndex('legends', 'ne', 0);
model.result('pg5').label('Neutral Species Number Density, Period Averaged (ptp)');
model.result('pg6').label('Charged Species Number Density, Period Averaged (ptp)');
model.result('pg1').label('Electron Density, Period Averaged (ptp)');
model.result('pg2').label('Electron Temperature, Period Averaged (ptp)');
model.result('pg3').label('Electric Potential, Period Averaged (ptp)');
model.result.dataset.create('dset2', 'Solution');
model.result.dataset('dset2').set('solution', 'sol1');
model.result.dataset('dset2').set('geom', 'ptp_xdim');
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').set('data', 'dset2');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('xdata', 'expr');
model.result('pg7').feature('lngr1').set('xdataexpr', {'x1_ptp'});
model.result('pg7').feature('lngr1').selection.all;
model.result('pg7').feature('lngr1').set('expr', {'ptp.mct1.V'});
model.result('pg7').feature('lngr1').set('legend', true);
model.result('pg7').feature('lngr1').set('legendmethod', 'manual');
model.result('pg7').feature('lngr1').setIndex('legends', 'V', 0);
model.result('pg7').create('lngr2', 'LineGraph');
model.result('pg7').feature('lngr2').set('xdata', 'expr');
model.result('pg7').feature('lngr2').set('xdataexpr', {'x1_ptp'});
model.result('pg7').feature('lngr2').selection.all;
model.result('pg7').feature('lngr2').set('expr', {'ptp.mct1.I'});
model.result('pg7').feature('lngr2').set('resolution', 'norefine');
model.result('pg7').feature('lngr2').set('legend', true);
model.result('pg7').feature('lngr2').set('legendmethod', 'manual');
model.result('pg7').feature('lngr2').setIndex('legends', 'I', 0);
model.result('pg7').set('twoyaxes', true);
model.result('pg7').setIndex('plotonsecyaxis', true, 0, 1);
model.result('pg7').set('titletype', 'none');
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', 'Period fraction');
model.result('pg7').label('Current and Voltage, Metal Contact 1 (ptp)');
model.result('pg1').run;
model.result('pg7').run;
model.result('pg7').set('axislimits', true);
model.result('pg7').set('xmin', 0.4);
model.result('pg7').set('xmax', 0.6);
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Electron Density vs. Time');
model.result('pg8').set('data', 'dset2');
model.result('pg8').create('lngr1', 'LineGraph');
model.result('pg8').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg8').feature('lngr1').set('linewidth', 'preference');
model.result('pg8').feature('lngr1').selection.all;
model.result('pg8').feature('lngr1').set('expr', 'comp1.atxd1(0.0125,ptp.ne)');
model.result('pg8').feature('lngr1').set('descractive', true);
model.result('pg8').feature('lngr1').set('descr', 'Electron density at the center of the discharge');
model.result('pg8').feature('lngr1').set('xdata', 'expr');
model.result('pg8').feature('lngr1').set('xdataexpr', 'x1_ptp[1/m]*period_single');
model.result('pg8').run;
model.result('pg8').feature('lngr1').set('xdatadescractive', true);
model.result('pg8').feature('lngr1').set('xdatadescr', 'Time');
model.result('pg8').run;
model.result('pg8').run;
model.result.duplicate('pg9', 'pg8');
model.result('pg9').run;
model.result('pg9').label('Electron Temperature vs. Time');
model.result('pg9').run;
model.result('pg9').feature('lngr1').set('expr', 'comp1.atxd1(0.0125,ptp.Te)');
model.result('pg9').feature('lngr1').set('descr', 'Electron temperature at the center of the discharge');
model.result('pg9').run;
model.result('pg9').run;
model.result.duplicate('pg10', 'pg9');
model.result('pg10').run;
model.result('pg10').label('Electric Potential vs. Time');
model.result('pg10').run;
model.result('pg10').feature('lngr1').set('expr', 'comp1.atxd1(0.0125,ptp.V)');
model.result('pg10').feature('lngr1').set('descr', 'Electric potential at the center of the discharge');
model.result('pg10').run;

model.title('Pulsed Capacitively Coupled Plasma Discharge');

model.description(['This tutorial model shows how to set up a model of a pulsed capacitive discharge. The on pulse consists of 10' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'periods of excitation at 13.56' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'MHz, followed by no excitation for 100' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'periods. The I-V characteristics, the electron density, temperature and plasma potential are studied.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('pulsed_ccp_discharge.mph');

model.modelNode.label('Components');

out = model;
