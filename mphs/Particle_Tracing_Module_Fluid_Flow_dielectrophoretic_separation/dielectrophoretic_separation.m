function out = model
%
% dielectrophoretic_separation.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Particle_Tracing_Module/Fluid_Flow');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ec', 'ConductiveMedia', 'geom1');
model.physics('ec').model('comp1');
model.physics.create('spf', 'CreepingFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics.create('fpt', 'FluidParticleTracing', 'geom1');
model.physics('fpt').model('comp1');

model.geom('geom1').insertFile('dielectrophoretic_separation_geom_sequence.mph', 'geom1');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('f0', '100[kHz]', 'Frequency of the electric field');
model.param.set('sigma_f', '55[mS/m]', 'Fluid medium conductivity');
model.param.set('epsilon_f', '80', 'Fluid relative permittivity');
model.param.set('rho_f', '1000[kg/m^3]', 'Fluid density');
model.param.set('mu_f', '1e-3[Pa*s]', 'Fluid dynamic viscosity');
model.param.set('rho_p', '1050[kg/m^3]', 'Particle density (RBCs and platelets)');
model.param.set('dp1', '1.8[um]', 'Particle diameter: platelets');
model.param.set('dp2', '5[um]', 'Particle diameter: RBCs');
model.param.set('sigma_p1', '0.25[S/m]', 'Particle conductivity: platelets');
model.param.set('sigma_p2', '0.31[S/m]', 'Particle conductivity: RBCs');
model.param.set('epsilon_p1', '50', 'Particle relative permittivity: platelets');
model.param.set('epsilon_p2', '59', 'Particle relative permittivity: RBCs');
model.param.set('sigma_s1', '1e-6[S/m]', 'Shell electrical conductivity:  platelets');
model.param.set('sigma_s2', '1e-6[S/m]', 'Shell electrical conductivity:  RBCs');
model.param.set('epsilon_s1', '6', 'Shell relative permittivity: platelets');
model.param.set('epsilon_s2', '4.44', 'Shell relative permittivity: RBCs');
model.param.set('th_s1', '8[nm]', 'Shell thickness: platelets');
model.param.set('th_s2', '9[nm]', 'Shell thickness: RBCs');

model.geom('geom1').run;

model.physics('ec').create('pot1', 'ElectricPotential', 1);
model.physics('ec').feature('pot1').set('V0', 5);
model.physics('ec').feature('pot1').selection.set([8 17 26 34]);
model.physics('ec').create('pot2', 'ElectricPotential', 1);
model.physics('ec').feature('pot2').set('V0', -5);
model.physics('ec').feature('pot2').selection.set([13 21 30]);
model.physics('spf').create('inl1', 'InletBoundary', 1);
model.physics('spf').feature('inl1').selection.set([3]);
model.physics('spf').feature('inl1').set('U0in', '134[um/s]');
model.physics('spf').create('inl2', 'InletBoundary', 1);
model.physics('spf').feature('inl2').selection.set([1]);
model.physics('spf').feature('inl2').set('U0in', '853[um/s]');
model.physics('spf').create('out1', 'OutletBoundary', 1);
model.physics('spf').feature('out1').selection.set([40 41]);
model.physics('fpt').prop('Formulation').setIndex('Formulation', 'NewtonianIgnoreInertialTerms', 0);
model.physics('fpt').feature('pp1').label('Platelets');
model.physics('fpt').feature('pp1').set('rhop_mat', 'userdef');
model.physics('fpt').feature('pp1').set('rhop', 'rho_p');
model.physics('fpt').feature('pp1').set('dp', 'dp1');
model.physics('fpt').create('pp2', 'ParticlePropertiesOther', -1);
model.physics('fpt').feature('pp2').label('Red Blood Cells');
model.physics('fpt').feature('pp2').set('rhop_mat', 'userdef');
model.physics('fpt').feature('pp2').set('rhop', 'rho_p');
model.physics('fpt').feature('pp2').set('dp', 'dp2');
model.physics('fpt').create('inl1', 'Inlet', 1);
model.physics('fpt').feature('inl1').label('Inlet, Platelets');
model.physics('fpt').feature('inl1').selection.set([3]);
model.physics('fpt').feature('inl1').setIndex('rt', 'range(0,0.01,3)', 0);
model.physics('fpt').feature('inl1').set('InitialPosition', 'RandomPosition');
model.physics('fpt').feature.duplicate('inl2', 'inl1');
model.physics('fpt').feature('inl2').label('Inlet, Red Blood Cells');
model.physics('fpt').feature('inl2').set('ReleasedParticleProperties', 'pp2');
model.physics('fpt').create('out1', 'Outlet', 1);
model.physics('fpt').feature('out1').selection.set([40 41]);
model.physics('fpt').create('df1', 'DragForce', 2);
model.physics('fpt').feature('df1').selection.all;
model.physics('fpt').feature('df1').set('u_src', 'root.comp1.u');
model.physics('fpt').feature('df1').set('IncludeVirtualMassAndPressureGradientForces', true);
model.physics('fpt').create('deff1', 'DielectrophoreticForce', 2);
model.physics('fpt').feature('deff1').label('Dielectrophoretic Force, Platelets');
model.physics('fpt').feature('deff1').selection.all;
model.physics('fpt').feature('deff1').set('E_src', 'root.comp1.ec.Ex');
model.physics('fpt').feature('deff1').set('UsePPR', true);
model.physics('fpt').feature('deff1').set('ParticlesToAffect', 'SingleSpecies');
model.physics('fpt').feature('deff1').create('shl1', 'Shell', 2);
model.physics('fpt').feature('deff1').feature('shl1').set('ts', 'th_s1');
model.physics('fpt').feature('deff1').feature('shl1').set('ers', 'epsilon_s1');
model.physics('fpt').feature('deff1').feature('shl1').set('sigmas', 'sigma_s1');
model.physics('fpt').feature.duplicate('deff2', 'deff1');
model.physics('fpt').feature('deff2').label('Dielectrophoretic Force, Red Blood Cells');
model.physics('fpt').feature('deff2').set('AffectedParticleProperties', 'pp2');
model.physics('fpt').feature('deff2').feature('shl1').set('ts', 'th_s2');
model.physics('fpt').feature('deff2').feature('shl1').set('ers', 'epsilon_s2');
model.physics('fpt').feature('deff2').feature('shl1').set('sigmas', 'sigma_s2');
model.physics('fpt').feature('pp1').set('erp_mat', 'userdef');
model.physics('fpt').feature('pp1').set('erp', 'epsilon_p1');
model.physics('fpt').feature('pp1').set('sigmap_mat', 'userdef');
model.physics('fpt').feature('pp1').set('sigmap', 'sigma_p1');
model.physics('fpt').feature('pp2').set('erp_mat', 'userdef');
model.physics('fpt').feature('pp2').set('erp', 'epsilon_p2');
model.physics('fpt').feature('pp2').set('sigmap_mat', 'userdef');
model.physics('fpt').feature('pp2').set('sigmap', 'sigma_p2');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'sigma_f'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'epsilon_f'});
model.material('mat1').propertyGroup('def').set('density', {'rho_f'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', {'mu_f'});

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/ec', false);
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/physics/fpt', false);
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('plist', 'f0');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'freq');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'freq');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s2').feature('p1').set('plistarr', {'f0'});
model.sol('sol1').feature('s2').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s2').feature('p1').set('probes', {});
model.sol('sol1').feature('s2').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s2').set('linpmethod', 'sol');
model.sol('sol1').feature('s2').set('linpsol', 'zero');
model.sol('sol1').feature('s2').set('control', 'freq');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Electric Potential (ec)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').feature('surf1').set('colortable', 'Dipole');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature.create('str1', 'Streamline');
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('solutionparams', 'parent');
model.result('pg1').feature('str1').set('expr', {'ec.Ex' 'ec.Ey'});
model.result('pg1').feature('str1').set('titletype', 'none');
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('udist', 0.02);
model.result('pg1').feature('str1').set('maxlen', 0.4);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('inheritcolor', false);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('data', 'parent');
model.result('pg1').feature('str1').selection.geom('geom1', 1);
model.result('pg1').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59]);
model.result('pg1').feature('str1').set('inheritplot', 'surf1');
model.result('pg1').feature('str1').feature.create('col1', 'Color');
model.result('pg1').feature('str1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg1').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg1').feature('str1').feature.create('filt1', 'Filter');
model.result('pg1').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Electric Field Norm (ec)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond2/pg1');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solutionparams', 'parent');
model.result('pg2').feature('surf1').set('expr', 'ec.normE');
model.result('pg2').feature('surf1').set('colortable', 'Prism');
model.result('pg2').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg2').feature('surf1').set('colorcalibration', -0.8);
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature.create('str1', 'Streamline');
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('solutionparams', 'parent');
model.result('pg2').feature('str1').set('expr', {'ec.Ex' 'ec.Ey'});
model.result('pg2').feature('str1').set('titletype', 'none');
model.result('pg2').feature('str1').set('posmethod', 'uniform');
model.result('pg2').feature('str1').set('udist', 0.02);
model.result('pg2').feature('str1').set('maxlen', 0.4);
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('inheritcolor', false);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('showsolutionparams', 'on');
model.result('pg2').feature('str1').set('maxtime', Inf);
model.result('pg2').feature('str1').set('data', 'parent');
model.result('pg2').feature('str1').selection.geom('geom1', 1);
model.result('pg2').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59]);
model.result('pg2').feature('str1').set('inheritplot', 'surf1');
model.result('pg2').feature('str1').feature.create('col1', 'Color');
model.result('pg2').feature('str1').feature('col1').set('expr', 'ec.normE');
model.result('pg2').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg2').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg2').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg2').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg2').feature('str1').feature.create('filt1', 'Filter');
model.result('pg2').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Velocity (spf)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'spf.U');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Pressure (spf)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg4').feature.create('con1', 'Contour');
model.result('pg4').feature('con1').label('Contour');
model.result('pg4').feature('con1').set('showsolutionparams', 'on');
model.result('pg4').feature('con1').set('expr', 'p');
model.result('pg4').feature('con1').set('number', 40);
model.result('pg4').feature('con1').set('levelrounding', false);
model.result('pg4').feature('con1').set('smooth', 'internal');
model.result('pg4').feature('con1').set('showsolutionparams', 'on');
model.result('pg4').feature('con1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').set('legendpos', 'bottom');
model.result('pg3').run;
model.result('pg3').set('legendpos', 'bottom');

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/ec', false);
model.study('std2').feature('time').setSolveFor('/physics/spf', false);
model.study('std2').feature('time').setSolveFor('/physics/fpt', true);
model.study('std2').label('Study 2, no Dielectrophoretic Force');
model.study('std2').feature('time').set('tlist', 'range(0,0.05,3)');
model.study('std2').feature('time').set('useadvanceddisable', true);
model.study('std2').feature('time').set('disabledphysics', {'fpt/deff1' 'fpt/deff2'});
model.study('std2').feature('time').set('usesol', true);
model.study('std2').feature('time').set('notsolmethod', 'sol');
model.study('std2').feature('time').set('notstudy', 'std1');

model.sol.create('sol3');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol3').study('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'time');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'time');
model.sol('sol3').create('t1', 'Time');
model.sol('sol3').feature('t1').set('tlist', 'range(0,0.05,3)');
model.sol('sol3').feature('t1').set('plot', 'off');
model.sol('sol3').feature('t1').set('plotgroup', 'pg1');
model.sol('sol3').feature('t1').set('plotfreq', 'tout');
model.sol('sol3').feature('t1').set('probesel', 'all');
model.sol('sol3').feature('t1').set('probes', {});
model.sol('sol3').feature('t1').set('probefreq', 'tsteps');
model.sol('sol3').feature('t1').set('rtol', 1.0E-5);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('reacf', true);
model.sol('sol3').feature('t1').set('storeudot', true);
model.sol('sol3').feature('t1').set('tstepsgenalpha', 'strict');
model.sol('sol3').feature('t1').set('endtimeinterpolation', true);
model.sol('sol3').feature('t1').set('timemethod', 'genalpha');
model.sol('sol3').feature('t1').set('estrat', 'exclude');
model.sol('sol3').feature('t1').set('control', 'time');
model.sol('sol3').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol3').feature('t1').create('i1', 'Iterative');
model.sol('sol3').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol3').feature('t1').feature('fc1').set('linsolver', 'i1');
model.sol('sol3').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol3').feature('t1').feature.remove('fcDef');
model.sol('sol3').attach('std2');
model.sol('sol3').runFromTo('st1', 'v1');

model.result.dataset.create('part1', 'Particle');
model.result.dataset('part1').set('solution', 'sol3');
model.result.dataset('part1').set('posdof', {'comp1.qx' 'comp1.qy'});
model.result.dataset('part1').set('geom', 'geom1');
model.result.dataset('part1').set('pgeom', 'pgeom_fpt');
model.result.dataset('part1').set('pgeomspec', 'fromphysics');
model.result.dataset('part1').set('physicsinterface', 'fpt');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'part1');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').label('Particle Trajectories (fpt)');
model.result('pg5').create('traj1', 'ParticleTrajectories');
model.result('pg5').feature('traj1').set('pointtype', 'point');
model.result('pg5').feature('traj1').set('linetype', 'none');
model.result('pg5').feature('traj1').create('col1', 'Color');
model.result('pg5').feature('traj1').feature('col1').set('expr', 'fpt.V');
model.result('pg5').run;
model.result('pg5').set('showlegends', false);
model.result('pg5').run;
model.result('pg5').feature('traj1').set('pointradiusexpr', 'if(fpt.sidx==2,dp2/2,dp1)');
model.result('pg5').run;
model.result('pg5').feature('traj1').feature('col1').set('expr', 'fpt.dp');
model.result('pg5').feature('traj1').feature('col1').set('colortable', 'WaveLight');
model.result('pg5').run;
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', 'spf.U');
model.result('pg5').feature('surf1').set('descr', 'Velocity magnitude');
model.result('pg5').feature('surf1').set('unit', 'mm/s');
model.result('pg5').feature('surf1').set('colortable', 'GrayScale');
model.result('pg5').feature('surf1').set('rangecoloractive', true);
model.result('pg5').feature('surf1').set('rangecolormin', -1);
model.result('pg5').feature('surf1').set('rangecolormax', 1.5);

model.study('std2').feature('time').set('plot', true);
model.study('std2').feature('time').set('plotgroup', 'pg5');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol3').study('std2');
model.sol('sol3').feature.remove('t1');
model.sol('sol3').feature.remove('v1');
model.sol('sol3').feature.remove('st1');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'time');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'time');
model.sol('sol3').create('t1', 'Time');
model.sol('sol3').feature('t1').set('tlist', 'range(0,0.05,3)');
model.sol('sol3').feature('t1').set('plot', 'on');
model.sol('sol3').feature('t1').set('plotgroup', 'pg5');
model.sol('sol3').feature('t1').set('plotfreq', 'tout');
model.sol('sol3').feature('t1').set('probesel', 'all');
model.sol('sol3').feature('t1').set('probes', {});
model.sol('sol3').feature('t1').set('probefreq', 'tsteps');
model.sol('sol3').feature('t1').set('rtol', 1.0E-5);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('reacf', true);
model.sol('sol3').feature('t1').set('storeudot', true);
model.sol('sol3').feature('t1').set('tstepsgenalpha', 'strict');
model.sol('sol3').feature('t1').set('endtimeinterpolation', true);
model.sol('sol3').feature('t1').set('timemethod', 'genalpha');
model.sol('sol3').feature('t1').set('estrat', 'exclude');
model.sol('sol3').feature('t1').set('control', 'time');
model.sol('sol3').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol3').feature('t1').create('i1', 'Iterative');
model.sol('sol3').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol3').feature('t1').feature('fc1').set('linsolver', 'i1');
model.sol('sol3').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol3').feature('t1').feature.remove('fcDef');
model.sol('sol3').attach('std2');
model.sol('sol3').runAll;

model.result('pg5').run;

model.study.create('std3');
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').setSolveFor('/physics/ec', false);
model.study('std3').feature('time').setSolveFor('/physics/spf', false);
model.study('std3').feature('time').setSolveFor('/physics/fpt', true);
model.study('std3').label('Study 3, Dielectrophoretic Force');
model.study('std3').feature('time').set('tlist', 'range(0,0.05,3)');
model.study('std3').feature('time').set('usesol', true);
model.study('std3').feature('time').set('notsolmethod', 'sol');
model.study('std3').feature('time').set('notstudy', 'std1');

model.sol.create('sol4');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol4').study('std3');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std3');
model.sol('sol4').feature('st1').set('studystep', 'time');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'time');
model.sol('sol4').create('t1', 'Time');
model.sol('sol4').feature('t1').set('tlist', 'range(0,0.05,3)');
model.sol('sol4').feature('t1').set('plot', 'off');
model.sol('sol4').feature('t1').set('plotgroup', 'pg1');
model.sol('sol4').feature('t1').set('plotfreq', 'tout');
model.sol('sol4').feature('t1').set('probesel', 'all');
model.sol('sol4').feature('t1').set('probes', {});
model.sol('sol4').feature('t1').set('probefreq', 'tsteps');
model.sol('sol4').feature('t1').set('rtol', 1.0E-5);
model.sol('sol4').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol4').feature('t1').set('reacf', true);
model.sol('sol4').feature('t1').set('storeudot', true);
model.sol('sol4').feature('t1').set('tstepsgenalpha', 'strict');
model.sol('sol4').feature('t1').set('endtimeinterpolation', true);
model.sol('sol4').feature('t1').set('timemethod', 'genalpha');
model.sol('sol4').feature('t1').set('estrat', 'exclude');
model.sol('sol4').feature('t1').set('control', 'time');
model.sol('sol4').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol4').feature('t1').create('i1', 'Iterative');
model.sol('sol4').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol4').feature('t1').feature('fc1').set('linsolver', 'i1');
model.sol('sol4').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol4').feature('t1').feature.remove('fcDef');
model.sol('sol4').attach('std3');
model.sol('sol4').runFromTo('st1', 'v1');

model.result.dataset.create('part2', 'Particle');
model.result.dataset('part2').set('solution', 'sol4');
model.result.dataset('part2').set('posdof', {'comp1.qx' 'comp1.qy'});
model.result.dataset('part2').set('geom', 'geom1');
model.result.dataset('part2').set('pgeom', 'pgeom_fpt');
model.result.dataset('part2').set('pgeomspec', 'fromphysics');
model.result.dataset('part2').set('physicsinterface', 'fpt');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'part2');
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').label('Particle Trajectories (fpt) 1');
model.result('pg6').create('traj1', 'ParticleTrajectories');
model.result('pg6').feature('traj1').set('pointtype', 'point');
model.result('pg6').feature('traj1').set('linetype', 'none');
model.result('pg6').feature('traj1').create('col1', 'Color');
model.result('pg6').feature('traj1').feature('col1').set('expr', 'fpt.V');
model.result('pg6').run;
model.result('pg6').set('showlegends', false);
model.result('pg6').run;
model.result('pg6').feature('traj1').set('pointradiusexpr', 'if(fpt.dp==dp2,dp2/2,dp1)');
model.result('pg6').run;
model.result('pg6').feature('traj1').feature('col1').set('expr', 'fpt.dp');
model.result('pg6').feature('traj1').feature('col1').set('colortable', 'WaveLight');
model.result('pg6').run;
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'spf.U');
model.result('pg6').feature('surf1').set('descr', 'Velocity magnitude');
model.result('pg6').feature('surf1').set('unit', 'mm/s');
model.result('pg6').feature('surf1').set('colortable', 'GrayScale');
model.result('pg6').feature('surf1').set('rangecoloractive', true);
model.result('pg6').feature('surf1').set('rangecolormin', -1);
model.result('pg6').feature('surf1').set('rangecolormax', 1.5);
model.result('pg6').run;
model.result('pg6').create('str1', 'Streamline');
model.result('pg6').feature('str1').set('expr', {'ec.Ex' 'ec.Ey'});
model.result('pg6').feature('str1').set('descr', 'Electric field');
model.result('pg6').feature('str1').set('startmethod', 'coord');
model.result('pg6').feature('str1').set('xcoord', 'range(102.5,5,137.5) range(262.5,5,297.5) range(422.5,5,457.5)');
model.result('pg6').feature('str1').set('ycoord', 60);
model.result('pg6').feature('str1').set('color', 'yellow');
model.result('pg6').feature('str1').set('pointtype', 'arrow');
model.result('pg6').feature('str1').set('arrowcountactive', true);
model.result('pg6').feature('str1').set('arrowcount', 100);
model.result('pg6').feature.move('str1', 0);

model.study('std3').feature('time').set('plot', true);
model.study('std3').feature('time').set('plotgroup', 'pg6');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol4').study('std3');
model.sol('sol4').feature.remove('t1');
model.sol('sol4').feature.remove('v1');
model.sol('sol4').feature.remove('st1');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std3');
model.sol('sol4').feature('st1').set('studystep', 'time');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'time');
model.sol('sol4').create('t1', 'Time');
model.sol('sol4').feature('t1').set('tlist', 'range(0,0.05,3)');
model.sol('sol4').feature('t1').set('plot', 'on');
model.sol('sol4').feature('t1').set('plotgroup', 'pg6');
model.sol('sol4').feature('t1').set('plotfreq', 'tout');
model.sol('sol4').feature('t1').set('probesel', 'all');
model.sol('sol4').feature('t1').set('probes', {});
model.sol('sol4').feature('t1').set('probefreq', 'tsteps');
model.sol('sol4').feature('t1').set('rtol', 1.0E-5);
model.sol('sol4').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol4').feature('t1').set('reacf', true);
model.sol('sol4').feature('t1').set('storeudot', true);
model.sol('sol4').feature('t1').set('tstepsgenalpha', 'strict');
model.sol('sol4').feature('t1').set('endtimeinterpolation', true);
model.sol('sol4').feature('t1').set('timemethod', 'genalpha');
model.sol('sol4').feature('t1').set('estrat', 'exclude');
model.sol('sol4').feature('t1').set('control', 'time');
model.sol('sol4').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol4').feature('t1').create('i1', 'Iterative');
model.sol('sol4').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol4').feature('t1').feature('fc1').set('linsolver', 'i1');
model.sol('sol4').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol4').feature('t1').feature.remove('fcDef');
model.sol('sol4').attach('std3');
model.sol('sol4').runAll;

model.result('pg6').run;
model.result('pg6').run;

model.title('Dielectrophoretic Separation of Platelets from Red Blood Cells');

model.description('This example demonstrates the continuous separation of platelets (PLTs) from red blood cells (RBCs) in a microfluidic channel using Dielectrophoresis (DEP).');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('dielectrophoretic_separation.mph');

model.modelNode.label('Components');

out = model;
