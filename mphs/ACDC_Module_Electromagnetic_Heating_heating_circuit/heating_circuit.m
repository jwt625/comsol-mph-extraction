function out = model
%
% heating_circuit.m
%
% Model exported on May 26 2025, 21:24 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Electromagnetic_Heating');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics('solid').prop('StructuralTransientBehavior').set('StructuralTransientBehavior', 'Quasistatic');
model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');
model.physics.create('ecis', 'ElectricCurrentsShell', 'geom1');
model.physics('ecis').model('comp1');
model.physics('ecis').prop('DefaultDescription').set('DefaultDescription', 'Electric_currents_in_layered_shells');
model.physics('ecis').prop('LayerSelection').set('lth_mat', 'from_mat');

model.multiphysics.create('te1', 'ThermalExpansion', 'geom1', 3);
model.multiphysics('te1').set('Heat_physics', 'ht');
model.multiphysics('te1').set('Solid_physics', 'solid');
model.multiphysics('te1').selection.all;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/physics/ecis', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/te1', true);

model.param.set('V_in', '12[V]');
model.param.descr('V_in', 'Input voltage');
model.param.set('d_layer', '10[um]');
model.param.descr('d_layer', 'Layer thickness');
model.param.set('sigma_silver', '6.3e7[S/m]');
model.param.descr('sigma_silver', 'Electric conductivity of silver');
model.param.set('sigma_nichrome', '9.3e5[S/m]');
model.param.descr('sigma_nichrome', 'Electric conductivity of nichrome');
model.param.set('T_air', '20[degC]');
model.param.descr('T_air', 'Air temperature');
model.param.set('h_air', '5[W/(m^2*K)]');
model.param.descr('h_air', 'Heat transfer film coefficient, air');
model.param.set('T_fluid', '353[K]');
model.param.descr('T_fluid', 'Fluid temperature');
model.param.set('h_fluid', '20[W/(m^2*K)]');
model.param.descr('h_fluid', 'Heat transfer film coefficient, fluid');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', [80 130 2]);
model.geom('geom1').run('blk1');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').set('quickz', 2);
model.geom('geom1').feature('wp1').geom.create('sq1', 'Square');
model.geom('geom1').feature('wp1').geom.feature('sq1').set('size', 10);
model.geom('geom1').feature('wp1').geom.feature('sq1').set('pos', [7 10]);
model.geom('geom1').feature('wp1').geom.run('sq1');
model.geom('geom1').feature('wp1').geom.feature.duplicate('sq2', 'sq1');
model.geom('geom1').feature('wp1').geom.feature('sq2').set('pos', [30 8]);
model.geom('geom1').feature('wp1').geom.run('sq2');
model.geom('geom1').feature('wp1').geom.create('pol1', 'Polygon');
model.geom('geom1').feature('wp1').geom.feature('pol1').set('source', 'file');
model.geom('geom1').feature('wp1').geom.feature('pol1').set('filename', 'heating_circuit_polygon.txt');
model.geom('geom1').feature('wp1').geom.run('pol1');
model.geom('geom1').feature('wp1').geom.create('fil1', 'Fillet');
model.geom('geom1').feature('wp1').geom.feature('fil1').selection('pointinsketch').set('pol1', [2 3 4 5 6 7 8 23 24 25 26 27 28 29 34 36 37 41 42]);
model.geom('geom1').feature('wp1').geom.feature('fil1').set('radius', 10);
model.geom('geom1').feature('wp1').geom.run('fil1');
model.geom('geom1').feature('wp1').geom.create('fil2', 'Fillet');
model.geom('geom1').feature('wp1').geom.feature('fil2').selection('pointinsketch').set('fil1', [6 7 8 9 10 11 12 26 27 28 29 30 31 37 40 43 46 49 50]);
model.geom('geom1').feature('wp1').geom.feature('fil2').set('radius', 5);
model.geom('geom1').feature('wp1').geom.run('fil2');
model.geom('geom1').run('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Circuit');
model.selection('sel1').geom(2);
model.selection('sel1').set([6 7 8]);

model.physics('ht').create('sls1', 'SolidLayeredShell', 2);
model.physics('ht').feature('sls1').selection.named('sel1');
model.physics('ht').feature('sls1').set('LayerType', 'Conductive');
model.physics('ecis').selection.named('sel1');
model.physics('ecis').feature('csh1').set('epsilonr_crel_DE_RelativePermittivity_mat', 'userdef');
model.physics('solid').create('tl1', 'ThinLayer', 2);
model.physics('solid').feature('tl1').selection.named('sel1');
model.physics('solid').feature('tl1').set('lth_mat', 'from_mat');

model.multiphysics.create('tetl1', 'ThermalExpansionTL', 'geom1', 2);
model.multiphysics('tetl1').set('bndType', 'allShell');
model.multiphysics('tetl1').set('lth_mat', 'from_mat');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').label('Silica glass');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('diffuse', 'custom');
model.material('mat1').set('ambient', 'custom');
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.99);
model.material('mat1').set('roughness', 0.02);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'1e-14[S/m]' '0' '0' '0' '1e-14[S/m]' '0' '0' '0' '1e-14[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'0.55e-6[1/K]' '0' '0' '0' '0.55e-6[1/K]' '0' '0' '0' '0.55e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '703[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'3.75' '0' '0' '0' '3.75' '0' '0' '0' '3.75'});
model.material('mat1').propertyGroup('def').set('density', '2203[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'1.38[W/(m*K)]' '0' '0' '0' '1.38[W/(m*K)]' '0' '0' '0' '1.38[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '73.1[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.17');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1.45' '0' '0' '0' '1.45' '0' '0' '0' '1.45'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').selection.geom('geom1', 2);
model.material('mat2').propertyGroup.create('shell', 'Layered_material');
model.material('mat2').propertyGroup('shell').set('lth', '1e-4[m]');
model.material('mat2').selection.geom('geom1', 2);
model.material('mat2').label('Silver Layer');
model.material('mat2').selection.named('sel1');
model.material('mat2').set('middlePlane', 'bottom');
model.material('mat2').propertyGroup('def').set('heatcapacity', {'230'});
model.material('mat2').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat2').propertyGroup('Enu').set('E', {'83e9'});
model.material('mat2').propertyGroup('Enu').set('nu', {'0.37'});
model.material('mat2').propertyGroup('def').set('density', {'10500'});
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'420'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'sigma_silver'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'18.9e-6'});
model.material('mat2').propertyGroup('shell').set('lth', {'d_layer'});
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').selection.geom('geom1', 2);
model.material('mat3').propertyGroup.create('shell', 'Layered_material');
model.material('mat3').propertyGroup('shell').set('lth', '1e-4[m]');
model.material('mat3').selection.geom('geom1', 2);
model.material('mat3').selection.set([7]);
model.material('mat3').label('Nichrome Layer');
model.material('mat3').set('middlePlane', 'bottom');
model.material('mat3').propertyGroup('def').set('heatcapacity', {'20'});
model.material('mat3').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat3').propertyGroup('Enu').set('E', {'213e9'});
model.material('mat3').propertyGroup('Enu').set('nu', {'0.33'});
model.material('mat3').propertyGroup('def').set('density', {'9000'});
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'15'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'sigma_nichrome'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'10e-6'});
model.material('mat3').propertyGroup('shell').set('lth', {'d_layer'});

model.physics('ecis').create('bgnd1', 'BoundaryGround', 1);
model.physics('ecis').feature('bgnd1').selection.set([43]);
model.physics('ecis').create('bpot1', 'BoundaryElectricPotential', 1);
model.physics('ecis').feature('bpot1').selection.set([10]);
model.physics('ecis').feature('bpot1').set('V0', 'V_in');
model.physics('ecis').create('cls1', 'ContinuityLayeredShell', 1);
model.physics('ecis').feature('cls1').set('shelllist_src', 'mat2');
model.physics('ecis').feature('cls1').set('shelllist', 'mat3');

model.multiphysics.create('ehls1', 'ElectromagneticHeatingLayeredShell', 'geom1', 2);
model.multiphysics('ehls1').set('bndType', 'allShell');

model.physics('ht').create('hf1', 'HeatFluxBoundary', 2);
model.physics('ht').feature('hf1').selection.set([4 6 7 8]);
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 'h_air');
model.physics('ht').feature('hf1').set('Text', 'T_air');
model.physics('ht').create('hf2', 'HeatFluxBoundary', 2);
model.physics('ht').feature('hf2').selection.set([3]);
model.physics('ht').feature('hf2').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf2').set('h', 'h_fluid');
model.physics('ht').feature('hf2').set('Text', 'T_fluid');
model.physics('solid').create('rms1', 'RigidMotionSuppression', 3);
model.physics('solid').create('wrp1', 'Warpage', 2);
model.physics('solid').feature('wrp1').selection.set([3]);

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.set([4 6 7 8]);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.named('sel1');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 2);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 3);
model.mesh('mesh1').run;

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_ecis_Vc'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Electric Currents in Layered Shells');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_T'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 1);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables ht (te1)');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Temperature');
model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_u'});
model.sol('sol1').feature('s1').create('d2', 'Direct');
model.sol('sol1').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d2').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d2').label('Suggested Direct Solver solid (te1)');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'd2');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').label('Solid Mechanics');
model.sol('sol1').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver solid (te1)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, heat transfer variables ht (te1)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-3');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('colortable', 'Rainbow');
model.result('pg1').feature('vol1').set('colortabletrans', 'none');
model.result('pg1').feature('vol1').set('colorscalemode', 'linear');
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').set('colortable', 'Prism');
model.result('pg1').feature('vol1').create('def', 'Deform');
model.result('pg1').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.dataset.create('dset1solidlshl_tl', 'LayeredMaterial');
model.result.dataset('dset1solidlshl_tl').set('data', 'dset1');
model.result.dataset('dset1solidlshl_tl').label('Thin Layer');
model.result.dataset('dset1solidlshl_tl').set('data', 'dset1');
model.result.dataset('dset1solidlshl_tl').set('scale', 1);
model.result.dataset('dset1solidlshl_tl').selection.geom(2);
model.result.dataset('dset1solidlshl_tl').selection.set([6 7 8]);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'stressThinLayer');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').label('Stress, Thin Layer (solid)');
model.result('pg2').create('vol1', 'Volume');
model.result('pg2').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg2').feature('vol1').set('threshold', 'manual');
model.result('pg2').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg2').feature('vol1').set('colortable', 'Rainbow');
model.result('pg2').feature('vol1').set('colortabletrans', 'none');
model.result('pg2').feature('vol1').set('colorscalemode', 'linear');
model.result('pg2').feature('vol1').set('data', 'dset1solidlshl_tl');
model.result('pg2').feature('vol1').set('solutionparams', 'parent');
model.result('pg2').feature('vol1').set('colortable', 'Prism');
model.result('pg2').feature('vol1').set('resolution', 'custom');
model.result('pg2').feature('vol1').set('refine', 2);
model.result('pg2').feature('vol1').create('def', 'Deform');
model.result('pg2').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg2').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.dataset('dset1solidlshl_tl').set('data', 'dset1');
model.result.dataset('dset1solidlshl_tl').selection.geom('geom1', 2);
model.result.dataset('dset1solidlshl_tl').selection.set([6 7 8]);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Temperature (ht)');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond2/pcond1/pg1');
model.result('pg3').selection.geom('geom1', 3);
model.result('pg3').selection.set([1]);
model.result('pg3').feature.create('vol1', 'Volume');
model.result('pg3').feature('vol1').label('Domain');
model.result('pg3').feature('vol1').set('showsolutionparams', 'on');
model.result('pg3').feature('vol1').set('solutionparams', 'parent');
model.result('pg3').feature('vol1').set('expr', 'T');
model.result('pg3').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg3').feature('vol1').set('smooth', 'internal');
model.result('pg3').feature('vol1').set('showsolutionparams', 'on');
model.result('pg3').feature('vol1').set('data', 'parent');
model.result('pg3').feature.create('vol2', 'Volume');
model.result('pg3').feature('vol2').label('Layered Shell');
model.result('pg3').feature('vol2').set('data', 'dset1solidlshl_tl');
model.result('pg3').feature('vol2').set('showsolutionparams', 'on');
model.result('pg3').feature('vol2').set('solutionparams', 'parent');
model.result('pg3').feature('vol2').set('expr', 'T');
model.result('pg3').feature('vol2').set('titletype', 'none');
model.result('pg3').feature('vol2').set('smooth', 'internal');
model.result('pg3').feature('vol2').set('showsolutionparams', 'on');
model.result('pg3').feature('vol2').set('data', 'dset1solidlshl_tl');
model.result('pg3').feature('vol2').set('inheritplot', 'vol1');
model.result('pg3').feature.create('line1', 'Line');
model.result('pg3').feature('line1').label('Layered Shell Edges');
model.result('pg3').feature('line1').set('data', 'dset1solidlshl_tl');
model.result('pg3').feature('line1').set('showsolutionparams', 'on');
model.result('pg3').feature('line1').set('solutionparams', 'parent');
model.result('pg3').feature('line1').set('expr', '1');
model.result('pg3').feature('line1').set('titletype', 'none');
model.result('pg3').feature('line1').set('coloring', 'uniform');
model.result('pg3').feature('line1').set('color', 'fromtheme');
model.result('pg3').feature('line1').set('smooth', 'internal');
model.result('pg3').feature('line1').set('showsolutionparams', 'on');
model.result('pg3').feature('line1').set('data', 'dset1solidlshl_tl');
model.result.dataset.create('lshl1', 'LayeredMaterial');
model.result.dataset('lshl1').set('data', 'dset1');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Electric Potential (ecis)');
model.result('pg4').set('data', 'lshl1');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').set('data', 'lshl1');
model.result('pg4').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond4/pcond1/pcond1/pg1');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('solutionparams', 'parent');
model.result('pg4').feature('surf1').set('expr', 'V');
model.result('pg4').feature('surf1').set('colortable', 'Dipole');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('vol1').set('unit', 'MPa');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').feature('vol1').set('unit', 'MPa');
model.result('pg2').run;
model.result('pg3').run;
model.result.dataset.duplicate('dset2', 'dset1');
model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.named('sel1');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').run;
model.result('pg5').label('Surface Losses');
model.result('pg5').set('data', 'dset2');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', 'ecis.Qsh');
model.result('pg5').feature('surf1').set('descr', 'Surface loss density, electromagnetic');
model.result('pg5').run;

model.view('view1').set('scenelight', false);

model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').run;
model.result('pg6').label('Interface Stress');
model.result('pg6').set('data', 'dset2');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'sqrt(solid.Tax^2+solid.Tay^2)');
model.result('pg6').feature('surf1').set('unit', 'MPa');
model.result('pg6').feature('surf1').set('colortable', 'Prism');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').label('Warpage (wrp1)');
model.result('pg7').set('data', 'dset1');
model.result('pg7').set('defaultPlotID', 'warpage|wrp1');
model.result('pg7').feature.create('surf1', 'Surface');
model.result('pg7').feature('surf1').label('Warping Displacement');
model.result('pg7').feature('surf1').set('expr', 'solid.wrp1.dispn_warp');
model.result('pg7').feature('surf1').set('colortable', 'WaveLight');
model.result('pg7').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg7').feature('surf1').set('smooth', 'internal');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('data', 'parent');
model.result('pg7').feature('surf1').feature.create('def1', 'Deform');
model.result('pg7').feature('surf1').feature('def1').set('expr', {'solid.wrp1.u' 'solid.wrp1.v' 'solid.wrp1.w'});
model.result('pg7').feature('surf1').feature.create('mrkr1', 'Marker');
model.result('pg7').feature.create('surf2', 'Surface');
model.result('pg7').feature('surf2').label('Average Displacement');
model.result('pg7').feature('surf2').set('expr', 'solid.wrp1.disp_avg');
model.result('pg7').feature('surf2').set('coloring', 'uniform');
model.result('pg7').feature('surf2').set('color', 'gray');
model.result('pg7').feature('surf2').set('smooth', 'internal');
model.result('pg7').feature('surf2').set('inheritcolor', false);
model.result('pg7').feature('surf2').set('inheritrange', false);
model.result('pg7').feature('surf2').set('showsolutionparams', 'on');
model.result('pg7').feature('surf2').set('data', 'parent');
model.result('pg7').feature('surf2').set('inheritplot', 'surf1');
model.result('pg7').feature('surf2').feature.create('def1', 'Deform');
model.result('pg7').feature('surf2').feature('def1').set('expr', {'solid.wrp1.u_avg' 'solid.wrp1.v_avg' 'solid.wrp1.w_avg'});
model.result('pg7').label('Warpage (wrp1)');
model.result('pg7').run;
model.result.numerical.create('int1', 'IntSurface');
model.result.numerical('int1').set('intvolume', true);
model.result.numerical('int1').selection.set([3]);
model.result.numerical('int1').set('expr', {'ht.q0'});
model.result.numerical('int1').set('descr', {'Inward heat flux'});
model.result.numerical('int1').set('unit', {'W'});
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Surface Integration 1');
model.result.numerical('int1').set('table', 'tbl1');
model.result.numerical('int1').setResult;
model.result.numerical.create('int2', 'IntSurface');
model.result.numerical('int2').set('intvolume', true);
model.result.numerical('int2').selection.named('sel1');
model.result.numerical('int2').set('expr', {'ecis.Qsh'});
model.result.numerical('int2').set('descr', {'Surface loss density, electromagnetic'});
model.result.numerical('int2').set('unit', {'W'});
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Surface Integration 2');
model.result.numerical('int2').set('table', 'tbl2');
model.result.numerical('int2').setResult;
model.result('pg1').run;

model.title('Heating Circuit');

model.description('A stationary model of a heating circuit, including DC induced Joule heating, heat transfer and structural mechanics analysis of the thin conductive layer on a solid glass plate.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('heating_circuit.mph');

model.modelNode.label('Components');

out = model;
