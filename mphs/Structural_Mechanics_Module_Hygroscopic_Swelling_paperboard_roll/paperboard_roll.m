function out = model
%
% paperboard_roll.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Hygroscopic_Swelling');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics('solid').prop('StructuralTransientBehavior').set('StructuralTransientBehavior', 'Quasistatic');
model.physics.create('mts', 'MoistureTransportInSolids', 'geom1');
model.physics('mts').model('comp1');

model.multiphysics.create('unporo1', 'UnsaturatedPoroelasticCoupling', 'geom1', 2);
model.multiphysics('unporo1').set('Solid_physics', 'solid');
model.multiphysics('unporo1').set('Moisture_physics', 'mts');
model.multiphysics('unporo1').selection.all;

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/solid', true);
model.study('std1').feature('time').setSolveFor('/physics/mts', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/unporo1', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('Ri', '0.1[m]', 'Internal radius');
model.param.set('Ro', '0.5[m]', 'Outer radius');
model.param.set('H', '0.7[m]', 'Height');
model.param.set('por', '0.5', 'Porosity');
model.param.set('krl', '0', 'Relative permeability of liquid');
model.param.set('krm', '1', 'Relative permeability of moist air');
model.param.set('rho_s', '1500[kg/m^3]', 'Density of paperboard');
model.param.set('A', '6.232e3[J/mol]', 'Water content parameter');
model.param.set('B', '20.56', 'Water content parameter');
model.param.set('tau_zd', '1.2929E-12[s]', 'Vapor diffusion time (through-thickness direction)');
model.param.set('tau_cd', '7.1295E-11[s]', 'Vapor diffusion time (cross-machine direction)');
model.param.set('Km_zd', '4.3646E-15[m^2]', 'Moist air permeability parameter (through-thickness direction)');
model.param.set('Km_cd', '1.9405E-13[m^2]', 'Moist air permeability parameter (cross-machine direction)');
model.param.set('a_zd', '4.18', 'Permeability exponent (through-thickness)');
model.param.set('a_cd', '2.2', 'Permeability exponent (cross-machine direction)');
model.param.set('E_md', '3.2[GPa]', 'Young''s modulus (machine direction)');
model.param.set('E_cd', '2[GPa]', 'Young''s modulus (cross-machine direction)');
model.param.set('E_zd', '0.016[GPa]', 'Young''s modulus (through-thickness)');
model.param.set('nu_mc', '0.34', 'Poisson''s ratio');
model.param.set('nu_mz', '0.01', 'Poisson''s ratio');
model.param.set('nu_cz', '0.01', 'Poisson''s ratio');
model.param.set('G_mc', '1[GPa]', 'Shear modulus');
model.param.set('G_mz', '0.058[GPa]', 'Shear modulus');
model.param.set('G_cz', '0.057[GPa]', 'Shear modulus');
model.param.set('alpha_B', '1', 'Biot-Willis coefficient');
model.param.set('T_amb', '293.15[K]', 'Ambient temperature');
model.param.set('phi_end', '0.85', 'Final ambient relative humidity');
model.param.set('phi_init', '0.5', 'Initial ambient relative humidity');
model.param.set('t_r', '1[day]', 'Time to increase relative humidity');
model.param.set('t_end', '90[day]', 'Simulation time');
model.param.label('Model Parameters');

model.modelNode('comp1').spatialCoord({'zd' 'phi' 'z'});
model.modelNode('comp1').spatialCoord({'zd' 'md' 'z'});
model.modelNode('comp1').spatialCoord({'zd' 'md' 'cd'});
model.modelNode('comp1').materialCoord({'ZD' 'PHI' 'Z'});
model.modelNode('comp1').materialCoord({'ZD' 'MD' 'Z'});
model.modelNode('comp1').materialCoord({'ZD' 'MD' 'CD'});

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'Ro-Ri' 'H/2'});
model.geom('geom1').feature('r1').set('pos', {'Ri' '0'});
model.geom('geom1').feature('r1').label('Paper');
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'Ri' '1.2*H/2'});
model.geom('geom1').feature('r2').label('Holder');
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('createpairs', false);
model.geom('geom1').run('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(1);
model.selection('sel1').set([7 8]);
model.selection('sel1').label('Boundaries Facing Ambient');

model.func.create('pw1', 'Piecewise');
model.func('pw1').model('comp1');
model.func('pw1').setIndex('pieces', 0, 0, 0);
model.func('pw1').setIndex('pieces', 't_r', 0, 1);
model.func('pw1').setIndex('pieces', 'phi_init +(phi_end-phi_init)*x/t_r', 0, 2);
model.func('pw1').setIndex('pieces', 't_r', 1, 0);
model.func('pw1').setIndex('pieces', 't_end', 1, 1);
model.func('pw1').setIndex('pieces', 'phi_end', 1, 2);
model.func('pw1').set('argunit', 's');
model.func('pw1').set('fununit', '1');
model.func('pw1').set('funcname', 'phiw_fun');
model.func('pw1').label('Ambient Relative Humidity');

model.common.create('ampr1', 'AmbientProperties', 'comp1');
model.common('ampr1').set('T_amb', 'T_amb');
model.common('ampr1').set('phi_amb', 'phiw_fun(t)');

model.material.create('pmat1', 'PorousMedia', 'comp1');
model.material('pmat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('pmat1').propertyGroup('def').func('an1').set('expr', '-(1/B)*log(-R_const*T_amb/A*log(phi))');
model.material('pmat1').propertyGroup('def').func('an1').set('args', 'phi');
model.material('pmat1').propertyGroup('def').func('an1').set('fununit', '1');
model.material('pmat1').propertyGroup('def').func('an1').setIndex('argunit', 1, 0);
model.material('pmat1').propertyGroup('def').func('an1').set('funcname', 'wc_int');
model.material('pmat1').propertyGroup('def').func('an1').label('Water Content');
model.material('pmat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('pmat1').propertyGroup('def').func('an2').set('expr', 'k*(epsilonp*sm/(por*0.9))^a*(1-por*0.9)/(1-epsilonp*sm)');
model.material('pmat1').propertyGroup('def').func('an2').set('args', 'k, a, sm, epsilonp');
model.material('pmat1').propertyGroup('def').func('an2').set('fununit', 'm^2');
model.material('pmat1').propertyGroup('def').func('an2').setIndex('argunit', 'm^2', 0);
model.material('pmat1').propertyGroup('def').func('an2').setIndex('argunit', 1, 1);
model.material('pmat1').propertyGroup('def').func('an2').setIndex('argunit', 1, 2);
model.material('pmat1').propertyGroup('def').func('an2').setIndex('argunit', 1, 3);
model.material('pmat1').propertyGroup('def').func('an2').set('funcname', 'kappa_fun');
model.material('pmat1').propertyGroup('def').func('an2').label('Moist Air Permeability');
model.material('pmat1').selection.set([2]);
model.material('pmat1').propertyGroup('def').set('watercontent', {'wc_int(phi)*rho_s*(1-por)'});
model.material('pmat1').propertyGroup('def').set('hydraulicpermeability', {'kappa_fun(Km_zd,a_zd,mts.sm,mts.porosity)' '0' 'kappa_fun(Km_cd,a_cd,mts.sm,mts.porosity)'});
model.material('pmat1').feature.create('solid1', 'Solid', 'comp1');

model.physics('mts').selection.set([2]);

model.material('pmat1').feature('solid1').set('vfrac', '1-por');
model.material('pmat1').propertyGroup('def').addInput('relativehumidity');

model.physics('mts').feature('pms1').feature('lw1').set('kappa_rl', 'krl');
model.physics('mts').feature('pms1').feature('ma1').set('kappa_rm', 'krm');
model.physics('mts').feature('pms1').feature('ma1').set('Dv', {'tau_zd*(R_const*T_amb/mts.M_v)' '0' '0' '0' '0' '0' '0' '0' 'tau_cd*(R_const*T_amb/mts.M_v)'});
model.physics('mts').feature('init1').set('phi_init', 'phi_init');
model.physics('mts').create('mcp1', 'MoistureContentAndPressure', 1);
model.physics('mts').feature('mcp1').selection.named('sel1');
model.physics('mts').feature('mcp1').set('phi_bc_src', 'root.comp1.ampr1.phi_amb');
model.physics('mts').feature('mcp1').set('pm_bc_src', 'root.comp1.ampr1.p_amb');
model.physics('mts').create('sym1', 'Symmetry', 1);
model.physics('mts').feature('sym1').selection.set([6]);
model.physics('solid').selection.set([2]);
model.physics('solid').feature('lemm1').set('SolidModel', 'Orthotropic');
model.physics('solid').create('roll1', 'Roller', 1);
model.physics('solid').feature('roll1').selection.set([5]);
model.physics('solid').create('symp1', 'SymmetryPlane', 1);
model.physics('solid').feature('symp1').selection.set([6]);

model.material('pmat1').propertyGroup('def').set('density', {'rho_s'});
model.material('pmat1').propertyGroup.create('PoroelasticModel', 'Poroelastic_material');
model.material('pmat1').propertyGroup('PoroelasticModel').set('alphaB', {'alpha_B'});
model.material('pmat1').propertyGroup.create('Orthotropic', 'Orthotropic');
model.material('pmat1').propertyGroup('Orthotropic').set('nuvector', {'nu_mz' 'nu_mc' 'nu_cz'});
model.material('pmat1').propertyGroup('Orthotropic').set('Gvector', {'G_mz' 'G_mc' 'G_cz'});
model.material('pmat1').propertyGroup('Orthotropic').set('Evector', {'E_zd' 'E_md' 'E_cd'});

model.multiphysics('unporo1').set('pfref_src', 'root.comp1.mts.pf_init');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([2]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis1').set('elemcount', 30);
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([6 7]);
model.mesh('mesh1').feature('map1').feature('dis1').set('elemratio', 8);
model.mesh('mesh1').feature('map1').feature('dis1').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis2').set('elemcount', 30);
model.mesh('mesh1').feature('map1').feature('dis2').set('elemratio', 8);
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([5 8]);
model.mesh('mesh1').feature('map1').feature('dis2').set('reverse', true);
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('bl1').selection.set([2]);
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('sel1');
model.mesh('mesh1').create('map2', 'Map');
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tunit', 'd');
model.study('std1').feature('time').set('tlist', 'range(0,t_r/20,t_r) range(t_r,1[d],t_end)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mts_phi').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mts_pm').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mts_phi').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mts_pm').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mts_phi').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_mts_pm').set('scaleval', '1000');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.6529931086925803');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,t_r/20,t_r) range(t_r,1[d],t_end)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 10);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.8);
model.sol('sol1').feature('t1').feature('fc1').set('ratelimitactive', false);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 10);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.8);
model.sol('sol1').feature('t1').feature('fc1').set('ratelimitactive', false);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 111, 0);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').set('resolution', 'normal');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('expr', {'u' 'w'});
model.result('pg1').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.dataset.create('dset1solidrev', 'Revolve2D');
model.result.dataset('dset1solidrev').set('data', 'dset1');
model.result.dataset('dset1solidrev').set('revangle', 225);
model.result.dataset('dset1solidrev').set('startangle', -90);
model.result.dataset('dset1solidrev').set('hasspacevars', true);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1solidrev');
model.result('pg2').setIndex('looplevel', 111, 0);
model.result('pg2').set('defaultPlotID', 'stress3D');
model.result('pg2').label('Stress, 3D (solid)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg2').feature('surf1').set('threshold', 'manual');
model.result('pg2').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colortabletrans', 'none');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').feature('surf1').set('colortable', 'Prism');
model.result('pg2').feature('surf1').create('def', 'Deform');
model.result.dataset('dset1solidrev').set('hasspacevars', true);
model.result('pg2').feature('surf1').feature('def').set('revcoordsys', 'cylindrical');
model.result('pg2').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg2').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg2').feature('surf1').feature('def').set('descractive', true);
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Relative Humidity (mts)');
model.result('pg3').set('dataisaxisym', 'off');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 111, 0);
model.result('pg3').set('defaultPlotID', 'MoistureTransportInSolids/icom2/pdef1/pcond2/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'mts.phi');
model.result('pg3').feature('surf1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg3').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').label('Revolution 2D 2');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset1');
model.result.dataset('rev1').selection.geom('geom1', 2);
model.result.dataset('rev1').selection.set([2]);
model.result('pg1').run;
model.result.configuration.create('msol1', 'MultiSelectSolution');
model.result.configuration('msol1').setIndex('looplevelinput', 'interp', 0);
model.result.configuration('msol1').setIndex('interp', '1[d] 10[d] 30[d] 90[d]', 0);
model.result('pg3').run;
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').create('surf2', 'Surface');
model.result('pg3').feature('surf2').set('expr', '1');
model.result('pg3').feature('surf2').set('coloring', 'uniform');
model.result('pg3').feature('surf2').set('color', 'gray');
model.result('pg3').feature('surf2').create('sel1', 'Selection');
model.result('pg3').feature('surf2').feature('sel1').selection.set([1]);
model.result('pg3').run;
model.result('pg3').feature('surf1').create('def1', 'Deform');
model.result('pg3').run;
model.result('pg3').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg3').feature('surf1').feature('def1').set('scale', 1);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').set('solutionparams', 'configuration');
model.result('pg4').label('Water Content, Cross Machine');
model.result('pg4').set('titletype', 'none');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'Water content (1)');
model.result('pg4').set('axislimits', true);
model.result('pg4').set('xmin', 0);
model.result('pg4').set('xmax', 'H/2');
model.result('pg4').set('ymin', 0.06);
model.result('pg4').set('ymax', 0.13);
model.result('pg4').set('legendpos', 'upperleft');
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg4').feature('lngr1').set('linewidth', 'preference');
model.result('pg4').feature('lngr1').selection.set([5]);
model.result('pg4').feature('lngr1').set('expr', 'mts.wc/rho_s/(1-por)');
model.result('pg4').feature('lngr1').set('xdata', 'expr');
model.result('pg4').feature('lngr1').set('xdataexpr', 'CD');
model.result('pg4').feature('lngr1').set('legend', true);
model.result('pg4').run;
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Water Content, Through Thickness');
model.result('pg5').set('xmin', 'Ro/1.1');
model.result('pg5').set('xmax', 'Ro');
model.result('pg5').run;
model.result('pg5').feature('lngr1').selection.set([6]);
model.result('pg5').feature('lngr1').set('xdataexpr', 'ZD');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 111, 0);
model.result('pg6').set('defaultPlotID', 'displacement');
model.result('pg6').label('Displacement (solid)');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('showlegends', true);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'solid.disp'});
model.result('pg6').feature('surf1').set('threshold', 'manual');
model.result('pg6').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg6').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg6').feature('surf1').set('colortabletrans', 'none');
model.result('pg6').feature('surf1').set('colorscalemode', 'linear');
model.result('pg6').feature('surf1').set('resolution', 'normal');
model.result('pg6').feature('surf1').create('def', 'Deform');
model.result('pg6').feature('surf1').feature('def').set('expr', {'u' 'w'});
model.result('pg6').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg6').label('Displacement (solid)');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').feature('surf1').set('unit', 'mm');
model.result('pg6').run;
model.result.dataset.create('mir1', 'Mirror2D');
model.result.dataset('mir1').setIndex('genpoints', 1, 1, 0);
model.result.dataset('mir1').setIndex('genpoints', 0, 1, 1);
model.result.dataset('mir1').set('removesymelem', true);
model.result.dataset.create('rev2', 'Revolve2D');
model.result.dataset('rev2').set('data', 'mir1');
model.result.dataset('rev2').set('startangle', 180);
model.result.dataset('rev2').set('revangle', 270);
model.result.dataset('rev2').label('Revolution 2D: Full PaperBoard');
model.result.dataset('rev2').selection.geom('geom1', 2);
model.result.dataset('rev2').selection.geom('geom1', 2);
model.result.dataset('rev2').selection.set([2]);
model.result.dataset.duplicate('rev3', 'rev2');
model.result.dataset('rev3').label('Revolution 2D: Full Holder');
model.result.dataset('rev3').set('startangle', 0);
model.result.dataset('rev3').set('revangle', 360);
model.result.dataset('rev3').selection.geom('geom1', 2);
model.result.dataset('rev3').selection.set([1]);

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'dataset');
model.nodeGroup('grp1').placeAfter('dataset', 'rev1');
model.nodeGroup('grp1').add('dataset', 'mir1');
model.nodeGroup('grp1').add('dataset', 'rev2');
model.nodeGroup('grp1').add('dataset', 'rev3');
model.nodeGroup('grp1').label('Full Model');

model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').set('data', 'rev2');
model.result('pg7').label('Relative Humidity, Full Model');
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', 'mts.phi');
model.result('pg7').feature('surf1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg7').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg7').run;
model.result('pg7').feature('surf1').set('rangecoloractive', true);
model.result('pg7').feature('surf1').set('rangecolormax', 1);
model.result('pg7').feature('surf1').set('rangecolormin', 0);
model.result('pg7').feature('surf1').create('def1', 'Deform');
model.result('pg7').feature('surf1').feature('def1').set('revcoordsys', 'cylindrical');
model.result('pg7').run;
model.result('pg7').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg7').feature('surf1').feature('def1').set('scale', 2);
model.result('pg7').run;
model.result('pg7').create('surf2', 'Surface');
model.result('pg7').feature('surf2').set('expr', '1');
model.result('pg7').feature('surf2').set('data', 'rev3');
model.result('pg7').feature('surf2').create('mtrl1', 'MaterialAppearance');
model.result('pg7').run;
model.result('pg7').feature('surf2').feature('mtrl1').set('appearance', 'custom');
model.result('pg7').feature('surf2').feature('mtrl1').set('family', 'steel');
model.result('pg7').run;
model.result('pg7').create('con1', 'Contour');
model.result('pg7').feature('con1').set('expr', 'mts.phi');
model.result('pg7').feature('con1').set('inheritplot', 'surf1');
model.result('pg7').feature('con1').set('colorlegend', false);
model.result('pg7').feature('con1').set('number', 10);
model.result('pg7').feature('con1').create('def1', 'Deform');
model.result('pg7').feature('con1').feature('def1').set('revcoordsys', 'cylindrical');
model.result('pg7').run;

model.view.create('view5', 3);
model.view('view5').camera.setIndex('position', -5.990660667419434, 0);
model.view('view5').camera.setIndex('position', 2.4812088012695312, 1);
model.view('view5').camera.setIndex('position', 5.945844650268555, 2);
model.view('view5').camera.setIndex('target', -2.307891845703125E-4, 0);
model.view('view5').camera.setIndex('target', 2.3126602172851562E-4, 1);
model.view('view5').camera.setIndex('target', 4.76837158203125E-7, 2);
model.view('view5').camera.setIndex('up', 0.1975191980600357, 0);
model.view('view5').camera.setIndex('up', 0.9594025015830994, 1);
model.view('view5').camera.setIndex('up', -0.20132383704185486, 2);
model.view('view5').camera.setIndex('rotationpoint', '-2.31027603149414060E-4', 0);
model.view('view5').camera.setIndex('rotationpoint', '2.31027603149414060E-4', 1);
model.view('view5').camera.setIndex('rotationpoint', '0.0', 2);
model.view('view5').camera.setIndex('viewoffset', '-0.056021474301815030', 0);
model.view('view5').camera.setIndex('viewoffset', '4.8406155234793340E-4', 1);

model.result('pg7').run;
model.result('pg7').set('view', 'view5');
model.result('pg7').run;
model.result('pg3').run;

model.title('Moisture Transport in a Paperboard Roll');

model.description('This example demonstrates how to model moisture transfer and induced swelling in a paperboard roll subject to varying ambient conditions. The material properties of the paperboard are anisotropic.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('paperboard_roll.mph');

model.modelNode.label('Components');

out = model;
