function out = model
%
% pharmaceutical_tableting_process.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Nonlinear_Structural_Materials_Module/Porous_Plasticity');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('para', '0', 'Parameter');
model.param.set('H0', '12.5[mm]', 'Initial height of the powder mold');
model.param.set('R0', '6[mm]', 'Initial radius of the powder mold');
model.param.set('Nu', '0.16', 'Poisson''s ratio');
model.param.set('Rhof', '1.59[g/cm^3]', 'True powder density');
model.param.set('Rhobulk', '0.36[g/cm^3]', 'Tapped bulk powder density');
model.param.set('Rhorel0', 'Rhobulk/Rhof', 'Initial relative density');
model.param.set('F0', '1-Rhorel0', 'Initial void volume fraction');
model.param.set('KIso', '37.5[MPa]', 'Isotropic hardening modulus');
model.param.set('Rc', '3*sqrt(3)*0.5', 'Ellipse aspect ratio');
model.param.set('Pb0', '0[MPa]', 'Initial location of the cap');
model.param.set('A0', 'pi*R0^2', 'Die area');
model.param.set('V0', 'A0*H0', 'Initial powder volume');
model.param.set('PowderMass', 'Rhobulk*V0', 'Powder mass inside the die');
model.param.set('Hf', '(PowderMass/(A0))/Rhof', 'Final height of the powder mold');
model.param.set('Epzmax', '-((Hf-H0)/H0+0.5*((Hf-H0)/H0)^2)', 'Maximum plastic axial strain');
model.param.set('Epvolmax', 'Epzmax', 'Maximum plastic volumetric strain');

model.func.create('an1', 'Analytic');
model.func('an1').label('Young''s Modulus');
model.func('an1').set('funcname', 'EE');
model.func('an1').set('expr', '111.96*exp(4.395*x)');
model.func('an1').setIndex('argunit', 1, 0);
model.func('an1').set('fununit', 'MPa');
model.func('an1').setIndex('plotargs', 0.3, 0, 1);
model.func('an1').setIndex('plotargs', 1, 0, 2);
model.func.create('an2', 'Analytic');
model.func('an2').label('Drucker Prager Parameter k');
model.func('an2').set('funcname', 'Kd');
model.func('an2').set('expr', '0.2955*exp(4.5642*x)/sqrt(3)');
model.func('an2').setIndex('argunit', 1, 0);
model.func('an2').set('fununit', 'MPa');
model.func('an2').setIndex('plotargs', 0.6, 0, 1);
model.func('an2').setIndex('plotargs', 0.875, 0, 2);
model.func.create('an3', 'Analytic');
model.func('an3').label('Drucker Prager Parameter alpha');
model.func('an3').set('funcname', 'Alpha');
model.func('an3').set('expr', 'tan((12.628*x+56.194)[deg])/(3*sqrt(3))');
model.func('an3').setIndex('argunit', 1, 0);
model.func('an3').set('fununit', '1');
model.func('an3').setIndex('plotargs', 0.6, 0, 1);
model.func('an3').setIndex('plotargs', 0.875, 0, 2);
model.func.create('an4', 'Analytic');
model.func('an4').label('Hardening Function');
model.func('an4').set('funcname', 'Pbh');
model.func('an4').set('expr', '-KIso*log(1+x/Epvolmax)');
model.func('an4').setIndex('argunit', 1, 0);
model.func('an4').set('fununit', 'Pa');
model.func('an4').setIndex('plotargs', '-Epvolmax', 0, 1);
model.func('an4').setIndex('plotargs', 0, 0, 2);

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'R0' 'H0'});
model.geom('geom1').feature.duplicate('r2', 'r1');
model.geom('geom1').feature('r2').set('size', {'R0' 'H0/10'});
model.geom('geom1').feature('r2').set('pos', {'0' 'H0'});
model.geom('geom1').feature.duplicate('r3', 'r2');
model.geom('geom1').feature('r3').set('pos', {'0' '-H0/10'});
model.geom('geom1').feature.duplicate('r4', 'r3');
model.geom('geom1').feature('r4').set('size', {'R0/4' 'H0'});
model.geom('geom1').feature('r4').set('pos', {'R0' '0'});
model.geom('geom1').runPre('fin');
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('pairtype', 'contact');
model.geom('geom1').run('fin');

model.pair('ap2').swap;
model.pair('ap3').swap;

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 1);
model.cpl('intop1').selection.set([7]);
model.cpl.duplicate('intop2', 'intop1');
model.cpl('intop2').selection.set([8]);
model.cpl('intop2').set('axisym', false);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('Punchforce', 'intop1(-solid.sz)');
model.variable('var1').descr('Punchforce', 'Punch force');
model.variable('var1').set('Punchpressure', 'Punchforce/A0');
model.variable('var1').descr('Punchpressure', 'Punch force');
model.variable('var1').set('Rho', 'PowderMass/(A0*intop2(1))');
model.variable('var1').descr('Rho', 'Current powder density');

model.func.create('pw1', 'Piecewise');
model.func('pw1').model('comp1');
model.func('pw1').set('funcname', 'punchDisp');
model.func('pw1').setIndex('pieces', 0, 0, 0);
model.func('pw1').setIndex('pieces', 1, 0, 1);
model.func('pw1').setIndex('pieces', '0.75*H0*x', 0, 2);
model.func('pw1').setIndex('pieces', 1, 1, 0);
model.func('pw1').setIndex('pieces', 2, 1, 1);
model.func('pw1').setIndex('pieces', '0.75*H0-0.15*H0*(x-1)', 1, 2);
model.func('pw1').set('argunit', '1');
model.func('pw1').set('fununit', 'm');

model.physics('solid').selection.set([2 3]);
model.physics('solid').feature('lemm1').create('popl1', 'PorousPlasticity', 2);
model.physics('solid').feature('lemm1').feature('popl1').set('YieldFunction', 'DPC');
model.physics('solid').feature('lemm1').feature('popl1').set('HardeningModel', 'Exponential');
model.physics('solid').feature('lemm1').feature('popl1').set('pb0', 'Pb0');
model.physics('solid').feature('lemm1').feature('popl1').set('nonlocalPlasticModel', 'impGradient');
model.physics('solid').feature('lemm1').feature('popl1').set('lintm', '1.6[mm]');
model.physics('solid').feature('dcnt1').create('fric1', 'Friction', 1);
model.physics('solid').feature('dcnt1').feature('fric1').set('mu_fric', 0.1);
model.physics('solid').create('rd1', 'RigidDomain', 2);
model.physics('solid').feature('rd1').selection.set([3]);
model.physics('solid').feature('rd1').create('pdr1', 'PrescribedDispRot', -1);
model.physics('solid').feature('rd1').feature('pdr1').set('W0', '-punchDisp(para)');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Microcrystalline Cellulose (MCC)');
model.material('mat1').selection.set([2]);
model.material('mat1').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat1').propertyGroup('Enu').set('E', {'EE(nojac(solid.lemm1.popl1.rhorel))'});
model.material('mat1').propertyGroup('Enu').set('nu', {'Nu'});
model.material('mat1').propertyGroup('def').set('density', {'Rho'});
model.material('mat1').propertyGroup.create('PoroplasticModel', 'Poroplastic_material_model');
model.material('mat1').propertyGroup('PoroplasticModel').set('f0', {'F0'});
model.material('mat1').propertyGroup.create('DruckerPrager', 'Drucker_Prager_criterion');
model.material('mat1').propertyGroup('DruckerPrager').set('alphaDrucker', {'Alpha(nojac(solid.lemm1.popl1.rhorel))'});
model.material('mat1').propertyGroup('DruckerPrager').set('kDrucker', {'Kd(nojac(solid.lemm1.popl1.rhorel))'});
model.material('mat1').propertyGroup.create('MohrCoulomb', 'Mohr_Coulomb_criterion');
model.material('mat1').propertyGroup('MohrCoulomb').set('Kiso', {'KIso'});
model.material('mat1').propertyGroup('MohrCoulomb').set('epvolmax', {'Epvolmax'});
model.material('mat1').propertyGroup('MohrCoulomb').set('Rcap', {'Rc'});

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([2 4 11 12 13 14]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 1);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([6]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 12);
model.mesh('mesh1').feature('map1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([5]);
model.mesh('mesh1').feature('map1').feature('dis3').set('numelem', 16);
model.mesh('mesh1').run;

model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'para', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', '', 0);
model.study('std1').feature('stat').setIndex('pname', 'para', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', '', 0);
model.study('std1').feature('stat').setIndex('plistarr', 'range(0,0.01,1.1)', 0);
model.study('std1').feature('stat').setIndex('punit', 1, 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_solid_lemm1_popl1_epmnl').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_lemm1_popl1_epmnl').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_solid_lemm1_popl1_epmnl').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('scaleval', '1.6770509831248427E-4');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.016770509831248427');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'ddog');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'ddog');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s1').feature('p1').set('paramtuning', true);
model.sol('sol1').feature('s1').feature('p1').set('pinitstep', '1E-5');
model.sol('sol1').feature('s1').feature('p1').set('pminstep', '1E-5');
model.sol('sol1').feature('s1').feature('p1').set('porder', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 111, 0);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').set('resolution', 'normal');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('scaleactive', true);
model.result('pg1').feature('surf1').feature('def').set('scale', '1');
model.result('pg1').feature('surf1').feature('def').set('expr', {'u' 'w'});
model.result('pg1').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.dataset.create('dset1solidrev', 'Revolve2D');
model.result.dataset('dset1solidrev').set('data', 'dset1');
model.result.dataset('dset1solidrev').set('revangle', 225);
model.result.dataset('dset1solidrev').set('startangle', -90);
model.result.dataset('dset1solidrev').set('hasspacevars', true);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1solidrev');
model.result('pg2').setIndex('looplevel', 111, 0);
model.result('pg2').set('defaultPlotID', 'stress3D');
model.result('pg2').label('Stress, 3D (solid)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg2').feature('surf1').set('threshold', 'manual');
model.result('pg2').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colortabletrans', 'none');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').feature('surf1').set('colortable', 'Prism');
model.result('pg2').feature('surf1').create('def', 'Deform');
model.result.dataset('dset1solidrev').set('hasspacevars', true);
model.result('pg2').feature('surf1').feature('def').set('revcoordsys', 'cylindrical');
model.result('pg2').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg2').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg2').feature('surf1').feature('def').set('descractive', true);
model.result('pg2').feature('surf1').feature('def').set('scaleactive', true);
model.result('pg2').feature('surf1').feature('def').set('scale', '1');
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 101, 0);
model.result('pg1').run;
model.result.dataset.duplicate('dset2', 'dset1');
model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.set([4]);
model.result.dataset.duplicate('dset1solidrev1', 'dset1solidrev');
model.result.dataset('dset1solidrev1').set('data', 'dset2');
model.result.dataset.create('av1', 'Average');
model.result.dataset('av1').set('intsurface', true);
model.result.dataset('av1').set('intvolume', true);
model.result.dataset('av1').set('showlevel', 'off');
model.result.dataset('av1').selection.geom('geom1', 2);
model.result.dataset('av1').selection.set([2]);
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 51, 0);
model.result('pg2').set('titletype', 'custom');
model.result('pg2').set('solutionintitle', false);
model.result('pg2').set('edges', false);
model.result('pg2').set('plotarrayenable', true);
model.result('pg2').set('legendpos', 'bottom');
model.result('pg2').create('surf2', 'Surface');
model.result('pg2').feature('surf2').set('arraydim', '1');
model.result('pg2').feature('surf2').set('data', 'dset1solidrev1');
model.result('pg2').feature('surf2').set('solutionparams', 'parent');
model.result('pg2').feature('surf2').set('expr', '1');
model.result('pg2').feature('surf2').set('titletype', 'none');
model.result('pg2').feature('surf2').set('coloring', 'uniform');
model.result('pg2').feature('surf2').set('color', 'gray');
model.result('pg2').feature('surf2').set('manualindexing', true);
model.result('pg2').feature('surf2').create('mtrl1', 'MaterialAppearance');
model.result('pg2').run;
model.result('pg2').feature('surf2').feature('mtrl1').set('appearance', 'custom');
model.result('pg2').feature('surf2').feature('mtrl1').set('family', 'steel');
model.result('pg2').run;
model.result('pg2').create('line1', 'Line');
model.result('pg2').feature('line1').set('arraydim', '1');
model.result('pg2').feature('line1').set('data', 'dset1solidrev1');
model.result('pg2').feature('line1').set('expr', '1');
model.result('pg2').feature('line1').set('titletype', 'none');
model.result('pg2').feature('line1').set('coloring', 'uniform');
model.result('pg2').feature('line1').set('color', 'black');
model.result('pg2').feature('line1').set('manualindexing', true);
model.result('pg2').feature('surf1').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature('surf1').set('unit', 'MPa');
model.result('pg2').feature.duplicate('surf3', 'surf1');
model.result('pg2').feature('surf3').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature('surf3').set('data', 'dset1solidrev');
model.result('pg2').feature('surf3').setIndex('looplevel', 101, 0);
model.result('pg2').feature('surf3').set('titletype', 'none');
model.result('pg2').feature('surf3').set('inheritplot', 'surf1');
model.result('pg2').feature('surf2').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature.duplicate('surf4', 'surf2');
model.result('pg2').feature('surf4').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature('surf4').set('arrayindex', 1);
model.result('pg2').feature('line1').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature.duplicate('line2', 'line1');
model.result('pg2').feature('line2').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature('line2').set('arrayindex', 1);
model.result('pg2').feature('surf3').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature.duplicate('surf5', 'surf3');
model.result('pg2').feature('surf5').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature('surf5').setIndex('looplevel', 111, 0);
model.result('pg2').feature('surf4').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature.duplicate('surf6', 'surf4');
model.result('pg2').feature('surf6').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature('surf6').set('arrayindex', 2);
model.result('pg2').feature('line2').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature.duplicate('line3', 'line2');
model.result('pg2').feature('line3').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature('line3').set('arrayindex', 2);
model.result('pg2').run;
model.result('pg2').create('tlan1', 'TableAnnotation');
model.result('pg2').feature('tlan1').set('arraydim', '1');
model.result('pg2').feature('tlan1').set('source', 'localtable');
model.result('pg2').feature('tlan1').setIndex('localtablematrix', '-R0', 0, 0);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 0, 0, 1);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', '-6[mm]', 0, 2);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 'Half compaction', 0, 3);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', '3*R0', 1, 0);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 0, 1, 1);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', '-10[mm]', 1, 2);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 'Max compaction', 1, 3);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', '6*R0', 2, 0);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 0, 2, 1);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', '-10[mm]', 2, 2);
model.result('pg2').feature('tlan1').setIndex('localtablematrix', 'Decompression', 2, 3);
model.result('pg2').run;
model.result('pg2').feature('tlan1').set('latexmarkup', true);
model.result('pg2').feature('tlan1').set('showpoint', false);
model.result('pg2').run;

model.view('view2').set('showgrid', false);

model.result('pg2').run;
model.result.duplicate('pg3', 'pg2');
model.result('pg3').run;
model.result('pg3').label('Relative Density');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').feature('surf1').set('arraydim', '1');
model.result('pg3').run;
model.result('pg3').feature('surf1').set('expr', 'solid.rhorelGp');
model.result('pg3').feature('surf1').set('descr', 'Current relative density');
model.result('pg3').feature('surf1').set('colortable', 'Rainbow');
model.result('pg3').feature('surf3').set('arraydim', '1');
model.result('pg3').run;
model.result('pg3').feature('surf3').set('expr', 'solid.rhorelGp');
model.result('pg3').feature('surf3').set('descr', 'Current relative density');
model.result('pg3').feature('surf5').set('arraydim', '1');
model.result('pg3').run;
model.result('pg3').feature('surf5').set('expr', 'solid.rhorelGp');
model.result('pg3').feature('surf5').set('descr', 'Current relative density');
model.result('pg3').run;
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 111, 0);
model.result('pg4').label('Volumetric Plastic Strain (solid)');
model.result('pg4').set('defaultPlotID', 'volumetricPlasticStrain');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'solid.epvolGp'});
model.result('pg4').feature('surf1').set('inheritplot', 'none');
model.result('pg4').feature('surf1').set('resolution', 'normal');
model.result('pg4').feature('surf1').set('colortabletype', 'discrete');
model.result('pg4').feature('surf1').set('bandcount', 11);
model.result('pg4').feature('surf1').set('colortable', 'AuroraAustralisDark');
model.result('pg4').feature('surf1').set('descractive', true);
model.result('pg4').feature('surf1').set('descr', 'Volumetric plastic strain');
model.result('pg4').label('Volumetric Plastic Strain (solid)');
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 101, 0);
model.result('pg4').set('legendactive', true);
model.result('pg4').set('legendprecision', 4);
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Axial Punch Pressure Vs. Axial Compaction');
model.result('pg5').set('titletype', 'none');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'Axial compaction (mm)');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Axial punch force (MPa)');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').setIndex('expr', 'Punchpressure', 0);
model.result('pg5').feature('glob1').setIndex('unit', 'MPa', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'Punch Pressure', 0);
model.result('pg5').feature('glob1').set('xdata', 'expr');
model.result('pg5').feature('glob1').set('xdataexpr', 'punchDisp(para)');
model.result('pg5').feature('glob1').set('xdataunit', 'mm');
model.result('pg5').feature('glob1').set('legend', false);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Relative Density and Volume Ratio');
model.result('pg6').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg6').setIndex('looplevelindices', 'range(1,1,101)', 0);
model.result('pg6').set('titletype', 'none');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'Axial compaction (mm)');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'Relative density (1)');
model.result('pg6').set('twoyaxes', true);
model.result('pg6').set('yseclabelactive', true);
model.result('pg6').set('yseclabel', 'Volume ratio (1)');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').setIndex('expr', '((PowderMass/(A0*intop2(1)))/Rhof)', 0);
model.result('pg6').feature('glob1').setIndex('unit', 1, 0);
model.result('pg6').feature('glob1').setIndex('descr', 'Tablet relative density', 0);
model.result('pg6').feature('glob1').set('xdata', 'expr');
model.result('pg6').feature('glob1').set('xdataexpr', 'punchDisp(para)');
model.result('pg6').feature('glob1').set('xdataunit', 'mm');
model.result('pg6').feature('glob1').set('autosolution', false);
model.result('pg6').feature.duplicate('glob2', 'glob1');
model.result('pg6').run;
model.result('pg6').feature('glob2').set('data', 'av1');
model.result('pg6').feature('glob2').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg6').feature('glob2').setIndex('looplevelindices', 'range(1,1,101)', 0);
model.result('pg6').feature('glob2').setIndex('expr', 'solid.lemm1.popl1.rhorel', 0);
model.result('pg6').feature('glob2').setIndex('unit', 1, 0);
model.result('pg6').feature('glob2').setIndex('descr', 'Average relative density', 0);
model.result('pg6').feature.duplicate('glob3', 'glob2');
model.result('pg6').run;
model.result('pg6').feature('glob3').setIndex('expr', 'solid.J', 0);
model.result('pg6').feature('glob3').setIndex('unit', 1, 0);
model.result('pg6').feature('glob3').setIndex('descr', 'Total volume ratio', 0);
model.result('pg6').feature('glob3').setIndex('expr', 'solid.Jp', 1);
model.result('pg6').feature('glob3').setIndex('unit', 1, 1);
model.result('pg6').feature('glob3').setIndex('descr', 'Plastic volume ratio', 1);
model.result('pg6').run;
model.result('pg6').setIndex('plotonsecyaxis', true, 2, 1);
model.result('pg6').set('legendpos', 'middleleft');
model.result('pg6').run;
model.result('pg3').run;

model.title('Pharmaceutical Tableting Process');

model.description(['Powder compaction is a popular manufacturing process not only in powder metallurgy, but also in the pharmaceutical industry. The Capped Drucker' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Prager model is commonly used for simulating the compaction processes of pharmaceutical powders, where the material properties depend on the powder density. In this example, microcrystalline cellulose (MCC) is compacted, and the constitutive material properties are calibrated based on experimental data.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('pharmaceutical_tableting_process.mph');

model.modelNode.label('Components');

out = model;
