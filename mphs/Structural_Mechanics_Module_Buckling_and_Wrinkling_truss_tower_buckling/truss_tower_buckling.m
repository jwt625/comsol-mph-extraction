function out = model
%
% truss_tower_buckling.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Buckling_and_Wrinkling');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('truss', 'Truss', 'geom1');
model.physics('truss').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/truss', true);
model.study('std1').create('buckling', 'LinearBuckling');
model.study('std1').feature('buckling').set('neigsactive', true);
model.study('std1').feature('buckling').set('solnum', 'auto');
model.study('std1').feature('buckling').set('notsolnum', 'auto');
model.study('std1').feature('buckling').set('outputmap', {});
model.study('std1').feature('buckling').set('ngenAUX', '1');
model.study('std1').feature('buckling').set('goalngenAUX', '1');
model.study('std1').feature('buckling').set('ngenAUX', '1');
model.study('std1').feature('buckling').set('goalngenAUX', '1');
model.study('std1').feature('buckling').setSolveFor('/physics/truss', true);

model.param.label('Geometric Parameters');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('depth', '0.4[m]', 'Depth of the tower');
model.param.set('width', '0.45[m]', 'Width of the tower');
model.param.set('height', '1[m]', 'Height of the tower');
model.param.set('n', '10', 'Number of sections');
model.param.set('L', 'height*(2*n-1)', 'Total height of the tower');
model.param.set('do1', '3[cm]', 'Outer diameter tube 1');
model.param.set('di1', '2[cm]', 'Inner diameter tube 1');
model.param.set('do2', '2[cm]', 'Outer diameter tube 2');
model.param.set('di2', '1.4[cm]', 'Inner diameter tube 2');
model.param.set('A1', 'pi/4*(do1^2-di1^2)', 'Area tube 1');
model.param.set('A2', 'pi/4*(do2^2-di2^2)', 'Area tube 2');
model.param.create('par2');
model.param('par2').label('Loads');
model.param('par2').set('I1', '4*A1*(depth/2)^2');
model.param('par2').descr('I1', 'Area moment of inertia weak direction');
model.param('par2').set('Fc1', 'pi^2*200e9[Pa]*I1/(2*L)^2');
model.param('par2').descr('Fc1', 'First critical buckling load');
model.param('par2').set('I2', '4*A1*(width/2)^2');
model.param('par2').descr('I2', 'Area moment of inertia stiffer direction');
model.param('par2').set('Fc2', 'pi^2*200e9[Pa]*I2/(2*L)^2');
model.param('par2').descr('Fc2', 'Second critical buckling load');
model.param('par2').set('load', '1[N]');
model.param('par2').descr('load', 'Applied load');

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'width' 'depth' 'height'});
model.geom('geom1').run('blk1');
model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'table');
model.geom('geom1').feature('pol1').set('type', 'closed');
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('pol1').setIndex('table', 'depth', 0, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 2);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 1);
model.geom('geom1').feature('pol1').setIndex('table', 'height', 1, 2);
model.geom('geom1').feature('pol1').setIndex('table', 'width', 2, 0);
model.geom('geom1').feature('pol1').setIndex('table', 0, 2, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 2, 2);
model.geom('geom1').feature('pol1').setIndex('table', 'width', 3, 0);
model.geom('geom1').feature('pol1').setIndex('table', 'depth', 3, 1);
model.geom('geom1').feature('pol1').setIndex('table', 'height', 3, 2);
model.geom('geom1').run('pol1');
model.geom('geom1').create('ls1', 'LineSegment');
model.geom('geom1').feature('ls1').set('specify1', 'coord');
model.geom('geom1').feature('ls1').set('specify2', 'coord');
model.geom('geom1').feature('ls1').set('coord1', {'0' 'depth' '0'});
model.geom('geom1').feature('ls1').set('coord2', {'width' '0' '0'});
model.geom('geom1').run('ls1');
model.geom('geom1').create('ls2', 'LineSegment');
model.geom('geom1').feature('ls2').set('specify1', 'coord');
model.geom('geom1').feature('ls2').set('specify2', 'coord');
model.geom('geom1').feature('ls2').set('coord1', {'0' '0' 'height'});
model.geom('geom1').feature('ls2').set('coord2', {'width' 'depth' 'height'});
model.geom('geom1').run('ls2');
model.geom('geom1').create('ccur1', 'ConvertToCurve');
model.geom('geom1').feature('ccur1').selection('input').set({'blk1' 'ls1' 'ls2' 'pol1'});
model.geom('geom1').run('fin');
model.geom('geom1').run('ccur1');
model.geom('geom1').create('mir1', 'Mirror');
model.geom('geom1').feature('mir1').selection('input').set({'ccur1'});
model.geom('geom1').feature('mir1').set('keep', true);
model.geom('geom1').feature('mir1').set('pos', {'0' '0' 'height'});
model.geom('geom1').run('fin');
model.geom('geom1').run('mir1');
model.geom('geom1').create('arr1', 'Array');
model.geom('geom1').feature('arr1').selection('input').set({'ccur1'});
model.geom('geom1').feature('arr1').set('fullsize', {'1' '1' 'n'});
model.geom('geom1').feature('arr1').set('displ', {'0' '0' '2*height'});
model.geom('geom1').run('arr1');
model.geom('geom1').create('arr2', 'Array');
model.geom('geom1').feature('arr2').selection('input').set({'mir1'});
model.geom('geom1').feature('arr2').set('fullsize', {'1' '1' 'n-1'});
model.geom('geom1').feature('arr2').set('displ', {'0' '0' '2*height'});
model.geom('geom1').run('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Vertical Edges');
model.selection('sel1').geom(1);
model.selection('sel1').set([1 108 176 234]);
model.selection('sel1').set('groupcontang', true);
model.selection.create('com1', 'Complement');
model.selection('com1').model('comp1');
model.selection('com1').label('Transversal Edges');
model.selection('com1').set('entitydim', 1);
model.selection('com1').set('input', {'sel1'});

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.physics('truss').feature('csd1').set('SectionType', 'PipeSection');
model.physics('truss').feature('csd1').set('do_pipe', 'do1');
model.physics('truss').feature('csd1').set('di_pipe', 'di1');
model.physics('truss').create('csd2', 'CrossSectionTruss', 1);
model.physics('truss').feature('csd2').selection.named('com1');
model.physics('truss').feature('csd2').set('SectionType', 'PipeSection');
model.physics('truss').feature('csd2').set('do_pipe', 'do2');
model.physics('truss').feature('csd2').set('di_pipe', 'di2');
model.physics('truss').create('pin1', 'Pinned', 0);
model.physics('truss').feature('pin1').selection.set([1 21 41 61]);
model.physics('truss').create('pl1', 'PointLoad', 0);
model.physics('truss').feature('pl1').selection.set([20 40 60 80]);
model.physics('truss').feature('pl1').set('Fp', {'0' '0' '-load/4'});

model.study('std1').feature('buckling').set('neigs', 2);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'buckling');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'buckling');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol1').feature('e1').set('eigvfunscaleparam', '1.8999999999999998E-5');
model.sol('sol1').feature('e1').set('control', 'buckling');
model.sol('sol1').feature('e1').set('linpmethod', 'sol');
model.sol('sol1').feature('e1').set('linpsol', 'sol1');
model.sol('sol1').feature('e1').set('linpsoluse', 'sol2');
model.sol('sol1').feature('e1').set('control', 'buckling');
model.sol('sol1').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('frametype', 'spatial');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('defaultPlotID', 'modeShape');
model.result('pg1').set('showlegends', false);
model.result('pg1').create('line1', 'Line');
model.result('pg1').feature('line1').set('expr', {'truss.disp'});
model.result('pg1').feature('line1').set('threshold', 'manual');
model.result('pg1').feature('line1').set('thresholdvalue', 0.2);
model.result('pg1').feature('line1').set('colortable', 'Rainbow');
model.result('pg1').feature('line1').set('colortabletrans', 'none');
model.result('pg1').feature('line1').set('colorscalemode', 'linear');
model.result('pg1').label('Mode Shape (truss)');
model.result('pg1').feature('line1').set('colortable', 'AuroraBorealis');
model.result('pg1').feature('line1').set('linetype', 'tube');
model.result('pg1').feature('line1').set('radiusexpr', 'truss.re');
model.result('pg1').feature('line1').set('resolution', 'extrafine');
model.result('pg1').feature('line1').set('smooth', 'internal');
model.result('pg1').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg1').feature('line1').set('tuberadiusscale', 1);
model.result('pg1').feature('line1').set('tubeendcaps', false);
model.result('pg1').feature('line1').create('def', 'Deform');
model.result('pg1').feature('line1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('line1').feature('def').set('descr', 'Displacement field');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('line1').set('titletype', 'none');
model.result('pg1').feature('line1').set('tuberadiusscale', 4);

model.view('view1').set('showgrid', false);

model.result('pg1').run;
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').run;
model.result('pg2').label('Local Buckling');
model.result('pg2').set('data', 'dset2');
model.result('pg2').create('line1', 'Line');
model.result('pg2').feature('line1').set('expr', 'truss.lbf_i');
model.result('pg2').feature('line1').set('descr', 'Local buckling failure index');
model.result('pg2').feature('line1').set('colorlegend', false);
model.result('pg2').feature('line1').set('smooth', 'none');
model.result('pg2').feature('line1').set('linetype', 'tube');
model.result('pg2').feature('line1').set('radiusexpr', 'truss.re');
model.result('pg2').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg2').feature('line1').set('tuberadiusscale', 2);
model.result('pg2').run;
model.result('pg2').create('mml1', 'MaxMinLine');
model.result('pg2').feature('mml1').set('expr', 'truss.lbs_f');
model.result('pg2').feature('mml1').set('descr', 'Local buckling safety factor');
model.result('pg2').feature('mml1').set('display', 'min');
model.result('pg2').feature('mml1').set('labelprefix', 'Safety factor ');
model.result('pg2').run;

model.view('view1').set('locked', true);

model.result('pg2').run;

model.view('view1').set('locked', false);

model.common.create('bcki1', 'BucklingImperfection', 'comp1');
model.common('bcki1').setIndex('ModesScales', '1e3', 0, 1);
model.common.create('pres_truss', 'PrescribedDeformationDeformedGeometry', 'comp1');
model.common('pres_truss').label('Prescribed Deformation, Truss');
model.common('pres_truss').selection.geom(1);
model.common('pres_truss').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252]);
model.common('pres_truss').set('prescribedDeformation', {'bcki1.dtrussX' 'bcki1.dtrussY' 'bcki1.dtrussZ'});

model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledcommon', {'pres_truss'});
model.study('std1').feature('buckling').set('useadvanceddisable', true);
model.study('std1').feature('buckling').set('disabledcommon', {'pres_truss'});

model.common('bcki1').set('LoadParameter', 'load');

model.study.create('std2');
model.study('std2').create('stat1', 'Stationary');
model.study('std2').feature('stat1').set('geometricNonlinearity', true);
model.study('std2').feature('stat1').set('useparam', true);
model.study('std2').feature('stat1').setIndex('pname', 'load', 0);
model.study('std2').feature('stat1').setIndex('plistarr', '84820.20304173062*log(range(1,1,20))/log(15)', 0);
model.study('std2').feature('stat1').setIndex('punit', 'N', 0);

model.common('bcki1').set('NonlinearBucklingStudy', 'std2');

model.sol.create('sol3');
model.sol('sol3').study('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'stat1');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'stat1');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('control', 'stat1');
model.sol('sol3').feature('s1').set('control', 'stat1');
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std2');
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol3').runAll;

model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 20, 0);
model.result('pg3').set('defaultPlotID', 'stress');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('line1', 'Line');
model.result('pg3').feature('line1').set('expr', {'truss.misesGp'});
model.result('pg3').feature('line1').set('threshold', 'manual');
model.result('pg3').feature('line1').set('thresholdvalue', 0.2);
model.result('pg3').feature('line1').set('colortable', 'Rainbow');
model.result('pg3').feature('line1').set('colortabletrans', 'none');
model.result('pg3').feature('line1').set('colorscalemode', 'linear');
model.result('pg3').label('Stress (truss)');
model.result('pg3').feature('line1').set('colortable', 'Rainbow');
model.result('pg3').feature('line1').set('linetype', 'tube');
model.result('pg3').feature('line1').set('radiusexpr', 'truss.re');
model.result('pg3').feature('line1').set('resolution', 'extrafine');
model.result('pg3').feature('line1').set('smooth', 'internal');
model.result('pg3').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg3').feature('line1').set('tuberadiusscale', 1);
model.result('pg3').feature('line1').set('tubeendcaps', false);
model.result('pg3').feature('line1').create('def', 'Deform');
model.result('pg3').feature('line1').feature('def').set('scaleactive', true);
model.result('pg3').feature('line1').feature('def').set('scale', '1');
model.result('pg3').feature('line1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg3').feature('line1').feature('def').set('descr', 'Displacement field');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 20, 0);
model.result('pg4').label('Deformed Geometry');
model.result('pg4').create('mesh1', 'Mesh');
model.result('pg4').feature('mesh1').set('meshdomain', 'line');
model.result('pg4').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg4').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg4').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg4').feature('mesh1').feature('sel1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252]);
model.result('pg4').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg4').feature('mesh1').set('qualexpr', 'comp1.material.relVol');
model.result('pg4').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 15, 0);
model.result('pg3').run;
model.result('pg3').feature('line1').set('unit', 'MPa');
model.result('pg3').feature('line1').set('tuberadiusscale', 4);
model.result('pg3').run;
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 20, 0);
model.result('pg5').set('defaultPlotID', 'axialForce');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').create('line1', 'Line');
model.result('pg5').feature('line1').set('expr', {'truss.Nxl'});
model.result('pg5').feature('line1').set('threshold', 'manual');
model.result('pg5').feature('line1').set('thresholdvalue', 0.2);
model.result('pg5').feature('line1').set('colortable', 'Wave');
model.result('pg5').feature('line1').set('colortabletrans', 'none');
model.result('pg5').feature('line1').set('colorscalemode', 'linearsymmetric');
model.result('pg5').feature('line1').set('linetype', 'tube');
model.result('pg5').feature('line1').set('radiusexpr', 'truss.re');
model.result('pg5').feature('line1').set('resolution', 'extrafine');
model.result('pg5').feature('line1').set('smooth', 'internal');
model.result('pg5').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg5').feature('line1').set('tuberadiusscale', 1);
model.result('pg5').feature('line1').set('tubeendcaps', false);
model.result('pg5').feature('line1').create('def', 'Deform');
model.result('pg5').feature('line1').feature('def').set('scaleactive', true);
model.result('pg5').feature('line1').feature('def').set('scale', '1');
model.result('pg5').feature('line1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg5').feature('line1').feature('def').set('descr', 'Displacement field');
model.result('pg5').label('Force (truss)');
model.result('pg5').label('Force (truss)');
model.result('pg5').run;
model.result('pg5').setIndex('looplevel', 15, 0);
model.result('pg5').run;
model.result('pg5').feature('line1').set('tuberadiusscale', 4);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').set('data', 'dset3');
model.result('pg6').label('Post Buckling Displacement');
model.result('pg6').create('ptgr1', 'PointGraph');
model.result('pg6').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg6').feature('ptgr1').set('linewidth', 'preference');
model.result('pg6').feature('ptgr1').selection.set([20]);
model.result('pg6').feature('ptgr1').set('expr', 'v');
model.result('pg6').feature('ptgr1').set('linemarker', 'point');
model.result('pg6').run;
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Post Buckling Stress');
model.result('pg7').run;
model.result('pg7').feature('ptgr1').selection.set([1]);
model.result('pg7').feature('ptgr1').set('expr', 'truss.misesGp');
model.result('pg7').feature('ptgr1').set('descr', 'von Mises stress');
model.result('pg7').feature('ptgr1').set('unit', 'MPa');
model.result('pg7').run;
model.result('pg1').run;
model.result('pg1').stepNext(0);
model.result('pg1').run;

model.title('Buckling Analysis of a Truss Tower');

model.description(['This example first shows how to compute the critical buckling load of a truss tower using a linear buckling analysis. The Truss interface is used to model the tower. The solution is compared with an analytical estimate of the critical load obtained from Euler buckling.' newline  newline 'In a second step, a nonlinear buckling analysis based on geometry imperfections from the previous study is performed.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('truss_tower_buckling.mph');

model.modelNode.label('Components');

out = model;
