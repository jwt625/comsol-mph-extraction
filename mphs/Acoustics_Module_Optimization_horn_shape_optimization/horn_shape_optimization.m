function out = model
%
% horn_shape_optimization.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Optimization');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);

model.geom('geom1').create('sq1', 'Square');
model.geom('geom1').feature('sq1').set('size', 0.025);
model.geom('geom1').feature('sq1').set('pos', [0 -0.2]);
model.geom('geom1').run('sq1');
model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 0.2);
model.geom('geom1').feature('c1').set('angle', 90);
model.geom('geom1').run('c1');
model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'vectors');
model.geom('geom1').feature('pol1').set('x', '0 0.1 0.1 0.025 0.025 0');
model.geom('geom1').feature('pol1').set('y', '0 0 0 -0.175 -0.175 -0.175');

model.param.set('f0', '5[kHz]');
model.param.descr('f0', 'Optimization frequency');
model.param.set('df', '50[Hz]');
model.param.descr('df', 'Optimization frequency bandwidth');
model.param.set('Lfar', '1[m]');
model.param.descr('Lfar', 'Far-field evaluation distance');

model.common.create('fsd1', 'FreeShapeDomain', 'comp1');
model.common('fsd1').selection.all;

model.geom('geom1').run;

model.common('fsd1').selection.set([2]);
model.common.create('poly1', 'PolynomialBoundary', 'comp1');
model.common('poly1').selection.set([8]);
model.common('poly1').set('maximumDisplacementType', 'Box');
model.common('poly1').set('maximumDisplacement', '0.03');
model.common('poly1').set('order', '8');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('acpr').create('port1', 'Port', 1);
model.physics('acpr').feature('port1').selection.set([2]);
model.physics('acpr').feature('port1').set('PortType', 'Circular');
model.physics('acpr').feature('port1').set('pamp', 1);
model.physics('acpr').create('efc1', 'ExteriorFieldCalculation', 1);
model.physics('acpr').feature('efc1').selection.set([6]);
model.physics('acpr').feature('efc1').setIndex('SymmetryCondition2', 1, 0);
model.physics('acpr').create('pmb1', 'PerfectlyMatchedBoundary', 1);
model.physics('acpr').feature('pmb1').selection.set([10]);
model.physics('acpr').prop('MeshControl').set('SizeControlParameter', 'Frequency');
model.physics('acpr').prop('MeshControl').set('PhysicsControlledMeshMaximumFrequency', 'f0');
model.physics('acpr').prop('MeshControl').set('ElementsPerWavelength', 'UserDefined');
model.physics('acpr').prop('MeshControl').set('nperlambda', 10);

model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Reference Solution');
model.study('std1').feature('freq').set('plist', 'range(3500,50,6500)');
model.study('std1').feature('freq').setEntry('activate', 'frame:material1', false);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_material_disp').set('scaleval', '0.003002359072462852');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(3500,50,6500)'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 61, 0);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 61, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').label('Sound Pressure Level (acpr)');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'dset1');
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('hasspacevars', false);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'rev1');
model.result('pg3').setIndex('looplevel', 61, 0);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg3').feature('surf1').set('colortable', 'Wave');
model.result('pg3').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').label('Acoustic Pressure, 3D (acpr)');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'rev1');
model.result('pg4').setIndex('looplevel', 61, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg4').feature('surf1').set('colortable', 'Rainbow');
model.result('pg4').feature('surf1').set('colorscalemode', 'linear');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').label('Sound Pressure Level, 3D (acpr)');
model.result.create('pg5', 'PolarGroup');
model.result('pg5').set('data', 'dset1');
model.result('pg5').create('rp1', 'RadiationPattern');
model.result('pg5').feature('rp1').set('expr', {'acpr.efc1.Lp_pext'});
model.result('pg5').feature('rp1').set('legend', true);
model.result('pg5').feature('rp1').set('phidisc', 180);
model.result('pg5').label('Exterior-Field Sound Pressure Level (acpr)');
model.result('pg5').setIndex('looplevelinput', 'last', 0);
model.result.create('pg6', 'PolarGroup');
model.result('pg6').set('data', 'dset1');
model.result('pg6').create('rp1', 'RadiationPattern');
model.result('pg6').feature('rp1').set('expr', {'acpr.efc1.pext'});
model.result('pg6').feature('rp1').set('legend', true);
model.result('pg6').feature('rp1').set('phidisc', 180);
model.result('pg6').label('Exterior-Field Pressure (acpr)');
model.result('pg6').setIndex('looplevelinput', 'last', 0);
model.result('pg5').set('symmetricangle', true);
model.result('pg5').set('zeroangle', 'up');
model.result('pg5').set('rotdir', 'cw');
model.result('pg6').set('symmetricangle', true);
model.result('pg6').set('zeroangle', 'up');
model.result('pg6').set('rotdir', 'cw');
model.result.create('pg7', 'PlotGroup2D');
model.result.dataset.duplicate('dset1g1', 'dset1');
model.result.dataset('dset1g1').label('Study 1 - Reference Solution/Solution 1 (1) - Geometry');
model.result.dataset('dset1g1').set('frametype', 'geometry');
model.result('pg7').label('Shape Optimization');
model.result('pg7').set('data', 'dset1');
model.result('pg7').set('frametype', 'geometry');
model.result('pg7').set('edgecolor', 'gray');
model.result('pg7').set('titletype', 'none');
model.result('pg7').create('line1', 'Line');
model.result('pg7').feature('line1').set('expr', '1');
model.result('pg7').feature('line1').set('coloring', 'uniform');
model.result('pg7').feature('line1').set('color', 'fromtheme');
model.result('pg7').create('arwl1', 'ArrowLine');
model.result('pg7').feature('arwl1').set('data', 'dset1g1');
model.result('pg7').feature('arwl1').set('expr', {'fsd1.dRg' 'fsd1.dZg'});
model.result('pg7').feature('arwl1').set('scaleactive', true);
model.result('pg7').feature('arwl1').set('scale', '1');
model.result('pg7').feature('arwl1').set('placement', 'uniform');
model.result('pg7').feature('arwl1').set('arrowcount', 200);
model.result('pg7').feature('arwl1').create('col1', 'Color');
model.result('pg7').feature('arwl1').feature('col1').set('expr', 'fsd1.rel_disp');
model.result('pg7').feature('arwl1').feature('col1').set('rangecoloractive', 'on');
model.result('pg7').feature('arwl1').feature('col1').set('rangecolormin', 0);
model.result('pg7').feature('arwl1').feature('col1').set('rangecolormax', 1);
model.result('pg7').feature('arwl1').create('sel1', 'Selection');
model.result('pg7').feature('arwl1').feature('sel1').selection.named('dsel_fsd1');
model.result('pg1').run;
model.result('pg4').run;
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('rp1').set('radius', 'Lfar');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').feature('rp1').set('radius', 'Lfar');
model.result('pg7').run;
model.result.remove('pg7');
model.result('pg1').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').add('plotgroup', 'pg1');
model.nodeGroup('grp1').add('plotgroup', 'pg2');
model.nodeGroup('grp1').add('plotgroup', 'pg3');
model.nodeGroup('grp1').add('plotgroup', 'pg4');
model.nodeGroup('grp1').add('plotgroup', 'pg5');
model.nodeGroup('grp1').add('plotgroup', 'pg6');
model.nodeGroup('grp1').label('Reference solution');

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std2').feature('freq').set('plist', 'f0-df/2 f0 f0+df/2');
model.study('std2').label('Study 2 - Optimized Solution');
model.study('std2').create('sho', 'ShapeOptimization');
model.study('std2').feature('sho').set('mmamaxiter', 50);
model.study('std2').feature('sho').set('movelimitactive', false);
model.study('std2').feature('sho').setIndex('optobj', 'comp1.Lp_pext_opt(0, Lfar)', 0);
model.study('std2').feature('sho').set('objectivetype', 'maximization');
model.study('std2').feature('sho').set('objectivesolution', 'min');
model.study('std2').feature('sho').set('objectivescaling', 'init');

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_material_disp').set('scaleval', '0.003002359072462852');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('o1', 'Optimization');
model.sol('sol2').feature('o1').set('control', 'sho');
model.sol('sol2').feature('o1').create('s1', 'StationaryAttrib');
model.sol('sol2').feature('o1').feature('s1').set('stol', 0.001);
model.sol('sol2').feature('o1').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('o1').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('plistarr', {'f0-df/2 f0 f0+df/2'});
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol2').feature('o1').feature('s1').set('control', 'freq');
model.sol('sol2').feature('o1').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('o1').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('o1').feature('s1').set('control', 'freq');
model.sol('sol2').feature('o1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('o1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('o1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol2').feature('o1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol2').feature('o1').feature('s1').create('seDef', 'Segregated');
model.sol('sol2').feature('o1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('o1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('o1').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('o1').feature('s1').feature.remove('seDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('o1').feature('s1').set('stol', '1e-6');
model.sol('sol2').feature('o1').feature('s1').set('nonlin', true);
model.sol('sol2').feature('o1').feature('s1').feature('fc1').set('minstep', '1e-4');
model.sol('sol2').run('o1');

model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset2');
model.result('pg7').setIndex('looplevel', 3, 0);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg7').feature('surf1').set('colortable', 'Wave');
model.result('pg7').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').label('Acoustic Pressure (acpr) 1');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').set('data', 'dset2');
model.result('pg8').setIndex('looplevel', 3, 0);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg8').feature('surf1').set('colortable', 'Rainbow');
model.result('pg8').feature('surf1').set('colorscalemode', 'linear');
model.result('pg8').set('showlegendsunit', true);
model.result('pg8').label('Sound Pressure Level (acpr) 1');
model.result.dataset.create('rev2', 'Revolve2D');
model.result.dataset('rev2').set('data', 'dset2');
model.result.dataset('rev2').set('revangle', 225);
model.result.dataset('rev2').set('startangle', -90);
model.result.dataset('rev2').set('hasspacevars', false);
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').set('data', 'rev2');
model.result('pg9').setIndex('looplevel', 3, 0);
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg9').feature('surf1').set('colortable', 'Wave');
model.result('pg9').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg9').set('showlegendsunit', true);
model.result('pg9').label('Acoustic Pressure, 3D (acpr) 1');
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').set('data', 'rev2');
model.result('pg10').setIndex('looplevel', 3, 0);
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg10').feature('surf1').set('colortable', 'Rainbow');
model.result('pg10').feature('surf1').set('colorscalemode', 'linear');
model.result('pg10').set('showlegendsunit', true);
model.result('pg10').label('Sound Pressure Level, 3D (acpr) 1');
model.result.create('pg11', 'PolarGroup');
model.result('pg11').set('data', 'dset2');
model.result('pg11').create('rp1', 'RadiationPattern');
model.result('pg11').feature('rp1').set('expr', {'acpr.efc1.Lp_pext'});
model.result('pg11').feature('rp1').set('legend', true);
model.result('pg11').feature('rp1').set('phidisc', 180);
model.result('pg11').label('Exterior-Field Sound Pressure Level (acpr) 1');
model.result('pg11').setIndex('looplevelinput', 'last', 0);
model.result.create('pg12', 'PolarGroup');
model.result('pg12').set('data', 'dset2');
model.result('pg12').create('rp1', 'RadiationPattern');
model.result('pg12').feature('rp1').set('expr', {'acpr.efc1.pext'});
model.result('pg12').feature('rp1').set('legend', true);
model.result('pg12').feature('rp1').set('phidisc', 180);
model.result('pg12').label('Exterior-Field Pressure (acpr) 1');
model.result('pg12').setIndex('looplevelinput', 'last', 0);
model.result('pg11').set('symmetricangle', true);
model.result('pg11').set('zeroangle', 'up');
model.result('pg11').set('rotdir', 'cw');
model.result('pg12').set('symmetricangle', true);
model.result('pg12').set('zeroangle', 'up');
model.result('pg12').set('rotdir', 'cw');
model.result.create('pg13', 'PlotGroup2D');
model.result.dataset.duplicate('dset2g1', 'dset2');
model.result.dataset('dset2g1').label('Study 2 - Optimized Solution/Solution 2 (2) - Geometry');
model.result.dataset('dset2g1').set('frametype', 'geometry');
model.result('pg13').label('Shape Optimization');
model.result('pg13').set('data', 'dset2');
model.result('pg13').set('frametype', 'geometry');
model.result('pg13').set('edgecolor', 'gray');
model.result('pg13').set('titletype', 'none');
model.result('pg13').create('line1', 'Line');
model.result('pg13').feature('line1').set('expr', '1');
model.result('pg13').feature('line1').set('coloring', 'uniform');
model.result('pg13').feature('line1').set('color', 'fromtheme');
model.result('pg13').create('arwl1', 'ArrowLine');
model.result('pg13').feature('arwl1').set('data', 'dset2g1');
model.result('pg13').feature('arwl1').set('expr', {'fsd1.dRg' 'fsd1.dZg'});
model.result('pg13').feature('arwl1').set('scaleactive', true);
model.result('pg13').feature('arwl1').set('scale', '1');
model.result('pg13').feature('arwl1').set('placement', 'uniform');
model.result('pg13').feature('arwl1').set('arrowcount', 200);
model.result('pg13').feature('arwl1').create('col1', 'Color');
model.result('pg13').feature('arwl1').feature('col1').set('expr', 'fsd1.rel_disp');
model.result('pg13').feature('arwl1').feature('col1').set('rangecoloractive', 'on');
model.result('pg13').feature('arwl1').feature('col1').set('rangecolormin', 0);
model.result('pg13').feature('arwl1').feature('col1').set('rangecolormax', 1);
model.result('pg13').feature('arwl1').create('sel1', 'Selection');
model.result('pg13').feature('arwl1').feature('sel1').selection.named('dsel_fsd1');
model.result('pg7').run;
model.result('pg8').run;
model.result('pg8').run;
model.result('pg11').run;
model.result('pg11').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg11').setIndex('looplevelindices', 2, 0);
model.result('pg11').run;
model.result('pg11').feature('rp1').set('anglerestr', 'manual');
model.result('pg11').feature('rp1').set('phimin', -90);
model.result('pg11').feature('rp1').set('phirange', 180);
model.result('pg11').feature('rp1').set('radius', 'Lfar');
model.result('pg11').feature('rp1').set('legendmethod', 'manual');
model.result('pg11').feature('rp1').setIndex('legends', 'Optimized (5 kHz)', 0);
model.result('pg11').feature('rp1').set('linecolor', 'black');
model.result('pg11').feature.duplicate('rp2', 'rp1');
model.result('pg11').run;
model.result('pg11').feature('rp2').set('data', 'dset1');
model.result('pg11').feature('rp2').setIndex('looplevelinput', 'manual', 0);
model.result('pg11').feature('rp2').setIndex('looplevel', [31], 0);
model.result('pg11').feature('rp2').setIndex('legends', 'Reference (5 kHz)', 0);
model.result('pg11').feature('rp2').set('linecolor', 'blue');
model.result('pg11').run;
model.result('pg12').run;
model.result('pg12').run;
model.result('pg12').feature('rp1').set('radius', 'Lfar');
model.result('pg13').run;
model.result('pg13').run;
model.result('pg13').feature('arwl1').set('placement', 'elements');
model.result('pg13').run;
model.result('pg13').feature('arwl1').feature('col1').set('colortable', 'Rainbow');
model.result('pg7').run;

model.nodeGroup.create('grp2', 'Results');
model.nodeGroup('grp2').set('type', 'plotgroup');
model.nodeGroup.move('grp2', 1);
model.nodeGroup('grp2').add('plotgroup', 'pg7');
model.nodeGroup('grp2').add('plotgroup', 'pg8');
model.nodeGroup('grp2').add('plotgroup', 'pg9');
model.nodeGroup('grp2').add('plotgroup', 'pg10');
model.nodeGroup('grp2').add('plotgroup', 'pg11');
model.nodeGroup('grp2').add('plotgroup', 'pg12');
model.nodeGroup('grp2').add('plotgroup', 'pg13');
model.nodeGroup('grp2').label('Optimized solution');

model.study.create('std3');
model.study('std3').create('freq', 'Frequency');
model.study('std3').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std3').feature('freq').set('plist', 'range(3500,50,6500)');
model.study('std3').feature('freq').set('probesel', 'none');
model.study('std3').feature('freq').setEntry('activate', 'frame:material1', false);
model.study('std3').feature('freq').set('usesol', true);
model.study('std3').feature('freq').set('notsolmethod', 'sol');
model.study('std3').feature('freq').set('notstudy', 'std2');
model.study('std3').label('Study 3 - Frequency Sweep (Optimized)');
model.study('std3').setGenPlots(false);

model.sol.create('sol3');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2]);

model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'freq');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_material_disp').set('scaleval', '0.003002359072462852');
model.sol('sol3').feature('v1').set('control', 'freq');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').set('stol', 0.001);
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol3').feature('s1').feature('p1').set('plistarr', {'range(3500,50,6500)'});
model.sol('sol3').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol3').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol3').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol3').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol3').feature('s1').feature('p1').set('probesel', 'none');
model.sol('sol3').feature('s1').feature('p1').set('probes', {});
model.sol('sol3').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol3').feature('s1').set('linpmethod', 'sol');
model.sol('sol3').feature('s1').set('linpsol', 'zero');
model.sol('sol3').feature('s1').set('control', 'freq');
model.sol('sol3').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol3').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.create('pg14', 'PlotGroup1D');

model.nodeGroup('grp2').add('plotgroup', 'pg14');

model.result('pg14').run;
model.result('pg14').label('Response');
model.result('pg14').set('data', 'dset3');
model.result('pg14').set('ylabelactive', true);
model.result('pg14').set('ylabel', 'On axis SPL');
model.result('pg14').set('legendpos', 'upperleft');
model.result('pg14').create('glob1', 'Global');
model.result('pg14').feature('glob1').set('markerpos', 'datapoints');
model.result('pg14').feature('glob1').set('linewidth', 'preference');
model.result('pg14').feature('glob1').setIndex('expr', 'Lp_pext_opt(0, Lfar)', 0);
model.result('pg14').feature('glob1').set('linewidth', 2);
model.result('pg14').feature('glob1').set('legendmethod', 'manual');
model.result('pg14').feature('glob1').setIndex('legends', 'Optimized design', 0);
model.result('pg14').feature.duplicate('glob2', 'glob1');
model.result('pg14').run;
model.result('pg14').feature('glob2').set('data', 'dset2');
model.result('pg14').feature('glob2').set('linestyle', 'none');
model.result('pg14').feature('glob2').set('linecolor', 'cyclereset');
model.result('pg14').feature('glob2').set('linemarker', 'square');
model.result('pg14').run;
model.result('pg14').feature.duplicate('glob3', 'glob1');
model.result('pg14').run;
model.result('pg14').feature('glob3').set('data', 'dset1');
model.result('pg14').feature('glob3').setIndex('legends', 'Initial design', 0);
model.result('pg14').run;
model.result('pg10').run;

model.title('Optimizing the Shape of a Horn');

model.description(['A plane-wave mode feeds an axisymmetric horn radiating from an infinite baffle toward an open half space. The radius of the feeding waveguide is assumed to be fixed, as well as the depth of the horn and the size of the hole where the horn is attached to the baffle. By varying the curvature of the initially conical surface of the horn, its directivity and impedance can be changed.' newline  newline 'This model shows how to apply boundary shape optimization to an axisymmetric horn. For the sake of simplicity, the far-field sound pressure level is maximized for a narrow frequency band and in a single direction. The focus is on the optimization procedure, which involves choice of objective function, and optimization solver settings.' newline  newline 'The results from this analysis shows that by changing the shape of the horn within the limits of the selected parameterization, the on-axis sound pressure level can be raised by about 1 dB compared to the simple cone. The optimal shape with respect to on-axis SPL however leads to deep undesirable minima in other directions.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('horn_shape_optimization.mph');

model.modelNode.label('Components');

out = model;
