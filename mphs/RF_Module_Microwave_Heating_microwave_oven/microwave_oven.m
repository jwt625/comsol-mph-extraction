function out = model
%
% microwave_oven.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/RF_Module/Microwave_Heating');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('emw', 'ElectromagneticWaves', 'geom1');
model.physics('emw').model('comp1');
model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');

model.multiphysics.create('emh1', 'ElectromagneticHeating', 'geom1', 3);
model.multiphysics('emh1').set('EMHeat_physics', 'emw');
model.multiphysics('emh1').set('Heat_physics', 'ht');
model.multiphysics('emh1').selection.all;

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('punit', 'Hz');
model.study('std1').feature('freq').set('plist', '1[MHz]');
model.study('std1').feature('freq').set('solnum', 'auto');
model.study('std1').feature('freq').set('notsolnum', 'auto');
model.study('std1').feature('freq').set('outputmap', {});
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').setSolveFor('/physics/emw', true);
model.study('std1').feature('freq').setSolveFor('/physics/ht', true);
model.study('std1').feature('freq').setSolveFor('/multiphysics/emh1', true);
model.study('std1').feature('freq').setSolveFor('/physics/ht', false);
model.study('std1').feature('freq').setSolveFor('/multiphysics/emh1', false);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('initialtime', '0');
model.study('std1').feature('time').set('solnum', 'auto');
model.study('std1').feature('time').set('notsolnum', 'auto');
model.study('std1').feature('time').set('outputmap', {});
model.study('std1').feature('time').setSolveFor('/physics/emw', true);
model.study('std1').feature('time').setSolveFor('/physics/ht', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/emh1', true);
model.study('std1').feature('time').setSolveFor('/physics/emw', false);

model.geom('geom1').run;

model.study('std1').feature('freq').set('plist', '2.45[GHz]');
model.study('std1').setStoreSolution(true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('wo', '267[mm]', 'Oven width');
model.param.set('do', '270[mm]', 'Oven depth');
model.param.set('ho', '188[mm]', 'Oven height');
model.param.set('wg', '50[mm]', 'Waveguide width');
model.param.set('dg', '78[mm]', 'Waveguide depth');
model.param.set('hg', '18[mm]', 'Waveguide height');
model.param.set('rp', '113.5[mm]', 'Glass plate radius');
model.param.set('hp', '6[mm]', 'Glass plate height');
model.param.set('bp', '15[mm]', 'Glass plate base');
model.param.set('rpot', '31.5[mm]', 'Potato radius');
model.param.set('T0', '8[degC]', 'Initial potato temperature');
model.param.set('full_geometry', '1', 'Symmetry flag');

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'wo' 'do' 'ho'});
model.geom('geom1').feature('blk1').set('pos', {'0' '-do/2' '0'});
model.geom('geom1').run('blk1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', {'wg' 'dg' 'hg'});
model.geom('geom1').feature('blk2').set('pos', {'-wg' '-dg/2' 'ho-hg'});
model.geom('geom1').run('blk2');
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').set('r', 'rp');
model.geom('geom1').feature('cyl1').set('h', 'hp');
model.geom('geom1').feature('cyl1').set('pos', {'wo/2' '0' 'bp'});
model.geom('geom1').run('cyl1');
model.geom('geom1').create('sph1', 'Sphere');
model.geom('geom1').feature('sph1').set('r', 'rpot');
model.geom('geom1').feature('sph1').set('pos', {'wo/2' '0' 'rpot+bp+hp'});
model.geom('geom1').runPre('fin');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'blk1' 'blk2' 'cyl1' 'sph1'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('blk3', 'Block');
model.geom('geom1').feature('blk3').set('size', [0.4 0.4 0.4]);
model.geom('geom1').feature('blk3').set('pos', [-0.1 0 0]);
model.geom('geom1').run('blk3');
model.geom('geom1').create('int1', 'Intersection');
model.geom('geom1').feature('int1').selection('input').set({'blk3' 'uni1'});
model.geom('geom1').runPre('fin');
model.geom('geom1').create('if1', 'If');
model.geom('geom1').feature.createAfter('endif1', 'EndIf', 'if1');
model.geom('geom1').feature('if1').label('If Full Geometry');
model.geom('geom1').feature('if1').set('condition', 'full_geometry');
model.geom('geom1').create('mir1', 'Mirror');
model.geom('geom1').feature('mir1').selection('input').set({'int1'});
model.geom('geom1').feature('mir1').set('keep', true);
model.geom('geom1').feature('mir1').set('axis', [0 1 0]);
model.geom('geom1').runPre('fin');

model.view('view1').set('renderwireframe', true);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Potato');
model.selection('sel1').set([7 8]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Plate');
model.selection('sel2').set([5 6]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Air');
model.selection('sel3').set([1 2 3 4]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Port Boundary');
model.selection('sel4').geom(2);
model.selection('sel4').set([1 5]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Metal Boundaries');
model.selection('sel5').geom(2);
model.selection('sel5').set([2 3 4 7 8 9 10 11 12 13 15 17 19 20 39 40]);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Symmetry');
model.selection('sel6').geom(2);
model.selection('sel6').set([6 16 23 30]);
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').label('Half Model');
model.selection('sel7').set([2 4 6 8]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material('mat1').selection.named('sel3');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Potato');
model.material('mat2').selection.named('sel1');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'65-20*j'});
model.material('mat2').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0'});
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'0.55'});
model.material('mat2').propertyGroup('def').set('density', {'1050'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'3.64e3'});
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Glass');
model.material('mat3').selection.named('sel2');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'2.55'});
model.material('mat3').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'0'});
model.material('mat3').propertyGroup('def').set('thermalconductivity', {});
model.material('mat3').propertyGroup('def').set('density', {});
model.material('mat3').propertyGroup('def').set('heatcapacity', {});
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat4').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat4').label('Copper');
model.material('mat4').set('family', 'copper');
model.material('mat4').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat4').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat4').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat4').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat4').propertyGroup('Enu').set('nu', '0.35');
model.material('mat4').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat4').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat4').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat4').propertyGroup('linzRes').addInput('temperature');
model.material('mat4').selection.geom('geom1', 2);
model.material('mat4').selection.named('sel5');

model.physics('emw').create('port1', 'Port', 2);
model.physics('emw').feature('port1').label('Port 1, Full Model');
model.physics('emw').feature('port1').selection.named('sel4');
model.physics('emw').feature('port1').set('PortType', 'Rectangular');
model.physics('emw').feature('port1').set('Pin', '1[kW]');
model.physics('emw').create('imp1', 'Impedance', 2);
model.physics('emw').feature('imp1').selection.named('sel5');
model.physics('emw').selection.named('sel7');
model.physics('emw').create('port2', 'Port', 2);
model.physics('emw').feature('port2').label('Port 2, Half Model');
model.physics('emw').feature('port2').selection.named('sel4');
model.physics('emw').feature('port2').set('PortType', 'Rectangular');
model.physics('emw').feature('port2').set('PortExcitation', 'on');
model.physics('emw').feature('port2').set('Pin', '1[kW]/2');
model.physics('emw').create('symp1', 'SymmetryPlane', 2);
model.physics('emw').feature('symp1').selection.named('sel6');
model.physics('emw').selection.all;
model.physics('ht').selection.named('sel1');
model.physics('ht').feature('init1').set('Tinit', 'T0');

model.mesh('mesh1').run;

model.study('std1').feature('freq').set('useadvanceddisable', true);
model.study('std1').feature('freq').set('disabledphysics', {'emw/port2' 'emw/symp1'});
model.study('std1').feature('time').set('tlist', 'range(0,1,5)');
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'wo', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'wo', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'full_geometry', 0);
model.study('std1').feature('param').setIndex('plistarr', 1, 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'2.45[GHz]'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,1,5)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_E' 'global' 'comp1_T' 'global' 'comp1_Sparam1' 'global' 'comp1_Sparam2' 'global'});
model.sol('sol1').feature('t1').set('atol', {'comp1_E' '1e-3' 'comp1_T' '1e-3' 'comp1_Sparam1' '1e-3' 'comp1_Sparam2' '1e-3'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_E' 'factor' 'comp1_T' 'factor' 'comp1_Sparam1' 'factor' 'comp1_Sparam2' 'factor'});
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').create('so2', 'Solutionseq');
model.batch('p1').feature('so2').set('seq', 'sol2');
model.batch('p1').feature('so2').set('store', 'on');
model.batch('p1').feature('so2').set('clear', 'on');
model.batch('p1').feature('so2').set('psol', []);
model.batch('p1').set('pname', {'full_geometry'});
model.batch('p1').set('plistarr', {'1'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol3');
model.sol('sol3').study('std1');
model.sol('sol3').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol3');

model.sol.create('sol4');
model.sol('sol4').study('std1');
model.sol('sol4').label('Parametric Solutions 2');

model.batch('p1').feature('so2').set('psol', 'sol4');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Electric Field (emw)');
model.result('pg1').set('data', 'dset4');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset4');
model.result('pg1').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').label('Multislice');
model.result('pg1').feature('mslc1').set('smooth', 'internal');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result('pg1').feature('mslc1').feature.create('filt1', 'Filter');
model.result('pg1').feature('mslc1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Temperature (ht)');
model.result('pg2').set('data', 'dset4');
model.result('pg2').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').set('showsolutionparams', 'on');
model.result('pg2').feature('vol1').set('solutionparams', 'parent');
model.result('pg2').feature('vol1').set('expr', 'T');
model.result('pg2').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg2').feature('vol1').set('smooth', 'internal');
model.result('pg2').feature('vol1').set('showsolutionparams', 'on');
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('mslc1').set('xnumber', '0');
model.result('pg1').feature('mslc1').set('znumber', '0');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').feature('vol1').set('unit', 'degC');
model.result('pg2').feature.remove('vol1');
model.result('pg2').run;
model.result('pg2').set('data', 'dset3');
model.result('pg2').create('slc1', 'Slice');
model.result('pg2').feature('slc1').set('expr', 'T');
model.result('pg2').feature('slc1').set('descr', 'Temperature');
model.result('pg2').feature('slc1').set('unit', 'degC');
model.result('pg2').feature('slc1').set('quickplane', 'zx');
model.result('pg2').feature('slc1').set('quickynumber', 1);
model.result('pg2').feature('slc1').set('colortable', 'HeatCameraLight');
model.result('pg2').run;
model.result('pg2').create('slc2', 'Slice');
model.result('pg2').feature('slc2').set('expr', 'emw.Ez');
model.result('pg2').feature('slc2').set('descr', 'Electric field, z-component');
model.result('pg2').feature('slc2').set('quickplane', 'xy');
model.result('pg2').feature('slc2').set('quickzmethod', 'coord');
model.result('pg2').feature('slc2').set('quickz', 0.1);
model.result('pg2').feature('slc2').create('def1', 'Deform');
model.result('pg2').run;
model.result('pg2').feature('slc2').feature('def1').set('expr', {'0' '0' 'patcheval(emw.Ez,2)'});
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('slc2').create('filt1', 'Filter');
model.result('pg2').run;
model.result('pg2').feature('slc2').feature('filt1').set('expr', 'y>0');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').label('Temperature (ht) and Ez');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('Resistive Heating');
model.result('pg3').set('data', 'dset2');
model.result('pg3').create('slc1', 'Slice');
model.result('pg3').feature('slc1').set('expr', 'emw.Qrh');
model.result('pg3').feature('slc1').set('descr', 'Resistive losses');
model.result('pg3').feature('slc1').set('quickplane', 'zx');
model.result('pg3').feature('slc1').set('quickymethod', 'coord');
model.result('pg3').run;
model.result.numerical.create('int1', 'IntVolume');
model.result.numerical('int1').set('data', 'dset3');
model.result.numerical('int1').set('expr', {'ht.Qtot'});
model.result.numerical('int1').set('descr', {'Total heat source'});
model.result.numerical('int1').set('unit', {'W'});
model.result.numerical('int1').setIndex('looplevelinput', 'first', 0);
model.result.numerical('int1').selection.named('sel1');
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Volume Integration 1');
model.result.numerical('int1').set('table', 'tbl1');
model.result.numerical('int1').setResult;
model.result.dataset.create('cpt1', 'CutPoint3D');
model.result.dataset('cpt1').set('pointx', 'wo/2');
model.result.dataset('cpt1').set('pointy', 0);
model.result.dataset('cpt1').set('pointz', 'rpot+bp+hp');
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').set('data', 'cpt1');
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('title', 'Temperature in potato');
model.result('pg4').set('xlabelactive', true);
model.result('pg4').set('xlabel', 'Time (s)');
model.result('pg4').create('ptgr1', 'PointGraph');
model.result('pg4').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg4').feature('ptgr1').set('linewidth', 'preference');
model.result('pg4').feature('ptgr1').set('expr', 'T');
model.result('pg4').feature('ptgr1').set('descr', 'Temperature');
model.result('pg4').feature('ptgr1').set('unit', 'degC');
model.result('pg4').run;

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').set('plotgroup', 'Default');
model.study('std2').feature('freq').set('punit', 'Hz');
model.study('std2').feature('freq').set('plist', '1[MHz]');
model.study('std2').feature('freq').set('solnum', 'auto');
model.study('std2').feature('freq').set('notsolnum', 'auto');
model.study('std2').feature('freq').set('outputmap', {});
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').setSolveFor('/physics/emw', true);
model.study('std2').feature('freq').setSolveFor('/physics/ht', true);
model.study('std2').feature('freq').setSolveFor('/multiphysics/emh1', true);
model.study('std2').feature('freq').setSolveFor('/physics/ht', false);
model.study('std2').feature('freq').setSolveFor('/multiphysics/emh1', false);
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').set('plotgroup', 'Default');
model.study('std2').feature('time').set('initialtime', '0');
model.study('std2').feature('time').set('solnum', 'auto');
model.study('std2').feature('time').set('notsolnum', 'auto');
model.study('std2').feature('time').set('outputmap', {});
model.study('std2').feature('time').setSolveFor('/physics/emw', true);
model.study('std2').feature('time').setSolveFor('/physics/ht', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/emh1', true);
model.study('std2').feature('time').setSolveFor('/physics/emw', false);
model.study('std2').setStoreSolution(true);
model.study('std2').feature('freq').set('plist', '2.45[GHz]');
model.study('std2').feature('freq').set('useadvanceddisable', true);
model.study('std2').feature('freq').set('disabledphysics', {'emw/port1'});
model.study('std2').feature('time').set('tlist', 'range(0,1,5)');
model.study('std2').create('param', 'Parametric');
model.study('std2').feature('param').setIndex('pname', 'wo', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'm', 0);
model.study('std2').feature('param').setIndex('pname', 'wo', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'm', 0);
model.study('std2').feature('param').setIndex('pname', 'full_geometry', 0);
model.study('std2').feature('param').setIndex('plistarr', 0, 0);

model.sol.create('sol7');
model.sol('sol7').study('std2');
model.sol('sol7').create('st1', 'StudyStep');
model.sol('sol7').feature('st1').set('study', 'std2');
model.sol('sol7').feature('st1').set('studystep', 'freq');
model.sol('sol7').create('v1', 'Variables');
model.sol('sol7').feature('v1').set('control', 'freq');
model.sol('sol7').create('s1', 'Stationary');
model.sol('sol7').feature('s1').set('stol', 0.01);
model.sol('sol7').feature('s1').create('p1', 'Parametric');
model.sol('sol7').feature('s1').feature.remove('pDef');
model.sol('sol7').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol7').feature('s1').feature('p1').set('plistarr', {'2.45[GHz]'});
model.sol('sol7').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol7').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol7').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol7').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol7').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol7').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol7').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol7').feature('s1').feature('p1').set('probes', {});
model.sol('sol7').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol7').feature('s1').set('linpmethod', 'sol');
model.sol('sol7').feature('s1').set('linpsol', 'zero');
model.sol('sol7').feature('s1').set('control', 'freq');
model.sol('sol7').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol7').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol7').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol7').feature('s1').create('i1', 'Iterative');
model.sol('sol7').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol7').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol7').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol7').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol7').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol7').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol7').feature('s1').feature.remove('fcDef');
model.sol('sol7').create('su1', 'StoreSolution');
model.sol('sol7').create('st2', 'StudyStep');
model.sol('sol7').feature('st2').set('study', 'std2');
model.sol('sol7').feature('st2').set('studystep', 'time');
model.sol('sol7').create('v2', 'Variables');
model.sol('sol7').feature('v2').set('initmethod', 'sol');
model.sol('sol7').feature('v2').set('initsol', 'sol7');
model.sol('sol7').feature('v2').set('initsoluse', 'sol8');
model.sol('sol7').feature('v2').set('notsolmethod', 'sol');
model.sol('sol7').feature('v2').set('notsol', 'sol7');
model.sol('sol7').feature('v2').set('notsoluse', 'sol8');
model.sol('sol7').feature('v2').set('control', 'time');
model.sol('sol7').create('t1', 'Time');
model.sol('sol7').feature('t1').set('tlist', 'range(0,1,5)');
model.sol('sol7').feature('t1').set('plot', 'off');
model.sol('sol7').feature('t1').set('plotgroup', 'Default');
model.sol('sol7').feature('t1').set('plotfreq', 'tout');
model.sol('sol7').feature('t1').set('probesel', 'all');
model.sol('sol7').feature('t1').set('probes', {});
model.sol('sol7').feature('t1').set('probefreq', 'tsteps');
model.sol('sol7').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol7').feature('t1').set('atolmethod', {'comp1_E' 'global' 'comp1_T' 'global' 'comp1_Sparam1' 'global' 'comp1_Sparam2' 'global'});
model.sol('sol7').feature('t1').set('atol', {'comp1_E' '1e-3' 'comp1_T' '1e-3' 'comp1_Sparam1' '1e-3' 'comp1_Sparam2' '1e-3'});
model.sol('sol7').feature('t1').set('atolvaluemethod', {'comp1_E' 'factor' 'comp1_T' 'factor' 'comp1_Sparam1' 'factor' 'comp1_Sparam2' 'factor'});
model.sol('sol7').feature('t1').set('reacf', true);
model.sol('sol7').feature('t1').set('storeudot', true);
model.sol('sol7').feature('t1').set('endtimeinterpolation', true);
model.sol('sol7').feature('t1').set('estrat', 'exclude');
model.sol('sol7').feature('t1').set('maxorder', 2);
model.sol('sol7').feature('t1').set('control', 'time');
model.sol('sol7').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol7').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol7').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol7').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol7').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol7').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol7').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol7').feature('t1').create('d1', 'Direct');
model.sol('sol7').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol7').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol7').feature('t1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol7').feature('t1').create('i1', 'Iterative');
model.sol('sol7').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol7').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol7').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol7').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol7').feature('t1').feature('i1').set('maxlinit', 10000);
model.sol('sol7').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol7').feature('t1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol7').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol7').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol7').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol7').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol7').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol7').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol7').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol7').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol7').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol7').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol7').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol7').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol7').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol7').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol7').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol7').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol7').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol7').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol7').feature('t1').feature.remove('fcDef');
model.sol('sol7').attach('std2');

model.batch.create('p2', 'Parametric');
model.batch('p2').study('std2');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol7');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').create('so2', 'Solutionseq');
model.batch('p2').feature('so2').set('seq', 'sol8');
model.batch('p2').feature('so2').set('store', 'on');
model.batch('p2').feature('so2').set('clear', 'on');
model.batch('p2').feature('so2').set('psol', []);
model.batch('p2').set('pname', {'full_geometry'});
model.batch('p2').set('plistarr', {'0'});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std2');
model.batch('p2').set('control', 'param');

model.sol.create('sol9');
model.sol('sol9').study('std2');
model.sol('sol9').label('Parametric Solutions 3');

model.batch('p2').feature('so1').set('psol', 'sol9');

model.sol.create('sol10');
model.sol('sol10').study('std2');
model.sol('sol10').label('Parametric Solutions 4');

model.batch('p2').feature('so2').set('psol', 'sol10');
model.batch('p2').run('compute');

model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Electric Field (emw) 1');
model.result('pg5').set('data', 'dset8');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('showlegendsmaxmin', true);
model.result('pg5').set('data', 'dset8');
model.result('pg5').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond1/pg1');
model.result('pg5').feature.create('mslc1', 'Multislice');
model.result('pg5').feature('mslc1').label('Multislice');
model.result('pg5').feature('mslc1').set('smooth', 'internal');
model.result('pg5').feature('mslc1').set('data', 'parent');
model.result('pg5').feature('mslc1').feature.create('filt1', 'Filter');
model.result('pg5').feature('mslc1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Temperature (ht)');
model.result('pg6').set('data', 'dset8');
model.result('pg6').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg6').feature.create('vol1', 'Volume');
model.result('pg6').feature('vol1').set('showsolutionparams', 'on');
model.result('pg6').feature('vol1').set('solutionparams', 'parent');
model.result('pg6').feature('vol1').set('expr', 'T');
model.result('pg6').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg6').feature('vol1').set('smooth', 'internal');
model.result('pg6').feature('vol1').set('showsolutionparams', 'on');
model.result('pg6').feature('vol1').set('data', 'parent');
model.result('pg5').run;
model.result('pg5').label('Electric Field (emw), Half Model');
model.result('pg5').run;
model.result('pg5').feature('mslc1').set('xnumber', '0');
model.result('pg5').feature('mslc1').set('znumber', '0');
model.result('pg5').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg5').feature('mslc1').set('ycoord', 0);
model.result('pg5').run;
model.result('pg6').run;
model.result('pg6').set('data', 'dset7');
model.result('pg6').run;
model.result('pg6').feature('vol1').set('unit', 'degC');
model.result('pg6').run;
model.result('pg6').create('slc1', 'Slice');
model.result('pg6').feature('slc1').set('expr', 'emw.Ez');
model.result('pg6').feature('slc1').set('descr', 'Electric field, z-component');
model.result('pg6').feature('slc1').set('quickplane', 'xy');
model.result('pg6').feature('slc1').set('quickzmethod', 'coord');
model.result('pg6').feature('slc1').set('quickz', 0.1);
model.result('pg6').feature('slc1').create('def1', 'Deform');
model.result('pg6').run;
model.result('pg6').feature('slc1').feature('def1').set('expr', {'0' '0' 'patcheval(emw.Ez,2)'});
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').label('Temperature (ht) and Ez, Half Model');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').label('Resistive Heating, Half Model');
model.result('pg7').set('data', 'dset6');
model.result('pg7').create('slc1', 'Slice');
model.result('pg7').feature('slc1').set('expr', 'emw.Qrh');
model.result('pg7').feature('slc1').set('descr', 'Resistive losses');
model.result('pg7').feature('slc1').set('quickplane', 'zx');
model.result('pg7').feature('slc1').set('quickymethod', 'coord');
model.result('pg7').run;
model.result.numerical.create('int2', 'IntVolume');
model.result.numerical('int2').set('data', 'dset7');
model.result.numerical('int2').setIndex('looplevelinput', 'first', 0);
model.result.numerical('int2').selection.set([3]);
model.result.numerical('int2').selection.named('sel1');
model.result.numerical('int2').set('expr', {'ht.Qtot'});
model.result.numerical('int2').set('descr', {'Total heat source'});
model.result.numerical('int2').set('unit', {'W'});
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Volume Integration 2');
model.result.numerical('int2').set('table', 'tbl2');
model.result.numerical('int2').setResult;
model.result.dataset.create('cpt2', 'CutPoint3D');
model.result.dataset('cpt2').set('data', 'dset5');
model.result.dataset('cpt2').set('pointx', 'wo/2');
model.result.dataset('cpt2').set('pointy', 0);
model.result.dataset('cpt2').set('pointz', 'rpot+bp+hp');
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').set('data', 'cpt2');
model.result('pg8').set('titletype', 'manual');
model.result('pg8').set('title', 'Temperature in potato');
model.result('pg8').set('xlabelactive', true);
model.result('pg8').set('xlabel', 'Time (s)');
model.result('pg8').create('ptgr1', 'PointGraph');
model.result('pg8').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg8').feature('ptgr1').set('linewidth', 'preference');
model.result('pg8').feature('ptgr1').set('expr', 'T');
model.result('pg8').feature('ptgr1').set('descr', 'Temperature');
model.result('pg8').feature('ptgr1').set('unit', 'degC');
model.result('pg8').run;

model.geom('geom1').run;

model.title('Microwave Oven');

model.description(['A potato inserted in a microwave oven is exposed to microwave radiation at 2.45' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'GHz. The heating of the potato for the first 5' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'seconds is solved for and analyzed. After that time the temperature in the potato approaches 100' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;

model.label('microwave_oven.mph');

model.modelNode.label('Components');

out = model;
