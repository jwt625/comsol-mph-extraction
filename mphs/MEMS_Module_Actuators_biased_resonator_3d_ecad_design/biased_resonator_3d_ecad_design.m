function out = model
%
% biased_resonator_3d_ecad_design.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/MEMS_Module/Actuators');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('eig', 'Eigenfrequency');
model.study('std1').feature('eig').set('chkeigregion', true);
model.study('std1').feature('eig').set('conrad', '1');
model.study('std1').feature('eig').set('conradynhm', '1');
model.study('std1').feature('eig').set('storefact', false);
model.study('std1').feature('eig').set('solnum', 'auto');
model.study('std1').feature('eig').set('notsolnum', 'auto');
model.study('std1').feature('eig').set('outputmap', {});
model.study('std1').feature('eig').set('ngenAUX', '1');
model.study('std1').feature('eig').set('goalngenAUX', '1');
model.study('std1').feature('eig').set('ngenAUX', '1');
model.study('std1').feature('eig').set('goalngenAUX', '1');
model.study('std1').feature('eig').setSolveFor('/physics/solid', true);

model.common.create('mpf1', 'ParticipationFactors', 'comp1');

model.param.set('t_sub', '0.75[um]');
model.param.descr('t_sub', 'Thickness of substrate');
model.param.set('t_nitride', '0.15[um]');
model.param.descr('t_nitride', 'Thickness of nitride layer');
model.param.set('t_base', '0.3[um]');
model.param.descr('t_base', 'Thickness of polysilicon base layer');
model.param.set('t_sl', '0.2[um]');
model.param.descr('t_sl', 'Thickness of sacrificial layer');
model.param.set('t_poly', '1.9[um]');
model.param.descr('t_poly', 'Thickness of polysilicon layer');
model.param.set('w_box', '38.9[um]');
model.param.descr('w_box', 'Width of box');

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom1').geomRep('cadps');
model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').label('Import 1 = L1, Substrate');
model.geom('geom1').feature('imp1').set('filename', 'biased_resonator_3d_ecad_design_layout.gds');
model.geom('geom1').feature('imp1').set('manualelevation', true);
model.geom('geom1').feature('imp1').setIndex('height', 't_sub', 0);
model.geom('geom1').feature('imp1').setIndex('importlayer', false, 1);
model.geom('geom1').feature('imp1').setIndex('importlayer', false, 2);
model.geom('geom1').feature('imp1').setIndex('importlayer', false, 3);
model.geom('geom1').feature('imp1').setIndex('importlayer', false, 4);
model.geom('geom1').feature('imp1').set('sellayer', false);
model.geom('geom1').run('imp1');
model.geom('geom1').feature.duplicate('imp2', 'imp1');
model.geom('geom1').feature('imp2').label('Import 2 = L2, Deposit Nitride Layer');
model.geom('geom1').feature('imp2').setIndex('importlayer', false, 0);
model.geom('geom1').feature('imp2').setIndex('height', 't_nitride', 1);
model.geom('geom1').feature('imp2').setIndex('elevation', 't_sub', 1);
model.geom('geom1').feature('imp2').setIndex('importlayer', true, 1);
model.geom('geom1').run('imp2');
model.geom('geom1').feature.duplicate('imp3', 'imp2');
model.geom('geom1').feature('imp3').label('Import 3 = L3, Deposit and Pattern Polysilicon Base Layer');
model.geom('geom1').feature('imp3').setIndex('importlayer', false, 1);
model.geom('geom1').feature('imp3').setIndex('height', 't_base', 2);
model.geom('geom1').feature('imp3').setIndex('elevation', 't_sub+t_nitride', 2);
model.geom('geom1').feature('imp3').setIndex('importlayer', true, 2);
model.geom('geom1').run('imp3');
model.geom('geom1').create('off1', 'OffsetFaces');
model.geom('geom1').feature('off1').selection('face').set('imp2', 4);
model.geom('geom1').feature('off1').selection('face').set('imp3', [1 4 5 6 7 10]);
model.geom('geom1').feature('off1').set('keep', true);
model.geom('geom1').feature('off1').set('distance', 't_sl');
model.geom('geom1').feature('off1').label('Offset Faces 1 = Deposit Sacrificial Layer');
model.geom('geom1').run('off1');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').label('Difference 1 = Deposit Sacrificial Layer');
model.geom('geom1').feature('dif1').selection('input').set({'off1'});
model.geom('geom1').feature('dif1').selection('input2').set({'imp2' 'imp3'});
model.geom('geom1').feature('dif1').set('keepsubtract', true);
model.geom('geom1').feature('dif1').set('intbnd', false);
model.geom('geom1').run('dif1');
model.geom('geom1').feature.duplicate('imp4', 'imp3');
model.geom('geom1').feature('imp4').label('Import 4 = L4, Pattern Sacrificial Layer');
model.geom('geom1').feature('imp4').setIndex('importlayer', false, 2);
model.geom('geom1').feature('imp4').setIndex('height', 't_base+t_sl', 3);
model.geom('geom1').feature('imp4').setIndex('elevation', 't_sub+t_nitride', 3);
model.geom('geom1').feature('imp4').setIndex('importlayer', true, 3);
model.geom('geom1').run('imp4');
model.geom('geom1').create('int1', 'Intersection');
model.geom('geom1').feature('int1').label('Intersection 1 = L4, Pattern Sacrificial Layer');
model.geom('geom1').feature('int1').selection('input').set({'dif1' 'imp4'});
model.geom('geom1').feature('int1').set('intbnd', false);
model.geom('geom1').run('int1');
model.geom('geom1').create('off2', 'OffsetFaces');
model.geom('geom1').feature('off2').label('Offset Faces 2 = Deposit Polysilicon Layer');
model.geom('geom1').feature('off2').selection('face').set('imp2', 4);
model.geom('geom1').feature('off2').selection('face').set('imp3', 4);
model.geom('geom1').feature('off2').selection('face').set('int1', [4 9 18 22 31]);
model.geom('geom1').feature('off2').set('distance', 't_poly');
model.geom('geom1').feature('off2').set('keep', true);
model.geom('geom1').run('off2');
model.geom('geom1').create('dif2', 'Difference');
model.geom('geom1').feature('dif2').label('Difference 2 = Deposit Polysilicon Layer');
model.geom('geom1').feature('dif2').selection('input').set({'off2'});
model.geom('geom1').feature('dif2').selection('input2').set({'imp2' 'imp3' 'int1'});
model.geom('geom1').feature('dif2').set('keepsubtract', true);
model.geom('geom1').feature('dif2').set('intbnd', false);
model.geom('geom1').run('dif2');
model.geom('geom1').feature.duplicate('imp5', 'imp4');
model.geom('geom1').feature('imp5').label('Import 5 = L5, Pattern Polysilicon Layer');
model.geom('geom1').feature('imp5').setIndex('importlayer', false, 3);
model.geom('geom1').feature('imp5').setIndex('height', 't_base+t_sl+t_poly', 4);
model.geom('geom1').feature('imp5').setIndex('elevation', 't_sub+t_nitride', 4);
model.geom('geom1').feature('imp5').setIndex('importlayer', true, 4);
model.geom('geom1').run('imp5');
model.geom('geom1').create('int2', 'Intersection');
model.geom('geom1').feature('int2').label('Intersection 2 = Pattern Polysilicon Layer');
model.geom('geom1').feature('int2').selection('input').set({'dif2' 'imp5'});
model.geom('geom1').feature('int2').set('intbnd', false);
model.geom('geom1').run('int2');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').init;
model.geom('geom1').feature('del1').selection('input').set({'int1'});
model.geom('geom1').run('del1');
model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').selection('selection').set('imp3', 1);
model.geom('geom1').feature('sel1').selection('selection').set('int2', 1);
model.geom('geom1').feature('sel1').label('Explicit Selection 1 = Polysilicon Beam');
model.geom('geom1').run('sel1');
model.geom('geom1').create('sel2', 'ExplicitSelection');
model.geom('geom1').feature('sel2').selection('selection').set('imp3', 2);
model.geom('geom1').feature('sel2').label('Explicit Selection 2 = Bottom Electrode');
model.geom('geom1').run('sel2');
model.geom('geom1').create('sel3', 'ExplicitSelection');
model.geom('geom1').feature('sel3').label('Explicit Selection 3 = Nitride');
model.geom('geom1').feature('sel3').selection('selection').set('imp2', 1);
model.geom('geom1').run('sel3');
model.geom('geom1').create('sel4', 'ExplicitSelection');
model.geom('geom1').feature('sel4').label('Explicit Selection 4 = Substrate');
model.geom('geom1').feature('sel4').selection('selection').set('imp1', 1);
model.geom('geom1').run('sel4');
model.geom('geom1').create('mir1', 'Mirror');
model.geom('geom1').feature('mir1').selection('input').set({'imp1' 'imp2' 'imp3' 'int2'});
model.geom('geom1').feature('mir1').set('pos', {'w_box' '0' '0'});
model.geom('geom1').feature('mir1').set('axis', [1 0 0]);
model.geom('geom1').feature('mir1').set('keep', true);
model.geom('geom1').run('mir1');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').label('Si - Polycrystalline silicon');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.7);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '678[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'4.5' '0' '0' '0' '4.5' '0' '0' '0' '4.5'});
model.material('mat1').propertyGroup('def').set('density', '2320[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'34[W/(m*K)]' '0' '0' '0' '34[W/(m*K)]' '0' '0' '0' '34[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '160e9[Pa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.22');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('Si3N4 - Silicon nitride');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'2.3e-6[1/K]' '0' '0' '0' '2.3e-6[1/K]' '0' '0' '0' '2.3e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '700[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'9.7' '0' '0' '0' '9.7' '0' '0' '0' '9.7'});
model.material('mat2').propertyGroup('def').set('density', '3100[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'20[W/(m*K)]' '0' '0' '0' '20[W/(m*K)]' '0' '0' '0' '20[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '250e9[Pa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.23');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').label('SiO2 - Silicon oxide');
model.material('mat3').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'0.5e-6[1/K]' '0' '0' '0' '0.5e-6[1/K]' '0' '0' '0' '0.5e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '730[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'4.2' '0' '0' '0' '4.2' '0' '0' '0' '4.2'});
model.material('mat3').propertyGroup('def').set('density', '2200[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'1.4[W/(m*K)]' '0' '0' '0' '1.4[W/(m*K)]' '0' '0' '0' '1.4[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '70e9[Pa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.17');
model.material('mat2').selection.named('geom1_sel3');
model.material('mat3').selection.named('geom1_sel4');

model.physics('solid').selection.set([3 4 7 9 10]);
model.physics('solid').selection.named('geom1_sel1');
model.physics('solid').create('fix1', 'Fixed', 3);
model.physics('solid').feature('fix1').selection.set([4 10]);

model.mesh('mesh1').run;

model.study('std1').feature('eig').set('neigsactive', true);
model.study('std1').feature('eig').set('neigs', 3);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'eig');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'eig');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol1').feature('e1').set('eigvfunscaleparam', '7.88E-11');
model.sol('sol1').feature('e1').set('control', 'eig');
model.sol('sol1').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'modeShape');
model.result('pg1').label('Mode Shape (solid)');
model.result('pg1').set('showlegends', false);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'solid.disp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.evaluationGroup.create('std1EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std1EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_solid');
model.result.evaluationGroup('std1EvgFrq').set('data', 'dset1');
model.result.evaluationGroup('std1EvgFrq').label('Eigenfrequencies (Study 1)');
model.result.evaluationGroup('std1EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std1EvgFrq').run;
model.result.evaluationGroup.create('std1mpf1', 'EvaluationGroup');
model.result.evaluationGroup('std1mpf1').set('data', 'dset1');
model.result.evaluationGroup('std1mpf1').label('Participation Factors (Study 1)');
model.result.evaluationGroup('std1mpf1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormX', 0);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', '1', 0);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, X-translation', 0);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormY', 1);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Y-translation', 1);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormZ', 2);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Z-translation', 2);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormX', 3);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', '1', 3);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, X-rotation', 3);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormY', 4);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', '1', 4);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Y-rotation', 4);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormZ', 5);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', '1', 5);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Z-rotation', 5);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLX', 6);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', 'kg', 6);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, X-translation', 6);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLY', 7);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', 'kg', 7);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Y-translation', 7);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLZ', 8);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', 'kg', 8);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Z-translation', 8);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRX', 9);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 9);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, X-rotation', 9);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRY', 10);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 10);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Y-rotation', 10);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRZ', 11);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 11);
model.result.evaluationGroup('std1mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Z-rotation', 11);
model.result.evaluationGroup('std1mpf1').run;
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').stepNext(0);
model.result('pg1').run;
model.result('pg1').feature('surf1').stepNext(0);
model.result('pg1').run;

model.title(['Normal Modes of a Biased Resonator ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' 3D Geometry from a GDS-File']);

model.description('This tutorial demonstrates how to build the geometry for the 3D biased resonator from GDS file using the ECAD Import Module and the Design Module. The procedure emulates semiconductor and MEMS fabrication processes to build 3D geometry more efficiently and is more intuitive for those familiar with semiconductor and MEMS fabrication.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('biased_resonator_3d_ecad_design.mph');

model.modelNode.label('Components');

out = model;
