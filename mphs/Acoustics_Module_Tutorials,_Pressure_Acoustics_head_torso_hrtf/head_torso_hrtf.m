function out = model
%
% head_torso_hrtf.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Tutorials,_Pressure_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('pabe', 'PressureAcousticsBoundaryElements', 'geom1');
model.physics('pabe').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/pabe', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('f0', '4000[Hz]', 'Frequency');
model.param.set('c0', '343[m/s]', 'Speed of sound');
model.param.set('lam0', 'c0/f0', 'Wavelength at f0');
model.param.set('theta0', '4.5[deg]', 'Polar angle correction');

model.func.create('int1', 'Interpolation');
model.func('int1').set('source', 'file');
model.func('int1').set('filename', 'head_torso_hrtf_measured.txt');
model.func('int1').set('nargs', 1);
model.func('int1').setIndex('funcs', 'HRTF_1033_real', 0, 0);
model.func('int1').setIndex('funcs', 1, 0, 1);
model.func('int1').setIndex('funcs', 'HRTF_1033_imag', 1, 0);
model.func('int1').setIndex('funcs', 2, 1, 1);
model.func('int1').setIndex('funcs', 'HRTF_2067_real', 2, 0);
model.func('int1').setIndex('funcs', 3, 2, 1);
model.func('int1').setIndex('funcs', 'HRTF_2067_imag', 3, 0);
model.func('int1').setIndex('funcs', 4, 3, 1);
model.func('int1').setIndex('funcs', 'HRTF_3962_real', 4, 0);
model.func('int1').setIndex('funcs', 5, 4, 1);
model.func('int1').setIndex('funcs', 'HRTF_3962_imag', 5, 0);
model.func('int1').setIndex('funcs', 6, 5, 1);
model.func('int1').set('interp', 'piecewisecubic');
model.func('int1').set('extrap', 'linear');
model.func('int1').setIndex('fununit', 'Pa', 0);
model.func('int1').setIndex('fununit', 'Pa', 1);
model.func('int1').setIndex('fununit', 'Pa', 2);
model.func('int1').setIndex('fununit', 'Pa', 3);
model.func('int1').setIndex('fununit', 'Pa', 4);
model.func('int1').setIndex('fununit', 'Pa', 5);
model.func('int1').setIndex('argunit', 'rad', 0);
model.func('int1').importData;
model.func.create('an1', 'Analytic');
model.func('an1').set('funcname', 'p1033');
model.func('an1').set('expr', 'HRTF_1033_real(theta+theta0)+i*HRTF_1033_imag(theta+theta0)');
model.func('an1').set('args', 'theta');
model.func('an1').set('periodic', true);
model.func('an1').set('periodicupper', '2*pi');
model.func('an1').setIndex('argunit', 'rad', 0);
model.func('an1').set('fununit', 'Pa');
model.func('an1').set('complex', true);
model.func('an1').setIndex('plotargs', '-pi', 0, 1);
model.func('an1').setIndex('plotargs', '3*pi', 0, 2);
model.func.duplicate('an2', 'an1');
model.func('an2').set('funcname', 'p2067');
model.func('an2').set('expr', 'HRTF_2067_real(theta+theta0)+i*HRTF_2067_imag(theta+theta0)');
model.func.duplicate('an3', 'an2');
model.func('an3').set('funcname', 'p3962');
model.func('an3').set('expr', 'HRTF_3962_real(theta+theta0)+i*HRTF_3962_imag(theta+theta0)');

model.modelNode.create('mcomp1', 'MeshComponent');

model.geom.create('mgeom1', 3);

model.mesh.create('mpart1', 'mgeom1');
model.mesh('mpart1').create('imp1', 'Import');

model.modelNode('mcomp1').baseSystem([]);

model.geom('mgeom1').lengthUnit('mm');

model.mesh('mpart1').feature('imp1').set('filename', 'head_torso_hrtf_scan.stl');
model.mesh('mpart1').feature('imp1').set('createdom', true);
model.mesh('mpart1').feature('imp1').set('facepartition', 'detectfaces');
model.mesh('mpart1').feature('imp1').set('facemaxangle', 180);
model.mesh('mpart1').feature('imp1').create('tr1', 'Transform');
model.mesh('mpart1').feature('imp1').feature('tr1').set('scaletype', 'anisotropic');
model.mesh('mpart1').feature('imp1').feature('tr1').set('anisotropic', [1 1 -1]);
model.mesh('mpart1').run('imp1');
model.mesh('mpart1').create('cyl1', 'Cylinder');
model.mesh('mpart1').feature('cyl1').set('r', 2.8);
model.mesh('mpart1').feature('cyl1').set('pos', [-1.3 0 0.6]);
model.mesh('mpart1').feature('cyl1').set('axistype', 'y');
model.mesh('mpart1').run('cyl1');
model.mesh('mpart1').create('pln1', 'IntersectPlane');
model.mesh('mpart1').feature('pln1').set('planetype', 'coordinates');
model.mesh('mpart1').feature('pln1').setIndex('genpoints', -95, 0, 2);
model.mesh('mpart1').feature('pln1').setIndex('genpoints', 10, 1, 0);
model.mesh('mpart1').feature('pln1').setIndex('genpoints', -100, 1, 2);
model.mesh('mpart1').feature('pln1').setIndex('genpoints', -95, 2, 2);
model.mesh('mpart1').run('pln1');
model.mesh('mpart1').run('fin');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('type', 'mesh');
model.geom('geom1').feature('imp1').set('mesh', 'mpart1');
model.geom('geom1').run('imp1');
model.geom('geom1').run('fin');
model.geom('geom1').create('rmd1', 'RemoveDetails');
model.geom('geom1').run('rmd1');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material('mat1').selection.set([]);
model.material('mat1').selection.allVoids;

model.physics('pabe').selection.set([]);
model.physics('pabe').selection.allVoids;
model.physics('pabe').create('nvel1', 'NormalVelocity', 2);
model.physics('pabe').feature('nvel1').selection.set([6]);
model.physics('pabe').feature('nvel1').set('nvel', 1);

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'min(20[mm],lam0/4)');
model.mesh('mesh1').feature('size').set('hmin', '3[mm]');
model.mesh('mesh1').feature('size').set('hnarrow', 2);
model.mesh('mesh1').feature('ftri1').selection.all;
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 'lam0/4');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([1 2]);
model.mesh('mesh1').run;

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('theta', 'atan2(y,x)');
model.variable('var1').descr('theta', 'Horizontal polar angle');

model.study('std1').feature('freq').set('plist', 'f0');
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'f0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'Hz', 0);
model.study('std1').feature('param').setIndex('pname', 'f0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'Hz', 0);
model.study('std1').feature('param').setIndex('plistarr', '{1033.6, 2067.2, 3962.1}', 0);
model.study('std1').feature('param').setIndex('punit', 'Hz', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (SAI) (pabe)');
model.sol('sol1').feature('s1').feature('i1').create('sai1', 'SAI');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').label('Suggested Iterative Solver (HLU) (pabe)');
model.sol('sol1').feature('s1').feature('i2').create('hlu1', 'HierarchicalLU');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'f0'});
model.batch('p1').set('plistarr', {'{1033.6, 2067.2, 3962.1}'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Acoustic Pressure, Boundaries (pabe)');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 3, 1);
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 3, 1);
model.result('pg1').set('defaultPlotID', 'pressureacoustics/PressureAcousticsBoundaryElements/phys1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', 'pabe.p_t_bnd');
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.dataset.create('grid1', 'Grid3D');
model.result.dataset('grid1').set('source', 'data');
model.result.dataset('grid1').set('data', 'dset2');
model.result.dataset('grid1').set('par1', 'x');
model.result.dataset('grid1').set('par2', 'y');
model.result.dataset('grid1').set('par3', 'z');
model.result.dataset('grid1').set('parmin1', -0.4867121093904141);
model.result.dataset('grid1').set('parmax1', 0.4172829194535914);
model.result.dataset('grid1').set('parmin2', -0.8075448223718472);
model.result.dataset('grid1').set('parmax2', 0.8260528253863311);
model.result.dataset('grid1').set('parmin3', -0.8106502198191579);
model.result.dataset('grid1').set('parmax3', 0.6373535172957613);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'grid1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').setIndex('looplevel', 3, 1);
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('colortable', 'Wave');
model.result('pg2').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg2').feature('mslc1').set('expr', {'pabe.p_t'});
model.result('pg2').label('Acoustic Pressure (pabe)');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').create('line1', 'Line');
model.result('pg2').feature('line1').set('expr', {'1'});
model.result('pg2').feature('line1').set('data', 'dset2');
model.result('pg2').feature('line1').set('titletype', 'none');
model.result('pg2').feature('line1').set('coloring', 'uniform');
model.result('pg2').feature('line1').set('color', 'black');
model.result('pg2').feature('line1').set('solutionparams', 'parent');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'pabe.p_t_bnd'});
model.result('pg2').feature('surf1').set('data', 'dset2');
model.result('pg2').feature('surf1').set('inheritplot', 'mslc1');
model.result('pg2').feature('surf1').set('solutionparams', 'parent');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'grid1');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').setIndex('looplevel', 3, 1);
model.result('pg3').create('mslc1', 'Multislice');
model.result('pg3').feature('mslc1').set('expr', {'pabe.Lp_t'});
model.result('pg3').label('Sound Pressure Level (pabe)');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').create('line1', 'Line');
model.result('pg3').feature('line1').set('expr', {'1'});
model.result('pg3').feature('line1').set('data', 'dset2');
model.result('pg3').feature('line1').set('titletype', 'none');
model.result('pg3').feature('line1').set('coloring', 'uniform');
model.result('pg3').feature('line1').set('color', 'black');
model.result('pg3').feature('line1').set('solutionparams', 'parent');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'pabe.Lp_t_bnd'});
model.result('pg3').feature('surf1').set('data', 'dset2');
model.result('pg3').feature('surf1').set('inheritplot', 'mslc1');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').run;
model.result.dataset('grid1').set('parmin1', -0.3);
model.result.dataset('grid1').set('parmax1', 0.3);
model.result.dataset('grid1').set('parmin2', -0.5);
model.result.dataset('grid1').set('parmax2', 0.5);
model.result.dataset('grid1').set('parmin3', -0.5);
model.result.dataset('grid1').set('parmax3', 0.5);
model.result.dataset('grid1').set('res1', 40);
model.result.dataset('grid1').set('res2', 60);
model.result.dataset('grid1').set('res3', 80);
model.result('pg1').run;
model.result('pg1').set('view', 'new');
model.result('pg1').set('looplevel', [1 1]);
model.result('pg1').run;
model.result('pg1').set('looplevel', [1 2]);
model.result('pg1').run;
model.result('pg1').set('looplevel', [1 3]);
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('mslc1').set('ynumber', '0');
model.result('pg2').feature('mslc1').set('znumber', '0');
model.result('pg2').feature('mslc1').set('rangecoloractive', true);
model.result('pg2').feature('mslc1').set('rangecolormin', -20);
model.result('pg2').feature('mslc1').set('rangecolormax', 20);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('mslc1').set('ynumber', '0');
model.result('pg3').feature('mslc1').set('znumber', '0');
model.result('pg3').run;
model.result.create('pg4', 'PolarGroup');
model.result('pg4').run;
model.result('pg4').label('HRTF');
model.result('pg4').set('data', 'dset2');
model.result('pg4').create('rp1', 'RadiationPattern');
model.result('pg4').feature('rp1').set('markerpos', 'datapoints');
model.result('pg4').feature('rp1').set('linewidth', 'preference');
model.result('pg4').feature('rp1').set('expr', 'pabe.Lp_t');
model.result('pg4').feature('rp1').set('phidisc', 360);
model.result('pg4').run;
model.result('pg4').set('zeroangle', 'up');
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('HRTF (normalized)');
model.result('pg5').run;
model.result('pg5').feature('rp1').set('expr', 'pabe.Lp_t-at3_spatial(1[m],0,0,pabe.Lp_t,''minc'')');
model.result('pg5').run;
model.result.create('pg6', 'PolarGroup');
model.result('pg6').run;
model.result('pg6').label('HRTF Comparison (1033 Hz), R = 1.4 m');
model.result('pg6').set('data', 'dset2');
model.result('pg6').setIndex('looplevelinput', 'manual', 1);
model.result('pg6').setIndex('looplevel', [1], 1);
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'HRTF at 1033 Hz');
model.result('pg6').set('zeroangle', 'up');
model.result('pg6').create('rp1', 'RadiationPattern');
model.result('pg6').feature('rp1').set('markerpos', 'datapoints');
model.result('pg6').feature('rp1').set('linewidth', 'preference');
model.result('pg6').feature('rp1').set('expr', 'pabe.Lp_t-at3_spatial(1.4[m],0,0,pabe.Lp_t,''minc'')');
model.result('pg6').feature('rp1').set('phidisc', 360);
model.result('pg6').feature('rp1').set('radius', 1.4);
model.result('pg6').feature('rp1').set('legend', true);
model.result('pg6').feature('rp1').set('legendmethod', 'manual');
model.result('pg6').feature('rp1').setIndex('legends', 'COMSOL', 0);
model.result('pg6').run;
model.result('pg6').create('rp2', 'RadiationPattern');
model.result('pg6').feature('rp2').set('markerpos', 'datapoints');
model.result('pg6').feature('rp2').set('linewidth', 'preference');
model.result('pg6').feature('rp2').set('expr', '20*log10(abs(p1033(theta)/p1033(0)))');
model.result('pg6').feature('rp2').set('phidisc', 360);
model.result('pg6').feature('rp2').set('radius', 1.4);
model.result('pg6').feature('rp2').set('legend', true);
model.result('pg6').feature('rp2').set('legendmethod', 'manual');
model.result('pg6').feature('rp2').setIndex('legends', 'Measured', 0);
model.result('pg6').run;
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('HRTF Comparison (2067 Hz), R = 1.4 m');
model.result('pg7').setIndex('looplevel', [2], 1);
model.result('pg7').set('title', 'HRTF at 2067 Hz');
model.result('pg7').run;
model.result('pg7').feature('rp2').set('expr', '20*log10(abs(p2067(theta)/p2067(0)))');
model.result('pg7').run;
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('HRTF Comparison (3962 Hz), R = 1.4 m');
model.result('pg8').setIndex('looplevel', [3], 1);
model.result('pg8').set('title', 'HRTF at 3962 Hz');
model.result('pg8').run;
model.result('pg8').feature('rp2').set('expr', '20*log10(abs(p3962(theta)/p3962(0)))');
model.result('pg8').run;
model.result('pg2').run;

model.title('Head and Torso HRTF Computation');

model.description(['This tutorial model shows how to import a 3D scanned geometry of a human head and torso and compute the head related transfer function (HRTF). The scan is imported as a .stl file and converted into a COMSOL geometry. The HRTF is computed using the reciprocity principle, locating the source at the ear canal entrance, and the acoustics are simulated using the Pressure Acoustics, Boundary Element interface. The simulated results are compared to measured data form the actual subject and show good agreement.' newline  newline 'The scanned geometry and measured data is with courtesy of the MedAk-Team at the Institute of Technical Acoustics, RWTH, Aachen, Germany.']);

model.mesh('mesh1').clearMesh;
model.mesh('mpart1').clearMesh;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;

model.label('head_torso_hrtf.mph');

model.modelNode.label('Components');

out = model;
