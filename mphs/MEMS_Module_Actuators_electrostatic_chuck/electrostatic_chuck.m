function out = model
%
% electrostatic_chuck.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/MEMS_Module/Actuators');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'Incompressible');
model.physics('spf').field('velocity').field('u_fluid');
model.physics('spf').field('velocity').component({'u_fluid' 'v_fluid' 'w_fluid'});
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics('solid').field('displacement').field('u_solid');
model.physics('solid').field('displacement').component({'u_solid' 'v_solid' 'w_solid'});
model.physics('solid').prop('ShapeProperty').set('order_displacement', '2');
model.physics.create('ht', 'HeatTransferInSolidsAndFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');

model.multiphysics.create('fsi1', 'FluidStructureInteractionBC', 'geom1', 1);
model.multiphysics('fsi1').set('Fluid_physics', 'spf');
model.multiphysics('fsi1').set('Structure_physics', 'solid');
model.multiphysics('fsi1').selection.all;
model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 2);
model.multiphysics('nitf1').set('Fluid_physics', 'spf');
model.multiphysics('nitf1').set('Heat_physics', 'ht');
model.multiphysics.create('te1', 'ThermalExpansion', 'geom1', 2);
model.multiphysics('te1').set('Heat_physics', 'ht');
model.multiphysics('te1').set('Solid_physics', 'solid');
model.multiphysics('te1').selection.all;
model.multiphysics('te1').set('IncludeTed', '0');

model.common.create('free1', 'DeformingDomain', 'comp1');
model.common('free1').set('smoothingType', 'yeoh');
model.common('free1').selection.set([]);

model.geom('geom1').run;

model.multiphysics.create('eme1', 'ElectromechanicalForces', 'geom1', 2);

model.param.label('Geometry');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('d_wafer', '100[mm]', 'Wafer diameter');
model.param.set('t_wafer', '0.5[mm]', 'Wafer thickness');
model.param.set('r_electrode', '45[mm]', 'Electrode radius');
model.param.set('t_insulator', '0.6[mm]', 'Insulator thickness');
model.param.set('gap', '40[um]', 'Gap between wafer and chuck');
model.param.set('d_pin', '1[mm]', 'Pin width');
model.param.set('x_pin', '49[mm]', 'Pin location');
model.param.set('d_inlet', '4[mm]', 'Inlet diameter');
model.param.set('w_outlet', '2[mm]', 'Outlet width');
model.param.set('x_outlet', '30[mm]', 'Outlet location');
model.param.set('L_inlet', '1[mm]', 'Inlet length');
model.param.set('L_outlet', '1[mm]', 'Outlet Length');
model.param.set('x_gap3', '48[mm]', 'gap_3 location');
model.param.set('w_gap3', '0.25[mm]', 'gap_3 width');
model.param.create('par2');
model.param('par2').label('Mesh');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('mx_inlet', '20[1]', 'Inlet mesh factor, x-direction');
model.param('par2').set('my_channel', '5[1]', 'Channel mesh factor, x-direction');
model.param('par2').set('mx_outlet', '20[1]', 'Outlet mesh factor, x-direction');
model.param('par2').set('my_inlet', '10[1]', 'Inlet mesh factor, y-direction');
model.param('par2').set('my_outlet', '10[1]', 'Outlet mesh factor, y-direction');
model.param('par2').set('my_insulator', '5[1]', 'Insulator mesh factor, y-direction');
model.param('par2').set('mx_pin', '2[1]', 'Pin mesh factor, x-direction');
model.param('par2').set('my_wafer', '8[1]', 'Wafer mesh factor, y-direction');
model.param('par2').set('mfx', '8[1]', 'Mesh factor in x-direction');
model.param.create('par3');
model.param('par3').label('Process');

% To import content from file, use:
% model.param('par3').loadFile('FILENAME');
model.param('par3').set('mass_He', '0.004[kg/mol]', 'Molar mass of helium');
model.param('par3').set('Q_plasma', '0[W/m^2]', 'Plasma heat flux');
model.param('par3').set('flow', '0[1]', 'Mass flow in SCCM');
model.param('par3').set('zsp', '1[um]', 'Z-coordinate of setpoint');
model.param('par3').set('T_chuck', '273[K]', 'Chuck temperature');
model.param('par3').set('T_wafer_init', '273[K]', 'Initial wafer temperature');
model.param('par3').set('v_app', '0[V]', 'Applied voltage');
model.param('par3').set('v_inlet', '0[m/s]', 'Velocity at inlet');
model.param('par3').set('t_start', '1[s]', 'Pulse start time');
model.param('par3').set('t_pulse', '4[s]', 'Pulse duration');

model.func.create('rect1', 'Rectangle');
model.func('rect1').model('comp1');
model.func('rect1').set('lower', 't_start');
model.func('rect1').set('upper', 't_start+t_pulse');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('Qt', 'Q_plasma*rect1(t)');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').label('Wafer');
model.geom('geom1').feature('r1').set('size', {'d_wafer/2' 't_wafer'});
model.geom('geom1').feature('r1').set('pos', {'0' 'gap'});
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Selection: Wafer');
model.geom('geom1').feature('r1').set('contributeto', 'csel1');
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').label('Gap 1');
model.geom('geom1').feature('r2').set('size', {'x_outlet' 'gap'});
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').label('Gap 2');
model.geom('geom1').feature('r3').set('size', {'x_gap3-x_outlet' '1'});
model.geom('geom1').feature('r3').setIndex('size', 'gap', 1);
model.geom('geom1').feature('r3').set('pos', {'x_outlet' '0'});
model.geom('geom1').run('r3');
model.geom('geom1').create('r4', 'Rectangle');
model.geom('geom1').feature('r4').label('Gap 3');
model.geom('geom1').feature('r4').set('size', {'w_gap3' 'gap'});
model.geom('geom1').feature('r4').set('pos', {'x_gap3' '0'});
model.geom('geom1').run('r4');
model.geom('geom1').create('r5', 'Rectangle');
model.geom('geom1').feature('r5').label('Pin');
model.geom('geom1').feature('r5').set('size', {'d_pin' 'gap'});
model.geom('geom1').feature('r5').set('pos', {'x_gap3+w_gap3' '0'});
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Insulator');
model.geom('geom1').feature('r5').set('contributeto', 'csel2');
model.geom('geom1').run('r5');
model.geom('geom1').create('r6', 'Rectangle');
model.geom('geom1').feature('r6').label('Insulator 1');
model.geom('geom1').feature('r6').set('size', {'x_outlet-d_inlet/2' '1'});
model.geom('geom1').feature('r6').setIndex('size', 't_insulator', 1);
model.geom('geom1').feature('r6').set('pos', {'d_inlet/2' '-t_insulator'});
model.geom('geom1').feature('r6').set('contributeto', 'csel2');
model.geom('geom1').run('r6');
model.geom('geom1').create('r7', 'Rectangle');
model.geom('geom1').feature('r7').label('Insulator 2');
model.geom('geom1').feature('r7').set('size', {'x_gap3+w_gap3+d_pin-x_outlet-w_outlet' '1'});
model.geom('geom1').feature('r7').setIndex('size', 't_insulator', 1);
model.geom('geom1').feature('r7').set('pos', {'x_outlet+w_outlet' '0'});
model.geom('geom1').feature('r7').setIndex('pos', '-t_insulator', 1);
model.geom('geom1').feature('r7').set('contributeto', 'csel2');
model.geom('geom1').run('r7');
model.geom('geom1').create('r8', 'Rectangle');
model.geom('geom1').feature('r8').label('Inlet');
model.geom('geom1').feature('r8').set('size', {'d_inlet/2' 'L_inlet+t_insulator'});
model.geom('geom1').feature('r8').set('pos', {'0' '-L_inlet-t_insulator+gap'});
model.geom('geom1').run('r8');
model.geom('geom1').create('r9', 'Rectangle');
model.geom('geom1').feature('r9').label('Outlet');
model.geom('geom1').feature('r9').set('size', {'w_outlet' 'L_outlet+t_insulator'});
model.geom('geom1').feature('r9').set('pos', {'x_outlet' '-L_inlet-t_insulator+gap'});
model.geom('geom1').run('r9');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'r1' 'r2' 'r3' 'r4' 'r8' 'r9'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('uni2', 'Union');
model.geom('geom1').feature('uni2').selection('input').set({'r5' 'r6' 'r7'});
model.geom('geom1').run('uni2');
model.geom('geom1').create('pard1', 'PartitionDomains');
model.geom('geom1').feature('pard1').set('partitionwith', 'extendededges');
model.geom('geom1').feature('pard1').selection('extendededge').set('uni2', 2);
model.geom('geom1').feature('pard1').selection('domain').set('uni1', 1);
model.geom('geom1').run('pard1');
model.geom('geom1').create('pard2', 'PartitionDomains');
model.geom('geom1').feature('pard2').selection('domain').set('pard1', 6);
model.geom('geom1').feature('pard2').set('partitionwith', 'extendededges');
model.geom('geom1').feature('pard2').selection('extendededge').set('uni2', 2);
model.geom('geom1').run('pard2');
model.geom('geom1').create('pard3', 'PartitionDomains');
model.geom('geom1').feature('pard3').selection('domain').set('uni2', 2);
model.geom('geom1').feature('pard3').set('partitionwith', 'extendededges');
model.geom('geom1').feature('pard3').selection('extendededge').set('pard2', 27);
model.geom('geom1').run('pard3');
model.geom('geom1').create('pard4', 'PartitionDomains');
model.geom('geom1').feature('pard4').selection('domain').set('pard2', 4);
model.geom('geom1').feature('pard4').set('partitionwith', 'extendededges');
model.geom('geom1').feature('pard4').selection('extendededge').set('pard3', [8 5]);
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('createpairs', false);
model.geom('geom1').run('fin');

model.view('view1').axis.set('viewscaletype', 'manual');
model.view('view1').axis.set('yscale', 20);
model.view('view1').set('showlabels', true);

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 0);
model.cpl('intop1').selection.set([17]);
model.cpl('intop1').set('axisym', false);

model.pair.create('p1', 'Contact', 'geom1');
model.pair('p1').source.set([47 49 51]);
model.pair('p1').destination.set([32 35]);
model.pair('p1').mapping('initial');
model.pair.create('p2', 'Contact', 'geom1');
model.pair('p2').source.set([37 39 40]);
model.pair('p2').destination.set([8 14 21]);
model.pair('p2').mapping('initial');
model.pair.create('p3', 'Identity', 'geom1');
model.pair('p3').source.set([37 39 40 41 43 46 47 49]);
model.pair('p3').destination.set([13 25 30 34 35]);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Fluid');
model.selection('sel1').set([1 2 3 5 6 7 8 9 11]);

model.common('free1').selection.set([3 5 8 9 11]);
model.common('free1').set('smoothingType', 'hyperelastic');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').label('Al2O3 - Aluminum oxide');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'6.5e-6[1/K]' '0' '0' '0' '6.5e-6[1/K]' '0' '0' '0' '6.5e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '730[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'5.7' '0' '0' '0' '5.7' '0' '0' '0' '5.7'});
model.material('mat1').propertyGroup('def').set('density', '3965[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'35[W/(m*K)]' '0' '0' '0' '35[W/(m*K)]' '0' '0' '0' '35[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '400e9[Pa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.22');
model.material('mat1').selection.named('geom1_csel2_dom');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('Si - Silicon (single-crystal, isotropic)');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat2').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat2').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat2').set('noise', true);
model.material('mat2').set('fresnel', 0.7);
model.material('mat2').set('metallic', 0);
model.material('mat2').set('pearl', 0);
model.material('mat2').set('diffusewrap', 0);
model.material('mat2').set('clearcoat', 0);
model.material('mat2').set('reflectance', 0);
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '700[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'11.7' '0' '0' '0' '11.7' '0' '0' '0' '11.7'});
model.material('mat2').propertyGroup('def').set('density', '2329[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '170e9[Pa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.28');
model.material('mat2').selection.named('geom1_csel1_dom');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat3').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat3').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat3').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat3').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat3').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat3').label('Helium');
model.material('mat3').set('family', 'air');
model.material('mat3').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat3').propertyGroup('def').func('eta').set('pieces', {'144.0' '900.0' '3.7251756E-6+6.83450863E-8*T^1-5.07299333E-11*T^2+2.36688744E-14*T^3'});
model.material('mat3').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat3').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat3').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat3').propertyGroup('def').func('Cp').set('pieces', {'144.0' '900.0' '5200.0'});
model.material('mat3').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat3').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat3').propertyGroup('def').func('rho').set('expr', 'pA*0.004003/R_const[K*mol/J]/T');
model.material('mat3').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat3').propertyGroup('def').func('rho').set('dermethod', 'manual');
model.material('mat3').propertyGroup('def').func('rho').set('argders', {'pA' 'd(pA*0.004003/R_const/T,pA)'; 'T' 'd(pA*0.004003/R_const/T,T)'});
model.material('mat3').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat3').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat3').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat3').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat3').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat3').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat3').propertyGroup('def').func('k').set('pieces', {'144.0' '900.0' '0.0294900023+5.07655059E-4*T^1-4.22501605E-7*T^2+2.1209438E-10*T^3'});
model.material('mat3').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat3').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat3').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat3').propertyGroup('def').set('ratioofspecificheat', '1.66');
model.material('mat3').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat3').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat3').propertyGroup('def').addInput('temperature');
model.material('mat3').propertyGroup('def').addInput('pressure');
model.material('mat3').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat3').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat3').propertyGroup('idealGas').func('Cp').set('pieces', {'144.0' '900.0' '5200.0'});
model.material('mat3').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat3').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat3').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat3').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat3').propertyGroup('idealGas').set('ratioofspecificheat', '1.6667');
model.material('mat3').propertyGroup('idealGas').set('molarmass', '0.004');
model.material('mat3').propertyGroup('idealGas').addInput('temperature');
model.material('mat3').propertyGroup('idealGas').addInput('pressure');
model.material('mat3').selection.named('sel1');
model.material('mat3').propertyGroup('def').func('k').set('arg', 'pA');
model.material('mat3').propertyGroup('def').func('k').setIndex('pieces', 1, 0, 0);
model.material('mat3').propertyGroup('def').func('k').setIndex('pieces', 100, 0, 1);
model.material('mat3').propertyGroup('def').func('k').setIndex('pieces', '0.045809*log10(pA)+0.0063167', 0, 2);
model.material('mat3').propertyGroup('def').func('k').set('argunit', 'Torr');

model.physics('spf').selection.named('sel1');
model.physics('spf').feature('init1').set('p_init', 0.1);
model.physics('spf').feature('dcont1').set('pairDisconnect', true);
model.physics('spf').create('inl1', 'InletBoundary', 1);
model.physics('spf').feature('inl1').selection.set([2]);
model.physics('spf').feature('inl1').set('BoundaryCondition', 'MassFlow');
model.physics('spf').feature('inl1').set('MassFlowType', 'StandardFlowRateSCCM');
model.physics('spf').feature('inl1').set('sccmmfr', 'flow');
model.physics('spf').feature('inl1').set('Mn', 'mass_He');
model.physics('spf').create('out1', 'OutletBoundary', 1);
model.physics('spf').feature('out1').selection.set([16]);
model.physics('spf').feature('out1').set('p0', '0.01[Torr]');
model.physics('spf').feature('out1').set('SuppressBackflow', false);
model.physics('solid').selection.named('geom1_csel1_dom');
model.physics('solid').create('gacc1', 'GravityAcceleration', -1);
model.physics('solid').create('cnt1', 'SolidContact', 1);
model.physics('solid').feature('cnt1').set('penaltyCtrlPenalty', 'ManualTuning');
model.physics('solid').feature('cnt1').set('fp_penalty', '1/10');
model.physics('solid').feature('cnt1').set('destination_offset', '0.5[um]');
model.physics('solid').feature('cnt1').set('pairs', {'p2'});
model.physics('solid').feature('dcnt1').set('penaltyCtrlPenalty', 'ManualTuning');
model.physics('solid').feature('dcnt1').set('fp_penalty', '1/10');
model.physics('solid').feature('dcnt1').set('zeroInitGap', true);
model.physics('ht').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]);
model.physics('ht').prop('PhysicalModelProperty').set('Tref', 'T_chuck');
model.physics('ht').feature('solid1').set('minput_strainreferencetemperature_src', 'userdef');
model.physics('ht').feature('solid1').set('minput_strainreferencetemperature', 'T_chuck');
model.physics('ht').feature('solid1').set('minput_pressure_src', 'fromCommonDef');
model.physics('ht').feature('fluid1').selection.named('sel1');
model.physics('ht').feature('init1').set('Tinit', 'T_chuck');
model.physics('ht').create('solid2', 'SolidHeatTransferModel', 2);
model.physics('ht').feature('solid2').selection.named('geom1_csel1_dom');
model.physics('ht').feature('solid2').label('Solid 2 - Wafer');
model.physics('ht').feature('solid2').set('minput_strainreferencetemperature_src', 'userdef');
model.physics('ht').feature('solid2').set('minput_strainreferencetemperature', 'T_chuck');
model.physics('ht').feature('solid2').set('minput_pressure_src', 'root.comp1.spf.pA');
model.physics('ht').create('temp1', 'TemperatureBoundary', 1);
model.physics('ht').feature('temp1').selection.set([10 15 22 30 38 42 45 46]);
model.physics('ht').feature('temp1').set('T0', 'T_chuck');
model.physics('ht').create('ins2', 'ThermalInsulation', 1);
model.physics('ht').feature('ins2').selection.set([46 48]);
model.physics('ht').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf1').selection.set([9 28 33]);
model.physics('ht').feature('hf1').set('q0_input', 'Qt');
model.physics('ht').create('init2', 'init', 2);
model.physics('ht').feature('init2').selection.named('geom1_csel1_dom');
model.physics('ht').feature('init2').set('Tinit', 'T_wafer_init');
model.physics('es').feature('ccn1').setIndex('materialType', 'solid', 0);
model.physics('es').create('ccn2', 'ChargeConservation', 2);
model.physics('es').feature('ccn2').selection.named('sel1');
model.physics('es').feature('ccn2').set('epsilonr_mat', 'userdef');
model.physics('es').create('cont1', 'Continuity', 1);
model.physics('es').feature('cont1').set('pairs', {'p3'});
model.physics('es').create('term1', 'Terminal', 1);
model.physics('es').feature('term1').selection.set([8 14 21 27 32]);
model.physics('es').feature('term1').set('TerminalType', 'Voltage');
model.physics('es').feature('term1').set('V0', 0);
model.physics('es').create('term2', 'Terminal', 1);
model.physics('es').feature('term2').selection.set([38 42]);
model.physics('es').feature('term2').set('TerminalType', 'Voltage');
model.physics('es').feature('term2').set('V0', 'VdcSP[V]');
model.physics('es').create('ge1', 'GlobalEquations', -1);
model.physics('es').feature('ge1').setIndex('name', 'VdcSP', 0, 0);
model.physics('es').feature('ge1').setIndex('equation', '(intop1(z)-zsp)/zsp', 0, 0);

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.set([2 4 6 8]);
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').set('numelem', '10*(d_inlet/2)');
model.mesh('mesh1').create('edg2', 'Edge');
model.mesh('mesh1').feature('edg2').selection.set([16 18 20 21]);
model.mesh('mesh1').feature('edg2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg2').feature('dis1').set('numelem', '20*(w_outlet/2)');
model.mesh('mesh1').create('edg3', 'Edge');
model.mesh('mesh1').feature('edg3').selection.set([1 3 10 11 15 17 22 23]);
model.mesh('mesh1').feature('edg3').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg3').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('edg3').feature('dis1').set('elemcount', 'my_inlet');
model.mesh('mesh1').feature('edg3').feature('dis1').set('elemratio', 50);
model.mesh('mesh1').feature('edg3').feature('dis1').set('reverse', true);
model.mesh('mesh1').create('edg4', 'Edge');
model.mesh('mesh1').feature('edg4').selection.set([37 40 41 44 50]);
model.mesh('mesh1').feature('edg4').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg4').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('edg4').feature('dis1').set('elemcount', 'my_insulator');
model.mesh('mesh1').feature('edg4').feature('dis1').set('elemratio', 2);
model.mesh('mesh1').feature('edg4').feature('dis1').set('reverse', true);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').label('Mapped 1 - Inlet and Outlet');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([1 2 6 7]);
model.mesh('mesh1').create('edg5', 'Edge');
model.mesh('mesh1').feature('edg5').selection.set([5 12 19 24 29 34 47 51]);
model.mesh('mesh1').feature('edg5').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg5').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('edg5').feature('dis1').set('elemcount', 'my_channel');
model.mesh('mesh1').feature('edg5').feature('dis1').set('elemratio', 5);
model.mesh('mesh1').feature('edg5').feature('dis1').set('symmetric', true);
model.mesh('mesh1').create('map2', 'Map');
model.mesh('mesh1').feature('map2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map2').selection.set([3 8]);
model.mesh('mesh1').feature('map2').label('Mapped 2 - Corner');
model.mesh('mesh1').create('edg6', 'Edge');
model.mesh('mesh1').feature('edg6').selection.set([13 25 38 39 42 43]);
model.mesh('mesh1').feature('edg6').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg6').feature('dis1').selection.set([13]);
model.mesh('mesh1').feature('edg6').feature('dis1').set('numelem', 'mfx*x_outlet');
model.mesh('mesh1').feature('edg6').create('dis2', 'Distribution');
model.mesh('mesh1').feature('edg6').feature('dis2').selection.set([25]);
model.mesh('mesh1').feature('edg6').feature('dis2').set('numelem', 'mfx*(d_wafer/2-x_outlet)');
model.mesh('mesh1').feature('edg6').create('dis3', 'Distribution');
model.mesh('mesh1').feature('edg6').feature('dis3').selection.set([38 39]);
model.mesh('mesh1').feature('edg6').feature('dis3').set('numelem', '2*x_outlet');
model.mesh('mesh1').feature('edg6').create('dis4', 'Distribution');
model.mesh('mesh1').feature('edg6').feature('dis4').selection.set([42 43]);
model.mesh('mesh1').feature('edg6').feature('dis4').set('numelem', '2*(d_wafer/2-x_outlet)');
model.mesh('mesh1').create('map3', 'Map');
model.mesh('mesh1').feature('map3').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map3').selection.set([5 9]);
model.mesh('mesh1').feature('map3').label('Mapped - Channel');
model.mesh('mesh1').create('map4', 'Map');
model.mesh('mesh1').feature('map4').label('Mapped - Insulator');
model.mesh('mesh1').feature('map4').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map4').selection.set([13 14]);
model.mesh('mesh1').create('edg7', 'Edge');
model.mesh('mesh1').feature('edg7').selection.set([30 32 49]);
model.mesh('mesh1').feature('edg7').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg7').feature('dis1').selection.set([49]);
model.mesh('mesh1').feature('edg7').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('edg7').feature('dis1').set('elemcount', 'my_channel');
model.mesh('mesh1').feature('edg7').create('dis2', 'Distribution');
model.mesh('mesh1').feature('edg7').feature('dis2').selection.set([30 32]);
model.mesh('mesh1').feature('edg7').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('edg7').feature('dis2').set('elemcount', '3*mx_pin');
model.mesh('mesh1').feature('edg7').feature('dis2').set('elemratio', 2);
model.mesh('mesh1').create('map5', 'Map');
model.mesh('mesh1').feature('map5').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map5').selection.set([11]);
model.mesh('mesh1').create('edg8', 'Edge');
model.mesh('mesh1').feature('edg8').selection.set([46]);
model.mesh('mesh1').feature('edg8').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg8').feature('dis1').selection.set([46]);
model.mesh('mesh1').feature('edg8').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('edg8').feature('dis1').set('elemcount', 2);
model.mesh('mesh1').feature('edg8').feature('dis1').set('symmetric', true);
model.mesh('mesh1').create('map6', 'Map');
model.mesh('mesh1').feature('map6').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map6').selection.set([16]);
model.mesh('mesh1').create('edg9', 'Edge');
model.mesh('mesh1').feature('edg9').selection.set([7 36]);
model.mesh('mesh1').feature('edg9').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg9').feature('dis1').set('numelem', 'my_wafer');
model.mesh('mesh1').create('cpe1', 'CopyEdge');
model.mesh('mesh1').feature('cpe1').selection('source').geom(1);
model.mesh('mesh1').feature('cpe1').selection('destination').geom(1);
model.mesh('mesh1').feature('cpe1').selection('source').set([46 48]);
model.mesh('mesh1').feature('cpe1').selection('destination').set([45]);
model.mesh('mesh1').create('map7', 'Map');
model.mesh('mesh1').feature('map7').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map7').selection.set([15]);
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').selection.set([4 10 12]);
model.mesh('mesh1').run;
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hauto', 3);

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/physics/es', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/fsi1', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/nitf1', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/te1', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/eme1', true);
model.study('std1').label('Study 1 - Without Gas Flow');
model.study('std1').setGenPlots(false);
model.study('std1').feature('stat').setEntry('activate', 'spf', false);
model.study('std1').feature('stat').setEntry('activate', 'ht', false);
model.study('std1').feature('stat').setEntry('activateCoupling', 'fsi1', false);
model.study('std1').feature('stat').setEntry('activateCoupling', 'nitf1', false);
model.study('std1').feature('stat').setEntry('activateCoupling', 'te1', false);
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'd_inlet', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'd_inlet', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'zsp', 0);
model.study('std1').feature('stat').setIndex('plistarr', '35[um] 25[um] 15[um]', 0);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3 5 6 7 8 9 11]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([3 5 8 9 11]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_u_solid').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u_solid').set('scaleval', '1e-2*0.05004408056903434');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*0.05004408056903434');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V' 'comp1_ODE1'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Electric Potential');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u_solid'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Displacement Field');
model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subdtech', 'const');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subjtech', 'onevery');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').label('Spatial Mesh Displacement');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'hnlin');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol1').runAll;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/spf', true);
model.study('std2').feature('stat').setSolveFor('/physics/solid', true);
model.study('std2').feature('stat').setSolveFor('/physics/ht', true);
model.study('std2').feature('stat').setSolveFor('/physics/es', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/fsi1', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/nitf1', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/te1', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/eme1', true);
model.study('std2').label('Study 2 - with Gas Flow');
model.study('std2').setGenPlots(false);
model.study('std2').feature('stat').setEntry('activate', 'ht', false);
model.study('std2').feature('stat').setEntry('activateCoupling', 'te1', false);
model.study('std2').feature('stat').set('useparam', true);
model.study('std2').feature('stat').set('sweeptype', 'filled');
model.study('std2').feature('stat').setIndex('pname', 'd_inlet', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'm', 0);
model.study('std2').feature('stat').setIndex('pname', 'd_inlet', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'm', 0);
model.study('std2').feature('stat').setIndex('pname', 'flow', 0);
model.study('std2').feature('stat').setIndex('plistarr', 'range(0,100,400)', 0);
model.study('std2').feature('stat').setIndex('pname', 'd_inlet', 1);
model.study('std2').feature('stat').setIndex('plistarr', '', 1);
model.study('std2').feature('stat').setIndex('punit', 'm', 1);
model.study('std2').feature('stat').setIndex('pname', 'd_inlet', 1);
model.study('std2').feature('stat').setIndex('plistarr', '', 1);
model.study('std2').feature('stat').setIndex('punit', 'm', 1);
model.study('std2').feature('stat').setIndex('pname', 'zsp', 1);
model.study('std2').feature('stat').setIndex('plistarr', '30[um]', 1);

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3 5 6 7 8 9 11]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([3 5 8 9 11]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_u_solid').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_u_solid').set('scaleval', '1e-2*0.05004408056903434');
model.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*0.05004408056903434');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol2').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol2').feature('s1').set('control', 'stat');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('seDef', 'Segregated');
model.sol('sol2').feature('s1').create('se1', 'Segregated');
model.sol('sol2').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V' 'comp1_ODE1'});
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('subdtech', 'ddog');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('subtermauto', 'itertol');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('subiter', 7);
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('subntolfact', 1);
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').label('Electrostatics');
model.sol('sol2').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u_fluid' 'comp1_p' 'comp1_spf_inl1_Pmf'});
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.5);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').label('Velocity U_fluid, Pressure p');
model.sol('sol2').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_u_solid'});
model.sol('sol2').feature('s1').feature('se1').feature('ss3').set('subdtech', 'const');
model.sol('sol2').feature('s1').feature('se1').feature('ss3').set('subdamp', 0.5);
model.sol('sol2').feature('s1').feature('se1').feature('ss3').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature('se1').feature('ss3').label('Displacement Field');
model.sol('sol2').feature('s1').feature('se1').create('ss4', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss4').set('segvar', {'comp1_spatial_disp'});
model.sol('sol2').feature('s1').feature('se1').feature('ss4').set('subdamp', 0.5);
model.sol('sol2').feature('s1').feature('se1').feature('ss4').set('subiter', 1);
model.sol('sol2').feature('s1').feature('se1').feature('ss4').set('subtermconst', 'iter');
model.sol('sol2').feature('s1').feature('se1').feature('ss4').set('subntolfact', 0.1);
model.sol('sol2').feature('s1').create('d2', 'Direct');
model.sol('sol2').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('d2').label('Direct, spatial mesh displacement (spf)');
model.sol('sol2').feature('s1').feature('se1').feature('ss4').set('linsolver', 'd2');
model.sol('sol2').feature('s1').feature('se1').feature('ss4').label('Spatial Mesh Displacement');
model.sol('sol2').feature('s1').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol2').feature('s1').feature('se1').set('subinitcfl', 5);
model.sol('sol2').feature('s1').feature('se1').set('submincfl', 10000);
model.sol('sol2').feature('s1').feature('se1').set('subkppid', 0.65);
model.sol('sol2').feature('s1').feature('se1').set('subkdpid', 0.05);
model.sol('sol2').feature('s1').feature('se1').set('subkipid', 0.05);
model.sol('sol2').feature('s1').feature('se1').set('subcfltol', 0.1);
model.sol('sol2').feature('s1').feature('se1').set('segcflaa', true);
model.sol('sol2').feature('s1').feature('se1').set('segcflaacfl', 9000);
model.sol('sol2').feature('s1').feature('se1').set('segcflaafact', 1);
model.sol('sol2').feature('s1').feature('se1').set('maxsegiter', 200);
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol2').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pmf'});
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pmf'});
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('s1').feature.remove('seDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'hnlin');
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 500);
model.sol('sol2').runAll;

model.study.create('std3');
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').setSolveFor('/physics/spf', true);
model.study('std3').feature('time').setSolveFor('/physics/solid', true);
model.study('std3').feature('time').setSolveFor('/physics/ht', true);
model.study('std3').feature('time').setSolveFor('/physics/es', true);
model.study('std3').feature('time').setSolveFor('/multiphysics/fsi1', true);
model.study('std3').feature('time').setSolveFor('/multiphysics/nitf1', true);
model.study('std3').feature('time').setSolveFor('/multiphysics/te1', true);
model.study('std3').feature('time').setSolveFor('/multiphysics/eme1', true);
model.study('std3').label('Study 3 - Wafer Temperature vs. Time');
model.study('std3').setGenPlots(false);
model.study('std3').feature('time').setEntry('activateCoupling', 'te1', false);
model.study('std3').feature('time').set('tunit', 'ms');
model.study('std3').feature('time').set('tlist', 'range(0,5,7000)');
model.study('std3').feature('time').set('useinitsol', true);
model.study('std3').feature('time').set('initmethod', 'sol');
model.study('std3').feature('time').set('initstudy', 'std2');
model.study('std3').feature('time').set('solnum', 2);
model.study('std3').feature('time').set('useparam', true);
model.study('std3').feature('time').setIndex('pname', 'd_inlet', 0);
model.study('std3').feature('time').setIndex('plistarr', '', 0);
model.study('std3').feature('time').setIndex('punit', 'm', 0);
model.study('std3').feature('time').setIndex('pname', 'd_inlet', 0);
model.study('std3').feature('time').setIndex('plistarr', '', 0);
model.study('std3').feature('time').setIndex('punit', 'm', 0);
model.study('std3').feature('time').setIndex('pname', 'flow', 0);
model.study('std3').feature('time').setIndex('plistarr', 100, 0);
model.study('std3').feature('time').setIndex('pname', 'd_inlet', 1);
model.study('std3').feature('time').setIndex('plistarr', '', 1);
model.study('std3').feature('time').setIndex('punit', 'm', 1);
model.study('std3').feature('time').setIndex('pname', 'd_inlet', 1);
model.study('std3').feature('time').setIndex('plistarr', '', 1);
model.study('std3').feature('time').setIndex('punit', 'm', 1);
model.study('std3').feature('time').setIndex('pname', 'zsp', 1);
model.study('std3').feature('time').setIndex('plistarr', '30[um]', 1);
model.study('std3').feature('time').setIndex('pname', 'd_inlet', 2);
model.study('std3').feature('time').setIndex('plistarr', '', 2);
model.study('std3').feature('time').setIndex('punit', 'm', 2);
model.study('std3').feature('time').setIndex('pname', 'd_inlet', 2);
model.study('std3').feature('time').setIndex('plistarr', '', 2);
model.study('std3').feature('time').setIndex('punit', 'm', 2);
model.study('std3').feature('time').setIndex('pname', 'Q_plasma', 2);
model.study('std3').feature('time').setIndex('plistarr', '1E5', 2);

model.sol.create('sol3');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3 5 6 7 8 9 11]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([3 5 8 9 11]);

model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'time');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').feature('comp1_u_solid').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_u_solid').set('scaleval', '1e-2*0.05004408056903434');
model.sol('sol3').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*0.05004408056903434');
model.sol('sol3').feature('v1').set('control', 'time');
model.sol('sol3').create('t1', 'Time');
model.sol('sol3').feature('t1').set('tlist', 'range(0,5,7000)');
model.sol('sol3').feature('t1').set('plot', 'off');
model.sol('sol3').feature('t1').set('plotgroup', 'Default');
model.sol('sol3').feature('t1').set('plotfreq', 'tout');
model.sol('sol3').feature('t1').set('probesel', 'all');
model.sol('sol3').feature('t1').set('probes', {});
model.sol('sol3').feature('t1').set('probefreq', 'tsteps');
model.sol('sol3').feature('t1').set('rtol', 0.001);
model.sol('sol3').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol3').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('atolmethod', {'comp1_fsi1_vWall' 'global' 'comp1_nitf1_Uave' 'global' 'comp1_p' 'scaled' 'comp1_spatial_disp' 'global' 'comp1_T' 'global'  ...
'comp1_u_fluid' 'global' 'comp1_u_solid' 'global' 'comp1_V' 'global' 'comp1_spf_inl1_Pmf' 'global' 'comp1_ODE1' 'global'});
model.sol('sol3').feature('t1').set('atol', {'comp1_fsi1_vWall' '1e-3' 'comp1_nitf1_Uave' '1e-3' 'comp1_p' '1e-3' 'comp1_spatial_disp' '1e-3' 'comp1_T' '1e-3'  ...
'comp1_u_fluid' '1e-3' 'comp1_u_solid' '1e-3' 'comp1_V' '1e-3' 'comp1_spf_inl1_Pmf' '1e-3' 'comp1_ODE1' '1e-3'});
model.sol('sol3').feature('t1').set('atolvaluemethod', {'comp1_fsi1_vWall' 'factor' 'comp1_nitf1_Uave' 'factor' 'comp1_p' 'factor' 'comp1_spatial_disp' 'factor' 'comp1_T' 'factor'  ...
'comp1_u_fluid' 'factor' 'comp1_u_solid' 'factor' 'comp1_V' 'factor' 'comp1_spf_inl1_Pmf' 'factor' 'comp1_ODE1' 'factor'});
model.sol('sol3').feature('t1').set('atolfactor', {'comp1_fsi1_vWall' '0.1' 'comp1_nitf1_Uave' '0.1' 'comp1_p' '1' 'comp1_spatial_disp' '0.1' 'comp1_T' '0.1'  ...
'comp1_u_fluid' '0.1' 'comp1_u_solid' '0.1' 'comp1_V' '0.1' 'comp1_spf_inl1_Pmf' '0.1' 'comp1_ODE1' '0.1'});
model.sol('sol3').feature('t1').set('reacf', true);
model.sol('sol3').feature('t1').set('storeudot', true);
model.sol('sol3').feature('t1').set('endtimeinterpolation', true);
model.sol('sol3').feature('t1').set('estrat', 'exclude');
model.sol('sol3').feature('t1').set('rhoinf', 0.5);
model.sol('sol3').feature('t1').set('predictor', 'constant');
model.sol('sol3').feature('t1').set('maxorder', 2);
model.sol('sol3').feature('t1').set('stabcntrl', true);
model.sol('sol3').feature('t1').set('bwinitstepfrac', '0.01');
model.sol('sol3').feature('t1').create('tp1', 'TimeParametric');
model.sol('sol3').feature('t1').feature.remove('tpDef');
model.sol('sol3').feature('t1').feature('tp1').set('control', 'time');
model.sol('sol3').feature('t1').set('control', 'time');
model.sol('sol3').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('t1').create('seDef', 'Segregated');
model.sol('sol3').feature('t1').create('se1', 'Segregated');
model.sol('sol3').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol3').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_V' 'comp1_ODE1'});
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('subdamp', 0.7);
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('subjtech', 'minimal');
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('subminstep', 1.0E-4);
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('usesubminsteprecovery', 'on');
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('subdtech', 'auto');
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('subtermauto', 'itertol');
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('maxsubiter', 20);
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('subntolfact', 1);
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol3').feature('t1').feature('se1').feature('ss1').label('Electrostatics');
model.sol('sol3').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol3').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_u_fluid' 'comp1_p' 'comp1_spf_inl1_Pmf'});
model.sol('sol3').feature('t1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol3').feature('t1').feature('se1').feature('ss2').set('subjtech', 'once');
model.sol('sol3').feature('t1').create('d1', 'Direct');
model.sol('sol3').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol3').feature('t1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol3').feature('t1').feature('se1').feature('ss2').label('Velocity U_fluid, Pressure p');
model.sol('sol3').feature('t1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol3').feature('t1').feature('se1').feature('ss3').set('segvar', {'comp1_u_solid'});
model.sol('sol3').feature('t1').feature('se1').feature('ss3').set('subdtech', 'const');
model.sol('sol3').feature('t1').feature('se1').feature('ss3').set('subdamp', 0.8);
model.sol('sol3').feature('t1').feature('se1').feature('ss3').set('subjtech', 'once');
model.sol('sol3').feature('t1').feature('se1').feature('ss3').set('linsolver', 'dDef');
model.sol('sol3').feature('t1').feature('se1').feature('ss3').label('Displacement Field');
model.sol('sol3').feature('t1').feature('se1').create('ss4', 'SegregatedStep');
model.sol('sol3').feature('t1').feature('se1').feature('ss4').set('segvar', {'comp1_spatial_disp'});
model.sol('sol3').feature('t1').feature('se1').feature('ss4').set('subdamp', 0.8);
model.sol('sol3').feature('t1').feature('se1').feature('ss4').set('subjtech', 'once');
model.sol('sol3').feature('t1').feature('se1').feature('ss4').set('subiter', 1);
model.sol('sol3').feature('t1').feature('se1').feature('ss4').set('subtermconst', 'iter');
model.sol('sol3').feature('t1').feature('se1').feature('ss4').set('subntolfact', 0.1);
model.sol('sol3').feature('t1').create('d2', 'Direct');
model.sol('sol3').feature('t1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').feature('d2').label('Direct, spatial mesh displacement (spf)');
model.sol('sol3').feature('t1').feature('se1').feature('ss4').set('linsolver', 'd2');
model.sol('sol3').feature('t1').feature('se1').feature('ss4').label('Spatial Mesh Displacement');
model.sol('sol3').feature('t1').feature('se1').create('ss5', 'SegregatedStep');
model.sol('sol3').feature('t1').feature('se1').feature('ss5').set('segvar', {'comp1_fsi1_vWall'});
model.sol('sol3').feature('t1').feature('se1').feature('ss5').set('subdamp', 0.7);
model.sol('sol3').feature('t1').feature('se1').feature('ss5').set('subjtech', 'onevery');
model.sol('sol3').feature('t1').create('d3', 'Direct');
model.sol('sol3').feature('t1').feature('d3').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('d3').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').feature('d3').label('Direct 2');
model.sol('sol3').feature('t1').feature('se1').feature('ss5').set('linsolver', 'd3');
model.sol('sol3').feature('t1').feature('se1').feature('ss5').label(['Fluid' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Structure Interaction 1']);
model.sol('sol3').feature('t1').feature('se1').create('ss6', 'SegregatedStep');
model.sol('sol3').feature('t1').feature('se1').feature('ss6').set('segvar', {'comp1_T'});
model.sol('sol3').feature('t1').feature('se1').feature('ss6').set('subdamp', 0.7);
model.sol('sol3').feature('t1').feature('se1').feature('ss6').set('subjtech', 'onevery');
model.sol('sol3').feature('t1').create('d4', 'Direct');
model.sol('sol3').feature('t1').feature('d4').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('d4').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').feature('d4').label('Direct, heat transfer variables (ht)');
model.sol('sol3').feature('t1').feature('se1').feature('ss6').set('linsolver', 'd4');
model.sol('sol3').feature('t1').feature('se1').feature('ss6').label('Temperature');
model.sol('sol3').feature('t1').feature('se1').set('ntolfact', 0.5);
model.sol('sol3').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol3').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol3').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol3').feature('t1').feature('se1').set('segaaccdelay', 0);
model.sol('sol3').feature('t1').feature('se1').set('maxsegiter', 20);
model.sol('sol3').feature('t1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol3').feature('t1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol3').feature('t1').create('i1', 'Iterative');
model.sol('sol3').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol3').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol3').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol3').feature('t1').feature('i1').set('maxlinit', 100);
model.sol('sol3').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol3').feature('t1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol3').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pmf'});
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pmf'});
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').create('i2', 'Iterative');
model.sol('sol3').feature('t1').feature('i2').set('linsolver', 'gmres');
model.sol('sol3').feature('t1').feature('i2').set('prefuntype', 'left');
model.sol('sol3').feature('t1').feature('i2').set('itrestart', 50);
model.sol('sol3').feature('t1').feature('i2').set('rhob', 20);
model.sol('sol3').feature('t1').feature('i2').set('maxlinit', 10000);
model.sol('sol3').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol3').feature('t1').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol3').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').feature.remove('fcDef');
model.sol('sol3').feature('t1').feature.remove('seDef');
model.sol('sol3').attach('std3');
model.sol('sol3').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('t1').feature('fc1').set('linsolver', 'd2');
model.sol('sol3').feature('t1').feature('fc1').set('dtech', 'hnlin');
model.sol('sol3').feature('t1').feature('fc1').set('maxiter', 200);
model.sol('sol3').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').label('Wafer Profile, Without Gas Flow');
model.result('pg1').create('lngr1', 'LineGraph');
model.result('pg1').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg1').feature('lngr1').set('linewidth', 'preference');
model.result('pg1').feature('lngr1').selection.set([8 14 21 27 32 35]);
model.result('pg1').feature('lngr1').set('expr', 'z');
model.result('pg1').feature('lngr1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg1').feature('lngr1').set('descractive', true);
model.result('pg1').feature('lngr1').set('xdata', 'expr');
model.result('pg1').feature('lngr1').set('xdataexpr', 'r');
model.result('pg1').feature('lngr1').set('legend', true);
model.result('pg1').run;
model.result('pg1').set('legendpos', 'lowerright');
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('VdcSP vs. zsp');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('linewidth', 'preference');
model.result('pg2').feature('glob1').setIndex('expr', 'VdcSP', 0);
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').feature('glob1').set('xdataexpr', 'zsp');
model.result('pg2').feature('glob1').set('xdataunit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg2').feature('glob1').set('xdatadescractive', true);
model.result('pg2').run;
model.result('pg1').run;
model.result.duplicate('pg3', 'pg1');
model.result('pg3').run;
model.result('pg3').label('Wafer Profile, with Gas Flow');
model.result('pg3').set('data', 'dset2');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg2').run;
model.result('pg2').set('legendpos', 'lowerright');
model.result('pg2').run;
model.result.duplicate('pg4', 'pg2');
model.result('pg4').run;
model.result('pg4').label('VdcSP vs. Gas Flow');
model.result('pg4').set('data', 'dset2');
model.result('pg4').run;
model.result('pg4').feature('glob1').set('xdatasolnumtype', 'level2');
model.result('pg4').feature('glob1').set('xdata', 'solution');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').set('legendpos', 'upperright');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').run;
model.result('pg5').label('Displacement, Without Gas Flow');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', 'solid.disp');
model.result('pg5').feature('surf1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg5').feature('surf1').set('descractive', true);
model.result('pg5').feature('surf1').set('colortable', 'RainbowLight');
model.result('pg5').feature('surf1').create('def1', 'Deform');
model.result('pg5').run;
model.result('pg5').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg5').feature('surf1').feature('def1').set('scale', 0);
model.result('pg5').feature('surf1').feature('def1').set('descractive', true);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').run;
model.result('pg6').label('Displacement, with Gas Flow');
model.result('pg6').set('data', 'dset2');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'solid.disp');
model.result('pg6').feature('surf1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg6').feature('surf1').set('descractive', true);
model.result('pg6').feature('surf1').set('colortable', 'RainbowLight');
model.result('pg6').feature('surf1').create('def1', 'Deform');
model.result('pg6').run;
model.result('pg6').feature('surf1').feature('def1').set('descractive', true);
model.result('pg6').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg6').feature('surf1').feature('def1').set('scale', 0);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Wafer Temperature vs. Time');
model.result('pg7').set('data', 'dset3');
model.result('pg7').create('ptgr1', 'PointGraph');
model.result('pg7').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr1').set('linewidth', 'preference');
model.result('pg7').feature('ptgr1').selection.set([5]);
model.result('pg7').feature('ptgr1').set('expr', 'T');
model.result('pg7').feature('ptgr1').set('descractive', true);
model.result('pg7').feature('ptgr1').set('xdataparamunit', 's');
model.result('pg7').run;
model.result('pg1').run;
model.result('pg2').run;
model.result('pg3').run;
model.result('pg4').run;
model.result('pg5').run;
model.result('pg6').run;
model.result('pg7').run;

model.title('Electrostatic Chuck');

model.description('The electrostatic chuck (e-chuck) is an important device used in wafer-processing equipment to secure the wafer on a temperature-controlled platform for cooling and heating the wafer during processing. E-chuck operations involve several physics phenomena: electrostatic forces, gas flow, heat transfer, and solid mechanics. This example models temperature control through an electrostatic force that counters helium gas pressure in the gap between the wafer and the chuck surface, which provides thermal conduction in an otherwise low-pressure environment.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('electrostatic_chuck.mph');

model.modelNode.label('Components');

out = model;
