function out = model
%
% spring_loaded_slider.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/mbd', true);

model.param.set('a', '0.05[m]');
model.param.descr('a', 'Side length of slider');
model.param.set('p', '0.5[m]');
model.param.descr('p', 'Initial position of slider');
model.param.set('omega', '1[rad/s]');
model.param.descr('omega', 'Angular velocity');
model.param.set('k', '2.5[N/m]');
model.param.descr('k', 'Spring constant');
model.param.set('c', '0.1[N*s/m]');
model.param.descr('c', 'Damping coefficient');
model.param.set('rho', '2700[kg/m^3]');
model.param.descr('rho', 'Density');
model.param.set('m', 'rho*a^3');
model.param.descr('m', 'Mass of slider');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'1' 'a'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'a' 'a'});
model.geom('geom1').feature('r2').set('pos', {'p-a/2' 'a'});
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('createpairs', false);
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').label('Aluminum');
model.material('mat1').set('family', 'aluminum');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat1').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.33');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-350[GPa]');

model.physics('mbd').prop('d').set('d', 'a');
model.physics('mbd').prop('InitialValues').set('xc_Init', {'0' 'a/2' '0'});
model.physics('mbd').prop('InitialValues').set('phit_Init', 'omega');
model.physics('mbd').create('att1', 'Attachment', 1);
model.physics('mbd').feature('att1').selection.set([3]);
model.physics('mbd').create('att2', 'Attachment', 1);
model.physics('mbd').feature('att2').selection.set([6]);
model.physics('mbd').create('prj1', 'PrismaticJoint', -1);
model.physics('mbd').feature('prj1').set('Source', 'att1');
model.physics('mbd').feature('prj1').set('Destination', 'att2');
model.physics('mbd').feature('prj1').create('sd1', 'SpringAndDamper', -1);
model.physics('mbd').feature('prj1').feature('sd1').set('k_u', 'k');
model.physics('mbd').feature('prj1').feature('sd1').set('c_u', 'c');
model.physics('mbd').feature('prj1').create('pm1', 'PrescribedMotion', -1);
model.physics('mbd').feature('prj1').feature('pm1').set('ActivationConditionTranslational', 'conditionallyActive');
model.physics('mbd').feature('prj1').feature('pm1').set('i_up', '(t>=0.1)');
model.physics('mbd').create('rig1', 'RigidConnector', 1);
model.physics('mbd').feature('rig1').selection.set([1]);
model.physics('mbd').feature('rig1').setIndex('Direction', true, 0);
model.physics('mbd').feature('rig1').setIndex('Direction', true, 1);
model.physics('mbd').feature('rig1').set('RotationType', 'PrescribedRotationGroup');
model.physics('mbd').feature('rig1').set('phi0', 'omega*t');
model.physics('mbd').create('ge1', 'GlobalEquations', -1);
model.physics('mbd').feature('ge1').setIndex('name', 'ua', 0, 0);
model.physics('mbd').feature('ge1').setIndex('equation', 'm*uatt+c*uat+k*ua-(m*(p+ua)*omega^2)*(t>=0.1)', 0, 0);
model.physics('mbd').feature('ge1').setIndex('description', 'Analytical displacement', 0, 0);
model.physics('mbd').feature('ge1').set('DependentVariableQuantity', 'displacement');
model.physics('mbd').feature('ge1').set('SourceTermQuantity', 'force');

model.study('std1').feature('time').set('tlist', 'range(0,0.02,2*pi)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_rig_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rig_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rig_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rig_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rig_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scaleval', '0.010049875621120889');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_disp').set('scaleval', '0.010049875621120889');
model.sol('sol1').feature('v1').feature('comp1_mbd_rig_disp').set('scaleval', '0.010049875621120889');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*1.004987562112089');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.02,2*pi)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Displacement (mbd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 315, 0);
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Velocity (mbd)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 315, 0);
model.result('pg2').set('defaultPlotID', 'velocity');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('expr', 'mod(dom,10)');
model.result('pg2').feature('surf1').set('unit', '1');
model.result('pg2').feature('surf1').set('colortable', 'Cyclic');
model.result('pg2').feature('surf1').set('colorlegend', false);
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature('surf1').feature.create('def1', 'Deform');
model.result('pg2').feature('surf1').feature('def1').label('Deformation');
model.result('pg2').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg2').feature.create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').label('Arrow Line');
model.result('pg2').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY'});
model.result('pg2').feature('arwl1').set('placement', 'elements');
model.result('pg2').feature('arwl1').set('data', 'parent');
model.result('pg2').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg2').feature('arwl1').feature('def1').label('Deformation');
model.result('pg2').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg1').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Relative Displacement');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').set('expr', {'mbd.prj1.u'});
model.result('pg3').feature('glob1').set('descr', {'Relative displacement'});
model.result('pg3').feature('glob1').set('unit', {'m'});
model.result('pg3').feature('glob1').setIndex('descr', 'Computed displacement', 0);
model.result('pg3').feature('glob1').set('linewidth', 2);
model.result('pg3').run;
model.result('pg3').create('glob2', 'Global');
model.result('pg3').feature('glob2').set('markerpos', 'datapoints');
model.result('pg3').feature('glob2').set('linewidth', 'preference');
model.result('pg3').feature('glob2').set('expr', {'ua'});
model.result('pg3').feature('glob2').set('descr', {'Analytical displacement'});
model.result('pg3').feature('glob2').set('unit', {'m'});
model.result('pg3').feature('glob2').set('linemarker', 'asterisk');
model.result('pg3').feature('glob2').set('markerpos', 'interp');
model.result('pg3').feature('glob2').set('markers', 20);
model.result('pg3').feature('glob2').set('linestyle', 'none');
model.result('pg3').run;
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Comparison of radial displacement of slider');
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'Relative displacement [m]');
model.result('pg3').set('legendpos', 'lowerright');
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Relative Velocity');
model.result('pg4').run;
model.result('pg4').feature('glob1').setIndex('expr', 'mbd.prj1.u_t', 0);
model.result('pg4').feature('glob1').setIndex('unit', 'm/s', 0);
model.result('pg4').feature('glob1').setIndex('descr', 'Computed velocity', 0);
model.result('pg4').run;
model.result('pg4').feature('glob2').setIndex('expr', 'uat', 0);
model.result('pg4').feature('glob2').setIndex('unit', '', 0);
model.result('pg4').feature('glob2').setIndex('descr', 'Analytical velocity', 0);
model.result('pg4').run;
model.result('pg4').set('title', 'Comparison of radial velocity of slider');
model.result('pg4').set('ylabel', 'Relative velocity [m/s]');
model.result('pg4').set('legendpos', 'upperright');
model.result('pg4').run;
model.result.create('pg5', 'PolarGroup');
model.result('pg5').run;
model.result('pg5').label('Radial Position of Slider');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').setIndex('expr', 'mbd.prj1.u+p', 0);
model.result('pg5').feature('glob1').setIndex('unit', 'm', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'Current position of slider', 0);
model.result('pg5').feature('glob1').set('linewidth', 2);
model.result('pg5').run;
model.result('pg5').create('glob2', 'Global');
model.result('pg5').feature('glob2').set('markerpos', 'datapoints');
model.result('pg5').feature('glob2').set('linewidth', 'preference');
model.result('pg5').feature('glob2').setIndex('expr', 'p', 0);
model.result('pg5').feature('glob2').setIndex('unit', 'm', 0);
model.result('pg5').feature('glob2').setIndex('descr', 'Initial position of slider', 0);
model.result('pg5').feature('glob2').set('linewidth', 2);
model.result('pg5').feature('glob2').set('linemarker', 'asterisk');
model.result('pg5').feature('glob2').set('markerpos', 'interp');
model.result('pg5').feature('glob2').set('markers', 20);
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Radial position of slider');
model.result('pg5').set('axislimits', true);
model.result('pg5').set('rmin', 0);
model.result('pg5').run;
model.result.create('pg6', 'PolarGroup');
model.result('pg6').run;
model.result('pg6').label('Radial Velocity');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').setIndex('expr', 'mbd.prj1.u_t', 0);
model.result('pg6').feature('glob1').setIndex('unit', 'm/s', 0);
model.result('pg6').feature('glob1').setIndex('descr', 'Radial velocity', 0);
model.result('pg6').feature('glob1').set('linewidth', 2);
model.result('pg6').feature('glob1').set('legend', false);
model.result('pg6').run;
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'Radial velocity');
model.result('pg6').run;
model.result.create('pg7', 'PolarGroup');
model.result('pg7').run;
model.result('pg7').label('Radial Kinetic Energy');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').setIndex('expr', '0.5*m*mbd.prj1.u_t^2', 0);
model.result('pg7').feature('glob1').setIndex('unit', '', 0);
model.result('pg7').feature('glob1').setIndex('descr', 'Radial kinetic energy', 0);
model.result('pg7').feature('glob1').set('linewidth', 2);
model.result('pg7').feature('glob1').set('legend', false);
model.result('pg7').run;
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', 'Radial kinetic energy');
model.result('pg7').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').set('maxframes', 100);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 51, 0);
model.result('pg1').run;

model.title('Dynamic Behavior of a Spring Loaded Rotating Slider');

model.description('This example illustrates the modeling of slider motion due to base rotation. The prismatic joint, which is used to connect two components, is spring loaded and also includes damping effects. The motion of slider is compared against the analytical solution, which is also computed simultaneously using an ODE.');

model.label('spring_loaded_slider.mph');

model.modelNode.label('Components');

out = model;
