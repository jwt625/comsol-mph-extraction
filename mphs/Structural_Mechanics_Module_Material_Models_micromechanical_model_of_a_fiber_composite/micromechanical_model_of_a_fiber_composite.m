function out = model
%
% micromechanical_model_of_a_fiber_composite.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Material_Models');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('para', '0', 'Nondimensional parameter');
model.param.set('l', '0.1[m]', 'Unit cell length');
model.param.set('V', 'l^3', 'Unit cell volume');
model.param.set('v_f', '0.1', 'Fiber volume fraction');
model.param.set('v_m', '1-v_f', 'Resin volume of fraction');
model.param.set('V_f', 'v_f*V', 'Fiber volume');
model.param.set('r_f', 'sqrt(V_f/(pi*l))', 'Fiber radius');
model.param.set('E1_f', '230[GPa]', 'Fiber Young''s modulus, 11 direction');
model.param.set('E2_f', '15[GPa]', 'Fiber Young''s modulus, 22 direction');
model.param.set('G12_f', '15[GPa]', 'Fiber shear modulus, 12 direction');
model.param.set('G23_f', '7[GPa]', 'Fiber shear modulus, 23 direction');
model.param.set('nu12_f', '0.2*para', 'Fiber Poisson''s ratio, 12 direction');
model.param.set('nu23_f', '0.07*para', 'Fiber Poisson''s ratio, 23 direction');
model.param.set('E_m', '4[GPa]', 'Resin Young''s modulus');
model.param.set('nu_m', '0.35*para', 'Resin Poisson''s ratio');
model.param.set('G_m', 'E_m/(2*(1+nu_m))', 'Resin shear modulus');
model.param.set('rho_f', '1800[kg/m^3]', 'Fiber density');
model.param.set('rho_m', '1100[kg/m^3]', 'Resin density');
model.param.set('alpha1_f', '-0.6e-6[1/K]', 'Fiber thermal expansion coefficient, longitudinal direction');
model.param.set('alpha2_f', '8.5e-6[1/K]', 'Fiber thermal expansion coefficient, transverse direction');
model.param.set('alpha_m', '55e-6[1/K]', 'Resin thermal expansion coefficient');

model.geom.load({'part1'}, 'COMSOL_Multiphysics/Unit_Cells_and_RVEs/Fiber_Composites/unidirectional_fiber_square_packing.mph', {'part1'});
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'df', '2*r_f');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'wm', 'l');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'dm', 'l');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'hm', 'l');
model.geom('geom1').run('fin');

model.view('view1').set('showgrid', false);
model.view('view1').set('transparency', false);

model.physics('solid').feature('lemm1').set('SolidModel', 'Orthotropic');
model.physics('solid').feature('lemm1').create('te1', 'ThermalExpansion', 3);
model.physics('solid').feature('lemm1').feature('te1').set('minput_temperature_src', 'userdef');
model.physics('solid').feature('lemm1').feature('te1').set('minput_temperature', '21[degC]');
model.physics('solid').create('cp1', 'CellPeriodicity', 3);
model.physics('solid').feature('cp1').label('Cell Periodicity for Elastic Properties');
model.physics('solid').feature('cp1').set('BoundaryExpansion', 'PrescribedStrain');
model.physics('solid').feature('cp1').set('EffectivePropertiese', 'ElasticityMatrixStandard');
model.physics('solid').feature('cp1').create('bp1', 'BoundaryPair', 2);
model.physics('solid').feature('cp1').feature('bp1').selection.set([1 5 11 12]);
model.physics('solid').feature('cp1').feature.duplicate('bp2', 'bp1');
model.physics('solid').feature('cp1').feature('bp2').selection.set([2 10]);
model.physics('solid').feature('cp1').feature.duplicate('bp3', 'bp2');
model.physics('solid').feature('cp1').feature('bp3').selection.set([3 4]);
model.physics('solid').feature('cp1').set('parametricStudy', 'yes');
model.physics('solid').feature('cp1').setIndex('parameterName', 'v_f', 0, 0);
model.physics('solid').feature('cp1').setIndex('parameterRange', 'range(0.1,0.1,0.7)', 0, 0);
model.physics('solid').feature('cp1').runCommand('createLoadGroupsandStudy');
model.physics('solid').feature.duplicate('cp2', 'cp1');
model.physics('solid').feature('cp2').label('Cell Periodicity for Thermal Properties');
model.physics('solid').feature('cp2').set('BoundaryExpansion', 'FreeExpansion');
model.physics('solid').feature('cp2').set('EffectiveProperties', 'ThermalExpansion');

model.material.create('matlnk1', 'Link', 'comp1');
model.material('matlnk1').label('Material Link 1: Epoxy Resin');
model.material('matlnk1').selection.named('geom1_pi1_dif1_dom');
model.material.create('mat1', 'Common', '');
model.material('matlnk1').set('link', 'mat1');
model.material('mat1').label('Material 1: Epoxy Resin');
model.material('mat1').propertyGroup.create('Orthotropic', 'Orthotropic');
model.material('mat1').propertyGroup('Orthotropic').set('Evector', {'E_m' 'E_m' 'E_m'});
model.material('mat1').propertyGroup('Orthotropic').set('nuvector', {'nu_m' 'nu_m' 'nu_m'});
model.material('mat1').propertyGroup('Orthotropic').set('Gvector', {'G_m' 'G_m' 'G_m'});
model.material('mat1').propertyGroup('def').set('density', {'rho_m'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_m'});
model.material.create('matlnk2', 'Link', 'comp1');
model.material('matlnk2').selection.set([1]);
model.material('matlnk2').label('Material Link 2: Carbon Fiber');
model.material('matlnk2').selection.named('geom1_pi1_cyl1_dom');
model.material.create('mat2', 'Common', '');
model.material('matlnk2').set('link', 'mat2');
model.material('mat2').label('Material 2: Carbon Fiber');
model.material('mat2').propertyGroup.create('Orthotropic', 'Orthotropic');
model.material('mat2').propertyGroup('Orthotropic').set('Evector', {'E1_f' 'E2_f' 'E2_f'});
model.material('mat2').propertyGroup('Orthotropic').set('nuvector', {'nu12_f' 'nu23_f' 'nu12_f'});
model.material('mat2').propertyGroup('Orthotropic').set('Gvector', {'G12_f' 'G23_f' 'G12_f'});
model.material('mat2').propertyGroup('def').set('density', {'rho_f'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha1_f' 'alpha2_f' 'alpha2_f'});
model.material.create('effmat1', 'Effective', '');
model.material('effmat1').feature('const1').set('link', 'mat1');
model.material('effmat1').feature.create('const2', 'ConstituentLink', '');
model.material('effmat1').feature('const2').set('link', 'mat2');
model.material('effmat1').feature('const2').set('Vf', 'v_f');
model.material('effmat1').label('Effective Material: Voigt-Reuss Model (ROM)');
model.material('effmat1').propertyGroup('def').setMixingRule('thermalexpansioncoefficient', 'voigt_reuss_model');
model.material('effmat1').propertyGroup('Orthotropic').setMixingRule('Evector', 'voigt_reuss_model');
model.material('effmat1').propertyGroup('Orthotropic').setMixingRule('nuvector', 'voigt_reuss_model');
model.material('effmat1').propertyGroup('Orthotropic').setMixingRule('Gvector', 'voigt_reuss_model');
model.material.duplicate('effmat2', 'effmat1');
model.material('effmat2').label('Effective Material: Modified Voigt-Reuss Model (ROM)');
model.material('effmat2').propertyGroup('Orthotropic').setMixingRule('Evector', 'modified_voigt_reuss_model');
model.material('effmat2').propertyGroup('Orthotropic').setMixingRule('nuvector', 'modified_voigt_reuss_model');
model.material('effmat2').propertyGroup('Orthotropic').setMixingRule('Gvector', 'modified_voigt_reuss_model');
model.material.duplicate('effmat3', 'effmat2');
model.material('effmat3').label('Effective Material: Chamis Model (ROM)');
model.material('effmat3').propertyGroup('def').setMixingRule('thermalexpansioncoefficient', 'chamis_model');
model.material('effmat3').propertyGroup('Orthotropic').setMixingRule('Evector', 'chamis_model');
model.material('effmat3').propertyGroup('Orthotropic').setMixingRule('nuvector', 'chamis_model');
model.material('effmat3').propertyGroup('Orthotropic').setMixingRule('Gvector', 'chamis_model');
model.material.duplicate('effmat4', 'effmat3');
model.material('effmat4').label('Effective Material: Halpin-Tsai Model (ROM)');
model.material('effmat4').propertyGroup('Orthotropic').setMixingRule('Evector', 'halpin_tsai_model');
model.material('effmat4').set('zetaHT_Evector', {'inf' '0' '0'});
model.material('effmat4').propertyGroup('Orthotropic').setMixingRule('nuvector', 'halpin_tsai_model');
model.material('effmat4').propertyGroup('Orthotropic').setMixingRule('Gvector', 'halpin_tsai_model');
model.material('effmat4').set('zetaHT_Gvector', {'1' '1' '1'});
model.material.duplicate('effmat5', 'effmat4');
model.material('effmat5').label('Effective Material: Halpin-Tsai-Nielsen Model (ROM)');
model.material('effmat5').propertyGroup('Orthotropic').setMixingRule('Evector', 'halpin_tsai_nielsen_model');
model.material('effmat5').set('htnMaxPackingPar', '0.82');
model.material('effmat5').set('zetaHT_Evector', {'inf' '0' '0'});
model.material('effmat5').propertyGroup('Orthotropic').setMixingRule('nuvector', 'halpin_tsai_nielsen_model');
model.material('effmat5').propertyGroup('Orthotropic').setMixingRule('Gvector', 'halpin_tsai_nielsen_model');
model.material('effmat5').set('htnMaxPackingPar', '0.82');
model.material('effmat5').set('zetaHT_Gvector', {'1' '1' '1'});
model.material('effmat5').propertyGroup('Orthotropic').setMixingRule('eta_Evector', 'volume_average');
model.material.duplicate('effmat6', 'effmat5');
model.material('effmat6').label('Effective Material: Hashin-Rosen Model (ROM)');
model.material('effmat6').propertyGroup('Orthotropic').setMixingRule('Evector', 'hashin_rosen_model');
model.material('effmat6').propertyGroup('Orthotropic').setMixingRule('nuvector', 'hashin_rosen_model');
model.material('effmat6').propertyGroup('Orthotropic').setMixingRule('Gvector', 'hashin_rosen_model');
model.material('effmat6').propertyGroup('Orthotropic').setMixingRule('eta_Evector', 'volume_average');

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.set([1 5]);
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').run('swe1');

model.study('solidcp1std').label('Cell Periodicity Study for Elastic Properties');
model.study('solidcp1std').feature('solidcp1stat').set('useadvanceddisable', true);
model.study('solidcp1std').feature('solidcp1stat').set('disabledphysics', {'solid/lemm1/te1' 'solid/cp2'});

model.sol('solidcp1sol').study('solidcp1std');
model.sol('solidcp1sol').feature.remove('s1');
model.sol('solidcp1sol').feature.remove('v1');
model.sol('solidcp1sol').feature.remove('st1');
model.sol('solidcp1sol').create('st1', 'StudyStep');
model.sol('solidcp1sol').feature('st1').set('study', 'solidcp1std');
model.sol('solidcp1sol').feature('st1').set('studystep', 'solidcp1stat');
model.sol('solidcp1sol').create('v1', 'Variables');
model.sol('solidcp1sol').feature('v1').set('control', 'solidcp1stat');
model.sol('solidcp1sol').create('s1', 'Stationary');
model.sol('solidcp1sol').feature('s1').create('p1', 'Parametric');
model.sol('solidcp1sol').feature('s1').feature.remove('pDef');
model.sol('solidcp1sol').feature('s1').feature('p1').set('control', 'solidcp1stat');
model.sol('solidcp1sol').feature('s1').set('control', 'solidcp1stat');
model.sol('solidcp1sol').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('solidcp1sol').feature('s1').create('fc1', 'FullyCoupled');
model.sol('solidcp1sol').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('solidcp1sol').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('solidcp1sol').feature('s1').create('d1', 'Direct');
model.sol('solidcp1sol').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('solidcp1sol').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('solidcp1sol').feature('s1').create('i1', 'Iterative');
model.sol('solidcp1sol').feature('s1').feature('i1').set('linsolver', 'fgmres');
model.sol('solidcp1sol').feature('s1').feature('i1').set('rhob', 400);
model.sol('solidcp1sol').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('solidcp1sol').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('solidcp1sol').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('solidcp1sol').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('solidcp1sol').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('solidcp1sol').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('solidcp1sol').feature('s1').feature.remove('fcDef');
model.sol('solidcp1sol').attach('solidcp1std');

model.batch('solidcp1p').run('compute');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 6, 0);
model.result('pg1').setIndex('looplevel', 7, 1);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('colortable', 'Rainbow');
model.result('pg1').feature('vol1').set('colortabletrans', 'none');
model.result('pg1').feature('vol1').set('colorscalemode', 'linear');
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').set('colortable', 'Prism');
model.result('pg1').feature('vol1').create('def', 'Deform');
model.result('pg1').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.evaluationGroup.create('solidcp1stdEg', 'EvaluationGroup');
model.result.evaluationGroup('solidcp1stdEg').set('defaultPlotID', 'homogenizedMaterialTablecp1');
model.result.evaluationGroup('solidcp1stdEg').set('data', 'dset2');
model.result.evaluationGroup('solidcp1stdEg').set('includeparameters', 'off');
model.result.evaluationGroup('solidcp1stdEg').setIndex('looplevelinput', 'last', 0);
model.result.evaluationGroup('solidcp1stdEg').setIndex('looplevelinput', 'last', 1);
model.result.evaluationGroup('solidcp1stdEg').label('Material Properties (Cell Periodicity Study for Elastic Properties)');
model.result.evaluationGroup('solidcp1stdEg').create('gmevcp1', 'EvalGlobalMatrix');
model.result.evaluationGroup('solidcp1stdEg').feature('gmevcp1').set('expr', 'root.comp1.solid.cp1.D');
model.result.evaluationGroup('solidcp1stdEg').feature('gmevcp1').set('descr', 'Elasticity matrix');
model.result.evaluationGroup('solidcp1stdEg').run;
model.result('pg1').run;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);

model.geom('geom1').run;

model.study('std1').label('Cell Periodicity Study for Thermal Properties');
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').set('sweeptype', 'filled');
model.study('std1').feature('param').setIndex('pname', 'para', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'para', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('plistarr', '0 1', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'l', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'm', 1);
model.study('std1').feature('param').setIndex('pname', 'l', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'm', 1);
model.study('std1').feature('param').setIndex('pname', 'v_f', 1);
model.study('std1').feature('param').setIndex('plistarr', 'range(0.1,0.1,0.7)', 1);
model.study('std1').feature('param').setIndex('punit', '', 1);
model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledphysics', {'solid/cp1'});

model.sol.create('sol8');
model.sol('sol8').study('std1');
model.sol('sol8').create('st1', 'StudyStep');
model.sol('sol8').feature('st1').set('study', 'std1');
model.sol('sol8').feature('st1').set('studystep', 'stat');
model.sol('sol8').create('v1', 'Variables');
model.sol('sol8').feature('v1').set('control', 'stat');
model.sol('sol8').create('s1', 'Stationary');
model.sol('sol8').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol8').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol8').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol8').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol8').feature('s1').create('d1', 'Direct');
model.sol('sol8').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol8').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol8').feature('s1').create('i1', 'Iterative');
model.sol('sol8').feature('s1').feature('i1').set('linsolver', 'fgmres');
model.sol('sol8').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol8').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol8').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol8').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol8').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol8').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol8').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol8').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol8').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol8').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol8').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol8').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol8').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol8').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol8').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol8').feature('s1').feature.remove('fcDef');
model.sol('sol8').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol8');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'para' 'v_f'});
model.batch('p1').set('plistarr', {'0 1' 'range(0.1,0.1,0.7)'});
model.batch('p1').set('sweeptype', 'filled');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol9');
model.sol('sol9').study('std1');
model.sol('sol9').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol9');
model.batch('p1').run('compute');

model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset4');
model.result('pg2').setIndex('looplevel', 7, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').set('defaultPlotID', 'stress');
model.result('pg2').label('Stress (solid) 1');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').create('vol1', 'Volume');
model.result('pg2').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg2').feature('vol1').set('threshold', 'manual');
model.result('pg2').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg2').feature('vol1').set('colortable', 'Rainbow');
model.result('pg2').feature('vol1').set('colortabletrans', 'none');
model.result('pg2').feature('vol1').set('colorscalemode', 'linear');
model.result('pg2').feature('vol1').set('resolution', 'custom');
model.result('pg2').feature('vol1').set('refine', 2);
model.result('pg2').feature('vol1').set('colortable', 'Prism');
model.result('pg2').feature('vol1').create('def', 'Deform');
model.result('pg2').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg2').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.evaluationGroup.create('std1Eg', 'EvaluationGroup');
model.result.evaluationGroup('std1Eg').set('defaultPlotID', 'homogenizedMaterialTablecp2');
model.result.evaluationGroup('std1Eg').set('data', 'dset4');
model.result.evaluationGroup('std1Eg').set('includeparameters', 'off');
model.result.evaluationGroup('std1Eg').setIndex('looplevelinput', 'last', 0);
model.result.evaluationGroup('std1Eg').setIndex('looplevelinput', 'last', 1);
model.result.evaluationGroup('std1Eg').label('Material Properties (Cell Periodicity Study for Thermal Properties)');
model.result.evaluationGroup('std1Eg').create('gmevcp2', 'EvalGlobalMatrix');
model.result.evaluationGroup('std1Eg').feature('gmevcp2').set('expr', 'root.comp1.solid.cp2.alpha');
model.result.evaluationGroup('std1Eg').feature('gmevcp2').set('descr', 'Coefficient of thermal expansion');
model.result.evaluationGroup('std1Eg').run;
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Longitudinal Young''s Modulus vs. Fiber Volume Fraction');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevelinput', 'first', 0);
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Longitudinal Young''s Modulus vs. Fiber Volume Fraction');
model.result('pg3').set('xlabelactive', true);
model.result('pg3').set('xlabel', 'v<sub>f</sub>');
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'E<sub>1</sub>/E<sub>m</sub>');
model.result('pg3').set('legendpos', 'upperleft');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').setIndex('expr', 'solid.cp1.D11/E_m', 0);
model.result('pg3').feature('glob1').setIndex('unit', 1, 0);
model.result('pg3').feature('glob1').setIndex('descr', 'Nondimensional longitudinal Young''s modulus', 0);
model.result('pg3').feature('glob1').setIndex('expr', 'effmat1.Orthotropic.Evector1/E_m', 1);
model.result('pg3').feature('glob1').setIndex('unit', 1, 1);
model.result('pg3').feature('glob1').setIndex('descr', 'Nondimensional longitudinal Young''s modulus', 1);
model.result('pg3').feature('glob1').setIndex('expr', 'effmat2.Orthotropic.Evector1/E_m', 2);
model.result('pg3').feature('glob1').setIndex('unit', 1, 2);
model.result('pg3').feature('glob1').setIndex('descr', 'Nondimensional longitudinal Young''s modulus', 2);
model.result('pg3').feature('glob1').setIndex('expr', 'effmat3.Orthotropic.Evector1/E_m', 3);
model.result('pg3').feature('glob1').setIndex('unit', 1, 3);
model.result('pg3').feature('glob1').setIndex('descr', 'Nondimensional longitudinal Young''s modulus', 3);
model.result('pg3').feature('glob1').setIndex('expr', 'effmat4.Orthotropic.Evector1/E_m', 4);
model.result('pg3').feature('glob1').setIndex('unit', 1, 4);
model.result('pg3').feature('glob1').setIndex('descr', 'Nondimensional longitudinal Young''s modulus', 4);
model.result('pg3').feature('glob1').setIndex('expr', 'effmat5.Orthotropic.Evector1/E_m', 5);
model.result('pg3').feature('glob1').setIndex('unit', 1, 5);
model.result('pg3').feature('glob1').setIndex('descr', 'Nondimensional longitudinal Young''s modulus', 5);
model.result('pg3').feature('glob1').setIndex('expr', 'effmat6.Orthotropic.Evector1/E_m', 6);
model.result('pg3').feature('glob1').setIndex('unit', 1, 6);
model.result('pg3').feature('glob1').setIndex('descr', 'Nondimensional longitudinal Young''s modulus', 6);
model.result('pg3').feature('glob1').set('xdatasolnumtype', 'level2');
model.result('pg3').feature('glob1').set('linemarker', 'cycle');
model.result('pg3').feature('glob1').set('markerpos', 'interp');
model.result('pg3').feature('glob1').set('legendmethod', 'manual');
model.result('pg3').feature('glob1').setIndex('legends', 'Cell Periodicity', 0);
model.result('pg3').feature('glob1').setIndex('legends', 'Voigt-Reuss Model (ROM)', 1);
model.result('pg3').feature('glob1').setIndex('legends', 'Modified Voigt-Reuss Model (ROM)', 2);
model.result('pg3').feature('glob1').setIndex('legends', 'Chamis Model (ROM)', 3);
model.result('pg3').feature('glob1').setIndex('legends', 'Halpin-Tsai Model (ROM)', 4);
model.result('pg3').feature('glob1').setIndex('legends', 'Halpin-Tsai-Nielsen Model (ROM)', 5);
model.result('pg3').feature('glob1').setIndex('legends', 'Hashin-Rosen Model (ROM)', 6);
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Transverse Young''s Modulus vs. Fiber Volume Fraction');
model.result('pg4').set('title', 'Transverse Young''s Modulus vs. Fiber Volume Fraction');
model.result('pg4').set('ylabel', 'E<sub>2</sub>/E<sub>m</sub>');
model.result('pg4').run;
model.result('pg4').feature('glob1').setIndex('expr', 'solid.cp1.D22/E_m', 0);
model.result('pg4').feature('glob1').setIndex('unit', 1, 0);
model.result('pg4').feature('glob1').setIndex('descr', 'Nondimensional transverse Young''s modulus', 0);
model.result('pg4').feature('glob1').setIndex('expr', 'effmat1.Orthotropic.Evector2/E_m', 1);
model.result('pg4').feature('glob1').setIndex('unit', 1, 1);
model.result('pg4').feature('glob1').setIndex('descr', 'Nondimensional transverse Young''s modulus', 1);
model.result('pg4').feature('glob1').setIndex('expr', 'effmat2.Orthotropic.Evector2/E_m', 2);
model.result('pg4').feature('glob1').setIndex('unit', 1, 2);
model.result('pg4').feature('glob1').setIndex('descr', 'Nondimensional transverse Young''s modulus', 2);
model.result('pg4').feature('glob1').setIndex('expr', 'effmat3.Orthotropic.Evector2/E_m', 3);
model.result('pg4').feature('glob1').setIndex('unit', 1, 3);
model.result('pg4').feature('glob1').setIndex('descr', 'Nondimensional transverse Young''s modulus', 3);
model.result('pg4').feature('glob1').setIndex('expr', 'effmat4.Orthotropic.Evector2/E_m', 4);
model.result('pg4').feature('glob1').setIndex('unit', 1, 4);
model.result('pg4').feature('glob1').setIndex('descr', 'Nondimensional transverse Young''s modulus', 4);
model.result('pg4').feature('glob1').setIndex('expr', 'effmat5.Orthotropic.Evector2/E_m', 5);
model.result('pg4').feature('glob1').setIndex('unit', 1, 5);
model.result('pg4').feature('glob1').setIndex('descr', 'Nondimensional transverse Young''s modulus', 5);
model.result('pg4').feature('glob1').setIndex('expr', 'effmat6.Orthotropic.Evector2/E_m', 6);
model.result('pg4').feature('glob1').setIndex('unit', 1, 6);
model.result('pg4').feature('glob1').setIndex('descr', 'Nondimensional transverse Young''s modulus', 6);
model.result('pg4').run;
model.result('pg3').run;
model.result.duplicate('pg5', 'pg3');
model.result('pg5').run;
model.result('pg5').label('In-plane Shear Modulus vs. Fiber Volume Fraction');
model.result('pg5').set('title', 'In-plane Shear Modulus vs. Fiber Volume Fraction');
model.result('pg5').set('ylabel', 'G<sub>12</sub>/G<sub>m</sub>');
model.result('pg5').run;
model.result('pg5').feature('glob1').setIndex('expr', 'solid.cp1.D44/G_m', 0);
model.result('pg5').feature('glob1').setIndex('unit', 1, 0);
model.result('pg5').feature('glob1').setIndex('descr', 'Nondimensional in-plane shear modulus', 0);
model.result('pg5').feature('glob1').setIndex('expr', 'effmat1.Orthotropic.Gvector1/G_m', 1);
model.result('pg5').feature('glob1').setIndex('unit', 1, 1);
model.result('pg5').feature('glob1').setIndex('descr', 'Nondimensional in-plane shear modulus', 1);
model.result('pg5').feature('glob1').setIndex('expr', 'effmat2.Orthotropic.Gvector1/G_m', 2);
model.result('pg5').feature('glob1').setIndex('unit', 1, 2);
model.result('pg5').feature('glob1').setIndex('descr', 'Nondimensional in-plane shear modulus', 2);
model.result('pg5').feature('glob1').setIndex('expr', 'effmat3.Orthotropic.Gvector1/G_m', 3);
model.result('pg5').feature('glob1').setIndex('unit', 1, 3);
model.result('pg5').feature('glob1').setIndex('descr', 'Nondimensional in-plane shear modulus', 3);
model.result('pg5').feature('glob1').setIndex('expr', 'effmat4.Orthotropic.Gvector1/G_m', 4);
model.result('pg5').feature('glob1').setIndex('unit', 1, 4);
model.result('pg5').feature('glob1').setIndex('descr', 'Nondimensional in-plane shear modulus', 4);
model.result('pg5').feature('glob1').setIndex('expr', 'effmat5.Orthotropic.Gvector1/G_m', 5);
model.result('pg5').feature('glob1').setIndex('unit', 1, 5);
model.result('pg5').feature('glob1').setIndex('descr', 'Nondimensional in-plane shear modulus', 5);
model.result('pg5').feature('glob1').setIndex('expr', 'effmat6.Orthotropic.Gvector1/G_m', 6);
model.result('pg5').feature('glob1').setIndex('unit', 1, 6);
model.result('pg5').feature('glob1').setIndex('descr', 'Nondimensional in-plane shear modulus', 6);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').set('data', 'dset4');
model.result('pg6').setIndex('looplevelinput', 'manual', 1);
model.result('pg6').setIndex('looplevel', [1], 1);
model.result('pg6').label('Longitudinal Coefficient of Thermal Expansion vs. Fiber Volume Fraction');
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'Longitudinal Coefficient of Thermal Expansion vs. Fiber Volume Fraction');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'v<sub>f</sub>');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', '\alpha<sub>1</sub>/\alpha<sub>m</sub>');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').set('expr', {'solid.cp2.alphaXX'});
model.result('pg6').feature('glob1').set('descr', {'Coefficient of thermal expansion, XX-component'});
model.result('pg6').feature('glob1').set('unit', {'1/K'});
model.result('pg6').feature('glob1').setIndex('expr', 'solid.cp2.alphaXX/alpha_m', 0);
model.result('pg6').feature('glob1').setIndex('unit', 1, 0);
model.result('pg6').feature('glob1').setIndex('descr', 'Nondimensional longitudinal coefficient of thermal expansion', 0);
model.result('pg6').feature('glob1').setIndex('expr', 'effmat1.def.alpha11/alpha_m', 1);
model.result('pg6').feature('glob1').setIndex('unit', 1, 1);
model.result('pg6').feature('glob1').setIndex('descr', 'Nondimensional longitudinal coefficient of thermal expansion', 1);
model.result('pg6').feature('glob1').setIndex('expr', 'effmat3.def.alpha11/alpha_m', 2);
model.result('pg6').feature('glob1').setIndex('unit', 1, 2);
model.result('pg6').feature('glob1').setIndex('descr', 'Nondimensional longitudinal coefficient of thermal expansion', 2);
model.result('pg6').feature('glob1').set('linemarker', 'cycle');
model.result('pg6').feature('glob1').set('markerpos', 'interp');
model.result('pg6').feature('glob1').set('legendmethod', 'manual');
model.result('pg6').feature('glob1').setIndex('legends', 'Cell Periodicity', 0);
model.result('pg6').feature('glob1').setIndex('legends', 'Voigt-Reuss Model (ROM)', 1);
model.result('pg6').feature('glob1').setIndex('legends', 'Chamis Model (ROM)', 2);
model.result('pg6').run;
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Transverse Coefficient of Thermal Expansion vs. Fiber Volume Fraction');
model.result('pg7').set('title', 'Transverse Coefficient of Thermal Expansion vs. Fiber Volume Fraction');
model.result('pg7').set('ylabel', '\alpha<sub>2</sub>/\alpha<sub>m</sub>');
model.result('pg7').run;
model.result('pg7').feature('glob1').setIndex('expr', 'solid.cp2.alphaYY/alpha_m', 0);
model.result('pg7').feature('glob1').setIndex('unit', 1, 0);
model.result('pg7').feature('glob1').setIndex('descr', 'Nondimensional tranvserse coefficient of thermal expansion', 0);
model.result('pg7').feature('glob1').setIndex('expr', 'effmat1.def.alpha22/alpha_m', 1);
model.result('pg7').feature('glob1').setIndex('unit', 1, 1);
model.result('pg7').feature('glob1').setIndex('descr', 'Nondimensional transverse coefficient of thermal expansion', 1);
model.result('pg7').feature('glob1').setIndex('expr', 'effmat3.def.alpha22/alpha_m', 2);
model.result('pg7').feature('glob1').setIndex('unit', 1, 2);
model.result('pg7').feature('glob1').setIndex('descr', 'Nondimensional longitudinal coefficient of thermal expansion', 2);
model.result('pg7').run;
model.result('pg6').run;
model.result.duplicate('pg8', 'pg6');
model.result('pg8').run;
model.result('pg8').setIndex('looplevel', [2], 1);
model.result('pg8').label('Longitudinal Coefficient of Thermal Expansion vs. Fiber Volume Fraction with Nonzero Poisson''s Ratio');
model.result('pg8').set('title', 'Longitudinal Coefficient of Thermal Expansion vs. Fiber Volume Fraction with Nonzero Poisson''s Ratio');
model.result('pg8').run;
model.result('pg7').run;
model.result.duplicate('pg9', 'pg7');
model.result('pg9').run;
model.result('pg9').setIndex('looplevel', [2], 1);
model.result('pg9').label('Transverse Coefficient of Thermal Expansion vs. Fiber Volume Fraction with Nonzero Poisson''s Ratio');
model.result('pg9').set('title', 'Transverse Coefficient of Thermal Expansion vs. Fiber Volume Fraction with Nonzero Poisson''s Ratio');
model.result('pg9').run;
model.result('pg3').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').placeAfter('plotgroup', 'pg2');
model.nodeGroup('grp1').add('plotgroup', 'pg3');
model.nodeGroup('grp1').add('plotgroup', 'pg4');
model.nodeGroup('grp1').add('plotgroup', 'pg5');
model.nodeGroup('grp1').label('Elastic Properties');

model.result('pg6').run;

model.nodeGroup.create('grp2', 'Results');
model.nodeGroup('grp2').set('type', 'plotgroup');
model.nodeGroup('grp2').placeAfter('plotgroup', 'pg2');
model.nodeGroup.move('grp2', 2);
model.nodeGroup('grp2').add('plotgroup', 'pg6');
model.nodeGroup('grp2').add('plotgroup', 'pg7');
model.nodeGroup('grp2').label('Thermal Expansion Properties, Zero Poisson''s Ratio');

model.result('pg8').run;

model.nodeGroup.create('grp3', 'Results');
model.nodeGroup('grp3').set('type', 'plotgroup');
model.nodeGroup('grp3').placeAfter('plotgroup', 'pg2');
model.nodeGroup.move('grp3', 3);
model.nodeGroup('grp3').add('plotgroup', 'pg8');
model.nodeGroup('grp3').add('plotgroup', 'pg9');
model.nodeGroup('grp3').label('Thermal Expansion Properties, Nonzero Poisson''s Ratio');

model.result('pg3').run;

model.title('Micromechanical Model of a Fiber Composite');

model.description('In this example, a simplified micromechanical model of a fiber composite''s unit cell is analyzed. The homogenized elastic and thermal properties of a composite material are computed based on the individual properties of fiber and matrix. A comparison is made against values obtained from the rule of mixture.');

model.mesh.clearMeshes;

model.sol('solidcp1sol').clearSolutionData;
model.sol('solidcp1solp').clearSolutionData;
model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;
model.sol('sol20').clearSolutionData;
model.sol('sol21').clearSolutionData;
model.sol('sol22').clearSolutionData;
model.sol('sol23').clearSolutionData;

model.label('micromechanical_model_of_a_fiber_composite.mph');

model.modelNode.label('Components');

out = model;
