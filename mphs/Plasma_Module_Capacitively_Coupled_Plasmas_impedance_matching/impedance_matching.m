function out = model
%
% impedance_matching.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Plasma_Module/Capacitively_Coupled_Plasmas');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 1);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ptp', 'ColdPlasmaTimePeriodic', 'geom1');
model.physics('ptp').model('comp1');

model.study.create('std1');
model.study('std1').create('tper', 'TimePeriodic');
model.study('std1').feature('tper').set('solnum', 'auto');
model.study('std1').feature('tper').set('notsolnum', 'auto');
model.study('std1').feature('tper').set('outputmap', {});
model.study('std1').feature('tper').set('ngenAUX', '1');
model.study('std1').feature('tper').set('ngen', '2');
model.study('std1').feature('tper').set('goalngenAUX', '1');
model.study('std1').feature('tper').set('ngenAUX', '1');
model.study('std1').feature('tper').set('ngen', '2');
model.study('std1').feature('tper').set('goalngenAUX', '1');
model.study('std1').feature('tper').setSolveFor('/physics/ptp', true);

model.param.set('L', '0.025[m]');
model.param.descr('L', 'Discharge gap');
model.param.set('de', '0.3[m]');
model.param.descr('de', 'Electrode diameter');
model.param.set('As', '0.25*pi*de^2');
model.param.descr('As', 'Electrode area');
model.param.set('P0', '10[W]');
model.param.descr('P0', 'Input power');
model.param.set('f0', '13.56E6[Hz]');
model.param.descr('f0', 'Frequency');
model.param.set('p0', '1[torr]');
model.param.descr('p0', 'Pressure');
model.param.set('T0', '300[K]');
model.param.descr('T0', 'Temperature');
model.param.set('Rp', '42.696[ohm]');
model.param.descr('Rp', 'Plasma impedance, real part');
model.param.set('Xp', '-156.62[ohm]');
model.param.descr('Xp', 'Plasma impedance, imaginary part');
model.param.set('Rs', '50[ohm]');
model.param.descr('Rs', 'Generator impedance');
model.param.set('fmatch', '13.56E6[Hz]');
model.param.descr('fmatch', 'Frequency at perfect match');
model.param.set('Xmd', 'sqrt(Rp*Rs-Rp^2)-Xp');
model.param.descr('Xmd', 'Match help variable');
model.param.set('Bm', '((1/(Rp*Rs))-(1/Rs^2))^0.5');
model.param.descr('Bm', 'Match help variable');
model.param.set('Lm', 'Xmd/(2*pi*fmatch)');
model.param.descr('Lm', 'Inductance');
model.param.set('Cp', 'Bm/(2*pi*fmatch)');
model.param.descr('Cp', 'Capacitance');

model.geom('geom1').create('i1', 'Interval');
model.geom('geom1').feature('i1').setIndex('coord', 'L', 1);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.physics('ptp').prop('CrossSectionArea').set('A', 'As');
model.physics('ptp').prop('ExtraDimensionSettings').set('Period_xd', '1/f0');
model.physics('ptp').prop('ExtraDimensionSettings').set('Nelemptp', 30);
model.physics('ptp').prop('ElectronProperties').set('ReducedProps', true);
model.physics('ptp').create('xsec1', 'CrossSectionImport', -1);
model.physics('ptp').feature('xsec1').set('Filepath', 'He_xsecs.txt');
model.physics('ptp').feature('xsec1').runCommand('importData');
model.physics('ptp').feature('He').set('FromMassConstraint', true);
model.physics('ptp').feature('He').set('PresetSpeciesData', 'He');
model.physics('ptp').feature('Hes').set('PresetSpeciesData', 'He');
model.physics('ptp').feature('He_1p').set('InitIon', true);
model.physics('ptp').feature('He_1p').set('PresetSpeciesData', 'He');
model.physics('ptp').feature('He_1p').set('MobilityDiffusivitySpecification', 'SpecifyMobilityComputeDiffusivity');
model.physics('ptp').feature('He_1p').set('IonTemperatureSpecification', 'LocalFieldApproximation');
model.physics('ptp').feature('He_1p').set('MobilitySpecification', 'HeIoninHe');
model.physics('ptp').feature('pes1').set('T', 'T0');
model.physics('ptp').feature('pes1').set('pA', 'p0');
model.physics('ptp').create('sr1', 'SurfaceReaction', 0);
model.physics('ptp').feature('sr1').selection.all;
model.physics('ptp').feature('sr1').set('formula', 'He+=>He');
model.physics('ptp').feature('sr1').set('gammaf', 0);
model.physics('ptp').feature('sr1').set('gammai', 0.1);
model.physics('ptp').feature('sr1').set('ebari', 5.8);
model.physics('ptp').feature.duplicate('sr2', 'sr1');
model.physics('ptp').feature('sr2').set('formula', 'Hes=>He');
model.physics('ptp').feature('sr2').set('gammaf', 1);
model.physics('ptp').create('wall1', 'WallDriftDiffusion', 0);
model.physics('ptp').feature('wall1').selection.all;
model.physics('ptp').create('gnd1', 'Ground', 0);
model.physics('ptp').feature('gnd1').selection.set([2]);
model.physics('ptp').create('mct1', 'MetalContact', 0);
model.physics('ptp').feature('mct1').selection.set([1]);
model.physics('ptp').feature('mct1').set('TerminalType', 'Circuit');
model.physics('ptp').feature('mct1').set('CircuitType', 'LNetwork');
model.physics('ptp').feature('mct1').set('SourceType', 'PowerSource');
model.physics('ptp').feature('mct1').set('Ps', 'P0');
model.physics('ptp').feature('mct1').set('Rs', 'Rs');
model.physics('ptp').feature('mct1').set('Cp', 'Cp');
model.physics('ptp').feature('mct1').set('Lm', 'Lm');
model.physics('ptp').feature('mct1').set('fpc', 'f0');

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('edg1').feature('dis1').set('elemcount', 125);
model.mesh('mesh1').feature('edg1').feature('dis1').set('elemratio', 10);
model.mesh('mesh1').feature('edg1').feature('dis1').set('symmetric', true);
model.mesh('mesh1').run;

model.study('std1').label('Power Sweep');
model.study('std1').setGenPlots(false);
model.study('std1').setGenConv(false);
model.study('std1').feature('tper').set('useparam', true);
model.study('std1').feature('tper').setIndex('pname', 'L', 0);
model.study('std1').feature('tper').setIndex('plistarr', '', 0);
model.study('std1').feature('tper').setIndex('punit', 'm', 0);
model.study('std1').feature('tper').setIndex('pname', 'L', 0);
model.study('std1').feature('tper').setIndex('plistarr', '', 0);
model.study('std1').feature('tper').setIndex('punit', 'm', 0);
model.study('std1').feature('tper').setIndex('pname', 'P0', 0);
model.study('std1').feature('tper').setIndex('plistarr', 'range(1,0.5918367346938775,30)', 0);
model.study('std1').feature('tper').setIndex('punit', 'W', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'tper');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_Ne_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_V_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_Hes_W_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Vcpdep_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Vfcdep_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_En_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Vcir_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_He_1p_W_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_Ne_per').set('scaleval', '35');
model.sol('sol1').feature('v1').feature('comp1_V_per').set('scaleval', '500');
model.sol('sol1').feature('v1').feature('comp1_ptp_Hes_W_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Vcpdep_per').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Vfcdep_per').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_En_per').set('scaleval', '35');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Vcir_per').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_ptp_He_1p_W_per').set('scaleval', '10');
model.sol('sol1').feature('v1').set('control', 'tper');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'tper');
model.sol('sol1').feature('s1').set('control', 'tper');
model.sol('sol1').feature('s1').feature('aDef').set('matherr', false);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol1').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ptp)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('nlinnormlevel', 0.01);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').set('errorchk', false);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (ptp)');
model.sol('sol1').feature('s1').feature('i1').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('domdofmax', 150000);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('ndom', 4);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('usecoarse', false);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('meshoverlap', false);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('errorchk', false);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol1').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').create('glob1', 'Global');
model.result('pg1').feature('glob1').set('markerpos', 'datapoints');
model.result('pg1').feature('glob1').set('linewidth', 'preference');
model.result('pg1').feature('glob1').set('expr', {'ptp.mct1.alphaP'});
model.result('pg1').feature('glob1').set('descr', {'Maximum power transfer coefficient'});
model.result('pg1').feature('glob1').set('unit', {'1'});
model.result('pg1').feature('glob1').set('expr', {'ptp.mct1.alphaP' 'ptp.mct1.etaP'});
model.result('pg1').feature('glob1').set('descr', {'Maximum power transfer coefficient' 'Efficiency'});
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'Maximum power transfer efficiency (1) and efficiency (1)');
model.result('pg1').set('titletype', 'none');
model.result('pg1').set('legendpos', 'lowerright');
model.result('pg1').run;
model.result('pg1').label('Power Sweep');

model.study.create('std2');
model.study('std2').create('tper', 'TimePeriodic');
model.study('std2').feature('tper').set('plotgroup', 'Default');
model.study('std2').feature('tper').set('solnum', 'auto');
model.study('std2').feature('tper').set('notsolnum', 'auto');
model.study('std2').feature('tper').set('outputmap', {});
model.study('std2').feature('tper').set('ngenAUX', '1');
model.study('std2').feature('tper').set('ngen', '2');
model.study('std2').feature('tper').set('goalngenAUX', '1');
model.study('std2').feature('tper').set('ngenAUX', '1');
model.study('std2').feature('tper').set('ngen', '2');
model.study('std2').feature('tper').set('goalngenAUX', '1');
model.study('std2').feature('tper').setSolveFor('/physics/ptp', true);
model.study('std2').feature('tper').set('useparam', true);
model.study('std2').feature('tper').setIndex('pname', 'L', 0);
model.study('std2').feature('tper').setIndex('plistarr', '', 0);
model.study('std2').feature('tper').setIndex('punit', 'm', 0);
model.study('std2').feature('tper').setIndex('pname', 'L', 0);
model.study('std2').feature('tper').setIndex('plistarr', '', 0);
model.study('std2').feature('tper').setIndex('punit', 'm', 0);
model.study('std2').feature('tper').setIndex('pname', 'f0', 0);
model.study('std2').feature('tper').setIndex('plistarr', 'range(11,0.1,16)', 0);
model.study('std2').feature('tper').setIndex('punit', 'MHz', 0);
model.study('std2').setGenPlots(false);
model.study('std2').setGenConv(false);
model.study('std2').label('Frequency Sweep');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'tper');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_Ne_per').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_V_per').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ptp_Hes_W_per').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ptp_mct1_Vcpdep_per').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ptp_mct1_Vfcdep_per').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_En_per').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ptp_mct1_Vcir_per').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ptp_He_1p_W_per').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_Ne_per').set('scaleval', '35');
model.sol('sol2').feature('v1').feature('comp1_V_per').set('scaleval', '500');
model.sol('sol2').feature('v1').feature('comp1_ptp_Hes_W_per').set('scaleval', '10');
model.sol('sol2').feature('v1').feature('comp1_ptp_mct1_Vcpdep_per').set('scaleval', '1');
model.sol('sol2').feature('v1').feature('comp1_ptp_mct1_Vfcdep_per').set('scaleval', '1');
model.sol('sol2').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scaleval', '10');
model.sol('sol2').feature('v1').feature('comp1_En_per').set('scaleval', '35');
model.sol('sol2').feature('v1').feature('comp1_ptp_mct1_Vcir_per').set('scaleval', '1');
model.sol('sol2').feature('v1').feature('comp1_ptp_He_1p_W_per').set('scaleval', '10');
model.sol('sol2').feature('v1').set('control', 'tper');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 0.001);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('control', 'tper');
model.sol('sol2').feature('s1').set('control', 'tper');
model.sol('sol2').feature('s1').feature('aDef').set('matherr', false);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol2').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol2').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol2').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol2').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol2').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol2').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (ptp)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('nlinnormlevel', 0.01);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('s1').feature('i1').set('errorchk', false);
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (ptp)');
model.sol('sol2').feature('s1').feature('i1').create('dd1', 'DomainDecomposition');
model.sol('sol2').feature('s1').feature('i1').feature('dd1').set('domdofmax', 150000);
model.sol('sol2').feature('s1').feature('i1').feature('dd1').set('ndom', 4);
model.sol('sol2').feature('s1').feature('i1').feature('dd1').set('usecoarse', false);
model.sol('sol2').feature('s1').feature('i1').feature('dd1').set('meshoverlap', false);
model.sol('sol2').feature('s1').feature('i1').feature('dd1').feature('ds').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('errorchk', false);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol2').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol2').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol2').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol2').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol2').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol2').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result('pg1').run;
model.result.duplicate('pg2', 'pg1');
model.result('pg2').run;
model.result('pg2').label('Frequency Sweep');
model.result('pg2').set('data', 'dset2');
model.result('pg2').run;

model.study.create('std3');
model.study('std3').create('tper', 'TimePeriodic');
model.study('std3').feature('tper').set('plotgroup', 'Default');
model.study('std3').feature('tper').set('solnum', 'auto');
model.study('std3').feature('tper').set('notsolnum', 'auto');
model.study('std3').feature('tper').set('outputmap', {});
model.study('std3').feature('tper').set('ngenAUX', '1');
model.study('std3').feature('tper').set('ngen', '2');
model.study('std3').feature('tper').set('goalngenAUX', '1');
model.study('std3').feature('tper').set('ngenAUX', '1');
model.study('std3').feature('tper').set('ngen', '2');
model.study('std3').feature('tper').set('goalngenAUX', '1');
model.study('std3').feature('tper').setSolveFor('/physics/ptp', true);
model.study('std3').feature('tper').set('useparam', true);
model.study('std3').feature('tper').setIndex('pname', 'L', 0);
model.study('std3').feature('tper').setIndex('plistarr', '', 0);
model.study('std3').feature('tper').setIndex('punit', 'm', 0);
model.study('std3').feature('tper').setIndex('pname', 'L', 0);
model.study('std3').feature('tper').setIndex('plistarr', '', 0);
model.study('std3').feature('tper').setIndex('punit', 'm', 0);
model.study('std3').feature('tper').setIndex('pname', 'p0', 0);
model.study('std3').feature('tper').setIndex('plistarr', 'range(2,-0.055172413793103454,0.4)', 0);
model.study('std3').feature('tper').setIndex('punit', 'torr', 0);
model.study('std3').label('Pressure Sweep');
model.study('std3').setGenPlots(false);
model.study('std3').setGenConv(false);

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'tper');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').feature('comp1_Ne_per').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_V_per').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_ptp_Hes_W_per').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_ptp_mct1_Vcpdep_per').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_ptp_mct1_Vfcdep_per').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_En_per').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_ptp_mct1_Vcir_per').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_ptp_He_1p_W_per').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_Ne_per').set('scaleval', '35');
model.sol('sol3').feature('v1').feature('comp1_V_per').set('scaleval', '500');
model.sol('sol3').feature('v1').feature('comp1_ptp_Hes_W_per').set('scaleval', '10');
model.sol('sol3').feature('v1').feature('comp1_ptp_mct1_Vcpdep_per').set('scaleval', '1');
model.sol('sol3').feature('v1').feature('comp1_ptp_mct1_Vfcdep_per').set('scaleval', '1');
model.sol('sol3').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scaleval', '10');
model.sol('sol3').feature('v1').feature('comp1_En_per').set('scaleval', '35');
model.sol('sol3').feature('v1').feature('comp1_ptp_mct1_Vcir_per').set('scaleval', '1');
model.sol('sol3').feature('v1').feature('comp1_ptp_He_1p_W_per').set('scaleval', '10');
model.sol('sol3').feature('v1').set('control', 'tper');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').set('stol', 0.001);
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('control', 'tper');
model.sol('sol3').feature('s1').set('control', 'tper');
model.sol('sol3').feature('s1').feature('aDef').set('matherr', false);
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol3').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol3').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol3').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol3').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol3').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol3').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol3').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol3').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol3').feature('s1').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol3').feature('s1').feature('d1').label('Suggested Direct Solver (ptp)');
model.sol('sol3').feature('s1').create('i1', 'Iterative');
model.sol('sol3').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i1').set('nlinnormlevel', 0.01);
model.sol('sol3').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol3').feature('s1').feature('i1').set('errorchk', false);
model.sol('sol3').feature('s1').feature('i1').label('Suggested Iterative Solver (ptp)');
model.sol('sol3').feature('s1').feature('i1').create('dd1', 'DomainDecomposition');
model.sol('sol3').feature('s1').feature('i1').feature('dd1').set('domdofmax', 150000);
model.sol('sol3').feature('s1').feature('i1').feature('dd1').set('ndom', 4);
model.sol('sol3').feature('s1').feature('i1').feature('dd1').set('usecoarse', false);
model.sol('sol3').feature('s1').feature('i1').feature('dd1').set('meshoverlap', false);
model.sol('sol3').feature('s1').feature('i1').feature('dd1').feature('ds').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('errorchk', false);
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol3').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol3').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol3').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol3').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol3').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol3').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol3').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol3').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol3').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol3').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result('pg2').run;
model.result.duplicate('pg3', 'pg2');
model.result('pg3').run;
model.result('pg3').label('Pressure Sweep');
model.result('pg3').set('data', 'dset3');
model.result('pg3').run;
model.result('pg3').feature('glob1').set('xdataparamunit', 'Torr');
model.result('pg3').run;

model.param.set('Rp', '29.175[ohm]');
model.param.set('Xp', '-126.47[ohm]');

model.study.create('std4');
model.study('std4').create('tper', 'TimePeriodic');
model.study('std4').feature('tper').set('plotgroup', 'Default');
model.study('std4').feature('tper').set('solnum', 'auto');
model.study('std4').feature('tper').set('notsolnum', 'auto');
model.study('std4').feature('tper').set('outputmap', {});
model.study('std4').feature('tper').set('ngenAUX', '1');
model.study('std4').feature('tper').set('ngen', '2');
model.study('std4').feature('tper').set('goalngenAUX', '1');
model.study('std4').feature('tper').set('ngenAUX', '1');
model.study('std4').feature('tper').set('ngen', '2');
model.study('std4').feature('tper').set('goalngenAUX', '1');
model.study('std4').feature('tper').setSolveFor('/physics/ptp', true);
model.study('std4').feature('tper').set('useparam', true);
model.study('std4').feature('tper').setIndex('pname', 'L', 0);
model.study('std4').feature('tper').setIndex('plistarr', '', 0);
model.study('std4').feature('tper').setIndex('punit', 'm', 0);
model.study('std4').feature('tper').setIndex('pname', 'L', 0);
model.study('std4').feature('tper').setIndex('plistarr', '', 0);
model.study('std4').feature('tper').setIndex('punit', 'm', 0);
model.study('std4').feature('tper').setIndex('pname', 'P0', 0);
model.study('std4').feature('tper').setIndex('plistarr', 'range(10,1.4,80)', 0);
model.study('std4').feature('tper').setIndex('punit', 'W', 0);
model.study('std4').setGenConv(false);
model.study('std4').setGenPlots(false);
model.study('std4').label('High Power Sweep');

model.sol.create('sol4');
model.sol('sol4').study('std4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std4');
model.sol('sol4').feature('st1').set('studystep', 'tper');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').feature('comp1_Ne_per').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_V_per').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_ptp_Hes_W_per').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_ptp_mct1_Vcpdep_per').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_ptp_mct1_Vfcdep_per').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_En_per').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_ptp_mct1_Vcir_per').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_ptp_He_1p_W_per').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_Ne_per').set('scaleval', '35');
model.sol('sol4').feature('v1').feature('comp1_V_per').set('scaleval', '500');
model.sol('sol4').feature('v1').feature('comp1_ptp_Hes_W_per').set('scaleval', '10');
model.sol('sol4').feature('v1').feature('comp1_ptp_mct1_Vcpdep_per').set('scaleval', '1');
model.sol('sol4').feature('v1').feature('comp1_ptp_mct1_Vfcdep_per').set('scaleval', '1');
model.sol('sol4').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scaleval', '10');
model.sol('sol4').feature('v1').feature('comp1_En_per').set('scaleval', '35');
model.sol('sol4').feature('v1').feature('comp1_ptp_mct1_Vcir_per').set('scaleval', '1');
model.sol('sol4').feature('v1').feature('comp1_ptp_He_1p_W_per').set('scaleval', '10');
model.sol('sol4').feature('v1').set('control', 'tper');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').set('stol', 0.001);
model.sol('sol4').feature('s1').create('p1', 'Parametric');
model.sol('sol4').feature('s1').feature.remove('pDef');
model.sol('sol4').feature('s1').feature('p1').set('control', 'tper');
model.sol('sol4').feature('s1').set('control', 'tper');
model.sol('sol4').feature('s1').feature('aDef').set('matherr', false);
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol4').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol4').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol4').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol4').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol4').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol4').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol4').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol4').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol4').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol4').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol4').feature('s1').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol4').feature('s1').feature('d1').label('Suggested Direct Solver (ptp)');
model.sol('sol4').feature('s1').create('i1', 'Iterative');
model.sol('sol4').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('s1').feature('i1').set('nlinnormlevel', 0.01);
model.sol('sol4').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol4').feature('s1').feature('i1').set('errorchk', false);
model.sol('sol4').feature('s1').feature('i1').label('Suggested Iterative Solver (ptp)');
model.sol('sol4').feature('s1').feature('i1').create('dd1', 'DomainDecomposition');
model.sol('sol4').feature('s1').feature('i1').feature('dd1').set('domdofmax', 150000);
model.sol('sol4').feature('s1').feature('i1').feature('dd1').set('ndom', 4);
model.sol('sol4').feature('s1').feature('i1').feature('dd1').set('usecoarse', false);
model.sol('sol4').feature('s1').feature('i1').feature('dd1').set('meshoverlap', false);
model.sol('sol4').feature('s1').feature('i1').feature('dd1').feature('ds').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('errorchk', false);
model.sol('sol4').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol4').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol4').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol4').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol4').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol4').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol4').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol4').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol4').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol4').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol4').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol4').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').attach('std4');
model.sol('sol4').runAll;

model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').set('data', 'dset4');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').set('expr', {'ptp.mct1.alphaP'});
model.result('pg4').feature('glob1').set('descr', {'Maximum power transfer coefficient'});
model.result('pg4').feature('glob1').set('unit', {'1'});
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').create('glob2', 'Global');
model.result('pg4').feature('glob2').set('markerpos', 'datapoints');
model.result('pg4').feature('glob2').set('linewidth', 'preference');
model.result('pg4').feature('glob2').set('expr', {'ptp.mct1.etaP'});
model.result('pg4').feature('glob2').set('descr', {'Efficiency'});
model.result('pg4').feature('glob2').set('unit', {'1'});
model.result('pg4').run;
model.result('pg4').label('High Power Sweep');
model.result('pg4').set('twoyaxes', true);
model.result('pg4').setIndex('plotonsecyaxis', true, 1, 1);
model.result('pg4').set('titletype', 'none');
model.result('pg4').set('legendpos', 'lowerright');
model.result('pg4').run;

model.title('Impedance Matching');

model.description('This tutorial drives a capacitively coupled plasma with an L-type matching network at high and low powers. At low power, where the harmonics in the current are low, prefect matching is obtained at the chosen power value. Sweeps over power, frequency, and pressure are performed, and their effect on the match power transfer ratio and efficiency are examined. Finally, a sweep is performed over a higher power range, and the presence of sizable harmonics in the current causes an impedance mismatch.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('impedance_matching.mph');

model.modelNode.label('Components');

out = model;
