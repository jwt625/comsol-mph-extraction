function out = model
%
% point_to_plane_dc_corona.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Plasma_Module/Corona_Discharges');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('plas', 'ColdPlasma', 'geom1');
model.physics('plas').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/plas', true);

model.geom('geom1').lengthUnit('cm');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', [5 10]);
model.geom('geom1').run('r1');
model.geom('geom1').create('e1', 'Ellipse');
model.geom('geom1').feature('e1').set('semiaxes', {'0.5[mm]' '5[mm]'});
model.geom('geom1').feature('e1').set('angle', 180);
model.geom('geom1').feature('e1').set('pos', [0 10]);
model.geom('geom1').feature('e1').set('rot', 180);
model.geom('geom1').feature.duplicate('e2', 'e1');
model.geom('geom1').feature('e2').set('semiaxes', {'3[mm]' '10.5[mm]'});
model.geom('geom1').runPre('fin');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').selection('input').set({'e2' 'r1'});
model.geom('geom1').feature('dif1').selection('input2').set({'e1'});
model.geom('geom1').run('dif1');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').init(2);
model.geom('geom1').feature('del1').selection('input').set('dif1', 1);
model.geom('geom1').run('fin');
model.geom('geom1').create('mce1', 'MeshControlEdges');
model.geom('geom1').feature('mce1').selection('input').set('fin', 7);
model.geom('geom1').run('mce1');

model.param.set('V0', '-5[kV]');
model.param.descr('V0', 'Applied Voltage');

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('ve', 'mueN(plas.Erd)*plas.Erd', 'Electron velocity');
model.variable('var1').set('Ratt2', 'eta2(plas.Erd)*plas.Nn^2*ve/plas.c_wA', 'Rate constant for 3-body attachment');
model.variable('var1').set('Ratt1', 'eta1(plas.Erd)*plas.Nn*ve/plas.c_wA', 'Rate constant for attachment');
model.variable('var1').set('Ri', 'alpha*ve/plas.c_wA', 'Rate constant for ionization');
model.variable('var1').set('alpha', 'alpha(plas.Erd)*plas.Nn', 'Townsend coefficient');
model.variable('var1').set('betaep', '5e-8[cm^3/s]*N_A_const', 'Electron ion recombination');
model.variable('var1').set('betapn', '2e-6[cm^3/s]*N_A_const', 'ion ion recombination');
model.variable('var1').set('DeN', '1800[cm^2/s]*plas.Nn', 'Diffusion coefficient');
model.variable('var1').set('ne0', '1e10[m^-3]', 'Initial electron number density');
model.variable('var1').set('ni0', '1e16[m^-3]', 'Initial ion number density');
model.variable('var1').set('p0', '760[torr]', 'Gas pressure');
model.variable('var1').set('t0', '300[K]', 'Gas temperature');
model.variable('var1').set('Vapp', 'V0*ramp', 'Applied Voltage with ramp function');
model.variable('var1').set('ramp', 'tanh(1e3[1/s]*t)', 'Ramp function');
model.variable('var1').set('muiN', '6e21[1/(V*s*m)]', 'Reduced ion mobility');

model.func.create('an1', 'Analytic');
model.func('an1').model('comp1');
model.func('an1').label('alpha');
model.func('an1').set('funcname', 'alpha');
model.func('an1').set('expr', '1.4e-20*exp(-660/x)');
model.func('an1').set('fununit', 'm^2');
model.func('an1').setIndex('argunit', 'Td', 0);
model.func.create('an2', 'Analytic');
model.func('an2').model('comp1');
model.func('an2').label('eta1');
model.func('an2').set('funcname', 'eta1');
model.func('an2').set('expr', '6e-23*exp(-100/x)');
model.func('an2').set('fununit', 'm^2');
model.func('an2').setIndex('argunit', 'Td', 0);
model.func('an2').setIndex('plotargs', '10000[Td]', 0, 2);
model.func.create('an3', 'Analytic');
model.func('an3').model('comp1');
model.func('an3').label('eta2');
model.func('an3').set('funcname', 'eta2');
model.func('an3').set('expr', '1.6e-37*(x)^-1.1');
model.func('an3').set('fununit', 'cm^5');
model.func('an3').setIndex('argunit', 'Td', 0);
model.func('an3').setIndex('plotargs', '10000[Td]', 0, 2);
model.func.create('an4', 'Analytic');
model.func('an4').model('comp1');
model.func('an4').label('mueN');
model.func('an4').set('funcname', 'mueN');
model.func('an4').set('expr', '3.74e22*(x^-0.25)');
model.func('an4').set('fununit', '1/V/s/cm');
model.func('an4').setIndex('argunit', 'Td', 0);
model.func('an4').setIndex('plotargs', '10000[Td]', 0, 2);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Wall');
model.selection('sel1').geom(1);
model.selection('sel1').set([2 5]);

model.physics('plas').prop('ElectronProperties').set('MeanElectronEnergyModel', 'LocalFieldApproximationE');
model.physics('plas').prop('ElectronProperties').set('ReducedProps', true);
model.physics('plas').prop('ShapeProperty').set('Formulation', 'FEMLinear');
model.physics('plas').prop('InconsistentStabilization').set('IsotropicDiffusionIons', true);
model.physics('plas').feature('pes1').set('T', 't0');
model.physics('plas').feature('pes1').set('pA', 'p0');
model.physics('plas').feature('pes1').set('SpecifyElectronDensityAndEnergy', 'SpecifyAll');
model.physics('plas').feature('pes1').set('muN', {'mueN(plas.Erd)' '0' '0' '0' 'mueN(plas.Erd)' '0' '0' '0' 'mueN(plas.Erd)'});
model.physics('plas').feature('pes1').set('DeN', {'DeN' '0' '0' '0' 'DeN' '0' '0' '0' 'DeN'});
model.physics('plas').create('eir1', 'ElectronImpactReaction', 2);
model.physics('plas').feature('eir1').set('formula', 'e+A=>A++2e');
model.physics('plas').feature('eir1').set('type', 'Ionization');
model.physics('plas').feature('eir1').set('de', 15);
model.physics('plas').feature('eir1').set('kf', 'Ri');
model.physics('plas').create('eir2', 'ElectronImpactReaction', 2);
model.physics('plas').feature('eir2').set('formula', 'A+e=>A-');
model.physics('plas').feature('eir2').set('type', 'Attachment');
model.physics('plas').feature('eir2').set('kf', 'Ratt1+Ratt2');
model.physics('plas').create('rxn1', 'Reaction', 2);
model.physics('plas').feature('rxn1').set('formula', 'e+A+=>A');
model.physics('plas').feature('rxn1').set('kf', 'betaep');
model.physics('plas').create('rxn2', 'Reaction', 2);
model.physics('plas').feature('rxn2').set('formula', 'A-+A+=>A+A');
model.physics('plas').feature('rxn2').set('kf', 'betapn');
model.physics('plas').feature('A').set('PresetSpeciesData', 'N2');
model.physics('plas').feature('A').set('FromMassConstraint', true);
model.physics('plas').feature('A_1p').set('n0', 'ni0');
model.physics('plas').feature('A_1p').set('PresetSpeciesData', 'N2');
model.physics('plas').feature('A_1m').set('PresetSpeciesData', 'N2');
model.physics('plas').feature('A_1m').set('n0', 'ni0');
model.physics('plas').create('sr1', 'SurfaceReaction', 1);
model.physics('plas').feature('sr1').set('formula', 'A+=>A');
model.physics('plas').feature('sr1').selection.named('sel1');
model.physics('plas').feature('sr1').set('gammai', 0.05);
model.physics('plas').feature('sr1').set('ebari', 4);
model.physics('plas').feature.duplicate('sr2', 'sr1');
model.physics('plas').feature('sr2').set('formula', 'A-=>A');
model.physics('plas').feature('sr2').set('gammai', 0);
model.physics('plas').feature('sr2').set('ebari', 0);
model.physics('plas').feature('init1').set('neinit', 'ne0');
model.physics('plas').create('gnd1', 'Ground', 1);
model.physics('plas').feature('gnd1').selection.set([2]);
model.physics('plas').create('mct1', 'MetalContact', 1);
model.physics('plas').feature('mct1').set('V0', 'Vapp');
model.physics('plas').feature('mct1').selection.set([5]);
model.physics('plas').feature('mct1').label('Metal Contact 1, ramp');
model.physics('plas').create('mct2', 'MetalContact', 1);
model.physics('plas').feature('mct2').set('V0', 'V0');
model.physics('plas').feature('mct2').selection.set([5]);
model.physics('plas').feature('mct2').label('Metal Contact 2, constant');
model.physics('plas').create('wall1', 'WallDriftDiffusion', 1);
model.physics('plas').feature('wall1').selection.named('sel1');

model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh1').feature('size1').selection.set([1 5 6]);
model.mesh('mesh1').feature('size1').set('table', 'plasma');
model.mesh('mesh1').feature('size1').set('hauto', 4);
model.mesh('mesh1').feature('size').set('table', 'plasma');
model.mesh('mesh1').feature('size').set('hauto', 4);
model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.set([3 5 6]);
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').selection.set([5]);
model.mesh('mesh1').feature('edg1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('edg1').feature('dis1').set('elemcount', 150);
model.mesh('mesh1').feature('edg1').feature('dis1').set('elemratio', 150);
model.mesh('mesh1').feature('edg1').feature('dis1').set('growthrate', 'exponential');
model.mesh('mesh1').feature('edg1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis2').selection.set([6]);
model.mesh('mesh1').feature('edg1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('edg1').feature('dis2').set('elemcount', 100);
model.mesh('mesh1').feature('edg1').feature('dis2').set('elemratio', 80);
model.mesh('mesh1').feature('edg1').feature('dis2').set('growthrate', 'exponential');
model.mesh('mesh1').feature('edg1').feature('dis2').set('reverse', true);
model.mesh('mesh1').feature('edg1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis3').selection.set([3]);
model.mesh('mesh1').feature('edg1').feature('dis3').set('type', 'predefined');
model.mesh('mesh1').feature('edg1').feature('dis3').set('elemcount', 13);
model.mesh('mesh1').feature('edg1').feature('dis3').set('elemratio', 2);
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([2]);
model.mesh('mesh1').feature('ftri1').feature('size1').set('table', 'plasma');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hauto', 1);
model.mesh('mesh1').feature('ftri1').create('size2', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').feature('size2').selection.set([1]);
model.mesh('mesh1').feature('ftri1').feature('size2').set('table', 'plasma');
model.mesh('mesh1').feature('ftri1').feature('size2').set('hauto', 4);
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(2);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 4);
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([2]);
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tlist', '10^{range(log10(1.0e-8),1/10,log10(1))}');
model.study('std1').feature('time').set('useadvanceddisable', true);
model.study('std1').feature('time').set('disabledphysics', {'plas/mct2'});

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_plas_A_1p_w').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_plas_A_1m_w').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_Ne').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_V').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_plas_A_1p_w').set('scaleval', '1E-5');
model.sol('sol1').feature('v1').feature('comp1_plas_A_1m_w').set('scaleval', '1E-5');
model.sol('sol1').feature('v1').feature('comp1_Ne').set('scaleval', '1E20');
model.sol('sol1').feature('v1').feature('comp1_V').set('scaleval', '100');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', '10^{range(log10(1.0e-8),1/10,log10(1))}');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 1.0E-4);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('initialstepbdfactive', true);
model.sol('sol1').feature('t1').set('initialstepbdf', '(1.0E-13)[s]');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').feature('aDef').set('matherr', false);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runFromTo('st1', 'v1');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'plas.ne'});
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'plas.Te'});
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'V'});
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg2').feature('surf1').set('colortable', 'Prism');
model.result('pg3').feature('surf1').set('colortable', 'Dipole');
model.result('pg1').label('Electron Density (plas)');
model.result('pg2').label('Electron Temperature (plas)');
model.result('pg3').label('Electric Potential (plas)');
model.result('pg1').run;
model.result.dataset.create('mir1', 'Mirror2D');
model.result('pg1').run;
model.result('pg1').set('data', 'mir1');
model.result('pg3').run;
model.result('pg3').set('data', 'mir1');
model.result('pg1').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').add('plotgroup', 'pg1');
model.nodeGroup('grp1').add('plotgroup', 'pg2');
model.nodeGroup('grp1').add('plotgroup', 'pg3');
model.nodeGroup('grp1').label('Time dependent -5 kV');

model.study('std1').feature('time').set('plot', true);
model.study('std1').feature('time').set('plotfreq', 'tsteps');

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('t1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_plas_A_1p_w').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_plas_A_1m_w').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_Ne').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_V').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_plas_A_1p_w').set('scaleval', '1E-5');
model.sol('sol1').feature('v1').feature('comp1_plas_A_1m_w').set('scaleval', '1E-5');
model.sol('sol1').feature('v1').feature('comp1_Ne').set('scaleval', '1E20');
model.sol('sol1').feature('v1').feature('comp1_V').set('scaleval', '100');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', '10^{range(log10(1.0e-8),1/10,log10(1))}');
model.sol('sol1').feature('t1').set('plot', 'on');
model.sol('sol1').feature('t1').set('plotgroup', 'pg1');
model.sol('sol1').feature('t1').set('plotfreq', 'tsteps');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 1.0E-4);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('initialstepbdfactive', true);
model.sol('sol1').feature('t1').set('initialstepbdf', '(1.0E-13)[s]');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').feature('aDef').set('matherr', false);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result('pg1').run;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/plas', true);
model.study('std2').feature('stat').set('useadvanceddisable', true);
model.study('std2').feature('stat').set('disabledphysics', {'plas/mct1'});
model.study('std2').feature('stat').set('useinitsol', true);
model.study('std2').feature('stat').set('initmethod', 'sol');
model.study('std2').feature('stat').set('initstudy', 'std1');
model.study('std2').feature('stat').set('useparam', true);
model.study('std2').feature('stat').setIndex('pname', 'V0', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'V', 0);
model.study('std2').feature('stat').setIndex('pname', 'V0', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'V', 0);
model.study('std2').feature('stat').setIndex('plistarr', 'range(-5,-5,-50)', 0);
model.study('std2').feature('stat').setIndex('punit', 'kV', 0);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 1.0E-4);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol2').feature('s1').set('control', 'stat');
model.sol('sol2').feature('s1').feature('aDef').set('matherr', false);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-8);
model.sol('sol2').feature('s1').feature('fc1').set('rstep', 1.2);
model.sol('sol2').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 500);
model.sol('sol2').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (plas)');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-8);
model.sol('sol2').feature('s1').feature('fc1').set('rstep', 1.2);
model.sol('sol2').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 500);
model.sol('sol2').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runFromTo('st1', 'v1');

model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'plas.ne'});
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'plas.Te'});
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'dset2');
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'V'});
model.result('pg4').feature('surf1').set('colortable', 'Prism');
model.result('pg5').feature('surf1').set('colortable', 'Prism');
model.result('pg6').feature('surf1').set('colortable', 'Dipole');
model.result('pg4').label('Electron Density (plas) 1');
model.result('pg5').label('Electron Temperature (plas) 1');
model.result('pg6').label('Electric Potential (plas) 1');
model.result('pg4').run;
model.result.dataset.create('mir2', 'Mirror2D');
model.result.dataset('mir2').set('data', 'dset2');
model.result('pg4').run;
model.result('pg4').set('data', 'mir2');
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('title', 'Electron Number Density');
model.result('pg4').set('paramindicator', '');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').run;
model.result('pg4').feature('surf1').set('colorscalemode', 'logarithmic');
model.result('pg4').feature('surf1').set('rangecoloractive', true);
model.result('pg4').feature('surf1').set('rangecolormin', '1e13');
model.result('pg4').feature('surf1').set('rangecolormax', '1e17');
model.result('pg4').run;
model.result('pg6').run;
model.result('pg6').set('data', 'mir2');
model.result('pg4').run;

model.nodeGroup.create('grp2', 'Results');
model.nodeGroup('grp2').set('type', 'plotgroup');
model.nodeGroup.move('grp2', 1);
model.nodeGroup('grp2').add('plotgroup', 'pg4');
model.nodeGroup('grp2').add('plotgroup', 'pg5');
model.nodeGroup('grp2').add('plotgroup', 'pg6');
model.nodeGroup('grp2').label('Stationary, ramping to -50 kV');

model.sol('sol2').study('std2');
model.sol('sol2').feature.remove('s1');
model.sol('sol2').feature.remove('v1');
model.sol('sol2').feature.remove('st1');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 1.0E-4);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol2').feature('s1').set('control', 'stat');
model.sol('sol2').feature('s1').feature('aDef').set('matherr', false);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-8);
model.sol('sol2').feature('s1').feature('fc1').set('rstep', 1.2);
model.sol('sol2').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 500);
model.sol('sol2').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (plas)');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-8);
model.sol('sol2').feature('s1').feature('fc1').set('rstep', 1.2);
model.sol('sol2').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 500);
model.sol('sol2').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result('pg4').run;
model.result.create('pg7', 'PlotGroup2D');

model.nodeGroup('grp2').add('plotgroup', 'pg7');

model.result('pg7').run;
model.result('pg7').label('Positive Ion Number Density');
model.result('pg7').set('data', 'mir2');
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', 'Positive Ion Number Density');
model.result('pg7').set('paramindicator', '');
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', 'plas.n_wA_1p');
model.result('pg7').run;
model.result('pg7').feature('surf1').set('colorscalemode', 'logarithmic');
model.result('pg7').feature('surf1').set('rangecoloractive', true);
model.result('pg7').feature('surf1').set('rangecolormin', '1e7');
model.result('pg7').feature('surf1').set('rangecolormax', '1e19');
model.result('pg7').run;
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');

model.nodeGroup('grp2').add('plotgroup', 'pg8');

model.result('pg8').run;
model.result('pg8').label('Negative Ion Number Density');
model.result('pg8').set('title', 'Negative Ion Number Density');
model.result('pg8').run;
model.result('pg8').feature('surf1').set('expr', 'plas.n_wA_1m');
model.result('pg8').feature('surf1').set('rangecolormin', '1e14');
model.result('pg8').feature('surf1').set('rangecolormax', '1e18');
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup1D');

model.nodeGroup('grp2').add('plotgroup', 'pg9');

model.result('pg9').run;
model.result('pg9').label('Number Density of Charged Species');
model.result('pg9').set('data', 'dset2');
model.result('pg9').setIndex('looplevelinput', 'last', 0);
model.result('pg9').set('titletype', 'label');
model.result('pg9').set('xlabelactive', true);
model.result('pg9').set('xlabel', 'z-coordinate (cm)');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Density (1/m<sup>3</sup>)');
model.result('pg9').set('axislimits', true);
model.result('pg9').set('xmin', -0.12);
model.result('pg9').set('xmax', 9.62);
model.result('pg9').set('ymin', '1e10');
model.result('pg9').set('ymax', '2e19');
model.result('pg9').set('ylog', true);
model.result('pg9').set('legendpos', 'upperleft');
model.result('pg9').create('lngr1', 'LineGraph');
model.result('pg9').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg9').feature('lngr1').set('linewidth', 'preference');
model.result('pg9').feature('lngr1').selection.set([1]);
model.result('pg9').feature('lngr1').set('xdata', 'expr');
model.result('pg9').feature('lngr1').set('xdataexpr', 'z');
model.result('pg9').feature('lngr1').set('legend', true);
model.result('pg9').feature('lngr1').set('legendmethod', 'manual');
model.result('pg9').feature('lngr1').setIndex('legends', 'Electrons', 0);
model.result('pg9').run;
model.result('pg9').feature.duplicate('lngr2', 'lngr1');
model.result('pg9').run;
model.result('pg9').feature('lngr2').set('expr', 'plas.n_wA_1p');
model.result('pg9').feature('lngr2').setIndex('legends', 'Positive ions', 0);
model.result('pg9').feature.duplicate('lngr3', 'lngr2');
model.result('pg9').run;
model.result('pg9').feature('lngr3').set('expr', 'plas.n_wA_1m');
model.result('pg9').feature('lngr3').setIndex('legends', 'Negative ions', 0);
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup1D');

model.nodeGroup('grp2').add('plotgroup', 'pg10');

model.result('pg10').run;
model.result('pg10').label('Voltage vs Current');
model.result('pg10').set('data', 'dset2');
model.result('pg10').set('titletype', 'none');
model.result('pg10').create('glob1', 'Global');
model.result('pg10').feature('glob1').set('markerpos', 'datapoints');
model.result('pg10').feature('glob1').set('linewidth', 'preference');
model.result('pg10').feature('glob1').setIndex('expr', 'plas.I_2', 0);
model.result('pg10').feature('glob1').setIndex('unit', 'uA', 0);
model.result('pg10').feature('glob1').setIndex('descr', 'Current', 0);
model.result('pg10').feature('glob1').set('xdata', 'expr');
model.result('pg10').feature('glob1').set('xdataexpr', '-V0');
model.result('pg10').feature('glob1').set('xdataunit', 'kV');
model.result('pg10').feature('glob1').set('xdatadescractive', true);
model.result('pg10').feature('glob1').set('xdatadescr', '|V0|');
model.result('pg10').run;
model.result('pg4').run;
model.result('pg7').run;
model.result('pg9').run;
model.result('pg10').run;
model.result('pg8').run;

model.title('DC Corona Discharge in Air in a Point-to-Plane Configuration');

model.description(['This tutorial model presents a study of a negative corona discharge in dry air at atmospheric pressure in a point-to-plane configuration. A millimeter-sized elliptical electrode creates a high-intensity electric field where the corona discharge occurs. A ground plane is placed 10' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'cm away from the corona electrode. The voltage is varied between -5 and -50 kV. The creation and transport of charged species is solved self-consistently coupled with Poisson' native2unicode(hex2dec({'20' '19'}), 'unicode') 's equation. The local field approximation is used, which means that transport and source coefficients are assumed to be well parameterized through the reduced electric field.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('point_to_plane_dc_corona.mph');

model.modelNode.label('Components');

out = model;
