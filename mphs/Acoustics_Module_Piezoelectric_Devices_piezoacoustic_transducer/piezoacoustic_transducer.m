function out = model
%
% piezoacoustic_transducer.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Piezoelectric_Devices');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics('solid').create('pzm1', 'PiezoelectricMaterialModel');
model.physics('solid').feature('pzm1').selection.all;
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics('es').create('ccnp1', 'ChargeConservationPiezo');
model.physics('es').feature('ccnp1').selection.all;

model.multiphysics.create('asb1', 'AcousticStructureBoundary', 'geom1', 1);
model.multiphysics('asb1').set('Acoustics_physics', 'acpr');
model.multiphysics('asb1').set('Structure_physics', 'solid');
model.multiphysics('asb1').selection.all;
model.multiphysics.create('pze1', 'PiezoelectricEffect', 'geom1', 2);
model.multiphysics('pze1').set('Solid_physics', 'solid');
model.multiphysics('pze1').set('Electrostatics_physics', 'es');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std1').feature('freq').setSolveFor('/physics/solid', true);
model.study('std1').feature('freq').setSolveFor('/physics/es', true);
model.study('std1').feature('freq').setSolveFor('/multiphysics/asb1', true);
model.study('std1').feature('freq').setSolveFor('/multiphysics/pze1', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('fmin', '10[kHz]', 'Minimum frequency of the study');
model.param.set('fmax', '60[kHz]', 'Maximum frequency of the study');
model.param.set('fstep', '1.0[kHz]', 'Steps in the frequency sweep');
model.param.set('c_air', '343[m/s]', 'Speed of sound in air');
model.param.set('th_memb', '0.4[mm]', 'Thickness of the brass membrane');
model.param.set('th_pzt', '0.4[mm]', 'Thickness of the piezoelectric material');
model.param.set('r_memb', '5[mm]', 'Radius of the brass membrane');
model.param.set('r_pzt', '3.5[mm]', 'Radius of the piezoelectric material');
model.param.set('r_air', '20[mm]', 'Radius of the air domain');
model.param.set('V0', '5[V]', 'Driving voltage');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').label('Air');
model.geom('geom1').feature('c1').set('r', 'r_air');
model.geom('geom1').feature('c1').set('angle', 90);
model.geom('geom1').feature('c1').set('selresult', true);
model.geom('geom1').feature('c1').set('color', 'custom');
model.geom('geom1').feature('c1').set('customcolor', [0.6941176652908325 0.8666666746139526 1]);
model.geom('geom1').run('c1');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').label('Brass Membrane');
model.geom('geom1').feature('r1').set('size', {'r_memb' 'th_memb'});
model.geom('geom1').feature('r1').set('pos', {'0' '-th_memb'});
model.geom('geom1').feature('r1').set('selresult', true);
model.geom('geom1').feature('r1').set('color', 'custom');
model.geom('geom1').feature('r1').set('customcolor', [0.8588235378265381 0.7019608020782471 0.529411792755127]);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Structural Domains');
model.geom('geom1').feature('r1').set('contributeto', 'csel1');
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').label('Piezoelectric material');
model.geom('geom1').feature('r2').set('size', {'r_pzt' 'th_pzt'});
model.geom('geom1').feature('r2').set('pos', {'0' '-th_memb-th_pzt'});
model.geom('geom1').feature('r2').set('selresult', true);
model.geom('geom1').feature('r2').set('color', 'custom');
model.geom('geom1').feature('r2').set('customcolor', [0.4470588266849518 0.46666666865348816 0.47843137383461]);
model.geom('geom1').feature('r2').set('contributeto', 'csel1');
model.geom('geom1').run('r2');
model.geom('geom1').run;

model.physics('acpr').selection.named('geom1_c1_dom');
model.physics('solid').selection.named('geom1_csel1_dom');
model.physics('solid').feature('pzm1').selection.named('geom1_r2_dom');
model.physics('es').selection.named('geom1_r2_dom');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('StrainCharge', 'Strain-charge form');
model.material('mat1').propertyGroup.create('StressCharge', 'Stress-charge form');
model.material('mat1').label('Lead Zirconate Titanate (PZT-5H)');
model.material('mat1').set('family', 'lead');
model.material('mat1').propertyGroup('def').set('heatcapacity', '440[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'1.3[W/(m*K)]' '0' '0' '0' '1.3[W/(m*K)]' '0' '0' '0' '1.3[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1704.4' '0' '0' '0' '1704.4' '0' '0' '0' '1433.6'});
model.material('mat1').propertyGroup('def').set('density', '7500[kg/m^3]');
model.material('mat1').propertyGroup('StrainCharge').set('sE', {'1.65e-011[1/Pa]' '-4.78e-012[1/Pa]' '-8.45e-012[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '-4.78e-012[1/Pa]' '1.65e-011[1/Pa]' '-8.45e-012[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '0[1/Pa]' '-8.45e-012[1/Pa]' '-8.45e-012[1/Pa]' '2.07e-011[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '4.35e-011[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '4.35e-011[1/Pa]' '0[1/Pa]'  ...
'0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '0[1/Pa]' '4.26e-011[1/Pa]'});
model.material('mat1').propertyGroup('StrainCharge').set('dET', {'0[C/N]' '0[C/N]' '-2.74e-010[C/N]' '0[C/N]' '0[C/N]' '-2.74e-010[C/N]' '0[C/N]' '0[C/N]' '5.93e-010[C/N]' '0[C/N]'  ...
'7.41e-010[C/N]' '0[C/N]' '7.41e-010[C/N]' '0[C/N]' '0[C/N]' '0[C/N]' '0[C/N]' '0[C/N]'});
model.material('mat1').propertyGroup('StrainCharge').set('epsilonrT', {'3130' '0' '0' '0' '3130' '0' '0' '0' '3400'});
model.material('mat1').propertyGroup('StressCharge').set('cE', {'1.27205e+011[Pa]' '8.02122e+010[Pa]' '8.46702e+010[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '8.02122e+010[Pa]' '1.27205e+011[Pa]' '8.46702e+010[Pa]' '0[Pa]'  ...
'0[Pa]' '0[Pa]' '8.46702e+010[Pa]' '8.46702e+010[Pa]' '1.17436e+011[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]'  ...
'0[Pa]' '2.29885e+010[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '2.29885e+010[Pa]' '0[Pa]'  ...
'0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '0[Pa]' '2.34742e+010[Pa]'});
model.material('mat1').propertyGroup('StressCharge').set('eES', {'0[C/m^2]' '0[C/m^2]' '-6.62281[C/m^2]' '0[C/m^2]' '0[C/m^2]' '-6.62281[C/m^2]' '0[C/m^2]' '0[C/m^2]' '23.2403[C/m^2]' '0[C/m^2]'  ...
'17.0345[C/m^2]' '0[C/m^2]' '17.0345[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]' '0[C/m^2]'});
model.material('mat1').propertyGroup('StressCharge').set('epsilonrS', {'1704.4' '0' '0' '0' '1704.4' '0' '0' '0' '1433.6'});
model.material('mat1').selection.named('geom1_r2_dom');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat2').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat2').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat2').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat2').label('Air');
model.material('mat2').set('family', 'air');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat2').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat2').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat2').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat2').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat2').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('molarmass', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat2').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material('mat2').propertyGroup('def').addInput('pressure');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat2').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat2').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat2').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat2').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat2').propertyGroup('idealGas').addInput('temperature');
model.material('mat2').propertyGroup('idealGas').addInput('pressure');
model.material('mat2').materialType('nonSolid');
model.material('mat2').selection.named('geom1_c1_dom');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Brass');
model.material('mat3').selection.named('geom1_r1_dom');
model.material('mat3').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat3').propertyGroup('Enu').set('E', {'100[GPa]'});
model.material('mat3').propertyGroup('Enu').set('nu', {'0.3'});
model.material('mat3').propertyGroup('def').set('density', {'8900[kg/m^3]'});

model.physics('acpr').feature('fpam1').set('FluidModel', 'AtmosphereAttenuation');
model.physics('acpr').feature('fpam1').set('minput_relativehumidity', 0.5);
model.physics('acpr').create('pmb1', 'PerfectlyMatchedBoundary', 1);
model.physics('acpr').feature('pmb1').selection.set([11]);
model.physics('acpr').create('efc1', 'ExteriorFieldCalculation', 1);
model.physics('acpr').feature('efc1').selection.set([11]);
model.physics('acpr').feature('efc1').setIndex('SymmetryCondition2', 1, 0);
model.physics('solid').create('fix1', 'Fixed', 1);
model.physics('solid').feature('fix1').selection.set([9]);
model.physics('es').create('gnd1', 'Ground', 1);
model.physics('es').feature('gnd1').selection.set([2]);
model.physics('es').create('pot1', 'ElectricPotential', 1);
model.physics('es').feature('pot1').selection.set([4]);
model.physics('es').feature('pot1').set('V0', 'V0');

model.study('std1').feature('freq').set('punit', 'kHz');
model.study('std1').feature('freq').set('plist', 'range(fmin,fstep,fmax)');

model.mesh('mesh1').contribute('physics/solid', false);
model.mesh('mesh1').contribute('physics/es', false);
model.mesh('mesh1').contribute('multiphysics/asb1', false);
model.mesh('mesh1').contribute('multiphysics/pze1', false);
model.mesh('mesh1').automatic(false);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.named('geom1_csel1_dom');
model.mesh('mesh1').feature('map1').set('adjustedgdistr', true);
model.mesh('mesh1').feature('map1').create('size1', 'Size');
model.mesh('mesh1').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmax', 'min(th_memb,th_pzt)');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([7 9]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 2);
model.mesh('mesh1').feature.move('map1', 3);
model.mesh('mesh1').run;

model.study('std1').setGenPlots(false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(fmin,fstep,fmax)'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'kHz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 51, 0);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').create('hght1', 'Height');
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 51, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').label('Sound Pressure Level (acpr)');
model.result('pg2').label('Sound Pressure Level (acpr)');
model.result('pg2').run;
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'dset1');
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('hasspacevars', false);
model.result.dataset('rev1').set('defaultPlotIDs', {'pg3|acpr' 'pg4|acpr'});
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'rev1');
model.result('pg3').setIndex('looplevel', 51, 0);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg3').feature('surf1').set('colortable', 'Wave');
model.result('pg3').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').label('Acoustic Pressure, 3D (acpr)');
model.result('pg3').label('Acoustic Pressure, 3D (acpr)');
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'rev1');
model.result('pg4').setIndex('looplevel', 51, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg4').feature('surf1').set('colortable', 'Rainbow');
model.result('pg4').feature('surf1').set('colorscalemode', 'linear');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').label('Sound Pressure Level, 3D (acpr)');
model.result('pg4').label('Sound Pressure Level, 3D (acpr)');
model.result('pg4').run;
model.result.create('pg5', 'PolarGroup');
model.result('pg5').set('data', 'dset1');
model.result('pg5').create('rp1', 'RadiationPattern');
model.result('pg5').feature('rp1').set('expr', {'acpr.efc1.Lp_pext'});
model.result('pg5').feature('rp1').set('legend', true);
model.result('pg5').feature('rp1').set('phidisc', 180);
model.result('pg5').label('Exterior-Field Sound Pressure Level (acpr)');
model.result('pg5').setIndex('looplevelinput', 'last', 0);
model.result('pg5').set('symmetricangle', true);
model.result('pg5').set('zeroangle', 'up');
model.result('pg5').set('rotdir', 'cw');
model.result('pg5').label('Exterior-Field Sound Pressure Level (acpr)');
model.result('pg5').run;
model.result('pg5').label('Exterior-Field Sound Pressure Level - Selected Frequencies');
model.result('pg5').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg5').setIndex('looplevelindices', '1 11 24 31 41 51', 0);
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('rp1').set('anglerestr', 'manual');
model.result('pg5').feature('rp1').set('phimin', -90);
model.result('pg5').feature('rp1').set('phirange', 180);
model.result('pg5').feature('rp1').set('radius', '1[m]');
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Exterior-Field Sound Pressure Level - All Frequencies');
model.result('pg6').setIndex('looplevelinput', 'all', 0);
model.result('pg6').run;
model.result('pg6').feature('rp1').set('beamwidth', true);
model.result('pg6').feature('rp1').set('leveldown', 3);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').set('data', 'none');
model.result('pg7').create('tblp1', 'Table');
model.result('pg7').feature('tblp1').set('source', 'table');
model.result('pg7').feature('tblp1').set('table', 'rp1');
model.result('pg7').feature('tblp1').set('linewidth', 'preference');
model.result('pg7').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg7').run;
model.result('pg7').feature('tblp1').set('legend', true);
model.result('pg7').run;
model.result('pg7').label('Beamwidth');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Angle (deg)');
model.result('pg7').set('legendpos', 'lowerleft');
model.result('pg7').run;
model.result('pg7').create('ann1', 'Annotation');
model.result('pg7').feature('ann1').set('data', 'dset1');
model.result('pg7').feature('ann1').set('posxexpr', 10);
model.result('pg7').feature('ann1').set('showpoint', false);
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').set('data', 'dset1');
model.result('pg8').setIndex('looplevel', 51, 0);
model.result('pg8').set('defaultPlotID', 'displacement');
model.result('pg8').label('Displacement (solid)');
model.result('pg8').set('frametype', 'spatial');
model.result('pg8').set('showlegends', true);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'solid.disp'});
model.result('pg8').feature('surf1').set('threshold', 'manual');
model.result('pg8').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg8').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg8').feature('surf1').set('colortabletrans', 'none');
model.result('pg8').feature('surf1').set('colorscalemode', 'linear');
model.result('pg8').feature('surf1').set('resolution', 'normal');
model.result('pg8').feature('surf1').create('def', 'Deform');
model.result('pg8').feature('surf1').feature('def').set('expr', {'u' 'w'});
model.result('pg8').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg8').label('Displacement (solid)');
model.result('pg8').run;
model.result('pg8').setIndex('looplevel', 24, 0);
model.result('pg8').set('showlegendsunit', true);
model.result('pg8').run;
model.result('pg8').feature('surf1').set('colortable', 'Rainbow');
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Stress at the Top of the Membrane');
model.result('pg9').setIndex('looplevelinput', 'manual', 0);
model.result('pg9').setIndex('looplevel', [24], 0);
model.result('pg9').set('titletype', 'label');
model.result('pg9').create('lngr1', 'LineGraph');
model.result('pg9').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg9').feature('lngr1').set('linewidth', 'preference');
model.result('pg9').feature('lngr1').selection.set([6]);
model.result('pg9').feature('lngr1').set('expr', 'solid.misesGp');
model.result('pg9').feature('lngr1').set('descr', 'von Mises stress');
model.result('pg9').feature('lngr1').set('unit', 'MPa');
model.result('pg9').feature('lngr1').set('xdata', 'expr');
model.result('pg9').feature('lngr1').set('xdataexpr', 'r');
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('Pressure at the Top of the Membrane');
model.result('pg10').setIndex('looplevelinput', 'manual', 0);
model.result('pg10').setIndex('looplevel', [24], 0);
model.result('pg10').set('titletype', 'label');
model.result('pg10').create('lngr1', 'LineGraph');
model.result('pg10').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg10').feature('lngr1').set('linewidth', 'preference');
model.result('pg10').feature('lngr1').selection.set([6]);
model.result('pg10').feature('lngr1').set('xdata', 'expr');
model.result('pg10').feature('lngr1').set('xdataexpr', 'r');
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('On-axis Sound Pressure Level at 1 m');
model.result('pg11').create('glob1', 'Global');
model.result('pg11').feature('glob1').set('markerpos', 'datapoints');
model.result('pg11').feature('glob1').set('linewidth', 'preference');
model.result('pg11').feature('glob1').setIndex('expr', 'subst(acpr.efc1.Lp_pext,r,0,z,1[m])', 0);
model.result('pg11').feature('glob1').setIndex('unit', 'dB', 0);
model.result('pg11').feature('glob1').setIndex('descr', 'On-axis sound pressure level at 1 m', 0);
model.result('pg11').feature('glob1').set('legend', false);
model.result('pg11').run;
model.result('pg1').run;

model.title('Piezoacoustic Transducer');

model.description('A piezoelectric speaker, colloquially known as a piezo buzzer, is a type of piezoelectric transducer that uses a piezoelectric crystal attached to a membrane. The movement of the crystal induces bending of the membrane and thus generates acoustic pressure waves. This model simulates an axisymmetric buzzer intended for ultrasonic applications. This type of transducers is typically driven at the resonance frequency, where the electric power is efficiently converted into radiated sound. A frequency sweep is used to help identify the resonance frequency. The radiation characteristics of the transducer are analyzed in terms of e.g. the beamwidth.');

model.label('piezoacoustic_transducer.mph');

model.modelNode.label('Components');

out = model;
