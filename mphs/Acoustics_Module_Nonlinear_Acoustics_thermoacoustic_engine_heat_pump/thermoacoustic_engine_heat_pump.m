function out = model
%
% thermoacoustic_engine_heat_pump.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Nonlinear_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');
model.physics.create('ht2', 'HeatTransferInFluids', 'geom1');
model.physics('ht2').model('comp1');
model.physics.create('tatd', 'ThermoacousticsSinglePhysicsTransient', 'geom1');
model.physics('tatd').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht2', true);
model.study('std1').feature('stat').setSolveFor('/physics/tatd', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('stack_end', '0.03[m]', 'Length of heat sinks in stack');
model.param.set('stack_n', '7', 'Number of stack elements');
model.param.set('stack_z', '1.4[m]', 'Position of stack');
model.param.set('stack_L', '140[mm]', 'Stack length');
model.param.set('tube_L', '4[m]', 'Tube length');
model.param.set('tube_R', '(stack_n*2-1/2)*stack_w', 'Tube radius');
model.param.set('stack_w', '1.5[mm]', 'Width of stack elements');
model.param.set('DeltaT', '270[K]', 'Temperature difference in stack');
model.param.set('p0', '1[kPa]', 'Initial pressure amplitude');
model.param.set('T0', '293.15[K]', 'Ambient temperature');
model.param.set('f0', 'c/(4*tube_L)', 'Frequency of initiation pulse');
model.param.set('t0', '1/f0', 'Wave period');
model.param.set('c', '343[m/s]', 'Sound speed');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'tube_R' 'tube_L*2'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'stack_w' 'stack_L'});
model.geom('geom1').feature('r2').set('pos', {'3/2*stack_w' '0'});
model.geom('geom1').feature('r2').setIndex('pos', 'stack_z', 1);
model.geom('geom1').run('r2');
model.geom('geom1').create('arr1', 'Array');
model.geom('geom1').feature('arr1').selection('input').set({'r2'});
model.geom('geom1').feature('arr1').set('fullsize', [6 2]);
model.geom('geom1').feature('arr1').set('displ', {'2*stack_w' '2*tube_L-2*stack_z-stack_L'});
model.geom('geom1').run('arr1');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', {'stack_w*0.5' '1'});
model.geom('geom1').feature('r3').setIndex('size', 'stack_L', 1);
model.geom('geom1').feature('r3').set('pos', {'0' 'stack_z'});
model.geom('geom1').run('r3');
model.geom('geom1').create('arr2', 'Array');
model.geom('geom1').feature('arr2').selection('input').set({'r3'});
model.geom('geom1').feature('arr2').set('fullsize', [1 2]);
model.geom('geom1').feature('arr2').set('displ', {'0' '2*tube_L-2*stack_z-stack_L'});
model.geom('geom1').run('arr2');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').selection('input').set({'r1'});
model.geom('geom1').feature('dif1').selection('input2').set({'arr1(1,1)' 'arr1(2,1)' 'arr1(3,1)' 'arr1(4,1)' 'arr1(5,1)' 'arr1(6,1)' 'arr2(1,1)'});
model.geom('geom1').run('dif1');
model.geom('geom1').create('ls1', 'LineSegment');
model.geom('geom1').feature('ls1').set('specify1', 'coord');
model.geom('geom1').feature('ls1').set('coord1', {'0' '2*tube_L-stack_z-stack_end'});
model.geom('geom1').feature('ls1').set('specify2', 'coord');
model.geom('geom1').feature('ls1').set('coord2', {'tube_R' '2*tube_L-stack_z-stack_end'});
model.geom('geom1').feature.duplicate('ls2', 'ls1');
model.geom('geom1').feature('ls2').set('coord1', {'0' 'stack_z'});
model.geom('geom1').feature('ls2').set('coord2', {'tube_R' 'stack_z'});
model.geom('geom1').feature.duplicate('ls3', 'ls2');
model.geom('geom1').feature('ls3').set('coord1', {'0' 'stack_z+stack_L'});
model.geom('geom1').feature('ls3').set('coord2', {'tube_R' 'stack_z+stack_L'});
model.geom('geom1').feature.duplicate('ls4', 'ls3');
model.geom('geom1').feature('ls4').set('coord1', {'0' '2*tube_L-stack_z-stack_L'});
model.geom('geom1').feature('ls4').set('coord2', {'tube_R' '2*tube_L-stack_z-stack_L'});
model.geom('geom1').feature.duplicate('ls5', 'ls4');
model.geom('geom1').feature('ls5').set('coord1', {'0' '2*tube_L-stack_z'});
model.geom('geom1').feature('ls5').set('coord2', {'tube_R' '2*tube_L-stack_z'});
model.geom('geom1').feature.duplicate('ls6', 'ls5');
model.geom('geom1').feature('ls6').set('coord1', {'0' '2*tube_L-stack_z+stack_L'});
model.geom('geom1').feature('ls6').set('coord2', {'tube_R' '2*tube_L-stack_z+stack_L'});
model.geom('geom1').feature.duplicate('ls7', 'ls6');
model.geom('geom1').feature('ls7').set('coord1', {'0' '2*tube_L-stack_z-2*stack_L'});
model.geom('geom1').feature('ls7').set('coord2', {'tube_R' '2*tube_L-stack_z-2*stack_L'});
model.geom('geom1').run('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Heat stack');
model.selection('sel1').set([4 5 11 12 16 17 21 22 26 27 31 32 36 37]);
model.selection.create('com1', 'Complement');
model.selection('com1').model('comp1');
model.selection('com1').label('Air');
model.selection('com1').set('input', {'sel1'});

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material('mat1').selection.named('com1');
model.material.create('sw1', 'Switch', 'comp1');
model.material('sw1').feature.create('mat1', 'Common');
model.material('sw1').feature('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('sw1').feature('mat1').label('Acrylic plastic');
model.material('sw1').feature('mat1').set('family', 'custom');
model.material('sw1').feature('mat1').set('customspecular', [0.9803921568627451 0.9803921568627451 0.9803921568627451]);
model.material('sw1').feature('mat1').set('customdiffuse', [0.39215686274509803 0.7843137254901961 0.39215686274509803]);
model.material('sw1').feature('mat1').set('customambient', [0.39215686274509803 0.7843137254901961 0.39215686274509803]);
model.material('sw1').feature('mat1').set('noise', true);
model.material('sw1').feature('mat1').set('lighting', 'phong');
model.material('sw1').feature('mat1').set('shininess', 1000);
model.material('sw1').feature('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'7.0e-5[1/K]' '0' '0' '0' '7.0e-5[1/K]' '0' '0' '0' '7.0e-5[1/K]'});
model.material('sw1').feature('mat1').propertyGroup('def').set('heatcapacity', '1470[J/(kg*K)]');
model.material('sw1').feature('mat1').propertyGroup('def').set('density', '1190[kg/m^3]');
model.material('sw1').feature('mat1').propertyGroup('def').set('thermalconductivity', {'0.18[W/(m*K)]' '0' '0' '0' '0.18[W/(m*K)]' '0' '0' '0' '0.18[W/(m*K)]'});
model.material('sw1').feature('mat1').propertyGroup('Enu').set('E', '3.2[GPa]');
model.material('sw1').feature('mat1').propertyGroup('Enu').set('nu', '0.35');
model.material('sw1').feature.create('mat2', 'Common');
model.material('sw1').feature('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('sw1').feature('mat2').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('sw1').feature('mat2').label('Copper');
model.material('sw1').feature('mat2').set('family', 'copper');
model.material('sw1').feature('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('sw1').feature('mat2').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('sw1').feature('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('sw1').feature('mat2').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('sw1').feature('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('sw1').feature('mat2').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('sw1').feature('mat2').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('sw1').feature('mat2').propertyGroup('Enu').set('E', '110[GPa]');
model.material('sw1').feature('mat2').propertyGroup('Enu').set('nu', '0.35');
model.material('sw1').feature('mat2').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('sw1').feature('mat2').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('sw1').feature('mat2').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('sw1').feature('mat2').propertyGroup('linzRes').addInput('temperature');
model.material('sw1').selection.named('sel1');

model.func.create('rm1', 'Ramp');
model.func('rm1').set('location', 'stack_z+stack_end');
model.func('rm1').set('slope', '-1/(stack_L-2*stack_end)');
model.func('rm1').set('cutoffactive', true);
model.func('rm1').set('cutoff', -1);
model.func('rm1').set('smoothzonelocactive', true);
model.func('rm1').set('smoothzoneloc', 0.02);
model.func('rm1').set('smoothzonecutoffactive', true);
model.func('rm1').set('smoothzonecutoff', 0.02);
model.func.create('an1', 'Analytic');
model.func('an1').label('Tstack');
model.func('an1').set('funcname', 'Tstack');
model.func('an1').set('expr', '(1+rm1(z/1[m]))*DeltaT');
model.func('an1').set('args', 'z');
model.func('an1').set('fununit', 'K');
model.func('an1').setIndex('argunit', 'm', 0);
model.func.create('an2', 'Analytic');
model.func('an2').label('p_initial');
model.func('an2').set('funcname', 'p_initial');
model.func('an2').set('expr', 'sin((z-tube_L)/(2*tube_L)*pi)');
model.func('an2').set('args', 'z');
model.func('an2').setIndex('argunit', 'm', 0);

model.physics('ht').selection.named('sel1');
model.physics('ht').create('temp1', 'TemperatureBoundary', 1);
model.physics('ht').feature('temp1').set('T0', 'T0');
model.physics('ht').feature('temp1').selection.set([13 22 30 32 38 46 48 54 62 64 70 78 80 86 94 96 102 110 112 118]);
model.physics('ht2').selection.named('com1');
model.physics('ht2').create('temp1', 'TemperatureBoundary', 1);
model.physics('ht2').feature('init1').set('Tinit', 'T0');
model.physics('ht2').feature('temp1').selection.set([5 17 18 25 27 33 41 42 43 49 57 58 59 65 73 74 75 81 89 90 91 97 105 106 107 113]);
model.physics('ht2').feature('temp1').set('T0', 'T0+Tstack(z)');
model.physics('ht2').feature('temp1').label('Temperature - Engine stack');
model.physics('ht2').create('temp2', 'TemperatureBoundary', 1);
model.physics('ht2').feature('temp2').set('T0', 'T0');
model.physics('ht2').feature('temp2').selection.set([2 9 13 16 20 22 28 29 30 32 36 38 44 45 46 48 52 54 60 61 62 64 68 70 76 77 78 80 84 86 92 93 94 96 100 102 108 109 110 112 116 118 121 122 123 124 125 126 127 128]);
model.physics('ht2').feature('temp2').label('Temperature - Outer and heat pump stack');
model.physics('tatd').selection.named('com1');
model.physics('tatd').prop('ShapeProperty').set('shapeorder_u', 1);
model.physics('tatd').prop('ShapeProperty').set('shapeorder_T', 1);
model.physics('tatd').prop('TransientSettings').set('fmax', 'f0');
model.physics('tatd').prop('Stabilization').set('selStab', 'SUPGStab');
model.physics('tatd').feature('tam1').set('minput_temperature_src', 'root.comp1.T2');
model.physics('tatd').feature('init1').set('p', 'p0*p_initial(z)');
model.physics('tatd').feature('wall1').label('Wall - Adiabatic');
model.physics('tatd').feature('wall1').set('ThermalCondition', 'Adiabatic');
model.physics('tatd').create('ntac1', 'NonlinearThermoviscousAcousticsContributions', 2);
model.physics('tatd').feature('ntac1').selection.set([3 6 9 10 14 15 19 20 24 25 29 30 34 35 39 40]);
model.physics('tatd').feature('ntac1').set('minput_temperature_src', 'root.comp1.T2');
model.physics('tatd').create('wall2', 'Wall', 1);
model.physics('tatd').feature('wall2').selection.set([3 5 13 17 22 25 26 27 30 32 33 38 41 42 43 46 48 49 54 57 58 59 62 64 65 70 73 74 75 78 80 81 86 89 90 91 94 96 97 102 105 106 107 110 112 113 118]);
model.physics('tatd').feature('wall2').label('Wall - Isothermal');
model.physics('tatd').create('noslip1', 'NoSlip', 1);
model.physics('tatd').feature('noslip1').selection.set([9 20 28 29 36 44 45 52 60 61 68 76 77 84 92 93 100 108 109 116]);

model.multiphysics.create('tatpb1', 'ThermoviscousAcousticThermalPerturbationBoundary', 'geom1', 1);
model.multiphysics('tatpb1').selection.set([9 20 28 29 36 44 45 52 60 61 68 76 77 84 92 93 100 108 109 116]);

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').label('Mapped - Heat engine');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([8 13 18 23 28 33 38]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([19 35 51 67 83 99 115]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 10);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([17 25 33 41 49 57 65 73 81 89 97 105 113 122]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 15);
model.mesh('mesh1').create('map2', 'Map');
model.mesh('mesh1').feature('map2').label('Mapped - Heat pump');
model.mesh('mesh1').feature('map2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map2').selection.set([4 5 9 10 11 12 14 15 16 17 19 20 21 22 24 25 26 27 29 30 31 32 34 35 36 37 39 40]);
model.mesh('mesh1').feature('map2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis1').selection.set([24 32 40 48 56 64 72 80 88 96 104 112 120]);
model.mesh('mesh1').feature('map2').feature('dis1').set('numelem', 10);
model.mesh('mesh1').feature('map2').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis2').set('numelem', 4);
model.mesh('mesh1').feature('map2').feature('dis2').selection.set([22 30 38 46 54 62 70 78 86 94 102 110 118]);
model.mesh('mesh1').feature('map2').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis3').set('numelem', 11);
model.mesh('mesh1').feature('map2').feature('dis3').selection.set([20 28 36 44 52 60 68 76 84 92 100 108 116 125]);
model.mesh('mesh1').feature('map2').create('dis4', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis4').selection.set([13]);
model.mesh('mesh1').feature('map2').feature('dis4').set('numelem', 2);
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').set('smoothtransition', false);
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([3 5 9 13 18 19 21 24 26 27 29 32 34 35 37 40 42 43 45 48 50 51 53 56 58 59 61 64 66 67 69 72 74 75 77 80 82 83 85 88 90 91 93 96 98 99 101 104 106 107 109 112 114 115 117 120 121 123 124 127 128]);
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 3);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'tube_R');
model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Steady Temperature Field');
model.study('std1').feature('stat').setEntry('activate', 'ht', false);
model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/ht', true);
model.study('std2').feature('time').setSolveFor('/physics/ht2', true);
model.study('std2').feature('time').setSolveFor('/physics/tatd', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/tatpb1', true);
model.study('std2').label('Study 2 - Time Dependent Acoustics - Stack Material');
model.study('std2').create('matsw', 'MaterialSweep');
model.study('std2').feature('matsw').setIndex('pname', 'matsw.comp1.sw1', 0);
model.study('std2').feature('matsw').setIndex('pcase', 'all', 0);
model.study('std2').feature('matsw').setIndex('plistarr', 'range(1,1,2)', 0);
model.study('std2').feature('matsw').setIndex('pname', 'matsw.comp1.sw1', 0);
model.study('std2').feature('matsw').setIndex('pcase', 'all', 0);
model.study('std2').feature('matsw').setIndex('plistarr', 'range(1,1,2)', 0);
model.study('std2').feature('time').setEntry('activate', 'ht2', false);
model.study('std2').feature('time').set('tlist', 'range(0,t0/20,0.5)');
model.study('std2').feature('time').set('usesol', true);
model.study('std2').feature('time').set('notsolmethod', 'sol');
model.study('std2').feature('time').set('notstudy', 'std1');
model.study.create('std3');
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').setSolveFor('/physics/ht', true);
model.study('std3').feature('time').setSolveFor('/physics/ht2', true);
model.study('std3').feature('time').setSolveFor('/physics/tatd', true);
model.study('std3').feature('time').setSolveFor('/multiphysics/tatpb1', true);
model.study('std3').label('Study 3 - Time Dependent Acoustics - Engine off');
model.study('std3').setGenPlots(false);
model.study('std3').feature('time').setEntry('activate', 'ht2', false);
model.study('std3').feature('time').set('tlist', 'range(0,t0/20,0.5)');
model.study.create('std4');
model.study('std4').create('time', 'Transient');
model.study('std4').feature('time').setSolveFor('/physics/ht', true);
model.study('std4').feature('time').setSolveFor('/physics/ht2', true);
model.study('std4').feature('time').setSolveFor('/physics/tatd', true);
model.study('std4').feature('time').setSolveFor('/multiphysics/tatpb1', true);
model.study('std4').label('Study 4 - Time Dependent Acoustics - No Nonlinear Contributions');
model.study('std4').setGenPlots(false);
model.study('std4').feature('time').setEntry('activate', 'ht2', false);
model.study('std4').feature('time').set('tlist', 'range(0,t0/20,0.5)');
model.study('std4').feature('time').set('usesol', true);
model.study('std4').feature('time').set('notsolmethod', 'sol');
model.study('std4').feature('time').set('notstudy', 'std1');
model.study('std4').feature('time').set('useadvanceddisable', true);
model.study('std4').feature('time').set('disabledphysics', {'tatd/ntac1'});

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables (ht2)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, heat transfer variables (ht2)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Temperature (ht2)');
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').feature('surf1').set('expr', 'T2');
model.result('pg1').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').run;

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,t0/20,0.5)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 1.0E-4);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('atolmethod', {'comp1_p' 'global' 'comp1_T' 'global' 'comp1_T2' 'global' 'comp1_T3' 'global' 'comp1_u' 'global'});
model.sol('sol2').feature('t1').set('atol', {'comp1_p' '1e-3' 'comp1_T' '1e-3' 'comp1_T2' '1e-3' 'comp1_T3' '1e-3' 'comp1_u' '1e-3'});
model.sol('sol2').feature('t1').set('atolvaluemethod', {'comp1_p' 'factor' 'comp1_T' 'factor' 'comp1_T2' 'factor' 'comp1_T3' 'factor' 'comp1_u' 'factor'});
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsgenalpha', 'manual');
model.sol('sol2').feature('t1').set('timestepgenalpha', '1/(60*f0)');
model.sol('sol2').feature('t1').set('timestepbdf', '1/(60*f0)');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('timemethod', 'genalpha');
model.sol('sol2').feature('t1').set('estrat', 'exclude');
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('initialstepbdfactive', true);
model.sol('sol2').feature('t1').set('initialstepbdf', '1/(100*f0)');
model.sol('sol2').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol2').feature('t1').set('maxstepbdf', 'min(1e100,1/(30*f0))');
model.sol('sol2').feature('t1').set('initialstepgenalphaactive', true);
model.sol('sol2').feature('t1').set('initialstepgenalpha', '1/(100*f0)');
model.sol('sol2').feature('t1').set('maxstepconstraintgenalpha', 'const');
model.sol('sol2').feature('t1').set('maxstepgenalpha', 'min(1e100,1/(30*f0))');
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').create('seDef', 'Segregated');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol2').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol2').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol2').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol2').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('t1').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol2').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol2').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol2').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol2').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').feature('t1').feature.remove('seDef');
model.sol('sol2').attach('std2');

model.batch.create('pm1', 'MaterialSweep');
model.batch('pm1').study('std2');
model.batch('pm1').create('so1', 'Solutionseq');
model.batch('pm1').feature('so1').set('seq', 'sol2');
model.batch('pm1').feature('so1').set('store', 'on');
model.batch('pm1').feature('so1').set('clear', 'on');
model.batch('pm1').feature('so1').set('psol', 'none');
model.batch('pm1').set('pname', {'matsw.comp1.sw1'});
model.batch('pm1').set('plistarr', {'range(1,1,2)'});
model.batch('pm1').set('sweeptype', 'filled');
model.batch('pm1').set('probesel', 'all');
model.batch('pm1').set('probes', {});
model.batch('pm1').set('plot', 'off');
model.batch('pm1').set('err', 'on');
model.batch('pm1').attach('std2');
model.batch('pm1').set('control', 'matsw');

model.sol.create('sol3');
model.sol('sol3').study('std2');
model.sol('sol3').label('Parametric Solutions 1');

model.batch('pm1').feature('so1').set('psol', 'sol3');
model.batch('pm1').run('compute');

model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Temperature (ht)');
model.result('pg2').set('data', 'dset3');
model.result('pg2').setIndex('looplevel', 215, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').set('dataisaxisym', 'off');
model.result('pg2').set('data', 'dset3');
model.result('pg2').setIndex('looplevel', 215, 0);
model.result('pg2').setIndex('looplevel', 2, 1);
model.result('pg2').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solutionparams', 'parent');
model.result('pg2').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Acoustic Pressure (tatd)');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 215, 0);
model.result('pg3').setIndex('looplevel', 2, 1);
model.result('pg3').set('dataisaxisym', 'off');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 215, 0);
model.result('pg3').setIndex('looplevel', 2, 1);
model.result('pg3').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond2/pg2');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'tatd.p_t');
model.result('pg3').feature('surf1').set('colortable', 'Wave');
model.result('pg3').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Acoustic Velocity (tatd)');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 215, 0);
model.result('pg4').setIndex('looplevel', 2, 1);
model.result('pg4').set('dataisaxisym', 'off');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 215, 0);
model.result('pg4').setIndex('looplevel', 2, 1);
model.result('pg4').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond2/pg1');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Surface');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('expr', 'tatd.v_inst');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').label('Revolution 2D');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset3');
model.result.dataset('rev1').selection.geom('geom1', 2);
model.result.dataset('rev1').selection.set([1 2 3 6 7 8 9 10 13 14 15 18 19 20 23 24 25 28 29 30 33 34 35 38 39 40]);
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Temperature Variation (tatd)');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').set('data', 'rev1');
model.result('pg5').setIndex('looplevel', 215, 0);
model.result('pg5').setIndex('looplevel', 2, 1);
model.result('pg5').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond2/pcond2/pg1');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').label('Surface');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('expr', 'tatd.T_t');
model.result('pg5').feature('surf1').set('colortable', 'ThermalWave');
model.result('pg5').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').label('Temperature Variation (tatpb1)');
model.result('pg6').set('data', 'dset3');
model.result('pg6').setIndex('looplevel', 215, 0);
model.result('pg6').setIndex('looplevel', 2, 1);
model.result('pg6').set('dataisaxisym', 'off');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').set('data', 'dset3');
model.result('pg6').setIndex('looplevel', 215, 0);
model.result('pg6').setIndex('looplevel', 2, 1);
model.result('pg6').set('defaultPlotID', 'temperatureVariation');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('expr', 'tatpb1.T_t');
model.result('pg6').feature('surf1').set('colortable', 'ThermalWave');
model.result('pg6').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result('pg2').run;

model.sol.create('sol6');
model.sol('sol6').study('std3');
model.sol('sol6').create('st1', 'StudyStep');
model.sol('sol6').feature('st1').set('study', 'std3');
model.sol('sol6').feature('st1').set('studystep', 'time');
model.sol('sol6').create('v1', 'Variables');
model.sol('sol6').feature('v1').set('control', 'time');
model.sol('sol6').create('t1', 'Time');
model.sol('sol6').feature('t1').set('tlist', 'range(0,t0/20,0.5)');
model.sol('sol6').feature('t1').set('plot', 'off');
model.sol('sol6').feature('t1').set('plotgroup', 'pg1');
model.sol('sol6').feature('t1').set('plotfreq', 'tout');
model.sol('sol6').feature('t1').set('probesel', 'all');
model.sol('sol6').feature('t1').set('probes', {});
model.sol('sol6').feature('t1').set('probefreq', 'tsteps');
model.sol('sol6').feature('t1').set('rtol', 1.0E-4);
model.sol('sol6').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol6').feature('t1').set('atolmethod', {'comp1_p' 'global' 'comp1_T' 'global' 'comp1_T2' 'global' 'comp1_T3' 'global' 'comp1_u' 'global'});
model.sol('sol6').feature('t1').set('atol', {'comp1_p' '1e-3' 'comp1_T' '1e-3' 'comp1_T2' '1e-3' 'comp1_T3' '1e-3' 'comp1_u' '1e-3'});
model.sol('sol6').feature('t1').set('atolvaluemethod', {'comp1_p' 'factor' 'comp1_T' 'factor' 'comp1_T2' 'factor' 'comp1_T3' 'factor' 'comp1_u' 'factor'});
model.sol('sol6').feature('t1').set('reacf', true);
model.sol('sol6').feature('t1').set('storeudot', true);
model.sol('sol6').feature('t1').set('tstepsgenalpha', 'manual');
model.sol('sol6').feature('t1').set('timestepgenalpha', '1/(60*f0)');
model.sol('sol6').feature('t1').set('timestepbdf', '1/(60*f0)');
model.sol('sol6').feature('t1').set('endtimeinterpolation', true);
model.sol('sol6').feature('t1').set('timemethod', 'genalpha');
model.sol('sol6').feature('t1').set('estrat', 'exclude');
model.sol('sol6').feature('t1').set('maxorder', 2);
model.sol('sol6').feature('t1').set('initialstepbdfactive', true);
model.sol('sol6').feature('t1').set('initialstepbdf', '1/(100*f0)');
model.sol('sol6').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol6').feature('t1').set('maxstepbdf', 'min(1e100,1/(30*f0))');
model.sol('sol6').feature('t1').set('initialstepgenalphaactive', true);
model.sol('sol6').feature('t1').set('initialstepgenalpha', '1/(100*f0)');
model.sol('sol6').feature('t1').set('maxstepconstraintgenalpha', 'const');
model.sol('sol6').feature('t1').set('maxstepgenalpha', 'min(1e100,1/(30*f0))');
model.sol('sol6').feature('t1').set('control', 'time');
model.sol('sol6').feature('t1').create('seDef', 'Segregated');
model.sol('sol6').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol6').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol6').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol6').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol6').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol6').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol6').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol6').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol6').feature('t1').create('d1', 'Direct');
model.sol('sol6').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol6').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol6').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol6').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol6').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol6').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol6').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol6').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol6').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol6').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol6').feature('t1').feature.remove('fcDef');
model.sol('sol6').feature('t1').feature.remove('seDef');
model.sol('sol6').attach('std3');
model.sol('sol6').runAll;
model.sol.create('sol7');
model.sol('sol7').study('std4');
model.sol('sol7').create('st1', 'StudyStep');
model.sol('sol7').feature('st1').set('study', 'std4');
model.sol('sol7').feature('st1').set('studystep', 'time');
model.sol('sol7').create('v1', 'Variables');
model.sol('sol7').feature('v1').set('control', 'time');
model.sol('sol7').create('t1', 'Time');
model.sol('sol7').feature('t1').set('tlist', 'range(0,t0/20,0.5)');
model.sol('sol7').feature('t1').set('plot', 'off');
model.sol('sol7').feature('t1').set('plotgroup', 'pg1');
model.sol('sol7').feature('t1').set('plotfreq', 'tout');
model.sol('sol7').feature('t1').set('probesel', 'all');
model.sol('sol7').feature('t1').set('probes', {});
model.sol('sol7').feature('t1').set('probefreq', 'tsteps');
model.sol('sol7').feature('t1').set('rtol', 1.0E-4);
model.sol('sol7').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol7').feature('t1').set('atolmethod', {'comp1_p' 'global' 'comp1_T' 'global' 'comp1_T2' 'global' 'comp1_T3' 'global' 'comp1_u' 'global'});
model.sol('sol7').feature('t1').set('atol', {'comp1_p' '1e-3' 'comp1_T' '1e-3' 'comp1_T2' '1e-3' 'comp1_T3' '1e-3' 'comp1_u' '1e-3'});
model.sol('sol7').feature('t1').set('atolvaluemethod', {'comp1_p' 'factor' 'comp1_T' 'factor' 'comp1_T2' 'factor' 'comp1_T3' 'factor' 'comp1_u' 'factor'});
model.sol('sol7').feature('t1').set('reacf', true);
model.sol('sol7').feature('t1').set('storeudot', true);
model.sol('sol7').feature('t1').set('tstepsgenalpha', 'manual');
model.sol('sol7').feature('t1').set('timestepgenalpha', '1/(60*f0)');
model.sol('sol7').feature('t1').set('timestepbdf', '1/(60*f0)');
model.sol('sol7').feature('t1').set('endtimeinterpolation', true);
model.sol('sol7').feature('t1').set('timemethod', 'genalpha');
model.sol('sol7').feature('t1').set('estrat', 'exclude');
model.sol('sol7').feature('t1').set('maxorder', 2);
model.sol('sol7').feature('t1').set('initialstepbdfactive', true);
model.sol('sol7').feature('t1').set('initialstepbdf', '1/(100*f0)');
model.sol('sol7').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol7').feature('t1').set('maxstepbdf', 'min(1e100,1/(30*f0))');
model.sol('sol7').feature('t1').set('initialstepgenalphaactive', true);
model.sol('sol7').feature('t1').set('initialstepgenalpha', '1/(100*f0)');
model.sol('sol7').feature('t1').set('maxstepconstraintgenalpha', 'const');
model.sol('sol7').feature('t1').set('maxstepgenalpha', 'min(1e100,1/(30*f0))');
model.sol('sol7').feature('t1').set('control', 'time');
model.sol('sol7').feature('t1').create('seDef', 'Segregated');
model.sol('sol7').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol7').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol7').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol7').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol7').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol7').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol7').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol7').feature('t1').create('d1', 'Direct');
model.sol('sol7').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol7').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol7').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol7').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol7').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol7').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol7').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol7').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol7').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol7').feature('t1').feature.remove('fcDef');
model.sol('sol7').feature('t1').feature.remove('seDef');
model.sol('sol7').attach('std4');
model.sol('sol7').runAll;

model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Pressure - Engine on/off');
model.result('pg7').set('data', 'dset3');
model.result('pg7').setIndex('looplevelinput', 'first', 1);
model.result('pg7').set('titletype', 'none');
model.result('pg7').create('ptgr1', 'PointGraph');
model.result('pg7').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr1').set('linewidth', 'preference');
model.result('pg7').feature('ptgr1').selection.set([1]);
model.result('pg7').feature('ptgr1').set('expr', 'tatd.p_t');
model.result('pg7').run;
model.result('pg7').create('ptgr2', 'PointGraph');
model.result('pg7').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr2').set('linewidth', 'preference');
model.result('pg7').feature('ptgr2').set('data', 'dset4');
model.result('pg7').feature('ptgr2').set('expr', 'tatd.p_t');
model.result('pg7').feature('ptgr2').selection.set([1]);
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Temperature - Nonlinear Contributions On/Off');
model.result('pg8').set('data', 'dset3');
model.result('pg8').setIndex('looplevelinput', 'first', 1);
model.result('pg8').set('titletype', 'none');
model.result('pg8').create('ptgr1', 'PointGraph');
model.result('pg8').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg8').feature('ptgr1').set('linewidth', 'preference');
model.result('pg8').feature('ptgr1').selection.set([12]);
model.result('pg8').feature('ptgr1').set('expr', 'tatd.T_t');
model.result('pg8').run;
model.result('pg8').create('ptgr2', 'PointGraph');
model.result('pg8').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg8').feature('ptgr2').set('linewidth', 'preference');
model.result('pg8').feature('ptgr2').selection.set([12]);
model.result('pg8').feature('ptgr2').set('data', 'dset5');
model.result('pg8').feature('ptgr2').set('expr', 'tatd.T_t');
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Temperature - Stack Material');
model.result('pg9').set('data', 'dset3');
model.result('pg9').set('titletype', 'none');
model.result('pg9').create('ptgr1', 'PointGraph');
model.result('pg9').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg9').feature('ptgr1').set('linewidth', 'preference');
model.result('pg9').feature('ptgr1').selection.set([12]);
model.result('pg9').feature('ptgr1').set('expr', 'tatd.T_t');
model.result('pg9').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 1, 1);
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 201, 0);
model.result('pg4').run;

model.title('Thermoacoustic Engine and Heat Pump');

model.description('A thermoacoustic engine is a device with no moving parts that can generate acoustic energy from temperature gradients within the engine. It uses the relationship between the movement of oscillating air and the temperature changes in the air compressed and expanded by the acoustic waves. The same mechanics can be used to generate a temperature gradient by acoustic energy, which is called a thermoacoustic heat pump. This model simulates a system which couples a standing-wave thermoacoustic engine to a heat pump.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;

model.label('thermoacoustic_engine_heat_pump.mph');

model.modelNode.label('Components');

out = model;
