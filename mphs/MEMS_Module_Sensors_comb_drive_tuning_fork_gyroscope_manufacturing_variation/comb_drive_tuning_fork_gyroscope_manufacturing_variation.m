function out = model
%
% comb_drive_tuning_fork_gyroscope_manufacturing_variation.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/MEMS_Module/Sensors');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);

model.param.label('Parameters 1 - Geometry & Mesh');
model.param.set('l_mass', '200[um]');
model.param.descr('l_mass', 'Mass length');
model.param.set('w_mass', 'l_mass');
model.param.descr('w_mass', 'Mass width');
model.param.set('y_spring_l', '350[um]');
model.param.descr('y_spring_l', 'Y spring length');
model.param.set('y_spring_w', '10[um]');
model.param.descr('y_spring_w', 'Y spring width');
model.param.set('etch_dim', '10[um]');
model.param.descr('etch_dim', 'Etch hole dimension');
model.param.set('n_etch_x', '8');
model.param.descr('n_etch_x', ['Number of etch holes, x' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'direction']);
model.param.set('n_etch_y', '8');
model.param.descr('n_etch_y', ['Number of etch holes, y' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'direction']);
model.param.set('t_beam', '12[um]');
model.param.descr('t_beam', 'Structure layer thickness');
model.param.set('w_anchor', '5[um]');
model.param.descr('w_anchor', 'Anchor width');
model.param.set('tether_x', '55[um]');
model.param.descr('tether_x', 'Tether beam x-coordinate');
model.param.set('x_spring_l', '150[um]');
model.param.descr('x_spring_l', 'X spring length');
model.param.set('x_spring_w', '4[um]');
model.param.descr('x_spring_w', 'X spring width');
model.param.set('tether_l', '120[um]');
model.param.descr('tether_l', 'Tether beam length');
model.param.set('tether_w', '8[um]');
model.param.descr('tether_w', 'Tether beam width');
model.param.set('w_stator_base', '15[um]');
model.param.descr('w_stator_base', 'Stator base width');
model.param.set('rotor_stator_overlap', '40[um]');
model.param.descr('rotor_stator_overlap', 'Rotor/stator overlap length');
model.param.set('l_rotor', '50[um]');
model.param.descr('l_rotor', 'Rotor comb length');
model.param.set('w_rotor', '8[um]');
model.param.descr('w_rotor', 'Rotor comb width');
model.param.set('n_combs', '8');
model.param.descr('n_combs', 'Number of combs');
model.param.set('t_anchor', '2[um]');
model.param.descr('t_anchor', 'Anchor layer thickness');
model.param.set('gap_combs', '2[um]');
model.param.descr('gap_combs', 'Gap between combs');
model.param.set('rotor_spacing', '(w_mass-w_rotor*n_combs)/(n_combs+1)');
model.param.descr('rotor_spacing', 'Spacing between rotor combs');
model.param.set('w_stator', 'rotor_spacing-2*gap_combs');
model.param.descr('w_stator', 'Stator comb width');
model.param.set('electrode_ratio', '0.9');
model.param.descr('electrode_ratio', 'Ratio for dimension of sense electrode');
model.param.set('delta', '0.01[um]');
model.param.descr('delta', 'Small distance for selections');
model.param.set('mesh_factor', '1');
model.param.descr('mesh_factor', 'Mesh size factor (larger is bigger elements)');
model.param.create('par2');
model.param('par2').label('Parameters 2 - Physics');
model.param('par2').set('Vbase', '5[V]');
model.param('par2').descr('Vbase', 'Potential difference between mass and sense electrode');
model.param('par2').set('Vcomb', '60[V]');
model.param('par2').descr('Vcomb', 'Potential difference between comb rotors and stators');
model.param('par2').set('Q', '500');
model.param('par2').descr('Q', 'Resonator quality factor');
model.param('par2').set('V_ac', '3[V]');
model.param('par2').descr('V_ac', 'AC Comb voltage');
model.param('par2').set('Omega', '0[deg/s]');
model.param('par2').descr('Omega', 'Angular rotation rate');
model.param('par2').set('AC_on', '0');
model.param('par2').descr('AC_on', '1 to turn on AC drive, 0 otherwise');

model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').label('Work Plane 1 - Mass');
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').label('Rectangle 1 - Mass: +X');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', {'l_mass' 'w_mass'});
model.geom('geom1').feature('wp1').geom.feature('r1').set('base', 'center');
model.geom('geom1').feature('wp1').geom.feature('r1').set('pos', {'y_spring_l/2' '0'});
model.geom('geom1').feature('wp1').geom.selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').feature('wp1').geom.selection('csel1').label('Mass');
model.geom('geom1').feature('wp1').geom.feature('r1').set('contributeto', 'csel1');
model.geom('geom1').feature('wp1').geom.feature.duplicate('r2', 'r1');
model.geom('geom1').feature('wp1').geom.feature('r2').label('Rectangle 2 - Footprint of sense electrode');
model.geom('geom1').feature('wp1').geom.feature('r2').set('size', {'electrode_ratio*l_mass' 'w_mass'});
model.geom('geom1').feature('wp1').geom.feature('r2').setIndex('size', 'electrode_ratio*w_mass', 1);
model.geom('geom1').feature('wp1').geom.run('r2');
model.geom('geom1').feature('wp1').geom.create('pt1', 'Point');
model.geom('geom1').feature('wp1').geom.feature('pt1').label('Point 1 - For mesh copy');
model.geom('geom1').feature('wp1').geom.feature('pt1').setIndex('p', 'y_spring_l/2-electrode_ratio*l_mass/2', 0);
model.geom('geom1').feature('wp1').geom.feature('pt1').setIndex('p', 'electrode_ratio*w_mass/5', 1);
model.geom('geom1').feature('wp1').geom.feature('pt1').set('contributeto', 'csel1');
model.geom('geom1').feature('wp1').geom.run('pt1');
model.geom('geom1').feature('wp1').geom.create('r3', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r3').set('size', {'etch_dim' 'etch_dim'});
model.geom('geom1').feature('wp1').geom.feature('r3').set('base', 'center');
model.geom('geom1').feature('wp1').geom.feature('r3').set('pos', {'y_spring_l/2+w_mass/2-w_mass/(n_etch_x+1)' '0'});
model.geom('geom1').feature('wp1').geom.feature('r3').setIndex('pos', 'l_mass/2-l_mass/(n_etch_x+1)', 1);
model.geom('geom1').feature('wp1').geom.selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').feature('wp1').geom.selection('csel2').label('Subtract');
model.geom('geom1').feature('wp1').geom.feature('r3').set('contributeto', 'csel2');
model.geom('geom1').feature('wp1').geom.run('r3');
model.geom('geom1').feature('wp1').geom.create('arr1', 'Array');
model.geom('geom1').feature('wp1').geom.feature('arr1').selection('input').named('csel2');
model.geom('geom1').feature('wp1').geom.feature('arr1').set('fullsize', {'n_etch_x' 'n_etch_y'});
model.geom('geom1').feature('wp1').geom.feature('arr1').set('displ', {'-w_mass/(n_etch_x+1)' '0'});
model.geom('geom1').feature('wp1').geom.feature('arr1').setIndex('displ', '-l_mass/(n_etch_x+1)', 1);
model.geom('geom1').feature('wp1').geom.run('arr1');
model.geom('geom1').feature('wp1').geom.create('dif1', 'Difference');
model.geom('geom1').feature('wp1').geom.feature('dif1').selection('input').named('csel1');
model.geom('geom1').feature('wp1').geom.feature('dif1').selection('input2').named('csel2');
model.geom('geom1').feature('wp1').geom.run('dif1');
model.geom('geom1').feature('wp1').geom.create('mir1', 'Mirror');
model.geom('geom1').feature('wp1').geom.feature('mir1').selection('input').named('csel1');
model.geom('geom1').feature('wp1').geom.feature('mir1').set('keep', true);
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').label('Extrude 1 - Mass');
model.geom('geom1').feature('ext1').setIndex('distance', 't_beam', 0);
model.geom('geom1').feature('ext1').set('selresult', true);
model.geom('geom1').feature('ext1').set('selresultshow', 'all');
model.geom('geom1').run('ext1');
model.geom('geom1').run('ext1');
model.geom('geom1').create('wp2', 'WorkPlane');
model.geom('geom1').feature('wp2').set('unite', true);
model.geom('geom1').feature('wp2').label('Work Plane 2 - Anchors');
model.geom('geom1').feature('wp2').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp2').geom.feature('r1').label('Rectangle 1 - Spring Anchor');
model.geom('geom1').feature('wp2').geom.feature('r1').set('size', {'w_anchor' 'w_anchor'});
model.geom('geom1').feature('wp2').geom.feature('r1').set('base', 'center');
model.geom('geom1').feature('wp2').geom.feature('r1').set('pos', {'tether_x' 'l_mass/2+x_spring_l+y_spring_w/2-y_spring_w/2-tether_l+w_anchor'});
model.geom('geom1').feature('wp2').geom.selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').feature('wp2').geom.selection('csel1').label('Anchors');
model.geom('geom1').feature('wp2').geom.feature('r1').set('contributeto', 'csel1');
model.geom('geom1').feature('wp2').geom.feature.duplicate('r2', 'r1');
model.geom('geom1').feature('wp2').geom.feature('r2').label('Rectangle 2 - Stator Anchor');
model.geom('geom1').feature('wp2').geom.feature('r2').setIndex('pos', 'y_spring_l/2+w_mass/2+w_stator_base/2+2*l_rotor-rotor_stator_overlap', 0);
model.geom('geom1').feature('wp2').geom.feature('r2').setIndex('pos', 'l_mass/2-0.5*l_mass/(n_combs+1)', 1);
model.geom('geom1').feature('wp2').geom.run('r2');
model.geom('geom1').feature('wp2').geom.create('mir1', 'Mirror');
model.geom('geom1').feature('wp2').geom.feature('mir1').selection('input').named('csel1');
model.geom('geom1').feature('wp2').geom.feature('mir1').set('keep', true);
model.geom('geom1').feature('wp2').geom.feature.duplicate('r3', 'r2');
model.geom('geom1').feature('wp2').geom.feature('r3').label('Rectangle 3 - Stator Anchor 2');
model.geom('geom1').feature('wp2').geom.feature('r3').setIndex('pos', 0, 0);
model.geom('geom1').feature('wp2').geom.run('r3');
model.geom('geom1').feature('wp2').geom.create('mir2', 'Mirror');
model.geom('geom1').feature('wp2').geom.feature('mir2').selection('input').named('csel1');
model.geom('geom1').feature('wp2').geom.feature('mir2').set('keep', true);
model.geom('geom1').feature('wp2').geom.feature('mir2').set('axis', [0 1]);
model.geom('geom1').run('wp2');
model.geom('geom1').feature.create('ext2', 'Extrude');
model.geom('geom1').feature('ext2').label('Extrude 2 - Anchors');
model.geom('geom1').feature('ext2').setIndex('distance', 't_anchor', 0);
model.geom('geom1').feature('ext2').set('reverse', true);
model.geom('geom1').feature('ext2').set('selresult', true);
model.geom('geom1').feature('ext2').set('selresultshow', 'all');
model.geom('geom1').run('ext2');
model.geom('geom1').run('ext2');
model.geom('geom1').create('wp3', 'WorkPlane');
model.geom('geom1').feature('wp3').set('unite', true);
model.geom('geom1').feature('wp3').label('Work Plane 3 - Springs');
model.geom('geom1').feature('wp3').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp3').geom.feature('r1').label('Rectangle 1 - Y Spring: +Y');
model.geom('geom1').feature('wp3').geom.feature('r1').set('size', {'y_spring_l+x_spring_w' '1'});
model.geom('geom1').feature('wp3').geom.feature('r1').setIndex('size', 'y_spring_w', 1);
model.geom('geom1').feature('wp3').geom.feature('r1').set('base', 'center');
model.geom('geom1').feature('wp3').geom.feature('r1').set('pos', {'0' 'l_mass/2+x_spring_l+y_spring_w/2'});
model.geom('geom1').feature('wp3').geom.selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').feature('wp3').geom.selection('csel1').label('Mirror Y');
model.geom('geom1').feature('wp3').geom.feature('r1').set('contributeto', 'csel1');
model.geom('geom1').feature('wp3').geom.run('r1');
model.geom('geom1').feature('wp3').geom.create('r2', 'Rectangle');
model.geom('geom1').feature('wp3').geom.feature('r2').label('Rectangle 2 - X Spring: +X +Y');
model.geom('geom1').feature('wp3').geom.feature('r2').set('size', {'x_spring_w' 'x_spring_l+y_spring_w'});
model.geom('geom1').feature('wp3').geom.feature('r2').set('base', 'center');
model.geom('geom1').feature('wp3').geom.feature('r2').set('pos', {'y_spring_l/2' '0'});
model.geom('geom1').feature('wp3').geom.feature('r2').setIndex('pos', 'l_mass/2+x_spring_l/2+y_spring_w/2', 1);
model.geom('geom1').feature('wp3').geom.selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').feature('wp3').geom.selection('csel2').label('Mirror XY');
model.geom('geom1').feature('wp3').geom.feature('r2').set('contributeto', 'csel2');
model.geom('geom1').feature('wp3').geom.run('r2');
model.geom('geom1').feature('wp3').geom.create('r3', 'Rectangle');
model.geom('geom1').feature('wp3').geom.feature('r3').label('Rectangle 3 - Tether: +X +Y');
model.geom('geom1').feature('wp3').geom.feature('r3').set('size', {'tether_w' 'tether_l+y_spring_w'});
model.geom('geom1').feature('wp3').geom.feature('r3').set('pos', {'tether_x-tether_w/2' '0'});
model.geom('geom1').feature('wp3').geom.feature('r3').setIndex('pos', 'l_mass/2+x_spring_l+y_spring_w/2-y_spring_w/2-tether_l', 1);
model.geom('geom1').feature('wp3').geom.feature('r3').set('contributeto', 'csel2');
model.geom('geom1').feature('wp3').geom.run('r3');
model.geom('geom1').feature('wp3').geom.create('mir1', 'Mirror');
model.geom('geom1').feature('wp3').geom.feature('mir1').selection('input').named('csel2');
model.geom('geom1').feature('wp3').geom.feature('mir1').set('keep', true);
model.geom('geom1').feature('wp3').geom.feature('mir1').set('axis', [0 1]);
model.geom('geom1').feature('wp3').geom.run('mir1');
model.geom('geom1').feature('wp3').geom.create('mir2', 'Mirror');
model.geom('geom1').feature('wp3').geom.feature('mir2').selection('input').named('csel2');
model.geom('geom1').feature('wp3').geom.feature('mir2').set('keep', true);
model.geom('geom1').feature('wp3').geom.run('mir2');
model.geom('geom1').feature('wp3').geom.create('mir3', 'Mirror');
model.geom('geom1').feature('wp3').geom.feature('mir3').selection('input').named('csel1');
model.geom('geom1').feature('wp3').geom.feature('mir3').set('axis', [0 1]);
model.geom('geom1').feature('wp3').geom.feature('mir3').set('keep', true);
model.geom('geom1').run('wp3');
model.geom('geom1').feature.create('ext3', 'Extrude');
model.geom('geom1').feature('ext3').label('Extrude 3 - Springs');
model.geom('geom1').feature('ext3').setIndex('distance', 't_beam', 0);
model.geom('geom1').feature('ext3').set('selresult', true);
model.geom('geom1').feature('ext3').set('selresultshow', 'all');
model.geom('geom1').run('ext3');
model.geom('geom1').run('ext3');
model.geom('geom1').create('wp4', 'WorkPlane');
model.geom('geom1').feature('wp4').set('unite', true);
model.geom('geom1').feature('wp4').label('Work Plane 4 - Rotors');
model.geom('geom1').feature('wp4').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp4').geom.feature('r1').label('Rectangle 1 - 1st Comb');
model.geom('geom1').feature('wp4').geom.feature('r1').set('size', {'l_rotor' 'w_rotor'});
model.geom('geom1').feature('wp4').geom.feature('r1').set('base', 'center');
model.geom('geom1').feature('wp4').geom.feature('r1').set('pos', {'y_spring_l/2+w_mass/2+l_rotor/2' '0'});
model.geom('geom1').feature('wp4').geom.feature('r1').setIndex('pos', 'w_mass/2-rotor_spacing-w_rotor/2', 1);
model.geom('geom1').feature('wp4').geom.selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').feature('wp4').geom.selection('csel1').label('Rotors');
model.geom('geom1').feature('wp4').geom.feature('r1').set('contributeto', 'csel1');
model.geom('geom1').feature('wp4').geom.run('r1');
model.geom('geom1').feature('wp4').geom.create('arr1', 'Array');
model.geom('geom1').feature('wp4').geom.feature('arr1').selection('input').named('csel1');
model.geom('geom1').feature('wp4').geom.feature('arr1').set('type', 'linear');
model.geom('geom1').feature('wp4').geom.feature('arr1').set('linearsize', 'n_combs');
model.geom('geom1').feature('wp4').geom.feature('arr1').set('displ', {'0' '-(rotor_spacing+w_rotor)'});
model.geom('geom1').feature('wp4').geom.run('arr1');
model.geom('geom1').feature('wp4').geom.create('mir1', 'Mirror');
model.geom('geom1').feature('wp4').geom.feature('mir1').selection('input').named('csel1');
model.geom('geom1').feature('wp4').geom.feature('mir1').set('keep', true);
model.geom('geom1').feature('wp4').geom.feature('mir1').set('pos', {'y_spring_l/2' '0'});
model.geom('geom1').feature('wp4').geom.run('mir1');
model.geom('geom1').feature('wp4').geom.create('mir2', 'Mirror');
model.geom('geom1').feature('wp4').geom.feature('mir2').selection('input').named('csel1');
model.geom('geom1').feature('wp4').geom.feature('mir2').set('keep', true);
model.geom('geom1').run('wp4');
model.geom('geom1').feature.create('ext4', 'Extrude');
model.geom('geom1').feature('ext4').label('Extrude 4 - Rotors');
model.geom('geom1').feature('ext4').setIndex('distance', 't_beam', 0);
model.geom('geom1').feature('ext4').set('selresult', true);
model.geom('geom1').feature('ext4').set('selresultshow', 'all');
model.geom('geom1').run('ext4');
model.geom('geom1').run('ext4');
model.geom('geom1').create('wp5', 'WorkPlane');
model.geom('geom1').feature('wp5').set('unite', true);
model.geom('geom1').feature('wp5').label('Work Plane 5 - Stators');
model.geom('geom1').feature('wp5').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp5').geom.feature('r1').label('Rectangle 1 - 1st Comb');
model.geom('geom1').feature('wp5').geom.feature('r1').set('size', {'l_rotor' 'w_stator'});
model.geom('geom1').feature('wp5').geom.feature('r1').set('base', 'center');
model.geom('geom1').feature('wp5').geom.feature('r1').set('pos', {'y_spring_l/2+w_mass/2+l_rotor/2+l_rotor-rotor_stator_overlap' '0'});
model.geom('geom1').feature('wp5').geom.feature('r1').setIndex('pos', 'w_mass/2-0.5*rotor_spacing', 1);
model.geom('geom1').feature('wp5').geom.selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').feature('wp5').geom.selection('csel1').label('Stators');
model.geom('geom1').feature('wp5').geom.feature('r1').set('contributeto', 'csel1');
model.geom('geom1').feature('wp5').geom.run('r1');
model.geom('geom1').feature('wp5').geom.create('arr1', 'Array');
model.geom('geom1').feature('wp5').geom.feature('arr1').selection('input').named('csel1');
model.geom('geom1').feature('wp5').geom.feature('arr1').set('type', 'linear');
model.geom('geom1').feature('wp5').geom.feature('arr1').set('linearsize', 'n_combs+1');
model.geom('geom1').feature('wp5').geom.feature('arr1').set('displ', {'0' '-(rotor_spacing+w_rotor)'});
model.geom('geom1').feature('wp5').geom.run('arr1');
model.geom('geom1').feature('wp5').geom.create('r2', 'Rectangle');
model.geom('geom1').feature('wp5').geom.feature('r2').label('Rectangle 2 - Stator Base');
model.geom('geom1').feature('wp5').geom.feature('r2').set('size', {'w_stator_base' '1'});
model.geom('geom1').feature('wp5').geom.feature('r2').setIndex('size', 'w_mass-rotor_spacing+w_stator', 1);
model.geom('geom1').feature('wp5').geom.feature('r2').set('base', 'center');
model.geom('geom1').feature('wp5').geom.feature('r2').set('pos', {'y_spring_l/2+w_mass/2+w_stator_base/2+2*l_rotor-rotor_stator_overlap' '0'});
model.geom('geom1').feature('wp5').geom.selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').feature('wp5').geom.selection('csel2').label('Stator Base');
model.geom('geom1').feature('wp5').geom.feature('r2').set('contributeto', 'csel2');
model.geom('geom1').feature('wp5').geom.run('r2');
model.geom('geom1').feature('wp5').geom.create('mir1', 'Mirror');
model.geom('geom1').feature('wp5').geom.feature('mir1').selection('input').named('csel1');
model.geom('geom1').feature('wp5').geom.feature('mir1').set('keep', true);
model.geom('geom1').feature('wp5').geom.feature('mir1').set('pos', {'y_spring_l/2' '0'});
model.geom('geom1').feature('wp5').geom.run('mir1');
model.geom('geom1').feature('wp5').geom.create('mir2', 'Mirror');
model.geom('geom1').feature('wp5').geom.feature('mir2').selection('input').named('csel1');
model.geom('geom1').feature('wp5').geom.feature('mir2').set('keep', true);
model.geom('geom1').feature('wp5').geom.run('mir2');
model.geom('geom1').feature('wp5').geom.create('mir3', 'Mirror');
model.geom('geom1').feature('wp5').geom.feature('mir3').selection('input').named('csel2');
model.geom('geom1').feature('wp5').geom.feature('mir3').set('keep', true);
model.geom('geom1').feature('wp5').geom.run('mir3');
model.geom('geom1').feature('wp5').geom.create('r3', 'Rectangle');
model.geom('geom1').feature('wp5').geom.feature('r3').label('Rectangle 3 - Stator Base');
model.geom('geom1').feature('wp5').geom.feature('r3').set('size', {'2*(y_spring_l/2-l_mass/2-l_rotor-(l_rotor-rotor_stator_overlap))' '1'});
model.geom('geom1').feature('wp5').geom.feature('r3').setIndex('size', 'w_mass-rotor_spacing+w_stator', 1);
model.geom('geom1').feature('wp5').geom.feature('r3').set('base', 'center');
model.geom('geom1').feature('wp5').geom.feature('r3').set('contributeto', 'csel2');
model.geom('geom1').run('wp5');
model.geom('geom1').feature.create('ext5', 'Extrude');
model.geom('geom1').feature('ext5').label('Extrude 5 - Stators');
model.geom('geom1').feature('ext5').setIndex('distance', 't_beam', 0);
model.geom('geom1').feature('ext5').set('selresult', true);
model.geom('geom1').feature('ext5').set('selresultshow', 'all');
model.geom('geom1').run('ext5');
model.geom('geom1').run('ext5');
model.geom('geom1').create('wp6', 'WorkPlane');
model.geom('geom1').feature('wp6').set('unite', true);
model.geom('geom1').feature('wp6').label('Work Plane 6 - Sense Electrodes');
model.geom('geom1').feature('wp6').set('quickz', '-t_anchor');
model.geom('geom1').feature('wp6').set('selresult', true);
model.geom('geom1').feature('wp6').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp6').geom.feature('r1').label('Rectangle 1 - Sense electrode');
model.geom('geom1').feature('wp6').geom.feature('r1').set('size', {'electrode_ratio*l_mass' '1'});
model.geom('geom1').feature('wp6').geom.feature('r1').setIndex('size', 'electrode_ratio*w_mass', 1);
model.geom('geom1').feature('wp6').geom.feature('r1').set('base', 'center');
model.geom('geom1').feature('wp6').geom.feature('r1').set('pos', {'y_spring_l/2' '0'});
model.geom('geom1').feature('wp6').geom.selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').feature('wp6').geom.selection('csel1').label('Sense electrode');
model.geom('geom1').feature('wp6').geom.feature('r1').set('contributeto', 'csel1');
model.geom('geom1').feature('wp6').geom.run('r1');
model.geom('geom1').feature('wp6').geom.create('pt1', 'Point');
model.geom('geom1').feature('wp6').geom.feature('pt1').label('Point 1 - For mesh copy');
model.geom('geom1').feature('wp6').geom.feature('pt1').setIndex('p', 'y_spring_l/2-electrode_ratio*l_mass/2', 0);
model.geom('geom1').feature('wp6').geom.feature('pt1').setIndex('p', 'electrode_ratio*w_mass/5', 1);
model.geom('geom1').feature('wp6').geom.feature('pt1').set('contributeto', 'csel1');
model.geom('geom1').feature('wp6').geom.run('pt1');
model.geom('geom1').feature('wp6').geom.create('mir1', 'Mirror');
model.geom('geom1').feature('wp6').geom.feature('mir1').selection('input').named('csel1');
model.geom('geom1').feature('wp6').geom.feature('mir1').set('keep', true);
model.geom('geom1').run('wp6');
model.geom('geom1').create('wp7', 'WorkPlane');
model.geom('geom1').feature('wp7').set('unite', true);
model.geom('geom1').feature('wp7').label('Work Plane 7 - Symmetry Plane');
model.geom('geom1').feature('wp7').set('quickplane', 'yz');
model.geom('geom1').feature('wp7').geom.create('cro1', 'CrossSection');
model.geom('geom1').feature('wp7').geom.selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').feature('wp7').geom.selection('csel1').label('Symmetry Plane');
model.geom('geom1').feature('wp7').geom.feature('cro1').set('contributeto', 'csel1');
model.geom('geom1').run('fin');

model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');
model.selection('box1').label('Box 1 - Bottom of Beam');
model.selection('box1').set('entitydim', 2);
model.selection('box1').set('zmin', '-delta');
model.selection('box1').set('zmax', 'delta');
model.selection('box1').set('condition', 'inside');

model.view('view1').set('renderwireframe', true);

model.selection.create('box2', 'Box');
model.selection('box2').model('comp1');
model.selection('box2').label('Box 2 - Entire Beam Layer');
model.selection('box2').set('zmin', 't_beam/2-delta');
model.selection('box2').set('zmax', 't_beam/2+delta');
model.selection.duplicate('box3', 'box1');
model.selection('box3').label('Box 3 - Anchor base');
model.selection('box3').set('zmin', '-t_anchor-delta');
model.selection('box3').set('zmax', '-t_anchor+delta');
model.selection.create('int1', 'Intersection');
model.selection('int1').model('comp1');
model.selection('int1').label('Intersection 1 - Lower Electrode');
model.selection('int1').set('entitydim', 2);
model.selection('int1').set('input', {'box1' 'geom1_ext1_bnd'});
model.selection.create('box4', 'Box');
model.selection('box4').model('comp1');
model.selection('box4').label('Box 4 - Comb vertical walls 1');
model.selection('box4').set('entitydim', 2);
model.selection('box4').set('xmin', 'y_spring_l/2+w_mass/2+l_rotor/2-delta');
model.selection('box4').set('xmax', 'y_spring_l/2+w_mass/2+l_rotor/2+delta');
model.selection('box4').set('ymin', '-w_mass/2+delta');
model.selection('box4').set('ymax', 'w_mass/2-delta');
model.selection('box4').set('zmin', 't_beam/2');
model.selection('box4').set('zmax', 't_beam/2+delta');
model.selection.duplicate('box5', 'box4');
model.selection('box5').label('Box 5 - Comb vertical walls 2');
model.selection('box5').set('xmin', '-(y_spring_l/2+w_mass/2+l_rotor/2)-delta');
model.selection('box5').set('xmax', '-(y_spring_l/2+w_mass/2+l_rotor/2)+delta');
model.selection.duplicate('box6', 'box4');
model.selection('box6').label('Box 6 - Comb vertical walls 3');
model.selection('box6').set('xmin', 'y_spring_l/2-w_mass/2-l_rotor/2 -delta');
model.selection('box6').set('xmax', 'y_spring_l/2-w_mass/2-l_rotor/2+delta');
model.selection.duplicate('box7', 'box5');
model.selection('box7').label('Box 7 - Comb vertical walls 4');
model.selection('box7').set('xmin', '-(y_spring_l/2-w_mass/2-l_rotor/2)-delta');
model.selection('box7').set('xmax', '-(y_spring_l/2-w_mass/2-l_rotor/2)+delta');
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Union 1 - Comb Vertical Walls');
model.selection('uni1').set('entitydim', 2);
model.selection('uni1').set('input', {'box4' 'box5' 'box6' 'box7'});
model.selection.create('int2', 'Intersection');
model.selection('int2').model('comp1');
model.selection('int2').label('Intersection 2 - Stator Vertical Walls');
model.selection('int2').set('entitydim', 2);
model.selection('int2').set('input', {'uni1' 'geom1_ext5_bnd'});
model.selection.duplicate('box8', 'box4');
model.selection('box8').label('Box 8 - Rotor tip edge 1');
model.selection('box8').set('entitydim', 1);
model.selection('box8').set('xmin', 'y_spring_l/2+w_mass/2+l_rotor-delta');
model.selection('box8').set('xmax', 'y_spring_l/2+w_mass/2+l_rotor+delta');
model.selection.duplicate('box9', 'box8');
model.selection('box9').label('Box 9 - Rotor tip edge 2');
model.selection('box9').set('xmin', '-(y_spring_l/2+w_mass/2+l_rotor)-delta');
model.selection('box9').set('xmax', '-(y_spring_l/2+w_mass/2+l_rotor)+delta');
model.selection.duplicate('box10', 'box8');
model.selection('box10').label('Box 10 - Rotor tip edge 3');
model.selection('box10').set('xmin', 'y_spring_l/2-w_mass/2-l_rotor -delta');
model.selection('box10').set('xmax', 'y_spring_l/2-w_mass/2-l_rotor+delta');
model.selection.duplicate('box11', 'box9');
model.selection('box11').label('Box 11 - Rotor tip edge 4');
model.selection('box11').set('xmin', '-(y_spring_l/2-w_mass/2-l_rotor)-delta');
model.selection('box11').set('xmax', '-(y_spring_l/2-w_mass/2-l_rotor)+delta');
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Union 2 - Rotor Tip Edges +X DC');
model.selection('uni2').set('entitydim', 1);
model.selection('uni2').set('input', {'box8' 'box11'});
model.selection.create('uni3', 'Union');
model.selection('uni3').model('comp1');
model.selection('uni3').label('Union 3 - Rotor Tip Edges -X DC');
model.selection('uni3').set('entitydim', 1);
model.selection('uni3').set('input', {'box9' 'box10'});
model.selection.create('uni4', 'Union');
model.selection('uni4').model('comp1');
model.selection('uni4').label('Union 4 - Rotor Tip Edges +X AC');
model.selection('uni4').set('entitydim', 1);
model.selection('uni4').set('input', {'box8' 'box9'});
model.selection.create('uni5', 'Union');
model.selection('uni5').model('comp1');
model.selection('uni5').label('Union 5 - Rotor Tip Edges -X AC');
model.selection('uni5').set('entitydim', 1);
model.selection('uni5').set('input', {'box10' 'box11'});
model.selection.create('uni6', 'Union');
model.selection('uni6').model('comp1');
model.selection('uni6').label('Union 6 - Rotor Tip Edges');
model.selection('uni6').set('entitydim', 1);
model.selection('uni6').set('input', {'uni2' 'uni3'});
model.selection.create('box12', 'Box');
model.selection('box12').model('comp1');
model.selection('box12').label('Box 13 - x > 0 Beam base');
model.selection('box12').set('entitydim', 2);
model.selection('box12').set('xmin', '-delta');
model.selection('box12').set('zmin', '-delta');
model.selection('box12').set('zmax', 'delta');
model.selection('box12').set('condition', 'inside');
model.selection.duplicate('box13', 'box12');
model.selection('box13').label('Box 14 - x < 0 Beam base');
model.selection('box13').set('xmin', -Inf);
model.selection('box13').set('xmax', 'delta');
model.selection.duplicate('box14', 'box13');
model.selection('box14').label('Box 15 - x > 0 Spring Anchor');
model.selection('box14').set('xmin', '-delta+tether_x-w_anchor/2');
model.selection('box14').set('xmax', 'delta+tether_x+w_anchor/2');
model.selection.duplicate('box15', 'box14');
model.selection('box15').label('Box 16 - x < 0 Spring Anchor');
model.selection('box15').set('xmin', '-delta-tether_x-w_anchor/2');
model.selection('box15').set('xmax', 'delta-tether_x+w_anchor/2');
model.selection.create('int3', 'Intersection');
model.selection('int3').model('comp1');
model.selection('int3').label('Intersection 3 - Quad Mesh - Springs Construction');
model.selection('int3').set('entitydim', 2);
model.selection('int3').set('input', {'box12' 'geom1_ext3_bnd'});
model.selection.create('int4', 'Intersection');
model.selection('int4').model('comp1');
model.selection('int4').label('Intersection 4 - Quad Mesh - Springs Construction copy');
model.selection('int4').set('entitydim', 2);
model.selection('int4').set('input', {'box13' 'geom1_ext3_bnd'});
model.selection.create('int5', 'Intersection');
model.selection('int5').model('comp1');
model.selection('int5').label('Intersection 5 - Mapped Mesh - Anchors');
model.selection('int5').set('entitydim', 2);
model.selection('int5').set('input', {'box14' 'geom1_ext2_bnd'});
model.selection.create('int6', 'Intersection');
model.selection('int6').model('comp1');
model.selection('int6').label('Intersection 6 - Mapped Mesh - Anchors copy');
model.selection('int6').set('entitydim', 2);
model.selection('int6').set('input', {'box15' 'geom1_ext2_bnd'});
model.selection.create('int7', 'Intersection');
model.selection('int7').model('comp1');
model.selection('int7').label('Intersection 7 - Triangular Mesh - Mass');
model.selection('int7').set('entitydim', 2);
model.selection('int7').set('input', {'box12' 'geom1_ext1_bnd'});
model.selection.create('int8', 'Intersection');
model.selection('int8').model('comp1');
model.selection('int8').label('Intersection 8 - Triangular Mesh - Mass copy');
model.selection('int8').set('entitydim', 2);
model.selection('int8').set('input', {'box13' 'geom1_ext1_bnd'});
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Difference 1 - Quad Mesh - Springs');
model.selection('dif1').set('entitydim', 2);
model.selection('dif1').set('add', {'int3'});
model.selection('dif1').set('subtract', {'int5'});
model.selection.create('dif2', 'Difference');
model.selection('dif2').model('comp1');
model.selection('dif2').label('Difference 2 - Quad Mesh - Springs copy');
model.selection('dif2').set('entitydim', 2);
model.selection('dif2').set('add', {'int4'});
model.selection('dif2').set('subtract', {'int6'});
model.selection.create('dif3', 'Difference');
model.selection('dif3').model('comp1');
model.selection('dif3').label('Difference 3 - Quad Mesh -Stator & Comb');
model.selection('dif3').set('entitydim', 2);
model.selection('dif3').set('add', {'box12'});
model.selection('dif3').set('subtract', {'box14' 'geom1_ext1_bnd' 'geom1_ext3_bnd' 'geom1_wp6_bnd'});
model.selection.create('dif4', 'Difference');
model.selection('dif4').model('comp1');
model.selection('dif4').label('Difference 4 - Quad Mesh -Stator & Comb copy');
model.selection('dif4').set('entitydim', 2);
model.selection('dif4').set('add', {'box13'});
model.selection('dif4').set('subtract', {'box15' 'geom1_ext1_bnd' 'geom1_ext3_bnd' 'geom1_wp6_bnd'});
model.selection.create('box16', 'Box');
model.selection('box16').model('comp1');
model.selection('box16').label('Box 17 - x > 0 Anchor base');
model.selection('box16').set('entitydim', 2);
model.selection('box16').set('xmin', '-delta');
model.selection('box16').set('zmin', '-delta-t_anchor');
model.selection('box16').set('zmax', 'delta-t_anchor');
model.selection('box16').set('condition', 'inside');
model.selection.duplicate('box17', 'box16');
model.selection('box17').label('Box 18 - x < 0 Anchor base');
model.selection('box17').set('xmin', -Inf);
model.selection('box17').set('xmax', 'delta');
model.selection.create('int9', 'Intersection');
model.selection('int9').model('comp1');
model.selection('int9').label('Intersection 9 - Triangular Mesh - Sense Electrode');
model.selection('int9').set('entitydim', 2);
model.selection('int9').set('input', {'box16' 'geom1_wp6_bnd'});
model.selection.create('int10', 'Intersection');
model.selection('int10').model('comp1');
model.selection('int10').label('Intersection 10 - Triangular Mesh - Sense Electrode copy');
model.selection('int10').set('entitydim', 2);
model.selection('int10').set('input', {'box17' 'geom1_wp6_bnd'});
model.selection.create('box18', 'Box');
model.selection('box18').model('comp1');
model.selection('box18').label('Box 19 - x > 0 Lower electrode effective region');
model.selection('box18').set('entitydim', 2);
model.selection('box18').set('xmin', '-delta+y_spring_l/2-electrode_ratio*l_mass/2');
model.selection('box18').set('xmax', 'delta+y_spring_l/2+electrode_ratio*l_mass/2');
model.selection('box18').set('ymin', '-delta-electrode_ratio*w_mass/2');
model.selection('box18').set('ymax', 'delta+electrode_ratio*w_mass/2');
model.selection('box18').set('zmin', '-delta');
model.selection('box18').set('zmax', 'delta');
model.selection('box18').set('condition', 'inside');
model.selection.duplicate('box19', 'box18');
model.selection('box19').label('Box 20 - x < 0 Lower electrode effective region');
model.selection('box19').set('xmin', '-delta-y_spring_l/2-electrode_ratio*l_mass/2');
model.selection('box19').set('xmax', 'delta-y_spring_l/2+electrode_ratio*l_mass/2');
model.selection.create('uni7', 'Union');
model.selection('uni7').model('comp1');
model.selection('uni7').label('Union 7 - Lower electrode effective region');
model.selection('uni7').set('entitydim', 2);
model.selection('uni7').set('input', {'box18' 'box19'});

model.cpl.create('genext1', 'GeneralExtrusion', 'geom1');
model.cpl('genext1').label('General Extrusion 1 - Stator Walls');
model.cpl('genext1').set('opname', 'genextcmb');
model.cpl('genext1').selection.geom('geom1', 2);
model.cpl('genext1').selection.named('int2');
model.cpl('genext1').set('usesrcmap', true);
model.cpl('genext1').set('method', 'closest');
model.cpl.duplicate('genext2', 'genext1');
model.cpl('genext2').label('General Extrusion 2 - Sense Electrodes');
model.cpl('genext2').set('opname', 'genextpp');
model.cpl('genext2').selection.named('geom1_wp6_bnd');
model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').label('Integration 1 - Lower Electrodes');
model.cpl('intop1').set('opname', 'intoppp');
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.named('uni7');
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').label('Integration 2 - Comb Edges');
model.cpl('intop2').set('opname', 'intopcmb');
model.cpl('intop2').selection.geom('geom1', 1);
model.cpl('intop2').selection.named('uni6');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Variables 1 - Sense Capacitor');
model.variable('var1').selection.geom('geom1', 2);
model.variable('var1').selection.named('uni7');
model.variable('var1').set('dpp_x', 'genextpp(X)-(X+u)');
model.variable('var1').descr('dpp_x', 'Vector from lower electrode, x');
model.variable('var1').set('dpp_y', 'genextpp(Y)-(Y+v)');
model.variable('var1').descr('dpp_y', 'Vector from lower electrode, y');
model.variable('var1').set('dpp_z', 'genextpp(Z)-(Z+w)');
model.variable('var1').descr('dpp_z', 'Vector from lower electrode, z');
model.variable('var1').set('dpp_sq', 'dpp_x^2+dpp_y^2+dpp_z^2');
model.variable('var1').descr('dpp_sq', 'Square of parallel plate distance');
model.variable('var1').set('F_A', '0.5*epsilon0_const*Vbase^2/dpp_sq');
model.variable('var1').descr('F_A', 'Force per unit area of electrode');
model.variable('var1').set('C_A', 'epsilon0_const/sqrt(dpp_sq)');
model.variable('var1').descr('C_A', 'Capacitance per unit area of electrode');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Variables 2 - Sense Capacitor + sign AC');
model.variable('var2').selection.geom('geom1', 2);
model.variable('var2').selection.named('box19');
model.variable('var2').set('sign', '1');
model.variable('var2').descr('sign', 'Sign of capacitance change');
model.variable.duplicate('var3', 'var2');
model.variable('var3').label('Variables 3 - Sense Capacitor - sign AC');
model.variable('var3').selection.named('box18');
model.variable('var3').set('sign', '-1');
model.variable.create('var4');
model.variable('var4').model('comp1');
model.variable('var4').label('Variables 4 - Comb Drives');
model.variable('var4').selection.geom('geom1', 1);
model.variable('var4').selection.named('uni6');
model.variable('var4').set('dcmb_x', 'genextcmb(X+u)-(X+u)');
model.variable('var4').descr('dcmb_x', 'Vector from rotor comb edge, x');
model.variable('var4').set('dcmb_y', 'genextcmb(Y+v)-(Y+v)');
model.variable('var4').descr('dcmb_y', 'Vector from rotor comb edge, y');
model.variable('var4').set('dcmb_z', 'genextcmb(Z+w)-(Z+w)');
model.variable('var4').descr('dcmb_z', 'Vector from rotor comb edge, z');
model.variable('var4').set('dcmb', 'sqrt(dcmb_x^2+dcmb_y^2+dcmb_z^2)');
model.variable('var4').descr('dcmb', 'Parallel plate distance');
model.variable('var4').set('Vtot', 'Vcomb+AC_on*AC*linper(V_ac)');
model.variable('var4').descr('Vtot', 'Total voltage');
model.variable('var4').set('F_l', 'sign*0.5*epsilon0_const*Vtot^2/dcmb');
model.variable('var4').descr('F_l', 'Force per unit length of edge');
model.variable('var4').set('C_l', 'linpoint(epsilon0_const/dcmb)*u*sign*AC');
model.variable('var4').descr('C_l', 'Capacitance change per unit length');
model.variable.create('var5');
model.variable('var5').model('comp1');
model.variable('var5').label('Variables 5 - Comb Drives + sign DC');
model.variable('var5').selection.geom('geom1', 1);
model.variable('var5').selection.named('uni2');
model.variable('var5').set('sign', '1', 'Sign of capacitance change');
model.variable('var5').descr('sign', 'Sign of comb drive force');
model.variable.duplicate('var6', 'var5');
model.variable('var6').label('Variables 6 - Comb Drives - sign DC');
model.variable('var6').selection.named('uni3');
model.variable('var6').set('sign', '-1');
model.variable.create('var7');
model.variable('var7').model('comp1');
model.variable('var7').label('Variables 7 - Comb Drives + sign AC');
model.variable('var7').selection.geom('geom1', 1);
model.variable('var7').selection.named('uni4');
model.variable('var7').set('AC', '1');
model.variable('var7').descr('AC', 'Sign of AC comb voltage');
model.variable.duplicate('var8', 'var7');
model.variable('var8').label('Variables 8 - Comb Drives - sign AC');
model.variable('var8').selection.named('uni5');
model.variable('var8').set('AC', '-1');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').label('Si - Polycrystalline silicon');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.7);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '678[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'4.5' '0' '0' '0' '4.5' '0' '0' '0' '4.5'});
model.material('mat1').propertyGroup('def').set('density', '2320[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'34[W/(m*K)]' '0' '0' '0' '34[W/(m*K)]' '0' '0' '0' '34[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '160e9[Pa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.22');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('lighting', 'cooktorrance');
model.material('mat1').set('fresnel', 0.7);
model.material('mat1').set('roughness', 0.5);
model.material('mat1').set('anisotropy', 0);
model.material('mat1').set('flipanisotropy', false);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').set('ambient', 'custom');
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat1').set('diffuse', 'custom');
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat1').set('specular', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat1').set('noisecolor', 'custom');
model.material('mat1').set('customnoisecolor', [0 0 0]);
model.material('mat1').set('noisescale', 0);
model.material('mat1').set('noise', 'off');
model.material('mat1').set('noisefreq', 1);
model.material('mat1').set('normalnoisebrush', '0');
model.material('mat1').set('normalnoisetype', '0');
model.material('mat1').set('alpha', 1);
model.material('mat1').set('anisotropyaxis', [0 0 1]);

model.physics('solid').feature('lemm1').create('dmp1', 'Damping', 3);
model.physics('solid').feature('lemm1').feature('dmp1').set('DampingType', 'IsotropicLossFactor');
model.physics('solid').feature('lemm1').feature('dmp1').set('eta_s_mat', 'userdef');
model.physics('solid').feature('lemm1').feature('dmp1').set('eta_s', '1/Q');
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.named('box3');
model.physics('solid').create('bndl1', 'BoundaryLoad', 2);
model.physics('solid').feature('bndl1').label('Boundary Load 1 - Sense Electrodes');
model.physics('solid').feature('bndl1').selection.named('uni7');
model.physics('solid').feature('bndl1').set('FperArea', {'0' '0' '-F_A'});
model.physics('solid').create('el1', 'EdgeLoad', 1);
model.physics('solid').feature('el1').label('Edge Load 1 - Comb Drives');
model.physics('solid').feature('el1').selection.named('uni6');
model.physics('solid').feature('el1').set('FperLength', {'F_l' '0' '0'});
model.physics('solid').create('rotf1', 'RotatingFrame', 3);
model.physics('solid').feature('rotf1').set('AxisOfRotation', 'yAxis');
model.physics('solid').feature('rotf1').set('Ovm', 'Omega');
model.physics('solid').feature('rotf1').set('CoriolisForce', true);

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.named('box14');
model.mesh('mesh1').feature('map1').create('size1', 'Size');
model.mesh('mesh1').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmax', 'mesh_factor*x_spring_w/2');
model.mesh('mesh1').feature('map1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmin', 'mesh_factor*x_spring_w/10');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'mesh_factor*tether_w/3');
model.mesh('mesh1').feature('size').set('hmin', 'mesh_factor*tether_w/30');
model.mesh('mesh1').feature('size').set('hgrad', '1.1+mesh_factor*0.2');
model.mesh('mesh1').create('cpf1', 'CopyFace');
model.mesh('mesh1').feature('cpf1').selection('source').geom(2);
model.mesh('mesh1').feature('cpf1').selection('destination').geom(2);
model.mesh('mesh1').feature('cpf1').selection('source').named('box14');
model.mesh('mesh1').feature('cpf1').selection('destination').named('box15');
model.mesh('mesh1').create('fq1', 'FreeQuad');
model.mesh('mesh1').feature('fq1').selection.named('dif1');
model.mesh('mesh1').feature('fq1').create('size1', 'Size');
model.mesh('mesh1').feature('fq1').feature('size1').selection.set([945 950]);
model.mesh('mesh1').feature('fq1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('fq1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('fq1').feature('size1').set('hmax', 'mesh_factor*x_spring_w/3');
model.mesh('mesh1').feature('fq1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('fq1').feature('size1').set('hmin', 'mesh_factor*x_spring_w/30');
model.mesh('mesh1').create('cpf2', 'CopyFace');
model.mesh('mesh1').feature('cpf2').selection('source').geom(2);
model.mesh('mesh1').feature('cpf2').selection('destination').geom(2);
model.mesh('mesh1').feature('cpf2').selection('source').named('dif1');
model.mesh('mesh1').feature('cpf2').selection('destination').named('dif2');
model.mesh('mesh1').run('cpf2');
model.mesh('mesh1').feature.duplicate('size1', 'size');
model.mesh('mesh1').feature('size1').set('hmax', 'mesh_factor*w_rotor/2');
model.mesh('mesh1').feature('size1').set('hmin', 'mesh_factor*w_rotor/20');
model.mesh('mesh1').create('fq2', 'FreeQuad');
model.mesh('mesh1').feature('fq2').selection.named('dif3');
model.mesh('mesh1').create('cpf3', 'CopyFace');
model.mesh('mesh1').feature('cpf3').selection('source').geom(2);
model.mesh('mesh1').feature('cpf3').selection('destination').geom(2);
model.mesh('mesh1').feature('cpf3').selection('source').named('dif3');
model.mesh('mesh1').feature('cpf3').selection('destination').named('dif4');
model.mesh('mesh1').run('cpf3');
model.mesh('mesh1').feature.duplicate('size2', 'size1');
model.mesh('mesh1').feature('size2').set('hmax', 'mesh_factor*w_rotor');
model.mesh('mesh1').feature('size2').set('hmin', 'mesh_factor*w_rotor/10');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.named('int7');
model.mesh('mesh1').create('cpf4', 'CopyFace');
model.mesh('mesh1').feature('cpf4').selection('source').geom(2);
model.mesh('mesh1').feature('cpf4').selection('destination').geom(2);
model.mesh('mesh1').feature('cpf4').selection('source').named('int7');
model.mesh('mesh1').feature('cpf4').selection('destination').named('int8');
model.mesh('mesh1').create('ftri2', 'FreeTri');
model.mesh('mesh1').feature('ftri2').selection.named('int9');
model.mesh('mesh1').create('cpf5', 'CopyFace');
model.mesh('mesh1').feature('cpf5').selection('source').geom(2);
model.mesh('mesh1').feature('cpf5').selection('destination').geom(2);
model.mesh('mesh1').feature('cpf5').selection('source').named('int9');
model.mesh('mesh1').feature('cpf5').selection('destination').named('int10');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.named('box2');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 'max(1,floor(3/mesh_factor))');
model.mesh('mesh1').create('swe2', 'Sweep');
model.mesh('mesh1').feature('swe2').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe2').selection.named('geom1_ext2_dom');
model.mesh('mesh1').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis1').set('numelem', 'max(1,floor(3/mesh_factor))');
model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Stationary');

model.sol.create('sol1');
model.sol('sol1').study('std1');

model.study('std1').feature('stat').set('notlistsolnum', 1);
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('listsolnum', 1);
model.study('std1').feature('stat').set('solnum', 'auto');

model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.mises'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').set('colortable', 'Prism');
model.result('pg1').feature('vol1').create('def', 'Deform');
model.result('pg1').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('vol1').feature('def').set('descr', 'Displacement field');

model.sol('sol1').runAll;

model.result('pg1').run;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').set('plotgroup', 'Default');
model.study('std2').feature('stat').set('ngenAUX', '1');
model.study('std2').feature('stat').set('goalngenAUX', '1');
model.study('std2').feature('stat').set('ngenAUX', '1');
model.study('std2').feature('stat').set('goalngenAUX', '1');
model.study('std2').feature('stat').setSolveFor('/physics/solid', true);
model.study('std2').create('eig', 'Eigenfrequency');
model.study('std2').feature('eig').set('plotgroup', 'Default');
model.study('std2').feature('eig').set('conrad', '1');
model.study('std2').feature('eig').set('geometricNonlinearity', true);
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').setSolveFor('/physics/solid', true);

model.common.create('mpf1', 'ParticipationFactors', 'comp1');

model.study('std2').label('Study 2 - Prestressed Eigenfrequency');
model.study('std2').feature('stat').set('geometricNonlinearity', true);
model.study('std2').feature('eig').set('neigsactive', true);
model.study('std2').feature('eig').set('neigs', 3);
model.study('std2').feature('eig').set('shift', '38000[Hz]');
model.study('std2').feature('eig').set('eigwhich', 'lr');

model.sol.create('sol2');
model.sol('sol2').study('std2');

model.study('std2').feature('stat').set('notlistsolnum', 1);
model.study('std2').feature('stat').set('notsolnum', 'auto');
model.study('std2').feature('stat').set('listsolnum', 1);
model.study('std2').feature('stat').set('solnum', 'auto');
model.study('std2').feature('eig').set('notlistsolnum', 1);
model.study('std2').feature('eig').set('notsolnum', 'auto');
model.study('std2').feature('eig').set('listsolnum', 1);
model.study('std2').feature('eig').set('solnum', 'auto');
model.study('std2').feature('eig').set('linplistsolnum', {'1'});
model.study('std2').feature('eig').set('linpsolnum', 'auto');

model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('d1').set('nliniterrefine', true);
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('rhob', 40);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').create('st2', 'StudyStep');
model.sol('sol2').feature('st2').set('study', 'std2');
model.sol('sol2').feature('st2').set('studystep', 'eig');
model.sol('sol2').create('v2', 'Variables');
model.sol('sol2').feature('v2').set('initmethod', 'sol');
model.sol('sol2').feature('v2').set('initsol', 'sol2');
model.sol('sol2').feature('v2').set('initsoluse', 'su1');
model.sol('sol2').feature('v2').set('notsolmethod', 'sol');
model.sol('sol2').feature('v2').set('notsol', 'sol2');
model.sol('sol2').feature('v2').set('control', 'eig');
model.sol('sol2').create('e1', 'Eigenvalue');
model.sol('sol2').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol2').feature('e1').set('eigvfunscaleparam', '8.72E-10');
model.sol('sol2').feature('e1').set('storelinpoint', true);
model.sol('sol2').feature('e1').set('control', 'eig');
model.sol('sol2').feature('e1').set('linpmethod', 'sol');
model.sol('sol2').feature('e1').set('linpsol', 'sol2');
model.sol('sol2').feature('e1').set('linpsoluse', 'su1');
model.sol('sol2').feature('e1').set('control', 'eig');
model.sol('sol2').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('v2').set('notsolnum', 'auto');
model.sol('sol2').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol2').feature('v2').set('notlistsolnum', {'1'});
model.sol('sol2').feature('v2').set('notsolnum', 'auto');
model.sol('sol2').feature('v2').set('notlistsolnum', {'1'});
model.sol('sol2').feature('v2').set('notsolnum', 'auto');
model.sol('sol2').feature('v2').set('control', 'eig');
model.sol('sol2').attach('std2');

model.result.dataset('dset2').set('frametype', 'spatial');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset2');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('defaultPlotID', 'modeShape');
model.result('pg2').label('Mode Shape (solid)');
model.result('pg2').set('showlegends', false);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'solid.disp'});
model.result('pg2').feature('surf1').set('threshold', 'manual');
model.result('pg2').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg2').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg2').feature('surf1').create('def', 'Deform');
model.result('pg2').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg2').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.evaluationGroup.create('std2EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std2EvgFrq').set('defaultPlotID', 'eigenFrequenciesTable');
model.result.evaluationGroup('std2EvgFrq').set('data', 'dset2');
model.result.evaluationGroup('std2EvgFrq').label('Eigenfrequencies (Study 2 - Prestressed Eigenfrequency)');
model.result.evaluationGroup('std2EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', 'freq*2*pi', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup.create('std2mpf1', 'EvaluationGroup');
model.result.evaluationGroup('std2mpf1').set('data', 'dset2');
model.result.evaluationGroup('std2mpf1').label('Participation Factors (Study 2 - Prestressed Eigenfrequency)');
model.result.evaluationGroup('std2mpf1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormX', 0);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 0);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, X-translation', 0);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormY', 1);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Y-translation', 1);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormZ', 2);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Z-translation', 2);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormX', 3);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 3);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, X-rotation', 3);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormY', 4);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 4);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Y-rotation', 4);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormZ', 5);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', '1', 5);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Z-rotation', 5);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLX', 6);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg', 6);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, X-translation', 6);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLY', 7);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg', 7);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Y-translation', 7);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLZ', 8);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg', 8);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Z-translation', 8);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRX', 9);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 9);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, X-rotation', 9);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRY', 10);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 10);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Y-rotation', 10);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRZ', 11);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 11);
model.result.evaluationGroup('std2mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Z-rotation', 11);

model.sol('sol2').runAll;

model.result.evaluationGroup('std2EvgFrq').run;
model.result.evaluationGroup('std2mpf1').run;
model.result('pg2').run;
model.result('pg2').stepNext(0);
model.result('pg2').run;

model.param.create('par3');
model.param('par3').label('Parameters 3 - Estimate drive mode frequency');
model.param('par3').set('rho0', '2320[kg/m^3]');
model.param('par3').descr('rho0', 'Density');
model.param('par3').set('m0', 'rho0*t_beam*2*(2*n_combs*l_rotor*w_rotor+l_mass*w_mass-n_etch_x*n_etch_y*etch_dim^2)');
model.param('par3').descr('m0', 'Total mass');
model.param('par3').set('E0', '160e9[Pa]');
model.param('par3').descr('E0', 'Young''s modulus');
model.param('par3').set('I0', 't_beam*x_spring_w^3/12');
model.param('par3').descr('I0', 'Area moment of inertia for X spring in-plane bending');
model.param('par3').set('k0', '4*12*E0*I0/x_spring_l^3');
model.param('par3').descr('k0', 'Spring constant for X spring in-plane bending');
model.param('par3').set('I1', 't_beam*y_spring_w^3/12');
model.param('par3').descr('I1', 'Area moment of inertia for Y spring in-plane bending');
model.param('par3').set('y_spring_l3', 'y_spring_l/2-tether_x');
model.param('par3').descr('y_spring_l3', 'Length of Y spring between tether and X spring');
model.param('par3').set('k1', '4*12*E0*I1/y_spring_l3^3');
model.param('par3').descr('k1', 'Spring constant for Y spring in-plane bending');
model.param('par3').set('k_tot', '1/(1/k0+1/k1)');
model.param('par3').descr('k_tot', 'Total spring constant for in-plane bending');
model.param('par3').set('f0', 'sqrt(k_tot/m0)/2/pi');
model.param('par3').descr('f0', 'Estimated drive mode frequency');
model.param.create('par4');
model.param('par4').label('Parameters 4 - Estimate sense mode frequency');
model.param('par4').set('I2', 't_beam^3*x_spring_w/12');
model.param('par4').descr('I2', 'Area moment of inertia for X spring out-of-plane bending');
model.param('par4').set('k2', '4*12*E0*I2/x_spring_l^3');
model.param('par4').descr('k2', 'Spring constant for X spring out-of-plane bending');
model.param('par4').set('I3', 't_beam^3*y_spring_w/12');
model.param('par4').descr('I3', 'Area moment of inertia for Y spring out-of-plane bending');
model.param('par4').set('k3', '4*12*E0*I3/y_spring_l3^3');
model.param('par4').descr('k3', 'Spring constant for Y spring out-of-plane bending');
model.param('par4').set('I4', 't_beam^3*tether_w/12');
model.param('par4').descr('I4', 'Area moment of inertia for tether beam out-of-plane bending');
model.param('par4').set('k4', '4*12*E0*I4/tether_l^3');
model.param('par4').descr('k4', 'Spring constant for tether beam out-of-plane bending');
model.param('par4').set('G0', '80[GPa]');
model.param('par4').descr('G0', 'Shear modulus');
model.param('par4').set('k_th', 'G0*t_beam*tether_w^3/tether_l*(1/3-0.21*tether_w/t_beam*(1-((tether_w/t_beam)^4)/12))');
model.param('par4').descr('k_th', 'Torsional spring constant of tether beam');
model.param('par4').set('k5', '4*k_th/y_spring_l3^2');
model.param('par4').descr('k5', 'Spring constant from torsion of tether beams');
model.param('par4').set('k_tot2', '1/(1/k2+1/k3+1/k4+1/k5)');
model.param('par4').descr('k_tot2', 'Total spring constant for out-of-plane bending');
model.param('par4').set('f1', 'sqrt(k_tot2/m0)/2/pi');
model.param('par4').descr('f1', 'Estimated sense mode frequency');
model.param.create('par5');
model.param('par5').label('Parameters 5 - Result from Study 2');
model.param('par5').set('fd', '38262[Hz]');
model.param('par5').descr('fd', 'Drive frequency (from computed drive-mode eigenfrequency)');

model.study.create('std3');
model.study('std3').create('stat', 'Stationary');
model.study('std3').feature('stat').set('plotgroup', 'Default');
model.study('std3').feature('stat').set('ngenAUX', '1');
model.study('std3').feature('stat').set('goalngenAUX', '1');
model.study('std3').feature('stat').set('ngenAUX', '1');
model.study('std3').feature('stat').set('goalngenAUX', '1');
model.study('std3').feature('stat').setSolveFor('/physics/solid', true);
model.study('std3').create('frlin', 'Frequencylinearized');
model.study('std3').feature('frlin').set('plotgroup', 'Default');
model.study('std3').feature('frlin').set('geometricNonlinearity', true);
model.study('std3').feature('frlin').set('ngenAUX', '1');
model.study('std3').feature('frlin').set('goalngenAUX', '1');
model.study('std3').feature('frlin').set('ngenAUX', '1');
model.study('std3').feature('frlin').set('goalngenAUX', '1');
model.study('std3').feature('frlin').setSolveFor('/physics/solid', true);
model.study('std3').label('Study 3 - Prestressed Frequency Domain');
model.study('std3').feature('stat').set('geometricNonlinearity', true);
model.study('std3').feature('frlin').set('plist', 'fd');
model.study('std3').feature('frlin').set('useparam', true);
model.study('std3').feature('frlin').set('sweeptype', 'filled');
model.study('std3').feature('frlin').setIndex('pname_aux', 'AC_on', 0);
model.study('std3').feature('frlin').setIndex('plistarr_aux', '', 0);
model.study('std3').feature('frlin').setIndex('punit_aux', '', 0);
model.study('std3').feature('frlin').setIndex('pname_aux', 'AC_on', 0);
model.study('std3').feature('frlin').setIndex('plistarr_aux', '', 0);
model.study('std3').feature('frlin').setIndex('punit_aux', '', 0);
model.study('std3').feature('frlin').setIndex('plistarr_aux', 1, 0);
model.study('std3').feature('frlin').setIndex('pname_aux', 'delta', 1);
model.study('std3').feature('frlin').setIndex('plistarr_aux', '', 1);
model.study('std3').feature('frlin').setIndex('punit_aux', 'm', 1);
model.study('std3').feature('frlin').setIndex('pname_aux', 'delta', 1);
model.study('std3').feature('frlin').setIndex('plistarr_aux', '', 1);
model.study('std3').feature('frlin').setIndex('punit_aux', 'm', 1);
model.study('std3').feature('frlin').setIndex('pname_aux', 'Omega', 1);
model.study('std3').feature('frlin').setIndex('plistarr_aux', '0 100', 1);
model.study('std3').feature('frlin').setIndex('punit_aux', 'deg/s', 1);

model.sol.create('sol4');
model.sol('sol4').study('std3');

model.study('std3').feature('stat').set('notlistsolnum', 1);
model.study('std3').feature('stat').set('notsolnum', 'auto');
model.study('std3').feature('stat').set('listsolnum', 1);
model.study('std3').feature('stat').set('solnum', 'auto');
model.study('std3').feature('frlin').set('notlistsolnum', 1);
model.study('std3').feature('frlin').set('notsolnum', 'auto');
model.study('std3').feature('frlin').set('listsolnum', 1);
model.study('std3').feature('frlin').set('solnum', 'auto');
model.study('std3').feature('frlin').set('linplistsolnum', {'1'});
model.study('std3').feature('frlin').set('linpsolnum', 'all');

model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std3');
model.sol('sol4').feature('st1').set('studystep', 'stat');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'stat');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol4').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol4').feature('s1').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol4').feature('s1').feature('d1').set('nliniterrefine', true);
model.sol('sol4').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol4').feature('s1').create('i1', 'Iterative');
model.sol('sol4').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('s1').feature('i1').set('rhob', 40);
model.sol('sol4').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol4').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol4').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol4').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol4').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol4').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').create('su1', 'StoreSolution');
model.sol('sol4').create('st2', 'StudyStep');
model.sol('sol4').feature('st2').set('study', 'std3');
model.sol('sol4').feature('st2').set('studystep', 'frlin');
model.sol('sol4').create('v2', 'Variables');
model.sol('sol4').feature('v2').set('initmethod', 'sol');
model.sol('sol4').feature('v2').set('initsol', 'sol4');
model.sol('sol4').feature('v2').set('initsoluse', 'su1');
model.sol('sol4').feature('v2').set('notsolmethod', 'sol');
model.sol('sol4').feature('v2').set('notsol', 'sol4');
model.sol('sol4').feature('v2').set('control', 'frlin');
model.sol('sol4').create('s2', 'Stationary');
model.sol('sol4').feature('s2').create('p1', 'Parametric');
model.sol('sol4').feature('s2').feature.remove('pDef');
model.sol('sol4').feature('s2').feature('p1').set('pname', {'freq' 'AC_on' 'Omega'});
model.sol('sol4').feature('s2').feature('p1').set('punit', {'Hz' '' 'deg/s'});
model.sol('sol4').feature('s2').feature('p1').set('sweeptype', 'filled');
model.sol('sol4').feature('s2').feature('p1').set('plistarr', {'fd' '1' '0 100'});
model.sol('sol4').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol4').feature('s2').feature('p1').set('pcontinuation', '');
model.sol('sol4').feature('s2').feature('p1').set('preusesol', 'auto');
model.sol('sol4').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol4').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol4').feature('s2').feature('p1').set('plotgroup', 'Default');
model.sol('sol4').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol4').feature('s2').feature('p1').set('probes', {});
model.sol('sol4').feature('s2').feature('p1').set('control', 'frlin');
model.sol('sol4').feature('s2').set('nonlin', 'linper');
model.sol('sol4').feature('s2').set('storelinpoint', true);
model.sol('sol4').feature('s2').set('linpsolnum', 'all');
model.sol('sol4').feature('s2').set('control', 'frlin');
model.sol('sol4').feature('s2').set('linpmethod', 'sol');
model.sol('sol4').feature('s2').set('linpsol', 'sol4');
model.sol('sol4').feature('s2').set('linpsoluse', 'su1');
model.sol('sol4').feature('s2').set('control', 'frlin');
model.sol('sol4').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s2').create('d1', 'Direct');
model.sol('sol4').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s2').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol4').feature('s2').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol4').feature('s2').create('i1', 'Iterative');
model.sol('sol4').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('s2').feature('i1').set('rhob', 400);
model.sol('sol4').feature('s2').feature('i1').set('nlinnormuse', true);
model.sol('sol4').feature('s2').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol4').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol4').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol4').feature('s2').feature.remove('fcDef');
model.sol('sol4').feature('v2').set('notsolnum', 'auto');
model.sol('sol4').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol4').feature('v2').set('notlistsolnum', {'1'});
model.sol('sol4').feature('v2').set('notsolnum', 'auto');
model.sol('sol4').feature('v2').set('notlistsolnum', {'1'});
model.sol('sol4').feature('v2').set('notsolnum', 'auto');
model.sol('sol4').feature('v2').set('control', 'frlin');
model.sol('sol4').attach('std3');

model.result.dataset('dset4').set('frametype', 'spatial');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset4');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('defaultPlotID', 'stress');
model.result('pg3').label('Stress (solid) 1');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('expr', {'solid.mises_peak'});
model.result('pg3').feature('vol1').set('threshold', 'manual');
model.result('pg3').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg3').feature('vol1').set('differential', true);
model.result('pg3').feature('vol1').set('resolution', 'custom');
model.result('pg3').feature('vol1').set('refine', 2);
model.result('pg3').feature('vol1').set('colortable', 'Prism');
model.result('pg3').feature('vol1').create('def', 'Deform');
model.result('pg3').feature('vol1').feature('def').set('differential', true);
model.result('pg3').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg3').feature('vol1').feature('def').set('descr', 'Displacement field');

model.sol('sol4').runAll;

model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Imag X displacement - Drive mode amplitude');
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('title', ['Drive mode amplitude (' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm)']);
model.result('pg4').set('frametype', 'material');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').run;
model.result('pg4').feature('vol1').set('expr', 'imag(u)');
model.result('pg4').run;
model.result('pg4').feature('vol1').feature('def').set('expr', {'imag(u)' 'imag(v)' 'w'});
model.result('pg4').feature('vol1').feature('def').setIndex('expr', 'imag(w)', 2);
model.result('pg4').run;

model.param.create('par6');
model.param('par6').label('Parameters 6 - Estimate drive mode amplitude');
model.param('par6').set('n_overlaps', '2*n_combs*4');
model.param('par6').descr('n_overlaps', 'Total number of comb drive electrode overlaps');
model.param('par6').set('F_comb_dc', 'n_overlaps*epsilon0_const*t_beam*Vcomb^2/(2*gap_combs)');
model.param('par6').descr('F_comb_dc', 'DC comb force');
model.param('par6').set('F_comb_ac', '2*F_comb_dc*V_ac/Vcomb');
model.param('par6').descr('F_comb_ac', 'AC comb force');
model.param('par6').set('u_ac0', 'F_comb_ac*Q/k_tot');
model.param('par6').descr('u_ac0', 'Estimated drive mode AC amplitude');

model.result('pg3').run;
model.result.duplicate('pg5', 'pg3');
model.result('pg5').run;
model.result('pg5').label('Real Z displacement - No rotation');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').set('frametype', 'material');
model.result('pg5').set('showlegendsmaxmin', true);
model.result('pg5').run;
model.result('pg5').feature('vol1').set('expr', 'w');
model.result('pg5').feature('vol1').set('differential', false);
model.result('pg5').run;
model.result('pg5').feature('vol1').feature('def').set('expr', {'u' 'v' 'w*1e3'});
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Real Z Displacement - Rotation');
model.result('pg6').setIndex('looplevel', 2, 0);
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Real Z displacement - Net sense signal');
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', ['Sense mode amplitude (' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm)']);
model.result('pg7').run;
model.result('pg7').feature('vol1').set('expr', 'w-withsol(''sol4'',w,setind(Omega,1))');
model.result('pg7').run;
model.result('pg7').feature('vol1').feature('def').set('expr', {'u-withsol(''sol4'',u,setind(Omega,1))' 'v' 'w*1e3'});
model.result('pg7').feature('vol1').feature('def').setIndex('expr', 'v-withsol(''sol4'',v,setind(Omega,1))', 1);
model.result('pg7').feature('vol1').feature('def').setIndex('expr', '(w-withsol(''sol4'',w,setind(Omega,1)))*1e3', 2);
model.result('pg7').run;

model.param.create('par7');
model.param('par7').label('Parameters 7 - Estimate sense mode amplitude');
model.param('par7').set('fs', '41129[Hz]');
model.param('par7').descr('fs', 'Computed sense mode eigenfrequency');
model.param('par7').set('k_from_fd', 'm0*(2*pi*fd)^2');
model.param('par7').descr('k_from_fd', 'Total spring constant from computed drive mode frequency');
model.param('par7').set('u_ac0_from_fd', 'F_comb_ac*Q/k_from_fd');
model.param('par7').descr('u_ac0_from_fd', 'Drive mode AC amplitude from computed frequency');
model.param('par7').set('v_ac0_from_fd', 'u_ac0_from_fd*2*pi*fd');
model.param('par7').descr('v_ac0_from_fd', 'Drive mode velocity amplitude from computed frequency');
model.param('par7').set('F_c', '2*m0*v_ac0_from_fd*100[deg/s]');
model.param('par7').descr('F_c', 'Coriolis force');
model.param('par7').set('k_from_fs', 'm0*(2*pi*fs)^2');
model.param('par7').descr('k_from_fs', 'Spring constant from computed sense mode frequency');
model.param('par7').set('u_s_at_fs', 'F_c*Q/k_from_fs');
model.param('par7').descr('u_s_at_fs', 'Sense mode amplitude if driven at sense frequency');
model.param('par7').set('u_s', 'u_s_at_fs/sqrt(1+Q^2*(fd/fs-fs/fd)^2)');
model.param('par7').descr('u_s', 'Estimated sense mode amplitude at drive frequency');

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').label('Average 1 - Lower Electrodes');
model.cpl('aveop1').set('opname', 'aveoppp');
model.cpl('aveop1').selection.geom('geom1', 2);
model.cpl('aveop1').selection.named('uni7');

model.sol('sol1').updateSolution;

model.result('pg1').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Evaluation Group 1 - Study 1 - Stationary');
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'aveoppp(w)', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Average Z displacement', 0);
model.result.evaluationGroup('eg1').run;

model.sol('sol4').updateSolution;

model.result('pg3').run;
model.result.evaluationGroup.duplicate('eg2', 'eg1');
model.result.evaluationGroup('eg2').label('Evaluation Group 2 - Study 3 - Prestressed Frequency Domain');
model.result.evaluationGroup('eg2').set('data', 'dset4');
model.result.evaluationGroup('eg2').setIndex('looplevelinput', 'last', 0);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('expr', 'aveoppp(imag(sign*u))', 0);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('descr', 'Drive mode amplitude', 0);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('expr', 'aveoppp(real(sign*w))', 1);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('descr', 'Sense mode amplitude', 1);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('expr', 'intoppp(sign*C_A)/Omega/1[aF/(deg/s)]', 2);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('descr', 'Sensitivity (aF/(deg/s))', 2);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('expr', '-aveoppp(real(sign*w))*epsilon0_const*intoppp(1)/t_anchor^2/Omega/1[aF/(deg/s)]', 3);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('descr', 'Estimated sensitivity', 3);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('expr', 'intoppp(sign*C_A)', 4);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('unit', 'aF', 4);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('descr', 'Sense capacitance amplitude', 4);
model.result.evaluationGroup('eg2').feature('gev1').set('differential', true);
model.result.evaluationGroup('eg2').run;

model.title('A Micromachined Comb-Drive Tuning Fork Rate Gyroscope');

model.description('This tutorial example of a comb drive tuning fork gyroscope is kindly provided by Dr. James Ransley at Veryst Engineering, LLC. The model demonstrates fully parameterized geometry, extensive use of selection features, implementation of analytic formulas for the electromechanical forces and response estimation, and comparison of numerical results with analytical estimations. In particular, extrusion operators are used to compute the distances between electrodes for force calculation.');

model.label('comb_drive_tuning_fork_gyroscope.mph');

model.param.create('par8');
model.param('par8').label('Parameters 8 - Manufacturing variation');
model.param('par8').set('theta0', '0.5[deg]');
model.param('par8').descr('theta0', 'Sidewall tilt');
model.param('par8').set('phi0', '45[deg]');
model.param('par8').descr('phi0', 'Sidewall azimuth');
model.param('par8').set('dt0', '0[um]');
model.param('par8').descr('dt0', 'Thickness variation');
model.param('par8').set('oe0', '0[um]');
model.param('par8').descr('oe0', 'Over-etch');

model.variable.create('var9');
model.variable('var9').model('comp1');
model.variable('var9').label('Variables 9 - Manufacturing variation');
model.variable('var9').set('theta', 'theta0');
model.variable('var9').descr('theta', 'Sidewall theta variation as function of global coordinates');
model.variable('var9').set('phi', 'phi0');
model.variable('var9').descr('phi', 'Sidewall phi variation as function of global coordinates');
model.variable('var9').set('dX_sw', 'Zg*tan(theta)*cos(phi)');
model.variable('var9').descr('dX_sw', 'Change in X for sidewall variation');
model.variable('var9').set('dY_sw', 'Zg*tan(theta)*sin(phi)');
model.variable('var9').descr('dY_sw', 'Change in Y for sidewall variation');
model.variable('var9').set('sw', 'nXg*dX_sw+nYg*dY_sw');
model.variable('var9').descr('sw', 'Sidewall normal displacement');
model.variable('var9').set('delta_t_function', 'dt0');
model.variable('var9').descr('delta_t_function', 'Thickness variation as function of global coordinates');
model.variable('var9').set('dZ_t', 'delta_t_function');
model.variable('var9').descr('dZ_t', 'Change in Z for thickness variation');
model.variable('var9').set('dt', 'nZg*dZ_t');
model.variable('var9').descr('dt', 'Thickness normal displacement');
model.variable('var9').set('oe', 'oe0');
model.variable('var9').descr('oe', 'Over-etch variation as function of global coordinates');

model.common.create('free1', 'DeformingDomainDeformedGeometry', 'comp1');
model.common('free1').selection.all;
model.common('free1').label('Deforming Domain 1 - Beam Layer');
model.common('free1').selection.named('box2');
model.common('free1').set('smoothingType', 'laplace');

model.study('std1').feature('stat').setEntry('activate', 'frame:material1', false);
model.study('std2').feature('stat').setEntry('activate', 'frame:material1', false);
model.study('std2').feature('eig').setEntry('activate', 'frame:material1', false);
model.study('std3').feature('stat').setEntry('activate', 'frame:material1', false);
model.study('std3').feature('frlin').setEntry('activate', 'frame:material1', false);

model.selection.create('box20', 'Box');
model.selection('box20').model('comp1');
model.selection('box20').label('Box 21 - Vertical Surfaces');
model.selection('box20').set('entitydim', 2);
model.selection('box20').set('zmin', '+delta');
model.selection('box20').set('zmax', '2*delta');
model.selection.duplicate('box21', 'box20');
model.selection('box21').label('Box 22 - Top Surfaces');
model.selection('box21').set('zmin', 't_beam-delta');
model.selection('box21').set('zmax', 't_beam+delta');
model.selection('box21').set('condition', 'inside');
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Adjacent 1 - Exterior Surfaces of Beam Layer');
model.selection('adj1').set('input', {'box2'});
model.selection.create('int11', 'Intersection');
model.selection('int11').model('comp1');
model.selection('int11').label('Intersection 11 - Vertical Walls');
model.selection('int11').set('entitydim', 2);
model.selection('int11').set('input', {'box20' 'adj1'});
model.selection.create('int12', 'Intersection');
model.selection('int12').model('comp1');
model.selection('int12').label('Intersection 12 - Anchor Faces');
model.selection('int12').set('entitydim', 2);
model.selection('int12').set('input', {'box1' 'geom1_ext2_bnd'});

model.common.create('pnmd1', 'PrescribedNormalMeshDisplacementDeformedGeometry', 'comp1');
model.common('pnmd1').label('Prescribed Normal Mesh Displacement 1 - Vertical Walls');
model.common('pnmd1').selection.named('int11');
model.common('pnmd1').set('prescribedNormalDisplacement', '-oe+sw');
model.common.create('pnmd2', 'PrescribedNormalMeshDisplacementDeformedGeometry', 'comp1');
model.common('pnmd2').label('Prescribed Normal Mesh Displacement 2 - Top Surfaces');
model.common('pnmd2').selection.named('box21');
model.common('pnmd2').set('prescribedNormalDisplacement', 'dt');
model.common.create('pnmd3', 'PrescribedNormalMeshDisplacementDeformedGeometry', 'comp1');
model.common('pnmd3').label('Prescribed Normal Mesh Displacement 3 - Base Plane');
model.common('pnmd3').selection.named('box1');
model.common.create('disp1', 'PrescribedMeshDisplacementDeformedGeometry', 'comp1');
model.common('disp1').label('Prescribed Mesh Displacement 1 - Anchor Faces');
model.common('disp1').selection.named('int12');

model.study.create('std4');
model.study('std4').label('Study 4 - Prestressed Eigenfrequency with Manufacturing Variations');
model.study('std4').create('param', 'Parametric');
model.study('std4').feature('param').setIndex('pname', 'AC_on', 0);
model.study('std4').feature('param').setIndex('plistarr', '', 0);
model.study('std4').feature('param').setIndex('punit', '', 0);
model.study('std4').feature('param').setIndex('pname', 'AC_on', 0);
model.study('std4').feature('param').setIndex('plistarr', '', 0);
model.study('std4').feature('param').setIndex('punit', '', 0);
model.study('std4').feature('param').setIndex('pname', 'oe0', 0);
model.study('std4').feature('param').setIndex('plistarr', '0      0     50', 0);
model.study('std4').feature('param').setIndex('punit', 'nm', 0);
model.study('std4').feature('param').setIndex('pname', 'AC_on', 1);
model.study('std4').feature('param').setIndex('plistarr', '', 1);
model.study('std4').feature('param').setIndex('punit', '', 1);
model.study('std4').feature('param').setIndex('pname', 'AC_on', 1);
model.study('std4').feature('param').setIndex('plistarr', '', 1);
model.study('std4').feature('param').setIndex('punit', '', 1);
model.study('std4').feature('param').setIndex('pname', 'dt0', 1);
model.study('std4').feature('param').setIndex('plistarr', '0     100   0', 1);
model.study('std4').feature('param').setIndex('punit', 'nm', 1);
model.study('std4').feature('param').setIndex('pname', 'AC_on', 2);
model.study('std4').feature('param').setIndex('plistarr', '', 2);
model.study('std4').feature('param').setIndex('punit', '', 2);
model.study('std4').feature('param').setIndex('pname', 'AC_on', 2);
model.study('std4').feature('param').setIndex('plistarr', '', 2);
model.study('std4').feature('param').setIndex('punit', '', 2);
model.study('std4').feature('param').setIndex('pname', 'theta0', 2);
model.study('std4').feature('param').setIndex('plistarr', '0.5    0    0', 2);
model.study('std4').feature('param').setIndex('punit', 'deg', 2);
model.study('std4').feature.copy('stat1', 'std2/stat');
model.study('std4').feature('stat1').setEntry('activate', 'frame:material1', true);
model.study('std4').feature.copy('eig1', 'std2/eig');
model.study('std4').feature('eig1').set('neigs', 2);
model.study('std4').feature('eig1').set('shift', '36600[Hz]');

model.sol.create('sol6');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 52 53 54 57 58 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 52 53 54 57 58 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110]);

model.sol('sol6').study('std4');
model.sol('sol6').create('st1', 'StudyStep');
model.sol('sol6').feature('st1').set('study', 'std4');
model.sol('sol6').feature('st1').set('studystep', 'stat1');
model.sol('sol6').create('v1', 'Variables');
model.sol('sol6').feature('v1').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol6').feature('v1').feature('comp1_material_disp').set('scaleval', '2.7210054616136183E-6');
model.sol('sol6').feature('v1').set('control', 'stat1');
model.sol('sol6').create('s1', 'Stationary');
model.sol('sol6').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol6').feature('s1').create('se1', 'Segregated');
model.sol('sol6').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol6').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol6').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_material_disp'});
model.sol('sol6').feature('s1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol6').feature('s1').feature('se1').feature('ss1').label('Material Frame Variables');
model.sol('sol6').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol6').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u'});
model.sol('sol6').feature('s1').create('d1', 'Direct');
model.sol('sol6').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol6').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol6').feature('s1').feature('d1').set('nliniterrefine', true);
model.sol('sol6').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol6').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol6').feature('s1').feature('se1').feature('ss2').label('Solid Mechanics');
model.sol('sol6').feature('s1').create('i1', 'Iterative');
model.sol('sol6').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol6').feature('s1').feature('i1').set('rhob', 40);
model.sol('sol6').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol6').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol6').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol6').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol6').feature('s1').feature.remove('fcDef');
model.sol('sol6').create('su1', 'StoreSolution');
model.sol('sol6').create('st2', 'StudyStep');
model.sol('sol6').feature('st2').set('study', 'std4');
model.sol('sol6').feature('st2').set('studystep', 'eig1');
model.sol('sol6').create('v2', 'Variables');
model.sol('sol6').feature('v2').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol6').feature('v2').feature('comp1_material_disp').set('scaleval', '2.7210054616136183E-6');
model.sol('sol6').feature('v2').set('initmethod', 'sol');
model.sol('sol6').feature('v2').set('initsol', 'sol6');
model.sol('sol6').feature('v2').set('initsoluse', 'sol7');
model.sol('sol6').feature('v2').set('notsolmethod', 'sol');
model.sol('sol6').feature('v2').set('notsol', 'sol6');
model.sol('sol6').feature('v2').set('control', 'eig1');
model.sol('sol6').create('e1', 'Eigenvalue');
model.sol('sol6').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol6').feature('e1').set('eigvfunscaleparam', '8.72E-10');
model.sol('sol6').feature('e1').set('storelinpoint', true);
model.sol('sol6').feature('e1').set('control', 'eig1');
model.sol('sol6').feature('e1').set('linpmethod', 'sol');
model.sol('sol6').feature('e1').set('linpsol', 'sol6');
model.sol('sol6').feature('e1').set('linpsoluse', 'sol7');
model.sol('sol6').feature('e1').set('control', 'eig1');
model.sol('sol6').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol6').feature('v2').set('notsolnum', 'auto');
model.sol('sol6').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol6').attach('std4');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std4');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol6');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'oe0' 'dt0' 'theta0'});
model.batch('p1').set('plistarr', {'0      0     50' '0     100   0' '0.5    0    0'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std4');
model.batch('p1').set('control', 'param');

model.sol.create('sol8');
model.sol('sol8').study('std4');
model.sol('sol8').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol8');
model.batch('p1').run('compute');

model.result.dataset('dset8').set('frametype', 'spatial');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'dset8');
model.result('pg8').setIndex('looplevel', 1, 0);
model.result('pg8').setIndex('looplevel', 3, 1);
model.result('pg8').set('frametype', 'spatial');
model.result('pg8').set('defaultPlotID', 'modeShape');
model.result('pg8').label('Mode Shape (solid) 1');
model.result('pg8').set('showlegends', false);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'solid.disp'});
model.result('pg8').feature('surf1').set('threshold', 'manual');
model.result('pg8').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg8').feature('surf1').set('colortable', 'Rainbow');
model.result('pg8').feature('surf1').set('colortabletrans', 'none');
model.result('pg8').feature('surf1').set('colorscalemode', 'linear');
model.result('pg8').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg8').feature('surf1').create('def', 'Deform');
model.result('pg8').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg8').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.evaluationGroup.create('std4EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std4EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_solid');
model.result.evaluationGroup('std4EvgFrq').set('data', 'dset8');
model.result.evaluationGroup('std4EvgFrq').label('Eigenfrequencies (Study 4 - Prestressed Eigenfrequency with Manufacturing Variations)');
model.result.evaluationGroup('std4EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std4EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std4EvgFrq').run;
model.result.evaluationGroup.create('std4mpf1', 'EvaluationGroup');
model.result.evaluationGroup('std4mpf1').set('data', 'dset8');
model.result.evaluationGroup('std4mpf1').label('Participation Factors (Study 4 - Prestressed Eigenfrequency with Manufacturing Variations)');
model.result.evaluationGroup('std4mpf1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormX', 0);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('unit', '1', 0);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, X-translation', 0);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormY', 1);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Y-translation', 1);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('expr', 'mpf1.pfLnormZ', 2);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Z-translation', 2);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormX', 3);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('unit', '1', 3);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, X-rotation', 3);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormY', 4);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('unit', '1', 4);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Y-rotation', 4);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('expr', 'mpf1.pfRnormZ', 5);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('unit', '1', 5);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('descr', 'Participation factor, normalized, Z-rotation', 5);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLX', 6);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('unit', 'kg', 6);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, X-translation', 6);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLY', 7);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('unit', 'kg', 7);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Y-translation', 7);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffLZ', 8);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('unit', 'kg', 8);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Z-translation', 8);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRX', 9);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 9);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, X-rotation', 9);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRY', 10);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 10);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Y-rotation', 10);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('expr', 'mpf1.mEffRZ', 11);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('unit', 'kg*m^2', 11);
model.result.evaluationGroup('std4mpf1').feature('gev1').setIndex('descr', 'Effective modal mass, Z-rotation', 11);
model.result.evaluationGroup('std4mpf1').run;
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').set('data', 'dset8');
model.result('pg9').setIndex('looplevel', 1, 0);
model.result('pg9').setIndex('looplevel', 3, 1);
model.result('pg9').label('Deformed Geometry');
model.result('pg9').create('mesh1', 'Mesh');
model.result('pg9').feature('mesh1').set('meshdomain', 'volume');
model.result('pg9').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg9').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg9').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg9').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg9').feature('mesh1').feature('sel1').selection.set([1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 52 53 54 57 58 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110]);
model.result('pg9').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg9').feature('mesh1').set('qualexpr', 'comp1.material.relVol');
model.result('pg9').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg8').run;
model.result.evaluationGroup.create('eg3', 'EvaluationGroup');
model.result.evaluationGroup('eg3').label('Evaluation Group 3 - Study 4 - Frequency Shifts due to Manufacturing Variations');
model.result.evaluationGroup('eg3').set('data', 'none');
model.result.evaluationGroup('eg3').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg3').feature('gev1').set('data', 'dset8');
model.result.evaluationGroup('eg3').feature('gev1').setIndex('looplevelinput', 'first', 0);
model.result.evaluationGroup('eg3').feature('gev1').setIndex('expr', 'real(freq)-fd', 0);
model.result.evaluationGroup('eg3').feature('gev1').setIndex('descr', 'Drive mode freq shift', 0);
model.result.evaluationGroup('eg3').feature.duplicate('gev2', 'gev1');
model.result.evaluationGroup('eg3').feature('gev2').setIndex('looplevelinput', 'last', 0);
model.result.evaluationGroup('eg3').feature('gev2').setIndex('expr', 'real(freq)-fs', 0);
model.result.evaluationGroup('eg3').feature('gev2').setIndex('descr', 'Sense mode freq shift', 0);
model.result.evaluationGroup('eg3').run;

model.study.create('std5');
model.study('std5').label('Study 5 - Prestressed Frequency Domain with Manufacturing Variations');
model.study('std5').feature.copy('stat1', 'std3/stat');
model.study('std5').feature('stat1').setEntry('activate', 'frame:material1', true);
model.study('std5').feature.copy('frlin1', 'std3/frlin');

model.sol.create('sol12');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 52 53 54 57 58 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 52 53 54 57 58 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110]);

model.sol('sol12').study('std5');
model.sol('sol12').create('st1', 'StudyStep');
model.sol('sol12').feature('st1').set('study', 'std5');
model.sol('sol12').feature('st1').set('studystep', 'stat1');
model.sol('sol12').create('v1', 'Variables');
model.sol('sol12').feature('v1').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol12').feature('v1').feature('comp1_material_disp').set('scaleval', '2.7210054616136183E-6');
model.sol('sol12').feature('v1').set('control', 'stat1');
model.sol('sol12').create('s1', 'Stationary');
model.sol('sol12').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol12').feature('s1').create('se1', 'Segregated');
model.sol('sol12').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol12').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol12').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_material_disp'});
model.sol('sol12').feature('s1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol12').feature('s1').feature('se1').feature('ss1').label('Material Frame Variables');
model.sol('sol12').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol12').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u'});
model.sol('sol12').feature('s1').create('d1', 'Direct');
model.sol('sol12').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol12').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol12').feature('s1').feature('d1').set('nliniterrefine', true);
model.sol('sol12').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol12').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol12').feature('s1').feature('se1').feature('ss2').label('Solid Mechanics');
model.sol('sol12').feature('s1').create('i1', 'Iterative');
model.sol('sol12').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol12').feature('s1').feature('i1').set('rhob', 40);
model.sol('sol12').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol12').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol12').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol12').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol12').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol12').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol12').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol12').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol12').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol12').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol12').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol12').feature('s1').feature.remove('fcDef');
model.sol('sol12').create('su1', 'StoreSolution');
model.sol('sol12').create('st2', 'StudyStep');
model.sol('sol12').feature('st2').set('study', 'std5');
model.sol('sol12').feature('st2').set('studystep', 'frlin1');
model.sol('sol12').create('v2', 'Variables');
model.sol('sol12').feature('v2').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol12').feature('v2').feature('comp1_material_disp').set('scaleval', '2.7210054616136183E-6');
model.sol('sol12').feature('v2').set('initmethod', 'sol');
model.sol('sol12').feature('v2').set('initsol', 'sol12');
model.sol('sol12').feature('v2').set('initsoluse', 'sol13');
model.sol('sol12').feature('v2').set('notsolmethod', 'sol');
model.sol('sol12').feature('v2').set('notsol', 'sol12');
model.sol('sol12').feature('v2').set('control', 'frlin1');
model.sol('sol12').create('s2', 'Stationary');
model.sol('sol12').feature('s2').create('p1', 'Parametric');
model.sol('sol12').feature('s2').feature.remove('pDef');
model.sol('sol12').feature('s2').feature('p1').set('pname', {'freq' 'AC_on' 'Omega'});
model.sol('sol12').feature('s2').feature('p1').set('punit', {'Hz' '' 'deg/s'});
model.sol('sol12').feature('s2').feature('p1').set('sweeptype', 'filled');
model.sol('sol12').feature('s2').feature('p1').set('plistarr', {'fd' '1' '0 100'});
model.sol('sol12').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol12').feature('s2').feature('p1').set('pcontinuation', '');
model.sol('sol12').feature('s2').feature('p1').set('preusesol', 'auto');
model.sol('sol12').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol12').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol12').feature('s2').feature('p1').set('plotgroup', 'pg1');
model.sol('sol12').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol12').feature('s2').feature('p1').set('probes', {});
model.sol('sol12').feature('s2').feature('p1').set('control', 'frlin1');
model.sol('sol12').feature('s2').set('nonlin', 'linper');
model.sol('sol12').feature('s2').set('storelinpoint', true);
model.sol('sol12').feature('s2').set('linpsolnum', 'all');
model.sol('sol12').feature('s2').set('control', 'frlin1');
model.sol('sol12').feature('s2').set('linpmethod', 'sol');
model.sol('sol12').feature('s2').set('linpsol', 'sol12');
model.sol('sol12').feature('s2').set('linpsoluse', 'sol13');
model.sol('sol12').feature('s2').set('control', 'frlin1');
model.sol('sol12').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol12').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol12').feature('s2').create('d1', 'Direct');
model.sol('sol12').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol12').feature('s2').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol12').feature('s2').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol12').feature('s2').create('i1', 'Iterative');
model.sol('sol12').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol12').feature('s2').feature('i1').set('rhob', 400);
model.sol('sol12').feature('s2').feature('i1').set('nlinnormuse', true);
model.sol('sol12').feature('s2').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol12').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol12').feature('s2').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol12').feature('s2').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol12').feature('s2').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol12').feature('s2').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol12').feature('s2').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol12').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol12').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol12').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol12').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol12').feature('s2').feature.remove('fcDef');
model.sol('sol12').feature('v2').set('notsolnum', 'auto');
model.sol('sol12').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol12').attach('std5');
model.sol('sol12').runAll;

model.result.dataset('dset9').set('frametype', 'spatial');
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').set('data', 'dset9');
model.result('pg10').setIndex('looplevel', 2, 0);
model.result('pg10').setIndex('looplevel', 1, 1);
model.result('pg10').setIndex('looplevel', 1, 2);
model.result('pg10').set('frametype', 'spatial');
model.result('pg10').set('defaultPlotID', 'stress');
model.result('pg10').label('Stress (solid) 2');
model.result('pg10').set('frametype', 'spatial');
model.result('pg10').create('vol1', 'Volume');
model.result('pg10').feature('vol1').set('expr', {'solid.misesGp_peak'});
model.result('pg10').feature('vol1').set('threshold', 'manual');
model.result('pg10').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg10').feature('vol1').set('differential', true);
model.result('pg10').feature('vol1').set('colortable', 'Rainbow');
model.result('pg10').feature('vol1').set('colortabletrans', 'none');
model.result('pg10').feature('vol1').set('colorscalemode', 'linear');
model.result('pg10').feature('vol1').set('resolution', 'custom');
model.result('pg10').feature('vol1').set('refine', 2);
model.result('pg10').feature('vol1').set('colortable', 'Prism');
model.result('pg10').feature('vol1').create('def', 'Deform');
model.result('pg10').feature('vol1').feature('def').set('differential', true);
model.result('pg10').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg10').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.create('pg11', 'PlotGroup3D');
model.result('pg11').set('data', 'dset9');
model.result('pg11').setIndex('looplevel', 2, 0);
model.result('pg11').setIndex('looplevel', 1, 1);
model.result('pg11').setIndex('looplevel', 1, 2);
model.result('pg11').label('Deformed Geometry 1');
model.result('pg11').create('mesh1', 'Mesh');
model.result('pg11').feature('mesh1').set('meshdomain', 'volume');
model.result('pg11').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg11').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg11').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg11').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg11').feature('mesh1').feature('sel1').selection.set([1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 52 53 54 57 58 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110]);
model.result('pg11').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg11').feature('mesh1').set('qualexpr', 'comp1.material.relVol');
model.result('pg11').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg10').run;
model.result.evaluationGroup.duplicate('eg4', 'eg2');
model.result.evaluationGroup('eg4').label('Evaluation Group 4 - Study 5 - Prestressed Frequency Domain with Manufacturing Variations');
model.result.evaluationGroup('eg4').set('data', 'dset9');
model.result.evaluationGroup('eg4').setIndex('looplevelinput', 'all', 0);
model.result.evaluationGroup('eg4').feature('gev1').setIndex('expr', 0, 2);
model.result.evaluationGroup('eg4').feature('gev1').remove('unit', 2);
model.result.evaluationGroup('eg4').feature('gev1').remove('descr', 2);
model.result.evaluationGroup('eg4').feature('gev1').remove('expr', [2]);
model.result.evaluationGroup('eg4').feature('gev1').remove('unit', 2);
model.result.evaluationGroup('eg4').feature('gev1').remove('descr', 2);
model.result.evaluationGroup('eg4').feature('gev1').remove('expr', [2]);
model.result.evaluationGroup('eg4').run;
model.result('pg8').run;
model.result('pg8').label('Mode Shape - Drive mode with sidewall');
model.result('pg8').set('looplevel', [1 1]);
model.result('pg8').run;
model.result('pg8').feature('surf1').feature('def').set('expr', {'u' 'v' 'w*20'});
model.result('pg8').run;
model.result('pg2').run;
model.result('pg2').label('Mode Shape - Drive mode without sidewall');
model.result('pg2').set('looplevel', [1]);
model.result('pg2').run;
model.result('pg2').feature('surf1').feature('def').set('expr', {'u' 'v' 'w*20'});
model.result('pg2').run;
model.result('pg5').run;
model.result('pg5').label('Real Z displacement - No rotation, without sidewall');
model.result('pg5').run;
model.result('pg5').feature('vol1').set('unit', 'nm');
model.result('pg5').run;
model.result('pg5').feature('vol1').feature('def').set('expr', {'u' 'v' 'w*20'});
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg12', 'pg5');
model.result('pg12').run;
model.result('pg12').label('Real Z displacement - No rotation, with sidewall');
model.result('pg12').set('data', 'dset9');
model.result('pg12').run;

model.study.create('std6');
model.study('std6').create('stat', 'Stationary');
model.study('std6').feature('stat').setSolveFor('/physics/solid', false);
model.study('std6').label('Study 6 - Visualize Shape Change');
model.study('std6').create('param', 'Parametric');
model.study('std6').feature('param').setIndex('pname', 'AC_on', 0);
model.study('std6').feature('param').setIndex('plistarr', '', 0);
model.study('std6').feature('param').setIndex('punit', '', 0);
model.study('std6').feature('param').setIndex('pname', 'AC_on', 0);
model.study('std6').feature('param').setIndex('plistarr', '', 0);
model.study('std6').feature('param').setIndex('punit', '', 0);
model.study('std6').feature('param').setIndex('pname', 'phi0', 0);
model.study('std6').feature('param').setIndex('plistarr', 0, 0);
model.study('std6').feature('param').setIndex('punit', 'deg', 0);
model.study('std6').feature('param').setIndex('pname', 'AC_on', 1);
model.study('std6').feature('param').setIndex('plistarr', '', 1);
model.study('std6').feature('param').setIndex('punit', '', 1);
model.study('std6').feature('param').setIndex('pname', 'AC_on', 1);
model.study('std6').feature('param').setIndex('plistarr', '', 1);
model.study('std6').feature('param').setIndex('punit', '', 1);
model.study('std6').feature('param').setIndex('pname', 'theta0', 1);
model.study('std6').feature('param').setIndex('plistarr', 10, 1);
model.study('std6').feature('param').setIndex('punit', 'deg', 1);

model.sol.create('sol14');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 52 53 54 57 58 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110]);

model.sol('sol14').study('std6');
model.sol('sol14').create('st1', 'StudyStep');
model.sol('sol14').feature('st1').set('study', 'std6');
model.sol('sol14').feature('st1').set('studystep', 'stat');
model.sol('sol14').create('v1', 'Variables');
model.sol('sol14').feature('v1').feature('comp1_material_disp').set('scalemethod', 'manual');
model.sol('sol14').feature('v1').feature('comp1_material_disp').set('scaleval', '2.7210054616136183E-6');
model.sol('sol14').feature('v1').set('control', 'stat');
model.sol('sol14').create('s1', 'Stationary');
model.sol('sol14').feature('s1').create('p1', 'Parametric');
model.sol('sol14').feature('s1').feature('p1').set('pname', {'phi0' 'theta0'});
model.sol('sol14').feature('s1').feature('p1').set('plistarr', {'0' '10'});
model.sol('sol14').feature('s1').feature('p1').set('punit', {'deg' 'deg'});
model.sol('sol14').feature('s1').feature('p1').set('sweeptype', 'sparse');
model.sol('sol14').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol14').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol14').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol14').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol14').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol14').feature('s1').feature('p1').set('probes', {});
model.sol('sol14').feature('s1').feature('p1').set('control', 'param');
model.sol('sol14').feature('s1').set('control', 'stat');
model.sol('sol14').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol14').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol14').feature('s1').feature.remove('fcDef');
model.sol('sol14').attach('std6');
model.sol('sol14').runAll;

model.result.create('pg13', 'PlotGroup3D');
model.result('pg13').set('data', 'dset11');
model.result('pg13').setIndex('looplevel', 1, 0);
model.result('pg13').label('Deformed Geometry 2');
model.result('pg13').create('mesh1', 'Mesh');
model.result('pg13').feature('mesh1').set('meshdomain', 'volume');
model.result('pg13').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg13').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg13').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg13').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg13').feature('mesh1').feature('sel1').selection.set([1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 52 53 54 57 58 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110]);
model.result('pg13').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg13').feature('mesh1').set('qualexpr', 'comp1.material.relVol');
model.result('pg13').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg13').run;
model.result.create('pg14', 'PlotGroup3D');
model.result('pg14').run;
model.result('pg14').label('Visualize shape change');
model.result('pg14').set('data', 'dset11');
model.result('pg14').set('titletype', 'label');
model.result('pg14').set('frametype', 'geometry');
model.result('pg14').create('line1', 'Line');
model.result('pg14').feature('line1').set('expr', '1');
model.result('pg14').feature('line1').set('coloring', 'uniform');
model.result('pg14').run;

model.title('Manufacturing Variation Effects in a Micromachined Comb-Drive Tuning Fork Rate Gyroscope');

model.description(['This tutorial example is kindly provided by Dr. James Ransley at Veryst Engineering, LLC. This model continues from the base model ' native2unicode(hex2dec({'20' '1c'}), 'unicode') 'A Micromachined Comb-Drive Tuning Fork Rate Gyroscope' native2unicode(hex2dec({'20' '1d'}), 'unicode') ', which is also provided by Dr. Ransley. The model demonstrates how to accurately compute the effects of manufacturing variations of MEMS devices without the need of very fine mesh. This highly efficient modeling approach is based on the unique Deformed Geometry functionality of COMSOL Multiphysics, which implements the device shape change due to fabrication imperfections using the same mesh, thus eliminating the error introduced if different meshes were to be used for different geometries.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;

model.label('comb_drive_tuning_fork_gyroscope_manufacturing_variation.mph');

model.modelNode.label('Components');

out = model;
