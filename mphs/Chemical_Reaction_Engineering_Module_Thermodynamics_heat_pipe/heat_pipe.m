function out = model
%
% heat_pipe.m
%
% Model exported on May 26 2025, 21:27 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Chemical_Reaction_Engineering_Module/Thermodynamics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics.create('br', 'PorousMediaFlowBrinkman', 'geom1');
model.physics('br').model('comp1');
model.physics.create('ht', 'PorousMediaHeatTransfer', 'geom1');
model.physics('ht').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/physics/br', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('r_outer', '10[mm]', 'Outer diameter of pipe');
model.param.set('w_casing', '1[mm]', 'Casing thickness');
model.param.set('w_wick', '2[mm]', 'Wick thickness');
model.param.set('length', '150[mm]', 'Pipe length');
model.param.set('r_inner_casing', 'r_outer-w_casing', 'Inner radius of wall');
model.param.set('r_wick', 'r_inner_casing-w_wick', 'Inner radius of wick');
model.param.set('wick_porosity', '0.5', 'Volumetric void fraction in wick');
model.param.set('wick_permeability', '1e-9[m^2]', 'Permeability of wick');
model.param.set('Q_in', '30[W]', 'Heat source load');
model.param.set('h_conv', '1200[W/(m^2*K)]', 'Convection coefficient heatsink');
model.param.set('l_heatsink', '1[cm]', 'length of heat sink after rounded cap');
model.param.set('l_heatsource', '1[cm]', 'length of heat source after rounded cap');
model.param.set('w_contact', '1.5[mm]', 'Contact Surface Thickness');
model.param.set('phi_in', 'Q_in/2/pi/(r_outer+w_contact)/l_heatsource', 'Heat flux in');
model.param.set('p_ref', '1[bar]', 'Reference Pressure');
model.param.set('mesh_factor', '1.0', 'Decrease to obtain a finer mesh');

model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 'r_outer');
model.geom('geom1').feature('c1').set('angle', 90);
model.geom('geom1').feature('c1').set('pos', {'0' 'length/2'});
model.geom('geom1').feature('c1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('c1').setIndex('layer', 'w_casing', 0);
model.geom('geom1').feature('c1').setIndex('layername', 'Layer 2', 1);
model.geom('geom1').feature('c1').setIndex('layer', 'w_wick', 1);
model.geom('geom1').run('c1');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'r_outer + w_contact' '1'});
model.geom('geom1').feature('r1').setIndex('size', 'l_heatsource', 1);
model.geom('geom1').feature('r1').set('pos', {'0' 'length/2-l_heatsource'});
model.geom('geom1').feature('r1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('r1').setIndex('layer', 'w_casing + w_contact', 0);
model.geom('geom1').feature('r1').setIndex('layername', 'Layer 2', 1);
model.geom('geom1').feature('r1').setIndex('layer', 'w_wick', 1);
model.geom('geom1').feature('r1').set('layerright', true);
model.geom('geom1').feature('r1').set('layerbottom', false);
model.geom('geom1').feature.duplicate('r2', 'r1');
model.geom('geom1').feature('r2').setIndex('size', 'r_outer', 0);
model.geom('geom1').feature('r2').set('pos', {'0' 'length/2-l_heatsource*2'});
model.geom('geom1').feature('r2').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('r2').setIndex('layer', 'w_casing', 0);
model.geom('geom1').feature.duplicate('r3', 'r2');
model.geom('geom1').feature('r3').set('size', {'r_outer' 'length/2-l_heatsource*2'});
model.geom('geom1').feature('r3').set('pos', [0 0]);
model.geom('geom1').run('r3');
model.geom('geom1').create('mir1', 'Mirror');
model.geom('geom1').feature('mir1').selection('input').set({'c1' 'r1' 'r2' 'r3'});
model.geom('geom1').feature('mir1').set('keep', true);
model.geom('geom1').feature('mir1').set('axis', [0 1]);
model.geom('geom1').run('fin');
model.geom('geom1').create('mce1', 'MeshControlEdges');
model.geom('geom1').feature('mce1').selection('input').set('fin', [9 13 25 29 38 42]);
model.geom('geom1').run('mce1');
model.geom('geom1').create('ige1', 'IgnoreEdges');
model.geom('geom1').feature('ige1').selection('input').set('mce1', [5 7 11 13 17 19 23 24]);
model.geom('geom1').run('ige1');
model.geom('geom1').create('ige2', 'IgnoreEdges');
model.geom('geom1').feature('ige2').selection('input').set('ige1', [12 14 18 19]);
model.geom('geom1').feature('ige2').set('ignorevtx', false);
model.geom('geom1').run('ige2');
model.geom('geom1').create('igv1', 'IgnoreVertices');
model.geom('geom1').feature('igv1').selection('input').set('ige2', [9 10 12 13]);
model.geom('geom1').run('igv1');
model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').label('Vapor Cavity');
model.geom('geom1').feature('sel1').selection('selection').set('igv1', [3 4]);
model.geom('geom1').run('sel1');
model.geom('geom1').create('sel2', 'ExplicitSelection');
model.geom('geom1').feature('sel2').label('Porous Copper Wick');
model.geom('geom1').feature('sel2').selection('selection').set('igv1', [2 5]);
model.geom('geom1').run('sel2');
model.geom('geom1').create('sel3', 'ExplicitSelection');
model.geom('geom1').feature('sel3').label('Solid Copper Tube Casing');
model.geom('geom1').feature('sel3').selection('selection').set('igv1', [1 6]);
model.geom('geom1').run('sel3');
model.geom('geom1').create('sel4', 'ExplicitSelection');
model.geom('geom1').feature('sel4').label('Heat Sink');
model.geom('geom1').feature('sel4').selection('selection').init(1);
model.geom('geom1').feature('sel4').selection('selection').set('igv1', 21);
model.geom('geom1').run('sel4');
model.geom('geom1').create('sel5', 'ExplicitSelection');
model.geom('geom1').feature('sel5').selection('selection').init(1);
model.geom('geom1').feature('sel5').selection('selection').set('igv1', 20);
model.geom('geom1').feature('sel5').label('Heat Source');
model.geom('geom1').run('sel5');
model.geom('geom1').create('sel6', 'ExplicitSelection');
model.geom('geom1').feature('sel6').label('Cross Section of Cavity');
model.geom('geom1').feature('sel6').selection('selection').init(1);
model.geom('geom1').feature('sel6').selection('selection').set('igv1', 5);
model.geom('geom1').run('sel6');
model.geom('geom1').create('sel7', 'ExplicitSelection');
model.geom('geom1').feature('sel7').label('Cross Section of Wick');
model.geom('geom1').feature('sel7').selection('selection').init(1);
model.geom('geom1').feature('sel7').selection('selection').set('igv1', 10);
model.geom('geom1').run('sel7');
model.geom('geom1').create('sel8', 'ExplicitSelection');
model.geom('geom1').feature('sel8').label('Cross Section of Casing');
model.geom('geom1').feature('sel8').selection('selection').init(1);
model.geom('geom1').feature('sel8').selection('selection').set('igv1', 13);
model.geom('geom1').run('sel8');
model.geom('geom1').create('sel9', 'ExplicitSelection');
model.geom('geom1').feature('sel9').label('Inner Wick Boundary');
model.geom('geom1').feature('sel9').selection('selection').init(1);
model.geom('geom1').feature('sel9').selection('selection').set('igv1', [8 9]);
model.geom('geom1').run('sel9');
model.geom('geom1').create('sel10', 'ExplicitSelection');
model.geom('geom1').feature('sel10').label('All Wick Boundaries');
model.geom('geom1').feature('sel10').selection('selection').init(1);
model.geom('geom1').feature('sel10').selection('selection').set('igv1', [8 9 11 12]);
model.geom('geom1').run('sel10');
model.geom('geom1').create('unisel1', 'UnionSelection');
model.geom('geom1').feature('unisel1').label('All Cross Sections');
model.geom('geom1').feature('unisel1').set('entitydim', 1);
model.geom('geom1').feature('unisel1').set('input', {'sel6' 'sel7' 'sel8'});

model.view('view1').hideObjects.create('hide1');
model.view('view1').hideObjects('hide1').init(1);
model.view('view1').hideObjects('hide1').named('unisel1');

model.geom('geom1').run;

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([4 7 8 9 11 12]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis1').set('elemcount', 'length/r_outer/mesh_factor');
model.mesh('mesh1').feature('map1').feature('dis1').set('elemratio', 10);
model.mesh('mesh1').feature('map1').feature('dis1').set('symmetric', true);
model.mesh('mesh1').run('map1');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', '0.9*min(w_casing, w_wick)*mesh_factor');
model.mesh('mesh1').feature('size').set('hmin', '0.3*min(w_casing, w_wick)*mesh_factor');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(2);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('bl1').selection.set([2 3 4 5 8 9 10 11]);
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('geom1_sel10');
model.mesh('mesh1').run;

model.material.create('mat1', 'Common', '');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat1').label('Copper');
model.material('mat1').set('family', 'copper');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.35');
model.material('mat1').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat1').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat1').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat1').propertyGroup('linzRes').addInput('temperature');

model.thermodynamics.feature.create('pp1', 'BuiltinPropertyPackage');
model.thermodynamics.feature('pp1').set('compoundlist', {'water' '7732-18-5' 'H2O' 'COMSOL'});
model.thermodynamics.feature('pp1').set('phase_list', {'Gas' 'Vapor'});
model.thermodynamics.feature('pp1').label('Gas System 1');
model.thermodynamics.feature('pp1').set('manager_id', 'COMSOL');
model.thermodynamics.feature('pp1').set('manager_version', '1.0');
model.thermodynamics.feature('pp1').set('packagename', 'pp1');
model.thermodynamics.feature('pp1').set('package_desc', 'Built-in property package');
model.thermodynamics.feature('pp1').set('managerindex', '0');
model.thermodynamics.feature('pp1').set('packageid', 'COMSOL1');
model.thermodynamics.feature('pp1').set('ThermodynamicModel', 'IdealGas');
model.thermodynamics.feature('pp1').set('LiquidPhaseModel', 'None');
model.thermodynamics.feature('pp1').set('LiquidCard', 'None');
model.thermodynamics.feature('pp1').set('EOSModel', 'IdealGas');
model.thermodynamics.feature('pp1').set('GasPhaseModel', 'IdealGas');
model.thermodynamics.feature('pp1').set('GasEOSCard', 'GasPhaseModel');
model.thermodynamics.feature('pp1').set('VapDiffusivity', 'Automatic');
model.thermodynamics.feature('pp1').set('VapThermalConductivity', 'KineticTheory');
model.thermodynamics.feature('pp1').set('VapViscosity', 'Brokaw');
model.thermodynamics.feature('pp1').storePersistenceData;
model.thermodynamics.feature('pp1').set('WarningState', false);
model.thermodynamics.feature('pp1').set('Warning', {''});
model.thermodynamics.feature('pp1').feature.create('singlephase1', 'OnePhaseProperty');
model.thermodynamics.feature('pp1').feature('singlephase1').label('Density 1');
model.thermodynamics.feature('pp1').feature('singlephase1').set('funcname', 'Density_water_Gas11');
model.thermodynamics.feature('pp1').feature('singlephase1').set('property', 'Density');
model.thermodynamics.feature('pp1').feature('singlephase1').set('propertydescr', 'Density');
model.thermodynamics.feature('pp1').feature('singlephase1').set('unit', 'kg/m^3');
model.thermodynamics.feature('pp1').feature('singlephase1').set('prop_basis', 'mass');
model.thermodynamics.feature('pp1').feature('singlephase1').set('compounds', {'water'});
model.thermodynamics.feature('pp1').feature('singlephase1').set('args', {'temperature' 'K' 'Temperature'; 'pressure' 'Pa' 'Pressure'});
model.thermodynamics.feature('pp1').feature('singlephase1').set('plotargs', {'temperature' '298.15' '373.15'; 'pressure' '101325' '101325'});
model.thermodynamics.feature('pp1').feature('singlephase1').set('derivatives', {'Density_water_Gas11_Dtemperature' 'Density_water_Gas11_Dpressure'});
model.thermodynamics.feature('pp1').feature('singlephase1').set('SecondDerivatives', {'Density_water_Gas11_Dtemperature_Dtemperature' 'Density_water_Gas11_Dtemperature_Dpressure' 'Density_water_Gas11_Dpressure_Dpressure'});
model.thermodynamics.feature('pp1').feature('singlephase1').set('SecondDerivativeIndices', {'0' '0' '0' '0' '1' '1' '1' '1' '2'});
model.thermodynamics.feature('pp1').feature('singlephase1').set('phase', 'Gas');
model.thermodynamics.feature('pp1').feature('singlephase1').set('comp_basis', 'mole');
model.thermodynamics.feature('pp1').feature('singlephase1').set('include_derivatives', 'yes');
model.thermodynamics.feature('pp1').feature.create('singlephase2', 'OnePhaseProperty');
model.thermodynamics.feature('pp1').feature('singlephase2').label('Heat capacity (Cp) 1');
model.thermodynamics.feature('pp1').feature('singlephase2').set('funcname', 'HeatCapacityCp_water_Gas12');
model.thermodynamics.feature('pp1').feature('singlephase2').set('property', 'HeatCapacityCp');
model.thermodynamics.feature('pp1').feature('singlephase2').set('propertydescr', 'Heat capacity (Cp)');
model.thermodynamics.feature('pp1').feature('singlephase2').set('unit', 'J/kg/K');
model.thermodynamics.feature('pp1').feature('singlephase2').set('prop_basis', 'mass');
model.thermodynamics.feature('pp1').feature('singlephase2').set('compounds', {'water'});
model.thermodynamics.feature('pp1').feature('singlephase2').set('args', {'temperature' 'K' 'Temperature'; 'pressure' 'Pa' 'Pressure'});
model.thermodynamics.feature('pp1').feature('singlephase2').set('plotargs', {'temperature' '298.15' '373.15'; 'pressure' '101325' '101325'});
model.thermodynamics.feature('pp1').feature('singlephase2').set('derivatives', {'HeatCapacityCp_water_Gas12_Dtemperature' 'HeatCapacityCp_water_Gas12_Dpressure'});
model.thermodynamics.feature('pp1').feature('singlephase2').set('SecondDerivatives', {});
model.thermodynamics.feature('pp1').feature('singlephase2').set('SecondDerivativeIndices', {});
model.thermodynamics.feature('pp1').feature('singlephase2').set('phase', 'Gas');
model.thermodynamics.feature('pp1').feature('singlephase2').set('comp_basis', 'mole');
model.thermodynamics.feature('pp1').feature('singlephase2').set('include_derivatives', 'yes');
model.thermodynamics.feature('pp1').feature.create('singlephase3', 'OnePhaseProperty');
model.thermodynamics.feature('pp1').feature('singlephase3').label('Heat capacity ratio (Cp/Cv) 1');
model.thermodynamics.feature('pp1').feature('singlephase3').set('funcname', 'HeatCapacityRatioCpCv_water_Gas13');
model.thermodynamics.feature('pp1').feature('singlephase3').set('property', 'HeatCapacityRatioCpCv');
model.thermodynamics.feature('pp1').feature('singlephase3').set('propertydescr', 'Heat capacity ratio (Cp/Cv)');
model.thermodynamics.feature('pp1').feature('singlephase3').set('unit', '1');
model.thermodynamics.feature('pp1').feature('singlephase3').set('prop_basis', 'mass');
model.thermodynamics.feature('pp1').feature('singlephase3').set('compounds', {'water'});
model.thermodynamics.feature('pp1').feature('singlephase3').set('args', {'temperature' 'K' 'Temperature'; 'pressure' 'Pa' 'Pressure'});
model.thermodynamics.feature('pp1').feature('singlephase3').set('plotargs', {'temperature' '298.15' '373.15'; 'pressure' '101325' '101325'});
model.thermodynamics.feature('pp1').feature('singlephase3').set('derivatives', {'HeatCapacityRatioCpCv_water_Gas13_Dtemperature' 'HeatCapacityRatioCpCv_water_Gas13_Dpressure'});
model.thermodynamics.feature('pp1').feature('singlephase3').set('SecondDerivatives', {});
model.thermodynamics.feature('pp1').feature('singlephase3').set('SecondDerivativeIndices', {});
model.thermodynamics.feature('pp1').feature('singlephase3').set('phase', 'Gas');
model.thermodynamics.feature('pp1').feature('singlephase3').set('comp_basis', 'mole');
model.thermodynamics.feature('pp1').feature('singlephase3').set('include_derivatives', 'yes');
model.thermodynamics.feature('pp1').feature.create('singlephase4', 'OnePhaseProperty');
model.thermodynamics.feature('pp1').feature('singlephase4').label('Thermal conductivity 1');
model.thermodynamics.feature('pp1').feature('singlephase4').set('funcname', 'ThermalConductivity_water_Gas14');
model.thermodynamics.feature('pp1').feature('singlephase4').set('property', 'ThermalConductivity');
model.thermodynamics.feature('pp1').feature('singlephase4').set('propertydescr', 'Thermal conductivity');
model.thermodynamics.feature('pp1').feature('singlephase4').set('unit', 'W/m/K');
model.thermodynamics.feature('pp1').feature('singlephase4').set('prop_basis', 'mass');
model.thermodynamics.feature('pp1').feature('singlephase4').set('compounds', {'water'});
model.thermodynamics.feature('pp1').feature('singlephase4').set('args', {'temperature' 'K' 'Temperature'; 'pressure' 'Pa' 'Pressure'});
model.thermodynamics.feature('pp1').feature('singlephase4').set('plotargs', {'temperature' '298.15' '373.15'; 'pressure' '101325' '101325'});
model.thermodynamics.feature('pp1').feature('singlephase4').set('derivatives', {'ThermalConductivity_water_Gas14_Dtemperature' 'ThermalConductivity_water_Gas14_Dpressure'});
model.thermodynamics.feature('pp1').feature('singlephase4').set('SecondDerivatives', {});
model.thermodynamics.feature('pp1').feature('singlephase4').set('SecondDerivativeIndices', {});
model.thermodynamics.feature('pp1').feature('singlephase4').set('phase', 'Gas');
model.thermodynamics.feature('pp1').feature('singlephase4').set('comp_basis', 'mole');
model.thermodynamics.feature('pp1').feature('singlephase4').set('include_derivatives', 'yes');
model.thermodynamics.feature('pp1').feature.create('singlephase5', 'OnePhaseProperty');
model.thermodynamics.feature('pp1').feature('singlephase5').label('Viscosity 1');
model.thermodynamics.feature('pp1').feature('singlephase5').set('funcname', 'Viscosity_water_Gas15');
model.thermodynamics.feature('pp1').feature('singlephase5').set('property', 'Viscosity');
model.thermodynamics.feature('pp1').feature('singlephase5').set('propertydescr', 'Viscosity');
model.thermodynamics.feature('pp1').feature('singlephase5').set('unit', 'Pa*s');
model.thermodynamics.feature('pp1').feature('singlephase5').set('prop_basis', 'mass');
model.thermodynamics.feature('pp1').feature('singlephase5').set('compounds', {'water'});
model.thermodynamics.feature('pp1').feature('singlephase5').set('args', {'temperature' 'K' 'Temperature'; 'pressure' 'Pa' 'Pressure'});
model.thermodynamics.feature('pp1').feature('singlephase5').set('plotargs', {'temperature' '298.15' '373.15'; 'pressure' '101325' '101325'});
model.thermodynamics.feature('pp1').feature('singlephase5').set('derivatives', {'Viscosity_water_Gas15_Dtemperature' 'Viscosity_water_Gas15_Dpressure'});
model.thermodynamics.feature('pp1').feature('singlephase5').set('SecondDerivatives', {});
model.thermodynamics.feature('pp1').feature('singlephase5').set('SecondDerivativeIndices', {});
model.thermodynamics.feature('pp1').feature('singlephase5').set('phase', 'Gas');
model.thermodynamics.feature('pp1').feature('singlephase5').set('comp_basis', 'mole');
model.thermodynamics.feature('pp1').feature('singlephase5').set('include_derivatives', 'yes');
model.thermodynamics.feature('pp1').feature('singlephase1').tag('mat_singlephase1');
model.thermodynamics.feature('pp1').feature('mat_singlephase1').set('funcname', 'Densitypp1');
model.thermodynamics.feature('pp1').feature('singlephase2').tag('mat_singlephase2');
model.thermodynamics.feature('pp1').feature('mat_singlephase2').set('funcname', 'HeatCapacityCppp1');
model.thermodynamics.feature('pp1').feature('singlephase3').tag('mat_singlephase3');
model.thermodynamics.feature('pp1').feature('mat_singlephase3').set('funcname', 'HeatCapacityRatioCpCvpp1');
model.thermodynamics.feature('pp1').feature('singlephase4').tag('mat_singlephase4');
model.thermodynamics.feature('pp1').feature('mat_singlephase4').set('funcname', 'ThermalConductivitypp1');
model.thermodynamics.feature('pp1').feature('singlephase5').tag('mat_singlephase5');
model.thermodynamics.feature('pp1').feature('mat_singlephase5').set('funcname', 'Viscositypp1');
model.thermodynamics.createMaterial('Global', 'pp1', 'Gas', {'water'}, {'1'}, {}, {'density' 'Densitypp1'; 'heatcapacitycp' 'HeatCapacityCppp1'; 'heatcapacityratiocpcv' 'HeatCapacityRatioCpCvpp1'; 'thermalconductivity' 'ThermalConductivitypp1'; 'viscosity' 'Viscositypp1'}, 'Thermodynamics', {'0' '273' '373' '20' '101325' '201325' '15';  ...
'60' '273' '373' '20' '101325' '201325' '15';  ...
'68' '273' '373' '20' '101325' '201325' '15';  ...
'48' '273' '373' '20' '101325' '201325' '15';  ...
'52' '273' '373' '20' '101325' '201325' '15'}, {'mass' 'mole'});
model.thermodynamics.feature.create('pp2', 'BuiltinPropertyPackage');
model.thermodynamics.feature('pp2').set('compoundlist', {'water' '7732-18-5' 'H2O' 'COMSOL'});
model.thermodynamics.feature('pp2').set('phase_list', {'Vapor' 'Vapor'; 'Liquid' 'Liquid'});
model.thermodynamics.feature('pp2').label('Vapor-Liquid System 1');
model.thermodynamics.feature('pp2').set('manager_id', 'COMSOL');
model.thermodynamics.feature('pp2').set('manager_version', '1.0');
model.thermodynamics.feature('pp2').set('packagename', 'pp2');
model.thermodynamics.feature('pp2').set('package_desc', 'Built-in property package');
model.thermodynamics.feature('pp2').set('managerindex', '0');
model.thermodynamics.feature('pp2').set('packageid', 'COMSOL2');
model.thermodynamics.feature('pp2').set('ThermodynamicModel', 'Water');
model.thermodynamics.feature('pp2').set('EOS', 'IdealGas');
model.thermodynamics.feature('pp2').set('LiquidPhaseModel', 'Water');
model.thermodynamics.feature('pp2').set('LiquidCard', 'LiquidPhaseModel');
model.thermodynamics.feature('pp2').set('EOSModel', 'Water');
model.thermodynamics.feature('pp2').set('GasPhaseModel', 'Water');
model.thermodynamics.feature('pp2').set('GasEOSCard', 'GasPhaseModel');
model.thermodynamics.feature('pp2').set('VapDiffusivity', 'Automatic');
model.thermodynamics.feature('pp2').set('VLSurfaceTension', 'Water');
model.thermodynamics.feature('pp2').set('VapThermalConductivity', 'Water');
model.thermodynamics.feature('pp2').set('VapViscosity', 'Water');
model.thermodynamics.feature('pp2').set('LiqDiffusivity', 'WesselinghKrishna');
model.thermodynamics.feature('pp2').set('LiqDiffusivityAtInfDilution', 'Automatic');
model.thermodynamics.feature('pp2').set('LLSurfaceTension', 'None');
model.thermodynamics.feature('pp2').set('LiqThermalConductivity', 'Water');
model.thermodynamics.feature('pp2').set('LiqViscosity', 'Water');
model.thermodynamics.feature('pp2').set('property', {'Automatic' 'Water' 'Water' 'Water' 'WesselinghKrishna' 'Automatic' 'None' 'Water' 'Water' 'EOS'});
model.thermodynamics.feature('pp2').storePersistenceData;
model.thermodynamics.feature('pp2').set('WarningState', false);
model.thermodynamics.feature('pp2').set('Warning', {''});
model.thermodynamics.feature('pp2').feature.create('tdep1', 'TemperatureDependentProperty');
model.thermodynamics.feature('pp2').feature('tdep1').label('Heat of vaporization 1');
model.thermodynamics.feature('pp2').feature('tdep1').set('funcname', 'HeatOfVaporization_water21');
model.thermodynamics.feature('pp2').feature('tdep1').set('property', 'HeatOfVaporization');
model.thermodynamics.feature('pp2').feature('tdep1').set('propertydescr', 'Heat of vaporization');
model.thermodynamics.feature('pp2').feature('tdep1').set('unit', 'J/kg');
model.thermodynamics.feature('pp2').feature('tdep1').set('prop_basis', 'mass');
model.thermodynamics.feature('pp2').feature('tdep1').set('compounds', {'water'});
model.thermodynamics.feature('pp2').feature('tdep1').comments('Steam tables');
model.thermodynamics.feature('pp2').feature('tdep1').set('args', {'temperature' 'K' 'Temperature' '[273.15 ,647.10]'});
model.thermodynamics.feature('pp2').feature('tdep1').set('plotargs', {'temperature' '298.15' '373.15'});
model.thermodynamics.feature('pp2').feature('tdep1').set('derivatives', {'HeatOfVaporization_water21_Dtemperature'});
model.thermodynamics.feature('pp2').feature('tdep1').set('SecondDerivatives', {});
model.thermodynamics.feature('pp2').feature('tdep1').set('SecondDerivativeIndices', {});
model.thermodynamics.feature('pp2').feature.create('tdep2', 'TemperatureDependentProperty');
model.thermodynamics.feature('pp2').feature('tdep2').label('Ln vapor pressure 1');
model.thermodynamics.feature('pp2').feature('tdep2').set('funcname', 'LnVaporPressure_water22');
model.thermodynamics.feature('pp2').feature('tdep2').set('property', 'LnVaporPressure');
model.thermodynamics.feature('pp2').feature('tdep2').set('propertydescr', 'Ln vapor pressure');
model.thermodynamics.feature('pp2').feature('tdep2').set('unit', '1');
model.thermodynamics.feature('pp2').feature('tdep2').set('prop_basis', 'mass');
model.thermodynamics.feature('pp2').feature('tdep2').set('compounds', {'water'});
model.thermodynamics.feature('pp2').feature('tdep2').comments('Refitted to IAPWS');
model.thermodynamics.feature('pp2').feature('tdep2').set('args', {'temperature' 'K' 'Temperature' '[273.15 ,647.10]'});
model.thermodynamics.feature('pp2').feature('tdep2').set('plotargs', {'temperature' '298.15' '373.15'});
model.thermodynamics.feature('pp2').feature('tdep2').set('derivatives', {'LnVaporPressure_water22_Dtemperature'});
model.thermodynamics.feature('pp2').feature('tdep2').set('SecondDerivatives', {});
model.thermodynamics.feature('pp2').feature('tdep2').set('SecondDerivativeIndices', {});
model.thermodynamics.feature('pp2').set('WarningState', false);
model.thermodynamics.feature('pp2').set('Warning', {''});

model.func.create('an1', 'Analytic');
model.func('an1').label('Vapor pressure of water');
model.func('an1').set('funcname', 'pH2O');
model.func('an1').set('expr', 'exp(LnVaporPressure_water22(T))');
model.func('an1').set('args', 'T');
model.func('an1').setIndex('argunit', 'K', 0);
model.func('an1').set('fununit', 'Pa');
model.func('an1').setIndex('plotargs', 273.15, 0, 1);
model.func('an1').setIndex('plotargs', 373.15, 0, 2);

model.thermodynamics.feature('pp2').feature.create('singlephase1', 'OnePhaseProperty');
model.thermodynamics.feature('pp2').feature('singlephase1').label('Density 1');
model.thermodynamics.feature('pp2').feature('singlephase1').set('funcname', 'Density_water_Liquid21');
model.thermodynamics.feature('pp2').feature('singlephase1').set('property', 'Density');
model.thermodynamics.feature('pp2').feature('singlephase1').set('propertydescr', 'Density');
model.thermodynamics.feature('pp2').feature('singlephase1').set('unit', 'kg/m^3');
model.thermodynamics.feature('pp2').feature('singlephase1').set('prop_basis', 'mass');
model.thermodynamics.feature('pp2').feature('singlephase1').set('compounds', {'water'});
model.thermodynamics.feature('pp2').feature('singlephase1').set('args', {'temperature' 'K' 'Temperature'; 'pressure' 'Pa' 'Pressure'});
model.thermodynamics.feature('pp2').feature('singlephase1').set('plotargs', {'temperature' '298.15' '373.15'; 'pressure' '101325' '101325'});
model.thermodynamics.feature('pp2').feature('singlephase1').set('derivatives', {'Density_water_Liquid21_Dtemperature' 'Density_water_Liquid21_Dpressure'});
model.thermodynamics.feature('pp2').feature('singlephase1').set('SecondDerivatives', {'Density_water_Liquid21_Dtemperature_Dtemperature' 'Density_water_Liquid21_Dtemperature_Dpressure' 'Density_water_Liquid21_Dpressure_Dpressure'});
model.thermodynamics.feature('pp2').feature('singlephase1').set('SecondDerivativeIndices', {'0' '0' '0' '0' '1' '1' '1' '1' '2'});
model.thermodynamics.feature('pp2').feature('singlephase1').set('phase', 'Liquid');
model.thermodynamics.feature('pp2').feature('singlephase1').set('comp_basis', 'mole');
model.thermodynamics.feature('pp2').feature('singlephase1').set('include_derivatives', 'yes');
model.thermodynamics.feature('pp2').feature.create('singlephase2', 'OnePhaseProperty');
model.thermodynamics.feature('pp2').feature('singlephase2').label('Heat capacity (Cp) 1');
model.thermodynamics.feature('pp2').feature('singlephase2').set('funcname', 'HeatCapacityCp_water_Liquid22');
model.thermodynamics.feature('pp2').feature('singlephase2').set('property', 'HeatCapacityCp');
model.thermodynamics.feature('pp2').feature('singlephase2').set('propertydescr', 'Heat capacity (Cp)');
model.thermodynamics.feature('pp2').feature('singlephase2').set('unit', 'J/kg/K');
model.thermodynamics.feature('pp2').feature('singlephase2').set('prop_basis', 'mass');
model.thermodynamics.feature('pp2').feature('singlephase2').set('compounds', {'water'});
model.thermodynamics.feature('pp2').feature('singlephase2').set('args', {'temperature' 'K' 'Temperature'; 'pressure' 'Pa' 'Pressure'});
model.thermodynamics.feature('pp2').feature('singlephase2').set('plotargs', {'temperature' '298.15' '373.15'; 'pressure' '101325' '101325'});
model.thermodynamics.feature('pp2').feature('singlephase2').set('derivatives', {'HeatCapacityCp_water_Liquid22_Dtemperature' 'HeatCapacityCp_water_Liquid22_Dpressure'});
model.thermodynamics.feature('pp2').feature('singlephase2').set('SecondDerivatives', {});
model.thermodynamics.feature('pp2').feature('singlephase2').set('SecondDerivativeIndices', {});
model.thermodynamics.feature('pp2').feature('singlephase2').set('phase', 'Liquid');
model.thermodynamics.feature('pp2').feature('singlephase2').set('comp_basis', 'mole');
model.thermodynamics.feature('pp2').feature('singlephase2').set('include_derivatives', 'yes');
model.thermodynamics.feature('pp2').feature.create('singlephase3', 'OnePhaseProperty');
model.thermodynamics.feature('pp2').feature('singlephase3').label('Heat capacity ratio (Cp/Cv) 1');
model.thermodynamics.feature('pp2').feature('singlephase3').set('funcname', 'HeatCapacityRatioCpCv_water_Liquid23');
model.thermodynamics.feature('pp2').feature('singlephase3').set('property', 'HeatCapacityRatioCpCv');
model.thermodynamics.feature('pp2').feature('singlephase3').set('propertydescr', 'Heat capacity ratio (Cp/Cv)');
model.thermodynamics.feature('pp2').feature('singlephase3').set('unit', '1');
model.thermodynamics.feature('pp2').feature('singlephase3').set('prop_basis', 'mass');
model.thermodynamics.feature('pp2').feature('singlephase3').set('compounds', {'water'});
model.thermodynamics.feature('pp2').feature('singlephase3').set('args', {'temperature' 'K' 'Temperature'; 'pressure' 'Pa' 'Pressure'});
model.thermodynamics.feature('pp2').feature('singlephase3').set('plotargs', {'temperature' '298.15' '373.15'; 'pressure' '101325' '101325'});
model.thermodynamics.feature('pp2').feature('singlephase3').set('derivatives', {'HeatCapacityRatioCpCv_water_Liquid23_Dtemperature' 'HeatCapacityRatioCpCv_water_Liquid23_Dpressure'});
model.thermodynamics.feature('pp2').feature('singlephase3').set('SecondDerivatives', {});
model.thermodynamics.feature('pp2').feature('singlephase3').set('SecondDerivativeIndices', {});
model.thermodynamics.feature('pp2').feature('singlephase3').set('phase', 'Liquid');
model.thermodynamics.feature('pp2').feature('singlephase3').set('comp_basis', 'mole');
model.thermodynamics.feature('pp2').feature('singlephase3').set('include_derivatives', 'yes');
model.thermodynamics.feature('pp2').feature.create('singlephase4', 'OnePhaseProperty');
model.thermodynamics.feature('pp2').feature('singlephase4').label('Thermal conductivity 1');
model.thermodynamics.feature('pp2').feature('singlephase4').set('funcname', 'ThermalConductivity_water_Liquid24');
model.thermodynamics.feature('pp2').feature('singlephase4').set('property', 'ThermalConductivity');
model.thermodynamics.feature('pp2').feature('singlephase4').set('propertydescr', 'Thermal conductivity');
model.thermodynamics.feature('pp2').feature('singlephase4').set('unit', 'W/m/K');
model.thermodynamics.feature('pp2').feature('singlephase4').set('prop_basis', 'mass');
model.thermodynamics.feature('pp2').feature('singlephase4').set('compounds', {'water'});
model.thermodynamics.feature('pp2').feature('singlephase4').set('args', {'temperature' 'K' 'Temperature'; 'pressure' 'Pa' 'Pressure'});
model.thermodynamics.feature('pp2').feature('singlephase4').set('plotargs', {'temperature' '298.15' '373.15'; 'pressure' '101325' '101325'});
model.thermodynamics.feature('pp2').feature('singlephase4').set('derivatives', {'ThermalConductivity_water_Liquid24_Dtemperature' 'ThermalConductivity_water_Liquid24_Dpressure'});
model.thermodynamics.feature('pp2').feature('singlephase4').set('SecondDerivatives', {});
model.thermodynamics.feature('pp2').feature('singlephase4').set('SecondDerivativeIndices', {});
model.thermodynamics.feature('pp2').feature('singlephase4').set('phase', 'Liquid');
model.thermodynamics.feature('pp2').feature('singlephase4').set('comp_basis', 'mole');
model.thermodynamics.feature('pp2').feature('singlephase4').set('include_derivatives', 'yes');
model.thermodynamics.feature('pp2').feature.create('singlephase5', 'OnePhaseProperty');
model.thermodynamics.feature('pp2').feature('singlephase5').label('Viscosity 1');
model.thermodynamics.feature('pp2').feature('singlephase5').set('funcname', 'Viscosity_water_Liquid25');
model.thermodynamics.feature('pp2').feature('singlephase5').set('property', 'Viscosity');
model.thermodynamics.feature('pp2').feature('singlephase5').set('propertydescr', 'Viscosity');
model.thermodynamics.feature('pp2').feature('singlephase5').set('unit', 'Pa*s');
model.thermodynamics.feature('pp2').feature('singlephase5').set('prop_basis', 'mass');
model.thermodynamics.feature('pp2').feature('singlephase5').set('compounds', {'water'});
model.thermodynamics.feature('pp2').feature('singlephase5').set('args', {'temperature' 'K' 'Temperature'; 'pressure' 'Pa' 'Pressure'});
model.thermodynamics.feature('pp2').feature('singlephase5').set('plotargs', {'temperature' '298.15' '373.15'; 'pressure' '101325' '101325'});
model.thermodynamics.feature('pp2').feature('singlephase5').set('derivatives', {'Viscosity_water_Liquid25_Dtemperature' 'Viscosity_water_Liquid25_Dpressure'});
model.thermodynamics.feature('pp2').feature('singlephase5').set('SecondDerivatives', {});
model.thermodynamics.feature('pp2').feature('singlephase5').set('SecondDerivativeIndices', {});
model.thermodynamics.feature('pp2').feature('singlephase5').set('phase', 'Liquid');
model.thermodynamics.feature('pp2').feature('singlephase5').set('comp_basis', 'mole');
model.thermodynamics.feature('pp2').feature('singlephase5').set('include_derivatives', 'yes');
model.thermodynamics.feature('pp2').feature('singlephase1').tag('mat_singlephase1');
model.thermodynamics.feature('pp2').feature('mat_singlephase1').set('funcname', 'Densitypp2');
model.thermodynamics.feature('pp2').feature('singlephase2').tag('mat_singlephase2');
model.thermodynamics.feature('pp2').feature('mat_singlephase2').set('funcname', 'HeatCapacityCppp2');
model.thermodynamics.feature('pp2').feature('singlephase3').tag('mat_singlephase3');
model.thermodynamics.feature('pp2').feature('mat_singlephase3').set('funcname', 'HeatCapacityRatioCpCvpp2');
model.thermodynamics.feature('pp2').feature('singlephase4').tag('mat_singlephase4');
model.thermodynamics.feature('pp2').feature('mat_singlephase4').set('funcname', 'ThermalConductivitypp2');
model.thermodynamics.feature('pp2').feature('singlephase5').tag('mat_singlephase5');
model.thermodynamics.feature('pp2').feature('mat_singlephase5').set('funcname', 'Viscositypp2');
model.thermodynamics.createMaterial('Global', 'pp2', 'Liquid', {'water'}, {'1'}, {}, {'density' 'Densitypp2'; 'heatcapacitycp' 'HeatCapacityCppp2'; 'heatcapacityratiocpcv' 'HeatCapacityRatioCpCvpp2'; 'thermalconductivity' 'ThermalConductivitypp2'; 'viscosity' 'Viscositypp2'}, 'Thermodynamics', {'0' '273' '373' '20' '101325' '201325' '15';  ...
'60' '273' '373' '20' '101325' '201325' '15';  ...
'68' '273' '373' '20' '101325' '201325' '15';  ...
'48' '273' '373' '20' '101325' '201325' '15';  ...
'52' '273' '373' '20' '101325' '201325' '15'}, {'mass' 'mole'});

model.material.create('sw1', 'Switch', '');
model.material('sw1').label('Fluid in Wick');
model.material('sw1').feature.copy('pp2mat1', 'pp2mat1', '');
model.material('sw1').feature.copy('pp1mat1', 'pp1mat1', '');
model.material.create('pmat1', 'PorousMedia', 'comp1');
model.material('pmat1').selection.named('geom1_sel2');
model.material('pmat1').feature.create('fluid1', 'Fluid', 'comp1');
model.material('pmat1').feature('fluid1').set('link', 'sw1');
model.material('pmat1').feature.create('solid1', 'Solid', 'comp1');
model.material('pmat1').feature('solid1').set('vfrac', '1-wick_porosity');
model.material.create('matlnk1', 'Link', 'comp1');
model.material('matlnk1').label('Water Vapor');
model.material('matlnk1').selection.named('geom1_sel1');
model.material('matlnk1').set('link', 'pp1mat1');
model.material.create('matlnk2', 'Link', 'comp1');
model.material('matlnk2').label('Copper Metal');
model.material('matlnk2').selection.named('geom1_sel3');

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 2);
model.multiphysics.create('nitf2', 'NonIsothermalFlow', 'geom1', 2);
model.multiphysics('nitf2').set('Fluid_physics', 'br');

model.physics('spf').selection.named('geom1_sel1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'CompressibleMALT03');
model.physics('spf').prop('PhysicalModelProperty').set('pref', 'p_ref');
model.physics('spf').create('inl1', 'InletBoundary', 1);
model.physics('spf').feature('inl1').selection.named('geom1_sel9');
model.physics('spf').feature('inl1').set('BoundaryCondition', 'Pressure');
model.physics('spf').feature('inl1').set('p0', 'pH2O(T)-p_ref');
model.physics('spf').feature('inl1').set('SuppressBackflow', false);
model.physics('spf').feature('init1').set('p_init', 'p_ref');
model.physics('br').selection.named('geom1_sel2');
model.physics('br').prop('PhysicalModelProperty').set('Compressibility', 'CompressibleMALT03');
model.physics('br').prop('PhysicalModelProperty').set('pref', 'p_ref');
model.physics('br').feature('porous1').feature('pm1').set('kappa_mat', 'userdef');
model.physics('br').feature('porous1').feature('pm1').set('kappa', {'wick_permeability' '0' '0' '0' 'wick_permeability' '0' '0' '0' 'wick_permeability'});
model.physics('br').create('inl1', 'InletBoundary', 1);
model.physics('br').feature('inl1').selection.named('geom1_sel9');
model.physics('br').feature('inl1').set('ComponentWise', 'VelocityFieldComponentWise');
model.physics('br').feature('inl1').set('u0', {'u*spf.rho/br.rho' '0' 'w*spf.rho/br.rho'});
model.physics('br').create('prpc1', 'PressurePointConstraint', 0);
model.physics('br').feature('prpc1').selection.set([9]);
model.physics('br').feature('prpc1').set('p0', 'pH2O(T)-p_ref');
model.physics('ht').create('solid1', 'SolidHeatTransferModel', 2);
model.physics('ht').feature('solid1').selection.named('geom1_sel3');
model.physics('ht').create('fluid1', 'FluidHeatTransferModel', 2);
model.physics('ht').feature('fluid1').selection.named('geom1_sel1');
model.physics('ht').feature('porous1').feature('pm1').set('porousMatrixPropertiesType', 'solidPhaseProperties');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf1').selection.named('geom1_sel5');
model.physics('ht').feature('hf1').set('q0_input', 'phi_in');
model.physics('ht').create('hf2', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf2').selection.named('geom1_sel4');
model.physics('ht').feature('hf2').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf2').set('h', 'h_conv');
model.physics('ht').create('bhs1', 'BoundaryHeatSource', 1);
model.physics('ht').feature('bhs1').selection.named('geom1_sel9');
model.physics('ht').feature('bhs1').set('Qb_input', '(u*spf.nr+w*spf.nz)*HeatOfVaporization_water21(T)*spf.rho');

model.study('std1').label('Study 1 - Dry Wick');
model.study('std1').create('matsw', 'MaterialSweep');
model.study('std1').feature('matsw').setIndex('pname', 'matsw.sw1', 0);
model.study('std1').feature('matsw').setIndex('pcase', 'all', 0);
model.study('std1').feature('matsw').setIndex('plistarr', 'range(1,1,2)', 0);
model.study('std1').feature('matsw').setIndex('pname', 'matsw.sw1', 0);
model.study('std1').feature('matsw').setIndex('pcase', 'all', 0);
model.study('std1').feature('matsw').setIndex('plistarr', 'range(1,1,2)', 0);
model.study('std1').feature('matsw').setIndex('pcase', 'user', 0);
model.study('std1').feature('matsw').setIndex('plistarr', 2, 0);
model.study('std1').feature('stat').setEntry('activate', 'spf', false);
model.study('std1').feature('stat').setEntry('activate', 'br', false);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([3 4]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2 5]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables (ht) (nitf1) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, heat transfer variables (ht) (nitf1)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');

model.batch.create('pm1', 'MaterialSweep');
model.batch('pm1').study('std1');
model.batch('pm1').create('so1', 'Solutionseq');
model.batch('pm1').feature('so1').set('seq', 'sol1');
model.batch('pm1').feature('so1').set('store', 'on');
model.batch('pm1').feature('so1').set('clear', 'on');
model.batch('pm1').feature('so1').set('psol', 'none');
model.batch('pm1').set('pname', {'matsw.sw1'});
model.batch('pm1').set('plistarr', {'2'});
model.batch('pm1').set('sweeptype', 'filled');
model.batch('pm1').set('probesel', 'all');
model.batch('pm1').set('probes', {});
model.batch('pm1').set('plot', 'off');
model.batch('pm1').set('err', 'on');
model.batch('pm1').attach('std1');
model.batch('pm1').set('control', 'matsw');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('pm1').feature('so1').set('psol', 'sol2');
model.batch('pm1').run('compute');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Temperature (ht)');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').feature('surf1').set('expr', 'T');
model.result('pg1').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Temperature and Fluid Flow (nitf1)');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').set('dataisaxisym', 'off');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond4/pcond4/pcond1/pg2');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Fluid Temperature');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solutionparams', 'parent');
model.result('pg2').feature('surf1').set('expr', 'nitf1.T');
model.result('pg2').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg2').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg2').feature('surf1').feature('sel1').selection.set([3 4]);
model.result('pg2').feature.create('surf2', 'Surface');
model.result('pg2').feature('surf2').label('Solid Temperature');
model.result('pg2').feature('surf2').set('showsolutionparams', 'on');
model.result('pg2').feature('surf2').set('solutionparams', 'parent');
model.result('pg2').feature('surf2').set('expr', 'nitf1.T');
model.result('pg2').feature('surf2').set('smooth', 'internal');
model.result('pg2').feature('surf2').set('showsolutionparams', 'on');
model.result('pg2').feature('surf2').set('data', 'parent');
model.result('pg2').feature('surf2').feature.create('sel1', 'Selection');
model.result('pg2').feature('surf2').feature('sel1').selection.geom('geom1', 2);
model.result('pg2').feature('surf2').feature('sel1').selection.set([1 6]);
model.result('pg2').feature('surf2').set('inheritplot', 'surf1');
model.result('pg2').feature.create('arws1', 'ArrowSurface');
model.result('pg2').feature('arws1').label('Fluid Flow');
model.result('pg2').feature('arws1').set('showsolutionparams', 'on');
model.result('pg2').feature('arws1').set('solutionparams', 'parent');
model.result('pg2').feature('arws1').set('expr', {'nitf1.ur' 'nitf1.uz'});
model.result('pg2').feature('arws1').set('xnumber', 30);
model.result('pg2').feature('arws1').set('ynumber', 30);
model.result('pg2').feature('arws1').set('arrowtype', 'cone');
model.result('pg2').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg2').feature('arws1').set('showsolutionparams', 'on');
model.result('pg2').feature('arws1').set('data', 'parent');
model.result('pg2').feature('arws1').feature.create('col1', 'Color');
model.result('pg2').feature('arws1').feature('col1').set('showcolordata', 'off');
model.result('pg2').feature('arws1').feature.create('filt1', 'Filter');
model.result('pg2').feature('arws1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Temperature and Fluid Flow (nitf2)');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').set('dataisaxisym', 'off');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond4/pcond4/pcond1/pg2');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Fluid Temperature');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg3').feature('surf1').set('expr', 'nitf2.T');
model.result('pg3').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg3').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg3').feature('surf1').feature('sel1').selection.set([2 5]);
model.result('pg3').feature.create('surf2', 'Surface');
model.result('pg3').feature('surf2').label('Solid Temperature');
model.result('pg3').feature('surf2').set('showsolutionparams', 'on');
model.result('pg3').feature('surf2').set('solutionparams', 'parent');
model.result('pg3').feature('surf2').set('expr', 'nitf2.T');
model.result('pg3').feature('surf2').set('smooth', 'internal');
model.result('pg3').feature('surf2').set('showsolutionparams', 'on');
model.result('pg3').feature('surf2').set('data', 'parent');
model.result('pg3').feature('surf2').feature.create('sel1', 'Selection');
model.result('pg3').feature('surf2').feature('sel1').selection.geom('geom1', 2);
model.result('pg3').feature('surf2').feature('sel1').selection.set([1 6]);
model.result('pg3').feature('surf2').set('inheritplot', 'surf1');
model.result('pg3').feature.create('arws1', 'ArrowSurface');
model.result('pg3').feature('arws1').label('Fluid Flow');
model.result('pg3').feature('arws1').set('showsolutionparams', 'on');
model.result('pg3').feature('arws1').set('solutionparams', 'parent');
model.result('pg3').feature('arws1').set('expr', {'nitf2.ur' 'nitf2.uz'});
model.result('pg3').feature('arws1').set('xnumber', 30);
model.result('pg3').feature('arws1').set('ynumber', 30);
model.result('pg3').feature('arws1').set('arrowtype', 'cone');
model.result('pg3').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('arws1').set('showsolutionparams', 'on');
model.result('pg3').feature('arws1').set('data', 'parent');
model.result('pg3').feature('arws1').feature.create('col1', 'Color');
model.result('pg3').feature('arws1').feature('col1').set('showcolordata', 'off');
model.result('pg3').feature('arws1').feature('col1').set('expr', 'br.U');
model.result('pg3').feature('arws1').feature.create('filt1', 'Filter');
model.result('pg3').feature('arws1').feature('filt1').set('expr', 'br.U>nitf2.Uave');
model.result('pg1').run;
model.result('pg1').label('Temperature - Dry Wick');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Temperature');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').run;
model.result('pg1').feature('surf1').set('unit', 'degC');
model.result('pg1').run;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/spf', true);
model.study('std2').feature('stat').setSolveFor('/physics/br', true);
model.study('std2').feature('stat').setSolveFor('/physics/ht', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/nitf1', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/nitf2', true);
model.study('std2').label('Study 2 - Saturated Wick');
model.study('std2').create('matsw', 'MaterialSweep');
model.study('std2').feature('matsw').setIndex('pname', 'matsw.sw1', 0);
model.study('std2').feature('matsw').setIndex('pcase', 'all', 0);
model.study('std2').feature('matsw').setIndex('plistarr', 'range(1,1,2)', 0);
model.study('std2').feature('matsw').setIndex('pname', 'matsw.sw1', 0);
model.study('std2').feature('matsw').setIndex('pcase', 'all', 0);
model.study('std2').feature('matsw').setIndex('plistarr', 'range(1,1,2)', 0);
model.study('std2').feature('matsw').setIndex('pcase', 'user', 0);
model.study('std2').feature('matsw').setIndex('plistarr', 1, 0);
model.study('std2').feature.duplicate('stat1', 'stat');
model.study('std2').feature('stat').setEntry('activate', 'br', false);

model.sol.create('sol4');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([3 4]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2 5]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([3 4]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([2 5]);

model.sol('sol4').study('std2');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std2');
model.sol('sol4').feature('st1').set('studystep', 'stat');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'stat');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('s1').create('seDef', 'Segregated');
model.sol('sol4').feature('s1').create('se1', 'Segregated');
model.sol('sol4').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol4').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol4').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u'});
model.sol('sol4').feature('s1').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol4').feature('s1').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol4').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol4').feature('s1').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol4').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol4').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_T'});
model.sol('sol4').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.5);
model.sol('sol4').feature('s1').create('d2', 'Direct');
model.sol('sol4').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol4').feature('s1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s1').feature('d2').label('Direct, heat transfer variables (ht)');
model.sol('sol4').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol4').feature('s1').feature('se1').feature('ss2').label('Temperature');
model.sol('sol4').feature('s1').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol4').feature('s1').feature('se1').set('subinitcfl', 5);
model.sol('sol4').feature('s1').feature('se1').set('submincfl', 10000);
model.sol('sol4').feature('s1').feature('se1').set('subkppid', 0.65);
model.sol('sol4').feature('s1').feature('se1').set('subkdpid', 0.15);
model.sol('sol4').feature('s1').feature('se1').set('subkipid', 0.15);
model.sol('sol4').feature('s1').feature('se1').set('subcfltol', 0.1);
model.sol('sol4').feature('s1').feature('se1').set('segcflaa', true);
model.sol('sol4').feature('s1').feature('se1').set('segcflaacfl', 9000);
model.sol('sol4').feature('s1').feature('se1').set('segcflaafact', 1);
model.sol('sol4').feature('s1').feature('se1').set('maxsegiter', 200);
model.sol('sol4').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol4').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol4').feature('s1').create('d3', 'Direct');
model.sol('sol4').feature('s1').feature('d3').label('Direct (Merged)');
model.sol('sol4').feature('s1').create('i1', 'Iterative');
model.sol('sol4').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol4').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol4').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol4').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol4').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol4').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol4').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s1').create('i2', 'Iterative');
model.sol('sol4').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol4').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol4').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol4').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol4').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol4').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol4').feature('s1').feature('i2').label('AMG, heat transfer variables (ht) (nitf2)');
model.sol('sol4').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s1').create('i3', 'Iterative');
model.sol('sol4').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol4').feature('s1').feature('i3').set('prefuntype', 'left');
model.sol('sol4').feature('s1').feature('i3').set('itrestart', 50);
model.sol('sol4').feature('s1').feature('i3').set('rhob', 20);
model.sol('sol4').feature('s1').feature('i3').set('maxlinit', 10000);
model.sol('sol4').feature('s1').feature('i3').set('nlinnormuse', 'on');
model.sol('sol4').feature('s1').feature('i3').label('AMG, heat transfer variables (ht)');
model.sol('sol4').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('strconn', 0.01);
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol4').feature('s1').feature('i3').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol4').feature('s1').feature('i3').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol4').feature('s1').feature('i3').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('s1').feature('i3').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol4').feature('s1').feature('i3').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol4').feature('s1').feature('i3').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('s1').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s1').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').feature('s1').feature.remove('seDef');
model.sol('sol4').create('su1', 'StoreSolution');
model.sol('sol4').create('st2', 'StudyStep');
model.sol('sol4').feature('st2').set('study', 'std2');
model.sol('sol4').feature('st2').set('studystep', 'stat1');
model.sol('sol4').create('v2', 'Variables');
model.sol('sol4').feature('v2').set('initmethod', 'sol');
model.sol('sol4').feature('v2').set('initsol', 'sol4');
model.sol('sol4').feature('v2').set('initsoluse', 'sol5');
model.sol('sol4').feature('v2').set('notsolmethod', 'sol');
model.sol('sol4').feature('v2').set('notsol', 'sol4');
model.sol('sol4').feature('v2').set('control', 'stat1');
model.sol('sol4').create('s2', 'Stationary');
model.sol('sol4').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('s2').create('seDef', 'Segregated');
model.sol('sol4').feature('s2').create('se1', 'Segregated');
model.sol('sol4').feature('s2').feature('se1').feature.remove('ssDef');
model.sol('sol4').feature('s2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol4').feature('s2').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u'});
model.sol('sol4').feature('s2').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol4').feature('s2').create('d1', 'Direct');
model.sol('sol4').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s2').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol4').feature('s2').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol4').feature('s2').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol4').feature('s2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol4').feature('s2').feature('se1').feature('ss2').set('segvar', {'comp1_T'});
model.sol('sol4').feature('s2').feature('se1').feature('ss2').set('subdamp', 0.5);
model.sol('sol4').feature('s2').create('d2', 'Direct');
model.sol('sol4').feature('s2').feature('d2').set('linsolver', 'pardiso');
model.sol('sol4').feature('s2').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s2').feature('d2').label('Direct, heat transfer variables (ht)');
model.sol('sol4').feature('s2').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol4').feature('s2').feature('se1').feature('ss2').label('Temperature');
model.sol('sol4').feature('s2').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol4').feature('s2').feature('se1').feature('ss3').set('segvar', {'comp1_p2' 'comp1_u2'});
model.sol('sol4').feature('s2').feature('se1').feature('ss3').set('subdamp', 0.5);
model.sol('sol4').feature('s2').create('d3', 'Direct');
model.sol('sol4').feature('s2').feature('d3').set('linsolver', 'pardiso');
model.sol('sol4').feature('s2').feature('d3').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s2').feature('d3').label('Direct, fluid flow variables (br)');
model.sol('sol4').feature('s2').feature('se1').feature('ss3').set('linsolver', 'd3');
model.sol('sol4').feature('s2').feature('se1').feature('ss3').label('Velocity U2, Pressure P2');
model.sol('sol4').feature('s2').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol4').feature('s2').feature('se1').set('subinitcfl', 5);
model.sol('sol4').feature('s2').feature('se1').set('submincfl', 10000);
model.sol('sol4').feature('s2').feature('se1').set('subkppid', 0.65);
model.sol('sol4').feature('s2').feature('se1').set('subkdpid', 0.15);
model.sol('sol4').feature('s2').feature('se1').set('subkipid', 0.15);
model.sol('sol4').feature('s2').feature('se1').set('subcfltol', 0.1);
model.sol('sol4').feature('s2').feature('se1').set('segcflaa', true);
model.sol('sol4').feature('s2').feature('se1').set('segcflaacfl', 9000);
model.sol('sol4').feature('s2').feature('se1').set('segcflaafact', 1);
model.sol('sol4').feature('s2').feature('se1').set('maxsegiter', 200);
model.sol('sol4').feature('s2').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol4').feature('s2').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol4').feature('s2').create('i1', 'Iterative');
model.sol('sol4').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol4').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol4').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol4').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol4').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol4').feature('s2').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol4').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s2').create('i2', 'Iterative');
model.sol('sol4').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol4').feature('s2').feature('i2').set('prefuntype', 'left');
model.sol('sol4').feature('s2').feature('i2').set('itrestart', 50);
model.sol('sol4').feature('s2').feature('i2').set('rhob', 20);
model.sol('sol4').feature('s2').feature('i2').set('maxlinit', 10000);
model.sol('sol4').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol4').feature('s2').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol4').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol4').feature('s2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol4').feature('s2').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol4').feature('s2').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol4').feature('s2').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol4').feature('s2').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol4').feature('s2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol4').feature('s2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol4').feature('s2').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol4').feature('s2').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol4').feature('s2').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol4').feature('s2').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol4').feature('s2').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('s2').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol4').feature('s2').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol4').feature('s2').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol4').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s2').create('i3', 'Iterative');
model.sol('sol4').feature('s2').feature('i3').set('linsolver', 'gmres');
model.sol('sol4').feature('s2').feature('i3').set('prefuntype', 'left');
model.sol('sol4').feature('s2').feature('i3').set('itrestart', 50);
model.sol('sol4').feature('s2').feature('i3').set('rhob', 20);
model.sol('sol4').feature('s2').feature('i3').set('maxlinit', 1000);
model.sol('sol4').feature('s2').feature('i3').set('nlinnormuse', 'on');
model.sol('sol4').feature('s2').feature('i3').label('AMG, fluid flow variables (br)');
model.sol('sol4').feature('s2').feature('i3').create('mg1', 'Multigrid');
model.sol('sol4').feature('s2').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol4').feature('s2').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol4').feature('s2').feature('i3').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').set('strconn', 0.02);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol4').feature('s2').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s2').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s2').feature.remove('fcDef');
model.sol('sol4').feature('s2').feature.remove('seDef');
model.sol('sol4').feature('v2').set('notsolnum', 'auto');
model.sol('sol4').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol4').attach('std2');

model.batch.create('pm2', 'MaterialSweep');
model.batch('pm2').study('std2');
model.batch('pm2').create('so1', 'Solutionseq');
model.batch('pm2').feature('so1').set('seq', 'sol4');
model.batch('pm2').feature('so1').set('store', 'on');
model.batch('pm2').feature('so1').set('clear', 'on');
model.batch('pm2').feature('so1').set('psol', 'none');
model.batch('pm2').set('pname', {'matsw.sw1'});
model.batch('pm2').set('plistarr', {'1'});
model.batch('pm2').set('sweeptype', 'filled');
model.batch('pm2').set('probesel', 'all');
model.batch('pm2').set('probes', {});
model.batch('pm2').set('plot', 'off');
model.batch('pm2').set('err', 'on');
model.batch('pm2').attach('std2');
model.batch('pm2').set('control', 'matsw');

model.sol.create('sol6');
model.sol('sol6').study('std2');
model.sol('sol6').label('Parametric Solutions 2');

model.batch('pm2').feature('so1').set('psol', 'sol6');
model.batch('pm2').getInitialValue;

model.result.dataset('dset5').set('geom', 'geom1');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Velocity (spf)');
model.result('pg4').set('data', 'dset5');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').setIndex('looplevel', 1, 1);
model.result('pg4').set('dataisaxisym', 'off');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset5');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').setIndex('looplevel', 1, 1);
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Surface');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Pressure (spf)');
model.result('pg5').set('data', 'dset5');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').setIndex('looplevel', 1, 1);
model.result('pg5').set('dataisaxisym', 'off');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('data', 'dset5');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').setIndex('looplevel', 1, 1);
model.result('pg5').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg5').feature.create('con1', 'Contour');
model.result('pg5').feature('con1').label('Contour');
model.result('pg5').feature('con1').set('showsolutionparams', 'on');
model.result('pg5').feature('con1').set('expr', 'p');
model.result('pg5').feature('con1').set('number', 40);
model.result('pg5').feature('con1').set('levelrounding', false);
model.result('pg5').feature('con1').set('smooth', 'internal');
model.result('pg5').feature('con1').set('showsolutionparams', 'on');
model.result('pg5').feature('con1').set('data', 'parent');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').label('Revolution 2D');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset5');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Velocity, 3D (spf)');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('data', 'rev1');
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').setIndex('looplevel', 1, 1);
model.result('pg6').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond1/pg1');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').label('Surface');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result.dataset('dset5').set('geom', 'geom1');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').label('Velocity (br)');
model.result('pg7').set('data', 'dset5');
model.result('pg7').setIndex('looplevel', 1, 0);
model.result('pg7').setIndex('looplevel', 1, 1);
model.result('pg7').set('dataisaxisym', 'off');
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').set('data', 'dset5');
model.result('pg7').setIndex('looplevel', 1, 0);
model.result('pg7').setIndex('looplevel', 1, 1);
model.result('pg7').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg7').feature.create('surf1', 'Surface');
model.result('pg7').feature('surf1').label('Surface');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('expr', 'br.U');
model.result('pg7').feature('surf1').set('smooth', 'internal');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('data', 'parent');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').label('Pressure (br)');
model.result('pg8').set('data', 'dset5');
model.result('pg8').setIndex('looplevel', 1, 0);
model.result('pg8').setIndex('looplevel', 1, 1);
model.result('pg8').set('dataisaxisym', 'off');
model.result('pg8').set('frametype', 'spatial');
model.result('pg8').set('data', 'dset5');
model.result('pg8').setIndex('looplevel', 1, 0);
model.result('pg8').setIndex('looplevel', 1, 1);
model.result('pg8').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg8').feature.create('con1', 'Contour');
model.result('pg8').feature('con1').label('Contour');
model.result('pg8').feature('con1').set('showsolutionparams', 'on');
model.result('pg8').feature('con1').set('expr', 'p2');
model.result('pg8').feature('con1').set('number', 40);
model.result('pg8').feature('con1').set('levelrounding', false);
model.result('pg8').feature('con1').set('smooth', 'internal');
model.result('pg8').feature('con1').set('showsolutionparams', 'on');
model.result('pg8').feature('con1').set('data', 'parent');
model.result.dataset('rev1').set('data', 'dset5');
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').label('Velocity, 3D (br)');
model.result('pg9').set('frametype', 'spatial');
model.result('pg9').set('data', 'rev1');
model.result('pg9').setIndex('looplevel', 1, 0);
model.result('pg9').setIndex('looplevel', 1, 1);
model.result('pg9').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond1/pg1');
model.result('pg9').feature.create('surf1', 'Surface');
model.result('pg9').feature('surf1').label('Surface');
model.result('pg9').feature('surf1').set('showsolutionparams', 'on');
model.result('pg9').feature('surf1').set('expr', 'br.U');
model.result('pg9').feature('surf1').set('smooth', 'internal');
model.result('pg9').feature('surf1').set('showsolutionparams', 'on');
model.result('pg9').feature('surf1').set('data', 'parent');
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').label('Temperature (ht)');
model.result('pg10').set('data', 'dset5');
model.result('pg10').setIndex('looplevel', 1, 0);
model.result('pg10').setIndex('looplevel', 1, 1);
model.result('pg10').set('dataisaxisym', 'off');
model.result('pg10').set('data', 'dset5');
model.result('pg10').setIndex('looplevel', 1, 0);
model.result('pg10').setIndex('looplevel', 1, 1);
model.result('pg10').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg10').feature.create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('showsolutionparams', 'on');
model.result('pg10').feature('surf1').set('solutionparams', 'parent');
model.result('pg10').feature('surf1').set('expr', 'T');
model.result('pg10').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg10').feature('surf1').set('showsolutionparams', 'on');
model.result('pg10').feature('surf1').set('data', 'parent');
model.result.create('pg11', 'PlotGroup2D');
model.result('pg11').label('Temperature and Fluid Flow (nitf1) 1');
model.result('pg11').set('data', 'dset5');
model.result('pg11').setIndex('looplevel', 1, 0);
model.result('pg11').setIndex('looplevel', 1, 1);
model.result('pg11').set('dataisaxisym', 'off');
model.result('pg11').set('showlegendsunit', true);
model.result('pg11').set('data', 'dset5');
model.result('pg11').setIndex('looplevel', 1, 0);
model.result('pg11').setIndex('looplevel', 1, 1);
model.result('pg11').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond4/pcond4/pcond1/pg2');
model.result('pg11').feature.create('surf1', 'Surface');
model.result('pg11').feature('surf1').label('Fluid Temperature');
model.result('pg11').feature('surf1').set('showsolutionparams', 'on');
model.result('pg11').feature('surf1').set('solutionparams', 'parent');
model.result('pg11').feature('surf1').set('expr', 'nitf1.T');
model.result('pg11').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg11').feature('surf1').set('smooth', 'internal');
model.result('pg11').feature('surf1').set('showsolutionparams', 'on');
model.result('pg11').feature('surf1').set('data', 'parent');
model.result('pg11').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg11').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg11').feature('surf1').feature('sel1').selection.set([3 4]);
model.result('pg11').feature.create('surf2', 'Surface');
model.result('pg11').feature('surf2').label('Solid Temperature');
model.result('pg11').feature('surf2').set('showsolutionparams', 'on');
model.result('pg11').feature('surf2').set('solutionparams', 'parent');
model.result('pg11').feature('surf2').set('expr', 'nitf1.T');
model.result('pg11').feature('surf2').set('smooth', 'internal');
model.result('pg11').feature('surf2').set('showsolutionparams', 'on');
model.result('pg11').feature('surf2').set('data', 'parent');
model.result('pg11').feature('surf2').feature.create('sel1', 'Selection');
model.result('pg11').feature('surf2').feature('sel1').selection.geom('geom1', 2);
model.result('pg11').feature('surf2').feature('sel1').selection.set([1 6]);
model.result('pg11').feature('surf2').set('inheritplot', 'surf1');
model.result('pg11').feature.create('arws1', 'ArrowSurface');
model.result('pg11').feature('arws1').label('Fluid Flow');
model.result('pg11').feature('arws1').set('showsolutionparams', 'on');
model.result('pg11').feature('arws1').set('solutionparams', 'parent');
model.result('pg11').feature('arws1').set('expr', {'nitf1.ur' 'nitf1.uz'});
model.result('pg11').feature('arws1').set('xnumber', 30);
model.result('pg11').feature('arws1').set('ynumber', 30);
model.result('pg11').feature('arws1').set('arrowtype', 'cone');
model.result('pg11').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg11').feature('arws1').set('showsolutionparams', 'on');
model.result('pg11').feature('arws1').set('data', 'parent');
model.result('pg11').feature('arws1').feature.create('col1', 'Color');
model.result('pg11').feature('arws1').feature('col1').set('showcolordata', 'off');
model.result('pg11').feature('arws1').feature.create('filt1', 'Filter');
model.result('pg11').feature('arws1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result.create('pg12', 'PlotGroup2D');
model.result('pg12').label('Temperature and Fluid Flow (nitf2) 1');
model.result('pg12').set('data', 'dset5');
model.result('pg12').setIndex('looplevel', 1, 0);
model.result('pg12').setIndex('looplevel', 1, 1);
model.result('pg12').set('dataisaxisym', 'off');
model.result('pg12').set('showlegendsunit', true);
model.result('pg12').set('data', 'dset5');
model.result('pg12').setIndex('looplevel', 1, 0);
model.result('pg12').setIndex('looplevel', 1, 1);
model.result('pg12').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond4/pcond4/pcond1/pg2');
model.result('pg12').feature.create('surf1', 'Surface');
model.result('pg12').feature('surf1').label('Fluid Temperature');
model.result('pg12').feature('surf1').set('showsolutionparams', 'on');
model.result('pg12').feature('surf1').set('solutionparams', 'parent');
model.result('pg12').feature('surf1').set('expr', 'nitf2.T');
model.result('pg12').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg12').feature('surf1').set('smooth', 'internal');
model.result('pg12').feature('surf1').set('showsolutionparams', 'on');
model.result('pg12').feature('surf1').set('data', 'parent');
model.result('pg12').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg12').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg12').feature('surf1').feature('sel1').selection.set([2 5]);
model.result('pg12').feature.create('surf2', 'Surface');
model.result('pg12').feature('surf2').label('Solid Temperature');
model.result('pg12').feature('surf2').set('showsolutionparams', 'on');
model.result('pg12').feature('surf2').set('solutionparams', 'parent');
model.result('pg12').feature('surf2').set('expr', 'nitf2.T');
model.result('pg12').feature('surf2').set('smooth', 'internal');
model.result('pg12').feature('surf2').set('showsolutionparams', 'on');
model.result('pg12').feature('surf2').set('data', 'parent');
model.result('pg12').feature('surf2').feature.create('sel1', 'Selection');
model.result('pg12').feature('surf2').feature('sel1').selection.geom('geom1', 2);
model.result('pg12').feature('surf2').feature('sel1').selection.set([1 6]);
model.result('pg12').feature('surf2').set('inheritplot', 'surf1');
model.result('pg12').feature.create('arws1', 'ArrowSurface');
model.result('pg12').feature('arws1').label('Fluid Flow');
model.result('pg12').feature('arws1').set('showsolutionparams', 'on');
model.result('pg12').feature('arws1').set('solutionparams', 'parent');
model.result('pg12').feature('arws1').set('expr', {'nitf2.ur' 'nitf2.uz'});
model.result('pg12').feature('arws1').set('xnumber', 30);
model.result('pg12').feature('arws1').set('ynumber', 30);
model.result('pg12').feature('arws1').set('arrowtype', 'cone');
model.result('pg12').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg12').feature('arws1').set('showsolutionparams', 'on');
model.result('pg12').feature('arws1').set('data', 'parent');
model.result('pg12').feature('arws1').feature.create('col1', 'Color');
model.result('pg12').feature('arws1').feature('col1').set('showcolordata', 'off');
model.result('pg12').feature('arws1').feature('col1').set('expr', 'br.U');
model.result('pg12').feature('arws1').feature.create('filt1', 'Filter');
model.result('pg12').feature('arws1').feature('filt1').set('expr', 'br.U>nitf2.Uave');
model.result('pg4').run;
model.result('pg4').label('Velocity (spf) and Temperature (ht)');
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('title', 'Fluid Velocity and Temperature');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').run;
model.result('pg4').feature('surf1').label('Surface 1 - Fluid Velocity, lg(|u|)');
model.result('pg4').feature('surf1').set('expr', 'log10(ht.uz^2 + ht.ur^2)/2');
model.result('pg4').feature('surf1').set('colortable', 'Cividis');
model.result('pg4').run;
model.result('pg4').create('arws1', 'ArrowSurface');
model.result('pg4').run;
model.result('pg4').feature.duplicate('surf2', 'surf1');
model.result('pg4').feature.duplicate('arws2', 'arws1');
model.result('pg4').run;
model.result('pg4').feature('surf2').label('Surface 2 - Temperature');
model.result('pg4').feature('surf2').set('expr', 'T');
model.result('pg4').feature('surf2').set('unit', 'degC');
model.result('pg4').feature('surf2').set('colortable', 'HeatCamera');
model.result('pg4').feature('surf2').create('def1', 'Deform');
model.result('pg4').run;
model.result('pg4').feature('surf2').feature('def1').set('expr', {'r_outer' ''});
model.result('pg4').feature('surf2').feature('def1').set('scaleactive', true);
model.result('pg4').feature('surf2').feature('def1').set('scale', 3);
model.result('pg4').run;
model.result('pg4').feature('arws1').label('Arrow Surface 1 - Vapor Flow');
model.result('pg4').feature('arws1').set('xnumber', 9);
model.result('pg4').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg4').feature('arws1').set('scaleactive', true);
model.result('pg4').feature('arws1').set('scale', 0.005);
model.result('pg4').feature('arws1').set('color', 'black');
model.result('pg4').run;
model.result('pg4').feature('arws2').label('Arrow Surface 2 - Liquid Flow');
model.result('pg4').feature('arws2').set('expr', {'u2' 'w2'});
model.result('pg4').feature('arws2').set('xnumber', 5);
model.result('pg4').feature('arws2').set('scaleactive', true);
model.result('pg4').feature('arws2').set('scale', 50);
model.result('pg4').feature('arws2').set('color', 'blue');
model.result('pg4').run;
model.result('pg4').create('line1', 'Line');
model.result('pg4').feature('line1').label('Line 1 - Material Boundaries');
model.result('pg4').feature('line1').set('expr', '1');
model.result('pg4').feature('line1').set('coloring', 'uniform');
model.result('pg4').feature('line1').set('color', 'black');
model.result('pg4').feature('line1').create('def1', 'Deform');
model.result('pg4').run;
model.result('pg4').feature('line1').feature('def1').set('expr', {'r_outer' ''});
model.result('pg4').feature('line1').feature('def1').set('scaleactive', true);
model.result('pg4').feature('line1').feature('def1').set('scale', 3);

model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').feature('fc1').set('plot', true);
model.sol('sol4').feature('s1').feature('fc1').set('plotgroup', 'pg4');
model.sol('sol4').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s2').feature('fc1').set('plot', true);
model.sol('sol4').feature('s2').feature('fc1').set('plotgroup', 'pg4');

model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Energy Balance');
model.result.evaluationGroup('eg1').set('data', 'dset5');
model.result.evaluationGroup('eg1').set('transpose', true);
model.result.evaluationGroup('eg1').create('int1', 'IntLine');
model.result.evaluationGroup('eg1').feature('int1').set('intsurface', true);
model.result.evaluationGroup('eg1').feature('int1').label('Heat Sink');
model.result.evaluationGroup('eg1').feature('int1').selection.named('geom1_sel4');
model.result.evaluationGroup('eg1').feature('int1').set('expr', {'ht.ndflux'});
model.result.evaluationGroup('eg1').feature('int1').set('descr', {'Normal conductive heat flux'});
model.result.evaluationGroup('eg1').feature('int1').set('unit', {'W'});
model.result.evaluationGroup('eg1').feature('int1').setIndex('descr', 'sink: ndflux', 0);
model.result.evaluationGroup('eg1').feature.duplicate('int2', 'int1');
model.result.evaluationGroup('eg1').feature('int2').label('Heat Source');
model.result.evaluationGroup('eg1').feature('int2').selection.named('geom1_sel5');
model.result.evaluationGroup('eg1').feature('int2').setIndex('descr', 'source: ndflux', 0);
model.result.evaluationGroup('eg1').feature.duplicate('int3', 'int2');
model.result.evaluationGroup('eg1').feature('int3').label('Casing');
model.result.evaluationGroup('eg1').feature('int3').selection.named('geom1_sel8');
model.result.evaluationGroup('eg1').feature('int3').setIndex('descr', 'casing: ndflux', 0);
model.result.evaluationGroup('eg1').feature.duplicate('int4', 'int3');
model.result.evaluationGroup('eg1').feature('int4').label('Wick');
model.result.evaluationGroup('eg1').feature('int4').selection.named('geom1_sel7');
model.result.evaluationGroup('eg1').feature('int4').setIndex('descr', 'wick: ndflux', 0);
model.result.evaluationGroup('eg1').feature.duplicate('int5', 'int4');
model.result.evaluationGroup('eg1').feature('int5').label('Cavity');
model.result.evaluationGroup('eg1').feature('int5').selection.named('geom1_sel6');
model.result.evaluationGroup('eg1').feature('int5').setIndex('descr', 'cavity: ndflux', 0);
model.result.evaluationGroup('eg1').feature('int5').setIndex('expr', 'w*spf.rho*HeatOfVaporization_water21(T)', 1);
model.result.evaluationGroup('eg1').feature('int5').setIndex('descr', 'cavity: latent heat', 1);
model.result.create('pg13', 'PlotGroup1D');
model.result('pg13').run;
model.result('pg13').label('Latent heat flux from phase change');
model.result('pg13').create('lngr1', 'LineGraph');
model.result('pg13').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg13').feature('lngr1').set('linewidth', 'preference');
model.result('pg13').feature('lngr1').set('data', 'dset5');
model.result('pg13').feature('lngr1').selection.named('geom1_sel9');
model.result('pg13').feature('lngr1').set('expr', '(u*spf.nr + w*spf.nz)*spf.rho*HeatOfVaporization_water21(T)');
model.result('pg13').feature('lngr1').set('descractive', true);
model.result('pg13').feature('lngr1').set('descr', '(<B>u</B>\cdot<B>n</B>)\rho\DELTA H<sub>vap</sub>');
model.result('pg13').feature('lngr1').set('titletype', 'manual');
model.result('pg13').feature('lngr1').set('title', 'Latent heat flux from phase change');
model.result('pg13').feature('lngr1').set('xdata', 'expr');
model.result('pg13').feature('lngr1').set('xdataexpr', 'z');

model.batch('pm2').run('compute');

model.result('pg4').run;
model.result.evaluationGroup('eg1').run;
model.result('pg4').run;
model.result('pg10').run;
model.result('pg10').set('titletype', 'manual');
model.result('pg10').set('title', 'Temperature');
model.result('pg10').set('showlegendsmaxmin', true);
model.result('pg10').set('showlegendsunit', true);
model.result('pg10').run;
model.result('pg10').feature('surf1').set('unit', 'degC');
model.result('pg10').run;
model.result('pg10').run;
model.result.dataset.duplicate('rev2', 'rev1');
model.result.dataset('rev2').set('startangle', 135.1);
model.result.dataset('rev2').set('revangle', 134.8);
model.result.create('pg14', 'PlotGroup3D');
model.result('pg14').run;
model.result('pg14').label('Temperature, 3D');
model.result('pg14').set('data', 'rev2');
model.result('pg14').set('edges', false);
model.result('pg14').set('showlegendsunit', true);
model.result('pg14').create('iso1', 'Isosurface');
model.result('pg14').feature('iso1').set('expr', 'T');
model.result('pg14').feature('iso1').set('unit', 'degC');
model.result('pg14').feature('iso1').set('number', 20);
model.result('pg14').feature('iso1').set('colortable', 'Dipole');
model.result('pg14').run;
model.result('pg14').create('vol1', 'Volume');
model.result('pg14').feature('vol1').set('expr', 'T');
model.result('pg14').feature('vol1').set('unit', 'degC');
model.result('pg14').feature('vol1').set('inheritplot', 'iso1');
model.result('pg14').feature('vol1').create('tran1', 'Transparency');
model.result('pg14').run;
model.result('pg14').run;
model.result('pg14').create('surf1', 'Surface');
model.result('pg14').feature('surf1').set('expr', '1');
model.result('pg14').feature('surf1').set('data', 'rev1');
model.result('pg14').feature('surf1').create('mtrl1', 'MaterialAppearance');
model.result('pg14').run;
model.result('pg14').feature('surf1').feature('mtrl1').set('appearance', 'custom');
model.result('pg14').feature('surf1').feature('mtrl1').set('family', 'copper');
model.result('pg14').run;
model.result('pg14').feature('surf1').create('sel1', 'Selection');
model.result('pg14').feature('surf1').feature('sel1').selection.set([1 6]);
model.result('pg2').run;
model.result.remove('pg2');
model.result.remove('pg3');
model.result.remove('pg7');
model.result.remove('pg11');
model.result.remove('pg12');
model.result('pg4').run;
model.result('pg14').run;

model.title('Heat Pipe with Accurate Liquid and Gas Properties');

model.description(['Heat pipes transfer heat efficiently through vaporization, mass transfer and condensation of a working fluid. They are found in a wide variety of applications where thermal control is of importance, with cooling of electronics being a prominent example.' newline  newline 'This model demonstrates how the laminar flow in the vapor chamber can be coupled to the fluid flow in the porous wick, and how thermodynamic properties of water can be obtained from the Thermodynamics node. The temperature difference between the hot and cold side, together with the temperature dependence of the vapor pressure, induces a pressure difference across the vapor chamber. The vaporization acts as a heat sink at the vapor/wick interface at the hot site, and conversely, the condensation as a heat source, at the cold side.' newline  newline 'The importance of vapor transport is compared to the conductive heat transfer in the pipe wall. The former overshadows the latter by several orders of magnitude.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;

model.label('heat_pipe.mph');

model.modelNode.label('Components');

out = model;
