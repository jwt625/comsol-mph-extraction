function out = model
%
% interior_pm_motor_stress_analysis.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Magnetomechanics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics('solid').create('rotf1', 'RotatingFrame');
model.physics('solid').feature('rotf1').selection.all;
model.physics('solid').feature('rotf1').set('DefineSpatialFrameRotation', {'1'});
model.physics.create('rmm', 'RotatingMachineryMagnetic', 'geom1');
model.physics('rmm').model('comp1');
model.physics('rmm').feature('al1').set('materialType', {'solid'});
model.physics('rmm').feature('al1').label(['Amp' native2unicode(hex2dec({'00' 'e8'}), 'unicode') 're''s Law, Solid']);

model.multiphysics.create('mfrm1', 'MagneticForcesRotatingMachinery', 'geom1', 2);
model.multiphysics('mfrm1').set('Solid_physics', 'solid');
model.multiphysics('mfrm1').set('MagneticFields_physics', 'rmm');
model.multiphysics('mfrm1').selection.all;

model.common.create('rotb1', 'RotatingBoundary', 'comp1');
model.common('rotb1').selection.set([]);
model.common.create('free1', 'DeformingDomain', 'comp1');
model.common('free1').set('smoothingType', 'hyperelastic');
model.common('free1').selection.set([]);

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/physics/rmm', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/mfrm1', true);

model.geom('geom1').lengthUnit('mm');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('Np', '10', 'Number of poles');
model.param.set('Ns', '12', 'Number of slots');
model.param.set('mag_h', '2.5[mm]', 'Magnet height');
model.param.set('d_s', '10[mm]', 'Shaft diameter');
model.param.set('d_r', '60[mm]', 'Rotor diameter');
model.param.set('d_st', '100[mm]', 'Stator diameter');
model.param.set('airgap', '0.7[mm]', 'Size of airgap');
model.param.set('d_cont', '60.7[mm]', 'Diameter of the stator-rotor continuity interface');
model.param.set('L', '40[mm]', 'Out-of-plane thickness of motor');
model.param.set('w_rot', '20000[rpm]', 'Rotational speed');
model.param.set('tl', 'mag_h/100', 'Thickness of thin layer');
model.param.set('f_el', 'w_rot*Np/2', 'Electrical frequency');
model.param.set('t_ramp', '1/f_el/20', 'Time for ramping speed');
model.param.set('N_tsteps', '72', 'Number of time steps');
model.param.set('Ipk', '5[A]', 'Phase current peak');
model.param.set('init_ang', '200[deg]', 'Initial current angle for peak torque');
model.param.set('t_step', '1/f_el/N_tsteps', 'Time step');
model.param.set('t_end', '3/f_el', 'Simulation time');
model.param.set('t', '0[s]', 'Time variable alias');

model.geom.load({'part1'}, 'ACDC_Module/Rotating_Machinery_2D/Rotors/Internal/embedded_magnet_v_shape_internal_rotor_2d.mph', {'part1'});
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'number_of_poles', 'Np');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'number_of_modeled_poles', 'Np');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'shaft_diam', 'd_s');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'rotor_diam', 'd_r');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'cont_diam', 'd_cont');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'magnet_h', 'mag_h');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'rotor_bridge_size', '0.3[mm]');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'poles_bridge_size', '0.3[mm]');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'v_distance', '0.3[mm]');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'flux_barrier_indent_fraction', 0);
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_shaft.dom', true);
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_rotor_air_gap.dom', true);
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_rotor_magnets.dom', true);
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_rotor_iron.dom', true);
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_flux_barriers.dom', true);
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_rotor_air.dom', true);
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_rotor_solid_domains.dom', true);
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_all.dom', true);
model.geom('geom1').run('pi1');
model.geom('geom1').create('spl1', 'Split');
model.geom('geom1').feature('spl1').selection('input').set({'pi1'});
model.geom('geom1').run('spl1');
model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 20);
model.geom('geom1').run('c1');
model.geom('geom1').feature.duplicate('c2', 'c1');
model.geom('geom1').feature('c2').set('r', 10);
model.geom('geom1').run('c2');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').selection('input').set({'c1'});
model.geom('geom1').feature('dif1').selection('input2').set({'c2'});
model.geom('geom1').run('dif1');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', [30 3]);
model.geom('geom1').feature('r1').set('base', 'center');
model.geom('geom1').feature('r1').set('pos', [15 0]);
model.geom('geom1').run('r1');
model.geom('geom1').create('rot1', 'Rotate');
model.geom('geom1').feature('rot1').set('rot', 'range((360/Np)/2,360/Np,360-360/Np/2)');
model.geom('geom1').feature('rot1').selection('input').set({'r1'});
model.geom('geom1').run('rot1');
model.geom('geom1').create('dif2', 'Difference');
model.geom('geom1').feature('dif2').selection('input').set({'dif1'});
model.geom('geom1').feature('dif2').selection('input2').set({'rot1'});
model.geom('geom1').feature('dif2').set('selresult', true);
model.geom('geom1').run('dif2');
model.geom('geom1').create('dif3', 'Difference');
model.geom('geom1').feature('dif3').selection('input').set({'spl1(2)'});
model.geom('geom1').feature('dif3').selection('input2').named('dif2');
model.geom('geom1').feature('dif3').set('keepsubtract', true);
model.geom('geom1').run('dif3');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').label('Union: Rotor');
model.geom('geom1').feature('uni1').selection('input').set({'dif2' 'dif3' 'spl1(1)' 'spl1(10)' 'spl1(11)' 'spl1(12)' 'spl1(13)' 'spl1(14)' 'spl1(15)' 'spl1(16)'  ...
'spl1(17)' 'spl1(18)' 'spl1(19)' 'spl1(20)' 'spl1(21)' 'spl1(22)' 'spl1(23)' 'spl1(24)' 'spl1(25)' 'spl1(26)'  ...
'spl1(27)' 'spl1(28)' 'spl1(29)' 'spl1(3)' 'spl1(30)' 'spl1(31)' 'spl1(32)' 'spl1(33)' 'spl1(34)' 'spl1(35)'  ...
'spl1(36)' 'spl1(37)' 'spl1(38)' 'spl1(39)' 'spl1(4)' 'spl1(40)' 'spl1(41)' 'spl1(42)' 'spl1(43)' 'spl1(44)'  ...
'spl1(45)' 'spl1(46)' 'spl1(47)' 'spl1(48)' 'spl1(49)' 'spl1(5)' 'spl1(50)' 'spl1(51)' 'spl1(52)' 'spl1(53)'  ...
'spl1(54)' 'spl1(55)' 'spl1(56)' 'spl1(57)' 'spl1(58)' 'spl1(59)' 'spl1(6)' 'spl1(60)' 'spl1(61)' 'spl1(62)'  ...
'spl1(63)' 'spl1(7)' 'spl1(8)' 'spl1(9)'});
model.geom('geom1').feature('uni1').set('selresult', true);
model.geom('geom1').run('uni1');
model.geom('geom1').create('adjsel1', 'AdjacentSelection');
model.geom('geom1').feature('adjsel1').label('Rotor Air Pocket Points');
model.geom('geom1').feature('adjsel1').set('input', {'pi1_flux_barriers'});
model.geom('geom1').feature('adjsel1').set('outputdim', 0);
model.geom('geom1').run('adjsel1');
model.geom('geom1').create('adjsel2', 'AdjacentSelection');
model.geom('geom1').feature('adjsel2').label('Rotor Air Channel Points');
model.geom('geom1').feature('adjsel2').set('input', {'dif2'});
model.geom('geom1').feature('adjsel2').set('outputdim', 0);
model.geom('geom1').run('adjsel2');
model.geom('geom1').feature.duplicate('adjsel3', 'adjsel2');
model.geom('geom1').feature('adjsel3').label('Rotor Magnet Points');
model.geom('geom1').run('adjsel3');
model.geom('geom1').feature('adjsel3').set('input', {'pi1_rotor_magnets'});
model.geom('geom1').run('adjsel3');
model.geom('geom1').create('difsel1', 'DifferenceSelection');
model.geom('geom1').feature('difsel1').label('Rotor Air Pocket Fillet Points');
model.geom('geom1').run('difsel1');
model.geom('geom1').feature('difsel1').set('entitydim', 0);
model.geom('geom1').feature('difsel1').set('add', {'adjsel1'});
model.geom('geom1').feature('difsel1').set('subtract', {'adjsel3'});
model.geom('geom1').run('difsel1');
model.geom('geom1').create('fil1', 'Fillet');
model.geom('geom1').feature('fil1').selection('point').named('difsel1');
model.geom('geom1').feature('fil1').set('radius', '0.5[mm]');
model.geom('geom1').run('fil1');
model.geom('geom1').create('fil2', 'Fillet');
model.geom('geom1').feature('fil2').selection('point').named('adjsel2');
model.geom('geom1').feature('fil2').selection('point').set('fil1', [88 89 90 91 116 117 132 133 135 136 145 146 167 168 172 173 182 183 184 185 210 211 212 213 222 223 227 228 249 250 259 260 262 263 278 279 304 305 306 307]);
model.geom('geom1').feature('fil2').set('radius', '2[mm]');
model.geom('geom1').run('fil2');
model.geom('geom1').nodeGroup.create('grp1');
model.geom('geom1').nodeGroup('grp1').placeAfter([]);
model.geom('geom1').nodeGroup('grp1').add('pi1');
model.geom('geom1').nodeGroup('grp1').add('spl1');
model.geom('geom1').nodeGroup('grp1').add('c1');
model.geom('geom1').nodeGroup('grp1').add('c2');
model.geom('geom1').nodeGroup('grp1').add('dif1');
model.geom('geom1').nodeGroup('grp1').add('r1');
model.geom('geom1').nodeGroup('grp1').add('rot1');
model.geom('geom1').nodeGroup('grp1').add('dif2');
model.geom('geom1').nodeGroup('grp1').add('dif3');
model.geom('geom1').nodeGroup('grp1').add('uni1');
model.geom('geom1').nodeGroup('grp1').add('adjsel1');
model.geom('geom1').nodeGroup('grp1').add('adjsel2');
model.geom('geom1').nodeGroup('grp1').add('adjsel3');
model.geom('geom1').nodeGroup('grp1').add('difsel1');
model.geom('geom1').nodeGroup('grp1').add('fil1');
model.geom('geom1').nodeGroup('grp1').add('fil2');
model.geom('geom1').nodeGroup('grp1').label('Rotor');
model.geom.load({'part2'}, 'ACDC_Module/Rotating_Machinery_2D/Stators/External/slotted_external_stator_2d.mph', {'part1'});
model.geom('geom1').create('pi2', 'PartInstance');
model.geom('geom1').feature('pi2').set('selkeepnoncontr', false);
model.geom('geom1').nodeGroup('grp1').remove('pi2', false);
model.geom('geom1').feature('pi2').set('part', 'part2');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'number_of_slots', 'Ns');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'number_of_modeled_slots', 'Ns');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'backiron_th', '3[mm]');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'stator_diam', 'd_st');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'external_air_size', '6[mm]');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'cont_diam', 'd_cont');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'shoe_w', '12[mm]');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'tooth_h', '17[mm]-airgap');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'tooth_w', '8[mm]');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'slot_outer_fillet_size', '0.5[mm]');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'slot_inner_fillet_size', '0.5[mm]');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'slot_winding_type', 2);
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'Arkkio_toggle', 2);
model.geom('geom1').feature('pi2').setEntry('selkeepdom', 'pi2_stator_iron.dom', true);
model.geom('geom1').feature('pi2').setEntry('selkeepdom', 'pi2_stator_slots', true);
model.geom('geom1').feature('pi2').setEntry('selkeepdom', 'pi2_all.dom', true);
model.geom('geom1').run('pi2');
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').run('fin');

model.func.create('rm1', 'Ramp');
model.func('rm1').model('comp1');
model.func('rm1').set('location', 't_ramp/2');
model.func('rm1').set('smoothzonelocactive', true);
model.func('rm1').set('smoothzoneloc', 't_ramp');

model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Rotor Structural Domains');
model.selection('uni1').set('input', {'geom1_pi1_rotor_magnets_dom' 'geom1_pi1_rotor_iron_dom'});
model.selection.duplicate('uni2', 'uni1');
model.selection('uni2').label('Structural Domains');
model.selection('uni2').set('input', {'geom1_pi1_rotor_magnets_dom' 'geom1_pi1_rotor_iron_dom' 'geom1_pi2_stator_iron_dom'});
model.selection.create('uni3', 'Union');
model.selection('uni3').model('comp1');
model.selection('uni3').label('Deforming Domains');
model.selection('uni3').set('input', {'geom1_dif2_dom' 'geom1_pi1_flux_barriers_dom' 'geom1_pi1_rotor_air_gap_dom'});
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Shaft Boundaries');
model.selection('adj1').set('input', {'geom1_pi1_shaft_dom'});
model.selection.duplicate('adj2', 'adj1');
model.selection('adj2').label('Rotor Magnet Boundaries');
model.selection('adj2').set('input', {'geom1_pi1_rotor_magnets_dom'});
model.selection.duplicate('adj3', 'adj2');
model.selection('adj3').label('Rotor Air Pocket Boundaries');
model.selection('adj3').set('input', {'geom1_pi1_flux_barriers_dom'});
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Magnet-Rotor Iron Contact Boundaries');
model.selection('dif1').set('entitydim', 1);
model.selection('dif1').set('add', {'adj2'});
model.selection('dif1').set('subtract', {'adj3'});
model.selection.duplicate('adj4', 'adj2');
model.selection('adj4').label('Rotor Air Gap Boundaries');
model.selection('adj4').set('input', {'geom1_pi1_rotor_air_gap_dom'});
model.selection.create('disk1', 'Disk');
model.selection('disk1').model('comp1');
model.selection('disk1').label('Rotating Boundaries');
model.selection('disk1').set('entitydim', 1);
model.selection('disk1').set('inputent', 'selections');
model.selection('disk1').set('input', {'adj4'});
model.selection('disk1').set('r', 'd_cont/2+airgap/4');
model.selection('disk1').set('rin', 'd_cont/2-airgap/4');
model.selection.duplicate('disk2', 'disk1');
model.selection('disk2').label('Boundary Layer Boundaries');
model.selection('disk2').set('inputent', 'all');
model.selection('disk2').set('r', 'd_cont/2+airgap/3*4');
model.selection('disk2').set('rin', 'd_cont/2-airgap/4*3');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('alpha', 'w_rot*2*pi*rm1(t)[s]');
model.variable('var1').descr('alpha', 'Rotation angle');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('BHCurve', 'B-H Curve');
model.material('mat2').propertyGroup('BHCurve').func.create('BH', 'Interpolation');
model.material('mat2').propertyGroup.create('EffectiveBHCurve', 'Effective B-H Curve');
model.material('mat2').propertyGroup('EffectiveBHCurve').func.create('BHeff', 'Interpolation');
model.material('mat2').label('Soft Iron (Without Losses)');
model.material('mat2').set('family', 'iron');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('BHCurve').label('B-H Curve');
model.material('mat2').propertyGroup('BHCurve').func('BH').label('Interpolation 1');
model.material('mat2').propertyGroup('BHCurve').func('BH').set('table', {'0' '0';  ...
'663.146' '1';  ...
'1067.5' '1.1';  ...
'1705.23' '1.2';  ...
'2463.11' '1.3';  ...
'3841.67' '1.4';  ...
'5425.74' '1.5';  ...
'7957.75' '1.6';  ...
'12298.3' '1.7';  ...
'20462.8' '1.8';  ...
'32169.6' '1.9';  ...
'61213.4' '2';  ...
'111408' '2.1';  ...
'188487.757' '2.2';  ...
'267930.364' '2.3';  ...
'347507.836' '2.4'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('extrap', 'linear');
model.material('mat2').propertyGroup('BHCurve').func('BH').set('fununit', {'T'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('argunit', {'A/m'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('defineinv', true);
model.material('mat2').propertyGroup('BHCurve').func('BH').set('defineprimfun', true);
model.material('mat2').propertyGroup('BHCurve').set('normB', 'BH(normHin)');
model.material('mat2').propertyGroup('BHCurve').set('normH', 'BH_inv(normBin)');
model.material('mat2').propertyGroup('BHCurve').set('Wpm', 'BH_prim(normHin)');
model.material('mat2').propertyGroup('BHCurve').descr('normHin', 'Magnetic field norm');
model.material('mat2').propertyGroup('BHCurve').descr('normBin', 'Magnetic flux density norm');
model.material('mat2').propertyGroup('BHCurve').addInput('magneticfield');
model.material('mat2').propertyGroup('BHCurve').addInput('magneticfluxdensity');
model.material('mat2').propertyGroup('EffectiveBHCurve').label('Effective B-H Curve');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').label('Interpolation 1');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('table', {'0' '0';  ...
'663.146' '1.000000051691021';  ...
'1067.5' '1.4936495124126294';  ...
'1705.23' '1.9415328461315795';  ...
'2463.11' '2.257765669366018';  ...
'3841.67' '2.609980642431287';  ...
'5425.74' '2.8664452090837504';  ...
'7957.75' '3.1441438097176118';  ...
'12298.3' '3.448538051654125';  ...
'20462.8' '3.7816711973679054';  ...
'32169.6' '4.058345590113038';  ...
'61213.4' '4.420646552950275';  ...
'111408' '4.721274089545955';  ...
'188487.757' '4.972148140718701';  ...
'267930.364' '5.145510860855953';  ...
'347507.836' '5.245510861426532'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('extrap', 'linear');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('fununit', {'T'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('argunit', {'A/m'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('defineinv', true);
model.material('mat2').propertyGroup('EffectiveBHCurve').set('normBeff', 'BHeff(normHeffin)');
model.material('mat2').propertyGroup('EffectiveBHCurve').set('normHeff', 'BHeff_inv(normBeffin)');
model.material('mat2').propertyGroup('EffectiveBHCurve').descr('normHeffin', 'Effective magnetic field norm');
model.material('mat2').propertyGroup('EffectiveBHCurve').descr('normBeffin', 'Effective magnetic flux density norm');
model.material('mat2').propertyGroup('EffectiveBHCurve').addInput('magneticfield');
model.material('mat2').propertyGroup('EffectiveBHCurve').addInput('magneticfluxdensity');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('RemanentFluxDensity', 'Remanent flux density');
model.material('mat3').label('N42 (Sintered NdFeB)');
model.material('mat3').set('family', 'chrome');
model.material('mat3').propertyGroup('def').set('electricconductivity', {'1/1.4[uohm*m]' '0' '0' '0' '1/1.4[uohm*m]' '0' '0' '0' '1/1.4[uohm*m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('RemanentFluxDensity').set('murec', {'1.05' '0' '0' '0' '1.05' '0' '0' '0' '1.05'});
model.material('mat3').propertyGroup('RemanentFluxDensity').set('normBr', '1.31[T]');
model.material('mat2').selection.set([2 29]);
model.material('mat2').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat2').propertyGroup('Enu').set('E', {'185[GPa]'});
model.material('mat2').propertyGroup('Enu').set('nu', {'0.3'});
model.material('mat2').propertyGroup('def').set('density', {'7500'});
model.material('mat3').selection.named('geom1_pi1_rotor_magnets_dom');
model.material('mat3').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat3').propertyGroup('Enu').set('E', {'160[GPa]'});
model.material('mat3').propertyGroup('Enu').set('nu', {'0.24'});
model.material('mat3').propertyGroup('def').set('density', {'7500'});

model.physics('solid').selection.named('uni2');
model.physics('solid').prop('d').set('d', 'L');

model.coordSystem.create('sys2', 'geom1', 'Cylindrical');
model.coordSystem('sys2').set('frametype', 'material');

model.physics('solid').feature('lemm1').set('coordinateSystem', 'sys2');
model.physics('solid').feature('rotf1').selection.named('uni1');
model.physics('solid').feature('rotf1').set('RotationalFrequency', 'userdef');
model.physics('solid').feature('rotf1').set('alpha', 'alpha');
model.physics('solid').create('rms1', 'RigidMotionSuppression', 2);
model.physics('solid').feature('rms1').selection.named('geom1_pi2_stator_iron_dom');
model.physics('solid').create('fix1', 'Fixed', 1);
model.physics('solid').feature('fix1').selection.named('adj1');
model.physics('solid').create('tl1', 'ThinLayer', 1);
model.physics('solid').feature('tl1').set('lth', 'tl');
model.physics('solid').feature('tl1').set('thicknessApproximation', 'spring');
model.physics('solid').feature('tl1').selection.named('dif1');
model.physics('solid').feature('tl1').create('spm1', 'SpringMaterial', 1);
model.physics('solid').feature('tl1').feature('spm1').selection.named('dif1');
model.physics('solid').feature('tl1').feature('spm1').set('SpringType', 'FDefTot');
model.physics('solid').feature('tl1').feature('spm1').set('FDefTot', {'kt1*solid.tl1.uelt1' 'kn*solid.tl1.ueln' '0'});

model.variable('var1').set('kt', '5e11[N/m]');
model.variable('var1').descr('kt', 'Spring stiffness in tension');
model.variable('var1').set('kc', '5e13[N/m]');
model.variable('var1').descr('kc', 'Spring stiffness in compression');
model.variable('var1').set('kn', 'kt*(solid.tl1.ueln>=0)+kc*(solid.tl1.ueln<0)');
model.variable('var1').descr('kn', 'Stiffness of thin elastic layer in normal direction');
model.variable('var1').set('kt1', '1e15[N/m]');
model.variable('var1').descr('kt1', 'Stiffness of thin elastic layer in tangential direction');

model.physics('rmm').prop('d').set('d', 'L');
model.physics('rmm').prop('ShapeProperty').set('order_magneticvectorpotential', 1);
model.physics('rmm').create('al2', 'AmperesLaw', 2);
model.physics('rmm').feature('al2').selection.set([2 29]);
model.physics('rmm').feature('al2').set('ConstitutiveRelationBH', 'BHCurve');
model.physics('rmm').create('cmag1', 'ConductingMagnet', 2);
model.physics('rmm').feature('cmag1').selection.named('geom1_pi1_rotor_magnets_dom');
model.physics('rmm').feature('cmag1').set('PatternType', 'CircularPattern');
model.physics('rmm').feature('cmag1').set('PeriodicType', 'Alternating');
model.physics('rmm').feature('cmag1').feature('north1').selection.set([394 414]);
model.physics('rmm').feature('cmag1').feature('south1').selection.set([390 422]);
model.physics('rmm').create('wnd1', 'MultiphaseWinding', 2);
model.physics('rmm').feature('wnd1').selection.named('geom1_pi2_stator_slots');
model.physics('rmm').feature('wnd1').set('Ipk', 'Ipk');
model.physics('rmm').feature('wnd1').set('alpha_i', 'init_ang+2*pi*f_el*rm1(t)[s]');
model.physics('rmm').feature('wnd1').set('WindingLayout', 'automatic');
model.physics('rmm').feature('wnd1').set('NoPoles', 'Np');
model.physics('rmm').feature('wnd1').set('NoSlots', 'Ns');
model.physics('rmm').feature('wnd1').set('NoCoilsPerSlot', 2);
model.physics('rmm').feature('wnd1').set('AreaFrom', 'FillingFactor');
model.physics('rmm').feature('wnd1').create('aPh1', 'Phase');
model.physics('rmm').feature('wnd1').feature('aPh1').label('Automatic Phase 1');
model.physics('rmm').feature('wnd1').feature('aPh1').create('rcd1', 'ReversedCurrentDirection', 2);
model.physics('rmm').feature('wnd1').create('aPh2', 'Phase');
model.physics('rmm').feature('wnd1').feature('aPh2').label('Automatic Phase 2');
model.physics('rmm').feature('wnd1').feature('aPh2').create('rcd1', 'ReversedCurrentDirection', 2);
model.physics('rmm').feature('wnd1').create('aPh3', 'Phase');
model.physics('rmm').feature('wnd1').feature('aPh3').label('Automatic Phase 3');
model.physics('rmm').feature('wnd1').feature('aPh3').create('rcd1', 'ReversedCurrentDirection', 2);
model.physics('rmm').feature('wnd1').feature('aPh1').selection.set([22 4 1 25 24 6 3 26]);
model.physics('rmm').feature('wnd1').feature('aPh1').feature('rcd1').selection.set([22 4 1 25]);
model.physics('rmm').feature('wnd1').feature('aPh1').active(true);
model.physics('rmm').feature('wnd1').feature('aPh1').feature('rcd1').active(true);
model.physics('rmm').feature('wnd1').feature('aPh2').selection.set([15 16 18 8 13 14 20 11]);
model.physics('rmm').feature('wnd1').feature('aPh2').feature('rcd1').selection.set([15 16 18 8]);
model.physics('rmm').feature('wnd1').feature('aPh2').active(true);
model.physics('rmm').feature('wnd1').feature('aPh2').feature('rcd1').active(true);
model.physics('rmm').feature('wnd1').feature('aPh3').selection.set([5 21 19 12 7 23 17 9]);
model.physics('rmm').feature('wnd1').feature('aPh3').feature('rcd1').selection.set([5 21 19 12]);
model.physics('rmm').feature('wnd1').feature('aPh3').active(true);
model.physics('rmm').feature('wnd1').feature('aPh3').feature('rcd1').active(true);
model.physics('rmm').feature('wnd1').feature.move('aPh1', 3);
model.physics('rmm').feature('wnd1').feature.move('aPh2', 3);
model.physics('rmm').feature('wnd1').feature.move('aPh3', 3);
model.physics('rmm').feature('wnd1').feature('aPh1').set('alpha_o', '0[deg]');
model.physics('rmm').feature('wnd1').feature('aPh2').set('alpha_o', '-120[deg]');
model.physics('rmm').feature('wnd1').feature('aPh3').set('alpha_o', '-240[deg]');
model.physics('rmm').create('ark1', 'ArkkioTorqueCalculation', 2);
model.physics('rmm').feature('ark1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46]);

model.common('free1').selection.named('uni3');
model.common('rotb1').selection.named('disk1');
model.common('rotb1').set('rotationAngle', 'alpha');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hcurve', 0.9);
model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('size1').selection.named('geom1_pi2_stator_iron_dom');
model.mesh('mesh1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('size1').set('hmax', 1.5);
model.mesh('mesh1').feature.move('size1', 1);
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(2);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('bl1').selection.set([10 99]);
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('disk2');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 1);
model.mesh('mesh1').feature('bl1').feature('blp').set('blhminfact', 5);

model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('tlist', 'range(0,t_step,t_end)');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([28 30 33 34 37 38 39 40 41 42 45 46 47 48 49 50 51 54 55 56 57 58 59 62 63 64 65 68 69 70 71 72 73 74 75 78 79 80 81 82 85 86 89 90 93 94 95 96 97 98 99]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([28 30 33 34 37 38 39 40 41 42 45 46 47 48 49 50 51 54 55 56 57 58 59 62 63 64 65 68 69 70 71 72 73 74 75 78 79 80 81 82 85 86 89 90 93 94 95 96 97 98 99]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*0.15839191898578667');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.15839191898578667');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_A'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subdtech', 'const');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subjtech', 'onevery');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Magnetic Potential');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u' 'comp1_solid_uext'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdtech', 'const');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subjtech', 'onevery');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Displacement Field');
model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subdtech', 'const');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subjtech', 'onevery');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').label('Spatial Mesh Displacement');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_solid_uext').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_solid_uext').set('scaleval', '1e-2*0.15839191898578667');
model.sol('sol1').feature('v2').feature('comp1_spatial_disp').set('scaleval', '1e-2*0.15839191898578667');
model.sol('sol1').feature('v2').feature('comp1_u').set('scaleval', '1e-2*0.15839191898578667');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,t_step,t_end)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('tout', 'tstepsclosest');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('se1', 'Segregated');
model.sol('sol1').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_A' 'comp1_rmm_cmag1_V_d'});
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subdtech', 'const');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subjtech', 'onevery');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').label('Magnetic Potential');
model.sol('sol1').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_u' 'comp1_solid_uext'});
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subdtech', 'const');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subjtech', 'onevery');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').label('Displacement Field');
model.sol('sol1').feature('t1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subdtech', 'const');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subjtech', 'onevery');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').label('Spatial Mesh Displacement');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('bwinitstepfrac', 0.1);
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subdtech', 'auto');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 217, 0);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').set('resolution', 'normal');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 217, 0);
model.result('pg2').set('defaultPlotID', 'stressThinLayer');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').label('Stress, Thin Layer (solid)');
model.result('pg2').create('line1', 'Line');
model.result('pg2').feature('line1').set('expr', {'solid.misesGp'});
model.result('pg2').feature('line1').set('threshold', 'manual');
model.result('pg2').feature('line1').set('thresholdvalue', 0.2);
model.result('pg2').feature('line1').set('colortable', 'Rainbow');
model.result('pg2').feature('line1').set('colortabletrans', 'none');
model.result('pg2').feature('line1').set('colorscalemode', 'linear');
model.result('pg2').feature('line1').set('colortable', 'Rainbow');
model.result('pg2').feature('line1').set('resolution', 'custom');
model.result('pg2').feature('line1').set('refine', 2);
model.result('pg2').feature('line1').set('linetype', 'tube');
model.result('pg2').feature('line1').set('radiusexpr', 'solid.lth/2');
model.result('pg2').feature('line1').create('sel1', 'Selection');
model.result('pg2').feature('line1').feature('sel1').selection.geom('geom1', 1);
model.result('pg2').feature('line1').feature('sel1').selection.set([282 284 289 290 293 295 319 320 324 326 329 330 354 356 365 366 388 390 393 394 412 414 421 422 442 444 451 452 472 474 477 478 483 485 496 498 517 518 521 522]);
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Magnetic Flux Density Norm (rmm)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 217, 0);
model.result('pg3').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond2/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg3').feature('surf1').set('expr', 'rmm.normB');
model.result('pg3').feature('surf1').set('colortable', 'Prism');
model.result('pg3').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg3').feature('surf1').set('colorcalibration', -0.8);
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature.create('str1', 'Streamline');
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('solutionparams', 'parent');
model.result('pg3').feature('str1').set('expr', {'rmm.Bx' 'rmm.By'});
model.result('pg3').feature('str1').set('titletype', 'none');
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('udist', 0.03);
model.result('pg3').feature('str1').set('maxlen', 0.4);
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('inheritcolor', false);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('data', 'parent');
model.result('pg3').feature('str1').selection.geom('geom1', 1);
model.result('pg3').feature('str1').selection.set
model.result('pg3').feature('str1').set('inheritplot', 'surf1');
model.result('pg3').feature('str1').feature.create('col1', 'Color');
model.result('pg3').feature('str1').feature('col1').set('expr', 'rmm.normB');
model.result('pg3').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg3').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg3').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg3').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg3').feature('str1').feature.create('filt1', 'Filter');
model.result('pg3').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg3').feature.create('con1', 'Contour');
model.result('pg3').feature('con1').set('showsolutionparams', 'on');
model.result('pg3').feature('con1').set('solutionparams', 'parent');
model.result('pg3').feature('con1').set('expr', 'rmm.Az');
model.result('pg3').feature('con1').set('titletype', 'none');
model.result('pg3').feature('con1').set('number', 10);
model.result('pg3').feature('con1').set('levelrounding', false);
model.result('pg3').feature('con1').set('coloring', 'uniform');
model.result('pg3').feature('con1').set('colorlegend', false);
model.result('pg3').feature('con1').set('color', 'custom');
model.result('pg3').feature('con1').set('customcolor', [0.3764705955982208 0.3764705955982208 0.3764705955982208]);
model.result('pg3').feature('con1').set('resolution', 'fine');
model.result('pg3').feature('con1').set('inheritcolor', false);
model.result('pg3').feature('con1').set('showsolutionparams', 'on');
model.result('pg3').feature('con1').set('data', 'parent');
model.result('pg3').feature('con1').set('inheritplot', 'surf1');
model.result('pg3').feature('con1').feature.create('filt1', 'Filter');
model.result('pg3').feature('con1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 217, 0);
model.result('pg4').label('Moving Mesh');
model.result('pg4').create('mesh1', 'Mesh');
model.result('pg4').feature('mesh1').set('meshdomain', 'surface');
model.result('pg4').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg4').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg4').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg4').feature('mesh1').feature('sel1').selection.set([2 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99]);
model.result('pg4').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg4').feature('mesh1').set('qualexpr', 'comp1.spatial.relVol');
model.result('pg4').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg1').run;

model.view('view1').set('showgrid', false);

model.result('pg1').run;
model.result('pg1').label('von Mises Stress (solid)');
model.result('pg1').run;
model.result('pg1').feature('surf1').set('unit', 'MPa');
model.result('pg1').run;
model.result.duplicate('pg5', 'pg1');
model.result('pg5').run;
model.result('pg5').label('Radial Stress (solid)');
model.result('pg5').run;
model.result('pg5').feature('surf1').set('expr', 'solid.slGp11');
model.result('pg5').feature('surf1').set('descr', 'Stress tensor, local coordinate system, 11-component');
model.result('pg1').run;
model.result.duplicate('pg6', 'pg1');
model.result('pg6').run;
model.result('pg6').label('Displacement (solid)');
model.result('pg6').run;
model.result('pg6').feature('surf1').set('expr', 'solid.disp');
model.result.configuration.create('gsty1', 'GraphStyle');
model.result.configuration('gsty1').set('linewidth', 'unspecified');
model.result.configuration('gsty1').set('linecolor', 'cycle');
model.result.configuration('gsty1').set('autodescr', true);
model.result.configuration('gsty1').set('autosolution', false);
model.result.configuration('gsty1').set('linewidth', 2);
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Displacement');
model.result('pg7').set('titletype', 'none');
model.result('pg7').set('styleconfig', 'gsty1');
model.result('pg7').create('ptgr1', 'PointGraph');
model.result('pg7').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr1').set('linewidth', 'preference');
model.result('pg7').feature('ptgr1').selection.set([264]);
model.result('pg7').feature('ptgr1').set('expr', 'u');
model.result('pg7').feature('ptgr1').set('legend', true);
model.result('pg7').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg7').feature('ptgr1').setIndex('legends', 'X-component', 0);
model.result('pg7').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg7').run;
model.result('pg7').feature('ptgr2').set('expr', 'v');
model.result('pg7').feature('ptgr2').setIndex('legends', 'Y-component', 0);
model.result('pg7').run;
model.result('pg7').set('twoyaxes', true);
model.result('pg7').setIndex('plotonsecyaxis', true, 1, 1);
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('yseclabelactive', true);
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Torque');
model.result('pg8').set('titletype', 'none');
model.result('pg8').set('styleconfig', 'gsty1');
model.result('pg8').set('showlegends', false);
model.result('pg8').create('glob1', 'Global');
model.result('pg8').feature('glob1').set('markerpos', 'datapoints');
model.result('pg8').feature('glob1').set('linewidth', 'preference');
model.result('pg8').feature('glob1').setIndex('expr', 'rmm.Tark_1', 0);
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').set('axislimits', true);
model.result('pg8').set('xmin', 0);
model.result('pg8').set('ymin', 0);
model.result('pg8').run;
model.result('pg3').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').placeAfter('plotgroup', 'pg2');
model.nodeGroup('grp1').add('plotgroup', 'pg3');
model.nodeGroup('grp1').add('plotgroup', 'pg8');
model.nodeGroup('grp1').label('Electromagnetic Plots');

model.result('pg1').run;

model.nodeGroup.create('grp2', 'Results');
model.nodeGroup('grp2').set('type', 'plotgroup');
model.nodeGroup('grp2').add('plotgroup', 'pg1');
model.nodeGroup('grp2').add('plotgroup', 'pg2');
model.nodeGroup('grp2').add('plotgroup', 'pg5');
model.nodeGroup('grp2').add('plotgroup', 'pg6');
model.nodeGroup('grp2').add('plotgroup', 'pg7');
model.nodeGroup('grp2').label('Structural Plots');

model.result('pg5').run;
model.result.move('pg5', 1);
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').label('von Mises Stress (solid)');
model.result.export('anim1').set('maxframes', 50);
model.result.export.duplicate('anim2', 'anim1');
model.result.export('anim2').showFrame;
model.result.export('anim2').label('Magnetic Flux Density Norm (rmm)');
model.result.export('anim2').set('plotgroup', 'pg3');
model.result('pg3').run;
model.result('pg1').run;

model.title('Electromagnetic and Mechanical Analysis of an Interior Permanent Magnet Motor');

model.description(['The magnets in an Interior Permanent Magnet (IPM) motor are embedded in the rotor core, where they form narrow regions known as bridges. The thickness of the magnetic bridge is an important parameter to consider in design, both from the electromagnetic and the mechanical perspectives. As the magnetic saturation in bridge areas affect the electromagnetic characteristics of an IPM, the thickness of the bridge should be kept minimum to reduce losses. However, during high-speed rotation, these narrow bridges also experience high stress, caused by centrifugal forces. These two conflicting aspects makes the design and analysis of an IPM motor challenging.' newline  newline 'In this example, the coupling between Solid Mechanics and Rotating Machinery, Magnetic for performing electromagnetic and mechanical analysis of an IPM motor is demonstrated. A motor with 10 rotor poles and 12 stator slots is modeled in 2D. The magnets are embedded in a V-shaped configuration inside the rotor core. The connection between magnets and rotor core is modeled as springs. The results give insight into magnetic flux density and stress distribution in the system.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('interior_pm_motor_stress_analysis.mph');

model.modelNode.label('Components');

out = model;
