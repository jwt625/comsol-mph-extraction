function out = model
%
% rotor_stability_with_seal.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Rotordynamics_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('rotbm', 'BeamRotor', 'geom1');
model.physics('rotbm').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/rotbm', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('x1', '0', 'Position of station 1');
model.param.set('x2', '0.04[m]', 'Position of station 2');
model.param.set('x3', '0.172[m]', 'Position of station 3');
model.param.set('x4', '0.413[m]', 'Position of station 4');
model.param.set('x5', '0.663[m]', 'Position of station 5');
model.param.set('x6', '1.943[m]', 'Position of station 6');
model.param.set('x7', '2.459[m]', 'Position of station 7');
model.param.set('x8', '2.653[m]', 'Position of station 8');
model.param.set('x9', '2.715[m]', 'Position of station 9');
model.param.set('x10', '2.850[m]', 'Position of station 10');
model.param.set('xTol', '1e-5[m]', 'Axial step tolerance');
model.param.label('Parameters: Stations');
model.param.create('par2');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('d_1_2', '0.072[m]', 'Diameter between station 1 and 2');
model.param('par2').set('d_2_3', '0.092[m]', 'Diameter between station 2 and 3');
model.param('par2').set('d_3_4', '0.105[m]', 'Diameter between station 3 and 4');
model.param('par2').set('d_4_5', '0.110[m]', 'Diameter between station 4 and 5');
model.param('par2').set('d_5_6', '0.115[m]', 'Diameter between station 5 and 6');
model.param('par2').set('d_6_7', '0.110[m]', 'Diameter between station 6 and 7');
model.param('par2').set('d_7_8', '0.105[m]', 'Diameter between station 7 and 8');
model.param('par2').set('d_8_9', '0.075[m]', 'Diameter between station 8 and 9');
model.param('par2').set('d_9_10', '0.060[m]', 'Diameter between station 9 and 10');
model.param('par2').label('Parameters: Rotor Diameters');
model.param.create('par3');

% To import content from file, use:
% model.param('par3').loadFile('FILENAME');
model.param('par3').set('Rb', '0.0525[m]', 'Radius of the bearing');
model.param('par3').set('Cb', '0.00015[m]', 'Bearing clearance');
model.param('par3').set('Lb', '0.096[m]', 'Length of the bearing');
model.param('par3').set('mu_b', '0.0414[Pa*s]', 'Viscosity of the lubricant');
model.param('par3').set('xb1', '(x3+x4)/2', 'Location of bearing 1');
model.param('par3').set('xb2', 'x8-Lb/2', 'Location of bearing 2');
model.param('par3').label('Parameters: Bearings');
model.param.create('par4');

% To import content from file, use:
% model.param('par4').loadFile('FILENAME');
model.param('par4').set('md1', '15[kg]', 'Mass of the impeller 1');
model.param('par4').set('Jd1', '0.131[kg*m^2]', 'Diametral moment of inertia of impeller 1');
model.param('par4').set('e1', '0.01[mm]', 'Unbalanced eccentricity of impeller 1-10');
model.param('par4').set('md2', '13[kg]', 'Mass of impeller 2-9');
model.param('par4').set('Jd2', '0.114[kg*m^2]', 'Diametral moment of inertia  of impeller 2-9');
model.param('par4').set('md10', '14[kg]', 'Mass of the impeller 10');
model.param('par4').set('Jd10', '0.122[kg*m^2]', 'Diametral moment of inertia of impeller 10');
model.param('par4').set('Ld', '0.08[m]', 'Length of the impeller');
model.param('par4').set('l1', '0.062[m]', 'Relative location of first impeller');
model.param('par4').set('gs', '(x6-x5)/10', 'Gap between impeller stages');
model.param('par4').set('xd1', 'x5+l1', 'Location of impeller 1');
model.param('par4').set('xd2', 'xd1+gs', 'Location of impeller 2');
model.param('par4').set('xd3', 'xd2+gs', 'Location of impeller 3');
model.param('par4').set('xd4', 'xd3+gs', 'Location of impeller 4');
model.param('par4').set('xd5', 'xd4+gs', 'Location of impeller 5');
model.param('par4').set('xd6', 'xd5+gs', 'Location of impeller 6');
model.param('par4').set('xd7', 'xd6+gs', 'Location of impeller 7');
model.param('par4').set('xd8', 'xd7+gs', 'Location of impeller 8');
model.param('par4').set('xd9', 'xd8+gs', 'Location of impeller 9');
model.param('par4').set('xd10', 'xd9+gs', 'Location of impeller 10');
model.param('par4').label('Parameters: Impellers');
model.param.create('par5');

% To import content from file, use:
% model.param('par5').loadFile('FILENAME');
model.param('par5').set('mu_f', '0.02[Pa*s]', 'Fluid viscosity');
model.param('par5').set('rho_f', '800[kg/m^3]', 'Fluid density');
model.param('par5').set('ds', '0.195[m]', 'Diameter of the annular seal');
model.param('par5').set('Cs', '0.0005[m]', 'Annular seal clearance');
model.param('par5').set('Ls', '0.022[m]', 'Length of the annular seal');
model.param('par5').set('dPs', '3.2[MPa]', 'Pressure drop across the annular seal');
model.param('par5').set('dp', '0.08[m]', 'Diameter of the piston seal');
model.param('par5').set('Cp', '0.0005[m]', 'Piston seal clearance');
model.param('par5').set('Lp', '0.165[m]', 'Length of the piston seal');
model.param('par5').set('dPp', '32[MPa]', 'Pressure drop across piston seal');
model.param('par5').set('xs1', 'x5+Ls/2', 'Location of annular seal 1');
model.param('par5').set('xs2', 'xs1+gs', 'Location of annular seal 2');
model.param('par5').set('xs3', 'xs2+gs', 'Location of annular seal 3');
model.param('par5').set('xs4', 'xs3+gs', 'Location of annular seal 4');
model.param('par5').set('xs5', 'xs4+gs', 'Location of annular seal 5');
model.param('par5').set('xs6', 'xs5+gs', 'Location of annular seal 6');
model.param('par5').set('xs7', 'xs6+gs', 'Location of annular seal 7');
model.param('par5').set('xs8', 'xs7+gs', 'Location of annular seal 8');
model.param('par5').set('xs9', 'xs8+gs', 'Location of annular seal 9');
model.param('par5').set('xs10', 'xs9+gs', 'Location of annular seal 10');
model.param('par5').set('xp', 'x7-Lp/2', 'Location of piston seal');
model.param('par5').label('Parameters: Seals');

model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'vectors');
model.geom('geom1').feature('pol1').set('x', 'x1 x2 x3 xb1 x4 x5 xs1 xd1 xs2 xd2 xs3 xd3 xs4 xd4 xs5 xd5 xs6 xd6 xs7 xd7 xs8 xd8 xs9 xd9 xs10 xd10 x6 xp x7 xb2 x8 x9 x10');
model.geom('geom1').feature('pol1').set('y', 0);
model.geom('geom1').feature('pol1').set('z', 0);
model.geom('geom1').runPre('fin');

model.func.create('int1', 'Interpolation');
model.func('int1').model('comp1');
model.func('int1').set('table', {'x1' 'd_1_2';  ...
'x2-xTol' 'd_1_2';  ...
'x2' 'd_2_3';  ...
'x3-xTol' 'd_2_3';  ...
'x3' 'd_3_4';  ...
'x4-xTol' 'd_3_4';  ...
'x4' 'd_4_5';  ...
'x5-xTol' 'd_4_5';  ...
'x5' 'd_5_6';  ...
'x6-xTol' 'd_5_6';  ...
'x6' 'd_6_7';  ...
'x7-xTol' 'd_6_7';  ...
'x7' 'd_7_8';  ...
'x8-xTol' 'd_7_8';  ...
'x8' 'd_8_9';  ...
'x9-xTol' 'd_8_9';  ...
'x9' 'd_9_10';  ...
'x10' 'd_9_10'});
model.func('int1').label('Interpolation: Diameters');
model.func('int1').set('funcname', 'dia');
model.func('int1').setIndex('fununit', 'm', 0);
model.func('int1').setIndex('argunit', 'm', 0);

model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.physics('rotbm').prop('RotorProperties').set('rpt', '4500[rpm/s]*t+1000[rpm]');
model.physics('rotbm').feature('rcs1').set('do_circ', 'dia(x)');
model.physics('rotbm').create('gr1', 'Gravity', 1);
model.physics('rotbm').create('jrb1', 'JournalBearing', 0);
model.physics('rotbm').feature('jrb1').selection.set([4 30]);
model.physics('rotbm').feature('jrb1').set('BearingModel', 'PlainHydrodynamic');
model.physics('rotbm').feature('jrb1').set('mure_mat', 'userdef');
model.physics('rotbm').feature('jrb1').set('mure', 'mu_b');
model.physics('rotbm').feature('jrb1').set('C', 'Cb');
model.physics('rotbm').feature('jrb1').set('R', 'Rb');
model.physics('rotbm').feature('jrb1').set('L', 'Lb');
model.physics('rotbm').feature('jrb1').set('includeBendingStiffness', false);
model.physics('rotbm').create('disk1', 'Disk', 0);
model.physics('rotbm').feature('disk1').selection.set([8]);
model.physics('rotbm').feature('disk1').set('mass', 'md1');
model.physics('rotbm').feature('disk1').set('Ip', '2*Jd1');
model.physics('rotbm').feature('disk1').set('Id', 'Jd1');
model.physics('rotbm').feature('disk1').set('COM', 'Relative');
model.physics('rotbm').feature('disk1').set('zr', 'e1');
model.physics('rotbm').feature.duplicate('disk2', 'disk1');
model.physics('rotbm').feature('disk2').label('Disk 2-9');
model.physics('rotbm').feature('disk2').selection.set([10 12 14 16 18 20 22 24]);
model.physics('rotbm').feature('disk2').set('mass', 'md2');
model.physics('rotbm').feature('disk2').set('Ip', '2*Jd2');
model.physics('rotbm').feature('disk2').set('Id', 'Jd2');
model.physics('rotbm').feature.duplicate('disk3', 'disk1');
model.physics('rotbm').feature('disk3').label('Disk 10');
model.physics('rotbm').feature('disk3').selection.set([26]);
model.physics('rotbm').feature('disk3').set('mass', 'md10');
model.physics('rotbm').feature('disk3').set('Ip', '2*Jd10');
model.physics('rotbm').feature('disk3').set('Id', 'Jd10');

model.nodeGroup.create('grp1', 'Physics', 'rotbm');
model.nodeGroup('grp1').placeAfter('jrb1');
model.nodeGroup('grp1').add('disk1');
model.nodeGroup('grp1').add('disk2');
model.nodeGroup('grp1').add('disk3');
model.nodeGroup('grp1').label('Impellers');

model.study('std1').feature('time').set('tlist', 'range(0,5e-4,2)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_rotbm_phi').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_rotbm_phi').set('scaleval', '1e-2');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*2.85');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,5e-4,2)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsgenalpha', 'intermediate');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('timemethod', 'genalpha');
model.sol('sol1').feature('t1').set('rhoinf', 0.75);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');

model.study('std1').label('Study: without Seal');

model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 4001, 0);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').create('line1', 'Line');
model.result('pg1').feature('line1').set('expr', {'rotbm.mises'});
model.result('pg1').feature('line1').set('threshold', 'manual');
model.result('pg1').feature('line1').set('thresholdvalue', 0.2);
model.result('pg1').feature('line1').set('colortable', 'Rainbow');
model.result('pg1').feature('line1').set('colortabletrans', 'none');
model.result('pg1').feature('line1').set('colorscalemode', 'linear');
model.result('pg1').label('Stress (rotbm)');
model.result('pg1').feature('line1').set('colortable', 'Rainbow');
model.result('pg1').feature('line1').set('linetype', 'tube');
model.result('pg1').feature('line1').set('radiusexpr', 'rotbm.re');
model.result('pg1').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg1').feature('line1').set('tuberadiusscale', 1);
model.result('pg1').feature('line1').set('tubeendcaps', false);
model.result('pg1').feature('line1').create('def', 'Deform');
model.result('pg1').feature('line1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('line1').feature('def').set('descr', 'Displacement field');
model.result('pg1').create('line2', 'Line');
model.result('pg1').feature('line2').set('expr', {'1'});
model.result('pg1').feature('line2').set('linetype', 'tube');
model.result('pg1').feature('line2').set('radiusexpr', {'rotbm.re '});
model.result('pg1').feature('line2').set('tuberadiusscaleactive', true);
model.result('pg1').feature('line2').set('tuberadiusscale', 1);
model.result('pg1').feature('line2').set('tubeendcaps', false);
model.result('pg1').feature('line2').set('coloring', 'uniform');
model.result('pg1').feature('line2').set('color', 'custom');
model.result('pg1').feature('line2').set('customcolor', [0.9803921580314636 0.7843137383460999 0.7058823704719543]);
model.result('pg1').feature('line2').set('threshold', 'manual');
model.result('pg1').feature('line2').set('thresholdvalue', 0.2);
model.result('pg1').feature('line2').set('titletype', 'none');
model.result('pg1').feature('line2').label('Rotor');
model.result('pg1').feature('line2').create('def', 'Deform');
model.result('pg1').feature('line2').feature('def').set('scaleactive', true);
model.result('pg1').feature('line2').feature('def').set('scale', '1');
model.result('pg1').feature('line2').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj1', 'PointTrajectories');
model.result('pg1').feature('pttraj1').set('plotdata', 'points');
model.result('pg1').feature('pttraj1').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj1').selection.set([4 30]);
model.result('pg1').feature('pttraj1').selection.inherit(false);
model.result('pg1').feature('pttraj1').set('linetype', 'none');
model.result('pg1').feature('pttraj1').set('pointtype', 'arrow');
model.result('pg1').feature('pttraj1').set('expr', {'X-1.0*rotbm.re*rotbm.jrb1.e3gx ' 'Y-1.0*rotbm.re*rotbm.jrb1.e3gy ' 'Z-1.0*rotbm.re*rotbm.jrb1.e3gz '});
model.result('pg1').feature('pttraj1').set('arrowexpr', {'rotbm.re*rotbm.jrb1.e3gx ' 'rotbm.re*rotbm.jrb1.e3gy ' 'rotbm.re*rotbm.jrb1.e3gz '});
model.result('pg1').feature('pttraj1').set('arrowtype', 'arrowhead');
model.result('pg1').feature('pttraj1').set('arrowbase', 'head');
model.result('pg1').feature('pttraj1').set('arrowscale', '10');
model.result('pg1').feature('pttraj1').set('arrowscaleactive', true);
model.result('pg1').feature('pttraj1').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj1').set('custompointcolor', [0.5882353186607361 0.8627451062202454 0.5882353186607361]);
model.result('pg1').feature('pttraj1').set('titletype', 'none');
model.result('pg1').feature('pttraj1').label('Journal Bearing 1');
model.result('pg1').feature('pttraj1').create('def', 'Deform');
model.result('pg1').feature('pttraj1').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj1').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj1').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj2', 'PointTrajectories');
model.result('pg1').feature('pttraj2').set('plotdata', 'points');
model.result('pg1').feature('pttraj2').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj2').selection.set([8]);
model.result('pg1').feature('pttraj2').selection.inherit(false);
model.result('pg1').feature('pttraj2').set('linetype', 'none');
model.result('pg1').feature('pttraj2').set('expr', {'X' 'Y' 'Z'});
model.result('pg1').feature('pttraj2').set('pointtype', 'ellipse');
model.result('pg1').feature('pttraj2').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj2').set('custompointcolor', [0.8039215803146362 0.5215686559677124 0.24705882370471954]);
model.result('pg1').feature('pttraj2').set('semimajorexpr', {'0.5*rotbm.disk1.de*rotbm.e20x ' '0.5*rotbm.disk1.de*rotbm.e20y ' '0.5*rotbm.disk1.de*rotbm.e20z '});
model.result('pg1').feature('pttraj2').set('semiminorexpr', {'0.5*rotbm.disk1.de*rotbm.e30x ' '0.5*rotbm.disk1.de*rotbm.e30y ' '0.5*rotbm.disk1.de*rotbm.e30z '});
model.result('pg1').feature('pttraj2').set('ellipsecount', 1);
model.result('pg1').feature('pttraj2').set('ellipsearrowscaleactive', true);
model.result('pg1').feature('pttraj2').set('ellipsearrowtype', 'none');
model.result('pg1').feature('pttraj2').set('titletype', 'none');
model.result('pg1').feature('pttraj2').label('Disk 1');
model.result('pg1').feature('pttraj2').create('def', 'Deform');
model.result('pg1').feature('pttraj2').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj2').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj2').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj3', 'PointTrajectories');
model.result('pg1').feature('pttraj3').set('plotdata', 'points');
model.result('pg1').feature('pttraj3').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj3').selection.set([10 12 14 16 18 20 22 24]);
model.result('pg1').feature('pttraj3').selection.inherit(false);
model.result('pg1').feature('pttraj3').set('linetype', 'none');
model.result('pg1').feature('pttraj3').set('expr', {'X' 'Y' 'Z'});
model.result('pg1').feature('pttraj3').set('pointtype', 'ellipse');
model.result('pg1').feature('pttraj3').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj3').set('custompointcolor', [0.8039215803146362 0.5215686559677124 0.24705882370471954]);
model.result('pg1').feature('pttraj3').set('semimajorexpr', {'0.5*rotbm.disk2.de*rotbm.e20x ' '0.5*rotbm.disk2.de*rotbm.e20y ' '0.5*rotbm.disk2.de*rotbm.e20z '});
model.result('pg1').feature('pttraj3').set('semiminorexpr', {'0.5*rotbm.disk2.de*rotbm.e30x ' '0.5*rotbm.disk2.de*rotbm.e30y ' '0.5*rotbm.disk2.de*rotbm.e30z '});
model.result('pg1').feature('pttraj3').set('ellipsecount', 1);
model.result('pg1').feature('pttraj3').set('ellipsearrowscaleactive', true);
model.result('pg1').feature('pttraj3').set('ellipsearrowtype', 'none');
model.result('pg1').feature('pttraj3').set('titletype', 'none');
model.result('pg1').feature('pttraj3').label('Disk 2-9');
model.result('pg1').feature('pttraj3').create('def', 'Deform');
model.result('pg1').feature('pttraj3').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj3').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj3').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj4', 'PointTrajectories');
model.result('pg1').feature('pttraj4').set('plotdata', 'points');
model.result('pg1').feature('pttraj4').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj4').selection.set([26]);
model.result('pg1').feature('pttraj4').selection.inherit(false);
model.result('pg1').feature('pttraj4').set('linetype', 'none');
model.result('pg1').feature('pttraj4').set('expr', {'X' 'Y' 'Z'});
model.result('pg1').feature('pttraj4').set('pointtype', 'ellipse');
model.result('pg1').feature('pttraj4').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj4').set('custompointcolor', [0.8039215803146362 0.5215686559677124 0.24705882370471954]);
model.result('pg1').feature('pttraj4').set('semimajorexpr', {'0.5*rotbm.disk3.de*rotbm.e20x ' '0.5*rotbm.disk3.de*rotbm.e20y ' '0.5*rotbm.disk3.de*rotbm.e20z '});
model.result('pg1').feature('pttraj4').set('semiminorexpr', {'0.5*rotbm.disk3.de*rotbm.e30x ' '0.5*rotbm.disk3.de*rotbm.e30y ' '0.5*rotbm.disk3.de*rotbm.e30z '});
model.result('pg1').feature('pttraj4').set('ellipsecount', 1);
model.result('pg1').feature('pttraj4').set('ellipsearrowscaleactive', true);
model.result('pg1').feature('pttraj4').set('ellipsearrowtype', 'none');
model.result('pg1').feature('pttraj4').set('titletype', 'none');
model.result('pg1').feature('pttraj4').label('Disk 10');
model.result('pg1').feature('pttraj4').create('def', 'Deform');
model.result('pg1').feature('pttraj4').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj4').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj4').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Orbit');
model.result('pg2').create('ptgr1', 'PointGraph');
model.result('pg2').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg2').feature('ptgr1').set('linewidth', 'preference');
model.result('pg2').feature('ptgr1').selection.set([4]);
model.result('pg2').feature('ptgr1').set('expr', 'w/Cb');
model.result('pg2').feature('ptgr1').set('xdata', 'expr');
model.result('pg2').feature('ptgr1').set('xdataexpr', 'v/Cb');
model.result('pg2').feature('ptgr1').set('linewidth', 3);
model.result('pg2').feature('ptgr1').set('legend', true);
model.result('pg2').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg2').feature('ptgr1').setIndex('legends', 'Without Seal', 0);
model.result('pg2').run;
model.result('pg2').set('preserveaspect', true);
model.result('pg2').run;

model.physics('rotbm').create('las1', 'LiquidAnnularSeal', 0);
model.physics('rotbm').feature('las1').set('R', 'ds/2');
model.physics('rotbm').feature('las1').set('Ls', 'Ls');
model.physics('rotbm').feature('las1').set('C', 'Cs');
model.physics('rotbm').feature('las1').set('rho_mat', 'userdef');
model.physics('rotbm').feature('las1').set('rho', 'rho_f');
model.physics('rotbm').feature('las1').set('mu_mat', 'userdef');
model.physics('rotbm').feature('las1').set('mu', 'mu_f');
model.physics('rotbm').feature('las1').set('dP', 'dPs');
model.physics('rotbm').feature('las1').set('V0', 60);
model.physics('rotbm').feature('las1').set('SealModel', 'Childs');
model.physics('rotbm').feature('las1').set('alpha', 0.7);
model.physics('rotbm').feature('las1').selection.set([7]);
model.physics('rotbm').feature.duplicate('las2', 'las1');
model.physics('rotbm').feature('las2').selection.set([9]);
model.physics('rotbm').feature.duplicate('las3', 'las2');
model.physics('rotbm').feature('las3').selection.set([11]);
model.physics('rotbm').feature.duplicate('las4', 'las3');
model.physics('rotbm').feature('las4').selection.set([13]);
model.physics('rotbm').feature.duplicate('las5', 'las1');
model.physics('rotbm').feature.duplicate('las6', 'las2');
model.physics('rotbm').feature.duplicate('las7', 'las3');
model.physics('rotbm').feature.duplicate('las8', 'las4');
model.physics('rotbm').feature('las5').selection.set([15]);
model.physics('rotbm').feature('las6').selection.set([17]);
model.physics('rotbm').feature('las7').selection.set([19]);
model.physics('rotbm').feature('las8').selection.set([21]);
model.physics('rotbm').feature.duplicate('las9', 'las8');
model.physics('rotbm').feature('las9').selection.set([23]);
model.physics('rotbm').feature.duplicate('las10', 'las9');
model.physics('rotbm').feature('las10').selection.set([25]);

model.nodeGroup.create('grp2', 'Physics', 'rotbm');
model.nodeGroup('grp2').placeAfter('jrb1');
model.nodeGroup('grp2').add('las1');
model.nodeGroup('grp2').add('las2');
model.nodeGroup('grp2').add('las3');
model.nodeGroup('grp2').add('las4');
model.nodeGroup('grp2').add('las5');
model.nodeGroup('grp2').add('las6');
model.nodeGroup('grp2').add('las7');
model.nodeGroup('grp2').add('las8');
model.nodeGroup('grp2').add('las9');
model.nodeGroup('grp2').add('las10');
model.nodeGroup('grp2').label('Seals');

model.physics('rotbm').create('las11', 'LiquidAnnularSeal', 0);
model.physics('rotbm').feature('las11').set('R', 'dp/2');
model.physics('rotbm').feature('las11').set('Ls', 'Lp');
model.physics('rotbm').feature('las11').set('C', 'Cp');
model.physics('rotbm').feature('las11').set('rho_mat', 'userdef');
model.physics('rotbm').feature('las11').set('rho', 'rho_f');
model.physics('rotbm').feature('las11').set('mu_mat', 'userdef');
model.physics('rotbm').feature('las11').set('mu', 'mu_f');
model.physics('rotbm').feature('las11').set('dP', 'dPp');
model.physics('rotbm').feature('las11').set('V0', 90);
model.physics('rotbm').feature('las11').selection.set([28]);
model.physics('rotbm').feature('las11').label('Balance Piston Seal');

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/rotbm', true);
model.study('std2').feature('time').set('tlist', 'range(0,5e-4,2)');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_rotbm_phi').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_rotbm_phi').set('scaleval', '1e-2');
model.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-2*2.85');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,5e-4,2)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 0.001);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol2').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsgenalpha', 'intermediate');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('timemethod', 'genalpha');
model.sol('sol2').feature('t1').set('rhoinf', 0.75);
model.sol('sol2').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol2').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('t1').feature('fc1').set('dtech', 'auto');

model.study('std2').label('Study: with Seal');

model.sol('sol2').runAll;

model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 4001, 0);
model.result('pg3').set('defaultPlotID', 'stress');
model.result('pg3').create('line1', 'Line');
model.result('pg3').feature('line1').set('expr', {'rotbm.mises'});
model.result('pg3').feature('line1').set('threshold', 'manual');
model.result('pg3').feature('line1').set('thresholdvalue', 0.2);
model.result('pg3').feature('line1').set('colortable', 'Rainbow');
model.result('pg3').feature('line1').set('colortabletrans', 'none');
model.result('pg3').feature('line1').set('colorscalemode', 'linear');
model.result('pg3').label('Stress (rotbm) 1');
model.result('pg3').feature('line1').set('colortable', 'Rainbow');
model.result('pg3').feature('line1').set('linetype', 'tube');
model.result('pg3').feature('line1').set('radiusexpr', 'rotbm.re');
model.result('pg3').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg3').feature('line1').set('tuberadiusscale', 1);
model.result('pg3').feature('line1').set('tubeendcaps', false);
model.result('pg3').feature('line1').create('def', 'Deform');
model.result('pg3').feature('line1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg3').feature('line1').feature('def').set('descr', 'Displacement field');
model.result('pg3').create('line2', 'Line');
model.result('pg3').feature('line2').set('expr', {'1'});
model.result('pg3').feature('line2').set('linetype', 'tube');
model.result('pg3').feature('line2').set('radiusexpr', {'rotbm.re '});
model.result('pg3').feature('line2').set('tuberadiusscaleactive', true);
model.result('pg3').feature('line2').set('tuberadiusscale', 1);
model.result('pg3').feature('line2').set('tubeendcaps', false);
model.result('pg3').feature('line2').set('coloring', 'uniform');
model.result('pg3').feature('line2').set('color', 'custom');
model.result('pg3').feature('line2').set('customcolor', [0.9803921580314636 0.7843137383460999 0.7058823704719543]);
model.result('pg3').feature('line2').set('threshold', 'manual');
model.result('pg3').feature('line2').set('thresholdvalue', 0.2);
model.result('pg3').feature('line2').set('titletype', 'none');
model.result('pg3').feature('line2').label('Rotor');
model.result('pg3').feature('line2').create('def', 'Deform');
model.result('pg3').feature('line2').feature('def').set('scaleactive', true);
model.result('pg3').feature('line2').feature('def').set('scale', '1');
model.result('pg3').feature('line2').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg3').create('pttraj1', 'PointTrajectories');
model.result('pg3').feature('pttraj1').set('plotdata', 'points');
model.result('pg3').feature('pttraj1').selection.geom('geom1', 0);
model.result('pg3').feature('pttraj1').selection.set([4 30]);
model.result('pg3').feature('pttraj1').selection.inherit(false);
model.result('pg3').feature('pttraj1').set('linetype', 'none');
model.result('pg3').feature('pttraj1').set('pointtype', 'arrow');
model.result('pg3').feature('pttraj1').set('expr', {'X-1.0*rotbm.re*rotbm.jrb1.e3gx ' 'Y-1.0*rotbm.re*rotbm.jrb1.e3gy ' 'Z-1.0*rotbm.re*rotbm.jrb1.e3gz '});
model.result('pg3').feature('pttraj1').set('arrowexpr', {'rotbm.re*rotbm.jrb1.e3gx ' 'rotbm.re*rotbm.jrb1.e3gy ' 'rotbm.re*rotbm.jrb1.e3gz '});
model.result('pg3').feature('pttraj1').set('arrowtype', 'arrowhead');
model.result('pg3').feature('pttraj1').set('arrowbase', 'head');
model.result('pg3').feature('pttraj1').set('arrowscale', '10');
model.result('pg3').feature('pttraj1').set('arrowscaleactive', true);
model.result('pg3').feature('pttraj1').set('pointcolor', 'custom');
model.result('pg3').feature('pttraj1').set('custompointcolor', [0.5882353186607361 0.8627451062202454 0.5882353186607361]);
model.result('pg3').feature('pttraj1').set('titletype', 'none');
model.result('pg3').feature('pttraj1').label('Journal Bearing 1');
model.result('pg3').feature('pttraj1').create('def', 'Deform');
model.result('pg3').feature('pttraj1').feature('def').set('scaleactive', true);
model.result('pg3').feature('pttraj1').feature('def').set('scale', '1');
model.result('pg3').feature('pttraj1').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg3').create('pttraj2', 'PointTrajectories');
model.result('pg3').feature('pttraj2').set('plotdata', 'points');
model.result('pg3').feature('pttraj2').selection.geom('geom1', 0);
model.result('pg3').feature('pttraj2').selection.set([8]);
model.result('pg3').feature('pttraj2').selection.inherit(false);
model.result('pg3').feature('pttraj2').set('linetype', 'none');
model.result('pg3').feature('pttraj2').set('expr', {'X' 'Y' 'Z'});
model.result('pg3').feature('pttraj2').set('pointtype', 'ellipse');
model.result('pg3').feature('pttraj2').set('pointcolor', 'custom');
model.result('pg3').feature('pttraj2').set('custompointcolor', [0.8039215803146362 0.5215686559677124 0.24705882370471954]);
model.result('pg3').feature('pttraj2').set('semimajorexpr', {'0.5*rotbm.disk1.de*rotbm.e20x ' '0.5*rotbm.disk1.de*rotbm.e20y ' '0.5*rotbm.disk1.de*rotbm.e20z '});
model.result('pg3').feature('pttraj2').set('semiminorexpr', {'0.5*rotbm.disk1.de*rotbm.e30x ' '0.5*rotbm.disk1.de*rotbm.e30y ' '0.5*rotbm.disk1.de*rotbm.e30z '});
model.result('pg3').feature('pttraj2').set('ellipsecount', 1);
model.result('pg3').feature('pttraj2').set('ellipsearrowscaleactive', true);
model.result('pg3').feature('pttraj2').set('ellipsearrowtype', 'none');
model.result('pg3').feature('pttraj2').set('titletype', 'none');
model.result('pg3').feature('pttraj2').label('Disk 1');
model.result('pg3').feature('pttraj2').create('def', 'Deform');
model.result('pg3').feature('pttraj2').feature('def').set('scaleactive', true);
model.result('pg3').feature('pttraj2').feature('def').set('scale', '1');
model.result('pg3').feature('pttraj2').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg3').create('pttraj3', 'PointTrajectories');
model.result('pg3').feature('pttraj3').set('plotdata', 'points');
model.result('pg3').feature('pttraj3').selection.geom('geom1', 0);
model.result('pg3').feature('pttraj3').selection.set([10 12 14 16 18 20 22 24]);
model.result('pg3').feature('pttraj3').selection.inherit(false);
model.result('pg3').feature('pttraj3').set('linetype', 'none');
model.result('pg3').feature('pttraj3').set('expr', {'X' 'Y' 'Z'});
model.result('pg3').feature('pttraj3').set('pointtype', 'ellipse');
model.result('pg3').feature('pttraj3').set('pointcolor', 'custom');
model.result('pg3').feature('pttraj3').set('custompointcolor', [0.8039215803146362 0.5215686559677124 0.24705882370471954]);
model.result('pg3').feature('pttraj3').set('semimajorexpr', {'0.5*rotbm.disk2.de*rotbm.e20x ' '0.5*rotbm.disk2.de*rotbm.e20y ' '0.5*rotbm.disk2.de*rotbm.e20z '});
model.result('pg3').feature('pttraj3').set('semiminorexpr', {'0.5*rotbm.disk2.de*rotbm.e30x ' '0.5*rotbm.disk2.de*rotbm.e30y ' '0.5*rotbm.disk2.de*rotbm.e30z '});
model.result('pg3').feature('pttraj3').set('ellipsecount', 1);
model.result('pg3').feature('pttraj3').set('ellipsearrowscaleactive', true);
model.result('pg3').feature('pttraj3').set('ellipsearrowtype', 'none');
model.result('pg3').feature('pttraj3').set('titletype', 'none');
model.result('pg3').feature('pttraj3').label('Disk 2-9');
model.result('pg3').feature('pttraj3').create('def', 'Deform');
model.result('pg3').feature('pttraj3').feature('def').set('scaleactive', true);
model.result('pg3').feature('pttraj3').feature('def').set('scale', '1');
model.result('pg3').feature('pttraj3').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg3').create('pttraj4', 'PointTrajectories');
model.result('pg3').feature('pttraj4').set('plotdata', 'points');
model.result('pg3').feature('pttraj4').selection.geom('geom1', 0);
model.result('pg3').feature('pttraj4').selection.set([26]);
model.result('pg3').feature('pttraj4').selection.inherit(false);
model.result('pg3').feature('pttraj4').set('linetype', 'none');
model.result('pg3').feature('pttraj4').set('expr', {'X' 'Y' 'Z'});
model.result('pg3').feature('pttraj4').set('pointtype', 'ellipse');
model.result('pg3').feature('pttraj4').set('pointcolor', 'custom');
model.result('pg3').feature('pttraj4').set('custompointcolor', [0.8039215803146362 0.5215686559677124 0.24705882370471954]);
model.result('pg3').feature('pttraj4').set('semimajorexpr', {'0.5*rotbm.disk3.de*rotbm.e20x ' '0.5*rotbm.disk3.de*rotbm.e20y ' '0.5*rotbm.disk3.de*rotbm.e20z '});
model.result('pg3').feature('pttraj4').set('semiminorexpr', {'0.5*rotbm.disk3.de*rotbm.e30x ' '0.5*rotbm.disk3.de*rotbm.e30y ' '0.5*rotbm.disk3.de*rotbm.e30z '});
model.result('pg3').feature('pttraj4').set('ellipsecount', 1);
model.result('pg3').feature('pttraj4').set('ellipsearrowscaleactive', true);
model.result('pg3').feature('pttraj4').set('ellipsearrowtype', 'none');
model.result('pg3').feature('pttraj4').set('titletype', 'none');
model.result('pg3').feature('pttraj4').label('Disk 10');
model.result('pg3').feature('pttraj4').create('def', 'Deform');
model.result('pg3').feature('pttraj4').feature('def').set('scaleactive', true);
model.result('pg3').feature('pttraj4').feature('def').set('scale', '1');
model.result('pg3').feature('pttraj4').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg3').run;
model.result('pg2').run;
model.result('pg2').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg2').run;
model.result('pg2').feature('ptgr2').set('data', 'dset2');
model.result('pg2').feature('ptgr2').setIndex('legends', 'With Seal', 0);
model.result('pg2').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Balance Piston Seal Stiffness');
model.result('pg4').set('data', 'dset2');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').set('expr', {'rotbm.las11.Kd'});
model.result('pg4').feature('glob1').set('descr', {'Direct stiffness'});
model.result('pg4').feature('glob1').set('unit', {'N/m'});
model.result('pg4').feature('glob1').set('expr', {'rotbm.las11.Kd' 'rotbm.las11.kc'});
model.result('pg4').feature('glob1').set('descr', {'Direct stiffness' 'Cross-coupled stiffness'});
model.result('pg4').feature('glob1').set('xdata', 'expr');
model.result('pg4').feature('glob1').set('xdataexpr', 'rotbm.las11.Omega');
model.result('pg4').feature('glob1').set('linewidth', 3);
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').set('legendpos', 'upperleft');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Vertical Displacement at Impeller 5');
model.result('pg5').create('ptgr1', 'PointGraph');
model.result('pg5').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg5').feature('ptgr1').set('linewidth', 'preference');
model.result('pg5').feature('ptgr1').label('Point Graph: Without Seal');
model.result('pg5').feature('ptgr1').selection.set([16]);
model.result('pg5').feature('ptgr1').set('expr', 'w');
model.result('pg5').feature('ptgr1').set('xdata', 'expr');
model.result('pg5').feature('ptgr1').set('xdataexpr', 'rotbm.Ov');
model.result('pg5').feature('ptgr1').set('legend', true);
model.result('pg5').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg5').feature('ptgr1').setIndex('legends', 'Without Seal', 0);
model.result('pg5').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg5').run;
model.result('pg5').feature('ptgr2').label('Point Graph: With Seal');
model.result('pg5').feature('ptgr2').set('data', 'dset2');
model.result('pg5').feature('ptgr2').setIndex('legends', 'With Seal', 0);
model.result('pg5').run;

model.study('std1').feature('time').set('useadvanceddisable', true);
model.study('std1').feature('time').set('disabledphysics', {'rotbm/las1' 'rotbm/las2' 'rotbm/las3' 'rotbm/las4' 'rotbm/las5' 'rotbm/las6' 'rotbm/las7' 'rotbm/las8' 'rotbm/las9' 'rotbm/las10'  ...
'rotbm/las11'});

model.result('pg3').run;

model.title('Response of a Rotor Under the Influence of Seal Forces');

model.description(['The fluid flow in seals causes a strong restoring radial force, opposing the shaft motion. There is also a cross-coupled force due to the axial variation of the circumferential flow. The first type of force always has a stabilizing effect on the rotor, whereas the second one in certain situations can cause an instability.' newline  newline 'In this example, an axial compressor is modeled using the Beam Rotor interface. The compressor has 10' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'stages of impellers, with a seal near each impeller to avoid flow leakage. In addition, a balance piston seal is present at the end of the impeller stages. The time-dependent response of the system is studied for a gradually increasing rotor speed. Two cases are considered for the simulation: excluding all seals and including all seals. The responses of the system for the two cases are compared, showing a better stability in the presence of seals.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('rotor_stability_with_seal.mph');

model.modelNode.label('Components');

out = model;
