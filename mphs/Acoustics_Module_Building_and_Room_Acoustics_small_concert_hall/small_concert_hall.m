function out = model
%
% small_concert_hall.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Building_and_Room_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('rac', 'RayAcoustics', 'geom1');
model.physics('rac').model('comp1');

model.study.create('std1');
model.study('std1').create('rtrac', 'RayTracing');
model.study('std1').feature('rtrac').setSolveFor('/physics/rac', true);

model.geom('geom1').insertFile('small_concert_hall_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');

model.view('view1').set('renderwireframe', true);

model.param.label('Parameters 1 - Model');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('f0', '500[Hz]', 'Band center frequency');
model.param.set('c0', '343[m/s]', 'Speed of sound');
model.param.set('rho0', '1.2[kg/m^3]', 'Density');
model.param.set('lam0', 'c0/f0', 'Wavelength at f0');
model.param.set('Vol', '457.7[m^3]', 'Room volume');
model.param.set('s_default', '0.05', 'Scattering coefficient of flat surfaces');
model.param.set('s_diffuser', '0.5', 'Scattering coefficient of diffusers');
model.param.set('s_seats', '0.6', 'Scattering coefficient of seating area');
model.param.create('par2');
model.param('par2').label('Parameters 2 - Source and Receiver Positions');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('x_src', '1[m]', 'Omnidirectional source x-coordinate');
model.param('par2').set('y_src', '-1[m]', 'Omnidirectional source y-coordinate');
model.param('par2').set('z_src', '1.5[m]', 'Omnidirectional source z-coordinate');
model.param('par2').set('x_rec', '7[m]', 'Receiver x-coordinate');
model.param('par2').set('y_rec', '1[m]', 'Receiver y-coordinate');
model.param('par2').set('z_rec', '1.5[m]', 'Receiver z-coordinate');
model.param('par2').set('dsr', 'sqrt((x_src-x_rec)^2+(y_src-y_rec)^2+(z_src-z_rec)^2)', 'Source to receiver distance');
model.param('par2').set('x_spk', '0.8[m]', 'Loudspeaker x-coordinate');
model.param('par2').set('y_spk', '2[m]', 'Loudspeaker y-coordinate');
model.param('par2').set('z_spk', '2.5[m]', 'Loudspeaker z-coordinate');
model.param('par2').set('alpha0', '90[deg]', 'Loudspeaker orientation (Euler angle)');
model.param('par2').set('beta0', '15[deg]', 'Loudspeaker orientation (Euler angle)');
model.param('par2').set('gamma0', '-100[deg]', 'Loudspeaker orientation (Euler angle)');
model.param.create('par3');
model.param('par3').label('Parameters 3 - Source and Receiver Settings');

% To import content from file, use:
% model.param('par3').loadFile('FILENAME');
model.param('par3').set('L0_src', '100[dB]', 'Omnidirectional source sound pressure level at R0_src');
model.param('par3').set('R0_src', '1[m]', 'Reference distance');
model.param('par3').set('L0_spk', '0[dB]', 'Loudspeaker gain');
model.param('par3').set('R0_spk', '1[m]', 'Reference distance');
model.param('par3').set('r_rec', '0.3[m]', 'Receiver radius');
model.param('par3').set('dt', '0.01[s]', 'Time interval');
model.param('par3').set('Nrays_min', '(4.34/r_rec)^2*Vol/pi/c0/dt', 'Recommended minimum number of released rays');
model.param('par3').set('Nrays', '1000*ceil(Nrays_min/1000)', 'Number of released rays');

model.func.create('int1', 'Interpolation');
model.func('int1').set('source', 'file');
model.func('int1').set('filename', 'small_concert_hall_radiation_balloon.txt');
model.func('int1').importData;
model.func('int1').setIndex('funcs', 'preal', 0, 0);
model.func('int1').setIndex('funcs', 1, 0, 1);
model.func('int1').setIndex('funcs', 'pimag', 1, 0);
model.func('int1').setIndex('funcs', 2, 1, 1);
model.func('int1').setIndex('fununit', 'Pa', 0);
model.func('int1').setIndex('fununit', 'Pa', 1);
model.func('int1').setIndex('argunit', 'Hz', 0);
model.func('int1').setIndex('argunit', 'rad', 1);
model.func('int1').setIndex('argunit', 'rad', 2);
model.func.create('int2', 'Interpolation');
model.func('int2').set('source', 'file');
model.func('int2').set('filename', 'small_concert_hall_absorption_parameters.txt');
model.func('int2').set('nargs', 1);
model.func('int2').importData;
model.func('int2').setIndex('funcs', 'a_walls', 0, 0);
model.func('int2').setIndex('funcs', 1, 0, 1);
model.func('int2').setIndex('funcs', 'a_entrance', 1, 0);
model.func('int2').setIndex('funcs', 2, 1, 1);
model.func('int2').setIndex('funcs', 'a_windows', 2, 0);
model.func('int2').setIndex('funcs', 3, 2, 1);
model.func('int2').setIndex('funcs', 'a_floor', 3, 0);
model.func('int2').setIndex('funcs', 4, 3, 1);
model.func('int2').setIndex('funcs', 'a_diffuser', 4, 0);
model.func('int2').setIndex('funcs', 5, 4, 1);
model.func('int2').setIndex('funcs', 'a_seats', 5, 0);
model.func('int2').setIndex('funcs', 6, 5, 1);
model.func('int2').setIndex('funcs', 'a_absorbers', 6, 0);
model.func('int2').setIndex('funcs', 7, 6, 1);
model.func('int2').set('interp', 'neighbor');
model.func('int2').setIndex('fununit', 1, 0);
model.func('int2').setIndex('fununit', 1, 1);
model.func('int2').setIndex('fununit', 1, 2);
model.func('int2').setIndex('fununit', 1, 3);
model.func('int2').setIndex('fununit', 1, 4);
model.func('int2').setIndex('fununit', 1, 5);
model.func('int2').setIndex('fununit', 1, 6);
model.func('int2').setIndex('argunit', 'Hz', 0);
model.func.create('int3', 'Interpolation');
model.func('int3').set('source', 'file');
model.func('int3').set('filename', 'small_concert_hall_air_attenuation.txt');
model.func('int3').importData;
model.func('int3').set('funcname', 'a_air');
model.func('int3').set('interp', 'neighbor');
model.func('int3').setIndex('argunit', 'Hz', 0);
model.func('int3').setIndex('fununit', '1/m', 0);

model.coordSystem.create('sys2', 'geom1', 'Rotated');
model.coordSystem('sys2').set('angle', {'alpha0' 'beta0' '0'});
model.coordSystem('sys2').setIndex('angle', 'gamma0', 2);

model.geom('geom1').run('sel7');
model.geom('geom1').create('pt1', 'Point');
model.geom('geom1').feature('pt1').setIndex('p', 'x_spk', 0);
model.geom('geom1').feature('pt1').setIndex('p', 'y_spk', 1);
model.geom('geom1').feature('pt1').setIndex('p', 'z_spk', 2);
model.geom('geom1').run('pt1');
model.geom('geom1').create('sph1', 'Sphere');
model.geom('geom1').feature('sph1').set('type', 'surface');
model.geom('geom1').feature('sph1').set('r', 'r_rec');
model.geom('geom1').feature('sph1').set('pos', {'x_rec' 'y_rec' 'z_rec'});
model.geom('geom1').feature('sph1').set('selresult', true);
model.geom('geom1').feature('sph1').set('selresultshow', 'bnd');
model.geom('geom1').run('fin');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'intop_windows');
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.named('geom1_sel1');
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').set('opname', 'intop_seats');
model.cpl('intop2').selection.geom('geom1', 2);
model.cpl('intop2').selection.named('geom1_sel2');
model.cpl.create('intop3', 'Integration', 'geom1');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').set('opname', 'intop_diffusers');
model.cpl('intop3').selection.geom('geom1', 2);
model.cpl('intop3').selection.named('geom1_sel3');
model.cpl.create('intop4', 'Integration', 'geom1');
model.cpl('intop4').set('axisym', true);
model.cpl('intop4').set('opname', 'intop_floor');
model.cpl('intop4').selection.geom('geom1', 2);
model.cpl('intop4').selection.named('geom1_sel4');
model.cpl.create('intop5', 'Integration', 'geom1');
model.cpl('intop5').set('axisym', true);
model.cpl('intop5').set('opname', 'intop_entrance');
model.cpl('intop5').selection.geom('geom1', 2);
model.cpl('intop5').selection.named('geom1_sel5');
model.cpl.create('intop6', 'Integration', 'geom1');
model.cpl('intop6').set('axisym', true);
model.cpl('intop6').set('opname', 'intop_walls');
model.cpl('intop6').selection.geom('geom1', 2);
model.cpl('intop6').selection.named('geom1_sel6');
model.cpl.create('intop7', 'Integration', 'geom1');
model.cpl('intop7').set('axisym', true);
model.cpl('intop7').set('opname', 'intop_absorbers');
model.cpl('intop7').selection.geom('geom1', 2);
model.cpl('intop7').selection.named('geom1_sel7');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Variables: Quality Metric Estimates');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('A', 'intop_windows(1)*a_windows(f0)+intop_seats(1)*a_seats(f0)+intop_diffusers(1)*a_diffuser(f0)+intop_floor(1)*a_floor(f0)+intop_entrance(1)*a_entrance(f0)+intop_walls(1)*a_walls(f0)+intop_absorbers(1)*a_absorbers(f0)', 'Total absorption');
model.variable('var1').set('S', 'intop_windows(1)+intop_seats(1)+intop_diffusers(1)+intop_floor(1)+intop_entrance(1)+intop_walls(1)+intop_absorbers(1)', 'Total surface area');
model.variable('var1').set('T60_S', '0.161[s/m]*Vol/(A+8*a_air(f0)*Vol)', 'Reverberation time (Sabine)');
model.variable('var1').set('T60_Sna', '0.161[s/m]*Vol/A', 'Reverberation time (Sabine, no air absorption)');
model.variable('var1').set('T60_E', '0.161[s/m]*Vol/(-S*log(1-A/S)+8*a_air(f0)*Vol)', 'Reverberation time (Eyring)');
model.variable('var1').set('T0', 'T60_S', 'Reverberation time');
model.variable('var1').set('Ed', '1/(4*pi*c0*dsr^2)', 'Direct energy');
model.variable('var1').set('Ee50', 'T0/(13.8*Vol)*(exp(-A/S)-exp(-(13.8/T0*50[ms]+A/S)))', 'Early energy 50 ms');
model.variable('var1').set('El50', 'T0/(13.8*Vol)*(exp(-(13.8/T0*50[ms]+A/S)))', 'Late energy 50 ms');
model.variable('var1').set('Ee80', 'T0/(13.8*Vol)*(exp(-A/S)-exp(-(13.8/T0*80[ms]+A/S)))', 'Early energy 80 ms');
model.variable('var1').set('El80', 'T0/(13.8*Vol)*(exp(-(13.8/T0*80[ms]+A/S)))', 'Late energy 80 ms');
model.variable('var1').set('C50', '10*log10((Ed+Ee50)/El50)', 'Clarity 50 estimate');
model.variable('var1').set('C80', '10*log10((Ed+Ee80)/El80)', 'Clarity 80 estimate');
model.variable('var1').set('D', '10^(C50/10)/(1+10^(C50/10))*100', 'Definition estimate');
model.variable('var1').set('ts', 'T0/13.8*(A/S+1)', 'Center time estimate');

model.physics('rac').prop('IntensityComputation').setIndex('IntensityComputation', 'ComputeIntensityAndPower', 0);
model.physics('rac').prop('cext').setIndex('cext', 'c0', 0);
model.physics('rac').prop('rhoext').setIndex('rhoext', 'rho0', 0);
model.physics('rac').prop('alphaext').setIndex('alphaext', 'a_air(f0)', 0);
model.physics('rac').prop('CountReflections').setIndex('CountReflections', 1, 0);
model.physics('rac').feature('op1').set('f', 'f0');
model.physics('rac').create('wall2', 'Wall', 2);
model.physics('rac').feature('wall2').label('Wall: Walls');
model.physics('rac').feature('wall2').selection.named('geom1_sel6');
model.physics('rac').feature('wall2').set('WallCondition', 'MixedDiffuseSpecular');
model.physics('rac').feature('wall2').set('gammas', '1-s_default');
model.physics('rac').feature('wall2').set('alphas', 'a_walls(f0)');
model.physics('rac').feature('wall2').set('alphad', 'a_walls(f0)');
model.physics('rac').create('wall3', 'Wall', 2);
model.physics('rac').feature('wall3').label('Wall: Entrance');
model.physics('rac').feature('wall3').selection.named('geom1_sel5');
model.physics('rac').feature('wall3').set('WallCondition', 'MixedDiffuseSpecular');
model.physics('rac').feature('wall3').set('gammas', '1-s_default');
model.physics('rac').feature('wall3').set('alphas', 'a_entrance(f0)');
model.physics('rac').feature('wall3').set('alphad', 'a_entrance(f0)');
model.physics('rac').create('wall4', 'Wall', 2);
model.physics('rac').feature('wall4').label('Wall: Windows');
model.physics('rac').feature('wall4').selection.named('geom1_sel1');
model.physics('rac').feature('wall4').set('WallCondition', 'MixedDiffuseSpecular');
model.physics('rac').feature('wall4').set('gammas', '1-s_default');
model.physics('rac').feature('wall4').set('alphas', 'a_windows(f0)');
model.physics('rac').feature('wall4').set('alphad', 'a_windows(f0)');
model.physics('rac').create('wall5', 'Wall', 2);
model.physics('rac').feature('wall5').label('Wall: Floor');
model.physics('rac').feature('wall5').selection.named('geom1_sel4');
model.physics('rac').feature('wall5').set('WallCondition', 'MixedDiffuseSpecular');
model.physics('rac').feature('wall5').set('gammas', '1-s_default');
model.physics('rac').feature('wall5').set('alphas', 'a_floor(f0)');
model.physics('rac').feature('wall5').set('alphad', 'a_floor(f0)');
model.physics('rac').create('wall6', 'Wall', 2);
model.physics('rac').feature('wall6').label('Wall: Diffusers');
model.physics('rac').feature('wall6').selection.named('geom1_sel3');
model.physics('rac').feature('wall6').set('WallCondition', 'MixedDiffuseSpecular');
model.physics('rac').feature('wall6').set('gammas', '1-s_diffuser');
model.physics('rac').feature('wall6').set('alphas', 'a_diffuser(f0)');
model.physics('rac').feature('wall6').set('alphad', 'a_diffuser(f0)');
model.physics('rac').create('wall7', 'Wall', 2);
model.physics('rac').feature('wall7').label('Wall: Absorbers');
model.physics('rac').feature('wall7').selection.named('geom1_sel7');
model.physics('rac').feature('wall7').set('WallCondition', 'MixedDiffuseSpecular');
model.physics('rac').feature('wall7').set('gammas', '1-s_default');
model.physics('rac').feature('wall7').set('alphas', 'a_absorbers(f0)');
model.physics('rac').feature('wall7').set('alphad', 'a_absorbers(f0)');
model.physics('rac').create('wall8', 'Wall', 2);
model.physics('rac').feature('wall8').label('Wall: Seats (Top)');
model.physics('rac').feature('wall8').selection.set([41]);
model.physics('rac').feature('wall8').set('WallCondition', 'MixedDiffuseSpecular');
model.physics('rac').feature('wall8').set('gammas', '1-s_seats');
model.physics('rac').feature('wall8').set('alphas', 'a_seats(f0)');
model.physics('rac').feature('wall8').set('alphad', 'a_seats(f0)');
model.physics('rac').feature('wall8').create('spl1', 'SoundPressureLevelBoundary', 2);
model.physics('rac').feature('wall8').feature('spl1').set('ComputeSmoothedAccumulatedVariable', true);
model.physics('rac').create('wall9', 'Wall', 2);
model.physics('rac').feature('wall9').label('Wall: Seats (Around)');
model.physics('rac').feature('wall9').selection.set([39 40 42 67]);
model.physics('rac').feature('wall9').set('WallCondition', 'MixedDiffuseSpecular');
model.physics('rac').feature('wall9').set('gammas', '1-s_seats');
model.physics('rac').feature('wall9').set('alphas', 'a_seats(f0)');
model.physics('rac').feature('wall9').set('alphad', 'a_seats(f0)');
model.physics('rac').create('swd1', 'SourceWithDirectivity', -1);
model.physics('rac').feature('swd1').set('q0', {'x_src' 'y_src' 'z_src'});
model.physics('rac').feature('swd1').setIndex('Nw', 'Nrays', 0);
model.physics('rac').feature('swd1').set('D', '0[dB]');
model.physics('rac').feature('swd1').set('Lref', 'L0_src');
model.physics('rac').feature('swd1').set('Rref', 'R0_src');
model.physics('rac').create('swd2', 'SourceWithDirectivity', -1);
model.physics('rac').feature('swd2').set('coordinateSystem', 'sys2');
model.physics('rac').feature('swd2').set('q0', {'x_spk' 'y_spk' 'z_spk'});
model.physics('rac').feature('swd2').setIndex('Nw', 'Nrays', 0);
model.physics('rac').feature('swd2').set('D', '20*log10(abs(preal(f0,rac.swd2.phi,rac.swd2.theta)+i*pimag(f0,rac.swd2.phi,rac.swd2.theta))/sqrt(2)/20e-6[Pa])');
model.physics('rac').feature('swd2').set('Lref', 'L0_spk');
model.physics('rac').feature('swd2').set('Rref', 'R0_spk');
model.physics('rac').create('rt1', 'RayTermination', -1);
model.physics('rac').feature('rt1').set('SpatialExtentsOfRayPropagation', 'BoundingBoxFromGeometry');
model.physics('rac').feature('rt1').set('AdditionalTerminationCriteria', 'Power');
model.physics('rac').feature('rt1').set('Qth', 'if(isdefined(rac.swd1.Q0),rac.swd1.Q0*1e-7,rac.swd2.Q0*1e-7)');
model.physics('rac').create('rec1', 'Receiver', 2);
model.physics('rac').feature('rec1').selection.named('geom1_sph1_bnd');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('hauto', 8);
model.mesh('mesh1').feature('ftri1').selection.all;
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([41]);
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 0.3);
model.mesh('mesh1').feature('ftri1').feature.duplicate('size2', 'size1');
model.mesh('mesh1').feature('ftri1').feature('size2').selection.named('geom1_sph1_bnd');
model.mesh('mesh1').feature('ftri1').feature('size2').set('hmax', 'r_rec/3');
model.mesh('mesh1').create('vtx1', 'Vertex');
model.mesh('mesh1').feature('vtx1').selection.set([11]);
model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Omnidirectional Source');
model.study('std1').feature('rtrac').set('tunit', 's');
model.study('std1').feature('rtrac').set('tlist', '0 1.6');
model.study('std1').feature('rtrac').set('useadvanceddisable', true);
model.study('std1').feature('rtrac').set('disabledphysics', {'rac/swd2'});
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'alpha0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'rad', 0);
model.study('std1').feature('param').setIndex('pname', 'alpha0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'rad', 0);
model.study('std1').feature('param').setIndex('pname', 'f0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'Hz', 0);
model.study('std1').feature('param').setIndex('plistarr', '{125, 250, 500, 1e3, 2e3, 4e3, 8e3}', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'rtrac');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'rtrac');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', '0 1.6');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 1.0E-5);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', false);
model.sol('sol1').feature('t1').set('storeudot', false);
model.sol('sol1').feature('t1').set('tstepsgenalpha', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('timemethod', 'genalpha');
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('control', 'rtrac');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'f0'});
model.batch('p1').set('plistarr', {'{125, 250, 500, 1e3, 2e3, 4e3, 8e3}'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.dataset.create('ray1', 'Ray');
model.result.dataset('ray1').set('solution', 'sol2');
model.result.dataset('ray1').set('posdof', {'comp1.qx' 'comp1.qy' 'comp1.qz'});
model.result.dataset('ray1').set('geom', 'geom1');
model.result.dataset('ray1').set('rgeom', 'pgeom_rac');
model.result.dataset('ray1').set('rgeomspec', 'fromphysics');
model.result.dataset('ray1').set('physicsinterface', 'rac');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'ray1');
model.result('pg1').setIndex('looplevel', 2, 0);
model.result('pg1').setIndex('looplevel', 7, 1);
model.result('pg1').label('Ray Trajectories (rac)');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').create('rtrj1', 'RayTrajectories');
model.result('pg1').feature('rtrj1').set('linetype', 'line');
model.result('pg1').feature('rtrj1').create('col1', 'Color');
model.result('pg1').feature('rtrj1').feature('col1').set('expr', 'rac.I');
model.result('pg1').feature('rtrj1').create('filt1', 'RayTrajectoriesFilter');
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 'interp', 0);
model.result('pg1').set('interp', {'10[ms]'});
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('rtrj1').set('linetype', 'none');
model.result('pg1').feature('rtrj1').set('pointtype', 'point');
model.result('pg1').run;
model.result('pg1').feature('rtrj1').feature('col1').set('expr', 'rac.Lp');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').set('interp', {'20[ms]'});
model.result('pg1').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').set('looplevelinput', 'interp');
model.result.export('anim1').set('interp', 'range(3[ms],1[ms],50[ms])');
model.result.export('anim1').set('maxframes', 48);
model.result.export('anim1').run;
model.result.setOnlyPlotWhenRequested(true);
model.result.dataset.create('re1', 'Receiver3D');
model.result.dataset('re1').set('extrasteps', 'all');
model.result.dataset('re1').label('Receiver 3D - All Bands');
model.result.dataset('re1').set('receiverselection', 'comp1.rac.rec1');
model.result.dataset.duplicate('re2', 're1');
model.result.dataset('re2').label('Receiver 3D - 125 Hz Band');
model.result.dataset('re2').setIndex('looplevelinput', 'manual', 1);
model.result.dataset('re2').setIndex('looplevel', [1], 1);
model.result.dataset.duplicate('re3', 're2');
model.result.dataset('re3').label('Receiver 3D - 8 kHz Band');
model.result.dataset('re3').setIndex('looplevel', [7], 1);
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').label('Impulse Response');
model.result('pg2').set('data', 're1');
model.result('pg2').create('imp1', 'ImpulseResponse');
model.result('pg2').feature('imp1').set('markerpos', 'datapoints');
model.result('pg2').feature('imp1').set('linewidth', 'preference');
model.result('pg2').feature('imp1').set('zeropadding', 22050);
model.result('pg2').feature('imp1').set('ripplefactor', 0.001);
model.result('pg2').run;
model.result.export.create('plot1', 'pg2', 'imp1', 'Plot');
model.result.export('plot1').set('exporttype', 'wav');
model.result.export('plot1').set('filename', 'small_concert_hall_impulse_response.wav');
model.result.export('plot1').set('quantlevel', '16bit');
model.result('pg2').feature('imp1').create('enyd1', 'EnergyDecay');
model.result('pg2').feature('imp1').feature('enyd1').set('bandtype', 'indiband');
model.result('pg2').feature('imp1').feature('enyd1').set('bandfreq', 'All');
model.result('pg2').feature('imp1').feature('enyd1').set('plot', 'leveldecay');
model.result('pg2').feature('imp1').feature('enyd1').set('c50', false);
model.result('pg2').feature('imp1').feature('enyd1').set('tr', false);
model.result('pg2').feature('imp1').feature('enyd1').set('snr', false);
model.result('pg2').feature('imp1').set('legend', true);
model.result('pg2').run;

model.func.create('int4', 'Interpolation');
model.func('int4').set('source', 'file');
model.func('int4').set('filename', 'small_concert_hall_impulse_response.wav');
model.func('int4').setIndex('funcs', 'IR_import', 0, 0);
model.func('int4').setIndex('fununit', 'Pa', 0);
model.func('int4').setIndex('argunit', 's', 0);

model.sol('sol1').updateSolution;
model.sol('sol2').updateSolution;

model.result.duplicate('pg3', 'pg2');
model.result('pg3').feature('imp1').feature('enyd1').active(false);
model.result('pg3').label('Impulse Response FFT');
model.result('pg3').set('xlog', true);
model.result('pg3').set('showlegends', false);
model.result('pg3').feature('imp1').set('source', 'function');
model.result('pg3').feature('imp1').set('function', 'int4');
model.result('pg3').feature('imp1').set('funcexpr', 'IR_import(t)');
model.result('pg3').feature('imp1').set('transform', 'fourier');
model.result('pg3').feature('imp1').set('fouriershow', 'spectrum');
model.result('pg3').feature('imp1').set('scale', 'multiplyperiod');
model.result('pg3').feature('imp1').set('freqrangeactive', true);
model.result('pg3').feature('imp1').set('freqmin', 100);
model.result('pg3').feature('imp1').set('freqmax', 10000);
model.result('pg3').feature('imp1').set('indb', true);
model.result('pg3').feature('imp1').set('dbtype', '20log');
model.result('pg3').feature('imp1').set('dbref', 'manual');
model.result('pg3').feature('imp1').set('dbmanualref', '20e-6');
model.result('pg3').run;
model.result('pg3').feature('imp1').set('movingaverage', true);
model.result('pg3').feature('imp1').set('smoothtype', 'octave');
model.result('pg3').feature('imp1').set('noctave', 3);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Seats SPL');
model.result('pg4').set('data', 'dset2');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'rac.wall8.spl1.Lp');
model.result('pg4').feature('surf1').set('descr', 'Sound pressure level');
model.result('pg4').feature('surf1').set('unit', 'dB');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').label('Reflectogram');
model.result('pg5').set('titletype', 'label');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 't (s)');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'log10(Power)');
model.result('pg5').set('data', 'none');
model.result('pg5').set('ylog', true);
model.result('pg5').create('rtp1', 'Ray1D');
model.result('pg5').feature('rtp1').set('markerpos', 'datapoints');
model.result('pg5').feature('rtp1').set('linewidth', 'preference');
model.result('pg5').feature('rtp1').set('data', 're2');
model.result('pg5').feature('rtp1').set('expr', 're1dist*rac.Q/re1vol');
model.result('pg5').feature('rtp1').set('linestyle', 'none');
model.result('pg5').feature('rtp1').set('linemarker', 'point');
model.result('pg5').feature('rtp1').set('legendmethod', 'manual');
model.result('pg5').feature('rtp1').set('legend', true);
model.result('pg5').feature('rtp1').setIndex('legends', 'f<sub>c</sub> = 125 Hz', 0);
model.result('pg5').feature.duplicate('rtp2', 'rtp1');
model.result('pg5').feature('rtp2').set('data', 're3');
model.result('pg5').feature('rtp2').setIndex('legends', 'f<sub>c</sub> = 8000 Hz', 0);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').label('T60 - Estimates and Model');
model.result('pg6').set('data', 'dset2');
model.result('pg6').setIndex('looplevelinput', 'first', 0);
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'f<sub>c</sub> (Hz)');
model.result('pg6').set('axislimits', true);
model.result('pg6').set('xmin', 120);
model.result('pg6').set('xmax', 8322);
model.result('pg6').set('ymin', 0);
model.result('pg6').set('ymax', 1.6);
model.result('pg6').set('xlog', true);
model.result('pg6').set('legendpos', 'lowerleft');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').setIndex('expr', 'T60_S', 0);
model.result('pg6').feature('glob1').setIndex('unit', 's', 0);
model.result('pg6').feature('glob1').setIndex('descr', 'Reverberation time (Sabine)', 0);
model.result('pg6').feature('glob1').setIndex('expr', 'T60_Sna', 1);
model.result('pg6').feature('glob1').setIndex('unit', 's', 1);
model.result('pg6').feature('glob1').setIndex('descr', 'Reverberation time (Sabine, no air absorption)', 1);
model.result('pg6').feature('glob1').setIndex('expr', 'T60_E', 2);
model.result('pg6').feature('glob1').setIndex('unit', 's', 2);
model.result('pg6').feature('glob1').setIndex('descr', 'Reverberation time (Eyring)', 2);
model.result('pg6').feature('glob1').set('xdatasolnumtype', 'level2');
model.result('pg6').feature('glob1').set('linemarker', 'star');
model.result('pg6').create('tblp1', 'Table');
model.result('pg6').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg6').feature('tblp1').set('linewidth', 'preference');
model.result('pg6').feature('tblp1').set('xaxisdata', 1);
model.result('pg6').feature('tblp1').set('plotcolumninput', 'manual');
model.result('pg6').feature('tblp1').set('plotcolumns', [8]);
model.result('pg6').feature('tblp1').set('linemarker', 'circle');
model.result('pg6').feature('tblp1').set('legend', true);
model.result('pg6').feature('tblp1').set('legendsuffix', ' - Ray acoustics');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').label('Definition');
model.result('pg7').set('data', 'dset2');
model.result('pg7').setIndex('looplevelinput', 'first', 0);
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', 'f<sub>c</sub> (Hz)');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'D (%)');
model.result('pg7').set('axislimits', true);
model.result('pg7').set('xmin', 120);
model.result('pg7').set('xmax', 8322);
model.result('pg7').set('ymin', 0);
model.result('pg7').set('ymax', 100);
model.result('pg7').set('xlog', true);
model.result('pg7').set('legendpos', 'upperleft');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').setIndex('expr', 'D', 0);
model.result('pg7').feature('glob1').setIndex('unit', 's', 0);
model.result('pg7').feature('glob1').setIndex('descr', 'Definition estimate', 0);
model.result('pg7').feature('glob1').set('xdatasolnumtype', 'level2');
model.result('pg7').feature('glob1').set('linemarker', 'star');
model.result('pg7').create('tblp1', 'Table');
model.result('pg7').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg7').feature('tblp1').set('linewidth', 'preference');
model.result('pg7').feature('tblp1').set('xaxisdata', 1);
model.result('pg7').feature('tblp1').set('plotcolumninput', 'manual');
model.result('pg7').feature('tblp1').set('plotcolumns', [2]);
model.result('pg7').feature('tblp1').set('linemarker', 'circle');
model.result('pg7').feature('tblp1').set('legend', true);
model.result('pg7').feature('tblp1').set('legendsuffix', ' - Ray acoustics');
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').label('Clarity');
model.result('pg8').set('ylabel', 'C80 (dB)');
model.result('pg8').set('xmin', 120);
model.result('pg8').set('xmax', 8322);
model.result('pg8').set('ymin', -1);
model.result('pg8').set('ymax', 9);
model.result('pg8').feature('glob1').setIndex('expr', 'C80', 0);
model.result('pg8').feature('glob1').setIndex('unit', '', 0);
model.result('pg8').feature('glob1').setIndex('descr', 'Clarity 80 estimate', 0);
model.result('pg8').feature('tblp1').set('plotcolumns', [3]);
model.result('pg8').run;
model.result.duplicate('pg9', 'pg8');
model.result('pg9').label('Center Time');
model.result('pg9').set('ylabel', 'ts (s)');
model.result('pg9').set('xmin', 120);
model.result('pg9').set('xmax', 8322);
model.result('pg9').set('ymin', 0);
model.result('pg9').set('ymax', 0.2);
model.result('pg9').set('legendpos', 'lowerleft');
model.result('pg9').feature('glob1').setIndex('expr', 'ts', 0);
model.result('pg9').feature('glob1').setIndex('unit', '', 0);
model.result('pg9').feature('glob1').setIndex('descr', 'Center time estimate', 0);
model.result('pg9').feature('tblp1').set('plotcolumns', [4]);
model.result('pg9').run;
model.result.duplicate('pg10', 'pg9');
model.result('pg10').label('Reverberation Times');
model.result('pg10').set('ylabel', 'RT (s)');
model.result('pg10').set('xmin', 120);
model.result('pg10').set('xmax', 8322);
model.result('pg10').set('ymax', 1.6);
model.result('pg10').feature.remove('glob1');
model.result('pg10').feature('tblp1').set('plotcolumns', [5 6 7 8]);
model.result('pg10').run;
model.result.duplicate('pg11', 'pg10');
model.result('pg11').label('Speech Transmission Index');
model.result('pg11').set('ylabel', 'STI (1)');
model.result('pg11').set('xmin', 120);
model.result('pg11').set('xmax', 8322);
model.result('pg11').set('ymax', 1);
model.result('pg11').set('legendpos', 'upperleft');
model.result('pg11').feature('tblp1').set('plotcolumns', [9]);
model.result('pg11').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').placeAfter('plotgroup', 'pg6');
model.nodeGroup('grp1').add('plotgroup', 'pg7');
model.nodeGroup('grp1').add('plotgroup', 'pg8');
model.nodeGroup('grp1').add('plotgroup', 'pg9');
model.nodeGroup('grp1').add('plotgroup', 'pg10');
model.nodeGroup('grp1').add('plotgroup', 'pg11');
model.nodeGroup('grp1').label('Objective Quality Metric Plots');

model.study.create('std2');
model.study('std2').create('rtrac', 'RayTracing');
model.study('std2').feature('rtrac').setSolveFor('/physics/rac', true);
model.study('std2').label('Study 2 - Directional Loudspeaker');
model.study('std2').feature('rtrac').set('tunit', 's');
model.study('std2').feature('rtrac').set('tlist', '0 1.6');
model.study('std2').feature('rtrac').set('useadvanceddisable', true);
model.study('std2').feature('rtrac').set('disabledphysics', {'rac/swd1'});
model.study('std2').create('param', 'Parametric');
model.study('std2').feature('param').setIndex('pname', 'alpha0', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'rad', 0);
model.study('std2').feature('param').setIndex('pname', 'alpha0', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'rad', 0);
model.study('std2').feature('param').setIndex('pname', 'f0', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'Hz', 0);
model.study('std2').feature('param').setIndex('plistarr', '{63, 125, 250, 500, 1e3, 2e3, 4e3}', 0);

model.sol.create('sol10');
model.sol('sol10').study('std2');
model.sol('sol10').create('st1', 'StudyStep');
model.sol('sol10').feature('st1').set('study', 'std2');
model.sol('sol10').feature('st1').set('studystep', 'rtrac');
model.sol('sol10').create('v1', 'Variables');
model.sol('sol10').feature('v1').set('control', 'rtrac');
model.sol('sol10').create('t1', 'Time');
model.sol('sol10').feature('t1').set('tlist', '0 1.6');
model.sol('sol10').feature('t1').set('plot', 'off');
model.sol('sol10').feature('t1').set('plotgroup', 'pg1');
model.sol('sol10').feature('t1').set('plotfreq', 'tout');
model.sol('sol10').feature('t1').set('probesel', 'all');
model.sol('sol10').feature('t1').set('probes', {});
model.sol('sol10').feature('t1').set('probefreq', 'tsteps');
model.sol('sol10').feature('t1').set('rtol', 1.0E-5);
model.sol('sol10').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol10').feature('t1').set('reacf', false);
model.sol('sol10').feature('t1').set('storeudot', false);
model.sol('sol10').feature('t1').set('tstepsgenalpha', 'strict');
model.sol('sol10').feature('t1').set('endtimeinterpolation', true);
model.sol('sol10').feature('t1').set('timemethod', 'genalpha');
model.sol('sol10').feature('t1').set('estrat', 'exclude');
model.sol('sol10').feature('t1').set('control', 'rtrac');
model.sol('sol10').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol10').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol10').feature('t1').create('i1', 'Iterative');
model.sol('sol10').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol10').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol10').feature('t1').feature('fc1').set('linsolver', 'i1');
model.sol('sol10').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol10').feature('t1').feature.remove('fcDef');
model.sol('sol10').attach('std2');

model.batch.create('p2', 'Parametric');
model.batch('p2').study('std2');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol10');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').set('pname', {'f0'});
model.batch('p2').set('plistarr', {'{63, 125, 250, 500, 1e3, 2e3, 4e3}'});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std2');
model.batch('p2').set('control', 'param');

model.sol.create('sol11');
model.sol('sol11').study('std2');
model.sol('sol11').label('Parametric Solutions 2');

model.batch('p2').feature('so1').set('psol', 'sol11');
model.batch('p2').run('compute');

model.result.dataset.create('ray2', 'Ray');
model.result.dataset('ray2').set('solution', 'sol11');
model.result.dataset('ray2').set('posdof', {'comp1.qx' 'comp1.qy' 'comp1.qz'});
model.result.dataset('ray2').set('geom', 'geom1');
model.result.dataset('ray2').set('rgeom', 'pgeom_rac');
model.result.dataset('ray2').set('rgeomspec', 'fromphysics');
model.result.dataset('ray2').set('physicsinterface', 'rac');
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').set('data', 'ray2');
model.result('pg12').setIndex('looplevel', 2, 0);
model.result('pg12').setIndex('looplevel', 7, 1);
model.result('pg12').label('Ray Trajectories (rac) 1');
model.result('pg12').set('showlegendsunit', true);
model.result('pg12').create('rtrj1', 'RayTrajectories');
model.result('pg12').feature('rtrj1').set('linetype', 'line');
model.result('pg12').feature('rtrj1').create('col1', 'Color');
model.result('pg12').feature('rtrj1').feature('col1').set('expr', 'rac.I');
model.result('pg12').feature('rtrj1').create('filt1', 'RayTrajectoriesFilter');
model.result('pg12').set('boxlengths', [11.000000000000002 10.000000000000002 7.460579422167753]);
model.result('pg12').feature('rtrj1').set('sphereradiusscale', 1);
model.result('pg12').feature('rtrj1').set('sphereradiusscaleactive', false);
model.result('pg12').feature('rtrj1').set('tailscale', 1);
model.result('pg12').feature('rtrj1').set('tailscaleactive', false);
model.result('pg12').feature('rtrj1').set('arrowscale', 0);
model.result('pg12').feature('rtrj1').set('arrowscaleactive', false);
model.result('pg12').feature('rtrj1').set('ellipsearrowscale', 1);
model.result('pg12').feature('rtrj1').set('ellipsearrowscaleactive', false);
model.result('pg12').feature('rtrj1').feature('col1').set('rangeunit', 'W/m^2');
model.result('pg12').feature('rtrj1').feature('col1').set('rangecolormin', 3.581521500766592E-32);
model.result('pg12').feature('rtrj1').feature('col1').set('rangecolormax', 5.302986349005285E9);
model.result('pg12').feature('rtrj1').feature('col1').set('rangecoloractive', 'off');
model.result('pg12').feature('rtrj1').feature('col1').set('rangeactualminmax', [3.581521500766592E-32 5.302986349005285E9]);
model.result('pg12').feature('rtrj1').feature('col1').set('rangeisshared', false);
model.result('pg12').feature('rtrj1').feature('col1').set('rangedatamin', 3.581521500766592E-32);
model.result('pg12').feature('rtrj1').feature('col1').set('rangedatamax', 5.302986349005285E9);
model.result('pg12').feature('rtrj1').feature('col1').set('rangedataactive', 'off');
model.result('pg12').feature('rtrj1').set('renderinfo', '1 Edge3D 1 1 4 1 Color');
model.result('pg12').feature('rtrj1').set('boxlengths', [18.801986123340583 32.993615141122014 9.114407561862777]);
model.result('pg12').setIndex('looplevel', 'interp', 0);
model.result('pg12').set('interp', {'1[ms]'});
model.result('pg12').feature('rtrj1').set('linetype', 'none');
model.result('pg12').feature('rtrj1').set('pointtype', 'point');
model.result('pg12').feature('rtrj1').feature('col1').set('expr', 'rac.Lp');
model.result('pg12').run;
model.result.create('pg13', 'PlotGroup3D');
model.result('pg13').label('Loudspeaker Orientation');
model.result('pg13').set('data', 'dset3');
model.result('pg13').selection.geom('geom1', 0);
model.result('pg13').selection.set([11]);
model.result('pg13').create('sysp1', 'CoordSysPoint');
model.result('pg13').feature('sysp1').set('sys', 'sys2');
model.result('pg13').feature('sysp1').set('scaleactive', true);
model.result('pg13').feature('sysp1').set('scale', 2);
model.result('pg13').run;
model.result.duplicate('pg14', 'pg4');
model.result('pg14').set('data', 'dset4');
model.result('pg14').run;

model.title('Small Concert Hall Acoustics');

model.description(['Designing structures and open spaces with respect to sound quality is important for concert halls, outdoor environments, and even the rooms of a house. Simulating acoustics in the high-frequency limit, where the wavelength is smaller than the geometrical features, is best done with ray acoustics.' newline  newline 'This tutorial model shows the basic steps and principles used when setting up a model using the Ray Acoustics physics interface. In the model, the acoustics of a small concert hall is analyzed. The model setup includes an omnidirectional sound source, wall boundary conditions for specular and diffuse scattering, sound pressure evaluation, a receiver dataset used for an impulse response plot, and an energy reflectogram. The results are compared to simple reverberation time estimates.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;

model.label('small_concert_hall.mph');

model.modelNode.label('Components');

out = model;
