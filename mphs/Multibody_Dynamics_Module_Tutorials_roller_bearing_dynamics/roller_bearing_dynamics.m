function out = model
%
% roller_bearing_dynamics.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/mbd', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('d_out', '100[mm]', 'Outside diameter');
model.param.set('db', '56[mm]', 'Bore diameter');
model.param.set('cl', '0.125[mm]', 'Clearance');
model.param.set('th', '5[mm]-cl', 'Thickness');
model.param.set('ro', 'd_out/2-th', 'Outer race, inside radius');
model.param.set('ri', 'db/2+th', 'Inner race, outside radius');
model.param.set('rr', '6[mm]', 'Roller radius');
model.param.set('fp', '1/10000', 'Penalty factor multiplier');
model.param.set('mu', '0.1', 'Friction coefficient');
model.param.set('load', '100[N]', 'Bearing load');
model.param.set('rpm', '5000', 'Inner race RPM');
model.param.set('omega', '2*pi[rad]*rpm/60[s]', 'Inner race angular speed');
model.param.set('T', '2*pi/omega', 'Inner race time period');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'roller_bearing_dynamics.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').label('Cage');
model.geom('geom1').feature('sel1').selection('selection').set('imp1(2)', 1);
model.geom('geom1').feature('sel1').set('color', '18');
model.geom('geom1').run('sel1');
model.geom('geom1').create('sel2', 'ExplicitSelection');
model.geom('geom1').feature('sel2').label('Races');
model.geom('geom1').feature('sel2').selection('selection').set('imp1(1)', 1);
model.geom('geom1').feature('sel2').selection('selection').set('imp1(15)', [1 2 3 4]);
model.geom('geom1').feature('sel2').set('color', 'custom');
model.geom('geom1').feature('sel2').set('customcolor', [0.501960813999176 0.501960813999176 0.501960813999176]);
model.geom('geom1').run('sel2');
model.geom('geom1').create('comsel1', 'ComplementSelection');
model.geom('geom1').feature('comsel1').label('Rollers');
model.geom('geom1').feature('comsel1').set('input', {'sel1' 'sel2'});
model.geom('geom1').feature('comsel1').set('color', '3');
model.geom('geom1').run('comsel1');
model.geom('geom1').create('unisel1', 'UnionSelection');
model.geom('geom1').feature('unisel1').label('Cage & Rollers');
model.geom('geom1').feature('unisel1').set('input', {'sel1' 'comsel1'});
model.geom('geom1').run('unisel1');
model.geom('geom1').create('adjsel1', 'AdjacentSelection');
model.geom('geom1').feature('adjsel1').label('Cage & Rollers Boundaries');
model.geom('geom1').feature('adjsel1').set('input', {'unisel1'});
model.geom('geom1').run('adjsel1');
model.geom('geom1').create('sel3', 'ExplicitSelection');
model.geom('geom1').feature('sel3').label('Outer Race');
model.geom('geom1').feature('sel3').selection('selection').set('imp1(15)', [1 2 3 4]);
model.geom('geom1').run('sel3');
model.geom('geom1').create('adjsel2', 'AdjacentSelection');
model.geom('geom1').feature('adjsel2').label('Outer Race Boundaries');
model.geom('geom1').feature('adjsel2').set('input', {'sel3'});
model.geom('geom1').feature('adjsel2').set('interior', true);
model.geom('geom1').run('adjsel2');
model.geom('geom1').create('comsel2', 'ComplementSelection');
model.geom('geom1').feature('comsel2').label('Boundaries without Outer Race');
model.geom('geom1').feature('comsel2').set('entitydim', 2);
model.geom('geom1').feature('comsel2').set('input', {'adjsel2'});
model.geom('geom1').run('comsel2');
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').run('fin');

model.view('view1').hideObjects.create('hide1');
model.view('view1').hideObjects('hide1').init(3);
model.view('view1').hideObjects('hide1').add('fin', [1]);

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('Fnx', 'try_catch(mbd.Fnx_rbc13,0)+try_catch(mbd.Fnx_rbc14,0)+try_catch(mbd.Fnx_rbc15,0)+try_catch(mbd.Fnx_rbc16,0)+try_catch(mbd.Fnx_rbc17,0)+try_catch(mbd.Fnx_rbc18,0)+try_catch(mbd.Fnx_rbc19,0)+try_catch(mbd.Fnx_rbc20,0)+try_catch(mbd.Fnx_rbc21,0)+try_catch(mbd.Fnx_rbc22,0)+try_catch(mbd.Fnx_rbc23,0)+try_catch(mbd.Fnx_rbc24,0)', 'Contact force, x-component');
model.variable('var1').set('Fny', 'try_catch(mbd.Fny_rbc13,0)+try_catch(mbd.Fny_rbc14,0)+try_catch(mbd.Fny_rbc15,0)+try_catch(mbd.Fny_rbc16,0)+try_catch(mbd.Fny_rbc17,0)+try_catch(mbd.Fny_rbc18,0)+try_catch(mbd.Fny_rbc19,0)+try_catch(mbd.Fny_rbc20,0)+try_catch(mbd.Fny_rbc21,0)+try_catch(mbd.Fny_rbc22,0)+try_catch(mbd.Fny_rbc23,0)+try_catch(mbd.Fny_rbc24,0)', 'Contact force, y-component');
model.variable('var1').set('Fnz', 'try_catch(mbd.Fnz_rbc13,0)+try_catch(mbd.Fnz_rbc14,0)+try_catch(mbd.Fnz_rbc15,0)+try_catch(mbd.Fnz_rbc16,0)+try_catch(mbd.Fnz_rbc17,0)+try_catch(mbd.Fnz_rbc18,0)+try_catch(mbd.Fnz_rbc19,0)+try_catch(mbd.Fnz_rbc20,0)+try_catch(mbd.Fnz_rbc21,0)+try_catch(mbd.Fnz_rbc22,0)+try_catch(mbd.Fnz_rbc23,0)+try_catch(mbd.Fnz_rbc24,0)', 'Contact force, z-component');

model.func.create('rm1', 'Ramp');
model.func('rm1').model('comp1');
model.func('rm1').set('location', '0[s]');
model.func('rm1').set('slope', 1000);
model.func('rm1').set('cutoffactive', true);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.physics('mbd').prop('AutoModeling').runCommand('createRigidDomains');
model.physics('mbd').feature('rd1').label('Rigid Material 1: Outer Race');
model.physics('mbd').feature('rd1').create('fix1', 'FixedConstraint', -1);
model.physics('mbd').feature('rd3').label('Rigid Material 3: Cage');
model.physics('mbd').feature('rd3').create('pdr1', 'PrescribedDispRot', -1);
model.physics('mbd').feature('rd3').feature('pdr1').setIndex('Direction', true, 1);
model.physics('mbd').feature('rd3').feature('pdr1').set('RotationType', 'ConstrainedRotationGroup');
model.physics('mbd').feature('rd3').feature('pdr1').setIndex('ConstrainedRotation', true, 0);
model.physics('mbd').feature('rd3').feature('pdr1').setIndex('ConstrainedRotation', true, 2);
model.physics('mbd').feature('rd6').label('Rigid Material 6: Inner Race');
model.physics('mbd').feature('rd6').create('pdr1', 'PrescribedDispRot', -1);
model.physics('mbd').feature('rd6').feature('pdr1').setIndex('Direction', true, 1);
model.physics('mbd').feature('rd6').feature('pdr1').set('RotationType', 'PrescribedRotationGroup');
model.physics('mbd').feature('rd6').feature('pdr1').set('Omega', [0 1 0]);
model.physics('mbd').feature('rd6').feature('pdr1').set('phi0', 'omega*t');
model.physics('mbd').feature('rd6').create('af1', 'AppliedForce', -1);
model.physics('mbd').feature('rd6').feature('af1').set('Ft', {'0' '0' '-load*rm1(t)'});
model.physics('mbd').prop('AutoModeling').runCommand('createJoints');
model.physics('mbd').create('rbc1', 'RigidBodyContact', -1);
model.physics('mbd').feature('rbc1').set('Source', 'rd2');
model.physics('mbd').feature('rbc1').set('ShapeParaSource', 'UserDefined');
model.physics('mbd').feature('rbc1').set('rs', 'rr');
model.physics('mbd').feature('rbc1').set('SourcePoint', 'CentroidOfSource');
model.physics('mbd').feature('rbc1').set('Destination', 'rd1');
model.physics('mbd').feature('rbc1').set('ShapeParaDest', 'UserDefined');
model.physics('mbd').feature('rbc1').set('rd', 'ro');
model.physics('mbd').feature('rbc1').set('DestinationPoint', 'CentroidOfDestination');
model.physics('mbd').feature('rbc1').set('DestInside', true);
model.physics('mbd').feature('rbc1').set('fp', 'fp');
model.physics('mbd').feature('rbc1').set('taun', '1[ms]*10');
model.physics('mbd').feature('rbc1').create('fric1', 'Friction', -1);
model.physics('mbd').feature('rbc1').feature('fric1').set('mu', 'mu');
model.physics('mbd').feature('rbc1').feature('fric1').set('v0', 'mbd.diag*1e-3[1/s]*10');
model.physics('mbd').feature.duplicate('rbc2', 'rbc1');
model.physics('mbd').feature('rbc2').set('Source', 'rd4');
model.physics('mbd').feature.duplicate('rbc3', 'rbc2');
model.physics('mbd').feature('rbc3').set('Source', 'rd5');
model.physics('mbd').feature.duplicate('rbc4', 'rbc3');
model.physics('mbd').feature('rbc4').set('Source', 'rd7');
model.physics('mbd').feature.duplicate('rbc5', 'rbc4');
model.physics('mbd').feature('rbc5').set('Source', 'rd8');
model.physics('mbd').feature.duplicate('rbc6', 'rbc5');
model.physics('mbd').feature('rbc6').set('Source', 'rd9');
model.physics('mbd').feature.duplicate('rbc7', 'rbc6');
model.physics('mbd').feature('rbc7').set('Source', 'rd10');
model.physics('mbd').feature.duplicate('rbc8', 'rbc7');
model.physics('mbd').feature('rbc8').set('Source', 'rd11');
model.physics('mbd').feature.duplicate('rbc9', 'rbc8');
model.physics('mbd').feature('rbc9').set('Source', 'rd12');
model.physics('mbd').feature.duplicate('rbc10', 'rbc9');
model.physics('mbd').feature('rbc10').set('Source', 'rd13');
model.physics('mbd').feature.duplicate('rbc11', 'rbc10');
model.physics('mbd').feature('rbc11').set('Source', 'rd14');
model.physics('mbd').feature.duplicate('rbc12', 'rbc11');
model.physics('mbd').feature('rbc12').set('Source', 'rd15');

model.nodeGroup.create('grp3', 'Physics', 'mbd');
model.nodeGroup('grp3').placeAfter('init1');
model.nodeGroup('grp3').add('rbc1');
model.nodeGroup('grp3').add('rbc2');
model.nodeGroup('grp3').add('rbc3');
model.nodeGroup('grp3').add('rbc4');
model.nodeGroup('grp3').add('rbc5');
model.nodeGroup('grp3').add('rbc6');
model.nodeGroup('grp3').add('rbc7');
model.nodeGroup('grp3').add('rbc8');
model.nodeGroup('grp3').add('rbc9');
model.nodeGroup('grp3').add('rbc10');
model.nodeGroup('grp3').add('rbc11');
model.nodeGroup('grp3').add('rbc12');
model.nodeGroup('grp3').label('Roller-Outer Race Contact');
model.nodeGroup.duplicate('grp4', 'grp3');
model.nodeGroup('grp4').label('Roller-Inner Race Contact');

model.physics('mbd').feature('rbc13').set('Destination', 'rd6');
model.physics('mbd').feature('rbc13').set('DestInside', false);
model.physics('mbd').feature('rbc13').set('rd', 'ri');
model.physics('mbd').feature('rbc14').set('rd', 'ri');
model.physics('mbd').feature('rbc14').set('DestInside', false);
model.physics('mbd').feature('rbc14').set('Destination', 'rd6');
model.physics('mbd').feature('rbc15').set('Destination', 'rd6');
model.physics('mbd').feature('rbc15').set('rd', 'ri');
model.physics('mbd').feature('rbc15').set('DestInside', false);
model.physics('mbd').feature('rbc16').set('Destination', 'rd6');
model.physics('mbd').feature('rbc16').set('rd', 'ri');
model.physics('mbd').feature('rbc16').set('DestInside', false);
model.physics('mbd').feature('rbc17').set('Destination', 'rd6');
model.physics('mbd').feature('rbc17').set('DestInside', false);
model.physics('mbd').feature('rbc17').set('rd', 'ri');
model.physics('mbd').feature('rbc18').set('Destination', 'rd6');
model.physics('mbd').feature('rbc18').set('rd', 'ri');
model.physics('mbd').feature('rbc18').set('DestInside', false);
model.physics('mbd').feature('rbc19').set('Destination', 'rd6');
model.physics('mbd').feature('rbc19').set('rd', 'ri');
model.physics('mbd').feature('rbc19').set('DestInside', false);
model.physics('mbd').feature('rbc20').set('Destination', 'rd6');
model.physics('mbd').feature('rbc20').set('rd', 'ri');
model.physics('mbd').feature('rbc20').set('DestInside', false);
model.physics('mbd').feature('rbc21').set('rd', 'ri');
model.physics('mbd').feature('rbc21').set('Destination', 'rd6');
model.physics('mbd').feature('rbc21').set('DestInside', false);
model.physics('mbd').feature('rbc22').set('Destination', 'rd6');
model.physics('mbd').feature('rbc22').set('rd', 'ri');
model.physics('mbd').feature('rbc22').set('DestInside', false);
model.physics('mbd').feature('rbc23').set('Destination', 'rd6');
model.physics('mbd').feature('rbc23').set('rd', 'ri');
model.physics('mbd').feature('rbc23').set('DestInside', false);
model.physics('mbd').feature('rbc24').set('Destination', 'rd6');
model.physics('mbd').feature('rbc24').set('rd', 'ri');
model.physics('mbd').feature('rbc24').set('DestInside', false);
model.physics('mbd').prop('Results').set('ReferenceFrame', 'rd3');

model.mesh('mesh1').autoMeshSize(3);
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tlist', 'range(0,T/500,5*T)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.0014282856857085707');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.14282856857085707');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,T/500,5*T)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol1').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Displacement (mbd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 2501, 0);
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (mbd)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 2501, 0);
model.result('pg2').set('defaultPlotID', 'velocity');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').label('Volume');
model.result('pg2').feature('vol1').set('expr', 'mod(dom,10)');
model.result('pg2').feature('vol1').set('unit', '1');
model.result('pg2').feature('vol1').set('colortable', 'Cyclic');
model.result('pg2').feature('vol1').set('colorlegend', false);
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg2').feature('vol1').feature.create('def1', 'Deform');
model.result('pg2').feature('vol1').feature('def1').label('Deformation');
model.result('pg2').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg2').feature.create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').label('Arrow Line');
model.result('pg2').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY' 'mbd.u_tZ'});
model.result('pg2').feature('arwl1').set('placement', 'elements');
model.result('pg2').feature('arwl1').set('data', 'parent');
model.result('pg2').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg2').feature('arwl1').feature('def1').label('Deformation');
model.result('pg2').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg1').run;

model.view('view1').set('showgrid', false);

model.result('pg1').run;
model.result('pg1').set('inherithide', true);
model.result('pg1').run;
model.result('pg1').feature('surf1').create('sel1', 'Selection');
model.result('pg1').feature('surf1').feature('sel1').selection.named('geom1_comsel2');
model.result('pg1').run;
model.result('pg1').feature.duplicate('surf2', 'surf1');
model.result('pg1').run;
model.result('pg1').feature('surf2').set('titletype', 'none');
model.result('pg1').feature('surf2').set('coloring', 'uniform');
model.result('pg1').feature('surf2').set('color', 'gray');
model.result('pg1').feature('surf2').create('tran1', 'Transparency');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf2').feature('sel1').selection.named('geom1_adjsel2');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').label('Contact Force & Velocity');
model.result('pg2').set('view', 'new');
model.result('pg2').run;
model.result('pg2').feature.remove('arwl1');
model.result('pg2').run;
model.result('pg2').feature('vol1').set('coloring', 'uniform');
model.result('pg2').feature('vol1').set('color', 'gray');
model.result('pg2').feature('vol1').set('titletype', 'none');
model.result('pg2').feature('vol1').create('tran1', 'Transparency');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('vol1').create('sel1', 'Selection');
model.result('pg2').feature('vol1').feature('sel1').selection.named('geom1_sel2');
model.result('pg2').feature('vol1').feature('sel1').selection.set([1 4 9]);
model.result('pg2').run;
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'mbd.vel');
model.result('pg2').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg2').feature('surf1').create('def1', 'Deform');
model.result('pg2').run;
model.result('pg2').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg2').feature('surf1').feature('def1').set('scale', 1);
model.result('pg2').run;
model.result('pg2').feature('surf1').create('sel1', 'Selection');
model.result('pg2').feature('surf1').feature('sel1').selection.named('geom1_adjsel1');
model.result('pg2').run;
model.result('pg2').create('arws1', 'ArrowSurface');
model.result('pg2').feature('arws1').set('expr', {'Fnx' 'Fny' 'Fnz'});
model.result('pg2').feature('arws1').set('descractive', true);
model.result('pg2').feature('arws1').set('descr', 'Contact force (N)');
model.result('pg2').feature('arws1').set('scaleactive', true);
model.result('pg2').feature('arws1').set('scale', '5e-4');
model.result('pg2').feature('arws1').set('color', 'green');
model.result('pg2').feature('arws1').create('def1', 'Deform');
model.result('pg2').run;
model.result('pg2').feature('arws1').feature('def1').set('scaleactive', true);
model.result('pg2').feature('arws1').feature('def1').set('scale', 1);
model.result('pg2').run;
model.result('pg2').feature('arws1').create('sel1', 'Selection');
model.result('pg2').feature('arws1').feature('sel1').selection.named('geom1_adjsel1');
model.result('pg2').run;

model.view('view2').set('showgrid', false);
model.view('view2').set('locked', true);
model.view('view2').camera.set('zoomanglefull', '12.5829610824584960');
model.view('view2').camera.setIndex('position', '00', 0);
model.view('view2').camera.setIndex('position', '-0.439852386713027950', 1);
model.view('view2').camera.setIndex('position', '-0.59992319345474240', 2);
model.view('view2').camera.setIndex('target', '00', 0);
model.view('view2').camera.set('target', {'00' '0.0099999904632568360' '0'});
model.view('view2').camera.setIndex('target', '00', 2);
model.view('view2').camera.setIndex('up', '00', 0);
model.view('view2').camera.setIndex('up', '-0.80005753040313720', 1);
model.view('view2').camera.setIndex('up', '0.59992307424545290', 2);
model.view('view2').camera.setIndex('rotationpoint', '00', 0);
model.view('view2').camera.set('rotationpoint', {'00' '0.0099999997764825820' '0'});
model.view('view2').camera.setIndex('rotationpoint', '00', 2);
model.view('view2').camera.setIndex('viewoffset', '-0.0428342670202255250', 0);
model.view('view2').camera.setIndex('viewoffset', '-0.0069754384458065030', 1);

model.result('pg2').run;
model.result.duplicate('pg3', 'pg2');
model.result('pg3').run;
model.result('pg3').label('Velocity [Cage Frame]');
model.result('pg3').run;
model.result('pg3').feature('surf1').set('expr', 'mbd.vel_ref');
model.result('pg3').run;
model.result('pg3').feature.remove('arws1');
model.result('pg3').run;
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Angular Speed [Inner Race & Cage]');
model.result('pg4').set('titletype', 'label');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').setIndex('expr', 'mbd.rd6.th_ty', 0);
model.result('pg4').feature('glob1').setIndex('unit', 'rad/s', 0);
model.result('pg4').feature('glob1').setIndex('descr', 'Rigid body angular velocity, y-component', 0);
model.result('pg4').feature('glob1').setIndex('expr', 'mbd.rd3.th_ty', 1);
model.result('pg4').feature('glob1').setIndex('unit', 'rad/s', 1);
model.result('pg4').feature('glob1').setIndex('descr', 'Rigid body angular velocity, y-component', 1);
model.result('pg4').feature('glob1').set('legendmethod', 'manual');
model.result('pg4').feature('glob1').setIndex('legends', 'Inner race', 0);
model.result('pg4').feature('glob1').setIndex('legends', 'Cage', 1);
model.result('pg4').run;
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Angular Speed [Rollers]');
model.result('pg5').run;
model.result('pg5').feature('glob1').setIndex('expr', 'mbd.rd11.th_ty', 0);
model.result('pg5').feature('glob1').setIndex('unit', 'rad/s', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'Rigid body angular velocity, y-component', 0);
model.result('pg5').feature('glob1').setIndex('expr', 'mbd.rd15.th_ty', 1);
model.result('pg5').feature('glob1').setIndex('unit', 'rad/s', 1);
model.result('pg5').feature('glob1').setIndex('descr', 'Rigid body angular velocity, y-component', 1);
model.result('pg5').feature('glob1').setIndex('expr', 'mbd.rd10.th_ty', 2);
model.result('pg5').feature('glob1').setIndex('unit', 'rad/s', 2);
model.result('pg5').feature('glob1').setIndex('descr', 'Rigid body angular velocity, y-component', 2);
model.result('pg5').run;
model.result('pg5').feature('glob1').setIndex('legends', 'A', 0);
model.result('pg5').feature('glob1').setIndex('legends', 'B', 1);
model.result('pg5').feature('glob1').setIndex('legends', 'C', 2);
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Contact & Friction Force [Roller-Inner Race]');
model.result('pg6').run;
model.result('pg6').feature('glob1').set('expr', {});
model.result('pg6').feature('glob1').set('descr', {});
model.result('pg6').feature('glob1').setIndex('expr', 'mbd.rbc20.Fn', 0);
model.result('pg6').feature('glob1').setIndex('unit', 'N', 0);
model.result('pg6').feature('glob1').setIndex('expr', 'mbd.rbc20.Ff', 1);
model.result('pg6').feature('glob1').setIndex('unit', 'N', 1);
model.result('pg6').feature('glob1').set('legendmethod', 'automatic');
model.result('pg6').run;
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'Force (N)');
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Frictional Energy Dissipation Rate [Roller-Inner Race]');
model.result('pg7').run;
model.result('pg7').feature('glob1').set('expr', {});
model.result('pg7').feature('glob1').set('descr', {});
model.result('pg7').feature('glob1').setIndex('expr', 'mbd.rbc20.Qf', 0);
model.result('pg7').feature('glob1').setIndex('unit', 'W', 0);
model.result('pg7').feature('glob1').setIndex('expr', 'mbd.rbc24.Qf', 1);
model.result('pg7').feature('glob1').setIndex('unit', 'W', 1);
model.result('pg7').feature('glob1').setIndex('expr', 'mbd.rbc19.Qf', 2);
model.result('pg7').feature('glob1').setIndex('unit', 'W', 2);
model.result('pg7').feature('glob1').set('legendmethod', 'manual');
model.result('pg7').feature('glob1').setIndex('legends', 'A', 0);
model.result('pg7').feature('glob1').setIndex('legends', 'B', 1);
model.result('pg7').feature('glob1').setIndex('legends', 'C', 2);
model.result('pg7').run;
model.result('pg7').set('ylabelactive', false);
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('Inner Race Orbit');
model.result('pg8').run;
model.result('pg8').feature('glob1').set('expr', {});
model.result('pg8').feature('glob1').set('descr', {});
model.result('pg8').feature('glob1').setIndex('expr', 'mbd.rd6.w', 0);
model.result('pg8').feature('glob1').setIndex('unit', 'mm', 0);
model.result('pg8').feature('glob1').setIndex('descr', 'Rigid body displacement, z-component', 0);
model.result('pg8').feature('glob1').set('legend', false);
model.result('pg8').feature('glob1').set('xdata', 'expr');
model.result('pg8').feature('glob1').set('xdataexpr', 'mbd.rd6.u');
model.result('pg8').feature('glob1').set('xdataunit', 'mm');
model.result('pg8').run;
model.result('pg8').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').label('Displacement (mbd)');
model.result.export('anim1').set('maxframes', 100);
model.result.export.duplicate('anim2', 'anim1');
model.result.export('anim2').showFrame;
model.result.export('anim2').label('Contact Force & Velocity');
model.result.export('anim2').set('plotgroup', 'pg2');
model.result.export.duplicate('anim3', 'anim2');
model.result.export('anim3').showFrame;
model.result.export('anim3').label('Velocity [Cage Frame]');
model.result.export('anim3').set('plotgroup', 'pg3');
model.result('pg2').run;

model.title('Dynamics of a Cylindrical Roller Bearing');

model.description(['This model simulates the dynamics of a cylindrical roller bearing system. The system consists of cylindrical roller elements inserted between the inner and outer races and held in position by the cage. All the components of the system are assumed rigid. The inner race is assumed to be connected with a shaft rotating at the prescribed speed and the outer race is assumed to be connected with the fixed foundation.' newline  newline 'The frictional contact is modeled between the rollers and races using rigid body contact with friction. The connection between the rollers and cage is simplified using hinge joints. An external load is applied on the inner race and a transient study is performed to analyze the lateral dynamics of inner race, dynamics of rollers and cage, contact and friction forces, and energy dissipation due to friction.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('roller_bearing_dynamics.mph');

model.modelNode.label('Components');

out = model;
