function out = model
%
% wilkinson_power_divider.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/RF_Module/Couplers_and_Power_Dividers');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('emw', 'ElectromagneticWaves', 'geom1');
model.physics('emw').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('solnum', 'auto');
model.study('std1').feature('freq').set('notsolnum', 'auto');
model.study('std1').feature('freq').set('outputmap', {});
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').setSolveFor('/physics/emw', true);

model.geom('geom1').run;

model.study('std1').feature('freq').set('plist', 'range(2[GHz],0.1[GHz],4[GHz])');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('r_ring', '8.5[mm]', 'Radius, microstrip line ring');
model.param.set('w_subs', '30[mm]', 'Width, substrate');
model.param.set('l_subs', '26[mm]', 'Length, substrate');
model.param.set('r_inner', '0.635[mm]', 'Radius, coax inner');
model.param.set('r_outer', '2.05[mm]', 'Radius, coax outer');
model.param.set('l_sma', '8[mm]', 'Length, SMA');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').label('Substrate');
model.geom('geom1').feature('blk1').set('size', {'w_subs' 'l_subs' '1'});
model.geom('geom1').feature('blk1').setIndex('size', 1.524, 2);
model.geom('geom1').feature('blk1').set('base', 'center');
model.geom('geom1').feature('blk1').set('pos', [0 0 -0.762]);
model.geom('geom1').run('blk1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').label('Package');
model.geom('geom1').feature('blk2').set('size', {'w_subs' 'l_subs' '1'});
model.geom('geom1').feature('blk2').setIndex('size', 20, 2);
model.geom('geom1').feature('blk2').set('base', 'center');
model.geom('geom1').feature('blk2').set('pos', [0 0 2]);
model.geom('geom1').run('blk2');

model.view('view1').set('renderwireframe', true);

model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').geom.create('c1', 'Circle');
model.geom('geom1').feature('wp1').geom.feature('c1').label('Ring outer');
model.geom('geom1').feature('wp1').geom.feature('c1').set('r', 'r_ring');
model.geom('geom1').feature('wp1').geom.run('c1');
model.geom('geom1').feature('wp1').geom.create('c2', 'Circle');
model.geom('geom1').feature('wp1').geom.feature('c2').label('Ring inner');
model.geom('geom1').feature('wp1').geom.feature('c2').set('r', 'r_ring-1.9');
model.geom('geom1').feature('wp1').geom.run('c2');
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').label('Ring cut');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', [2 3]);
model.geom('geom1').feature('wp1').geom.feature('r1').set('pos', [-1 -9]);
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').feature('wp1').geom.create('dif1', 'Difference');
model.geom('geom1').feature('wp1').geom.feature('dif1').selection('input').set({'c1'});
model.geom('geom1').feature('wp1').geom.feature('dif1').selection('input2').set({'c2' 'r1'});
model.geom('geom1').feature('wp1').geom.run('dif1');
model.geom('geom1').feature('wp1').geom.create('r2', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r2').label('Lumped element');
model.geom('geom1').feature('wp1').geom.feature('r2').set('size', [2 1]);
model.geom('geom1').feature('wp1').geom.feature('r2').set('pos', [-1 -8]);
model.geom('geom1').feature('wp1').geom.run('r2');
model.geom('geom1').feature('wp1').geom.create('r3', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r3').set('size', [3.2 5]);
model.geom('geom1').feature('wp1').geom.feature('r3').set('base', 'center');
model.geom('geom1').feature('wp1').geom.feature('r3').set('pos', [0 10.5]);
model.geom('geom1').feature('wp1').geom.run('r3');
model.geom('geom1').feature('wp1').geom.create('r4', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r4').set('size', [3.2 2]);
model.geom('geom1').feature('wp1').geom.feature('r4').set('pos', [-7 0]);
model.geom('geom1').feature('wp1').geom.feature('r4').set('base', 'center');
model.geom('geom1').feature('wp1').geom.feature('r4').set('pos', [-7 -12]);
model.geom('geom1').feature('wp1').geom.run('r4');
model.geom('geom1').feature('wp1').geom.create('r5', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r5').set('size', [3.2 6]);
model.geom('geom1').feature('wp1').geom.feature('r5').set('pos', [-8.6 -11]);
model.geom('geom1').feature('wp1').geom.feature('r5').set('rot', -28);
model.geom('geom1').feature('wp1').geom.run('r5');
model.geom('geom1').feature('wp1').geom.create('mir1', 'Mirror');
model.geom('geom1').feature('wp1').geom.feature('mir1').selection('input').set({'r4' 'r5'});
model.geom('geom1').feature('wp1').geom.feature('mir1').set('keep', true);
model.geom('geom1').feature('wp1').geom.run('mir1');
model.geom('geom1').feature('wp1').geom.create('uni1', 'Union');
model.geom('geom1').feature('wp1').geom.feature('uni1').selection('input').set({'dif1' 'mir1' 'r3' 'r4' 'r5'});
model.geom('geom1').feature('wp1').geom.feature('uni1').set('intbnd', false);
model.geom('geom1').feature('wp1').geom.run('uni1');
model.geom.load({'part1'}, 'RF_Module/Connectors/connector_sma_flange4.mph', {'part1'});
model.geom('geom1').run('wp1');
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'l_dielectric', '8[mm]');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'l_pin', '1[mm]');
model.geom('geom1').feature('pi1').set('displ', {'0' 'l_subs/2' '0.635'});
model.geom('geom1').feature('pi1').set('rot', -90);
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_boxsel1', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_boxsel1', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_sel3', true);
model.geom('geom1').feature('pi1').setEntry('selshowdom', 'pi1_sel3', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_sel3', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_sel4', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_sel4', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_sel1', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel1', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_sel2', true);
model.geom('geom1').feature('pi1').setEntry('selshowbnd', 'pi1_sel2', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel2', 'none');
model.geom('geom1').run('pi1');
model.geom('geom1').create('copy1', 'Copy');
model.geom('geom1').feature('copy1').selection('input').set({'pi1'});
model.geom('geom1').feature('copy1').set('displx', '-7,7');
model.geom('geom1').run('copy1');
model.geom('geom1').create('rot1', 'Rotate');
model.geom('geom1').feature('rot1').selection('input').set({'copy1'});
model.geom('geom1').feature('rot1').set('rot', 180);
model.geom('geom1').run('rot1');
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').label('Screw');
model.geom('geom1').feature('cyl1').set('h', 8);
model.geom('geom1').feature('cyl1').set('pos', [-12 -10 -8]);
model.geom('geom1').run('cyl1');
model.geom('geom1').create('cyl2', 'Cylinder');
model.geom('geom1').feature('cyl2').label('Screw head');
model.geom('geom1').feature('cyl2').set('r', 1.5);
model.geom('geom1').feature('cyl2').set('pos', [-12 -10 0]);
model.geom('geom1').run('cyl2');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'cyl1' 'cyl2'});
model.geom('geom1').feature('uni1').set('intbnd', false);
model.geom('geom1').run('uni1');
model.geom('geom1').create('arr1', 'Array');
model.geom('geom1').feature('arr1').selection('input').set({'uni1'});
model.geom('geom1').feature('arr1').set('fullsize', [2 2 1]);
model.geom('geom1').feature('arr1').set('displ', [24 20 0]);
model.geom('geom1').run('arr1');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').selection('input').set({'blk1' 'blk2'});
model.geom('geom1').feature('dif1').selection('input2').set({'arr1'});
model.geom('geom1').runPre('fin');

model.view('view1').hideEntities.create('hide1');

model.geom('geom1').run;

model.view('view1').hideEntities('hide1').geom('geom1', 2);
model.view('view1').hideEntities('hide1').set([7 8 10]);

model.physics('emw').create('trans1', 'TransitionBoundaryCondition', 2);
model.physics('emw').feature('trans1').selection.set([6 80]);
model.physics('emw').feature('trans1').set('d', '35[um]');
model.physics('emw').create('pec2', 'PerfectElectricConductor', 2);
model.physics('emw').feature('pec2').selection.named('geom1_pi1_sel2');
model.physics('emw').create('lport1', 'LumpedPort', 2);
model.physics('emw').feature('lport1').selection.set([160]);
model.physics('emw').feature('lport1').set('PortType', 'Coaxial');

model.view('view1').set('showDirections', false);

model.physics('emw').create('lport2', 'LumpedPort', 2);
model.physics('emw').feature('lport2').selection.set([75]);
model.physics('emw').feature('lport2').set('PortType', 'Coaxial');

model.view('view1').set('showDirections', false);

model.physics('emw').create('lport3', 'LumpedPort', 2);
model.physics('emw').feature('lport3').selection.set([242]);
model.physics('emw').feature('lport3').set('PortType', 'Coaxial');

model.view('view1').set('showDirections', false);

model.physics('emw').create('lelement1', 'LumpedElement', 2);
model.physics('emw').feature('lelement1').selection.set([164]);
model.physics('emw').feature('lelement1').set('Zelement', '100[ohm]');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat2').label('Copper');
model.material('mat2').set('family', 'copper');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.35');
model.material('mat2').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat2').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat2').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat2').propertyGroup('linzRes').addInput('temperature');
model.material('mat2').selection.geom('geom1', 2);
model.material('mat2').selection.set([6 80]);
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Substrate');
model.material('mat3').selection.set([2]);
model.material('mat3').propertyGroup('def').set('relpermittivity', {'3.38'});
model.material('mat3').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'0'});
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').label('PTFE');
model.material('mat4').selection.named('geom1_pi1_sel3');
model.material('mat4').propertyGroup('def').set('relpermittivity', {'2.1'});
model.material('mat4').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat4').propertyGroup('def').set('electricconductivity', {'0'});

model.mesh('mesh1').run;

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(2[GHz],0.1[GHz],4[GHz])'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Electric Field (emw)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 21, 0);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').label('Multislice');
model.result('pg1').feature('mslc1').set('smooth', 'internal');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result('pg1').feature('mslc1').feature.create('filt1', 'Filter');
model.result('pg1').feature('mslc1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('unit', {'' '' ''});
model.result('pg2').feature('glob1').set('expr', {'emw.S11dB' 'emw.S21dB' 'emw.S31dB'});
model.result('pg2').feature('glob1').set('descr', {'S11' 'S21' 'S31'});
model.result('pg2').label('S-parameter (emw)');
model.result('pg2').feature('glob1').set('titletype', 'none');
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'S-parameter (dB)');
model.result('pg2').feature('glob1').set('xdataexpr', 'freq');
model.result('pg2').feature('glob1').set('xdataunit', 'GHz');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg3', 'SmithGroup');
model.result('pg3').set('data', 'dset1');
model.result('pg3').create('rgr1', 'ReflectionGraph');
model.result('pg3').feature('rgr1').set('unit', {''});
model.result('pg3').feature('rgr1').set('expr', {'emw.S11'});
model.result('pg3').feature('rgr1').set('descr', {'S11'});
model.result('pg3').label('Smith Plot (emw)');
model.result('pg3').feature('rgr1').set('titletype', 'manual');
model.result('pg3').feature('rgr1').set('title', 'Reflection Graph: S-parameter, Color: Frequency (GHz)');
model.result('pg3').feature('rgr1').set('linemarker', 'point');
model.result('pg3').feature('rgr1').set('markerpos', 'datapoints');
model.result('pg3').feature('rgr1').create('col1', 'Color');
model.result('pg3').feature('rgr1').feature('col1').set('expr', 'emw.freq/1e9');
model.result('pg3').feature('rgr1').feature('col1').set('colortable', 'Spectrum');
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 11, 0);
model.result('pg1').run;
model.result('pg1').feature('mslc1').active(false);
model.result('pg1').run;
model.result('pg1').set('edges', false);
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('colortable', 'AuroraBorealis');
model.result('pg1').feature('vol1').create('sel1', 'Selection');
model.result('pg1').feature('vol1').feature('sel1').selection.set([2]);
model.result('pg1').run;
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('colortable', 'AuroraAustralis');
model.result('pg1').feature('surf1').set('colorlegend', false);
model.result('pg1').feature('surf1').create('sel1', 'Selection');
model.result('pg1').feature('surf1').feature('sel1').selection.named('geom1_pi1_sel2');
model.result('pg1').run;
model.result('pg1').feature('surf1').create('mtrl1', 'MaterialAppearance');
model.result('pg1').run;
model.result('pg1').feature('surf1').feature('mtrl1').set('appearance', 'custom');
model.result('pg1').feature('surf1').feature('mtrl1').set('family', 'aluminumanodized');
model.result('pg1').feature('surf1').feature('mtrl1').set('useplotcolors', true);
model.result('pg1').run;
model.result('pg2').run;
model.result('pg3').run;

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(2);
model.selection('sel1').label('Lumped port 1');
model.selection('sel1').set([160]);

model.physics('emw').feature('lport1').selection.named('sel1');

model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').geom(2);
model.selection('sel2').label('Lumped port 2');
model.selection('sel2').set([75]);

model.physics('emw').feature('lport2').selection.named('sel2');

model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').geom(2);
model.selection('sel3').label('Lumped port 3');
model.selection('sel3').set([242]);

model.physics('emw').feature('lport3').selection.named('sel3');

model.study.create('std2');
model.study('std2').create('frawe', 'FrequencyAdaptive');
model.study('std2').feature('frawe').set('plotgroup', 'Default');
model.study('std2').feature('frawe').set('solnum', 'auto');
model.study('std2').feature('frawe').set('notsolnum', 'auto');
model.study('std2').feature('frawe').set('outputmap', {});
model.study('std2').feature('frawe').setSolveFor('/physics/emw', true);
model.study('std2').feature('frawe').set('plist', 'range(2[GHz],10[MHz],4[GHz])');
model.study('std2').feature('frawe').set('awefunctype', 'usercontrolled');
model.study('std2').feature('frawe').setIndex('awefunc', 'abs(comp1.emw.S11)', 0);
model.study('std2').feature('frawe').set('rtol', 0.1);
model.study('std2').feature('frawe').setEntry('outputmap', 'emw', 'selection');
model.study('std2').feature('frawe').setEntry('outputselectionmap', 'emw', 'sel1;sel2;sel3');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'frawe');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'frawe');
model.sol('sol2').create('aw1', 'AWE');
model.sol('sol2').feature('aw1').set('pname', 'freq');
model.sol('sol2').feature('aw1').set('plist', 'range(2[GHz],10[MHz],4[GHz])');
model.sol('sol2').feature('aw1').set('awefunc', {'abs(comp1.emw.S11)'});
model.sol('sol2').feature('aw1').set('rtol', 0.1);
model.sol('sol2').feature('aw1').set('plot', 'off');
model.sol('sol2').feature('aw1').set('plotgroup', 'Default');
model.sol('sol2').feature('aw1').set('probesel', 'all');
model.sol('sol2').feature('aw1').set('probes', {});
model.sol('sol2').feature('aw1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('aw1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('aw1').create('i1', 'Iterative');
model.sol('sol2').feature('aw1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('aw1').feature('i1').set('prefuntype', 'right');
model.sol('sol2').feature('aw1').feature('i1').set('itrestart', '300');
model.sol('sol2').feature('aw1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol2').feature('aw1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('aw1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Electric Field (emw) 1');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 201, 0);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 201, 0);
model.result('pg4').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond1/pg1');
model.result('pg4').feature.create('mslc1', 'Multislice');
model.result('pg4').feature('mslc1').label('Multislice');
model.result('pg4').feature('mslc1').set('smooth', 'internal');
model.result('pg4').feature('mslc1').set('data', 'parent');
model.result('pg4').feature('mslc1').feature.create('filt1', 'Filter');
model.result('pg4').feature('mslc1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'dset2');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('unit', {'' '' ''});
model.result('pg5').feature('glob1').set('expr', {'emw.S11dB' 'emw.S21dB' 'emw.S31dB'});
model.result('pg5').feature('glob1').set('descr', {'S11' 'S21' 'S31'});
model.result('pg5').label('S-parameter (emw) 1');
model.result('pg5').feature('glob1').set('titletype', 'none');
model.result('pg5').feature('glob1').set('xdata', 'expr');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'S-parameter (dB)');
model.result('pg5').feature('glob1').set('xdataexpr', 'freq');
model.result('pg5').feature('glob1').set('xdataunit', 'GHz');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg6', 'SmithGroup');
model.result('pg6').set('data', 'dset2');
model.result('pg6').create('rgr1', 'ReflectionGraph');
model.result('pg6').feature('rgr1').set('unit', {''});
model.result('pg6').feature('rgr1').set('expr', {'emw.S11'});
model.result('pg6').feature('rgr1').set('descr', {'S11'});
model.result('pg6').label('Smith Plot (emw) 1');
model.result('pg6').feature('rgr1').set('titletype', 'manual');
model.result('pg6').feature('rgr1').set('title', 'Reflection Graph: S-parameter, Color: Frequency (GHz)');
model.result('pg6').feature('rgr1').set('linemarker', 'point');
model.result('pg6').feature('rgr1').set('markerpos', 'datapoints');
model.result('pg6').feature('rgr1').create('col1', 'Color');
model.result('pg6').feature('rgr1').feature('col1').set('expr', 'emw.freq/1e9');
model.result('pg6').feature('rgr1').feature('col1').set('colortable', 'Spectrum');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').feature.remove('mslc1');
model.result('pg4').run;
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').create('sel1', 'Selection');
model.result('pg4').feature('surf1').feature('sel1').selection.set([75 160 242]);
model.result('pg4').run;
model.result('pg5').run;
model.result('pg5').set('legendpos', 'lowerright');
model.result('pg5').run;
model.result('pg5').feature('glob1').setIndex('descr', 'S11 Adaptive Frequency Sweep', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'S21 Adaptive Frequency Sweep', 1);
model.result('pg5').feature('glob1').setIndex('descr', 'S31 Adaptive Frequency Sweep', 2);
model.result('pg5').feature.duplicate('glob2', 'glob1');
model.result('pg5').run;
model.result('pg5').feature('glob2').setIndex('descr', 'S11 Regular Sweep', 0);
model.result('pg5').feature('glob2').setIndex('descr', 'S21 Regular Sweep', 1);
model.result('pg5').feature('glob2').setIndex('descr', 'S31 Regular Sweep', 2);
model.result('pg5').feature('glob2').set('data', 'dset1');
model.result('pg5').feature('glob2').set('linestyle', 'dotted');
model.result('pg5').feature('glob2').set('linemarker', 'cycle');
model.result('pg5').run;
model.result('pg6').run;

model.title('SMA Connectorized Wilkinson Power Divider');

model.description('Resistive power dividers and T-junction power dividers are two conventional types of three-port power dividers. Such dividers are either lossy or not matched to the system reference impedance at all ports. In addition, isolation between two coupled ports is not guaranteed. The Wilkinson power divider outperforms both the lossless T-junction divider and the resistive divider and does not have the issues mentioned above. This example shows how to model such a device.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('wilkinson_power_divider.mph');

model.modelNode.label('Components');

out = model;
