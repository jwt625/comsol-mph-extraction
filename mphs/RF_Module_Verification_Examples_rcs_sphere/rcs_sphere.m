function out = model
%
% rcs_sphere.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/RF_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('emw', 'ElectromagneticWaves', 'geom1');
model.physics('emw').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('solnum', 'auto');
model.study('std1').feature('freq').set('notsolnum', 'auto');
model.study('std1').feature('freq').set('outputmap', {});
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').setSolveFor('/physics/emw', true);

model.param.set('r_lda', '0.5');
model.param.descr('r_lda', 'Sphere radius in wavelengths');
model.param.set('r0', '5[cm]');
model.param.descr('r0', 'Sphere radius');
model.param.set('lda', 'r0/r_lda');
model.param.descr('lda', 'Wavelength');
model.param.set('k0', '2*pi/lda');
model.param.descr('k0', 'Wavenumber');
model.param.set('f0', 'c_const/lda');
model.param.descr('f0', 'Frequency');
model.param.set('t_air', 'lda/2');
model.param.descr('t_air', 'Thickness of air around sphere');
model.param.set('t_pml', 'lda/2');
model.param.descr('t_pml', 'Thickness of PML');
model.param.set('h_size', '8');
model.param.descr('h_size', 'Number of elements per wavelength');
model.param.set('E0', '1[V/m]');
model.param.descr('E0', 'Incident field magnitude');
model.param.set('rho', '2*pi*r_lda');
model.param.descr('rho', 'Sphere circumference in wavelengths');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').label('Spherical Bessel Function of the First Kind');
model.variable('var1').set('sbesselj1', 'sqrt(pi/(2*rho))*besselj(1.5,rho)');
model.variable('var1').descr('sbesselj1', 'Order 1');
model.variable('var1').set('sbesselj2', 'sqrt(pi/(2*rho))*besselj(2.5,rho)');
model.variable('var1').descr('sbesselj2', 'Order 2');
model.variable('var1').set('sbesselj3', 'sqrt(pi/(2*rho))*besselj(3.5,rho)');
model.variable('var1').descr('sbesselj3', 'Order 3');
model.variable('var1').set('sbesselj4', 'sqrt(pi/(2*rho))*besselj(4.5,rho)');
model.variable('var1').descr('sbesselj4', 'Order 4');
model.variable('var1').set('sbesselj5', 'sqrt(pi/(2*rho))*besselj(5.5,rho)');
model.variable('var1').descr('sbesselj5', 'Order 5');
model.variable('var1').set('sbesselj6', 'sqrt(pi/(2*rho))*besselj(6.5,rho)');
model.variable('var1').descr('sbesselj6', 'Order 6');
model.variable('var1').set('sbesselj7', 'sqrt(pi/(2*rho))*besselj(7.5,rho)');
model.variable('var1').descr('sbesselj7', 'Order 7');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Spherical Bessel Function of the Second Kind');
model.variable('var2').set('sbessely1', 'sqrt(pi/(2*rho))*bessely(1.5,rho)');
model.variable('var2').descr('sbessely1', 'Order 1');
model.variable('var2').set('sbessely2', 'sqrt(pi/(2*rho))*bessely(2.5,rho)');
model.variable('var2').descr('sbessely2', 'Order 2');
model.variable('var2').set('sbessely3', 'sqrt(pi/(2*rho))*bessely(3.5,rho)');
model.variable('var2').descr('sbessely3', 'Order 3');
model.variable('var2').set('sbessely4', 'sqrt(pi/(2*rho))*bessely(4.5,rho)');
model.variable('var2').descr('sbessely4', 'Order 4');
model.variable('var2').set('sbessely5', 'sqrt(pi/(2*rho))*bessely(5.5,rho)');
model.variable('var2').descr('sbessely5', 'Order 5');
model.variable('var2').set('sbessely6', 'sqrt(pi/(2*rho))*bessely(6.5,rho)');
model.variable('var2').descr('sbessely6', 'Order 6');
model.variable('var2').set('sbessely7', 'sqrt(pi/(2*rho))*bessely(7.5,rho)');
model.variable('var2').descr('sbessely7', 'Order 7');
model.variable.create('var3');
model.variable('var3').model('comp1');
model.variable('var3').label('Spherical Hankel Function of the Second Kind');
model.variable('var3').set('shankel1', 'sbesselj1+1j*sbessely1');
model.variable('var3').descr('shankel1', 'Order 1');
model.variable('var3').set('shankel2', 'sbesselj2+1j*sbessely2');
model.variable('var3').descr('shankel2', 'Order 2');
model.variable('var3').set('shankel3', 'sbesselj3+1j*sbessely3');
model.variable('var3').descr('shankel3', 'Order 3');
model.variable('var3').set('shankel4', 'sbesselj4+1j*sbessely4');
model.variable('var3').descr('shankel4', 'Order 4');
model.variable('var3').set('shankel5', 'sbesselj5+1j*sbessely5');
model.variable('var3').descr('shankel5', 'Order 5');
model.variable('var3').set('shankel6', 'sbesselj6+1j*sbessely6');
model.variable('var3').descr('shankel6', 'Order 6');
model.variable('var3').set('shankel7', 'sbesselj7+1j*sbessely7');
model.variable('var3').descr('shankel7', 'Order 7');
model.variable.create('var4');
model.variable('var4').model('comp1');
model.variable('var4').label('Coefficient a');
model.variable('var4').set('a1', 'sbesselj1/shankel1');
model.variable('var4').descr('a1', '');
model.variable('var4').set('a2', 'sbesselj2/shankel2');
model.variable('var4').descr('a2', '');
model.variable('var4').set('a3', 'sbesselj3/shankel3');
model.variable('var4').descr('a3', '');
model.variable('var4').set('a4', 'sbesselj4/shankel4');
model.variable('var4').descr('a4', '');
model.variable('var4').set('a5', 'sbesselj5/shankel5');
model.variable('var4').descr('a5', '');
model.variable('var4').set('a6', 'sbesselj6/shankel6');
model.variable('var4').descr('a6', '');
model.variable('var4').set('a7', 'sbesselj7/shankel7');
model.variable('var4').descr('a7', '');
model.variable.create('var5');
model.variable('var5').model('comp1');
model.variable('var5').label('Coefficient b');
model.variable('var5').set('b1', '-d(rho*sbesselj1,rho)/d(rho*shankel1,rho)');
model.variable('var5').descr('b1', '');
model.variable('var5').set('b2', '-d(rho*sbesselj2,rho)/d(rho*shankel2,rho)');
model.variable('var5').descr('b2', '');
model.variable('var5').set('b3', '-d(rho*sbesselj3,rho)/d(rho*shankel3,rho)');
model.variable('var5').descr('b3', '');
model.variable('var5').set('b4', '-d(rho*sbesselj4,rho)/d(rho*shankel4,rho)');
model.variable('var5').descr('b4', '');
model.variable('var5').set('b5', '-d(rho*sbesselj5,rho)/d(rho*shankel5,rho)');
model.variable('var5').descr('b5', '');
model.variable('var5').set('b6', '-d(rho*sbesselj6,rho)/d(rho*shankel6,rho)');
model.variable('var5').descr('b6', '');
model.variable('var5').set('b7', '-d(rho*sbesselj7,rho)/d(rho*shankel7,rho)');
model.variable('var5').descr('b7', '');
model.variable.create('var6');
model.variable('var6').model('comp1');
model.variable('var6').label('Analytical Expression of the RCS');
model.variable('var6').set('RCS_analytical', '1/(rho)^2*abs(-3*(a1+b1)+5*(a2+b2)-7*(a3+b3)+9*(a4+b4)-11*(a5+b5)+13*(a6+b6)-15*(a7+b7))^2');
model.variable('var6').descr('RCS_analytical', 'Analytically calculated RCS');

model.geom('geom1').create('sph1', 'Sphere');
model.geom('geom1').feature('sph1').set('r', 'r0+t_air+t_pml');
model.geom('geom1').feature('sph1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('sph1').setIndex('layer', 't_pml', 0);
model.geom('geom1').feature('sph1').setIndex('layername', 'Layer 2', 1);
model.geom('geom1').feature('sph1').setIndex('layer', 't_air', 1);
model.geom('geom1').runPre('fin');

model.view.create('view2', 'geom1');
model.view('view2').model('comp1');
model.view('view2').camera.setIndex('position', 1.871, 1);
model.view('view2').camera.setIndex('up', -0.412, 1);
model.view('view2').set('renderwireframe', true);

model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').init(3);
model.geom('geom1').feature('del1').selection('input').set('sph1', [1 2 3 5 6 7 9 10 11 12 13 14 15]);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.physics('emw').prop('BackgroundField').set('SolveFor', 'scatteredField');
model.physics('emw').prop('BackgroundField').set('Eb', {'0' '0' 'E0*exp(-j*k0*x)'});

model.view('view1').set('renderwireframe', true);

model.physics('emw').create('sctr1', 'Scattering', 2);
model.physics('emw').feature('sctr1').selection.set([3 14]);

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.set([1 4]);
model.coordSystem('pml1').set('ScalingType', 'Spherical');

model.physics('emw').create('pmc1', 'PerfectMagneticConductor', 2);
model.physics('emw').feature('pmc1').selection.set([1 4 9 12]);
model.physics('emw').create('ffd1', 'FarFieldDomain', 3);
model.physics('emw').feature('ffd1').feature('ffc1').set('SymmetryInPlane1', true);
model.physics('emw').feature('ffd1').feature('ffc1').set('SymmetryInPlane2', true);
model.physics('emw').feature('ffd1').feature('ffc1').set('SymmetryType2', 'SymmetryInHz');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.set([2 3]);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'lda/h_size');
model.mesh('mesh1').feature('size').set('hmin', 'lda/h_size');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').run;

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'r_lda', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'r_lda', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'r_lda', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(0.1,0.025,0.8)', 0);
model.study('std1').feature('freq').set('plist', 'f0');
model.study('std1').setGenPlots(false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'r_lda'});
model.batch('p1').set('plistarr', {'range(0.1,0.025,0.8)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.numerical.create('gevs1', 'EvalGlobalSweep');
model.result.numerical('gevs1').setIndex('pname', 'r_lda', 0);
model.result.numerical('gevs1').setIndex('plistarr', 'range(0.1,0.005,0.8)', 0);
model.result.numerical('gevs1').setIndex('expr', 'RCS_analytical', 0);
model.result.numerical('gevs1').setIndex('unit', '', 0);
model.result.numerical('gevs1').setIndex('descr', 'Analytically calculated RCS', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Global Evaluation Sweep 1');
model.result.numerical('gevs1').set('table', 'tbl1');
model.result.numerical('gevs1').setResult;
model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').set('data', 'dset2');
model.result('pg1').set('titletype', 'custom');
model.result('pg1').set('unitintitle', false);
model.result('pg1').set('descriptionintitle', false);
model.result('pg1').set('typeintitle', false);
model.result('pg1').set('prefixintitle', 'RCS Calculation');
model.result('pg1').set('xlabelactive', true);
model.result('pg1').set('xlabel', 'Sphere radius in wavelengths (a/\lambda<sub>0</sub>)');
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'Normalized monostatic RCS (\sigma<sub>3-D</sub>/\pi a<sup>2</sup>)');
model.result('pg1').set('ylog', true);
model.result('pg1').create('ptgr1', 'PointGraph');
model.result('pg1').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg1').feature('ptgr1').set('linewidth', 'preference');
model.result('pg1').feature('ptgr1').selection.set([2]);
model.result('pg1').feature('ptgr1').set('expr', 'emw.bRCS3D/(pi*r0^2)');
model.result('pg1').feature('ptgr1').set('xdatasolnumtype', 'outer');
model.result('pg1').feature('ptgr1').set('linestyle', 'none');
model.result('pg1').feature('ptgr1').set('linemarker', 'square');
model.result('pg1').feature('ptgr1').set('legend', true);
model.result('pg1').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg1').feature('ptgr1').setIndex('legends', 'Simulated', 0);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').create('tblp1', 'Table');
model.result('pg1').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg1').feature('tblp1').set('linewidth', 'preference');
model.result('pg1').feature('tblp1').set('legend', true);
model.result('pg1').feature('tblp1').set('legendmethod', 'manual');
model.result('pg1').feature('tblp1').setIndex('legends', 'Analytical', 0);
model.result('pg1').run;

model.param.set('r_lda', '0.5', 'Sphere radius in wavelengths');
model.param.set('r_lda', 'r1');
model.param.descr('r_lda', 'Sphere radius in wavelengths');
model.param.set('r0', '5[cm]', 'Sphere radius');
model.param.set('r0', '5[cm]');
model.param.descr('r0', 'Sphere radius');
model.param.set('lda', 'r0/r_lda', 'Wavelength');
model.param.set('lda', 'r0/r_lda');
model.param.descr('lda', 'Wavelength');
model.param.set('k0', '2*pi/lda', 'Wavenumber');
model.param.set('k0', '2*pi/lda');
model.param.descr('k0', 'Wavenumber');
model.param.set('f0', 'c_const/lda', 'Frequency');
model.param.set('f0', 'c_const/lda');
model.param.descr('f0', 'Frequency');
model.param.set('t_air', 'lda/2', 'Thickness of air around sphere');
model.param.set('t_air', 'lda/2');
model.param.descr('t_air', 'Thickness of air around sphere');
model.param.set('t_pml', 'lda/2', 'Thickness of PML');
model.param.set('t_pml', 'lda/2');
model.param.descr('t_pml', 'Thickness of PML');
model.param.set('h_size', '8', 'Number of elements per wavelength');
model.param.set('h_size', '8');
model.param.descr('h_size', 'Number of elements per wavelength');
model.param.set('E0', '1[V/m]', 'Incident field magnitude');
model.param.set('E0', '1[V/m]');
model.param.descr('E0', 'Incident field magnitude');
model.param.set('rho', '2*pi*r_lda', 'Sphere circumference in wavelengths');
model.param.set('rho', '2*pi*r_lda');
model.param.descr('rho', 'Sphere circumference in wavelengths');
model.param.set('r1', '0.16363636363636364');
model.param.descr('r1', 'Relative radius at 1st resonance');
model.param.set('RCS1', '3.6549540474068576');
model.param.descr('RCS1', 'RCS at 1st resonance');

model.geom('geom1').run;

model.mesh.duplicate('mesh2', 'mesh1');
model.mesh('mesh2').feature('size').set('hmin', 'if(lda/h_size>r0/2,r0/2,lda/h_size)');
model.mesh('mesh2').feature('ftet1').create('size1', 'Size');
model.mesh('mesh2').feature('ftet1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh2').feature('ftet1').feature('size1').selection.set([7 10]);
model.mesh('mesh2').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh2').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh2').feature('ftet1').feature('size1').set('hmax', 'if(lda/h_size>r0/2,r0/2,lda/h_size)');

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').set('plotgroup', 'Default');
model.study('std2').feature('freq').set('solnum', 'auto');
model.study('std2').feature('freq').set('notsolnum', 'auto');
model.study('std2').feature('freq').set('outputmap', {});
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').setSolveFor('/physics/emw', true);
model.study('std2').create('param', 'Parametric');
model.study('std2').feature('param').setIndex('pname', 'r_lda', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', '', 0);
model.study('std2').feature('param').setIndex('pname', 'r_lda', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', '', 0);
model.study('std2').feature('param').setIndex('pname', 'h_size', 0);
model.study('std2').feature('param').setIndex('plistarr', '3 6 9 12 15 20', 0);
model.study('std2').feature('freq').set('plist', 'f0');
model.study('std2').setGenPlots(false);

model.sol.create('sol32');
model.sol('sol32').study('std2');
model.sol('sol32').create('st1', 'StudyStep');
model.sol('sol32').feature('st1').set('study', 'std2');
model.sol('sol32').feature('st1').set('studystep', 'freq');
model.sol('sol32').create('v1', 'Variables');
model.sol('sol32').feature('v1').set('control', 'freq');
model.sol('sol32').create('s1', 'Stationary');
model.sol('sol32').feature('s1').set('stol', 0.01);
model.sol('sol32').feature('s1').create('p1', 'Parametric');
model.sol('sol32').feature('s1').feature.remove('pDef');
model.sol('sol32').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol32').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol32').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol32').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol32').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol32').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol32').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol32').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol32').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol32').feature('s1').feature('p1').set('probes', {});
model.sol('sol32').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol32').feature('s1').set('linpmethod', 'sol');
model.sol('sol32').feature('s1').set('linpsol', 'zero');
model.sol('sol32').feature('s1').set('control', 'freq');
model.sol('sol32').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol32').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol32').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol32').feature('s1').create('i1', 'Iterative');
model.sol('sol32').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol32').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol32').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol32').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol32').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol32').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol32').feature('s1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol32').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol32').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol32').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol32').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol32').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol32').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol32').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol32').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol32').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol32').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol32').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol32').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol32').feature('s1').feature.remove('fcDef');
model.sol('sol32').attach('std2');

model.batch.create('p2', 'Parametric');
model.batch('p2').study('std2');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol32');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').set('pname', {'h_size'});
model.batch('p2').set('plistarr', {'3 6 9 12 15 20'});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std2');
model.batch('p2').set('control', 'param');

model.sol.create('sol33');
model.sol('sol33').study('std2');
model.sol('sol33').label('Parametric Solutions 2');

model.batch('p2').feature('so1').set('psol', 'sol33');
model.batch('p2').run('compute');

model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').set('data', 'dset4');
model.result('pg2').set('xlabelactive', true);
model.result('pg2').set('xlabel', 'Number of elements / \lambda<sub>0</sub>');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Relative error');
model.result('pg2').create('ptgr1', 'PointGraph');
model.result('pg2').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg2').feature('ptgr1').set('linewidth', 'preference');
model.result('pg2').feature('ptgr1').selection.set([2]);
model.result('pg2').feature('ptgr1').set('expr', '(emw.bRCS3D/(pi*r0^2)-RCS1)/RCS1');
model.result('pg2').feature('ptgr1').set('xdatasolnumtype', 'level2');
model.result('pg2').feature('ptgr1').set('xdata', 'expr');
model.result('pg2').feature('ptgr1').set('xdataexpr', 'h_size');
model.result('pg2').feature('ptgr1').set('linewidth', 2);
model.result('pg2').feature('ptgr1').set('linemarker', 'square');
model.result('pg2').run;

model.title('Computing the Radar Cross Section of a Perfectly Conducting Sphere');

model.description('A classic benchmark problem in computational electromagnetics is to solve for the radar cross section (RCS) of a sphere in free space illuminated by a plane wave. This example solves for the RCS of a metallic sphere that has a very high conductivity, which can be treated as a material with infinite conductivity. The results are compared to the analytic solution, and agreement is shown.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;
model.sol('sol20').clearSolutionData;
model.sol('sol21').clearSolutionData;
model.sol('sol22').clearSolutionData;
model.sol('sol23').clearSolutionData;
model.sol('sol24').clearSolutionData;
model.sol('sol25').clearSolutionData;
model.sol('sol26').clearSolutionData;
model.sol('sol27').clearSolutionData;
model.sol('sol28').clearSolutionData;
model.sol('sol29').clearSolutionData;
model.sol('sol30').clearSolutionData;
model.sol('sol31').clearSolutionData;
model.sol('sol32').clearSolutionData;
model.sol('sol33').clearSolutionData;
model.sol('sol34').clearSolutionData;
model.sol('sol35').clearSolutionData;
model.sol('sol36').clearSolutionData;
model.sol('sol37').clearSolutionData;
model.sol('sol38').clearSolutionData;
model.sol('sol39').clearSolutionData;

model.label('rcs_sphere.mph');

model.modelNode.label('Components');

out = model;
