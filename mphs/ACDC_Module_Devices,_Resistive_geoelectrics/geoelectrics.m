function out = model
%
% geoelectrics.m
%
% Model exported on May 26 2025, 21:24 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Devices,_Resistive');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ec', 'ConductiveMedia', 'geom1');
model.physics('ec').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/ec', true);

model.param.set('L', '50[m]');
model.param.descr('L', 'Domain length');
model.param.set('W', '50[m]');
model.param.descr('W', 'Domain width');
model.param.set('H', '20[m]');
model.param.descr('H', 'Domain height');
model.param.set('WI', '4[m]');
model.param.descr('WI', 'Infinite layer thickness');
model.param.set('N', '25');
model.param.descr('N', 'Number of electrodes');
model.param.set('a', '1[m]');
model.param.descr('a', 'Electrode separation');
model.param.set('x0', 'L/2-N/2*a');
model.param.descr('x0', 'First electrode x-position');
model.param.set('y0', 'W/2');
model.param.descr('y0', 'First electrode y-position');
model.param.set('rho0', '100[m/S]');
model.param.descr('rho0', 'Resistivity');
model.param.set('dom_C1', '39');
model.param.descr('dom_C1', 'Positive electrode domain number');
model.param.set('dom_C2', '44');
model.param.descr('dom_C2', 'Negative electrode domain number');

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'L' 'W' 'H'});
model.geom('geom1').feature('blk1').set('pos', {'0' '0' '-H'});
model.geom('geom1').feature('blk1').setIndex('layer', 'WI', 0);
model.geom('geom1').feature('blk1').set('layerleft', true);
model.geom('geom1').feature('blk1').set('layerright', true);
model.geom('geom1').feature('blk1').set('layerfront', true);
model.geom('geom1').feature('blk1').set('layerback', true);
model.geom('geom1').run('blk1');
model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'vectors');
model.geom('geom1').feature('pol1').set('x', 'range(x0,a,x0+N*a)');
model.geom('geom1').feature('pol1').set('y', 'y0+0*range(0,1,N)');
model.geom('geom1').feature('pol1').set('z', '0*range(0,1,N)');
model.geom('geom1').run('pol1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', {'(N+4)*a' '(N+4)*a' '1'});
model.geom('geom1').feature('blk2').setIndex('size', 'N*a/3', 2);
model.geom('geom1').feature('blk2').set('pos', {'x0-2*a' 'y0-(N+4)*a/2' '0'});
model.geom('geom1').feature('blk2').setIndex('pos', '-N*a/3', 2);
model.geom('geom1').run('blk2');
model.geom('geom1').run('fin');

model.view('view1').set('transparency', false);

model.func.create('an1', 'Analytic');
model.func('an1').model('comp1');
model.func('an1').set('funcname', 'V_ref');
model.func('an1').set('expr', '1[A]*rho0/(2*pi)*(1/abs(x-x1)-1/abs(x-x2))');
model.func('an1').set('args', 'x, x1, x2');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(2);
model.selection('sel1').set([1 2 3 4 5 8 10 11 15 17 18 22 23 25 26 28 33 40 45 46 54 55 57 62 69 74 75 76 77 78 79 80 81]);
model.selection('sel1').label('Ground Boundaries');
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').set([1 2 3 4 5 6 7 8 9 11 12 14 15 16 17 18 19]);
model.selection('sel2').label('Infinite Element Domains');
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').set([1 2 3 4 5 6 7 8 11 12 14 15 16 17 18 19]);
model.selection('sel3').geom('geom1', 3, 2, {'exterior'});
model.selection('sel3').set([1 2 3 4 5 6 7 8 11 12 14 15 16 17 18 19]);
model.selection('sel3').geom('geom1', 3, 2, {'exterior' 'interior'});
model.selection('sel3').set([1 2 3 4 5 6 7 8 11 12 14 15 16 17 18 19]);
model.selection('sel3').label('Infinite Elements Boundaries');

model.coordSystem.create('ie1', 'geom1', 'InfiniteElement');
model.coordSystem('ie1').selection.named('sel2');
model.coordSystem('ie1').set('width', '1e2*dGeomChar');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'1/rho0'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat1').label('100 Ohmm Homogeneous');

model.physics('ec').create('pcs1', 'PointCurrentSource', 0);
model.physics('ec').feature('pcs1').selection.set([29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54]);
model.physics('ec').feature('pcs1').set('Qjp', '1*(dom==dom_C1)-1*(dom==dom_C2)');

model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').geom(0);
model.selection('sel4').label('Point sources');
model.selection('sel4').set([29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54]);

model.physics('ec').feature('pcs1').selection.named('sel4');
model.physics('ec').create('gnd1', 'Ground', 2);
model.physics('ec').feature('gnd1').selection.named('sel1');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh1').feature('ftet1').feature('size1').selection.set([67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91]);
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', 0.05);
model.mesh('mesh1').feature('ftet1').create('size2', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size2').selection.set([13]);
model.mesh('mesh1').feature('ftet1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hmax', 2);
model.mesh('mesh1').run;

model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'L', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'L', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'dom_C1', 0);
model.study('std1').feature('stat').setIndex('plistarr', '34 39', 0);
model.study('std1').feature('stat').setIndex('pname', 'L', 1);
model.study('std1').feature('stat').setIndex('plistarr', '', 1);
model.study('std1').feature('stat').setIndex('punit', 'm', 1);
model.study('std1').feature('stat').setIndex('pname', 'L', 1);
model.study('std1').feature('stat').setIndex('plistarr', '', 1);
model.study('std1').feature('stat').setIndex('punit', 'm', 1);
model.study('std1').feature('stat').setIndex('pname', 'dom_C2', 1);
model.study('std1').feature('stat').setIndex('plistarr', '49 44', 1);
model.study('std1').feature('stat').set('pcontinuationmode', 'no');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'cg');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('coarseningmethod', 'classic');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Electric Potential (ec)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 2, 0);
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond2/pg1');
model.result('pg1').feature.create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('solutionparams', 'parent');
model.result('pg1').feature('vol1').set('colortable', 'Dipole');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Electric Field Norm (ec)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 2, 0);
model.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');
model.result('pg2').feature.create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('solutionparams', 'parent');
model.result('pg2').feature('mslc1').set('expr', 'ec.normE');
model.result('pg2').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('mslc1').set('xcoord', 'ec.CPx');
model.result('pg2').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('mslc1').set('ycoord', 'ec.CPy');
model.result('pg2').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('mslc1').set('zcoord', 'ec.CPz');
model.result('pg2').feature('mslc1').set('colortable', 'Prism');
model.result('pg2').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg2').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('data', 'parent');
model.result('pg2').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg2').feature('strmsl1').set('expr', {'ec.Ex' 'ec.Ey' 'ec.Ez'});
model.result('pg2').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('strmsl1').set('xcoord', 'ec.CPx');
model.result('pg2').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('strmsl1').set('ycoord', 'ec.CPy');
model.result('pg2').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('strmsl1').set('zcoord', 'ec.CPz');
model.result('pg2').feature('strmsl1').set('titletype', 'none');
model.result('pg2').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg2').feature('strmsl1').set('udist', 0.02);
model.result('pg2').feature('strmsl1').set('maxlen', 0.4);
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('inheritcolor', false);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('data', 'parent');
model.result('pg2').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg2').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg2').feature('strmsl1').feature('col1').set('expr', 'ec.normE');
model.result('pg2').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg2').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg2').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg2').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg2').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg2').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature.remove('vol1');
model.result('pg1').run;
model.result('pg1').create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('xnumber', '3');
model.result('pg1').feature('mslc1').set('ynumber', '2');
model.result('pg1').run;

model.view('view1').hideEntities.create('hide1');
model.view('view1').hideEntities('hide1').named('sel2');
model.view('view1').hideEntities.create('hide2');
model.view('view1').hideEntities('hide2').geom('geom1', 2);
model.view('view1').hideEntities('hide2').named('sel3');

model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').create('slc1', 'Slice');
model.result('pg3').feature('slc1').set('expr', 'with(1,ec.Jx)*with(2,ec.Jx)+with(1,ec.Jy)*with(2,ec.Jy)+with(1,ec.Jz)*with(2,ec.Jz)');
model.result('pg3').feature('slc1').set('quickplane', 'zx');
model.result('pg3').feature('slc1').set('quickymethod', 'coord');
model.result('pg3').feature('slc1').set('quicky', '25 27 29');
model.result('pg3').feature('slc1').set('rangecoloractive', true);
model.result('pg3').feature('slc1').set('rangecolormin', '-1E-4');
model.result('pg3').feature('slc1').set('rangecolormax', '1E-4');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Sensitivity plot');
model.result('pg3').label('Sensitivity');
model.result.dataset.duplicate('dset2', 'dset1');
model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.set([37 50]);
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Electric Potential at the Surface');
model.result('pg4').set('data', 'dset2');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('rangecoloractive', true);
model.result('pg4').feature('surf1').set('rangecolormin', -10);
model.result('pg4').feature('surf1').set('rangecolormax', 10);
model.result('pg4').run;
model.result('pg4').create('con1', 'Contour');
model.result('pg4').feature('con1').set('levelmethod', 'levels');
model.result('pg4').feature('con1').set('levels', '-10^(range(0,-0.2,-3)) 10^(range(-3,0.2,0))');
model.result('pg4').feature('con1').set('coloring', 'uniform');
model.result('pg4').feature('con1').set('color', 'black');
model.result('pg4').feature('con1').set('colorlegend', false);
model.result('pg4').run;
model.result.dataset.create('cpl1', 'CutPlane');
model.result.dataset('cpl1').set('quickplane', 'zx');
model.result.dataset('cpl1').set('quicky', 'y0');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').run;
model.result('pg5').label('Electric Potential, Slice');
model.result('pg5').set('data', 'cpl1');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('rangecoloractive', true);
model.result('pg5').feature('surf1').set('rangecolormin', -10);
model.result('pg5').feature('surf1').set('rangecolormax', 10);
model.result('pg5').run;
model.result('pg5').create('con1', 'Contour');
model.result('pg5').feature('con1').set('levelmethod', 'levels');
model.result('pg5').feature('con1').set('levels', '-10^(range(0.4,-0.2,-3)) 10^(range(-3,0.2,0.4))');
model.result('pg5').feature('con1').set('coloring', 'uniform');
model.result('pg5').feature('con1').set('color', 'black');
model.result('pg5').feature('con1').set('colorlegend', false);
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').setIndex('looplevel', 2, 0);
model.result('pg5').run;
model.result.dataset.create('grid1', 'Grid1D');
model.result.dataset('grid1').set('source', 'function');
model.result.dataset('grid1').set('function', 'an1');
model.result.dataset('grid1').set('parmin1', 10);
model.result.dataset('grid1').set('parmax1', 40);
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Result Comparison');
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'Comparison between analytical (lines) and modeled (markers) results');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'Position (m)');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'Voltage (V)');
model.result('pg6').create('ptgr1', 'PointGraph');
model.result('pg6').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg6').feature('ptgr1').set('linewidth', 'preference');
model.result('pg6').feature('ptgr1').set('data', 'dset1');
model.result('pg6').feature('ptgr1').setIndex('looplevelinput', 'first', 0);
model.result('pg6').feature('ptgr1').selection.named('sel4');
model.result('pg6').feature('ptgr1').set('expr', 'abs(V)');
model.result('pg6').feature('ptgr1').set('xdata', 'expr');
model.result('pg6').feature('ptgr1').set('xdataexpr', 'x');
model.result('pg6').feature('ptgr1').set('linecolor', 'blue');
model.result('pg6').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg6').run;
model.result('pg6').feature('ptgr2').setIndex('looplevelinput', 'last', 0);
model.result('pg6').feature('ptgr2').set('linecolor', 'green');
model.result('pg6').run;
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg6').feature('lngr1').set('linewidth', 'preference');
model.result('pg6').feature('lngr1').set('data', 'grid1');
model.result('pg6').feature('lngr1').set('expr', 'abs(V_ref(x,17.5,32.5))');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', 'x');
model.result('pg6').feature('lngr1').set('linecolor', 'blue');
model.result('pg6').feature.duplicate('lngr2', 'lngr1');
model.result('pg6').run;
model.result('pg6').feature('lngr2').set('expr', 'abs(V_ref(x,22.5,27.5))');
model.result('pg6').feature('lngr2').set('linecolor', 'green');
model.result('pg6').run;
model.result('pg6').set('ylog', true);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Relative Error');
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', 'Relative error between modeled and analytical potential');
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', 'Position (m)');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Relative error');
model.result('pg7').set('axislimits', true);
model.result('pg7').set('ylog', true);
model.result('pg7').set('xmin', 12.25);
model.result('pg7').set('xmax', 37.75);
model.result('pg7').set('ymin', '1e-7');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr1').set('linewidth', 'preference');
model.result('pg7').feature('lngr1').set('data', 'dset1');
model.result('pg7').feature('lngr1').setIndex('looplevelinput', 'first', 0);
model.result('pg7').feature('lngr1').set('expr', 'abs(V-V_ref(x,17.5,32.5))/abs(V)');
model.result('pg7').feature('lngr1').selection.set([67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91]);
model.result('pg7').feature('lngr1').set('xdata', 'expr');
model.result('pg7').feature('lngr1').set('xdataexpr', 'x');
model.result('pg7').feature.duplicate('lngr2', 'lngr1');
model.result('pg7').run;
model.result('pg7').feature('lngr2').setIndex('looplevelinput', 'last', 0);
model.result('pg7').feature('lngr2').set('expr', 'abs(V-V_ref(x,22.5,27.5))/abs(V)');
model.result('pg7').run;
model.result('pg4').run;

model.title('A Geoelectrical Forward Problem');

model.description(['The classical forward problem in the field of geoelectrics ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' which includes electrical resistivity tomography, ERT, and vertical electric sounding, VES ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' is the calculation of the electric potential at a given set of electrodes when electric currents are injected into the ground at other electrodes. This example describes the 3D ERT forward problem for 25' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'electrodes in a homogeneous ground of 100' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'ohmmeters and compares it to the analytical solution.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('geoelectrics.mph');

model.modelNode.label('Components');

out = model;
