function out = model
%
% capacitive_position_sensor.m
%
% Model exported on May 26 2025, 21:24 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Devices,_Capacitive');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');

model.study.create('std1');
model.study('std1').create('stssw', 'StationarySourceSweep');
model.study('std1').feature('stssw').set('solnum', 'auto');
model.study('std1').feature('stssw').set('notsolnum', 'auto');
model.study('std1').feature('stssw').set('outputmap', {});
model.study('std1').feature('stssw').set('ngenAUX', '1');
model.study('std1').feature('stssw').set('goalngenAUX', '1');
model.study('std1').feature('stssw').set('ngenAUX', '1');
model.study('std1').feature('stssw').set('goalngenAUX', '1');
model.study('std1').feature('stssw').setSolveFor('/physics/es', true);

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'11[cm]' '11[cm]' '1'});
model.geom('geom1').feature('blk1').setIndex('size', '1[cm]', 2);
model.geom('geom1').run('blk1');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').set('quickz', '5[mm]');
model.geom('geom1').feature('wp1').set('selresult', true);
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', {'1[cm]' '11[cm]'});
model.geom('geom1').feature('wp1').geom.feature('r1').set('pos', {'1[cm]' '0'});
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').feature('wp1').geom.create('arr1', 'Array');
model.geom('geom1').feature('wp1').geom.feature('arr1').selection('input').set({'r1'});
model.geom('geom1').feature('wp1').geom.feature('arr1').set('fullsize', [5 1]);
model.geom('geom1').feature('wp1').geom.feature('arr1').set('displ', {'2[cm]' '0'});
model.geom('geom1').run('wp1');

model.view('view1').set('renderwireframe', true);

model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', {'60[cm]' '18[cm]' '1'});
model.geom('geom1').feature('blk2').setIndex('size', '18[cm]', 2);
model.geom('geom1').feature('blk2').set('pos', {'-40[cm]' '-4[cm]' '0'});
model.geom('geom1').feature('blk2').setIndex('pos', '-4[cm]', 2);
model.geom('geom1').feature('blk2').setIndex('layer', '2[cm]', 0);
model.geom('geom1').feature('blk2').set('layerleft', true);
model.geom('geom1').feature('blk2').set('layerright', true);
model.geom('geom1').feature('blk2').set('layerfront', true);
model.geom('geom1').feature('blk2').set('layerback', true);
model.geom('geom1').feature('blk2').set('layertop', true);
model.geom('geom1').run('blk2');

model.coordSystem.create('ie1', 'geom1', 'InfiniteElement');

model.geom('geom1').run;

model.coordSystem('ie1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 15 16 17 18 20 21 22 23 24 25 26 27 28]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('Nylon');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat2').set('customdiffuse', [0.39215686274509803 0.39215686274509803 0.9803921568627451]);
model.material('mat2').set('customambient', [0.39215686274509803 0.39215686274509803 0.7843137254901961]);
model.material('mat2').set('noise', true);
model.material('mat2').set('lighting', 'phong');
model.material('mat2').set('shininess', 500);
model.material('mat2').propertyGroup('def').set('heatcapacity', '1700[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'4' '0' '0' '0' '4' '0' '0' '0' '4'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'280e-6[1/K]' '0' '0' '0' '280e-6[1/K]' '0' '0' '0' '280e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('density', '1150[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'0.26[W/(m*K)]' '0' '0' '0' '0.26[W/(m*K)]' '0' '0' '0' '0.26[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '2[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.4');
model.material('mat2').selection.set([19]);

model.physics('es').create('gnd1', 'Ground', 2);
model.physics('es').feature('gnd1').selection.set([69]);
model.physics('es').create('term1', 'Terminal', 2);
model.physics('es').feature('term1').selection.named('geom1_wp1_bnd');
model.physics('es').create('term2', 'Terminal');
model.physics('es').feature('term2').selection.set([73]);
model.physics('es').create('term3', 'Terminal');
model.physics('es').feature('term3').selection.set([74]);
model.physics('es').create('term4', 'Terminal');
model.physics('es').feature('term4').selection.set([75]);
model.physics('es').create('term5', 'Terminal');
model.physics('es').feature('term5').selection.set([76]);

model.view.create('view3', 'geom1');
model.view('view3').model('comp1');
model.view('view3').set('showgrid', false);
model.view('view3').set('renderwireframe', true);
model.view('view3').camera.set('projection', 'orthographic');
model.view('view3').camera.setIndex('up', 1, 2);
model.view('view3').camera.setIndex('up', 0, 0);
model.view('view3').camera.set('up', [0 0 1]);
model.view('view3').camera.setIndex('position', -2, 1);

model.mesh('mesh1').autoMeshSize(3);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stssw');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stssw');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stssw');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'cg');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('coarseningmethod', 'classic');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Electric Potential (es)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 5, 0);
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('solutionparams', 'parent');
model.result('pg1').feature('mslc1').set('expr', 'V/es.VexcTerm');
model.result('pg1').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg1').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg1').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg1').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg1').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg1').feature('mslc1').set('colortable', 'Dipole');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result('pg1').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg1').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg1').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg1').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg1').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg1').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg1').feature('strmsl1').set('titletype', 'none');
model.result('pg1').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg1').feature('strmsl1').set('udist', 0.02);
model.result('pg1').feature('strmsl1').set('maxlen', 0.4);
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('inheritcolor', false);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('data', 'parent');
model.result('pg1').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg1').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg1').feature('strmsl1').feature('col1').set('expr', 'V/es.VexcTerm');
model.result('pg1').feature('strmsl1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg1').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg1').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg1').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Electric Field Norm (es)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 5, 0);
model.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');
model.result('pg2').feature.create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('solutionparams', 'parent');
model.result('pg2').feature('mslc1').set('expr', 'es.normE');
model.result('pg2').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg2').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg2').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg2').feature('mslc1').set('colortable', 'Prism');
model.result('pg2').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg2').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('data', 'parent');
model.result('pg2').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg2').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg2').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg2').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg2').feature('strmsl1').set('titletype', 'none');
model.result('pg2').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg2').feature('strmsl1').set('udist', 0.02);
model.result('pg2').feature('strmsl1').set('maxlen', 0.4);
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('inheritcolor', false);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('data', 'parent');
model.result('pg2').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg2').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg2').feature('strmsl1').feature('col1').set('expr', 'es.normE');
model.result('pg2').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg2').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg2').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg2').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg2').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg2').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').set('data', 'dset1');
model.result.evaluationGroup('eg1').label(' (es)');
model.result.evaluationGroup('eg1').label('Inverse Maxwell capacitance (dset1, es)');
model.result.evaluationGroup('eg1').create('gmev1', 'EvalGlobalMatrix');
model.result.evaluationGroup('eg1').feature('gmev1').label('Inverse Maxwell capacitance (dset1, es)');
model.result.evaluationGroup('eg1').feature('gmev1').set('expr', 'root.comp1.es.Cinv');
model.result.evaluationGroup('eg1').feature('gmev1').set('outerdataseries', 'none');
model.result.evaluationGroup('eg1').feature('gmev1').set('dataseries', 'sum');

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').label('Lumped Parameters (dset1, es)');
model.nodeGroup('grp1').set('type', 'evaluationgroup');
model.nodeGroup('grp1').add('evaluationgroup', 'eg1');

model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup.create('eg2', 'EvaluationGroup');
model.result.evaluationGroup('eg2').set('data', 'dset1');
model.result.evaluationGroup('eg2').label(' (es)');
model.result.evaluationGroup('eg2').label('Maxwell capacitance (dset1, es)');
model.result.evaluationGroup('eg2').create('gmev1', 'EvalGlobalMatrix');
model.result.evaluationGroup('eg2').feature('gmev1').label('Maxwell capacitance (dset1, es)');
model.result.evaluationGroup('eg2').feature('gmev1').set('expr', 'root.comp1.es.Cinv');
model.result.evaluationGroup('eg2').feature('gmev1').set('outerdataseries', 'none');
model.result.evaluationGroup('eg2').feature('gmev1').set('dataseries', 'sum');
model.result.evaluationGroup('eg2').feature('gmev1').set('trans', 'inverse');

model.nodeGroup('grp1').add('evaluationgroup', 'eg2');

model.result.evaluationGroup('eg2').run;
model.result.evaluationGroup.create('eg3', 'EvaluationGroup');
model.result.evaluationGroup('eg3').set('data', 'dset1');
model.result.evaluationGroup('eg3').label(' (es)');
model.result.evaluationGroup('eg3').label('Mutual capacitance (dset1, es)');
model.result.evaluationGroup('eg3').create('gmev1', 'EvalGlobalMatrix');
model.result.evaluationGroup('eg3').feature('gmev1').label('Mutual capacitance (dset1, es)');
model.result.evaluationGroup('eg3').feature('gmev1').set('expr', 'root.comp1.es.Cinv');
model.result.evaluationGroup('eg3').feature('gmev1').set('outerdataseries', 'none');
model.result.evaluationGroup('eg3').feature('gmev1').set('dataseries', 'sum');
model.result.evaluationGroup('eg3').feature('gmev1').set('trans', 'invmaxwellmutual');

model.nodeGroup('grp1').add('evaluationgroup', 'eg3');

model.result.evaluationGroup('eg3').run;
model.result('pg1').run;
model.result('pg1').stepPrevious(0);
model.result('pg1').run;
model.result('pg1').stepPrevious(0);
model.result('pg1').run;
model.result('pg1').stepPrevious(0);
model.result('pg1').run;
model.result('pg1').stepPrevious(0);
model.result('pg1').run;
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup('eg2').run;
model.result.evaluationGroup('eg3').run;
model.result.evaluationGroup('eg2').feature('gmev1').set('unit', '1/pF');
model.result.evaluationGroup('eg3').feature('gmev1').set('unit', '1/pF');
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup('eg2').run;
model.result.evaluationGroup('eg3').run;
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'none');
model.result('pg3').create('tbls1', 'TableSurface');
model.result('pg3').feature('tbls1').set('source', 'evaluationgroup');
model.result('pg3').feature('tbls1').set('evaluationgroup', 'eg3');
model.result('pg3').run;
model.result('pg3').feature('tbls1').set('dataformat', 'cells');
model.result('pg3').feature('tbls1').set('function', 'discrete');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Mutual capacitance matrix [pF]');
model.result('pg3').run;

model.sol('sol1').feature('s1').feature('dDef').active(true);
model.sol('sol1').runAll;

model.result('pg1').run;
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup('eg2').run;
model.result.evaluationGroup('eg3').run;

model.param.set('L', '2[cm]');
model.param.descr('L', 'Displacement');

model.geom('geom1').create('blk3', 'Block');
model.geom('geom1').feature('blk3').set('size', {'25[cm]' '5[cm]' '1'});
model.geom('geom1').feature('blk3').setIndex('size', '8[cm]', 2);
model.geom('geom1').feature('blk3').set('pos', {'-35[cm]+L' '3[cm]' '0'});
model.geom('geom1').feature('blk3').setIndex('pos', '2[cm]', 2);
model.geom('geom1').run('blk3');

model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat3').label('Copper');
model.material('mat3').set('family', 'copper');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.35');
model.material('mat3').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat3').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat3').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat3').propertyGroup('linzRes').addInput('temperature');

model.geom('geom1').run;

model.material('mat3').selection.set([19]);

model.physics('es').create('term6', 'DomainTerminal', 3);
model.physics('es').feature('term6').selection.set([19]);

model.sol('sol1').runAll;

model.result('pg1').run;
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup('eg2').run;
model.result.evaluationGroup('eg3').run;

model.study('std1').feature('stssw').set('specifysources', true);
model.study('std1').feature('stssw').set('sourcenames', 'range(1,1,5)');

model.sol('sol1').runAll;

model.result('pg1').run;
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup('eg2').run;
model.result.evaluationGroup('eg3').run;

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'L', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'L', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(2,2,28)', 0);
model.study('std1').feature('param').setIndex('punit', 'cm', 0);

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'L'});
model.batch('p1').set('plistarr', {'range(2,2,28)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Electric Potential (es) 1');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 5, 0);
model.result('pg4').setIndex('looplevel', 14, 1);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 5, 0);
model.result('pg4').setIndex('looplevel', 14, 1);
model.result('pg4').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond1/pg1');
model.result('pg4').feature.create('mslc1', 'Multislice');
model.result('pg4').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg4').feature('mslc1').set('solutionparams', 'parent');
model.result('pg4').feature('mslc1').set('expr', 'V/es.VexcTerm');
model.result('pg4').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg4').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg4').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg4').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg4').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg4').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg4').feature('mslc1').set('colortable', 'Dipole');
model.result('pg4').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg4').feature('mslc1').set('data', 'parent');
model.result('pg4').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg4').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg4').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg4').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg4').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg4').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg4').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg4').feature('strmsl1').set('titletype', 'none');
model.result('pg4').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg4').feature('strmsl1').set('udist', 0.02);
model.result('pg4').feature('strmsl1').set('maxlen', 0.4);
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('inheritcolor', false);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('data', 'parent');
model.result('pg4').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg4').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg4').feature('strmsl1').feature('col1').set('expr', 'V/es.VexcTerm');
model.result('pg4').feature('strmsl1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg4').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg4').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg4').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Electric Field Norm (es) 1');
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 5, 0);
model.result('pg5').setIndex('looplevel', 14, 1);
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('showlegendsmaxmin', true);
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 5, 0);
model.result('pg5').setIndex('looplevel', 14, 1);
model.result('pg5').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');
model.result('pg5').feature.create('mslc1', 'Multislice');
model.result('pg5').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg5').feature('mslc1').set('solutionparams', 'parent');
model.result('pg5').feature('mslc1').set('expr', 'es.normE');
model.result('pg5').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg5').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg5').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg5').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg5').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg5').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg5').feature('mslc1').set('colortable', 'Prism');
model.result('pg5').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg5').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg5').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg5').feature('mslc1').set('data', 'parent');
model.result('pg5').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg5').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg5').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg5').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg5').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg5').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg5').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg5').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg5').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg5').feature('strmsl1').set('titletype', 'none');
model.result('pg5').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg5').feature('strmsl1').set('udist', 0.02);
model.result('pg5').feature('strmsl1').set('maxlen', 0.4);
model.result('pg5').feature('strmsl1').set('maxtime', Inf);
model.result('pg5').feature('strmsl1').set('inheritcolor', false);
model.result('pg5').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg5').feature('strmsl1').set('maxtime', Inf);
model.result('pg5').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg5').feature('strmsl1').set('maxtime', Inf);
model.result('pg5').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg5').feature('strmsl1').set('maxtime', Inf);
model.result('pg5').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg5').feature('strmsl1').set('maxtime', Inf);
model.result('pg5').feature('strmsl1').set('data', 'parent');
model.result('pg5').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg5').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg5').feature('strmsl1').feature('col1').set('expr', 'es.normE');
model.result('pg5').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg5').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg5').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg5').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg5').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg5').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.evaluationGroup.create('eg4', 'EvaluationGroup');
model.result.evaluationGroup('eg4').set('data', 'dset2');
model.result.evaluationGroup('eg4').label(' (es)');
model.result.evaluationGroup('eg4').label('Inverse Maxwell capacitance (dset2, es)');
model.result.evaluationGroup('eg4').create('gmev1', 'EvalGlobalMatrix');
model.result.evaluationGroup('eg4').feature('gmev1').label('Inverse Maxwell capacitance (dset2, es)');
model.result.evaluationGroup('eg4').feature('gmev1').set('expr', 'root.comp1.es.Cinv');
model.result.evaluationGroup('eg4').feature('gmev1').set('outerdataseries', 'none');
model.result.evaluationGroup('eg4').feature('gmev1').set('dataseries', 'sum');

model.nodeGroup.create('grp2', 'Results');
model.nodeGroup('grp2').label('Lumped Parameters (dset2, es)');
model.nodeGroup('grp2').set('type', 'evaluationgroup');
model.nodeGroup('grp2').add('evaluationgroup', 'eg4');

model.result.evaluationGroup('eg4').setIndex('looplevelinput', 'last', 1);
model.result.evaluationGroup('eg4').run;
model.result.evaluationGroup.create('eg5', 'EvaluationGroup');
model.result.evaluationGroup('eg5').set('data', 'dset2');
model.result.evaluationGroup('eg5').label(' (es)');
model.result.evaluationGroup('eg5').label('Maxwell capacitance (dset2, es)');
model.result.evaluationGroup('eg5').create('gmev1', 'EvalGlobalMatrix');
model.result.evaluationGroup('eg5').feature('gmev1').label('Maxwell capacitance (dset2, es)');
model.result.evaluationGroup('eg5').feature('gmev1').set('expr', 'root.comp1.es.Cinv');
model.result.evaluationGroup('eg5').feature('gmev1').set('outerdataseries', 'none');
model.result.evaluationGroup('eg5').feature('gmev1').set('dataseries', 'sum');
model.result.evaluationGroup('eg5').feature('gmev1').set('trans', 'inverse');

model.nodeGroup('grp2').add('evaluationgroup', 'eg5');

model.result.evaluationGroup('eg5').setIndex('looplevelinput', 'last', 1);
model.result.evaluationGroup('eg5').run;
model.result.evaluationGroup.create('eg6', 'EvaluationGroup');
model.result.evaluationGroup('eg6').set('data', 'dset2');
model.result.evaluationGroup('eg6').label(' (es)');
model.result.evaluationGroup('eg6').label('Mutual capacitance (dset2, es)');
model.result.evaluationGroup('eg6').create('gmev1', 'EvalGlobalMatrix');
model.result.evaluationGroup('eg6').feature('gmev1').label('Mutual capacitance (dset2, es)');
model.result.evaluationGroup('eg6').feature('gmev1').set('expr', 'root.comp1.es.Cinv');
model.result.evaluationGroup('eg6').feature('gmev1').set('outerdataseries', 'none');
model.result.evaluationGroup('eg6').feature('gmev1').set('dataseries', 'sum');
model.result.evaluationGroup('eg6').feature('gmev1').set('trans', 'invmaxwellmutual');

model.nodeGroup('grp2').add('evaluationgroup', 'eg6');

model.result.evaluationGroup('eg6').setIndex('looplevelinput', 'last', 1);
model.result.evaluationGroup('eg6').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').setIndex('looplevel', 1, 1);
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 5, 1);
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 7, 1);
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 13, 1);
model.result('pg4').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').set('data', 'dset2');
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'Relative change of capacitance');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').set('data', 'dset2');
model.result('pg6').feature('glob1').setIndex('looplevelinput', 'first', 0);
model.result('pg6').feature('glob1').set('xdatasolnumtype', 'level2');
model.result('pg6').feature('glob1').setIndex('expr', 'with(1,es.Cinv11)/withsol(''sol3'',with(1,es.Cinv11))', 0);
model.result('pg6').feature('glob1').setIndex('descr', 'Terminal 1', 0);
model.result('pg6').feature('glob1').setIndex('expr', 'with(5,es.Cinv55)/withsol(''sol3'',with(5,es.Cinv55))', 1);
model.result('pg6').feature('glob1').setIndex('descr', 'Terminal 5', 1);
model.result('pg6').feature('glob1').setIndex('expr', 'with(5,es.Cinv55)/with(1,es.Cinv11)/withsol(''sol3'',with(5,es.Cinv55)/with(1,es.Cinv11))', 2);
model.result('pg6').feature('glob1').setIndex('descr', 'Ratio of capacitances for terminal 1 vs. 5', 2);
model.result('pg6').feature('glob1').set('legendmethod', 'manual');
model.result('pg6').feature('glob1').setIndex('legends', 'Change on terminal 1', 0);
model.result('pg6').feature('glob1').setIndex('legends', 'Change on terminal 5', 1);
model.result('pg6').feature('glob1').setIndex('legends', 'Relative change of 1 vs. 5', 2);
model.result('pg6').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 6, 1);
model.result('pg4').run;
model.result('pg4').feature('mslc1').set('multiplanexmethod', 'number');
model.result('pg4').feature('mslc1').set('xnumber', '0');
model.result('pg4').feature('mslc1').set('multiplanezmethod', 'number');
model.result('pg4').feature('mslc1').set('znumber', '0');
model.result('pg4').run;
model.result('pg4').feature('strmsl1').set('multiplanexmethod', 'number');
model.result('pg4').feature('strmsl1').set('xnumber', '0');
model.result('pg4').feature('strmsl1').set('multiplanezmethod', 'number');
model.result('pg4').feature('strmsl1').set('znumber', '0');
model.result('pg4').run;

model.geom('geom1').run('fin');

model.result('pg4').run;
model.result('pg4').run;

model.title('Modeling a Capacitive Position Sensor Using FEM');

model.description(['This tutorial model explains how to extract lumped matrices by means of the Stationary Source Sweep study. The capacitance matrix of a five-terminal system is used to infer the position of a metallic object similar to real-world capacitive position sensors.' newline  newline 'The example illustrates the use of FEM, which is supported by the Electrostatics interface. When FEM is used, a volumetric mesh of a portion of the surrounding air is necessary.' newline  newline 'The model also compares how the study' native2unicode(hex2dec({'20' '19'}), 'unicode') 's performance is affected when using direct and iterative solvers.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;

model.label('capacitive_position_sensor.mph');

model.modelNode.label('Components');

out = model;
