function out = model
%
% membrane_varying_thickness.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Nonlinear_Structural_Materials_Module/Hyperelasticity');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbrn', 'StructuralMembrane', 'geom1');
model.physics('mbrn').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/mbrn', true);

model.param.label('Model Parameters');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('Ri', '10[mm]', 'Radius of cylinder');
model.param.set('Hi', '80[mm]', 'Height of cylinder');
model.param.set('thm', '0.1[mm]', 'Mean thickness of cylinder');
model.param.set('M', '0.5', 'Thickness parameter');
model.param.set('C1', '0.2111[MPa]', ['Mooney' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Rivlin material parameter C1']);
model.param.set('C2', '0.01*C1', ['Mooney' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Rivlin material parameter C2']);
model.param.set('rho_w', '1000[kg/m^3]', 'Density of water');
model.param.set('z_w', '0[mm]', 'Height of water column');
model.param.set('stretch', '2[1]', 'Applied stretch');

model.func.create('step1', 'Step');
model.func('step1').model('comp1');
model.func('step1').set('location', 1);
model.func('step1').set('smooth', 0.008);

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('th', 'thm*(2*(1-M)*Z/Hi+M)', 'Thickness variation');
model.variable('var1').set('w_appl', '(stretch-1)*Hi', 'Axial displacement');
model.variable('var1').set('stch1', 'sqrt(mbrn.Cel11)', 'First principal stretch');
model.variable('var1').set('stch2', 'sqrt(mbrn.Cel22)', 'Second principal stretch');
model.variable('var1').set('stch3', 'sqrt(mbrn.Cel33)', 'Third principal stretch');
model.variable('var1').set('WF', 'C1*(stch1^2+stch2^2+1/(stch1^2*stch2^2)-3)+C2*(1/stch1^2+1/stch2^2+stch1^2*stch2^2-3)', 'Full strain energy, Mooney-Rivlin');
model.variable('var1').set('WR', 'C1*(stch1^2+2/stch1-3)+C2*(1/stch1^2+2*stch1-3)', 'Relaxed strain energy, Mooney-Rivlin');
model.variable('var1').set('WT', 'WF*step1(stch2*sqrt(stch1))+WR*(1-step1(stch2*sqrt(stch1)))', 'Total strain energy, Mooney-Rivlin');
model.variable('var1').set('P', 'rho_w*g_const*z_w*(z_w>(Z+w))', 'Fluid pressure');
model.variable('var1').set('iswrinkled', '(stch2*sqrt(stch1)<=1)', 'Is wrinkled (relaxed strain energy approach)');

model.geom('geom1').create('ls1', 'LineSegment');
model.geom('geom1').feature('ls1').set('specify1', 'coord');
model.geom('geom1').feature('ls1').set('coord1', {'Ri' '0'});
model.geom('geom1').feature('ls1').set('specify2', 'coord');
model.geom('geom1').feature('ls1').set('coord2', {'Ri' 'Hi'});
model.geom('geom1').run('ls1');
model.geom('geom1').run;

model.physics('mbrn').feature('to1').set('d', 'th');
model.physics('mbrn').create('hmm1', 'HyperelasticModel', 1);
model.physics('mbrn').feature('hmm1').selection.set([1]);
model.physics('mbrn').feature('hmm1').label('Hyperelastic Material (Modified Deformation Gradient)');
model.physics('mbrn').feature('hmm1').set('MaterialModel', 'MooneyRivlin');
model.physics('mbrn').feature('hmm1').set('Compressibility_MooneyRivlin', 'Incompressible');
model.physics('mbrn').feature('hmm1').set('C10_mat', 'userdef');
model.physics('mbrn').feature('hmm1').set('C10', 'C1');
model.physics('mbrn').feature('hmm1').set('C01_mat', 'userdef');
model.physics('mbrn').feature('hmm1').set('C01', 'C2');
model.physics('mbrn').feature('hmm1').create('wr1', 'Wrinkling', 1);
model.physics('mbrn').feature('hmm1').feature('wr1').set('termination', 'steporresi');
model.physics('mbrn').create('hmm2', 'HyperelasticModel', 1);
model.physics('mbrn').feature('hmm2').selection.all;
model.physics('mbrn').feature('hmm2').label('Hyperelastic Material (Relaxed Strain Energy)');
model.physics('mbrn').feature('hmm2').set('MaterialModel', 'userDefined');
model.physics('mbrn').feature('hmm2').set('Ws', 'WT');
model.physics('mbrn').create('weak1', 'WeakContribution', 1);
model.physics('mbrn').feature('weak1').selection.set([1]);
model.physics('mbrn').feature('weak1').set('weakExpression', '(-1+mbrn.Jel)*test(mbrn.unn)');
model.physics('mbrn').create('disp1', 'Displacement0', 0);
model.physics('mbrn').feature('disp1').selection.set([1]);
model.physics('mbrn').feature('disp1').setIndex('Direction', 'prescribed', 0);
model.physics('mbrn').feature('disp1').setIndex('Direction', 'prescribed', 2);
model.physics('mbrn').create('disp2', 'Displacement0', 0);
model.physics('mbrn').feature('disp2').label('Prescribed Displacement (Prestretch)');
model.physics('mbrn').feature('disp2').selection.set([2]);
model.physics('mbrn').feature('disp2').setIndex('Direction', 'prescribed', 0);
model.physics('mbrn').feature('disp2').setIndex('Direction', 'prescribed', 2);
model.physics('mbrn').feature('disp2').setIndex('U0', 'w_appl', 2);
model.physics('mbrn').create('fl1', 'FaceLoad', 1);
model.physics('mbrn').feature('fl1').selection.set([1]);
model.physics('mbrn').feature('fl1').set('LoadType', 'FollowerPressure');
model.physics('mbrn').feature('fl1').set('FollowerPressure', 'P');
model.physics('mbrn').feature('fl1').label('Face Load (Fluid Pressure)');

model.mesh('mesh1').autoMeshSize(2);
model.mesh('mesh1').run;

model.study('std1').label('Study (Modified Deformation Gradient)');
model.study('std1').setGenPlots(false);
model.study('std1').feature('stat').label('Prestretch');
model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledphysics', {'mbrn/hmm2' 'mbrn/weak1' 'mbrn/fl1'});
model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat2').label('Inflation');
model.study('std1').feature('stat2').set('useadvanceddisable', true);
model.study('std1').feature('stat2').set('disabledphysics', {'mbrn/hmm2' 'mbrn/weak1'});
model.study('std1').feature('stat2').set('useinitsol', true);
model.study('std1').feature('stat2').set('useparam', true);
model.study('std1').feature('stat2').setIndex('pname', 'Ri', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', 'm', 0);
model.study('std1').feature('stat2').setIndex('pname', 'Ri', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', 'm', 0);
model.study('std1').feature('stat2').setIndex('pname', 'z_w', 0);
model.study('std1').feature('stat2').setIndex('plistarr', 'range(0,5,80)', 0);
model.study('std1').feature('stat2').setIndex('punit', 'mm', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbrn_unn').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbrn_unn').set('scaleval', '1e-3');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.08');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat2');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_mbrn_unn').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_mbrn_unn').set('scaleval', '1e-3');
model.sol('sol1').feature('v2').feature('comp1_u').set('scaleval', '1e-2*0.08');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat2');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('control', 'stat2');
model.sol('sol1').feature('s2').set('control', 'stat2');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s2').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/mbrn', true);
model.study('std2').label('Study (Relaxed Strain Energy)');
model.study('std2').setGenPlots(false);
model.study('std2').feature('stat').label('Prestretch');
model.study('std2').feature('stat').set('useadvanceddisable', true);
model.study('std2').feature('stat').set('disabledphysics', {'mbrn/fl1'});
model.study('std2').create('stat2', 'Stationary');
model.study('std2').feature('stat2').label('Inflation');
model.study('std2').feature('stat2').set('useinitsol', true);
model.study('std2').feature('stat2').set('initmethod', 'sol');
model.study('std2').feature('stat2').set('initstudy', 'std2');
model.study('std2').feature('stat2').set('useparam', true);
model.study('std2').feature('stat2').setIndex('pname', 'Ri', 0);
model.study('std2').feature('stat2').setIndex('plistarr', '', 0);
model.study('std2').feature('stat2').setIndex('punit', 'm', 0);
model.study('std2').feature('stat2').setIndex('pname', 'Ri', 0);
model.study('std2').feature('stat2').setIndex('plistarr', '', 0);
model.study('std2').feature('stat2').setIndex('punit', 'm', 0);
model.study('std2').feature('stat2').setIndex('pname', 'z_w', 0);
model.study('std2').feature('stat2').setIndex('plistarr', 'range(0,5,80)', 0);
model.study('std2').feature('stat2').setIndex('punit', 'mm', 0);

model.sol.create('sol3');
model.sol('sol3').study('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'stat');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').feature('comp1_mbrn_unn').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol3').feature('v1').feature('comp1_mbrn_unn').set('scaleval', '1e-3');
model.sol('sol3').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.08');
model.sol('sol3').feature('v1').set('control', 'stat');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').create('su1', 'StoreSolution');
model.sol('sol3').create('st2', 'StudyStep');
model.sol('sol3').feature('st2').set('study', 'std2');
model.sol('sol3').feature('st2').set('studystep', 'stat2');
model.sol('sol3').create('v2', 'Variables');
model.sol('sol3').feature('v2').feature('comp1_mbrn_unn').set('scalemethod', 'manual');
model.sol('sol3').feature('v2').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol3').feature('v2').feature('comp1_mbrn_unn').set('scaleval', '1e-3');
model.sol('sol3').feature('v2').feature('comp1_u').set('scaleval', '1e-2*0.08');
model.sol('sol3').feature('v2').set('initmethod', 'sol');
model.sol('sol3').feature('v2').set('initsol', 'sol3');
model.sol('sol3').feature('v2').set('initsoluse', 'sol4');
model.sol('sol3').feature('v2').set('notsolmethod', 'sol');
model.sol('sol3').feature('v2').set('notsol', 'sol3');
model.sol('sol3').feature('v2').set('control', 'stat2');
model.sol('sol3').create('s2', 'Stationary');
model.sol('sol3').feature('s2').create('p1', 'Parametric');
model.sol('sol3').feature('s2').feature.remove('pDef');
model.sol('sol3').feature('s2').feature('p1').set('control', 'stat2');
model.sol('sol3').feature('s2').set('control', 'stat2');
model.sol('sol3').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s2').feature('fc1').set('termonres', 'off');
model.sol('sol3').feature('s2').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('s2').feature('fc1').set('termonres', 'off');
model.sol('sol3').feature('s2').feature.remove('fcDef');
model.sol('sol3').feature('v2').set('notsolnum', 'auto');
model.sol('sol3').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol3').feature('v2').set('solnum', 'auto');
model.sol('sol3').feature('v2').set('solvertype', 'solnum');
model.sol('sol3').attach('std2');
model.sol('sol3').runAll;

model.result.dataset.create('dset1mbrnrev', 'Revolve2D');
model.result.dataset('dset1mbrnrev').set('data', 'dset1');
model.result.dataset('dset1mbrnrev').set('revangle', 225);
model.result.dataset('dset1mbrnrev').set('startangle', -90);
model.result.dataset('dset1mbrnrev').set('hasspacevars', true);
model.result.dataset('dset1mbrnrev').set('defaultPlotIDs', {'stress3D|mbrn' 'faceLoads|mbrn'});
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').setIndex('looplevel', 17, 0);
model.result('pg1').set('defaultPlotID', 'stress3D');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').label('Stress, 3D (mbrn)');
model.result('pg1').set('data', 'dset1mbrnrev');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'mbrn.misesGp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('revcoordsys', 'cylindrical');
model.result('pg1').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg1').feature('surf1').feature('def').set('descractive', true);
model.result('pg1').feature('surf1').feature('def').set('scaleactive', true);
model.result('pg1').feature('surf1').feature('def').set('scale', '1');
model.result('pg1').label('Stress, 3D (mbrn)');
model.result('pg1').run;
model.result.dataset('dset1mbrnrev').set('startangle', 0);
model.result.dataset('dset1mbrnrev').set('revangle', 360);
model.result('pg1').run;
model.result('pg1').label('Wrinkled Region');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('titletype', 'custom');
model.result('pg1').set('solutionintitle', false);
model.result('pg1').set('plotarrayenable', true);
model.result('pg1').set('relpadding', 2);
model.result('pg1').feature('surf1').set('arraydim', '1');
model.result('pg1').run;
model.result('pg1').feature('surf1').set('expr', 'mbrn.iswrinkled');
model.result('pg1').feature('surf1').set('descr', 'Is wrinkled');
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('smooth', 'none');
model.result('pg1').feature.duplicate('surf2', 'surf1');
model.result('pg1').feature('surf2').set('arraydim', '1');
model.result('pg1').run;
model.result('pg1').feature('surf2').set('data', 'dset1mbrnrev');
model.result('pg1').feature('surf2').setIndex('looplevel', 5, 0);
model.result('pg1').feature('surf2').set('titletype', 'none');
model.result('pg1').feature('surf2').set('inheritplot', 'surf1');
model.result('pg1').feature.duplicate('surf3', 'surf2');
model.result('pg1').feature('surf3').set('arraydim', '1');
model.result('pg1').run;
model.result('pg1').feature('surf3').setIndex('looplevel', 9, 0);
model.result('pg1').feature.duplicate('surf4', 'surf3');
model.result('pg1').feature('surf4').set('arraydim', '1');
model.result('pg1').run;
model.result('pg1').feature('surf4').setIndex('looplevel', 17, 0);
model.result('pg1').run;
model.result('pg1').create('tlan1', 'TableAnnotation');
model.result('pg1').feature('tlan1').set('arraydim', '1');
model.result('pg1').feature('tlan1').set('source', 'localtable');
model.result('pg1').feature('tlan1').setIndex('localtablematrix', -0.01, 0, 0);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', -0.01, 0, 1);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', 0, 0, 2);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', '\[\textrm{z}_\textrm{w}=\textrm{0[mm]}\]', 0, 3);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', 0.055, 1, 0);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', -0.01, 1, 1);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', 0, 1, 2);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', '\[\textrm{z}_\textrm{w}=\textrm{20[mm]}\]', 1, 3);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', 0.12, 2, 0);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', -0.01, 2, 1);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', 0, 2, 2);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', '\[\textrm{z}_\textrm{w}=\textrm{40[mm]}\]', 2, 3);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', 0.18, 3, 0);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', -0.01, 3, 1);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', 0, 3, 2);
model.result('pg1').feature('tlan1').setIndex('localtablematrix', '\[\textrm{z}_\textrm{w}=\textrm{80[mm]}\]', 3, 3);
model.result('pg1').feature('tlan1').set('latexmarkup', true);
model.result('pg1').feature('tlan1').set('showpoint', false);
model.result('pg1').run;

model.view('view2').set('showgrid', false);

model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').setIndex('looplevel', 17, 0);
model.result('pg2').set('defaultPlotID', 'stress3D');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').label('Stress, 3D (mbrn)');
model.result('pg2').set('data', 'dset1mbrnrev');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'mbrn.misesGp'});
model.result('pg2').feature('surf1').set('threshold', 'manual');
model.result('pg2').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg2').feature('surf1').set('colortable', 'Prism');
model.result('pg2').feature('surf1').set('colortabletrans', 'none');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').feature('surf1').create('def', 'Deform');
model.result('pg2').feature('surf1').feature('def').set('revcoordsys', 'cylindrical');
model.result('pg2').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg2').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg2').feature('surf1').feature('def').set('descractive', true);
model.result('pg2').feature('surf1').feature('def').set('scaleactive', true);
model.result('pg2').feature('surf1').feature('def').set('scale', '1');
model.result('pg2').label('Stress, 3D (mbrn)');
model.result('pg2').run;
model.result('pg2').label('First Principal Stress');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').run;
model.result('pg2').feature('surf1').set('expr', 'mbrn.sp1');
model.result('pg2').feature('surf1').set('unit', 'MPa');
model.result('pg2').run;
model.result('pg2').run;
model.result.duplicate('pg3', 'pg2');
model.result('pg3').run;
model.result('pg3').label('Second Principal Stress');
model.result('pg3').run;
model.result('pg3').feature('surf1').set('expr', 'mbrn.sp2');
model.result('pg3').run;
model.result('pg1').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').add('plotgroup', 'pg1');
model.nodeGroup('grp1').add('plotgroup', 'pg2');
model.nodeGroup('grp1').add('plotgroup', 'pg3');
model.nodeGroup('grp1').label('Modified Deformation Gradient');
model.nodeGroup.duplicate('grp2', 'grp1');
model.nodeGroup('grp2').label('Relaxed Strain Energy');

model.result.dataset.duplicate('dset1mbrnrev1', 'dset1mbrnrev');
model.result.dataset('dset1mbrnrev1').set('data', 'dset3');
model.result('pg4').feature('surf1').set('arraydim', '1');
model.result('pg4').run;
model.result('pg4').feature('surf1').set('expr', 'iswrinkled');
model.result('pg4').feature('surf2').set('arraydim', '1');
model.result('pg4').run;
model.result('pg4').feature('surf2').set('data', 'dset1mbrnrev1');
model.result('pg4').feature('surf2').set('expr', 'iswrinkled');
model.result('pg4').feature('surf3').set('arraydim', '1');
model.result('pg4').run;
model.result('pg4').feature('surf3').set('data', 'dset1mbrnrev1');
model.result('pg4').feature('surf3').set('expr', 'iswrinkled');
model.result('pg4').feature('surf4').set('arraydim', '1');
model.result('pg4').run;
model.result('pg4').feature('surf4').set('data', 'dset1mbrnrev1');
model.result('pg4').feature('surf4').set('expr', 'iswrinkled');
model.result('pg4').run;
model.result('pg4').set('data', 'dset1mbrnrev1');
model.result('pg4').run;
model.result('pg5').run;
model.result('pg5').set('data', 'dset1mbrnrev1');
model.result('pg5').run;
model.result('pg6').run;
model.result('pg6').set('data', 'dset1mbrnrev1');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Third Principal Strain after Prestretch');
model.result('pg7').set('data', 'dset2');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Strain tensor, 33 component (1)');
model.result('pg7').set('legendpos', 'lowerright');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr1').set('linewidth', 'preference');
model.result('pg7').feature('lngr1').selection.set([1]);
model.result('pg7').feature('lngr1').set('expr', 'mbrn.el33');
model.result('pg7').feature('lngr1').set('xdata', 'expr');
model.result('pg7').feature('lngr1').set('xdataexpr', 'Z');
model.result('pg7').feature('lngr1').set('xdataunit', 'mm');
model.result('pg7').feature('lngr1').set('linemarker', 'cycle');
model.result('pg7').feature('lngr1').set('markerpos', 'interp');
model.result('pg7').feature('lngr1').set('markers', 6);
model.result('pg7').feature('lngr1').set('legend', true);
model.result('pg7').feature('lngr1').set('legendmethod', 'manual');
model.result('pg7').feature('lngr1').setIndex('legends', 'Modified Deformation Gradient', 0);
model.result('pg7').feature.duplicate('lngr2', 'lngr1');
model.result('pg7').run;
model.result('pg7').feature('lngr2').set('data', 'dset4');
model.result('pg7').feature('lngr2').set('titletype', 'none');
model.result('pg7').feature('lngr2').set('markers', 8);
model.result('pg7').feature('lngr2').setIndex('legends', 'Relaxed Strain Energy', 0);
model.result('pg7').run;
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('First Principal Stress after Prestretch');
model.result('pg8').set('ylabel', 'First principal stress (MPa)');
model.result('pg8').set('legendpos', 'upperright');
model.result('pg8').run;
model.result('pg8').feature('lngr1').set('expr', 'mbrn.sp1');
model.result('pg8').feature('lngr1').set('unit', 'MPa');
model.result('pg8').run;
model.result('pg8').feature('lngr2').set('expr', 'mbrn.sp1');
model.result('pg8').feature('lngr2').set('unit', 'MPa');
model.result('pg8').run;
model.result('pg8').run;
model.result.duplicate('pg9', 'pg8');
model.result('pg9').run;
model.result('pg9').label('Second Principal Stress after Prestretch');
model.result('pg9').set('ylabel', 'Second principal stress (MPa)');
model.result('pg9').run;
model.result('pg9').feature('lngr1').set('expr', 'mbrn.sp2');
model.result('pg9').run;
model.result('pg9').feature('lngr2').set('expr', 'mbrn.sp2');
model.result('pg9').run;
model.result('pg1').run;

model.title('Wrinkling of Cylindrical Membranes with Varying Thickness');

model.description(['In this example, wrinkling is studied in a nonuniform thick membrane made of an incompressible Mooney' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Rivlin material. Certain portion of the membrane undergoes wrinkling when prestretched and inflated, which disappears depending on the internal pressure.' newline  newline 'The results of the deformation gradient approach is compared with the results of the relaxed strain energy approach.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('membrane_varying_thickness.mph');

model.modelNode.label('Components');

out = model;
