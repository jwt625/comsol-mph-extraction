function out = model
%
% tortuous_reactor.m
%
% Model exported on May 26 2025, 21:27 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Chemical_Reaction_Engineering_Module/Reactors_with_Mass_Transfer');

model.modelNode.create('comp1', true);

model.physics.create('re', 'ReactionEng');
model.physics('re').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/re', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('T_iso', '288[K]', 'Reactor temperature (K)');
model.param.set('H', '5[um]', 'Channel height scale parameter');
model.param.set('c_RBr0', '50[mol/m^3]', 'Inlet concentration, RBr');
model.param.set('c_RH0', '0[mol/m^3]', 'Inlet concentration, RH');
model.param.set('c_RR0', '0[mol/m^3]', 'Inlet concentration, RR');
model.param.set('c_As0_ads', '1e-5[mol/m^2]', 'Surface concentration at inlet, As');
model.param.set('A1', '2e-3[m/s]', 'Frequency factor reaction 1');
model.param.set('A2', '1e-1[m^4/(mol*s)]', 'Frequency factor reaction 2');
model.param.set('E1', '10e3[J/mol]', 'Activation energy reaction 1');
model.param.set('E2', '30e3[J/mol]', 'Activation energy reaction 2');
model.param.set('Mn_RBr', '0.151[kg/mol]', 'Molar mass RBr (C5H11Br)');
model.param.set('Mn_RH', '0.072[kg/mol]', 'Molar mass RH (C5H12)');
model.param.set('Mn_RR', '0.142[kg/mol]', 'Molar mass RR (C10H22)');
model.param.set('Mn_As', '0.195[kg/mol]', 'Molar mass catalyst');
model.param.set('delta_p', '1.5[kPa]', 'Inlet overpressure');
model.param.set('D', '5e-7[m^2/s]*exp(-2000[K]/T_iso)', 'Diffusion coefficient');

model.physics('re').prop('energybalance').set('T', 'T_iso');
model.physics('re').prop('mixture').set('mixture', 'liquid');
model.physics('re').create('rch1', 'ReactionChem', -1);
model.physics('re').feature('rch1').set('formula', 'RBr+AS(ads)=>RH');
model.physics('re').feature('rch1').set('ReactionExpression', 'UserDefined');
model.physics('re').feature('rch1').set('r', 're.kf_1*re.c_RBr');
model.physics('re').feature('rch1').set('surfFwdOrder', 0);
model.physics('re').feature('rch1').set('useArrhenius', true);
model.physics('re').feature('rch1').set('Af', 'A1');
model.physics('re').feature('rch1').set('Ef', 'E1');
model.physics('re').create('rch2', 'ReactionChem', -1);
model.physics('re').feature('rch2').set('formula', '2RBr+AS(ads)=>RR');
model.physics('re').feature('rch2').set('ReactionExpression', 'UserDefined');
model.physics('re').feature('rch2').set('surfFwdOrder', 0);
model.physics('re').feature('rch2').set('r', 're.kf_2*re.c_RBr^2');
model.physics('re').feature('rch2').set('useArrhenius', true);
model.physics('re').feature('rch2').set('Af', 'A2');
model.physics('re').feature('rch2').set('Ef', 'E2');
model.physics('re').feature('AS_surf').set('cLock', true);
model.physics('re').prop('reactor').set('surfaceAreaOptions', 'surfaceAreaToVolumeRatio');
model.physics('re').prop('reactor').set('as', '1/H');
model.physics('re').feature('inits1').setIndex('initialValue', 'c_RBr0', 0, 0);
model.physics('re').feature('inits1').setIndex('initialValue', 'c_RH0', 1, 0);
model.physics('re').feature('inits1').setIndex('initialValue', 'c_RR0', 2, 0);
model.physics('re').feature('inits1').setIndex('initialValues', 'c_As0_ads', 0, 0);

model.study('std1').feature('time').set('useparam', true);
model.study('std1').feature('time').setIndex('pname', 'T_iso', 0);
model.study('std1').feature('time').setIndex('plistarr', '', 0);
model.study('std1').feature('time').setIndex('punit', 'K', 0);
model.study('std1').feature('time').setIndex('pname', 'T_iso', 0);
model.study('std1').feature('time').setIndex('plistarr', '', 0);
model.study('std1').feature('time').setIndex('punit', 'K', 0);
model.study('std1').feature('time').setIndex('plistarr', '288 343 363', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.1,1)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('tout', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 1.0E-5);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('consistent', 'off');
model.sol('sol1').feature('t1').create('tp1', 'TimeParametric');
model.sol('sol1').feature('t1').feature.remove('tpDef');
model.sol('sol1').feature('t1').feature('tp1').set('control', 'time');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').create('glob1', 'Global');
model.result('pg1').feature('glob1').set('expr', {'re.c_RBr' 're.c_RH' 're.c_RR'});
model.result('pg1').feature('glob1').set('descr', {'Concentration' 'Concentration' 'Concentration'});
model.result('pg1').feature('glob1').set('unit', {'' '' ''});
model.result('pg1').feature('glob1').set('expr', {'re.c_RBr' 're.c_RH' 're.c_RR'});
model.result('pg1').feature('glob1').set('descr', {'Concentration' 'Concentration' 'Concentration'});
model.result('pg1').label('Concentration (re)');
model.result('pg1').feature('glob1').set('xdatasolnumtype', 'level1');
model.result('pg1').run;
model.result('pg1').label('Concentrations 0D model');
model.result('pg1').run;
model.result('pg1').feature('glob1').set('data', 'dset1');
model.result('pg1').feature('glob1').set('titletype', 'none');
model.result('pg1').feature('glob1').setIndex('looplevelinput', 'manual', 1);
model.result('pg1').feature('glob1').setIndex('looplevel', [1], 1);
model.result('pg1').feature('glob1').set('linewidth', 2);
model.result('pg1').run;
model.result('pg1').feature('glob1').setIndex('looplevel', [2], 1);
model.result('pg1').run;
model.result('pg1').feature('glob1').setIndex('looplevel', [3], 1);
model.result('pg1').run;

model.physics('re').create('sync1', 'ReactionToMph', -1);
model.physics('re').feature('sync1').set('momentumbalance', 'LaminarFlow');
model.physics('re').prop('synchronize').set('synchronize', '1');

model.modelNode.create('comp2', true);

model.physics('re').feature('sync1').set('model', {'comp2'});

model.geom.create('geom1', 3);
model.geom('geom1').model('comp2');
model.geom('geom1').axisymmetric(false);
model.geom('geom1').label('Geometry 1(3D)');

model.physics('re').feature('sync1').set('genom', {'geom1'});

model.mesh.create('mesh1', 'geom1');

model.study.create('std2');

model.physics('re').feature('sync1').set('studyname', {'std2'});

model.study('std2').create('stat', 'Stationary');

model.physics.create('chem1', 'Chemistry', 'geom1');
model.physics('chem1').model('comp2');
model.physics('re').feature('sync1').set('Chemistry', {'chem1'});
model.physics.create('tds', 'DilutedSpecies', 'geom1');
model.physics('tds').model('comp2');
model.physics('chem1').prop('TPFeatureInput').set('T_src', 'userdef');
model.physics('chem1').prop('TPFeatureInput').set('T', 'T_iso');
model.physics('chem1').prop('mixture').set('mixture', 'liquid');
model.physics('chem1').prop('mixture').set('liquidDensitySel', 'Automatic');
model.physics('chem1').prop('Activity').set('useActivity', '0');
model.physics('chem1').prop('chemkin').set('chemkin', '0');
model.physics('chem1').prop('ChemistryCommonProperty').set('VolumetricConcentrationGlobalActivityStandardState', '1[mol/m^3]');
model.physics('chem1').prop('ChemistryCommonProperty').set('SurfaceSpeciesConcentrationType', 'SurfaceConcentration');
model.physics('chem1').prop('ChemistryCommonProperty').set('SurfaceGlobalActivityStandardState', '1[mol/m^2]');
model.physics('chem1').prop('ChemistryCommonProperty').set('SpeciesrateUserDefinedList', {'AS_surf'});
model.physics('chem1').prop('ChemistryCommonProperty').set('AdditionalSourceFeature', '0');
model.physics('chem1').prop('ActiveSpecies').set('SumActiveSpecies', '4');
model.physics('chem1').prop('ActiveSpecies').set('NumActiveVolumeSpecies', '3');
model.physics('chem1').prop('ActiveSpecies').set('NumActiveSurfaceSpecies', '1');
model.physics('chem1').prop('ActiveSpecies').set('NumActiveSurfaceSpeciesVariable', '1');
model.physics('chem1').prop('ActiveSpecies').set('surface', '1');
model.physics('chem1').prop('solventIsSet').set('solventIsSet', '0');
model.physics('chem1').create('rch1', 'ReactionChem');
model.physics('chem1').feature('rch1').set('rSequenceNo', '1');
model.physics('chem1').feature('rch1').set('formula', 'RBr + AS(ads) => RH');
model.physics('chem1').feature('rch1').set('updatechem', '0');
model.physics('chem1').feature('rch1').set('useArrhenius', '1');
model.physics('chem1').feature('rch1').set('ReactionExpression', 'UserDefined');
model.physics('chem1').feature('rch1').set('r', 'chem.kf_1*chem.c_RBr');
model.physics('chem1').feature('rch1').set('kf', '1');
model.physics('chem1').feature('rch1').set('Af', 'A1');
model.physics('chem1').feature('rch1').set('nf', '0');
model.physics('chem1').feature('rch1').set('Ef', 'E1');
model.physics('chem1').feature('rch1').set('bulkFwdOrder', '1');
model.physics('chem1').feature('rch1').set('surfFwdOrder', '0');
model.physics('chem1').feature('rch1').label('1: Surface: RBr + AS(ads) => RH');
model.physics('chem1').feature('rch1').set('rClass', 'surface');
model.physics('chem1').create('rch2', 'ReactionChem');
model.physics('chem1').feature('rch2').set('rSequenceNo', '2');
model.physics('chem1').feature('rch2').set('formula', '2 RBr + AS(ads) => RR');
model.physics('chem1').feature('rch2').set('updatechem', '0');
model.physics('chem1').feature('rch2').set('useArrhenius', '1');
model.physics('chem1').feature('rch2').set('ReactionExpression', 'UserDefined');
model.physics('chem1').feature('rch2').set('r', 'chem.kf_2*chem.c_RBr^2');
model.physics('chem1').feature('rch2').set('kf', '1');
model.physics('chem1').feature('rch2').set('Af', 'A2');
model.physics('chem1').feature('rch2').set('nf', '0');
model.physics('chem1').feature('rch2').set('Ef', 'E2');
model.physics('chem1').feature('rch2').set('bulkFwdOrder', '2');
model.physics('chem1').feature('rch2').set('surfFwdOrder', '0');
model.physics('chem1').feature('rch2').label('2: Surface: 2 RBr + AS(ads) => RR');
model.physics('chem1').feature('rch2').set('rClass', 'surface');
model.physics('chem1').feature('RBr').set('SpeciesSource', 'Reaction');
model.physics('chem1').feature('RBr').set('sisDef', '1');
model.physics('chem1').feature('RBr').set('specLabel', 'RBr');
model.physics('chem1').feature('RBr').set('speciesNameInput', 'RBr');
model.physics('chem1').feature('RBr').set('specName', 'RBr');
model.physics('chem1').feature('RBr').set('enableChemicalFormulaCheckbox', '0');
model.physics('chem1').feature('RBr').set('chemicalFormula', '');
model.physics('chem1').feature('RBr').set('sType', 'volumetric');
model.physics('chem1').feature('RBr').set('M', '0.0[kg/mol]');
model.physics('chem1').feature('RBr').set('z', '0');
model.physics('chem1').feature('RBr').set('sigma', '3.458[angstrom]');
model.physics('chem1').feature('RBr').set('epsilonkb', '107.4[K]');
model.physics('chem1').feature('RBr').set('mu', '0[C*m]');
model.physics('chem1').feature('RBr').set('rho', '1000[kg/m^3]');
model.physics('chem1').feature('RBr').set('k', '0.02[W/(m*K)]');
model.physics('chem1').feature('RBr').set('ActivityCoefficient', '1');
model.physics('chem1').feature('RBr').set('cLock', '0');
model.physics('chem1').feature('RBr').set('Dependent', '0');
model.physics('chem1').feature('RBr').set('dependent', '0');
model.physics('chem1').feature('RBr').set('SpeciesrateSelection', 'Automatic');
model.physics('chem1').feature('RBr').set('speciesEnthalpy', 'NASA');
model.physics('chem1').feature('RBr').set('Tlo', '300[K]');
model.physics('chem1').feature('RBr').set('Tmid', '1000[K]');
model.physics('chem1').feature('RBr').set('Thi', '5000[K]');
model.physics('chem1').feature('RBr').set('SpeciesThermoaLo1', {'0'});
model.physics('chem1').feature('RBr').set('SpeciesThermoaLo2', {'0'});
model.physics('chem1').feature('RBr').set('SpeciesThermoaLo3', {'0'});
model.physics('chem1').feature('RBr').set('SpeciesThermoaLo4', {'0'});
model.physics('chem1').feature('RBr').set('SpeciesThermoaLo5', {'0'});
model.physics('chem1').feature('RBr').set('SpeciesThermoaLo6', {'0'});
model.physics('chem1').feature('RBr').set('SpeciesThermoaLo7', {'0'});
model.physics('chem1').feature('RBr').set('SpeciesThermoaHi1', {'0'});
model.physics('chem1').feature('RBr').set('SpeciesThermoaHi2', {'0'});
model.physics('chem1').feature('RBr').set('SpeciesThermoaHi3', {'0'});
model.physics('chem1').feature('RBr').set('SpeciesThermoaHi4', {'0'});
model.physics('chem1').feature('RBr').set('SpeciesThermoaHi5', {'0'});
model.physics('chem1').feature('RBr').set('SpeciesThermoaHi6', {'0'});
model.physics('chem1').feature('RBr').set('SpeciesThermoaHi7', {'0'});
model.physics('chem1').feature('AS_surf').set('SpeciesSource', 'Reaction');
model.physics('chem1').feature('AS_surf').set('sisDef', '1');
model.physics('chem1').feature('AS_surf').set('specLabel', 'AS(ads)');
model.physics('chem1').feature('AS_surf').set('speciesNameInput', 'AS(ads)');
model.physics('chem1').feature('AS_surf').set('specName', 'AS(ads)');
model.physics('chem1').feature('AS_surf').set('enableChemicalFormulaCheckbox', '0');
model.physics('chem1').feature('AS_surf').set('chemicalFormula', '');
model.physics('chem1').feature('AS_surf').set('sType', 'surface');
model.physics('chem1').feature('AS_surf').set('M', '0.0[kg/mol]');
model.physics('chem1').feature('AS_surf').set('z', '0');
model.physics('chem1').feature('AS_surf').set('sigma', '3.458[angstrom]');
model.physics('chem1').feature('AS_surf').set('epsilonkb', '107.4[K]');
model.physics('chem1').feature('AS_surf').set('mu', '0[C*m]');
model.physics('chem1').feature('AS_surf').set('rho', '1000[kg/m^3]');
model.physics('chem1').feature('AS_surf').set('k', '0.02[W/(m*K)]');
model.physics('chem1').feature('AS_surf').set('ActivityCoefficient', '1');
model.physics('chem1').feature('AS_surf').set('cLock', '1');
model.physics('chem1').feature('AS_surf').set('Dependent', '0');
model.physics('chem1').feature('AS_surf').set('dependent', '2');
model.physics('chem1').feature('AS_surf').set('SpeciesrateSelection', 'Automatic');
model.physics('chem1').feature('AS_surf').set('speciesEnthalpy', 'NASA');
model.physics('chem1').feature('AS_surf').set('Tlo', '300[K]');
model.physics('chem1').feature('AS_surf').set('Tmid', '1000[K]');
model.physics('chem1').feature('AS_surf').set('Thi', '5000[K]');
model.physics('chem1').feature('AS_surf').set('SpeciesThermoaLo1', {'0'});
model.physics('chem1').feature('AS_surf').set('SpeciesThermoaLo2', {'0'});
model.physics('chem1').feature('AS_surf').set('SpeciesThermoaLo3', {'0'});
model.physics('chem1').feature('AS_surf').set('SpeciesThermoaLo4', {'0'});
model.physics('chem1').feature('AS_surf').set('SpeciesThermoaLo5', {'0'});
model.physics('chem1').feature('AS_surf').set('SpeciesThermoaLo6', {'0'});
model.physics('chem1').feature('AS_surf').set('SpeciesThermoaLo7', {'0'});
model.physics('chem1').feature('AS_surf').set('SpeciesThermoaHi1', {'0'});
model.physics('chem1').feature('AS_surf').set('SpeciesThermoaHi2', {'0'});
model.physics('chem1').feature('AS_surf').set('SpeciesThermoaHi3', {'0'});
model.physics('chem1').feature('AS_surf').set('SpeciesThermoaHi4', {'0'});
model.physics('chem1').feature('AS_surf').set('SpeciesThermoaHi5', {'0'});
model.physics('chem1').feature('AS_surf').set('SpeciesThermoaHi6', {'0'});
model.physics('chem1').feature('AS_surf').set('SpeciesThermoaHi7', {'0'});
model.physics('chem1').feature('RH').set('SpeciesSource', 'Reaction');
model.physics('chem1').feature('RH').set('sisDef', '1');
model.physics('chem1').feature('RH').set('specLabel', 'RH');
model.physics('chem1').feature('RH').set('speciesNameInput', 'RH');
model.physics('chem1').feature('RH').set('specName', 'RH');
model.physics('chem1').feature('RH').set('enableChemicalFormulaCheckbox', '0');
model.physics('chem1').feature('RH').set('chemicalFormula', '');
model.physics('chem1').feature('RH').set('sType', 'volumetric');
model.physics('chem1').feature('RH').set('M', '0.0[kg/mol]');
model.physics('chem1').feature('RH').set('z', '0');
model.physics('chem1').feature('RH').set('sigma', '3.458[angstrom]');
model.physics('chem1').feature('RH').set('epsilonkb', '107.4[K]');
model.physics('chem1').feature('RH').set('mu', '0[C*m]');
model.physics('chem1').feature('RH').set('rho', '1000[kg/m^3]');
model.physics('chem1').feature('RH').set('k', '0.02[W/(m*K)]');
model.physics('chem1').feature('RH').set('ActivityCoefficient', '1');
model.physics('chem1').feature('RH').set('cLock', '0');
model.physics('chem1').feature('RH').set('Dependent', '0');
model.physics('chem1').feature('RH').set('dependent', '0');
model.physics('chem1').feature('RH').set('SpeciesrateSelection', 'Automatic');
model.physics('chem1').feature('RH').set('speciesEnthalpy', 'NASA');
model.physics('chem1').feature('RH').set('Tlo', '300[K]');
model.physics('chem1').feature('RH').set('Tmid', '1000[K]');
model.physics('chem1').feature('RH').set('Thi', '5000[K]');
model.physics('chem1').feature('RH').set('SpeciesThermoaLo1', {'0'});
model.physics('chem1').feature('RH').set('SpeciesThermoaLo2', {'0'});
model.physics('chem1').feature('RH').set('SpeciesThermoaLo3', {'0'});
model.physics('chem1').feature('RH').set('SpeciesThermoaLo4', {'0'});
model.physics('chem1').feature('RH').set('SpeciesThermoaLo5', {'0'});
model.physics('chem1').feature('RH').set('SpeciesThermoaLo6', {'0'});
model.physics('chem1').feature('RH').set('SpeciesThermoaLo7', {'0'});
model.physics('chem1').feature('RH').set('SpeciesThermoaHi1', {'0'});
model.physics('chem1').feature('RH').set('SpeciesThermoaHi2', {'0'});
model.physics('chem1').feature('RH').set('SpeciesThermoaHi3', {'0'});
model.physics('chem1').feature('RH').set('SpeciesThermoaHi4', {'0'});
model.physics('chem1').feature('RH').set('SpeciesThermoaHi5', {'0'});
model.physics('chem1').feature('RH').set('SpeciesThermoaHi6', {'0'});
model.physics('chem1').feature('RH').set('SpeciesThermoaHi7', {'0'});
model.physics('chem1').feature('RR').set('SpeciesSource', 'Reaction');
model.physics('chem1').feature('RR').set('sisDef', '1');
model.physics('chem1').feature('RR').set('specLabel', 'RR');
model.physics('chem1').feature('RR').set('speciesNameInput', 'RR');
model.physics('chem1').feature('RR').set('specName', 'RR');
model.physics('chem1').feature('RR').set('enableChemicalFormulaCheckbox', '0');
model.physics('chem1').feature('RR').set('chemicalFormula', '');
model.physics('chem1').feature('RR').set('sType', 'volumetric');
model.physics('chem1').feature('RR').set('M', '0.0[kg/mol]');
model.physics('chem1').feature('RR').set('z', '0');
model.physics('chem1').feature('RR').set('sigma', '3.458[angstrom]');
model.physics('chem1').feature('RR').set('epsilonkb', '107.4[K]');
model.physics('chem1').feature('RR').set('mu', '0[C*m]');
model.physics('chem1').feature('RR').set('rho', '1000[kg/m^3]');
model.physics('chem1').feature('RR').set('k', '0.02[W/(m*K)]');
model.physics('chem1').feature('RR').set('ActivityCoefficient', '1');
model.physics('chem1').feature('RR').set('cLock', '0');
model.physics('chem1').feature('RR').set('Dependent', '0');
model.physics('chem1').feature('RR').set('dependent', '0');
model.physics('chem1').feature('RR').set('SpeciesrateSelection', 'Automatic');
model.physics('chem1').feature('RR').set('speciesEnthalpy', 'NASA');
model.physics('chem1').feature('RR').set('Tlo', '300[K]');
model.physics('chem1').feature('RR').set('Tmid', '1000[K]');
model.physics('chem1').feature('RR').set('Thi', '5000[K]');
model.physics('chem1').feature('RR').set('SpeciesThermoaLo1', {'0'});
model.physics('chem1').feature('RR').set('SpeciesThermoaLo2', {'0'});
model.physics('chem1').feature('RR').set('SpeciesThermoaLo3', {'0'});
model.physics('chem1').feature('RR').set('SpeciesThermoaLo4', {'0'});
model.physics('chem1').feature('RR').set('SpeciesThermoaLo5', {'0'});
model.physics('chem1').feature('RR').set('SpeciesThermoaLo6', {'0'});
model.physics('chem1').feature('RR').set('SpeciesThermoaLo7', {'0'});
model.physics('chem1').feature('RR').set('SpeciesThermoaHi1', {'0'});
model.physics('chem1').feature('RR').set('SpeciesThermoaHi2', {'0'});
model.physics('chem1').feature('RR').set('SpeciesThermoaHi3', {'0'});
model.physics('chem1').feature('RR').set('SpeciesThermoaHi4', {'0'});
model.physics('chem1').feature('RR').set('SpeciesThermoaHi5', {'0'});
model.physics('chem1').feature('RR').set('SpeciesThermoaHi6', {'0'});
model.physics('chem1').feature('RR').set('SpeciesThermoaHi7', {'0'});
model.physics('chem1').prop('simpropChem').set('rSequenceNo', '2');
model.physics('chem1').prop('simpropChem').set('sSequenceNo', '4');
model.physics('chem1').prop('mixture').set('hasPropertyPackage', '0');
model.physics('chem1').prop('mixture').set('PropertyPackage', '');
model.physics('chem1').prop('mixture').set('Thermodynamics', '0');
model.physics('tds').field('concentration').component({'cRBr' 'cRH' 'cRR'});
model.physics('tds').feature('init1').set('initc', {'c_RBr0' 'c_RH0' 'c_RR0'});
model.physics('tds').feature.create('reac1', 'Reactions');
model.physics('tds').feature('reac1').selection.all;
model.physics('tds').feature('reac1').set('ReactingVolumeType', 'TotalVolume');
model.physics('tds').feature.create('srf1', 'SurfaceReactionsFlux');
model.physics('tds').feature.create('fd1', 'FluxDiscontinuity');
model.physics('chem1').prop('ChemistryModelInputParameter').set('MassTransfer', 'tds');
model.physics('chem1').prop('ChemistryModelInputParameter').set('ConcentrationInput', {'cRBr' 'cRH' 'cRR'});
model.physics('chem1').prop('ChemistryModelInputParameter').set('ConcentrationValue', {'Solved for' 'Solved for' 'Solved for'});
model.physics('chem1').prop('ChemistryModelInputParameter').set('uselog', {'cRBr' 'cRH' 'cRR'});
model.physics('chem1').prop('ChemistryModelInputParameter').set('SolidConcentration', {});
model.physics('chem1').prop('ChemistryModelInputParameter').set('csurf', {'c_As0_ads'});
model.physics('chem1').prop('ChemistryModelInputParameter').set('AqueousSpeciesConcentration', {});
model.physics('tds').feature('sp1').set('z', {'0' '0' '0'});
model.physics('tds').feature('cdm1').set('Dchem_cRBr', '1e-9[m^2/s]');
model.physics('tds').feature('cdm1').set('D_cRBr', '1e-9[m^2/s]');
model.physics('tds').feature('cdm1').set('Dchem_cRH', '1e-9[m^2/s]');
model.physics('tds').feature('cdm1').set('D_cRH', '1e-9[m^2/s]');
model.physics('tds').feature('cdm1').set('Dchem_cRR', '1e-9[m^2/s]');
model.physics('tds').feature('cdm1').set('D_cRR', '1e-9[m^2/s]');
model.physics('tds').feature('reac1').setIndex('R_cRBr_src', 'root.comp2.chem.R_RBr', 0);
model.physics('tds').feature('reac1').setIndex('R_cRH_src', 'root.comp2.chem.R_RH', 0);
model.physics('tds').feature('reac1').setIndex('R_cRR_src', 'root.comp2.chem.R_RR', 0);
model.physics('tds').feature('srf1').setIndex('J0_cRBr_src', 'root.comp2.chem.Rsurf_RBr', 0);
model.physics('tds').feature('srf1').setIndex('J0_cRH_src', 'root.comp2.chem.Rsurf_RH', 0);
model.physics('tds').feature('srf1').setIndex('J0_cRR_src', 'root.comp2.chem.Rsurf_RR', 0);
model.physics('tds').feature('fd1').setIndex('species', '1', 0);
model.physics('tds').feature('fd1').setIndex('N0', 'root.comp2.chem.Rsurf_RBr', 0);
model.physics('tds').feature('fd1').setIndex('species', '1', 1);
model.physics('tds').feature('fd1').setIndex('N0', 'root.comp2.chem.Rsurf_RH', 1);
model.physics('tds').feature('fd1').setIndex('species', '1', 2);
model.physics('tds').feature('fd1').setIndex('N0', 'root.comp2.chem.Rsurf_RR', 2);
model.physics.create('spf1', 'LaminarFlow', 'geom1');
model.physics('spf1').model('comp2');
model.physics('spf1').prop('PhysicalModelProperty').set('Compressibility', 'Incompressible');
model.physics('re').feature('sync1').set('geomToUse', 'geom1');
model.physics('re').feature('sync1').set('massbalance', 'tds');
model.physics('tds').feature('cdm1').set('u_src', 'root.comp2.u');
model.physics('tds').feature('cdm1').set('minput_pressure_src', 'root.comp2.spf.pA');
model.physics('re').feature('sync1').set('momentumbalance', 'spf1');
model.physics('chem1').prop('TPFeatureInput').set('p_src', 'root.comp2.spf.pA');
model.physics('re').feature('sync1').set('genom', {'geom1'});
model.physics('re').feature('sync1').set('studyname', {'std2'});
model.physics('chem1').prop('StudyStep').set('StudyStep', 'std2/stat');
model.physics('chem1').feature('dcont1').set('StudyStep', 'std2/stat');
model.physics('chem1').feature('rch1').set('StudyStep', 'std2/stat');
model.physics('chem1').feature('RBr').set('StudyStep', 'std2/stat');
model.physics('chem1').feature('AS_surf').set('StudyStep', 'std2/stat');
model.physics('chem1').feature('RH').set('StudyStep', 'std2/stat');
model.physics('chem1').feature('rch2').set('StudyStep', 'std2/stat');
model.physics('chem1').feature('RR').set('StudyStep', 'std2/stat');
model.physics('tds').prop('StudyStep').set('StudyStep', 'std2/stat');
model.physics('tds').feature('sp1').set('StudyStep', 'std2/stat');
model.physics('tds').feature('cdm1').set('StudyStep', 'std2/stat');
model.physics('tds').feature('nflx1').set('StudyStep', 'std2/stat');
model.physics('tds').feature('init1').set('StudyStep', 'std2/stat');
model.physics('tds').feature('dcont1').set('StudyStep', 'std2/stat');
model.physics('tds').feature('reac1').set('StudyStep', 'std2/stat');
model.physics('tds').feature('srf1').set('StudyStep', 'std2/stat');
model.physics('tds').feature('fd1').set('StudyStep', 'std2/stat');
model.physics('spf1').prop('StudyStep').set('StudyStep', 'std2/stat');
model.physics('spf1').feature('fp1').set('StudyStep', 'std2/stat');
model.physics('spf1').feature('init1').set('StudyStep', 'std2/stat');
model.physics('spf1').feature('wallbc1').set('StudyStep', 'std2/stat');
model.physics('spf1').feature('grav1').set('StudyStep', 'std2/stat');
model.physics('spf1').feature('dcont1').set('StudyStep', 'std2/stat');

model.study('std1').feature('time').setSolveFor('/physics/chem1', false);
model.study('std1').feature('time').setSolveFor('/physics/tds', false);
model.study('std1').feature('time').setSolveFor('/physics/spf1', false);
model.study('std2').feature('stat').setSolveFor('/physics/re', false);

model.geom('geom1').insertFile('tortuous_reactor_geom_sequence.mph', 'geom1');
model.geom('geom1').run('difsel1');

model.material.create('mat1', 'Common', 'comp2');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').label('Analytic ');
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');

model.physics('chem1').feature('RBr').set('M', 'Mn_RBr');
model.physics('chem1').feature('AS_surf').set('M', 'Mn_As');
model.physics('chem1').feature('RH').set('M', 'Mn_RH');
model.physics('chem1').feature('RR').set('M', 'Mn_RR');
model.physics('tds').feature('cdm1').set('D_cRBr', {'D' '0' '0' '0' 'D' '0' '0' '0' 'D'});
model.physics('tds').feature('cdm1').set('D_cRH', {'D' '0' '0' '0' 'D' '0' '0' '0' 'D'});
model.physics('tds').feature('cdm1').set('D_cRR', {'D' '0' '0' '0' 'D' '0' '0' '0' 'D'});
model.physics('tds').feature('srf1').selection.named('geom1_boxsel1');
model.physics('tds').create('conc1', 'Concentration', 2);
model.physics('tds').feature('conc1').selection.named('geom1_sel1');
model.physics('tds').feature('conc1').setIndex('species', true, 0);
model.physics('tds').feature('conc1').setIndex('c0', 'c_RBr0', 0);
model.physics('tds').feature('conc1').setIndex('species', true, 1);
model.physics('tds').feature('conc1').setIndex('c0', 'c_RH0', 1);
model.physics('tds').feature('conc1').setIndex('species', true, 2);
model.physics('tds').feature('conc1').setIndex('c0', 'c_RR0', 2);
model.physics('tds').create('out1', 'Outflow', 2);
model.physics('tds').feature('out1').selection.named('geom1_sel2');
model.physics('tds').feature.remove('reac1');
model.physics('tds').feature.remove('fd1');
model.physics('spf1').feature('fp1').set('minput_temperature_src', 'userdef');
model.physics('spf1').feature('fp1').set('minput_temperature', 'T_iso');
model.physics('spf1').create('inl1', 'InletBoundary', 2);
model.physics('spf1').feature('inl1').selection.named('geom1_sel1');
model.physics('spf1').feature('inl1').set('BoundaryCondition', 'Pressure');
model.physics('spf1').feature('inl1').set('p0', 'delta_p');
model.physics('spf1').create('out1', 'OutletBoundary', 2);
model.physics('spf1').feature('out1').selection.named('geom1_sel2');

model.multiphysics.create('rfd1', 'ReactingFlowDS', 'geom1', 3);

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.set([8]);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 1);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.named('geom1_csel1_dom');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 6);
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.named('geom1_csel2_dom');
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', 2);
model.mesh('mesh1').run;

model.study('std2').feature('stat').setEntry('activate', 'tds', false);
model.study('std2').feature('stat').set('useparam', true);
model.study('std2').feature('stat').setIndex('pname', 'T_iso', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'K', 0);
model.study('std2').feature('stat').setIndex('pname', 'T_iso', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'K', 0);
model.study('std2').feature('stat').setIndex('plistarr', '288 343 363', 0);
model.study('std2').create('stat2', 'Stationary');
model.study('std2').feature('stat2').setEntry('activate', 'spf1', false);
model.study('std2').feature('stat2').set('useparam', true);
model.study('std2').feature('stat2').setIndex('pname', 'T_iso', 0);
model.study('std2').feature('stat2').setIndex('plistarr', '', 0);
model.study('std2').feature('stat2').setIndex('punit', 'K', 0);
model.study('std2').feature('stat2').setIndex('pname', 'T_iso', 0);
model.study('std2').feature('stat2').setIndex('plistarr', '', 0);
model.study('std2').feature('stat2').setIndex('punit', 'K', 0);
model.study('std2').feature('stat2').setIndex('plistarr', '288 343 363', 0);
model.study('std2').feature('stat2').set('usesol', true);
model.study('std2').feature('stat2').set('notsolmethod', 'sol');
model.study('std2').feature('stat2').set('notstudy', 'std2');
model.study('std2').feature('stat2').set('notsolnum', 'all');

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol2').feature('s1').set('control', 'stat');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('d1').label('Direct, fluid flow variables (spf1)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol2').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('s1').feature('i1').label('AMG, fluid flow variables (spf1)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').create('st2', 'StudyStep');
model.sol('sol2').feature('st2').set('study', 'std2');
model.sol('sol2').feature('st2').set('studystep', 'stat2');
model.sol('sol2').create('v2', 'Variables');
model.sol('sol2').feature('v2').set('initmethod', 'sol');
model.sol('sol2').feature('v2').set('initsol', 'sol2');
model.sol('sol2').feature('v2').set('notsolmethod', 'sol');
model.sol('sol2').feature('v2').set('notsol', 'sol2');
model.sol('sol2').feature('v2').set('control', 'stat2');
model.sol('sol2').create('s2', 'Stationary');
model.sol('sol2').feature('s2').set('stol', 0.001);
model.sol('sol2').feature('s2').create('p1', 'Parametric');
model.sol('sol2').feature('s2').feature.remove('pDef');
model.sol('sol2').feature('s2').feature('p1').set('control', 'stat2');
model.sol('sol2').feature('s2').set('control', 'stat2');
model.sol('sol2').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol2').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol2').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('s2').create('d1', 'Direct');
model.sol('sol2').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s2').feature('d1').label('Direct, concentrations (tds)');
model.sol('sol2').feature('s2').create('i1', 'Iterative');
model.sol('sol2').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('s2').feature('i1').set('rhob', 400);
model.sol('sol2').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol2').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('s2').feature('i1').label('AMG, concentrations (tds)');
model.sol('sol2').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol2').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol2').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol2').feature('s2').feature.remove('fcDef');
model.sol('sol2').feature('v2').set('notsolnum', 'all');
model.sol('sol2').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol2').feature('v2').set('solnum', 'auto');
model.sol('sol2').feature('v2').set('solvertype', 'solnum');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 3, 0);
model.result('pg2').label('Concentration, RBr, Streamline (tds)');
model.result('pg2').set('titletype', 'custom');
model.result('pg2').set('typeintitle', true);
model.result('pg2').set('prefixintitle', 'Species RBr:');
model.result('pg2').create('str1', 'Streamline');
model.result('pg2').feature('str1').set('expr', {'tds.tflux_cRBrx' 'tds.tflux_cRBry' 'tds.tflux_cRBrz'});
model.result('pg2').feature('str1').set('posmethod', 'start');
model.result('pg2').feature('str1').set('pointtype', 'arrow');
model.result('pg2').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg2').feature('str1').set('color', 'gray');
model.result('pg2').feature('str1').create('col', 'Color');
model.result('pg2').feature('str1').feature('col').set('expr', 'cRBr');
model.result('pg2').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 3, 0);
model.result('pg3').label('Concentration, RBr, Surface (tds)');
model.result('pg3').set('titletype', 'custom');
model.result('pg3').set('prefixintitle', 'Species RBr:');
model.result('pg3').set('expressionintitle', false);
model.result('pg3').set('typeintitle', false);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'cRBr'});
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 3, 0);
model.result('pg4').label('Concentration, RH, Streamline (tds)');
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('typeintitle', true);
model.result('pg4').set('prefixintitle', 'Species RH:');
model.result('pg4').create('str1', 'Streamline');
model.result('pg4').feature('str1').set('expr', {'tds.tflux_cRHx' 'tds.tflux_cRHy' 'tds.tflux_cRHz'});
model.result('pg4').feature('str1').set('posmethod', 'start');
model.result('pg4').feature('str1').set('pointtype', 'arrow');
model.result('pg4').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg4').feature('str1').set('color', 'gray');
model.result('pg4').feature('str1').create('col', 'Color');
model.result('pg4').feature('str1').feature('col').set('expr', 'cRH');
model.result('pg4').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 3, 0);
model.result('pg5').label('Concentration, RH, Surface (tds)');
model.result('pg5').set('titletype', 'custom');
model.result('pg5').set('prefixintitle', 'Species RH:');
model.result('pg5').set('expressionintitle', false);
model.result('pg5').set('typeintitle', false);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'cRH'});
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset2');
model.result('pg6').setIndex('looplevel', 3, 0);
model.result('pg6').label('Concentration, RR, Streamline (tds)');
model.result('pg6').set('titletype', 'custom');
model.result('pg6').set('typeintitle', true);
model.result('pg6').set('prefixintitle', 'Species RR:');
model.result('pg6').create('str1', 'Streamline');
model.result('pg6').feature('str1').set('expr', {'tds.tflux_cRRx' 'tds.tflux_cRRy' 'tds.tflux_cRRz'});
model.result('pg6').feature('str1').set('posmethod', 'start');
model.result('pg6').feature('str1').set('pointtype', 'arrow');
model.result('pg6').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg6').feature('str1').set('color', 'gray');
model.result('pg6').feature('str1').create('col', 'Color');
model.result('pg6').feature('str1').feature('col').set('expr', 'cRR');
model.result('pg6').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset2');
model.result('pg7').setIndex('looplevel', 3, 0);
model.result('pg7').label('Concentration, RR, Surface (tds)');
model.result('pg7').set('titletype', 'custom');
model.result('pg7').set('prefixintitle', 'Species RR:');
model.result('pg7').set('expressionintitle', false);
model.result('pg7').set('typeintitle', false);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'cRR'});
model.result.dataset('dset2').set('geom', 'geom1');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').label('Velocity (spf1)');
model.result('pg8').set('frametype', 'spatial');
model.result('pg8').set('data', 'dset2');
model.result('pg8').setIndex('looplevel', 3, 0);
model.result('pg8').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg8').feature.create('slc1', 'Slice');
model.result('pg8').feature('slc1').label('Slice');
model.result('pg8').feature('slc1').set('showsolutionparams', 'on');
model.result('pg8').feature('slc1').set('expr', 'spf.U');
model.result('pg8').feature('slc1').set('smooth', 'internal');
model.result('pg8').feature('slc1').set('showsolutionparams', 'on');
model.result('pg8').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset2');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([1 2 3 4 5 7 9 10 12 13 14 15 16 17 18 20 21 22 23 24 26 27 28 29 30 32 33 35 36 37 38 39 41 42 44 45 46 47 48 50 51 52 53 54 56 57 58 59 60 62 63 65 66 67 68 69 71 72 74 75 76 77 78 80 81 82 83 84 86 87 88 89 90 92 93 95 96 97 98 99 100 101 102 103 104 106 107 110 111 112]);
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').label('Pressure (spf1)');
model.result('pg9').set('data', 'surf1');
model.result('pg9').setIndex('looplevel', 3, 0);
model.result('pg9').set('frametype', 'spatial');
model.result('pg9').set('data', 'surf1');
model.result('pg9').setIndex('looplevel', 3, 0);
model.result('pg9').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond2/pcond1/pg4');
model.result('pg9').feature.create('surf1', 'Surface');
model.result('pg9').feature('surf1').label('Surface');
model.result('pg9').feature('surf1').set('showsolutionparams', 'on');
model.result('pg9').feature('surf1').set('expr', 'p');
model.result('pg9').feature('surf1').set('colortable', 'Dipole');
model.result('pg9').feature('surf1').set('smooth', 'internal');
model.result('pg9').feature('surf1').set('showsolutionparams', 'on');
model.result('pg9').feature('surf1').set('data', 'parent');
model.result('pg9').feature('surf1').feature.create('tran1', 'Transparency');
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').set('titletype', 'none');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').run;
model.result('pg3').feature('surf1').set('colortable', 'Prism');
model.result('pg3').feature('surf1').set('colortabletype', 'discrete');
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').run;
model.result('pg8').run;
model.result('pg8').set('showlegendsunit', true);
model.result('pg8').run;
model.result('pg8').feature('slc1').set('titletype', 'none');
model.result('pg8').feature('slc1').set('quickplane', 'xy');
model.result('pg8').feature('slc1').set('quickznumber', 1);
model.result('pg8').run;

model.study('std1').feature('time').setEntry('activate', 'chem1', false);
model.study('std1').feature('time').setEntry('activate', 'tds', false);
model.study('std1').feature('time').setEntry('activate', 'spf1', false);

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.set([31]);
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').selection.geom('geom1', 2);
model.cpl('intop2').selection.set([40]);
model.cpl.create('intop3', 'Integration', 'geom1');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').selection.geom('geom1', 2);
model.cpl('intop3').selection.set([61]);
model.cpl.create('intop4', 'Integration', 'geom1');
model.cpl('intop4').set('axisym', true);
model.cpl('intop4').selection.geom('geom1', 2);
model.cpl('intop4').selection.set([70]);
model.cpl.create('intop5', 'Integration', 'geom1');
model.cpl('intop5').set('axisym', true);
model.cpl('intop5').selection.geom('geom1', 2);
model.cpl('intop5').selection.set([91]);
model.cpl.create('intop6', 'Integration', 'geom1');
model.cpl('intop6').set('axisym', true);
model.cpl('intop6').selection.geom('geom1', 2);
model.cpl('intop6').selection.set([85]);

model.sol('sol2').updateSolution;

model.result('pg2').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Concentration of RBr');
model.result.evaluationGroup.create('eg2', 'EvaluationGroup');
model.result.evaluationGroup('eg2').label('Concentration of RH');
model.result.evaluationGroup.create('eg3', 'EvaluationGroup');
model.result.evaluationGroup('eg3').label('Concentration of RR');
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').set('data', 'dset2');
model.result.evaluationGroup('eg1').feature('gev1').setIndex('looplevelinput', 'last', 0);
model.result.evaluationGroup('eg1').feature('gev1').set('expr', {});
model.result.evaluationGroup('eg1').feature('gev1').set('descr', {});
model.result.evaluationGroup('eg1').feature('gev1').set('expr', {'intop1(tds.ntflux_cRBr)/intop1(v*spf.ny)' 'intop2(tds.ntflux_cRBr)/intop1(v*spf.ny)' 'intop3(tds.ntflux_cRBr)/intop1(v*spf.ny)' 'intop4(tds.ntflux_cRBr)/intop1(v*spf.ny)' 'intop5(tds.ntflux_cRBr)/intop1(v*spf.ny)' '-intop6(tds.ntflux_cRBr)/intop1(v*spf.ny)'});
model.result.evaluationGroup('eg1').feature('gev1').set('descr', {'RBr concentration at boundary entering first catalytic section' 'RBr concentration at boundary entering second catalytic section' 'RBr concentration at boundary entering third catalytic section' 'RBr concentration at boundary entering fourth catalytic section' 'RBr concentration at boundary entering fifth catalytic section' 'RBr concentration at boundary after last catalytic section'});
model.result.evaluationGroup('eg1').set('transpose', true);
model.result.evaluationGroup('eg1').set('includeparameters', false);
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup('eg2').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg2').feature('gev1').set('data', 'dset2');
model.result.evaluationGroup('eg2').feature('gev1').setIndex('looplevelinput', 'last', 0);
model.result.evaluationGroup('eg2').feature('gev1').set('expr', {});
model.result.evaluationGroup('eg2').feature('gev1').set('descr', {});
model.result.evaluationGroup('eg2').feature('gev1').set('expr', {'intop1(tds.ntflux_cRH)/intop1(v*spf.ny)' 'intop2(tds.ntflux_cRH)/intop1(v*spf.ny)' 'intop3(tds.ntflux_cRH)/intop1(v*spf.ny)' 'intop4(tds.ntflux_cRH)/intop1(v*spf.ny)' 'intop5(tds.ntflux_cRH)/intop1(v*spf.ny)' '-intop6(tds.ntflux_cRH)/intop1(v*spf.ny)'});
model.result.evaluationGroup('eg2').feature('gev1').set('descr', {'RH concentration at boundary entering first catalytic section' 'RH concentration at boundary entering second catalytic section' 'RH concentration at boundary entering third catalytic section' 'RH concentration at boundary entering fourth catalytic section' 'RH concentration at boundary entering fifth catalytic section' 'RH concentration at boundary after last catalytic section'});
model.result.evaluationGroup('eg2').set('transpose', true);
model.result.evaluationGroup('eg2').set('includeparameters', false);
model.result.evaluationGroup('eg2').run;
model.result.evaluationGroup('eg3').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg3').feature('gev1').set('data', 'dset2');
model.result.evaluationGroup('eg3').feature('gev1').setIndex('looplevelinput', 'last', 0);
model.result.evaluationGroup('eg3').feature('gev1').set('expr', {});
model.result.evaluationGroup('eg3').feature('gev1').set('descr', {});
model.result.evaluationGroup('eg3').feature('gev1').set('expr', {'intop1(tds.ntflux_cRR)/intop1(v*spf.ny)' 'intop2(tds.ntflux_cRR)/intop1(v*spf.ny)' 'intop3(tds.ntflux_cRR)/intop1(v*spf.ny)' 'intop4(tds.ntflux_cRR)/intop1(v*spf.ny)' 'intop5(tds.ntflux_cRR)/intop1(v*spf.ny)' '-intop6(tds.ntflux_cRR)/intop1(v*spf.ny)'});
model.result.evaluationGroup('eg3').feature('gev1').set('descr', {'RR concentration at boundary entering first catalytic section' 'RR concentration at boundary entering second catalytic section' 'RR concentration at boundary entering third catalytic section' 'RR concentration at boundary entering fourth catalytic section' 'RR concentration at boundary entering fifth catalytic section' 'RR concentration at boundary after last catalytic section'});
model.result.evaluationGroup('eg3').set('transpose', true);
model.result.evaluationGroup('eg3').set('includeparameters', false);
model.result.evaluationGroup('eg3').run;

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.geom('geom1', 2);
model.cpl('aveop1').selection.set([31]);

model.sol('sol2').updateSolution;

model.result('pg2').run;
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('0D versus 3D concentrations');
model.result('pg10').set('data', 'none');
model.result('pg10').set('titletype', 'none');
model.result('pg10').set('xlabelactive', true);
model.result('pg10').set('xlabel', 'Reactor length (\mu m)');
model.result('pg10').set('ylabelactive', true);
model.result('pg10').set('ylabel', 'Concentration (mol/m<sup>3</sup>)');
model.result('pg10').create('glob1', 'Global');
model.result('pg10').feature('glob1').set('markerpos', 'datapoints');
model.result('pg10').feature('glob1').set('linewidth', 'preference');
model.result('pg10').feature('glob1').set('data', 'dset1');
model.result('pg10').feature('glob1').setIndex('looplevelinput', 'last', 1);
model.result('pg10').feature('glob1').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg10').feature('glob1').setIndex('looplevelindices', 'range(1,1,90)', 0);
model.result('pg10').feature('glob1').set('xdata', 'expr');
model.result('pg10').feature('glob1').set('xdataexpr', 't*withsol(''sol3'',comp2.aveop1(-comp2.v*comp2.spf.ny))');
model.result('pg10').feature('glob1').set('linewidth', 2);
model.result('pg10').feature('glob1').set('legendmethod', 'manual');
model.result('pg10').feature('glob1').setIndex('legends', 'RBr', 0);
model.result('pg10').feature('glob1').setIndex('legends', 'RH', 1);
model.result('pg10').feature('glob1').setIndex('legends', 'RR', 2);
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').create('tblp1', 'Table');
model.result('pg10').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg10').feature('tblp1').set('linewidth', 'preference');
model.result('pg10').feature('tblp1').set('source', 'evaluationgroup');
model.result('pg10').feature('tblp1').set('xaxisdata', 'rowindex');
model.result('pg10').feature('tblp1').set('preprocx', 'linear');
model.result('pg10').feature('tblp1').set('scalingx', 80);
model.result('pg10').feature('tblp1').set('shiftx', -80);
model.result('pg10').feature('tblp1').set('linecolor', 'blue');
model.result('pg10').feature('tblp1').set('linemarker', 'point');
model.result('pg10').feature.duplicate('tblp2', 'tblp1');
model.result('pg10').run;
model.result('pg10').feature('tblp2').set('evaluationgroup', 'eg2');
model.result('pg10').feature('tblp2').set('linecolor', 'green');
model.result('pg10').feature.duplicate('tblp3', 'tblp2');
model.result('pg10').run;
model.result('pg10').feature('tblp3').set('evaluationgroup', 'eg3');
model.result('pg10').feature('tblp3').set('linecolor', 'red');
model.result('pg10').run;
model.result('pg10').run;
model.result('pg2').run;
model.result.remove('pg2');
model.result.remove('pg4');
model.result.remove('pg6');
model.result('pg3').run;

model.title('Hydrocarbon Dehalogenation in a Tortuous Microreactor');

model.description('This example shows hydrocarbon dehalogenation as it occurs in a tortuous microreactor. The reactants are transported from the fluid bulk to the catalytic surfaces at the reactor walls, where they react. Both a space-independent model, analyzing two competing reactions using the Reaction Engineering interface, and a space-dependent model, that includes fluid flow and mass transport, are set up and solved.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('tortuous_reactor.mph');

model.modelNode.label('Components');

out = model;
