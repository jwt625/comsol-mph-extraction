function out = model
%
% forced_air_cooling_with_heat_sink.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Applications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransferInSolidsAndFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics('ht').prop('ShapeProperty').set('order_temperature', '1');
model.physics.create('spf', 'TurbulentFlowAlgebraicYplus', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'WeaklyCompressible');

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 3);
model.multiphysics('nitf1').set('Fluid_physics', 'spf');
model.multiphysics('nitf1').set('Heat_physics', 'ht');

model.study.create('std1');
model.study('std1').create('wdi', 'WallDistanceInitialization');
model.study('std1').feature('wdi').set('solnum', 'auto');
model.study('std1').feature('wdi').set('notsolnum', 'auto');
model.study('std1').feature('wdi').set('outputmap', {});
model.study('std1').feature('wdi').set('ngenAUX', '1');
model.study('std1').feature('wdi').set('goalngenAUX', '1');
model.study('std1').feature('wdi').set('ngenAUX', '1');
model.study('std1').feature('wdi').set('goalngenAUX', '1');
model.study('std1').feature('wdi').setSolveFor('/physics/ht', true);
model.study('std1').feature('wdi').setSolveFor('/physics/spf', true);
model.study('std1').feature('wdi').setSolveFor('/multiphysics/nitf1', true);
model.study('std1').feature('wdi').setSolveFor('/physics/ht', false);
model.study('std1').feature('wdi').setSolveFor('/multiphysics/nitf1', false);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/nitf1', true);

model.param.set('width', '3[cm]');
model.param.descr('width', 'Heat sink width');
model.param.set('depth', '3[cm]');
model.param.descr('depth', 'Heat sink depth');
model.param.set('th', '5[mm]');
model.param.descr('th', 'Heat sink base thickness');
model.param.set('chamf_r', '2[mm]');
model.param.descr('chamf_r', 'Chamfer radius');
model.param.set('fillet_r_i', '2[mm]');
model.param.descr('fillet_r_i', 'Fillet radius');
model.param.set('surf_width_i', 'width-chamf_r*2');
model.param.descr('surf_width_i', 'Upper surface width, heat sink');
model.param.set('surf_depth_i', 'depth-chamf_r*2');
model.param.descr('surf_depth_i', 'Upper surface depth, heat sink');
model.param.set('fin_h_i', '1.0[cm]');
model.param.descr('fin_h_i', 'Height of fins');
model.param.set('fin_th_i', '1.5[mm]');
model.param.descr('fin_th_i', 'Fin thickness');
model.param.set('fin_n_i', '4');
model.param.descr('fin_n_i', 'Number of fins');
model.param.set('pin_n_width_i', '5');
model.param.descr('pin_n_width_i', 'Number of pins in width');
model.param.set('pin_n_depth_i', '5');
model.param.descr('pin_n_depth_i', 'Number of pins in depth');
model.param.set('pin_rot_i', '1');
model.param.descr('pin_rot_i', 'Parameter for rotating the hexagonal pin by 30 degrees');
model.param.set('pin_th_i', '2.0[mm]');
model.param.descr('pin_th_i', 'Pin thickness');
model.param.set('box_spacing_depth', '0.5[cm]');
model.param.descr('box_spacing_depth', 'Spacing between heat sink and lateral sides of the box');
model.param.set('box_spacing_inlet', '2.0[cm]');
model.param.descr('box_spacing_inlet', 'Spacing between heat sink and inlet');
model.param.set('box_spacing_outlet', '6.0[cm]');
model.param.descr('box_spacing_outlet', 'Spacing between heat sink and outlet');
model.param.set('box_spacing_height', '0.5[cm]');
model.param.descr('box_spacing_height', 'Spacing between heat sink and top side of the box');
model.param.set('box_length', 'width+box_spacing_inlet+box_spacing_outlet');
model.param.descr('box_length', 'Box length');
model.param.set('box_width', 'depth+2*box_spacing_depth');
model.param.descr('box_width', 'Box width');
model.param.set('box_height', 'th+fin_h_i+box_spacing_height');
model.param.descr('box_height', 'Box height');
model.param.set('T_amb', '22[degC]');
model.param.descr('T_amb', 'Ambient temperature');
model.param.set('T_source', '100[degC]');
model.param.descr('T_source', 'Heat source temperature');
model.param.set('h_c', '300[W/(m^2*K)]');
model.param.descr('h_c', 'Heat transfer coefficient between heat sink and heat source');
model.param.set('u0', '1.0[m/s]');
model.param.descr('u0', 'Inlet velocity');
model.param.set('sol_tol', '1e-3');
model.param.descr('sol_tol', 'Nonlinear solver tolerance');

model.geom.create('part1', 'Part', 3);
model.geom('part1').inputParam.set('surf_width', '2.25[cm]');
model.geom('part1').inputParam.descr('surf_width', 'Upper surface width, heat sink');
model.geom('part1').inputParam.set('surf_depth', '2.25[cm]');
model.geom('part1').inputParam.descr('surf_depth', 'Upper surface depth, heat sink');
model.geom('part1').inputParam.set('fillet_r', '2.0[mm]');
model.geom('part1').inputParam.descr('fillet_r', 'Fillet radius');
model.geom('part1').inputParam.set('fin_h', '1.0[cm]');
model.geom('part1').inputParam.descr('fin_h', 'Fin height');
model.geom('part1').inputParam.set('fin_th', '1.0[mm]');
model.geom('part1').inputParam.descr('fin_th', 'Fin thickness');
model.geom('part1').inputParam.set('fin_n', '7');
model.geom('part1').inputParam.descr('fin_n', 'Number of fins');
model.geom('part1').localParam.set('spacing_width', '(surf_width-fillet_r)/fin_n');
model.geom('part1').localParam.descr('spacing_width', 'Spacing in width');
model.geom('part1').localParam.set('spacing_depth', '(surf_depth-fillet_r)/fin_n');
model.geom('part1').localParam.descr('spacing_depth', 'Spacing in depth');
model.geom('part1').localParam.set('fin_width', 'surf_width-spacing_width');
model.geom('part1').localParam.descr('fin_width', 'Fin width');
model.geom('part1').create('wp1', 'WorkPlane');
model.geom('part1').feature('wp1').set('unite', true);
model.geom('part1').feature('wp1').geom.create('e1', 'Ellipse');
model.geom('part1').feature('wp1').geom.feature('e1').set('semiaxes', {'fin_width/2' '1'});
model.geom('part1').feature('wp1').geom.feature('e1').setIndex('semiaxes', 'fin_th/2', 1);
model.geom('part1').feature('wp1').geom.feature('e1').set('pos', {'0' '-surf_depth/2+spacing_depth/2+fillet_r/2'});
model.geom('part1').feature('wp1').geom.run('e1');
model.geom('part1').feature('wp1').geom.create('arr1', 'Array');
model.geom('part1').feature('wp1').geom.feature('arr1').selection('input').set({'e1'});
model.geom('part1').feature('wp1').geom.feature('arr1').set('type', 'linear');
model.geom('part1').feature('wp1').geom.feature('arr1').set('linearsize', 'fin_n');
model.geom('part1').feature('wp1').geom.feature('arr1').set('displ', {'0' 'spacing_depth'});
model.geom('part1').feature('wp1').geom.run('arr1');
model.geom('part1').run('wp1');
model.geom('part1').feature.create('ext1', 'Extrude');
model.geom('part1').feature('ext1').setIndex('distance', 'fin_h', 0);
model.geom('part1').feature('ext1').set('crossfaces', false);
model.geom('part1').run('ext1');
model.geom.create('part2', 'Part', 3);
model.geom('part2').inputParam.set('surf_width', '2.25[cm]');
model.geom('part2').inputParam.descr('surf_width', 'Upper surface width, heat sink');
model.geom('part2').inputParam.set('surf_depth', '2.25[cm]');
model.geom('part2').inputParam.descr('surf_depth', 'Upper surface depth, heat sink');
model.geom('part2').inputParam.set('fillet_r', '2.0[mm]');
model.geom('part2').inputParam.descr('fillet_r', 'Fillet radius');
model.geom('part2').inputParam.set('fin_h', '1.0[cm]');
model.geom('part2').inputParam.descr('fin_h', 'Fin height');
model.geom('part2').inputParam.set('fin_th', '1.0[mm]');
model.geom('part2').inputParam.descr('fin_th', 'Fin thickness');
model.geom('part2').inputParam.set('fin_n', '7');
model.geom('part2').inputParam.descr('fin_n', 'Number of fins');
model.geom('part2').localParam.set('spacing_width', '(surf_width-fillet_r)/fin_n');
model.geom('part2').localParam.descr('spacing_width', 'Spacing in width');
model.geom('part2').localParam.set('spacing_depth', '(surf_depth-fillet_r)/fin_n');
model.geom('part2').localParam.descr('spacing_depth', 'Spacing in depth');
model.geom('part2').localParam.set('fin_width', 'surf_width-spacing_width');
model.geom('part2').localParam.descr('fin_width', 'Fin width');
model.geom('part2').create('blk1', 'Block');
model.geom('part2').feature('blk1').set('size', {'fin_width' 'fin_th' '1'});
model.geom('part2').feature('blk1').setIndex('size', 'fin_h', 2);
model.geom('part2').feature('blk1').set('base', 'center');
model.geom('part2').feature('blk1').set('pos', {'0' '-surf_depth/2+spacing_depth/2+fillet_r/2' '0'});
model.geom('part2').feature('blk1').setIndex('pos', 'fin_h/2', 2);
model.geom('part2').run('blk1');
model.geom('part2').create('arr1', 'Array');
model.geom('part2').feature('arr1').selection('input').set({'blk1'});
model.geom('part2').feature('arr1').set('type', 'linear');
model.geom('part2').feature('arr1').set('linearsize', 'fin_n');
model.geom('part2').feature('arr1').set('displ', {'0' 'spacing_depth' '0'});
model.geom('part2').run('arr1');
model.geom('part2').create('uni1', 'Union');
model.geom('part2').feature('uni1').selection('input').set({'arr1'});
model.geom('part2').run('uni1');
model.geom.create('part3', 'Part', 3);
model.geom('part3').inputParam.set('surf_width', '2.25[cm]');
model.geom('part3').inputParam.descr('surf_width', 'Upper surface width, heat sink');
model.geom('part3').inputParam.set('surf_depth', '2.25[cm]');
model.geom('part3').inputParam.descr('surf_depth', 'Upper surface depth, heat sink');
model.geom('part3').inputParam.set('fillet_r', '2.0[mm]');
model.geom('part3').inputParam.descr('fillet_r', 'Fillet radius');
model.geom('part3').inputParam.set('fin_h', '1.0[cm]');
model.geom('part3').inputParam.descr('fin_h', 'Fin height');
model.geom('part3').inputParam.set('pin_th', '2.0[mm]');
model.geom('part3').inputParam.descr('pin_th', 'Pin thickness');
model.geom('part3').inputParam.set('pin_n_width', '5');
model.geom('part3').inputParam.descr('pin_n_width', 'Number of pins in width');
model.geom('part3').inputParam.set('pin_n_depth', '5');
model.geom('part3').inputParam.descr('pin_n_depth', 'Number of pins in depth');
model.geom('part3').localParam.set('spacing_width', '(surf_width-fillet_r)/pin_n_width');
model.geom('part3').localParam.descr('spacing_width', 'Spacing in width');
model.geom('part3').localParam.set('spacing_depth', '(surf_depth-fillet_r)/pin_n_depth');
model.geom('part3').localParam.descr('spacing_depth', 'Spacing in depth');
model.geom('part3').create('blk1', 'Block');
model.geom('part3').feature('blk1').set('size', {'pin_th' 'pin_th' '1'});
model.geom('part3').feature('blk1').setIndex('size', 'fin_h', 2);
model.geom('part3').feature('blk1').set('base', 'center');
model.geom('part3').feature('blk1').set('pos', {'-surf_width/2+spacing_width/2+fillet_r/2' '0' '0'});
model.geom('part3').feature('blk1').setIndex('pos', '-surf_depth/2+spacing_depth/2+fillet_r/2', 1);
model.geom('part3').feature('blk1').setIndex('pos', 'fin_h/2', 2);
model.geom('part3').run('blk1');
model.geom('part3').create('arr1', 'Array');
model.geom('part3').feature('arr1').selection('input').set({'blk1'});
model.geom('part3').feature('arr1').set('fullsize', {'pin_n_width' '1' '1'});
model.geom('part3').feature('arr1').setIndex('fullsize', 'pin_n_depth', 1);
model.geom('part3').feature('arr1').set('displ', {'spacing_width' '0' '0'});
model.geom('part3').feature('arr1').setIndex('displ', 'spacing_depth', 1);
model.geom('part3').run('arr1');
model.geom('part3').create('uni1', 'Union');
model.geom('part3').feature('uni1').selection('input').set({'arr1'});
model.geom('part3').run('uni1');
model.geom.create('part4', 'Part', 3);
model.geom('part4').inputParam.set('surf_width', '2.25[cm]');
model.geom('part4').inputParam.descr('surf_width', 'Upper surface width, heat sink');
model.geom('part4').inputParam.set('surf_depth', '2.25[cm]');
model.geom('part4').inputParam.descr('surf_depth', 'Upper surface depth, heat sink');
model.geom('part4').inputParam.set('fillet_r', '2.0[mm]');
model.geom('part4').inputParam.descr('fillet_r', 'Fillet radius');
model.geom('part4').inputParam.set('fin_h', '1.0[cm]');
model.geom('part4').inputParam.descr('fin_h', 'Fin height');
model.geom('part4').inputParam.set('pin_th', '2.0[mm]');
model.geom('part4').inputParam.descr('pin_th', 'Pin thickness');
model.geom('part4').inputParam.set('pin_n_width', '5');
model.geom('part4').inputParam.descr('pin_n_width', 'Number of pins in width');
model.geom('part4').inputParam.set('pin_n_depth', '5');
model.geom('part4').inputParam.descr('pin_n_depth', 'Number of pins in depth');
model.geom('part4').localParam.set('spacing_width', '(surf_width-fillet_r)/pin_n_width');
model.geom('part4').localParam.descr('spacing_width', 'Spacing in width');
model.geom('part4').localParam.set('spacing_depth', '(surf_depth-fillet_r)/pin_n_depth');
model.geom('part4').localParam.descr('spacing_depth', 'Spacing in depth');
model.geom('part4').create('cyl1', 'Cylinder');
model.geom('part4').feature('cyl1').set('r', 'pin_th/2');
model.geom('part4').feature('cyl1').set('h', 'fin_h');
model.geom('part4').feature('cyl1').set('pos', {'-surf_width/2+spacing_width/2+fillet_r/2' '0' '0'});
model.geom('part4').feature('cyl1').setIndex('pos', '-surf_depth/2+spacing_depth/2+fillet_r/2', 1);
model.geom('part4').run('cyl1');
model.geom('part4').create('arr1', 'Array');
model.geom('part4').feature('arr1').selection('input').set({'cyl1'});
model.geom('part4').feature('arr1').set('fullsize', {'pin_n_width' '1' '1'});
model.geom('part4').feature('arr1').setIndex('fullsize', 'pin_n_depth', 1);
model.geom('part4').feature('arr1').set('displ', {'spacing_width' '0' '0'});
model.geom('part4').feature('arr1').setIndex('displ', 'spacing_depth', 1);
model.geom('part4').run('arr1');
model.geom('part4').create('uni1', 'Union');
model.geom('part4').feature('uni1').selection('input').set({'arr1'});
model.geom('part4').run('uni1');
model.geom.create('part5', 'Part', 3);
model.geom('part5').inputParam.set('surf_width', '2.25[cm]');
model.geom('part5').inputParam.descr('surf_width', 'Upper surface width, heat sink');
model.geom('part5').inputParam.set('surf_depth', '2.25[cm]');
model.geom('part5').inputParam.descr('surf_depth', 'Upper surface depth, heat sink');
model.geom('part5').inputParam.set('fillet_r', '2.0[mm]');
model.geom('part5').inputParam.descr('fillet_r', 'Fillet radius');
model.geom('part5').inputParam.set('fin_h', '1.0[cm]');
model.geom('part5').inputParam.descr('fin_h', 'Fin height');
model.geom('part5').inputParam.set('pin_th', '2.0[mm]');
model.geom('part5').inputParam.descr('pin_th', 'Pin thickness');
model.geom('part5').inputParam.set('pin_n_width', '5');
model.geom('part5').inputParam.descr('pin_n_width', 'Number of pins in width');
model.geom('part5').inputParam.set('pin_n_depth', '5');
model.geom('part5').inputParam.descr('pin_n_depth', 'Number of pins in depth');
model.geom('part5').inputParam.set('pin_rot', '1');
model.geom('part5').inputParam.descr('pin_rot', 'Parameter for rotating the hexagonal pin by 30 degrees');
model.geom('part5').localParam.set('spacing_width', '(surf_width-fillet_r)/pin_n_width');
model.geom('part5').localParam.descr('spacing_width', 'Spacing in width');
model.geom('part5').localParam.set('spacing_depth', '(surf_depth-fillet_r)/pin_n_depth');
model.geom('part5').localParam.descr('spacing_depth', 'Spacing in depth');
model.geom('part5').create('wp1', 'WorkPlane');
model.geom('part5').feature('wp1').set('unite', true);
model.geom('part5').feature('wp1').geom.create('pol1', 'Polygon');
model.geom('part5').feature('wp1').geom.feature('pol1').set('source', 'vectors');
model.geom('part5').feature('wp1').geom.feature('pol1').set('x', 'pin_th/2*cos({range(0,pi/3,2*pi)})');
model.geom('part5').feature('wp1').geom.feature('pol1').set('y', 'pin_th/2*sin({range(0,pi/3,2*pi)})');
model.geom('part5').feature('wp1').geom.run('pol1');
model.geom('part5').feature('wp1').geom.create('rot1', 'Rotate');
model.geom('part5').feature('wp1').geom.feature('rot1').selection('input').set({'pol1'});
model.geom('part5').feature('wp1').geom.feature('rot1').set('rot', '30*pin_rot');
model.geom('part5').feature('wp1').geom.run('rot1');
model.geom('part5').feature('wp1').geom.create('mov1', 'Move');
model.geom('part5').feature('wp1').geom.feature('mov1').selection('input').set({'rot1'});
model.geom('part5').feature('wp1').geom.feature('mov1').set('displx', '-surf_width/2+spacing_width/2+fillet_r/2');
model.geom('part5').feature('wp1').geom.feature('mov1').set('disply', '-surf_depth/2+spacing_depth/2+fillet_r/2');
model.geom('part5').feature('wp1').geom.run('mov1');
model.geom('part5').feature('wp1').geom.create('arr1', 'Array');
model.geom('part5').feature('wp1').geom.feature('arr1').selection('input').set({'mov1'});
model.geom('part5').feature('wp1').geom.feature('arr1').set('fullsize', {'pin_n_width' '1'});
model.geom('part5').feature('wp1').geom.feature('arr1').setIndex('fullsize', 'pin_n_depth', 1);
model.geom('part5').feature('wp1').geom.feature('arr1').set('displ', {'spacing_width' '0'});
model.geom('part5').feature('wp1').geom.feature('arr1').setIndex('displ', 'spacing_depth', 1);
model.geom('part5').feature('wp1').geom.run('arr1');
model.geom('part5').run('wp1');
model.geom('part5').feature.create('ext1', 'Extrude');
model.geom('part5').feature('ext1').setIndex('distance', 'fin_h', 0);
model.geom('part5').feature('ext1').set('crossfaces', false);
model.geom('part5').run('ext1');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', {'surf_width_i' '1'});
model.geom('geom1').feature('wp1').geom.feature('r1').setIndex('size', 'surf_depth_i', 1);
model.geom('geom1').feature('wp1').geom.feature('r1').set('base', 'center');
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').feature('wp1').geom.create('if1', 'If');
model.geom('geom1').feature('wp1').geom.feature.createAfter('endif1', 'EndIf', 'if1');
model.geom('geom1').feature('wp1').geom.feature('if1').set('condition', 'fillet_r_i>0');
model.geom('geom1').feature('wp1').geom.create('fil1', 'Fillet');
model.geom('geom1').feature('wp1').geom.feature('fil1').selection('pointinsketch').set('r1', [1 2 3 4]);
model.geom('geom1').feature('wp1').geom.feature('fil1').set('radius', 'fillet_r_i');
model.geom('geom1').feature('wp1').geom.run('endif1');
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').setIndex('distance', 'th', 0);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Heat Sink');
model.geom('geom1').feature('ext1').set('contributeto', 'csel1');
model.geom('geom1').run('ext1');
model.geom('geom1').create('if1', 'If');
model.geom('geom1').feature.createAfter('endif1', 'EndIf', 'if1');
model.geom('geom1').feature('if1').set('condition', 'chamf_r>0');
model.geom('geom1').create('wp2', 'WorkPlane');
model.geom('geom1').feature('wp2').set('unite', true);
model.geom('geom1').feature('wp2').set('quickplane', 'xz');
model.geom('geom1').feature('wp2').set('quicky', '-depth/2+fillet_r_i+chamf_r');
model.geom('geom1').feature('wp2').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp2').geom.feature('r1').set('size', {'chamf_r' 'th'});
model.geom('geom1').feature('wp2').geom.feature('r1').set('pos', {'-width/2' '0'});
model.geom('geom1').feature('wp2').geom.run('r1');
model.geom('geom1').feature('wp2').geom.create('cha1', 'Chamfer');
model.geom('geom1').feature('wp2').geom.feature('cha1').selection('pointinsketch').set('r1', 4);
model.geom('geom1').feature('wp2').geom.feature('cha1').set('dist', 'chamf_r');
model.geom('geom1').feature('wp2').geom.run('cha1');
model.geom('geom1').run('wp2');
model.geom('geom1').feature.create('ext2', 'Extrude');
model.geom('geom1').feature('ext2').setIndex('distance', '-(depth-2*fillet_r_i-2*chamf_r)', 0);
model.geom('geom1').feature('ext2').set('crossfaces', false);
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Edge');
model.geom('geom1').feature('ext2').set('contributeto', 'csel2');
model.geom('geom1').run('ext2');
model.geom('geom1').create('wp3', 'WorkPlane');
model.geom('geom1').feature('wp3').set('unite', true);
model.geom('geom1').feature('wp3').set('quickplane', 'yz');
model.geom('geom1').feature('wp3').set('quickx', '-width/2+fillet_r_i+chamf_r');
model.geom('geom1').feature('wp3').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp3').geom.feature('r1').set('size', {'chamf_r' 'th'});
model.geom('geom1').feature('wp3').geom.feature('r1').set('pos', {'-depth/2' '0'});
model.geom('geom1').feature('wp3').geom.run('r1');
model.geom('geom1').feature('wp3').geom.create('cha1', 'Chamfer');
model.geom('geom1').feature('wp3').geom.feature('cha1').selection('pointinsketch').set('r1', 4);
model.geom('geom1').feature('wp3').geom.feature('cha1').set('dist', 'chamf_r');
model.geom('geom1').feature('wp3').geom.run('cha1');
model.geom('geom1').run('wp3');
model.geom('geom1').feature.create('ext3', 'Extrude');
model.geom('geom1').feature('ext3').setIndex('distance', 'width-2*fillet_r_i-2*chamf_r', 0);
model.geom('geom1').feature('ext3').set('crossfaces', false);
model.geom('geom1').feature('ext3').set('contributeto', 'csel2');
model.geom('geom1').run('ext3');
model.geom('geom1').create('if2', 'If');
model.geom('geom1').feature.createAfter('endif2', 'EndIf', 'if2');
model.geom('geom1').feature('if2').set('condition', 'fillet_r_i>0');
model.geom('geom1').run('if2');
model.geom('geom1').feature.create('rev1', 'Revolve');
model.geom('geom1').feature('rev1').set('angtype', 'full');
model.geom('geom1').feature('rev1').set('revolvefrom', 'faces');
model.geom('geom1').feature('rev1').selection('inputface').set('ext2', 5);
model.geom('geom1').feature('rev1').set('angtype', 'specang');
model.geom('geom1').feature('rev1').set('angle2', 90);
model.geom('geom1').feature('rev1').set('pos', {'chamf_r/2+fillet_r_i' '0'});
model.geom('geom1').feature('rev1').set('contributeto', 'csel2');
model.geom('geom1').run('rev1');
model.geom('geom1').feature.create('rev2', 'Revolve');
model.geom('geom1').feature('rev2').set('angtype', 'full');
model.geom('geom1').feature('rev2').set('revolvefrom', 'faces');
model.geom('geom1').feature('rev2').selection('inputface').set('ext3', 1);
model.geom('geom1').feature('rev2').set('angtype', 'specang');
model.geom('geom1').feature('rev2').set('angle2', 90);
model.geom('geom1').feature('rev2').set('pos', {'chamf_r/2+fillet_r_i' '0'});
model.geom('geom1').feature('rev2').set('contributeto', 'csel2');
model.geom('geom1').run('rev2');
model.geom('geom1').create('rot1', 'Rotate');
model.geom('geom1').feature('rot1').selection('input').set({'rev1' 'rev2'});
model.geom('geom1').feature('rot1').set('keep', true);
model.geom('geom1').feature('rot1').set('rot', 180);
model.geom('geom1').feature('rot1').set('contributeto', 'csel2');
model.geom('geom1').run('rot1');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'ext1' 'rev1' 'rev2' 'rot1'});
model.geom('geom1').feature('uni1').set('intbnd', false);
model.geom('geom1').feature('uni1').set('contributeto', 'csel1');
model.geom('geom1').run('uni1');
model.geom('geom1').create('elseif1', 'ElseIf');
model.geom('geom1').feature('elseif1').set('condition', 'fillet_r_i==0');
model.geom('geom1').run('elseif1');
model.geom('geom1').feature.create('ext4', 'Extrude');
model.geom('geom1').feature('ext4').set('extrudefrom', 'faces');
model.geom('geom1').feature('ext4').selection('inputface').set('ext2', 5);
model.geom('geom1').feature('ext4').set('inputhandling', 'keep');
model.geom('geom1').feature('ext4').setIndex('distance', 'chamf_r+fillet_r_i', 0);
model.geom('geom1').feature('ext4').set('crossfaces', false);
model.geom('geom1').selection.create('csel3', 'CumulativeSelection');
model.geom('geom1').selection('csel3').label('Corner 1');
model.geom('geom1').feature('ext4').set('contributeto', 'csel3');
model.geom('geom1').run('ext4');
model.geom('geom1').create('rot2', 'Rotate');
model.geom('geom1').feature('rot2').selection('input').named('csel3');
model.geom('geom1').feature('rot2').set('keep', true);
model.geom('geom1').feature('rot2').set('rot', -90);
model.geom('geom1').feature('rot2').set('pos', {'-width/2+chamf_r/2' '0' '0'});
model.geom('geom1').feature('rot2').setIndex('pos', 'depth/2-chamf_r/2', 1);
model.geom('geom1').feature('rot2').set('contributeto', 'csel3');
model.geom('geom1').run('rot2');
model.geom('geom1').create('int1', 'Intersection');
model.geom('geom1').feature('int1').selection('input').set({'ext4' 'rot2'});
model.geom('geom1').run('int1');
model.geom('geom1').feature.create('ext5', 'Extrude');
model.geom('geom1').feature('ext5').set('extrudefrom', 'faces');
model.geom('geom1').feature('ext5').selection('inputface').set('ext3', 1);
model.geom('geom1').feature('ext5').set('inputhandling', 'keep');
model.geom('geom1').feature('ext5').setIndex('distance', 'chamf_r+fillet_r_i', 0);
model.geom('geom1').feature('ext5').set('crossfaces', false);
model.geom('geom1').feature('ext5').set('contributeto', 'csel3');
model.geom('geom1').run('ext5');
model.geom('geom1').create('rot3', 'Rotate');
model.geom('geom1').feature('rot3').selection('input').set({'ext5'});
model.geom('geom1').feature('rot3').set('keep', true);
model.geom('geom1').feature('rot3').set('rot', -90);
model.geom('geom1').feature('rot3').set('pos', {'-width/2+chamf_r/2' '0' '0'});
model.geom('geom1').feature('rot3').setIndex('pos', '-depth/2+chamf_r/2', 1);
model.geom('geom1').feature('rot3').set('contributeto', 'csel3');
model.geom('geom1').run('rot3');
model.geom('geom1').create('int2', 'Intersection');
model.geom('geom1').feature('int2').selection('input').set({'ext5' 'rot3'});
model.geom('geom1').run('int2');
model.geom('geom1').create('rot4', 'Rotate');
model.geom('geom1').feature('rot4').selection('input').set({'ext2' 'ext3' 'int1' 'int2'});
model.geom('geom1').feature('rot4').set('keep', true);
model.geom('geom1').feature('rot4').set('rot', 180);
model.geom('geom1').run('rot4');
model.geom('geom1').create('uni2', 'Union');
model.geom('geom1').feature('uni2').selection('input').set({'ext1' 'ext2' 'ext3' 'int1' 'int2' 'rot4'});
model.geom('geom1').feature('uni2').set('contributeto', 'csel1');
model.geom('geom1').run('uni2');
model.geom('geom1').run('endif1');
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part2');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'surf_width', 'surf_width_i');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'surf_depth', 'surf_depth_i');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'fillet_r', 'fillet_r_i');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'fin_h', 'fin_h_i');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'fin_th', 'fin_th_i');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'fin_n', 'fin_n_i');
model.geom('geom1').feature('pi1').set('displ', {'0' '0' 'th'});
model.geom('geom1').run('pi1');
model.geom('geom1').create('uni3', 'Union');
model.geom('geom1').feature('uni3').selection('input').set({'pi1' 'uni1'});
model.geom('geom1').feature('uni3').set('intbnd', false);
model.geom('geom1').feature('uni3').set('contributeto', 'csel1');
model.geom('geom1').run('uni3');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'box_length' '1' '1'});
model.geom('geom1').feature('blk1').setIndex('size', 'box_width', 1);
model.geom('geom1').feature('blk1').setIndex('size', 'box_height', 2);
model.geom('geom1').feature('blk1').set('base', 'center');
model.geom('geom1').feature('blk1').set('pos', {'box_length/2-width/2-box_spacing_inlet' '0' '0'});
model.geom('geom1').feature('blk1').setIndex('pos', 'box_height/2', 2);
model.geom('geom1').selection.create('csel4', 'CumulativeSelection');
model.geom('geom1').selection('csel4').label('Cumulative Selection: Box');
model.geom('geom1').feature('blk1').set('contributeto', 'csel4');
model.geom('geom1').run('blk1');
model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').label('Explicit Selection: Inlet');
model.geom('geom1').feature('sel1').selection('selection').init(2);
model.geom('geom1').feature('sel1').selection('selection').set('blk1', 2);
model.geom('geom1').selection.create('csel5', 'CumulativeSelection');
model.geom('geom1').selection('csel5').label('Inlet');
model.geom('geom1').feature('sel1').set('contributeto', 'csel5');
model.geom('geom1').run('sel1');
model.geom('geom1').create('sel2', 'ExplicitSelection');
model.geom('geom1').feature('sel2').label('Explicit Selection: Outlet');
model.geom('geom1').feature('sel2').selection('selection').init(2);
model.geom('geom1').feature('sel2').selection('selection').set('blk1', 5);
model.geom('geom1').selection.create('csel6', 'CumulativeSelection');
model.geom('geom1').selection('csel6').label('Outlet');
model.geom('geom1').feature('sel2').set('contributeto', 'csel6');
model.geom('geom1').run('sel2');
model.geom('geom1').create('sel3', 'ExplicitSelection');
model.geom('geom1').feature('sel3').label('Explicit Selection: Surfaces to Hide');
model.geom('geom1').feature('sel3').selection('selection').init(2);
model.geom('geom1').feature('sel3').selection('selection').set('blk1', [2 3 4]);
model.geom('geom1').run('fin');

model.view('view1').hideEntities.create('hide1');
model.view('view1').hideEntities('hide1').geom('geom1', 2);
model.view('view1').hideEntities('hide1').named('geom1_sel3');
model.view('view1').hideObjects.create('hide1');
model.view('view1').hideObjects('hide1').init(2);
model.view('view1').hideObjects('hide1').named('sel3');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('All Domains');
model.selection('sel1').all;
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Air');
model.selection('dif1').set('add', {'sel1'});
model.selection('dif1').set('subtract', {'geom1_csel1_dom'});
model.selection.create('int1', 'Intersection');
model.selection('int1').model('comp1');
model.selection('int1').label('Heat Source Surface');
model.selection('int1').set('entitydim', 2);
model.selection('int1').set('input', {'geom1_csel1_bnd' 'geom1_csel4_bnd'});

model.material.create('mat1', 'Common', '');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').label('Aluminum');
model.material('mat1').set('family', 'aluminum');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat1').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.33');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-350[GPa]');
model.material.create('mat2', 'Common', '');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat2').label('Copper');
model.material('mat2').set('family', 'copper');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.35');
model.material('mat2').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat2').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat2').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat2').propertyGroup('linzRes').addInput('temperature');
model.material.create('matlnk1', 'Link', 'comp1');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat3').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat3').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat3').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat3').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat3').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat3').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat3').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat3').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat3').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat3').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat3').label('Air');
model.material('mat3').set('family', 'air');
model.material('mat3').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat3').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat3').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat3').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat3').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat3').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat3').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat3').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat3').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat3').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat3').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat3').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat3').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat3').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat3').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat3').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat3').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat3').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat3').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat3').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat3').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat3').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat3').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat3').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat3').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat3').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat3').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat3').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat3').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat3').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat3').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat3').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat3').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat3').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat3').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat3').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat3').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat3').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat3').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat3').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat3').propertyGroup('def').set('molarmass', '');
model.material('mat3').propertyGroup('def').set('bulkviscosity', '');
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat3').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat3').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat3').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat3').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat3').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat3').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat3').propertyGroup('def').addInput('temperature');
model.material('mat3').propertyGroup('def').addInput('pressure');
model.material('mat3').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat3').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat3').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat3').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat3').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat3').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat3').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat3').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat3').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat3').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat3').propertyGroup('idealGas').addInput('temperature');
model.material('mat3').propertyGroup('idealGas').addInput('pressure');
model.material('mat3').materialType('nonSolid');
model.material('mat3').selection.named('dif1');

model.physics('ht').prop('ConsistentStabilization').set('heatCrosswindDiffusion', false);
model.physics('ht').feature('fluid1').selection.named('dif1');
model.physics('ht').create('ifl1', 'Inflow', 2);
model.physics('ht').feature('ifl1').selection.named('geom1_csel5_bnd');
model.physics('ht').feature('ifl1').set('Tustr', 'T_amb');
model.physics('ht').create('ofl1', 'ConvectiveOutflow', 2);
model.physics('ht').feature('ofl1').selection.named('geom1_csel6_bnd');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 2);
model.physics('ht').feature('hf1').selection.named('int1');
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 'h_c');
model.physics('ht').feature('hf1').set('Text', 'T_source');
model.physics('spf').selection.named('dif1');
model.physics('spf').prop('ConsistentStabilization').set('CrosswindDiffusion', false);
model.physics('spf').create('inl1', 'InletBoundary', 2);
model.physics('spf').feature('inl1').selection.named('geom1_csel5_bnd');
model.physics('spf').feature('inl1').set('BoundaryCondition', 'FullyDevelopedFlow');
model.physics('spf').feature('inl1').set('Uavfdf', 'u0');
model.physics('spf').create('out1', 'OutletBoundary', 2);
model.physics('spf').feature('out1').selection.named('geom1_csel6_bnd');

model.mesh('mesh1').autoMeshSize(7);
model.mesh('mesh1').run;

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'wdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'wdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-6);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, wall distance (spf)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, wall distance (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('se1', 'Segregated');
model.sol('sol1').feature('s2').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u' 'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('segvar', {'comp1_T' 'comp1_nitf1_TWall_d' 'comp1_nitf1_TWall_u'});
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').label('Temperature');
model.sol('sol1').feature('s2').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('segvar', {'comp1_yPlus'});
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('subdamp', 0.45);
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('subiter', 3);
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('subtermconst', 'itertol');
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('subntolfact', 1);
model.sol('sol1').feature('s2').create('d2', 'Direct');
model.sol('sol1').feature('s2').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d2').label('Direct, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('linsolver', 'd2');
model.sol('sol1').feature('s2').feature('se1').feature('ss3').label('Turbulence Variables');
model.sol('sol1').feature('s2').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s2').feature('se1').set('subinitcfl', 2);
model.sol('sol1').feature('s2').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s2').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s2').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s2').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s2').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s2').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s2').feature('se1').set('maxsegiter', 400);
model.sol('sol1').feature('s2').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s2').feature('se1').feature('ll1').set('lowerlimit', 'comp1.yPlus 0 comp1.T 0 ');
model.sol('sol1').feature('s2').create('d3', 'Direct');
model.sol('sol1').feature('s2').feature('d3').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d3').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d3').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').create('i3', 'Iterative');
model.sol('sol1').feature('s2').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i3').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i3').set('rhob', 400);
model.sol('sol1').feature('s2').feature('i3').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i3').label('AMG, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Temperature (ht)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg1').feature.create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('solutionparams', 'parent');
model.result('pg1').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('vol1').set('smooth', 'internal');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('data', 'parent');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (spf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg2').feature.create('slc1', 'Slice');
model.result('pg2').feature('slc1').label('Slice');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('expr', 'spf.U');
model.result('pg2').feature('slc1').set('smooth', 'internal');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([2 3 4 5 6 7 10 11 12 14 16 17 19 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 45 47 48 50 51]);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Pressure (spf)');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond1/pg4');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'p');
model.result('pg3').feature('surf1').set('colortable', 'Dipole');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature('surf1').feature.create('tran1', 'Transparency');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Wall Resolution (spf)');
model.result('pg4').set('data', 'surf1');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'surf1');
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond1/pg3');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Wall Resolution');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('expr', 'spf.Delta_wPlus');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Temperature and Fluid Flow (nitf1)');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').set('data', 'dset1');
model.result('pg5').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond3/pg1');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').label('Wall Temperature');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('expr', 'ht.Tvar');
model.result('pg5').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg5').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg5').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg5').feature('surf1').feature('sel1').selection.set([2 3 4 5 6 7 10 11 12 14 16 17 19 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 45 47 48 50 51]);
model.result('pg5').feature.create('vol1', 'Volume');
model.result('pg5').feature('vol1').label('Solid Temperature');
model.result('pg5').feature('vol1').set('showsolutionparams', 'on');
model.result('pg5').feature('vol1').set('solutionparams', 'parent');
model.result('pg5').feature('vol1').set('expr', 'nitf1.T');
model.result('pg5').feature('vol1').set('smooth', 'internal');
model.result('pg5').feature('vol1').set('showsolutionparams', 'on');
model.result('pg5').feature('vol1').set('data', 'parent');
model.result('pg5').feature('vol1').feature.create('sel1', 'Selection');
model.result('pg5').feature('vol1').feature('sel1').selection.geom('geom1', 3);
model.result('pg5').feature('vol1').feature('sel1').selection.set([2]);
model.result('pg5').feature('vol1').set('inheritplot', 'surf1');
model.result('pg5').feature.create('arwv1', 'ArrowVolume');
model.result('pg5').feature('arwv1').label('Fluid Flow');
model.result('pg5').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg5').feature('arwv1').set('solutionparams', 'parent');
model.result('pg5').feature('arwv1').set('expr', {'nitf1.ux' 'nitf1.uy' 'nitf1.uz'});
model.result('pg5').feature('arwv1').set('xnumber', 30);
model.result('pg5').feature('arwv1').set('ynumber', 30);
model.result('pg5').feature('arwv1').set('znumber', 30);
model.result('pg5').feature('arwv1').set('arrowtype', 'cone');
model.result('pg5').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg5').feature('arwv1').set('data', 'parent');
model.result('pg5').feature('arwv1').feature.create('col1', 'Color');
model.result('pg5').feature('arwv1').feature('col1').set('showcolordata', 'off');
model.result('pg5').feature('arwv1').feature('col1').set('expr', 'spf.U');
model.result('pg5').feature('arwv1').feature.create('filt1', 'Filter');
model.result('pg5').feature('arwv1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result('pg1').run;
model.result.remove('pg1');
model.result('pg2').run;
model.result.numerical.create('int1', 'IntSurface');
model.result.numerical('int1').set('intvolume', true);
model.result.numerical('int1').label('Cooling Power');
model.result.numerical('int1').selection.named('int1');
model.result.numerical('int1').setIndex('expr', 'h_c*(T_source-T)', 0);
model.result.numerical('int1').setIndex('descr', 'Cooling power', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Cooling Power');
model.result.numerical('int1').set('table', 'tbl1');
model.result.numerical('int1').setResult;
model.result.numerical.create('av1', 'AvSurface');
model.result.numerical('av1').set('intvolume', true);
model.result.numerical('av1').label('Average Pressure Loss');
model.result.numerical('av1').selection.named('geom1_csel5_bnd');
model.result.numerical('av1').set('expr', {'p'});
model.result.numerical('av1').set('descr', {'Pressure'});
model.result.numerical('av1').set('unit', {'Pa'});
model.result.numerical('av1').setIndex('descr', 'Average pressure loss', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Average Pressure Loss');
model.result.numerical('av1').set('table', 'tbl2');
model.result.numerical('av1').setResult;
model.result('pg2').run;
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Velocity magnitude (m/s)');
model.result('pg2').set('edges', false);
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('slc1').set('quickplane', 'xy');
model.result('pg2').feature('slc1').set('quickzmethod', 'coord');
model.result('pg2').feature('slc1').set('quickz', 'fin_h_i/2');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').create('slc2', 'Slice');
model.result('pg2').feature('slc2').set('expr', 'spf.U');
model.result('pg2').feature('slc2').set('descr', 'Velocity magnitude');
model.result('pg2').feature('slc2').set('quickplane', 'zx');
model.result('pg2').feature('slc2').set('quickynumber', 1);
model.result('pg2').feature('slc2').set('inheritplot', 'slc1');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').create('str1', 'Streamline');
model.result('pg2').feature('str1').set('expr', {'u' 'v' 'w'});
model.result('pg2').feature('str1').set('descr', 'Velocity field');
model.result('pg2').feature('str1').set('posmethod', 'start');
model.result('pg2').feature('str1').set('startmethod', 'coord');
model.result('pg2').feature('str1').set('xcoord', 'width');
model.result('pg2').feature('str1').set('ycoord', 'range(-3/4*width,width/8,3/4*width)');
model.result('pg2').feature('str1').set('zcoord', 'fin_h_i/1.9');
model.result('pg2').feature('str1').set('linetype', 'ribbon');
model.result('pg2').feature('str1').create('col1', 'Color');
model.result('pg2').run;
model.result('pg2').feature('str1').feature('col1').set('expr', 'spf.U');
model.result('pg2').feature('str1').feature('col1').set('descr', 'Velocity magnitude');
model.result('pg2').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'p');
model.result('pg2').feature('surf1').set('descr', 'Pressure');
model.result('pg2').feature('surf1').set('colortable', 'GrayScale');
model.result('pg2').feature('surf1').set('colorlegend', false);
model.result('pg2').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').create('line1', 'Line');
model.result('pg2').feature('line1').set('expr', '1');
model.result('pg2').feature('line1').set('coloring', 'uniform');
model.result('pg2').feature('line1').set('color', 'gray');
model.result('pg2').run;
model.result('pg2').run;

model.title('Forced Air Cooling with Heat Sink');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Geometry parts and parameterized geometries' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Sending an email with a report when the computation is finished' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' User-defined email server settings which is useful when running compiled standalone applications' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Options for setting different mesh sizes' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Error control of input parameters using methods' newline  newline 'Heat sinks are usually benchmarked with respect to their ability to dissipate heat for a given fan curve. One possible way to carry out this type of experiment is to place the heat sink in a rectangular channel with insulated walls.' newline  newline 'The temperature and pressure at the channel''s inlet and outlet, as well as the power required to keep the heat sink base at a given temperature, is then measured. Under these conditions, it is possible to estimate the amount of heat dissipated by the heat sink and the pressure loss over the channel.' newline  newline 'The purpose of the app is to carry out investigations of such benchmarking experiments. You can vary the type of heat sink as well as the number of fins or pins and their dimensions to find the optimal design for a given pressure loss over the channel.' newline  newline 'Air velocities and heat source rates can be varied and the app solves for nonisothermal flow, assuming turbulence as described by the algebraic yPlus model.']);

model.label('forced_air_cooling_with_heat_sink.mph');

model.result('pg2').run;

model.setExpectedComputationTime('8 minutes');

model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Number of Degrees of Freedom');
model.result.numerical('gev1').set('expr', {'numberofdofs'});
model.result.numerical('gev1').set('descr', {'Number of degrees of freedom'});
model.result.numerical('gev1').set('unit', {'1'});
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').comments('Number of Degrees of Freedom');
model.result.numerical('gev1').set('table', 'tbl3');
model.result.numerical('gev1').setResult;
model.result.report.create('rpt1', 'Report');
model.result.report('rpt1').set('format', 'docx');
model.result.report('rpt1').set('filename', 'user:///forced_air_cooling_with_heat_sink.docx');
model.result.report('rpt1').set('imagesize', 'large');
model.result.report('rpt1').feature.create('tp1', 'TitlePage');
model.result.report('rpt1').feature('tp1').set('frontmatterlayout', 'headings');
model.result.report('rpt1').feature.create('toc1', 'TableOfContents');
model.result.report('rpt1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').label('Software Information');
model.result.report('rpt1').feature('sec1').feature.create('root1', 'Model');
model.result.report('rpt1').feature('sec1').feature('root1').label('Software Properties');
model.result.report('rpt1').feature('sec1').feature('root1').set('includepath', false);
model.result.report('rpt1').feature('sec1').feature.create('std1', 'Study');
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').label('Input Data');
model.result.report('rpt1').feature('sec2').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').label('Model');
model.result.report('rpt1').feature('sec3').feature.create('mesh1', 'Mesh');
model.result.report('rpt1').feature('sec3').feature('mesh1').set('includestats', true);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature('sec3').feature('mesh1').setIndex('children', false, 5, 1);
model.result.report('rpt1').feature.create('sec4', 'Section');
model.result.report('rpt1').feature('sec4').label('Results');
model.result.report('rpt1').feature('sec4').feature.create('mtbl1', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl1').label('Cooling Power');
model.result.report('rpt1').feature('sec4').feature('mtbl1').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature.create('mtbl2', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl2').label('Average Pressure Loss');
model.result.report('rpt1').feature('sec4').feature('mtbl2').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature('mtbl2').set('noderef', 'tbl2');
model.result.report('rpt1').feature('sec4').feature.create('mtbl3', 'Table');
model.result.report('rpt1').feature('sec4').feature('mtbl3').label('Number of Degrees of Freedom');
model.result.report('rpt1').feature('sec4').feature('mtbl3').set('commentssource', 'none');
model.result.report('rpt1').feature('sec4').feature('mtbl3').set('noderef', 'tbl3');
model.result.report('rpt1').feature('sec4').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('pg1').label('Velocity Field');
model.result.report('rpt1').feature('sec4').feature.create('pg2', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('pg2').label('Pressure Field');
model.result.report('rpt1').feature('sec4').feature('pg2').set('noderef', 'pg3');
model.result.report('rpt1').feature('sec4').feature.create('pg3', 'PlotGroup');
model.result.report('rpt1').feature('sec4').feature('pg3').label('Nonisothermal Flow');
model.result.report('rpt1').feature('sec4').feature('pg3').set('noderef', 'pg5');
model.result('pg2').run;

model.title('Forced Air Cooling with Heat Sink');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Geometry parts and parameterized geometries' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Sending an email with a report when the computation is finished' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' User-defined email server settings which is useful when running compiled standalone applications' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Options for setting different mesh sizes' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Error control of input parameters using methods' newline  newline 'Heat sinks are usually benchmarked with respect to their ability to dissipate heat for a given fan curve. One possible way to carry out this type of experiment is to place the heat sink in a rectangular channel with insulated walls.' newline  newline 'The temperature and pressure at the channel''s inlet and outlet, as well as the power required to keep the heat sink base at a given temperature, is then measured. Under these conditions, it is possible to estimate the amount of heat dissipated by the heat sink and the pressure loss over the channel.' newline  newline 'The purpose of the app is to carry out investigations of such benchmarking experiments. You can vary the type of heat sink as well as the number of fins or pins and their dimensions to find the optimal design for a given pressure loss over the channel.' newline  newline 'Air velocities and heat source rates can be varied and the app solves for nonisothermal flow, assuming turbulence as described by the algebraic yPlus model.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('forced_air_cooling_with_heat_sink.mph');

model.modelNode.label('Components');

out = model;
