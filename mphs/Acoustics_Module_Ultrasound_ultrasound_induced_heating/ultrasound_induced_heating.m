function out = model
%
% ultrasound_induced_heating.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Ultrasound');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('ht', 'BioHeat', 'geom1');
model.physics('ht').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std1').feature('freq').setSolveFor('/physics/ht', true);

model.param.set('d0', '3.8[nm]');
model.param.descr('d0', 'Displacement amplitude of transducer');
model.param.set('z_tissue', '24.6[mm]');
model.param.descr('z_tissue', 'Starting position of tissue phantom');
model.param.set('T0', '293.7[K]');
model.param.descr('T0', 'Initial temperature value');
model.param.set('alpha_water', '0.025[1/m]');
model.param.descr('alpha_water', 'Absorption coefficient of water');
model.param.set('alpha_tissue', '8.55[1/m]');
model.param.descr('alpha_tissue', 'Absorption coefficient of tissue phantom');
model.param.set('f0', '1[MHz]');
model.param.descr('f0', 'Source frequency');

model.func.create('step1', 'Step');
model.func('step1').set('from', 1);
model.func('step1').set('to', 0);
model.func('step1').set('smooth', 0.005);

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 62.64);
model.geom('geom1').feature('c1').set('pos', [0 62.64]);
model.geom('geom1').run('c1');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', [35 10.69]);
model.geom('geom1').run('r1');
model.geom('geom1').create('int1', 'Intersection');
model.geom('geom1').feature('int1').selection('input').set({'c1' 'r1'});
model.geom('geom1').run('int1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', [48.6 75.5]);
model.geom('geom1').feature('r2').set('pos', {'0' 'z_tissue'});
model.geom('geom1').feature('r2').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('r2').setIndex('layer', 5, 0);
model.geom('geom1').feature('r2').set('layerright', true);
model.geom('geom1').feature('r2').set('layertop', true);
model.geom('geom1').feature('r2').set('layerbottom', false);
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', {'48.6' 'z_tissue-10.69'});
model.geom('geom1').feature('r3').set('pos', [0 10.69]);
model.geom('geom1').feature('r3').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('r3').setIndex('layer', 5, 0);
model.geom('geom1').feature('r3').set('layerright', true);
model.geom('geom1').feature('r3').set('layerbottom', false);
model.geom('geom1').run('r3');
model.geom('geom1').create('c2', 'Circle');
model.geom('geom1').feature('c2').set('r', 15);
model.geom('geom1').feature('c2').set('angle', 90);
model.geom('geom1').feature('c2').set('pos', [0 0.80336]);
model.geom('geom1').feature('c2').set('rot', -90);
model.geom('geom1').feature('c2').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('c2').setIndex('layer', 5, 0);
model.geom('geom1').run('c2');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'c2' 'int1'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').set('uni1', 10);
model.geom('geom1').run('del1');
model.geom('geom1').create('e1', 'Ellipse');
model.geom('geom1').feature('e1').set('semiaxes', [7.5 1.5]);
model.geom('geom1').feature('e1').set('angle', 180);
model.geom('geom1').feature('e1').set('pos', {'0' 'z_tissue+35'});
model.geom('geom1').feature('e1').set('rot', 270);
model.geom('geom1').run('e1');
model.geom('geom1').run('fin');

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.set([7 9 10]);
model.coordSystem('pml1').set('ScalingType', 'Cylindrical');
model.coordSystem('pml1').set('stretchingType', 'rational');
model.coordSystem.duplicate('pml2', 'pml1');
model.coordSystem('pml2').selection.set([8]);
model.coordSystem.create('pml3', 'geom1', 'PML');
model.coordSystem('pml3').selection.set([1]);
model.coordSystem('pml3').set('stretchingType', 'rational');

model.physics('acpr').prop('ReferencePressure').set('ReferenceType', 'ReferencePressureWater');
model.physics('acpr').feature('fpam1').set('FluidModel', 'Attenuation');
model.physics('acpr').feature('fpam1').set('alpha1', 'alpha_water');
model.physics('acpr').create('fpam2', 'FrequencyPressureAcousticsModel', 2);
model.physics('acpr').feature('fpam2').selection.set([5 6 7 9 10]);
model.physics('acpr').feature('fpam2').set('FluidModel', 'Attenuation');
model.physics('acpr').feature('fpam2').set('alpha1', 'alpha_tissue');
model.physics('acpr').create('ndisp1', 'NormalDisplacement', 1);
model.physics('acpr').feature('ndisp1').selection.set([32]);
model.physics('acpr').feature('ndisp1').set('ndisp', 'd0');
model.physics('ht').selection.set([5 6]);
model.physics('ht').feature('init1').set('Tinit', 'T0');
model.physics('ht').create('hs1', 'HeatSource', 2);
model.physics('ht').feature('hs1').selection.set([5 6]);
model.physics('ht').feature('hs1').set('Q0', 'acpr.Q_pw*step1(t[1/s]-1)');
model.physics('ht').create('temp1', 'TemperatureBoundary', 1);
model.physics('ht').feature('temp1').selection.set([9 14 20]);
model.physics('ht').feature('temp1').set('T0', 'T0');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water, liquid');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Tissue phantom');
model.material('mat2').selection.set([5 6 7 9 10]);
model.material('mat2').propertyGroup('def').set('density', {'1044'});
model.material('mat2').propertyGroup('def').set('soundspeed', {'1568'});
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'0.59'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'3710'});

model.physics('acpr').feature('fpam1').set('minput_temperature', 'T0');
model.physics('acpr').feature('fpam2').set('minput_temperature', 'T0');

model.mesh('mesh1').label('Mesh 1 - Acoustics');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').selection.set([2 3 4 5 6]);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([6]);
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', '1568[m/s]/f0/30');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', '1483[m/s]/f0/5');
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([1 7 8 9 10]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([1 22 23]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 10);
model.mesh('mesh1').run;
model.mesh.create('mesh2', 'geom1');
model.mesh('mesh2').label('Mesh 2 - Bioheat Transfer');
model.mesh('mesh2').create('ftri1', 'FreeTri');
model.mesh('mesh2').feature('ftri1').selection.geom('geom1', 2);
model.mesh('mesh2').feature('ftri1').selection.set([5 6]);
model.mesh('mesh2').feature('ftri1').create('size1', 'Size');
model.mesh('mesh2').feature('ftri1').feature('size1').selection.set([6]);
model.mesh('mesh2').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh2').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh2').feature('ftri1').feature('size1').set('hmax', '0.18[mm]');
model.mesh('mesh2').feature('size').set('custom', true);
model.mesh('mesh2').feature('size').set('hmax', 5);
model.mesh('mesh2').feature('size').set('hgrad', 1.2);
model.mesh('mesh2').run;

model.study('std1').feature('freq').set('plist', 'f0');
model.study('std1').label('Study 1 - Acoustics');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').label('Sound Pressure Level (acpr)');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'dset1');
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('hasspacevars', false);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'rev1');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg3').feature('surf1').set('colortable', 'Wave');
model.result('pg3').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').label('Acoustic Pressure, 3D (acpr)');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'rev1');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg4').feature('surf1').set('colortable', 'Rainbow');
model.result('pg4').feature('surf1').set('colorscalemode', 'linear');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').label('Sound Pressure Level, 3D (acpr)');
model.result('pg1').run;

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/acpr', false);
model.study('std2').feature('time').setSolveFor('/physics/ht', true);
model.study('std2').feature('time').set('tlist', 'range(0,0.2,5)');
model.study('std2').feature('time').set('usesol', true);
model.study('std2').feature('time').set('notsolmethod', 'sol');
model.study('std2').feature('time').set('notstudy', 'std1');
model.study('std2').label('Study 2 - Bioheat Transfer');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,0.2,5)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('atolmethod', {'comp1_p' 'global' 'comp1_T' 'global'});
model.sol('sol2').feature('t1').set('atol', {'comp1_p' '1e-3' 'comp1_T' '1e-3'});
model.sol('sol2').feature('t1').set('atolvaluemethod', {'comp1_p' 'factor' 'comp1_T' 'factor'});
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('estrat', 'exclude');
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol2').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol2').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol2').feature('t1').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol2').feature('t1').feature('i1').set('maxlinit', 10000);
model.sol('sol2').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('t1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol2').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol2').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol2').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('t1').set('maxorder', 5);
model.sol('sol2').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol2').feature('t1').set('maxstepbdf', 0.02);
model.sol('sol2').runAll;

model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Temperature (ht)');
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 26, 0);
model.result('pg5').set('dataisaxisym', 'off');
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 26, 0);
model.result('pg5').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('expr', 'T');
model.result('pg5').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('surf1').set('colorscalemode', 'linear');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg5').run;
model.result.dataset.create('mir1', 'Mirror2D');
model.result('pg1').run;
model.result('pg1').set('data', 'mir1');
model.result('pg1').set('xlabelactive', true);
model.result('pg1').set('xlabel', 'r coordinate (mm)');
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'z-coordinate (mm)');
model.result('pg1').set('edges', false);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg2').run;
model.result.dataset('dset1').selection.geom('geom1', 2);
model.result.dataset('dset1').selection.geom('geom1', 2);
model.result.dataset('dset1').selection.set([1 2 3 4 5 6 7 8 9 10]);
model.result.dataset('dset1').selection.geom('geom1', 2);
model.result.dataset('dset1').selection.set([2 3 4 5 6]);
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').run;
model.result('pg6').label('Acoustic Intensity field');
model.result('pg6').set('data', 'mir1');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'r coordinate (mm)');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'z-coordinate (mm)');
model.result('pg6').set('edges', false);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'acpr.I_mag');
model.result('pg6').feature('surf1').set('descr', 'Intensity magnitude');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Pressure Amplitude Along Axial z-Axis');
model.result('pg7').set('titletype', 'label');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr1').set('linewidth', 'preference');
model.result('pg7').feature('lngr1').selection.set([3 4 6 8 10 11 12]);
model.result('pg7').feature('lngr1').set('xdata', 'expr');
model.result('pg7').feature('lngr1').set('xdataexpr', 'z');
model.result('pg7').run;
model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').setIndex('genpoints', 59.6, 0, 1);
model.result.dataset('cln1').setIndex('genpoints', 5, 1, 0);
model.result.dataset('cln1').setIndex('genpoints', 59.6, 1, 1);
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Pressure Amplitude Along Radial Axis on the Focal Plane');
model.result('pg8').set('data', 'cln1');
model.result('pg8').set('titletype', 'label');
model.result('pg8').set('xlabelactive', true);
model.result('pg8').set('xlabel', 'r-coordinate (mm)');
model.result('pg8').create('lngr1', 'LineGraph');
model.result('pg8').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg8').feature('lngr1').set('linewidth', 'preference');
model.result('pg8').feature('lngr1').set('xdata', 'expr');
model.result('pg8').feature('lngr1').set('xdataexpr', 'r');
model.result('pg8').feature('lngr1').set('resolution', 'finer');
model.result('pg8').run;
model.result('pg8').feature.duplicate('lngr2', 'lngr1');
model.result('pg8').run;
model.result('pg8').feature('lngr2').set('xdataexpr', '-r');
model.result('pg8').feature('lngr2').set('linecolor', 'blue');
model.result('pg8').run;
model.result.dataset.create('mir2', 'Mirror2D');
model.result.dataset('mir2').set('data', 'dset2');
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').run;
model.result('pg9').label('Temperature Rise at t = 1 s');
model.result('pg9').set('data', 'mir2');
model.result('pg9').setIndex('looplevel', 6, 0);
model.result('pg9').set('titletype', 'manual');
model.result('pg9').set('title', 'Temperature rise at t = 1 s');
model.result('pg9').set('xlabelactive', true);
model.result('pg9').set('xlabel', 'r coordinate (mm)');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'z-coordinate (mm)');
model.result('pg9').set('edges', false);
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', 'T-T0');
model.result('pg9').feature('surf1').set('colortable', 'Thermal');
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').run;
model.result('pg10').label('Isothermal Contours at t = 1 s');
model.result('pg10').set('data', 'mir2');
model.result('pg10').setIndex('looplevel', 6, 0);
model.result('pg10').set('titletype', 'manual');
model.result('pg10').set('title', 'Temperature Rise Contours at t = 1 s');
model.result('pg10').set('xlabelactive', true);
model.result('pg10').set('xlabel', 'r coordinate (mm)');
model.result('pg10').set('ylabelactive', true);
model.result('pg10').set('ylabel', 'z-coordinate (mm)');
model.result('pg10').set('edges', false);
model.result('pg10').create('con1', 'Contour');
model.result('pg10').feature('con1').set('expr', 'T-T0');
model.result('pg10').feature('con1').set('number', 50);
model.result('pg10').feature('con1').set('colortable', 'Thermal');
model.result('pg10').run;
model.result.dataset.create('cpt1', 'CutPoint2D');
model.result.dataset('cpt1').set('data', 'dset2');
model.result.dataset('cpt1').set('pointx', 0);
model.result.dataset('cpt1').set('pointy', 59.6);
model.result.dataset.duplicate('cpt2', 'cpt1');
model.result.dataset('cpt2').set('pointx', 0.5);
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Temperature Rise vs. Time at Focus and 0.5 mm off Focus');
model.result('pg11').set('data', 'dset2');
model.result('pg11').set('titletype', 'label');
model.result('pg11').set('ylabelactive', true);
model.result('pg11').set('ylabel', 'Temperature Rise (K)');
model.result('pg11').create('ptgr1', 'PointGraph');
model.result('pg11').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg11').feature('ptgr1').set('linewidth', 'preference');
model.result('pg11').feature('ptgr1').set('data', 'cpt1');
model.result('pg11').feature('ptgr1').set('solutionparams', 'parent');
model.result('pg11').feature('ptgr1').set('expr', 'T-T0');
model.result('pg11').feature('ptgr1').set('linecolor', 'red');
model.result('pg11').feature('ptgr1').set('legend', true);
model.result('pg11').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg11').feature('ptgr1').setIndex('legends', 'At acoustic focus', 0);
model.result('pg11').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg11').run;
model.result('pg11').feature('ptgr2').set('data', 'cpt2');
model.result('pg11').feature('ptgr2').set('linecolor', 'blue');
model.result('pg11').feature('ptgr2').setIndex('legends', '0.5 mm off acoustic focus', 0);
model.result('pg11').run;
model.result.dataset.duplicate('cln2', 'cln1');
model.result.dataset('cln2').set('data', 'dset2');
model.result.create('pg12', 'PlotGroup1D');
model.result('pg12').run;
model.result('pg12').label('Normalized Temperature and Acoustic Intensity Profiles');
model.result('pg12').set('titletype', 'label');
model.result('pg12').set('xlabelactive', true);
model.result('pg12').set('xlabel', 'Radial Distance from Focus (mm)');
model.result('pg12').set('ylabelactive', true);
model.result('pg12').set('ylabel', 'Normalized Temperature Rise and Acoustic Intensity');
model.result('pg12').create('lngr1', 'LineGraph');
model.result('pg12').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg12').feature('lngr1').set('linewidth', 'preference');
model.result('pg12').feature('lngr1').set('data', 'cln2');
model.result('pg12').feature('lngr1').setIndex('looplevelinput', 'manual', 0);
model.result('pg12').feature('lngr1').setIndex('looplevel', [6], 0);
model.result('pg12').feature('lngr1').set('expr', '(T-T0)/1.018');
model.result('pg12').feature('lngr1').set('xdata', 'expr');
model.result('pg12').feature('lngr1').set('xdataexpr', 'r');
model.result('pg12').feature('lngr1').set('linecolor', 'red');
model.result('pg12').feature('lngr1').set('legend', true);
model.result('pg12').feature('lngr1').set('legendmethod', 'manual');
model.result('pg12').feature('lngr1').setIndex('legends', 'Temperature profile at t = 1 s', 0);
model.result('pg12').feature.duplicate('lngr2', 'lngr1');
model.result('pg12').run;
model.result('pg12').feature('lngr2').set('xdataexpr', '-r');
model.result('pg12').feature('lngr2').set('legend', false);
model.result('pg12').run;
model.result('pg12').feature.duplicate('lngr3', 'lngr1');
model.result('pg12').run;
model.result('pg12').feature('lngr3').setIndex('looplevel', [11], 0);
model.result('pg12').feature('lngr3').set('expr', '(T-T0)/0.5751');
model.result('pg12').feature('lngr3').set('linecolor', 'magenta');
model.result('pg12').feature('lngr3').setIndex('legends', 'Temperature profile at t = 2 s', 0);
model.result('pg12').feature.duplicate('lngr4', 'lngr3');
model.result('pg12').run;
model.result('pg12').feature('lngr4').set('xdataexpr', '-r');
model.result('pg12').feature('lngr4').set('legend', false);
model.result('pg12').run;
model.result('pg12').feature.duplicate('lngr5', 'lngr1');
model.result('pg12').run;
model.result('pg12').feature('lngr5').set('data', 'cln1');
model.result('pg12').feature('lngr5').set('expr', 'acpr.I_mag');
model.result('pg12').feature('lngr5').set('descr', 'Intensity magnitude');
model.result('pg12').feature('lngr5').set('expr', 'acpr.I_mag/3.376e5');
model.result('pg12').feature('lngr5').set('linecolor', 'blue');
model.result('pg12').feature('lngr5').set('linestyle', 'dotted');
model.result('pg12').feature('lngr5').setIndex('legends', 'Intensity profile', 0);
model.result('pg12').feature.duplicate('lngr6', 'lngr5');
model.result('pg12').run;
model.result('pg12').feature('lngr6').set('xdataexpr', '-r');
model.result('pg12').feature('lngr6').set('legend', false);
model.result('pg12').run;

model.title('Focused Ultrasound Induced Heating in Tissue Phantom');

model.description(['This example shows how to model tissue heating induced by focused ultrasound. First, the stationary acoustic field in the water and the tissue are modeled to obtain the acoustic intensity distribution in the tissue. The absorbed acoustic energy is then calculated and used as the heat source for a Bioheat Transfer interface in the tissue domain in a time-dependent study simulating the heating and cooling of the tissue when exposed to ultrasound for 1' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'second.' newline  newline 'This example requires the Acoustics Module and the Heat Transfer Module.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('ultrasound_induced_heating.mph');

model.modelNode.label('Components');

out = model;
