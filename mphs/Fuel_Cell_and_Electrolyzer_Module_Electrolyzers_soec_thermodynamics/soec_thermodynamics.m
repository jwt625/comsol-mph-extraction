function out = model
%
% soec_thermodynamics.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fuel_Cell_and_Electrolyzer_Module/Electrolyzers');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('cd', 'SecondaryCurrentDistribution', 'geom1');
model.physics('cd').model('comp1');

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/cd', true);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/cd', true);

model.geom('geom1').insertFile('soec_thermodynamics_geom_sequence.mph', 'geom1');
model.geom('geom1').run('difsel1');

model.param.label('Geometry Parameters');
model.param.create('par2');
model.param('par2').label('Physics Parameters');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('kappa', '1e-10[m^2]', 'Electrode permeability');
model.param('par2').set('por', '0.4', 'Gas pore volume fraction');
model.param('par2').set('por_l', '0.4', 'Electrolyte volume fraction');
model.param('par2').set('I_avg', '10^4[A/m^2]', 'Average current density');
model.param('par2').set('stoich', '1.2', 'Inlet steam stoichiometry');
model.param('par2').set('A_cell', 'W_cell*D_cell', 'Cell area');
model.param('par2').set('Mflux_in', 'stoich*18[g/mol]*I_avg*A_cell/(2*F_const)', 'Total inlet (steam) mass flux');
model.param('par2').set('T', '800[degC]', 'Cell temperature');
model.param('par2').set('sigma_l', '5.2[S/m]', 'Electrolyte conductivity');
model.param('par2').set('sigma_s', '1000[S/m]', 'Electrode conductivity');
model.param('par2').set('i0_H2', '0.1[A/m^2]', 'Reference exchange current density, hydrogen reaction');
model.param('par2').set('i0_O2', '0.1[A/m^2]', 'Reference exchange current density, oxygen reaction');
model.param('par2').set('S', '1e9[m^2/m^3]', 'Electrode specific surface area');
model.param('par2').set('Rc', '1e-7[ohm*m^2]', 'Electrode-to-current-collector contact resistance');
model.param('par2').set('d_pore', '1e-6[m]', 'Pore diameter in gad diffusion electrode');

model.thermodynamics.feature.create('pp1', 'BuiltinPropertyPackage');
model.thermodynamics.feature('pp1').set('compoundlist', {'water' '7732-18-5' 'H2O' 'COMSOL'; 'hydrogen' '1333-74-0' 'H2' 'COMSOL'});
model.thermodynamics.feature('pp1').set('phase_list', {'Gas' 'Vapor'});
model.thermodynamics.feature('pp1').label('Gas System 1');
model.thermodynamics.feature('pp1').set('manager_id', 'COMSOL');
model.thermodynamics.feature('pp1').set('manager_version', '1.0');
model.thermodynamics.feature('pp1').set('packagename', 'pp1');
model.thermodynamics.feature('pp1').set('package_desc', 'Built-in property package');
model.thermodynamics.feature('pp1').set('managerindex', '0');
model.thermodynamics.feature('pp1').set('packageid', 'COMSOL1');
model.thermodynamics.feature('pp1').set('ThermodynamicModel', 'IdealGas');
model.thermodynamics.feature('pp1').set('LiquidPhaseModel', 'None');
model.thermodynamics.feature('pp1').set('LiquidCard', 'None');
model.thermodynamics.feature('pp1').set('EOSModel', 'IdealGas');
model.thermodynamics.feature('pp1').set('GasPhaseModel', 'IdealGas');
model.thermodynamics.feature('pp1').set('GasEOSCard', 'GasPhaseModel');
model.thermodynamics.feature('pp1').set('VapDiffusivity', 'Automatic');
model.thermodynamics.feature('pp1').set('VapThermalConductivity', 'KineticTheory');
model.thermodynamics.feature('pp1').set('VapViscosity', 'Brokaw');
model.thermodynamics.feature('pp1').storePersistenceData;
model.thermodynamics.feature('pp1').set('WarningState', false);
model.thermodynamics.feature('pp1').set('Warning', {''});
model.thermodynamics.feature('pp1').label('Gas System - H2 and H2O');

model.physics.create('chem', 'Chemistry', 'geom1');
model.physics('chem').model('comp1');

model.geom('geom1').run;

model.physics('chem').create('spec1', 'SpeciesChem', 3);
model.physics('chem').feature('spec1').set('specName', 'H2O');
model.physics('chem').create('spec1', 'SpeciesChem', 3);
model.physics('chem').feature('spec1').set('specName', 'H2');
model.physics('chem').prop('calcTransport').set('calcTransport', true);
model.physics('chem').prop('mixture').set('ConcentrationType', 'MassFraction');
model.physics('chem').prop('mixture').set('Thermodynamics', true);
model.physics('chem').prop('mixture').set('PropertyPackage', 'pp1');
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('PackageSpecies', 'hydrogen', 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationValue', '0.5', 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('PackageSpecies', 'water', 1);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationValue', '0.5', 1);
model.physics('chem').prop('mixture').set('mixture', 'gas');
model.physics('chem').label('Chemistry - H2 and H2O');
model.physics('chem').prop('TPFeatureInput').set('useElectrochemistry', true);
model.physics('chem').prop('TPFeatureInput').set('Ect_src', 'root.comp1.cd.Ect');
model.physics('chem').create('er1', 'ElectrodeReactionChem', 3);
model.physics('chem').feature('er1').set('formula', 'H2O+2e<=>H2+O(ads)');
model.physics('chem').feature('er1').set('Eeq_mat', 'Automatic');
model.physics('chem').feature('er1').set('i0_ref', 'i0_H2');
model.physics('chem').feature('er1').set('alphaa', 1.5);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationInput', 'UserDefined', 0, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationValue', 0.5, 0, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationInput', 'UserDefined', 1, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationValue', 0.5, 1, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('csurf', '1e-5[mol/m^2]', 0, 0);

model.thermodynamics.feature.create('pp2', 'BuiltinPropertyPackage');
model.thermodynamics.feature('pp2').set('compoundlist', {'oxygen' '7782-44-7' 'O2' 'COMSOL'});
model.thermodynamics.feature('pp2').set('phase_list', {'Gas' 'Vapor'});
model.thermodynamics.feature('pp2').label('Gas System 1');
model.thermodynamics.feature('pp2').set('manager_id', 'COMSOL');
model.thermodynamics.feature('pp2').set('manager_version', '1.0');
model.thermodynamics.feature('pp2').set('packagename', 'pp2');
model.thermodynamics.feature('pp2').set('package_desc', 'Built-in property package');
model.thermodynamics.feature('pp2').set('managerindex', '0');
model.thermodynamics.feature('pp2').set('packageid', 'COMSOL2');
model.thermodynamics.feature('pp2').set('ThermodynamicModel', 'IdealGas');
model.thermodynamics.feature('pp2').set('LiquidPhaseModel', 'None');
model.thermodynamics.feature('pp2').set('LiquidCard', 'None');
model.thermodynamics.feature('pp2').set('EOSModel', 'IdealGas');
model.thermodynamics.feature('pp2').set('GasPhaseModel', 'IdealGas');
model.thermodynamics.feature('pp2').set('GasEOSCard', 'GasPhaseModel');
model.thermodynamics.feature('pp2').set('VapDiffusivity', 'Automatic');
model.thermodynamics.feature('pp2').set('VapThermalConductivity', 'KineticTheory');
model.thermodynamics.feature('pp2').set('VapViscosity', 'Brokaw');
model.thermodynamics.feature('pp2').storePersistenceData;
model.thermodynamics.feature('pp2').set('WarningState', false);
model.thermodynamics.feature('pp2').set('Warning', {''});
model.thermodynamics.feature('pp2').label('Gas System - O2');

model.physics.create('chem2', 'Chemistry', 'geom1');
model.physics('chem2').model('comp1');

model.geom('geom1').run;

model.physics('chem2').create('spec1', 'SpeciesChem', 3);
model.physics('chem2').feature('spec1').set('specName', 'O2');
model.physics('chem2').prop('calcTransport').set('calcTransport', true);
model.physics('chem2').prop('mixture').set('ConcentrationType', 'MassFraction');
model.physics('chem2').prop('mixture').set('Thermodynamics', true);
model.physics('chem2').prop('mixture').set('PropertyPackage', 'pp2');
model.physics('chem2').prop('ChemistryModelInputParameter').setIndex('PackageSpecies', 'oxygen', 0);
model.physics('chem2').prop('ChemistryModelInputParameter').setIndex('ConcentrationValue', '1.0', 0);
model.physics('chem2').prop('mixture').set('mixture', 'gas');
model.physics('chem2').label('Chemistry - O2');
model.physics('chem2').prop('TPFeatureInput').set('useElectrochemistry', true);
model.physics('chem2').prop('TPFeatureInput').set('Ect_src', 'root.comp1.cd.Ect');
model.physics('chem2').create('er1', 'ElectrodeReactionChem', 3);
model.physics('chem2').feature('er1').set('formula', 'O2+4e<=>2O(ads)');
model.physics('chem2').feature('er1').set('Eeq_mat', 'Automatic');
model.physics('chem2').feature('er1').set('i0_ref', 'i0_O2');
model.physics('chem2').prop('ChemistryModelInputParameter').setIndex('ConcentrationInput', 'UserDefined', 0, 0);
model.physics('chem2').prop('ChemistryModelInputParameter').setIndex('ConcentrationValue', 1, 0, 0);
model.physics('chem2').prop('ChemistryModelInputParameter').setIndex('csurf', '1e-5[mol/m^2]', 0, 0);
model.physics('cd').selection.set([1 2 3]);
model.physics('cd').feature('ice1').set('sigmal_mat', 'userdef');
model.physics('cd').feature('ice1').set('sigmal', {'sigma_l' '0' '0' '0' 'sigma_l' '0' '0' '0' 'sigma_l'});
model.physics('cd').create('pce1', 'PorousElectrode', 3);
model.physics('cd').feature('pce1').label('Porous Electrode - H2 and H2O (Cathode)');
model.physics('cd').feature('pce1').selection.named('geom1_blk3_dom');
model.physics('cd').feature('pce1').set('sigmal_mat', 'userdef');
model.physics('cd').feature('pce1').set('sigmal', {'sigma_l' '0' '0' '0' 'sigma_l' '0' '0' '0' 'sigma_l'});
model.physics('cd').feature('pce1').set('epsl', 'por_l');
model.physics('cd').feature('pce1').set('sigmas_mat', 'userdef');
model.physics('cd').feature('pce1').set('sigmas', {'sigma_s' '0' '0' '0' 'sigma_s' '0' '0' '0' 'sigma_s'});
model.physics('cd').feature('pce1').set('epss', '1-por_l');
model.physics('cd').feature('pce1').feature('per1').set('Eeq', 'chem.Eeq_er1');
model.physics('cd').feature('pce1').feature('per1').set('ilocmat_mat', 'userdef');
model.physics('cd').feature('pce1').feature('per1').set('ilocmat', 'chem.iloc_er1');
model.physics('cd').feature('pce1').feature('per1').set('Av', 'S');
model.physics('cd').feature.duplicate('pce2', 'pce1');
model.physics('cd').feature('pce2').label('Porous Electrode - O2 (Anode)');
model.physics('cd').feature('pce2').selection.named('geom1_blk1_dom');
model.physics('cd').feature('pce2').feature('per1').set('Eeq', 'chem2.Eeq_er1');
model.physics('cd').feature('pce2').feature('per1').set('ilocmat', 'chem2.iloc_er1');
model.physics('cd').create('egnd1', 'ElectricGround', 2);
model.physics('cd').feature('egnd1').selection.named('geom1_sel3');
model.physics('cd').feature('egnd1').set('IncludeContactResistance', true);
model.physics('cd').feature('egnd1').set('Rc', 'Rc');
model.physics('cd').create('ec1', 'ElectrodeCurrent', 2);
model.physics('cd').feature('ec1').selection.named('geom1_sel4');
model.physics('cd').feature('ec1').set('ElectronicCurrentType', 'AverageCurrentDensity');
model.physics('cd').feature('ec1').set('Ias', 'I_avg');
model.physics('cd').feature('ec1').set('IncludeContactResistance', true);
model.physics('cd').feature('ec1').set('Rc', 'Rc');

model.common('cminpt').set('modified', {'temperature' 'T'});

model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('size1').set('hmax', 'H_ch*0.8');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([5 6 7]);
model.mesh('mesh1').run('swe1');
model.mesh('mesh1').run('swe1');
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.set([4 8]);
model.mesh('mesh1').run('ftet1');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(3);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('bl1').selection.named('geom1_ext1_dom');
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('geom1_difsel1');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 2);
model.mesh('mesh1').feature('bl1').feature('blp').set('blstretch', 1.3);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', 'H_ch/10');
model.mesh('mesh1').run('bl1');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.named('geom1_sel3');
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').create('swe2', 'Sweep');
model.mesh('mesh1').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis1').selection.set([3]);
model.mesh('mesh1').feature('swe2').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('swe2').feature('dis1').set('elemratio', 2);
model.mesh('mesh1').feature('swe2').feature('dis1').set('reverse', true);
model.mesh('mesh1').feature('swe2').create('dis2', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis2').selection.set([2]);
model.mesh('mesh1').feature('swe2').feature('dis2').set('numelem', 2);
model.mesh('mesh1').feature('swe2').feature.duplicate('dis3', 'dis1');
model.mesh('mesh1').feature('swe2').feature('dis3').selection.set([1]);
model.mesh('mesh1').feature('swe2').feature('dis3').set('reverse', false);
model.mesh('mesh1').run;

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_cd_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_cd_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (cd)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (cd)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (cd)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_cd_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_cd_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_phis').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-4);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').label('Direct (cd)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('Algebraic Multigrid (cd)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Geometric Multigrid (cd)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').label('Electrolyte Potential (cd)');
model.result('pg1').create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('expr', {'phil'});
model.result('pg1').create('arwv1', 'ArrowVolume');
model.result('pg1').feature('arwv1').set('expr', {'cd.Ilx' 'cd.Ily' 'cd.Ilz'});
model.result('pg1').feature('arwv1').set('arrowbase', 'center');
model.result('pg1').feature('arwv1').set('color', 'gray');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').label('Electrolyte Current Density (cd)');
model.result('pg2').create('arwv1', 'ArrowVolume');
model.result('pg2').feature('arwv1').set('expr', {'cd.Ilx' 'cd.Ily' 'cd.Ilz'});
model.result('pg2').feature('arwv1').set('arrowbase', 'center');
model.result('pg2').feature('arwv1').set('color', 'gray');
model.result('pg2').feature('arwv1').create('col1', 'Color');
model.result('pg2').feature('arwv1').feature('col1').set('expr', 'root.comp1.cd.IlMag');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').label('Electrode Potential with Respect to Ground (cd)');
model.result('pg3').create('mslc1', 'Multislice');
model.result('pg3').feature('mslc1').set('expr', {'phis'});
model.result('pg3').create('arwv1', 'ArrowVolume');
model.result('pg3').feature('arwv1').set('expr', {'cd.Isx' 'cd.Isy' 'cd.Isz'});
model.result('pg3').feature('arwv1').set('arrowbase', 'center');
model.result('pg3').feature('arwv1').set('color', 'gray');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').label('Electrode Current Density (cd)');
model.result('pg4').create('arwv1', 'ArrowVolume');
model.result('pg4').feature('arwv1').set('expr', {'cd.Isx' 'cd.Isy' 'cd.Isz'});
model.result('pg4').feature('arwv1').set('arrowbase', 'center');
model.result('pg4').feature('arwv1').set('color', 'gray');
model.result('pg4').feature('arwv1').create('col1', 'Color');
model.result('pg4').feature('arwv1').feature('col1').set('expr', 'root.comp1.cd.IsMag');
model.result('pg1').run;
model.result('pg3').run;
model.result('pg3').run;

model.physics.create('br', 'PorousMediaFlowBrinkman', 'geom1');
model.physics('br').model('comp1');

model.study('std1').feature('cdi').setSolveFor('/physics/br', true);
model.study('std1').feature('stat').setSolveFor('/physics/br', true);

model.physics('br').prop('ShapeProperty').set('order_fluid', '1');
model.physics('br').prop('PhysicalModelProperty').set('Compressibility', 'CompressibleMALT03');
model.physics.create('tcs', 'ConcentratedSpeciesInPorousMedia', 'geom1', {'w1' 'w2'});

model.study('std1').feature('cdi').setSolveFor('/physics/tcs', true);
model.study('std1').feature('stat').setSolveFor('/physics/tcs', true);

model.physics('tcs').prop('TransportMechanism').set('MassTransferInPorousMedia', '1');

model.multiphysics.create('nirf1', 'NonIsothermalReactingFlow', 'geom1', 3);

model.study('std1').feature('cdi').setSolveFor('/multiphysics/nirf1', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/nirf1', true);

model.multiphysics('nirf1').set('Fluid_physics', 'br');
model.multiphysics('nirf1').set('Species_physics', 'tcs');

model.material.create('pmat1', 'PorousMedia', 'comp1');
model.material('pmat1').selection.set([]);

model.multiphysics('nirf1').set('temperature', 'T');

model.material('pmat1').selection.named('geom1_blk3_dom');
model.material('pmat1').set('porosity', 'por');
model.material('pmat1').propertyGroup('def').set('hydraulicpermeability', {'kappa'});

model.physics('br').selection.set([3 4 5 6 7 8]);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(3);
model.selection('sel1').label('Gas domains');
model.selection('sel1').set([3 4 5 6 7 8]);

model.physics('br').selection.named('sel1');
model.physics('br').prop('PhysicalModelProperty').set('StokesFlowProp', false);
model.physics('br').create('fp1', 'FluidProperties', 3);
model.physics('br').feature('fp1').selection.named('geom1_ext1_dom');
model.physics('br').create('inl1', 'InletBoundary', 2);
model.physics('br').feature('inl1').selection.named('geom1_sel1');
model.physics('br').feature('inl1').set('BoundaryCondition', 'MassFlow');
model.physics('br').feature('inl1').set('mfr', 'Mflux_in');
model.physics('br').create('out1', 'OutletBoundary', 2);
model.physics('br').feature('out1').selection.named('geom1_sel2');
model.physics('br').feature('out1').set('NormalFlow', true);
model.physics('tcs').selection.named('sel1');
model.physics('tcs').prop('TransportMechanism').set('DiffusionModel', 'MaxwellStefan');
model.physics('tcs').field('massfraction').component(1, 'wH2');
model.physics('tcs').field('massfraction').component(2, 'wH2O');
model.physics('tcs').feature('sp1').setIndex('M_wH2_src', 'root.comp1.chem.M_H2', 0);
model.physics('tcs').feature('sp1').setIndex('M_wH2O_src', 'root.comp1.chem.M_H2O', 0);
model.physics('tcs').feature('porous1').feature('fluid1').setIndex('DiffusivityFrom', 'comp1.chem.D_H2_H2O', 0, 0);
model.physics('tcs').feature('porous1').feature('fluid1').set('FluidDiffusivityModelType', 'BruggemanModel');
model.physics('tcs').feature('porous1').feature('fluid1').set('IncludePoreWallInteractions', true);
model.physics('tcs').feature('porous1').feature('fluid1').set('d_pore', 'd_pore');
model.physics('tcs').create('pec1', 'PorousElectrodeCoupling', 3);
model.physics('tcs').feature('pec1').selection.named('geom1_blk3_dom');
model.physics('tcs').feature('pec1').feature('rc1').set('iv_src', 'root.comp1.cd.pce1.per1.iv');
model.physics('tcs').feature('pec1').feature('rc1').set('nm', 2);
model.physics('tcs').feature('pec1').feature('rc1').setIndex('Vi', 1, 0);
model.physics('tcs').feature('pec1').feature('rc1').setIndex('Vi', -1, 1);
model.physics('tcs').create('in1', 'Inflow', 2);
model.physics('tcs').feature('in1').selection.named('geom1_sel1');
model.physics('tcs').feature('in1').set('MixtureSpecification', 'MassFlowRates');
model.physics('tcs').feature('in1').setIndex('J0', 'Mflux_in', 1);
model.physics('tcs').create('out1', 'Outflow', 2);
model.physics('tcs').feature('out1').selection.named('geom1_sel2');
model.physics('tcs').create('cdm1', 'ConvectionDiffusionMigration', 3);
model.physics('tcs').feature('cdm1').selection.named('geom1_ext1_dom');
model.physics('tcs').feature('cdm1').setIndex('DiffusivityFrom', 'comp1.chem.D_H2_H2O', 0, 0);
model.physics('tcs').feature('init1').set('MixtureSpecification', 'MoleFractions');
model.physics('tcs').feature('init1').setIndex('x0', '0.95*(1-x/(W_cell*stoich))', 1);
model.physics('chem').prop('ChemistryModelInputParameter').set('MassTransfer', 'tcs');
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationInput', 'wH2', 0, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationInput', 'wH2O', 1, 0);

model.study('std1').feature('stat').setEntry('activate', 'cd', true);
model.study('std1').feature('stat').setEntry('activate', 'br', false);
model.study('std1').feature('stat').setEntry('activate', 'tcs', false);
model.study('std1').feature('stat').setEntry('activateCoupling', 'nirf1', false);
model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat2').setEntry('activate', 'cd', false);
model.study('std1').feature('stat2').setEntry('activate', 'tcs', false);
model.study('std1').feature('stat2').setEntry('activateCoupling', 'nirf1', false);
model.study('std1').create('stat3', 'Stationary');

model.sol.remove('sol1');
model.sol.remove('sol2');
model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 4 5 6 7 8]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 4 5 6 7 8]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 4 5 6 7 8]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 4 5 6 7 8]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 4 5 6 7 8]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_cd_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_cd_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (cd)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (cd)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (cd)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_cd_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_cd_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_phis').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-4);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').label('Direct (cd)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('Algebraic Multigrid (cd)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Geometric Multigrid (cd)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'stat2');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'stat2');
model.sol('sol1').create('s3', 'Stationary');
model.sol('sol1').feature('s3').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s3').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s3').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s3').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s3').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s3').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s3').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('d1').label('Direct, fluid flow variables (br)');
model.sol('sol1').feature('s3').create('i1', 'Iterative');
model.sol('sol1').feature('s3').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s3').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s3').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i1').label('AMG, fluid flow variables (br)');
model.sol('sol1').feature('s3').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_br_inl1_Pmf'});
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_br_inl1_Pmf'});
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s3').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s3').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s3').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s3').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s3').feature.remove('fcDef');
model.sol('sol1').create('su3', 'StoreSolution');
model.sol('sol1').create('st4', 'StudyStep');
model.sol('sol1').feature('st4').set('study', 'std1');
model.sol('sol1').feature('st4').set('studystep', 'stat3');
model.sol('sol1').create('v4', 'Variables');
model.sol('sol1').feature('v4').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v4').feature('comp1_cd_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v4').feature('comp1_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v4').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v4').feature('comp1_cd_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v4').feature('comp1_phis').set('scaleval', '1');
model.sol('sol1').feature('v4').set('initmethod', 'sol');
model.sol('sol1').feature('v4').set('initsol', 'sol1');
model.sol('sol1').feature('v4').set('initsoluse', 'sol4');
model.sol('sol1').feature('v4').set('notsolmethod', 'sol');
model.sol('sol1').feature('v4').set('notsol', 'sol1');
model.sol('sol1').feature('v4').set('control', 'stat3');
model.sol('sol1').create('s4', 'Stationary');
model.sol('sol1').feature('s4').set('stol', 1.0E-4);
model.sol('sol1').feature('s4').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s4').create('seDef', 'Segregated');
model.sol('sol1').feature('s4').create('se1', 'Segregated');
model.sol('sol1').feature('s4').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s4').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s4').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u' 'comp1_br_inl1_Pmf'});
model.sol('sol1').feature('s4').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s4').create('d1', 'Direct');
model.sol('sol1').feature('s4').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s4').feature('d1').label('Direct, fluid flow variables (br)');
model.sol('sol1').feature('s4').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s4').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s4').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s4').feature('se1').feature('ss2').set('segvar', {'comp1_wH2O' 'comp1_tcs_in1_wbnd_wH2O'});
model.sol('sol1').feature('s4').feature('se1').feature('ss2').set('subdamp', 0.35);
model.sol('sol1').feature('s4').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s4').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol1').feature('s4').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol1').feature('s4').create('d2', 'Direct');
model.sol('sol1').feature('s4').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s4').feature('d2').label('Direct, mass fractions (tcs)');
model.sol('sol1').feature('s4').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s4').feature('se1').feature('ss2').label('Mass Fractions');
model.sol('sol1').feature('s4').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s4').feature('se1').feature('ss3').set('segvar', {'comp1_phil' 'comp1_phis' 'comp1_cd_ec1_phis0'});
model.sol('sol1').feature('s4').feature('se1').feature('ss3').set('subjtech', 'onevery');
model.sol('sol1').feature('s4').create('d3', 'Direct');
model.sol('sol1').feature('s4').feature('d3').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').feature('d3').label('Direct (cd)');
model.sol('sol1').feature('s4').feature('se1').feature('ss3').set('linsolver', 'd3');
model.sol('sol1').feature('s4').feature('se1').feature('ss3').label('Current Distribution');
model.sol('sol1').feature('s4').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s4').feature('se1').set('subinitcfl', 5);
model.sol('sol1').feature('s4').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s4').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s4').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s4').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s4').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s4').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s4').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s4').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s4').feature('se1').set('maxsegiter', 200);
model.sol('sol1').feature('s4').create('i1', 'Iterative');
model.sol('sol1').feature('s4').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s4').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s4').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s4').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s4').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s4').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s4').feature('i1').label('AMG, fluid flow variables (br)');
model.sol('sol1').feature('s4').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_br_inl1_Pmf'});
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_br_inl1_Pmf'});
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s4').create('i2', 'Iterative');
model.sol('sol1').feature('s4').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s4').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s4').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s4').feature('i2').set('rhob', 400);
model.sol('sol1').feature('s4').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s4').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s4').feature('i2').label('AMG, mass fractions (tcs)');
model.sol('sol1').feature('s4').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s4').create('i3', 'Iterative');
model.sol('sol1').feature('s4').feature('i3').set('maxlinit', 1000);
model.sol('sol1').feature('s4').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s4').feature('i3').label('Algebraic Multigrid (cd)');
model.sol('sol1').feature('s4').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').create('i4', 'Iterative');
model.sol('sol1').feature('s4').feature('i4').set('maxlinit', 1000);
model.sol('sol1').feature('s4').feature('i4').set('nlinnormuse', 'on');
model.sol('sol1').feature('s4').feature('i4').label('Geometric Multigrid (cd)');
model.sol('sol1').feature('s4').feature('i4').create('mg1', 'Multigrid');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').feature.remove('fcDef');
model.sol('sol1').feature('s4').feature.remove('seDef');
model.sol('sol1').feature('v4').set('notsolnum', 'auto');
model.sol('sol1').feature('v4').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v3').set('solnum', 'auto');
model.sol('sol1').feature('v3').set('solvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s4').create('fc1', 'FullyCoupled');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').label('Electrolyte Potential (cd)');
model.result('pg1').create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('expr', {'phil'});
model.result('pg1').create('arwv1', 'ArrowVolume');
model.result('pg1').feature('arwv1').set('expr', {'cd.Ilx' 'cd.Ily' 'cd.Ilz'});
model.result('pg1').feature('arwv1').set('arrowbase', 'center');
model.result('pg1').feature('arwv1').set('color', 'gray');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').label('Electrolyte Current Density (cd)');
model.result('pg2').create('arwv1', 'ArrowVolume');
model.result('pg2').feature('arwv1').set('expr', {'cd.Ilx' 'cd.Ily' 'cd.Ilz'});
model.result('pg2').feature('arwv1').set('arrowbase', 'center');
model.result('pg2').feature('arwv1').set('color', 'gray');
model.result('pg2').feature('arwv1').create('col1', 'Color');
model.result('pg2').feature('arwv1').feature('col1').set('expr', 'root.comp1.cd.IlMag');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').label('Electrode Potential with Respect to Ground (cd)');
model.result('pg3').create('mslc1', 'Multislice');
model.result('pg3').feature('mslc1').set('expr', {'phis'});
model.result('pg3').create('arwv1', 'ArrowVolume');
model.result('pg3').feature('arwv1').set('expr', {'cd.Isx' 'cd.Isy' 'cd.Isz'});
model.result('pg3').feature('arwv1').set('arrowbase', 'center');
model.result('pg3').feature('arwv1').set('color', 'gray');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').label('Electrode Current Density (cd)');
model.result('pg4').create('arwv1', 'ArrowVolume');
model.result('pg4').feature('arwv1').set('expr', {'cd.Isx' 'cd.Isy' 'cd.Isz'});
model.result('pg4').feature('arwv1').set('arrowbase', 'center');
model.result('pg4').feature('arwv1').set('color', 'gray');
model.result('pg4').feature('arwv1').create('col1', 'Color');
model.result('pg4').feature('arwv1').feature('col1').set('expr', 'root.comp1.cd.IsMag');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Velocity (br)');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('data', 'dset1');
model.result('pg5').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg5').feature.create('slc1', 'Slice');
model.result('pg5').feature('slc1').label('Slice');
model.result('pg5').feature('slc1').set('showsolutionparams', 'on');
model.result('pg5').feature('slc1').set('expr', 'br.U');
model.result('pg5').feature('slc1').set('smooth', 'internal');
model.result('pg5').feature('slc1').set('showsolutionparams', 'on');
model.result('pg5').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([7 8 9 10 13 14 15 17 18 21 23 24 25 26 28 30 31 32 33 35 37 38 39 40 41 43 44 47 49 51 52 55]);
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Pressure (br)');
model.result('pg6').set('data', 'surf1');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('data', 'surf1');
model.result('pg6').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond2/pcond1/pg4');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').label('Surface');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('expr', 'p');
model.result('pg6').feature('surf1').set('colortable', 'Dipole');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result('pg6').feature('surf1').feature.create('tran1', 'Transparency');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').label('Concentration, H2, Streamline (tcs)');
model.result('pg7').set('titletype', 'custom');
model.result('pg7').set('typeintitle', true);
model.result('pg7').set('prefixintitle', 'Species H2:');
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('expr', {'tcs.tflux_wH2x' 'tcs.tflux_wH2y' 'tcs.tflux_wH2z'});
model.result('pg7').feature('str1').set('posmethod', 'start');
model.result('pg7').feature('str1').set('pointtype', 'arrow');
model.result('pg7').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg7').feature('str1').set('color', 'gray');
model.result('pg7').feature('str1').create('col', 'Color');
model.result('pg7').feature('str1').feature('col').set('expr', 'root.comp1.tcs.c_wH2');
model.result('pg7').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'dset1');
model.result('pg8').label('Concentration, H2, Surface (tcs)');
model.result('pg8').set('titletype', 'custom');
model.result('pg8').set('prefixintitle', 'Species H2:');
model.result('pg8').set('expressionintitle', false);
model.result('pg8').set('typeintitle', false);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'tcs.c_wH2'});
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').set('data', 'dset1');
model.result('pg9').label('Concentration, H2O, Streamline (tcs)');
model.result('pg9').set('titletype', 'custom');
model.result('pg9').set('typeintitle', true);
model.result('pg9').set('prefixintitle', 'Species H2O:');
model.result('pg9').create('str1', 'Streamline');
model.result('pg9').feature('str1').set('expr', {'tcs.tflux_wH2Ox' 'tcs.tflux_wH2Oy' 'tcs.tflux_wH2Oz'});
model.result('pg9').feature('str1').set('posmethod', 'start');
model.result('pg9').feature('str1').set('pointtype', 'arrow');
model.result('pg9').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg9').feature('str1').set('color', 'gray');
model.result('pg9').feature('str1').create('col', 'Color');
model.result('pg9').feature('str1').feature('col').set('expr', 'root.comp1.tcs.c_wH2O');
model.result('pg9').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').set('data', 'dset1');
model.result('pg10').label('Concentration, H2O, Surface (tcs)');
model.result('pg10').set('titletype', 'custom');
model.result('pg10').set('prefixintitle', 'Species H2O:');
model.result('pg10').set('expressionintitle', false);
model.result('pg10').set('typeintitle', false);
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', {'tcs.c_wH2O'});
model.result('pg1').run;
model.result('pg5').run;
model.result('pg5').feature('slc1').set('quickplane', 'xy');
model.result('pg5').feature('slc1').set('quickzmethod', 'coord');
model.result('pg5').feature('slc1').set('quickz', 'H_cell-H_ch/2');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').create('str1', 'Streamline');
model.result('pg5').feature('str1').set('expr', {'u' 'v' 'w'});
model.result('pg5').feature('str1').set('descr', 'Velocity field');
model.result('pg5').feature('str1').selection.named('geom1_sel1');
model.result('pg5').feature('str1').set('pointtype', 'arrow');
model.result('pg5').feature('str1').set('arrowdistr', 'equalinvtime');
model.result('pg5').feature('str1').set('color', 'black');
model.result('pg5').run;
model.result.create('pg11', 'PlotGroup3D');
model.result('pg11').run;
model.result('pg11').label('Density');
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('expr', 'br.rho');
model.result('pg11').feature('surf1').set('descr', 'Density');
model.result('pg11').run;
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').run;
model.result('pg12').label('Viscosity');
model.result('pg12').create('surf1', 'Surface');
model.result('pg12').feature('surf1').set('expr', 'br.mu');
model.result('pg12').feature('surf1').set('descr', 'Dynamic viscosity');
model.result('pg12').run;
model.result('pg8').run;
model.result('pg10').run;
model.result.create('pg13', 'PlotGroup3D');
model.result('pg13').run;
model.result('pg13').label('Molar Fraction and Flux, H2');
model.result('pg13').set('edges', false);
model.result('pg13').create('str1', 'Streamline');
model.result('pg13').feature('str1').set('expr', {'tcs.tflux_wH2x' 'tcs.tflux_wH2y' 'tcs.tflux_wH2z'});
model.result('pg13').feature('str1').set('descr', 'Total flux');
model.result('pg13').feature('str1').set('selnumber', 30);
model.result('pg13').feature('str1').selection.named('geom1_sel2');
model.result('pg13').feature('str1').set('pointtype', 'arrow');
model.result('pg13').feature('str1').set('arrowdistr', 'equalinvtime');
model.result('pg13').feature('str1').set('color', 'black');
model.result('pg13').feature('str1').create('sel1', 'Selection');
model.result('pg13').feature('str1').feature('sel1').selection.named('geom1_ext1_dom');
model.result('pg13').run;
model.result('pg13').create('vol1', 'Volume');
model.result('pg13').feature('vol1').set('expr', 'tcs.x_wH2');
model.result('pg13').feature('vol1').set('descr', 'Mole fraction');
model.result('pg13').feature('vol1').create('sel1', 'Selection');
model.result('pg13').feature('vol1').feature('sel1').selection.named('geom1_blk3_dom');

model.view('view1').set('showgrid', false);

model.result('pg13').run;
model.result.create('pg14', 'PlotGroup3D');
model.result('pg14').run;
model.result('pg14').label('Cross-Sectional Electrolyte Current Density');
model.result('pg14').set('edges', false);
model.result('pg14').create('slc1', 'Slice');
model.result('pg14').feature('slc1').set('expr', 'cd.Ilz');
model.result('pg14').feature('slc1').set('descr', 'Electrolyte current density vector, z-component');
model.result('pg14').feature('slc1').set('quickplane', 'xy');
model.result('pg14').feature('slc1').set('quickzmethod', 'coord');
model.result('pg14').feature('slc1').set('quickz', 'H_gde+H_el/2');
model.result('pg14').run;

model.title('Solid Oxide Electrolyzer Using Thermodynamics');

model.description(['This example models a solid oxide electrolyzer cell wherein water vapor is reduced to form hydrogen gas on the cathode, and oxygen gas is evolved on the anode. The current distribution in the cell is coupled to the cathode mass transfer of hydrogen and water and momentum transport.' newline  newline 'The Thermodynamics and Chemistry nodes are used to automatically define the properties of the cathode gas mixture, as well as the equilibrium potentials of the electrode reactions.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('soec_thermodynamics.mph');

model.modelNode.label('Components');

out = model;
