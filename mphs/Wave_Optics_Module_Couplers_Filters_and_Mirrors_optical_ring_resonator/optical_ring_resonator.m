function out = model
%
% optical_ring_resonator.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Wave_Optics_Module/Couplers_Filters_and_Mirrors');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ewbe', 'ElectromagneticWavesBeamEnvelopes', 'geom1');
model.physics('ewbe').model('comp1');

model.study.create('std1');
model.study('std1').create('bma', 'BoundaryModeAnalysis');
model.study('std1').feature('bma').set('shiftactive', false);
model.study('std1').feature('bma').set('conrad', '1');
model.study('std1').feature('bma').set('conradynhm', '1');
model.study('std1').feature('bma').set('linpsolnum', 'auto');
model.study('std1').feature('bma').set('solnum', 'auto');
model.study('std1').feature('bma').set('notsolnum', 'auto');
model.study('std1').feature('bma').set('outputmap', {});
model.study('std1').feature('bma').set('ngenAUX', '1');
model.study('std1').feature('bma').set('goalngenAUX', '1');
model.study('std1').feature('bma').set('ngenAUX', '1');
model.study('std1').feature('bma').set('goalngenAUX', '1');
model.study('std1').feature('bma').setSolveFor('/physics/ewbe', true);
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('solnum', 'auto');
model.study('std1').feature('freq').set('notsolnum', 'auto');
model.study('std1').feature('freq').set('outputmap', {});
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').setSolveFor('/physics/ewbe', true);

model.geom.load({'part1'}, 'Wave_Optics_Module/Slab_Waveguides/slab_waveguide_straight_to_ring_coupler.mph', {'part1'});
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').runPre('fin');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('wl0', '1.55[um]', 'Design wavelength');
model.param.set('w_core', '0.2[um]', 'Core width');
model.param.set('w_clad', '10*w_core', 'Cladding width');
model.param.set('r0', '4*wl0', 'Radius of curvature');
model.param.set('dx', '3.5833*w_core', 'Separation between waveguides');
model.param.set('lda0', 'wl0', 'Wavelength');
model.param.set('f0', 'c_const/lda0', 'Frequency');
model.param.set('n_core', '2.5', 'Core refractive index');
model.param.set('n_clad', '1.5', 'Cladding refractive index');

model.geom('geom1').feature('pi1').setEntry('inputexpr', 'core_width', 'w_core');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'cladding_width', 'w_clad');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'element_length', '2*r0+w_clad');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'coupler_core_separation', 'dx');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'ring_radius', 'r0');
model.geom('geom1').feature('pi1').set('displ', {'0' '-r0-w_clad/2'});
model.geom('geom1').runPre('fin');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_boxsel1', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_boxsel1', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_unisel1', true);
model.geom('geom1').feature('pi1').setEntry('selshowdom', 'pi1_unisel1', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_unisel1', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_difsel1', true);
model.geom('geom1').feature('pi1').setEntry('selshowdom', 'pi1_difsel1', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_difsel1', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_boxsel3', true);
model.geom('geom1').feature('pi1').setEntry('selshowdom', 'pi1_boxsel3', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_boxsel3', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_difsel2', true);
model.geom('geom1').feature('pi1').setEntry('selshowdom', 'pi1_difsel2', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_difsel2', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_csel1.dom', true);
model.geom('geom1').feature('pi1').setEntry('selshowdom', 'pi1_csel1.dom', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_csel1.dom', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_adjsel1', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_adjsel1', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_boxsel4', true);
model.geom('geom1').feature('pi1').setEntry('selshowbnd', 'pi1_boxsel4', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_boxsel4', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_intsel1', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_intsel1', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_intsel2', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_intsel2', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_boxsel5', true);
model.geom('geom1').feature('pi1').setEntry('selshowbnd', 'pi1_boxsel5', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_boxsel5', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_intsel3', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_intsel3', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_intsel4', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_intsel4', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_difsel3', true);
model.geom('geom1').feature('pi1').setEntry('selshowbnd', 'pi1_difsel3', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_difsel3', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_sel2', true);
model.geom('geom1').feature('pi1').setEntry('selshowbnd', 'pi1_sel2', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_sel2', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel2.bnd', true);
model.geom('geom1').feature('pi1').setEntry('selshowbnd', 'pi1_csel2.bnd', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel2.bnd', 'none');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').label('Phase, straight waveguide');
model.variable('var1').selection.geom('geom1', 2);
model.variable('var1').selection.named('geom1_pi1_csel1_dom');
model.variable('var1').set('phi', 'ewbe.beta_1*y');
model.variable('var1').descr('phi', '');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Phase, ring waveguide 1');
model.variable('var2').selection.geom('geom1', 2);
model.variable('var2').selection.named('geom1_pi1_boxsel3');
model.variable('var2').set('phi', 'ewbe.beta_1*r0*atan2(y,-(x-r0-dx))');
model.variable('var2').descr('phi', '');
model.variable.create('var3');
model.variable('var3').model('comp1');
model.variable('var3').label('Phase, ring waveguide 2');
model.variable('var3').selection.geom('geom1', 2);
model.variable('var3').selection.named('geom1_pi1_difsel2');
model.variable('var3').set('phi', 'ewbe.beta_1*r0*atan2(-y,(x-r0-dx))');
model.variable('var3').descr('phi', '');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Cladding');
model.material('mat1').selection.named('geom1_pi1_difsel1');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'n_clad'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Core');
model.material('mat2').selection.named('geom1_pi1_unisel1');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'n_core'});

model.physics('ewbe').prop('components').set('components', 'outofplane');
model.physics('ewbe').prop('WaveVector').set('dirCount', 'UniDirectionality');
model.physics('ewbe').prop('WaveVector').set('PhaseSpec', 'UserDefined');
model.physics('ewbe').prop('WaveVector').set('phase1', 'phi');
model.physics('ewbe').create('port1', 'Port', 1);
model.physics('ewbe').feature('port1').selection.named('geom1_pi1_boxsel4');
model.physics('ewbe').feature('port1').set('PortType', 'Numeric');
model.physics('ewbe').feature.duplicate('port2', 'port1');
model.physics('ewbe').feature('port2').selection.named('geom1_pi1_boxsel5');
model.physics('ewbe').feature('port2').set('PortExcitation', 'off');
model.physics('ewbe').create('sctr1', 'Scattering', 1);
model.physics('ewbe').feature('sctr1').selection.named('geom1_pi1_difsel3');
model.physics('ewbe').create('fcont1', 'FieldContinuity', 1);
model.physics('ewbe').feature('fcont1').selection.named('geom1_pi1_csel2_bnd');

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.named('geom1_pi1_sel2');
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').set('numelem', 3);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'wl0/2');
model.mesh('mesh1').run;

model.study('std1').feature('bma').set('modeFreq', 'f0');
model.study('std1').feature('bma').set('shiftactive', true);
model.study('std1').feature('bma').set('shift', 'n_core');
model.study('std1').feature.duplicate('bma1', 'bma');
model.study('std1').feature('bma1').set('PortName', '2');
model.study('std1').feature('freq').set('plist', 'f0');
model.study('std1').feature.move('freq', 2);
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'wl0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'wl0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'lda0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(1.559[um],(1.5615[um]-(1.559[um]))/29,1.5615[um])', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(1.559[um],(1.5615[um]-(1.559[um]))/29,1.5615[um])', 0);
model.study('std1').feature('param').setIndex('punit', 'um', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'bma');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'bma');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('neigs', 1);
model.sol('sol1').feature('e1').set('shift', '1');
model.sol('sol1').feature('e1').set('eigref', 'n_core');
model.sol('sol1').feature('e1').set('control', 'bma');
model.sol('sol1').feature('e1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('e1').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('e1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('e1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('e1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'bma1');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'bma1');
model.sol('sol1').create('e2', 'Eigenvalue');
model.sol('sol1').feature('e2').set('neigs', 1);
model.sol('sol1').feature('e2').set('shift', '1');
model.sol('sol1').feature('e2').set('eigref', 'n_core');
model.sol('sol1').feature('e2').set('control', 'bma1');
model.sol('sol1').feature('e2').set('linpmethod', 'sol');
model.sol('sol1').feature('e2').set('linpsol', 'sol1');
model.sol('sol1').feature('e2').set('control', 'bma1');
model.sol('sol1').feature('e2').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('e2').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('e2').feature('aDef').set('matherr', true);
model.sol('sol1').feature('e2').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('e2').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'freq');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'THz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v3').set('solnum', 'auto');
model.sol('sol1').feature('v3').set('solvertype', 'solnum');
model.sol('sol1').feature('e2').set('linpsolnum', 'auto');
model.sol('sol1').feature('e2').set('linpsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'lda0'});
model.batch('p1').set('plistarr', {'range(1.559[um],(1.5615[um]-(1.559[um]))/29,1.5615[um])'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol4');
model.sol('sol4').study('std1');
model.sol('sol4').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol4');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Electric Field (ewbe)');
model.result('pg1').set('data', 'dset4');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 30, 1);
model.result('pg1').set('data', 'dset4');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 30, 1);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWavesBeamEnvelopes/phys1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Electric Field');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset4');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('unit', {'' '' '' ''});
model.result('pg2').feature('glob1').set('expr', {'ewbe.Rport_1' 'ewbe.Tport_2' 'ewbe.RTtotal' 'ewbe.Atotal'});
model.result('pg2').feature('glob1').set('descr', {'Reflectance, port 1' 'Transmittance, port 2' 'Total reflectance and transmittance' 'Absorptance'});
model.result('pg2').label('Reflectance, Transmittance, and Absorptance (ewbe)');
model.result('pg2').feature('glob1').set('titletype', 'none');
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Reflectance, transmittance, and absorptance (1)');
model.result('pg2').feature('glob1').set('xdataexpr', 'lda0');
model.result('pg2').feature('glob1').set('xdataunit', 'um');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').label('Electric Mode Field, Port 1 (ewbe)');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('data', 'dset4');
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').selection.set([2 11 20]);
model.result('pg3').feature('lngr1').set('expr', 'root.comp1.ewbe.normEbm_1');
model.result('pg3').feature('lngr1').set('legend', true);
model.result('pg3').feature('lngr1').set('legendmethod', 'evaluated');
model.result('pg3').feature('lngr1').set('legendpattern', 'Effective mode index: eval(comp1.ewbe.neff_1)');
model.result('pg3').feature('lngr1').set('legendexprprecision', 5);
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').label('Electric Mode Field, Port 2 (ewbe)');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').set('data', 'dset4');
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').selection.set([9 18 27]);
model.result('pg4').feature('lngr1').set('expr', 'root.comp1.ewbe.normEbm_2');
model.result('pg4').feature('lngr1').set('legend', true);
model.result('pg4').feature('lngr1').set('legendmethod', 'evaluated');
model.result('pg4').feature('lngr1').set('legendpattern', 'Effective mode index: eval(comp1.ewbe.neff_2)');
model.result('pg4').feature('lngr1').set('legendexprprecision', 5);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').set('expr', 'ewbe.Ez');
model.result('pg1').feature('surf1').create('hght1', 'Height');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').set('looplevel', [1 16]);
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').label('Reflectance, Transmittance, and Loss (ewbe)');
model.result('pg2').set('ylabel', 'Reflectance, transmittance, and loss');
model.result('pg2').set('legendpos', 'lowerleft');
model.result('pg2').run;
model.result('pg2').feature('glob1').setIndex('unit', 1, 3);
model.result('pg2').feature('glob1').setIndex('descr', 'Loss', 3);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').setIndex('looplevelinput', 'first', 1);
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevelinput', 'first', 1);
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').run;
model.result('pg5').label('Phase Plot');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').label('Phase');
model.result('pg5').feature('surf1').set('expr', 'ewbe.phi1');
model.result('pg5').run;
model.result('pg5').run;
model.result.remove('pg5');
model.result('pg1').run;

model.title('Optical Ring Resonator Notch Filter');

model.description('This example calculates the spectral properties of an optical ring resonator. The model demonstrates how to use the Field Continuity boundary condition at boundaries, where there is a jump in the predefined phase approximation.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;
model.sol('sol20').clearSolutionData;
model.sol('sol21').clearSolutionData;
model.sol('sol22').clearSolutionData;
model.sol('sol23').clearSolutionData;
model.sol('sol24').clearSolutionData;
model.sol('sol25').clearSolutionData;
model.sol('sol26').clearSolutionData;
model.sol('sol27').clearSolutionData;
model.sol('sol28').clearSolutionData;
model.sol('sol29').clearSolutionData;
model.sol('sol30').clearSolutionData;
model.sol('sol31').clearSolutionData;
model.sol('sol32').clearSolutionData;
model.sol('sol33').clearSolutionData;
model.sol('sol34').clearSolutionData;

model.label('optical_ring_resonator.mph');

model.modelNode.label('Components');

out = model;
