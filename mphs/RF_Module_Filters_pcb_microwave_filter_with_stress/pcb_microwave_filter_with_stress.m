function out = model
%
% pcb_microwave_filter_with_stress.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/RF_Module/Filters');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('emw', 'ElectromagneticWaves', 'geom1');
model.physics('emw').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('solnum', 'auto');
model.study('std1').feature('freq').set('notsolnum', 'auto');
model.study('std1').feature('freq').set('outputmap', {});
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').setSolveFor('/physics/emw', true);

model.param.set('fstart', '750[MHz]');
model.param.descr('fstart', 'Start frequency');
model.param.set('fstop', '1.5[GHz]');
model.param.descr('fstop', 'Stop frequency');
model.param.set('fstep', '50[MHz]');
model.param.descr('fstep', 'Frequency step');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', [89.49 29.54 1.27]);
model.geom('geom1').feature('blk1').set('pos', [0 -10 0]);
model.geom('geom1').run('blk1');

model.view('view1').set('renderwireframe', true);

model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').set('quickz', 1.27);
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', [13.88 1.125]);
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').feature('wp1').geom.create('r2', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r2').set('size', [5 5.86]);
model.geom('geom1').feature('wp1').geom.feature('r2').set('pos', [13.88 0]);
model.geom('geom1').feature('wp1').geom.run('r2');
model.geom('geom1').feature('wp1').geom.create('r3', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r3').set('size', [13.32 0.1]);
model.geom('geom1').feature('wp1').geom.feature('r3').set('pos', [18.88 0]);
model.geom('geom1').feature('wp1').geom.run('r3');
model.geom('geom1').feature('wp1').geom.create('r4', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r4').set('size', [5 9.54]);
model.geom('geom1').feature('wp1').geom.feature('r4').set('pos', [32.2 0]);
model.geom('geom1').feature('wp1').geom.run('r4');
model.geom('geom1').feature('wp1').geom.create('r5', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r5').set('size', [15.09 0.1]);
model.geom('geom1').feature('wp1').geom.feature('r5').set('pos', [37.2 0]);
model.geom('geom1').feature('wp1').geom.run('r5');
model.geom('geom1').feature('wp1').geom.create('mir1', 'Mirror');
model.geom('geom1').feature('wp1').geom.feature('mir1').selection('input').set({'r1' 'r2' 'r3' 'r4'});
model.geom('geom1').feature('wp1').geom.feature('mir1').set('keep', true);
model.geom('geom1').feature('wp1').geom.feature('mir1').set('pos', [44.745 0]);
model.geom('geom1').feature('wp1').geom.run('mir1');
model.geom('geom1').feature('wp1').geom.create('uni1', 'Union');
model.geom('geom1').feature('wp1').geom.feature('uni1').selection('input').set({'mir1' 'r1' 'r2' 'r3' 'r4' 'r5'});
model.geom('geom1').feature('wp1').geom.feature('uni1').set('intbnd', false);
model.geom('geom1').feature('wp1').geom.run('uni1');
model.geom('geom1').run('wp1');
model.geom('geom1').create('wp2', 'WorkPlane');
model.geom('geom1').feature('wp2').set('unite', true);
model.geom('geom1').feature('wp2').set('quickz', 1.27);
model.geom('geom1').feature('wp2').geom.create('ls1', 'LineSegment');
model.geom('geom1').feature('wp2').geom.feature('ls1').set('specify1', 'coord');
model.geom('geom1').feature('wp2').geom.feature('ls1').set('specify2', 'coord');
model.geom('geom1').feature('wp2').geom.feature('ls1').set('coord2', [0 1.125]);
model.geom('geom1').feature('wp2').geom.run('ls1');
model.geom('geom1').feature('wp2').geom.create('mir1', 'Mirror');
model.geom('geom1').feature('wp2').geom.feature('mir1').selection('input').set({'ls1'});
model.geom('geom1').feature('wp2').geom.feature('mir1').set('keep', true);
model.geom('geom1').feature('wp2').geom.feature('mir1').set('pos', [44.745 0]);
model.geom('geom1').feature('wp2').geom.run('mir1');
model.geom('geom1').run('wp2');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').setIndex('distance', -1.27, 0);
model.geom('geom1').run('ext1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', [100 40 15]);
model.geom('geom1').feature('blk2').set('pos', [-5 -15 -10]);
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('FR4 (Circuit Board)');
model.material('mat2').set('family', 'pcbgreen');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0.004[S/m]' '0' '0' '0' '0.004[S/m]' '0' '0' '0' '0.004[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'4.5' '0' '0' '0' '4.5' '0' '0' '0' '4.5'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'18e-6[1/K]' '0' '0' '0' '18e-6[1/K]' '0' '0' '0' '18e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '1369[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('density', '1900[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'0.3[W/(m*K)]' '0' '0' '0' '0.3[W/(m*K)]' '0' '0' '0' '0.3[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '22[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.15');
model.material('mat2').selection.set([2]);
model.material('mat2').propertyGroup('def').set('relpermittivity', {'10.8'});

model.physics('emw').create('sctr1', 'Scattering', 2);
model.physics('emw').feature('sctr1').selection.set([1 2 3 4 5 18]);
model.physics('emw').create('lport1', 'LumpedPort', 2);
model.physics('emw').feature('lport1').selection.set([10]);
model.physics('emw').create('lport2', 'LumpedPort', 2);
model.physics('emw').feature('lport2').selection.set([16]);
model.physics('emw').create('pec2', 'PerfectElectricConductor', 2);
model.physics('emw').feature('pec2').selection.set([8 11]);

model.mesh('mesh1').run;

model.probe.create('var1', 'GlobalVariable');
model.probe('var1').model('comp1');
model.probe('var1').set('probename', 'S11');
model.probe('var1').set('expr', 'emw.S11dB');
model.probe('var1').set('descr', 'S11');
model.probe.create('var2', 'GlobalVariable');
model.probe('var2').model('comp1');
model.probe('var2').set('probename', 'S21');
model.probe('var2').set('expr', 'emw.S21dB');
model.probe('var2').set('descr', 'S21');

model.study('std1').feature('freq').set('plist', 'range(fstart,fstep,fstop)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(fstart,fstep,fstop)'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {'var1' 'var2'});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.probe('var1').genResult('none');
model.probe('var2').genResult('none');

model.sol('sol1').runAll;

model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Electric Field (emw)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 16, 0);
model.result('pg2').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond1/pg1');
model.result('pg2').feature.create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').label('Multislice');
model.result('pg2').feature('mslc1').set('smooth', 'internal');
model.result('pg2').feature('mslc1').set('data', 'parent');
model.result('pg2').feature('mslc1').feature.create('filt1', 'Filter');
model.result('pg2').feature('mslc1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('unit', {'' ''});
model.result('pg3').feature('glob1').set('expr', {'emw.S11dB' 'emw.S21dB'});
model.result('pg3').feature('glob1').set('descr', {'S11' 'S21'});
model.result('pg3').label('S-parameter (emw)');
model.result('pg3').feature('glob1').set('titletype', 'none');
model.result('pg3').feature('glob1').set('xdata', 'expr');
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'S-parameter (dB)');
model.result('pg3').feature('glob1').set('xdataexpr', 'freq');
model.result('pg3').feature('glob1').set('xdataunit', 'GHz');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg4', 'SmithGroup');
model.result('pg4').set('data', 'dset1');
model.result('pg4').create('rgr1', 'ReflectionGraph');
model.result('pg4').feature('rgr1').set('unit', {''});
model.result('pg4').feature('rgr1').set('expr', {'emw.S11'});
model.result('pg4').feature('rgr1').set('descr', {'S11'});
model.result('pg4').label('Smith Plot (emw)');
model.result('pg4').feature('rgr1').set('titletype', 'manual');
model.result('pg4').feature('rgr1').set('title', 'Reflection Graph: S-parameter, Color: Frequency (GHz)');
model.result('pg4').feature('rgr1').set('linemarker', 'point');
model.result('pg4').feature('rgr1').set('markerpos', 'datapoints');
model.result('pg4').feature('rgr1').create('col1', 'Color');
model.result('pg4').feature('rgr1').feature('col1').set('expr', 'emw.freq/1e9');
model.result('pg4').feature('rgr1').feature('col1').set('colortable', 'Spectrum');
model.result('pg2').run;

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study('std1').feature('freq').setSolveFor('/physics/solid', true);

model.physics('solid').selection.set([2]);

model.param.set('fload', '40[N]');
model.param.descr('fload', 'Load on PCB');

model.geom('geom1').measure.selection.init(3);
model.geom('geom1').measure.selection.set('fin', 2);

model.param.set('V', '3357.0[mm^3]');
model.param.descr('V', 'Volume of PCB');

model.physics('solid').create('bl1', 'BodyLoad', 3);
model.physics('solid').feature('bl1').selection.set([2]);
model.physics('solid').feature('bl1').set('FperVol', {'0' '0' '-fload/V'});
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.set([6 10 12 15 16 17]);

model.common.create('free1', 'DeformingDomain', 'comp1');
model.common('free1').selection.all;
model.common('free1').selection.set([1]);

model.study('std1').feature('freq').setEntry('activate', 'solid', false);
model.study('std1').feature('freq').setEntry('activate', 'frame:spatial1', false);
model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/emw', false);
model.study('std2').feature('stat').setSolveFor('/physics/solid', true);
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').setEntry('activate', 'solid', false);
model.study('std2').feature('freq').setEntry('activate', 'frame:spatial1', false);
model.study('std2').feature('freq').set('plist', 'range(fstart,fstep,fstop)');
model.study('std2').feature('freq').set('plot', true);
model.study('std2').feature('freq').set('plotgroup', 'pg2');

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1.5548889295535168E-4');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('se1', 'Segregated');
model.sol('sol2').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_u'});
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('d1').set('nliniterrefine', true);
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').label('Solid Mechanics');
model.sol('sol2').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_spatial_disp'});
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').label('Spatial Frame Variables');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol2').feature('s1').feature('i1').set('rhob', 40);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('mg1').set('iter', 2);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('mg1').set('mglevels', 2);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('mg1').set('maxcoarsedof', 10000);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').create('st2', 'StudyStep');
model.sol('sol2').feature('st2').set('study', 'std2');
model.sol('sol2').feature('st2').set('studystep', 'freq');
model.sol('sol2').create('v2', 'Variables');
model.sol('sol2').feature('v2').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v2').feature('comp1_spatial_disp').set('scaleval', '1.5548889295535168E-4');
model.sol('sol2').feature('v2').set('initmethod', 'sol');
model.sol('sol2').feature('v2').set('initsol', 'sol2');
model.sol('sol2').feature('v2').set('notsolmethod', 'sol');
model.sol('sol2').feature('v2').set('notsol', 'sol2');
model.sol('sol2').feature('v2').set('control', 'freq');
model.sol('sol2').create('s2', 'Stationary');
model.sol('sol2').feature('s2').set('stol', 0.01);
model.sol('sol2').feature('s2').create('p1', 'Parametric');
model.sol('sol2').feature('s2').feature.remove('pDef');
model.sol('sol2').feature('s2').feature('p1').set('pname', {'freq'});
model.sol('sol2').feature('s2').feature('p1').set('plistarr', {'range(fstart,fstep,fstop)'});
model.sol('sol2').feature('s2').feature('p1').set('punit', {'Hz'});
model.sol('sol2').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('s2').feature('p1').set('plot', 'on');
model.sol('sol2').feature('s2').feature('p1').set('plotgroup', 'pg2');
model.sol('sol2').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s2').feature('p1').set('probes', {'var1' 'var2'});
model.sol('sol2').feature('s2').feature('p1').set('control', 'freq');
model.sol('sol2').feature('s2').set('linpmethod', 'sol');
model.sol('sol2').feature('s2').set('linpsol', 'zero');
model.sol('sol2').feature('s2').set('control', 'freq');
model.sol('sol2').feature('s2').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s2').create('i1', 'Iterative');
model.sol('sol2').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s2').feature('i1').set('prefuntype', 'right');
model.sol('sol2').feature('s2').feature('i1').set('itrestart', '300');
model.sol('sol2').feature('s2').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol2').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s2').feature('fc1').set('linsolver', 'i1');
model.sol('sol2').feature('s2').feature.remove('fcDef');
model.sol('sol2').feature('v2').set('notsolnum', 'auto');
model.sol('sol2').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol2').feature('v2').set('solnum', 'auto');
model.sol('sol2').feature('v2').set('solvertype', 'solnum');
model.sol('sol2').attach('std2');

model.probe('var1').genResult('none');
model.probe('var2').genResult('none');

model.sol('sol2').runAll;

model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Electric Field (emw) 1');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 16, 0);
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('showlegendsmaxmin', true);
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 16, 0);
model.result('pg5').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond1/pg1');
model.result('pg5').feature.create('mslc1', 'Multislice');
model.result('pg5').feature('mslc1').label('Multislice');
model.result('pg5').feature('mslc1').set('smooth', 'internal');
model.result('pg5').feature('mslc1').set('data', 'parent');
model.result('pg5').feature('mslc1').feature.create('filt1', 'Filter');
model.result('pg5').feature('mslc1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').set('data', 'dset3');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('unit', {'' ''});
model.result('pg6').feature('glob1').set('expr', {'emw.S11dB' 'emw.S21dB'});
model.result('pg6').feature('glob1').set('descr', {'S11' 'S21'});
model.result('pg6').label('S-parameter (emw) 1');
model.result('pg6').feature('glob1').set('titletype', 'none');
model.result('pg6').feature('glob1').set('xdata', 'expr');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'S-parameter (dB)');
model.result('pg6').feature('glob1').set('xdataexpr', 'freq');
model.result('pg6').feature('glob1').set('xdataunit', 'Hz');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('xdatasolnumtype', 'all');

model.study('std2').feature('freq').set('plotgroup', 'pg6');

model.result.create('pg7', 'SmithGroup');
model.result('pg7').set('data', 'dset3');
model.result('pg7').create('rgr1', 'ReflectionGraph');
model.result('pg7').feature('rgr1').set('unit', {''});
model.result('pg7').feature('rgr1').set('expr', {'emw.S11'});
model.result('pg7').feature('rgr1').set('descr', {'S11'});
model.result('pg7').label('Smith Plot (emw) 1');
model.result('pg7').feature('rgr1').set('titletype', 'manual');
model.result('pg7').feature('rgr1').set('title', 'Reflection Graph: S-parameter, Color: Frequency (GHz)');
model.result('pg7').feature('rgr1').set('linemarker', 'point');
model.result('pg7').feature('rgr1').set('markerpos', 'datapoints');
model.result('pg7').feature('rgr1').create('col1', 'Color');
model.result('pg7').feature('rgr1').feature('col1').set('expr', 'emw.freq/1e9');
model.result('pg7').feature('rgr1').feature('col1').set('colortable', 'Spectrum');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'dset3');
model.result('pg8').setIndex('looplevel', 16, 0);
model.result('pg8').set('defaultPlotID', 'stress');
model.result('pg8').label('Stress (solid)');
model.result('pg8').set('frametype', 'spatial');
model.result('pg8').create('vol1', 'Volume');
model.result('pg8').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg8').feature('vol1').set('threshold', 'manual');
model.result('pg8').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg8').feature('vol1').set('colortable', 'Rainbow');
model.result('pg8').feature('vol1').set('colortabletrans', 'none');
model.result('pg8').feature('vol1').set('colorscalemode', 'linear');
model.result('pg8').feature('vol1').set('resolution', 'custom');
model.result('pg8').feature('vol1').set('refine', 2);
model.result('pg8').feature('vol1').set('colortable', 'Prism');
model.result('pg8').feature('vol1').create('def', 'Deform');
model.result('pg8').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg8').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').set('data', 'dset3');
model.result('pg9').setIndex('looplevel', 16, 0);
model.result('pg9').label('Moving Mesh');
model.result('pg9').create('mesh1', 'Mesh');
model.result('pg9').feature('mesh1').set('meshdomain', 'volume');
model.result('pg9').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg9').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg9').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg9').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg9').feature('mesh1').feature('sel1').selection.set([1 2]);
model.result('pg9').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg9').feature('mesh1').set('qualexpr', 'comp1.spatial.relVol');
model.result('pg9').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg5').run;
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').feature.duplicate('glob2', 'glob1');
model.result('pg6').run;
model.result('pg6').feature('glob2').set('data', 'dset1');
model.result('pg6').feature('glob2').setIndex('descr', 'S11 without deformation', 0);
model.result('pg6').feature('glob2').setIndex('descr', 'S21 without deformation', 1);
model.result('pg6').run;
model.result('pg8').run;
model.result('pg8').feature('vol1').set('expr', 'solid.disp');
model.result('pg8').feature('vol1').set('descr', 'Displacement magnitude');
model.result('pg8').run;
model.result('pg8').set('data', 'dset4');
model.result('pg8').run;

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(2);
model.selection('sel1').label('Lumped port 1');
model.selection('sel1').set([10]);

model.physics('emw').feature('lport1').selection.named('sel1');

model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').geom(2);
model.selection('sel2').label('Lumped port 2');
model.selection('sel2').set([16]);

model.physics('emw').feature('lport2').selection.named('sel2');

model.study.create('std3');
model.study('std3').create('frawe', 'FrequencyAdaptive');
model.study('std3').feature('frawe').set('plotgroup', 'Default');
model.study('std3').feature('frawe').set('solnum', 'auto');
model.study('std3').feature('frawe').set('notsolnum', 'auto');
model.study('std3').feature('frawe').set('outputmap', {});
model.study('std3').feature('frawe').setSolveFor('/physics/emw', true);
model.study('std3').feature('frawe').setSolveFor('/physics/solid', false);
model.study('std3').feature('frawe').set('plist', 'range(fstart,fstep/20,fstop)');
model.study('std3').feature('frawe').setEntry('activate', 'solid', false);
model.study('std3').feature('frawe').setEntry('activate', 'frame:spatial1', false);
model.study('std3').feature('frawe').setEntry('outputmap', 'emw', 'selection');
model.study('std3').feature('frawe').setEntry('outputselectionmap', 'emw', 'sel1;sel2');
model.study('std3').feature('frawe').setEntry('outputmap', 'solid', 'selection');
model.study('std3').feature('frawe').setEntry('outputselectionmap', 'solid', 'sel1;sel2');
model.study('std3').feature('frawe').setEntry('outputmap', 'frame:spatial1', 'selection');
model.study('std3').feature('frawe').setEntry('outputselectionmap', 'frame:spatial1', 'sel1;sel2');

model.sol.create('sol4');

model.study('std3').feature('frawe').set('awefunc', {'abs(comp1.emw.S21)'});

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol4').study('std3');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std3');
model.sol('sol4').feature('st1').set('studystep', 'frawe');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1.5548889295535168E-4');
model.sol('sol4').feature('v1').set('control', 'frawe');
model.sol('sol4').create('aw1', 'AWE');
model.sol('sol4').feature('aw1').set('pname', 'freq');
model.sol('sol4').feature('aw1').set('plist', 'range(fstart,fstep/20,fstop)');
model.sol('sol4').feature('aw1').set('awefunc', {'abs(comp1.emw.S21)'});
model.sol('sol4').feature('aw1').set('rtol', 0.01);
model.sol('sol4').feature('aw1').set('plot', 'off');
model.sol('sol4').feature('aw1').set('plotgroup', 'Default');
model.sol('sol4').feature('aw1').set('probesel', 'all');
model.sol('sol4').feature('aw1').set('probes', {'var1' 'var2'});
model.sol('sol4').feature('aw1').feature('aDef').set('complexfun', true);
model.sol('sol4').feature('aw1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('aw1').create('i1', 'Iterative');
model.sol('sol4').feature('aw1').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('aw1').feature('i1').set('prefuntype', 'right');
model.sol('sol4').feature('aw1').feature('i1').set('itrestart', '300');
model.sol('sol4').feature('aw1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol4').feature('aw1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol4').feature('aw1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol4').feature('aw1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol4').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol4').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol4').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol4').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol4').feature('aw1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol4').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol4').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol4').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol4').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol4').feature('aw1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol4').feature('aw1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').attach('std3');

model.probe('var1').genResult('none');
model.probe('var2').genResult('none');

model.sol('sol4').runAll;

model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').label('Electric Field (emw) 2');
model.result('pg10').set('data', 'dset5');
model.result('pg10').setIndex('looplevel', 301, 0);
model.result('pg10').set('frametype', 'spatial');
model.result('pg10').set('showlegendsmaxmin', true);
model.result('pg10').set('data', 'dset5');
model.result('pg10').setIndex('looplevel', 301, 0);
model.result('pg10').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond1/pg1');
model.result('pg10').feature.create('mslc1', 'Multislice');
model.result('pg10').feature('mslc1').label('Multislice');
model.result('pg10').feature('mslc1').set('smooth', 'internal');
model.result('pg10').feature('mslc1').set('data', 'parent');
model.result('pg10').feature('mslc1').feature.create('filt1', 'Filter');
model.result('pg10').feature('mslc1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').set('data', 'dset5');
model.result('pg11').create('glob1', 'Global');
model.result('pg11').feature('glob1').set('unit', {'' ''});
model.result('pg11').feature('glob1').set('expr', {'emw.S11dB' 'emw.S21dB'});
model.result('pg11').feature('glob1').set('descr', {'S11' 'S21'});
model.result('pg11').label('S-parameter (emw) 2');
model.result('pg11').feature('glob1').set('titletype', 'none');
model.result('pg11').feature('glob1').set('xdata', 'expr');
model.result('pg11').set('ylabelactive', true);
model.result('pg11').set('ylabel', 'S-parameter (dB)');
model.result('pg11').feature('glob1').set('xdataexpr', 'freq');
model.result('pg11').feature('glob1').set('xdataunit', 'GHz');
model.result('pg11').feature('glob1').set('markerpos', 'datapoints');
model.result('pg11').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg12', 'SmithGroup');
model.result('pg12').set('data', 'dset5');
model.result('pg12').create('rgr1', 'ReflectionGraph');
model.result('pg12').feature('rgr1').set('unit', {''});
model.result('pg12').feature('rgr1').set('expr', {'emw.S11'});
model.result('pg12').feature('rgr1').set('descr', {'S11'});
model.result('pg12').label('Smith Plot (emw) 2');
model.result('pg12').feature('rgr1').set('titletype', 'manual');
model.result('pg12').feature('rgr1').set('title', 'Reflection Graph: S-parameter, Color: Frequency (GHz)');
model.result('pg12').feature('rgr1').set('linemarker', 'point');
model.result('pg12').feature('rgr1').set('markerpos', 'datapoints');
model.result('pg12').feature('rgr1').create('col1', 'Color');
model.result('pg12').feature('rgr1').feature('col1').set('expr', 'emw.freq/1e9');
model.result('pg12').feature('rgr1').feature('col1').set('colortable', 'Spectrum');
model.result.create('pg13', 'PlotGroup3D');
model.result('pg13').set('data', 'dset5');
model.result('pg13').setIndex('looplevel', 301, 0);
model.result('pg13').label('Moving Mesh 1');
model.result('pg13').create('mesh1', 'Mesh');
model.result('pg13').feature('mesh1').set('meshdomain', 'volume');
model.result('pg13').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg13').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg13').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg13').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg13').feature('mesh1').feature('sel1').selection.set([1 2]);
model.result('pg13').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg13').feature('mesh1').set('qualexpr', 'comp1.spatial.relVol');
model.result('pg13').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').feature.remove('mslc1');
model.result('pg10').run;
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').create('sel1', 'Selection');
model.result('pg10').feature('surf1').feature('sel1').selection.set([10 16]);
model.result('pg10').run;
model.result('pg11').run;
model.result('pg11').run;
model.result('pg11').feature('glob1').setIndex('descr', 'S11 Adaptive Frequency Sweep', 0);
model.result('pg11').feature('glob1').setIndex('descr', 'S21 Adaptive Frequency Sweep', 1);
model.result('pg11').feature.duplicate('glob2', 'glob1');
model.result('pg11').run;
model.result('pg11').feature('glob2').set('data', 'dset1');
model.result('pg11').feature('glob2').setIndex('descr', 'S11 Regular Sweep', 0);
model.result('pg11').feature('glob2').setIndex('descr', 'S21 Regular Sweep', 1);
model.result('pg11').feature('glob2').set('linestyle', 'cycle');
model.result('pg11').feature('glob2').set('linemarker', 'cycle');
model.result('pg11').run;

model.title('Microwave Filter on PCB with Stress');

model.description('Microstrip filters can be fabricated directly on a printed circuit board (PCB) with a microstrip line going from the input to the output. Along the microstrip line there are a number of stubs of certain lengths and widths. The design of the filter involves choosing the impedance of the microstrip line, the impedance of the stub microstrips, and the length of the stubs. This particular filter has a seventh-pole low-pass Chebyshev response. The example uses the Electromagnetic Waves interface that solves the vector Helmholtz wave equation. The characteristics of the filter are sensitive to the placement and length of the stubs; therefore this example also analyzes the change in filter characteristics as a function of mechanical deformation.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('pcb_microwave_filter_with_stress.mph');

model.modelNode.label('Components');

out = model;
