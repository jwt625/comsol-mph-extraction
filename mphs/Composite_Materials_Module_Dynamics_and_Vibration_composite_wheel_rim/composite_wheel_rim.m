function out = model
%
% composite_wheel_rim.m
%
% Model exported on May 26 2025, 21:27 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Composite_Materials_Module/Dynamics_and_Vibration');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('shell', 'Shell', 'geom1');
model.physics('shell').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/shell', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('th', '0.4[mm]', 'Layer thickness');
model.param.set('pInflation', '2[bar]', 'Inflation pressure');
model.param.set('tireLoad', '1120[kg]*g_const', 'Load on wheel');
model.param.set('phiLoad', '0', 'Peak load angle');
model.param.set('RPM', '3000[rpm]', 'Wheel RPM');
model.param.set('omega', '2*pi[rad]*RPM', 'Wheel angular speed');

model.func.create('an1', 'Analytic');
model.func('an1').model('comp1');
model.func('an1').set('funcname', 'loadDistr');
model.func('an1').set('expr', '(abs(atan2(x,y)-z*pi/180)<pi/6)*cos(3*(atan2(x,y)-z*pi/180))');
model.func('an1').set('args', 'x, y, z');
model.func('an1').setIndex('argunit', 'm', 0);
model.func('an1').setIndex('argunit', 'm', 1);
model.func('an1').setIndex('argunit', 1, 2);
model.func('an1').set('fununit', 'Pa');

model.coordSystem.create('sys2', 'geom1', 'Cylindrical');

model.geom('geom1').run;
model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('type', 'native');
model.geom('geom1').feature('imp1').set('filename', 'composite_wheel_rim.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').run('imp1');
model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').label('Rim');
model.geom('geom1').feature('sel1').selection('selection').init(2);
model.geom('geom1').feature('sel1').selection('selection').set('imp1', [11 12 13 14 15 16 17 18 19 24 26 28 34 35 36]);
model.geom('geom1').run('sel1');
model.geom('geom1').create('comsel1', 'ComplementSelection');
model.geom('geom1').feature('comsel1').label('HubAndSpokes');
model.geom('geom1').feature('comsel1').set('entitydim', 2);
model.geom('geom1').feature('comsel1').set('input', {'sel1'});
model.geom('geom1').run('comsel1');
model.geom('geom1').create('sel2', 'ExplicitSelection');
model.geom('geom1').feature('sel2').label('TireAttachment');
model.geom('geom1').feature('sel2').selection('selection').init(2);
model.geom('geom1').feature('sel2').selection('selection').set('imp1', [16 17 18 19 24 26 35 36]);
model.geom('geom1').run('sel2');
model.geom('geom1').create('sel3', 'ExplicitSelection');
model.geom('geom1').feature('sel3').selection('selection').init(2);
model.geom('geom1').feature('sel3').label('FixedToHub');
model.geom('geom1').feature('sel3').selection('selection').set('imp1', [8 30]);
model.geom('geom1').run('sel3');
model.geom('geom1').create('rot1', 'Rotate');
model.geom('geom1').feature('rot1').selection('input').set({'imp1'});
model.geom('geom1').feature('rot1').set('rot', 'range(0,72,288)');
model.geom('geom1').runPre('fin');
model.geom('geom1').create('cylsel1', 'CylinderSelection');
model.geom('geom1').feature('cylsel1').label('SprokeRimUnit');
model.geom('geom1').feature('cylsel1').set('entitydim', 2);
model.geom('geom1').feature('cylsel1').set('r', 'inf');
model.geom('geom1').feature('cylsel1').set('angle1', 18);
model.geom('geom1').feature('cylsel1').set('angle2', 90);
model.geom('geom1').feature('cylsel1').set('condition', 'inside');
model.geom('geom1').run('fin');

model.view('view1').set('showgrid', true);

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.named('geom1_sel2');
model.cpl('intop1').set('frame', 'material');

model.material.create('mat1', 'Common', '');
model.material('mat1').label(['Material: Carbon' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Epoxy']);
model.material.create('lmat1', 'LayeredMaterial', '');
model.material('lmat1').setIndex('rotation', 0, 0);
model.material('lmat1').setIndex('thickness', 'th', 0);
model.material('lmat1').setIndex('meshPoints', 1, 0);
model.material('lmat1').setIndex('layername', 'Layer 2', 1);
model.material('lmat1').setIndex('link', 'mat1', 1);
model.material('lmat1').setIndex('rotation', 0, 1);
model.material('lmat1').setIndex('thickness', 'th', 1);
model.material('lmat1').setIndex('meshPoints', 1, 1);
model.material('lmat1').setIndex('tag', 'lmat1_2', 1);
model.material('lmat1').setIndex('layername', 'Layer 2', 1);
model.material('lmat1').setIndex('link', 'mat1', 1);
model.material('lmat1').setIndex('rotation', 0, 1);
model.material('lmat1').setIndex('thickness', 'th', 1);
model.material('lmat1').setIndex('meshPoints', 1, 1);
model.material('lmat1').setIndex('tag', 'lmat1_2', 1);
model.material('lmat1').setIndex('layername', 'Layer 3', 2);
model.material('lmat1').setIndex('link', 'mat1', 2);
model.material('lmat1').setIndex('rotation', 0, 2);
model.material('lmat1').setIndex('thickness', 'th', 2);
model.material('lmat1').setIndex('meshPoints', 1, 2);
model.material('lmat1').setIndex('tag', 'lmat1_3', 2);
model.material('lmat1').setIndex('layername', 'Layer 3', 2);
model.material('lmat1').setIndex('link', 'mat1', 2);
model.material('lmat1').setIndex('rotation', 0, 2);
model.material('lmat1').setIndex('thickness', 'th', 2);
model.material('lmat1').setIndex('meshPoints', 1, 2);
model.material('lmat1').setIndex('tag', 'lmat1_3', 2);
model.material('lmat1').setIndex('layername', 'Layer 4', 3);
model.material('lmat1').setIndex('link', 'mat1', 3);
model.material('lmat1').setIndex('rotation', 0, 3);
model.material('lmat1').setIndex('thickness', 'th', 3);
model.material('lmat1').setIndex('meshPoints', 1, 3);
model.material('lmat1').setIndex('tag', 'lmat1_4', 3);
model.material('lmat1').setIndex('layername', 'Layer 4', 3);
model.material('lmat1').setIndex('link', 'mat1', 3);
model.material('lmat1').setIndex('rotation', 0, 3);
model.material('lmat1').setIndex('thickness', 'th', 3);
model.material('lmat1').setIndex('meshPoints', 1, 3);
model.material('lmat1').setIndex('tag', 'lmat1_4', 3);
model.material('lmat1').setIndex('rotation', 45, 1);
model.material('lmat1').setIndex('rotation', 90, 2);
model.material('lmat1').setIndex('rotation', -45, 3);
model.material('lmat1').set('widthRatio', 0.6);
model.material.create('llmat1', 'LayeredMaterialLink', 'comp1');
model.material('llmat1').selection.named('geom1_comsel1');
model.material('llmat1').set('transform', 'symmetry');
model.material('llmat1').set('middlePlane', 'top');
model.material('llmat1').set('widthRatio', 0.6);
model.material.create('stlmat1', 'LayeredMaterialStack', 'comp1');
model.material('stlmat1').selection.named('geom1_sel1');
model.material('stlmat1').set('transform', 'repeated');
model.material('stlmat1').set('repeated', 2);
model.material('stlmat1').set('middlePlane', 'top');
model.material('stlmat1').feature('stllmat1').set('transform', 'symmetry');
model.material('stlmat1').set('widthRatio', 0.6);

model.physics('shell').create('llem1', 'LayeredElastic', 2);
model.physics('shell').feature('llem1').selection.all;
model.physics('shell').feature('llem1').set('SolidModel', 'Orthotropic');
model.physics('shell').feature('llem1').set('TransverseIsotropic', true);

model.material('mat1').propertyGroup.create('TransverseIsotropic', 'Transversely_isotropic');
model.material('mat1').propertyGroup('TransverseIsotropic').set('Evect', {'134e9' '9.2e9'});
model.material('mat1').propertyGroup('TransverseIsotropic').set('nuvect', {'0.28' '0.28'});
model.material('mat1').propertyGroup('TransverseIsotropic').set('Gvect1', {'4.8e9'});
model.material('mat1').propertyGroup('def').set('density', {'1700'});

model.physics('shell').create('fix1', 'Fixed', 2);
model.physics('shell').feature('fix1').selection.named('geom1_sel3');
model.physics('shell').create('fl1', 'FaceLoad', 2);
model.physics('shell').feature('fl1').selection.named('geom1_sel1');
model.physics('shell').feature('fl1').set('loadLocation', 'bottom');
model.physics('shell').feature('fl1').set('LoadTypeForce', 'FollowerLoad');
model.physics('shell').feature('fl1').set('FollowerPressure', '-pInflation');
model.physics('shell').feature.duplicate('fl2', 'fl1');
model.physics('shell').feature('fl2').selection.named('geom1_sel2');
model.physics('shell').feature('fl2').set('coordinateSystem', 'sys2');
model.physics('shell').feature('fl2').set('LoadTypeForce', 'ForceAreaFace');
model.physics('shell').feature('fl2').set('Ff', {'-loadAmpl*loadDistr(X,Y,phiLoad)' '0' '0.2*loadAmpl*loadDistr(X,Y,phiLoad)*(2*(Z>0)-1)'});
model.physics('shell').create('ge1', 'GlobalEquations', -1);
model.physics('shell').feature('ge1').setIndex('name', 'loadAmpl', 0, 0);
model.physics('shell').feature('ge1').setIndex('equation', 'loadAmpl*intop1(loadDistr(X,Y,0)*cos(atan2(X,Y)))-tireLoad', 0, 0);
model.physics('shell').feature('ge1').set('SourceTermQuantity', 'force');
model.physics('shell').create('rotf1', 'RotatingFrame', 2);
model.physics('shell').feature('rotf1').set('Ovm', 'omega');
model.physics('shell').feature('rotf1').set('RotationalDirection', 'Clockwise');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 0.07);
model.mesh('mesh1').feature('size').set('hmin', 0.006);
model.mesh('mesh1').feature('size').set('hgrad', 1.2);
model.mesh('mesh1').run;

model.view('view1').set('showgrid', true);

model.study('std1').label('Study: Static');
model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledphysics', {'shell/rotf1'});

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset.create('dset1shelllshl', 'LayeredMaterial');
model.result.dataset('dset1shelllshl').set('data', 'dset1');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1shelllshl');
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (shell)');
model.result('pg1').set('showlegends', true);
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'shell.misesGp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').set('descr', 'von Mises stress');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('expr', {'shell.u' 'shell.v' 'shell.w'});
model.result('pg1').feature('surf1').set('inheritplot', 'none');
model.result('pg1').set('data', 'dset1shelllshl');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').set('rangecoloractive', true);
model.result('pg1').feature('surf1').set('rangecolormax', '2e8');
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'stressSlice');
model.result('pg2').set('showlegends', true);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').create('lss1', 'LayeredMaterialSlice');
model.result('pg2').feature('lss1').set('expr', {'shell.misesGp'});
model.result('pg2').feature('lss1').set('threshold', 'manual');
model.result('pg2').feature('lss1').set('thresholdvalue', 0.2);
model.result('pg2').feature('lss1').set('colortable', 'Prism');
model.result('pg2').feature('lss1').set('colortabletrans', 'none');
model.result('pg2').feature('lss1').set('colorscalemode', 'linear');
model.result('pg2').feature('lss1').set('descr', 'von Mises stress');
model.result('pg2').feature('lss1').set('locdef', 'relative');
model.result('pg2').feature('lss1').set('localzrel', 'shell.z');
model.result('pg2').feature('lss1').create('def', 'Deform');
model.result('pg2').feature('lss1').feature('def').set('expr', {'shell.u' 'shell.v' 'shell.w'});
model.result('pg2').label('Stress, Slice (shell)');
model.result('pg2').label('Stress, Slice (shell)');
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'stressThroughThickness');
model.result('pg3').set('showlegends', true);
model.result('pg3').create('thr1', 'ThroughThickness');
model.result('pg3').feature('thr1').set('expr', {'shell.misesGp'});
model.result('pg3').feature('thr1').set('legend', true);
model.result('pg3').feature('thr1').set('posentry', 'selection');
model.result('pg3').feature('thr1').selection.geom('geom1', 0);
model.result('pg3').feature('thr1').selection.set([1]);
model.result('pg3').label('Stress, Through Thickness (shell)');
model.result('pg3').label('Stress, Through Thickness (shell)');
model.result('pg3').run;
model.result('pg2').run;
model.result('pg2').feature('lss1').set('rangecoloractive', true);
model.result('pg2').feature('lss1').set('rangecolormax', '2e8');
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').feature('thr1').selection.set([74 95]);
model.result('pg3').feature('thr1').set('thicknesscoordinateunit', 'mm');
model.result('pg3').feature('thr1').set('includeinterfaces', 'all');
model.result('pg3').feature('thr1').set('legendmethod', 'manual');
model.result('pg3').feature('thr1').setIndex('legends', 'Point=74 (Rim)', 0);
model.result('pg3').feature('thr1').setIndex('legends', 'Point=95 (Spoke)', 1);
model.result('pg3').run;
model.result('pg2').run;
model.result.duplicate('pg4', 'pg2');
model.result('pg4').run;
model.result('pg4').label('Stress, Slice (Hub and Spokes)');
model.result('pg4').selection.geom('geom1', 2);
model.result('pg4').selection.named('geom1_comsel1');
model.result('pg4').set('applyselectiontodatasetedges', true);
model.result('pg4').set('view', 'new');
model.result('pg4').run;
model.result('pg4').feature('lss1').set('locdef', 'layermidplanes');
model.result('pg4').feature('lss1').set('slicedisplacement', 'rectangular');
model.result('pg4').feature('lss1').set('yseparation', '0.15*6');
model.result('pg4').feature('lss1').set('showdescriptions', true);
model.result('pg4').feature('lss1').set('descriptionseparation', '0.2*2');
model.result('pg4').run;
model.result('pg4').feature('lss1').feature('def').set('scaleactive', true);
model.result('pg4').feature('lss1').feature('def').set('scale', 1);
model.result('pg4').run;

model.view('view4').camera.set('zoomanglefull', 11.70534133911132);
model.view('view4').camera.setIndex('position', -6.99646234512329, 0);
model.view('view4').camera.setIndex('position', -9.27283668518066, 1);
model.view('view4').camera.setIndex('position', '7.627616405487060', 2);
model.view('view4').camera.setIndex('target', 0.538968086242675, 0);
model.view('view4').camera.setIndex('target', 0.774404525756835, 1);
model.view('view4').camera.setIndex('target', 0.0921859741210937, 2);
model.view('view4').camera.setIndex('up', 0.3086973428726196, 0);
model.view('view4').camera.setIndex('up', 0.411596596240997, 1);
model.view('view4').camera.setIndex('up', 0.857492923736572, 2);
model.view('view4').camera.setIndex('rotationpoint', 0.538968443870544, 0);
model.view('view4').camera.setIndex('rotationpoint', 0.774404942989349, 1);
model.view('view4').camera.setIndex('rotationpoint', 0.0921855196356773, 2);
model.view('view4').camera.setIndex('viewoffset', -0.0513523928821086, 0);
model.view('view4').camera.setIndex('viewoffset', 0.00824992358684539, 1);
model.view('view4').set('showgrid', false);
model.view('view4').set('locked', true);

model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Stress, Slice (Rim)');
model.result('pg5').selection.named('geom1_sel1');
model.result('pg5').set('view', 'new');
model.result('pg5').run;
model.result('pg5').feature('lss1').set('rangecolormax', '1e8');
model.result('pg5').feature('lss1').set('xseparation', '0.15*4');
model.result('pg5').feature('lss1').set('yseparation', '0.15*4');
model.result('pg5').feature('lss1').set('showdescriptions', false);
model.result('pg5').run;
model.result('pg5').create('tlan1', 'TableAnnotation');
model.result('pg5').feature('tlan1').set('source', 'localtable');
model.result('pg5').feature('tlan1').setIndex('localtablematrix', -0.7, 0, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 0, 0, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 0, 0, 2);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 'Layer 1', 0, 3);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 2.8, 1, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 0, 1, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 0, 1, 2);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 'Layer 4', 1, 3);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', -0.7, 2, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 2.4, 2, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 0, 2, 2);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 'Layer 13', 2, 3);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 2.8, 3, 0);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 2.4, 3, 1);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 0, 3, 2);
model.result('pg5').feature('tlan1').setIndex('localtablematrix', 'Layer 16', 3, 3);
model.result('pg5').feature('tlan1').set('showpoint', false);
model.result('pg5').run;

model.view('view5').camera.set('zoomanglefull', 12.40043926239013);
model.view('view5').camera.setIndex('position', -11.06242370605468, 0);
model.view('view5').camera.setIndex('position', -14.99425506591796, 1);
model.view('view5').camera.setIndex('position', 12.11133480072021, 2);
model.view('view5').camera.setIndex('target', 1.050000190734863, 0);
model.view('view5').camera.setIndex('target', 1.155641555786132, 1);
model.view('view5').camera.setIndex('target', -0.00108718872070312, 2);
model.view('view5').camera.setIndex('up', 0.308697462081909, 0);
model.view('view5').camera.setIndex('up', 0.411596626043319, 1);
model.view('view5').camera.setIndex('up', 0.857492864131927, 2);
model.view('view5').camera.setIndex('rotationpoint', 1.049999952316284, 0);
model.view('view5').camera.setIndex('rotationpoint', 1.15564179420471, 1);
model.view('view5').camera.setIndex('rotationpoint', '-0.001086957752704620', 2);
model.view('view5').camera.setIndex('viewoffset', -0.04049339890480041, 0);
model.view('view5').camera.setIndex('viewoffset', 0.00537914596498012, 1);
model.view('view5').set('showgrid', false);
model.view('view5').set('locked', true);

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/shell', true);
model.study('std2').label('Study: Eigenfrequency');
model.study('std2').feature('stat').set('useadvanceddisable', true);
model.study('std2').feature('stat').set('disabledphysics', {'shell/fl1' 'shell/fl2' 'shell/ge1'});
model.study('std2').create('eig', 'Eigenfrequency');
model.study('std2').feature('eig').set('geometricNonlinearity', true);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').create('st2', 'StudyStep');
model.sol('sol2').feature('st2').set('study', 'std2');
model.sol('sol2').feature('st2').set('studystep', 'eig');
model.sol('sol2').create('v2', 'Variables');
model.sol('sol2').feature('v2').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol2').feature('v2').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol2').feature('v2').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol2').feature('v2').set('initmethod', 'sol');
model.sol('sol2').feature('v2').set('initsol', 'sol2');
model.sol('sol2').feature('v2').set('initsoluse', 'sol3');
model.sol('sol2').feature('v2').set('notsolmethod', 'sol');
model.sol('sol2').feature('v2').set('notsol', 'sol2');
model.sol('sol2').feature('v2').set('control', 'eig');
model.sol('sol2').create('e1', 'Eigenvalue');
model.sol('sol2').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol2').feature('e1').set('eigvfunscaleparam', '7.119999999999999E-7');
model.sol('sol2').feature('e1').set('storelinpoint', true);
model.sol('sol2').feature('e1').set('control', 'eig');
model.sol('sol2').feature('e1').set('linpmethod', 'sol');
model.sol('sol2').feature('e1').set('linpsol', 'sol2');
model.sol('sol2').feature('e1').set('linpsoluse', 'sol3');
model.sol('sol2').feature('e1').set('control', 'eig');
model.sol('sol2').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('v2').set('notsolnum', 'auto');
model.sol('sol2').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.dataset.create('dset2shelllshl', 'LayeredMaterial');
model.result.dataset('dset2shelllshl').set('data', 'dset2');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset2shelllshl');
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').set('defaultPlotID', 'modeShape');
model.result('pg6').label('Mode Shape (shell)');
model.result('pg6').set('showlegends', false);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'shell.disp'});
model.result('pg6').feature('surf1').set('threshold', 'manual');
model.result('pg6').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg6').feature('surf1').set('colortable', 'Rainbow');
model.result('pg6').feature('surf1').set('colortabletrans', 'none');
model.result('pg6').feature('surf1').set('colorscalemode', 'linear');
model.result('pg6').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg6').feature('surf1').create('def', 'Deform');
model.result('pg6').feature('surf1').feature('def').set('expr', {'shell.u' 'shell.v' 'shell.w'});
model.result('pg6').feature('surf1').set('inheritplot', 'none');
model.result('pg6').set('data', 'dset2shelllshl');
model.result.evaluationGroup.create('std2EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std2EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_shell');
model.result.evaluationGroup('std2EvgFrq').set('data', 'dset2');
model.result.evaluationGroup('std2EvgFrq').label('Eigenfrequencies (Study: Eigenfrequency)');
model.result.evaluationGroup('std2EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std2EvgFrq').run;
model.result('pg6').set('applyselectiontodatasetedges', false);
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').set('looplevel', [3]);
model.result('pg6').run;
model.result('pg6').set('looplevel', [4]);
model.result('pg6').run;
model.result('pg6').set('looplevel', [6]);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset2');
model.result('pg7').setIndex('looplevel', 1, 0);
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').set('defaultPlotID', 'shellGeometry');
model.result('pg7').label('Shell Geometry (shell)');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('showlegends', false);
model.result('pg7').set('edgecolor', 'cyan');
model.result('pg7').create('lss1', 'LayeredMaterialSlice');
model.result('pg7').feature('lss1').set('expr', {'shell.zl_rel'});
model.result('pg7').feature('lss1').set('threshold', 'manual');
model.result('pg7').feature('lss1').set('thresholdvalue', 0.2);
model.result('pg7').feature('lss1').set('colortable', 'RainbowLight');
model.result('pg7').feature('lss1').set('colortabletrans', 'none');
model.result('pg7').feature('lss1').set('colorscalemode', 'linear');
model.result('pg7').feature('lss1').label('Top and Bottom: Layered Material');
model.result('pg7').feature('lss1').set('locdef', 'relative');
model.result('pg7').feature('lss1').set('localzrel', '-1 1');
model.result('pg7').label('Shell Geometry (shell)');
model.result('pg7').run;
model.result('pg2').run;

model.title('Stress and Modal Analysis of a Composite Wheel Rim');

model.description(['This example demonstrates the modeling of a wheel rim made up of laminated composite material. The composite laminate considered for this analysis is made of carbon' native2unicode(hex2dec({'20' '13'}), 'unicode') 'epoxy material and has eight layers with symmetric ply layup.' newline  newline 'First, a stress analysis of composite wheel rim is performed in which rim is subjected to inflation pressure and tire load. Second, a prestressed eigenfrequency analysis is performed in which rim is subjected to rotating frame forces.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('composite_wheel_rim.mph');

model.modelNode.label('Components');

out = model;
