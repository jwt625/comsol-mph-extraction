function out = model
%
% solar_dish_receiver_designer.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Ray_Optics_Module/Applications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('gop', 'GeometricalOptics', 'geom1');
model.physics('gop').model('comp1');

model.study.create('std1');
model.study('std1').create('rtrac', 'RayTracing');
model.study('std1').feature('rtrac').setSolveFor('/physics/gop', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('f', '3[m]', 'Focal length');
model.param.set('phi', '45[deg]', 'Rim angle');
model.param.set('d', '4*f*(csc(phi)-cot(phi))', 'Dish diameter');
model.param.set('A', 'pi*d^2/4', 'Dish projected surface area');
model.param.set('psim', '4.65[mrad]', 'Maximum solar disc angle');
model.param.set('sig', '1.75[mrad]', 'Surface slope error');
model.param.set('I0', '1[kW/m^2]', 'Solar irradiance');
model.param.set('cavity', '5', 'Cavity geometry');
model.param.set('cy_r', '0.100[m]', 'Radius, cylindrical cavity');
model.param.set('cy_h', '0.200[m]', 'Height, cylindrical cavity');
model.param.set('do_r', '0.100[m]', 'Radius, dome cavity');
model.param.set('do_h', '0.2200[m]', 'Height, dome cavity');
model.param.set('he_rb1', '0.1[m]', 'Bottom radius bottom cone, heteroconical cavity');
model.param.set('he_h1', '0.15[m]', 'Height bottom cone, heteroconical cavity');
model.param.set('he_rt1', '0.15[m]', 'Top radius bottom cone, heteroconical cavity');
model.param.set('he_ch', '0.02[m]', 'Cylinder height, heteroconical cavity');
model.param.set('he_h2', '0.2[m]', 'Height top cone, heteroconical cavity');
model.param.set('he_rt2', '0.07[m]', 'Top radius top cone, heteroconical cavity');
model.param.set('el_a', '0.1[m]', 'Semiaxis-a, elliptical cavity');
model.param.set('el_b', '0.1[m]', 'Semiaxis-b, elliptical cavity');
model.param.set('el_c', '0.2[m]', 'Semiaxis-c, elliptical cavity');
model.param.set('el_h', '0.3[m]', 'Height, elliptical cavity');
model.param.set('el_aa', 'sqrt(el_a^2-(el_a/el_c)^2*(el_h-el_c)^2)', 'Aperture semiaxis-a, elliptical cavity');
model.param.set('el_ba', 'sqrt(el_b^2-(el_b/el_c)^2*(el_h-el_c)^2)', 'Aperture semiaxis-b, elliptical cavity');
model.param.set('sp_r', '0.15[m]', 'Radius, spherical cavity');
model.param.set('sp_h', '0.18[m]', 'Height, spherical cavity');
model.param.set('sp_ra', 'sqrt(2*sp_r*(sp_h-sp_r)-(sp_h-sp_r)^2)', 'Aperture radius, spherical cavity');
model.param.set('co_rt', '0.05[m]', 'Top radius, conical cavity');
model.param.set('co_rb', '0.1[m]', 'Bottom radius, conical cavity');
model.param.set('co_h', '0.25[m]', 'Height, conical cavity');
model.param.set('rfp', 'if(cavity==0,cy_r,if(cavity==1,do_r,if(cavity==2,he_rb1,if(cavity==3,min(el_a,el_b),if(cavity==4,sp_ra,co_rt)))))', 'Minimum focal plane radius');
model.param.set('rwall', 'if(cavity==0,cy_r,if(cavity==1,do_r,if(cavity==2,max(he_rt2,max(he_rb1,he_rt1)),if(cavity==3,max(el_a,el_b),if(cavity==4,sp_r,max(co_rt,co_rb))))))', 'Maximum cavity radius at the walls');
model.param.set('hwall', 'if(cavity==0,cy_h,if(cavity==1,do_h,if(cavity==2,he_h1+he_ch+he_h2,if(cavity==3,el_h,if(cavity==4,sp_h,co_h)))))', 'Cavity height');
model.param.set('minmesh', 'rfp/200', 'Minimum mesh size, focal plane');
model.param.set('maxmesh', 'minmesh*10', 'Maximum mesh size, focal plane');
model.param.set('Nrel', '1E3', 'Number of rays per release');
model.param.set('alpha_collector', '0.1', 'Solar collector absorption coefficient');
model.param.set('alpha_cavity', '1.0', 'Cavity walls absorption coefficient');

model.geom.load({'part1'}, 'Ray_Optics_Module/3D/Mirrors/paraboloidal_reflector_shell_3d.mph', {'part1'});
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'd1', 'd');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'd2', 0);
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'F', 'f');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'nix', 0);
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'niz', -1);
model.geom('geom1').feature('pi1').set('displ', {'0' '0' '-f'});
model.geom('geom1').run('pi1');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').run('wp1');
model.geom('geom1').create('if1', 'If');
model.geom('geom1').feature.createAfter('endif1', 'EndIf', 'if1');
model.geom('geom1').feature('if1').label('Is cylindrical');
model.geom('geom1').feature('if1').set('condition', 'cavity==0');
model.geom('geom1').run('if1');
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').set('r', 'cy_r');
model.geom('geom1').feature('cyl1').set('h', 'cy_h');
model.geom('geom1').run('cyl1');
model.geom('geom1').create('elseif1', 'ElseIf');
model.geom('geom1').feature('elseif1').label('Is dome');
model.geom('geom1').feature('elseif1').set('condition', 'cavity==1');
model.geom('geom1').run('elseif1');
model.geom('geom1').create('cyl2', 'Cylinder');
model.geom('geom1').feature('cyl2').set('r', 'do_r');
model.geom('geom1').feature('cyl2').set('h', 'do_h-do_r');
model.geom('geom1').run('cyl2');
model.geom('geom1').create('sph1', 'Sphere');
model.geom('geom1').feature('sph1').set('r', 'do_r');
model.geom('geom1').feature('sph1').set('pos', {'0' '0' 'do_h-do_r'});
model.geom('geom1').run('sph1');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'cyl2' 'sph1'});
model.geom('geom1').feature('uni1').set('intbnd', false);
model.geom('geom1').run('uni1');
model.geom('geom1').create('elseif2', 'ElseIf');
model.geom('geom1').feature('elseif2').label('Is heteroconical');
model.geom('geom1').feature('elseif2').set('condition', 'cavity==2');
model.geom('geom1').run('elseif2');
model.geom('geom1').create('cone1', 'Cone');
model.geom('geom1').feature('cone1').set('specifytop', 'radius');
model.geom('geom1').feature('cone1').set('r', 'he_rb1');
model.geom('geom1').feature('cone1').set('h', 'he_h1');
model.geom('geom1').feature('cone1').set('rtop', 'he_rt1');
model.geom('geom1').run('cone1');
model.geom('geom1').create('cyl3', 'Cylinder');
model.geom('geom1').feature('cyl3').set('r', 'he_rt1');
model.geom('geom1').feature('cyl3').set('h', 'he_ch');
model.geom('geom1').feature('cyl3').set('pos', {'0' '0' 'he_h1'});
model.geom('geom1').run('cyl3');
model.geom('geom1').create('cone2', 'Cone');
model.geom('geom1').feature('cone2').set('specifytop', 'radius');
model.geom('geom1').feature('cone2').set('r', 'he_rt1');
model.geom('geom1').feature('cone2').set('h', 'he_h2');
model.geom('geom1').feature('cone2').set('rtop', 'he_rt2');
model.geom('geom1').feature('cone2').set('pos', {'0' '0' 'he_h1+he_ch'});
model.geom('geom1').run('cone2');
model.geom('geom1').create('elseif3', 'ElseIf');
model.geom('geom1').feature('elseif3').label('Is elliptical');
model.geom('geom1').feature('elseif3').set('condition', 'cavity==3');
model.geom('geom1').run('elseif3');
model.geom('geom1').create('elp1', 'Ellipsoid');
model.geom('geom1').feature('elp1').set('semiaxes', {'el_a' 'el_b' 'el_c'});
model.geom('geom1').feature('elp1').set('pos', {'0' '0' '2*el_c-el_h'});
model.geom('geom1').run('elp1');
model.geom('geom1').create('pch1', 'ParameterCheck');
model.geom('geom1').feature('pch1').set('condition', '(el_h>2*el_c)||(el_h<el_c)');
model.geom('geom1').feature('pch1').set('message', 'The height of the elliptical cavity (el_h) must be larger than el_c and smaller than 2*el_c');
model.geom('geom1').run('pch1');
model.geom('geom1').create('par1', 'Partition');
model.geom('geom1').feature('par1').selection('input').set({'elp1'});
model.geom('geom1').feature('par1').set('partitionwith', 'workplane');
model.geom('geom1').run('par1');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').init(3);
model.geom('geom1').feature('del1').selection('input').set('par1', 2);
model.geom('geom1').run('del1');
model.geom('geom1').create('elseif4', 'ElseIf');
model.geom('geom1').feature('elseif4').label('Is spherical');
model.geom('geom1').feature('elseif4').set('condition', 'cavity==4');
model.geom('geom1').run('elseif4');
model.geom('geom1').create('sph2', 'Sphere');
model.geom('geom1').feature('sph2').set('r', 'sp_r');
model.geom('geom1').feature('sph2').set('pos', {'0' '0' 'sp_h-sp_r'});
model.geom('geom1').run('sph2');
model.geom('geom1').create('pch2', 'ParameterCheck');
model.geom('geom1').feature('pch2').set('condition', '(sp_h>2*sp_r)||(sp_h<sp_r)');
model.geom('geom1').feature('pch2').set('message', 'The height of the spherical cavity (sp_h) must be larger than sp_r and smaller than 2*sp_r');
model.geom('geom1').run('pch2');
model.geom('geom1').create('par2', 'Partition');
model.geom('geom1').feature('par2').selection('input').set({'sph2'});
model.geom('geom1').feature('par2').set('partitionwith', 'workplane');
model.geom('geom1').run('par2');
model.geom('geom1').create('del2', 'Delete');
model.geom('geom1').feature('del2').selection('input').init(3);
model.geom('geom1').feature('del2').selection('input').set('par2', 2);
model.geom('geom1').run('del2');
model.geom('geom1').create('else1', 'Else');
model.geom('geom1').feature('else1').label('Is conical');
model.geom('geom1').run('else1');
model.geom('geom1').create('cone3', 'Cone');
model.geom('geom1').feature('cone3').set('specifytop', 'radius');
model.geom('geom1').feature('cone3').set('r', 'co_rb');
model.geom('geom1').feature('cone3').set('h', 'co_h');
model.geom('geom1').feature('cone3').set('rtop', 'co_rt');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').set('r', 'sqrt(x^2+y^2)');
model.variable('var1').descr('r', 'Radial coordinate in the xy-plane');
model.variable('var1').set('theta', 'atan2(y,x)');
model.variable('var1').descr('theta', 'Azimuthal angle in the xy-plane');
model.variable('var1').set('crf', 'genproj1(gop.wall1.bacc1.rpb)/genproj1(I0)');
model.variable('var1').descr('crf', 'Concentration ratio at the focal plane');
model.variable('var1').set('qrw', 'genproj2(gop.wall2.bsrc1.Qp)/(2*pi*r)');
model.variable('var1').descr('qrw', 'Flux distribution at the cavity side walls');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').all;
model.selection('sel1').label('Cavity');
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Cavity, all boundaries');
model.selection('adj1').set('input', {'sel1'});
model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');
model.selection('box1').label('Focal plane');
model.selection('box1').set('entitydim', 2);
model.selection('box1').set('zmin', '-eps');
model.selection('box1').set('zmax', 'eps');
model.selection('box1').set('condition', 'allvertices');
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Cavity walls');
model.selection('dif1').set('entitydim', 2);
model.selection('dif1').set('add', {'adj1'});
model.selection('dif1').set('subtract', {'box1'});
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Cavity edges');
model.selection('sel2').all;
model.selection('sel2').geom('geom1', 3, 1, {'exterior'});
model.selection('sel2').all;
model.selection.create('box2', 'Box');
model.selection('box2').model('comp1');
model.selection('box2').label('Cavity side edge');
model.selection('box2').set('entitydim', 1);
model.selection('box2').set('inputent', 'selections');
model.selection('box2').set('input', {'sel2'});
model.selection('box2').set('xmin', 0);
model.selection('box2').set('xmax', 0);
model.selection('box2').set('ymin', '-eps');
model.selection('box2').set('ymax', 'rwall+eps');
model.selection('box2').set('zmin', '-eps');
model.selection('box2').set('zmax', 'hwall+eps');
model.selection('box2').set('condition', 'allvertices');
model.selection.create('com1', 'Complement');
model.selection('com1').model('comp1');
model.selection('com1').label('Solar collector');
model.selection('com1').set('entitydim', 2);
model.selection('com1').set('input', {'adj1'});

model.cpl.create('genproj1', 'GeneralProjection', 'geom1');
model.cpl('genproj1').selection.geom('geom1', 2);
model.cpl('genproj1').selection.named('box1');
model.cpl('genproj1').set('srcmap', {'r' 'theta' 'z'});
model.cpl('genproj1').set('dstmap', {'r' 'y'});
model.cpl.create('genproj2', 'GeneralProjection', 'geom1');
model.cpl('genproj2').selection.geom('geom1', 2);
model.cpl('genproj2').selection.named('dif1');
model.cpl('genproj2').set('srcmap', {'r' 'theta' 'z'});
model.cpl('genproj2').set('dstmap', {'r' 'y'});

model.physics('gop').selection.set([]);
model.physics('gop').prop('MaximumSecondary').setIndex('MaximumSecondary', 0, 0);
model.physics('gop').prop('IntensityComputation').setIndex('IntensityComputation', 'ComputePower', 0);
model.physics('gop').feature('mp1').set('n_mat', 'userdef');
model.physics('gop').feature('mp1').set('ki_mat', 'userdef');
model.physics('gop').create('ill1', 'IlluminatedSurface', 2);
model.physics('gop').feature('ill1').selection.named('com1');
model.physics('gop').feature('ill1').set('InitialPosition', 'Density');
model.physics('gop').feature('ill1').setIndex('Nr', 'Nrel', 0);
model.physics('gop').feature('ill1').set('Li', [0 0 -1]);
model.physics('gop').feature('ill1').set('alpha', 'alpha_collector');
model.physics('gop').feature('ill1').set('FiniteSource', 'SampleFromDistribution');
model.physics('gop').feature('ill1').set('psim', 'psim');
model.physics('gop').feature('ill1').set('LimbDarkeningModel', 'EmpiricalPowerLaw');
model.physics('gop').feature('ill1').set('IncludeSurfaceRoughness', true);
model.physics('gop').feature('ill1').set('sigmaphi', 'sig');
model.physics('gop').feature('ill1').set('Psrc', 'A*I0');
model.physics('gop').feature('ill1').set('InitialPolarizationType', 'UnPolarized');
model.physics('gop').create('wall1', 'Wall', 2);
model.physics('gop').feature('wall1').label('Focal plane');
model.physics('gop').feature('wall1').selection.named('box1');
model.physics('gop').feature('wall1').set('WallCondition', 'Pass');
model.physics('gop').feature('wall1').create('bacc1', 'BoundaryAccumulator', 2);
model.physics('gop').feature('wall1').feature('bacc1').set('R', 'gop.Q');
model.physics('gop').feature('wall1').feature('bacc1').set('DependentVariableQuantity', 'heatflux');
model.physics('gop').create('wall2', 'Wall', 2);
model.physics('gop').feature('wall2').label('Cavity walls');
model.physics('gop').feature('wall2').selection.named('dif1');
model.physics('gop').feature('wall2').set('WallCondition', 'DiffuseScattering');
model.physics('gop').feature('wall2').set('alpha', 'alpha_cavity');
model.physics('gop').feature('wall2').create('bsrc1', 'DepositedRayPowerBoundary', 2);

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('hauto', 1);
model.mesh('mesh1').feature('ftri1').selection.all;
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.named('box1');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 'maxmesh');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmin', 'minmesh');

model.study('std1').setGenPlots(false);
model.study('std1').setGenConv(false);
model.study('std1').feature('rtrac').set('timestepspec', 'specifylength');
model.study('std1').feature('rtrac').set('llist', '0, 1.5*f');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'rtrac');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'rtrac');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.01,1)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 1.0E-5);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', false);
model.sol('sol1').feature('t1').set('storeudot', false);
model.sol('sol1').feature('t1').set('tstepsgenalpha', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('timemethod', 'genalpha');
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('control', 'rtrac');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset.create('ray1', 'Ray');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').selection.named('box1');
model.result.dataset.create('cln1', 'CutLine3D');
model.result.dataset('cln1').setIndex('genpoints', 'rfp', 1, 0);
model.result.dataset('cln1').set('snapping', 'boundary');
model.result.dataset.create('edg1', 'Edge3D');
model.result.dataset('edg1').selection.named('box2');
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').run;
model.result('pg1').label('Flux Distribution in the Focal Plane');
model.result('pg1').set('data', 'surf1');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Flux distribution in the focal plane');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', 'gop.wall1.bacc1.rpb');
model.result('pg1').feature('surf1').set('colortable', 'Thermal');
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('Concentration Ratio in the Focal Plane');
model.result('pg2').set('data', 'cln1');
model.result('pg2').setIndex('looplevelinput', 'last', 0);
model.result('pg2').create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg2').feature('lngr1').set('linewidth', 'preference');
model.result('pg2').feature('lngr1').set('expr', 'crf');
model.result('pg2').feature('lngr1').set('xdata', 'expr');
model.result('pg2').feature('lngr1').set('xdataexpr', 'r');
model.result('pg2').feature('lngr1').set('xdataunit', 'mm');
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Flux Distribution on the Side Walls');
model.result('pg3').set('data', 'edg1');
model.result('pg3').setIndex('looplevelinput', 'last', 0);
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg3').feature('lngr1').set('linewidth', 'preference');
model.result('pg3').feature('lngr1').set('expr', 'qrw');
model.result('pg3').feature('lngr1').set('xdata', 'expr');
model.result('pg3').feature('lngr1').set('xdataexpr', 'r');
model.result('pg3').feature('lngr1').set('unit', 'W/mm^2');
model.result('pg3').run;

model.study.create('std2');
model.study('std2').label('Geometry');
model.study('std2').setGenPlots(false);
model.study('std2').setGenConv(false);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Geometry');
model.result('pg4').set('data', 'dset2');
model.result('pg4').set('showlegends', false);
model.result('pg4').set('titletype', 'none');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('coloring', 'uniform');
model.result('pg4').feature('surf1').set('color', 'gray');

model.view('view1').set('showgrid', false);
model.view('view1').set('showaxisorientation', false);

model.result('pg4').run;

model.title([]);

model.description('');

model.label('solar_dish_receiver_designer_embedded.mph');

model.result('pg4').run;

model.setExpectedComputationTime('4 seconds');

model.result.report.create('rpt1', 'Report');
model.result.report('rpt1').set('filename', 'user:///solar_dish_receiver_designer');
model.result.report('rpt1').feature.create('tp1', 'TitlePage');
model.result.report('rpt1').feature('tp1').set('title', 'Solar Dish Receiver Designer');
model.result.report('rpt1').feature('tp1').set('includeacknowledgment', false);
model.result.report('rpt1').feature.create('toc1', 'TableOfContents');
model.result.report('rpt1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').label('Software Information');
model.result.report('rpt1').feature('sec1').feature.create('root1', 'Model');
model.result.report('rpt1').feature('sec1').feature('root1').label('About the Software');
model.result.report('rpt1').feature('sec1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').feature('sec1').label('Study');
model.result.report('rpt1').feature('sec1').feature('sec1').feature.create('std1', 'Study');
model.result.report('rpt1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').label('Input Data');
model.result.report('rpt1').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec1').label('Parameters');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature('sec2').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec2').label('Geometry');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('pg1').set('noderef', 'pg4');
model.result.report('rpt1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').label('Results');
model.result.report('rpt1').feature('sec3').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').label('Plot Groups');
model.result.report('rpt1').feature('sec3').feature('sec1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec1').label('Flux Distribution in the Focal Plane');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec1').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').label('Radial Concentration Ratio in the Focal Plane');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').feature('pg1').set('noderef', 'pg2');
model.result.report('rpt1').feature('sec3').feature('sec1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec3').label('Flux Distribution on the Side Walls');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec3').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec3').feature('pg1').set('noderef', 'pg3');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('pg1').active(false);
model.result.report('rpt1').feature('sec2').feature('sec2').feature.create('geom1', 'Geometry');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 5, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 6, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 7, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 8, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 9, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 10, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 12, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 13, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 14, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 15, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 16, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 17, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 18, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 19, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 20, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 21, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 22, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 23, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 24, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 25, 1);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').set('includeunits', false);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').set('includestats', false);

model.title('Solar Dish Receiver Designer');

model.description(['Solar concentrator/cavity receiver systems can be used to focus incident solar radiation into a small region, generating intense heat which can then be converted to electrical or chemical energy. A common figure of merit in solar thermal power systems is the concentration ratio, or the ratio of the solar flux on the surface of the receiver or in the focal plane to the ambient solar flux.' newline  newline 'This app is a runnable application based on the Solar Dish Receiver tutorial model. In this app, incident solar radiation is reflected by a parabolic dish, while the concentrated solar radiation is collected in a small cavity. A total of six different parameterized cavity geometries are available for investigation: Cylindrical, Dome, Heteroconical, Elliptical, Spherical, and Conical. It is also possible to take several different types of perturbation into account, including solar limb darkening and surface roughness. For each cavity geometry, built-in plots show the flux distribution and concentration ratio in the focal plane as well as the incident flux on the interior surfaces of the cavity.' newline  newline 'You can learn more about this example in a related blog post: "Efficiently Optimizing Solar Dish Receiver Designs"']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('solar_dish_receiver_designer.mph');

model.modelNode.label('Components');

out = model;
