function out = model
%
% submarine_cable_06_thermal_effects.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Tutorials,_Cables');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.geom('geom1').insertFile('submarine_cable_e_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');

model.param.label('Geometric Parameters 1');
model.param.create('par2');
model.param('par2').label('Geometric Parameters 2');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('Acon', '500[mm^2]', 'Cross sectional area of main conductors (per phase)');
model.param('par2').set('Ncon', 'Acon/(pi*(Dcon/2)^2)', 'Conductor packing density (phase)');
model.param('par2').set('Apbs', 'pi*(Dins+Tpbs)*Tpbs', 'Cross sectional area of lead sheath (per phase)');
model.param('par2').set('Lsec1', '1/3', 'Relative length cross bonding section 1');
model.param('par2').set('Lsec2', '1-Lsec1-Lsec3', 'Relative length cross bonding section 2');
model.param('par2').set('Lsec3', '1/3', 'Relative length cross bonding section 3');
model.param('par2').set('Lcab', '10[km]', 'Total length of submarine cable');
model.param('par2').set('Scab', '1e5', 'Geometric scale factor (2Daxi model)');

model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Phases');
model.selection('uni1').set('input', {'geom1_c1_dom' 'geom1_c2_dom' 'geom1_c3_dom'});
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Metals');
model.selection('uni2').set('input', {'uni1' 'geom1_uni3_dom' 'geom1_c17_dom' 'geom1_c19_dom'});
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Insulators (External to Phase)');
model.selection('dif1').set('add', {'geom1_c21_dom'});
model.selection('dif1').set('subtract', {'uni2' 'geom1_uni1_dom' 'geom1_uni2_dom'});
model.selection.create('dif2', 'Difference');
model.selection('dif2').model('comp1');
model.selection('dif2').label('Air Pockets');
model.selection('dif2').set('add', {'dif1'});
model.selection('dif2').set('subtract', {'geom1_dif1_dom' 'geom1_dif2_dom' 'geom1_c18_dom' 'geom1_dif3_dom'});
model.selection.create('dif3', 'Difference');
model.selection('dif3').model('comp1');
model.selection('dif3').label('Solid Domains');
model.selection('dif3').set('add', {'geom1_c22_dom'});
model.selection('dif3').set('subtract', {'dif2'});
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Thermal Contact');
model.selection('adj1').set('input', {'dif1'});
model.selection('adj1').set('interior', true);

model.view('view1').set('showmaterial', true);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat2').label('Water, liquid');
model.material('mat2').set('family', 'water');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat2').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat2').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat2').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat2').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat2').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material('mat2').selection.set([2]);
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Gravel, saturated');
model.material('mat3').selection.set([1 7]);
model.material('mat3').propertyGroup('def').set('relpermeability', '');
model.material('mat3').propertyGroup('def').set('electricconductivity', '');
model.material('mat3').propertyGroup('def').set('relpermittivity', '');
model.material('mat3').propertyGroup('def').set('thermalconductivity', '');
model.material('mat3').propertyGroup('def').set('density', '');
model.material('mat3').propertyGroup('def').set('heatcapacity', '');
model.material('mat3').set('family', 'rock');
model.material.duplicate('mat4', 'mat3');
model.material('mat4').label('Polyethylene');
model.material('mat4').selection.named('geom1_dif1_dom');
model.material('mat4').set('family', 'oil');
model.material.duplicate('mat5', 'mat4');
model.material('mat5').label('Polypropylene');
model.material('mat5').selection.named('geom1_dif2_dom');
model.material('mat5').set('family', 'plastic');
model.material('mat5').set('color', 'gray');
model.material.duplicate('mat6', 'mat5');
model.material('mat6').label('Cross-linked polyethylene (XLPE)');
model.material('mat6').selection.named('geom1_uni2_dom');
model.material('mat6').set('color', 'white');
model.material.duplicate('mat7', 'mat6');
model.material('mat7').label('Semiconductive compound');
model.material('mat7').selection.named('geom1_uni1_dom');
model.material('mat7').set('color', 'black');
model.material.duplicate('mat8', 'mat7');
model.material('mat8').label('Bitumen compound');
model.material('mat8').selection.named('geom1_dif3_dom');
model.material.create('mat9', 'Common', 'comp1');
model.material('mat9').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat9').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat9').label('Silica glass');
model.material('mat9').set('family', 'custom');
model.material('mat9').set('customambient', [1 1 1]);
model.material('mat9').set('noise', true);
model.material('mat9').set('fresnel', 0.99);
model.material('mat9').set('roughness', 0.02);
model.material('mat9').set('metallic', 0);
model.material('mat9').set('pearl', 0);
model.material('mat9').set('diffusewrap', 0);
model.material('mat9').set('clearcoat', 0);
model.material('mat9').set('reflectance', 0);
model.material('mat9').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat9').propertyGroup('def').set('electricconductivity', {'1e-14[S/m]' '0' '0' '0' '1e-14[S/m]' '0' '0' '0' '1e-14[S/m]'});
model.material('mat9').propertyGroup('def').set('thermalexpansioncoefficient', {'0.55e-6[1/K]' '0' '0' '0' '0.55e-6[1/K]' '0' '0' '0' '0.55e-6[1/K]'});
model.material('mat9').propertyGroup('def').set('heatcapacity', '703[J/(kg*K)]');
model.material('mat9').propertyGroup('def').set('relpermittivity', {'3.75' '0' '0' '0' '3.75' '0' '0' '0' '3.75'});
model.material('mat9').propertyGroup('def').set('density', '2203[kg/m^3]');
model.material('mat9').propertyGroup('def').set('thermalconductivity', {'1.38[W/(m*K)]' '0' '0' '0' '1.38[W/(m*K)]' '0' '0' '0' '1.38[W/(m*K)]'});
model.material('mat9').propertyGroup('Enu').set('E', '73.1[GPa]');
model.material('mat9').propertyGroup('Enu').set('nu', '0.17');
model.material('mat9').propertyGroup('RefractiveIndex').set('n', {'1.45' '0' '0' '0' '1.45' '0' '0' '0' '1.45'});
model.material('mat9').selection.named('geom1_c18_dom');
model.material.duplicate('mat10', 'mat8');
model.material('mat10').label('Stainless steel');
model.material('mat10').selection.named('geom1_c17_dom');
model.material('mat10').set('family', 'steel');
model.material.duplicate('mat11', 'mat10');
model.material('mat11').label('Copper');
model.material('mat11').selection.named('uni1');
model.material('mat11').propertyGroup.create('linzRes', 'Linearized_resistivity');
model.material('mat11').set('family', 'copper');
model.material.duplicate('mat12', 'mat11');
model.material('mat12').label('Lead');
model.material('mat12').selection.named('geom1_uni3_dom');
model.material('mat12').set('family', 'lead');
model.material.duplicate('mat13', 'mat12');
model.material('mat13').label('Galvanized steel');
model.material('mat13').selection.named('geom1_c19_dom');
model.material('mat13').set('family', 'steel');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'x'});
model.material('mat1').propertyGroup('def').set('molarmass', {'x'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', {'x'});
model.material('mat1').propertyGroup('def').set('relpermeability', {'x'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'x'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', {'x'});
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', {'x'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'x'});
model.material('mat1').propertyGroup('def').set('heatcapacity', {'x'});
model.material('mat1').propertyGroup('def').set('density', {'x'});
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'x'});
model.material('mat1').propertyGroup('def').set('soundspeed', {'x'});
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'x'});
model.material('mat1').propertyGroup('RefractiveIndex').set('ki', {'x'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', {'x'});
model.material('mat1').propertyGroup('idealGas').set('Rs', {'x'});
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', {'x'});
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', {'x'});
model.material('mat1').propertyGroup('idealGas').set('molarmass', {'x'});
model.material.label('Materials.');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', {'0.02897[kg/mol]'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', {'muB(T)'});
model.material('mat1').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', {'eta(T)'});
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', {'1.4'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'1e-14[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', {'Cp(T)'});
model.material('mat1').propertyGroup('def').set('density', {'rho(pA,T)'});
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', {'cs(T)'});
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1'});
model.material('mat1').propertyGroup('RefractiveIndex').set('ki', {'0'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', {'(def.gamma+1)/2'});
model.material('mat1').propertyGroup('idealGas').set('Rs', {'R_const/Mn'});
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', {'Cp(T)'});
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', {'1.4'});
model.material('mat1').propertyGroup('idealGas').set('molarmass', {'0.02897'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'x'});
model.material('mat2').propertyGroup('def').set('bulkviscosity', {'x'});
model.material('mat2').propertyGroup('def').set('dynamicviscosity', {'x'});
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', {'x'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'x'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'x'});
model.material('mat2').propertyGroup('def').set('density', {'x'});
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'x'});
model.material('mat2').propertyGroup('def').set('soundspeed', {'x'});
model.material.label('Materials..');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)'});
model.material('mat2').propertyGroup('def').set('bulkviscosity', {'muB(T)'});
model.material('mat2').propertyGroup('def').set('dynamicviscosity', {'eta(T)'});
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', {'gamma_w(T)'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'Cp(T)'});
model.material('mat2').propertyGroup('def').set('density', {'rho(T)'});
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', {'cs(T)'});
model.material('mat3').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'1[S/m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'28'});
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'1[W/(m*K)]'});
model.material('mat3').propertyGroup('def').set('density', {'2020[kg/m^3]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', {'2512[J/(kg*K)]'});
model.material('mat4').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat4').propertyGroup('def').set('electricconductivity', {'1e-18[S/m]'});
model.material('mat4').propertyGroup('def').set('relpermittivity', {'2.25'});
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'0.46[W/(m*K)]'});
model.material('mat4').propertyGroup('def').set('density', {'935[kg/m^3]'});
model.material('mat4').propertyGroup('def').set('heatcapacity', {'2302[J/(kg*K)]'});
model.material('mat5').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat5').propertyGroup('def').set('electricconductivity', {'1e-18[S/m]'});
model.material('mat5').propertyGroup('def').set('relpermittivity', {'2.36'});
model.material('mat5').propertyGroup('def').set('thermalconductivity', {'0.25[W/(m*K)]'});
model.material('mat5').propertyGroup('def').set('density', {'946[kg/m^3]'});
model.material('mat5').propertyGroup('def').set('heatcapacity', {'1920[J/(kg*K)]'});
model.material('mat6').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat6').propertyGroup('def').set('electricconductivity', {'1e-18[S/m]'});
model.material('mat6').propertyGroup('def').set('relpermittivity', {});
model.material('mat6').propertyGroup('def').set('thermalconductivity', {'0.46[W/(m*K)]'});
model.material('mat6').propertyGroup('def').set('density', {'930[kg/m^3]'});
model.material('mat6').propertyGroup('def').set('heatcapacity', {'2302[J/(kg*K)]'});
model.material('mat7').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat7').propertyGroup('def').set('electricconductivity', {'2[S/m]'});
model.material('mat7').propertyGroup('def').set('relpermittivity', {'2.25'});
model.material('mat7').propertyGroup('def').set('thermalconductivity', {'10[W/(m*K)]'});
model.material('mat7').propertyGroup('def').set('density', {'1055[kg/m^3]'});
model.material('mat7').propertyGroup('def').set('heatcapacity', {'2405[J/(kg*K)]'});
model.material('mat8').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat8').propertyGroup('def').set('electricconductivity', {'3.2e-9[S/m]'});
model.material('mat8').propertyGroup('def').set('relpermittivity', {'3.16'});
model.material('mat8').propertyGroup('def').set('thermalconductivity', {'0.17[W/(m*K)]'});
model.material('mat8').propertyGroup('def').set('density', {'1062[kg/m^3]'});
model.material('mat8').propertyGroup('def').set('heatcapacity', {'1885[J/(kg*K)]'});
model.material('mat9').propertyGroup('def').set('relpermeability', {'x'});
model.material('mat9').propertyGroup('def').set('electricconductivity', {'x'});
model.material('mat9').propertyGroup('def').set('thermalexpansioncoefficient', {'x'});
model.material('mat9').propertyGroup('def').set('heatcapacity', {'x'});
model.material('mat9').propertyGroup('def').set('relpermittivity', {'x'});
model.material('mat9').propertyGroup('def').set('density', {'x'});
model.material('mat9').propertyGroup('def').set('thermalconductivity', {'x'});
model.material('mat9').propertyGroup('Enu').set('E', {'x'});
model.material('mat9').propertyGroup('Enu').set('nu', {'x'});
model.material('mat9').propertyGroup('RefractiveIndex').set('n', {'x'});
model.material('mat9').propertyGroup('RefractiveIndex').set('ki', {'x'});
model.material.label('Materials.');
model.material('mat9').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat9').propertyGroup('def').set('electricconductivity', {'1e-14[S/m]'});
model.material('mat9').propertyGroup('def').set('thermalexpansioncoefficient', {'0.55e-6[1/K]'});
model.material('mat9').propertyGroup('def').set('heatcapacity', {'703[J/(kg*K)]'});
model.material('mat9').propertyGroup('def').set('relpermittivity', {'3.75'});
model.material('mat9').propertyGroup('def').set('density', {'2203[kg/m^3]'});
model.material('mat9').propertyGroup('def').set('thermalconductivity', {'1.38[W/(m*K)]'});
model.material('mat9').propertyGroup('Enu').set('E', {'73.1e9[Pa]'});
model.material('mat9').propertyGroup('Enu').set('nu', {'0.17'});
model.material('mat9').propertyGroup('RefractiveIndex').set('n', {'1.45'});
model.material('mat9').propertyGroup('RefractiveIndex').set('ki', {'0'});
model.material('mat10').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat10').propertyGroup('def').set('electricconductivity', {'1.46e6[S/m]'});
model.material('mat10').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat10').propertyGroup('def').set('thermalconductivity', {'17.5[W/(m*K)]'});
model.material('mat10').propertyGroup('def').set('density', {'7920[kg/m^3]'});
model.material('mat10').propertyGroup('def').set('heatcapacity', {'475[J/(kg*K)]'});
model.material('mat11').propertyGroup('def').set('relpermeability', {});
model.material('mat11').propertyGroup('def').set('electricconductivity', {});
model.material('mat11').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat11').propertyGroup('def').set('thermalconductivity', {});
model.material('mat11').propertyGroup('def').set('density', {'8940[kg/m^3]'});
model.material('mat11').propertyGroup('def').set('heatcapacity', {'385[J/(kg*K)]'});
model.material('mat11').propertyGroup('linzRes').set('rho0', {});
model.material('mat11').propertyGroup('linzRes').set('alpha', {});
model.material('mat11').propertyGroup('linzRes').set('Tref', {});
model.material('mat12').propertyGroup('def').set('relpermeability', {});
model.material('mat12').propertyGroup('def').set('electricconductivity', {});
model.material('mat12').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat12').propertyGroup('def').set('thermalconductivity', {'35.3[W/(m*K)]'});
model.material('mat12').propertyGroup('def').set('density', {'11340[kg/m^3]'});
model.material('mat12').propertyGroup('def').set('heatcapacity', {'127[J/(kg*K)]'});
model.material('mat12').propertyGroup('linzRes').set('rho0', {});
model.material('mat12').propertyGroup('linzRes').set('alpha', {});
model.material('mat12').propertyGroup('linzRes').set('Tref', {});
model.material('mat13').propertyGroup('def').set('relpermeability', {});
model.material('mat13').propertyGroup('def').set('electricconductivity', {});
model.material('mat13').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat13').propertyGroup('def').set('thermalconductivity', {'58[W/(m*K)]'});
model.material('mat13').propertyGroup('def').set('density', {'7850[kg/m^3]'});
model.material('mat13').propertyGroup('def').set('heatcapacity', {'475[J/(kg*K)]'});
model.material('mat13').propertyGroup('linzRes').set('rho0', {});
model.material('mat13').propertyGroup('linzRes').set('alpha', {});
model.material('mat13').propertyGroup('linzRes').set('Tref', {});
model.material.label('Materials');

model.mesh('mesh1').run;

model.title(['Submarine Cable 1 ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Introduction']);

model.description(['The model that results from this tutorial serves as a template for subsequent tutorials in this series (the Capacitive, Inductive, and Thermal Effects tutorials). It contains a detailed 2D geometry of a standard three-core lead sheathed XLPE HVAC submarine cable, along with a mesh. Some parameters, selections, and materials are prepared as well.' newline  newline 'Experienced COMSOL users with little or no interest in these topics ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' geometry, mesh, selections, and such ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' may choose to skip this part of the series and continue with one of the following tutorials. When you are new to COMSOL Multiphysics, however, it is worthwhile to take some time for this, as it will help you to familiarize yourself with the basics.']);

model.label('submarine_cable_01_introduction.mph');

model.param.create('par3');
model.param('par3').label('Electromagnetic Parameters');

% To import content from file, use:
% model.param('par3').loadFile('FILENAME');
model.param('par3').set('f0', '50[Hz]', 'Operating frequency');
model.param('par3').set('w0', '(2*pi*f0[1/Hz])[rad/s]', 'Angular frequency');
model.param('par3').set('V0', '220[kV]/sqrt(3)', 'Phase to ground voltage (amplitude)');
model.param('par3').set('I0', '655[A]*sqrt(2)', 'Rated current (amplitude)');
model.param('par3').set('Scup', '5.96e7[S/m]', ['Copper conductivity, at 20' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C']);
model.param('par3').set('Spbs', '4.55e6[S/m]', ['Lead sheath conductivity, at 20' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C']);
model.param('par3').set('Sarm', '4.03e6[S/m]', ['Armor wire conductivity, at 20' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C']);
model.param('par3').set('Mcup', '1', 'Relative permeability, copper');
model.param('par3').set('Mpbs', '1', 'Relative permeability, lead sheath');
model.param('par3').set('Marm', '100-50*j', 'Relative permeability, armor wires');
model.param('par3').set('Dscup', 'min(1/real(sqrt(j*w0*mu0_const*Mcup*Scup)),Dcon/3)', 'Skin depth, copper (analytic)');
model.param('par3').set('Dspbs', 'min(1/real(sqrt(j*w0*mu0_const*Mpbs*Spbs)),12*Tpbs)', 'Skin depth, lead sheath (analytic)');
model.param('par3').set('Dsarm', 'min(1/real(sqrt(j*w0*mu0_const*Marm*Sarm)),Tarm/2)', 'Skin depth, armor wires (analytic)');
model.param('par3').set('Rcon', '1/Acon/Scup', ['Main conductor DC resistance per phase, at 20' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C (analytic)']);
model.param('par3').set('Rpbs', '1/Apbs/Spbs', ['Lead sheath DC resistance per phase, at 20' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C (analytic)']);
model.param('par3').set('Exlpe', '2.5', 'Relative permittivity XLPE (from IEC 60287)');
model.param('par3').set('Cpha', '2*pi*epsilon0_const*Exlpe/log((Dins/2-Tscc)/(Dcon/2+Tscc))', 'Capacitance per phase (analytic)');
model.param('par3').set('Icpha', 'w0*Cpha*V0', 'Charging current per phase (analytic)');

model.physics.create('mf', 'InductionCurrents', 'geom1');
model.physics('mf').model('comp1');
model.physics('mf').selection.named('geom1_c22_dom');
model.physics('mf').create('als1', 'AmperesLawSolid', 2);
model.physics('mf').feature('als1').selection.named('dif3');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/mf', true);
model.study('std1').feature('freq').set('plist', 'f0');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s1').feature.remove('p1');

model.material('mat6').propertyGroup('def').set('relpermittivity', {'Exlpe'});
model.material('mat11').propertyGroup('def').set('relpermeability', {'Mcup'});
model.material('mat11').propertyGroup('def').set('electricconductivity', {'Ncon*Scup'});
model.material('mat12').propertyGroup('def').set('relpermeability', {'Mpbs'});
model.material('mat12').propertyGroup('def').set('electricconductivity', {'Spbs'});
model.material('mat13').propertyGroup('def').set('relpermeability', {'Marm'});
model.material('mat13').propertyGroup('def').set('electricconductivity', {'Sarm'});

model.physics('mf').create('coil1', 'Coil', 2);
model.physics('mf').feature('coil1').label('Phase 1');
model.physics('mf').feature('coil1').selection.named('geom1_c1_dom');
model.physics('mf').feature('coil1').set('ICoil', 'I0');
model.physics('mf').create('coil2', 'Coil', 2);
model.physics('mf').feature('coil2').label('Phase 2');
model.physics('mf').feature('coil2').selection.named('geom1_c2_dom');
model.physics('mf').feature('coil2').set('ICoil', 'I0*exp(-120[deg]*j)');
model.physics('mf').create('coil3', 'Coil', 2);
model.physics('mf').feature('coil3').label('Phase 3');
model.physics('mf').feature('coil3').selection.named('geom1_c3_dom');
model.physics('mf').feature('coil3').set('ICoil', 'I0*exp(+120[deg]*j)');

model.study('std1').setGenPlots(false);

model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').run;
model.result('pg1').label('Magnetic Flux Density Norm (mf)');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').set('view', 'new');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('surf1').set('colorcalibration', -1.5);
model.result('pg1').feature('surf1').set('resolution', 'fine');
model.result('pg1').run;
model.result('pg1').run;
model.result.duplicate('pg2', 'pg1');
model.result('pg2').run;
model.result('pg2').label('Out of Plane Current Density (mf)');
model.result('pg2').set('view', 'new');
model.result('pg2').run;
model.result('pg2').feature('surf1').set('expr', 'mf.normJ');
model.result('pg2').feature('surf1').set('descr', 'Current density norm');
model.result('pg2').feature('surf1').set('colortabletrans', 'none');
model.result('pg2').run;
model.result.dataset.duplicate('dset2', 'dset1');
model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.named('geom1_c21_dom');
model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.set([3 4 5 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166]);
model.result('pg2').run;
model.result('pg2').set('data', 'dset2');
model.result('pg2').run;
model.result.duplicate('pg3', 'pg2');
model.result('pg3').run;
model.result('pg3').label('Volumetric Loss Density (mf)');
model.result('pg3').run;
model.result('pg3').feature('surf1').set('expr', 'mf.Qrh');
model.result('pg3').feature('surf1').set('colortable', 'GrayBody');
model.result('pg3').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').set('expr', 'sqrt(real(mf.Bx)^2+real(mf.By)^2)');
model.result('pg1').feature('surf1').set('descractive', true);
model.result('pg1').feature('surf1').set('descr', 'Magnetic flux density norm (instantaneous)');
model.result('pg1').run;
model.result('pg1').create('con1', 'Contour');
model.result('pg1').feature('con1').set('expr', 'Az');
model.result('pg1').feature('con1').set('titletype', 'none');
model.result('pg1').feature('con1').set('coloring', 'uniform');
model.result('pg1').feature('con1').set('color', 'black');
model.result('pg1').feature('con1').set('colorlegend', false);
model.result('pg1').feature('con1').set('resolution', 'fine');
model.result('pg1').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'fromtheme');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'off');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'off');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'off');
model.result.export('anim1').set('options3d', 'on');
model.result.export('anim1').set('axisorientation', 'off');
model.result.export('anim1').set('grid', 'off');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').set('sweeptype', 'dde');
model.result.export('anim1').set('maxframes', 6);
model.result.export('anim1').run;
model.result('pg2').run;
model.result('pg2').feature('surf1').set('expr', 'mf.Jz');
model.result('pg2').feature('surf1').set('colortable', 'Dipole');
model.result('pg2').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg2').feature('surf1').create('hght1', 'Height');
model.result('pg2').run;
model.result('pg2').run;

model.view('view4').set('showgrid', false);
model.view('view4').set('showaxisorientation', false);

model.result('pg2').run;
model.result.export.create('anim2', 'Animation');
model.result.export('anim2').set('target', 'player');
model.result.export('anim2').set('fontsize', '9');
model.result.export('anim2').set('colortheme', 'globaltheme');
model.result.export('anim2').set('customcolor', [1 1 1]);
model.result.export('anim2').set('background', 'fromtheme');
model.result.export('anim2').set('gltfincludelines', 'on');
model.result.export('anim2').set('title1d', 'off');
model.result.export('anim2').set('legend1d', 'on');
model.result.export('anim2').set('logo1d', 'off');
model.result.export('anim2').set('options1d', 'on');
model.result.export('anim2').set('title2d', 'on');
model.result.export('anim2').set('legend2d', 'on');
model.result.export('anim2').set('logo2d', 'on');
model.result.export('anim2').set('options2d', 'off');
model.result.export('anim2').set('title3d', 'on');
model.result.export('anim2').set('legend3d', 'on');
model.result.export('anim2').set('logo3d', 'off');
model.result.export('anim2').set('options3d', 'on');
model.result.export('anim2').set('axisorientation', 'off');
model.result.export('anim2').set('grid', 'off');
model.result.export('anim2').set('axes1d', 'on');
model.result.export('anim2').set('axes2d', 'on');
model.result.export('anim2').set('showgrid', 'on');
model.result.export('anim2').set('plotgroup', 'pg2');
model.result.export('anim2').set('sweeptype', 'dde');
model.result.export('anim2').set('maxframes', 6);
model.result.export('anim2').run;
model.result.numerical.create('int1', 'IntSurface');
model.result.numerical('int1').set('intvolume', true);
model.result.numerical('int1').label('Phase Losses');
model.result.numerical('int1').selection.named('uni1');
model.result.numerical('int1').setIndex('expr', 'mf.Qh', 0);
model.result.numerical('int1').setIndex('unit', 'W/km', 0);
model.result.numerical('int1').setIndex('descr', 'Phase losses (plain 2D model)', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Phase Losses');
model.result.numerical('int1').set('table', 'tbl1');
model.result.numerical('int1').setResult;
model.result.numerical.create('int2', 'IntSurface');
model.result.numerical('int2').set('intvolume', true);
model.result.numerical('int2').label('Screen Losses');
model.result.numerical('int2').selection.named('geom1_uni3_dom');
model.result.numerical('int2').setIndex('expr', 'mf.Qh', 0);
model.result.numerical('int2').setIndex('unit', 'W/km', 0);
model.result.numerical('int2').setIndex('descr', 'Screen losses (plain 2D model)', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Screen Losses');
model.result.numerical('int2').set('table', 'tbl2');
model.result.numerical('int2').setResult;
model.result.numerical.create('int3', 'IntSurface');
model.result.numerical('int3').set('intvolume', true);
model.result.numerical('int3').label('Armor Losses');
model.result.numerical('int3').selection.named('geom1_c19_dom');
model.result.numerical('int3').setIndex('expr', 'mf.Qh', 0);
model.result.numerical('int3').setIndex('unit', 'W/km', 0);
model.result.numerical('int3').setIndex('descr', 'Armor losses (plain 2D model)', 0);
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').comments('Armor Losses');
model.result.numerical('int3').set('table', 'tbl3');
model.result.numerical('int3').setResult;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Phase AC Resistance');
model.result.numerical('gev1').setIndex('expr', '(mf.RCoil_1/1[m]+mf.RCoil_2/1[m]+mf.RCoil_3/1[m])/3', 0);
model.result.numerical('gev1').setIndex('unit', 'mohm/km', 0);
model.result.numerical('gev1').setIndex('descr', 'Phase AC resistance (plain 2D model)', 0);
model.result.table.create('tbl4', 'Table');
model.result.table('tbl4').comments('Phase AC Resistance');
model.result.numerical('gev1').set('table', 'tbl4');
model.result.numerical('gev1').setResult;
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').label('Phase Inductance');
model.result.numerical('gev2').setIndex('expr', '(mf.LCoil_1/1[m]+mf.LCoil_2/1[m]+mf.LCoil_3/1[m])/3', 0);
model.result.numerical('gev2').setIndex('unit', 'mH/km', 0);
model.result.numerical('gev2').setIndex('descr', 'Phase inductance (plain 2D model)', 0);
model.result.table.create('tbl5', 'Table');
model.result.table('tbl5').comments('Phase Inductance');
model.result.numerical('gev2').set('table', 'tbl5');
model.result.numerical('gev2').setResult;

model.physics('mf').create('coil4', 'Coil', 2);
model.physics('mf').feature('coil4').label('Cable Armor');
model.physics('mf').feature('coil4').selection.named('geom1_c19_dom');
model.physics('mf').feature('coil4').set('coilGroup', true);
model.physics('mf').feature('coil4').set('CoilExcitation', 'Voltage');
model.physics('mf').feature('coil4').set('VCoil', '0[V]');

model.sol('sol1').runAll;

model.result('pg1').run;
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').run;
model.result.export('anim2').showFrame;
model.result.export('anim2').run;
model.result.numerical('int1').setIndex('expr', 'mf.Qh', 0);
model.result.numerical('int1').setIndex('unit', 'W/km', 0);
model.result.numerical('int1').setIndex('descr', 'Phase losses (2.5D model)', 0);
model.result.numerical('int1').set('table', 'tbl1');
model.result.numerical('int1').appendResult;
model.result.numerical('int2').setIndex('expr', 'mf.Qh', 0);
model.result.numerical('int2').setIndex('unit', 'W/km', 0);
model.result.numerical('int2').setIndex('descr', 'Screen losses (2.5D model)', 0);
model.result.numerical('int2').set('table', 'tbl2');
model.result.numerical('int2').appendResult;
model.result.numerical('int3').setIndex('expr', 'mf.Qh', 0);
model.result.numerical('int3').setIndex('unit', 'W/km', 0);
model.result.numerical('int3').setIndex('descr', 'Armor losses (2.5D model)', 0);
model.result.numerical('int3').set('table', 'tbl3');
model.result.numerical('int3').appendResult;
model.result.numerical('gev1').setIndex('expr', '(mf.RCoil_1/1[m]+mf.RCoil_2/1[m]+mf.RCoil_3/1[m])/3', 0);
model.result.numerical('gev1').setIndex('unit', 'mohm/km', 0);
model.result.numerical('gev1').setIndex('descr', 'Phase AC resistance (2.5D model)', 0);
model.result.numerical('gev1').set('table', 'tbl4');
model.result.numerical('gev1').appendResult;
model.result.numerical('gev2').setIndex('expr', '(mf.LCoil_1/1[m]+mf.LCoil_2/1[m]+mf.LCoil_3/1[m])/3', 0);
model.result.numerical('gev2').setIndex('unit', 'mH/km', 0);
model.result.numerical('gev2').setIndex('descr', 'Phase inductance (2.5D model)', 0);
model.result.numerical('gev2').set('table', 'tbl5');
model.result.numerical('gev2').appendResult;
model.result.dataset('dset2').selection.named('geom1_c21_dom');
model.result('pg2').run;
model.result('pg2').feature('surf1').set('expr', 'mf.normJ');
model.result('pg2').feature('surf1').set('colortable', 'Prism');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').run;

model.physics('mf').feature('coil1').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil1').set('N', 1);
model.physics('mf').feature('coil1').set('sigmaCoil', 'Scup');
model.physics('mf').feature('coil1').set('coilWindArea', 'Acon');
model.physics('mf').feature('coil2').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil2').set('N', 1);
model.physics('mf').feature('coil2').set('sigmaCoil', 'Scup');
model.physics('mf').feature('coil2').set('coilWindArea', 'Acon');
model.physics('mf').feature('coil3').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil3').set('N', 1);
model.physics('mf').feature('coil3').set('sigmaCoil', 'Scup');
model.physics('mf').feature('coil3').set('coilWindArea', 'Acon');

model.sol('sol1').runAll;

model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').run;
model.result.numerical('int1').setIndex('expr', 'mf.Qh', 0);
model.result.numerical('int1').setIndex('unit', 'W/km', 0);
model.result.numerical('int1').setIndex('descr', 'Phase losses (2.5D+Milliken)', 0);
model.result.numerical('int1').set('table', 'tbl1');
model.result.numerical('int1').appendResult;
model.result.numerical('int2').setIndex('expr', 'mf.Qh', 0);
model.result.numerical('int2').setIndex('unit', 'W/km', 0);
model.result.numerical('int2').setIndex('descr', 'Screen losses (2.5D+Milliken)', 0);
model.result.numerical('int2').set('table', 'tbl2');
model.result.numerical('int2').appendResult;
model.result.numerical('int3').setIndex('expr', 'mf.Qh', 0);
model.result.numerical('int3').setIndex('unit', 'W/km', 0);
model.result.numerical('int3').setIndex('descr', 'Armor losses (2.5D+Milliken)', 0);
model.result.numerical('int3').set('table', 'tbl3');
model.result.numerical('int3').appendResult;
model.result.numerical('gev1').setIndex('expr', '(mf.RCoil_1/1[m]+mf.RCoil_2/1[m]+mf.RCoil_3/1[m])/3', 0);
model.result.numerical('gev1').setIndex('unit', 'mohm/km', 0);
model.result.numerical('gev1').setIndex('descr', 'Phase AC resistance (2.5D+Milliken)', 0);
model.result.numerical('gev1').setIndex('expr', 'Rcon', 1);
model.result.numerical('gev1').setIndex('unit', 'mohm/km', 1);
model.result.numerical('gev1').setIndex('descr', ['Main conductor DC resistance per phase, at 20' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C (analytic)'], 1);
model.result.numerical('gev1').set('table', 'tbl4');
model.result.numerical('gev1').appendResult;
model.result.numerical('gev2').setIndex('expr', '(mf.LCoil_1/1[m]+mf.LCoil_2/1[m]+mf.LCoil_3/1[m])/3', 0);
model.result.numerical('gev2').setIndex('unit', 'mH/km', 0);
model.result.numerical('gev2').setIndex('descr', 'Phase inductance (2.5D+Milliken)', 0);
model.result.numerical('gev2').set('table', 'tbl5');
model.result.numerical('gev2').appendResult;
model.result.export('anim1').showFrame;
model.result.export('anim1').set('maxframes', 60);
model.result.export('anim1').set('repeat', 'forever');
model.result.export('anim2').showFrame;
model.result.export('anim2').set('maxframes', 60);
model.result.export('anim2').set('repeat', 'forever');
model.result('pg2').run;
model.result('pg2').run;

model.view('view4').set('showgrid', true);
model.view('view4').set('showaxisorientation', true);

model.result('pg2').run;
model.result('pg1').run;
model.result('pg1').run;

model.title(['Submarine Cable 4 ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Inductive Effects']);

model.description(['Results from the Capacitive Effects and Bonding Capacitive tutorials (the previous tutorials in this series) show there is only a weak coupling between the inductive and capacitive phenomena in the cable. In addition to this, 3D twist models show that 2D and 2.5D inductive models are able to provide a good approximation of the cable' native2unicode(hex2dec({'20' '19'}), 'unicode') 's lumped quantities, and at only a fraction of the computational cost.' newline  newline 'This justifies a 2D/2.5D inductive model that includes out-of-plane currents only. The model demonstrates methods suitable to approximate the armor twist, as well as certain milliken conductor designs. It serves as a basis and a reference for the Thermal Effects and the Inductive Effects 3D tutorials (chapters 6, and 8). Verification is included: the results are compared to the cable' native2unicode(hex2dec({'20' '19'}), 'unicode') 's official specifications.']);

model.label('submarine_cable_04_inductive_effects.mph');

model.result('pg1').run;

model.physics('mf').feature('coil1').set('ConductorModel', 'Single');
model.physics('mf').feature('coil2').set('ConductorModel', 'Single');
model.physics('mf').feature('coil3').set('ConductorModel', 'Single');
model.physics('mf').feature.remove('coil4');

model.param.create('par4');
model.param('par4').label('Thermal Parameters');

% To import content from file, use:
% model.param('par4').loadFile('FILENAME');
model.param('par4').set('Ntcon', '0.075281', 'Main conductor thermal packing density (phase)');
model.param('par4').set('Tmcon', '89.4[degC]', 'Average temperature of main conductors (phase)');
model.param('par4').set('Tmpbs', '82.7[degC]', 'Average screen temperature (lead sheath)');
model.param('par4').set('Tmarm', '70.1[degC]', 'Average temperature of armor ring');
model.param('par4').set('Tmext', '20[degC]', 'External temperature (sea bed)');
model.param('par4').set('Tmref', '20[degC]', 'Linearized resistivity reference temperature');
model.param('par4').set('R0cup', '1/Scup', ['Reference resistivity, copper, at 20' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C']);
model.param('par4').set('R0pbs', '1/Spbs', ['Reference resistivity, lead sheath, at 20' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C']);
model.param('par4').set('R0arm', '1/Sarm', ['Reference resistivity, armor wires, at 20' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C']);
model.param('par4').set('ALcup', '3.9e-3[1/K]', 'Resistivity temperature coefficient, copper');
model.param('par4').set('ALpbs', '3.86e-3[1/K]', 'Resistivity temperature coefficient, lead sheath');
model.param('par4').set('ALarm', '5.3e-3[1/K]', 'Resistivity temperature coefficient, armor wires');

model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');

model.study('std1').feature('freq').setSolveFor('/physics/ht', true);

model.physics('ht').selection.named('geom1_r1_dom');

model.multiphysics.create('emh1', 'ElectromagneticHeating', 'geom1', 2);
model.multiphysics('emh1').selection.named('geom1_c22_dom');
model.multiphysics('emh1').selection('BoundarySelection').set([]);

model.result.numerical('int1').set('data', 'none');
model.result.numerical('int2').set('data', 'none');
model.result.numerical('int3').set('data', 'none');
model.result.numerical('gev1').set('data', 'none');
model.result.numerical('gev2').set('data', 'none');

model.study.remove('std1');
model.study.create('std1');
model.study('std1').create('fstat', 'FrequencyStationary');
model.study('std1').feature('fstat').set('freq', '1000000');
model.study('std1').feature('fstat').set('solnum', 'auto');
model.study('std1').feature('fstat').set('notsolnum', 'auto');
model.study('std1').feature('fstat').set('outputmap', {});
model.study('std1').feature('fstat').set('ngenAUX', '1');
model.study('std1').feature('fstat').set('goalngenAUX', '1');
model.study('std1').feature('fstat').set('ngenAUX', '1');
model.study('std1').feature('fstat').set('goalngenAUX', '1');
model.study('std1').feature('fstat').setSolveFor('/physics/mf', true);
model.study('std1').feature('fstat').setSolveFor('/physics/ht', true);
model.study('std1').feature('fstat').setSolveFor('/multiphysics/emh1', true);
model.study('std1').feature('fstat').set('freq', 'f0');

model.material('mat11').propertyGroup('def').set('thermalconductivity', {'Ntcon*400[W/(m*K)]'});
model.material.duplicate('mat14', 'mat1');
model.material('mat14').label('Thermal Contact Layer');
model.material('mat14').selection.geom('geom1', 1);
model.material('mat14').selection.named('adj1');

model.physics('ht').create('sls1', 'SolidLayeredShell', 1);
model.physics('ht').feature('sls1').selection.named('adj1');
model.physics('ht').feature('sls1').set('lth_mat', 'userdef');
model.physics('ht').feature('sls1').set('lth', '20[um]');
model.physics('ht').create('temp1', 'TemperatureBoundary', 1);
model.physics('ht').feature('temp1').selection.set([1 2 3 5 10 11]);
model.physics('ht').feature('temp1').set('T0', 'Tmext');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'fstat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'fstat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables (ht) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Magnetic Flux Density Norm (mf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('surf1').set('colorcalibration', -0.8);
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature.create('str1', 'Streamline');
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('solutionparams', 'parent');
model.result('pg1').feature('str1').set('titletype', 'none');
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('udist', 0.03);
model.result('pg1').feature('str1').set('maxlen', 0.4);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('inheritcolor', false);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('data', 'parent');
model.result('pg1').feature('str1').selection.geom('geom1', 1);
model.result('pg1').feature('str1').selection.set([6 7 8 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664]);
model.result('pg1').feature('str1').set('inheritplot', 'surf1');
model.result('pg1').feature('str1').feature.create('col1', 'Color');
model.result('pg1').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg1').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg1').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg1').feature('str1').feature.create('filt1', 'Filter');
model.result('pg1').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').feature.create('con1', 'Contour');
model.result('pg1').feature('con1').set('showsolutionparams', 'on');
model.result('pg1').feature('con1').set('solutionparams', 'parent');
model.result('pg1').feature('con1').set('expr', 'mf.Az');
model.result('pg1').feature('con1').set('titletype', 'none');
model.result('pg1').feature('con1').set('number', 10);
model.result('pg1').feature('con1').set('levelrounding', false);
model.result('pg1').feature('con1').set('coloring', 'uniform');
model.result('pg1').feature('con1').set('colorlegend', false);
model.result('pg1').feature('con1').set('color', 'custom');
model.result('pg1').feature('con1').set('customcolor', [0.3764705955982208 0.3764705955982208 0.3764705955982208]);
model.result('pg1').feature('con1').set('resolution', 'fine');
model.result('pg1').feature('con1').set('inheritcolor', false);
model.result('pg1').feature('con1').set('showsolutionparams', 'on');
model.result('pg1').feature('con1').set('data', 'parent');
model.result('pg1').feature('con1').set('inheritplot', 'surf1');
model.result('pg1').feature('con1').feature.create('filt1', 'Filter');
model.result('pg1').feature('con1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Temperature (ht)');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond3/pcond2/pg1');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solutionparams', 'parent');
model.result('pg2').feature('surf1').set('expr', 'T');
model.result('pg2').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').run;
model.result.dataset('dset1').selection.geom('geom1', 2);
model.result.dataset('dset1').selection.named('geom1_c21_dom');
model.result('pg1').run;
model.result('pg1').set('view', 'view2');
model.result('pg1').run;
model.result('pg1').feature('surf1').set('colorcalibration', -1.5);
model.result('pg1').run;
model.result('pg1').feature('str1').active(false);
model.result('pg1').run;
model.result('pg1').feature('con1').set('number', 20);
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').set('view', 'view2');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('surf1').set('unit', 'degC');
model.result('pg2').feature('surf1').set('resolution', 'fine');
model.result('pg2').feature('surf1').create('hght1', 'Height');
model.result('pg2').run;
model.result('pg2').feature('surf1').feature('hght1').set('heightdata', 'expr');
model.result('pg2').feature('surf1').feature('hght1').set('expr', 'T-55[degC]');
model.result('pg2').run;

model.view('view5').set('showgrid', false);
model.view('view5').set('showaxisorientation', false);

model.result('pg2').run;
model.result.numerical('int1').set('data', 'dset1');
model.result.numerical('int1').selection.named('uni1');
model.result.numerical('int1').setIndex('unit', 'W/km', 0);
model.result.numerical('int1').setIndex('descr', 'Phase losses (one-way ih)', 0);
model.result.numerical('int1').set('table', 'tbl1');
model.result.numerical('int1').appendResult;
model.result.numerical('int2').set('data', 'dset1');
model.result.numerical('int2').selection.named('geom1_uni3_dom');
model.result.numerical('int2').setIndex('unit', 'W/km', 0);
model.result.numerical('int2').setIndex('descr', 'Screen losses (one-way ih)', 0);
model.result.numerical('int2').set('table', 'tbl2');
model.result.numerical('int2').appendResult;
model.result.numerical('int3').set('data', 'dset1');
model.result.numerical('int3').selection.named('geom1_c19_dom');
model.result.numerical('int3').setIndex('unit', 'W/km', 0);
model.result.numerical('int3').setIndex('descr', 'Armor losses (one-way ih)', 0);
model.result.numerical('int3').set('table', 'tbl3');
model.result.numerical('int3').appendResult;

model.physics('mf').feature('coil1').set('ConstitutiveRelationJcE', 'LinearizedResistivity');
model.physics('mf').feature('coil2').set('ConstitutiveRelationJcE', 'LinearizedResistivity');
model.physics('mf').feature('coil3').set('ConstitutiveRelationJcE', 'LinearizedResistivity');

model.material('mat11').propertyGroup('linzRes').set('rho0', {'R0cup/Ncon'});
model.material('mat11').propertyGroup('linzRes').set('alpha', {'ALcup'});
model.material('mat11').propertyGroup('linzRes').set('Tref', {'Tmref'});
model.material('mat12').propertyGroup('linzRes').set('rho0', {'R0pbs'});
model.material('mat12').propertyGroup('linzRes').set('alpha', {'ALpbs'});
model.material('mat12').propertyGroup('linzRes').set('Tref', {'Tmref'});
model.material('mat13').propertyGroup('linzRes').set('rho0', {'R0arm'});
model.material('mat13').propertyGroup('linzRes').set('alpha', {'ALarm'});
model.material('mat13').propertyGroup('linzRes').set('Tref', {'Tmref'});

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'fstat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'fstat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables (ht) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result('pg1').run;
model.result.numerical('int1').setIndex('descr', 'Phase losses (linres phases)', 0);
model.result.numerical('int1').set('table', 'tbl1');
model.result.numerical('int1').appendResult;
model.result.numerical('int2').setIndex('descr', 'Screen losses (linres phases)', 0);
model.result.numerical('int2').set('table', 'tbl2');
model.result.numerical('int2').appendResult;
model.result.numerical('int3').setIndex('descr', 'Armor losses (linres phases)', 0);
model.result.numerical('int3').set('table', 'tbl3');
model.result.numerical('int3').appendResult;
model.result('pg2').run;
model.result('pg2').run;

model.physics('mf').create('als2', 'AmperesLawSolid', 2);
model.physics('mf').feature('als2').label('Screens');
model.physics('mf').feature('als2').selection.named('geom1_uni3_dom');
model.physics('mf').feature('als2').set('ConstitutiveRelationJcE', 'LinearizedResistivity');
model.physics('mf').feature.duplicate('als3', 'als2');
model.physics('mf').feature('als3').label('Cable Armor');
model.physics('mf').feature('als3').selection.named('geom1_c19_dom');

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'fstat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'fstat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables (ht) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result('pg1').run;
model.result.numerical('int1').setIndex('descr', 'Phase losses (coupled ih)', 0);
model.result.numerical('int1').set('table', 'tbl1');
model.result.numerical('int1').appendResult;
model.result.numerical('int2').setIndex('descr', 'Screen losses (coupled ih)', 0);
model.result.numerical('int2').set('table', 'tbl2');
model.result.numerical('int2').appendResult;
model.result.numerical('int3').setIndex('descr', 'Armor losses (coupled ih)', 0);
model.result.numerical('int3').set('table', 'tbl3');
model.result.numerical('int3').appendResult;
model.result.numerical('gev1').set('data', 'dset1');
model.result.numerical('gev1').setIndex('unit', 'mohm/km', 0);
model.result.numerical('gev1').setIndex('descr', 'Phase AC resistance (coupled ih)', 0);
model.result.numerical('gev1').setIndex('expr', 'Rcon*(1+ALcup*(Tmcon-Tmref))', 1);
model.result.numerical('gev1').setIndex('descr', ['Main conductor DC resistance per phase, at 90' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C (analytic)'], 1);
model.result.numerical('gev1').set('table', 'tbl4');
model.result.numerical('gev1').appendResult;
model.result.numerical('gev2').set('data', 'dset1');
model.result.numerical('gev2').setIndex('unit', 'mH/km', 0);
model.result.numerical('gev2').setIndex('descr', 'Phase inductance (coupled ih)', 0);
model.result.numerical('gev2').set('table', 'tbl5');
model.result.numerical('gev2').appendResult;
model.result('pg2').run;
model.result('pg2').run;
model.result.numerical.create('av1', 'AvSurface');
model.result.numerical('av1').set('intvolume', true);
model.result.numerical('av1').label('Average Temperature');
model.result.numerical('av1').selection.named('uni1');
model.result.numerical('av1').setIndex('unit', 'degC', 0);
model.result.numerical('av1').setIndex('descr', 'Temperature (phases)', 0);
model.result.table.create('tbl6', 'Table');
model.result.table('tbl6').comments('Average Temperature');
model.result.numerical('av1').set('table', 'tbl6');
model.result.numerical('av1').setResult;
model.result.numerical('av1').selection.named('geom1_uni3_dom');
model.result.numerical('av1').setIndex('descr', 'Temperature (screens)', 0);
model.result.numerical('av1').set('table', 'tbl6');
model.result.numerical('av1').appendResult;
model.result.numerical('av1').selection.named('geom1_c19_dom');
model.result.numerical('av1').setIndex('descr', 'Temperature (armor)', 0);
model.result.numerical('av1').set('table', 'tbl6');
model.result.numerical('av1').appendResult;

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.named('uni1');

model.func.create('an1', 'Analytic');
model.func('an1').model('comp1');
model.func('an1').label('Linearized Resistance');
model.func('an1').set('funcname', 'Rac');
model.func('an1').set('expr', '1.39*Rcon*(1+ALcup*(T-Tmref))');
model.func('an1').set('args', 'T');
model.func('an1').setIndex('argunit', 'K', 0);
model.func('an1').set('fununit', 'ohm/m');
model.func('an1').setIndex('plotargs', '80[degC]', 0, 1);
model.func('an1').setIndex('plotargs', '100[degC]', 0, 2);

model.physics.create('ge', 'GlobalEquations', 'geom1');
model.physics('ge').model('comp1');

model.study('std1').feature('fstat').setSolveFor('/physics/ge', true);

model.physics('ge').prop('EquationForm').set('form', 'Automatic');
model.physics('ge').feature('ge1').setIndex('name', 'Scup2', 0, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'Rac(aveop1(T))-(mf.RCoil_1/1[m]+mf.RCoil_2/1[m]+mf.RCoil_3/1[m])/3', 0, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 'Scup', 0, 0);
model.physics('ge').feature('ge1').set('CustomDependentVariableUnit', '1');
model.physics('ge').feature('ge1').set('DependentVariableQuantity', 'none');
model.physics('ge').feature('ge1').setIndex('CustomDependentVariableUnit', 'S/m', 0, 0);
model.physics('ge').feature('ge1').set('CustomSourceTermUnit', '1');
model.physics('ge').feature('ge1').set('SourceTermQuantity', 'none');
model.physics('ge').feature('ge1').setIndex('CustomSourceTermUnit', 'ohm/m', 0, 0);
model.physics('ge').feature('ge1').set('valueType', 'real');
model.physics('mf').feature('coil1').set('ConstitutiveRelationJcE', 'ElectricalConductivity');
model.physics('mf').feature('coil1').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil1').set('sigmaCoil', 'Scup2');
model.physics('mf').feature('coil2').set('ConstitutiveRelationJcE', 'ElectricalConductivity');
model.physics('mf').feature('coil2').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil2').set('sigmaCoil', 'Scup2');
model.physics('mf').feature('coil3').set('ConstitutiveRelationJcE', 'ElectricalConductivity');
model.physics('mf').feature('coil3').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil3').set('sigmaCoil', 'Scup2');

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'fstat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'fstat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').label('Direct (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature('ssDef').set('segvar', {'comp1_A'});
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_ht_TextFace' 'comp1_T' 'comp1_ODE1'});
model.sol('sol1').runAll;

model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').run;
model.result.numerical('int1').setIndex('descr', 'Phase losses (preset Rac)', 0);
model.result.numerical('int1').set('table', 'tbl1');
model.result.numerical('int1').appendResult;
model.result.numerical('int2').setIndex('descr', 'Screen losses (preset Rac)', 0);
model.result.numerical('int2').set('table', 'tbl2');
model.result.numerical('int2').appendResult;
model.result.numerical('int3').setIndex('descr', 'Armor losses (preset Rac)', 0);
model.result.numerical('int3').set('table', 'tbl3');
model.result.numerical('int3').appendResult;
model.result.numerical('gev1').set('expr', {});
model.result.numerical('gev1').set('descr', {});
model.result.numerical('gev1').setIndex('expr', '(mf.RCoil_1/1[m]+mf.RCoil_2/1[m]+mf.RCoil_3/1[m])/3', 0);
model.result.numerical('gev1').setIndex('unit', 'mohm/km', 0);
model.result.numerical('gev1').setIndex('descr', 'Phase AC resistance (preset Rac)', 0);
model.result.numerical('gev1').set('table', 'tbl4');
model.result.numerical('gev1').appendResult;
model.result.numerical('gev2').setIndex('descr', 'Phase inductance (preset Rac)', 0);
model.result.numerical('gev2').set('table', 'tbl5');
model.result.numerical('gev2').appendResult;
model.result('pg2').run;
model.result('pg2').run;

model.view('view5').set('showgrid', true);
model.view('view5').set('showaxisorientation', true);

model.result('pg2').run;

model.title(['Submarine Cable 6 ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Thermal Effects']);

model.description(['This tutorial uses the Inductive Effects model from this series as a basis and adds thermal effects, including a temperature dependent conductivity (through linearized resistivity). It shows how to achieve a multiphysics coupling between electromagnetic fields and heat transfer, using the frequency-stationary study type (induction heating).' newline  newline 'The influence of elevated temperatures on losses in the phases, screens, and armor is investigated (verification is included). The obtained temperature values are used in the Inductive Effects 3D tutorial, to apply a first-order temperature correction in 3D. Finally, the tutorial demonstrates how to match the resulting AC resistance to the one given by the IEC series of standards.']);

model.label('submarine_cable_06_thermal_effects.mph');

model.modelNode.label('Components');

out = model;
