function out = model
%
% frequency_selective_surface_csrr.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Wave_Optics_Module/Gratings_and_Metamaterials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ewfd', 'ElectromagneticWavesFrequencyDomain', 'geom1');
model.physics('ewfd').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('solnum', 'auto');
model.study('std1').feature('freq').set('notsolnum', 'auto');
model.study('std1').feature('freq').set('outputmap', {});
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').setSolveFor('/physics/ewfd', true);

model.geom('geom1').run;

model.study('std1').feature('freq').set('plist', 'range(3.8[THz],0.1[THz],5.4[THz])');

model.param.set('theta', '0[deg]');
model.param.descr('theta', 'Elevation angle');

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', [15 15 45]);
model.geom('geom1').feature('blk1').set('base', 'center');
model.geom('geom1').run('blk1');

model.view('view1').set('renderwireframe', true);

model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').geom.create('c1', 'Circle');
model.geom('geom1').feature('wp1').geom.feature('c1').set('r', 5);
model.geom('geom1').feature('wp1').geom.run('c1');
model.geom('geom1').feature('wp1').geom.create('c2', 'Circle');
model.geom('geom1').feature('wp1').geom.feature('c2').set('r', 3.5);
model.geom('geom1').feature('wp1').geom.run('c2');
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', [4 1]);
model.geom('geom1').feature('wp1').geom.feature('r1').set('base', 'center');
model.geom('geom1').feature('wp1').geom.feature('r1').set('pos', [4 0]);
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').feature('wp1').geom.create('dif1', 'Difference');
model.geom('geom1').feature('wp1').geom.feature('dif1').selection('input').set({'c1'});
model.geom('geom1').feature('wp1').geom.feature('dif1').selection('input2').set({'c2' 'r1'});
model.geom('geom1').feature('wp1').geom.run('dif1');
model.geom('geom1').run('wp1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', [15 15 2]);
model.geom('geom1').feature('blk2').set('base', 'center');
model.geom('geom1').feature('blk2').set('pos', [0 0 -1]);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.physics('ewfd').feature('wee1').set('DisplacementFieldModel', 'RelativePermittivity');
model.physics('ewfd').create('pec2', 'PerfectElectricConductor', 2);
model.physics('ewfd').feature('pec2').selection.set([9]);
model.physics('ewfd').create('pc1', 'PeriodicCondition', 2);
model.physics('ewfd').feature('pc1').selection.set([1 4 7 15 16 17]);
model.physics('ewfd').feature('pc1').set('PeriodicType', 'Floquet');
model.physics('ewfd').feature('pc1').set('Floquet_source', 'FromPeriodicPort');
model.physics('ewfd').create('pc2', 'PeriodicCondition', 2);
model.physics('ewfd').feature('pc2').selection.set([2 5 8 11 12 13]);
model.physics('ewfd').feature('pc2').set('PeriodicType', 'Floquet');
model.physics('ewfd').feature('pc2').set('Floquet_source', 'FromPeriodicPort');
model.physics('ewfd').create('port1', 'Port', 2);
model.physics('ewfd').feature('port1').selection.set([10]);
model.physics('ewfd').feature('port1').set('PortType', 'Periodic');
model.physics('ewfd').feature('port1').set('InputType', 'H');
model.physics('ewfd').feature('port1').set('Hampl', [0 1 0]);
model.physics('ewfd').feature('port1').set('alpha1_inc', 'theta');
model.physics('ewfd').create('port2', 'Port', 2);
model.physics('ewfd').feature('port2').selection.set([3]);
model.physics('ewfd').feature('port2').set('PortType', 'Periodic');
model.physics('ewfd').feature('port2').set('InputType', 'H');
model.physics('ewfd').feature('port2').set('Hampl', [0 1 0]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Dielectric');
model.material('mat2').selection.set([2]);
model.material('mat2').propertyGroup('def').set('relpermittivity', {'2.1'});
model.material('mat2').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0'});

model.mesh('mesh1').run;
model.mesh('mesh1').autoMeshSize(1);
model.mesh('mesh1').run;

model.view('view1').hideEntities.create('hide1');
model.view('view1').hideEntities('hide1').geom('geom1', 2);
model.view('view1').hideEntities('hide1').set([7 8]);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(3.8[THz],0.1[THz],5.4[THz])'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'THz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (ewfd)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankasolv', {'stored'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankarelax', 0.95);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Electric Field (ewfd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 17, 0);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWavesFrequencyDomain/phys1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('smooth', 'internal');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('unit', {'' '' '' ''});
model.result('pg2').feature('glob1').set('expr', {'ewfd.Rorder_0_0' 'ewfd.Torder_0_0' 'ewfd.RTtotal' 'ewfd.Atotal'});
model.result('pg2').feature('glob1').set('descr', {'Reflectance, order [0,0]' 'Transmittance, order [0,0]' 'Total reflectance and transmittance' 'Absorptance'});
model.result('pg2').label('Reflectance, Transmittance, and Absorptance (ewfd)');
model.result('pg2').feature('glob1').set('titletype', 'none');
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Reflectance, transmittance, and absorptance (1)');
model.result('pg2').feature('glob1').set('xdataexpr', 'freq');
model.result('pg2').feature('glob1').set('xdataunit', 'THz');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').label('Polarization Plot (ewfd)');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Polarization states, Color: Phase (Radians)');
model.result('pg3').setIndex('looplevelinput', 'manual', 0);
model.result('pg3').setIndex('looplevel', '1', 0);
model.result('pg3').create('plz1', 'Polarization');
model.result('pg3').feature('plz1').set('linestyle', 'solid');
model.result('pg3').feature('plz1').set('linewidth', 2);
model.result('pg3').feature('plz1').set('display', '0');
model.result('pg3').feature('plz1').create('col1', 'Color');
model.result('pg3').feature('plz1').feature('col1').set('colortable', 'Cyclic');
model.result('pg3').feature('plz1').feature('col1').set('colorlegend', true);
model.result('pg3').feature('plz1').set('legend', true);
model.result('pg3').feature('plz1').set('legendmethod', 'manual');
model.result('pg3').feature('plz1').setIndex('legends', 'Reflection', 0);
model.result('pg3').create('plz2', 'Polarization');
model.result('pg3').feature('plz2').set('linestyle', 'dashed');
model.result('pg3').feature('plz2').set('linewidth', 2);
model.result('pg3').feature('plz2').set('display', '1');
model.result('pg3').feature('plz2').create('col1', 'Color');
model.result('pg3').feature('plz2').feature('col1').set('colortable', 'Cyclic');
model.result('pg3').feature('plz2').feature('col1').set('colorlegend', false);
model.result('pg3').feature('plz2').set('legend', true);
model.result('pg3').feature('plz2').set('legendmethod', 'manual');
model.result('pg3').feature('plz2').setIndex('legends', 'Transmission', 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 9, 0);
model.result('pg1').run;
model.result('pg1').feature('mslc1').set('xnumber', '0');
model.result('pg1').feature('mslc1').set('ynumber', '0');
model.result('pg1').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('mslc1').set('zcoord', -1);
model.result('pg1').run;
model.result('pg2').run;

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').set('plotgroup', 'Default');
model.study('std2').feature('freq').set('solnum', 'auto');
model.study('std2').feature('freq').set('notsolnum', 'auto');
model.study('std2').feature('freq').set('outputmap', {});
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').setSolveFor('/physics/ewfd', true);
model.study('std2').create('param', 'Parametric');
model.study('std2').feature('param').setIndex('pname', 'theta', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'rad', 0);
model.study('std2').feature('param').setIndex('pname', 'theta', 0);
model.study('std2').feature('param').setIndex('plistarr', '', 0);
model.study('std2').feature('param').setIndex('punit', 'rad', 0);
model.study('std2').feature('param').setIndex('plistarr', 'range(0[deg],5[deg],85[deg])', 0);
model.study('std2').feature('freq').set('plist', '4.6[THz]');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 0.01);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature('p1').set('pname', {'theta'});
model.sol('sol2').feature('s1').feature('p1').set('plistarr', {'range(0[deg],5[deg],85[deg])'});
model.sol('sol2').feature('s1').feature('p1').set('punit', {'rad'});
model.sol('sol2').feature('s1').feature('p1').set('sweeptype', 'sparse');
model.sol('sol2').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol2').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s1').feature('p1').set('probes', {});
model.sol('sol2').feature('s1').feature('p1').set('control', 'param');
model.sol('sol2').feature('s1').set('control', 'freq');
model.sol('sol2').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('s1').set('control', 'freq');
model.sol('sol2').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol2').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (ewfd)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_E'});
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankasolv', {'stored'});
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankarelax', 0.95);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Electric Field (ewfd) 1');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 18, 0);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 18, 0);
model.result('pg4').set('defaultPlotID', 'ElectromagneticWavesFrequencyDomain/phys1/pdef1/pcond1/pg1');
model.result('pg4').feature.create('mslc1', 'Multislice');
model.result('pg4').feature('mslc1').set('smooth', 'internal');
model.result('pg4').feature('mslc1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'dset2');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('unit', {'' '' '' ''});
model.result('pg5').feature('glob1').set('expr', {'ewfd.Rorder_0_0' 'ewfd.Torder_0_0' 'ewfd.RTtotal' 'ewfd.Atotal'});
model.result('pg5').feature('glob1').set('descr', {'Reflectance, order [0,0]' 'Transmittance, order [0,0]' 'Total reflectance and transmittance' 'Absorptance'});
model.result('pg5').label('Reflectance, Transmittance, and Absorptance (ewfd) 1');
model.result('pg5').feature('glob1').set('titletype', 'none');
model.result('pg5').feature('glob1').set('xdata', 'expr');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Reflectance, transmittance, and absorptance (1)');
model.result('pg5').feature('glob1').set('xdataexpr', 'theta');
model.result('pg5').feature('glob1').set('xdataunit', 'rad');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').label('Polarization Plot (ewfd) 1');
model.result('pg6').set('data', 'dset2');
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'Polarization states, Color: Phase (Radians)');
model.result('pg6').setIndex('looplevelinput', 'manual', 0);
model.result('pg6').setIndex('looplevel', '1', 0);
model.result('pg6').create('plz1', 'Polarization');
model.result('pg6').feature('plz1').set('linestyle', 'solid');
model.result('pg6').feature('plz1').set('linewidth', 2);
model.result('pg6').feature('plz1').set('display', '0');
model.result('pg6').feature('plz1').create('col1', 'Color');
model.result('pg6').feature('plz1').feature('col1').set('colortable', 'Cyclic');
model.result('pg6').feature('plz1').feature('col1').set('colorlegend', true);
model.result('pg6').feature('plz1').set('legend', true);
model.result('pg6').feature('plz1').set('legendmethod', 'manual');
model.result('pg6').feature('plz1').setIndex('legends', 'Reflection', 0);
model.result('pg6').create('plz2', 'Polarization');
model.result('pg6').feature('plz2').set('linestyle', 'dashed');
model.result('pg6').feature('plz2').set('linewidth', 2);
model.result('pg6').feature('plz2').set('display', '1');
model.result('pg6').feature('plz2').create('col1', 'Color');
model.result('pg6').feature('plz2').feature('col1').set('colortable', 'Cyclic');
model.result('pg6').feature('plz2').feature('col1').set('colorlegend', false);
model.result('pg6').feature('plz2').set('legend', true);
model.result('pg6').feature('plz2').set('legendmethod', 'manual');
model.result('pg6').feature('plz2').setIndex('legends', 'Transmission', 0);
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').feature('mslc1').set('xnumber', '0');
model.result('pg4').feature('mslc1').set('ynumber', '0');
model.result('pg4').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg4').feature('mslc1').set('zcoord', -1);
model.result('pg4').run;
model.result('pg5').run;
model.result('pg5').feature('glob1').set('xdataunit', [native2unicode(hex2dec({'00' 'b0'}), 'unicode') ]);
model.result('pg5').run;

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(2);
model.selection('sel1').label('Port 1');
model.selection('sel1').set([10]);

model.physics('ewfd').feature('port1').selection.named('sel1');

model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').geom(2);
model.selection('sel2').label('Port 2');
model.selection('sel2').set([3]);

model.physics('ewfd').feature('port2').selection.named('sel2');

model.study.create('std3');
model.study('std3').create('frawe', 'FrequencyAdaptive');
model.study('std3').feature('frawe').set('plotgroup', 'Default');
model.study('std3').feature('frawe').set('solnum', 'auto');
model.study('std3').feature('frawe').set('notsolnum', 'auto');
model.study('std3').feature('frawe').set('outputmap', {});
model.study('std3').feature('frawe').setSolveFor('/physics/ewfd', true);
model.study('std3').feature('frawe').set('plist', 'range(3.8[THz],0.01[THz],5.4[THz])');
model.study('std3').feature('frawe').setEntry('outputmap', 'ewfd', 'selection');
model.study('std3').feature('frawe').setEntry('outputselectionmap', 'ewfd', 'sel1;sel2');

model.sol.create('sol3');

model.study('std3').feature('frawe').set('awefunc', {'abs(comp1.ewfd.S21)'});

model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'frawe');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'frawe');
model.sol('sol3').create('aw1', 'AWE');
model.sol('sol3').feature('aw1').set('pname', 'freq');
model.sol('sol3').feature('aw1').set('plist', 'range(3.8[THz],0.01[THz],5.4[THz])');
model.sol('sol3').feature('aw1').set('awefunc', {'abs(comp1.ewfd.S21)'});
model.sol('sol3').feature('aw1').set('rtol', 0.01);
model.sol('sol3').feature('aw1').set('plot', 'off');
model.sol('sol3').feature('aw1').set('plotgroup', 'Default');
model.sol('sol3').feature('aw1').set('probesel', 'all');
model.sol('sol3').feature('aw1').set('probes', {});
model.sol('sol3').feature('aw1').feature('aDef').set('complexfun', true);
model.sol('sol3').feature('aw1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('aw1').create('d1', 'Direct');
model.sol('sol3').feature('aw1').feature('d1').set('linsolver', 'mumps');
model.sol('sol3').feature('aw1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol3').feature('aw1').create('i1', 'Iterative');
model.sol('sol3').feature('aw1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('aw1').feature('i1').set('prefuntype', 'right');
model.sol('sol3').feature('aw1').feature('i1').set('itrestart', '300');
model.sol('sol3').feature('aw1').feature('i1').label('Suggested Iterative Solver (ewfd)');
model.sol('sol3').feature('aw1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('aw1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol3').feature('aw1').feature('i1').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol3').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_E'});
model.sol('sol3').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('va1').set('iter', 1);
model.sol('sol3').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankasolv', {'stored'});
model.sol('sol3').feature('aw1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankarelax', 0.95);
model.sol('sol3').feature('aw1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol3').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol3').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol3').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 1);
model.sol('sol3').feature('aw1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 0.5);
model.sol('sol3').feature('aw1').feature('d1').active(true);
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').label('Electric Field (ewfd) 2');
model.result('pg7').set('data', 'dset3');
model.result('pg7').setIndex('looplevel', 161, 0);
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').set('data', 'dset3');
model.result('pg7').setIndex('looplevel', 161, 0);
model.result('pg7').set('defaultPlotID', 'ElectromagneticWavesFrequencyDomain/phys1/pdef1/pcond1/pg1');
model.result('pg7').feature.create('mslc1', 'Multislice');
model.result('pg7').feature('mslc1').set('smooth', 'internal');
model.result('pg7').feature('mslc1').set('data', 'parent');
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').set('data', 'dset3');
model.result('pg8').create('glob1', 'Global');
model.result('pg8').feature('glob1').set('unit', {'' '' '' ''});
model.result('pg8').feature('glob1').set('expr', {'ewfd.Rorder_0_0' 'ewfd.Torder_0_0' 'ewfd.RTtotal' 'ewfd.Atotal'});
model.result('pg8').feature('glob1').set('descr', {'Reflectance, order [0,0]' 'Transmittance, order [0,0]' 'Total reflectance and transmittance' 'Absorptance'});
model.result('pg8').label('Reflectance, Transmittance, and Absorptance (ewfd) 2');
model.result('pg8').feature('glob1').set('titletype', 'none');
model.result('pg8').feature('glob1').set('xdata', 'expr');
model.result('pg8').set('ylabelactive', true);
model.result('pg8').set('ylabel', 'Reflectance, transmittance, and absorptance (1)');
model.result('pg8').feature('glob1').set('xdataexpr', 'freq');
model.result('pg8').feature('glob1').set('xdataunit', 'THz');
model.result('pg8').feature('glob1').set('markerpos', 'datapoints');
model.result('pg8').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').label('Polarization Plot (ewfd) 2');
model.result('pg9').set('data', 'dset3');
model.result('pg9').set('titletype', 'manual');
model.result('pg9').set('title', 'Polarization states, Color: Phase (Radians)');
model.result('pg9').setIndex('looplevelinput', 'manual', 0);
model.result('pg9').setIndex('looplevel', '1', 0);
model.result('pg9').create('plz1', 'Polarization');
model.result('pg9').feature('plz1').set('linestyle', 'solid');
model.result('pg9').feature('plz1').set('linewidth', 2);
model.result('pg9').feature('plz1').set('display', '0');
model.result('pg9').feature('plz1').create('col1', 'Color');
model.result('pg9').feature('plz1').feature('col1').set('colortable', 'Cyclic');
model.result('pg9').feature('plz1').feature('col1').set('colorlegend', true);
model.result('pg9').feature('plz1').set('legend', true);
model.result('pg9').feature('plz1').set('legendmethod', 'manual');
model.result('pg9').feature('plz1').setIndex('legends', 'Reflection', 0);
model.result('pg9').create('plz2', 'Polarization');
model.result('pg9').feature('plz2').set('linestyle', 'dashed');
model.result('pg9').feature('plz2').set('linewidth', 2);
model.result('pg9').feature('plz2').set('display', '1');
model.result('pg9').feature('plz2').create('col1', 'Color');
model.result('pg9').feature('plz2').feature('col1').set('colortable', 'Cyclic');
model.result('pg9').feature('plz2').feature('col1').set('colorlegend', false);
model.result('pg9').feature('plz2').set('legend', true);
model.result('pg9').feature('plz2').set('legendmethod', 'manual');
model.result('pg9').feature('plz2').setIndex('legends', 'Transmission', 0);
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').feature.remove('mslc1');
model.result('pg7').run;
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').create('sel1', 'Selection');
model.result('pg7').feature('surf1').feature('sel1').selection.set([3 10]);
model.result('pg7').run;
model.result('pg8').run;
model.result('pg8').set('legendpos', 'lowerright');
model.result('pg8').run;
model.result('pg8').feature('glob1').setIndex('descr', 'S11 Adaptive Frequency Sweep', 0);
model.result('pg8').feature('glob1').setIndex('descr', 'S21 Adaptive Frequency Sweep', 1);
model.result('pg8').feature.duplicate('glob2', 'glob1');
model.result('pg8').run;
model.result('pg8').feature('glob2').setIndex('descr', 'S11 Regular Sweep', 0);
model.result('pg8').feature('glob2').setIndex('descr', 'S21 Regular Sweep', 1);
model.result('pg8').feature('glob2').set('data', 'dset1');
model.result('pg8').feature('glob2').set('linestyle', 'dotted');
model.result('pg8').feature('glob2').set('linemarker', 'cycle');
model.result('pg8').run;
model.result.dataset.create('arr1', 'Array3D');
model.result.dataset('arr1').set('fullsize', [16 16 1]);
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').run;
model.result('pg10').label('Arrayed Field Plot');
model.result('pg10').set('data', 'arr1');
model.result('pg10').setIndex('looplevel', 9, 0);
model.result('pg10').set('titletype', 'none');
model.result('pg10').set('edges', false);
model.result('pg10').set('showlegends', false);

model.view('view3').set('showaxisorientation', false);

model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg10').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg10').feature('surf1').create('filt1', 'Filter');
model.result('pg10').run;
model.result('pg10').feature('surf1').feature('filt1').set('expr', ['z>=-2.05[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm] && z<=0']);
model.result('pg10').run;
model.result('pg10').feature('surf1').create('def1', 'Deform');
model.result('pg10').run;
model.result('pg10').feature('surf1').feature('def1').set('expr', {'' '' 'ewfd.normE'});
model.result('pg10').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg10').feature('surf1').feature('def1').set('scale', '0.5E-8');
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Passband with Graph Marker');
model.result('pg11').set('data', 'dset3');
model.result('pg11').create('glob1', 'Global');
model.result('pg11').feature('glob1').set('markerpos', 'datapoints');
model.result('pg11').feature('glob1').set('linewidth', 'preference');
model.result('pg11').feature('glob1').set('expr', {'ewfd.Torder_0_0'});
model.result('pg11').feature('glob1').set('descr', {'Transmittance, order [0,0]'});
model.result('pg11').feature('glob1').set('unit', {'1'});
model.result('pg11').feature('glob1').create('gmrk1', 'GraphMarker');
model.result('pg11').feature('glob1').feature('gmrk1').set('linewidth', 'preference');
model.result('pg11').run;
model.result('pg11').feature('glob1').feature('gmrk1').set('displaymode', 'widthmode');
model.result('pg11').feature('glob1').feature('gmrk1').set('cutoffvalabs', 0.5);
model.result('pg11').feature('glob1').feature('gmrk1').set('precision', 3);
model.result('pg11').feature('glob1').feature('gmrk1').set('includeunit', true);
model.result('pg11').feature('glob1').feature('gmrk1').set('showframe', true);

model.title('Frequency Selective Surface, Periodic Complementary Split Ring Resonator');

model.description('Frequency selective surfaces (FSS) are periodic structures with a bandpass or a bandstop frequency response. This example shows that only signals around the center frequency can pass through the periodic complimentary split ring resonator layer.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('frequency_selective_surface_csrr.mph');

model.modelNode.label('Components');

out = model;
