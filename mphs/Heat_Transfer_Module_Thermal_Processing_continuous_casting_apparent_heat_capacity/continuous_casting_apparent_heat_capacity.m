function out = model
%
% continuous_casting_apparent_heat_capacity.m
%
% Model exported on May 26 2025, 21:29 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Thermal_Processing');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'WeaklyCompressible');
model.physics.create('ht', 'HeatTransferInFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics('ht').prop('ShapeProperty').set('order_temperature', '1');

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 2);
model.multiphysics('nitf1').set('Fluid_physics', 'spf');
model.multiphysics('nitf1').set('Heat_physics', 'ht');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/nitf1', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('T_m', '1356[K]', 'Melting temperature');
model.param.set('dT', '30[K]', 'Temperature transition zone half width');
model.param.set('dH', '205[kJ/kg]', 'Latent heat of solidification');
model.param.set('Cp_s', '380[J/(kg*K)]', 'Heat capacity at constant pressure, solid phase');
model.param.set('Cp_l', '530[J/(kg*K)]', 'Heat capacity at constant pressure, liquid phase');
model.param.set('T_in', '1473[K]', 'Melt inlet temperature');
model.param.set('v_cast', '-1.6[mm/s]', 'Casting speed');
model.param.set('epsilon', '1e-3', 'Volume force damping constant');
model.param.set('A_mush', '6e4[kg/(m^3*s)]', 'Volume force damping constant');
model.param.set('h_br', '25[W/(m^2*K)]', 'Heat transfer coefficient, brake ring');
model.param.set('h_mold', '800[W/(m^2*K)]', 'Heat transfer coefficient, mold');
model.param.set('h_air', '10[W/(m^2*K)]', 'Heat transfer coefficient, air exposure');
model.param.set('eps_s', '0.8', '             Surface emissivity, air exposure');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').selection.geom('geom1', 2);
model.variable('var1').selection.all;

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('alpha', 'ht.alpha12', 'Fraction of liquid phase');
model.variable('var1').set('f', '(1-alpha)^2/(alpha^3+epsilon)', 'Volume force prefactor');
model.variable('var1').set('Fr', '-f*A_mush*u', 'Volume force density, r-component');
model.variable('var1').set('Fz', '-f*A_mush*(w-v_cast)', 'Volume force density, z-component');
model.variable('var1').set('D', 'd(alpha,T)', '                    Temperature dependence, latent heat');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', [0.065 0.1]);
model.geom('geom1').feature('r1').set('pos', [0 -0.1]);
model.geom('geom1').run('fin');
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', [0.0625 0.025]);
model.geom('geom1').feature('r2').set('pos', [0 -0.125]);
model.geom('geom1').run('fin');
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', [0.11575 1.4075]);
model.geom('geom1').feature('r3').set('pos', [0 -1.5725]);
model.geom('geom1').feature('r3').setIndex('layer', 0.6, 0);
model.geom('geom1').feature('r3').setIndex('layer', 0.4, 1);
model.geom('geom1').feature('r3').setIndex('layer', 0.3675, 2);
model.geom('geom1').run('fin');
model.geom('geom1').run('r3');
model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'table');
model.geom('geom1').feature('pol1').setIndex('table', 0, 0, 0);
model.geom('geom1').feature('pol1').setIndex('table', -0.125, 0, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 1, 0);
model.geom('geom1').feature('pol1').setIndex('table', -0.165, 1, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0.11575, 2, 0);
model.geom('geom1').feature('pol1').setIndex('table', -0.165, 2, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0.0625, 3, 0);
model.geom('geom1').feature('pol1').setIndex('table', -0.125, 3, 1);
model.geom('geom1').feature('pol1').setIndex('table', 0, 4, 0);
model.geom('geom1').feature('pol1').setIndex('table', -0.125, 4, 1);
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Solid Metal Alloy');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', {'0.0434'});
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'200'});
model.material('mat1').propertyGroup('def').set('density', {'8500'});
model.material('mat1').propertyGroup('def').set('heatcapacity', {'Cp_s'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Liquid Metal Alloy');
model.material('mat2').selection.all;
model.material('mat2').propertyGroup('def').set('dynamicviscosity', {'0.0434'});
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'200'});
model.material('mat2').propertyGroup('def').set('density', {'8500'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'Cp_l'});

model.physics('spf').feature('init1').set('u_init', {'0' '0' 'v_cast'});
model.physics('spf').create('inl1', 'InletBoundary', 1);
model.physics('spf').feature('inl1').selection.set([15]);
model.physics('spf').feature('inl1').set('BoundaryCondition', 'Pressure');
model.physics('spf').create('out1', 'OutletBoundary', 1);
model.physics('spf').feature('out1').selection.set([2]);
model.physics('spf').feature('out1').set('BoundaryCondition', 'Velocity');
model.physics('spf').feature('out1').set('ComponentWise', 'VelocityFieldComponentWise');
model.physics('spf').feature('out1').set('u0', {'0' '0' 'v_cast'});
model.physics('spf').create('wallbc2', 'WallBC', 1);
model.physics('spf').feature('wallbc2').selection.set([20 21 22]);
model.physics('spf').feature('wallbc2').set('BoundaryCondition', 'Slip');
model.physics('spf').create('vf1', 'VolumeForce', 2);
model.physics('spf').feature('vf1').selection.all;
model.physics('spf').feature('vf1').set('F', {'Fr' '0' 'Fz'});

model.common.create('ampr1', 'AmbientProperties', 'comp1');
model.common('ampr1').set('T_amb', '300[K]');

model.physics('ht').feature('fluid1').create('phc1', 'PhaseChangeMaterial', 2);
model.physics('ht').feature('fluid1').feature('phc1').set('T_pc12', 'T_m');
model.physics('ht').feature('fluid1').feature('phc1').set('dT_pc12', '2*dT');
model.physics('ht').feature('fluid1').feature('phc1').set('L_pc12', 'dH');
model.physics('ht').feature('fluid1').feature('phc1').set('MaterialPhase1', 'mat1');
model.physics('ht').feature('fluid1').feature('phc1').set('MaterialPhase2', 'mat2');
model.physics('ht').feature('init1').set('Tinit', 'T_in');
model.physics('ht').create('ifl1', 'Inflow', 1);
model.physics('ht').feature('ifl1').selection.set([15]);
model.physics('ht').feature('ifl1').set('Tustr', 'T_in');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf1').selection.set([23]);
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 'h_br');
model.physics('ht').feature('hf1').set('Text_src', 'root.comp1.ampr1.T_amb');
model.physics('ht').create('hf2', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf2').selection.set([22]);
model.physics('ht').feature('hf2').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf2').set('h', 'h_mold');
model.physics('ht').feature('hf2').set('Text_src', 'root.comp1.ampr1.T_amb');
model.physics('ht').create('hf3', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf3').selection.set([20 21]);
model.physics('ht').feature('hf3').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf3').set('h', 'h_air');
model.physics('ht').feature('hf3').set('Text_src', 'root.comp1.ampr1.T_amb');
model.physics('ht').create('ofl1', 'ConvectiveOutflow', 1);
model.physics('ht').feature('ofl1').selection.set([2]);
model.physics('ht').create('sar1', 'SurfaceToAmbientRadiation', 1);
model.physics('ht').feature('sar1').selection.set([20 21]);
model.physics('ht').feature('sar1').set('epsilon_rad_mat', 'userdef');
model.physics('ht').feature('sar1').set('epsilon_rad', 'eps_s');
model.physics('ht').feature('sar1').set('Tamb_src', 'root.comp1.ampr1.T_amb');

model.mesh('mesh1').autoMeshSize(3);
model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature.remove('bl1');
model.mesh('mesh1').feature('size1').selection.set([16 17 18 19 20 21]);
model.mesh('mesh1').feature('size1').set('hauto', 4);
model.mesh('mesh1').run;

model.study('std1').setGenPlots(false);
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'T_m', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'K', 0);
model.study('std1').feature('stat').setIndex('pname', 'T_m', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'K', 0);
model.study('std1').feature('stat').setIndex('pname', 'dT', 0);
model.study('std1').feature('stat').setIndex('plistarr', '300 100 50 30', 0);
model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat2').set('errestandadap', 'adaption');
model.study('std1').feature('stat2').set('meshadaptmethod', 'modify');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6 7]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6 7]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_T'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.5);
model.sol('sol1').feature('s1').create('d2', 'Direct');
model.sol('sol1').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d2').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Temperature');
model.sol('sol1').feature('s1').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s1').feature('se1').set('subinitcfl', 5);
model.sol('sol1').feature('s1').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s1').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s1').feature('se1').set('subkdpid', 0.15);
model.sol('sol1').feature('s1').feature('se1').set('subkipid', 0.15);
model.sol('sol1').feature('s1').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s1').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s1').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s1').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s1').feature('se1').set('maxsegiter', 200);
model.sol('sol1').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat2');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat2');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('se1', 'Segregated');
model.sol('sol1').feature('s2').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u'});
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('segvar', {'comp1_T'});
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('d2', 'Direct');
model.sol('sol1').feature('s2').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d2').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').label('Temperature');
model.sol('sol1').feature('s2').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s2').feature('se1').set('subinitcfl', 5);
model.sol('sol1').feature('s2').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s2').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s2').feature('se1').set('subkdpid', 0.15);
model.sol('sol1').feature('s2').feature('se1').set('subkipid', 0.15);
model.sol('sol1').feature('s2').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s2').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s2').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s2').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s2').feature('se1').set('maxsegiter', 200);
model.sol('sol1').feature('s2').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s2').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s2').feature('adDef').set('allowcoarsening', false);
model.sol('sol1').runAll;

model.view('view1').axis.set('xmin', -0.01);
model.view('view1').axis.set('xmax', 0.13);
model.view('view1').axis.set('ymin', -0.445);
model.view('view1').axis.set('ymax', -0.38);

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/spf', true);
model.study('std2').feature('stat').setSolveFor('/physics/ht', true);
model.study('std2').feature('stat').setSolveFor('/multiphysics/nitf1', true);
model.study('std2').feature('stat').set('useinitsol', true);
model.study('std2').feature('stat').set('initmethod', 'sol');
model.study('std2').feature('stat').set('initstudy', 'std1');
model.study('std2').feature('stat').set('useparam', true);
model.study('std2').feature('stat').setIndex('pname', 'T_m', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'K', 0);
model.study('std2').feature('stat').setIndex('pname', 'T_m', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'K', 0);
model.study('std2').feature('stat').setIndex('pname', 'dT', 0);
model.study('std2').feature('stat').setIndex('plistarr', '25 20 16 13 10', 0);

model.sol.create('sol7');

model.mesh('adaptmesh2').stat.selection.geom(2);
model.mesh('adaptmesh2').stat.selection.set([1 2 3 4 5 6 7]);

model.sol('sol7').study('std2');
model.sol('sol7').create('st1', 'StudyStep');
model.sol('sol7').feature('st1').set('study', 'std2');
model.sol('sol7').feature('st1').set('studystep', 'stat');
model.sol('sol7').create('v1', 'Variables');
model.sol('sol7').feature('v1').set('control', 'stat');
model.sol('sol7').create('s1', 'Stationary');
model.sol('sol7').feature('s1').create('p1', 'Parametric');
model.sol('sol7').feature('s1').feature.remove('pDef');
model.sol('sol7').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol7').feature('s1').set('control', 'stat');
model.sol('sol7').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol7').feature('s1').create('seDef', 'Segregated');
model.sol('sol7').feature('s1').create('se1', 'Segregated');
model.sol('sol7').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol7').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol7').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u'});
model.sol('sol7').feature('s1').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol7').feature('s1').create('d1', 'Direct');
model.sol('sol7').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol7').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol7').feature('s1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol7').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol7').feature('s1').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol7').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol7').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_T'});
model.sol('sol7').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.5);
model.sol('sol7').feature('s1').create('d2', 'Direct');
model.sol('sol7').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol7').feature('s1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol7').feature('s1').feature('d2').label('Direct, heat transfer variables (ht)');
model.sol('sol7').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol7').feature('s1').feature('se1').feature('ss2').label('Temperature');
model.sol('sol7').feature('s1').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol7').feature('s1').feature('se1').set('subinitcfl', 5);
model.sol('sol7').feature('s1').feature('se1').set('submincfl', 10000);
model.sol('sol7').feature('s1').feature('se1').set('subkppid', 0.65);
model.sol('sol7').feature('s1').feature('se1').set('subkdpid', 0.15);
model.sol('sol7').feature('s1').feature('se1').set('subkipid', 0.15);
model.sol('sol7').feature('s1').feature('se1').set('subcfltol', 0.1);
model.sol('sol7').feature('s1').feature('se1').set('segcflaa', true);
model.sol('sol7').feature('s1').feature('se1').set('segcflaacfl', 9000);
model.sol('sol7').feature('s1').feature('se1').set('segcflaafact', 1);
model.sol('sol7').feature('s1').feature('se1').set('maxsegiter', 200);
model.sol('sol7').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol7').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol7').feature('s1').create('i1', 'Iterative');
model.sol('sol7').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol7').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol7').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol7').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol7').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol7').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol7').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol7').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol7').feature('s1').create('i2', 'Iterative');
model.sol('sol7').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol7').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol7').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol7').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol7').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol7').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol7').feature('s1').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol7').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol7').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol7').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol7').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol7').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol7').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol7').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol7').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol7').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol7').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol7').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol7').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol7').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol7').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol7').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol7').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol7').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol7').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol7').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol7').feature('s1').feature.remove('fcDef');
model.sol('sol7').feature('s1').feature.remove('seDef');
model.sol('sol7').attach('std2');
model.sol('sol7').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol7').runAll;

model.result.dataset('dset4').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Velocity (spf)');
model.result('pg1').set('data', 'dset4');
model.result('pg1').setIndex('looplevel', 5, 0);
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Pressure (spf)');
model.result('pg2').set('data', 'dset4');
model.result('pg2').setIndex('looplevel', 5, 0);
model.result('pg2').set('dataisaxisym', 'off');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').label('Contour');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('expr', 'p');
model.result('pg2').feature('con1').set('number', 40);
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('smooth', 'internal');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('data', 'parent');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').label('Revolution 2D');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset4');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Velocity, 3D (spf)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond1/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Temperature (ht)');
model.result('pg4').set('data', 'dset4');
model.result('pg4').setIndex('looplevel', 5, 0);
model.result('pg4').set('dataisaxisym', 'off');
model.result('pg4').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('solutionparams', 'parent');
model.result('pg4').feature('surf1').set('expr', 'T');
model.result('pg4').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Temperature and Fluid Flow (nitf1)');
model.result('pg5').set('data', 'dset4');
model.result('pg5').setIndex('looplevel', 5, 0);
model.result('pg5').set('dataisaxisym', 'off');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond4/pcond4/pcond2/pg2');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').label('Fluid Temperature');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('expr', 'nitf1.T');
model.result('pg5').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg5').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg5').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg5').feature('surf1').feature('sel1').selection.set([1 2 3 4 5 6 7]);
model.result('pg5').feature.create('arws1', 'ArrowSurface');
model.result('pg5').feature('arws1').label('Fluid Flow');
model.result('pg5').feature('arws1').set('showsolutionparams', 'on');
model.result('pg5').feature('arws1').set('solutionparams', 'parent');
model.result('pg5').feature('arws1').set('expr', {'nitf1.ur' 'nitf1.uz'});
model.result('pg5').feature('arws1').set('xnumber', 30);
model.result('pg5').feature('arws1').set('ynumber', 30);
model.result('pg5').feature('arws1').set('arrowtype', 'cone');
model.result('pg5').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('arws1').set('showsolutionparams', 'on');
model.result('pg5').feature('arws1').set('data', 'parent');
model.result('pg5').feature('arws1').feature.create('col1', 'Color');
model.result('pg5').feature('arws1').feature('col1').set('showcolordata', 'off');
model.result('pg5').feature('arws1').feature.create('filt1', 'Filter');
model.result('pg5').feature('arws1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').set('unit', 'mm/s');

model.view('view1').axis.set('xmin', -0.3);
model.view('view1').axis.set('xmax', 0.4);
model.view('view1').axis.set('ymin', -0.6);
model.view('view1').axis.set('ymax', 0);
model.view('view1').set('locked', true);

model.result('pg1').run;
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').set('posmethod', 'magnitude');
model.result('pg1').feature('str1').set('mdist', [0.003 0.05]);
model.result('pg1').feature('str1').set('pointtype', 'arrow');
model.result('pg1').feature('str1').set('maxsteps', 50000);
model.result('pg1').run;
model.result('pg2').run;
model.result('pg3').run;
model.result('pg4').run;
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').run;
model.result('pg6').label('Fraction of Liquid Phase');
model.result('pg6').set('data', 'dset4');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'alpha');
model.result('pg6').feature('surf1').set('descr', 'Fraction of liquid phase');
model.result('pg6').run;
model.result('pg4').run;
model.result.duplicate('pg7', 'pg4');
model.result('pg7').run;
model.result('pg7').label('Temperature and Streamlines');
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('posmethod', 'magnitude');
model.result('pg7').feature('str1').set('mdist', [0.004 0.08]);
model.result('pg7').feature('str1').set('pointtype', 'arrow');
model.result('pg7').feature('str1').set('maxsteps', 50000);
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').run;
model.result('pg8').label('Conductive Heat Flux');
model.result('pg8').set('data', 'dset4');
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', 'ht.dfluxMag');
model.result('pg8').feature('surf1').set('descr', 'Conductive heat flux magnitude');
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').create('str1', 'Streamline');
model.result('pg8').feature('str1').set('posmethod', 'magnitude');
model.result('pg8').feature('str1').set('mdist', [0.004 0.08]);
model.result('pg8').feature('str1').set('pointtype', 'arrow');
model.result('pg8').feature('str1').set('maxsteps', 50000);
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Conductive Heat Flux through Outer Boundaries');
model.result('pg9').set('data', 'dset4');
model.result('pg9').setIndex('looplevelinput', 'last', 0);
model.result('pg9').set('titletype', 'manual');
model.result('pg9').set('title', 'Conductive heat flux through outer boundaries');
model.result('pg9').set('xlabelactive', true);
model.result('pg9').set('xlabel', 'z-coordinate (m)');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Normal conductive heat flux (W/m^2)');
model.result('pg9').create('lngr1', 'LineGraph');
model.result('pg9').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg9').feature('lngr1').set('linewidth', 'preference');
model.result('pg9').feature('lngr1').selection.set([20 21 22 23]);
model.result('pg9').feature('lngr1').set('expr', 'ht.ndflux');
model.result('pg9').feature('lngr1').set('descr', 'Normal conductive heat flux');
model.result('pg9').feature('lngr1').set('xdataexpr', 'z');
model.result('pg9').feature('lngr1').set('xdatadescr', 'z-coordinate');
model.result('pg9').feature('lngr1').set('recover', 'pprint');
model.result('pg9').run;
model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').setIndex('genpoints', 0.045, 0, 0);
model.result.dataset('cln1').setIndex('genpoints', -0.42, 0, 1);
model.result.dataset('cln1').setIndex('genpoints', 0.085, 1, 0);
model.result.dataset('cln1').setIndex('genpoints', -0.43, 1, 1);
model.result.dataset('cln1').set('data', 'dset4');
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('Temperature Dependence, Latent Heat');
model.result('pg10').set('data', 'cln1');
model.result('pg10').create('lngr1', 'LineGraph');
model.result('pg10').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg10').feature('lngr1').set('linewidth', 'preference');
model.result('pg10').feature('lngr1').set('expr', 'D');
model.result('pg10').feature('lngr1').set('descr', 'Temperature dependence, latent heat');
model.result('pg10').feature('lngr1').set('legend', true);
model.result('pg10').run;
model.result('pg3').run;

model.title(['Continuous Casting ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Apparent Heat Capacity Method']);

model.description('This example describes the cooling and solidification, from melt to solid metal, in a continuous casting process. The model includes nonisothermal properties, temperature distribution, flow field, and phase change. This example uses the apparent heat capacity method for modeling the phase change.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;

model.label('continuous_casting_apparent_heat_capacity.mph');

model.modelNode.label('Components');

out = model;
