function out = model
%
% truss_tower_buckling_guys.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Buckling_and_Wrinkling');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('truss', 'Truss', 'geom1');
model.physics('truss').model('comp1');
model.physics.create('wire', 'Wire', 'geom1');
model.physics('wire').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/truss', true);
model.study('std1').feature('stat').setSolveFor('/physics/wire', true);
model.study('std1').create('buckling', 'LinearBuckling');
model.study('std1').feature('buckling').set('neigsactive', true);
model.study('std1').feature('buckling').set('solnum', 'auto');
model.study('std1').feature('buckling').set('notsolnum', 'auto');
model.study('std1').feature('buckling').set('outputmap', {});
model.study('std1').feature('buckling').set('ngenAUX', '1');
model.study('std1').feature('buckling').set('goalngenAUX', '1');
model.study('std1').feature('buckling').set('ngenAUX', '1');
model.study('std1').feature('buckling').set('goalngenAUX', '1');
model.study('std1').feature('buckling').setSolveFor('/physics/truss', true);
model.study('std1').feature('buckling').setSolveFor('/physics/wire', true);

model.param.label('Tower Geometric Parameters');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('depth', '0.4[m]', 'Depth of the tower');
model.param.set('width', '0.45[m]', 'Width of the tower');
model.param.set('height', '1[m]', 'Height of the tower');
model.param.set('n', '10', 'Number of sections');
model.param.set('L', 'height*(2*n-1)', 'Total height of the tower');
model.param.set('do1', '3[cm]', 'Outer diameter tube 1');
model.param.set('di1', '2[cm]', 'Inner diameter tube 1');
model.param.set('do2', '2[cm]', 'Outer diameter tube 2');
model.param.set('di2', '1.4[cm]', 'Inner diameter tube 2');
model.param.set('A1', 'pi/4*(do1^2-di1^2)', 'Area tube 1');
model.param.set('A2', 'pi/4*(do2^2-di2^2)', 'Area tube 2');
model.param.create('par2');
model.param('par2').label('Guy Geometric Parameters');
model.param('par2').set('gnd_attach_guy1', '6[m]');
model.param('par2').descr('gnd_attach_guy1', 'Ground attachment distance of guy 1');
model.param('par2').set('gnd_attach_guy2', '12[m]');
model.param('par2').descr('gnd_attach_guy2', 'Ground attachment distance of guy 2');
model.param('par2').set('guy_d', '5[mm]');
model.param('par2').descr('guy_d', 'Diameter of guy 1 and guy 2');
model.param('par2').set('guy_height1', '7[m]');
model.param('par2').descr('guy_height1', 'Height of guy 1');
model.param('par2').set('guy_height2', '12[m]');
model.param('par2').descr('guy_height2', 'Height of guy 2');
model.param('par2').set('guy_area', 'pi/4*guy_d^2');
model.param('par2').descr('guy_area', 'Area of guy 1 and guy 2');
model.param('par2').set('kA', '3.927e6[N]');
model.param('par2').descr('kA', 'Axial stiffness');
model.param('par2').set('rhoL', '0.15413[kg/m]');
model.param('par2').descr('rhoL', 'Mass per unit length');

model.geom('geom1').insertFile('truss_tower_buckling.mph', 'geom1');
model.geom('geom1').run('fin');
model.geom('geom1').nodeGroup.create('grp1');
model.geom('geom1').nodeGroup('grp1').placeAfter([]);
model.geom('geom1').nodeGroup('grp1').add('blk1');
model.geom('geom1').nodeGroup('grp1').add('pol1');
model.geom('geom1').nodeGroup('grp1').add('ls1');
model.geom('geom1').nodeGroup('grp1').add('ls2');
model.geom('geom1').nodeGroup('grp1').add('ccur1');
model.geom('geom1').nodeGroup('grp1').add('mir1');
model.geom('geom1').nodeGroup('grp1').add('arr1');
model.geom('geom1').nodeGroup('grp1').add('arr2');
model.geom('geom1').nodeGroup('grp1').label('Tower');
model.geom('geom1').run('arr2');
model.geom('geom1').create('ls3', 'LineSegment');
model.geom('geom1').nodeGroup('grp1').remove('ls3', false);
model.geom('geom1').feature('ls3').set('specify1', 'coord');
model.geom('geom1').feature('ls3').set('coord1', {'0' '0' 'guy_height1-mod(guy_height1,height)'});
model.geom('geom1').feature('ls3').set('specify2', 'coord');
model.geom('geom1').feature('ls3').set('coord2', {'-gnd_attach_guy1*width/sqrt(width^2+depth^2)' '0' '0'});
model.geom('geom1').feature('ls3').setIndex('coord2', '-gnd_attach_guy1*depth/sqrt(width^2+depth^2)', 1);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Guy 1');
model.geom('geom1').feature('ls3').set('contributeto', 'csel1');
model.geom('geom1').runPre('fin');
model.geom('geom1').create('ls4', 'LineSegment');
model.geom('geom1').feature('ls4').set('specify1', 'coord');
model.geom('geom1').feature('ls4').set('coord1', {'0' '0' 'guy_height2-mod(guy_height2,height)'});
model.geom('geom1').feature('ls4').set('specify2', 'coord');
model.geom('geom1').feature('ls4').set('coord2', {'-gnd_attach_guy2*width/sqrt(width^2+depth^2)' '0' '0'});
model.geom('geom1').feature('ls4').setIndex('coord2', '-gnd_attach_guy2*depth/sqrt(width^2+depth^2)', 1);
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Guy 2');
model.geom('geom1').feature('ls4').set('contributeto', 'csel2');
model.geom('geom1').runPre('fin');
model.geom('geom1').create('mir2', 'Mirror');
model.geom('geom1').feature('mir2').selection('input').set({'ls3' 'ls4'});
model.geom('geom1').feature('mir2').set('keep', true);
model.geom('geom1').feature('mir2').set('pos', {'width/2' '0' '0'});
model.geom('geom1').feature('mir2').set('axis', [1 0 0]);
model.geom('geom1').runPre('fin');
model.geom('geom1').create('mir3', 'Mirror');
model.geom('geom1').feature('mir3').selection('input').set({'ls3' 'ls4' 'mir2'});
model.geom('geom1').feature('mir3').set('keep', true);
model.geom('geom1').feature('mir3').set('pos', {'0' 'depth/2' '0'});
model.geom('geom1').feature('mir3').set('axis', [0 1 0]);
model.geom('geom1').runPre('fin');
model.geom('geom1').nodeGroup.create('grp2');
model.geom('geom1').nodeGroup('grp2').placeAfter([]);
model.geom('geom1').nodeGroup('grp2').add('ls3');
model.geom('geom1').nodeGroup('grp2').add('ls4');
model.geom('geom1').nodeGroup('grp2').add('mir2');
model.geom('geom1').nodeGroup('grp2').add('mir3');
model.geom('geom1').nodeGroup('grp2').label('Guys');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Vertical Edges');
model.selection('sel1').geom(1);
model.selection('sel1').set([5 112 180 240]);
model.selection('sel1').set('groupcontang', true);
model.selection.create('com1', 'Complement');
model.selection('com1').model('comp1');
model.selection('com1').label('Transversal Truss Edges');
model.selection('com1').set('entitydim', 1);
model.selection('com1').set('input', {'sel1' 'geom1_csel1_edg' 'geom1_csel2_edg'});
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Tower');
model.selection('uni1').set('entitydim', 1);
model.selection('uni1').set('input', {'sel1' 'com1'});
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Guys');
model.selection('uni2').set('entitydim', 1);
model.selection('uni2').set('input', {'geom1_csel1_edg' 'geom1_csel2_edg'});

model.physics('truss').selection.named('uni1');
model.physics('truss').feature('csd1').label('Cross-Section Data (Vertical Edges)');
model.physics('truss').feature('csd1').set('SectionType', 'PipeSection');
model.physics('truss').feature('csd1').set('do_pipe', 'do1');
model.physics('truss').feature('csd1').set('di_pipe', 'di1');
model.physics('truss').create('csd2', 'CrossSectionTruss', 1);
model.physics('truss').feature('csd2').selection.named('com1');
model.physics('truss').feature('csd2').set('SectionType', 'PipeSection');
model.physics('truss').feature('csd2').set('do_pipe', 'do2');
model.physics('truss').feature('csd2').set('di_pipe', 'di2');
model.physics('truss').feature('csd2').label('Cross-Section Data (Other Truss Edges)');
model.physics('truss').create('pin1', 'Pinned', 0);
model.physics('truss').feature('pin1').selection.set([5 25 45 65]);
model.physics('truss').create('gacc1', 'GravityAcceleration', -1);
model.physics('truss').create('pl1', 'PointLoad', 0);
model.physics('truss').feature('pl1').selection.set([24 44 64 84]);
model.physics('truss').feature('pl1').set('Fp', {'0' '0' '-1[N]/4'});
model.physics('wire').selection.named('uni2');
model.physics('wire').field('displacement').field('u');
model.physics('wire').feature('elw1').set('area', 'guy_area');
model.physics('wire').feature('elw1').create('iss1', 'InitialStressandStrain', 1);
model.physics('wire').feature('elw1').feature('iss1').selection.named('uni2');
model.physics('wire').feature('elw1').feature('iss1').set('Nxi', '4[kN]');
model.physics('wire').create('pin1', 'Pinned', 0);
model.physics('wire').feature('pin1').selection.set([1 2 3 4 85 86 87 88]);
model.physics('wire').create('gacc1', 'GravityAcceleration', -1);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');
model.material('mat1').selection.named('uni1');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Wire material');
model.material('mat2').selection.named('uni2');
model.material('mat2').propertyGroup.create('ElasticWire', 'Elastic_wire');
model.material('mat2').propertyGroup('ElasticWire').set('k_A', {'kA'});
model.material('mat2').propertyGroup('ElasticWire').set('rho_L', {'rhoL'});

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.all;
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').selection.all;
model.mesh('mesh1').feature('edg1').feature('dis1').set('numelem', 1);
model.mesh('mesh1').feature('edg1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis2').selection.named('geom1_csel1_edg');
model.mesh('mesh1').feature('edg1').feature('dis2').set('numelem', 10);
model.mesh('mesh1').feature('edg1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis3').selection.named('geom1_csel2_edg');
model.mesh('mesh1').feature('edg1').feature('dis3').set('numelem', 10);
model.mesh('mesh1').run;

model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature.move('stat2', 1);
model.study('std1').feature('stat').label('Stationary, Dead Loads Only');
model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledphysics', {'truss/pl1'});
model.study('std1').feature('stat2').label('Stationary, Dead + Live Loads');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat2');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat2');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'buckling');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('initsoluse', 'sol3');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'buckling');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol1').feature('e1').set('eigvfunscaleparam', '3.11E-5');
model.sol('sol1').feature('e1').set('control', 'buckling');
model.sol('sol1').feature('e1').set('linpmethod', 'sol');
model.sol('sol1').feature('e1').set('linpsol', 'sol1');
model.sol('sol1').feature('e1').set('linpsoluse', 'sol3');
model.sol('sol1').feature('e1').set('control', 'buckling');
model.sol('sol1').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');

model.study('std1').feature('buckling').set('neigs', 2);
model.study('std1').feature('buckling').set('uselinpsol', true);
model.study('std1').feature('buckling').set('linpsoluse', 'sol2');
model.study('std1').feature('buckling').set('useliveloadsol', true);

model.sol('sol1').study('std1');

model.study('std1').feature('buckling').set('notsolnum', 'auto');
model.study('std1').feature('buckling').set('notsolvertype', 'solnum');
model.study('std1').feature('buckling').set('notsolnumhide', 'off');
model.study('std1').feature('buckling').set('notstudyhide', 'off');
model.study('std1').feature('buckling').set('notsolhide', 'off');
model.study('std1').feature('stat2').set('notsolnum', 'auto');
model.study('std1').feature('stat2').set('notsolvertype', 'solnum');
model.study('std1').feature('stat2').set('notsolnumhide', 'off');
model.study('std1').feature('stat2').set('notstudyhide', 'off');
model.study('std1').feature('stat2').set('notsolhide', 'off');

model.sol('sol2').copySolution('sol4');
model.sol('sol3').copySolution('sol5');

model.study('std1').feature('buckling').set('notlistsolnum', 1);
model.study('std1').feature('buckling').set('notsolnum', 'auto');
model.study('std1').feature('buckling').set('listsolnum', 1);
model.study('std1').feature('buckling').set('solnum', 'auto');
model.study('std1').feature('buckling').set('linplistsolnum', {'1'});
model.study('std1').feature('buckling').set('linpsolnum', 'auto');
model.study('std1').feature('buckling').set('liveloadlistsolnum', {'1'});
model.study('std1').feature('buckling').set('liveloadsolnum', 'auto');
model.study('std1').feature('buckling').set('notlistsolnum', 1);
model.study('std1').feature('buckling').set('notsolnum', 'auto');
model.study('std1').feature('buckling').set('listsolnum', 1);
model.study('std1').feature('buckling').set('solnum', 'auto');
model.study('std1').feature('buckling').set('linplistsolnum', {'1'});
model.study('std1').feature('buckling').set('linpsolnum', 'auto');
model.study('std1').feature('buckling').set('liveloadlistsolnum', {'1'});
model.study('std1').feature('buckling').set('liveloadsolnum', 'auto');

model.result.dataset('dset3').set('solution', 'none');

model.study('std1').feature('stat2').set('notlistsolnum', 1);
model.study('std1').feature('stat2').set('notsolnum', 'auto');
model.study('std1').feature('stat2').set('listsolnum', 1);
model.study('std1').feature('stat2').set('solnum', 'auto');
model.study('std1').feature('buckling').set('notlistsolnum', 1);
model.study('std1').feature('buckling').set('notsolnum', 'auto');
model.study('std1').feature('buckling').set('listsolnum', 1);
model.study('std1').feature('buckling').set('solnum', 'auto');
model.study('std1').feature('buckling').set('linplistsolnum', {'1'});
model.study('std1').feature('buckling').set('linpsolnum', 'auto');
model.study('std1').feature('buckling').set('liveloadlistsolnum', {'1'});
model.study('std1').feature('buckling').set('liveloadsolnum', 'auto');

model.result.dataset('dset2').set('solution', 'none');

model.sol('sol1').feature.remove('e1');
model.sol('sol1').feature.remove('v3');
model.sol('sol1').feature.remove('st3');
model.sol('sol1').feature.remove('su2');
model.sol('sol1').feature.remove('s2');
model.sol('sol1').feature.remove('v2');
model.sol('sol1').feature.remove('st2');
model.sol('sol1').feature.remove('su1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol5').copySolution('sol3');
model.sol.remove('sol5');
model.sol('sol3').label('Solution Store 2');

model.result.dataset.remove('dset6');

model.sol('sol4').copySolution('sol2');
model.sol.remove('sol4');
model.sol('sol2').label('Solution Store 1');

model.result.dataset.remove('dset5');

model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').feature('su1').set('sol', 'sol2');
model.sol('sol1').feature('su1').label('Solution Store 1');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat2');

model.study('std1').feature('stat2').set('initsoluse', 'sol2');

model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat2');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').feature('su2').set('sol', 'sol3');
model.sol('sol1').feature('su2').label('Solution Store 2');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'buckling');

model.study('std1').feature('buckling').set('initsoluse', 'sol3');
model.study('std1').feature('buckling').set('linpsoluse', 'sol2');
model.study('std1').feature('buckling').set('liveloadsoluse', 'sol3');

model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('initsoluse', 'sol3');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'buckling');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol1').feature('e1').set('eigvfunscaleparam', '3.11E-5');
model.sol('sol1').feature('e1').set('control', 'buckling');
model.sol('sol1').feature('e1').set('linpmethod', 'sol');
model.sol('sol1').feature('e1').set('linpsol', 'sol1');
model.sol('sol1').feature('e1').set('linpsoluse', 'sol3');
model.sol('sol1').feature('e1').set('control', 'buckling');
model.sol('sol1').feature('e1').feature('aDef').set('cachepattern', true);

model.result.dataset('dset3').set('solution', 'sol3');
model.result.dataset('dset2').set('solution', 'sol2');

model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');

model.study('std1').feature('buckling').set('notsolnum', 'auto');
model.study('std1').feature('buckling').set('notsolvertype', 'solnum');
model.study('std1').feature('buckling').set('notsolnumhide', 'off');
model.study('std1').feature('buckling').set('notstudyhide', 'off');
model.study('std1').feature('buckling').set('notsolhide', 'off');
model.study('std1').feature('stat2').set('notsolnum', 'auto');
model.study('std1').feature('stat2').set('notsolvertype', 'solnum');
model.study('std1').feature('stat2').set('notsolnumhide', 'off');
model.study('std1').feature('stat2').set('notstudyhide', 'off');
model.study('std1').feature('stat2').set('notsolhide', 'off');

model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('frametype', 'spatial');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('defaultPlotID', 'modeShape');
model.result('pg1').set('showlegends', false);
model.result('pg1').create('line1', 'Line');
model.result('pg1').feature('line1').set('expr', {'truss.disp'});
model.result('pg1').feature('line1').set('threshold', 'manual');
model.result('pg1').feature('line1').set('thresholdvalue', 0.2);
model.result('pg1').feature('line1').set('colortable', 'Rainbow');
model.result('pg1').feature('line1').set('colortabletrans', 'none');
model.result('pg1').feature('line1').set('colorscalemode', 'linear');
model.result('pg1').label('Mode Shape (truss)');
model.result('pg1').feature('line1').set('colortable', 'AuroraBorealis');
model.result('pg1').feature('line1').set('linetype', 'tube');
model.result('pg1').feature('line1').set('radiusexpr', 'truss.re');
model.result('pg1').feature('line1').set('resolution', 'extrafine');
model.result('pg1').feature('line1').set('smooth', 'internal');
model.result('pg1').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg1').feature('line1').set('tuberadiusscale', 1);
model.result('pg1').feature('line1').set('tubeendcaps', false);
model.result('pg1').feature('line1').create('def', 'Deform');
model.result('pg1').feature('line1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('line1').feature('def').set('descr', 'Displacement field');
model.result.dataset('dset1').set('frametype', 'spatial');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('defaultPlotID', 'modeShape');
model.result('pg2').set('showlegends', false);
model.result('pg2').create('line1', 'Line');
model.result('pg2').feature('line1').set('expr', {'wire.disp'});
model.result('pg2').feature('line1').set('threshold', 'manual');
model.result('pg2').feature('line1').set('thresholdvalue', 0.2);
model.result('pg2').feature('line1').set('colortable', 'Rainbow');
model.result('pg2').feature('line1').set('colortabletrans', 'none');
model.result('pg2').feature('line1').set('colorscalemode', 'linear');
model.result('pg2').label('Mode Shape (wire)');
model.result('pg2').feature('line1').set('colortable', 'AuroraBorealis');
model.result('pg2').feature('line1').set('linetype', 'tube');
model.result('pg2').feature('line1').set('radiusexpr', 'wire.re');
model.result('pg2').feature('line1').set('resolution', 'extrafine');
model.result('pg2').feature('line1').set('smooth', 'internal');
model.result('pg2').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg2').feature('line1').set('tuberadiusscale', 1);
model.result('pg2').feature('line1').set('tubeendcaps', false);
model.result('pg2').feature('line1').create('def', 'Deform');
model.result('pg2').feature('line1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg2').feature('line1').feature('def').set('descr', 'Displacement field');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('line1').set('tuberadiusscale', 6);
model.result('pg2').run;
model.result('pg1').run;
model.result('pg1').feature.copy('line2', 'pg2/line1');
model.result('pg1').run;
model.result('pg1').feature('line2').set('inheritplot', 'line1');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').stepNext(0);
model.result('pg1').run;
model.result('pg1').stepPrevious(0);
model.result('pg1').run;

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('lbs_f', '(1-withsol(''sol2'',truss.lbf_i))/(withsol(''sol3'',truss.lbf_i)-withsol(''sol2'',truss.lbf_i))', 'Local buckling safety factor');
model.variable('var1').descr('lbs_f', 'Local buckling safety factor');
model.variable('var1').set('lbf_i', '1/lbs_f', 'Local buckling failure index');
model.variable('var1').descr('lbf_i', 'Local buckling failure index');

model.sol('sol1').updateSolution;

model.result('pg1').run;
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('Local Buckling');
model.result('pg3').create('line1', 'Line');
model.result('pg3').feature('line1').set('expr', 'lbf_i');
model.result('pg3').feature('line1').set('colorlegend', false);
model.result('pg3').feature('line1').set('linetype', 'tube');
model.result('pg3').feature('line1').set('radiusexpr', 'truss.re');
model.result('pg3').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg3').feature('line1').set('tuberadiusscale', 2);
model.result('pg3').feature('line1').set('smooth', 'none');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').create('mml1', 'MaxMinLine');
model.result('pg3').feature('mml1').set('expr', 'lbs_f');
model.result('pg3').feature('mml1').set('display', 'min');
model.result('pg3').feature('mml1').set('labelprefix', 'Safety factor ');
model.result('pg3').run;

model.view('view1').set('locked', true);

model.result('pg3').run;

model.view('view1').set('locked', false);

model.result('pg1').run;

model.title('Linear Buckling Analysis of a Truss Tower with Dead Loads');

model.description('This example shows how to compute the critical buckling load in the presence of dead loads. A truss tower is supported by pretensioned guys. The pretension load and gravity on the structure are considered as dead loads, while the vertical load applied at the top of the tower is considered as the live load.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('truss_tower_buckling_guys.mph');

model.modelNode.label('Components');

out = model;
