function out = model
%
% time_to_frequency_fft_distributed_bragg_reflector.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Wave_Optics_Module/Couplers_Filters_and_Mirrors');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ewt', 'ElectromagneticWavesTransient', 'geom1');
model.physics('ewt').model('comp1');
model.physics.create('ewfd', 'ElectromagneticWavesFrequencyDomain', 'geom1');
model.physics('ewfd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('initialtime', '0');
model.study('std1').feature('time').set('solnum', 'auto');
model.study('std1').feature('time').set('notsolnum', 'auto');
model.study('std1').feature('time').set('outputmap', {});
model.study('std1').feature('time').setSolveFor('/physics/ewt', true);
model.study('std1').feature('time').setSolveFor('/physics/ewfd', true);
model.study('std1').create('tffft', 'TimeToFreqFFT');
model.study('std1').feature('tffft').set('fftinputstudy', 'current');
model.study('std1').feature('tffft').set('fftstarttime', '0');
model.study('std1').feature('tffft').set('fftendtime', '1');
model.study('std1').feature('tffft').set('fftmaxfreq', '10');
model.study('std1').feature('tffft').set('fftwincutoff', '1');
model.study('std1').feature('tffft').set('fftwinminfw', '0');
model.study('std1').feature('tffft').set('fftwinmaxfw', '1');
model.study('std1').feature('tffft').set('notsolnum', 'auto');
model.study('std1').feature('tffft').set('outputmap', {});
model.study('std1').feature('tffft').setSolveFor('/physics/ewt', true);
model.study('std1').feature('tffft').setSolveFor('/physics/ewfd', true);
model.study('std1').create('cmbsol', 'CombineSolution');
model.study('std1').feature('cmbsol').set('soloper', 'remsol');
model.study('std1').feature('cmbsol').set('excmethod', 'implicit');
model.study('std1').feature('cmbsol').set('remsolfromexprexc', '0');
model.study('std1').feature('cmbsol').setSolveFor('/physics/ewt', true);
model.study('std1').feature('cmbsol').setSolveFor('/physics/ewfd', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('lda0', '1[um]', 'Center wavelength');
model.param.set('f0', 'c_const/lda0', 'Center frequency');
model.param.set('omega0', '2*pi*f0', 'Center angular frequency');
model.param.set('n0', '1', 'Refractive index, superstrate');
model.param.set('nH', '2.5', 'Refractive index, high-index layers');
model.param.set('nL', '1.5', 'Refractive index, low-index layers');
model.param.set('ns', '1.5', 'Refractive index, substrate');
model.param.set('E0', '1[V/m]', 'Electric field amplitude');
model.param.set('T0', '1/f0', 'Period for center frequency');
model.param.set('df0', 'f0*4/pi*asin((nH-nL)/(nH+nL))', 'Reflector stop band');
model.param.set('d0', 'lda0/(4*n0)', 'Thickness, superstrate');
model.param.set('dH', 'lda0/(4*nH)', 'Thickness, high-index layers');
model.param.set('dL', 'lda0/(4*nL)', 'Thickness, low-index layers');
model.param.set('dPeriod', 'dH+dL', 'Thickness, pair of low- and high-index layers');
model.param.set('ds', 'lda0/(4*ns)', 'Thickness, substrate');
model.param.set('NPeriod', '20', 'Number of periods');
model.param.set('L_tot', 'NPeriod*dPeriod+dH', 'Total thickness');
model.param.set('deltaf', '1[THz]', 'Frequency resolution');
model.param.set('Tend', '1/deltaf', 'End time');
model.param.set('Tc', '3*Td', 'Delay time');
model.param.set('Td', '1/(2*f0)', 'Pulse duration');
model.param.set('Tmax', 'max(200*Td,Tend)', 'Simulation end time');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').label('Superstrate');
model.geom('geom1').feature('r1').set('size', {'d0' 'lda0'});
model.geom('geom1').feature('r1').set('pos', {'-d0' '0'});
model.geom('geom1').feature.duplicate('r2', 'r1');
model.geom('geom1').feature('r2').label('High-Index Layer');
model.geom('geom1').feature('r2').set('size', {'dH' 'lda0'});
model.geom('geom1').feature('r2').set('pos', [0 0]);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('High-Index Material');
model.geom('geom1').feature('r2').set('contributeto', 'csel1');
model.geom('geom1').feature.duplicate('r3', 'r2');
model.geom('geom1').feature('r3').label('Low-Index Layer');
model.geom('geom1').feature('r3').set('size', {'dL' 'lda0'});
model.geom('geom1').feature('r3').set('pos', {'dH' '0'});
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Low-Index Material');
model.geom('geom1').feature('r3').set('contributeto', 'csel2');
model.geom('geom1').run('r3');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').label('Period');
model.geom('geom1').feature('uni1').selection('input').set({'r2' 'r3'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('arr1', 'Array');
model.geom('geom1').feature('arr1').selection('input').set({'uni1'});
model.geom('geom1').feature('arr1').set('fullsize', {'NPeriod' '1'});
model.geom('geom1').feature('arr1').set('displ', {'dPeriod' '0'});
model.geom('geom1').feature.duplicate('r4', 'r2');
model.geom('geom1').feature('r4').label('Final High-Index Layer');
model.geom('geom1').feature('r4').set('pos', {'L_tot-dH' '0'});
model.geom('geom1').feature.duplicate('r5', 'r1');
model.geom('geom1').feature('r5').label('Substrate');
model.geom('geom1').feature('r5').set('size', {'ds' 'lda0'});
model.geom('geom1').feature('r5').set('pos', {'L_tot' '0'});
model.geom('geom1').feature('r5').set('contributeto', 'csel2');
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Air');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'n0'});
model.material('mat1').propertyGroup('RefractiveIndex').set('ki', {'0'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Titanium Dioxide');
model.material('mat2').selection.named('geom1_csel1_dom');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'nH'});
model.material('mat2').propertyGroup('RefractiveIndex').set('ki', {'0'});
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Silica');
model.material('mat3').selection.named('geom1_csel2_dom');
model.material('mat3').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat3').propertyGroup('RefractiveIndex').set('n', {'nL'});
model.material('mat3').propertyGroup('RefractiveIndex').set('ki', {'0'});

model.func.create('an1', 'Analytic');
model.func('an1').model('comp1');
model.func('an1').label('Modulated Gaussian Input Field');
model.func('an1').set('funcname', 'Ein');
model.func('an1').set('expr', 'E0*exp(-(t-Tc)^2/Td^2)*sin(omega0*(t-Tc))');
model.func('an1').set('args', 't');
model.func('an1').setIndex('argunit', 's', 0);
model.func('an1').set('fununit', 'V/m');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Top Exterior Boundaries');
model.selection('sel1').geom(1);
model.selection('sel1').set([3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129]);
model.selection.duplicate('sel2', 'sel1');
model.selection('sel2').label('Bottom Exterior Boundaries');
model.selection('sel2').set([2 5 8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59 62 65 68 71 74 77 80 83 86 89 92 95 98 101 104 107 110 113 116 119 122 125 128]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Top and Bottom Exterior Boundaries');
model.selection('uni1').set('entitydim', 1);
model.selection('uni1').set('input', {'sel1' 'sel2'});
model.selection.create('int1', 'Intersection');
model.selection('int1').model('comp1');
model.selection('int1').label('Top High-Index Material Boundaries');
model.selection('int1').set('entitydim', 1);
model.selection('int1').set('input', {'sel1' 'geom1_csel1_bnd'});
model.selection.duplicate('int2', 'int1');
model.selection('int2').label('Top Low-Index Material Boundaries');
model.selection('int2').set('input', {'sel1' 'geom1_csel2_bnd'});

model.probe.create('pdom1', 'DomainPoint');
model.probe('pdom1').model('comp1');
model.probe('pdom1').setIndex('coords2', 'L_tot+ds', 0);
model.probe('pdom1').set('bndsnap2', true);
model.probe('pdom1').feature('ppb1').set('expr', 'ewt.Ez');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 1);
model.cpl('intop1').selection.set([1]);
model.cpl.duplicate('intop2', 'intop1');
model.cpl('intop2').selection.set([130]);
model.cpl.create('intop3', 'Integration', 'geom1');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').selection.all;

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('Pin', '0.5*intop1(abs(EinODE)^2/Z0_const*ewt.nxx)');
model.variable('var1').descr('Pin', 'Input power');
model.variable('var1').set('Pt', 'intop2(ewt.nPoav)');
model.variable('var1').descr('Pt', 'Transmitted power');

model.physics('ewt').prop('components').set('components', 'outofplane');
model.physics('ewt').create('sctr1', 'Scattering', 1);
model.physics('ewt').feature('sctr1').selection.set([1]);
model.physics('ewt').feature('sctr1').set('IncidentField', 'EField');
model.physics('ewt').feature('sctr1').set('E0i', {'0' '0' 'Ein(t)'});
model.physics('ewt').create('sctr2', 'Scattering', 1);
model.physics('ewt').feature('sctr2').selection.set([130]);
model.physics('ewt').create('pmc1', 'PerfectMagneticConductor', 1);
model.physics('ewt').feature('pmc1').selection.named('uni1');
model.physics('ewt').create('ge1', 'GlobalEquations', -1);
model.physics('ewt').feature('ge1').setIndex('name', 'EinODE', 0, 0);
model.physics('ewt').feature('ge1').setIndex('equation', 'EinODE-Ein(t)', 0, 0);
model.physics('ewt').feature('ge1').setIndex('initialValueU', 'Ein(0)', 0, 0);
model.physics('ewt').feature('ge1').setIndex('initialValueUt', 'd(Ein(t),t)', 0, 0);
model.physics('ewt').feature('ge1').setIndex('description', 'Input electric field', 0, 0);
model.physics('ewt').feature('ge1').set('DependentVariableQuantity', 'electricfield');
model.physics('ewt').feature('ge1').set('SourceTermQuantity', 'electricfield');

model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh1').feature('size1').selection.set([3]);
model.mesh('mesh1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('size1').set('hmax', 'lda0/2/n0/6');
model.mesh('mesh1').feature.duplicate('size2', 'size1');
model.mesh('mesh1').feature('size2').selection.named('int1');
model.mesh('mesh1').feature('size2').set('hmax', 'lda0/2/nH/6');
model.mesh('mesh1').feature.duplicate('size3', 'size2');
model.mesh('mesh1').feature('size3').selection.named('int2');
model.mesh('mesh1').feature('size3').set('hmax', 'lda0/2/nL/6');
model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.named('sel1');
model.mesh('mesh1').create('cpe1', 'CopyEdge');
model.mesh('mesh1').feature('cpe1').selection('source').geom(1);
model.mesh('mesh1').feature('cpe1').selection('destination').geom(1);
model.mesh('mesh1').feature('cpe1').selection('source').named('sel1');
model.mesh('mesh1').feature('cpe1').selection('destination').named('sel2');
model.mesh('mesh1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('dis1').selection.set([1]);
model.mesh('mesh1').feature('dis1').set('numelem', 1);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tunit', 'fs');
model.study('std1').feature('time').set('tlist', 'range(0,0.25*T0,Tmax)');
model.study('std1').feature('tffft').set('tunit', 'fs');
model.study('std1').feature('tffft').set('fftendtime', 'Tend');
model.study('std1').feature('tffft').set('punit', 'THz');
model.study('std1').feature('tffft').set('fftmaxfreq', '2*f0');
model.study('std1').feature('tffft').setEntry('activate', 'ewfd', false);
model.study('std1').feature('cmbsol').set('remsolfromexprexc', 'freq<0.5*f0||freq>1.5*f0');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.25*T0,Tmax)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {'pdom1'});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('timemethod', 'genalpha');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').label('Suggested Direct Solver (ewt)');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'tffft');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'tffft');
model.sol('sol1').create('fft1', 'FFT');
model.sol('sol1').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol1').feature('fft1').set('fftinputdata', 'fftperiodic');
model.sol('sol1').feature('fft1').set('fftoutorder', 'sym');
model.sol('sol1').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol1').feature('fft1').set('cname', 't');
model.sol('sol1').feature('fft1').set('clist', {'0'});
model.sol('sol1').feature('fft1').set('clistctrl', {'fft1_const'});
model.sol('sol1').feature('fft1').set('control', 'tffft');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('cms1', 'CombineSolution');
model.sol('sol1').feature('cms1').set('control', 'cmbsol');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('tstepsgenalpha', 'manual');
model.sol('sol1').feature('t1').set('timestepgenalpha', '0.01*T0');

model.probe('pdom1').genResult('none');

model.sol('sol1').runAll;

model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('solvertype', 'none');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 300, 0);
model.result('pg2').set('defaultPlotID', 'TransientElectromagneticWaves/phys1/pdef1/pcond2/pg1');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solvertype', 'none');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solvertype', 'none');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solvertype', 'none');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solvertype', 'none');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solvertype', 'none');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').run;
model.result('pg2').label('Electric Field (ewt, FD)');
model.result('pg2').setIndex('looplevel', 151, 0);
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').run;
model.result('pg3').label('Electric Field (ewt, TD)');
model.result('pg3').set('data', 'dset2');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', 'ewt.Ez');
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 49, 0);
model.result('pg3').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('plotgroup', 'pg3');
model.result.export('anim1').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Transmittance');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').setIndex('expr', 'Pt/Pin', 0);
model.result('pg4').feature('glob1').setIndex('unit', '', 0);
model.result('pg4').feature('glob1').setIndex('descr', 'Transmittance (ewt)', 0);
model.result('pg4').run;
model.result('pg4').set('legendpos', 'lowerright');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Energy');
model.result('pg5').set('data', 'dset2');
model.result('pg5').set('showlegends', false);
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').setIndex('expr', 'intop3(ewt.W)', 0);
model.result('pg5').feature('glob1').setIndex('unit', 'J/m', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'Energy', 0);
model.result('pg5').run;
model.result('pg5').set('ylog', true);
model.result('pg5').set('axislimits', true);
model.result('pg5').set('ymin', '1e-30');
model.result('pg5').run;

model.physics('ewfd').prop('components').set('components', 'outofplane');
model.physics('ewfd').create('sctr1', 'Scattering', 1);
model.physics('ewfd').feature('sctr1').selection.set([1]);
model.physics('ewfd').feature('sctr1').set('IncidentField', 'EField');
model.physics('ewfd').feature('sctr1').set('E0i', {'0' '0' 'E0'});
model.physics('ewfd').create('sctr2', 'Scattering', 1);
model.physics('ewfd').feature('sctr2').selection.set([130]);
model.physics('ewfd').create('pmc1', 'PerfectMagneticConductor', 1);
model.physics('ewfd').feature('pmc1').selection.named('uni1');

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').set('plotgroup', 'Default');
model.study('std2').feature('freq').set('solnum', 'auto');
model.study('std2').feature('freq').set('notsolnum', 'auto');
model.study('std2').feature('freq').set('outputmap', {});
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').setSolveFor('/physics/ewt', false);
model.study('std2').feature('freq').setSolveFor('/physics/ewfd', true);
model.study('std2').feature('freq').set('plist', 'range(0.5*f0,deltaf,1.5*f0)');
model.study('std2').feature('freq').set('probesel', 'none');
model.study('std2').feature('freq').set('useadvanceddisable', true);
model.study('std2').feature('freq').set('disabledphysics', {'ewt'});

model.sol.create('sol4');
model.sol('sol4').study('std2');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std2');
model.sol('sol4').feature('st1').set('studystep', 'freq');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'freq');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').set('stol', 0.01);
model.sol('sol4').feature('s1').create('p1', 'Parametric');
model.sol('sol4').feature('s1').feature.remove('pDef');
model.sol('sol4').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol4').feature('s1').feature('p1').set('plistarr', {'range(0.5*f0,deltaf,1.5*f0)'});
model.sol('sol4').feature('s1').feature('p1').set('punit', {'THz'});
model.sol('sol4').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol4').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol4').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol4').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol4').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol4').feature('s1').feature('p1').set('probesel', 'none');
model.sol('sol4').feature('s1').feature('p1').set('probes', {'pdom1'});
model.sol('sol4').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol4').feature('s1').set('linpmethod', 'sol');
model.sol('sol4').feature('s1').set('linpsol', 'zero');
model.sol('sol4').feature('s1').set('control', 'freq');
model.sol('sol4').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol4').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol4').feature('s1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol4').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').attach('std2');
model.sol('sol4').runAll;

model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').label('Electric Field (ewfd)');
model.result('pg6').set('data', 'dset5');
model.result('pg6').setIndex('looplevel', 300, 0);
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('data', 'dset5');
model.result('pg6').setIndex('looplevel', 300, 0);
model.result('pg6').set('defaultPlotID', 'ElectromagneticWavesFrequencyDomain/phys1/pdef1/pcond2/pg1');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 151, 0);
model.result('pg6').run;
model.result('pg4').run;
model.result('pg4').create('glob2', 'Global');
model.result('pg4').feature('glob2').set('markerpos', 'datapoints');
model.result('pg4').feature('glob2').set('linewidth', 'preference');
model.result('pg4').feature('glob2').set('data', 'dset4');
model.result('pg4').feature('glob2').setIndex('expr', 'intop2(ewfd.nPoav)/intop1(0.5*E0^2/Z0_const*n0)', 0);
model.result('pg4').feature('glob2').setIndex('unit', 1, 0);
model.result('pg4').feature('glob2').setIndex('descr', 'Transmittance (ewfd)', 0);
model.result('pg4').run;
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').run;
model.result('pg7').set('titletype', 'none');
model.result('pg7').set('showlegends', false);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', '4');
model.result('pg7').feature('surf1').set('colortable', 'Cividis');
model.result('pg7').feature('surf1').create('sel1', 'Selection');
model.result('pg7').feature('surf1').feature('sel1').selection.set([1]);
model.result('pg7').run;
model.result('pg7').feature.duplicate('surf2', 'surf1');
model.result('pg7').run;
model.result('pg7').feature('surf2').set('expr', '2');
model.result('pg7').feature('surf2').set('inheritplot', 'surf1');
model.result('pg7').run;
model.result('pg7').feature('surf2').feature('sel1').selection.named('geom1_csel1_dom');
model.result('pg7').run;
model.result('pg7').feature.duplicate('surf3', 'surf2');
model.result('pg7').run;
model.result('pg7').feature('surf3').set('expr', '3');
model.result('pg7').run;
model.result('pg7').feature('surf3').feature('sel1').selection.named('geom1_csel2_dom');
model.result('pg7').run;
model.result('pg7').feature.duplicate('surf4', 'surf3');
model.result('pg7').run;
model.result('pg7').feature('surf4').set('expr', '1');
model.result('pg7').run;
model.result('pg7').feature('surf4').feature('sel1').selection.set([43]);
model.result('pg7').run;
model.result('pg7').create('ann1', 'Annotation');
model.result('pg7').feature('ann1').set('text', 'Superstrate');
model.result('pg7').feature('ann1').set('posxexpr', '-d0/2');
model.result('pg7').feature('ann1').set('posyexpr', 'lda0/2');
model.result('pg7').feature('ann1').set('showpoint', false);
model.result('pg7').feature('ann1').set('anchorpoint', 'center');
model.result('pg7').feature('ann1').set('orientation', 'vertical');
model.result('pg7').feature.duplicate('ann2', 'ann1');
model.result('pg7').run;
model.result('pg7').feature('ann2').set('text', 'Substrate');
model.result('pg7').feature('ann2').set('posxexpr', 'L_tot+ds/2');
model.result('pg7').feature.duplicate('ann3', 'ann2');
model.result('pg7').run;
model.result('pg7').feature('ann3').set('text', 'High-index');
model.result('pg7').feature('ann3').set('posxexpr', '2*dPeriod+dH/2');
model.result('pg7').feature.duplicate('ann4', 'ann3');
model.result('pg7').run;
model.result('pg7').feature('ann4').set('posxexpr', '3*dPeriod-dL/2');
model.result('pg7').feature('ann4').set('text', 'Low-index');
model.result('pg7').run;
model.result('pg7').feature('ann2').set('color', 'white');
model.result('pg7').run;
model.result('pg7').feature('ann3').set('color', 'white');
model.result('pg7').run;

model.view('view1').set('showgrid', false);

model.result('pg7').run;
model.result.remove('pg7');
model.result('pg2').run;

model.title('Time to Frequency FFT Analysis of a Distributed Bragg Reflector');

model.description(['This model demonstrates how to set up a Time to Frequency FFT study for a distributed Bragg reflector (DBR) structure. A modulated Gaussian input pulse excites the DBR structure. The time-domain solution is subsequently transformed to the frequency domain, using a fast Fourier transform (FFT).' newline  newline 'The results agree well with the results of a regular Frequency domain study.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('time_to_frequency_fft_distributed_bragg_reflector.mph');

model.modelNode.label('Components');

out = model;
