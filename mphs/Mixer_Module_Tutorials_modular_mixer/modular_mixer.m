function out = model
%
% modular_mixer.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Mixer_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.param.set('H', '0.0805[m]');
model.param.descr('H', 'Vessel height');
model.param.set('T', 'H');
model.param.descr('T', 'Vessel diameter');
model.param.set('C', '1/3*H');
model.param.descr('C', 'Clearance');
model.param.set('B', '4');
model.param.descr('B', 'Number of baffles');
model.param.set('bw', 'T/10');
model.param.descr('bw', 'Baffle width');
model.param.set('Da', '1/3*T');
model.param.descr('Da', 'Impeller diameter');
model.param.set('shaft_diameter', '1/10*Da');
model.param.descr('shaft_diameter', 'Shaft diameter');
model.param.set('blade_length', 'Da/4');
model.param.descr('blade_length', 'Blade length for Rushton turbine');
model.param.set('blade_width', 'Da/5');
model.param.descr('blade_width', 'Width of impeller blade');

model.geom.load({'part1'}, 'Mixer_Module/Impellers,_Radial/rushton_impeller.mph', {'part1'});
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'd_hu', 'shaft_diameter+Da/20');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'l_ib', 'blade_length');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'w_ib', 'blade_width');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'd_id', 'Da-2*(blade_length*3/4)');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'd_im', 'Da');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'hp_im', '-blade_width/2');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'd_is', 'shaft_diameter');
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Impeller Domains');
model.geom('geom1').feature('pi1').setEntry('selkeepobj', 'pi1_csel4', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetoobj', 'pi1_csel4', 'csel1');
model.geom('geom1').feature('pi1').setEntry('selkeepobj', 'pi1_csel6', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetoobj', 'pi1_csel6', 'none');
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Rotating Interior Wall');
model.geom('geom1').selection.create('csel3', 'CumulativeSelection');
model.geom('geom1').selection('csel3').label('Rotating Wall');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel1.bnd', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel1.bnd', 'csel2');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel2.bnd', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel2.bnd', 'csel2');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel3.bnd', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel3.bnd', 'csel3');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel10.bnd', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel10.bnd', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel7.bnd', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel7.bnd', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel8.bnd', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel8.bnd', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel9.bnd', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel9.bnd', 'none');
model.geom('geom1').selection.create('csel4', 'CumulativeSelection');
model.geom('geom1').selection('csel4').label('Remove Edges');
model.geom('geom1').feature('pi1').setEntry('selkeepedg', 'pi1_sel1', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetoedg', 'pi1_sel1', 'csel4');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', true);
model.geom.load({'part2'}, 'Mixer_Module/Shafts/impeller_shaft.mph', {'part1'});
model.geom('geom1').run('pi1');
model.geom('geom1').create('pi2', 'PartInstance');
model.geom('geom1').feature('pi2').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi2').set('part', 'part2');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'hp_im', '-blade_width/2');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'd_is', 'shaft_diameter');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'l_is', 'H-C+blade_width');
model.geom('geom1').feature('pi2').setEntry('selkeepobj', 'pi2_csel1', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetoobj', 'pi2_csel1', 'csel1');
model.geom('geom1').feature('pi2').setEntry('selkeepbnd', 'pi2_cylsel1', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetobnd', 'pi2_cylsel1', 'none');
model.geom('geom1').feature('pi2').setEntry('selkeepbnd', 'pi2_csel1.bnd', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetobnd', 'pi2_csel1.bnd', 'csel3');
model.geom('geom1').feature('pi2').setEntry('selkeepedg', 'pi2_sel1', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetoedg', 'pi2_sel1', 'csel4');
model.geom('geom1').feature('pi2').setEntry('selkeepedg', 'pi2_csel1.edg', false);
model.geom('geom1').feature('pi2').setEntry('selcontributetoedg', 'pi2_csel1.edg', 'none');
model.geom('geom1').feature('pi2').set('selkeepnoncontr', true);
model.geom('geom1').run('pi2');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'pi1' 'pi2'});
model.geom('geom1').feature('uni1').set('repairtoltype', 'relative');
model.geom.load({'part3'}, 'Mixer_Module/Tanks/flat_bottom_tank.mph', {'part1'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('pi3', 'PartInstance');
model.geom('geom1').feature('pi3').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi3').set('part', 'part3');
model.geom('geom1').feature('pi3').set('rot', 90);
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'n_ba', 'B');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'w_ba', 'bw');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'd_im', 'Da');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'd_ta', 'T');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'h_ta', 'H');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'hp_ta', '-C');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'rf_ta', 0);
model.geom('geom1').selection.create('csel5', 'CumulativeSelection');
model.geom('geom1').selection('csel5').label('Symmetry');
model.geom('geom1').selection.create('csel6', 'CumulativeSelection');
model.geom('geom1').selection('csel6').label('Interior Wall');
model.geom('geom1').selection.create('csel7', 'CumulativeSelection');
model.geom('geom1').selection('csel7').label('View suppression');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_unisel2', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_unisel2', 'none');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_csel1.bnd', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_csel1.bnd', 'csel5');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_csel2.bnd', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_csel2.bnd', 'none');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_csel4.bnd', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_csel4.bnd', 'csel6');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_csel5.bnd', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_csel5.bnd', 'none');
model.geom('geom1').feature('pi3').setEntry('selkeepbnd', 'pi3_csel7.bnd', false);
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_csel7.bnd', 'csel7');
model.geom('geom1').feature('pi3').set('selkeepnoncontr', true);
model.geom('geom1').run('pi3');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').label('Fluid Domain');
model.geom('geom1').feature('dif1').selection('input').named('pi3_csel5');
model.geom('geom1').feature('dif1').selection('input2').named('csel1');
model.geom('geom1').feature('dif1').set('repairtoltype', 'relative');
model.geom('geom1').feature('dif1').set('selresult', true);
model.geom('geom1').feature('dif1').set('selresultshow', 'all');
model.geom('geom1').run('dif1');
model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').label('Flat Pressure Point');
model.geom('geom1').feature('sel1').selection('selection').init(0);
model.geom('geom1').feature('sel1').selection('selection').set('dif1', 34);
model.geom('geom1').selection.create('csel8', 'CumulativeSelection');
model.geom('geom1').selection('csel8').label('Pressure Point Constraint');
model.geom('geom1').feature('sel1').set('contributeto', 'csel8');
model.geom('geom1').run('sel1');
model.geom('geom1').create('sel2', 'ExplicitSelection');
model.geom('geom1').feature('sel2').label('Edges to Remove');
model.geom('geom1').feature('sel2').selection('selection').init(1);
model.geom('geom1').feature('sel2').selection('selection').set('dif1', [9 61 78 79]);

model.view('view1').set('renderwireframe', false);

model.geom('geom1').feature('sel2').set('contributeto', 'csel4');
model.geom('geom1').run('sel2');
model.geom('geom1').create('sel3', 'ExplicitSelection');
model.geom('geom1').feature('sel3').selection('selection').set('dif1', 2);
model.geom('geom1').feature('sel3').label('Rotating Fluid Domain');
model.geom('geom1').run('fin');
model.geom('geom1').create('ige1', 'IgnoreEdges');
model.geom('geom1').feature('ige1').selection('input').named('csel4');
model.geom('geom1').feature('ige1').set('ignorevtx', false);
model.geom('geom1').run('ige1');

model.title(['Laminar Modular Mixer ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Template File']);

model.description('This example is a template MPH-file used by the laminar case of the Modular Mixer models. The geometry is a combination of a Rushton impeller and a flat bottom tank. The geometry subsequences to build the impeller and vessel are imported from the Part Libraries.');

model.label('modular_mixer_geom.mph');

model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');

model.common.create('rot1', 'RotatingDomain', 'comp1');
model.common('rot1').set('rotationType', 'rotationalVelocity');
model.common('rot1').set('rotationalVelocityExpression', 'generalRevolutionsPerTime');
model.common('rot1').selection.all;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').set('density', {'972'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', {'1'});
model.material('mat1').label('Silicone oil Si1000');

model.common('rot1').selection.named('geom1_sel3');
model.common('rot1').set('revolutionsPerTime', 40);

model.physics('spf').create('iwbc1', 'InteriorWallBC', 2);
model.physics('spf').feature('iwbc1').selection.named('geom1_csel6_bnd');
model.physics('spf').create('iwbc2', 'InteriorWallBC', 2);
model.physics('spf').feature('iwbc2').selection.named('geom1_csel2_bnd');
model.physics('spf').create('sym1', 'Symmetry', 2);
model.physics('spf').feature('sym1').selection.named('geom1_csel5_bnd');
model.physics('spf').create('prpc1', 'PressurePointConstraint', 0);
model.physics('spf').feature('prpc1').selection.named('geom1_csel8_pnt');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('tau_riw', 'x*(spf.T_stress_uy+spf.T_stress_dy)-y*(spf.T_stress_ux+spf.T_stress_dx)');
model.variable('var1').descr('tau_riw', 'Torque per area (interior walls)');
model.variable('var1').set('tau_rw', 'x*(spf.T_stressy)-y*(spf.T_stressx)');
model.variable('var1').descr('tau_rw', 'Torque per area (rotating walls)');
model.variable('var1').set('P_riw', 'tau_riw*rot1.alphat');
model.variable('var1').descr('P_riw', 'Power draw per area (rotating interior walls)');
model.variable('var1').set('P_rw', 'tau_rw*rot1.alphat');
model.variable('var1').descr('P_rw', 'Power draw per area (rotating walls)');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.named('geom1_csel2_bnd');
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').selection.geom('geom1', 2);
model.cpl('intop2').selection.named('geom1_csel3_bnd');

model.mesh('mesh1').run;

model.study.create('std1');
model.study('std1').create('frrot', 'FrozenRotor');
model.study('std1').feature('frrot').set('solnum', 'auto');
model.study('std1').feature('frrot').set('notsolnum', 'auto');
model.study('std1').feature('frrot').set('outputmap', {});
model.study('std1').feature('frrot').set('ngenAUX', '1');
model.study('std1').feature('frrot').set('goalngenAUX', '1');
model.study('std1').feature('frrot').set('ngenAUX', '1');
model.study('std1').feature('frrot').set('goalngenAUX', '1');
model.study('std1').feature('frrot').setSolveFor('/physics/spf', true);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'frrot');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'frrot');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('s1').feature('fc1').set('damp', 0.8);
model.sol('sol1').feature('s1').feature('fc1').set('stabacc', 'cflcmp');
model.sol('sol1').feature('s1').feature('fc1').set('initcfl', 5);
model.sol('sol1').feature('s1').feature('fc1').set('mincfl', 10000);
model.sol('sol1').feature('s1').feature('fc1').set('kppid', 0.65);
model.sol('sol1').feature('s1').feature('fc1').set('kdpid', 0.15);
model.sol('sol1').feature('s1').feature('fc1').set('kipid', 0.15);
model.sol('sol1').feature('s1').feature('fc1').set('cfltol', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('cflaa', true);
model.sol('sol1').feature('s1').feature('fc1').set('cflaacfl', 9000);
model.sol('sol1').feature('s1').feature('fc1').set('cflaafact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 150);
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables ()');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables ()');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('s1').feature('fc1').set('damp', 0.8);
model.sol('sol1').feature('s1').feature('fc1').set('stabacc', 'cflcmp');
model.sol('sol1').feature('s1').feature('fc1').set('initcfl', 5);
model.sol('sol1').feature('s1').feature('fc1').set('mincfl', 10000);
model.sol('sol1').feature('s1').feature('fc1').set('kppid', 0.65);
model.sol('sol1').feature('s1').feature('fc1').set('kdpid', 0.15);
model.sol('sol1').feature('s1').feature('fc1').set('kipid', 0.15);
model.sol('sol1').feature('s1').feature('fc1').set('cfltol', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('cflaa', true);
model.sol('sol1').feature('s1').feature('fc1').set('cflaacfl', 9000);
model.sol('sol1').feature('s1').feature('fc1').set('cflaafact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 150);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Velocity (spf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('slc1', 'Slice');
model.result('pg1').feature('slc1').label('Slice');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('smooth', 'internal');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('All Walls');
model.result.dataset('surf1').set('data', 'none');
model.result.dataset.create('surf2', 'Surface');
model.result.dataset('surf2').label('Exterior Walls');
model.result.dataset('surf2').set('data', 'none');
model.result.dataset.create('surf3', 'Surface');
model.result.dataset('surf3').label('Interior Walls');
model.result.dataset('surf3').set('data', 'none');
model.result.dataset('surf2').set('data', 'dset1');
model.result.dataset('surf2').selection.geom('geom1', 2);
model.result.dataset('surf2').selection.set([2 3 4 17 18 19 20 21 22 24 34]);
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([1 2 3 4 13 14 15 16 17 18 19 20 21 22 23 24 33 34 35 36 37 38]);
model.result.dataset('surf3').set('data', 'dset1');
model.result.dataset('surf3').selection.geom('geom1', 2);
model.result.dataset('surf3').selection.set([1 13 14 15 16 23 33 35 36 37 38]);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Pressure (spf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond2/pcond2/pg4');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('data', 'surf2');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('expr', 'p');
model.result('pg2').feature('surf1').set('colortable', 'Dipole');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'surf2');
model.result('pg2').feature('surf1').feature.create('tran1', 'Transparency');
model.result('pg2').feature.create('slit1', 'SurfaceSlit');
model.result('pg2').feature('slit1').set('data', 'surf3');
model.result('pg2').feature('slit1').set('showsolutionparams', 'on');
model.result('pg2').feature('slit1').set('upexpr', 'up(p)');
model.result('pg2').feature('slit1').set('downexpr', 'down(p)');
model.result('pg2').feature('slit1').set('titletype', 'none');
model.result('pg2').feature('slit1').set('smooth', 'internal');
model.result('pg2').feature('slit1').set('showsolutionparams', 'on');
model.result('pg2').feature('slit1').set('data', 'surf3');
model.result('pg2').feature('slit1').set('inheritplot', 'surf1');
model.result('pg1').run;
model.result.dataset.create('cpl1', 'CutPlane');
model.result.dataset('cpl1').set('quickplane', 'xz');
model.result.dataset.create('cpl2', 'CutPlane');
model.result.dataset.create('ps1', 'ParSurface');
model.result.dataset('ps1').set('parmax1', '2*pi');
model.result.dataset('ps1').set('parmin2', '-Da/10');
model.result.dataset('ps1').set('parmax2', 'Da/10');
model.result.dataset('ps1').set('exprx', '0.186*T*cos(s1)');
model.result.dataset('ps1').set('expry', '0.186*T*sin(s1)');
model.result.dataset('ps1').set('exprz', 's2');
model.result('pg2').run;
model.result('pg2').label('Velocity: Magnitude and Vectors');
model.result('pg2').set('data', 'surf1');
model.result('pg2').run;
model.result('pg2').feature('surf1').set('coloring', 'uniform');
model.result('pg2').feature('surf1').set('color', 'gray');
model.result('pg2').run;
model.result('pg2').feature('surf1').feature.remove('tran1');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature.remove('slit1');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').create('surf2', 'Surface');
model.result('pg2').feature('surf2').set('data', 'cpl1');
model.result('pg2').feature('surf2').set('colortable', 'RainbowLight');
model.result('pg2').run;
model.result('pg2').create('arws1', 'ArrowSurface');
model.result('pg2').feature('arws1').set('data', 'cpl2');
model.result('pg2').feature('arws1').set('expr', {'0' 'v' 'w'});
model.result('pg2').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg2').feature('arws1').set('scaleactive', true);
model.result('pg2').feature('arws1').set('scale', 0.005);
model.result('pg2').feature('arws1').set('arrowcount', 1000);
model.result('pg2').feature('arws1').set('color', 'white');
model.result('pg2').run;
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Velocity: magnitude and in-plane vectors');
model.result('pg2').run;

model.view.create('view5', 'geom1');
model.view('view5').model('comp1');

model.result('pg2').run;

model.view('view5').hideEntities.create('hide1');
model.view('view5').hideEntities('hide1').geom('geom1', 2);
model.view('view5').hideEntities('hide1').named('geom1_csel7_bnd');
model.view('view5').set('locked', true);
model.view('view5').camera.set('zoomanglefull', 13.55522);
model.view('view5').camera.setIndex('position', 0.58997, 0);
model.view('view5').camera.setIndex('position', -0.40945, 1);
model.view('view5').camera.setIndex('position', 0.15525, 2);
model.view('view5').camera.set('target', [0 0 0.01342]);
model.view('view5').camera.setIndex('up', -0.16435, 0);
model.view('view5').camera.setIndex('up', 0.103, 1);
model.view('view5').camera.setIndex('up', 0.98101, 2);
model.view('view5').camera.set('rotationpoint', [0 0 0.01342]);
model.view('view5').camera.setIndex('viewoffset', -0.08, 0);
model.view('view5').camera.set('viewoffset', [-0.08 0]);

model.result('pg2').run;
model.result('pg2').set('view', 'view5');
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Torque');
model.result.numerical('gev1').setIndex('expr', 'abs(intop1(tau_riw)+intop2(tau_rw))', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Torque');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').label('Power Draw');
model.result.numerical('gev2').setIndex('expr', 'abs(intop1(P_riw)+intop2(P_rw))', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Power Draw');
model.result.numerical('gev2').set('table', 'tbl2');
model.result.numerical('gev2').setResult;
model.result.numerical.create('int1', 'IntSurface');
model.result.numerical('int1').set('intvolume', true);
model.result.numerical('int1').label('Flow Number');
model.result.numerical('int1').set('data', 'ps1');
model.result.numerical('int1').setIndex('expr', '(u*cos(s1)+v*sin(s1))/40[1/s]/Da^3', 0);
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').comments('Flow Number');
model.result.numerical('int1').set('table', 'tbl3');
model.result.numerical('int1').setResult;
model.result('pg2').run;

model.title('Modular Mixer');

model.description(['This example is built from a supplied geometry model file which contains geometry parts to build baffled flat and dished bottom mixers with either a pitched blade impeller or a Rushton turbine. The model features a simulation of laminar mixing in a flat bottom vessel with a Rushton turbine.' newline  newline 'The examples use the Frozen Rotor simulation method, for which the rotating parts are kept frozen in position together with the vessel wall and baffles, and the rotation is accounted for by the inclusion of centrifugal and Coriolis forces.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('modular_mixer.mph');

model.modelNode.label('Components');

out = model;
