function out = model
%
% sports_car_fsi.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Fluid-Structure_Interaction');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'LESRBVM', 'geom1');
model.physics('spf').model('comp1');
model.physics.create('ipf', 'IncompressiblePotentialFlow', 'geom1');
model.physics('ipf').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/physics/ipf', true);

model.param.set('U0', '50[m/s]');
model.param.descr('U0', 'Car velocity');
model.param.set('R_w', '0.33[m]');
model.param.descr('R_w', 'Wheel radius');
model.param.set('L_wb', '103.1[in]');
model.param.descr('L_wb', 'Length, wheel base');
model.param.set('x_w', '40.4[in]');
model.param.descr('x_w', 'Position, front wheel');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').set('Uwx', '-U0*(z/R_w-1)*(1-exp(-(z-0.01[m])/0.0025[m]))+U0*exp(-(z-0.01[m])/0.0025[m])');
model.variable('var1').descr('Uwx', 'Tire velocity, x-component');
model.variable('var1').set('Uwz_front', 'U0*(x-x_w)/R_w*(1-exp(-(z-0.01[m])/0.0025[m]))');
model.variable('var1').descr('Uwz_front', 'Front tire velocity,z-component');
model.variable('var1').set('Uwz_rear', 'U0*(x-x_w-L_wb)/R_w*(1-exp(-(z-0.01[m])/0.0025[m]))');
model.variable('var1').descr('Uwz_rear', 'Rear tire velocity,z-component');

model.geom('geom1').geomRep('cadps');
model.geom('geom1').insertFile('sports_car_geom_sequence.mph', 'geom1');
model.geom('geom1').run('difsel3');

model.view('view1').set('renderwireframe', true);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('spf').prop('TurbulenceModelProperty').set('LESWallTreatment', 'Automatic');
model.physics('spf').selection.set([1]);
model.physics('spf').create('inl1', 'InletBoundary', 2);
model.physics('spf').feature('inl1').selection.set([1]);
model.physics('spf').feature('inl1').set('U0in', 'U0');
model.physics('spf').create('out1', 'OutletBoundary', 2);
model.physics('spf').feature('out1').selection.set([261]);
model.physics('spf').create('wallbc2', 'WallBC', 2);
model.physics('spf').feature('wallbc2').selection.set([2 4 5]);
model.physics('spf').feature('wallbc2').set('BoundaryCondition', 'Slip');
model.physics('spf').create('wallbc3', 'WallBC', 2);
model.physics('spf').feature('wallbc3').selection.set([3]);
model.physics('spf').feature('wallbc3').set('SlidingWall', true);
model.physics('spf').feature('wallbc3').set('uvwwall', {'U0' '0' '0'});
model.physics('spf').create('wallbc4', 'WallBC', 2);
model.physics('spf').feature('wallbc4').selection.named('geom1_adjsel2');
model.physics('spf').feature('wallbc4').set('TranslationalVelocityOption', 'Manual');
model.physics('spf').feature('wallbc4').set('utr', {'Uwx' '0' 'Uwz_front'});
model.physics('spf').feature.duplicate('wallbc5', 'wallbc4');
model.physics('spf').feature('wallbc5').selection.named('geom1_adjsel3');
model.physics('spf').feature('wallbc5').set('utr', {'Uwx' '0' 'Uwz_rear'});
model.physics('ipf').prop('PressureProperty').set('UScale', 'U0');
model.physics('ipf').prop('ShapeProperty').set('order_velocitypotential', 1);
model.physics('ipf').create('velbc1', 'Velocity', 2);
model.physics('ipf').feature('velbc1').selection.set([1]);
model.physics('ipf').feature('velbc1').set('Uin', 'U0');
model.physics('ipf').create('open1', 'OpenBoundary', 2);
model.physics('ipf').feature('open1').selection.set([261]);

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 0.5);
model.mesh('mesh1').feature('size').set('hmin', 0.05);
model.mesh('mesh1').feature('size').set('hgrad', 1.11);
model.mesh('mesh1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('size1').set('hmax', 0.3);
model.mesh('mesh1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('size1').set('hmin', 0.05);
model.mesh('mesh1').feature('bl1').feature('blp1').set('blnlayers', 5);
model.mesh('mesh1').feature('bl1').feature('blp1').set('blhminfact', 2.5);

model.study('std1').feature('stat').setEntry('activate', 'spf', false);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_phi'});
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, potential flow (ipf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Velocity Potential');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_uPhi'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 1);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, smoothed velocity from potential flow (ipf)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'i2');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Smoothed Velocity from Potential Flow');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, potential flow (ipf)');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Velocity from Potential Flow Solution (ipf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'potential_flow/IncompressiblePotentialFlow_ResultDefaults/icom1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('slc1', 'Slice');
model.result('pg1').feature('slc1').label('Slice');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('expr', 'ipf.U');
model.result('pg1').feature('slc1').set('smooth', 'internal');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').label('Potential flow');
model.result('pg1').set('edges', false);
model.result('pg1').run;
model.result('pg1').feature('slc1').set('quickplane', 'zx');
model.result('pg1').feature('slc1').set('quickynumber', 1);
model.result('pg1').run;
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', '1');
model.result('pg1').feature('surf1').set('coloring', 'uniform');
model.result('pg1').feature('surf1').set('color', 'gray');
model.result('pg1').feature('surf1').set('titletype', 'none');
model.result('pg1').feature('surf1').create('sel1', 'Selection');
model.result('pg1').feature('surf1').feature('sel1').selection.named('geom1_sel19');
model.result('pg1').run;
model.result('pg1').feature('slc1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg1').feature('slc1').set('colortabletrans', 'reverse');
model.result('pg1').feature('slc1').set('rangecoloractive', true);
model.result('pg1').feature('slc1').set('rangecolormin', 0);
model.result('pg1').feature('slc1').set('rangecolormax', 50);
model.result('pg1').feature('slc1').create('tran1', 'Transparency');
model.result('pg1').run;
model.result('pg1').run;

model.physics.create('spf2', 'TurbulentFlowkeps', 'geom1');
model.physics('spf2').model('comp1');

model.study('std1').feature('stat').setSolveFor('/physics/spf2', true);

model.physics('spf2').selection.set([1]);
model.physics('spf2').feature.copy('inl1', 'spf/inl1');
model.physics('spf2').feature.copy('out1', 'spf/out1');
model.physics('spf2').feature.copy('wallbc2', 'spf/wallbc2');
model.physics('spf2').feature.copy('wallbc3', 'spf/wallbc3');
model.physics('spf2').feature.copy('wallbc4', 'spf/wallbc4');
model.physics('spf2').feature.copy('wallbc5', 'spf/wallbc5');
model.physics('spf2').feature('init1').set('u_init', {'ipf.u' 'ipf.v' 'ipf.w'});
model.physics('spf2').feature('init1').set('p_init', 'ipf.p');

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/spf', false);
model.study('std2').feature('stat').setSolveFor('/physics/ipf', false);
model.study('std2').feature('stat').setSolveFor('/physics/spf2', true);
model.study('std2').feature('stat').set('useinitsol', true);
model.study('std2').feature('stat').set('initstudy', 'std1');
model.study('std2').feature('stat').set('usesol', true);
model.study('std2').feature('stat').set('notsolmethod', 'sol');
model.study('std2').feature('stat').set('notstudy', 'std1');

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('se1', 'Segregated');
model.sol('sol2').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_p2' 'comp1_u2'});
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol2').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('s1').feature('i1').label('AMG, fluid flow variables (spf2)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').label('Velocity U2, Pressure P2');
model.sol('sol2').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_k2' 'comp1_ep2'});
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.45);
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('subiter', 3);
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol2').feature('s1').create('i2', 'Iterative');
model.sol('sol2').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol2').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol2').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol2').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol2').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol2').feature('s1').feature('i2').label('AMG, turbulence variables (spf2)');
model.sol('sol2').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 0);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('linsolver', 'i2');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').label('Turbulence Variables');
model.sol('sol2').feature('s1').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol2').feature('s1').feature('se1').set('subinitcfl', 3);
model.sol('sol2').feature('s1').feature('se1').set('submincfl', 10000);
model.sol('sol2').feature('s1').feature('se1').set('subkppid', 0.65);
model.sol('sol2').feature('s1').feature('se1').set('subkdpid', 0.15);
model.sol('sol2').feature('s1').feature('se1').set('subkipid', 0.15);
model.sol('sol2').feature('s1').feature('se1').set('subcfltol', 0.5);
model.sol('sol2').feature('s1').feature('se1').set('segcflaa', true);
model.sol('sol2').feature('s1').feature('se1').set('segcflaacfl', 9000);
model.sol('sol2').feature('s1').feature('se1').set('segcflaafact', 1);
model.sol('sol2').feature('s1').feature('se1').set('maxsegiter', 400);
model.sol('sol2').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol2').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.k2 0 comp1.ep2 0 ');
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('d1').label('Direct, fluid flow variables (spf2)');
model.sol('sol2').feature('s1').create('d2', 'Direct');
model.sol('sol2').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('d2').label('Direct, turbulence variables (spf2)');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.dataset('dset2').set('geom', 'geom1');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (spf2)');
model.result('pg2').set('data', 'dset2');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset2');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg2').feature.create('slc1', 'Slice');
model.result('pg2').feature('slc1').label('Slice');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('expr', 'spf2.U');
model.result('pg2').feature('slc1').set('smooth', 'internal');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset2');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260]);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Pressure (spf2)');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond1/pg4');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'p2');
model.result('pg3').feature('surf1').set('colortable', 'Dipole');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature('surf1').feature.create('tran1', 'Transparency');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Wall Resolution (spf2)');
model.result('pg4').set('data', 'surf1');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'surf1');
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond1/pg3');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Wall Resolution');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('expr', 'spf2.Delta_wPlus');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('slc1').set('quickplane', 'zx');
model.result('pg2').feature('slc1').set('quickynumber', 1);
model.result('pg2').feature('slc1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg2').feature('slc1').set('colortabletrans', 'reverse');
model.result('pg2').feature('slc1').set('rangecoloractive', true);
model.result('pg2').feature('slc1').set('rangecolormin', 0);
model.result('pg2').feature('slc1').set('rangecolormax', 50);
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').set('edges', false);
model.result('pg2').feature.copy('surf1', 'pg1/surf1');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('slc1').create('tran1', 'Transparency');
model.result('pg2').run;
model.result('pg2').run;

model.mesh.duplicate('mesh2', 'mesh1');
model.mesh('mesh2').feature('size').set('hmin', 0.06);
model.mesh('mesh2').feature('size').set('hgrad', 1.13);
model.mesh('mesh2').feature('size').set('hcurve', 0.5);
model.mesh('mesh2').feature('size').set('hnarrow', 0.8);
model.mesh('mesh2').feature('size1').set('hgradactive', true);
model.mesh('mesh2').feature('size1').set('hcurveactive', true);
model.mesh('mesh2').feature('size1').set('hnarrowactive', true);
model.mesh('mesh2').feature('size1').set('hmin', 0.1);
model.mesh('mesh2').feature('size1').set('hgrad', 1.13);
model.mesh('mesh2').feature('size1').set('hcurve', 0.5);
model.mesh('mesh2').feature('size1').set('hnarrow', 0.8);
model.mesh('mesh2').create('size2', 'Size');
model.mesh('mesh2').feature.move('size2', 2);
model.mesh('mesh2').feature('size2').selection.geom('geom1', 2);
model.mesh('mesh2').feature('size2').selection.named('geom1_sel19');
model.mesh('mesh2').feature('size2').set('table', 'cfd');
model.mesh('mesh2').feature('size2').set('hauto', 2);
model.mesh('mesh2').feature('size2').set('custom', true);
model.mesh('mesh2').feature('size2').set('hmaxactive', true);
model.mesh('mesh2').feature('size2').set('hmax', 0.15);
model.mesh('mesh2').feature('size2').set('hminactive', true);
model.mesh('mesh2').feature('size2').set('hmin', 0.08);
model.mesh('mesh2').feature('size2').set('hgradactive', true);
model.mesh('mesh2').feature('size2').set('hgrad', 1.1);
model.mesh('mesh2').feature('size2').set('hcurveactive', true);
model.mesh('mesh2').feature('size2').set('hcurve', 0.4);
model.mesh('mesh2').feature('size2').set('hnarrowactive', true);
model.mesh('mesh2').feature('size2').set('hnarrow', 0.9);
model.mesh('mesh2').feature('bl1').feature('blp1').set('blnlayers', 8);
model.mesh('mesh2').feature('bl1').feature('blp1').set('inittype', 'blhmin');
model.mesh('mesh2').feature('bl1').feature('blp1').set('blhmin', 0.003);

model.physics('spf').feature('init1').set('u_init', {'u2' 'v2' 'w2'});
model.physics('spf').feature('init1').set('p_init', 'p2');

model.study.create('std3');
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').setSolveFor('/physics/spf', true);
model.study('std3').feature('time').setSolveFor('/physics/ipf', false);
model.study('std3').feature('time').setSolveFor('/physics/spf2', false);
model.study('std3').feature('time').set('useinitsol', true);
model.study('std3').feature('time').set('initstudy', 'std2');
model.study('std3').feature('time').set('usesol', true);
model.study('std3').feature('time').set('notsolmethod', 'sol');
model.study('std3').feature('time').set('notstudy', 'std2');
model.study('std3').feature('time').set('tlist', 'range(0,0.1,0.6), range(0.6,0.002,0.7)');

model.sol.create('sol3');

model.mesh('mesh2').stat.selection.geom(3);
model.mesh('mesh2').stat.selection.set([1]);
model.mesh('mesh2').stat.selection.geom(3);
model.mesh('mesh2').stat.selection.set([1]);

model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'time');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'time');
model.sol('sol3').create('t1', 'Time');
model.sol('sol3').feature('t1').set('tlist', 'range(0,0.1,0.6), range(0.6,0.002,0.7)');
model.sol('sol3').feature('t1').set('plot', 'off');
model.sol('sol3').feature('t1').set('plotgroup', 'pg1');
model.sol('sol3').feature('t1').set('plotfreq', 'tout');
model.sol('sol3').feature('t1').set('probesel', 'all');
model.sol('sol3').feature('t1').set('probes', {});
model.sol('sol3').feature('t1').set('probefreq', 'tsteps');
model.sol('sol3').feature('t1').set('rtol', 0.005);
model.sol('sol3').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol3').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('atolmethod', {'comp1_ep2' 'global' 'comp1_k2' 'global' 'comp1_p' 'scaled' 'comp1_p2' 'global' 'comp1_phi' 'global'  ...
'comp1_u' 'global' 'comp1_u2' 'global' 'comp1_uPhi' 'global'});
model.sol('sol3').feature('t1').set('atolvaluemethod', {'comp1_ep2' 'factor' 'comp1_k2' 'factor' 'comp1_p' 'factor' 'comp1_p2' 'factor' 'comp1_phi' 'factor'  ...
'comp1_u' 'factor' 'comp1_u2' 'factor' 'comp1_uPhi' 'factor'});
model.sol('sol3').feature('t1').set('atolfactor', {'comp1_ep2' '0.1' 'comp1_k2' '0.1' 'comp1_p' '1' 'comp1_p2' '0.1' 'comp1_phi' '0.1'  ...
'comp1_u' '0.1' 'comp1_u2' '0.1' 'comp1_uPhi' '0.1'});
model.sol('sol3').feature('t1').set('reacf', true);
model.sol('sol3').feature('t1').set('storeudot', true);
model.sol('sol3').feature('t1').set('endtimeinterpolation', true);
model.sol('sol3').feature('t1').set('timemethod', 'genalpha');
model.sol('sol3').feature('t1').set('estrat', 'exclude');
model.sol('sol3').feature('t1').set('rhoinf', 0.5);
model.sol('sol3').feature('t1').set('predictor', 'constant');
model.sol('sol3').feature('t1').set('maxorder', 2);
model.sol('sol3').feature('t1').set('stabcntrl', true);
model.sol('sol3').feature('t1').set('maxstepconstraintgenalpha', 'expr');
model.sol('sol3').feature('t1').set('maxstepexpressiongenalpha', 'comp1.spf.dt_CFL');
model.sol('sol3').feature('t1').set('bwinitstepfrac', '0.01');
model.sol('sol3').feature('t1').set('control', 'time');
model.sol('sol3').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol3').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol3').feature('t1').feature('fc1').set('ntolfact', 0.5);
model.sol('sol3').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol3').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol3').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol3').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol3').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol3').feature('t1').create('i1', 'Iterative');
model.sol('sol3').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol3').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol3').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol3').feature('t1').feature('i1').set('maxlinit', 100);
model.sol('sol3').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol3').feature('t1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol3').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').create('d1', 'Direct');
model.sol('sol3').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('t1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol3').feature('t1').feature('fc1').set('linsolver', 'i1');
model.sol('sol3').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol3').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol3').feature('t1').feature('fc1').set('ntolfact', 0.5);
model.sol('sol3').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol3').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol3').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol3').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol3').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol3').feature('t1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').feature('t1').set('maxstepexpressiongenalpha', '3e-5');
model.sol('sol3').runAll;

model.result.dataset('dset3').set('geom', 'geom1');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Velocity (spf)');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 58, 0);
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 58, 0);
model.result('pg5').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg5').feature.create('slc1', 'Slice');
model.result('pg5').feature('slc1').label('Slice');
model.result('pg5').feature('slc1').set('showsolutionparams', 'on');
model.result('pg5').feature('slc1').set('smooth', 'internal');
model.result('pg5').feature('slc1').set('showsolutionparams', 'on');
model.result('pg5').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf2', 'Surface');
model.result.dataset('surf2').label('Exterior Walls 1');
model.result.dataset('surf2').set('data', 'dset3');
model.result.dataset('surf2').selection.geom('geom1', 2);
model.result.dataset('surf2').selection.set([2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260]);
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Pressure (spf)');
model.result('pg6').set('data', 'surf2');
model.result('pg6').setIndex('looplevel', 58, 0);
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('data', 'surf2');
model.result('pg6').setIndex('looplevel', 58, 0);
model.result('pg6').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond4/pcond1/pg4');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').label('Surface');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('expr', 'p');
model.result('pg6').feature('surf1').set('colortable', 'Dipole');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result('pg6').feature('surf1').feature.create('tran1', 'Transparency');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').label('Wall Resolution (spf)');
model.result('pg7').set('data', 'dset3');
model.result('pg7').setIndex('looplevel', 58, 0);
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').set('data', 'dset3');
model.result('pg7').setIndex('looplevel', 58, 0);
model.result('pg7').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond4/pcond1/pg3');
model.result('pg7').feature.create('surf1', 'Surface');
model.result('pg7').feature('surf1').label('Wall Resolution');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('expr', 'spf.WRHeightExpr');
model.result('pg7').feature('surf1').set('smooth', 'internal');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('data', 'parent');
model.result('pg5').run;
model.result.setOnlyPlotWhenRequested(true);
model.result('pg5').feature('slc1').set('quickplane', 'zx');
model.result('pg5').feature('slc1').set('quickynumber', 1);
model.result('pg5').feature('slc1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg5').feature('slc1').set('colortabletrans', 'reverse');
model.result('pg5').feature('slc1').set('rangecoloractive', true);
model.result('pg5').feature('slc1').set('rangecolormin', 0);
model.result('pg5').feature('slc1').set('rangecolormax', 50);
model.result('pg5').feature('slc1').create('tran1', 'Transparency');
model.result('pg5').set('edges', false);
model.result('pg5').feature.copy('surf1', 'pg2/surf1');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'dset3');
model.result('pg8').label('Car with velocity slices');
model.result('pg8').create('slc1', 'Slice');
model.result('pg8').feature('slc1').set('quickplane', 'zx');
model.result('pg8').feature('slc1').set('quickynumber', 1);
model.result('pg8').feature('slc1').set('colortable', 'JupiterAuroraBorealis');
model.result('pg8').feature.duplicate('slc2', 'slc1');
model.result('pg8').feature('slc2').set('quickplane', 'xy');
model.result('pg8').feature('slc2').set('quickzmethod', 'coord');
model.result('pg8').feature('slc2').set('quickz', '.05');
model.result('pg8').feature('slc2').set('inheritplot', 'slc1');
model.result('pg8').run;
model.result('pg8').feature('slc1').create('tran1', 'Transparency');
model.result('pg8').feature('slc2').set('titletype', 'none');
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').label('Tires');
model.result('pg8').feature('surf1').set('expr', '1');
model.result('pg8').feature('surf1').set('titletype', 'none');
model.result('pg8').feature('surf1').create('sel1', 'Selection');
model.result('pg8').feature('surf1').feature('sel1').selection.named('geom1_sel15');
model.result('pg8').feature('surf1').create('mtrl1', 'MaterialAppearance');
model.result('pg8').feature('surf1').feature('mtrl1').set('appearance', 'custom');
model.result('pg8').feature('surf1').feature('mtrl1').set('family', 'rubber');
model.result('pg8').feature('surf1').feature('mtrl1').set('color', 'black');
model.result('pg8').set('edges', false);
model.result('pg8').create('surf2', 'Surface');
model.result('pg8').feature('surf2').label('Wheel Bays');
model.result('pg8').feature('surf2').set('titletype', 'none');
model.result('pg8').feature('surf2').create('sel1', 'Selection');
model.result('pg8').feature('surf2').feature('sel1').selection.named('geom1_sel7');
model.result('pg8').feature('surf2').set('coloring', 'uniform');
model.result('pg8').feature('surf2').set('color', 'custom');
model.result('pg8').feature('surf2').set('customcolor', [0.32549020648002625 0.3294117748737335 0.41960784792900085]);
model.result('pg8').feature.duplicate('surf3', 'surf1');
model.result('pg8').feature('surf3').label('Windows');
model.result('pg8').feature('surf3').feature('sel1').selection.named('geom1_sel11');
model.result('pg8').feature('surf3').feature('mtrl1').set('family', 'water');
model.result('pg8').feature.duplicate('surf4', 'surf3');
model.result('pg8').feature('surf4').label('Headlights');
model.result('pg8').feature('surf4').feature('sel1').selection.named('geom1_sel9');
model.result('pg8').feature('surf4').feature('mtrl1').set('family', 'plasticshiny');
model.result('pg8').feature('surf4').feature('mtrl1').set('color', 'white');
model.result('pg8').feature.duplicate('surf5', 'surf4');
model.result('pg8').feature('surf5').label('Rims');
model.result('pg8').feature('surf5').feature('sel1').selection.named('geom1_unisel1');
model.result('pg8').feature('surf5').feature('mtrl1').set('family', 'rosegold');
model.result('pg8').feature.duplicate('surf6', 'surf5');
model.result('pg8').feature('surf6').label('Body');
model.result('pg8').feature('surf6').feature('sel1').selection.named('geom1_difsel3');

model.view('view1').set('ssao', true);
model.view('view1').set('environmentmap', 'envmap_meadow');

model.result('pg8').feature.duplicate('surf7', 'surf6');
model.result('pg8').feature('surf7').label('Rear Lights');
model.result('pg8').feature('surf7').feature('sel1').selection.named('geom1_sel10');
model.result('pg8').feature('surf7').feature('mtrl1').set('family', 'plasticshiny');
model.result('pg8').feature('surf7').feature('mtrl1').set('color', 'red');
model.result('pg8').run;
model.result('pg8').feature.duplicate('surf8', 'surf2');
model.result('pg8').feature('surf8').label('Air vents');
model.result('pg8').feature('surf8').feature('sel1').selection.named('geom1_sel8');
model.result('pg8').feature('surf8').set('customcolor', [0 0 0]);
model.result('pg8').feature.duplicate('surf9', 'surf2');
model.result('pg8').run;
model.result('pg8').run;
model.result.duplicate('pg9', 'pg8');
model.result('pg9').label('Streamlines');
model.result('pg9').feature('slc1').active(false);
model.result('pg9').feature('slc2').active(false);
model.result('pg9').create('str1', 'Streamline');
model.result('pg9').feature('str1').set('posmethod', 'start');
model.result('pg9').feature('str1').set('startmethod', 'coord');
model.result('pg9').feature('str1').set('xcoord', -8);
model.result('pg9').feature('str1').set('ycoord', 0);
model.result('pg9').feature('str1').set('zcoord', 'range(0,2/39,2)');
model.result('pg9').feature('str1').set('linetype', 'tube');
model.result('pg9').feature('str1').set('radiusexpr', '.005');
model.result('pg9').feature('str1').set('tuberadiusscaleactive', true);
model.result('pg9').feature('str1').set('back', false);
model.result('pg9').feature('str1').create('col1', 'Color');
model.result('pg9').feature('str1').feature('col1').set('rangecoloractive', true);
model.result('pg9').feature('str1').feature('col1').set('rangecolormax', 70);
model.result('pg9').feature('str1').feature('col1').set('colortable', 'RainbowLight');
model.result('pg9').feature.duplicate('str2', 'str1');
model.result('pg9').feature('str2').set('xcoord', 4.31);
model.result('pg9').feature('str2').set('ycoord', 'range(-0.8,0.041025641025641026,0.8)');
model.result('pg9').feature('str2').set('zcoord', 0.88);
model.result('pg9').feature('str2').set('inheritplot', 'str1');
model.result('pg9').feature.duplicate('str3', 'str2');
model.result('pg9').feature('str3').set('zcoord', 0.1);
model.result('pg9').feature.duplicate('str4', 'str3');
model.result('pg9').feature('str4').set('xcoord', -8);
model.result('pg9').feature('str4').set('ycoord', 'range(-1.5,0.043478260869565216,1.5)');
model.result('pg9').run;
model.result('pg9').create('surf10', 'Surface');
model.result('pg9').feature('surf10').create('sel1', 'Selection');
model.result('pg9').feature('surf10').feature('sel1').selection.set([3]);
model.result('pg9').feature('surf10').create('mtrl1', 'MaterialAppearance');
model.result('pg9').feature('surf10').feature('mtrl1').set('appearance', 'custom');
model.result('pg9').feature('surf10').feature('mtrl1').set('family', 'rubber');
model.result('pg9').feature('surf10').feature('mtrl1').set('color', 'black');
model.result('pg9').run;
model.result.duplicate('pg10', 'pg8');
model.result('pg10').label('Wheel Velocity');
model.result('pg10').feature('slc1').set('colorlegend', false);
model.result('pg10').feature('slc2').active(false);
model.result('pg10').create('surf10', 'Surface');
model.result('pg10').feature('surf10').set('expr', 'Uwx');
model.result('pg10').feature('surf10').create('sel1', 'Selection');
model.result('pg10').feature('surf10').feature('sel1').selection.set([3]);
model.result('pg10').feature('surf1').active(false);
model.result('pg10').feature('surf5').active(false);
model.result('pg10').create('surf11', 'Surface');
model.result('pg10').feature('surf11').create('sel1', 'Selection');
model.result('pg10').feature('surf11').feature('sel1').selection.named('geom1_adjsel2');
model.result('pg10').feature('surf11').set('descr', 'Velocity magnitude Tire velocity, x-component');
model.result('pg10').feature('surf11').set('expr', 'sqrt(Uwx^2+Uwz_front^2)');
model.result('pg10').feature('surf11').set('inheritplot', 'surf10');
model.result('pg10').run;
model.result('pg10').feature.duplicate('surf12', 'surf11');
model.result('pg10').feature('surf12').set('expr', 'sqrt(Uwx^2+Uwz_rear^2)');
model.result('pg10').feature('surf12').set('inheritplot', 'surf11');
model.result('pg10').feature('surf12').feature('sel1').selection.named('geom1_adjsel3');
model.result('pg10').set('titletype', 'manual');
model.result('pg10').set('title', 'Velocity magnitude (m/s)');
model.result('pg10').run;

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.named('geom1_sel19');

model.variable('var1').set('A', 'intop1(max(0,spf.nxmesh))');
model.variable('var1').descr('A', '');
model.variable('var1').set('Cdp', '2/(A*U0^2*1.2[kg/m^3])*intop1(p*spf.nxmesh)');
model.variable('var1').descr('Cdp', '');
model.variable('var1').set('Cdstress', '2/(A*U0^2*1.2[kg/m^3])*intop1(p*spf.nxmesh+spf.rho*spf.u_tau^2*spf.Utx/nojac(sqrt(spf.Utx^2+spf.Uty^2+spf.Utz^2+eps)))');
model.variable('var1').descr('Cdstress', '');

model.sol('sol3').updateSolution;

model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').set('data', 'dset3');
model.result.numerical('gev1').setIndex('looplevelinput', 'manual', 0);
model.result.numerical('gev1').setIndex('looplevel', [8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58], 0);
model.result.numerical('gev1').setIndex('expr', 'Cdp', 0);
model.result.numerical('gev1').setIndex('unit', 1, 0);
model.result.numerical('gev1').setIndex('descr', '', 0);
model.result.numerical('gev1').setIndex('expr', 'Cdstress', 1);
model.result.numerical('gev1').setIndex('unit', 1, 1);
model.result.numerical('gev1').setIndex('descr', '', 1);
model.result.numerical('gev1').set('dataseries', 'average');
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Global Evaluation 1');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result.numerical.duplicate('gev2', 'gev1');
model.result.numerical('gev2').set('dataseries', 'none');
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Global Evaluation 2');
model.result.numerical('gev2').set('table', 'tbl2');
model.result.numerical('gev2').setResult;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').set('data', 'none');
model.result('pg11').create('tblp1', 'Table');
model.result('pg11').feature('tblp1').set('source', 'table');
model.result('pg11').feature('tblp1').set('table', 'tbl2');
model.result('pg11').feature('tblp1').set('linewidth', 'preference');
model.result('pg11').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg11').run;
model.result('pg11').feature('tblp1').label('Drag Coefficient');
model.result('pg11').feature('tblp1').set('legend', true);
model.result('pg11').set('legendpos', 'lowerright');
model.result('pg11').run;
model.result('pg8').run;

model.title('Large Eddy Simulation of a Sports Car');

model.description(['This example simulates turbulent flow around a sports car traveling at a speed of 180' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'km/h using Large Eddy Simulations (LES).']);

model.label('sports_car.mph');

model.result('pg1').run;

model.cpl.create('genext1', 'GeneralExtrusion', 'geom1');
model.cpl('genext1').selection.geom('geom1', 2);
model.cpl('genext1').selection.set([87 91 93 94 101 102 103 104 105 106 113 115 116 119 120 123 125 127 129 131 133 134 137 139 140 141 145 146 147 148 153 155 158 160 162 163 167]);
model.cpl('genext1').set('method', 'closest');

model.modelNode.create('comp2', true);

model.geom.create('geom2', 3);
model.geom('geom2').model('comp2');

model.mesh.create('mesh3', 'geom2');

model.geom('geom2').geomRep('cadps');
model.geom('geom2').create('imp1', 'Import');
model.geom('geom2').feature('imp1').set('filename', 'sports_car_fsi.mphbin');
model.geom('geom2').runPre('fin');
model.geom('geom2').run('fin');

model.material.create('mat2', 'Common', 'comp2');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('Aluminum 3003-H18');
model.material('mat2').set('family', 'aluminum');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'2.326e7[S/m]' '0' '0' '0' '2.326e7[S/m]' '0' '0' '0' '2.326e7[S/m]'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'23.2e-6[1/K]' '0' '0' '0' '23.2e-6[1/K]' '0' '0' '0' '23.2e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '893[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('density', '2730[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'155[W/(m*K)]' '0' '0' '0' '155[W/(m*K)]' '0' '0' '0' '155[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '69[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.33');
model.material.create('mat3', 'Common', 'comp2');
model.material('mat3').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat3').label('Glass (quartz)');
model.material('mat3').set('family', 'custom');
model.material('mat3').set('customambient', [1 1 1]);
model.material('mat3').set('noise', true);
model.material('mat3').set('fresnel', 0.99);
model.material('mat3').set('roughness', 0.02);
model.material('mat3').set('metallic', 0);
model.material('mat3').set('pearl', 0);
model.material('mat3').set('diffusewrap', 0);
model.material('mat3').set('clearcoat', 0);
model.material('mat3').set('reflectance', 0);
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'1e-14[S/m]' '0' '0' '0' '1e-14[S/m]' '0' '0' '0' '1e-14[S/m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'4.2' '0' '0' '0' '4.2' '0' '0' '0' '4.2'});
model.material('mat3').propertyGroup('def').set('density', '2210[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'1.4[W/(m*K)]' '0' '0' '0' '1.4[W/(m*K)]' '0' '0' '0' '1.4[W/(m*K)]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '730[J/(kg*K)]');
model.material('mat3').propertyGroup('RefractiveIndex').set('n', {'1.5' '0' '0' '0' '1.5' '0' '0' '0' '1.5'});
model.material('mat3').selection.set([1]);

model.variable('var1').set('Tstress_x', 'p*spf.nxmesh+spf.rho*spf.u_tau^2*spf.Utx/sqrt(spf.Utx^2+spf.Uty^2+spf.Utz^2+eps)');
model.variable('var1').descr('Tstress_x', '');
model.variable('var1').set('Tstress_y', 'p*spf.nymesh+spf.rho*spf.u_tau^2*spf.Uty/sqrt(spf.Utx^2+spf.Uty^2+spf.Utz^2+eps)');
model.variable('var1').descr('Tstress_y', '');
model.variable('var1').set('Tstress_z', 'p*spf.nzmesh+spf.rho*spf.u_tau^2*spf.Utz/sqrt(spf.Utx^2+spf.Uty^2+spf.Utz^2+eps)');
model.variable('var1').descr('Tstress_z', '');

model.physics.create('wb', 'WeakFormBoundaryPDE', 'geom2', {'u3'});

model.study('std1').feature('stat').setSolveFor('/physics/wb', false);
model.study('std2').feature('stat').setSolveFor('/physics/wb', false);
model.study('std3').feature('time').setSolveFor('/physics/wb', false);

model.physics('wb').prop('EquationForm').set('form', 'Automatic');
model.physics('wb').selection.set([]);

model.view('view59').set('renderwireframe', true);

model.physics('wb').selection.set([1 2 3 4 5 6 8 9 11 14 48 49 50 51 52 53 55 58 59 60 61 62 63 64 67 68 69 70 71 72 85 86 87 92 93 97 98 99 100 101 102 103 104 109 110 111 131 155]);
model.physics('wb').prop('Units').set('CustomDependentVariableUnit', '1');
model.physics('wb').prop('Units').set('DependentVariableQuantity', 'none');
model.physics('wb').prop('Units').setIndex('CustomDependentVariableUnit', 'Pa', 0, 0);
model.physics('wb').prop('Units').setIndex('CustomSourceTermUnit', 'Pa/m^-2', 0, 0);
model.physics('wb').prop('ShapeProperty').set('order', 1);
model.physics('wb').field('dimensionless').field('Tstress');
model.physics('wb').field('dimensionless').component({'u3' 'Tstress2' 'Tstress3'});
model.physics('wb').field('dimensionless').component(1, 'Tstress1');
model.physics('wb').feature('wfeq1').setIndex('weak', 'test(Tstress1)*(Tstress1-comp1.genext1(comp1.Tstress_x))', 0);
model.physics('wb').feature('wfeq1').setIndex('weak', 'test(Tstress2)*(Tstress2-comp1.genext1(comp1.Tstress_y))', 1);
model.physics('wb').feature('wfeq1').setIndex('weak', 'test(Tstress3)*(Tstress3-comp1.genext1(comp1.Tstress_z))', 2);

model.study.create('std4');
model.study('std4').create('time', 'Transient');
model.study('std4').feature('time').setSolveFor('/physics/spf', false);
model.study('std4').feature('time').setSolveFor('/physics/ipf', false);
model.study('std4').feature('time').setSolveFor('/physics/spf2', false);
model.study('std4').feature('time').setSolveFor('/physics/wb', true);
model.study('std4').feature('time').set('tlist', 'range(0.6,0.002,0.7)');
model.study('std4').feature('time').set('usesol', true);
model.study('std4').feature('time').set('notsolmethod', 'sol');
model.study('std4').feature('time').set('notstudy', 'std3');
model.study('std4').feature('time').set('notsolnum', 'from_list');
model.study('std4').feature('time').set('notlistsolnum', [8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58]);
model.study('std4').feature('time').setEntry('outputmap', 'spf', 'none');
model.study('std4').feature('time').setEntry('outputmap', 'ipf', 'none');
model.study('std4').feature('time').setEntry('outputmap', 'spf2', 'none');
model.study('std4').create('tffft', 'TimeToFreqFFT');
model.study('std4').feature('tffft').set('fftstarttime', 0.6);
model.study('std4').feature('tffft').set('fftendtime', 0.7);
model.study('std4').feature('tffft').set('fftmaxfreq', 1400);
model.study('std4').feature('tffft').setEntry('activate', 'wb', true);
model.study('std4').feature('tffft').setEntry('mesh', 'geom1', 'nomesh');
model.study('std4').feature('tffft').setEntry('outputmap', 'spf', 'none');
model.study('std4').feature('tffft').setEntry('outputmap', 'ipf', 'none');
model.study('std4').feature('tffft').setEntry('outputmap', 'spf2', 'none');

model.sol.create('sol4');

model.mesh('mesh2').stat.selection.geom(3);
model.mesh('mesh2').stat.selection.set([1]);
model.mesh('mesh2').stat.selection.geom(3);
model.mesh('mesh2').stat.selection.set([1]);

model.sol('sol4').study('std4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std4');
model.sol('sol4').feature('st1').set('studystep', 'time');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'time');
model.sol('sol4').create('t1', 'Time');
model.sol('sol4').feature('t1').set('tlist', 'range(0.6,0.002,0.7)');
model.sol('sol4').feature('t1').set('plot', 'off');
model.sol('sol4').feature('t1').set('plotgroup', 'pg1');
model.sol('sol4').feature('t1').set('plotfreq', 'tout');
model.sol('sol4').feature('t1').set('probesel', 'all');
model.sol('sol4').feature('t1').set('probes', {});
model.sol('sol4').feature('t1').set('probefreq', 'tsteps');
model.sol('sol4').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol4').feature('t1').set('endtimeinterpolation', true);
model.sol('sol4').feature('t1').set('control', 'time');
model.sol('sol4').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol4').feature('t1').feature.remove('fcDef');
model.sol('sol4').create('su1', 'StoreSolution');
model.sol('sol4').create('st2', 'StudyStep');
model.sol('sol4').feature('st2').set('study', 'std4');
model.sol('sol4').feature('st2').set('studystep', 'tffft');
model.sol('sol4').create('v2', 'Variables');
model.sol('sol4').feature('v2').set('initmethod', 'sol');
model.sol('sol4').feature('v2').set('initsol', 'sol4');
model.sol('sol4').feature('v2').set('initsoluse', 'sol5');
model.sol('sol4').feature('v2').set('notsolmethod', 'sol');
model.sol('sol4').feature('v2').set('notsol', 'sol4');
model.sol('sol4').feature('v2').set('control', 'tffft');
model.sol('sol4').create('fft1', 'FFT');
model.sol('sol4').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol4').feature('fft1').set('fftinputdata', 'fftperiodic');
model.sol('sol4').feature('fft1').set('fftoutorder', 'sym');
model.sol('sol4').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol4').feature('fft1').set('cname', 't');
model.sol('sol4').feature('fft1').set('clist', {'0'});
model.sol('sol4').feature('fft1').set('clistctrl', {'fft1_const'});
model.sol('sol4').feature('fft1').set('control', 'tffft');
model.sol('sol4').feature('v2').set('notsolnum', 'auto');
model.sol('sol4').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol4').attach('std4');
model.sol('sol4').feature('t1').set('tstepsbdf', 'manual');
model.sol('sol4').feature('t1').set('timestepbdf', '.002');
model.sol('sol4').feature('t1').set('tout', 'tsteps');
model.sol('sol4').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol4').feature('t1').feature('fc1').set('ntermconst', 'iter');

model.cpl.create('intop2', 'Integration', 'geom2');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').selection.geom('geom2', 2);
model.cpl('intop2').selection.set([1]);
model.cpl.create('intop3', 'Integration', 'geom2');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').selection.geom('geom2', 2);
model.cpl('intop3').selection.set([48 49 50 51 52 53 55 59 60 61 62 63 64 67 68 69 70 71 72 85 86 87 92 93 97 98 99 100 101 102 103 104 109 110 111]);

model.variable.create('var2');
model.variable('var2').model('comp2');
model.variable('var2').set('T0s', '0.1');
model.variable('var2').descr('T0s', 'Dimensionless period');
model.variable('var2').set('F_window', 'sqrt(intop2(Tstress1)*intop2(conj(Tstress1))+intop2(Tstress2)*intop2(conj(Tstress2))+intop2(Tstress3)*intop2(conj(Tstress3)))/T0s');
model.variable('var2').descr('F_window', 'Norm of window force');
model.variable('var2').set('F_mirror', 'sqrt(intop3(Tstress1)*intop3(conj(Tstress1))+intop3(Tstress2)*intop3(conj(Tstress2))+intop3(Tstress3)*intop3(conj(Tstress3)))/T0s');
model.variable('var2').descr('F_mirror', 'Norm of mirror force');

model.mesh('mesh3').automatic(false);
model.mesh('mesh3').feature('size').set('table', 'cfd');
model.mesh('mesh3').feature('size').set('hauto', 4);
model.mesh('mesh3').feature('ftri1').selection.geom('geom2');
model.mesh('mesh3').run;

model.sol('sol4').runAll;

model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').set('data', 'dset5');
model.result('pg12').setIndex('looplevel', 141, 0);
model.result('pg12').create('surf1', 'Surface');
model.result('pg12').label('Weak Form Boundary PDE');
model.result('pg12').feature('surf1').set('expr', 'Tstress1');
model.result.create('pg13', 'PlotGroup1D');
model.result('pg13').set('data', 'dset5');
model.result('pg13').create('glob1', 'Global');
model.result('pg13').feature('glob1').set('markerpos', 'datapoints');
model.result('pg13').feature('glob1').set('linewidth', 'preference');
model.result('pg13').feature('glob1').set('expr', {'F_mirror'});
model.result('pg13').feature('glob1').set('descr', {'Norm of mirror force'});
model.result('pg13').feature('glob1').set('expr', {'F_mirror' 'F_window'});
model.result('pg13').feature('glob1').set('descr', {'Norm of mirror force' 'Norm of window force'});
model.result('pg13').run;
model.result('pg13').setIndex('looplevelinput', 'manual', 0);
model.result('pg13').setIndex('looplevel', [2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140], 0);
model.result('pg13').set('ylabelactive', true);
model.result('pg13').set('ylabel', 'Total force (N)');
model.result('pg13').run;
model.result('pg13').set('xlog', true);
model.result('pg13').label('Force on window and mirror');

model.sol('sol3').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol1').clearSolutionData;

model.result('pg12').setIndex('looplevel', 7, 0);
model.result('pg12').run;

model.physics.create('shell', 'Shell', 'geom2');
model.physics('shell').model('comp2');

model.study('std1').feature('stat').setSolveFor('/physics/shell', false);
model.study('std2').feature('stat').setSolveFor('/physics/shell', false);
model.study('std3').feature('time').setSolveFor('/physics/shell', false);
model.study('std4').feature('time').setSolveFor('/physics/shell', false);
model.study('std4').feature('tffft').setSolveFor('/physics/shell', false);

model.material('mat3').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat3').propertyGroup('Enu').set('E', {'7e10'});
model.material('mat3').propertyGroup('Enu').set('nu', {'0.23'});

model.physics('shell').feature('emm1').create('dmp1', 'Damping', 2);
model.physics('shell').feature('emm1').feature('dmp1').set('DampingType', 'IsotropicLossFactor');
model.physics('shell').feature('emm1').feature('dmp1').set('eta_s_mat', 'userdef');
model.physics('shell').feature('emm1').feature('dmp1').set('eta_s', 0.03);
model.physics('shell').feature('to1').set('d', '1.2[mm]');
model.physics('shell').create('to2', 'ThicknessOffset', 2);
model.physics('shell').feature('to2').selection.set([1]);
model.physics('shell').feature('to2').set('d', '3[mm]');
model.physics('shell').create('to3', 'ThicknessOffset', 2);
model.physics('shell').feature('to3').selection.set([3 4 6 58 131]);
model.physics('shell').feature('to3').set('d', '2.4[mm]');
model.physics('shell').create('to4', 'ThicknessOffset', 2);
model.physics('shell').feature('to4').selection.set([8 12 14 15 17 18 42 43 44]);
model.physics('shell').feature('to4').set('d', '1.8[mm]');
model.physics('shell').create('fix1', 'Fixed', 1);
model.physics('shell').feature('fix1').selection.set([16 19 27 29 38 39 40 44 45 47 56 57 59 61 62 67 77 78 79 81 83 85 349 361]);
model.physics('shell').create('spf1', 'SpringFoundation2', 2);
model.physics('shell').feature('spf1').selection.set([3 58 131]);
model.physics('shell').feature('spf1').set('kPerArea', {'2e9' '0' '0' '0' '2e9' '0' '0' '0' '2e9'});
model.physics('shell').create('spf2', 'SpringFoundation1', 1);
model.physics('shell').feature('spf2').selection.set([1]);
model.physics('shell').feature('spf2').set('kPerLine', {'2e7' '0' '0' '0' '2e7' '0' '0' '0' '2e7'});
model.physics('shell').create('fl1', 'FaceLoad', 2);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp2');
model.selection('sel1').geom(2);
model.selection('sel1').label('External surfaces');
model.selection('sel1').set([1 2 3 4 5 6 8 9 11 14 48 49 50 51 52 53 55 58 59 60 61 62 63 64 67 68 69 70 71 72 85 86 87 92 93 97 98 99 100 101 102 103 104 109 110 111 131 155]);

model.physics('wb').selection.named('sel1');
model.physics('shell').feature('fl1').selection.named('sel1');
model.physics('shell').feature('fl1').set('Ff', {'-withsol(''sol4'',comp2.Tstress1,setval(freq,freq))/T0s' '-withsol(''sol4'',comp2.Tstress2,setval(freq,freq))/T0s' '-withsol(''sol4'',comp2.Tstress3,setval(freq,freq))/T0s'});
model.physics('shell').feature('fl1').set('harmonicPerturbation', true);

model.study.create('std5');
model.study('std5').create('eig', 'Eigenfrequency');
model.study('std5').feature('eig').set('plotgroup', 'Default');
model.study('std5').feature('eig').set('chkeigregion', true);
model.study('std5').feature('eig').set('conrad', '1');
model.study('std5').feature('eig').set('conradynhm', '1');
model.study('std5').feature('eig').set('storefact', false);
model.study('std5').feature('eig').set('outputmap', {});
model.study('std5').feature('eig').set('ngenAUX', '1');
model.study('std5').feature('eig').set('goalngenAUX', '1');
model.study('std5').feature('eig').set('ngenAUX', '1');
model.study('std5').feature('eig').set('goalngenAUX', '1');
model.study('std5').feature('eig').setSolveFor('/physics/spf', false);
model.study('std5').feature('eig').setSolveFor('/physics/ipf', false);
model.study('std5').feature('eig').setSolveFor('/physics/spf2', false);
model.study('std5').feature('eig').setSolveFor('/physics/wb', false);
model.study('std5').feature('eig').setSolveFor('/physics/shell', true);
model.study('std5').create('frmod', 'Frequencymodal');
model.study('std5').feature('frmod').set('outputmap', {});
model.study('std5').feature('frmod').setSolveFor('/physics/spf', false);
model.study('std5').feature('frmod').setSolveFor('/physics/ipf', false);
model.study('std5').feature('frmod').setSolveFor('/physics/spf2', false);
model.study('std5').feature('frmod').setSolveFor('/physics/wb', false);
model.study('std5').feature('frmod').setSolveFor('/physics/shell', true);
model.study('std5').feature('eig').set('neigsactive', true);
model.study('std5').feature('eig').set('neigs', 50);
model.study('std5').feature('eig').set('useadvanceddisable', true);
model.study('std5').feature('eig').set('disabledphysics', {'shell/emm1/dmp1'});
model.study('std5').feature('eig').setEntry('outputmap', 'spf', 'none');
model.study('std5').feature('eig').setEntry('outputmap', 'ipf', 'none');
model.study('std5').feature('frmod').set('plist', 'range(10,10,1390)');
model.study('std5').feature('frmod').setEntry('mesh', 'geom1', 'nomesh');
model.study('std5').feature('frmod').setEntry('outputmap', 'spf', 'none');
model.study('std5').feature('frmod').setEntry('outputmap', 'ipf', 'none');

model.sol.create('sol6');

model.mesh('mesh2').stat.selection.geom(3);
model.mesh('mesh2').stat.selection.set([1]);
model.mesh('mesh2').stat.selection.geom(3);
model.mesh('mesh2').stat.selection.set([1]);

model.sol('sol6').study('std5');
model.sol('sol6').create('st1', 'StudyStep');
model.sol('sol6').feature('st1').set('study', 'std5');
model.sol('sol6').feature('st1').set('studystep', 'eig');
model.sol('sol6').create('v1', 'Variables');
model.sol('sol6').feature('v1').feature('comp2_ar').set('scalemethod', 'manual');
model.sol('sol6').feature('v1').feature('comp2_ar').set('resscalemethod', 'parent');
model.sol('sol6').feature('v1').feature('comp2_ar').set('scaleval', '0.01');
model.sol('sol6').feature('v1').set('control', 'eig');
model.sol('sol6').create('e1', 'Eigenvalue');
model.sol('sol6').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol6').feature('e1').set('eigvfunscaleparam', '1.9299999999999997E-6');
model.sol('sol6').feature('e1').set('control', 'eig');
model.sol('sol6').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol6').create('su1', 'StoreSolution');
model.sol('sol6').create('st2', 'StudyStep');
model.sol('sol6').feature('st2').set('study', 'std5');
model.sol('sol6').feature('st2').set('studystep', 'frmod');
model.sol('sol6').create('v2', 'Variables');
model.sol('sol6').feature('v2').feature('comp2_ar').set('scalemethod', 'manual');
model.sol('sol6').feature('v2').feature('comp2_ar').set('resscalemethod', 'parent');
model.sol('sol6').feature('v2').feature('comp2_ar').set('scaleval', '0.01');
model.sol('sol6').feature('v2').set('notsolmethod', 'sol');
model.sol('sol6').feature('v2').set('notsol', 'sol6');
model.sol('sol6').feature('v2').set('control', 'frmod');
model.sol('sol6').create('mo1', 'Modal');
model.sol('sol6').feature('mo1').set('analysistype', 'frequency');
model.sol('sol6').feature('mo1').set('plist', 'range(10,10,1390)');
model.sol('sol6').feature('mo1').set('eigsol', 'sol6');
model.sol('sol6').feature('mo1').set('eigsoluse', 'su1');
model.sol('sol6').feature('mo1').set('control', 'frmod');
model.sol('sol6').feature('mo1').feature('aDef').set('cachepattern', true);
model.sol('sol6').feature('v2').set('notsolnum', 'auto');
model.sol('sol6').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol6').attach('std5');

model.study('std5').feature('eig').setEntry('mesh', 'geom1', 'nomesh');
model.study('std5').feature('frmod').setEntry('mesh', 'geom1', 'nomesh');

model.sol('sol6').study('std5');
model.sol('sol7').copySolution('sol8');

model.result.dataset('dset11').set('solution', 'none');
model.result.dataset('dset10').set('solution', 'none');

model.sol('sol6').feature.remove('mo1');
model.sol('sol6').feature.remove('v2');
model.sol('sol6').feature.remove('st2');
model.sol('sol6').feature.remove('su1');
model.sol('sol6').feature.remove('e1');
model.sol('sol6').feature.remove('v1');
model.sol('sol6').feature.remove('st1');
model.sol('sol8').copySolution('sol7');
model.sol.remove('sol8');
model.sol('sol7').label('Solution Store 2');

model.result.dataset.remove('dset14');
model.result.dataset.remove('dset15');

model.sol('sol6').create('st1', 'StudyStep');
model.sol('sol6').feature('st1').set('study', 'std5');
model.sol('sol6').feature('st1').set('studystep', 'eig');
model.sol('sol6').create('v1', 'Variables');
model.sol('sol6').feature('v1').feature('comp2_ar').set('scalemethod', 'manual');
model.sol('sol6').feature('v1').feature('comp2_ar').set('resscalemethod', 'parent');
model.sol('sol6').feature('v1').feature('comp2_ar').set('scaleval', '0.01');
model.sol('sol6').feature('v1').set('control', 'eig');
model.sol('sol6').create('e1', 'Eigenvalue');
model.sol('sol6').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol6').feature('e1').set('eigvfunscaleparam', '1.9299999999999997E-6');
model.sol('sol6').feature('e1').set('control', 'eig');
model.sol('sol6').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol6').create('su1', 'StoreSolution');
model.sol('sol6').feature('su1').set('sol', 'sol7');
model.sol('sol6').feature('su1').label('Solution Store 2');
model.sol('sol6').create('st2', 'StudyStep');
model.sol('sol6').feature('st2').set('study', 'std5');
model.sol('sol6').feature('st2').set('studystep', 'frmod');
model.sol('sol6').create('v2', 'Variables');
model.sol('sol6').feature('v2').feature('comp2_ar').set('scalemethod', 'manual');
model.sol('sol6').feature('v2').feature('comp2_ar').set('resscalemethod', 'parent');
model.sol('sol6').feature('v2').feature('comp2_ar').set('scaleval', '0.01');
model.sol('sol6').feature('v2').set('notsolmethod', 'sol');
model.sol('sol6').feature('v2').set('notsol', 'sol6');
model.sol('sol6').feature('v2').set('control', 'frmod');
model.sol('sol6').create('mo1', 'Modal');
model.sol('sol6').feature('mo1').set('analysistype', 'frequency');
model.sol('sol6').feature('mo1').set('plist', 'range(10,10,1390)');
model.sol('sol6').feature('mo1').set('eigsol', 'sol6');
model.sol('sol6').feature('mo1').set('eigsoluse', 'su1');
model.sol('sol6').feature('mo1').set('control', 'frmod');
model.sol('sol6').feature('mo1').feature('aDef').set('cachepattern', true);

model.result.dataset('dset10').set('solution', 'sol7');
model.result.dataset('dset11').set('solution', 'sol7');

model.sol('sol6').feature('v2').set('notsolnum', 'auto');
model.sol('sol6').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol6').attach('std5');
model.sol('sol6').runAll;

model.result.dataset.create('dset9shellshl', 'Shell');
model.result.dataset('dset9shellshl').set('data', 'dset9');
model.result.dataset('dset9shellshl').setIndex('topconst', '1', 3, 1);
model.result.dataset('dset9shellshl').setIndex('bottomconst', '-1', 3, 1);
model.result.dataset('dset9shellshl').setIndex('orientationexpr', 'shell.nlX', 0);
model.result.dataset('dset9shellshl').setIndex('displacementexpr', 'arx', 0);
model.result.dataset('dset9shellshl').setIndex('orientationexpr', 'shell.nlY', 1);
model.result.dataset('dset9shellshl').setIndex('displacementexpr', 'ary', 1);
model.result.dataset('dset9shellshl').setIndex('orientationexpr', 'shell.nlZ', 2);
model.result.dataset('dset9shellshl').setIndex('displacementexpr', 'arz', 2);
model.result.dataset('dset9shellshl').set('distanceexpr', 'shell.z_pos');
model.result.dataset('dset9shellshl').set('seplevels', false);
model.result.dataset('dset9shellshl').set('resolution', 2);
model.result.dataset('dset9shellshl').set('areascalefactor', 'shell.ASF');
model.result.dataset('dset9shellshl').set('linescalefactor', 'shell.LSF');
model.result.create('pg14', 'PlotGroup3D');
model.result('pg14').set('data', 'dset9shellshl');
model.result('pg14').setIndex('looplevel', 139, 0);
model.result('pg14').set('defaultPlotID', 'stress');
model.result('pg14').label('Stress (shell)');
model.result('pg14').set('showlegends', true);
model.result('pg14').set('frametype', 'spatial');
model.result('pg14').create('surf1', 'Surface');
model.result('pg14').feature('surf1').set('expr', {'shell.misesGp_peak'});
model.result('pg14').feature('surf1').set('threshold', 'manual');
model.result('pg14').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg14').feature('surf1').set('colortable', 'Rainbow');
model.result('pg14').feature('surf1').set('colortabletrans', 'none');
model.result('pg14').feature('surf1').set('colorscalemode', 'linear');
model.result('pg14').feature('surf1').set('descr', 'Von Mises stress, peak');
model.result('pg14').feature('surf1').set('colortable', 'Prism');
model.result('pg14').feature('surf1').create('def', 'Deform');
model.result('pg14').feature('surf1').feature('def').set('expr', {'shell.u' 'shell.v' 'shell.w'});
model.result('pg14').run;
model.result('pg14').setIndex('looplevel', 5, 0);
model.result('pg14').run;
model.result.create('pg15', 'PlotGroup3D');
model.result('pg15').set('defaultPlotID', 'displacement');
model.result('pg15').label('Displacement (shell)');
model.result('pg15').set('showlegends', true);
model.result('pg15').set('frametype', 'spatial');
model.result('pg15').create('surf1', 'Surface');
model.result('pg15').feature('surf1').set('expr', {'shell.disp'});
model.result('pg15').feature('surf1').set('threshold', 'manual');
model.result('pg15').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg15').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg15').feature('surf1').set('colortabletrans', 'none');
model.result('pg15').feature('surf1').set('colorscalemode', 'linear');
model.result('pg15').feature('surf1').set('descr', 'Displacement magnitude');
model.result('pg15').feature('surf1').create('def', 'Deform');
model.result('pg15').feature('surf1').feature('def').set('expr', {'shell.u' 'shell.v' 'shell.w'});
model.result('pg15').set('data', 'dset9shellshl');
model.result('pg15').label('Displacement (shell)');
model.result('pg15').setIndex('looplevel', 5, 0);
model.result('pg15').run;
model.result('pg15').setIndex('looplevel', 7, 0);
model.result('pg15').run;
model.result.create('pg16', 'PlotGroup3D');
model.result('pg16').set('data', 'dset9');
model.result('pg16').setIndex('looplevel', 139, 0);
model.result('pg16').set('defaultPlotID', 'faceLoads');
model.result('pg16').label('Face Loads (shell)');
model.result('pg16').set('showlegends', true);
model.result('pg16').set('titletype', 'label');
model.result('pg16').set('frametype', 'spatial');
model.result('pg16').set('showlegendsunit', true);
model.result('pg16').create('surf1', 'Surface');
model.result('pg16').feature('surf1').set('expr', {'1'});
model.result('pg16').feature('surf1').label('Gray Surfaces');
model.result('pg16').feature('surf1').set('coloring', 'uniform');
model.result('pg16').feature('surf1').set('color', 'gray');
model.result('pg16').feature('surf1').set('inheritcolor', false);
model.result('pg16').feature('surf1').set('inheritrange', false);
model.result('pg16').feature('surf1').set('inherittransparency', false);
model.result('pg16').feature('surf1').create('def', 'Deform');
model.result('pg16').feature('surf1').feature('def').set('expr', {'u3' 'v3' 'w3'});
model.result('pg16').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg16').feature('surf1').feature('def').set('scaleactive', true);
model.result('pg16').feature('surf1').feature('def').set('scale', 0);
model.result('pg16').feature('surf1').create('sel1', 'Selection');
model.result('pg16').feature('surf1').feature('sel1').selection.geom('geom2', 2);
model.result('pg16').feature('surf1').feature('sel1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157]);
model.result('pg16').feature('surf1').create('tran1', 'Transparency');
model.result('pg16').feature('surf1').feature('tran1').set('transparency', 0.8);
model.result('pg16').create('arws1', 'ArrowSurface');
model.result('pg16').feature('arws1').set('expr', {'shell.fl1.F_Ax' 'shell.fl1.F_Ay' 'shell.fl1.F_Az'});
model.result('pg16').feature('arws1').set('placement', 'gausspoints');
model.result('pg16').feature('arws1').set('arrowbase', 'tail');
model.result('pg16').feature('arws1').label('Face Load 1');
model.result('pg16').feature('arws1').set('inheritplot', 'none');
model.result('pg16').feature('arws1').create('col', 'Color');
model.result('pg16').feature('arws1').feature('col').set('colortable', 'Rainbow');
model.result('pg16').feature('arws1').feature('col').set('colortabletrans', 'none');
model.result('pg16').feature('arws1').feature('col').set('colorscalemode', 'linear');
model.result('pg16').feature('arws1').feature('col').set('colordata', 'arrowlength');
model.result('pg16').feature('arws1').feature('col').set('coloring', 'gradient');
model.result('pg16').feature('arws1').feature('col').set('topcolor', 'red');
model.result('pg16').feature('arws1').feature('col').set('bottomcolor', 'custom');
model.result('pg16').feature('arws1').feature('col').set('custombottomcolor', [0.5882353186607361 0.5137255191802979 0.5176470875740051]);
model.result('pg16').feature('arws1').set('color', 'red');
model.result('pg16').feature('arws1').create('def', 'Deform');
model.result('pg16').feature('arws1').feature('def').set('expr', {'u3' 'v3' 'w3'});
model.result('pg16').feature('arws1').feature('def').set('descr', 'Displacement field');
model.result('pg16').feature('arws1').feature('def').set('scaleactive', true);
model.result('pg16').feature('arws1').feature('def').set('scale', 0);
model.result('pg16').feature.move('surf1', 1);
model.result('pg16').label('Face Loads (shell)');
model.result('pg16').setIndex('looplevel', 5, 0);
model.result('pg16').run;

model.title(['Fluid' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Structure Interaction on a Sports Car Door']);

model.description('This example extends the Large Eddy Simulation of a Sports Car model to include a vibration analysis of a car door with window and rear view mirror. The forces from the fluid interacting with the car body are extruded onto a geometry of a car door and transformed to the frequency domain with FFT.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;

model.label('sports_car_fsi.mph');

model.modelNode.label('Components');

out = model;
