function out = model
%
% baffled_piston_radiation.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('u0', '1[m/s]', 'Piston velocity amplitude');
model.param.set('a', '0.1[m]', 'Piston radius');
model.param.set('Rmodel', '0.2[m]', 'Domain radius');
model.param.set('f0', '20000[Hz]', 'Maximum frequency');
model.param.set('c0', '343[m/s]', 'Speed of sound');
model.param.set('lam0', 'c0/f0', 'Wavelength at f0');
model.param.set('ka0', '2*pi*a/lam0', 'k0*a');
model.param.set('R0', 'ka0*a/2', 'Rayleigh distance at f0');
model.param.set('Rfar', '20*Rmodel', 'Far-field valuation distance');
model.param.set('Scale', 'a/lam0', 'Help variable');

model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 'Rmodel');
model.geom('geom1').feature('c1').set('angle', 90);
model.geom('geom1').run('c1');
model.geom('geom1').create('pt1', 'Point');
model.geom('geom1').feature('pt1').setIndex('p', 'a', 0);
model.geom('geom1').runPre('fin');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').label('Variables: Analytical Pressure Field');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('k', 'intop_pt(acpr.k)*1[1/rad]', 'Wave number');
model.variable('var1').set('ka', 'k*a', 'k*a');
model.variable('var1').set('p0', 'intop_pt(acpr.rho*acpr.c*u0)', 'Specific reference pressure');
model.variable('var1').set('p_axis', 'p0*(exp(-i*k*z)-exp(-i*k*sqrt(z^2+a^2)))', 'On-axis near-field pressure (analytical)');
model.variable('var1').set('R0', 'k*a^2/2', 'Rayleigh length scale');
model.variable('var1').set('p_axis_ff', 'p0*(exp(-i*k*z)-exp(-i*k*sqrt(z^2+a^2)))', 'On-axis far-field pressure (analytical)');
model.variable('var1').set('P_ar', '(pi/2)*a^2*u0*p0*(1-2*besselj(1,2*acpr.k*a)/(2*acpr.k*a))', 'Acoustic radiated power');
model.variable('var1').set('p_ana', 'i*a*p0/dis*besselj(1,ka*sin(theta))/sin(theta)*exp(-i*ka/a*dis)', 'Analytical far-field pressure (spatial)');
model.variable('var1').set('dis', 'sqrt(r^2+z^2)', 'Distance from origin');
model.variable('var1').set('theta', 'atan2(r,z)', 'Polar angle (from z-axis)');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Variables: Surface Impedance and Power');

% To import content from file, use:
% model.variable('var2').loadFile('FILENAME');
model.variable('var2').set('Zp', 'acpr.rho*acpr.c*(R1+i*X1)', 'Piston surface impedance');
model.variable('var2').set('R1', '1-2*besselj(1,2*ka)/(2*ka)', 'Piston function R1');
model.variable('var2').set('X1', '2*K1/(2*ka)', 'Piston function X1');
model.variable('var2').set('K1', '2/pi-besselj(0,2*ka)+0.5*(-5+16/pi)*sin(2*ka)/(ka)+(12-36/pi)*(1-cos(2*ka))/(2*ka)^2', 'Struve function (approximation)');
model.variable('var2').set('W_ana', 'intop_pt(pi*a^2*(u0^2)/2*real(Zp))', 'Radiated power (analytical)');
model.variable('var2').set('W', 'intop_out(acpr.Iz*acpr.nz+acpr.Ir*acpr.nr)', 'Radiated power');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'intop_pt');
model.cpl('intop1').selection.geom('geom1', 0);
model.cpl('intop1').selection.set([1]);
model.cpl('intop1').set('axisym', false);
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').set('opname', 'intop_out');
model.cpl('intop2').selection.geom('geom1', 1);
model.cpl('intop2').selection.set([4]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('acpr').feature('fpam1').set('FluidModel', 'AtmosphereAttenuation');
model.physics('acpr').create('nvel1', 'NormalVelocity', 1);
model.physics('acpr').feature('nvel1').selection.set([2]);
model.physics('acpr').feature('nvel1').set('nvel', 'u0');
model.physics('acpr').create('swr1', 'SphericalWaveRadiation', 1);
model.physics('acpr').feature('swr1').selection.set([4]);
model.physics('acpr').create('efc1', 'ExteriorFieldCalculation', 1);
model.physics('acpr').feature('efc1').selection.set([4]);
model.physics('acpr').feature('efc1').setIndex('SymmetryCondition2', 1, 0);

model.study('std1').setGenPlots(false);
model.study('std1').feature('freq').set('plist', '10^{range(log10(10),1/9,log10(20000))}');
model.study('std1').feature('freq').set('preusesol', 'yes');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'10^{range(log10(10),1/9,log10(20000))}'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'yes');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.mesh('mesh1').run;

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'10^{range(log10(10),1/9,log10(20000))}'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'yes');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset.create('pc1', 'ParCurve2D');
model.result.dataset('pc1').set('parmax1', 'pi/2');
model.result.dataset('pc1').set('exprx', '1.3*a*cos(s)');
model.result.dataset('pc1').set('expry', '1.3*a*sin(s)');
model.result.dataset.create('pc2', 'ParCurve2D');
model.result.dataset('pc2').set('expry', '1.01*Rmodel*(1-s)+Rfar*s');
model.result.dataset('pc2').set('global', true);
model.result.dataset.create('pc3', 'ParCurve2D');
model.result.dataset('pc3').set('global', true);
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('pc3').set('expry', 'Rfar*s');
model.result.dataset('rev1').set('startangle', -50);
model.result.dataset('rev1').set('revangle', 230);
model.result.dataset.create('grid1', 'Grid2D');
model.result.dataset('grid1').set('source', 'data');
model.result.dataset('grid1').set('par1', 'r');
model.result.dataset('grid1').set('parmin1', '-1.5*Rmodel');
model.result.dataset('grid1').set('parmax1', '1.5*Rmodel');
model.result.dataset('grid1').set('par2', 'z');
model.result.dataset('grid1').set('parmax2', '3*Rmodel');
model.result.dataset.create('mir1', 'Mirror2D');
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').run;
model.result('pg1').label('Acoustic Pressure');
model.result('pg1').setIndex('looplevel', 28, 0);
model.result('pg1').set('titletype', 'label');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').label('On-axis Acoustic Pressure');
model.result('pg2').setIndex('looplevelinput', 'last', 0);
model.result('pg2').set('titletype', 'label');
model.result('pg2').set('xlabelactive', true);
model.result('pg2').set('xlabel', 'z/R0');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'abs(p) (Pa)');
model.result('pg2').set('xlog', true);
model.result('pg2').set('legendpos', 'upperleft');
model.result('pg2').create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg2').feature('lngr1').set('linewidth', 'preference');
model.result('pg2').feature('lngr1').selection.set([1]);
model.result('pg2').feature('lngr1').set('expr', 'abs(p/p0)');
model.result('pg2').feature('lngr1').set('xdata', 'expr');
model.result('pg2').feature('lngr1').set('xdataexpr', 'z/R0');
model.result('pg2').feature('lngr1').set('linecolor', 'blue');
model.result('pg2').feature('lngr1').set('linewidth', 2);
model.result('pg2').feature('lngr1').set('legend', true);
model.result('pg2').feature('lngr1').set('legendmethod', 'manual');
model.result('pg2').feature('lngr1').setIndex('legends', 'COMSOL Model', 0);
model.result('pg2').run;
model.result('pg2').create('lngr2', 'LineGraph');
model.result('pg2').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg2').feature('lngr2').set('linewidth', 'preference');
model.result('pg2').feature('lngr2').selection.set([1]);
model.result('pg2').feature('lngr2').set('expr', 'abs(p_axis/p0)');
model.result('pg2').feature('lngr2').set('xdata', 'expr');
model.result('pg2').feature('lngr2').set('xdataexpr', 'z/R0');
model.result('pg2').feature('lngr2').set('linestyle', 'none');
model.result('pg2').feature('lngr2').set('linecolor', 'red');
model.result('pg2').feature('lngr2').set('linewidth', 2);
model.result('pg2').feature('lngr2').set('linemarker', 'point');
model.result('pg2').feature('lngr2').set('markerpos', 'interp');
model.result('pg2').feature('lngr2').set('markers', 100);
model.result('pg2').feature('lngr2').set('legend', true);
model.result('pg2').feature('lngr2').set('legendmethod', 'manual');
model.result('pg2').feature('lngr2').setIndex('legends', 'Full Analytical', 0);
model.result('pg2').run;
model.result('pg2').create('lngr3', 'LineGraph');
model.result('pg2').feature('lngr3').set('markerpos', 'datapoints');
model.result('pg2').feature('lngr3').set('linewidth', 'preference');
model.result('pg2').feature('lngr3').set('data', 'pc2');
model.result('pg2').feature('lngr3').setIndex('looplevelinput', 'last', 0);
model.result('pg2').feature('lngr3').set('expr', 'abs(pext(0,z)/p0)');
model.result('pg2').feature('lngr3').set('xdata', 'expr');
model.result('pg2').feature('lngr3').set('xdataexpr', 'z/R0');
model.result('pg2').feature('lngr3').set('linecolor', 'blue');
model.result('pg2').feature('lngr3').set('linewidth', 2);
model.result('pg2').feature('lngr3').set('legendmethod', 'manual');
model.result('pg2').feature('lngr3').setIndex('legends', 'COMSOL FE Model', 0);
model.result('pg2').run;
model.result('pg2').create('lngr4', 'LineGraph');
model.result('pg2').feature('lngr4').set('markerpos', 'datapoints');
model.result('pg2').feature('lngr4').set('linewidth', 'preference');
model.result('pg2').feature('lngr4').set('data', 'pc2');
model.result('pg2').feature('lngr4').setIndex('looplevelinput', 'last', 0);
model.result('pg2').feature('lngr4').set('expr', 'abs(p_axis_ff/p0)');
model.result('pg2').feature('lngr4').set('xdata', 'expr');
model.result('pg2').feature('lngr4').set('xdataexpr', 'z/R0');
model.result('pg2').feature('lngr4').set('linestyle', 'none');
model.result('pg2').feature('lngr4').set('linecolor', 'red');
model.result('pg2').feature('lngr4').set('linewidth', 2);
model.result('pg2').feature('lngr4').set('linemarker', 'point');
model.result('pg2').feature('lngr4').set('markerpos', 'interp');
model.result('pg2').feature('lngr4').set('markers', 20);
model.result('pg2').run;
model.result('pg2').create('lngr5', 'LineGraph');
model.result('pg2').feature('lngr5').set('markerpos', 'datapoints');
model.result('pg2').feature('lngr5').set('linewidth', 'preference');
model.result('pg2').feature('lngr5').set('data', 'pc3');
model.result('pg2').feature('lngr5').setIndex('looplevelinput', 'last', 0);
model.result('pg2').feature('lngr5').set('expr', '2/sqrt(1+(2*z/R0)^2)');
model.result('pg2').feature('lngr5').set('xdata', 'expr');
model.result('pg2').feature('lngr5').set('xdataexpr', 'z/R0');
model.result('pg2').feature('lngr5').set('linestyle', 'dashed');
model.result('pg2').feature('lngr5').set('linecolor', 'green');
model.result('pg2').feature('lngr5').set('linewidth', 2);
model.result('pg2').feature('lngr5').set('legend', true);
model.result('pg2').feature('lngr5').set('legendmethod', 'manual');
model.result('pg2').feature('lngr5').setIndex('legends', 'Asymptotes M and MM', 0);
model.result('pg2').run;
model.result('pg2').create('lngr6', 'LineGraph');
model.result('pg2').feature('lngr6').set('markerpos', 'datapoints');
model.result('pg2').feature('lngr6').set('linewidth', 'preference');
model.result('pg2').feature('lngr6').set('data', 'pc3');
model.result('pg2').feature('lngr6').setIndex('looplevelinput', 'last', 0);
model.result('pg2').feature('lngr6').set('expr', '1/sqrt(1+(z/R0)^2)');
model.result('pg2').feature('lngr6').set('xdata', 'expr');
model.result('pg2').feature('lngr6').set('xdataexpr', 'z/R0');
model.result('pg2').feature('lngr6').set('linestyle', 'dashed');
model.result('pg2').feature('lngr6').set('linecolor', 'green');
model.result('pg2').feature('lngr6').set('linewidth', 2);
model.result('pg2').run;
model.result('pg2').create('lngr7', 'LineGraph');
model.result('pg2').feature('lngr7').set('markerpos', 'datapoints');
model.result('pg2').feature('lngr7').set('linewidth', 'preference');
model.result('pg2').feature('lngr7').set('data', 'pc2');
model.result('pg2').feature('lngr7').setIndex('looplevelinput', 'last', 0);
model.result('pg2').feature('lngr7').set('expr', 'abs(i*R0/z*exp(-i*k*z))');
model.result('pg2').feature('lngr7').set('xdata', 'expr');
model.result('pg2').feature('lngr7').set('xdataexpr', 'z/R0');
model.result('pg2').feature('lngr7').set('linestyle', 'dashed');
model.result('pg2').feature('lngr7').set('linecolor', 'black');
model.result('pg2').feature('lngr7').set('linewidth', 2);
model.result('pg2').feature('lngr7').set('legend', true);
model.result('pg2').feature('lngr7').set('legendmethod', 'manual');
model.result('pg2').feature('lngr7').setIndex('legends', 'Far-field Limit', 0);
model.result('pg2').run;
model.result.create('pg3', 'PolarGroup');
model.result('pg3').run;
model.result('pg3').label('Near-field r=1.3a');
model.result('pg3').set('data', 'pc1');
model.result('pg3').setIndex('looplevelinput', 'manual', 0);
model.result('pg3').setIndex('looplevel', [28], 0);
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Near-field SPL at f=eval(freq) Hz');
model.result('pg3').set('symmetricangle', true);
model.result('pg3').set('zeroangle', 'up');
model.result('pg3').set('rotdir', 'cw');
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg3').feature('lngr1').set('linewidth', 'preference');
model.result('pg3').feature('lngr1').set('expr', 'acpr.Lp');
model.result('pg3').feature('lngr1').set('xdata', 'expr');
model.result('pg3').feature('lngr1').set('xdataexpr', 'theta');
model.result('pg3').feature('lngr1').set('xdataunit', '1');
model.result('pg3').run;
model.result('pg3').create('lngr2', 'LineGraph');
model.result('pg3').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg3').feature('lngr2').set('linewidth', 'preference');
model.result('pg3').feature('lngr2').set('expr', 'acpr.Lp');
model.result('pg3').feature('lngr2').set('xdata', 'expr');
model.result('pg3').feature('lngr2').set('xdataexpr', '-theta');
model.result('pg3').feature('lngr2').set('xdataunit', '1');
model.result('pg3').feature('lngr2').set('linecolor', 'blue');
model.result('pg3').run;
model.result.create('pg4', 'PolarGroup');
model.result('pg4').run;
model.result('pg4').label('Far-field r=Rfar');
model.result('pg4').setIndex('looplevelinput', 'manual', 0);
model.result('pg4').setIndex('looplevel', [28], 0);
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('title', 'Far-field SPL at f=eval(freq) Hz');
model.result('pg4').set('symmetricangle', true);
model.result('pg4').set('zeroangle', 'up');
model.result('pg4').set('rotdir', 'cw');
model.result('pg4').create('rp1', 'RadiationPattern');
model.result('pg4').feature('rp1').set('markerpos', 'datapoints');
model.result('pg4').feature('rp1').set('linewidth', 'preference');
model.result('pg4').feature('rp1').set('phidisc', 180);
model.result('pg4').feature('rp1').set('anglerestr', 'manual');
model.result('pg4').feature('rp1').set('phimin', -90);
model.result('pg4').feature('rp1').set('phirange', 180);
model.result('pg4').feature('rp1').set('radius', 'Rfar');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').create('rp2', 'RadiationPattern');
model.result('pg4').feature('rp2').set('markerpos', 'datapoints');
model.result('pg4').feature('rp2').set('linewidth', 'preference');
model.result('pg4').feature('rp2').set('expr', '10*log10(0.5*p_ana*conj(p_ana)/(20e-6)^2)');
model.result('pg4').feature('rp2').set('phidisc', 180);
model.result('pg4').feature('rp2').set('anglerestr', 'manual');
model.result('pg4').feature('rp2').set('phimin', -90);
model.result('pg4').feature('rp2').set('phirange', 180);
model.result('pg4').feature('rp2').set('radius', 'Rfar');
model.result('pg4').feature('rp2').set('legend', true);
model.result('pg4').feature('rp2').set('legendmethod', 'manual');
model.result('pg4').feature('rp2').setIndex('legends', 'Analytical (far-field)', 0);
model.result('pg4').feature('rp2').set('linestyle', 'none');
model.result('pg4').feature('rp2').set('linemarker', 'point');
model.result('pg4').feature('rp2').set('markerpos', 'interp');
model.result('pg4').feature('rp2').set('markers', 180);
model.result('pg4').run;
model.result.create('pg5', 'PolarGroup');
model.result('pg5').run;
model.result('pg5').label('Beamwidth Polar');
model.result('pg5').set('symmetricangle', true);
model.result('pg5').set('zeroangle', 'up');
model.result('pg5').set('rotdir', 'cw');
model.result('pg5').create('rp1', 'RadiationPattern');
model.result('pg5').feature('rp1').set('markerpos', 'datapoints');
model.result('pg5').feature('rp1').set('linewidth', 'preference');
model.result('pg5').feature('rp1').set('phidisc', 90);
model.result('pg5').feature('rp1').set('anglerestr', 'manual');
model.result('pg5').feature('rp1').set('phimin', -90);
model.result('pg5').feature('rp1').set('phirange', 180);
model.result('pg5').feature('rp1').set('beamwidth', true);
model.result('pg5').feature('rp1').set('leveldown', 3);
model.result('pg5').feature('rp1').set('radius', 'Rfar');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Beamwidth');
model.result('pg6').set('data', 'none');
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'f (Hz)');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'Beamwidth (deg)');
model.result('pg6').create('tblp1', 'Table');
model.result('pg6').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg6').feature('tblp1').set('linewidth', 'preference');
model.result('pg6').feature('tblp1').set('legend', true);
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').set('data', 'dset1');
model.result('pg6').feature('glob1').setIndex('expr', '2*asin(1.616/ka)/pi*180', 0);
model.result('pg6').feature('glob1').setIndex('unit', 'rad', 0);
model.result('pg6').feature('glob1').setIndex('descr', 'Beamwidth (-3 dB), analytical', 0);
model.result('pg6').feature('glob1').setIndex('expr', '2*asin(0.610*2*pi/ka)/pi*180', 1);
model.result('pg6').feature('glob1').setIndex('unit', 'rad', 1);
model.result('pg6').feature('glob1').setIndex('descr', 'Null-to-null beamwidth, analytical', 1);
model.result('pg6').feature('glob1').set('linestyle', 'none');
model.result('pg6').feature('glob1').set('linemarker', 'point');
model.result('pg6').feature('glob1').set('markerpos', 'interp');
model.result('pg6').feature('glob1').set('markers', 50);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Radiated Power');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', 'f (Hz)');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Power (W)');
model.result('pg7').set('xlog', true);
model.result('pg7').set('legendpos', 'upperleft');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').setIndex('expr', 'W', 0);
model.result('pg7').feature('glob1').setIndex('unit', 'W', 0);
model.result('pg7').feature('glob1').setIndex('descr', 'COMSOL Model', 0);
model.result('pg7').feature('glob1').set('linewidth', 2);
model.result('pg7').create('glob2', 'Global');
model.result('pg7').feature('glob2').set('markerpos', 'datapoints');
model.result('pg7').feature('glob2').set('linewidth', 'preference');
model.result('pg7').feature('glob2').setIndex('expr', 'W_ana', 0);
model.result('pg7').feature('glob2').setIndex('unit', 'W', 0);
model.result('pg7').feature('glob2').setIndex('descr', 'Radiated power (analytical)', 0);
model.result('pg7').feature('glob2').set('linestyle', 'none');
model.result('pg7').feature('glob2').set('linecolor', 'red');
model.result('pg7').feature('glob2').set('linewidth', 2);
model.result('pg7').feature('glob2').set('linemarker', 'point');
model.result('pg7').feature('glob2').set('markerpos', 'interp');
model.result('pg7').feature('glob2').set('markers', 50);
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').run;
model.result('pg8').label('Exterior Field');
model.result('pg8').set('data', 'grid1');
model.result('pg8').setIndex('looplevel', 26, 0);
model.result('pg8').set('titletype', 'label');
model.result('pg8').set('showlegendsunit', true);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('data', 'mir1');
model.result('pg8').feature('surf1').setIndex('looplevel', 26, 0);
model.result('pg8').feature('surf1').create('hght1', 'Height');
model.result('pg8').run;
model.result('pg8').feature('surf1').feature('hght1').set('scaleactive', true);
model.result('pg8').feature('surf1').feature('hght1').set('scale', '1.E-4');
model.result('pg8').feature('surf1').feature('hght1').set('offset', 0.15);
model.result('pg8').run;
model.result('pg8').create('surf2', 'Surface');
model.result('pg8').feature('surf2').set('expr', 'pext(r,z)');
model.result('pg8').feature('surf2').set('inheritplot', 'surf1');
model.result('pg8').feature('surf2').create('filt1', 'Filter');
model.result('pg8').run;
model.result('pg8').feature('surf2').feature('filt1').set('expr', 'sqrt(z^2+r^2)>1.01*Rmodel');
model.result('pg8').run;
model.result('pg8').feature('surf2').create('hght1', 'Height');
model.result('pg8').run;
model.result('pg8').feature('surf2').feature('hght1').set('offset', 0.15);
model.result('pg8').run;
model.result('pg8').create('con1', 'Contour');
model.result('pg8').feature('con1').set('data', 'mir1');
model.result('pg8').feature('con1').setIndex('looplevel', 26, 0);
model.result('pg8').feature('con1').set('colorlegend', false);
model.result('pg8').run;
model.result('pg8').create('con2', 'Contour');
model.result('pg8').feature('con2').set('expr', 'pext(r,z)');
model.result('pg8').feature('con2').set('colorlegend', false);
model.result('pg8').feature('con2').set('inheritplot', 'con1');
model.result('pg8').feature('con2').create('filt1', 'Filter');
model.result('pg8').run;
model.result('pg8').feature('con2').feature('filt1').set('expr', 'sqrt(z^2+r^2)>1.01*Rmodel');
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').run;
model.result('pg9').label('Thumbnail');
model.result('pg9').set('showlegendsunit', true);
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', 'acpr.Lp');
model.result('pg9').feature('surf1').set('colortable', 'Rainbow');
model.result('pg9').feature('surf1').set('colorscalemode', 'linear');
model.result('pg9').run;

model.title('Baffled Piston Radiation');

model.description(['An axisymmetric model of a rigid piston in an infinite baffle is used to exemplify the Exterior Field Calculation feature of the Acoustics Module. The radiation results provided by the COMSOL Multiphysics' native2unicode(hex2dec({'00' 'ae'}), 'unicode') ' software are compared to analytical results for the on-axis radiation pattern (as a function of distance), the spatial far-field response, and the total radiated power. The transition from near-field to far-field is smooth and continuous.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('baffled_piston_radiation.mph');

model.modelNode.label('Components');

out = model;
