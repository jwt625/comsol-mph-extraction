function out = model
%
% bessel_panel.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Tutorials,_Pressure_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('pabe', 'PressureAcousticsBoundaryElements', 'geom1');
model.physics('pabe').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std1').feature('freq').setSolveFor('/physics/pabe', true);

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', [0.4 2.4 2.4]);
model.geom('geom1').feature('blk1').set('base', 'center');
model.geom('geom1').run('blk1');
model.geom('geom1').create('pt1', 'Point');
model.geom('geom1').feature('pt1').setIndex('p', -1, 1);
model.geom('geom1').feature('pt1').setIndex('p', -1, 2);
model.geom('geom1').run('pt1');
model.geom('geom1').create('arr1', 'Array');

model.view('view1').set('renderwireframe', true);

model.geom('geom1').feature('arr1').selection('input').set({'pt1'});
model.geom('geom1').feature('arr1').set('fullsize', [1 5 5]);
model.geom('geom1').feature('arr1').set('displ', [0 0.5 0.5]);
model.geom('geom1').feature('arr1').set('selresult', true);
model.geom('geom1').feature('arr1').set('selresultshow', 'pnt');
model.geom('geom1').runPre('fin');

model.param.set('S', '0.01[m^3/s]');
model.param.descr('S', 'Flow source');
model.param.set('f0', '200[Hz]');
model.param.descr('f0', 'Frequency');
model.param.set('c0', '343[m/s]');
model.param.descr('c0', 'Speed of sound');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').set('Qs', '-S*i');
model.variable('var1').descr('Qs', 'Source strength');
model.variable('var1').selection.geom('geom1', 0);
model.variable('var1').selection.set([5 9 25 29]);
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').set('Qs', '2*S*i', 'Source strength');
model.variable('var2').descr('Qs', 'Source strength');
model.variable('var2').selection.geom('geom1', 0);
model.variable('var2').selection.set([6 10 14 26]);
model.variable.create('var3');
model.variable('var3').model('comp1');
model.variable('var3').set('Qs', '-2*S*i', 'Source strength');
model.variable('var3').descr('Qs', 'Source strength');
model.variable('var3').selection.geom('geom1', 0);
model.variable('var3').selection.set([7 8 15 19 20 24 27 28]);
model.variable.create('var4');
model.variable('var4').model('comp1');
model.variable('var4').set('Qs', '-4*S*i', 'Source strength');
model.variable('var4').descr('Qs', 'Source strength');
model.variable('var4').selection.geom('geom1', 0);
model.variable('var4').selection.set([11 17 18 22 23]);
model.variable.create('var5');
model.variable('var5').model('comp1');
model.variable('var5').set('Qs', '4*S*i', 'Source strength');
model.variable('var5').descr('Qs', 'Source strength');
model.variable('var5').selection.geom('geom1', 0);
model.variable('var5').selection.set([12 13 16 21]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material('mat1').selection.all;
model.material('mat1').selection.allVoids;

model.physics('acpr').create('mps1', 'FrequencyMonopolePointSource', 0);
model.physics('acpr').feature('mps1').selection.named('geom1_arr1_pnt');
model.physics('acpr').feature('mps1').set('Qs', 'Qs');
model.physics('pabe').selection.set([]);
model.physics('pabe').selection.allVoids;

model.multiphysics.create('aab1', 'AcousticAcousticBoundary', 'geom1', 2);
model.multiphysics('aab1').selection.all;

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 0);
model.cpl('intop1').selection.named('geom1_arr1_pnt');

model.variable.create('var6');
model.variable('var6').model('comp1');
model.variable('var6').set('r', 'sqrt((dest(x)-x)^2+(dest(y)-y)^2 +(dest(z)-z)^2)');
model.variable('var6').descr('r', 'Distance between source and observation point');
model.variable('var6').set('p_an', 'intop1(Qs*acpr.omega*acpr.rho*exp(-i*acpr.k*r)/(4*pi*r))');
model.variable('var6').descr('p_an', 'Analytic pressure at observation point');

model.study('std1').feature('freq').set('plist', 'f0');

model.mesh('mesh1').autoMeshSize(6);

model.physics('acpr').prop('MeshControl').set('ElementsPerWavelength', 'UserDefined');
model.physics('acpr').prop('MeshControl').set('nperlambda', 6);

model.mesh('mesh1').run;

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').create('iDef', 'Iterative');
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 500);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with SAI and Direct Precon.) (aab1) (Merged)');
model.sol('sol1').feature('s1').feature('i1').create('sai1', 'SAI');
model.sol('sol1').feature('s1').feature('i1').feature('sai1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('sai1').set('hybridvar', {'comp1_p2' 'comp1_pabe_p_down' 'comp1_pabe_p_up' 'comp1_pabe_bpam1_bemflux'});
model.sol('sol1').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_p'});
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (aab1)');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 200);
model.sol('sol1').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with Direct Precon.) (aab1)');
model.sol('sol1').feature('s1').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('hybridvar', {'comp1_p' 'comp1_p2' 'comp1_pabe_p_down' 'comp1_pabe_p_up' 'comp1_pabe_bpam1_bemflux'});
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').feature('s1').feature.remove('iDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').label('Sound Pressure Level (acpr)');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').create('iso1', 'Isosurface');
model.result('pg3').feature('iso1').set('expr', {'acpr.p_t'});
model.result('pg3').feature('iso1').set('number', '10');
model.result('pg3').feature('iso1').set('colortable', 'Wave');
model.result('pg3').feature('iso1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').label('Acoustic Pressure, Isosurfaces (acpr)');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Acoustic Pressure, Boundaries (pabe)');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').set('defaultPlotID', 'pressureacoustics/PressureAcousticsBoundaryElements/phys1/pdef1/pcond1/pg1');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'pabe.p_t_bnd');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result.dataset.create('grid1', 'Grid3D');
model.result.dataset('grid1').set('source', 'data');
model.result.dataset('grid1').set('data', 'dset1');
model.result.dataset('grid1').set('par1', 'x');
model.result.dataset('grid1').set('par2', 'y');
model.result.dataset('grid1').set('par3', 'z');
model.result.dataset('grid1').set('parmin1', -0.6000000000000001);
model.result.dataset('grid1').set('parmax1', 0.6000000000000001);
model.result.dataset('grid1').set('parmin2', -3.5999999999999996);
model.result.dataset('grid1').set('parmax2', 3.5999999999999996);
model.result.dataset('grid1').set('parmin3', -3.5999999999999996);
model.result.dataset('grid1').set('parmax3', 3.5999999999999996);
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'grid1');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').create('mslc1', 'Multislice');
model.result('pg5').feature('mslc1').set('colortable', 'Wave');
model.result('pg5').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg5').feature('mslc1').set('expr', {'pabe.p_t'});
model.result('pg5').label('Acoustic Pressure (pabe)');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').create('line1', 'Line');
model.result('pg5').feature('line1').set('expr', {'1'});
model.result('pg5').feature('line1').set('data', 'dset1');
model.result('pg5').feature('line1').set('titletype', 'none');
model.result('pg5').feature('line1').set('coloring', 'uniform');
model.result('pg5').feature('line1').set('color', 'black');
model.result('pg5').feature('line1').set('solutionparams', 'parent');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'pabe.p_t_bnd'});
model.result('pg5').feature('surf1').set('data', 'dset1');
model.result('pg5').feature('surf1').set('inheritplot', 'mslc1');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'grid1');
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').create('mslc1', 'Multislice');
model.result('pg6').feature('mslc1').set('expr', {'pabe.Lp_t'});
model.result('pg6').label('Sound Pressure Level (pabe)');
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').create('line1', 'Line');
model.result('pg6').feature('line1').set('expr', {'1'});
model.result('pg6').feature('line1').set('data', 'dset1');
model.result('pg6').feature('line1').set('titletype', 'none');
model.result('pg6').feature('line1').set('coloring', 'uniform');
model.result('pg6').feature('line1').set('color', 'black');
model.result('pg6').feature('line1').set('solutionparams', 'parent');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'pabe.Lp_t_bnd'});
model.result('pg6').feature('surf1').set('data', 'dset1');
model.result('pg6').feature('surf1').set('inheritplot', 'mslc1');
model.result('pg6').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').run;
model.result.dataset('grid1').set('parmin1', -2);
model.result.dataset('grid1').set('parmax1', 2);
model.result.dataset('grid1').set('parmin2', -6);
model.result.dataset('grid1').set('parmax2', 6);
model.result.dataset('grid1').set('parmin3', -6);
model.result.dataset('grid1').set('parmax3', 6);
model.result.dataset('grid1').set('res2', 60);
model.result.dataset('grid1').set('res3', 60);
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg5').feature('mslc1').set('xcoord', 0.2);
model.result('pg5').feature('mslc1').set('ynumber', '0');
model.result('pg5').feature('mslc1').set('znumber', '0');
model.result('pg5').run;
model.result('pg5').feature('surf1').active(false);
model.result('pg5').run;
model.result('pg5').feature.duplicate('mslc2', 'mslc1');
model.result('pg5').run;
model.result('pg5').feature('mslc2').set('data', 'dset1');
model.result('pg5').feature('mslc2').set('expr', 'acpr.p_t');
model.result('pg5').feature('mslc2').set('titletype', 'none');
model.result('pg5').feature('mslc2').set('inheritplot', 'mslc1');
model.result('pg5').run;
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').label('3D Spatial Response');
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').create('rp1', 'RadiationPattern');
model.result('pg7').feature('rp1').set('expr', 'pabe.Lp_t-74.4');
model.result('pg7').feature('rp1').set('thetadisc', 50);
model.result('pg7').feature('rp1').set('phidisc', 100);
model.result('pg7').feature('rp1').set('sphere', 'manual');
model.result('pg7').feature('rp1').set('radius', 100);
model.result('pg7').feature('rp1').set('grid', 'finer');
model.result('pg7').run;
model.result.create('pg8', 'PolarGroup');
model.result('pg8').run;
model.result('pg8').label('Spatial Response in xz-plane');
model.result('pg8').create('rp1', 'RadiationPattern');
model.result('pg8').feature('rp1').set('markerpos', 'datapoints');
model.result('pg8').feature('rp1').set('linewidth', 'preference');
model.result('pg8').feature('rp1').set('expr', 'pabe.Lp_t');
model.result('pg8').feature('rp1').set('phidisc', 360);
model.result('pg8').feature('rp1').set('radius', 100);
model.result('pg8').feature('rp1').set('normal', [0 1 0]);
model.result('pg8').feature('rp1').set('legend', true);
model.result('pg8').feature('rp1').set('legendmethod', 'manual');
model.result('pg8').feature('rp1').setIndex('legends', 'Computed', 0);
model.result('pg8').feature.duplicate('rp2', 'rp1');
model.result('pg8').run;
model.result('pg8').feature('rp2').set('expr', '10*log10(0.5*abs(p_an)^2/abs(acpr.pref_SPL)^2)');
model.result('pg8').feature('rp2').set('linestyle', 'none');
model.result('pg8').feature('rp2').set('linemarker', 'point');
model.result('pg8').feature('rp2').set('markerpos', 'interp');
model.result('pg8').feature('rp2').set('markers', 90);
model.result('pg8').feature('rp2').setIndex('legends', 'Analytical', 0);
model.result('pg8').run;
model.result('pg7').run;

model.title('Bessel Panel');

model.description(['The sound field from a panel of loudspeakers with different amplitudes and phases is investigated. The speakers are arranged so that the far-field pressure distribution resembles that of a single speaker. The model uses a BEM' native2unicode(hex2dec({'20' '13'}), 'unicode') 'FEM approach to solve the radiation from the idealized speaker panel.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('bessel_panel.mph');

model.modelNode.label('Components');

out = model;
