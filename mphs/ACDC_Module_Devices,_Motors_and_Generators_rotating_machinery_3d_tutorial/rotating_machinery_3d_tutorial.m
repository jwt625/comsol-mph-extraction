function out = model
%
% rotating_machinery_3d_tutorial.m
%
% Model exported on May 26 2025, 21:24 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Devices,_Motors_and_Generators');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('rmm', 'RotatingMachineryMagnetic', 'geom1');
model.physics('rmm').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/rmm', true);

model.geom('geom1').insertFile('rotating_machinery_3d_tutorial_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');

model.view('view1').set('renderwireframe', true);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(2);
model.selection('sel1').label('src');
model.selection('sel1').set([11 12 14 15]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').geom(2);
model.selection('sel2').label('dst');
model.selection('sel2').set([17 18 28 33]);

model.param.set('omega', '3000[rpm]');
model.param.descr('omega', 'Rotational velocity');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat2').label('Copper');
model.material('mat2').set('family', 'copper');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('emissivity', '0.5');
model.material('mat2').propertyGroup('def').set('density', '8940[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '126e9[Pa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.34');
model.material('mat2').propertyGroup('linzRes').set('rho0', '1.667e-8[ohm*m]');
model.material('mat2').propertyGroup('linzRes').set('alpha', '3.862e-3[1/K]');
model.material('mat2').propertyGroup('linzRes').set('Tref', '293.15[K]');
model.material('mat2').propertyGroup('linzRes').addInput('temperature');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('RemanentFluxDensity', 'Remanent flux density');
model.material('mat3').label('N35 (Sintered NdFeB)');
model.material('mat3').set('family', 'chrome');
model.material('mat3').propertyGroup('def').set('electricconductivity', {'1/1.4[uohm*m]' '0' '0' '0' '1/1.4[uohm*m]' '0' '0' '0' '1/1.4[uohm*m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('RemanentFluxDensity').set('murec', {'1.05' '0' '0' '0' '1.05' '0' '0' '0' '1.05'});
model.material('mat3').propertyGroup('RemanentFluxDensity').set('normBr', '1.21[T]');
model.material('mat2').selection.set([4 5]);

model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').geom(3);
model.selection('sel3').label('Rotating disk');
model.selection('sel3').set([4 5]);

model.material('mat2').selection.named('sel3');
model.material('mat3').selection.set([2]);

model.physics('rmm').create('mfc1', 'MagneticFluxConservation', 3);
model.physics('rmm').feature('mfc1').label('Air, Formulation for Nonconducting Domain');
model.physics('rmm').feature('mfc1').selection.set([1 3]);
model.physics('rmm').create('ncmag1', 'NonconductingMagnet', 3);
model.physics('rmm').feature('ncmag1').selection.set([2]);
model.physics('rmm').feature('ncmag1').feature('north1').selection.set([10]);
model.physics('rmm').feature('ncmag1').feature('south1').selection.set([5]);
model.physics('rmm').create('gfa1', 'GaugeFixingA', 3);
model.physics('rmm').feature('gfa1').selection.named('sel3');
model.physics('rmm').feature('gfa1').set('SetPointConstraint', true);

model.common.create('rot1', 'RotatingDomain', 'comp1');
model.common('rot1').selection.all;
model.common('rot1').selection.set([3 4 5]);
model.common('rot1').set('rotationType', 'rotationalVelocity');
model.common('rot1').set('angularVelocity', 'omega');

model.physics('rmm').create('cont1', 'Continuity', 2);
model.physics('rmm').feature('cont1').set('pairs', {'ap1'});
model.physics('rmm').create('zsp1', 'ZeroMagneticScalarPotential', 0);
model.physics('rmm').feature('zsp1').selection.set([1]);

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.named('sel1');
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', '2e-3');
model.mesh('mesh1').create('ftri2', 'FreeTri');
model.mesh('mesh1').feature('ftri2').selection.named('sel2');
model.mesh('mesh1').feature('ftri2').create('size1', 'Size');
model.mesh('mesh1').feature('ftri2').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri2').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri2').feature('size1').set('hmax', '7e-4');
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftet1').feature('size1').selection.set([5 6 7 8 9 10 21 22 23 24 25 26 27 29 30 31 32]);
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', '7e-4');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.set([1 2 4 5]);
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(3);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('bl1').selection.named('sel3');
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([21 22 23 24 25 26 27 29 30 31 32]);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', 1.0E-4);
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 2);
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', 7.0E-5);
model.mesh('mesh1').feature('bl1').feature('blp').set('blstretch', 1.3);
model.mesh('mesh1').create('ftet2', 'FreeTet');
model.mesh('mesh1').run;

model.physics('rmm').prop('ShapeProperty').set('order_magneticvectorpotential', 1);
model.physics('rmm').prop('ShapeProperty').set('order_magneticscalarpotential', 1);
model.physics('rmm').feature('cont1').set('constraintOptions', 'weakConstraints');

model.study('std1').label('Solid Copper Disk');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('tlist', '0 1/omega/2');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', '0 1/omega/2');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('tout', 'tstepsclosest');
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('tout', 'tsteps');
model.sol('sol1').feature('t1').set('tstepsbdf', 'free');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 25);
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Magnetic Flux Density Norm (rmm)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 41, 0);
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('solutionparams', 'parent');
model.result('pg1').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg1').feature('mslc1').set('xcoord', 'rmm.CPx');
model.result('pg1').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg1').feature('mslc1').set('ycoord', 'rmm.CPy');
model.result('pg1').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('mslc1').set('zcoord', 'rmm.CPz');
model.result('pg1').feature('mslc1').set('colortable', 'Prism');
model.result('pg1').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result('pg1').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg1').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg1').feature('strmsl1').set('xcoord', 'rmm.CPx');
model.result('pg1').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg1').feature('strmsl1').set('ycoord', 'rmm.CPy');
model.result('pg1').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('strmsl1').set('zcoord', 'rmm.CPz');
model.result('pg1').feature('strmsl1').set('titletype', 'none');
model.result('pg1').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg1').feature('strmsl1').set('udist', 0.02);
model.result('pg1').feature('strmsl1').set('maxlen', 0.4);
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('inheritcolor', false);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('data', 'parent');
model.result('pg1').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg1').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg1').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg1').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg1').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg1').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg1').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').run;
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').run;
model.result('pg2').set('edges', false);
model.result('pg2').label('Currents and Solid Domain Boundaries Representation');

model.view('view1').set('showgrid', false);

model.result('pg2').run;
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', '1');
model.result('pg2').feature('surf1').set('coloring', 'uniform');
model.result('pg2').feature('surf1').set('color', 'gray');
model.result('pg2').feature('surf1').create('sel1', 'Selection');
model.result('pg2').feature('surf1').feature('sel1').selection.set([5 6 7 8 9 10 23 29 30 31 32]);
model.result('pg2').run;
model.result('pg2').create('arwv1', 'ArrowVolume');
model.result('pg2').feature('arwv1').set('expr', {'rmm.Jx' 'rmm.Jy' 'rmm.Jz'});
model.result('pg2').feature('arwv1').set('descr', 'Current density (spatial frame)');
model.result('pg2').feature('arwv1').set('xnumber', 10);
model.result('pg2').feature('arwv1').set('ynumber', 10);
model.result('pg2').feature('arwv1').set('znumber', 10);
model.result('pg2').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg2').feature('arwv1').set('logrange', 10);
model.result('pg2').feature('arwv1').create('sel1', 'Selection');
model.result('pg2').feature('arwv1').feature('sel1').selection.named('sel3');
model.result('pg2').run;
model.result('pg2').feature('arwv1').create('col1', 'Color');
model.result('pg2').run;
model.result('pg2').feature('arwv1').feature('col1').set('expr', 'rmm.normJ');
model.result('pg2').run;
model.result.numerical.create('int1', 'IntVolume');
model.result.numerical('int1').selection.named('sel3');
model.result.numerical('int1').setIndex('expr', 'rmm.Qh', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Volume Integration 1');
model.result.numerical('int1').set('table', 'tbl1');
model.result.numerical('int1').setResult;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').set('data', 'none');
model.result('pg3').create('tblp1', 'Table');
model.result('pg3').feature('tblp1').set('source', 'table');
model.result('pg3').feature('tblp1').set('table', 'tbl1');
model.result('pg3').feature('tblp1').set('linewidth', 'preference');
model.result('pg3').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg3').run;

model.physics.create('ec', 'ConductiveMedia', 'geom1');
model.physics('ec').model('comp1');

model.study('std1').feature('stat').setSolveFor('/physics/ec', true);
model.study('std1').feature('time').setSolveFor('/physics/ec', true);

model.physics('ec').selection.named('sel3');
model.physics('ec').prop('ShapeProperty').set('order_electricpotential', 1);
model.physics('ec').feature('cucn1').setIndex('materialType', 'solid', 0);
model.physics('ec').create('ecd1', 'ExternalCurrentDensity', 3);
model.physics('ec').feature('ecd1').selection.named('sel3');
model.physics('ec').feature('ecd1').set('Je', {'rmm.Jix' 'rmm.Jiy' 'rmm.Jiz'});
model.physics('ec').create('ein2', 'ElectricInsulation', 2);
model.physics('ec').feature('ein2').selection.set([26]);
model.physics('ec').create('pot1', 'ElectricPotential', 0);
model.physics('ec').feature('pot1').selection.set([27 29]);
model.physics('rmm').create('ecd1', 'ExternalCurrentDensity', 3);
model.physics('rmm').feature('ecd1').selection.named('sel3');
model.physics('rmm').feature('ecd1').set('Je', {'ec.Jx-rmm.Jix' 'ec.Jy-rmm.Jiy' 'ec.Jz-rmm.Jiz'});

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/rmm', true);
model.study('std2').feature('stat').setSolveFor('/physics/ec', true);
model.study('std2').label('Laminated Copper Disk');
model.study('std2').feature.copy('time1', 'std1/time');
model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').set('disabledphysics', {'rmm/ecd1'});
model.study('std1').feature('stat').setSolveFor('/physics/ec', false);
model.study('std1').feature('stat').set('disabledphysics', {'rmm/ecd1' 'ec'});
model.study('std1').feature('time').set('useadvanceddisable', true);
model.study('std1').feature('time').set('disabledphysics', {'rmm/ecd1'});
model.study('std1').feature('time').setSolveFor('/physics/ec', false);
model.study('std1').feature('time').set('disabledphysics', {'rmm/ecd1' 'ec'});

model.sol.create('sol3');
model.sol('sol3').study('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'stat');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'stat');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').create('se1', 'Segregated');
model.sol('sol3').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol3').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol3').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V'});
model.sol('sol3').feature('s1').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol3').feature('s1').feature('se1').feature('ss1').label('Electric Currents');
model.sol('sol3').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol3').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_A' 'comp1_Vm' 'comp1_rmm_psi' 'comp1_Vm_lm'});
model.sol('sol3').feature('s1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol3').feature('s1').feature('se1').feature('ss2').label('Rotating Machinery, Magnetic');
model.sol('sol3').feature('s1').create('i1', 'Iterative');
model.sol('sol3').feature('s1').feature('i1').set('linsolver', 'cg');
model.sol('sol3').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('coarseningmethod', 'classic');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').create('su1', 'StoreSolution');
model.sol('sol3').create('st2', 'StudyStep');
model.sol('sol3').feature('st2').set('study', 'std2');
model.sol('sol3').feature('st2').set('studystep', 'time1');
model.sol('sol3').create('v2', 'Variables');
model.sol('sol3').feature('v2').set('initmethod', 'sol');
model.sol('sol3').feature('v2').set('initsol', 'sol3');
model.sol('sol3').feature('v2').set('initsoluse', 'sol4');
model.sol('sol3').feature('v2').set('notsolmethod', 'sol');
model.sol('sol3').feature('v2').set('notsol', 'sol3');
model.sol('sol3').feature('v2').set('notsoluse', 'sol4');
model.sol('sol3').feature('v2').set('control', 'time1');
model.sol('sol3').create('t1', 'Time');
model.sol('sol3').feature('t1').set('tlist', '0 1/omega/2');
model.sol('sol3').feature('t1').set('plot', 'off');
model.sol('sol3').feature('t1').set('plotgroup', 'pg1');
model.sol('sol3').feature('t1').set('plotfreq', 'tout');
model.sol('sol3').feature('t1').set('probesel', 'all');
model.sol('sol3').feature('t1').set('probes', {});
model.sol('sol3').feature('t1').set('probefreq', 'tsteps');
model.sol('sol3').feature('t1').set('tout', 'tstepsclosest');
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('reacf', true);
model.sol('sol3').feature('t1').set('storeudot', true);
model.sol('sol3').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol3').feature('t1').set('endtimeinterpolation', true);
model.sol('sol3').feature('t1').set('estrat', 'exclude');
model.sol('sol3').feature('t1').set('control', 'time1');
model.sol('sol3').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('t1').create('se1', 'Segregated');
model.sol('sol3').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol3').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_V'});
model.sol('sol3').feature('t1').create('d1', 'Direct');
model.sol('sol3').feature('t1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol3').feature('t1').feature('se1').feature('ss1').label('Electric Currents');
model.sol('sol3').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol3').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_A' 'comp1_Vm' 'comp1_rmm_psi' 'comp1_Vm_lm'});
model.sol('sol3').feature('t1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol3').feature('t1').feature('se1').feature('ss2').label('Rotating Machinery, Magnetic');
model.sol('sol3').feature('t1').create('i1', 'Iterative');
model.sol('sol3').feature('t1').feature('i1').set('linsolver', 'cg');
model.sol('sol3').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol3').feature('t1').feature('i1').feature('mg1').set('coarseningmethod', 'classic');
model.sol('sol3').feature('t1').feature.remove('fcDef');
model.sol('sol3').attach('std2');
model.sol('sol3').feature('t1').set('tout', 'tsteps');
model.sol('sol3').feature('t1').set('tstepsbdf', 'free');
model.sol('sol3').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol3').feature('t1').feature('fc1').set('maxiter', 25);
model.sol('sol3').runAll;

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Magnetic Flux Density Norm (rmm) 1');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 52, 0);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 52, 0);
model.result('pg4').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond1/pg1');
model.result('pg4').feature.create('mslc1', 'Multislice');
model.result('pg4').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg4').feature('mslc1').set('solutionparams', 'parent');
model.result('pg4').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg4').feature('mslc1').set('xcoord', 'rmm.CPx');
model.result('pg4').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg4').feature('mslc1').set('ycoord', 'rmm.CPy');
model.result('pg4').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg4').feature('mslc1').set('zcoord', 'rmm.CPz');
model.result('pg4').feature('mslc1').set('colortable', 'Prism');
model.result('pg4').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg4').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg4').feature('mslc1').set('data', 'parent');
model.result('pg4').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg4').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg4').feature('strmsl1').set('xcoord', 'rmm.CPx');
model.result('pg4').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg4').feature('strmsl1').set('ycoord', 'rmm.CPy');
model.result('pg4').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg4').feature('strmsl1').set('zcoord', 'rmm.CPz');
model.result('pg4').feature('strmsl1').set('titletype', 'none');
model.result('pg4').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg4').feature('strmsl1').set('udist', 0.02);
model.result('pg4').feature('strmsl1').set('maxlen', 0.4);
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('inheritcolor', false);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('data', 'parent');
model.result('pg4').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg4').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg4').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg4').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg4').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg4').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg4').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Electric Potential (ec)');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 52, 0);
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('showlegendsmaxmin', true);
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 52, 0);
model.result('pg5').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond2/pg1');
model.result('pg5').feature.create('vol1', 'Volume');
model.result('pg5').feature('vol1').set('showsolutionparams', 'on');
model.result('pg5').feature('vol1').set('solutionparams', 'parent');
model.result('pg5').feature('vol1').set('expr', 'V');
model.result('pg5').feature('vol1').set('colortable', 'Dipole');
model.result('pg5').feature('vol1').set('showsolutionparams', 'on');
model.result('pg5').feature('vol1').set('data', 'parent');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Electric Field Norm (ec)');
model.result('pg6').set('data', 'dset3');
model.result('pg6').setIndex('looplevel', 52, 0);
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('showlegendsmaxmin', true);
model.result('pg6').set('data', 'dset3');
model.result('pg6').setIndex('looplevel', 52, 0);
model.result('pg6').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');
model.result('pg6').feature.create('mslc1', 'Multislice');
model.result('pg6').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg6').feature('mslc1').set('solutionparams', 'parent');
model.result('pg6').feature('mslc1').set('expr', 'ec.normE');
model.result('pg6').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg6').feature('mslc1').set('xcoord', 'ec.CPx');
model.result('pg6').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg6').feature('mslc1').set('ycoord', 'ec.CPy');
model.result('pg6').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg6').feature('mslc1').set('zcoord', 'ec.CPz');
model.result('pg6').feature('mslc1').set('colortable', 'Prism');
model.result('pg6').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg6').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg6').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg6').feature('mslc1').set('data', 'parent');
model.result('pg6').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg6').feature('strmsl1').set('expr', {'ec.Ex' 'ec.Ey' 'ec.Ez'});
model.result('pg6').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg6').feature('strmsl1').set('xcoord', 'ec.CPx');
model.result('pg6').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg6').feature('strmsl1').set('ycoord', 'ec.CPy');
model.result('pg6').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg6').feature('strmsl1').set('zcoord', 'ec.CPz');
model.result('pg6').feature('strmsl1').set('titletype', 'none');
model.result('pg6').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg6').feature('strmsl1').set('udist', 0.02);
model.result('pg6').feature('strmsl1').set('maxlen', 0.4);
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('inheritcolor', false);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('data', 'parent');
model.result('pg6').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg6').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg6').feature('strmsl1').feature('col1').set('expr', 'ec.normE');
model.result('pg6').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg6').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg6').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg6').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg6').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg6').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg4').run;
model.result('pg4').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').label('Current Perpendicular to the Insulating Plane');
model.result('pg7').set('data', 'dset3');
model.result('pg7').create('vol1', 'Volume');
model.result('pg7').feature('vol1').set('expr', 'rmm.Jz');
model.result('pg7').feature('vol1').set('unit', 'A/mm^2');
model.result('pg7').feature('vol1').set('colortable', 'WaveLight');
model.result('pg7').feature('vol1').set('colorscalemode', 'linearsymmetric');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').set('data', 'dset1');
model.result('pg7').run;
model.result('pg7').set('data', 'dset3');
model.result.numerical.duplicate('int2', 'int1');
model.result.numerical('int2').set('data', 'dset3');
model.result.numerical('int2').set('table', 'tbl1');
model.result.numerical('int2').appendResult;
model.result('pg3').run;
model.result('pg3').feature('tblp1').set('legend', true);
model.result('pg3').feature('tblp1').set('legendmethod', 'manual');
model.result('pg3').feature('tblp1').setIndex('legends', 'Solid copper disk', 0);
model.result('pg3').feature('tblp1').setIndex('legends', 'Laminated copper disk', 1);
model.result('pg3').run;
model.result('pg3').label('Losses in the Copper Disk');
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Losses in the copper disk with and without an insulating layer (W)');
model.result('pg3').set('legendpos', 'lowerright');
model.result('pg3').run;

model.physics('rmm').create('pcond1', 'PassiveConductor', 3);
model.physics('rmm').feature('pcond1').selection.named('sel3');

model.study('std1').feature('stat').set('disabledphysics', {'rmm/ecd1' 'ec' 'rmm/pcond1'});
model.study('std1').feature('time').set('disabledphysics', {'rmm/ecd1' 'ec' 'rmm/pcond1'});
model.study('std2').feature('stat').set('useadvanceddisable', true);
model.study('std2').feature('stat').set('disabledphysics', {'rmm/pcond1'});
model.study('std2').feature('time1').set('useadvanceddisable', true);
model.study('std2').feature('time1').set('disabledphysics', {'rmm/pcond1'});
model.study.create('std3');
model.study('std3').create('stat', 'Stationary');
model.study('std3').feature('stat').setSolveFor('/physics/rmm', true);
model.study('std3').feature('stat').setSolveFor('/physics/ec', true);
model.study('std3').feature('stat').setEntry('activate', 'ec', false);
model.study('std3').feature('stat').set('useadvanceddisable', true);
model.study('std3').feature('stat').set('disabledphysics', {'rmm/ecd1'});
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').set('tlist', '0 1/omega/2');
model.study('std3').feature('time').setEntry('activate', 'ec', false);
model.study('std3').feature('time').set('useadvanceddisable', true);
model.study('std3').feature('time').set('disabledphysics', {'rmm/ecd1'});
model.study('std3').label('Laminated Copper Disk with Passive Conductor');

model.sol.create('sol5');
model.sol('sol5').study('std3');
model.sol('sol5').create('st1', 'StudyStep');
model.sol('sol5').feature('st1').set('study', 'std3');
model.sol('sol5').feature('st1').set('studystep', 'stat');
model.sol('sol5').create('v1', 'Variables');
model.sol('sol5').feature('v1').set('control', 'stat');
model.sol('sol5').create('s1', 'Stationary');
model.sol('sol5').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol5').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol5').feature('s1').feature.remove('fcDef');
model.sol('sol5').create('su1', 'StoreSolution');
model.sol('sol5').create('st2', 'StudyStep');
model.sol('sol5').feature('st2').set('study', 'std3');
model.sol('sol5').feature('st2').set('studystep', 'time');
model.sol('sol5').create('v2', 'Variables');
model.sol('sol5').feature('v2').set('initmethod', 'sol');
model.sol('sol5').feature('v2').set('initsol', 'sol5');
model.sol('sol5').feature('v2').set('initsoluse', 'sol6');
model.sol('sol5').feature('v2').set('notsolmethod', 'sol');
model.sol('sol5').feature('v2').set('notsol', 'sol5');
model.sol('sol5').feature('v2').set('notsoluse', 'sol6');
model.sol('sol5').feature('v2').set('control', 'time');
model.sol('sol5').create('t1', 'Time');
model.sol('sol5').feature('t1').set('tlist', '0 1/omega/2');
model.sol('sol5').feature('t1').set('plot', 'off');
model.sol('sol5').feature('t1').set('plotgroup', 'pg1');
model.sol('sol5').feature('t1').set('plotfreq', 'tout');
model.sol('sol5').feature('t1').set('probesel', 'all');
model.sol('sol5').feature('t1').set('probes', {});
model.sol('sol5').feature('t1').set('probefreq', 'tsteps');
model.sol('sol5').feature('t1').set('tout', 'tstepsclosest');
model.sol('sol5').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol5').feature('t1').set('reacf', true);
model.sol('sol5').feature('t1').set('storeudot', true);
model.sol('sol5').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol5').feature('t1').set('endtimeinterpolation', true);
model.sol('sol5').feature('t1').set('estrat', 'exclude');
model.sol('sol5').feature('t1').set('maxorder', 2);
model.sol('sol5').feature('t1').set('control', 'time');
model.sol('sol5').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol5').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol5').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol5').feature('t1').feature.remove('fcDef');
model.sol('sol5').attach('std3');
model.sol('sol5').feature('t1').set('tout', 'tsteps');
model.sol('sol5').feature('t1').set('tstepsbdf', 'free');
model.sol('sol5').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol5').feature('t1').feature('fc1').set('maxiter', 25);
model.sol('sol5').runAll;

model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').label('Magnetic Flux Density Norm (rmm) 2');
model.result('pg8').set('data', 'dset5');
model.result('pg8').setIndex('looplevel', 35, 0);
model.result('pg8').set('frametype', 'spatial');
model.result('pg8').set('showlegendsmaxmin', true);
model.result('pg8').set('data', 'dset5');
model.result('pg8').setIndex('looplevel', 35, 0);
model.result('pg8').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond1/pg1');
model.result('pg8').feature.create('mslc1', 'Multislice');
model.result('pg8').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg8').feature('mslc1').set('solutionparams', 'parent');
model.result('pg8').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg8').feature('mslc1').set('xcoord', 'rmm.CPx');
model.result('pg8').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg8').feature('mslc1').set('ycoord', 'rmm.CPy');
model.result('pg8').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg8').feature('mslc1').set('zcoord', 'rmm.CPz');
model.result('pg8').feature('mslc1').set('colortable', 'Prism');
model.result('pg8').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg8').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg8').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg8').feature('mslc1').set('data', 'parent');
model.result('pg8').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg8').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg8').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg8').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg8').feature('strmsl1').set('xcoord', 'rmm.CPx');
model.result('pg8').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg8').feature('strmsl1').set('ycoord', 'rmm.CPy');
model.result('pg8').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg8').feature('strmsl1').set('zcoord', 'rmm.CPz');
model.result('pg8').feature('strmsl1').set('titletype', 'none');
model.result('pg8').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg8').feature('strmsl1').set('udist', 0.02);
model.result('pg8').feature('strmsl1').set('maxlen', 0.4);
model.result('pg8').feature('strmsl1').set('maxtime', Inf);
model.result('pg8').feature('strmsl1').set('inheritcolor', false);
model.result('pg8').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg8').feature('strmsl1').set('maxtime', Inf);
model.result('pg8').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg8').feature('strmsl1').set('maxtime', Inf);
model.result('pg8').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg8').feature('strmsl1').set('maxtime', Inf);
model.result('pg8').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg8').feature('strmsl1').set('maxtime', Inf);
model.result('pg8').feature('strmsl1').set('data', 'parent');
model.result('pg8').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg8').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg8').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg8').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg8').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg8').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg8').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg8').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg8').run;
model.result.numerical.duplicate('int3', 'int2');
model.result.numerical('int3').set('data', 'dset5');
model.result.numerical('int3').set('table', 'tbl1');
model.result.numerical('int3').appendResult;
model.result('pg3').run;
model.result('pg3').feature('tblp1').setIndex('legends', 'Laminated copper disk with Passive Conductor', 2);
model.result('pg3').run;
model.result('pg2').run;
model.result('pg2').run;

model.title('Rotating Machinery 3D Tutorial');

model.description('The circular motion of a cylindrical homogeneous copper rotor in the magnetic field from a stationary permanent magnet generates induced eddy currents in the rotor. The magnetic field penetration and eddy current distribution is limited by the velocity skin effect. The example is a general introduction to using the rotating machinery interface in 3D.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;

model.label('rotating_machinery_3d_tutorial.mph');

model.modelNode.label('Components');

out = model;
