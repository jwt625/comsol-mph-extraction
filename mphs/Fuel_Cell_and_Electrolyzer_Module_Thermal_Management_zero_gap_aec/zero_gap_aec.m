function out = model
%
% zero_gap_aec.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fuel_Cell_and_Electrolyzer_Module/Thermal_Management');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('we', 'WaterElectrolyzer', 'geom1');
model.physics('we').model('comp1');
model.physics('we').prop('H2GasMixture').set('H2O', '1');
model.physics('we').prop('H2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('we').prop('O2GasMixture').set('H2O', '1');
model.physics('we').prop('O2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('we').prop('DefaultElectrodeReactionSettings').set('ElectrolyteType', 'HydroxideExchange');
model.physics('we').prop('DefaultElectrodeReactionSettings').set('OperationMode', 'Electrolyzer');
model.physics('we').prop('DefaultElectrodeReactionSettings').set('TRHE', '50[degC]');
model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'CompressibleMALT03');
model.physics.create('dl', 'PorousMediaFlowDarcy', 'geom1');
model.physics('dl').model('comp1');
model.physics.create('phtr', 'PhaseTransportFreePorousMedia', 'geom1', {'s1' 's2'});
model.physics.create('ht', 'HeatTransferInSolidsAndFluids', 'geom1');
model.physics('ht').model('comp1');

model.multiphysics.create('mfpm1', 'MultiphaseFlowInPorousMedia', 'geom1', 3);
model.multiphysics('mfpm1').set('multiphaseflow_physics', 'phtr');
model.multiphysics('mfpm1').set('darcyc_physics', 'dl');
model.multiphysics('mfpm1').selection.all;
model.multiphysics.create('nsd1', 'NavierStokesDarcyCoupling', 'geom1', 2);
model.multiphysics('nsd1').set('NavierStokes_physics', 'spf');
model.multiphysics('nsd1').set('Darcy_physics', 'dl');
model.multiphysics('nsd1').selection.all;
model.multiphysics.create('mfmm1', 'MultiphaseFlowMixtureModel', 'geom1', 3);
model.multiphysics('mfmm1').set('multiphaseflow_physics', 'phtr');
model.multiphysics('mfmm1').set('fluidflow_physics', 'spf');
model.multiphysics('mfmm1').selection.all;

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/we', true);
model.study('std1').feature('cdi').setSolveFor('/physics/spf', true);
model.study('std1').feature('cdi').setSolveFor('/physics/dl', true);
model.study('std1').feature('cdi').setSolveFor('/physics/phtr', true);
model.study('std1').feature('cdi').setSolveFor('/physics/ht', true);
model.study('std1').feature('cdi').setSolveFor('/multiphysics/mfpm1', true);
model.study('std1').feature('cdi').setSolveFor('/multiphysics/nsd1', true);
model.study('std1').feature('cdi').setSolveFor('/multiphysics/mfmm1', true);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/we', true);
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/physics/dl', true);
model.study('std1').feature('stat').setSolveFor('/physics/phtr', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/mfpm1', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/nsd1', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/mfmm1', true);

model.geom('geom1').insertFile('zero_gap_aec_geom_sequence.mph', 'geom1');
model.geom('geom1').run('mcf1');

model.param.label('Geometry Parameters');
model.param.create('par2');
model.param('par2').label('Physics Parameters');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('E_cell', 'E_cell_lower', 'Cell voltage');
model.param('par2').set('T0', '80[degC]', 'Initial temperature');
model.param('par2').set('eps_pores', '0.75', 'GDE porosity');
model.param('par2').set('perm_GDE', '1e-10[m^2]', 'GDE permeability');
model.param('par2').set('v_in', '0.01[m/s]', 'Inlet flow velocity');
model.param('par2').set('p_out', '25[atm]', 'Outlet pressure');
model.param('par2').set('epsl_sep', '0.5', 'Diaphragm porosity');
model.param('par2').set('c_KOH', '5[M]', 'Electrolyte concentration');
model.param('par2').set('Av', '1e4[m^2/m^3]', 'Specific surface area of GDE');
model.param('par2').set('s_g_in', '0.01', 'Inlet gas volume fraction');
model.param('par2').set('sigma_Ni_eff', '1e5[S/m]', 'Nickel felt effective electrical conductivity');
model.param('par2').set('i0_ref_her', '1[A/m^2]', 'Reference exchange current density, hydrogen evolution reaction');
model.param('par2').set('i0_ref_oer', '0.1[A/m^2]', 'Reference exchange current density, oxygen evolution reaction');
model.param('par2').set('Cp_KOH', '3.37[J/(g*K)]', 'KOH heat capacity');
model.param('par2').set('kappa_KOH', '0.66[W/m/K]', 'KOH thermal conductivity');
model.param('par2').set('kappa_sep', '1[W/m/K]', 'Diaphragm thermal conductivity');
model.param('par2').set('kappa_Ni', '100[W/m/K]', 'Nickel thermal conductivity');
model.param('par2').set('rho_sep', '1000[kg/m^3]', 'Diaphragm density');
model.param('par2').set('rho_Ni', '8900[kg/m^3]', 'Nickel density');
model.param('par2').set('Cp_sep', '1[J/(g*K)]', 'Diaphragm heat capacity');
model.param('par2').set('Cp_Ni', '0.44[J/(g*K)]', 'Nickel heat capacity');
model.param('par2').set('E_cell_lower', '1.5[V]', 'Lower cell voltage in polarization plot');
model.param('par2').set('E_cell_upper', '2.1[V]', 'Upper cell voltage in polarization plot');
model.param('par2').set('dpc_dsg', '100[Pa]', 'Capillary pressure coefficient');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').label('Steel AISI 4340');
model.material('mat1').set('family', 'steel');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.28');
model.material('mat1').selection.named('geom1_sel6');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('int2', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('int3', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('int4', 'Interpolation');
model.material('mat2').propertyGroup.create('ElectrolyteConductivity', 'Electrolyte conductivity');
model.material('mat2').label('Potassium Hydroxide, KOH');
model.material('mat2').comments([ newline ]);
model.material('mat2').set('family', 'water');
model.material('mat2').propertyGroup('def').func('int1').set('funcname', 'A_rho');
model.material('mat2').propertyGroup('def').func('int1').set('table', {'0' '-0.5031';  ...
'5' '-0.4821';  ...
'10' '-0.5026';  ...
'15' '-0.482';  ...
'20' '-0.4824';  ...
'25' '-0.4931';  ...
'30' '-0.4812';  ...
'35' '-0.4918';  ...
'40' '-0.4863';  ...
'45' '-0.4912';  ...
'50' '-0.4756';  ...
'55' '-0.4898';  ...
'60' '-0.4916';  ...
'65' '-0.4906';  ...
'70' '-0.4876';  ...
'80' '-0.4942';  ...
'90' '-0.5021';  ...
'100' '-0.501';  ...
'150' '-0.5206';  ...
'200' '-0.5538'});
model.material('mat2').propertyGroup('def').func('int1').set('fununit', {'1'});
model.material('mat2').propertyGroup('def').func('int1').set('argunit', {'1'});
model.material('mat2').propertyGroup('def').func('int2').set('funcname', 'B_rho');
model.material('mat2').propertyGroup('def').func('int2').set('table', {'0' '45.876';  ...
'5' '45.648';  ...
'10' '45.889';  ...
'15' '45.659';  ...
'20' '45.649';  ...
'25' '45.761';  ...
'30' '45.568';  ...
'35' '45.698';  ...
'40' '45.601';  ...
'45' '45.62';  ...
'50' '45.336';  ...
'55' '45.543';  ...
'60' '45.53';  ...
'65' '45.45';  ...
'70' '45.396';  ...
'80' '45.409';  ...
'90' '45.432';  ...
'100' '45.361';  ...
'150' '45.217';  ...
'200' '45.173'});
model.material('mat2').propertyGroup('def').func('int2').set('fununit', {'1'});
model.material('mat2').propertyGroup('def').func('int2').set('argunit', {'1'});
model.material('mat2').propertyGroup('def').func('int3').set('funcname', 'C_rho');
model.material('mat2').propertyGroup('def').func('int3').set('table', {'0' '1004.4';  ...
'5' '1003.8';  ...
'10' '1002.5';  ...
'15' '1002';  ...
'20' '1001';  ...
'25' '999.63';  ...
'30' '998.66';  ...
'35' '996.7';  ...
'40' '994.89';  ...
'45' '992.84';  ...
'50' '991.51';  ...
'55' '988.4';  ...
'60' '985.91';  ...
'65' '983.39';  ...
'70' '980.71';  ...
'80' '974.59';  ...
'90' '967.98';  ...
'100' '960.99';  ...
'150' '919.52';  ...
'200' '869.35'});
model.material('mat2').propertyGroup('def').func('int3').set('fununit', {'1'});
model.material('mat2').propertyGroup('def').func('int3').set('argunit', {'1'});
model.material('mat2').propertyGroup('def').func('int4').set('source', 'file');
model.material('mat2').propertyGroup('def').func('int4').set('importedname', 'mu_KOH.txt');
model.material('mat2').propertyGroup('def').func('int4').set('importeddim', '2D');
model.material('mat2').propertyGroup('def').func('int4').set('funcs', {'mu' '1'});
model.material('mat2').propertyGroup('def').func('int4').set('fununit', {'mPa*s'});
model.material('mat2').propertyGroup('def').func('int4').set('argunit', {'%' '1'});
model.material('mat2').propertyGroup('def').func('int4').set('sourcetype', 'model');
model.material('mat2').propertyGroup('def').func('int4').set('nargs', '2');
model.material('mat2').propertyGroup('def').func('int4').set('struct', 'spreadsheet');
model.material('mat2').propertyGroup('def').set('T_reg', 'min(max(T,0[degC]),200[degC])');
model.material('mat2').propertyGroup('def').descr('T_reg', '');
model.material('mat2').propertyGroup('def').set('M_reg', 'min(max(c,1e-6[M]),12[M])/1[M]');
model.material('mat2').propertyGroup('def').descr('M_reg', '');
model.material('mat2').propertyGroup('def').set('density', '(A_rho(T_degC)*M_reg^2+B_rho(T_degC)*M_reg+C_rho(T_degC))*1[kg/m^3]');
model.material('mat2').propertyGroup('def').set('INFO_PREFIX:density', ['R.J. Gilliama, J.W. Graydonb, D.W. Kirkb, S.J. Thorpea, Int. J. Hydrogen Energy 32 (2007) 359 ' native2unicode(hex2dec({'20' '13'}), 'unicode') ' 364']);
model.material('mat2').propertyGroup('def').set('T_degC', '(T_reg-0[degC])/1[K]');
model.material('mat2').propertyGroup('def').descr('T_degC', '');
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'mu(c*56.1[g/mol]/rho,T_degC)');
model.material('mat2').propertyGroup('def').set('INFO_PREFIX:dynamicviscosity', ['K. I. Kuznetsov et al "Measurements of the Dynamic Viscosity and Density of KOH' newline 'Solutions at Atmospheric Pressure", High Temperature, 2020, Vol. 58, No. 6, pp. 806' native2unicode(hex2dec({'20' '13'}), 'unicode') '811']);
model.material('mat2').propertyGroup('def').addInput('concentration');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material('mat2').propertyGroup('ElectrolyteConductivity').set('sigmal', {'(A*M+B*M^2+C*M*T_K+D*M/T_K+E*M^3+F*M^2*T_K^2)*1[S/cm]' '0' '0' '0' '(A*M+B*M^2+C*M*T_K+D*M/T_K+E*M^3+F*M^2*T_K^2)*1[S/cm]' '0' '0' '0' '(A*M+B*M^2+C*M*T_K+D*M/T_K+E*M^3+F*M^2*T_K^2)*1[S/cm]'});
model.material('mat2').propertyGroup('ElectrolyteConductivity').set('INFO_PREFIX:sigmal', ['R.J. Gilliama, J.W. Graydonb, D.W. Kirkb, S.J. Thorpea, Int. J. Hydrogen Energy 32 (2007) 359 ' native2unicode(hex2dec({'20' '13'}), 'unicode') ' 364']);
model.material('mat2').propertyGroup('ElectrolyteConductivity').set('T_K', 'def.T_reg/1[K]');
model.material('mat2').propertyGroup('ElectrolyteConductivity').descr('T_K', '');
model.material('mat2').propertyGroup('ElectrolyteConductivity').set('M', 'def.M_reg');
model.material('mat2').propertyGroup('ElectrolyteConductivity').descr('M', '');
model.material('mat2').propertyGroup('ElectrolyteConductivity').set('A', '-2.041');
model.material('mat2').propertyGroup('ElectrolyteConductivity').descr('A', '');
model.material('mat2').propertyGroup('ElectrolyteConductivity').set('B', '-0.0028');
model.material('mat2').propertyGroup('ElectrolyteConductivity').descr('B', '');
model.material('mat2').propertyGroup('ElectrolyteConductivity').set('C', '0.005332');
model.material('mat2').propertyGroup('ElectrolyteConductivity').descr('C', '');
model.material('mat2').propertyGroup('ElectrolyteConductivity').set('D', '207.2');
model.material('mat2').propertyGroup('ElectrolyteConductivity').descr('D', '');
model.material('mat2').propertyGroup('ElectrolyteConductivity').set('E', '0.001043');
model.material('mat2').propertyGroup('ElectrolyteConductivity').descr('E', '');
model.material('mat2').propertyGroup('ElectrolyteConductivity').set('F', '-0.0000003');
model.material('mat2').propertyGroup('ElectrolyteConductivity').descr('F', '');
model.material('mat2').propertyGroup('ElectrolyteConductivity').addInput('concentration');
model.material('mat2').propertyGroup('ElectrolyteConductivity').addInput('temperature');
model.material('mat2').selection.named('geom1_unisel6');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Variables - GDEs');
model.variable('var1').selection.geom('geom1', 3);
model.variable('var1').selection.named('geom1_unisel2');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('epsl', 'eps_pores*s_l', 'Electrolyte volume fraction');
model.variable('var1').set('pA_liquid', 'dl.pA', 'Absolute liquid pressure');
model.variable('var1').set('pA_gas', 'phtr.p_s_g', 'Absolute gas pressure');
model.variable('var1').set('rho_mix', 'dl.rho', 'Density of two-phase mixture');
model.variable('var1').set('rho_KOH', 'mat2.def.rho', 'Density of KOH');
model.variable('var1').set('Ngasx', 'phtr.rho_s_g*phtr.ux_s_g', 'Gas mass flux, x-component');
model.variable('var1').set('Ngasy', 'phtr.rho_s_g*phtr.uy_s_g', 'Gas mass flux, y-component');
model.variable('var1').set('Ngasz', 'phtr.rho_s_g*phtr.uz_s_g', 'Gas mass flux, z-component');
model.variable('var1').set('kappa_two_phase_mix', 's_g*we.kgas_mix+s_l*kappa_KOH', 'Thermal conductivity, liquid and gas mixture');
model.variable('var1').set('Cp_two_phase_mix', '(s_g*we.rho*we.Cp_mix+s_l*rho_KOH*Cp_KOH)/rho_mix', 'Heat capacity at constant pressure, gas phase');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Variables - Channels');
model.variable('var2').selection.geom('geom1', 3);
model.variable('var2').selection.named('geom1_unisel1');

% To import content from file, use:
% model.variable('var2').loadFile('FILENAME');
model.variable('var2').set('epsl', 's_l', 'Electrolyte volume fraction');
model.variable('var2').set('pA_liquid', 'spf.pA', 'Absolute liquid pressure');
model.variable('var2').set('pA_gas', 'spf.pA', 'Absolute gas pressure');
model.variable('var2').set('rho_mix', 'spf.rho', 'Density of two-phase mixture');
model.variable('var2').set('rho_KOH', 'mat2.def.rho', 'Density of KOH');
model.variable('var2').set('Ngasx', 'phtr.rho_s_g*(phtr.ux_s_g+phtr.ptp1.tm1.nuT*(-s_gx)/phtr.ScT)', 'Gas mass flux, x-component');
model.variable('var2').set('Ngasy', 'phtr.rho_s_g*(phtr.uy_s_g+phtr.ptp1.tm1.nuT*(-s_gy)/phtr.ScT)', 'Gas mass flux, y-component');
model.variable('var2').set('Ngasz', 'phtr.rho_s_g*(phtr.uz_s_g+phtr.ptp1.tm1.nuT*(-s_gz)/phtr.ScT)', 'Gas mass flux, z-component');
model.variable('var2').set('kappa_two_phase_mix', 's_g*we.kgas_mix+s_l*kappa_KOH', 'Thermal conductivity, liquid and gas mixture');
model.variable('var2').set('Cp_two_phase_mix', '(s_g*we.rho*we.Cp_mix+s_l*rho_KOH*Cp_KOH)/rho_mix', 'Heat capacity at constant pressure, gas phase');

model.physics('phtr').field('volumefraction').component(1, 's_l');
model.physics('phtr').field('volumefraction').component(2, 's_g');
model.physics('we').prop('H2GasMixture').set('GasPhaseDiffusion', false);
model.physics('we').prop('H2GasMixture').set('H2O_l', true);
model.physics('we').prop('O2GasMixture').set('GasPhaseDiffusion', false);
model.physics('we').prop('O2GasMixture').set('H2O_l', true);
model.physics('we').create('cc1', 'CurrentCollector', 3);
model.physics('we').feature('cc1').selection.named('geom1_sel6');
model.physics('we').feature('cc1').set('sigmas_mat', 'from_mat');
model.physics('we').create('h2gec1', 'H2GasElectrolyteCompartment', 3);
model.physics('we').feature('h2gec1').selection.named('geom1_sel4');
model.physics('we').feature('h2gec1').set('epsl', 'epsl');
model.physics('we').create('h2gde1', 'H2GasDiffusionElectrode', 3);
model.physics('we').feature('h2gde1').selection.named('geom1_sel5');
model.physics('we').feature('h2gde1').set('sigmas', {'sigma_Ni_eff' '0' '0' '0' 'sigma_Ni_eff' '0' '0' '0' 'sigma_Ni_eff'});
model.physics('we').feature('h2gde1').set('epsl', 'epsl');
model.physics('we').feature('h2gde1').feature('h2gder1').set('nuH2O', 0);
model.physics('we').feature('h2gde1').feature('h2gder1').set('nuH2O_l', -1);
model.physics('we').feature('h2gde1').feature('h2gder1').set('i0_ref', 'i0_ref_her');
model.physics('we').feature('h2gde1').feature('h2gder1').set('Av', 'Av');
model.physics('we').create('sep1', 'Separator', 3);
model.physics('we').feature('sep1').selection.named('geom1_sel1');
model.physics('we').feature('sep1').set('epsl', 'epsl_sep');
model.physics('we').create('o2gde1', 'O2GasDiffusionElectrode', 3);
model.physics('we').feature('o2gde1').selection.named('geom1_sel3');
model.physics('we').feature('o2gde1').set('sigmas', {'sigma_Ni_eff' '0' '0' '0' 'sigma_Ni_eff' '0' '0' '0' 'sigma_Ni_eff'});
model.physics('we').feature('o2gde1').set('epsl', 'epsl');
model.physics('we').feature('o2gde1').feature('o2gder1').set('nuH2O', 0);
model.physics('we').feature('o2gde1').feature('o2gder1').set('nuH2O_l', -1);
model.physics('we').feature('o2gde1').feature('o2gder1').set('Av', 'Av');
model.physics('we').create('o2gec1', 'O2GasElectrolyteCompartment', 3);
model.physics('we').feature('o2gec1').selection.named('geom1_sel2');
model.physics('we').feature('o2gec1').set('epsl', 'epsl');

model.cpl.create('linext1', 'LinearExtrusion', 'geom1');
model.cpl('linext1').selection.geom('geom1', 2);
model.cpl('linext1').selection.set([23]);
model.cpl('linext1').selection('srcvertex1').set([37]);
model.cpl('linext1').selection('srcvertex2').set([17]);
model.cpl('linext1').selection('srcvertex3').set([49]);
model.cpl('linext1').selection('dstvertex1').set([48]);
model.cpl('linext1').selection('dstvertex2').set([28]);
model.cpl('linext1').selection('dstvertex3').set([60]);

model.physics('we').feature('icph1').create('eip1', 'ElectrolytePotential', 2);
model.physics('we').feature('icph1').feature('eip1').selection.set([54]);
model.physics('we').feature('icph1').feature('eip1').set('philbnd', 'linext1(we.phil+2*E_cell)');
model.physics('we').feature('h2gasph1').set('minput_pressure_src', 'userdef');
model.physics('we').feature('h2gasph1').set('minput_pressure', 'pA_gas');
model.physics('we').feature('h2gasph1').set('MixtureSpecification', 'HumidifiedMixture');
model.physics('we').feature('h2gasph1').set('T_hum', 'T');
model.physics('we').feature('h2gasph1').set('pA_hum', 'pA_gas');
model.physics('we').feature('o2gasph1').set('minput_pressure_src', 'userdef');
model.physics('we').feature('o2gasph1').set('minput_pressure', 'pA_gas');
model.physics('we').feature('o2gasph1').set('MixtureSpecification', 'HumidifiedMixture');
model.physics('we').feature('o2gasph1').set('T_hum', 'T');
model.physics('we').feature('o2gasph1').set('pA_hum', 'pA_gas');
model.physics('we').create('constr1', 'PointwiseConstraint', 0);
model.physics('we').feature('constr1').label('Pointwise Constraint - Electrode Potential Ground');
model.physics('we').feature('constr1').selection.set([19]);
model.physics('we').feature('constr1').set('constraintExpression', 'we.phis');
model.physics('spf').selection.named('geom1_unisel1');
model.physics('spf').prop('PhysicalModelProperty').set('pref', 'p_out');
model.physics('spf').feature('fp1').set('minput_concentration_src', 'fromCommonDef');
model.physics('spf').create('inl1', 'InletBoundary', 2);
model.physics('spf').feature('inl1').selection.named('geom1_unisel4');
model.physics('spf').feature('inl1').set('BoundaryCondition', 'FullyDevelopedFlow');
model.physics('spf').feature('inl1').set('Uavfdf', 'v_in');
model.physics('spf').create('out1', 'OutletBoundary', 2);
model.physics('spf').feature('out1').selection.named('geom1_unisel5');
model.physics('spf').create('sym1', 'Symmetry', 2);
model.physics('spf').feature('sym1').selection.set([2 6 19 20 31 43 69 75 82 89 105 106]);
model.physics('dl').selection.named('geom1_unisel2');
model.physics('dl').prop('PhysicalModelProperty').set('pref', 'p_out');
model.physics('dl').prop('ShapeProperty').set('order_pressure', 1);
model.physics('dl').feature('porous1').feature('pm1').set('epsilon_mat', 'userdef');
model.physics('dl').feature('porous1').feature('pm1').set('epsilon', 'eps_pores');
model.physics('dl').feature('porous1').feature('pm1').set('kappa_mat', 'userdef');
model.physics('dl').feature('porous1').feature('pm1').set('kappa', {'perm_GDE' '0' '0' '0' 'perm_GDE' '0' '0' '0' 'perm_GDE'});
model.physics('phtr').selection.named('geom1_unisel3');
model.physics('phtr').feature('ptp1').set('minput_concentration_src', 'fromCommonDef');
model.physics('phtr').feature('ptp1').create('tm1', 'TurbulentMixing', 3);
model.physics('phtr').feature('ptp1').feature('tm1').set('nuT', '1e-5');
model.physics('phtr').feature('ptp1').feature('tm1').set('ScT', 1);
model.physics('phtr').feature('pptp1').selection.named('geom1_unisel2');
model.physics('phtr').feature('pptp1').set('minput_concentration_src', 'fromCommonDef');
model.physics('phtr').feature('pptp1').setIndex('pc', 'dpc_dsg*s_g', 1);
model.physics('phtr').feature('pptp1').set('phaselist_s_l', 'mat2');
model.physics('phtr').feature('pptp1').set('kappar_s_l', 's_l^2');
model.physics('phtr').feature('pptp1').set('rhoint_s_g_mat', 'root.comp1.we.rho');
model.physics('phtr').feature('pptp1').set('mu_s_g_mat', 'root.comp1.we.mu');
model.physics('phtr').feature('pptp1').set('kappar_s_g', 's_g^2');
model.physics('phtr').feature('init1').setIndex('s0', 's_g_in', 1);
model.physics('phtr').feature('fpi1').set('PorousBoundaryCondition_s_g', 'Signorini');
model.physics('phtr').feature('fpi1').set('s0thresh_s_g', 's_g_in');
model.physics('phtr').create('sa1', 'VolumeFraction', 2);
model.physics('phtr').feature('sa1').selection.named('geom1_unisel4');
model.physics('phtr').feature('sa1').setIndex('phases', true, 1);
model.physics('phtr').feature('sa1').setIndex('s0', 's_g_in', 1);
model.physics('phtr').create('of1', 'Outflow', 2);
model.physics('phtr').feature('of1').selection.named('geom1_unisel5');

model.variable.create('var3');
model.variable('var3').model('comp1');
model.variable('var3').label('Variables - Oxygen GDEs');
model.variable('var3').selection.geom('geom1', 3);
model.variable('var3').selection.named('geom1_sel3');
model.variable('var3').set('R_O2_oer', 'we.iv_o2gder1/(4*F_const)');
model.variable('var3').descr('R_O2_oer', 'Molar reaction rate, oxygen evolution reaction');
model.variable('var3').set('Rm_gas', 'R_O2_oer*we.MO2');
model.variable('var3').descr('Rm_gas', 'Mass gas evolution rate');
model.variable.create('var4');
model.variable('var4').model('comp1');
model.variable('var4').label('Variables - Hydrogen GDEs');
model.variable('var4').selection.geom('geom1', 3);
model.variable('var4').selection.named('geom1_sel5');
model.variable('var4').set('R_H2_her', '-we.iv_h2gder1/(2*F_const)');
model.variable('var4').descr('R_H2_her', 'Molar reaction rate, hydrogen evolution reaction');
model.variable('var4').set('Rm_gas', 'R_H2_her*we.MH2', 'Mass gas evolution rate');

model.physics('phtr').create('ms1', 'MassSource', 3);
model.physics('phtr').feature('ms1').selection.named('geom1_unisel2');
model.physics('phtr').feature('ms1').set('MassTransferToOtherPhases', true);
model.physics('phtr').feature('ms1').setIndex('qs_s_l', '-Rm_gas', 0);
model.physics('phtr').feature('ms1').setIndex('qs_s_g', 'Rm_gas', 0);
model.physics('ht').feature('fluid1').selection.named('geom1_unisel1');
model.physics('ht').feature('fluid1').set('minput_pressure_src', 'userdef');
model.physics('ht').feature('fluid1').set('minput_pressure', 'pA_liquid');
model.physics('ht').feature('fluid1').set('minput_concentration_src', 'fromCommonDef');
model.physics('ht').feature('fluid1').set('u_src', 'root.comp1.u');
model.physics('ht').feature('fluid1').set('k_mat', 'userdef');
model.physics('ht').feature('fluid1').set('k', {'kappa_two_phase_mix' '0' '0' '0' 'kappa_two_phase_mix' '0' '0' '0' 'kappa_two_phase_mix'});
model.physics('ht').feature('fluid1').set('fluidType', 'gasLiquid');
model.physics('ht').feature('fluid1').set('rho_mat', 'userdef');
model.physics('ht').feature('fluid1').set('rho', 'rho_mix');
model.physics('ht').feature('fluid1').set('Cp_mat', 'userdef');
model.physics('ht').feature('fluid1').set('Cp', 'Cp_two_phase_mix');
model.physics('ht').feature('fluid1').set('gamma_not_IG_mat', 'userdef');
model.physics('ht').feature('init1').set('Tinit', 'T0');
model.physics('ht').create('porous1', 'PorousMediumHeatTransferModel', 3);
model.physics('ht').feature('porous1').label('Porous Medium - Separators');
model.physics('ht').feature('porous1').selection.named('geom1_sel1');
model.physics('ht').feature('porous1').feature('fluid1').set('minput_pressure_src', 'userdef');
model.physics('ht').feature('porous1').feature('fluid1').set('minput_concentration_src', 'fromCommonDef');
model.physics('ht').feature('porous1').feature('fluid1').set('k_mat', 'userdef');
model.physics('ht').feature('porous1').feature('fluid1').set('k', {'kappa_KOH' '0' '0' '0' 'kappa_KOH' '0' '0' '0' 'kappa_KOH'});
model.physics('ht').feature('porous1').feature('fluid1').set('Cp_mat', 'userdef');
model.physics('ht').feature('porous1').feature('fluid1').set('Cp', 'Cp_KOH');
model.physics('ht').feature('porous1').feature('fluid1').set('gamma_not_IG_mat', 'userdef');
model.physics('ht').feature('porous1').feature('pm1').set('poro_mat', 'userdef');
model.physics('ht').feature('porous1').feature('pm1').set('poro', 'epsl_sep');
model.physics('ht').feature('porous1').feature('pm1').set('k_b_mat', 'userdef');
model.physics('ht').feature('porous1').feature('pm1').set('k_b', {'kappa_sep' '0' '0' '0' 'kappa_sep' '0' '0' '0' 'kappa_sep'});
model.physics('ht').feature('porous1').feature('pm1').set('rho_b_mat', 'userdef');
model.physics('ht').feature('porous1').feature('pm1').set('rho_b', 'rho_sep');
model.physics('ht').feature('porous1').feature('pm1').set('Cp_b_mat', 'userdef');
model.physics('ht').feature('porous1').feature('pm1').set('Cp_b', 'Cp_sep');
model.physics('ht').create('porous2', 'PorousMediumHeatTransferModel', 3);
model.physics('ht').feature('porous2').label('Porous Medium - GDEs');
model.physics('ht').feature('porous2').selection.named('geom1_unisel2');
model.physics('ht').feature('porous2').feature('fluid1').set('minput_pressure_src', 'userdef');
model.physics('ht').feature('porous2').feature('fluid1').set('minput_pressure', 'pA_liquid');
model.physics('ht').feature('porous2').feature('fluid1').set('minput_concentration_src', 'fromCommonDef');
model.physics('ht').feature('porous2').feature('fluid1').set('u_src', 'root.comp1.dl.u');
model.physics('ht').feature('porous2').feature('fluid1').set('k_mat', 'userdef');
model.physics('ht').feature('porous2').feature('fluid1').set('k', {'kappa_two_phase_mix' '0' '0' '0' 'kappa_two_phase_mix' '0' '0' '0' 'kappa_two_phase_mix'});
model.physics('ht').feature('porous2').feature('fluid1').set('rho_mat', 'userdef');
model.physics('ht').feature('porous2').feature('fluid1').set('rho', 'rho_mix');
model.physics('ht').feature('porous2').feature('fluid1').set('Cp_mat', 'userdef');
model.physics('ht').feature('porous2').feature('fluid1').set('Cp', 'Cp_two_phase_mix');
model.physics('ht').feature('porous2').feature('fluid1').set('gamma_not_IG_mat', 'userdef');
model.physics('ht').feature('porous2').feature('pm1').set('poro_mat', 'userdef');
model.physics('ht').feature('porous2').feature('pm1').set('poro', 'eps_pores');
model.physics('ht').feature('porous2').feature('pm1').set('k_b_mat', 'userdef');
model.physics('ht').feature('porous2').feature('pm1').set('k_b', {'kappa_Ni' '0' '0' '0' 'kappa_Ni' '0' '0' '0' 'kappa_Ni'});
model.physics('ht').feature('porous2').feature('pm1').set('rho_b_mat', 'userdef');
model.physics('ht').feature('porous2').feature('pm1').set('rho_b', 'rho_Ni');
model.physics('ht').feature('porous2').feature('pm1').set('Cp_b_mat', 'userdef');
model.physics('ht').feature('porous2').feature('pm1').set('Cp_b', 'Cp_Ni');
model.physics('ht').create('pc1', 'PeriodicHeat', 2);
model.physics('ht').feature('pc1').selection.set([23 54]);
model.physics('ht').create('ifl1', 'Inflow', 2);
model.physics('ht').feature('ifl1').selection.named('geom1_unisel4');
model.physics('ht').feature('ifl1').set('Tustr', 'T0');
model.physics('ht').create('ofl1', 'ConvectiveOutflow', 2);
model.physics('ht').feature('ofl1').selection.named('geom1_unisel5');

model.multiphysics('mfmm1').set('minput_temperature_src', 'fromCommonDef');
model.multiphysics('mfmm1').set('DispersedPhase', 'LiquidDropletsBubbles');
model.multiphysics('mfmm1').set('rho_s_g_mat', 'root.comp1.we.rho');
model.multiphysics('mfmm1').set('mu_s_g_mat', 'userdef');
model.multiphysics('mfmm1').set('mu_s_g', 'we.mu');
model.multiphysics.create('ech1', 'ElectrochemicalHeating', 'geom1', 3);

model.common('cminpt').set('modified', {'concentration' 'c_KOH'});

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.named('geom1_sel12');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([36 45 51 60 88 94 98 104 201]);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([33 48 63 86 96 106 202]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 2);
model.mesh('mesh1').feature('map1').create('size1', 'Size');
model.mesh('mesh1').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmax', 'W_rib/10');
model.mesh('mesh1').run('map1');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.named('geom1_sel11');
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 'H_ch/4');
model.mesh('mesh1').run('ftri1');

model.view('view1').set('renderwireframe', true);

model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('bl1').selection.named('geom1_sel11');
model.mesh('mesh1').feature('bl1').feature('blp').selection.all;
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([43 46 55 58 68 70 72 73 75 76 82 84]);
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 2);
model.mesh('mesh1').feature('bl1').feature('blp').set('blstretch', 1.5);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', 'H_ch/50');
model.mesh('mesh1').run('bl1');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').create('size1', 'Size');
model.mesh('mesh1').feature('swe1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmax', 'W_ribch/10');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.set([1 2 3 4]);
model.mesh('mesh1').feature('swe1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('swe1').feature('dis1').set('elemratio', 4);
model.mesh('mesh1').run;

model.view('view1').set('renderwireframe', false);

model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat').label('Stationary - Flow Initialization');
model.study('std1').feature('stat').setEntry('activate', 'we', false);
model.study('std1').feature('stat').setEntry('activate', 'phtr', false);
model.study('std1').feature('stat').setEntry('activate', 'ht', false);
model.study('std1').feature('stat2').label('Stationary 2- All Physics');
model.study('std1').feature('stat2').set('useparam', true);
model.study('std1').feature('stat2').setIndex('pname', 'Av', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', '1/m', 0);
model.study('std1').feature('stat2').setIndex('pname', 'Av', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', '1/m', 0);
model.study('std1').feature('stat2').setIndex('pname', 'E_cell', 0);
model.study('std1').feature('stat2').setIndex('plistarr', 'range(E_cell_lower,0.1,E_cell_upper)', 0);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([6 7 9 11 13 14]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6 8 9 10 11 12 14 15 16 17 18 19 20 21]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 8 12 16 17 18 19 20 21]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 8 12 16 17 18 19 20 21]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([6 9 11 14]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([6 7 9 11 13 14]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6 8 9 10 11 12 14 15 16 17 18 19 20 21]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 8 12 16 17 18 19 20 21]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([6 9 11 14]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 6 8 9 11 12 14 16 17 18 19 20 21]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_we_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_we_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_we_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_we_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (we)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (we)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (we)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, fluid flow variables (nsd1) (Merged)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, fluid flow variables (nsd1)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf_sel1' 'comp1_spf_inl1_Pinlfdf_sel2' 'comp1_spf_inl1_Pinlfdf_sel3' 'comp1_spf_inl1_Pinlfdf_sel4' 'comp1_dl_pb_lm'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf_sel1' 'comp1_spf_inl1_Pinlfdf_sel2' 'comp1_spf_inl1_Pinlfdf_sel3' 'comp1_spf_inl1_Pinlfdf_sel4' 'comp1_dl_pb_lm'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Hybrid AMG, free-porous flow variables (nsd1)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('hybridvar', {'comp1_p' 'comp1_u' 'comp1_spf_inl1_Pinlfdf_sel1' 'comp1_spf_inl1_Pinlfdf_sel2' 'comp1_spf_inl1_Pinlfdf_sel3' 'comp1_spf_inl1_Pinlfdf_sel4'});
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf_sel1' 'comp1_spf_inl1_Pinlfdf_sel2' 'comp1_spf_inl1_Pinlfdf_sel3' 'comp1_spf_inl1_Pinlfdf_sel4'});
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf_sel1' 'comp1_spf_inl1_Pinlfdf_sel2' 'comp1_spf_inl1_Pinlfdf_sel3' 'comp1_spf_inl1_Pinlfdf_sel4'});
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('i2').create('mg2', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg2').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('mg2').set('hybridvar', {'comp1_p2' 'comp1_dl_pb_lm'});
model.sol('sol1').feature('s2').feature('i2').feature('mg2').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i2').feature('mg2').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i2').feature('mg2').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i2').feature('mg2').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i2').feature('mg2').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i2').feature('mg2').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg2').set('saamgcompwise', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg2').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg2').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg2').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('s2').feature('i2').feature('mg2').feature('pr').feature('va1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg2').feature('pr').feature('va1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg2').feature('pr').feature('va1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg2').feature('pr').feature('va1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg2').feature('pr').feature('va1').set('vankavars', {'comp1_dl_pb_lm'});
model.sol('sol1').feature('s2').feature('i2').feature('mg2').feature('po').create('va1', 'Vanka');
model.sol('sol1').feature('s2').feature('i2').feature('mg2').feature('po').feature('va1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg2').feature('po').feature('va1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg2').feature('po').feature('va1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg2').feature('po').feature('va1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg2').feature('po').feature('va1').set('vankavars', {'comp1_dl_pb_lm'});
model.sol('sol1').feature('s2').feature('i2').feature('mg2').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg2').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('mg2').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'stat2');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').feature('comp1_we_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_s_g').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_we_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_we_phil').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_s_g').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_we_phis').set('scaleval', '1');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('initsoluse', 'sol3');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'stat2');
model.sol('sol1').create('s3', 'Stationary');
model.sol('sol1').feature('s3').set('stol', 1.0E-4);
model.sol('sol1').feature('s3').create('p1', 'Parametric');
model.sol('sol1').feature('s3').feature.remove('pDef');
model.sol('sol1').feature('s3').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s3').feature('p1').set('control', 'stat2');
model.sol('sol1').feature('s3').set('control', 'stat2');
model.sol('sol1').feature('s3').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s3').create('seDef', 'Segregated');
model.sol('sol1').feature('s3').create('se1', 'Segregated');
model.sol('sol1').feature('s3').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s3').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s3').feature('se1').feature('ss1').set('segvar', {'comp1_T'});
model.sol('sol1').feature('s3').feature('se1').feature('ss1').set('subdamp', 0.8);
model.sol('sol1').feature('s3').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s3').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s3').feature('se1').feature('ss1').label('Temperature');
model.sol('sol1').feature('s3').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s3').feature('se1').feature('ss2').set('segvar', {'comp1_p2' 'comp1_dl_pb_lm'});
model.sol('sol1').feature('s3').feature('se1').feature('ss2').set('subdamp', 0.5);
model.sol('sol1').feature('s3').feature('se1').feature('ss2').set('subtermconst', 'iter');
model.sol('sol1').feature('s3').feature('se1').feature('ss2').set('subiter', 2);
model.sol('sol1').feature('s3').feature('se1').feature('ss2').set('subntolfact', 1);
model.sol('sol1').feature('s3').create('d2', 'Direct');
model.sol('sol1').feature('s3').feature('d2').set('linsolver', 'mumps');
model.sol('sol1').feature('s3').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('d2').label('Direct (Merged)');
model.sol('sol1').feature('s3').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s3').feature('se1').feature('ss2').label('Merged Variables');
model.sol('sol1').feature('s3').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s3').feature('se1').feature('ss3').set('segvar', {'comp1_p' 'comp1_u' 'comp1_spf_inl1_Pinlfdf_sel1' 'comp1_spf_inl1_Pinlfdf_sel2' 'comp1_spf_inl1_Pinlfdf_sel3' 'comp1_spf_inl1_Pinlfdf_sel4'});
model.sol('sol1').feature('s3').feature('se1').feature('ss3').set('subdamp', 0.5);
model.sol('sol1').feature('s3').create('d3', 'Direct');
model.sol('sol1').feature('s3').feature('d3').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d3').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('d3').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s3').feature('se1').feature('ss3').set('linsolver', 'd3');
model.sol('sol1').feature('s3').feature('se1').feature('ss3').label('Velocity u, Pressure p');
model.sol('sol1').feature('s3').feature('se1').create('ss4', 'SegregatedStep');
model.sol('sol1').feature('s3').feature('se1').feature('ss4').set('segvar', {'comp1_s_g' 'comp1_phtr_s_lm_s_g'});
model.sol('sol1').feature('s3').feature('se1').feature('ss4').set('subdamp', 0.5);
model.sol('sol1').feature('s3').feature('se1').feature('ss4').set('subiter', 2);
model.sol('sol1').feature('s3').feature('se1').feature('ss4').set('subntolfact', 1);
model.sol('sol1').feature('s3').feature('se1').feature('ss4').set('subtermconst', 'itertol');
model.sol('sol1').feature('s3').create('d4', 'Direct');
model.sol('sol1').feature('s3').feature('d4').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d4').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('d4').label('Direct, volume fractions (phtr)');
model.sol('sol1').feature('s3').feature('se1').feature('ss4').set('linsolver', 'd4');
model.sol('sol1').feature('s3').feature('se1').feature('ss4').label('Volume Fractions');
model.sol('sol1').feature('s3').feature('se1').create('ss5', 'SegregatedStep');
model.sol('sol1').feature('s3').feature('se1').feature('ss5').set('segvar', {'comp1_we_phil' 'comp1_we_phis'});
model.sol('sol1').feature('s3').feature('se1').feature('ss5').set('subjtech', 'onevery');
model.sol('sol1').feature('s3').create('d5', 'Direct');
model.sol('sol1').feature('s3').feature('d5').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d5').label('Direct (we)');
model.sol('sol1').feature('s3').feature('se1').feature('ss5').set('linsolver', 'd5');
model.sol('sol1').feature('s3').feature('se1').feature('ss5').label('Water Electrolyzer');
model.sol('sol1').feature('s3').feature('se1').set('segtermonres', 'off');
model.sol('sol1').feature('s3').feature('se1').set('maxsegiter', 200);
model.sol('sol1').feature('s3').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s3').feature('se1').set('subinitcfl', 5);
model.sol('sol1').feature('s3').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s3').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s3').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s3').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s3').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s3').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('s3').create('i1', 'Iterative');
model.sol('sol1').feature('s3').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s3').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s3').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('s3').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s3').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').create('i2', 'Iterative');
model.sol('sol1').feature('s3').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s3').feature('i2').set('rhob', 400);
model.sol('sol1').feature('s3').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i2').label('AMG, multiphase flow in porous media (mfpm1)');
model.sol('sol1').feature('s3').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').create('i3', 'Iterative');
model.sol('sol1').feature('s3').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i3').set('itrestart', 50);
model.sol('sol1').feature('s3').feature('i3').set('rhob', 20);
model.sol('sol1').feature('s3').feature('i3').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i3').label('AMG, fluid flow variables (nsd1)');
model.sol('sol1').feature('s3').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf_sel1' 'comp1_spf_inl1_Pinlfdf_sel2' 'comp1_spf_inl1_Pinlfdf_sel3' 'comp1_spf_inl1_Pinlfdf_sel4' 'comp1_dl_pb_lm'});
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf_sel1' 'comp1_spf_inl1_Pinlfdf_sel2' 'comp1_spf_inl1_Pinlfdf_sel3' 'comp1_spf_inl1_Pinlfdf_sel4' 'comp1_dl_pb_lm'});
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').create('i4', 'Iterative');
model.sol('sol1').feature('s3').feature('i4').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i4').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i4').set('itrestart', 50);
model.sol('sol1').feature('s3').feature('i4').set('rhob', 20);
model.sol('sol1').feature('s3').feature('i4').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i4').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i4').label('Hybrid AMG, free-porous flow variables (nsd1)');
model.sol('sol1').feature('s3').feature('i4').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('hybridization', 'multi');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('hybridvar', {'comp1_p' 'comp1_u' 'comp1_spf_inl1_Pinlfdf_sel1' 'comp1_spf_inl1_Pinlfdf_sel2' 'comp1_spf_inl1_Pinlfdf_sel3' 'comp1_spf_inl1_Pinlfdf_sel4'});
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf_sel1' 'comp1_spf_inl1_Pinlfdf_sel2' 'comp1_spf_inl1_Pinlfdf_sel3' 'comp1_spf_inl1_Pinlfdf_sel4'});
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf_sel1' 'comp1_spf_inl1_Pinlfdf_sel2' 'comp1_spf_inl1_Pinlfdf_sel3' 'comp1_spf_inl1_Pinlfdf_sel4'});
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i4').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('i4').create('mg2', 'Multigrid');
model.sol('sol1').feature('s3').feature('i4').feature('mg2').set('hybridization', 'multi');
model.sol('sol1').feature('s3').feature('i4').feature('mg2').set('hybridvar', {'comp1_p2' 'comp1_dl_pb_lm'});
model.sol('sol1').feature('s3').feature('i4').feature('mg2').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i4').feature('mg2').set('mgcycle', 'v');
model.sol('sol1').feature('s3').feature('i4').feature('mg2').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s3').feature('i4').feature('mg2').set('strconn', 0.01);
model.sol('sol1').feature('s3').feature('i4').feature('mg2').set('nullspace', 'constant');
model.sol('sol1').feature('s3').feature('i4').feature('mg2').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i4').feature('mg2').set('saamgcompwise', false);
model.sol('sol1').feature('s3').feature('i4').feature('mg2').set('loweramg', true);
model.sol('sol1').feature('s3').feature('i4').feature('mg2').set('compactaggregation', false);
model.sol('sol1').feature('s3').feature('i4').feature('mg2').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('s3').feature('i4').feature('mg2').feature('pr').feature('va1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i4').feature('mg2').feature('pr').feature('va1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i4').feature('mg2').feature('pr').feature('va1').set('seconditer', 1);
model.sol('sol1').feature('s3').feature('i4').feature('mg2').feature('pr').feature('va1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i4').feature('mg2').feature('pr').feature('va1').set('vankavars', {'comp1_dl_pb_lm'});
model.sol('sol1').feature('s3').feature('i4').feature('mg2').feature('po').create('va1', 'Vanka');
model.sol('sol1').feature('s3').feature('i4').feature('mg2').feature('po').feature('va1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i4').feature('mg2').feature('po').feature('va1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i4').feature('mg2').feature('po').feature('va1').set('seconditer', 1);
model.sol('sol1').feature('s3').feature('i4').feature('mg2').feature('po').feature('va1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i4').feature('mg2').feature('po').feature('va1').set('vankavars', {'comp1_dl_pb_lm'});
model.sol('sol1').feature('s3').feature('i4').feature('mg2').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i4').feature('mg2').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i4').feature('mg2').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').create('i5', 'Iterative');
model.sol('sol1').feature('s3').feature('i5').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i5').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i5').set('itrestart', 50);
model.sol('sol1').feature('s3').feature('i5').set('rhob', 20);
model.sol('sol1').feature('s3').feature('i5').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i5').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i5').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s3').feature('i5').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf_sel1' 'comp1_spf_inl1_Pinlfdf_sel2' 'comp1_spf_inl1_Pinlfdf_sel3' 'comp1_spf_inl1_Pinlfdf_sel4'});
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf_sel1' 'comp1_spf_inl1_Pinlfdf_sel2' 'comp1_spf_inl1_Pinlfdf_sel3' 'comp1_spf_inl1_Pinlfdf_sel4'});
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i5').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').create('i6', 'Iterative');
model.sol('sol1').feature('s3').feature('i6').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i6').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i6').set('itrestart', 50);
model.sol('sol1').feature('s3').feature('i6').set('rhob', 20);
model.sol('sol1').feature('s3').feature('i6').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i6').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i6').label('AMG, volume fractions (phtr)');
model.sol('sol1').feature('s3').feature('i6').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i6').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i6').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s3').feature('i6').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s3').feature('i6').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'sor');
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.6);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'matrix');
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('pr').feature('sl1').set('relax', 0.4);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('pr').feature('sl1').set('maxline', 15);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'soru');
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.6);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'matrix');
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('po').feature('sl1').set('relax', 0.4);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('po').feature('sl1').set('maxline', 15);
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i6').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').create('i7', 'Iterative');
model.sol('sol1').feature('s3').feature('i7').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i7').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i7').label('Algebraic Multigrid (we)');
model.sol('sol1').feature('s3').feature('i7').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i7').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i7').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s3').feature('i7').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i7').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s3').feature('i7').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i7').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i7').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i7').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i7').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i7').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i7').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i7').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i7').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i7').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').create('i8', 'Iterative');
model.sol('sol1').feature('s3').feature('i8').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i8').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i8').label('Geometric Multigrid (we)');
model.sol('sol1').feature('s3').feature('i8').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i8').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i8').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i8').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i8').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i8').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i8').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i8').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i8').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i8').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i8').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature.remove('fcDef');
model.sol('sol1').feature('s3').feature.remove('seDef');
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s3').create('fc1', 'FullyCoupled');

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.geom('geom1', 2);
model.cpl('aveop1').selection.set([54]);

model.study('std1').setGenPlots(false);

model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').label('Polarization Plot');
model.result('pg1').create('glob1', 'Global');
model.result('pg1').feature('glob1').set('markerpos', 'datapoints');
model.result('pg1').feature('glob1').set('linewidth', 'preference');
model.result('pg1').feature('glob1').setIndex('expr', 'E_cell', 0);
model.result('pg1').feature('glob1').set('xdata', 'expr');
model.result('pg1').feature('glob1').set('xdataexpr', 'aveop1(-we.nIl)');
model.result('pg1').feature('glob1').set('xdataunit', 'A/cm^2');
model.result('pg1').run;
model.result('pg1').set('titletype', 'none');
model.result('pg1').set('xlabelactive', true);
model.result('pg1').set('xlabel', 'Average cell current density (A/cm<sup>2</sup>)');
model.result('pg1').set('showlegends', false);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').run;
model.result('pg2').label('Electrode Phase Potential');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'we.phis');
model.result('pg2').feature('surf1').set('descr', 'Electric potential');
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('Electrolyte Phase Potential');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Temperature');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'T');
model.result('pg4').feature('surf1').set('descr', 'Temperature');
model.result('pg4').feature('surf1').set('unit', 'degC');
model.result('pg4').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').run;
model.result('pg5').label('Gas Volume Fraction in Channels');
model.result('pg5').create('vol1', 'Volume');
model.result('pg5').feature('vol1').set('expr', 's_g');
model.result('pg5').feature('vol1').set('descr', 'Volume fraction');
model.result('pg5').feature('vol1').create('sel1', 'Selection');
model.result('pg5').feature('vol1').feature('sel1').selection.named('geom1_unisel1');
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Gas Volume Fraction in GDEs');
model.result('pg6').run;
model.result('pg6').feature('vol1').feature('sel1').selection.named('geom1_unisel2');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').label('Gas Volume Fractions and Streamlines');
model.result('pg7').set('titletype', 'none');
model.result('pg7').set('edges', false);
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').setIndex('expr', 'Ngasx', 0);
model.result('pg7').feature('str1').setIndex('expr', 'Ngasy', 1);
model.result('pg7').feature('str1').set('expr', {'Ngasx' 'Ngasy' 'Ngasz'});
model.result('pg7').feature('str1').set('posmethod', 'magnitude');
model.result('pg7').feature('str1').set('mdist', [0.02 0.15]);
model.result('pg7').feature('str1').set('linetype', 'ribbon');
model.result('pg7').feature('str1').set('pointtype', 'arrow');
model.result('pg7').feature('str1').create('col1', 'Color');
model.result('pg7').run;
model.result('pg7').feature('str1').feature('col1').set('expr', 's_g');
model.result('pg7').feature('str1').feature('col1').set('descr', 'Volume fraction');
model.result('pg7').run;
model.result('pg7').feature('str1').create('sel1', 'Selection');
model.result('pg7').feature('str1').feature('sel1').selection.named('geom1_sel2');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').feature.duplicate('str2', 'str1');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').feature('str2').feature('sel1').selection.named('geom1_sel4');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', '1');
model.result('pg7').feature('surf1').create('sel1', 'Selection');
model.result('pg7').feature('surf1').feature('sel1').selection.geom('geom1', 3);
model.result('pg7').feature('surf1').feature('sel1').selection.named('geom1_sel1');
model.result('pg7').run;
model.result('pg7').feature('surf1').create('mtrl1', 'MaterialAppearance');
model.result('pg7').run;
model.result('pg7').feature('surf1').feature('mtrl1').set('appearance', 'custom');
model.result('pg7').run;
model.result('pg7').feature.duplicate('surf2', 'surf1');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').feature('surf2').feature('sel1').selection.named('geom1_unisel2');
model.result('pg7').run;
model.result('pg7').feature('surf2').feature('mtrl1').set('family', 'carbonforged');
model.result('pg7').run;
model.result('pg7').feature.duplicate('surf3', 'surf2');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').feature('surf3').feature('sel1').selection.named('geom1_sel6');
model.result('pg7').run;
model.result('pg7').feature('surf3').feature('mtrl1').set('family', 'steel');
model.result('pg7').run;

model.title('Two-Phase Nonisothermal Zero-Gap Alkaline Water Electrolyzer');

model.description(['This model defines a zero-gap alkaline water electrolyzer, where oxygen and hydrogen gas are evolved in porous gas diffusion nickel felt electrodes, placed adjacent to a porous separator (diaphragm).' newline  newline 'The geometry defines a unit cell of an electrolyzer stack, in turn comprising two full electrolyzer cells, extending 10 cm along the channel direction. The two electrolyzer cells are separated by a corrugated bipolar steel plate.' newline  newline 'The model solves for the fully intercoupled current distribution of the electrolyzer cells, two-phase flow of evolved gases and electrolyte, and heat transfer.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('zero_gap_aec.mph');

model.modelNode.label('Components');

out = model;
