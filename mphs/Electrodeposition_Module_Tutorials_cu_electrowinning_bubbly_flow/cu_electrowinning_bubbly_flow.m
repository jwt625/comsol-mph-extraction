function out = model
%
% cu_electrowinning_bubbly_flow.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Electrodeposition_Module/Tutorials');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('tcd', 'TertiaryCurrentDistributionNernstPlanck', 'geom1', {'cCu' 'cH' 'cHSO4'});
model.physics.create('bf', 'LaminarBubblyFlow', 'geom1');
model.physics('bf').model('comp1');

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/tcd', true);
model.study('std1').feature('cdi').setSolveFor('/physics/bf', true);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('initialtime', '0');
model.study('std1').feature('time').set('solnum', 'auto');
model.study('std1').feature('time').set('notsolnum', 'auto');
model.study('std1').feature('time').set('outputmap', {});
model.study('std1').feature('time').setSolveFor('/physics/tcd', true);
model.study('std1').feature('time').setSolveFor('/physics/bf', true);

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', [0.02467 0.17]);
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', [0.025 0.01]);
model.geom('geom1').feature('r2').set('pos', [0.02467 0]);
model.geom('geom1').run('r2');
model.geom('geom1').create('pt1', 'Point');
model.geom('geom1').feature('pt1').setIndex('p', 0.032, 0);
model.geom('geom1').feature('pt1').setIndex('p', 0.01, 1);
model.geom('geom1').run('pt1');
model.geom('geom1').create('pt2', 'Point');
model.geom('geom1').feature('pt2').setIndex('p', 0.02467, 0);
model.geom('geom1').feature('pt2').setIndex('p', 0.015, 1);
model.geom('geom1').run('pt2');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('c0Cu', '630 [mol/m^3]', 'Initial concentration of Cu');
model.param.set('c0H', '1837 [mol/m^3]', 'Initial concentration of H');
model.param.set('DCu', '10^(-0.676-0.481*log10(Mw_H2SO4*cH2SO4*1[m^3/kg])-0.156*log10(Mw_Cu*c0Cu*1[m^3/kg])+0.9885*(-8340.61/(8.314*T*1[1/K])))*1e-4[m^2/s]', 'Diffusion coefficient of Cu');
model.param.set('DH', '5.3e-9[m^2/s]', 'Diffusion coefficient of H');
model.param.set('DHSO4', '7.6e-10[m^2/s]', 'Diffusion coefficient of HSO4');
model.param.set('Mw_H2SO4', '0.098 [kg/mol]', 'Molecular weight of H2SO4');
model.param.set('cH2SO4', '1836.73 [mol/m^3]', 'Concentration of H2SO4');
model.param.set('T', '313 [K]', 'Temperature');
model.param.set('Itot', '5.14 [A]', 'Applied current');
model.param.set('Eeq0_O2', '1.23 [V]', 'Standard equilibrium potential O2');
model.param.set('i0a_O2', '3e-7 [A/m^2]', 'Exchange current density, anode');
model.param.set('Eeq0_Cu', '0.34 [V]', 'Standard equilibrium potential Cu');
model.param.set('i0c_Cu', '100 [A/m^2]', 'Exchange current density, cathode');
model.param.set('alphaa_Cu', '1.455', 'Anodic transfer coefficient');
model.param.set('rho_Cu', '8960 [kg/m^3]', 'Density of Cu');
model.param.set('Mw_Cu', '0.06355 [kg/mol]', 'Molecular weight of Cu');
model.param.set('rho', '1200 [kg/m^3]', 'Electrolyte density');
model.param.set('nu', '0.835e-3 [kg/m/s]', 'Electrolyte viscosity');
model.param.set('Mw_O2', '0.032 [kg/mol]', 'Molecular weight of O2');
model.param.set('d_b', '50e-6 [m]', 'Bubble diameter');
model.param.set('Vb', '0.0001 [m/s]', 'Inlet velocity');

model.geom('geom1').run;

model.physics('tcd').prop('SpeciesProperties').set('FromElectroneutrality', 3);
model.physics('tcd').feature('sp1').setIndex('z', 2, 0);
model.physics('tcd').feature('sp1').setIndex('z', 1, 1);
model.physics('tcd').feature('sp1').setIndex('z', -1, 2);
model.physics('tcd').create('sep1', 'Separator', 2);
model.physics('tcd').feature('sep1').selection.all;
model.physics('tcd').feature('sep1').set('u', {'bf.phil*u' 'bf.phil*v' '0'});
model.physics('tcd').feature('sep1').set('D_cCu', {'DCu' '0' '0' '0' 'DCu' '0' '0' '0' 'DCu'});
model.physics('tcd').feature('sep1').set('D_cH', {'DH' '0' '0' '0' 'DH' '0' '0' '0' 'DH'});
model.physics('tcd').feature('sep1').set('D_cHSO4', {'DHSO4' '0' '0' '0' 'DHSO4' '0' '0' '0' 'DHSO4'});
model.physics('tcd').feature('sep1').set('epsl', 'bf.phil');
model.physics('tcd').create('es1', 'ElectrodeSurface', 1);
model.physics('tcd').feature('es1').label('Anode Surface');
model.physics('tcd').feature('es1').selection.set([8]);
model.physics('tcd').feature('es1').set('BoundaryCondition', 'TotalCurrent');
model.physics('tcd').feature('es1').set('Itl', 'Itot');
model.physics('tcd').feature('es1').feature('er1').label('Oxygen Evolution Reaction');
model.physics('tcd').feature('es1').feature('er1').set('nm', 4);
model.physics('tcd').feature('es1').feature('er1').setIndex('Vi0', -4, 1);
model.physics('tcd').feature('es1').feature('er1').set('Eeq_ref', 'Eeq0_O2');
model.physics('tcd').feature('es1').feature('er1').set('i0_ref', 'i0a_O2');
model.physics('tcd').create('es2', 'ElectrodeSurface', 1);
model.physics('tcd').feature('es2').selection.set([1]);
model.physics('tcd').feature('es2').label('Cathode Surface');
model.physics('tcd').feature('es2').setIndex('Species', 's1', 0, 0);
model.physics('tcd').feature('es2').setIndex('rhos', 8960, 0, 0);
model.physics('tcd').feature('es2').setIndex('Ms', 0.06355, 0, 0);
model.physics('tcd').feature('es2').setIndex('Species', 's1', 0, 0);
model.physics('tcd').feature('es2').setIndex('rhos', 8960, 0, 0);
model.physics('tcd').feature('es2').setIndex('Ms', 0.06355, 0, 0);
model.physics('tcd').feature('es2').setIndex('Species', 'Cu', 0, 0);
model.physics('tcd').feature('es2').setIndex('rhos', 'rho_Cu', 0, 0);
model.physics('tcd').feature('es2').setIndex('Ms', 'Mw_Cu', 0, 0);
model.physics('tcd').feature('es2').feature('er1').label('Copper Deposition Reaction');
model.physics('tcd').feature('es2').feature('er1').set('nm', 2);
model.physics('tcd').feature('es2').feature('er1').setIndex('Vi0', -1, 0);
model.physics('tcd').feature('es2').feature('er1').setIndex('Vib', 1, 0, 0);
model.physics('tcd').feature('es2').feature('er1').set('Eeq_ref', 'Eeq0_Cu');
model.physics('tcd').feature('es2').feature('er1').set('i0_ref', 'i0c_Cu');
model.physics('tcd').feature('es2').feature('er1').set('alphaa', 'alphaa_Cu');
model.physics('tcd').create('in1', 'Inflow', 1);
model.physics('tcd').feature('in1').selection.set([3]);
model.physics('tcd').feature('in1').setIndex('c0', 'c0Cu', 0);
model.physics('tcd').feature('in1').setIndex('c0', 'c0H', 1);
model.physics('tcd').create('out1', 'Outflow', 1);
model.physics('tcd').feature('out1').selection.set([9]);
model.physics('tcd').feature('init1').setIndex('initc', 'c0Cu', 0);
model.physics('tcd').feature('init1').setIndex('initc', 'c0H', 1);
model.physics('bf').prop('PhysicalModelProperty').set('LowGasConcentration', false);
model.physics('bf').feature('fp1').set('rhol_mat', 'userdef');
model.physics('bf').feature('fp1').set('rhol', 'rho');
model.physics('bf').feature('fp1').set('mul_mat', 'userdef');
model.physics('bf').feature('fp1').set('mul', 'nu');
model.physics('bf').feature('fp1').set('rhog_mat', 'CalculateFromIdealGasLaw');
model.physics('bf').feature('fp1').set('Mg', 'Mw_O2');
model.physics('bf').feature('fp1').set('diamb', 'd_b');
model.physics('bf').feature('fp1').set('SlipModel', 'PressureDragBalance');
model.physics('bf').feature('init1').set('p', 'rho*g_const*(0.17-y)');
model.physics('bf').create('gr1', 'Gravity', 2);
model.physics('bf').feature('gr1').selection.all;
model.physics('bf').create('wallbc2', 'WallBC', 1);
model.physics('bf').feature('wallbc2').label('Wall (Gas Inlet)');
model.physics('bf').feature('wallbc2').selection.set([8]);
model.physics('bf').feature('wallbc2').set('GasBoundaryCondition', 'GasFlux');
model.physics('bf').feature('wallbc2').set('Nrhogeff', '(tcd.iloc_er1)*Mw_O2/(4*F_const)');
model.physics('bf').create('inl1', 'InletBoundary', 1);
model.physics('bf').feature('inl1').label('Liquid Inlet and Gas Outlet');
model.physics('bf').feature('inl1').selection.set([3]);
model.physics('bf').feature('inl1').set('U0in', 'Vb');
model.physics('bf').feature('inl1').set('GasBoundaryCondition', 'GasOutlet');
model.physics('bf').create('out1', 'OutletBoundary', 1);
model.physics('bf').feature('out1').selection.set([9]);

model.common('cminpt').set('modified', {'temperature' 'T'});

model.mesh('mesh1').autoMeshSize(3);
model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('hauto', 3);
model.mesh('mesh1').feature('size1').selection.set([1]);
model.mesh('mesh1').create('size2', 'Size');
model.mesh('mesh1').feature('size2').selection.geom('geom1', 0);
model.mesh('mesh1').feature('size2').selection.set([6]);
model.mesh('mesh1').feature('size2').set('table', 'cfd');
model.mesh('mesh1').feature('size2').set('hauto', 2);
model.mesh('mesh1').feature.move('size2', 2);
model.mesh('mesh1').feature('bl1').feature('blp1').selection.set([1 2 5 6 7 10]);
model.mesh('mesh1').feature('bl1').feature('blp1').set('blnlayers', 4);
model.mesh('mesh1').feature('bl1').feature('blp1').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp1').set('blhmin', '0.00005');
model.mesh('mesh1').run;

model.study('std1').create('cdi2', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi2').set('initType', 'secondary');
model.study('std1').feature.move('cdi2', 1);
model.study('std1').feature('time').set('tlist', 'range(0,0.25,60)');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_tcd_es1_phisext').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_tcd_es1_phisext').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (tcd)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (tcd)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (tcd)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'cdi2');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_tcd_es1_phisext').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_tcd_es1_phisext').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'cdi2');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-4);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').label('Direct (tcd)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('Algebraic Multigrid (tcd)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Geometric Multigrid (tcd)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'time');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_tcd_es1_phisext').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_tcd_es1_phisext').set('scaleval', '1');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('initsoluse', 'sol3');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('notsoluse', 'sol3');
model.sol('sol1').feature('v3').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.25,60)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_cCu' 'global' 'comp1_cH' 'global' 'comp1_p' 'scaled' 'comp1_phil' 'global' 'comp1_rhogeff' 'unscaled'  ...
'comp1_tcd_es2_c' 'global' 'comp1_u' 'global' 'comp1_tcd_es1_phisext' 'global'});
model.sol('sol1').feature('t1').set('atol', {'comp1_cCu' '1e-3' 'comp1_cH' '1e-3' 'comp1_p' '1e-3' 'comp1_phil' '1e-3' 'comp1_rhogeff' '1e-5'  ...
'comp1_tcd_es2_c' '1e-3' 'comp1_u' '1e-3' 'comp1_tcd_es1_phisext' '1e-3'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_cCu' 'factor' 'comp1_cH' 'factor' 'comp1_p' 'factor' 'comp1_phil' 'factor' 'comp1_rhogeff' 'manual'  ...
'comp1_tcd_es2_c' 'factor' 'comp1_u' 'factor' 'comp1_tcd_es1_phisext' 'factor'});
model.sol('sol1').feature('t1').set('atolfactor', {'comp1_cCu' '0.1' 'comp1_cH' '0.1' 'comp1_p' '1' 'comp1_phil' '0.1' 'comp1_rhogeff' '0.1'  ...
'comp1_tcd_es2_c' '0.1' 'comp1_u' '0.1' 'comp1_tcd_es1_phisext' '0.1'});
model.sol('sol1').feature('t1').set('eventout', true);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('rhoinf', 0.5);
model.sol('sol1').feature('t1').set('predictor', 'constant');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.01');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('se1', 'Segregated');
model.sol('sol1').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u' 'comp1_phil' 'comp1_cCu' 'comp1_cH' 'comp1_tcd_es2_c' 'comp1_tcd_es1_phisext'});
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subjtech', 'onevery');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, fluid flow variables (bf) (Merged)');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').label('Merged Variables');
model.sol('sol1').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_rhogeff'});
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subdamp', 0.5);
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subjtech', 'onevery');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subntolfact', 0.1);
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subtermconst', 'itertol');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subiter', 2);
model.sol('sol1').feature('t1').create('d2', 'Direct');
model.sol('sol1').feature('t1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d2').label('Direct, effective gas density (bf)');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').label('Effective Gas Density');
model.sol('sol1').feature('t1').feature('se1').set('ntolfact', 0.5);
model.sol('sol1').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol1').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol1').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol1').feature('t1').feature('se1').set('segaaccdelay', 0);
model.sol('sol1').feature('t1').feature('se1').set('maxsegiter', 10);
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('Algebraic Multigrid (tcd)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').create('i2', 'Iterative');
model.sol('sol1').feature('t1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i2').label('Geometric Multigrid (tcd)');
model.sol('sol1').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').create('i3', 'Iterative');
model.sol('sol1').feature('t1').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i3').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i3').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i3').set('maxlinit', 100);
model.sol('sol1').feature('t1').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i3').label('AMG, fluid flow variables (bf)');
model.sol('sol1').feature('t1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').create('i4', 'Iterative');
model.sol('sol1').feature('t1').feature('i4').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i4').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i4').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i4').set('rhob', 400);
model.sol('sol1').feature('t1').feature('i4').set('maxlinit', 200);
model.sol('sol1').feature('t1').feature('i4').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i4').label('AMG, effective gas density (bf)');
model.sol('sol1').feature('t1').feature('i4').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i4').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i4').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i4').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i4').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'sor');
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.6);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'matrix');
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('pr').feature('sl1').set('relax', 0.4);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('pr').feature('sl1').set('maxline', 15);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'soru');
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.6);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'matrix');
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('po').feature('sl1').set('relax', 0.4);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('po').feature('sl1').set('maxline', 15);
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i4').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').create('glob1', 'Global');
model.result('pg1').feature('glob1').set('unit', {''});
model.result('pg1').feature('glob1').set('expr', {'tcd.phisext_es1'});
model.result('pg1').feature('glob1').set('descr', {'External electric potential'});
model.result('pg1').label('Boundary Electrode Potential with Respect to Ground (tcd)');
model.result('pg1').feature('glob1').set('xdatasolnumtype', 'level1');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 241, 0);
model.result('pg2').label('Electrolyte Potential (tcd)');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'phil'});
model.result('pg2').create('str1', 'Streamline');
model.result('pg2').feature('str1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg2').feature('str1').set('posmethod', 'uniform');
model.result('pg2').feature('str1').set('recover', 'pprint');
model.result('pg2').feature('str1').set('pointtype', 'arrow');
model.result('pg2').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg2').feature('str1').set('color', 'gray');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 241, 0);
model.result('pg3').label('Electrolyte Current Density (tcd)');
model.result('pg3').create('str1', 'Streamline');
model.result('pg3').feature('str1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('recover', 'pprint');
model.result('pg3').feature('str1').set('pointtype', 'arrow');
model.result('pg3').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('str1').set('color', 'gray');
model.result('pg3').feature('str1').create('col1', 'Color');
model.result('pg3').feature('str1').feature('col1').set('expr', 'root.comp1.tcd.IlMag');
model.result('pg3').create('line1', 'Line');
model.result('pg3').feature('line1').set('expr', {'abs(tcd.itot)'});
model.result('pg3').feature('line1').set('linetype', 'tube');
model.result('pg3').feature('line1').set('inherittubescale', false);
model.result('pg3').feature('line1').set('inheritplot', 'str1');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 241, 0);
model.result('pg4').label('Electrode Potential with Respect to Ground (tcd)');
model.result('pg4').create('line1', 'Line');
model.result('pg4').feature('line1').set('expr', {'tcd.phisext'});
model.result('pg4').feature('line1').set('linetype', 'tube');
model.result('pg4').feature('line1').set('inherittubescale', false);
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 241, 0);
model.result('pg5').label('Electrode Potential vs. Adjacent Reference (tcd)');
model.result('pg5').create('str1', 'Streamline');
model.result('pg5').feature('str1').set('expr', {'tcd.Ilx' 'tcd.Ily'});
model.result('pg5').feature('str1').set('posmethod', 'uniform');
model.result('pg5').feature('str1').set('recover', 'pprint');
model.result('pg5').feature('str1').set('pointtype', 'arrow');
model.result('pg5').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('str1').set('color', 'gray');
model.result('pg5').create('line1', 'Line');
model.result('pg5').feature('line1').set('expr', {'tcd.Evsref'});
model.result('pg5').feature('line1').set('linetype', 'tube');
model.result('pg5').feature('line1').set('inherittubescale', false);
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 241, 0);
model.result('pg6').label('Total Electrode Thickness Change (tcd)');
model.result('pg6').create('line1', 'Line');
model.result('pg6').feature('line1').set('expr', {'tcd.sbtot'});
model.result('pg6').feature('line1').set('linetype', 'tube');
model.result('pg6').feature('line1').set('inherittubescale', false);
model.result('pg6').feature('line1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 241, 0);
model.result('pg7').label('Concentration, Cu (tcd)');
model.result('pg7').set('titletype', 'custom');
model.result('pg7').set('prefixintitle', 'Species Cu:');
model.result('pg7').set('expressionintitle', false);
model.result('pg7').set('typeintitle', true);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'cCu'});
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('expr', {'tcd.tflux_cCux' 'tcd.tflux_cCuy'});
model.result('pg7').feature('str1').set('posmethod', 'uniform');
model.result('pg7').feature('str1').set('recover', 'pprint');
model.result('pg7').feature('str1').set('pointtype', 'arrow');
model.result('pg7').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg7').feature('str1').set('color', 'gray');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').set('data', 'dset1');
model.result('pg8').setIndex('looplevel', 241, 0);
model.result('pg8').label('Concentration, H (tcd)');
model.result('pg8').set('titletype', 'custom');
model.result('pg8').set('prefixintitle', 'Species H:');
model.result('pg8').set('expressionintitle', false);
model.result('pg8').set('typeintitle', true);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'cH'});
model.result('pg8').create('str1', 'Streamline');
model.result('pg8').feature('str1').set('expr', {'tcd.tflux_cHx' 'tcd.tflux_cHy'});
model.result('pg8').feature('str1').set('posmethod', 'uniform');
model.result('pg8').feature('str1').set('recover', 'pprint');
model.result('pg8').feature('str1').set('pointtype', 'arrow');
model.result('pg8').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg8').feature('str1').set('color', 'gray');
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').set('data', 'dset1');
model.result('pg9').setIndex('looplevel', 241, 0);
model.result('pg9').label('Concentration, HSO4 (tcd)');
model.result('pg9').set('titletype', 'custom');
model.result('pg9').set('prefixintitle', 'Species HSO4:');
model.result('pg9').set('expressionintitle', false);
model.result('pg9').set('typeintitle', true);
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', {'cHSO4'});
model.result('pg9').create('str1', 'Streamline');
model.result('pg9').feature('str1').set('expr', {'tcd.tflux_cHSO4x' 'tcd.tflux_cHSO4y'});
model.result('pg9').feature('str1').set('posmethod', 'uniform');
model.result('pg9').feature('str1').set('recover', 'pprint');
model.result('pg9').feature('str1').set('pointtype', 'arrow');
model.result('pg9').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg9').feature('str1').set('color', 'gray');
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').label('Liquid (bf)');
model.result('pg10').set('frametype', 'spatial');
model.result('pg10').set('data', 'dset1');
model.result('pg10').setIndex('looplevel', 241, 0);
model.result('pg10').set('defaultPlotID', 'bubblyflow/BubblyFlow_ResultDefaults/icom1/pdef1/pcond1/pg1');
model.result('pg10').feature.create('surf1', 'Surface');
model.result('pg10').feature('surf1').label('Velocity Magnitude');
model.result('pg10').feature('surf1').set('showsolutionparams', 'on');
model.result('pg10').feature('surf1').set('expr', 'bf.Ul');
model.result('pg10').feature('surf1').set('smooth', 'internal');
model.result('pg10').feature('surf1').set('showsolutionparams', 'on');
model.result('pg10').feature('surf1').set('data', 'parent');
model.result.create('pg11', 'PlotGroup2D');
model.result('pg11').label('Gas Phase (bf)');
model.result('pg11').set('frametype', 'spatial');
model.result('pg11').set('data', 'dset1');
model.result('pg11').setIndex('looplevel', 241, 0);
model.result('pg11').set('defaultPlotID', 'bubblyflow/BubblyFlow_ResultDefaults/icom1/pdef1/pcond1/pg2');
model.result('pg11').feature.create('surf1', 'Surface');
model.result('pg11').feature('surf1').label('Volume Fraction, Gas Phase');
model.result('pg11').feature('surf1').set('showsolutionparams', 'on');
model.result('pg11').feature('surf1').set('expr', 'bf.phig');
model.result('pg11').feature('surf1').set('smooth', 'internal');
model.result('pg11').feature('surf1').set('showsolutionparams', 'on');
model.result('pg11').feature('surf1').set('data', 'parent');
model.result.create('pg12', 'PlotGroup2D');
model.result('pg12').label('Pressure (bf)');
model.result('pg12').set('frametype', 'spatial');
model.result('pg12').set('data', 'dset1');
model.result('pg12').setIndex('looplevel', 241, 0);
model.result('pg12').set('defaultPlotID', 'bubblyflow/BubblyFlow_ResultDefaults/icom1/pdef1/pcond1/pg3');
model.result('pg12').feature.create('con1', 'Contour');
model.result('pg12').feature('con1').label('Contour');
model.result('pg12').feature('con1').set('showsolutionparams', 'on');
model.result('pg12').feature('con1').set('expr', 'p');
model.result('pg12').feature('con1').set('number', 40);
model.result('pg12').feature('con1').set('levelrounding', false);
model.result('pg12').feature('con1').set('smooth', 'internal');
model.result('pg12').feature('con1').set('showsolutionparams', 'on');
model.result('pg12').feature('con1').set('data', 'parent');
model.result('pg1').run;
model.result('pg10').run;
model.result('pg10').create('arws1', 'ArrowSurface');
model.result('pg10').feature('arws1').set('expr', {'u' 'v'});
model.result('pg10').feature('arws1').set('descr', 'Velocity field, liquid phase');
model.result('pg10').feature('arws1').set('color', 'black');
model.result('pg10').run;
model.result('pg11').run;
model.result('pg11').create('str1', 'Streamline');
model.result('pg11').feature('str1').set('expr', {'u' 'v'});
model.result('pg11').feature('str1').set('descr', 'Velocity field, liquid phase');
model.result('pg11').feature('str1').set('posmethod', 'uniform');
model.result('pg11').feature('str1').set('udist', 0.02);
model.result('pg11').feature('str1').set('pointtype', 'arrow');
model.result('pg11').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg11').feature('str1').set('color', 'white');
model.result('pg11').run;
model.result('pg7').run;
model.result.create('pg13', 'PlotGroup1D');
model.result('pg13').run;
model.result('pg13').label('Copper Concentration along Cathode Surface');
model.result('pg13').setIndex('looplevelinput', 'last', 0);
model.result('pg13').create('lngr1', 'LineGraph');
model.result('pg13').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg13').feature('lngr1').set('linewidth', 'preference');
model.result('pg13').feature('lngr1').selection.set([1]);
model.result('pg13').feature('lngr1').set('expr', 'cCu');
model.result('pg13').feature('lngr1').set('descr', 'Concentration');
model.result('pg13').feature('lngr1').set('xdata', 'expr');
model.result('pg13').feature('lngr1').set('xdataexpr', 'y');
model.result('pg13').run;
model.result('pg13').feature('lngr1').set('xdatadescractive', true);
model.result('pg13').feature('lngr1').set('xdatadescr', 'Distance from the bottom of the cathode surface');
model.result('pg13').run;
model.result.dataset.create('cpt1', 'CutPoint2D');
model.result.dataset('cpt1').set('pointx', '0 0 0');
model.result.dataset('cpt1').set('pointy', '0.05 0.15 0.16');
model.result.create('pg14', 'PlotGroup1D');
model.result('pg14').run;
model.result('pg14').label('Copper Concentration (Point Graph)');
model.result('pg14').create('ptgr1', 'PointGraph');
model.result('pg14').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg14').feature('ptgr1').set('linewidth', 'preference');
model.result('pg14').feature('ptgr1').set('data', 'cpt1');
model.result('pg14').feature('ptgr1').set('expr', 'cCu');
model.result('pg14').feature('ptgr1').set('descr', 'Concentration');
model.result('pg14').run;
model.result('pg14').feature('ptgr1').set('legend', true);
model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').setIndex('genpoints', 0.1, 0, 1);
model.result.dataset('cln1').setIndex('genpoints', 0.1, 1, 1);
model.result.dataset('cln1').setIndex('genpoints', 0.001, 1, 0);
model.result.create('pg15', 'PlotGroup1D');
model.result('pg15').run;
model.result('pg15').label('Copper Concentration (Boundary Layer)');
model.result('pg15').create('lngr1', 'LineGraph');
model.result('pg15').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg15').feature('lngr1').set('linewidth', 'preference');
model.result('pg15').feature('lngr1').set('data', 'cln1');
model.result('pg15').feature('lngr1').setIndex('looplevelinput', 'last', 0);
model.result('pg15').feature('lngr1').set('expr', 'cCu');
model.result('pg15').feature('lngr1').set('descr', 'Concentration');
model.result('pg15').feature('lngr1').set('xdata', 'expr');
model.result('pg15').feature('lngr1').set('xdataexpr', 'x');
model.result('pg15').feature('lngr1').set('xdatadescractive', true);
model.result('pg15').feature('lngr1').set('xdatadescr', 'Distance from the cathode surface');
model.result('pg15').run;
model.result.create('pg16', 'PlotGroup1D');
model.result('pg16').run;
model.result('pg16').label('Copper Deposition Thickness');
model.result('pg16').setIndex('looplevelinput', 'last', 0);
model.result('pg16').create('lngr1', 'LineGraph');
model.result('pg16').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg16').feature('lngr1').set('linewidth', 'preference');
model.result('pg16').feature('lngr1').selection.set([1]);
model.result('pg16').feature('lngr1').set('expr', 'tcd.sbtot');
model.result('pg16').feature('lngr1').set('descr', 'Total electrode thickness change');
model.result('pg16').feature('lngr1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg16').feature('lngr1').set('xdata', 'expr');
model.result('pg16').feature('lngr1').set('xdataexpr', 'y');
model.result('pg16').feature('lngr1').set('xdatadescractive', true);
model.result('pg16').feature('lngr1').set('xdatadescr', 'Distance from the bottom of the cathode surface');
model.result('pg16').run;

model.title('Two-Phase Flow Modeling of Copper Electrowinning Using Bubbly Flow');

model.description(['Copper electrowinning is the process of copper extraction from an electrolyte solution and its deposition at the cathode surface using an insoluble anode, by passing an external current through the electrolytic cell. During the process, oxygen bubbles are generated at the anode surface leading to a large recirculation zone between anode and cathode surfaces, which requires two-phase flow modeling.' newline  newline 'In the present model, charge and mass transports of ionic species are modeled using the Tertiary Current Distribution, Nernst' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Planck interface and the two-phase flow generated due to oxygen gas evolution at the anode surface is modeled using the Bubbly Flow, Laminar Flow interface. The effect of two-phase flow on copper electrodeposition is demonstrated in the model.' newline  newline 'This model requires the Electrodeposition Module and the CFD Module.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('cu_electrowinning_bubbly_flow.mph');

model.modelNode.label('Components');

out = model;
