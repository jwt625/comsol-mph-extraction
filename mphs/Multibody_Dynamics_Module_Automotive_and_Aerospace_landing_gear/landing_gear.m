function out = model
%
% landing_gear.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Automotive_and_Aerospace');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');
model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/mbd', true);
model.study('std1').feature('time').setSolveFor('/physics/ht', true);

model.param.set('m', '5000[kg]');
model.param.descr('m', 'Mass of the aircraft');
model.param.set('vi', '10[m/s]');
model.param.descr('vi', 'Downward velocity of the aircraft');
model.param.set('k_sa', '2.5e6[N/m]');
model.param.descr('k_sa', 'Spring constant of shock absorber');
model.param.set('c_sa', '5e4[N*s/m]');
model.param.descr('c_sa', 'Damping coefficient of shock absorber');
model.param.set('k_t', '2.5e7[N/m]');
model.param.descr('k_t', 'Stiffness of tire');
model.param.set('c_t', '2.5e6[N*s/m]');
model.param.descr('c_t', 'Damping coefficient of tire');
model.param.set('d', '0.1[m]');
model.param.descr('d', 'Out of plane dimension');

model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 0.15);
model.geom('geom1').feature('c1').set('pos', [-0.3 0]);
model.geom('geom1').run('c1');
model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'vectors');
model.geom('geom1').feature('pol1').set('x', '-0.35 -0.35 -0.35 -0.15 -0.15 -0.05 -0.05 -0.05 -0.05 0 0 0 0 -0.15+0.1*(sqrt(5)-2) -0.15+0.1*(sqrt(5)-2) -0.25 -0.25 -0.25');
model.geom('geom1').feature('pol1').set('y', '0 0.3 0.3 0.4 0.4 0.4 0.4 1 1 1 1 0.3 0.3 0.3 0.3 0.3-0.05*(sqrt(5)-1) 0.3-0.05*(sqrt(5)-1) 0');
model.geom('geom1').run('pol1');
model.geom('geom1').create('pol2', 'Polygon');
model.geom('geom1').feature('pol2').set('source', 'vectors');
model.geom('geom1').feature('pol2').set('x', '-0.15 -0.15 -0.15 -0.05 -0.05 -0.05 -0.05 0 0 0 0 -0.05 -0.05 -0.05');
model.geom('geom1').feature('pol2').set('y', '0.8 1.3+0.1*sqrt(2) 1.3+0.1*sqrt(2) 1.4+0.1*sqrt(2) 1.4+0.1*sqrt(2) 1.8 1.8 1.8 1.8 1.4 1.4 1.4 1.4 0.8');
model.geom('geom1').run('pol2');
model.geom('geom1').create('copy1', 'Copy');
model.geom('geom1').feature('copy1').selection('input').set({'pol1'});
model.geom('geom1').run('copy1');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').selection('input').set({'c1'});
model.geom('geom1').feature('dif1').selection('input2').set({'copy1'});
model.geom('geom1').run('dif1');
model.geom('geom1').create('mir1', 'Mirror');
model.geom('geom1').feature('mir1').selection('input').set({'dif1' 'pol1' 'pol2'});
model.geom('geom1').feature('mir1').set('keep', true);
model.geom('geom1').run('mir1');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'mir1(2)' 'pol1'});
model.geom('geom1').feature('uni1').set('intbnd', false);
model.geom('geom1').run('uni1');
model.geom('geom1').create('uni2', 'Union');
model.geom('geom1').feature('uni2').selection('input').set({'mir1(3)' 'pol2'});
model.geom('geom1').feature('uni2').set('intbnd', false);
model.geom('geom1').run('uni2');
model.geom('geom1').create('uni3', 'Union');
model.geom('geom1').feature('uni3').selection('input').set({'dif1' 'mir1(1)' 'uni1'});
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.physics('mbd').prop('d').set('d', 'd');
model.physics('mbd').feature('init1').set('InitialValueType', 'locallyDefined');
model.physics('mbd').feature('init1').set('ut', {'0' '-vi' '0'});
model.physics('mbd').create('att1', 'Attachment', 1);
model.physics('mbd').feature('att1').selection.set([34 40]);
model.physics('mbd').feature('att1').set('ConnectionType', 'FlexibleType');
model.physics('mbd').create('att2', 'Attachment', 1);
model.physics('mbd').feature('att2').selection.set([10 14]);
model.physics('mbd').feature('att2').set('ConnectionType', 'FlexibleType');
model.physics('mbd').create('prj1', 'PrismaticJoint', -1);
model.physics('mbd').feature('prj1').set('Source', 'att1');
model.physics('mbd').feature('prj1').set('Destination', 'att2');
model.physics('mbd').feature('prj1').set('e', [0 -1 0]);
model.physics('mbd').feature('prj1').create('sd1', 'SpringAndDamper', -1);
model.physics('mbd').feature('prj1').feature('sd1').set('k_u', 'k_sa');
model.physics('mbd').feature('prj1').feature('sd1').set('c_u', 'c_sa');
model.physics('mbd').create('adm1', 'AddedMass1', 1);
model.physics('mbd').feature('adm1').selection.set([37 39]);
model.physics('mbd').feature('adm1').set('MassType', 'mTot');
model.physics('mbd').feature('adm1').set('mTot', {'0' '0' '0' '0' 'm' '0' '0' '0' '0'});
model.physics('mbd').create('gacc1', 'GravityAcceleration', -1);
model.physics('mbd').create('spf1', 'SpringFoundation1', 1);
model.physics('mbd').feature('spf1').selection.set([2 19]);
model.physics('mbd').feature('spf1').set('SpringType', 'kTot');
model.physics('mbd').feature('spf1').set('kTot', {'0' '0' '0' '0' 'k_t' '0' '0' '0' '0'});
model.physics('mbd').feature('spf1').set('ViscousType', 'DampTot');
model.physics('mbd').feature('spf1').set('DampTot', {'0' '0' '0' '0' 'c_t' '0' '0' '0' '0'});

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.all;

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('Q', 'mbd.prj1.Qdamper');
model.variable('var1').descr('Q', 'Heat generated per second');
model.variable('var1').set('Wp', 'intop1(mbd.rho*g_const*v*mbd.d)');
model.variable('var1').descr('Wp', 'Potential energy');
model.variable('var1').set('h_sa', 'timeint(0,t,Q)');
model.variable('var1').descr('h_sa', 'Energy loss in shock-absorber');
model.variable('var1').set('Ws_sa', 'mbd.prj1.Wspring');
model.variable('var1').descr('Ws_sa', 'Energy stored in shock-absorber');

model.physics('ht').prop('PhysicalModelProperty').set('dz', 'd');
model.physics('ht').create('pbhs1', 'PairBoundaryHeatSource', 1);
model.physics('ht').feature('pbhs1').set('pairs', {'ap1'});
model.physics('ht').feature('pbhs1').set('heatSourceType', 'HeatRate');
model.physics('ht').feature('pbhs1').set('Pb', 'Q');

model.mesh('mesh1').autoMeshSize(3);
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tlist', 'range(0,0.01,0.7)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_att1_Fc2x').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att1_Fc1x').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att2_Fd2').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att2_Fd1').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att1_Fd2').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att1_Fd1').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att2_Fc1x').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att2_Fc2x').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_att1_Fc2x').set('scaleval', '1e8*(0.1*2.147673159491453)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_att1_Fc1x').set('scaleval', '1e8*(0.1*2.147673159491453)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_att2_Fd2').set('scaleval', '1e8*(0.1*2.147673159491453)');
model.sol('sol1').feature('v1').feature('comp1_mbd_att2_Fd1').set('scaleval', '1e8*(0.1*2.147673159491453)');
model.sol('sol1').feature('v1').feature('comp1_mbd_att1_Fd2').set('scaleval', '1e8*(0.1*2.147673159491453)');
model.sol('sol1').feature('v1').feature('comp1_mbd_att1_Fd1').set('scaleval', '1e8*(0.1*2.147673159491453)');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_disp').set('scaleval', '0.02147673159491453');
model.sol('sol1').feature('v1').feature('comp1_mbd_att_disp').set('scaleval', '0.02147673159491453');
model.sol('sol1').feature('v1').feature('comp1_mbd_att2_Fc1x').set('scaleval', '1e8*(0.1*2.147673159491453)^2');
model.sol('sol1').feature('v1').feature('comp1_mbd_att2_Fc2x').set('scaleval', '1e8*(0.1*2.147673159491453)^2');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*2.147673159491453');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.01,0.7)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_T' 'global' 'comp1_u' 'global' 'comp1_mbd_jnt_disp' 'global' 'comp1_mbd_att_disp' 'global' 'comp1_mbd_att_rot' 'global'  ...
'comp1_mbd_att1_Fc1x' 'global' 'comp1_mbd_att1_Fd1' 'global' 'comp1_mbd_att1_Fc2x' 'global' 'comp1_mbd_att1_Fd2' 'global' 'comp1_mbd_att2_Fc1x' 'global'  ...
'comp1_mbd_att2_Fd1' 'global' 'comp1_mbd_att2_Fc2x' 'global' 'comp1_mbd_att2_Fd2' 'global'});
model.sol('sol1').feature('t1').set('atol', {'comp1_T' '1e-3' 'comp1_u' '1e-3' 'comp1_mbd_jnt_disp' '1e-3' 'comp1_mbd_att_disp' '1e-3' 'comp1_mbd_att_rot' '1e-3'  ...
'comp1_mbd_att1_Fc1x' '1e-3' 'comp1_mbd_att1_Fd1' '1e-3' 'comp1_mbd_att1_Fc2x' '1e-3' 'comp1_mbd_att1_Fd2' '1e-3' 'comp1_mbd_att2_Fc1x' '1e-3'  ...
'comp1_mbd_att2_Fd1' '1e-3' 'comp1_mbd_att2_Fc2x' '1e-3' 'comp1_mbd_att2_Fd2' '1e-3'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_T' 'factor' 'comp1_u' 'factor' 'comp1_mbd_jnt_disp' 'factor' 'comp1_mbd_att_disp' 'factor' 'comp1_mbd_att_rot' 'factor'  ...
'comp1_mbd_att1_Fc1x' 'factor' 'comp1_mbd_att1_Fd1' 'factor' 'comp1_mbd_att1_Fc2x' 'factor' 'comp1_mbd_att1_Fd2' 'factor' 'comp1_mbd_att2_Fc1x' 'factor'  ...
'comp1_mbd_att2_Fd1' 'factor' 'comp1_mbd_att2_Fc2x' 'factor' 'comp1_mbd_att2_Fd2' 'factor'});
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, heat transfer variables (ht) (Merged)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Displacement (mbd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 71, 0);
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Velocity (mbd)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 71, 0);
model.result('pg2').set('defaultPlotID', 'velocity');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('expr', 'mod(dom,10)');
model.result('pg2').feature('surf1').set('unit', '1');
model.result('pg2').feature('surf1').set('colortable', 'Cyclic');
model.result('pg2').feature('surf1').set('colorlegend', false);
model.result('pg2').feature('surf1').set('data', 'parent');
model.result('pg2').feature('surf1').feature.create('def1', 'Deform');
model.result('pg2').feature('surf1').feature('def1').label('Deformation');
model.result('pg2').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg2').feature.create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').label('Arrow Line');
model.result('pg2').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY'});
model.result('pg2').feature('arwl1').set('placement', 'elements');
model.result('pg2').feature('arwl1').set('data', 'parent');
model.result('pg2').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg2').feature('arwl1').feature('def1').label('Deformation');
model.result('pg2').feature('arwl1').feature('def1').set('scaleactive', true);
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Temperature (ht)');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 71, 0);
model.result('pg3').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg3').feature('surf1').set('expr', 'T');
model.result('pg3').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').label('Stress');
model.result('pg1').set('frametype', 'material');
model.result('pg1').setIndex('looplevel', 7, 0);
model.result('pg1').run;
model.result('pg1').feature('surf1').set('expr', 'mbd.misesGp');
model.result('pg1').feature('surf1').set('descr', 'von Mises stress');
model.result('pg1').feature('surf1').set('resolution', 'norefine');
model.result('pg1').run;
model.result('pg3').run;
model.result('pg3').feature('surf1').set('resolution', 'norefine');
model.result('pg3').feature('surf1').create('def1', 'Deform');
model.result('pg3').run;
model.result('pg3').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg3').feature('surf1').feature('def1').set('scale', 1);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Relative Displacement');
model.result('pg4').set('titletype', 'none');
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').set('expr', {'mbd.prj1.u'});
model.result('pg4').feature('glob1').set('descr', {'Relative displacement'});
model.result('pg4').feature('glob1').set('unit', {'m'});
model.result('pg4').feature('glob1').set('legend', false);
model.result('pg4').feature('glob1').set('linewidth', 2);
model.result('pg4').run;
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Relative Velocity');
model.result('pg5').run;
model.result('pg5').feature('glob1').set('expr', {'mbd.prj1.u_t'});
model.result('pg5').feature('glob1').set('descr', {'Relative velocity'});
model.result('pg5').feature('glob1').set('unit', {'m/s'});
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Joint Force');
model.result('pg6').run;
model.result('pg6').feature('glob1').set('expr', {'mbd.prj1.Fy'});
model.result('pg6').feature('glob1').set('descr', {'Joint force, y-component'});
model.result('pg6').feature('glob1').set('unit', {'N'});
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Energy');
model.result('pg7').set('titletype', 'none');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').set('expr', {'Wp'});
model.result('pg7').feature('glob1').set('descr', {'Potential energy'});
model.result('pg7').feature('glob1').set('unit', {'J'});
model.result('pg7').feature('glob1').set('expr', {'Wp' 'mbd.Wk_tot'});
model.result('pg7').feature('glob1').set('descr', {'Potential energy' 'Total kinetic energy'});
model.result('pg7').feature('glob1').set('expr', {'Wp' 'mbd.Wk_tot' 'mbd.Ws_tot'});
model.result('pg7').feature('glob1').set('descr', {'Potential energy' 'Total kinetic energy' 'Total elastic strain energy'});
model.result('pg7').feature('glob1').set('expr', {'Wp' 'mbd.Wk_tot' 'mbd.Ws_tot' 'h_sa'});
model.result('pg7').feature('glob1').set('descr', {'Potential energy' 'Total kinetic energy' 'Total elastic strain energy' 'Energy loss in shock-absorber'});
model.result('pg7').feature('glob1').set('expr', {'Wp' 'mbd.Wk_tot' 'mbd.Ws_tot' 'h_sa' 'Ws_sa'});
model.result('pg7').feature('glob1').set('descr', {'Potential energy' 'Total kinetic energy' 'Total elastic strain energy' 'Energy loss in shock-absorber' 'Energy stored in shock-absorber'});
model.result('pg7').feature('glob1').set('linewidth', 2);
model.result('pg7').feature('glob1').set('linemarker', 'cycle');
model.result('pg7').feature('glob1').set('markerpos', 'interp');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Energy (J)');
model.result('pg7').set('axislimits', true);
model.result('pg7').set('ymax', '3.1e5');
model.result('pg7').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('maxframes', 100);
model.result.export.create('anim2', 'Animation');
model.result.export('anim2').set('fontsize', '9');
model.result.export('anim2').set('colortheme', 'globaltheme');
model.result.export('anim2').set('customcolor', [1 1 1]);
model.result.export('anim2').set('background', 'color');
model.result.export('anim2').set('gltfincludelines', 'on');
model.result.export('anim2').set('title1d', 'on');
model.result.export('anim2').set('legend1d', 'on');
model.result.export('anim2').set('logo1d', 'on');
model.result.export('anim2').set('options1d', 'on');
model.result.export('anim2').set('title2d', 'on');
model.result.export('anim2').set('legend2d', 'on');
model.result.export('anim2').set('logo2d', 'on');
model.result.export('anim2').set('options2d', 'off');
model.result.export('anim2').set('title3d', 'on');
model.result.export('anim2').set('legend3d', 'on');
model.result.export('anim2').set('logo3d', 'on');
model.result.export('anim2').set('options3d', 'off');
model.result.export('anim2').set('axisorientation', 'on');
model.result.export('anim2').set('grid', 'on');
model.result.export('anim2').set('axes1d', 'on');
model.result.export('anim2').set('axes2d', 'on');
model.result.export('anim2').set('showgrid', 'on');
model.result.export('anim2').set('target', 'player');
model.result.export('anim2').set('plotgroup', 'pg3');
model.result.export('anim2').set('maxframes', 100);
model.result('pg3').run;

model.title('Stresses and Heat Generation in Landing Gear');

model.description('This example illustrates the multibody dynamic simulation of landing gear. The shock absorber is modeled using a prismatic joint with a spring and damper attached to it. Heat generation and temperature rise due to energy dissipation in the shock absorber are studied.');

model.label('landing_gear.mph');

model.modelNode.label('Components');

out = model;
