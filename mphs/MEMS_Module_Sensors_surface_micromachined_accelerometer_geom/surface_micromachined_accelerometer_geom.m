function out = model
%
% surface_micromachined_accelerometer_geom.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/MEMS_Module/Sensors');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics('es').feature('ccn1').set('materialType', {'solid'});
model.physics('es').feature('ccn1').label('Charge Conservation, Solid');

model.multiphysics.create('eme1', 'ElectromechanicalForces', 'geom1', 3);
model.multiphysics('eme1').set('Solid_physics', 'solid');
model.multiphysics('eme1').set('Electrostatics_physics', 'es');

model.common.create('free1', 'DeformingDomain', 'comp1');
model.common('free1').set('smoothingType', 'hyperelastic');
model.common('free1').selection.set([]);
model.common.create('sym1', 'Symmetry', 'comp1');
model.common('sym1').selection.set([]);

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/physics/es', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/eme1', true);

model.geom.load({'part1' 'part2' 'part3'}, 'surface_micromachined_accelerometer_geom_subsequence.mph', {'part1' 'part2' 'part3'});

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('acceleration', '0', 'Acceleration (g)');
model.param.set('VtestL', '0[V]', 'Test voltage, left side');
model.param.set('VtestR', '0[V]', 'Test voltage, right side');
model.param.set('tSi', '2[um]', 'Silicon thickness');
model.param.set('tOx', '1.6[um]', 'Oxide thickness');
model.param.set('l_PM', '448[um]', 'Proof mass length');
model.param.set('w_PM', '100[um]', 'Proof mass width');
model.param.set('n_st', '3', 'Number of self test fingers');
model.param.set('n_f', '21', 'Number of sense fingers');
model.param.set('w_f', '4[um]', 'Finger width');
model.param.set('l_f', '114[um]', 'Finger length');
model.param.set('g_f', '1[um]', 'Finger gap');
model.param.set('g_st', '3[um]', 'Self test finger gap');
model.param.set('x_st', '3[um]+1*(w_f+g_st)', 'Self test finger starting position');
model.param.set('x_f', '(l_PM-(n_f-1)*3*(w_f+g_f)-w_f)/2', 'Sense finger starting position');
model.param.set('w_eh', '4[um]', 'Etch hole size');
model.param.set('p_eh', '18[um]', 'Etch hole period');
model.param.set('l_sp', '280[um]', 'Spring length');
model.param.set('w_sp', '2[um]', 'Spring width');
model.param.set('g_sp', '1[um]', 'Spring gap');
model.param.set('w_sp_conn', '4[um]', 'Spring connection width');
model.param.set('l_anch_base', '17[um]', 'Anchor base length');
model.param.set('w_anch_base', '17[um]', 'Anchor base width');
model.param.set('r_anch', '3[um]', 'Anchor radius');
model.param.set('x_anch', '12[um]', 'Anchor position');
model.param.set('l_e_s', '120[um]', 'Short electrode length');
model.param.set('l_e_l', '140[um]', 'Long electrode length');
model.param.set('l_p', '16[um]', 'Pad length');
model.param.set('w_p', '8[um]', 'Pad width');
model.param.set('r_an', '3[um]', 'Electrode anchor radius');
model.param.set('l_ovrlp', '104[um]', 'Finger overlap length');
model.param.set('l_spAssm', 'l_anch_base+2*(w_f+w_sp)+3*g_sp', 'Spring assembly length');
model.param.set('l_polySi', 'l_PM+2*l_spAssm', 'Total length');
model.param.set('hw_polySi', 'w_PM/2+l_f+l_p+l_e_l-l_ovrlp', 'Total half width');

model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').feature('pi1').label('Part Link: Proof mass');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'l_PM', 'l_PM');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'w_PM', 'w_PM');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 't_PM', 'tSi');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'l_f', 'l_f');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'w_f', 'w_f');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'n_st', 'n_st');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'n_f', 'n_f');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'g_f', 'g_f');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'g_st', 'g_st');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'x_st', 'x_st');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'x_f', 'x_f');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'w_eh', 'w_eh');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'p_eh', 'p_eh');
model.geom('geom1').runPre('fin');
model.geom('geom1').create('pi2', 'PartInstance');
model.geom('geom1').feature('pi2').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi2').set('part', 'part2');
model.geom('geom1').feature('pi2').label('Part Link: Spring 1');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'l_sp', 'l_sp');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'w_sp', 'w_sp');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'g_sp', 'g_sp');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'w_sp_conn', 'w_sp_conn');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'w_f', 'w_f');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'l_anch_base', 'l_anch_base');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'w_anch_base', 'w_anch_base');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'r_anch', 'r_anch');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'x_anch', 'x_anch');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 't_sp', 'tSi');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 't_anch', 'tOx');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'x_sp', 'l_PM');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature.duplicate('pi3', 'pi2');
model.geom('geom1').feature('pi2').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi2').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi2').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi2').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi2').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi2').set('selcontributetoedg', {'none'});
model.geom('geom1').feature('pi2').set('selkeepedg', {'off'});
model.geom('geom1').feature('pi2').set('selshowedg', {'on'});
model.geom('geom1').feature('pi2').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi2').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi2').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi2').set('selcontributetodom', {'none'});
model.geom('geom1').feature('pi2').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi2').set('selshowdom', {'on'});
model.geom('geom1').feature('pi3').label('Part Link: Spring 2');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'mirror', 0);
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'l_sp', 'l_sp+10[um]');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'w_anch_base', 'w_anch_base+10[um]');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'x_sp', '0[um]');
model.geom('geom1').runPre('fin');
model.geom('geom1').create('pi4', 'PartInstance');
model.geom('geom1').feature('pi4').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi4').set('part', 'part3');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'LH', 0);
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'l_e', 'l_e_l');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'w_e', 'w_f');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'l_p', 'l_p');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'w_p', 'w_p');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'r_an', 'r_an');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 't_e', 'tSi');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 't_an', 'tOx');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'n_e', 'n_f+1');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'p_e', '3*(w_f+g_f)');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'x_e', 'x_f-w_f-g_f');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'y_e', 'w_PM/2+l_f-l_ovrlp');
model.geom('geom1').feature('pi4').label('Part Link: Sense Electrodes L');
model.geom('geom1').runPre('fin');

model.view('view1').set('renderwireframe', true);

model.geom('geom1').feature.duplicate('pi5', 'pi4');
model.geom('geom1').feature('pi4').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi4').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi4').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi4').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi4').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi4').set('selcontributetoedg', {'none'});
model.geom('geom1').feature('pi4').set('selkeepedg', {'off'});
model.geom('geom1').feature('pi4').set('selshowedg', {'on'});
model.geom('geom1').feature('pi4').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi4').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi4').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi4').set('selcontributetodom', {'none'});
model.geom('geom1').feature('pi4').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi4').set('selshowdom', {'on'});
model.geom('geom1').feature('pi5').label('Part Link: Sense Electrodes R');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'LH', 1);
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'l_e', 'l_e_s');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'x_e', 'x_f-2*(w_f+g_f)');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature.duplicate('pi6', 'pi5');
model.geom('geom1').feature('pi5').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi5').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi5').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi5').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi5').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi5').set('selcontributetoedg', {'none'});
model.geom('geom1').feature('pi5').set('selkeepedg', {'off'});
model.geom('geom1').feature('pi5').set('selshowedg', {'on'});
model.geom('geom1').feature('pi5').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi5').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi5').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi5').set('selcontributetodom', {'none'});
model.geom('geom1').feature('pi5').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi5').set('selshowdom', {'on'});
model.geom('geom1').feature('pi6').label('Part Link: Self Test Electrodes L 1');
model.geom('geom1').feature('pi6').setEntry('inputexpr', 'LH', 0);
model.geom('geom1').feature('pi6').setEntry('inputexpr', 'n_e', 'n_st');
model.geom('geom1').feature('pi6').setEntry('inputexpr', 'p_e', '3*w_f+2*g_f+g_st');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature('pi6').setEntry('inputexpr', 'x_e', 'x_st-w_f-g_f');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature.duplicate('pi7', 'pi6');
model.geom('geom1').feature('pi6').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi6').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi6').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi6').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi6').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi6').set('selcontributetoedg', {'none'});
model.geom('geom1').feature('pi6').set('selkeepedg', {'off'});
model.geom('geom1').feature('pi6').set('selshowedg', {'on'});
model.geom('geom1').feature('pi6').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi6').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi6').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi6').set('selcontributetodom', {'none'});
model.geom('geom1').feature('pi6').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi6').set('selshowdom', {'on'});
model.geom('geom1').feature('pi7').label('Part Link: Self Test Electrodes L 2');
model.geom('geom1').feature('pi7').setEntry('inputexpr', 'l_e', 'l_e_l');
model.geom('geom1').feature('pi7').setEntry('inputexpr', 'x_e', 'l_PM-(x_st+w_f+g_f)-(n_st-1)*(3*w_f+2*g_f+g_st)-w_f');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature.duplicate('pi8', 'pi7');
model.geom('geom1').feature('pi7').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi7').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi7').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi7').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi7').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi7').set('selcontributetoedg', {'none'});
model.geom('geom1').feature('pi7').set('selkeepedg', {'off'});
model.geom('geom1').feature('pi7').set('selshowedg', {'on'});
model.geom('geom1').feature('pi7').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi7').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi7').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi7').set('selcontributetodom', {'none'});
model.geom('geom1').feature('pi7').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi7').set('selshowdom', {'on'});
model.geom('geom1').feature('pi8').label('Part Link: Self Test Electrodes R 1');
model.geom('geom1').feature('pi8').setEntry('inputexpr', 'LH', 1);
model.geom('geom1').feature('pi8').setEntry('inputexpr', 'x_e', 'x_st-w_f-g_f+2*(w_f+g_f)');
model.geom('geom1').runPre('fin');
model.geom('geom1').feature.duplicate('pi9', 'pi8');
model.geom('geom1').feature('pi8').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi8').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi8').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi8').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi8').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi8').set('selcontributetoedg', {'none'});
model.geom('geom1').feature('pi8').set('selkeepedg', {'off'});
model.geom('geom1').feature('pi8').set('selshowedg', {'on'});
model.geom('geom1').feature('pi8').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi8').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi8').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi8').set('selcontributetodom', {'none'});
model.geom('geom1').feature('pi8').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi8').set('selshowdom', {'on'});
model.geom('geom1').feature('pi9').label('Part Link: Self Test Electrodes R 2');
model.geom('geom1').feature('pi9').setEntry('inputexpr', 'l_e', 'l_e_s');
model.geom('geom1').feature('pi9').setEntry('inputexpr', 'x_e', 'l_PM-(x_st+w_f+g_f)-(n_st-1)*(3*w_f+2*g_f+g_st)-w_f+2*(w_f+g_f)');
model.geom('geom1').runPre('fin');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').label('Air box');
model.geom('geom1').feature('blk1').set('size', {'l_polySi+40[um]' '1' '1'});
model.geom('geom1').feature('blk1').setIndex('size', 'hw_polySi+20[um]', 1);
model.geom('geom1').feature('blk1').setIndex('size', '10[um]', 2);
model.geom('geom1').feature('blk1').set('pos', {'-l_spAssm-20[um]' '0' '0'});
model.geom('geom1').feature('blk1').setIndex('pos', '-tOx', 2);
model.geom('geom1').feature('blk1').setIndex('layer', 'tOx', 0);
model.geom('geom1').feature('blk1').setIndex('layer', 'tSi', 1);
model.geom('geom1').runPre('fin');
model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom1').runPre('fin');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').label('Ground plane');
model.geom('geom1').feature('wp1').set('quickz', '-tOx');
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', {'l_PM' 'w_PM/2+l_f'});
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').setIndex('distance', 'tOx', 0);
model.geom('geom1').run('ext1');
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Polysilicon');
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_csel1.dom', 'csel1');
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Proof mass boundaries');
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel1.bnd', 'csel2');
model.geom('geom1').feature('pi2').setEntry('selcontributetodom', 'pi2_csel1.dom', 'csel1');
model.geom('geom1').feature('pi2').setEntry('selcontributetobnd', 'pi2_csel1.bnd', 'csel2');
model.geom('geom1').feature('pi3').setEntry('selcontributetodom', 'pi3_csel1.dom', 'csel1');
model.geom('geom1').feature('pi3').setEntry('selcontributetobnd', 'pi3_csel1.bnd', 'csel2');
model.geom('geom1').feature('pi4').setEntry('selcontributetodom', 'pi4_csel1.dom', 'csel1');
model.geom('geom1').selection.create('csel3', 'CumulativeSelection');
model.geom('geom1').selection('csel3').label('Sense left boundaries');
model.geom('geom1').feature('pi4').setEntry('selcontributetobnd', 'pi4_csel1.bnd', 'csel3');
model.geom('geom1').feature('pi5').setEntry('selcontributetodom', 'pi5_csel1.dom', 'csel1');
model.geom('geom1').selection.create('csel4', 'CumulativeSelection');
model.geom('geom1').selection('csel4').label('Sense right boundaries');
model.geom('geom1').feature('pi5').setEntry('selcontributetobnd', 'pi5_csel1.bnd', 'csel4');
model.geom('geom1').selection.create('csel5', 'CumulativeSelection');
model.geom('geom1').selection('csel5').label('Self test left boundaries');
model.geom('geom1').feature('pi6').setEntry('selcontributetobnd', 'pi6_csel1.bnd', 'csel5');
model.geom('geom1').feature('pi7').setEntry('selcontributetodom', 'pi7_csel1.dom', 'csel1');
model.geom('geom1').feature('pi7').setEntry('selcontributetobnd', 'pi7_csel1.bnd', 'csel5');
model.geom('geom1').feature('pi8').setEntry('selcontributetodom', 'pi8_csel1.dom', 'csel1');
model.geom('geom1').selection.create('csel6', 'CumulativeSelection');
model.geom('geom1').selection('csel6').label('Self test right boundaries');
model.geom('geom1').feature('pi8').setEntry('selcontributetobnd', 'pi8_csel1.bnd', 'csel6');
model.geom('geom1').feature('pi9').setEntry('selcontributetodom', 'pi9_csel1.dom', 'csel1');
model.geom('geom1').feature('pi9').setEntry('selcontributetobnd', 'pi9_csel1.bnd', 'csel6');
model.geom('geom1').feature('pi6').setEntry('selcontributetodom', 'pi6_csel1.dom', 'csel1');

model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');

model.geom('geom1').run;

model.selection('box1').set('entitydim', 2);
model.selection('box1').set('ymin', -0.1);
model.selection('box1').set('ymax', 0.1);
model.selection('box1').set('condition', 'inside');
model.selection('box1').label('Symmetry plane');
model.selection.create('box2', 'Box');
model.selection('box2').model('comp1');
model.selection('box2').label('Anchor plane');
model.selection('box2').set('entitydim', 2);
model.selection('box2').set('zmin', '-tOx*1.01');
model.selection('box2').set('zmax', '-tOx*0.99');
model.selection('box2').set('condition', 'inside');
model.selection.create('box3', 'Box');
model.selection('box3').model('comp1');
model.selection('box3').label('Meshing plane');
model.selection('box3').set('entitydim', 2);
model.selection('box3').set('zmin', '-tOx*0.01');
model.selection('box3').set('zmax', 'tOx*0.01');
model.selection('box3').set('condition', 'inside');

model.title('Surface Micromachined Accelerometer Geometry');

model.description('This is a template MPH-file containing the physics interfaces and the parameterized geometry for the model Surface Micromachined Accelerometer.');

model.label('surface_micromachined_accelerometer_geom.mph');

model.modelNode.label('Components');

out = model;
