function out = model
%
% nonlinear_slit_resonator.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Nonlinear_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('tatd', 'ThermoacousticsSinglePhysicsTransient', 'geom1');
model.physics('tatd').model('comp1');
model.physics.create('actd', 'TransientPressureAcoustics', 'geom1');
model.physics('actd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/tatd', true);
model.study('std1').feature('time').setSolveFor('/physics/actd', true);

model.param.label('Parameters 1 - Model');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('f0', '2000[Hz]', 'Driving frequency');
model.param.set('dvisc', '220[um]*sqrt(100[Hz]/f0)', 'Viscous boundary layer thickness at f0');
model.param.set('c0', '343[m/s]', 'Speed of sound');
model.param.set('lam0', 'c0/f0', 'Wavelength at f0');
model.param.set('T0', '1/f0', 'Period');
model.param.set('L0', '155[dB]', 'Incident wave amplitude dB');
model.param.set('p0', '10^(L0/20)*20e-6[Pa]', 'Incident wave amplitude Pa');
model.param.set('Tstart', '2.5*y_in/c0', 'Start time for postprocessing');
model.param.set('Tend', 'Tstart+5*T0', 'End time for postprocessing');
model.param.set('N0', '6', 'Harmonics to resolve');
model.param.create('par2');
model.param('par2').label('Parameters 2 - Geometry');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('w_tube', '2[in]', 'Tube width');
model.param('par2').set('h_r', '(2.8+1.4+1.08+0.72)[in]', 'Resonator height');
model.param('par2').set('h_slit', '0.04[in]', 'Slit height');
model.param('par2').set('w_slit', '0.05[in]', 'Slit width');
model.param('par2').set('h_in', '24[in]', 'Inlet height');
model.param('par2').set('y_in', 'h_in+h_slit/2', 'Inlet location y-coordinate');
model.param('par2').set('h_tube', 'h_r+h_in+h_slit', 'Total tube length');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'w_tube' 'h_tube'});
model.geom('geom1').feature('r1').set('base', 'center');
model.geom('geom1').feature('r1').set('pos', {'0' 'h_tube/2-(h_r+h_slit/2)'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'w_tube' 'h_slit'});
model.geom('geom1').feature('r2').set('base', 'center');
model.geom('geom1').feature('r2').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('r2').setIndex('layer', '(w_tube-w_slit)/2', 0);
model.geom('geom1').feature('r2').set('layerbottom', false);
model.geom('geom1').feature('r2').set('layerleft', true);
model.geom('geom1').feature('r2').set('layerright', true);
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', {'10*w_slit' '40*h_slit'});
model.geom('geom1').feature('r3').set('base', 'center');
model.geom('geom1').run('r3');
model.geom('geom1').create('r4', 'Rectangle');
model.geom('geom1').feature('r4').set('size', {'3*w_slit' '20*h_slit'});
model.geom('geom1').feature('r4').set('base', 'center');
model.geom('geom1').run('r4');
model.geom('geom1').create('r5', 'Rectangle');
model.geom('geom1').feature('r5').set('size', {'w_tube' '0.14[m]'});
model.geom('geom1').feature('r5').set('base', 'center');
model.geom('geom1').run('r5');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'r1' 'r2' 'r3' 'r4' 'r5'});
model.geom('geom1').run('uni1');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').init(2);
model.geom('geom1').feature('del1').selection('input').set('uni1', [3 7 10 13 14 15]);
model.geom('geom1').run('del1');
model.geom('geom1').create('del2', 'Delete');
model.geom('geom1').feature('del2').selection('input').set('del1', [24 25]);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Inlet');
model.selection('sel1').geom(1);
model.selection('sel1').set([10]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Thermoviscous Acoustics');
model.selection('sel2').set([2 3 5 6 7]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Pressure Acoustics');
model.selection('sel3').set([1 4]);

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 1);
model.cpl('intop1').selection.named('sel1');
model.cpl.create('maxop1', 'Maximum', 'geom1');
model.cpl('maxop1').selection.named('sel2');

model.physics('tatd').selection.named('sel2');
model.physics('tatd').prop('TransientSettings').set('fmax', 'N0*f0');
model.physics('tatd').prop('ShapeProperty').set('shapeorder_u', 1);
model.physics('tatd').prop('ShapeProperty').set('shapeorder_T', 1);
model.physics('tatd').prop('Stabilization').set('selStab', 'GLSStab');
model.physics('tatd').create('ntac1', 'NonlinearThermoviscousAcousticsContributions', 2);
model.physics('tatd').feature('ntac1').selection.named('sel2');
model.physics('tatd').create('wall2', 'Wall', 1);
model.physics('tatd').feature('wall2').set('MechanicalCondition', 'Slip');
model.physics('tatd').feature('wall2').set('ThermalCondition', 'Adiabatic');
model.physics('tatd').feature('wall2').selection.set([3 6 36 37]);
model.physics('actd').selection.named('sel3');
model.physics('actd').prop('TransientSettings').set('fmax', 'N0*f0');
model.physics('actd').create('pwr1', 'PlaneWaveRadiation', 1);
model.physics('actd').feature('pwr1').selection.named('sel1');
model.physics('actd').feature('pwr1').create('ipf1', 'IncidentPressureField', 1);
model.physics('actd').feature('pwr1').feature('ipf1').set('pamp', 'p0');
model.physics('actd').feature('pwr1').feature('ipf1').set('c_mat', 'from_mat');
model.physics('actd').feature('pwr1').feature('ipf1').set('PressureFieldMaterial', 'mat1');
model.physics('actd').feature('pwr1').feature('ipf1').set('f0', 'f0');

model.multiphysics.create('atb1', 'AcousticThermoacousticBoundary', 'geom1', 1);
model.multiphysics('atb1').selection.all;

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'lam0/6');
model.mesh('mesh1').feature('size').set('hmin', 'dvisc/3');
model.mesh('mesh1').feature('size').set('hgrad', 1.1);
model.mesh('mesh1').feature('size').set('hnarrow', 3);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([7]);
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', '2.5*dvisc');
model.mesh('mesh1').feature('ftri1').create('size2', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').feature('size2').selection.set([5 6]);
model.mesh('mesh1').feature('ftri1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size2').set('hmax', '12*dvisc');
model.mesh('mesh1').feature('ftri1').create('size3', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size3').selection.geom('geom1', 1);
model.mesh('mesh1').feature('ftri1').feature('size3').selection.named('sel1');
model.mesh('mesh1').feature('ftri1').feature('size3').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size3').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size3').set('hmax', 'w_tube/8');
model.mesh('mesh1').feature('ftri1').create('size4', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size4').selection.geom('geom1', 1);
model.mesh('mesh1').feature('ftri1').feature('size4').selection.set([19 21 23 24 25 26]);
model.mesh('mesh1').feature('ftri1').feature('size4').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size4').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size4').set('hmax', 'dvisc');
model.mesh('mesh1').run;
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').set('smoothtransition', false);
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([5 7 13 15 19 21 23 24 25 26 28 30 32 34]);
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 3);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', '0.1*dvisc');
model.mesh('mesh1').run;

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'c0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm/s', 0);
model.study('std1').feature('param').setIndex('pname', 'c0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm/s', 0);
model.study('std1').feature('param').setIndex('pname', 'f0', 0);
model.study('std1').feature('param').setIndex('plistarr', '500 1000 1500 2000', 0);
model.study('std1').feature('param').setIndex('punit', 'Hz', 0);
model.study('std1').feature('time').set('tlist', 'range(0,T0/30,Tend)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,T0/30,Tend)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 1.0E-4);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsgenalpha', 'manual');
model.sol('sol1').feature('t1').set('timestepgenalpha', 'min(1/(60*N0*f0),1/(60*N0*f0))');
model.sol('sol1').feature('t1').set('timestepbdf', 'min(1/(60*N0*f0),1/(60*N0*f0))');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('timemethod', 'genalpha');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('initialstepbdfactive', true);
model.sol('sol1').feature('t1').set('initialstepbdf', 'min(1/(100*N0*f0),1/(100*N0*f0))');
model.sol('sol1').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol1').feature('t1').set('maxstepbdf', 'min(min(1e100,1/(30*N0*f0)),1/(30*N0*f0))');
model.sol('sol1').feature('t1').set('initialstepgenalphaactive', true);
model.sol('sol1').feature('t1').set('initialstepgenalpha', 'min(1/(100*N0*f0),1/(100*N0*f0))');
model.sol('sol1').feature('t1').set('maxstepconstraintgenalpha', 'const');
model.sol('sol1').feature('t1').set('maxstepgenalpha', 'min(min(1e100,1/(30*N0*f0)),1/(30*N0*f0))');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'f0'});
model.batch('p1').set('plistarr', {'500 1000 1500 2000'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Acoustic Pressure (tatd)');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 417, 0);
model.result('pg1').setIndex('looplevel', 4, 1);
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 417, 0);
model.result('pg1').setIndex('looplevel', 4, 1);
model.result('pg1').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond2/pg2');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Acoustic Velocity (tatd)');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 417, 0);
model.result('pg2').setIndex('looplevel', 4, 1);
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 417, 0);
model.result('pg2').setIndex('looplevel', 4, 1);
model.result('pg2').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond2/pg1');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('expr', 'tatd.v_inst');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Temperature Variation (tatd)');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 417, 0);
model.result('pg3').setIndex('looplevel', 4, 1);
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 417, 0);
model.result('pg3').setIndex('looplevel', 4, 1);
model.result('pg3').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond2/pcond3/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'tatd.T_t');
model.result('pg3').feature('surf1').set('colortable', 'ThermalWave');
model.result('pg3').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 417, 0);
model.result('pg4').setIndex('looplevel', 4, 1);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'actd.p_t'});
model.result('pg4').feature('surf1').set('colortable', 'Wave');
model.result('pg4').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').label('Acoustic Pressure (actd)');
model.result('pg1').run;
model.result('pg1').create('surf2', 'Surface');
model.result('pg1').feature('surf2').set('expr', 'actd.p_t');
model.result('pg1').feature('surf2').set('inheritplot', 'surf1');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').set('titletype', 'label');
model.result('pg2').run;
model.result('pg2').selection.geom('geom1', 2);
model.result('pg2').selection.named('sel2');
model.result('pg2').set('titletype', 'label');
model.result('pg2').create('arws1', 'ArrowSurface');
model.result('pg2').feature('arws1').set('xnumber', 100);
model.result('pg2').feature('arws1').set('ynumber', 200);
model.result('pg2').feature('arws1').set('color', 'black');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').set('looplevel', {'interp' '4'});
model.result('pg2').set('interp', {'Tstart+4*T0+0*T0/6'});
model.result('pg2').run;
model.result('pg2').set('interp', {'Tstart+4*T0+1*T0/6'});
model.result('pg2').run;
model.result('pg2').set('interp', {'Tstart+4*T0+2*T0/6'});
model.result('pg2').run;
model.result('pg2').set('interp', {'Tstart+4*T0+3*T0/6'});
model.result('pg2').run;
model.result('pg2').set('interp', {'Tstart+4*T0+4*T0/6'});
model.result('pg2').run;
model.result('pg2').set('interp', {'Tstart+4*T0+5*T0/6'});
model.result('pg2').run;
model.result('pg2').set('looplevel', [417 4]);
model.result('pg3').run;
model.result('pg3').run;
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').run;
model.result('pg5').label('Acoustic Density Variations (tatd)');
model.result('pg5').set('data', 'dset2');
model.result('pg5').set('titletype', 'label');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', 'tatd.rho');
model.result('pg5').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg5').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').run;
model.result('pg6').label('log10 of Vorticity');
model.result('pg6').set('data', 'dset2');
model.result('pg6').set('titletype', 'label');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'log10(abs(uy-vx))');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Pressure in Slit');
model.result('pg7').set('data', 'dset2');
model.result('pg7').setIndex('looplevelinput', 'first', 1);
model.result('pg7').set('titletype', 'label');
model.result('pg7').create('ptgr1', 'PointGraph');
model.result('pg7').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr1').set('linewidth', 'preference');
model.result('pg7').feature('ptgr1').selection.set([16]);
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Pressure at Slit FFT');
model.result('pg8').set('data', 'dset2');
model.result('pg8').set('titletype', 'label');
model.result('pg8').create('ptgr1', 'PointGraph');
model.result('pg8').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg8').feature('ptgr1').set('linewidth', 'preference');
model.result('pg8').feature('ptgr1').selection.set([16]);
model.result('pg8').feature('ptgr1').set('xdata', 'fourier');
model.result('pg8').feature('ptgr1').set('fouriershow', 'spectrum');
model.result('pg8').feature('ptgr1').set('scale', 'multiplyperiod');
model.result('pg8').feature('ptgr1').set('freqrangeactive', true);
model.result('pg8').feature('ptgr1').set('freqmin', 100);
model.result('pg8').feature('ptgr1').set('freqmax', 10000);
model.result('pg8').feature('ptgr1').set('legend', true);
model.result('pg8').run;
model.result('pg8').set('xlog', true);
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Incident and Reflected');
model.result('pg9').set('data', 'dset2');
model.result('pg9').setIndex('looplevelinput', 'first', 1);
model.result('pg9').set('titletype', 'label');
model.result('pg9').set('xlabelactive', true);
model.result('pg9').set('xlabel', 't (s)');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Pressure (Pa)');
model.result('pg9').create('ptgr1', 'PointGraph');
model.result('pg9').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg9').feature('ptgr1').set('linewidth', 'preference');
model.result('pg9').feature('ptgr1').selection.set([6]);
model.result('pg9').feature('ptgr1').set('expr', 'actd.p_i');
model.result('pg9').feature('ptgr1').set('legend', true);
model.result('pg9').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg9').feature('ptgr1').setIndex('legends', 'Incident', 0);
model.result('pg9').run;
model.result('pg9').create('ptgr2', 'PointGraph');
model.result('pg9').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg9').feature('ptgr2').set('linewidth', 'preference');
model.result('pg9').feature('ptgr2').selection.set([6]);
model.result('pg9').feature('ptgr2').set('expr', 'actd.p_t-actd.p_i');
model.result('pg9').feature('ptgr2').set('legend', true);
model.result('pg9').feature('ptgr2').set('legendmethod', 'manual');
model.result('pg9').feature('ptgr2').setIndex('legends', 'Reflected', 0);
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('Reflection Coefficient');
model.result('pg10').set('data', 'dset2');
model.result('pg10').setIndex('looplevelinput', 'last', 0);
model.result('pg10').set('titletype', 'label');
model.result('pg10').set('xlabelactive', true);
model.result('pg10').set('xlabel', 'f (Hz)');
model.result('pg10').set('ylabelactive', true);
model.result('pg10').set('ylabel', '|R| (1)');
model.result('pg10').set('axislimits', true);
model.result('pg10').set('xmin', 100);
model.result('pg10').set('xmax', 2500);
model.result('pg10').set('ymin', 0);
model.result('pg10').create('ptgr1', 'PointGraph');
model.result('pg10').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg10').feature('ptgr1').set('linewidth', 'preference');
model.result('pg10').feature('ptgr1').selection.set([6]);
model.result('pg10').feature('ptgr1').set('expr', 'sqrt(timeint(Tstart,Tend-T0,(actd.p_t-actd.p_i)^2))/sqrt(timeint(Tstart,Tend-T0,actd.p_i^2))');
model.result('pg10').feature('ptgr1').set('xdatasolnumtype', 'outer');
model.result('pg10').run;
model.result('pg10').feature('ptgr1').set('linestyle', 'none');
model.result('pg10').feature('ptgr1').set('linewidth', 2);
model.result('pg10').feature('ptgr1').set('linemarker', 'circle');
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Linearity of Density Assumption');
model.result('pg11').set('data', 'dset2');
model.result('pg11').set('titletype', 'label');
model.result('pg11').create('glob1', 'Global');
model.result('pg11').feature('glob1').set('markerpos', 'datapoints');
model.result('pg11').feature('glob1').set('linewidth', 'preference');
model.result('pg11').feature('glob1').setIndex('expr', 'maxop1(abs(tatd.rho_t/tatd.rho0))', 0);
model.result('pg11').feature('glob1').setIndex('unit', 1, 0);
model.result('pg11').feature('glob1').setIndex('descr', 'Maximum 1', 0);
model.result('pg11').run;
model.result('pg2').run;

model.title('Nonlinear Slit Resonator');

model.description(['In many applications, acoustic waves interact with surfaces that have small perforations or slits. These can be in muffler systems; in soundproofing structures; in liners for noise suppression in jet engines; or in grilles and meshes in front of, for example, miniature speakers in mobile devices.' newline  newline 'At medium to high sound pressure levels, the local particle velocity in the narrow region of the perforate or slit can be so large that the linear assumptions of acoustics break down. Typically, vortex shedding takes place in the vicinity of that region. This leads to nonlinear losses and in audio applications also nonlinear distortion of the sound signal. The nonlinear effects are sometimes included through semiempirical parameters in analytical transfer impedance models for perforates.' newline  newline 'In this tutorial, a narrow slit is located in front of a resonator volume. The model couples Pressure Acoustics, Transient and Thermoviscous Acoustics, Transient to model the nonlinear transient problem. The complex nonlinear losses associated with the vortex shedding and the viscous dissipation are captured using the Nonlinear Thermoviscous Acoustics Contributions feature. The incident acoustic field has an amplitude corresponding to 155 dB SPL.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;

model.label('nonlinear_slit_resonator.mph');

model.modelNode.label('Components');

out = model;
