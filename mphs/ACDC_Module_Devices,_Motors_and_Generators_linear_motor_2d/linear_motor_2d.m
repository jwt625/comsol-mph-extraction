function out = model
%
% linear_motor_2d.m
%
% Model exported on May 26 2025, 21:24 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Devices,_Motors_and_Generators');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mf', 'InductionCurrents', 'geom1');
model.physics('mf').model('comp1');

model.geom('geom1').lengthUnit('mm');

model.param.label('Parameters - main');
model.param.set('Np', '10');
model.param.descr('Np', 'Nr of poles on moving part/rotor');
model.param.set('Ns', '12');
model.param.descr('Ns', 'Nr of stator slots');
model.param.set('v_lin', '0.5[m/s]');
model.param.descr('v_lin', 'Linear motion velocity');
model.param.set('I_ph', '2.5[A]');
model.param.descr('I_ph', 'Phase current rms');
model.param.set('Nturn', '120');
model.param.descr('Nturn', 'Nr of turns per coil');
model.param.set('r_inc', '25[mm]');
model.param.descr('r_inc', 'Incision/ computational plane radius (axial flux motor)');
model.param.set('s_rot', 'v_lin/(2*pi*r_inc)');
model.param.descr('s_rot', 'Rotational speed (axial flux motor)');
model.param.set('f_el', 's_rot*Np/2');
model.param.descr('f_el', 'Electrical frequency');
model.param.set('ang_el_init', '0[deg]');
model.param.descr('ang_el_init', 'Initial current angle (max force/ torque)');
model.param.set('L_mag', '20[mm]');
model.param.descr('L_mag', 'Length into plane/ radial extent of magnetic materials');
model.param.set('t', '0[s]');
model.param.descr('t', 'Time variable alias');
model.param.create('par2');
model.param('par2').label('Parameters - geometry');
model.param('par2').set('arc_inc', 'r_inc*2*pi[rad]');
model.param('par2').descr('arc_inc', 'Incision plane arc length');
model.param('par2').set('th_air', '5[mm]');
model.param('par2').descr('th_air', 'Air thickness outside');
model.param('par2').set('th_rbyoke', '5[mm]');
model.param('par2').descr('th_rbyoke', 'Rotor back-yoke thickness');
model.param('par2').set('th_mag', '3[mm]');
model.param('par2').descr('th_mag', 'Magnet thickness');
model.param('par2').set('th_airgap', '1[mm]');
model.param('par2').descr('th_airgap', 'Airgap thickness');
model.param('par2').set('th_stooth', '19[mm]');
model.param('par2').descr('th_stooth', 'Stator toooth thickness');
model.param('par2').set('th_coil', '18[mm]');
model.param('par2').descr('th_coil', 'Coil thickness');
model.param('par2').set('th_sbyoke', '5[mm]');
model.param('par2').descr('th_sbyoke', 'Stator back-yoke thickness');
model.param('par2').set('ang_mag', '2*pi[rad]/Np*0.8');
model.param('par2').descr('ang_mag', 'Magnet pitch angle');
model.param('par2').set('arc_mag', 'r_inc*ang_mag');
model.param('par2').descr('arc_mag', 'Magnet arc length');
model.param('par2').set('arc_pp', 'arc_inc/Np');
model.param('par2').descr('arc_pp', 'Pole pitch arc length');
model.param('par2').set('w_slot', '7.5[mm]');
model.param('par2').descr('w_slot', 'Slot width');
model.param('par2').set('ang_slot', '2*asin(w_slot/2/r_inc)');
model.param('par2').descr('ang_slot', 'Slot pitch angle');
model.param('par2').set('arc_slot', 'r_inc*ang_slot');
model.param('par2').descr('arc_slot', 'Slot arc length');
model.param('par2').set('arc_stooth', 'arc_inc/Ns-arc_slot');
model.param('par2').descr('arc_stooth', 'Stator tooth arc length');
model.param('par2').set('A_wire', 'th_coil*w_slot/2/Nturn*0.55');
model.param('par2').descr('A_wire', 'Wire cross-sectional area including slot fill factor of .55');

model.variable.create('var1');
model.variable('var1').set('iA', 'I_ph*cos(2*pi*f_el*t+ang_el_init)');
model.variable('var1').descr('iA', 'A phase current');
model.variable('var1').set('iB', 'I_ph*cos(2*pi*f_el*t+ang_el_init-2*pi/3)');
model.variable('var1').descr('iB', 'B phase current');
model.variable('var1').set('iC', 'I_ph*cos(2*pi*f_el*t+ang_el_init-4*pi/3)');
model.variable('var1').descr('iC', 'C phase current');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'arc_mag' 'th_mag'});
model.geom('geom1').feature('r1').set('pos', {'(arc_pp-arc_mag)/2' '0'});
model.geom('geom1').feature('r1').setIndex('pos', '-th_mag', 1);
model.geom('geom1').run('r1');
model.geom('geom1').create('mov1', 'Move');
model.geom('geom1').feature('mov1').selection('input').set({'r1'});
model.geom('geom1').feature('mov1').set('displx', 'arc_pp');
model.geom('geom1').feature('mov1').set('keep', true);
model.geom('geom1').run('mov1');
model.geom('geom1').create('arr1', 'Array');
model.geom('geom1').feature('arr1').label('Magnets up');
model.geom('geom1').feature('arr1').selection('input').set({'r1'});
model.geom('geom1').feature('arr1').set('fullsize', {'Np/2' '1'});
model.geom('geom1').feature('arr1').set('displ', {'arc_pp*2' '0'});
model.geom('geom1').feature('arr1').set('selresult', true);
model.geom('geom1').feature('arr1').set('selresultshow', false);
model.geom('geom1').run('arr1');
model.geom('geom1').create('arr2', 'Array');
model.geom('geom1').feature('arr2').label('Magnets down');
model.geom('geom1').feature('arr2').selection('input').set({'mov1'});
model.geom('geom1').feature('arr2').set('fullsize', {'Np/2' '1'});
model.geom('geom1').feature('arr2').set('displ', {'arc_pp*2' '0'});
model.geom('geom1').feature('arr2').set('selresult', true);
model.geom('geom1').feature('arr2').set('selresultshow', false);
model.geom('geom1').run('arr2');
model.geom('geom1').create('unisel1', 'UnionSelection');
model.geom('geom1').feature('unisel1').label('All magnets');
model.geom('geom1').feature('unisel1').set('input', {'arr1' 'arr2'});
model.geom('geom1').run('unisel1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').label('Rotor back yoke');
model.geom('geom1').feature('r2').set('size', {'arc_inc' 'th_rbyoke'});
model.geom('geom1').feature('r2').set('pos', {'0' '-th_rbyoke-th_mag'});
model.geom('geom1').feature('r2').set('selresult', true);
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').label('Rotor air');
model.geom('geom1').feature('r3').set('size', {'arc_inc' 'th_mag+th_rbyoke+th_air+th_airgap/2'});
model.geom('geom1').feature('r3').set('pos', {'0' '-th_mag-th_rbyoke-th_air'});
model.geom('geom1').feature('r3').set('selresult', true);
model.geom('geom1').run('r3');
model.geom('geom1').create('r4', 'Rectangle');
model.geom('geom1').feature('r4').label('Aux torque calc domain');
model.geom('geom1').feature('r4').set('size', {'arc_inc' 'th_airgap/4'});
model.geom('geom1').feature('r4').set('pos', {'0' 'th_airgap/4'});
model.geom('geom1').feature('r4').set('selresult', true);
model.geom('geom1').run('r4');
model.geom('geom1').create('unisel2', 'UnionSelection');
model.geom('geom1').feature('unisel2').label('Rotor selection');
model.geom('geom1').feature('unisel2').set('entitydim', -1);
model.geom('geom1').feature('unisel2').set('input', {'arr1' 'arr2' 'r2' 'r3' 'r4'});
model.geom('geom1').run('unisel2');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').label('Rotor');
model.geom('geom1').feature('uni1').selection('input').named('unisel2');
model.geom('geom1').run('uni1');
model.geom('geom1').create('r5', 'Rectangle');
model.geom('geom1').feature('r5').label('Stator tooth');
model.geom('geom1').feature('r5').set('size', {'arc_stooth' 'th_stooth'});
model.geom('geom1').feature('r5').set('pos', {'arc_slot/2' 'th_airgap'});
model.geom('geom1').run('r5');
model.geom('geom1').create('arr3', 'Array');
model.geom('geom1').feature('arr3').label('Stator teeth');
model.geom('geom1').feature('arr3').selection('input').set({'r5'});
model.geom('geom1').feature('arr3').set('fullsize', {'Ns' '1'});
model.geom('geom1').feature('arr3').set('displ', {'arc_stooth+arc_slot' '0'});
model.geom('geom1').feature('arr3').set('selresult', true);
model.geom('geom1').feature('arr3').set('selresultshow', false);
model.geom('geom1').run('arr3');
model.geom('geom1').create('r6', 'Rectangle');
model.geom('geom1').feature('r6').label('Stator back yoke');
model.geom('geom1').feature('r6').set('size', {'arc_inc' 'th_sbyoke'});
model.geom('geom1').feature('r6').set('pos', {'0' 'th_airgap+th_stooth'});
model.geom('geom1').feature('r6').set('selresult', true);
model.geom('geom1').feature('r6').set('selresultshow', false);
model.geom('geom1').run('r6');
model.geom('geom1').create('unisel3', 'UnionSelection');
model.geom('geom1').feature('unisel3').label('Stator yoke selection');
model.geom('geom1').feature('unisel3').set('entitydim', -1);
model.geom('geom1').feature('unisel3').set('input', {'arr3' 'r6'});
model.geom('geom1').run('unisel3');
model.geom('geom1').create('uni2', 'Union');
model.geom('geom1').feature('uni2').label('Stator yoke');
model.geom('geom1').feature('uni2').selection('input').named('unisel3');
model.geom('geom1').feature('uni2').set('intbnd', false);
model.geom('geom1').run('uni2');
model.geom('geom1').create('r7', 'Rectangle');
model.geom('geom1').feature('r7').label('Coil leg');
model.geom('geom1').feature('r7').set('size', {'arc_slot/2' 'th_coil'});
model.geom('geom1').feature('r7').set('pos', {'0' 'th_airgap+th_stooth-th_coil'});
model.geom('geom1').run('r7');
model.geom('geom1').create('arr4', 'Array');
model.geom('geom1').feature('arr4').label('Coil legs left');
model.geom('geom1').feature('arr4').selection('input').set({'r7'});
model.geom('geom1').feature('arr4').set('fullsize', {'Ns' '1'});
model.geom('geom1').feature('arr4').set('displ', {'arc_stooth+arc_slot' '0'});
model.geom('geom1').feature('arr4').set('selresult', true);
model.geom('geom1').feature('arr4').set('selresultshow', false);
model.geom('geom1').run('arr4');
model.geom('geom1').create('mov2', 'Move');
model.geom('geom1').feature('mov2').label('Coil legs right');
model.geom('geom1').feature('mov2').selection('input').named('arr4');
model.geom('geom1').feature('mov2').set('keep', true);
model.geom('geom1').feature('mov2').set('displx', 'arc_slot/2+arc_stooth');
model.geom('geom1').feature('mov2').set('selresult', true);
model.geom('geom1').feature('mov2').set('selresultshow', false);
model.geom('geom1').run('mov2');
model.geom('geom1').create('unisel4', 'UnionSelection');
model.geom('geom1').feature('unisel4').label('Coil domains');
model.geom('geom1').feature('unisel4').set('entitydim', -1);
model.geom('geom1').feature('unisel4').set('input', {'arr4' 'mov2'});
model.geom('geom1').feature('unisel4').set('selshow', 'dom');
model.geom('geom1').run('unisel4');
model.geom('geom1').create('r8', 'Rectangle');
model.geom('geom1').feature('r8').label('Stator air');
model.geom('geom1').feature('r8').set('size', {'arc_inc' 'th_airgap/2+th_stooth+th_sbyoke+th_air'});
model.geom('geom1').feature('r8').set('pos', {'0' 'th_airgap/2'});
model.geom('geom1').feature('r8').set('selresult', true);
model.geom('geom1').feature('r8').set('selresultshow', false);
model.geom('geom1').run('r8');
model.geom('geom1').create('unisel5', 'UnionSelection');
model.geom('geom1').feature('unisel5').label('Stator selection');
model.geom('geom1').feature('unisel5').set('entitydim', -1);
model.geom('geom1').feature('unisel5').set('input', {'unisel3' 'arr4' 'mov2' 'r8'});
model.geom('geom1').run('unisel5');
model.geom('geom1').create('uni3', 'Union');
model.geom('geom1').feature('uni3').label('Stator');
model.geom('geom1').feature('uni3').selection('input').named('unisel5');
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').run('fin');

model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Magnetic Steel domains');
model.selection('uni1').set('input', {'geom1_r2_dom' 'geom1_unisel3_dom'});

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').label('Airgap integration');
model.cpl('intop1').selection.named('geom1_r4_dom');

model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').set('F_phi', 'mf.Bx*mf.By/mu0_const');
model.variable('var2').descr('F_phi', 'Shear stress density');
model.variable('var2').set('Torque', 'intop1(F_phi*r_inc)/(th_airgap/4)*L_mag');
model.variable('var2').descr('Torque', 'Torque (axial flux motor)');
model.variable('var2').set('Force', 'intop1(F_phi)/(th_airgap/4)*L_mag');
model.variable('var2').descr('Force', 'Linear Force (linear motor)');

model.probe.create('var1', 'GlobalVariable');
model.probe('var1').model('comp1');
model.probe('var1').label('Torque');
model.probe('var1').set('expr', 'Torque');
model.probe.create('var2', 'GlobalVariable');
model.probe('var2').model('comp1');
model.probe('var2').label('Shear Force');
model.probe('var2').set('expr', 'Force');
model.probe('var2').set('window', 'window1');
model.probe('var2').set('windowtitle', 'Probe Plot 1');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('BHCurve', 'B-H Curve');
model.material('mat1').propertyGroup('BHCurve').func.create('BH', 'Interpolation');
model.material('mat1').propertyGroup.create('EffectiveBHCurve', 'Effective B-H Curve');
model.material('mat1').propertyGroup('EffectiveBHCurve').func.create('BHeff', 'Interpolation');
model.material('mat1').label('Soft Iron (Without Losses)');
model.material('mat1').set('family', 'iron');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('BHCurve').label('B-H Curve');
model.material('mat1').propertyGroup('BHCurve').func('BH').label('Interpolation 1');
model.material('mat1').propertyGroup('BHCurve').func('BH').set('table', {'0' '0';  ...
'663.146' '1';  ...
'1067.5' '1.1';  ...
'1705.23' '1.2';  ...
'2463.11' '1.3';  ...
'3841.67' '1.4';  ...
'5425.74' '1.5';  ...
'7957.75' '1.6';  ...
'12298.3' '1.7';  ...
'20462.8' '1.8';  ...
'32169.6' '1.9';  ...
'61213.4' '2';  ...
'111408' '2.1';  ...
'188487.757' '2.2';  ...
'267930.364' '2.3';  ...
'347507.836' '2.4'});
model.material('mat1').propertyGroup('BHCurve').func('BH').set('extrap', 'linear');
model.material('mat1').propertyGroup('BHCurve').func('BH').set('fununit', {'T'});
model.material('mat1').propertyGroup('BHCurve').func('BH').set('argunit', {'A/m'});
model.material('mat1').propertyGroup('BHCurve').func('BH').set('defineinv', true);
model.material('mat1').propertyGroup('BHCurve').func('BH').set('defineprimfun', true);
model.material('mat1').propertyGroup('BHCurve').set('normB', 'BH(normHin)');
model.material('mat1').propertyGroup('BHCurve').set('normH', 'BH_inv(normBin)');
model.material('mat1').propertyGroup('BHCurve').set('Wpm', 'BH_prim(normHin)');
model.material('mat1').propertyGroup('BHCurve').descr('normHin', 'Magnetic field norm');
model.material('mat1').propertyGroup('BHCurve').descr('normBin', 'Magnetic flux density norm');
model.material('mat1').propertyGroup('BHCurve').addInput('magneticfield');
model.material('mat1').propertyGroup('BHCurve').addInput('magneticfluxdensity');
model.material('mat1').propertyGroup('EffectiveBHCurve').label('Effective B-H Curve');
model.material('mat1').propertyGroup('EffectiveBHCurve').func('BHeff').label('Interpolation 1');
model.material('mat1').propertyGroup('EffectiveBHCurve').func('BHeff').set('table', {'0' '0';  ...
'663.146' '1.000000051691021';  ...
'1067.5' '1.4936495124126294';  ...
'1705.23' '1.9415328461315795';  ...
'2463.11' '2.257765669366018';  ...
'3841.67' '2.609980642431287';  ...
'5425.74' '2.8664452090837504';  ...
'7957.75' '3.1441438097176118';  ...
'12298.3' '3.448538051654125';  ...
'20462.8' '3.7816711973679054';  ...
'32169.6' '4.058345590113038';  ...
'61213.4' '4.420646552950275';  ...
'111408' '4.721274089545955';  ...
'188487.757' '4.972148140718701';  ...
'267930.364' '5.145510860855953';  ...
'347507.836' '5.245510861426532'});
model.material('mat1').propertyGroup('EffectiveBHCurve').func('BHeff').set('extrap', 'linear');
model.material('mat1').propertyGroup('EffectiveBHCurve').func('BHeff').set('fununit', {'T'});
model.material('mat1').propertyGroup('EffectiveBHCurve').func('BHeff').set('argunit', {'A/m'});
model.material('mat1').propertyGroup('EffectiveBHCurve').func('BHeff').set('defineinv', true);
model.material('mat1').propertyGroup('EffectiveBHCurve').set('normBeff', 'BHeff(normHeffin)');
model.material('mat1').propertyGroup('EffectiveBHCurve').set('normHeff', 'BHeff_inv(normBeffin)');
model.material('mat1').propertyGroup('EffectiveBHCurve').descr('normHeffin', 'Effective magnetic field norm');
model.material('mat1').propertyGroup('EffectiveBHCurve').descr('normBeffin', 'Effective magnetic flux density norm');
model.material('mat1').propertyGroup('EffectiveBHCurve').addInput('magneticfield');
model.material('mat1').propertyGroup('EffectiveBHCurve').addInput('magneticfluxdensity');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('RemanentFluxDensity', 'Remanent flux density');
model.material('mat2').label('N40M (Sintered NdFeB)');
model.material('mat2').set('family', 'chrome');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'1/1.4[uohm*m]' '0' '0' '0' '1/1.4[uohm*m]' '0' '0' '0' '1/1.4[uohm*m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('RemanentFluxDensity').set('murec', {'1.05' '0' '0' '0' '1.05' '0' '0' '0' '1.05'});
model.material('mat2').propertyGroup('RemanentFluxDensity').set('normBr', '1.28[T]');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat3').label('Copper');
model.material('mat3').set('family', 'copper');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('emissivity', '0.5');
model.material('mat3').propertyGroup('def').set('density', '8940[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '126e9[Pa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.34');
model.material('mat3').propertyGroup('linzRes').set('rho0', '1.667e-8[ohm*m]');
model.material('mat3').propertyGroup('linzRes').set('alpha', '3.862e-3[1/K]');
model.material('mat3').propertyGroup('linzRes').set('Tref', '293.15[K]');
model.material('mat3').propertyGroup('linzRes').addInput('temperature');
model.material('mat1').selection.named('uni1');
model.material('mat2').selection.named('geom1_unisel1');
model.material('mat3').selection.named('geom1_unisel4_dom');

model.view('view1').set('showmaterial', true);
model.view('view1').set('showgrid', true);

model.common.create('pres1', 'PrescribedDeformation', 'comp1');
model.common('pres1').selection.all;
model.common('pres1').label('Moving part/ rotor');
model.common('pres1').selection.named('geom1_unisel2_dom');
model.common('pres1').set('prescribedDeformation', {'v_lin*t' '0' '0'});

model.physics('mf').prop('d').set('d', 'L_mag');
model.physics('mf').prop('ShapeProperty').set('order_magneticvectorpotential', 1);
model.physics('mf').create('pp1', 'PeriodicPair', 1);
model.physics('mf').feature('pp1').set('pairs', {'ap1'});
model.physics('mf').create('pc1', 'PeriodicCondition', 1);
model.physics('mf').feature('pc1').label('Periodic Condition - stator');
model.physics('mf').feature('pc1').selection.set([64 66 68 70 190 191 192 193]);
model.physics('mf').create('pc2', 'PeriodicCondition', 1);
model.physics('mf').feature('pc2').label('Periodic Condition - moving part/ rotor');
model.physics('mf').feature('pc2').selection.set([1 3 5 7 60 61 62 63]);
model.physics('mf').create('als1', 'AmperesLawSolid', 2);
model.physics('mf').feature('als1').label('Magnetic steel');
model.physics('mf').feature('als1').selection.named('uni1');
model.physics('mf').feature('als1').set('ConstitutiveRelationBH', 'BHCurve');
model.physics('mf').create('coil1', 'Coil', 2);
model.physics('mf').feature('coil1').label('A phase winding');
model.physics('mf').feature('coil1').selection.set([16 19 28 29 30 31 40 41]);
model.physics('mf').feature('coil1').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil1').set('coilGroup', true);
model.physics('mf').feature('coil1').set('ICoil', 'iA');
model.physics('mf').feature('coil1').set('N', 'Nturn');
model.physics('mf').feature('coil1').set('coilWindArea', 'A_wire');
model.physics('mf').feature('coil1').create('rcd1', 'ReverseCoilGroupDomain', 2);
model.physics('mf').feature('coil1').feature('rcd1').selection.set([19 29 30 40]);
model.physics('mf').feature.duplicate('coil2', 'coil1');
model.physics('mf').feature('coil2').label('B phase winding');
model.physics('mf').feature('coil2').selection.set([20 21 22 23 32 33 34 35]);
model.physics('mf').feature('coil2').set('ICoil', 'iB');
model.physics('mf').feature('coil2').feature('rcd1').selection.set([21 22 32 35]);
model.physics('mf').feature.duplicate('coil3', 'coil2');
model.physics('mf').feature('coil3').label('C phase winding');
model.physics('mf').feature('coil3').selection.set([24 25 26 27 36 37 38 39]);
model.physics('mf').feature('coil3').set('ICoil', 'iC');
model.physics('mf').feature('coil3').feature('rcd1').selection.set([24 27 37 38]);
model.physics('mf').create('mag1', 'Magnet', 2);
model.physics('mf').feature('mag1').selection.named('geom1_unisel1');
model.physics('mf').feature('mag1').set('PatternType', 'LinearPattern');
model.physics('mf').feature('mag1').set('PeriodicType', 'Alternating');
model.physics('mf').feature('mag1').feature('north1').selection.set([12]);
model.physics('mf').feature('mag1').feature('south1').selection.set([11]);

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').label('Size 1 - periodic boundaries');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([3 5 7 64 66 68 70]);
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', '2[mm]');
model.mesh('mesh1').feature('ftri1').create('size2', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size2').label('Size 2 - magnetic steel');
model.mesh('mesh1').feature('ftri1').feature('size2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').feature('size2').selection.named('uni1');
model.mesh('mesh1').feature('ftri1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size2').set('hmax', '2[mm]');
model.mesh('mesh1').feature('ftri1').create('size3', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size3').label('Size 3 - airgap');
model.mesh('mesh1').feature('ftri1').feature('size3').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').feature('size3').selection.set([15]);
model.mesh('mesh1').feature('ftri1').feature('size3').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size3').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size3').set('hmax', '0.5[mm]');
model.mesh('mesh1').run;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/mf', true);
model.study('std1').label('Study 1 - Current angle sweep');
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'A_wire', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm^2', 0);
model.study('std1').feature('stat').setIndex('pname', 'A_wire', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm^2', 0);
model.study('std1').feature('stat').setIndex('pname', 'ang_el_init', 0);
model.study('std1').feature('stat').setIndex('plistarr', 'range(0,10,360)', 0);
model.study('std1').feature('stat').setIndex('punit', 'deg', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.probe('var1').genResult('none');
model.probe('var2').genResult('none');

model.sol('sol1').runAll;

model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Magnetic Flux Density Norm (mf)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 37, 0);
model.result('pg3').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond2/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg3').feature('surf1').set('colortable', 'Prism');
model.result('pg3').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg3').feature('surf1').set('colorcalibration', -0.8);
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature.create('str1', 'Streamline');
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('solutionparams', 'parent');
model.result('pg3').feature('str1').set('titletype', 'none');
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('udist', 0.03);
model.result('pg3').feature('str1').set('maxlen', 0.4);
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('inheritcolor', false);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('data', 'parent');
model.result('pg3').feature('str1').selection.geom('geom1', 1);
model.result('pg3').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193]);
model.result('pg3').feature('str1').set('inheritplot', 'surf1');
model.result('pg3').feature('str1').feature.create('col1', 'Color');
model.result('pg3').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg3').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg3').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg3').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg3').feature('str1').feature.create('filt1', 'Filter');
model.result('pg3').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg3').feature.create('con1', 'Contour');
model.result('pg3').feature('con1').set('showsolutionparams', 'on');
model.result('pg3').feature('con1').set('solutionparams', 'parent');
model.result('pg3').feature('con1').set('expr', 'mf.Az');
model.result('pg3').feature('con1').set('titletype', 'none');
model.result('pg3').feature('con1').set('number', 10);
model.result('pg3').feature('con1').set('levelrounding', false);
model.result('pg3').feature('con1').set('coloring', 'uniform');
model.result('pg3').feature('con1').set('colorlegend', false);
model.result('pg3').feature('con1').set('color', 'custom');
model.result('pg3').feature('con1').set('customcolor', [0.3764705955982208 0.3764705955982208 0.3764705955982208]);
model.result('pg3').feature('con1').set('resolution', 'fine');
model.result('pg3').feature('con1').set('inheritcolor', false);
model.result('pg3').feature('con1').set('showsolutionparams', 'on');
model.result('pg3').feature('con1').set('data', 'parent');
model.result('pg3').feature('con1').set('inheritplot', 'surf1');
model.result('pg3').feature('con1').feature.create('filt1', 'Filter');
model.result('pg3').feature('con1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 37, 0);
model.result('pg4').label('Moving Mesh');
model.result('pg4').create('mesh1', 'Mesh');
model.result('pg4').feature('mesh1').set('meshdomain', 'surface');
model.result('pg4').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg4').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg4').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg4').feature('mesh1').feature('sel1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14]);
model.result('pg4').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg4').feature('mesh1').set('qualexpr', 'comp1.spatial.relVol');
model.result('pg4').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg3').run;
model.result('pg1').set('window', 'window2');
model.result('pg1').set('windowtitle', 'Probe Plot 2');
model.result('pg1').run;

model.param.set('ang_el_init', '90[deg]');

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/mf', true);
model.study('std2').label('Study 2 - Transient');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').set('tlist', 'range(0,1/f_el/144,1/f_el)');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol2').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol2').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').create('su1', 'StoreSolution');
model.sol('sol2').create('st2', 'StudyStep');
model.sol('sol2').feature('st2').set('study', 'std2');
model.sol('sol2').feature('st2').set('studystep', 'time');
model.sol('sol2').create('v2', 'Variables');
model.sol('sol2').feature('v2').set('initmethod', 'sol');
model.sol('sol2').feature('v2').set('initsol', 'sol2');
model.sol('sol2').feature('v2').set('initsoluse', 'sol3');
model.sol('sol2').feature('v2').set('notsolmethod', 'sol');
model.sol('sol2').feature('v2').set('notsol', 'sol2');
model.sol('sol2').feature('v2').set('notsoluse', 'sol3');
model.sol('sol2').feature('v2').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,1/f_el/144,1/f_el)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {'var1' 'var2'});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('tout', 'tstepsclosest');
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('estrat', 'exclude');
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 0.2);
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 0.2);
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'onevery');

model.probe('var1').genResult('none');
model.probe('var2').genResult('none');

model.sol('sol2').runAll;

model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Magnetic Flux Density Norm (mf) 1');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 145, 0);
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('showlegendsmaxmin', true);
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 145, 0);
model.result('pg5').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond2/pg1');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('colortable', 'Prism');
model.result('pg5').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg5').feature('surf1').set('colorcalibration', -0.8);
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg5').feature.create('str1', 'Streamline');
model.result('pg5').feature('str1').set('showsolutionparams', 'on');
model.result('pg5').feature('str1').set('solutionparams', 'parent');
model.result('pg5').feature('str1').set('titletype', 'none');
model.result('pg5').feature('str1').set('posmethod', 'uniform');
model.result('pg5').feature('str1').set('udist', 0.03);
model.result('pg5').feature('str1').set('maxlen', 0.4);
model.result('pg5').feature('str1').set('maxtime', Inf);
model.result('pg5').feature('str1').set('inheritcolor', false);
model.result('pg5').feature('str1').set('showsolutionparams', 'on');
model.result('pg5').feature('str1').set('maxtime', Inf);
model.result('pg5').feature('str1').set('showsolutionparams', 'on');
model.result('pg5').feature('str1').set('maxtime', Inf);
model.result('pg5').feature('str1').set('showsolutionparams', 'on');
model.result('pg5').feature('str1').set('maxtime', Inf);
model.result('pg5').feature('str1').set('showsolutionparams', 'on');
model.result('pg5').feature('str1').set('maxtime', Inf);
model.result('pg5').feature('str1').set('data', 'parent');
model.result('pg5').feature('str1').selection.geom('geom1', 1);
model.result('pg5').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193]);
model.result('pg5').feature('str1').set('inheritplot', 'surf1');
model.result('pg5').feature('str1').feature.create('col1', 'Color');
model.result('pg5').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg5').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg5').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg5').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg5').feature('str1').feature.create('filt1', 'Filter');
model.result('pg5').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg5').feature.create('con1', 'Contour');
model.result('pg5').feature('con1').set('showsolutionparams', 'on');
model.result('pg5').feature('con1').set('solutionparams', 'parent');
model.result('pg5').feature('con1').set('expr', 'mf.Az');
model.result('pg5').feature('con1').set('titletype', 'none');
model.result('pg5').feature('con1').set('number', 10);
model.result('pg5').feature('con1').set('levelrounding', false);
model.result('pg5').feature('con1').set('coloring', 'uniform');
model.result('pg5').feature('con1').set('colorlegend', false);
model.result('pg5').feature('con1').set('color', 'custom');
model.result('pg5').feature('con1').set('customcolor', [0.3764705955982208 0.3764705955982208 0.3764705955982208]);
model.result('pg5').feature('con1').set('resolution', 'fine');
model.result('pg5').feature('con1').set('inheritcolor', false);
model.result('pg5').feature('con1').set('showsolutionparams', 'on');
model.result('pg5').feature('con1').set('data', 'parent');
model.result('pg5').feature('con1').set('inheritplot', 'surf1');
model.result('pg5').feature('con1').feature.create('filt1', 'Filter');
model.result('pg5').feature('con1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'dset3');
model.result('pg6').setIndex('looplevel', 145, 0);
model.result('pg6').label('Moving Mesh 1');
model.result('pg6').create('mesh1', 'Mesh');
model.result('pg6').feature('mesh1').set('meshdomain', 'surface');
model.result('pg6').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg6').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg6').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg6').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg6').feature('mesh1').feature('sel1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14]);
model.result('pg6').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg6').feature('mesh1').set('qualexpr', 'comp1.spatial.relVol');
model.result('pg6').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature.duplicate('surf2', 'surf1');
model.result('pg5').run;
model.result('pg5').feature('surf2').set('titletype', 'none');
model.result('pg5').feature('surf2').set('colortable', 'PrismDark');
model.result('pg5').feature('surf2').set('colorlegend', false);
model.result('pg5').feature('surf2').create('trn1', 'Translation');
model.result('pg5').run;
model.result('pg5').feature('surf2').feature('trn1').set('trans', {'-arc_inc' '0'});
model.result('pg5').run;
model.result('pg5').feature.duplicate('surf3', 'surf2');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('surf3').feature('trn1').set('trans', {'arc_inc' '0'});
model.result('pg5').run;
model.result('pg5').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Results summary');
model.result.evaluationGroup('eg1').set('data', 'dset3');
model.result.evaluationGroup('eg1').set('transpose', true);
model.result.evaluationGroup('eg1').create('av1', 'AvSurface');
model.result.evaluationGroup('eg1').feature('av1').set('intvolume', true);
model.result.evaluationGroup('eg1').feature('av1').label('Surface Average - airgap');
model.result.evaluationGroup('eg1').feature('av1').selection.named('geom1_r4_dom');
model.result.evaluationGroup('eg1').feature('av1').setIndex('expr', 'F_phi', 0);
model.result.evaluationGroup('eg1').feature('av1').setIndex('descr', 'Airgap shear stress', 0);
model.result.evaluationGroup('eg1').feature('av1').setIndex('expr', 'F_phi*arc_inc*L_mag', 1);
model.result.evaluationGroup('eg1').feature('av1').setIndex('descr', 'Linear force', 1);
model.result.evaluationGroup('eg1').feature('av1').setIndex('expr', 'F_phi*arc_inc*L_mag*r_inc', 2);
model.result.evaluationGroup('eg1').feature('av1').setIndex('unit', 'N*m', 2);
model.result.evaluationGroup('eg1').feature('av1').setIndex('descr', 'Torque (axial flux motor)', 2);
model.result.evaluationGroup('eg1').feature('av1').setIndex('expr', 'F_phi*arc_inc*L_mag*v_lin', 3);
model.result.evaluationGroup('eg1').feature('av1').setIndex('descr', 'Linear motion power', 3);
model.result.evaluationGroup('eg1').feature('av1').setIndex('expr', 'F_phi*arc_inc*L_mag*r_inc*s_rot*2*pi[rad]', 4);
model.result.evaluationGroup('eg1').feature('av1').setIndex('descr', 'Rotational motion power', 4);
model.result.evaluationGroup('eg1').feature('av1').set('dataseries', 'average');
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').label('Global Evaluation - windings');
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'mf.PCoil_1*3', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Electrical input power', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'mf.ICoil_1^2*mf.RCoil_1*3', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Windings resistive loss', 1);
model.result.evaluationGroup('eg1').feature('gev1').set('dataseries', 'average');
model.result.evaluationGroup('eg1').create('int1', 'IntSurface');
model.result.evaluationGroup('eg1').feature('int1').set('intvolume', true);
model.result.evaluationGroup('eg1').feature('int1').label('Surface Integration - magnets');
model.result.evaluationGroup('eg1').feature('int1').selection.named('geom1_unisel1');
model.result.evaluationGroup('eg1').feature('int1').set('expr', {'mf.Qrh'});
model.result.evaluationGroup('eg1').feature('int1').set('descr', {'Volumetric loss density, electric'});
model.result.evaluationGroup('eg1').feature('int1').set('unit', {'W/m'});
model.result.evaluationGroup('eg1').feature('int1').setIndex('expr', 'mf.Qrh*L_mag', 0);
model.result.evaluationGroup('eg1').feature('int1').setIndex('descr', 'Magnets induced loss', 0);
model.result.evaluationGroup('eg1').feature('int1').set('dataseries', 'average');
model.result.evaluationGroup('eg1').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Linear force');
model.result('pg7').set('data', 'dset3');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').set('expr', {'Force'});
model.result('pg7').feature('glob1').set('descr', {'Linear Force (linear motor)'});
model.result('pg7').feature('glob1').set('unit', {'N'});
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Torque harmonics');
model.result('pg8').set('data', 'none');
model.result('pg8').create('tblp1', 'Table');
model.result('pg8').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg8').feature('tblp1').set('linewidth', 'preference');
model.result('pg8').feature('tblp1').set('xaxisdata', 1);
model.result('pg8').feature('tblp1').set('plotcolumninput', 'manual');
model.result('pg8').feature('tblp1').set('plotcolumns', [2]);
model.result('pg8').feature('tblp1').set('transform', 'fourier');
model.result('pg8').feature('tblp1').set('fouriershow', 'spectrum');
model.result('pg8').feature('tblp1').set('preprocx', 'linear');
model.result('pg8').feature('tblp1').set('scalingx', 'f_el');
model.result('pg8').feature('tblp1').set('linestyle', 'dashed');
model.result('pg8').feature('tblp1').set('linemarker', 'square');
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').set('axislimits', true);
model.result('pg8').set('xmin', -1);
model.result('pg8').set('xmax', 25);
model.result('pg8').set('ymin', -1);
model.result('pg8').set('ymax', 8);
model.result('pg8').set('manualgrid', true);
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').run;
model.result('pg9').label('Magnetic flux on periodic pair');
model.result('pg9').set('titletype', 'none');
model.result('pg9').set('frametype', 'spatial');
model.result('pg9').set('data', 'dset3');
model.result('pg9').set('showlegends', false);
model.result('pg9').stepLast(0);
model.result('pg9').run;
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', '1');
model.result('pg9').feature('surf1').set('coloring', 'uniform');
model.result('pg9').feature('surf1').set('color', 'gray');
model.result('pg9').run;
model.result('pg9').create('arwl1', 'ArrowLine');
model.result('pg9').feature('arwl1').set('scaleactive', true);
model.result('pg9').feature('arwl1').set('scale', 4);
model.result('pg9').feature('arwl1').set('color', 'green');
model.result('pg9').feature('arwl1').create('sel1', 'Selection');
model.result('pg9').feature('arwl1').feature('sel1').selection.set([9]);
model.result('pg9').run;
model.result('pg9').feature('arwl1').create('filt1', 'Filter');
model.result('pg9').run;
model.result('pg9').feature('arwl1').feature('filt1').set('expr', 'x<arc_inc');
model.result('pg9').run;
model.result('pg9').feature.duplicate('arwl2', 'arwl1');
model.result('pg9').run;
model.result('pg9').feature('arwl2').set('color', 'red');
model.result('pg9').run;
model.result('pg9').feature('arwl2').feature('filt1').set('expr', 'x>arc_inc');
model.result('pg9').run;
model.result('pg9').feature.duplicate('arwl3', 'arwl2');
model.result('pg9').run;
model.result('pg9').feature('arwl3').set('color', 'blue');
model.result('pg9').run;
model.result('pg9').feature('arwl3').feature('sel1').selection.set([65]);
model.result('pg9').run;
model.result('pg9').feature('arwl3').feature('filt1').set('expr', 'x<arc_inc/5');

model.view('view1').set('showgrid', false);

model.result('pg9').run;

model.view('view1').set('showgrid', true);

model.result('pg5').run;

model.title('Linear Motor in 2D');

model.description('Linear motors are used in many applications in need of translational motion. Typical characteristics of linear motor designs are high precision or quick acceleration. In this model a synchronous motor with three phase winding on stationary part and permanent magnets on moving part is investigated. Moving mesh and periodic conditions are utilized in order to model a periodic part of a complete motor. It is also explained how to use this model for a 2D representation of an axial flux motors (rotational motion).');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('linear_motor_2d.mph');

model.modelNode.label('Components');

out = model;
