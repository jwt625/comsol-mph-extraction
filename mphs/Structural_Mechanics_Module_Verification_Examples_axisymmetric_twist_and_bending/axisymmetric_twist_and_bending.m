function out = model
%
% axisymmetric_twist_and_bending.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);

model.param.set('r0', '2[mm]');
model.param.descr('r0', 'Inner radius');
model.param.set('R1', '12[mm]');
model.param.descr('R1', 'Outer radius, thick section');
model.param.set('R2', '5[mm]');
model.param.descr('R2', 'Outer radius, thin section');
model.param.set('L1', '18[mm]');
model.param.descr('L1', 'Length, thick section');
model.param.set('L2', '50[mm]');
model.param.descr('L2', 'Length, thin section');
model.param.set('I', '(pi/4)*(R2^4 - r0^4)');
model.param.descr('I', 'Area moment of inertia');
model.param.set('J', '2*I');
model.param.descr('J', 'Torsion constant');
model.param.set('A_load', 'pi*(R2^2 - r0^2)');
model.param.descr('A_load', 'Area of applied load');
model.param.set('F_load', '10[MPa]*A_load');
model.param.descr('F_load', 'Total applied force');
model.param.set('Mt', '(2*pi/3)*(F_load/A_load)*(R2^3 - r0^3)');
model.param.descr('Mt', 'Equivalent twisting moment');
model.param.set('Mb', 'F_load*(L2 - L1)');
model.param.descr('Mb', 'Bending moment at transition');

model.geom.create('part1', 'Part', 2);
model.geom('part1').label('Shaft Section');
model.geom('part1').lengthUnit('mm');
model.geom('part1').create('pol1', 'Polygon');
model.geom('part1').feature('pol1').set('source', 'table');
model.geom('part1').feature('pol1').setIndex('table', 'r0', 0, 0);
model.geom('part1').feature('pol1').setIndex('table', 0, 0, 1);
model.geom('part1').feature('pol1').setIndex('table', 'R1', 1, 0);
model.geom('part1').feature('pol1').setIndex('table', 0, 1, 1);
model.geom('part1').feature('pol1').setIndex('table', 'R1', 2, 0);
model.geom('part1').feature('pol1').setIndex('table', 'L1', 2, 1);
model.geom('part1').feature('pol1').setIndex('table', 'R2', 3, 0);
model.geom('part1').feature('pol1').setIndex('table', 'L1', 3, 1);
model.geom('part1').feature('pol1').setIndex('table', 'R2', 4, 0);
model.geom('part1').feature('pol1').setIndex('table', 'L2', 4, 1);
model.geom('part1').feature('pol1').setIndex('table', 'r0', 5, 0);
model.geom('part1').feature('pol1').setIndex('table', 'L2', 5, 1);
model.geom('part1').run('pol1');
model.geom('part1').create('fil1', 'Fillet');
model.geom('part1').feature('fil1').selection('pointinsketch').set('pol1', 3);
model.geom('part1').feature('fil1').set('radius', 1);
model.geom('part1').run('fil1');
model.geom('part1').create('fil2', 'Fillet');
model.geom('part1').feature('fil2').selection('pointinsketch').set('fil1', 3);
model.geom('part1').feature('fil2').set('radius', 2);
model.geom('part1').run('fil2');

model.material.create('mat1', 'Common', '');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.group.create('lg1', 'LoadGroup');
model.group('lg1').label('Axial Extension');
model.group.create('lg2', 'LoadGroup');
model.group('lg2').label('Torsion');
model.group.create('lg3', 'LoadGroup');
model.group('lg3').label('Bending');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').run;

model.material.create('matlnk1', 'Link', 'comp1');

model.physics('solid').prop('Mode2Daxi').set('includeTwist', true);
model.physics('solid').prop('Mode2Daxi').set('ModeExtension', true);
model.physics('solid').prop('Mode2Daxi').set('mk', 1);
model.physics('solid').create('fix1', 'Fixed', 1);
model.physics('solid').feature('fix1').selection.set([2]);
model.physics('solid').create('bndl1', 'BoundaryLoad', 1);
model.physics('solid').feature('bndl1').label('Boundary Load: Axial Extension');
model.physics('solid').feature('bndl1').selection.set([3]);
model.physics('solid').feature('bndl1').set('LoadType', 'TotalForce');
model.physics('solid').feature('bndl1').set('Ftot', {'0' '0' 'F_load'});
model.physics('solid').feature('bndl1').set('loadGroup', 'lg1');
model.physics('solid').create('bndl2', 'BoundaryLoad', 1);
model.physics('solid').feature('bndl2').label('Boundary Load: Torsion');
model.physics('solid').feature('bndl2').selection.set([3]);
model.physics('solid').feature('bndl2').set('LoadType', 'TotalForce');
model.physics('solid').feature('bndl2').set('Ftot', {'0' 'F_load' '0'});
model.physics('solid').feature('bndl2').set('loadGroup', 'lg2');
model.physics('solid').create('bndl3', 'BoundaryLoad', 1);
model.physics('solid').feature('bndl3').label('Boundary Load: Bending');
model.physics('solid').feature('bndl3').selection.set([3]);
model.physics('solid').feature('bndl3').set('LoadType', 'TotalForce');
model.physics('solid').feature('bndl3').set('Ftot', {'F_load' '-i*F_load' '0'});
model.physics('solid').feature('bndl3').set('loadGroup', 'lg3');

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('ftri1').feature('dis1').selection.set([7]);
model.mesh('mesh1').feature('ftri1').feature('dis1').set('numelem', 20);
model.mesh('mesh1').feature('size').set('hauto', 3);
model.mesh('mesh1').run;

model.cpl.create('maxop1', 'Maximum', 'geom1');
model.cpl('maxop1').set('opname', 'max2Daxi');
model.cpl('maxop1').selection.geom('geom1', 1);
model.cpl('maxop1').selection.set([4 5 7]);

model.modelNode.create('comp2', true);

model.geom.create('geom2', 3);
model.geom('geom2').model('comp2');

model.mesh.create('mesh2', 'geom2');

model.geom('geom2').lengthUnit('mm');
model.geom('geom2').create('wp1', 'WorkPlane');
model.geom('geom2').feature('wp1').set('unite', true);
model.geom('geom2').feature('wp1').set('quickplane', 'xz');
model.geom('geom2').feature('wp1').geom.create('pi1', 'PartInstance');
model.geom('geom2').feature('wp1').geom.feature('pi1').set('selkeepnoncontr', false);
model.geom('geom2').feature('wp1').geom.feature('pi1').set('part', 'part1');
model.geom('geom2').run('wp1');
model.geom('geom2').feature.create('rev1', 'Revolve');
model.geom('geom2').feature('rev1').set('workplane', 'wp1');
model.geom('geom2').feature('rev1').selection('input').set({'wp1'});
model.geom('geom2').feature('rev1').set('angtype', 'full');
model.geom('geom2').runPre('fin');

model.coordSystem.create('sys3', 'geom2', 'Cylindrical');

model.geom('geom2').run;

model.coordSystem('sys3').label('Cylindrical System (Material Frame)');
model.coordSystem('sys3').set('frametype', 'material');

model.physics.create('solid2', 'SolidMechanics', 'geom2');
model.physics('solid2').model('comp2');

model.study('std1').feature('stat').setSolveFor('/physics/solid2', true);

model.material.create('matlnk2', 'Link', 'comp2');

model.physics('solid2').create('fix1', 'Fixed', 2);
model.physics('solid2').feature('fix1').selection.set([3 4 18 26]);
model.physics('solid2').create('bndl1', 'BoundaryLoad', 2);
model.physics('solid2').feature('bndl1').label('Boundary Load: Axial Extension');
model.physics('solid2').feature('bndl1').selection.set([13 14 23 27]);
model.physics('solid2').feature('bndl1').set('LoadType', 'TotalForce');
model.physics('solid2').feature('bndl1').set('Ftot', {'0' '0' 'F_load'});
model.physics('solid2').feature('bndl1').set('loadGroup', 'lg1');
model.physics('solid2').create('bndl2', 'BoundaryLoad', 2);
model.physics('solid2').feature('bndl2').label('Boundary Load: Torsion');
model.physics('solid2').feature('bndl2').selection.set([13 14 23 27]);
model.physics('solid2').feature('bndl2').set('coordinateSystem', 'sys3');
model.physics('solid2').feature('bndl2').set('LoadType', 'TotalForce');
model.physics('solid2').feature('bndl2').set('Ftot', {'0' 'F_load' '0'});
model.physics('solid2').feature('bndl2').set('loadGroup', 'lg2');
model.physics('solid2').create('bndl3', 'BoundaryLoad', 2);
model.physics('solid2').feature('bndl3').label('Boundary Load: Bending');
model.physics('solid2').feature('bndl3').selection.set([13 14 23 27]);
model.physics('solid2').feature('bndl3').set('LoadType', 'TotalForce');
model.physics('solid2').feature('bndl3').set('Ftot', {'F_load' '0' '0'});
model.physics('solid2').feature('bndl3').set('loadGroup', 'lg3');
model.physics('solid2').create('lsr1', 'LocalSystemResults', 3);
model.physics('solid2').feature('lsr1').set('coordinateSystem', 'sys3');

model.cpl.create('maxop2', 'Maximum', 'geom2');
model.cpl('maxop2').selection.geom('geom2', 2);
model.cpl('maxop2').set('opname', 'max3D');
model.cpl('maxop2').selection.set([7 8 9 10 11 12 20 21 22 28 29 30]);

model.mesh('mesh2').create('ftri1', 'FreeTri');
model.mesh('mesh2').feature('ftri1').selection.set([33]);
model.mesh('mesh2').feature('ftri1').create('dis1', 'Distribution');
model.mesh('mesh2').feature('ftri1').feature('dis1').selection.set([61]);
model.mesh('mesh2').feature('ftri1').feature('dis1').set('numelem', 20);
model.mesh('mesh2').create('swe1', 'Sweep');
model.mesh('mesh2').feature('size').set('hauto', 2);
model.mesh('mesh2').run;

model.study('std1').label('Study 1: Axial Extension & Torsion');
model.study('std1').feature('stat').set('useloadcase', true);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 2);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 2);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 2);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 2);
model.study('std1').feature('stat').setIndex('loadcase', 'Axial Extension', 0);
model.study('std1').feature('stat').setIndex('loadgroup', true, 0, 0);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 2);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 2);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std1').feature('stat').setIndex('loadgroup', false, 1, 2);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 1, 2);
model.study('std1').feature('stat').setIndex('loadcase', 'Torsion', 1);
model.study('std1').feature('stat').setIndex('loadgroup', true, 1, 1);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_u'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Solid Mechanics');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp2_u2'});
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (solid2)');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Solid Mechanics 2');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (solid2)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 2, 0);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'Rainbow');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').set('resolution', 'normal');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('expr', {'u' 'w'});
model.result('pg1').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.dataset.create('dset1solidrev', 'Revolve2D');
model.result.dataset('dset1solidrev').set('data', 'dset1');
model.result.dataset('dset1solidrev').set('revangle', 225);
model.result.dataset('dset1solidrev').set('startangle', -90);
model.result.dataset('dset1solidrev').set('hasspacevars', true);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1solidrev');
model.result('pg2').setIndex('looplevel', 2, 0);
model.result('pg2').set('defaultPlotID', 'stress3D');
model.result('pg2').label('Stress, 3D (solid)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg2').feature('surf1').set('threshold', 'manual');
model.result('pg2').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colortabletrans', 'none');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').feature('surf1').set('colortable', 'Prism');
model.result('pg2').feature('surf1').create('def', 'Deform');
model.result.dataset('dset1solidrev').set('hasspacevars', true);
model.result('pg2').feature('surf1').feature('def').set('revcoordsys', 'cylindrical');
model.result('pg2').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg2').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg2').feature('surf1').feature('def').set('descractive', true);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 2, 0);
model.result('pg3').set('defaultPlotID', 'stress');
model.result('pg3').label('Stress (solid2)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('expr', {'solid2.misesGp'});
model.result('pg3').feature('vol1').set('threshold', 'manual');
model.result('pg3').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg3').feature('vol1').set('colortable', 'Rainbow');
model.result('pg3').feature('vol1').set('colortabletrans', 'none');
model.result('pg3').feature('vol1').set('colorscalemode', 'linear');
model.result('pg3').feature('vol1').set('resolution', 'custom');
model.result('pg3').feature('vol1').set('refine', 2);
model.result('pg3').feature('vol1').set('colortable', 'Prism');
model.result('pg3').feature('vol1').create('def', 'Deform');
model.result('pg3').feature('vol1').feature('def').set('expr', {'u2' 'v2' 'w2'});
model.result('pg3').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result('pg1').run;

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').setSolveFor('/physics/solid', true);
model.study('std2').feature('freq').setSolveFor('/physics/solid2', true);
model.study('std2').label('Study 2: Bending');
model.study('std2').feature('freq').set('plist', 0);
model.study('std2').feature('freq').set('useloadcase', true);
model.study('std2').feature('freq').setIndex('loadcase', 'Load case 1', 0);
model.study('std2').feature('freq').setIndex('loadgroup', false, 0, 0);
model.study('std2').feature('freq').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std2').feature('freq').setIndex('loadgroup', false, 0, 1);
model.study('std2').feature('freq').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std2').feature('freq').setIndex('loadgroup', false, 0, 2);
model.study('std2').feature('freq').setIndex('loadgroupweight', '1.0', 0, 2);
model.study('std2').feature('freq').setIndex('loadcase', 'Load case 1', 0);
model.study('std2').feature('freq').setIndex('loadgroup', false, 0, 0);
model.study('std2').feature('freq').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std2').feature('freq').setIndex('loadgroup', false, 0, 1);
model.study('std2').feature('freq').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std2').feature('freq').setIndex('loadgroup', false, 0, 2);
model.study('std2').feature('freq').setIndex('loadgroupweight', '1.0', 0, 2);
model.study('std2').feature('freq').setIndex('loadcase', 'Bending', 0);
model.study('std2').feature('freq').setIndex('loadgroup', true, 0, 2);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol2').feature('s1').feature('p1').set('plistarr', {'0'});
model.sol('sol2').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol2').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol2').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s1').feature('p1').set('probes', {});
model.sol('sol2').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol2').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('s1').set('control', 'freq');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('se1', 'Segregated');
model.sol('sol2').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol2').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_u'});
model.sol('sol2').feature('s1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature('se1').feature('ss1').label('Solid Mechanics');
model.sol('sol2').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp2_u2'});
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (solid2)');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('se1').feature('ss2').label('Solid Mechanics 2');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (solid2)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').setIndex('looplevel', 1, 1);
model.result('pg4').set('defaultPlotID', 'stress');
model.result('pg4').label('Stress (solid) 1');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'solid.misesGp_peak'});
model.result('pg4').feature('surf1').set('threshold', 'manual');
model.result('pg4').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg4').feature('surf1').set('colortable', 'Rainbow');
model.result('pg4').feature('surf1').set('colortabletrans', 'none');
model.result('pg4').feature('surf1').set('colorscalemode', 'linear');
model.result('pg4').feature('surf1').set('resolution', 'normal');
model.result('pg4').feature('surf1').set('colortable', 'Prism');
model.result('pg4').feature('surf1').create('def', 'Deform');
model.result('pg4').feature('surf1').feature('def').set('expr', {'u' 'w'});
model.result('pg4').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.dataset.create('dset3solidrev', 'Revolve2D');
model.result.dataset('dset3solidrev').set('data', 'dset3');
model.result.dataset('dset3solidrev').set('revangle', 225);
model.result.dataset('dset3solidrev').set('startangle', -90);
model.result.dataset('dset3solidrev').set('hasspacevars', true);
model.result.dataset('dset3solidrev').set('modenumber', 'solid.mk');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset3solidrev');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').setIndex('looplevel', 1, 1);
model.result('pg5').set('defaultPlotID', 'stress3D');
model.result('pg5').label('Stress, 3D (solid) 1');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'solid.misesGp_peak'});
model.result('pg5').feature('surf1').set('threshold', 'manual');
model.result('pg5').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg5').feature('surf1').set('colortable', 'Rainbow');
model.result('pg5').feature('surf1').set('colortabletrans', 'none');
model.result('pg5').feature('surf1').set('colorscalemode', 'linear');
model.result('pg5').feature('surf1').set('colortable', 'Prism');
model.result('pg5').feature('surf1').create('def', 'Deform');
model.result.dataset('dset3solidrev').set('hasspacevars', true);
model.result('pg5').feature('surf1').feature('def').set('revcoordsys', 'cylindrical');
model.result('pg5').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg5').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result('pg5').feature('surf1').feature('def').set('descractive', true);
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset4');
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').setIndex('looplevel', 1, 1);
model.result('pg6').set('defaultPlotID', 'stress');
model.result('pg6').label('Stress (solid2) 1');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').create('vol1', 'Volume');
model.result('pg6').feature('vol1').set('expr', {'solid2.misesGp_peak'});
model.result('pg6').feature('vol1').set('threshold', 'manual');
model.result('pg6').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg6').feature('vol1').set('colortable', 'Rainbow');
model.result('pg6').feature('vol1').set('colortabletrans', 'none');
model.result('pg6').feature('vol1').set('colorscalemode', 'linear');
model.result('pg6').feature('vol1').set('resolution', 'custom');
model.result('pg6').feature('vol1').set('refine', 2);
model.result('pg6').feature('vol1').set('colortable', 'Prism');
model.result('pg6').feature('vol1').create('def', 'Deform');
model.result('pg6').feature('vol1').feature('def').set('expr', {'u2' 'v2' 'w2'});
model.result('pg6').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result('pg4').run;
model.result('pg2').run;
model.result('pg2').label('Stress: Axial Extension & Torsion (2D axi & 3D)');
model.result('pg2').set('titletype', 'none');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').run;
model.result('pg2').feature('surf1').set('unit', 'MPa');
model.result('pg2').run;
model.result('pg2').create('surf2', 'Surface');
model.result('pg2').feature('surf2').set('data', 'dset2');
model.result('pg2').feature('surf2').set('solutionparams', 'parent');
model.result('pg2').feature('surf2').set('expr', 'solid2.mises');
model.result('pg2').feature('surf2').set('unit', 'MPa');
model.result('pg2').feature('surf2').set('inheritplot', 'surf1');
model.result('pg2').feature('surf2').create('def1', 'Deform');
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('surf2').create('trn1', 'Translation');
model.result('pg2').run;
model.result('pg2').feature('surf2').feature('trn1').set('trans', {'3*R1' '0' '0'});
model.result('pg2').feature('surf2').feature('trn1').set('applytodatasetedges', false);
model.result('pg2').run;
model.result('pg2').create('line1', 'Line');
model.result('pg2').feature('line1').set('data', 'dset2');
model.result('pg2').feature('line1').set('expr', '1');
model.result('pg2').feature('line1').set('coloring', 'uniform');
model.result('pg2').feature('line1').set('color', 'black');
model.result('pg2').feature('line1').create('trn1', 'Translation');
model.result('pg2').run;
model.result('pg2').feature('line1').feature('trn1').set('trans', {'3*R1' '0' '0'});
model.result('pg2').run;
model.result('pg2').feature('line1').feature('trn1').set('applytodatasetedges', false);
model.result('pg2').run;
model.result('pg2').stepFirst(0);
model.result('pg2').run;
model.result('pg2').stepNext(0);
model.result('pg2').run;
model.result('pg5').run;
model.result('pg5').label('Stress: Bending (2D axi & 3D)');
model.result('pg5').set('titletype', 'none');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').run;
model.result('pg5').feature('surf1').set('expr', 'solid.mises');
model.result('pg5').feature('surf1').set('unit', 'MPa');
model.result('pg5').run;
model.result('pg5').create('surf2', 'Surface');
model.result('pg5').feature('surf2').set('data', 'dset4');
model.result('pg5').feature('surf2').set('expr', 'solid2.mises');
model.result('pg5').feature('surf2').set('unit', 'MPa');
model.result('pg5').feature('surf2').set('inheritplot', 'surf1');
model.result('pg5').feature('surf2').create('def1', 'Deform');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('surf2').create('trn1', 'Translation');
model.result('pg5').run;
model.result('pg5').feature('surf2').feature('trn1').set('trans', {'3*R1' '0' '0'});
model.result('pg5').feature('surf2').feature('trn1').set('applytodatasetedges', false);
model.result('pg5').run;
model.result('pg5').create('line1', 'Line');
model.result('pg5').feature('line1').set('data', 'dset4');
model.result('pg5').feature('line1').set('expr', '1');
model.result('pg5').feature('line1').set('coloring', 'uniform');
model.result('pg5').feature('line1').set('color', 'black');
model.result('pg5').feature('line1').create('trn1', 'Translation');
model.result('pg5').run;
model.result('pg5').feature('line1').feature('trn1').set('applytodatasetedges', false);
model.result('pg5').feature('line1').feature('trn1').set('trans', {'3*R1' '0' '0'});
model.result('pg5').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Stress Concentration Factors');
model.result.evaluationGroup('eg1').set('data', 'none');
model.result.evaluationGroup('eg1').set('transpose', true);
model.result.evaluationGroup('eg1').set('includeparameters', false);
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').set('data', 'dset1');
model.result.evaluationGroup('eg1').feature('gev1').setIndex('looplevelinput', 'first', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'max2Daxi(solid.szz)/(F_load/A_load)', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Axial extension (2D axi)', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'comp2.max3D(comp2.solid2.lsr1.sl33)/(F_load/A_load)', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Axial extension (3D)', 1);
model.result.evaluationGroup('eg1').create('gev2', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev2').set('data', 'dset1');
model.result.evaluationGroup('eg1').feature('gev2').setIndex('looplevelinput', 'last', 0);
model.result.evaluationGroup('eg1').feature('gev2').setIndex('expr', 'max2Daxi(solid.sphiz)/(Mt*R2/J)', 0);
model.result.evaluationGroup('eg1').feature('gev2').setIndex('unit', '', 0);
model.result.evaluationGroup('eg1').feature('gev2').setIndex('descr', 'Torsion (2D axi)', 0);
model.result.evaluationGroup('eg1').feature('gev2').setIndex('expr', 'comp2.max3D(solid2.lsr1.sl23)/(Mt*R2/J)', 1);
model.result.evaluationGroup('eg1').feature('gev2').setIndex('descr', 'Torsion (3D)', 1);
model.result.evaluationGroup('eg1').create('gev3', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev3').set('data', 'dset3');
model.result.evaluationGroup('eg1').feature('gev3').setIndex('looplevelinput', 'last', 1);
model.result.evaluationGroup('eg1').feature('gev3').setIndex('looplevelinput', 'last', 0);
model.result.evaluationGroup('eg1').feature('gev3').setIndex('expr', 'max2Daxi(abs(solid.szz))/(Mb*R2/I)', 0);
model.result.evaluationGroup('eg1').feature('gev3').setIndex('descr', 'Bending (2D axi)', 0);
model.result.evaluationGroup('eg1').feature('gev3').setIndex('expr', 'comp2.max3D(solid2.lsr1.sl33)/(Mb*R2/I)', 1);
model.result.evaluationGroup('eg1').feature('gev3').setIndex('descr', 'Bending (3D)', 1);
model.result.evaluationGroup('eg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf1').set('unit', 'MPa');
model.result('pg1').run;
model.result('pg3').run;
model.result('pg3').feature('vol1').set('unit', 'MPa');
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').feature('surf1').set('expr', 'solid.mises');
model.result('pg4').feature('surf1').set('unit', 'MPa');
model.result('pg4').run;
model.result('pg6').run;
model.result('pg6').feature('vol1').set('expr', 'solid2.mises');
model.result('pg6').feature('vol1').set('unit', 'MPa');
model.result('pg6').run;
model.result.dataset.create('cpt1', 'CutPoint3D');
model.result.dataset('cpt1').set('pointx', 'R2');
model.result.dataset('cpt1').set('pointy', 0);
model.result.dataset('cpt1').set('pointz', 'L2');
model.result('pg2').run;
model.result.duplicate('pg7', 'pg2');
model.result('pg7').run;
model.result('pg7').label('Thumbnail');
model.result('pg7').set('showlegends', false);
model.result('pg7').run;
model.result('pg7').feature('surf2').set('expr', '1');
model.result('pg7').run;
model.result('pg7').feature('surf2').feature.remove('def1');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').feature('surf2').create('mtrl1', 'MaterialAppearance');
model.result('pg7').run;
model.result('pg7').feature('surf2').feature('mtrl1').set('appearance', 'custom');
model.result('pg7').feature('surf2').feature('mtrl1').set('family', 'steel');
model.result('pg7').run;
model.result('pg7').feature.remove('line1');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').create('arpt1', 'ArrowPoint');
model.result('pg7').feature('arpt1').set('revcoordsys', 'cylindrical');
model.result('pg7').feature('arpt1').set('data', 'cpt1');
model.result('pg7').feature('arpt1').set('expr', {'0' '0' 'r0*5'});
model.result('pg7').feature('arpt1').set('arrowtype', 'double');
model.result('pg7').feature('arpt1').set('scaleactive', true);
model.result('pg7').feature('arpt1').create('trn1', 'Translation');
model.result('pg7').run;
model.result('pg7').feature('arpt1').feature('trn1').set('trans', {'-R2' '0' '-1*r0'});
model.result('pg7').feature('arpt1').feature('trn1').set('applytodatasetedges', false);
model.result('pg7').run;

model.view('view5').set('showgrid', false);
model.view('view5').set('showaxisorientation', false);
model.view('view5').set('environmentmap', 'envmap_machineshop2');
model.view('view5').set('shadowmapping', true);
model.view('view5').set('displayoutput', true);
model.view('view5').set('showgrid', true);
model.view('view5').set('showaxisorientation', true);
model.view('view5').set('shadowmapping', false);
model.view('view5').set('displayoutput', false);

model.result('pg7').run;
model.result.remove('pg7');
model.result.dataset.remove('cpt1');
model.result('pg2').run;

model.title('Axisymmetric Twist and Bending');

model.description('Including circumferential displacements in a 2D axisymmetric Solid Mechanics interface allows twist and bending deformations to be computed. This model determines stress concentration factors for a hollow shaft for load cases of axial extension, torsion as well as bending using a computationally lean 2D axisymmetric formulation. To demonstrate their equivalence, the model setup and results are compared with a full 3D analysis.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('axisymmetric_twist_and_bending.mph');

model.modelNode.label('Components');

out = model;
