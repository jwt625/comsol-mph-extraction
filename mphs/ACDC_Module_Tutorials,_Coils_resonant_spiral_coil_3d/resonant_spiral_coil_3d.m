function out = model
%
% resonant_spiral_coil_3d.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Tutorials,_Coils');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mef', 'ElectricInductionCurrents', 'geom1');
model.physics('mef').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/mef', true);

model.param.set('frq', '6e6[Hz]');
model.param.set('delta', 'sqrt(2/(mu0_const*2*pi*frq*5.98e7[S/m]))');

model.modelNode('comp1').sorder('linear');
model.modelNode('comp1').curvedInterior(false);

model.geom('geom1').insertFile('resonant_spiral_coil_3d_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Copper Surface');
model.selection('sel1').set([4 5 6 7 8]);
model.selection('sel1').geom('geom1', 3, 2, {'exterior'});
model.selection('sel1').set([4 5 6 7 8]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Copper Domains');
model.selection('sel2').set([4 5 6 7 8]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Contact Boundaries');
model.selection('sel3').geom(2);
model.selection('sel3').set([32]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Copper and Contact Boundaries');
model.selection('uni1').set('entitydim', 2);
model.selection('uni1').set('input', {'sel3' 'sel1'});
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Copper Edges');
model.selection('sel4').set([4 5 6 7 8]);
model.selection('sel4').geom('geom1', 3, 1, {'exterior'});
model.selection('sel4').set([4 5 6 7 8]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Feed and Ground');
model.selection('sel5').geom(2);
model.selection('sel5').set([20 43]);
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Varnish Boundaries');
model.selection('dif1').set('entitydim', 2);
model.selection('dif1').set('add', {'uni1'});
model.selection('dif1').set('subtract', {'sel5'});

model.view('view1').set('showgrid', false);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat1').label('Copper');
model.material('mat1').set('family', 'copper');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.35');
model.material('mat1').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat1').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat1').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat1').propertyGroup('linzRes').addInput('temperature');
model.material('mat1').selection.named('sel2');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat2').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat2').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat2').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat2').label('Air');
model.material('mat2').set('family', 'air');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat2').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat2').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat2').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat2').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat2').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('molarmass', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat2').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material('mat2').propertyGroup('def').addInput('pressure');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat2').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat2').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat2').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat2').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat2').propertyGroup('idealGas').addInput('temperature');
model.material('mat2').propertyGroup('idealGas').addInput('pressure');
model.material('mat2').materialType('nonSolid');
model.material('mat2').selection.all;
model.material.move('mat2', 0);
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').label('FR4 (Circuit Board)');
model.material('mat3').set('family', 'pcb');
model.material('mat3').set('color', 'custom');
model.material('mat3').set('customcolor', '0 0.5019607843137255 0.25098039215686274');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'0.004[S/m]' '0' '0' '0' '0.004[S/m]' '0' '0' '0' '0.004[S/m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'4.5' '0' '0' '0' '4.5' '0' '0' '0' '4.5'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'18e-6[1/K]' '0' '0' '0' '18e-6[1/K]' '0' '0' '0' '18e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '1369[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('density', '1900[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'0.3[W/(m*K)]' '0' '0' '0' '0.3[W/(m*K)]' '0' '0' '0' '0.3[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '22[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.15');
model.material('mat3').selection.set([2]);
model.material('mat3').propertyGroup('def').set('electricconductivity', {'0[S/m]'});
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat4').label('FR4 (Circuit Board) 1');
model.material('mat4').set('family', 'pcb');
model.material('mat4').set('color', 'custom');
model.material('mat4').set('customcolor', '0 0.5019607843137255 0.25098039215686274');
model.material('mat4').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('electricconductivity', {'0.004[S/m]' '0' '0' '0' '0.004[S/m]' '0' '0' '0' '0.004[S/m]'});
model.material('mat4').propertyGroup('def').set('relpermittivity', {'4.5' '0' '0' '0' '4.5' '0' '0' '0' '4.5'});
model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', {'18e-6[1/K]' '0' '0' '0' '18e-6[1/K]' '0' '0' '0' '18e-6[1/K]'});
model.material('mat4').propertyGroup('def').set('heatcapacity', '1369[J/(kg*K)]');
model.material('mat4').propertyGroup('def').set('density', '1900[kg/m^3]');
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'0.3[W/(m*K)]' '0' '0' '0' '0.3[W/(m*K)]' '0' '0' '0' '0.3[W/(m*K)]'});
model.material('mat4').propertyGroup('Enu').set('E', '22[GPa]');
model.material('mat4').propertyGroup('Enu').set('nu', '0.15');
model.material('mat4').selection.geom('geom1', 2);
model.material('mat4').selection.named('dif1');
model.material('mat4').propertyGroup('def').set('electricconductivity', {'0[S/m]'});

model.physics('mef').prop('ShapeProperty').set('order_magneticvectorpotential', 1);
model.physics('mef').prop('ShapeProperty').set('order_electricpotential', 1);
model.physics('mef').feature('mi1').create('ein1', 'ElectricInsulation', 2);
model.physics('mef').feature('mi1').feature('ein1').selection.all;
model.physics('mef').feature('mi1').create('term1', 'Terminal', 2);
model.physics('mef').feature('mi1').feature('term1').selection.set([20]);
model.physics('mef').feature('mi1').feature('term1').set('TerminalType', 'Voltage');
model.physics('mef').feature('mi1').feature('term1').set('V0', '5[mV]');
model.physics('mef').feature('mi1').create('gnd2', 'Ground', 2);
model.physics('mef').feature('mi1').feature('gnd2').selection.set([43]);
model.physics('mef').create('mc1', 'MagneticContinuity', 2);
model.physics('mef').feature('mc1').selection.named('dif1');
model.physics('mef').feature('mc1').create('ci1', 'ContactImpedance', 2);
model.physics('mef').feature('mc1').feature('ci1').selection.named('dif1');
model.physics('mef').feature('mc1').feature('ci1').set('ds', '0.0001[mm]');
model.physics('mef').feature('mc1').create('ci2', 'ContactImpedance', 2);
model.physics('mef').feature('mc1').feature('ci2').selection.named('sel3');
model.physics('mef').feature('mc1').feature('ci2').set('ds', '0.0002[mm]');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature.move('size1', 1);
model.mesh('mesh1').feature('size1').selection.geom('geom1', 1);
model.mesh('mesh1').feature('size1').selection.named('sel4');
model.mesh('mesh1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('size1').set('hmax', 0.2);
model.mesh('mesh1').run('size1');
model.mesh('mesh1').create('size2', 'Size');
model.mesh('mesh1').feature('size2').selection.geom('geom1', 3);
model.mesh('mesh1').feature('size2').selection.named('sel2');
model.mesh('mesh1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('size2').set('hmax', 0.5);
model.mesh('mesh1').run('size2');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(3);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('bl1').selection.named('sel2');
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('uni1');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 4);
model.mesh('mesh1').feature('bl1').feature('blp').set('blstretch', 1.5);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', 'delta/2');
model.mesh('mesh1').run('bl1');
model.mesh('mesh1').run('ftet1');

model.result.dataset.create('mesh1', 'Mesh');
model.result.dataset('mesh1').set('mesh', 'mesh1');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Mesh Plot 1');
model.result('pg1').set('data', 'mesh1');
model.result('pg1').set('inherithide', true);
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').create('mesh1', 'Mesh');
model.result('pg1').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg1').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg1').feature('mesh1').set('meshdomain', 'volume');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').label('Mesh Plot');
model.result('pg1').run;
model.result('pg1').feature('mesh1').set('colortable', 'TrafficLightClassic');
model.result('pg1').feature('mesh1').set('colortabletrans', 'reverse');
model.result('pg1').feature('mesh1').set('filteractive', true);
model.result('pg1').feature('mesh1').set('logfilterexpr', 'y>1[mm]');
model.result('pg1').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg1').feature('mesh1').feature('sel1').selection.named('sel2');
model.result('pg1').run;
model.result('pg1').run;

model.study('std1').setGenPlots(false);
model.study('std1').feature('freq').set('plist', 'range(5600000,28000,7000000)');
model.study('std1').feature('freq').set('preusesol', 'auto');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(5600000,28000,7000000)'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'auto');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'fgmres');
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 10000);
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('kp1', 'KrylovPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('kp1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('kp1').set('prefun', 'gmres');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('kp1').set('iterm', 'itertol');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('kp1').set('iter', '25');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('kp1').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s1').set('stol', '1e-9');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'bicgstab');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_V'});
model.sol('sol1').feature('s1').feature('i1').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('so1').set('iter', 3);
model.sol('sol1').feature('s1').feature('i1').feature('so1').set('hybridvar', {'comp1_A'});

model.probe.create('var1', 'GlobalVariable');
model.probe('var1').model('comp1');
model.probe('var1').set('expr', 'real(1/mef.Y11)');
model.probe.create('var2', 'GlobalVariable');
model.probe('var2').model('comp1');
model.probe('var2').set('expr', 'imag(1/mef.Y11)');
model.probe('var1').genResult('none');
model.probe('var2').genResult('none');

model.sol('sol1').runAll;

model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('B, J and V');
model.result('pg3').setIndex('looplevel', 22, 0);
model.result('pg3').set('edges', false);
model.result('pg3').create('slc1', 'Slice');
model.result('pg3').feature('slc1').set('expr', 'log(mef.normJ)');
model.result('pg3').feature('slc1').set('quickplane', 'zx');
model.result('pg3').feature('slc1').set('quickymethod', 'coord');
model.result('pg3').feature('slc1').set('quicky', -2);
model.result('pg3').feature('slc1').set('colortable', 'Prism');
model.result('pg3').feature('slc1').create('sel1', 'Selection');
model.result('pg3').feature('slc1').feature('sel1').selection.set([4]);
model.result('pg3').run;
model.result('pg3').create('arws1', 'ArrowSurface');
model.result('pg3').feature('arws1').setIndex('expr', 'side(4,mef.Jx)', 0);
model.result('pg3').feature('arws1').setIndex('expr', 'side(4,mef.Jy)', 1);
model.result('pg3').feature('arws1').setIndex('expr', 'side(4,mef.Jz)', 2);
model.result('pg3').feature('arws1').set('placement', 'gausspoints');
model.result('pg3').feature('arws1').set('arrowtype', 'cone');
model.result('pg3').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('arws1').set('logrange', 25);
model.result('pg3').feature('arws1').set('arrowbase', 'center');
model.result('pg3').feature('arws1').create('sel1', 'Selection');
model.result('pg3').feature('arws1').feature('sel1').selection.named('sel1');
model.result('pg3').run;
model.result('pg3').feature('arws1').create('col1', 'Color');
model.result('pg3').run;
model.result('pg3').feature('arws1').feature('col1').set('colorlegend', false);
model.result('pg3').feature('arws1').feature('col1').set('expr', 'mef.normJ');
model.result('pg3').feature('arws1').feature('col1').set('unit', 'A/mm^2');
model.result('pg3').feature('arws1').feature('col1').set('colortable', 'GrayScale');
model.result('pg3').run;
model.result('pg3').create('line1', 'Line');
model.result('pg3').feature('line1').set('expr', '1');
model.result('pg3').feature('line1').set('coloring', 'uniform');
model.result('pg3').feature('line1').set('color', 'gray');
model.result('pg3').feature('line1').create('sel1', 'Selection');
model.result('pg3').feature('line1').feature('sel1').selection.named('sel4');
model.result('pg3').run;
model.result('pg3').create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('colortable', 'Dipole');
model.result('pg3').feature('vol1').create('sel1', 'Selection');
model.result('pg3').feature('vol1').feature('sel1').selection.set([2]);
model.result('pg3').run;
model.result('pg3').feature('vol1').create('tran1', 'Transparency');
model.result('pg3').run;
model.result('pg3').feature('vol1').feature('tran1').set('uniformblending', 0.5);
model.result('pg3').run;
model.result('pg3').create('arwv1', 'ArrowVolume');
model.result('pg3').feature('arwv1').set('xnumber', 40);
model.result('pg3').feature('arwv1').set('ynumber', 1);
model.result('pg3').feature('arwv1').set('znumber', 40);
model.result('pg3').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('arwv1').set('arrowbase', 'center');
model.result('pg3').feature('arwv1').create('col1', 'Color');
model.result('pg3').run;
model.result('pg3').feature('arwv1').feature('col1').set('expr', 'mef.normB');
model.result('pg3').feature('arwv1').feature('col1').set('colortable', 'PrismDark');
model.result('pg3').feature('arwv1').feature('col1').set('colorlegend', false);
model.result('pg3').run;
model.result('pg3').run;

model.view('view1').set('scenelight', false);

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Normal (displacement) current density');
model.result('pg4').setIndex('looplevel', 22, 0);
model.result('pg4').set('edges', false);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'abs(mef.mc1.ci2.nJ)');
model.result('pg4').feature('surf1').set('unit', 'A/mm^2');
model.result('pg4').feature('surf1').set('colortable', 'RainbowLightClassic');
model.result('pg4').feature('surf1').create('sel1', 'Selection');
model.result('pg4').feature('surf1').feature('sel1').selection.named('sel3');
model.result('pg4').run;
model.result('pg4').create('line1', 'Line');
model.result('pg4').feature('line1').set('expr', '1');
model.result('pg4').feature('line1').set('coloring', 'uniform');
model.result('pg4').feature('line1').set('color', 'gray');
model.result('pg4').feature('line1').create('sel1', 'Selection');
model.result('pg4').feature('line1').feature('sel1').selection.named('sel4');
model.result('pg4').run;
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').run;
model.result('pg5').label('|J|');
model.result('pg5').setIndex('looplevel', 22, 0);
model.result('pg5').set('edges', false);
model.result('pg5').create('line1', 'Line');
model.result('pg5').feature('line1').set('expr', '1');
model.result('pg5').feature('line1').set('coloring', 'uniform');
model.result('pg5').feature('line1').set('color', 'gray');
model.result('pg5').feature('line1').create('sel1', 'Selection');
model.result('pg5').feature('line1').feature('sel1').selection.named('sel4');
model.result('pg5').run;
model.result('pg5').create('vol1', 'Volume');
model.result('pg5').feature('vol1').set('expr', 'mef.normJ');
model.result('pg5').feature('vol1').set('unit', 'A/mm^2');
model.result('pg5').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('vol1').set('colortabletrans', 'reverse');
model.result('pg5').feature('vol1').create('sel1', 'Selection');
model.result('pg5').feature('vol1').feature('sel1').selection.named('sel2');
model.result('pg5').run;
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Feed Impedance');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').setIndex('expr', 'real(1/mef.Y11)', 0);
model.result('pg6').feature('glob1').setIndex('descr', 'R', 0);
model.result('pg6').feature('glob1').setIndex('expr', 'imag(1/mef.Y11)', 1);
model.result('pg6').feature('glob1').setIndex('descr', 'X', 1);
model.result('pg6').feature('glob1').set('linewidth', 3);
model.result('pg6').run;
model.result('pg6').run;
model.result('pg3').run;
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').run;
model.result('pg3').feature('line1').set('titletype', 'none');
model.result('pg3').run;
model.result('pg3').feature('vol1').set('unit', 'mV');
model.result('pg3').feature('vol1').set('colortable', 'RainbowLight');
model.result('pg3').run;
model.result('pg3').feature('slc1').label('Current Density Normal');
model.result('pg3').feature('slc1').set('expr', 'mef.normJ');
model.result('pg3').feature('slc1').set('colorscalemode', 'logarithmic');
model.result('pg4').run;

model.view('view1').set('scenelight', true);

model.result('pg4').set('showlegendsunit', true);
model.result('pg4').run;
model.result('pg4').feature('surf1').label('Normal Current Density');
model.result('pg4').feature('surf1').set('titletype', 'label');
model.result('pg4').feature('surf1').set('unit', 'A/m^2');
model.result('pg4').feature('surf1').set('colortable', 'ThermalDark');
model.result('pg4').run;
model.result('pg4').feature('line1').set('titletype', 'none');
model.result('pg5').run;
model.result('pg5').feature('line1').set('titletype', 'none');
model.result('pg5').run;
model.result('pg5').set('showlegendsunit', true);
model.result('pg4').run;
model.result.duplicate('pg7', 'pg4');
model.result('pg7').run;
model.result('pg7').create('surf2', 'Surface');
model.result('pg7').feature('surf2').create('mtrl1', 'MaterialAppearance');
model.result('pg7').run;
model.result('pg7').feature('surf2').feature('mtrl1').set('material', 'mat1');
model.result('pg7').run;
model.result('pg7').feature('surf2').set('expr', '1');
model.result('pg7').feature('surf2').create('tran1', 'Transparency');
model.result('pg7').run;
model.result('pg7').feature('surf2').feature('tran1').set('transparency', 0.8);
model.result('pg7').run;
model.result('pg7').feature('surf2').label('Copper Surface');
model.result('pg7').feature('surf2').set('titletype', 'none');
model.result('pg7').run;
model.result('pg7').create('strmsl1', 'StreamlineMultislice');
model.result('pg7').feature('strmsl1').set('titletype', 'none');
model.result('pg7').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg7').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg7').feature('strmsl1').set('ycoord', 0);
model.result('pg7').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg7').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg7').feature('strmsl1').set('udist', 0.02);
model.result('pg7').feature('strmsl1').create('col1', 'Color');
model.result('pg7').run;
model.result('pg7').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg7').feature('strmsl1').feature('col1').set('expr', 'mef.normB');
model.result('pg7').feature('strmsl1').feature('col1').set('unit', 'uT');
model.result('pg7').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg7').run;
model.result('pg7').create('mslc1', 'Multislice');
model.result('pg7').feature('mslc1').set('expr', 'mef.normB');
model.result('pg7').feature('mslc1').set('unit', 'uT');
model.result('pg7').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg7').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg7').feature('mslc1').set('ycoord', 0);
model.result('pg7').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg7').feature('mslc1').set('colortabletrans', 'reverse');
model.result('pg7').feature('mslc1').set('colortable', 'Prism');
model.result('pg7').feature('mslc1').set('colorscalemode', 'logarithmic');
model.result('pg7').feature('mslc1').create('tran1', 'Transparency');
model.result('pg7').run;
model.result('pg7').feature('mslc1').feature('tran1').set('transparency', 0.4);

model.title('Resonant Spiral Coil in 3D');

model.description('At the resonance frequency, the capacitive coupling between the turns causes the impedance of a coil to transition from inductive to capacitive. This application analyzes the resonance of a 5 turn spiral coil of copper equipped with a thin epoxy varnish insulation layer. The capacitive coupling through the thin varnish layer is modeled using a special boundary condition, thereby avoiding costly volumetric meshing.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('resonant_spiral_coil_3d.mph');

model.modelNode.label('Components');

out = model;
