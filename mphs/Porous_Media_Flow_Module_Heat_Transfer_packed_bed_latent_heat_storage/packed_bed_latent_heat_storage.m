function out = model
%
% packed_bed_latent_heat_storage.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Porous_Media_Flow_Module/Heat_Transfer');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('fp', 'FreeAndPorousMediaFlow', 'geom1');
model.physics('fp').model('comp1');
model.physics.create('ht', 'HeatTransferInSolidsAndFluids', 'geom1');
model.physics('ht').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/fp', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'packed_bed_latent_heat_storage.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').runPre('fin');

model.param.set('dp', '55[mm]');
model.param.descr('dp', 'Diameter of encapsulated PCM');
model.param.set('por', '0.49');
model.param.descr('por', 'Bed porosity');
model.param.set('V_in', '2[l/min]');
model.param.descr('V_in', 'Flow rate');
model.param.set('T0', '32[degC]');
model.param.descr('T0', 'Initial temperature');
model.param.set('Qu', '375[W]');
model.param.descr('Qu', 'Solar heating power');
model.param.set('rho_av', '(861[kg/m^3]+778[kg/m^3])/2');
model.param.descr('rho_av', 'Average density of paraffin');

model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water, liquid');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Paraffin, solid');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Paraffin, liquid');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').label('Glass Wool');
model.material('mat4').selection.set([4]);
model.material.create('pmat1', 'PorousMedia', 'comp1');
model.material('pmat1').selection.set([2]);

model.physics('fp').selection.set([1 2 3]);
model.physics('fp').create('porous1', 'PorousMedium', 2);
model.physics('fp').feature('porous1').selection.set([2]);
model.physics('fp').feature('porous1').set('flowModelType', 'nonDarcian');
model.physics('fp').feature('porous1').feature('pm1').set('permeabilityModelType', 'ergun');
model.physics('fp').feature('porous1').feature('pm1').set('dp', 'dp');
model.physics('ht').feature('fluid1').selection.set([1 3]);
model.physics('ht').feature('init1').set('Tinit', 'T0');
model.physics('ht').create('porous1', 'PorousMediumHeatTransferModel', 2);
model.physics('ht').feature('porous1').selection.set([2]);
model.physics('ht').feature('porous1').set('PorousMediumType', 'LocalThermalNonequilibrium');
model.physics('ht').feature('porous1').set('coeffType', 'SphericalPellets');
model.physics('ht').feature('porous1').set('d_p', 'dp');
model.physics('ht').feature('porous1').feature('fluid1').feature('init1').set('Tinit', 'T0');
model.physics('ht').feature('porous1').feature('pm1').set('porousMatrixPropertiesType', 'solidPhaseProperties');
model.physics('ht').feature('porous1').feature('pm1').feature('init1').set('Tinit', 'T0');
model.physics('ht').feature('porous1').feature('pm1').create('phc1', 'PhaseChangeMaterial', 2);
model.physics('ht').feature('porous1').feature('pm1').feature('phc1').set('T_pc12', '60[degC]');
model.physics('ht').feature('porous1').feature('pm1').feature('phc1').set('dT_pc12', '2[K]');
model.physics('ht').feature('porous1').feature('pm1').feature('phc1').set('L_pc12', '213[kJ/kg]');
model.physics('ht').feature('porous1').feature('pm1').feature('phc1').set('MaterialPhase1', 'mat2');
model.physics('ht').feature('porous1').feature('pm1').feature('phc1').set('MaterialPhase2', 'mat3');

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 2);

model.material('mat2').propertyGroup('def').set('thermalconductivity', {'0.4'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'1850'});
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'0.15'});
model.material('mat3').propertyGroup('def').set('heatcapacity', {'2384'});
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'0.025'});
model.material('mat4').propertyGroup('def').set('density', {'850'});
model.material('mat4').propertyGroup('def').set('heatcapacity', {'1250'});
model.material('pmat1').feature.create('fluid1', 'Fluid', 'comp1');
model.material('pmat1').feature.create('solid1', 'Solid', 'comp1');
model.material('pmat1').feature('fluid1').set('link', 'mat1');
model.material('pmat1').feature('solid1').set('vfrac', '1-por');
model.material('pmat1').feature('solid1').propertyGroup('def').set('density', {'rho_av'});

model.physics('fp').create('inl1', 'InletBoundary', 1);
model.physics('fp').feature('inl1').selection.set([7]);
model.physics('fp').feature('inl1').set('BoundaryCondition', 'FullyDevelopedFlow');
model.physics('fp').feature('inl1').set('FullyDevelopedFlowOption', 'V0');
model.physics('fp').feature('inl1').set('V0fdf', 'V_in');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').geom(1);
model.selection('sel1').label('Inlet');
model.selection('sel1').set([7]);

model.physics('fp').feature('inl1').selection.named('sel1');
model.physics('fp').create('out1', 'OutletBoundary', 1);
model.physics('fp').feature('out1').selection.set([2]);

model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').geom(1);
model.selection('sel2').label('Outlet');
model.selection('sel2').set([2]);

model.physics('fp').feature('out1').selection.named('sel2');
model.physics('ht').create('ifl1', 'Inflow', 1);
model.physics('ht').feature('ifl1').selection.named('sel1');
model.physics('ht').feature('ifl1').set('Tustr', 'T_in');
model.physics('ht').create('ofl1', 'ConvectiveOutflow', 1);
model.physics('ht').feature('ofl1').selection.named('sel2');

model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Heat Flux Boundary');
model.selection('sel3').geom(1);
model.selection('sel3').set('groupcontang', true);
model.selection('sel3').add([14 15 16 17 21 22 23 26 27 30 31]);

model.physics('ht').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf1').selection.named('sel3');
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 5);

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.geom('geom1', 1);
model.cpl('aveop1').selection.named('sel2');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('deltaT', 'Qu/V_in/aveop1(ht.Cp)/aveop1(ht.rho)');
model.variable('var1').descr('deltaT', 'Temperature increase');
model.variable('var1').set('T_in', 'aveop1(T)+deltaT');
model.variable('var1').descr('T_in', 'Inlet temperature');

model.mesh('mesh1').autoMeshSize(4);
model.mesh('mesh1').run;

model.study('std1').feature('stat').setEntry('activate', 'ht', false);
model.study('std1').feature('stat').setEntry('activateCoupling', 'nitf1', false);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setEntry('activate', 'fp', false);
model.study('std1').feature('time').set('tunit', 'h');
model.study('std1').feature('time').set('tlist', 'range(0,0.25,3.75) range(4,5[min],9) range(9.25,0.25,24)');
model.study('std1').feature('time').set('usertol', true);
model.study('std1').feature('time').set('rtol', '1e-4');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables (fp)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (fp)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_fp_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_fp_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.25,3.75) range(4,5[min],9) range(9.25,0.25,24)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_ht_porous_fluid_T' 'global' 'comp1_ht_porous_pm_T' 'global' 'comp1_nitf1_Uave' 'global' 'comp1_p' 'global' 'comp1_T' 'global'  ...
'comp1_u' 'global' 'comp1_fp_inl1_Pinlfdf' 'global'});
model.sol('sol1').feature('t1').set('atol', {'comp1_ht_porous_fluid_T' '1e-3' 'comp1_ht_porous_pm_T' '1e-3' 'comp1_nitf1_Uave' '1e-3' 'comp1_p' '1e-3' 'comp1_T' '1e-3'  ...
'comp1_u' '1e-3' 'comp1_fp_inl1_Pinlfdf' '1e-3'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_ht_porous_fluid_T' 'factor' 'comp1_ht_porous_pm_T' 'factor' 'comp1_nitf1_Uave' 'factor' 'comp1_p' 'factor' 'comp1_T' 'factor'  ...
'comp1_u' 'factor' 'comp1_fp_inl1_Pinlfdf' 'factor'});
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.5);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, heat transfer variables (ht) (nitf1)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, heat transfer variables (ht) (nitf1)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.5);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');

model.cpl.create('minop1', 'Minimum', 'geom1');
model.cpl('minop1').selection.set([2]);

model.variable('var1').set('T_min', 'minop1(ht.porous.pm.T)');
model.variable('var1').descr('T_min', 'Minimum temperature');

model.sol('sol1').feature('t1').create('st1', 'StopCondition');
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', 'comp1.T_min > 70[degC]', 0);
model.sol('sol1').feature('t1').feature('st1').set('storestopcondsol', 'stepafter');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Velocity (fp)');
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 85, 0);
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Pressure (fp)');
model.result('pg2').set('dataisaxisym', 'off');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 85, 0);
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').label('Contour');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('expr', 'p');
model.result('pg2').feature('con1').set('number', 40);
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('smooth', 'internal');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('data', 'parent');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').label('Revolution 2D');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset1');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Velocity, 3D (fp)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'rev1');
model.result('pg3').setIndex('looplevel', 85, 0);
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond1/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Temperature (ht)');
model.result('pg4').set('dataisaxisym', 'off');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 85, 0);
model.result('pg4').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('solutionparams', 'parent');
model.result('pg4').feature('surf1').set('expr', 'T');
model.result('pg4').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Temperature and Fluid Flow (nitf1)');
model.result('pg5').set('dataisaxisym', 'off');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 85, 0);
model.result('pg5').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond4/pcond4/pcond1/pg2');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').label('Fluid Temperature');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('expr', 'nitf1.T');
model.result('pg5').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg5').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg5').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg5').feature('surf1').feature('sel1').selection.set([1 2 3]);
model.result('pg5').feature.create('surf2', 'Surface');
model.result('pg5').feature('surf2').label('Solid Temperature');
model.result('pg5').feature('surf2').set('showsolutionparams', 'on');
model.result('pg5').feature('surf2').set('solutionparams', 'parent');
model.result('pg5').feature('surf2').set('expr', 'nitf1.T');
model.result('pg5').feature('surf2').set('smooth', 'internal');
model.result('pg5').feature('surf2').set('showsolutionparams', 'on');
model.result('pg5').feature('surf2').set('data', 'parent');
model.result('pg5').feature('surf2').feature.create('sel1', 'Selection');
model.result('pg5').feature('surf2').feature('sel1').selection.geom('geom1', 2);
model.result('pg5').feature('surf2').feature('sel1').selection.set([4]);
model.result('pg5').feature('surf2').set('inheritplot', 'surf1');
model.result('pg5').feature.create('arws1', 'ArrowSurface');
model.result('pg5').feature('arws1').label('Fluid Flow');
model.result('pg5').feature('arws1').set('showsolutionparams', 'on');
model.result('pg5').feature('arws1').set('solutionparams', 'parent');
model.result('pg5').feature('arws1').set('expr', {'nitf1.ur' 'nitf1.uz'});
model.result('pg5').feature('arws1').set('xnumber', 30);
model.result('pg5').feature('arws1').set('ynumber', 30);
model.result('pg5').feature('arws1').set('arrowtype', 'cone');
model.result('pg5').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('arws1').set('showsolutionparams', 'on');
model.result('pg5').feature('arws1').set('data', 'parent');
model.result('pg5').feature('arws1').feature.create('col1', 'Color');
model.result('pg5').feature('arws1').feature('col1').set('showcolordata', 'off');
model.result('pg5').feature('arws1').feature.create('filt1', 'Filter');
model.result('pg5').feature('arws1').feature('filt1').set('expr', 'fp.U>nitf1.Uave');
model.result('pg1').run;
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').label('Isothermal Contours (ht)');
model.result('pg6').set('dataisaxisym', 'off');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 85, 0);
model.result('pg6').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg1');
model.result('pg6').feature.create('con1', 'Contour');
model.result('pg6').feature('con1').set('solutionparams', 'parent');
model.result('pg6').feature('con1').set('expr', 'T');
model.result('pg6').feature('con1').set('colortable', 'HeatCameraLight');
model.result('pg6').feature('con1').set('smooth', 'internal');
model.result('pg6').feature('con1').set('showsolutionparams', 'on');
model.result('pg6').feature('con1').set('data', 'parent');
model.result('pg6').label('Isothermal Contours (ht)');
model.result('pg6').run;
model.result('pg6').label('Isothermal Contours & Velocity Streamlines');
model.result('pg6').run;
model.result('pg6').feature('con1').set('contourtype', 'filled');
model.result('pg6').feature('con1').set('number', 15);
model.result('pg6').create('str1', 'Streamline');
model.result('pg6').feature('str1').set('selnumber', 10);
model.result('pg6').feature('str1').selection.named('sel1');
model.result('pg6').feature('str1').create('col1', 'Color');
model.result('pg6').run;
model.result('pg6').feature('str1').feature('col1').set('expr', 'p');
model.result('pg6').feature('str1').feature('col1').set('colortable', 'GrayScale');
model.result('pg6').feature('str1').feature('col1').set('colortabletrans', 'reverse');
model.result.dataset.create('cpt1', 'CutPoint2D');
model.result.dataset('cpt1').set('pointx', 0);
model.result.dataset('cpt1').set('pointy', '0.05 0.47/2 0.42');
model.result.numerical.create('pev1', 'EvalPoint');
model.result.numerical('pev1').set('data', 'cpt1');
model.result.numerical('pev1').setIndex('expr', 'ht.porous.pm.T', 0);
model.result.numerical('pev1').setIndex('unit', 'K', 0);
model.result.numerical('pev1').setIndex('descr', 'Paraffin temperature', 0);
model.result.numerical('pev1').setIndex('expr', 'ht.porous.fluid.T', 1);
model.result.numerical('pev1').setIndex('unit', 'K', 1);
model.result.numerical('pev1').setIndex('descr', 'Water temperature', 1);
model.result.numerical('pev1').setIndex('expr', 'T', 2);
model.result.numerical('pev1').setIndex('unit', 'K', 2);
model.result.numerical('pev1').setIndex('descr', 'Porous Medium temperature', 2);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Point Evaluation 1');
model.result.numerical('pev1').set('table', 'tbl1');
model.result.numerical('pev1').setResult;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').set('data', 'none');
model.result('pg7').create('tblp1', 'Table');
model.result('pg7').feature('tblp1').set('source', 'table');
model.result('pg7').feature('tblp1').set('table', 'tbl1');
model.result('pg7').feature('tblp1').set('linewidth', 'preference');
model.result('pg7').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg7').run;
model.result('pg7').feature('tblp1').set('plotcolumninput', 'manual');
model.result('pg7').feature('tblp1').set('plotcolumns', [2 3 4]);
model.result('pg7').feature('tblp1').set('linestyle', 'dotted');
model.result('pg7').feature.duplicate('tblp2', 'tblp1');
model.result('pg7').run;
model.result('pg7').feature('tblp2').set('plotcolumns', [5 6 7]);
model.result('pg7').feature('tblp2').set('linestyle', 'dashed');
model.result('pg7').feature('tblp2').set('linecolor', 'cyclereset');
model.result('pg7').feature.duplicate('tblp3', 'tblp2');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').feature('tblp2').set('plotcolumns', [8 9 10]);
model.result('pg7').feature('tblp2').set('linestyle', 'solid');
model.result('pg7').run;
model.result('pg7').label('Temperature Evolution');
model.result('pg7').set('axislimits', true);
model.result('pg7').set('xmin', 3.5);
model.result('pg7').set('xmax', 9.5);
model.result('pg7').set('ymin', 328);
model.result('pg7').set('ymax', 344);
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').run;
model.result('pg8').create('vol1', 'Volume');
model.result('pg8').feature('vol1').set('expr', 'ht.theta2');
model.result('pg8').feature('vol1').set('descr', 'Phase indicator, phase 2');
model.result('pg8').feature('vol1').set('colortable', 'Cividis');
model.result('pg8').feature('vol1').set('rangecoloractive', true);
model.result('pg8').feature('vol1').set('rangecolormax', 1);
model.result('pg8').feature('vol1').create('tran1', 'Transparency');
model.result('pg8').run;
model.result('pg8').feature('vol1').feature('tran1').set('transparency', 0.1);
model.result('pg8').run;
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', '1');
model.result('pg8').feature('surf1').set('coloring', 'uniform');
model.result('pg8').feature('surf1').set('color', 'gray');
model.result('pg8').feature('surf1').create('sel1', 'Selection');
model.result('pg8').feature('surf1').feature('sel1').selection.set([4]);
model.result('pg8').run;
model.result('pg8').feature('surf1').create('mtrl1', 'MaterialAppearance');
model.result('pg8').run;
model.result('pg8').feature('surf1').feature('mtrl1').set('appearance', 'custom');
model.result('pg8').feature('surf1').feature('mtrl1').set('family', 'aluminum');
model.result('pg8').create('str1', 'Streamline');
model.result('pg8').feature('str1').set('revcoordsys', 'cylindrical');
model.result('pg8').feature('str1').set('posmethod', 'uniform');
model.result('pg8').feature('str1').set('udist', 0.06);
model.result('pg8').feature('str1').set('pointtype', 'arrow');
model.result('pg8').feature('str1').set('arrowcountactive', true);
model.result('pg8').feature('str1').set('arrowcount', 120);
model.result('pg8').feature('str1').set('color', 'white');
model.result('pg8').run;
model.result('pg8').label('Liquid Phase');
model.result('pg8').set('titletype', 'manual');
model.result('pg8').set('title', 'Liquid Phase Saturation (1) and Velocity Streamlines');
model.result('pg8').set('paramindicator', 'Time = eval(t,h) h');
model.result('pg8').set('edges', false);
model.result('pg8').set('looplevel', [53]);
model.result('pg8').run;

model.view('view4').set('showgrid', false);
model.view('view4').set('showaxisorientation', false);

model.result('pg8').set('looplevel', [17]);
model.result('pg8').set('showlegends', false);
model.result('pg8').set('looplevel', [41]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [65]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [81]);
model.result('pg8').run;
model.result('pg8').set('looplevel', [53]);
model.result('pg8').set('showlegends', true);
model.result('pg8').run;

model.title('Packed Bed Latent Heat Storage');

model.description('This model shows how to simulate a packed bed latent heat storage tank. Latent heat storage systems store energy - usually energy that is provided by solar collectors - making use of phase change materials. The configuration requires to account for local thermal nonequilibrium between the phase change material paraffin and the charging liquid water.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('packed_bed_latent_heat_storage.mph');

model.modelNode.label('Components');

out = model;
