function out = model
%
% differential_gear.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Automotive_and_Aerospace');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/mbd', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('n_pn', '15', 'Number of teeth, pinion');
model.param.set('dp_pn', '25[mm]', 'Pitch diameter, pinion');
model.param.set('gamma_pn', '20[deg]', 'Cone angle, pinion');
model.param.set('n_rg', '60', 'Number of teeth, ring gear');
model.param.set('dp_rg', '100[mm]', 'Pitch diameter, ring gear');
model.param.set('gamma_rg', '70[deg]', 'Cone angle, ring gear');
model.param.set('n_sp', '20', 'Number of teeth, spider gear');
model.param.set('dp_sp', '25[mm]', 'Pitch diameter, spider gear');
model.param.set('gamma_sp', '30[deg]', 'Cone angle, spider gear');
model.param.set('n_sd', '30', 'Number of teeth, side gear');
model.param.set('dp_sd', '37.5[mm]', 'Pitch diameter, side gear');
model.param.set('gamma_sd', '60[deg]', 'Cone angle, side gear');
model.param.set('alpha', '25[deg]', 'Pressure angle');
model.param.set('d_sp', '15[mm]', 'Spider gear center offset');
model.param.set('omega', '200[rad/s]', 'Angular velocity of drive shaft');
model.param.set('cf', '15[N*m*s/rad]', 'Frictional damping coefficient');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'differential_gear.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').feature('fin').set('action', 'assembly');
model.geom('geom1').feature('fin').set('createpairs', false);
model.geom('geom1').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.physics('mbd').create('bvg1', 'BevelGear', 3);
model.physics('mbd').feature('bvg1').label('Bevel Gear: Pinion');
model.physics('mbd').feature('bvg1').selection.set([6]);
model.physics('mbd').feature('bvg1').set('nt', 'n_pn');
model.physics('mbd').feature('bvg1').set('dp', 'dp_pn');
model.physics('mbd').feature('bvg1').set('alpha', 'alpha');
model.physics('mbd').feature('bvg1').set('gamma', 'gamma_pn');
model.physics('mbd').feature('bvg1').set('eg', [-1 0 0]);
model.physics('mbd').feature('bvg1').set('CenterOfRotationType', 'UserDefined');
model.physics('mbd').feature('bvg1').set('xc', {'dp_rg/2' '-dp_pn/2' '0'});
model.physics('mbd').create('bvg2', 'BevelGear', 3);
model.physics('mbd').feature('bvg2').label('Bevel Gear: Ring Gear');
model.physics('mbd').feature('bvg2').selection.set([1]);
model.physics('mbd').feature('bvg2').set('nt', 'n_rg');
model.physics('mbd').feature('bvg2').set('dp', 'dp_rg');
model.physics('mbd').feature('bvg2').set('alpha', 'alpha');
model.physics('mbd').feature('bvg2').set('gamma', 'gamma_rg');
model.physics('mbd').feature('bvg2').set('eg', [0 -1 0]);
model.physics('mbd').feature('bvg2').set('CenterOfRotationType', 'UserDefined');
model.physics('mbd').create('bvg3', 'BevelGear', 3);
model.physics('mbd').feature('bvg3').label('Bevel Gear: Spider Gear 1');
model.physics('mbd').feature('bvg3').selection.set([5]);
model.physics('mbd').feature('bvg3').set('nt', 'n_sp');
model.physics('mbd').feature('bvg3').set('dp', 'dp_sp');
model.physics('mbd').feature('bvg3').set('alpha', 'alpha');
model.physics('mbd').feature('bvg3').set('gamma', 'gamma_sp');
model.physics('mbd').feature('bvg3').set('eg', [0 0 -1]);
model.physics('mbd').feature('bvg3').set('CenterOfRotationType', 'UserDefined');
model.physics('mbd').feature('bvg3').set('xc', {'0' '-d_sp' 'dp_sd/2'});
model.physics('mbd').feature.duplicate('bvg4', 'bvg3');
model.physics('mbd').feature('bvg4').label('Bevel Gear: Spider Gear 2');
model.physics('mbd').feature('bvg4').selection.set([4]);
model.physics('mbd').feature('bvg4').set('eg', [0 0 1]);
model.physics('mbd').feature('bvg4').set('xc', {'0' '-d_sp' '-dp_sd/2'});
model.physics('mbd').create('bvg5', 'BevelGear', 3);
model.physics('mbd').feature('bvg5').label('Bevel Gear: Side Gear 1');
model.physics('mbd').feature('bvg5').selection.set([3]);
model.physics('mbd').feature('bvg5').set('nt', 'n_sd');
model.physics('mbd').feature('bvg5').set('dp', 'dp_sd');
model.physics('mbd').feature('bvg5').set('alpha', 'alpha');
model.physics('mbd').feature('bvg5').set('gamma', 'gamma_sd');
model.physics('mbd').feature('bvg5').set('eg', [0 -1 0]);
model.physics('mbd').feature('bvg5').set('CenterOfRotationType', 'UserDefined');
model.physics('mbd').feature('bvg5').set('xc', {'0' '-d_sp+dp_sp/2' '0'});
model.physics('mbd').feature.duplicate('bvg6', 'bvg5');
model.physics('mbd').feature('bvg6').label('Bevel Gear: Side Gear 2');
model.physics('mbd').feature('bvg6').selection.set([2]);
model.physics('mbd').feature('bvg6').set('eg', [0 1 0]);
model.physics('mbd').feature('bvg6').set('xc', {'0' '-d_sp-dp_sp/2' '0'});
model.physics('mbd').feature('bvg1').create('pdr1', 'PrescribedDispRot', -1);
model.physics('mbd').feature('bvg1').feature('pdr1').setIndex('Direction', true, 0);
model.physics('mbd').feature('bvg1').feature('pdr1').setIndex('Direction', true, 1);
model.physics('mbd').feature('bvg1').feature('pdr1').setIndex('Direction', true, 2);
model.physics('mbd').feature('bvg1').feature('pdr1').set('RotationType', 'PrescribedRotationGroup');
model.physics('mbd').feature('bvg1').feature('pdr1').set('Omega', [-1 0 0]);
model.physics('mbd').feature('bvg1').feature('pdr1').set('phi0', 'omega*t');
model.physics('mbd').feature('bvg2').create('pdr1', 'PrescribedDispRot', -1);
model.physics('mbd').feature('bvg2').feature('pdr1').setIndex('Direction', true, 0);
model.physics('mbd').feature('bvg2').feature('pdr1').setIndex('Direction', true, 1);
model.physics('mbd').feature('bvg2').feature('pdr1').setIndex('Direction', true, 2);
model.physics('mbd').feature('bvg2').feature('pdr1').set('RotationType', 'ConstrainedRotationGroup');
model.physics('mbd').feature('bvg2').feature('pdr1').setIndex('ConstrainedRotation', true, 0);
model.physics('mbd').feature('bvg2').feature('pdr1').setIndex('ConstrainedRotation', true, 2);

model.nodeGroup.create('grp1', 'Physics', 'mbd');
model.nodeGroup('grp1').placeAfter('init1');
model.nodeGroup('grp1').add('bvg1');
model.nodeGroup('grp1').add('bvg2');
model.nodeGroup('grp1').add('bvg3');
model.nodeGroup('grp1').add('bvg4');
model.nodeGroup('grp1').add('bvg5');
model.nodeGroup('grp1').add('bvg6');
model.nodeGroup('grp1').label('Bevel Gears');

model.physics('mbd').create('grp1', 'GearPair', -1);
model.physics('mbd').feature('grp1').set('Wheel', 'bvg1');
model.physics('mbd').feature('grp1').set('Pinion', 'bvg2');
model.physics('mbd').create('grp2', 'GearPair', -1);
model.physics('mbd').feature('grp2').set('Wheel', 'bvg3');
model.physics('mbd').feature('grp2').set('Pinion', 'bvg5');
model.physics('mbd').create('grp3', 'GearPair', -1);
model.physics('mbd').feature('grp3').set('Wheel', 'bvg3');
model.physics('mbd').feature('grp3').set('Pinion', 'bvg6');
model.physics('mbd').create('grp4', 'GearPair', -1);
model.physics('mbd').feature('grp4').set('Wheel', 'bvg4');
model.physics('mbd').feature('grp4').set('Pinion', 'bvg5');
model.physics('mbd').create('grp5', 'GearPair', -1);
model.physics('mbd').feature('grp5').set('Wheel', 'bvg4');
model.physics('mbd').feature('grp5').set('Pinion', 'bvg6');

model.nodeGroup.create('grp2', 'Physics', 'mbd');
model.nodeGroup('grp2').placeAfter('init1');
model.nodeGroup('grp2').add('grp1');
model.nodeGroup('grp2').add('grp2');
model.nodeGroup('grp2').add('grp3');
model.nodeGroup('grp2').add('grp4');
model.nodeGroup('grp2').add('grp5');
model.nodeGroup('grp2').label('Gear Pairs');

model.physics('mbd').create('hgj1', 'HingeJoint', -1);
model.physics('mbd').feature('hgj1').set('Source', 'bvg2');
model.physics('mbd').feature('hgj1').set('Destination', 'bvg3');
model.physics('mbd').feature('hgj1').set('CenterOfJointType', 'CentroidOfSelectedEntities');
model.physics('mbd').feature('hgj1').set('EntityLevel', 'Point');
model.physics('mbd').feature('hgj1').feature('cjp1').selection.set([1528 1531]);
model.physics('mbd').feature('hgj1').set('e', [0 0 1]);
model.physics('mbd').feature.duplicate('hgj2', 'hgj1');
model.physics('mbd').feature('hgj2').set('Destination', 'bvg4');
model.physics('mbd').feature('hgj2').feature('cjp1').selection.set([1282 1341]);
model.physics('mbd').create('hgj3', 'HingeJoint', -1);
model.physics('mbd').feature('hgj3').set('Source', 'fixed');
model.physics('mbd').feature('hgj3').set('Destination', 'bvg5');
model.physics('mbd').feature('hgj3').set('CenterOfJointType', 'CentroidOfSelectedEntities');
model.physics('mbd').feature('hgj3').set('EntityLevel', 'Point');
model.physics('mbd').feature('hgj3').feature('cjp1').selection.set([1060 1061]);
model.physics('mbd').feature('hgj3').set('e', [0 1 0]);
model.physics('mbd').feature.duplicate('hgj4', 'hgj3');
model.physics('mbd').feature('hgj4').set('Destination', 'bvg6');
model.physics('mbd').feature('hgj4').feature('cjp1').selection.set([748 749]);
model.physics('mbd').feature('hgj3').create('afm1', 'AppliedForceAndMoment', -1);
model.physics('mbd').feature('hgj3').feature('afm1').set('AppliedOnSelectedAttachment', 'Joint');
model.physics('mbd').feature('hgj3').feature('afm1').set('Ms', 'cf*omega_d');
model.physics('mbd').feature('hgj4').create('afm1', 'AppliedForceAndMoment', -1);
model.physics('mbd').feature('hgj4').feature('afm1').set('AppliedOnSelectedAttachment', 'Joint');
model.physics('mbd').feature('hgj4').feature('afm1').set('Ms', '-cf*omega_d');

model.nodeGroup.create('grp3', 'Physics', 'mbd');
model.nodeGroup('grp3').placeAfter('init1');
model.nodeGroup('grp3').add('hgj1');
model.nodeGroup('grp3').add('hgj2');
model.nodeGroup('grp3').add('hgj3');
model.nodeGroup('grp3').add('hgj4');
model.nodeGroup('grp3').label('Hinge Joints');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('omega_i', 'd(mbd.hgj3.th,t)');
model.variable('var1').descr('omega_i', 'Angular velocity of inner wheel');
model.variable('var1').set('omega_o', 'd(mbd.hgj4.th,t)');
model.variable('var1').descr('omega_o', 'Angular velocity of outer wheel');
model.variable('var1').set('omega_r', '1+5*rect1(omega*t)');
model.variable('var1').descr('omega_r', 'Velocity ratio of outer and inner wheel');
model.variable('var1').set('omega_d', 'omega_o-omega_r*omega_i');
model.variable('var1').descr('omega_d', 'Velocity difference of outer and inner wheel');

model.func.create('rect1', 'Rectangle');
model.func('rect1').model('comp1');
model.func('rect1').set('lower', '2*pi');
model.func('rect1').set('upper', '6*pi');
model.func('rect1').set('smooth', 'pi/4');

model.view.create('view2', 'geom1');
model.view('view2').model('comp1');
model.view('view2').camera.set('zoomanglefull', 6);
model.view('view2').camera.setIndex('position', 0, 0);
model.view('view2').camera.setIndex('position', -0.15, 1);
model.view('view2').camera.set('position', [0 -0.15 1.15]);
model.view('view2').camera.setIndex('target', 0, 0);
model.view('view2').camera.set('target', [0 0 0]);
model.view('view2').camera.setIndex('up', 0, 0);
model.view('view2').camera.setIndex('up', 1, 1);
model.view('view2').camera.set('up', [0 1 0.15]);
model.view('view2').camera.setIndex('rotationpoint', 0, 0);
model.view('view2').camera.set('rotationpoint', [0 0 0]);
model.view('view2').camera.setIndex('viewoffset', -0.05, 0);
model.view('view2').camera.set('viewoffset', [-0.05 0.05]);
model.view('view2').set('locked', true);

model.mesh('mesh1').autoMeshSize(3);
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tlist', 'range(0,5e-4,0.125)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_gr_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_gr_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_gr_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_gr_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_gr_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_mbd_gr_disp').set('scaleval', '0.002410592053478472');
model.sol('sol1').feature('v1').feature('comp1_mbd_jnt_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.24105920534784722');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,5e-4,0.125)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('t1').feature('fc1').set('ntermconst', 'tol');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Displacement (mbd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 251, 0);
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (mbd)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 251, 0);
model.result('pg2').set('defaultPlotID', 'velocity');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').label('Volume');
model.result('pg2').feature('vol1').set('expr', 'mod(dom,10)');
model.result('pg2').feature('vol1').set('unit', '1');
model.result('pg2').feature('vol1').set('colortable', 'Cyclic');
model.result('pg2').feature('vol1').set('colorlegend', false);
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg2').feature('vol1').feature.create('def1', 'Deform');
model.result('pg2').feature('vol1').feature('def1').label('Deformation');
model.result('pg2').feature('vol1').feature('def1').set('scaleactive', true);
model.result('pg2').feature.create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').label('Arrow Line');
model.result('pg2').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY' 'mbd.u_tZ'});
model.result('pg2').feature('arwl1').set('placement', 'elements');
model.result('pg2').feature('arwl1').set('data', 'parent');
model.result('pg2').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg2').feature('arwl1').feature('def1').label('Deformation');
model.result('pg2').feature('arwl1').feature('def1').set('scaleactive', true);
model.result('pg1').run;
model.result.duplicate('pg3', 'pg1');
model.result('pg3').run;
model.result('pg3').label('Velocity: Magnitude');
model.result('pg3').run;
model.result('pg3').feature('surf1').set('expr', 'mbd.vel');
model.result('pg3').run;
model.result.dataset.duplicate('dset2', 'dset1');
model.result.dataset('dset2').selection.geom('geom1', 3);
model.result.dataset('dset2').selection.geom('geom1', 3);
model.result.dataset('dset2').selection.set([1 2 3 4 5]);
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Velocity: Y Component');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 161, 0);
model.result('pg4').set('view', 'view2');
model.result('pg4').run;
model.result('pg4').feature('surf1').set('expr', 'mbd.u_tY');
model.result('pg4').feature('surf1').set('colortable', 'AuroraAustralis');
model.result('pg4').run;

model.physics('mbd').prop('Results').set('ReferenceFrame', 'bvg2');

model.sol('sol1').updateSolution;

model.result('pg1').run;
model.result.dataset.duplicate('dset3', 'dset2');
model.result.dataset('dset3').selection.geom('geom1', 3);
model.result.dataset('dset3').selection.set([1 4 5]);
model.result('pg1').run;
model.result.duplicate('pg5', 'pg1');
model.result('pg5').run;
model.result('pg5').label('Velocity: Ring Gear Reference');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 161, 0);
model.result('pg5').set('edges', false);
model.result('pg5').run;
model.result('pg5').feature('surf1').set('expr', 'mbd.vel_ref');
model.result('pg5').run;
model.result('pg5').feature('surf1').feature('def1').set('expr', {'u_ref' 'v_ref' 'w_ref'});
model.result('pg5').run;
model.result('pg5').set('view', 'new');
model.result('pg5').run;

model.view('view3').camera.set('zoomanglefull', 17.33923339843751);
model.view('view3').set('locked', true);

model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Angular Velocity: Wheels');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').set('expr', {'mbd.hgj3.th_t'});
model.result('pg6').feature('glob1').set('descr', {'Relative angular velocity'});
model.result('pg6').feature('glob1').set('unit', {'rad/s'});
model.result('pg6').feature('glob1').set('expr', {'mbd.hgj3.th_t' 'mbd.hgj4.th_t'});
model.result('pg6').feature('glob1').set('descr', {'Relative angular velocity' 'Relative angular velocity'});
model.result('pg6').feature('glob1').set('linewidth', 2);
model.result('pg6').feature('glob1').set('legendmethod', 'manual');
model.result('pg6').feature('glob1').setIndex('legends', 'Inner wheel', 0);
model.result('pg6').feature('glob1').setIndex('legends', 'Outer wheel', 1);
model.result('pg6').run;
model.result('pg6').set('titletype', 'none');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'Angular velocity (rad/s)');
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Angular Velocity: Spider Gear');
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', 'Spider gear');
model.result('pg7').run;
model.result('pg7').feature('glob1').set('expr', {'mbd.hgj1.th_t'});
model.result('pg7').feature('glob1').set('descr', {'Relative angular velocity'});
model.result('pg7').feature('glob1').set('unit', {'rad/s'});
model.result('pg7').feature('glob1').set('legend', false);
model.result('pg7').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').set('plotgroup', 'pg3');
model.result.export('anim1').set('maxframes', 100);
model.result.export.duplicate('anim2', 'anim1');
model.result.export('anim2').showFrame;
model.result.export('anim2').set('plotgroup', 'pg4');
model.result.export.duplicate('anim3', 'anim2');
model.result.export('anim3').showFrame;
model.result.export('anim3').set('plotgroup', 'pg5');
model.result('pg3').run;

model.title('Differential Gear Mechanism');

model.description('This example illustrates the modeling of a differential gear mechanism, commonly used in the automobile. Five sets of straight bevel gears are used to model the differential. The ratio of angular velocity of the two output shafts of the differential is varied to simulate the motion of a vehicle on a straight as well as curved path. A transient study is performed to compute the angular velocity of all the gears and the rotation of spider gears about their own axis.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('differential_gear.mph');

model.modelNode.label('Components');

out = model;
