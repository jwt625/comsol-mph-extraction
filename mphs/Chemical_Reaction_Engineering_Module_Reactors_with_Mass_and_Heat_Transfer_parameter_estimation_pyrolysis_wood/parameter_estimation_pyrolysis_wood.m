function out = model
%
% parameter_estimation_pyrolysis_wood.m
%
% Model exported on May 26 2025, 21:27 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Chemical_Reaction_Engineering_Module/Reactors_with_Mass_and_Heat_Transfer');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('tcs', 'ConcentratedSpeciesInPorousMedia', 'geom1', {'w1' 'w2'});
model.physics.create('dl', 'PorousMediaFlowDarcy', 'geom1');
model.physics('dl').model('comp1');
model.physics.create('ht', 'PorousMediaHeatTransfer', 'geom1');
model.physics('ht').model('comp1');
model.physics.create('dode', 'DomainODE', 'geom1', {'u'});
model.physics('dode').prop('EquationForm').set('form', 'Automatic');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/tcs', true);
model.study('std1').feature('time').setSolveFor('/physics/dl', true);
model.study('std1').feature('time').setSolveFor('/physics/ht', true);
model.study('std1').feature('time').setSolveFor('/physics/dode', true);

model.param.label('Sample Properties');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('r_sample', '0.5[inch]', 'Radius of the wooden sample');
model.param.set('rho_w_init', '630[kg/m^3]', 'Density of wood at time 0 s');
model.param.set('epsilon_w_init', '0.4', 'Porosity of wood at time 0 s');
model.param.set('d_w', '5e-5[m]', 'Pore size in wood');
model.param.set('d_c', '1e-4[m]', 'Pore size in char');
model.param.set('Mw_N2', '0.028[kg/mol]', 'Molar mass for nitrogen');
model.param.set('Mw_g', '0.038[kg/mol]', 'Molar mass for pseudo species gas');
model.param.set('Mw_t', '0.11[kg/mol]', 'Molar mass for pseudo species tar');
model.param.set('e', '1', 'Emissivity');
model.param.set('e_w', '0.7', 'Emissivity of wood');
model.param.set('e_c', '0.92', 'Emissivity of char');
model.param.set('rho_water', '1000[kg/m^3]', 'Density of water');
model.param.set('k_c_across', '0.071[W/m/K]', 'Effective thermal conductivity for char across fiber direction');
model.param.set('k_c_along', '0.105[W/m/K]', 'Effective thermal conductivity for char along fiber direction');
model.param.set('k_w_across', 'rho_w_init/rho_water*(0.1941+0.01864) [W/m/K]', 'Effective thermal conductivity for wood across fiber direction');
model.param.set('k_w_along', '2.8 * k_w_across', 'Effective thermal conductivity for wood along fiber direction');
model.param.set('k_mixture', '0.0258[W/m/K]', 'Effective thermal conductivity for gas mixture');
model.param.set('viscosity', '3e-5[kg/m/s]', 'Dynamic viscosity of gas mixture');
model.param.set('kappa_w_across', '5e-16[m^2]', 'Permeability in wood across fiber direction');
model.param.set('kappa_w_along', '5e-14[m^2]', 'Permeability in wood along fiber direction');
model.param.set('kappa_c_across', '1e-13[m^2]', 'Permeability in char across fiber direction');
model.param.set('kappa_c_along', '1e-12[m^2]', 'Permeability in char along fiber direction');
model.param.create('par2');
model.param('par2').label('Experimental Conditions');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('T0', '310[K]', 'Initial sample temperature');
model.param('par2').set('T_furnace', '736[K]', 'Furnace temperature');
model.param('par2').set('T_gas', '670[K]', 'Gas temperature in the reactor');
model.param('par2').set('hconv', 'hconv_0*exp(hconv_opt)', 'External convective heat transfer coefficient');
model.param('par2').set('hconv_0', '5[W/m^2/K]', 'Initial value for physical parameter');
model.param('par2').set('hconv_lower', '1[W/m^2/K]', 'Lower bound for physical parameter');
model.param('par2').set('hconv_upper', '100[W/m^2/K]', 'Upper bound for physical parameter');
model.param('par2').set('hconv_opt', '0', 'Control parameter to be optimized');
model.param('par2').set('hconv_opt_0', 'log(hconv_0/hconv_0)', 'Initial value for hconv_opt');
model.param('par2').set('hconv_opt_lower', 'log(hconv_lower/hconv_0)', 'Lower bound for hconv_opt');
model.param('par2').set('hconv_opt_upper', 'log(hconv_upper/hconv_0)', 'Upper bound for hconv_opt');
model.param.create('par3');
model.param('par3').label('Reaction Parameters');

% To import content from file, use:
% model.param('par3').loadFile('FILENAME');
model.param('par3').set('DH_t', 'DH_t_0*exp(DH_t_opt)', 'Heat of reaction wood -> tar');
model.param('par3').set('DH_g', 'DH_t', 'Heat of reaction wood -> gas');
model.param('par3').set('DH_is', 'DH_t', 'Heat of reaction wood -> intermediate solid');
model.param('par3').set('DH_c2', '-42[kJ/kg]', 'Heat of reaction tar -> char');
model.param('par3').set('DH_g2', 'DH_c2', 'Heat of reaction tar -> gas');
model.param('par3').set('DH_c', 'DH_c_0*exp(DH_c_opt)', 'Heat of reaction intermediate solid -> char');
model.param('par3').set('A_t', '1.08e10[1/s]', 'Frequency factor w (wood) -> t (tar)');
model.param('par3').set('E_t', '148[kJ/mol]', 'Activation energy w -> t');
model.param('par3').set('A_is', 'A_is_0*exp(A_is_opt)', 'Frequency factor w -> is (intermediate solid)');
model.param('par3').set('E_is', '111.7[kJ/mol]', 'Activation energy w -> is');
model.param('par3').set('A_g', '4.38e9[1/s]', 'Frequency factor w -> g (primary gas)');
model.param('par3').set('E_g', '152.7[kJ/mol]', 'Activation energy w -> g');
model.param('par3').set('A_c', '1.38e10[1/s]', 'Frequency factor is-> c (char)');
model.param('par3').set('E_c', '161[kJ/mol]', 'Activation energy is -> c');
model.param('par3').set('A_c2', '1.00e5[1/s]', 'Frequency factor t -> c');
model.param('par3').set('E_c2', '108[kJ/mol]', 'Activation energy t  -> c');
model.param('par3').set('A_g2', '4.28e6[1/s]', 'Frequency factor t -> g');
model.param('par3').set('E_g2', '108[kJ/mol]', 'Activation energy t -> g');
model.param('par3').set('A_is_0', '1e7[1/s]', 'Initial value for physical parameter A_is');
model.param('par3').set('A_is_lower', '1e4[1/s]', 'Lower bound for physical parameter A_is');
model.param('par3').set('A_is_upper', '1e9[1/s]', 'Upper bound for physical parameter A_is');
model.param('par3').set('A_is_opt', '0', 'Control parameter to be optimized');
model.param('par3').set('A_is_opt_0', 'log(A_is_0/A_is_0)', 'Initial value for A_is_opt');
model.param('par3').set('A_is_opt_lower', 'log(A_is_lower/A_is_0)', 'Lower bound for A_is_opt');
model.param('par3').set('A_is_opt_upper', 'log(A_is_upper/A_is_0)', 'Upper bound for A_is_opt');
model.param('par3').set('DH_t_0', '50[kJ/kg]', 'Initial value for physical parameter DH_t');
model.param('par3').set('DH_t_lower', '1[kJ/kg]', 'Lower bound for physical parameter DH_t');
model.param('par3').set('DH_t_upper', '400[kJ/kg]', 'Upper bound for physical parameter DH_t');
model.param('par3').set('DH_t_opt', '0', 'Control parameter to be optimized');
model.param('par3').set('DH_t_opt_0_', 'log(DH_t_0/DH_t_0)', 'Initial value for DH_t_opt');
model.param('par3').set('DH_t_opt_lower', 'log(DH_t_lower/DH_t_0)', 'Lower bound for DH_t_opt');
model.param('par3').set('DH_t_opt_upper', 'log(DH_t_upper/DH_t_0)', 'Upper bound for DH_t_opt');
model.param('par3').set('DH_c_0', '-200[kJ/kg]', 'Initial value for physical parameter DH_c');
model.param('par3').set('DH_c_lower', '-400[kJ/kg]', 'Lower bound for physical parameter DH_c');
model.param('par3').set('DH_c_upper', '-10[kJ/kg]', 'Upper bound for physical parameter DH_c');
model.param('par3').set('DH_c_opt', '0', 'Control parameter to be optimized');
model.param('par3').set('DH_c_opt_0_', 'log(DH_c_0/DH_c_0)', 'Initial value for DH_c_opt');
model.param('par3').set('DH_c_opt_lower', 'log(DH_c_upper/DH_c_0)', 'Lower bound for DH_c_opt');
model.param('par3').set('DH_c_opt_upper', 'log(DH_c_lower/DH_c_0)', 'Upper bound for DH_c_opt');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').label('Solid Species Variables');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('rho_b', '(1-epsilon)*rho_w_init', 'Dry bulk density');
model.variable('var1').set('d_eff', 'd_w*(1-eta) + d_c*eta', 'Effective pore diameter in sample');
model.variable('var1').set('epsilon', '1-(rho_w+rho_is + rho_c)*(1-epsilon_w_init)/rho_w_init', 'Sample porosity');
model.variable('var1').set('kappa_eff_across', '(rho_w*kappa_w_across + (rho_is + rho_c)*kappa_c_across)/(rho_w + rho_is + rho_c)', 'Effective permeability across fiber direction');
model.variable('var1').set('kappa_eff_along', '(rho_w*kappa_w_along + (rho_is + rho_c)*kappa_c_along)/(rho_w + rho_is + rho_c)', 'Effective permeability along fiber direction');
model.variable('var1').set('k_eff_along', '(rho_w * k_w_along + (rho_is + rho_c) * k_c_along) / (rho_w + rho_is + rho_c)', 'Effective conductivity along fiber direction');
model.variable('var1').set('k_eff_across', '(rho_w * k_w_across + (rho_is + rho_c) * k_c_across) / (rho_w + rho_is + rho_c)', 'Effective conductivity across fiber direction');
model.variable('var1').set('cp_b', '(cp_w*rho_w +cp_c*(rho_is + rho_c))/rho_w_init', 'Specific heat capacity for dry bulk');
model.variable('var1').set('cp_w', '1500[J/kg/K] + 1.0[J/kg/K^2] * T', 'Specific heat capacity for wood');
model.variable('var1').set('cp_c', '420[J/kg/K]  + 2.09[J/kg/K^2] * T + 6.85e-4[J/kg/K^3]  * T^2', 'Specific heat capacity for intermediate solid and char');
model.variable('var1').set('Y', '(rho_w + rho_is + rho_c) / rho_w_init', 'Normalized solid mass');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Reaction Variables');

% To import content from file, use:
% model.variable('var2').loadFile('FILENAME');
model.variable('var2').set('eta', '1-(rho_w+rho_is)/rho_w_init', 'Degree of pyrolysis');
model.variable('var2').set('k_t', 'A_t*exp(-E_t/(R_const*T))', 'Reaction rate constant for w -> t');
model.variable('var2').set('k_is', 'A_is*exp(-E_is/(R_const*T))', 'Reaction rate constant for w -> is');
model.variable('var2').set('k_g', 'A_g*exp(-E_g/(R_const*T))', 'Reaction rate constant for w -> g');
model.variable('var2').set('k_c', 'A_c*exp(-E_c/(R_const*T))', 'Reaction rate constant for is -> c');
model.variable('var2').set('k_c2', 'A_c2*exp(-E_c2/(R_const*T))', 'Reaction rate constant for t -> c');
model.variable('var2').set('k_g2', 'A_g2*exp(-E_g2/(R_const*T))', 'Reaction rate constant for t -> g');
model.variable('var2').set('Q', 'Q_w +Q_c + Q_g2 + Q_c2', 'Total heat source');
model.variable('var2').set('Q_w', '-rho_w*(k_t*DH_t + k_g*DH_g +  k_is*DH_is)', 'Heat source for primary pyrolysis steps');
model.variable('var2').set('Q_c', '-k_c*rho_is*DH_c', 'Heat source for char production from intermediate solid');
model.variable('var2').set('Q_g2', '-k_g2*DH_g2*tcs.rho*w_t', 'Heat source for gas production from tar');
model.variable('var2').set('Q_c2', '-k_c2*DH_c2*tcs.rho*w_t', 'Heat source for char production from tar');
model.variable.create('var3');
model.variable('var3').model('comp1');
model.variable('var3').label('Fluid Species Variables');

% To import content from file, use:
% model.variable('var3').loadFile('FILENAME');
model.variable('var3').set('k_f', 'k_mixture + 13.5*sigma_const*T^3*d_eff/e/epsilon', 'Thermal conductivity for fluid in pores');
model.variable('var3').set('cp_f', 'w_t * cp_t +w_N2 * cp_N2 + w_g * cp_g', 'Specific heat capacity for fluid in pores');
model.variable('var3').set('cp_t', '-100[J/kg/K] + 4.4[J/kg/K^2] *T-1.57e-3[J/kg/K^3] *T^2', 'Specific heat capacity for tar');
model.variable('var3').set('cp_g', '770[J/kg/K] + 0.629[J/kg/K^2] *T-1.91e-4[J/kg/K^3] *T^2', 'Specific heat capacity for gas');
model.variable('var3').set('cp_N2', '950[J/kg/K] + 0.188[J/kg/K^2] * T', 'Specific heat capacity for N2');
model.variable.create('var4');
model.variable('var4').model('comp1');
model.variable('var4').label('External Boundary Variables');

% To import content from file, use:
% model.variable('var4').loadFile('FILENAME');
model.variable('var4').set('e_s', ['nif(' newline 'lowT, e_w,' newline 'midT , e_mix,' newline 'e_c)'], 'Surface emissivity change as a function of composition at sample surface');
model.variable('var4').set('lowT', 'T<450[K]', 'Low temperature condition');
model.variable('var4').set('midT', 'T >= 450[K] && T <= 550[K]', 'Middle temperature condition');
model.variable('var4').set('e_mix', 'e_w + (T-450[K])/(550[K]-450[K])*(e_c-e_w)', 'Surface emissivity at middle temperature condition');
model.variable('var4').set('q0', 'hconv * (T_gas - T) + sigma_const * e_s * (T_furnace^4 - T^4)', 'Heat flux through the sample outer surface');

model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 'r_sample');
model.geom('geom1').feature('c1').set('angle', 90);
model.geom('geom1').run('c1');
model.geom('geom1').create('ca1', 'CircularArc');
model.geom('geom1').feature('ca1').set('r', 'r_sample/3');
model.geom('geom1').runPre('fin');
model.geom('geom1').create('pt1', 'Point');
model.geom('geom1').feature('pt1').label('Middle Along');
model.geom('geom1').feature('pt1').setIndex('p', 'r_sample/2', 0);
model.geom('geom1').runPre('fin');
model.geom('geom1').run('fin');
model.geom('geom1').create('mce1', 'MeshControlEdges');
model.geom('geom1').feature('mce1').selection('input').set('fin', 7);
model.geom('geom1').run('mce1');

model.physics('dode').prop('Units').set('DependentVariableQuantity', 'density');
model.physics('dode').prop('Units').setIndex('CustomSourceTermUnit', 'kg/(m^3*s)', 0, 0);
model.physics('dode').field('dimensionless').field('rho');
model.physics('dode').field('dimensionless').component({'u' 'rho2' 'rho3'});
model.physics('dode').field('dimensionless').component(1, 'rho_w');
model.physics('dode').field('dimensionless').component(2, 'rho_is');
model.physics('dode').field('dimensionless').component(3, 'rho_c');
model.physics('dode').feature('dode1').setIndex('f', '-(k_t  + k_g + k_is)*rho_w', 0);
model.physics('dode').feature('dode1').setIndex('f', 'k_is*rho_w - k_c*rho_is', 1);
model.physics('dode').feature('dode1').setIndex('f', 'k_c * rho_is  + k_c2 * tcs.rho * w_t', 2);
model.physics('dode').feature('init1').set('rho_w', 'rho_w_init');
model.physics('tcs').prop('TransportMechanism').set('DiffusionModel', 'FicksLaw');
model.physics('tcs').field('massfraction').component({'w1' 'w2' 'w3'});
model.physics('tcs').field('massfraction').component(1, 'w_t');
model.physics('tcs').field('massfraction').component(2, 'w_g');
model.physics('tcs').field('massfraction').component(3, 'w_N2');
model.physics('tcs').prop('SpeciesProperties').set('FromMassConstraint', 3);
model.physics('tcs').feature('sp1').setIndex('M_w_t', 'Mw_t', 0);
model.physics('tcs').feature('sp1').setIndex('M_w_g', 'Mw_g', 0);
model.physics('tcs').feature('sp1').setIndex('M_w_N2', 'Mw_N2', 0);
model.physics('tcs').feature('porous1').feature('fluid1').set('u_src', 'root.comp1.dl.u');
model.physics('tcs').feature('porous1').feature('pm1').set('epsilon_p', 'epsilon');
model.physics('tcs').feature('init1').setIndex('w0', 0, 0);
model.physics('tcs').feature('init1').setIndex('w0', 0, 1);
model.physics('tcs').create('sym1', 'Symmetry', 1);
model.physics('tcs').feature('sym1').selection.set([2 3]);
model.physics('tcs').create('reac1', 'ReactionSources', 2);
model.physics('tcs').feature('reac1').label('Reaction Sources with Phase Transfer');
model.physics('tcs').feature('reac1').selection.set([1]);
model.physics('tcs').feature('reac1').set('MassTransferToOtherPhases', true);
model.physics('tcs').feature('reac1').setIndex('R_w_t', 'k_t * rho_w - k_c2 *  w_t * tcs.rho', 0);
model.physics('tcs').feature('reac1').setIndex('R_w_g', 'k_g*rho_w', 0);
model.physics('tcs').create('reac2', 'ReactionSources', 2);
model.physics('tcs').feature('reac2').label('Reaction Sources Gas to Gas');
model.physics('tcs').feature('reac2').selection.set([1]);
model.physics('tcs').feature('reac2').setIndex('R_w_t', '- k_g2* w_t * tcs.rho', 0);
model.physics('tcs').feature('reac2').setIndex('R_w_g', 'k_g2 * w_t * tcs.rho', 0);
model.physics('dl').feature('porous1').feature('fluid1').set('rho_mat', 'root.comp1.tcs.rho');
model.physics('dl').feature('porous1').feature('fluid1').set('mu_mat', 'userdef');
model.physics('dl').feature('porous1').feature('fluid1').set('mu', 'viscosity');
model.physics('dl').feature('porous1').feature('pm1').set('epsilon_mat', 'userdef');
model.physics('dl').feature('porous1').feature('pm1').set('epsilon', 'epsilon');
model.physics('dl').feature('porous1').feature('pm1').set('kappa_mat', 'userdef');
model.physics('dl').feature('porous1').feature('pm1').set('kappa', {'kappa_eff_along' '0' '0' '0' '0' '0' '0' '0' 'kappa_eff_across'});
model.physics('dl').create('ms1', 'MassSource', 2);
model.physics('dl').feature('ms1').selection.set([1]);
model.physics('dl').feature('ms1').set('Qm', 'tcs.Qmass');
model.physics('dl').create('pr1', 'Pressure', 1);
model.physics('dl').feature('pr1').selection.set([4]);
model.physics('dl').create('sym1', 'Symmetry', 1);
model.physics('dl').feature('sym1').selection.set([2 3]);
model.physics('ht').feature('porous1').feature('fluid1').set('u_src', 'root.comp1.dl.u');
model.physics('ht').feature('porous1').feature('fluid1').set('minput_pressure_src', 'root.comp1.dl.pA');
model.physics('ht').feature('porous1').feature('fluid1').set('k_mat', 'userdef');
model.physics('ht').feature('porous1').feature('fluid1').set('k', {'k_f' '0' '0' '0' 'k_f' '0' '0' '0' 'k_f'});
model.physics('ht').feature('porous1').feature('fluid1').set('rho_mat', 'root.comp1.tcs.rho');
model.physics('ht').feature('porous1').feature('fluid1').set('Cp_mat', 'userdef');
model.physics('ht').feature('porous1').feature('fluid1').set('Cp', 'cp_f');
model.physics('ht').feature('porous1').feature('pm1').set('poro_mat', 'userdef');
model.physics('ht').feature('porous1').feature('pm1').set('poro', 'epsilon');
model.physics('ht').feature('porous1').feature('pm1').set('k_b_mat', 'userdef');
model.physics('ht').feature('porous1').feature('pm1').set('k_b', {'k_eff_along' '0' '0' '0' '0' '0' '0' '0' 'k_eff_across'});
model.physics('ht').feature('porous1').feature('pm1').set('rho_b_mat', 'userdef');
model.physics('ht').feature('porous1').feature('pm1').set('rho_b', 'rho_b');
model.physics('ht').feature('porous1').feature('pm1').set('Cp_b_mat', 'userdef');
model.physics('ht').feature('porous1').feature('pm1').set('Cp_b', 'cp_b');
model.physics('ht').feature('init1').set('Tinit', 'T0');
model.physics('ht').create('sym1', 'Symmetry', 1);
model.physics('ht').feature('sym1').selection.set([2 3]);
model.physics('ht').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf1').selection.set([4]);
model.physics('ht').feature('hf1').set('q0_input', 'q0');
model.physics('ht').create('hs1', 'HeatSource', 2);
model.physics('ht').feature('hs1').selection.set([1]);
model.physics('ht').feature('hs1').set('Q0', 'Q');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('hauto', 3);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature.move('map1', 1);
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([2]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([5]);
model.mesh('mesh1').feature('map1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis1').set('elemcount', 25);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([7]);
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 15);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.geom('geom1', 0);
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([1]);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hauto', 3);
model.mesh('mesh1').run;

model.study('std1').label('Study 1 Forward Model (Initial Value Based)');
model.study('std1').setGenPlots(false);
model.study('std1').feature('time').set('tlist', 'range(0,5,600)');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,5,600)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.005);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_p' 'global' 'comp1_rho_c' 'global' 'comp1_rho_is' 'global' 'comp1_rho_w' 'global' 'comp1_T' 'global'  ...
'comp1_w_g' 'global' 'comp1_w_t' 'global'});
model.sol('sol1').feature('t1').set('atol', {'comp1_p' '1e-3' 'comp1_rho_c' '1e-3' 'comp1_rho_is' '1e-3' 'comp1_rho_w' '1e-3' 'comp1_T' '1e-3'  ...
'comp1_w_g' '1e-3' 'comp1_w_t' '1e-3'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_p' 'factor' 'comp1_rho_c' 'factor' 'comp1_rho_is' 'factor' 'comp1_rho_w' 'factor' 'comp1_T' 'factor'  ...
'comp1_w_g' 'factor' 'comp1_w_t' 'factor'});
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, pressure (dl) (Merged)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 50);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, pressure (dl)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').create('i2', 'Iterative');
model.sol('sol1').feature('t1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i2').set('rhob', 400);
model.sol('sol1').feature('t1').feature('i2').set('maxlinit', 50);
model.sol('sol1').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i2').label('AMG, mass fractions (tcs)');
model.sol('sol1').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').create('i3', 'Iterative');
model.sol('sol1').feature('t1').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i3').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i3').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i3').set('maxlinit', 10000);
model.sol('sol1').feature('t1').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i3').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('t1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('v1').feature('comp1_p').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_rho_c').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_rho_c').set('scaleval', 'rho_w_init');
model.sol('sol1').feature('v1').feature('comp1_rho_is').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_rho_is').set('scaleval', 'rho_w_init');
model.sol('sol1').feature('v1').feature('comp1_rho_w').set('scalemethod', 'init');
model.sol('sol1').feature('v1').feature('comp1_T').set('scalemethod', 'init');
model.sol('sol1').feature('v1').feature('comp1_w_g').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_w_g').set('scaleval', 0.1);
model.sol('sol1').feature('v1').feature('comp1_w_t').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_w_t').set('scaleval', 0.1);

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'table');
model.nodeGroup('grp1').placeAfter([]);
model.nodeGroup('grp1').label('Experimental Data');

model.result.table.create('tbl1', 'Table');

model.nodeGroup('grp1').add('table', 'tbl1');

model.result.table('tbl1').importData('parameter_estimation_pyrolysis_wood_experimental_data_Y.txt');
model.result.table('tbl1').label('Experimental data: Y');
model.result.table('tbl1').setIndex('headers', 't(s)', 0, 1);
model.result.table('tbl1').setIndex('headers', 'Y', 1, 1);
model.result.table.create('tbl2', 'Table');

model.nodeGroup('grp1').add('table', 'tbl2');

model.result.table('tbl2').label('Experimental data: T_surface');
model.result.table('tbl2').importData('parameter_estimation_pyrolysis_wood_experimental_data_T_surface.txt');
model.result.table('tbl2').setIndex('headers', 't(s)', 0, 1);
model.result.table('tbl2').setIndex('headers', 'T(K)', 1, 1);
model.result.table.duplicate('tbl3', 'tbl2');

model.nodeGroup('grp1').add('table', 'tbl3');

model.result.table('tbl3').label('Experimental data: T_middle');
model.result.table('tbl3').importData('parameter_estimation_pyrolysis_wood_experimental_data_T_middle.txt');
model.result.table('tbl3').setIndex('headers', 't(s)', 0, 1);
model.result.table('tbl3').setIndex('headers', 'T(K)', 1, 1);
model.result.table.duplicate('tbl4', 'tbl3');

model.nodeGroup('grp1').add('table', 'tbl4');

model.result.table('tbl4').label('Experimental data: T_center');
model.result.table('tbl4').importData('parameter_estimation_pyrolysis_wood_experimental_data_T_center.txt');
model.result.table('tbl4').setIndex('headers', 't(s)', 0, 1);
model.result.table('tbl4').setIndex('headers', 'T(K)', 1, 1);
model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').label('Experimental Data');
model.result('pg1').set('data', 'none');
model.result('pg1').set('titletype', 'none');
model.result('pg1').create('tblp1', 'Table');
model.result('pg1').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg1').feature('tblp1').set('linewidth', 'preference');
model.result('pg1').feature('tblp1').set('linestyle', 'none');
model.result('pg1').feature('tblp1').set('linecolor', 'red');
model.result('pg1').feature('tblp1').set('linemarker', 'plus');
model.result('pg1').feature('tblp1').set('legend', true);
model.result('pg1').feature('tblp1').set('autoplotlabel', true);
model.result('pg1').feature('tblp1').set('autoheaders', false);
model.result('pg1').feature('tblp1').label('Normalized Solid Mass');
model.result('pg1').feature.duplicate('tblp2', 'tblp1');
model.result('pg1').run;
model.result('pg1').feature('tblp2').label('Surface Temperature');
model.result('pg1').feature('tblp2').set('table', 'tbl2');
model.result('pg1').feature('tblp2').set('linecolor', 'magenta');
model.result('pg1').feature('tblp2').set('linemarker', 'asterisk');
model.result('pg1').feature.duplicate('tblp3', 'tblp2');
model.result('pg1').run;
model.result('pg1').feature('tblp3').label('Middle Temperature');
model.result('pg1').feature('tblp3').set('table', 'tbl3');
model.result('pg1').feature('tblp3').set('linecolor', 'black');
model.result('pg1').feature('tblp3').set('linemarker', 'circle');
model.result('pg1').feature.duplicate('tblp4', 'tblp3');
model.result('pg1').run;
model.result('pg1').feature('tblp4').label('Center Temperature');
model.result('pg1').feature('tblp4').set('table', 'tbl4');
model.result('pg1').feature('tblp4').set('linecolor', 'blue');
model.result('pg1').feature('tblp4').set('linemarker', 'point');
model.result('pg1').run;
model.result('pg1').set('twoyaxes', true);
model.result('pg1').set('xlabelactive', true);
model.result('pg1').set('xlabel', 'Time (s)');
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'Normalized Solid Mass (-)');
model.result('pg1').set('yseclabelactive', true);
model.result('pg1').set('yseclabel', 'Temperature (K)');
model.result('pg1').setIndex('plotonsecyaxis', true, 1, 1);
model.result('pg1').setIndex('plotonsecyaxis', true, 2, 1);
model.result('pg1').setIndex('plotonsecyaxis', true, 3, 1);
model.result('pg1').set('legendpos', 'middleright');
model.result('pg1').run;
model.result('pg1').run;

model.probe.create('dom1', 'Domain');
model.probe('dom1').model('comp1');
model.probe('dom1').set('intsurface', true);
model.probe('dom1').set('intvolume', true);
model.probe('dom1').label('Domain Probe Y Forward Problem');
model.probe('dom1').set('probename', 'domYforward');
model.probe('dom1').set('expr', 'Y');
model.probe('dom1').set('descractive', true);

model.result.table.create('tbl5', 'Table');

model.probe('dom1').set('table', 'tbl5');

model.result.table('tbl5').label('Domain Probe Y Forward Problem');

model.probe('dom1').genResult('none');

model.sol('sol1').runAll;

model.result('pg1').run;
model.result.duplicate('pg3', 'pg1');
model.result('pg3').run;
model.result('pg3').label('Forward Model and Experimental Data: Y and T_center');
model.result('pg3').run;
model.result('pg3').feature.remove('tblp2');
model.result('pg3').feature.remove('tblp3');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('tblp1').label('Normalized Solid Mass (exp)');
model.result('pg3').feature.duplicate('tblp5', 'tblp1');
model.result('pg3').run;
model.result('pg3').feature('tblp5').label('Normalized Solid Mass (forward model)');
model.result('pg3').feature('tblp5').set('table', 'tbl5');
model.result('pg3').feature('tblp5').set('linestyle', 'dashed');
model.result('pg3').feature('tblp5').set('linemarker', 'none');
model.result('pg3').run;
model.result('pg3').create('ptgr1', 'PointGraph');
model.result('pg3').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg3').feature('ptgr1').set('linewidth', 'preference');
model.result('pg3').feature('ptgr1').label('Center Temperature (forward model)');
model.result('pg3').feature('ptgr1').set('data', 'dset1');
model.result('pg3').feature('ptgr1').selection.set([1]);
model.result('pg3').feature('ptgr1').set('expr', 'T');
model.result('pg3').feature('ptgr1').set('plotonsecyaxis', true);
model.result('pg3').feature('ptgr1').set('linestyle', 'dashed');
model.result('pg3').feature('ptgr1').set('legend', true);
model.result('pg3').feature('ptgr1').set('autoplotlabel', true);
model.result('pg3').feature('ptgr1').set('autopoint', false);
model.result('pg3').feature('ptgr1').set('autosolution', false);
model.result('pg3').run;
model.result('pg3').set('legendlayout', 'outside');
model.result('pg3').set('legendposoutside', 'bottom');
model.result('pg3').set('legendrowcount', 2);
model.result('pg3').run;
model.result('pg3').run;
model.result('pg1').run;
model.result.duplicate('pg4', 'pg1');
model.result('pg4').run;
model.result('pg4').label('Forward Model and Experimental Data: T_surface and T_middle');
model.result('pg4').run;
model.result('pg4').feature.remove('tblp1');
model.result('pg4').feature.remove('tblp4');
model.result('pg4').run;
model.result('pg4').feature('tblp2').label('Surface Temperature (exp)');
model.result('pg4').run;
model.result('pg4').feature('tblp3').label('Middle Temperature (exp)');
model.result('pg4').run;
model.result('pg4').create('ptgr1', 'PointGraph');
model.result('pg4').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg4').feature('ptgr1').set('linewidth', 'preference');
model.result('pg4').feature('ptgr1').label('Surface Temperature (forward model)');
model.result('pg4').feature('ptgr1').set('data', 'dset1');
model.result('pg4').feature('ptgr1').selection.set([4]);
model.result('pg4').feature('ptgr1').set('expr', 'T');
model.result('pg4').feature('ptgr1').set('linestyle', 'dashed');
model.result('pg4').feature('ptgr1').set('linecolor', 'magenta');
model.result('pg4').feature('ptgr1').set('legend', true);
model.result('pg4').feature('ptgr1').set('autoplotlabel', true);
model.result('pg4').feature('ptgr1').set('autopoint', false);
model.result('pg4').feature('ptgr1').set('autosolution', false);
model.result('pg4').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg4').run;
model.result('pg4').feature('ptgr2').label('Middle Temperature (forward model)');
model.result('pg4').feature('ptgr2').selection.set([3]);
model.result('pg4').feature('ptgr2').set('linecolor', 'black');
model.result('pg4').run;
model.result('pg4').set('twoyaxes', false);
model.result('pg4').set('ylabel', 'Temperature (K)');
model.result('pg4').set('legendlayout', 'outside');
model.result('pg4').set('legendposoutside', 'bottom');
model.result('pg4').set('legendrowcount', 4);
model.result('pg4').run;
model.result('pg4').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').set('type', 'general');
model.result.evaluationGroup('eg1').set('keepchildnodes', true);
model.result.evaluationGroup('eg1').set('generalheader', 'm(t)/m(0) = 1');
model.result.evaluationGroup('eg1').label('Mass Conservation Check');
model.result.evaluationGroup('eg1').create('int1', 'IntSurface');
model.result.evaluationGroup('eg1').feature('int1').set('intvolume', true);
model.result.evaluationGroup('eg1').feature('int1').label('Gas and Tar Inside Sample');
model.result.evaluationGroup('eg1').feature('int1').selection.set([1]);
model.result.evaluationGroup('eg1').feature('int1').set('expr', {});
model.result.evaluationGroup('eg1').feature('int1').set('descr', {});
model.result.evaluationGroup('eg1').feature('int1').setIndex('expr', 'tcs.rho * (w_t+w_g)*epsilon', 0);
model.result.evaluationGroup('eg1').feature('int1').setIndex('descr', 'Gas + Tar Inside', 0);
model.result.evaluationGroup('eg1').create('int2', 'IntLine');
model.result.evaluationGroup('eg1').feature('int2').set('intsurface', true);
model.result.evaluationGroup('eg1').feature('int2').label('Gas and Tar Leaving Sample');
model.result.evaluationGroup('eg1').feature('int2').set('expr', {});
model.result.evaluationGroup('eg1').feature('int2').set('descr', {});
model.result.evaluationGroup('eg1').feature('int2').selection.set([4]);
model.result.evaluationGroup('eg1').feature('int2').setIndex('expr', 'tcs.ntflux_w_g+tcs.ntflux_w_t', 0);
model.result.evaluationGroup('eg1').feature('int2').setIndex('descr', 'Gas + Tar Leaving', 0);
model.result.evaluationGroup('eg1').feature('int2').set('dataseries', 'integral');
model.result.evaluationGroup('eg1').feature('int2').set('dataseriescumulative', true);
model.result.evaluationGroup('eg1').create('int3', 'IntSurface');
model.result.evaluationGroup('eg1').feature('int3').set('intvolume', true);
model.result.evaluationGroup('eg1').feature('int3').selection.set([1]);
model.result.evaluationGroup('eg1').feature('int3').label('Intermediate + Char');
model.result.evaluationGroup('eg1').feature('int3').set('expr', {});
model.result.evaluationGroup('eg1').feature('int3').set('descr', {});
model.result.evaluationGroup('eg1').feature('int3').setIndex('expr', 'rho_is + rho_c', 0);
model.result.evaluationGroup('eg1').feature('int3').setIndex('descr', 'IS + Char', 0);
model.result.evaluationGroup('eg1').create('int4', 'IntSurface');
model.result.evaluationGroup('eg1').feature('int4').set('intvolume', true);
model.result.evaluationGroup('eg1').feature('int4').label('Wood');
model.result.evaluationGroup('eg1').feature('int4').set('expr', {});
model.result.evaluationGroup('eg1').feature('int4').set('descr', {});
model.result.evaluationGroup('eg1').feature('int4').selection.set([1]);
model.result.evaluationGroup('eg1').feature('int4').setIndex('expr', 'rho_w', 0);
model.result.evaluationGroup('eg1').feature('int4').setIndex('descr', 'Wood', 0);
model.result.evaluationGroup('eg1').set('generalexpr', '(int1+int2+int3+int4)');
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup('eg1').set('generalexpr', '(int1+int2+int3+int4)/0.0026954');
model.result.evaluationGroup('eg1').run;

model.common.create('glso1', 'GlobalLeastSquaresObjective', 'comp1');
model.common('glso1').label('T_surface');
model.common('glso1').set('source', 'resultTable');
model.common('glso1').set('resultTable', 'tbl2');

model.nodeGroup.create('grp2', 'Definitions', 'comp1');
model.nodeGroup('grp2').label('Probes for Parameter Estimation');

model.probe.create('point1', 'Point');
model.probe('point1').model('comp1');

model.nodeGroup('grp2').add('probe', 'point1');

model.probe('point1').label('Point Probe Surface');
model.probe('point1').set('probename', 'T_surface');
model.probe('point1').selection.set([4]);
model.probe('point1').set('expr', 'T');
model.probe('point1').set('descractive', true);
model.probe.duplicate('point2', 'point1');

model.nodeGroup('grp2').add('probe', 'point2');

model.probe('point2').label('Point Probe Middle');
model.probe('point2').set('probename', 'T_middle');
model.probe('point2').selection.set([3]);
model.probe.duplicate('point3', 'point2');

model.nodeGroup('grp2').add('probe', 'point3');

model.probe('point3').label('Point Probe Center');
model.probe('point3').set('probename', 'T_center');
model.probe('point3').selection.set([1]);
model.probe.create('dom2', 'Domain');
model.probe('dom2').model('comp1');
model.probe('dom2').set('intsurface', true);
model.probe('dom2').set('intvolume', true);

model.nodeGroup('grp2').add('probe', 'dom2');

model.probe('dom2').label('Domain Probe Y');
model.probe('dom2').set('probename', 'domY');
model.probe('dom2').set('expr', 'Y');
model.probe('dom2').set('descractive', true);

model.result.table.create('tbl6', 'Table');
model.result.table('tbl6').label('Probes Parameter Estimation');

model.probe('point1').set('table', 'tbl6');
model.probe('point2').set('table', 'tbl6');
model.probe('point3').set('table', 'tbl6');
model.probe('dom2').set('table', 'tbl6');
model.probe('dom1').active(false);

model.common('glso1').setEntry('modelExpression', 'col2', 'T_surface');
model.common('glso1').setEntry('variableName', 'col2', 'T_surface');
model.common.duplicate('glso2', 'glso1');
model.common('glso2').label('T_mid');
model.common('glso2').set('resultTable', 'tbl3');
model.common('glso2').setEntry('modelExpression', 'col2', 'T_middle');
model.common('glso2').setEntry('variableName', 'col2', 'T_middle');
model.common.duplicate('glso3', 'glso2');
model.common('glso3').label('T_center');
model.common('glso3').set('resultTable', 'tbl4');
model.common('glso3').setEntry('modelExpression', 'col2', 'T_center');
model.common('glso3').setEntry('variableName', 'col2', 'T_center');
model.common.duplicate('glso4', 'glso3');
model.common('glso4').label('Y');
model.common('glso4').set('resultTable', 'tbl1');
model.common('glso4').setEntry('modelExpression', 'col2', 'domY');
model.common('glso4').setEntry('variableName', 'col2', 'domY');

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/tcs', true);
model.study('std2').feature('time').setSolveFor('/physics/dl', true);
model.study('std2').feature('time').setSolveFor('/physics/ht', true);
model.study('std2').feature('time').setSolveFor('/physics/dode', true);
model.study('std2').label('Study 2 Parameter Estimation');
model.study('std2').setGenPlots(false);
model.study('std2').create('lsqo', 'LSQOptimization');
model.study('std2').feature('lsqo').setIndex('pname', 'A_c', 0);
model.study('std2').feature('lsqo').setIndex('initval', '1.38e10[1/s]', 0);
model.study('std2').feature('lsqo').setIndex('scale', 1, 0);
model.study('std2').feature('lsqo').setIndex('lbound', '', 0);
model.study('std2').feature('lsqo').setIndex('ubound', '', 0);
model.study('std2').feature('lsqo').setIndex('pname', 'A_c', 0);
model.study('std2').feature('lsqo').setIndex('initval', '1.38e10[1/s]', 0);
model.study('std2').feature('lsqo').setIndex('scale', 1, 0);
model.study('std2').feature('lsqo').setIndex('lbound', '', 0);
model.study('std2').feature('lsqo').setIndex('ubound', '', 0);
model.study('std2').feature('lsqo').setIndex('pname', 'A_c2', 1);
model.study('std2').feature('lsqo').setIndex('initval', '1.00e5[1/s]', 1);
model.study('std2').feature('lsqo').setIndex('scale', 1, 1);
model.study('std2').feature('lsqo').setIndex('lbound', '', 1);
model.study('std2').feature('lsqo').setIndex('ubound', '', 1);
model.study('std2').feature('lsqo').setIndex('pname', 'A_c2', 1);
model.study('std2').feature('lsqo').setIndex('initval', '1.00e5[1/s]', 1);
model.study('std2').feature('lsqo').setIndex('scale', 1, 1);
model.study('std2').feature('lsqo').setIndex('lbound', '', 1);
model.study('std2').feature('lsqo').setIndex('ubound', '', 1);
model.study('std2').feature('lsqo').setIndex('pname', 'A_g', 2);
model.study('std2').feature('lsqo').setIndex('initval', '4.38e9[1/s]', 2);
model.study('std2').feature('lsqo').setIndex('scale', 1, 2);
model.study('std2').feature('lsqo').setIndex('lbound', '', 2);
model.study('std2').feature('lsqo').setIndex('ubound', '', 2);
model.study('std2').feature('lsqo').setIndex('pname', 'A_g', 2);
model.study('std2').feature('lsqo').setIndex('initval', '4.38e9[1/s]', 2);
model.study('std2').feature('lsqo').setIndex('scale', 1, 2);
model.study('std2').feature('lsqo').setIndex('lbound', '', 2);
model.study('std2').feature('lsqo').setIndex('ubound', '', 2);
model.study('std2').feature('lsqo').setIndex('pname', 'A_g2', 3);
model.study('std2').feature('lsqo').setIndex('initval', '4.28e6[1/s]', 3);
model.study('std2').feature('lsqo').setIndex('scale', 1, 3);
model.study('std2').feature('lsqo').setIndex('lbound', '', 3);
model.study('std2').feature('lsqo').setIndex('ubound', '', 3);
model.study('std2').feature('lsqo').setIndex('pname', 'A_g2', 3);
model.study('std2').feature('lsqo').setIndex('initval', '4.28e6[1/s]', 3);
model.study('std2').feature('lsqo').setIndex('scale', 1, 3);
model.study('std2').feature('lsqo').setIndex('lbound', '', 3);
model.study('std2').feature('lsqo').setIndex('ubound', '', 3);
model.study('std2').feature('lsqo').setIndex('pname', 'A_is_opt', 0);
model.study('std2').feature('lsqo').setIndex('lbound', 'A_is_opt_lower', 0);
model.study('std2').feature('lsqo').setIndex('ubound', 'A_is_opt_upper', 0);
model.study('std2').feature('lsqo').setIndex('pname', 'DH_c_opt', 1);
model.study('std2').feature('lsqo').setIndex('lbound', 'DH_c_opt_lower', 1);
model.study('std2').feature('lsqo').setIndex('ubound', 'DH_c_opt_upper', 1);
model.study('std2').feature('lsqo').setIndex('pname', 'DH_t_opt', 2);
model.study('std2').feature('lsqo').setIndex('lbound', 'DH_t_opt_lower', 2);
model.study('std2').feature('lsqo').setIndex('ubound', 'DH_t_opt_upper', 2);
model.study('std2').feature('lsqo').setIndex('pname', 'hconv_opt', 3);
model.study('std2').feature('lsqo').setIndex('lbound', 'hconv_opt_lower', 3);
model.study('std2').feature('lsqo').setIndex('ubound', 'hconv_opt_upper', 3);
model.study('std2').feature('lsqo').set('optsolver', 'bobyqa');
model.study('std2').feature('lsqo').set('lsqdatamethod', 'lsq');

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol2').study('std2');

model.study('std2').feature('lsqo').set('lsqmessage', {});

model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,0.1,1)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {'point1' 'point2' 'point3' 'dom2' 'dom1'});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 0.005);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('atolmethod', {'comp1_p' 'global' 'comp1_rho_c' 'global' 'comp1_rho_is' 'global' 'comp1_rho_w' 'global' 'comp1_T' 'global'  ...
'comp1_w_g' 'global' 'comp1_w_t' 'global' 'conpar5' 'global' 'conpar6' 'global' 'conpar7' 'global'  ...
'conpar8' 'global'});
model.sol('sol2').feature('t1').set('atol', {'comp1_p' '1e-3' 'comp1_rho_c' '1e-3' 'comp1_rho_is' '1e-3' 'comp1_rho_w' '1e-3' 'comp1_T' '1e-3'  ...
'comp1_w_g' '1e-3' 'comp1_w_t' '1e-3' 'conpar5' '1e-3' 'conpar6' '1e-3' 'conpar7' '1e-3'  ...
'conpar8' '1e-3'});
model.sol('sol2').feature('t1').set('atolvaluemethod', {'comp1_p' 'factor' 'comp1_rho_c' 'factor' 'comp1_rho_is' 'factor' 'comp1_rho_w' 'factor' 'comp1_T' 'factor'  ...
'comp1_w_g' 'factor' 'comp1_w_t' 'factor' 'conpar5' 'factor' 'conpar6' 'factor' 'conpar7' 'factor'  ...
'conpar8' 'factor'});
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('estrat', 'exclude');
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('stabcntrl', true);
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').set('tlistlsq', [0 0.3 0.54 0.78 1.27 1.9 3.39 3.46 4.19 5.11 9.22 12.4 13.99 15.58 16.52 18.15 18.76 20.35 20.67 25.12 26.34 28.3 30.99 31.83 32.92 33.34 37.72 37.86 41.15 44.2 47.75 48.16 50.84 51.03 54.56 55.33 57.61 65.41 65.84 66.31 66.45 70.78 73.43 79.01 79.17 82.18 83.55 85.6 90.3 90.93 94.16 95.47 99.84 100.4 103.7 107.79 108.01 111.93 112.5 117.65 120.1 120.51 122.76 123.24 125.49 129.92 132.13 134.82 138.27 139.36 139.76 144.36 149.01 151.44 153.85 155.48 155.8 159.67 161.68 163.09 167.71 169.55 170.38 171.83 173.74 177.67 179.17 182.72 184.59 185.68 187.87 190.02 190.95 192.97 194.96 199.07 199.18 199.53 203.91 204.24 207.54 210.53 211.92 215.35 219.17 219.94 220.17 220.67 225.6 227.16 229.42 231.03 235.39 235.98 236.46 238.17 241.88 243.62 246.18 246.68 249.12 251.89 252.8 253.47 254.64 259.98 260.52 265.4 267.88 269.99 270.83 275.66 278.26 281.08 284.09 285.34 285.54 286.51 293.14 298.57 299.73 300.12 303.51 306.37 310.33 311.24 316.52 319.68 322.42 328.73 332.03 337.17 338.41 343.77 348.23 348.26 350.05 355.44 357.07 363.14 363.48 364.31 374.47 374.77 377.57 380.74 384.95 390.51 390.84 396.34 397.31 399.62 404.11 406.43 408.22 411.5 412.37 414.56 417.37 419.4 419.85 421.85 424.04 425.76 427.34 428.41 428.93 429.3 430.64 433.7 438.61 439.51 443.91 444.45 452.46 457.18 460.48 460.91 465.5 470.44 476.52 479.01 483.71 486.58 492.55 496.98 499.83 502.9 508.59 510.25 518.73 518.79 523.51 524.63 534.83 536.78 539.09 542.12 550.05 550.87 556.38 558.15 563.31 566.9 574.19 576.58 581.07 582.94 589.85 591.24 598.97 603.12 610.7 613.55 615.01 615.78]);
model.sol('sol2').feature('t1').set('lsqtimesout', ['      0.00' newline '     0.300' newline '     0.540' newline '     0.780' newline '      1.27' newline '      1.90' newline '      3.39' newline '      3.46' newline '      4.19' newline '      5.11' newline '      9.22' newline '      12.4' newline '      14.0' newline '      15.6' newline '      16.5' newline '      18.2' newline '      18.8' newline '      20.4' newline '      20.7' newline '      25.1' newline '      26.3' newline '      28.3' newline '      31.0' newline '      31.8' newline '      32.9' newline '      33.3' newline '      37.7' newline '      37.9' newline '      41.2' newline '      44.2' newline '      47.8' newline '      48.2' newline '      50.8' newline '      51.0' newline '      54.6' newline '      55.3' newline '      57.6' newline '      65.4' newline '      65.8' newline '      66.3' newline '      66.5' newline '      70.8' newline '      73.4' newline '      79.0' newline '      79.2' newline '      82.2' newline '      83.6' newline '      85.6' newline '      90.3' newline '      90.9' newline '      94.2' newline '      95.5' newline '      99.8' newline '       100' newline '       104' newline '       108' newline '       108' newline '       112' newline '       113' newline '       118' newline '       120' newline '       121' newline '       123' newline '       123' newline '       125' newline '       130' newline '       132' newline '       135' newline '       138' newline '       139' newline '       140' newline '       144' newline '       149' newline '       151' newline '       154' newline '       155' newline '       156' newline '       160' newline '       162' newline '       163' newline '       168' newline '       170' newline '       170' newline '       172' newline '       174' newline '       178' newline '       179' newline '       183' newline '       185' newline '       186' newline '       188' newline '       190' newline '       191' newline '       193' newline '       195' newline '       199' newline '       199' newline '       200' newline '       204' newline '       204' newline '       208' newline '       211' newline '       212' newline '       215' newline '       219' newline '       220' newline '       220' newline '       221' newline '       226' newline '       227' newline '       229' newline '       231' newline '       235' newline '       236' newline '       236' newline '       238' newline '       242' newline '       244' newline '       246' newline '       247' newline '       249' newline '       252' newline '       253' newline '       253' newline '       255' newline '       260' newline '       261' newline '       265' newline '       268' newline '       270' newline '       271' newline '       276' newline '       278' newline '       281' newline '       284' newline '       285' newline '       286' newline '       287' newline '       293' newline '       299' newline '       300' newline '       300' newline '       304' newline '       306' newline '       310' newline '       311' newline '       317' newline '       320' newline '       322' newline '       329' newline '       332' newline '       337' newline '       338' newline '       344' newline '       348' newline '       348' newline '       350' newline '       355' newline '       357' newline '       363' newline '       363' newline '       364' newline '       374' newline '       375' newline '       378' newline '       381' newline '       385' newline '       391' newline '       391' newline '       396' newline '       397' newline '       400' newline '       404' newline '       406' newline '       408' newline '       412' newline '       412' newline '       415' newline '       417' newline '       419' newline '       420' newline '       422' newline '       424' newline '       426' newline '       427' newline '       428' newline '       429' newline '       429' newline '       431' newline '       434' newline '       439' newline '       440' newline '       444' newline '       444' newline '       452' newline '       457' newline '       460' newline '       461' newline '       466' newline '       470' newline '       477' newline '       479' newline '       484' newline '       487' newline '       493' newline '       497' newline '       500' newline '       503' newline '       509' newline '       510' newline '       519' newline '       519' newline '       524' newline '       525' newline '       535' newline '       537' newline '       539' newline '       542' newline '       550' newline '       551' newline '       556' newline '       558' newline '       563' newline '       567' newline '       574' newline '       577' newline '       581' newline '       583' newline '       590' newline '       591' newline '       599' newline '       603' newline '       611' newline '       614' newline '       615' newline '       616' newline ]);
model.sol('sol2').feature('t1').set('tout', 'tlist');
model.sol('sol2').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('t1').create('seDef', 'Segregated');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol2').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol2').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol2').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol2').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol2').feature('t1').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('d1').set('linsolver', 'mumps');
model.sol('sol2').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('d1').label('Direct, pressure (dl) (Merged)');
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('t1').feature('i1').set('rhob', 400);
model.sol('sol2').feature('t1').feature('i1').set('maxlinit', 50);
model.sol('sol2').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('t1').feature('i1').label('AMG, pressure (dl)');
model.sol('sol2').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', false);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').create('i2', 'Iterative');
model.sol('sol2').feature('t1').feature('i2').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i2').set('prefuntype', 'left');
model.sol('sol2').feature('t1').feature('i2').set('itrestart', 50);
model.sol('sol2').feature('t1').feature('i2').set('rhob', 400);
model.sol('sol2').feature('t1').feature('i2').set('maxlinit', 50);
model.sol('sol2').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol2').feature('t1').feature('i2').label('AMG, mass fractions (tcs)');
model.sol('sol2').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').create('i3', 'Iterative');
model.sol('sol2').feature('t1').feature('i3').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i3').set('prefuntype', 'left');
model.sol('sol2').feature('t1').feature('i3').set('itrestart', 50);
model.sol('sol2').feature('t1').feature('i3').set('rhob', 20);
model.sol('sol2').feature('t1').feature('i3').set('maxlinit', 10000);
model.sol('sol2').feature('t1').feature('i3').set('nlinnormuse', 'on');
model.sol('sol2').feature('t1').feature('i3').label('AMG, heat transfer variables (ht)');
model.sol('sol2').feature('t1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('t1').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('t1').feature('i3').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('t1').feature('i3').feature('mg1').set('strconn', 0.01);
model.sol('sol2').feature('t1').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('t1').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('t1').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('t1').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('t1').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('t1').feature('i3').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('t1').feature('i3').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol2').feature('t1').feature('i3').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol2').feature('t1').feature('i3').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('t1').feature('i3').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol2').feature('t1').feature('i3').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol2').feature('t1').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('t1').feature('fc1').set('maxiter', 8);
model.sol('sol2').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol2').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol2').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('aaccdelay', 0);
model.sol('sol2').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').feature('t1').feature.remove('seDef');
model.sol('sol2').attach('std2');

model.batch.create('o1', 'Optimization');
model.batch('o1').study('std2');
model.batch('p1').study('std2');
model.batch('o1').attach('std2');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol2');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').attach('std2');
model.batch('p1').set('optimization', 'o1');
model.batch('p1').set('err', 'on');
model.batch('p1').set('control', 'lsqo');
model.batch('o1').set('parametricjobs', {'p1'});

model.sol('sol2').feature('v1').feature('comp1_p').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_rho_c').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_rho_c').set('scaleval', 'rho_w_init');
model.sol('sol2').feature('v1').feature('comp1_rho_is').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_rho_is').set('scaleval', 'rho_w_init');
model.sol('sol2').feature('v1').feature('comp1_rho_w').set('scalemethod', 'init');
model.sol('sol2').feature('v1').feature('comp1_T').set('scalemethod', 'init');
model.sol('sol2').feature('v1').feature('comp1_w_g').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_w_g').set('scaleval', 0.1);
model.sol('sol2').feature('v1').feature('comp1_w_t').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_w_t').set('scaleval', 0.1);

model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Optimized, Forward Model, and Experimental Data: T_surface and T_middle');
model.result('pg5').set('legendrowcount', 6);
model.result('pg5').run;
model.result('pg5').feature.duplicate('ptgr3', 'ptgr1');
model.result('pg5').run;
model.result('pg5').feature('ptgr3').label('Surface Temperature (optimized)');
model.result('pg5').feature('ptgr3').set('data', 'dset3');
model.result('pg5').feature('ptgr3').set('xdata', 'expr');
model.result('pg5').feature('ptgr3').set('xdataexpr', 't');
model.result('pg5').feature('ptgr3').set('linestyle', 'solid');
model.result('pg5').run;
model.result('pg5').feature.duplicate('ptgr4', 'ptgr2');
model.result('pg5').run;
model.result('pg5').feature('ptgr4').label('Middle Temperature (optimized)');
model.result('pg5').feature('ptgr4').set('data', 'dset3');
model.result('pg5').feature('ptgr4').set('xdata', 'expr');
model.result('pg5').feature('ptgr4').set('xdataexpr', 't');
model.result('pg5').feature('ptgr4').set('linestyle', 'solid');

model.probe.create('var1', 'GlobalVariable');
model.probe('var1').model('comp1');

model.nodeGroup('grp2').add('probe', 'var1');

model.probe('var1').label('Global Variable Probe A_is');
model.probe('var1').set('expr', 'A_is');
model.probe('var1').set('table', 'tbl6');
model.probe('var1').set('probename', 'A_is_probe');
model.probe.duplicate('var2', 'var1');

model.nodeGroup('grp2').add('probe', 'var2');

model.probe('var2').label('Global Variable Probe DH_c');
model.probe('var2').set('probename', 'DH_c_probe');
model.probe('var2').set('expr', 'DH_c');
model.probe.duplicate('var3', 'var2');

model.nodeGroup('grp2').add('probe', 'var3');

model.probe('var3').label('Global Variable Probe DH_t');
model.probe('var3').set('probename', 'DH_t_probe');
model.probe('var3').set('expr', 'DH_t');
model.probe.duplicate('var4', 'var3');

model.nodeGroup('grp2').add('probe', 'var4');

model.probe('var4').label('Global Variable Probe hconv');
model.probe('var4').set('probename', 'hconv_probe');
model.probe('var4').set('expr', 'hconv');

model.study('std2').feature('lsqo').set('plot', true);
model.study('std2').feature('lsqo').set('plotgroup', 'pg5');

model.batch('p1').attach('std2');
model.batch('p1').active(true);
model.batch('o1').set('parametricjobs', {'p1'});

model.sol.create('sol3');
model.sol('sol3').study('std2');
model.sol('sol3').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol3');

model.probe('point1').genResult('none');
model.probe('point2').genResult('none');
model.probe('point3').genResult('none');
model.probe('dom2').genResult('none');
model.probe('var1').genResult('none');
model.probe('var2').genResult('none');
model.probe('var3').genResult('none');
model.probe('var4').genResult('none');

model.batch('o1').run('compute');

model.study('std2').feature('lsqo').set('probewindow', '');

model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').run;
model.result.numerical.create('gev5', 'EvalGlobal');
model.result.numerical('gev1').set('data', 'dset3');
model.result.numerical('gev1').setIndex('expr', 'DH_t', 1);
model.result.numerical('gev1').setIndex('expr', 'DH_c', 2);
model.result.numerical('gev1').setIndex('expr', 'hconv', 3);
model.result.numerical('gev1').setIndex('looplevelinput', 'first', 0);
model.result.numerical('gev1').label('Values for optimized physical parameters');
model.result.table.create('tbl9', 'Table');
model.result.table('tbl9').comments('Values for optimized physical parameters');
model.result.numerical('gev1').set('table', 'tbl9');
model.result.numerical('gev1').setResult;
model.result.table('tbl9').label('Values for Optimized Physical Parameters');
model.result.numerical.remove('gev2');
model.result.numerical.remove('gev3');
model.result.numerical.remove('gev4');
model.result.numerical.remove('gev5');
model.result('pg3').run;
model.result.duplicate('pg6', 'pg3');
model.result('pg6').run;
model.result('pg6').label('Optimized, Forward Model, and Experimental Data: Y and T_center');
model.result('pg6').set('legendrowcount', 3);
model.result('pg6').run;
model.result('pg6').feature.duplicate('tblp6', 'tblp5');
model.result('pg6').run;
model.result('pg6').feature('tblp6').label('Normalized Solid Mass (optimized)');
model.result('pg6').feature('tblp6').set('table', 'tbl6');
model.result('pg6').feature('tblp6').set('plotcolumninput', 'manual');
model.result('pg6').feature('tblp6').set('plotcolumns', [5]);
model.result('pg6').feature('tblp6').set('linestyle', 'solid');
model.result('pg6').run;
model.result('pg6').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg6').run;
model.result('pg6').feature('ptgr2').label('Center Temperature (optimized)');
model.result('pg6').feature('ptgr2').set('data', 'dset3');
model.result('pg6').feature('ptgr2').set('linestyle', 'solid');
model.result('pg6').feature('ptgr2').set('linecolor', 'blue');
model.result('pg6').run;
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').label('Solid Species');
model.result('pg7').set('legendpos', 'rightdouble');
model.result('pg7').set('plotarrayenable', true);
model.result('pg7').set('arrayshape', 'square');
model.result('pg7').set('arrayplane', 'xz');
model.result.dataset.create('mir1', 'Mirror2D');
model.result.dataset('mir1').setIndex('genpoints', 1, 1, 0);
model.result.dataset('mir1').setIndex('genpoints', 0, 1, 1);
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').label('Half Sphere');
model.result.dataset('rev1').set('data', 'mir1');
model.result.dataset('rev1').set('revangle', 180);
model.result('pg7').run;
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('arraydim', '2');
model.result('pg7').feature('surf1').label('150s Wood');
model.result('pg7').feature('surf1').set('data', 'rev1');
model.result('pg7').feature('surf1').setIndex('looplevel', 'interp', 0);
model.result('pg7').feature('surf1').set('interp', [150]);
model.result('pg7').feature('surf1').set('expr', 'rho_w/rho_w_init');
model.result.colorTable.create('ctbl1', 'ColorTable');
model.result.colorTable('ctbl1').label('Wood');
model.result.colorTable('ctbl1').setIndex('data', 1, 0, 0);
model.result.colorTable('ctbl1').setIndex('data', 0.72, 0, 1);
model.result.colorTable('ctbl1').setIndex('data', 0.075, 0, 2);
model.result.colorTable('ctbl1').setIndex('data', 20, 0, 3);
model.result.colorTable('ctbl1').setIndex('data', 1, 1, 0);
model.result.colorTable('ctbl1').setIndex('data', 1, 1, 1);
model.result.colorTable('ctbl1').setIndex('data', 1, 1, 2);
model.result.colorTable('ctbl1').setIndex('data', 1, 1, 3);
model.result.colorTable('ctbl1').setIndex('data', 1, 2, 0);
model.result.colorTable('ctbl1').setIndex('data', 1, 2, 1);
model.result.colorTable('ctbl1').setIndex('data', 1, 2, 2);
model.result.colorTable('ctbl1').setIndex('data', 5, 2, 3);
model.result.colorTable('ctbl1').setIndex('data', 0.9, 3, 0);
model.result.colorTable('ctbl1').setIndex('data', 0.9, 3, 1);
model.result.colorTable('ctbl1').setIndex('data', 0.9, 3, 2);
model.result.colorTable('ctbl1').setIndex('data', 0.1, 3, 3);
model.result.colorTable.create('ctbl2', 'ColorTable');
model.result.colorTable('ctbl2').label('Intermediate');
model.result.colorTable('ctbl2').setIndex('data', 0.77, 0, 0);
model.result.colorTable('ctbl2').setIndex('data', 0.22, 0, 1);
model.result.colorTable('ctbl2').setIndex('data', '0.20', 0, 2);
model.result.colorTable('ctbl2').setIndex('data', 20, 0, 3);
model.result.colorTable('ctbl2').setIndex('data', 1, 1, 0);
model.result.colorTable('ctbl2').setIndex('data', 1, 1, 1);
model.result.colorTable('ctbl2').setIndex('data', 1, 1, 2);
model.result.colorTable('ctbl2').setIndex('data', 1, 1, 3);
model.result.colorTable('ctbl2').setIndex('data', 1, 2, 0);
model.result.colorTable('ctbl2').setIndex('data', 1, 2, 1);
model.result.colorTable('ctbl2').setIndex('data', 1, 2, 2);
model.result.colorTable('ctbl2').setIndex('data', 5, 2, 3);
model.result.colorTable('ctbl2').setIndex('data', 0.9, 3, 0);
model.result.colorTable('ctbl2').setIndex('data', 0.9, 3, 1);
model.result.colorTable('ctbl2').setIndex('data', 0.9, 3, 2);
model.result.colorTable('ctbl2').setIndex('data', 0.1, 3, 3);
model.result.colorTable.create('ctbl3', 'ColorTable');
model.result.colorTable('ctbl3').label('Char');
model.result.colorTable('ctbl3').setIndex('data', 0.3, 0, 0);
model.result.colorTable('ctbl3').setIndex('data', 0.13, 0, 1);
model.result.colorTable('ctbl3').setIndex('data', 0.06, 0, 2);
model.result.colorTable('ctbl3').setIndex('data', 20, 0, 3);
model.result.colorTable('ctbl3').setIndex('data', 1, 1, 0);
model.result.colorTable('ctbl3').setIndex('data', 1, 1, 1);
model.result.colorTable('ctbl3').setIndex('data', 1, 1, 2);
model.result.colorTable('ctbl3').setIndex('data', 1, 1, 3);
model.result.colorTable('ctbl3').setIndex('data', 1, 2, 0);
model.result.colorTable('ctbl3').setIndex('data', 1, 2, 1);
model.result.colorTable('ctbl3').setIndex('data', 1, 2, 2);
model.result.colorTable('ctbl3').setIndex('data', 5, 2, 3);
model.result.colorTable('ctbl3').setIndex('data', 0.9, 3, 0);
model.result.colorTable('ctbl3').setIndex('data', 0.9, 3, 1);
model.result.colorTable('ctbl3').setIndex('data', 0.9, 3, 2);
model.result.colorTable('ctbl3').setIndex('data', 0.1, 3, 3);
model.result('pg7').feature('surf1').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('surf1').set('colortable', 'Wood');
model.result('pg7').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg7').feature('surf1').set('colortabletype', 'discrete');
model.result('pg7').feature.duplicate('surf2', 'surf1');
model.result('pg7').feature('surf2').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('surf2').label('150s Intermediate Solid');
model.result('pg7').feature('surf2').set('expr', 'rho_is/rho_w_init');
model.result('pg7').feature('surf2').set('colortable', 'Intermediate');
model.result('pg7').feature.duplicate('surf3', 'surf2');
model.result('pg7').feature('surf3').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('surf3').label('150s Char');
model.result('pg7').feature('surf3').set('expr', 'rho_c/rho_w_init');
model.result('pg7').feature('surf3').set('colortable', 'Char');
model.result('pg7').feature('surf3').set('manualindexing', true);
model.result('pg7').feature('surf3').set('colindex', 2);
model.result('pg7').feature('surf1').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature.duplicate('surf4', 'surf1');
model.result('pg7').feature('surf4').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('surf4').label('270s Wood');
model.result('pg7').feature('surf4').set('interp', [270]);
model.result('pg7').feature('surf4').set('inheritplot', 'surf1');
model.result('pg7').feature('surf4').set('manualindexing', true);
model.result('pg7').feature('surf4').set('rowindex', 1);
model.result('pg7').feature('surf2').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature.duplicate('surf5', 'surf2');
model.result('pg7').feature('surf5').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('surf5').label('270s Intermediate Solid');
model.result('pg7').feature('surf5').set('interp', [270]);
model.result('pg7').feature('surf5').set('inheritplot', 'surf2');
model.result('pg7').feature('surf5').set('manualindexing', true);
model.result('pg7').feature('surf5').set('rowindex', 1);
model.result('pg7').feature('surf5').set('colindex', 1);
model.result('pg7').feature('surf3').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature.duplicate('surf6', 'surf3');
model.result('pg7').feature('surf6').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('surf6').label('270s Char');
model.result('pg7').feature('surf6').set('interp', [270]);
model.result('pg7').feature('surf6').set('inheritplot', 'surf3');
model.result('pg7').feature('surf6').set('rowindex', 1);
model.result('pg7').feature('surf4').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature.duplicate('surf7', 'surf4');
model.result('pg7').feature('surf7').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('surf7').label('410 s Wood');
model.result('pg7').feature('surf7').set('interp', [410]);
model.result('pg7').feature('surf7').set('rowindex', 2);
model.result('pg7').feature('surf5').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature.duplicate('surf8', 'surf5');
model.result('pg7').feature('surf8').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('surf8').label('410 s Intermediate Solid');
model.result('pg7').feature('surf8').set('interp', [410]);
model.result('pg7').feature('surf8').set('rowindex', 2);
model.result('pg7').feature('surf6').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature.duplicate('surf9', 'surf6');
model.result('pg7').feature('surf9').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('surf9').label('410 s Char');
model.result('pg7').feature('surf9').set('interp', [410]);
model.result('pg7').feature('surf9').set('rowindex', 2);
model.result('pg7').run;
model.result('pg7').set('titletype', 'none');
model.result('pg7').create('ann1', 'Annotation');
model.result('pg7').feature('ann1').set('arraydim', '2');
model.result('pg7').feature('ann1').label('Wood');
model.result('pg7').feature('ann1').set('data', 'rev1');
model.result('pg7').feature('ann1').set('text', '$\frac{\rho_{\omega}}{\rho_{\omega,0}}$');
model.result('pg7').feature('ann1').set('latexmarkup', true);
model.result('pg7').feature('ann1').set('poszexpr', -0.02);
model.result('pg7').feature('ann1').set('showpoint', false);
model.result('pg7').feature('ann1').set('anchorpoint', 'center');
model.result('pg7').feature('ann1').set('manualindexing', true);
model.result('pg7').feature.duplicate('ann2', 'ann1');
model.result('pg7').feature('ann2').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('ann2').label('Intermediate Solid');
model.result('pg7').feature('ann2').set('text', '$\frac{\rho_{is}}{\rho_{\omega,0}}$');
model.result('pg7').feature('ann2').set('colindex', 1);
model.result('pg7').feature.duplicate('ann3', 'ann2');
model.result('pg7').feature('ann3').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('ann3').label('Char');
model.result('pg7').feature('ann3').set('text', '$\frac{\rho_{c}}{\rho_{\omega,0}}$');
model.result('pg7').feature('ann3').set('colindex', 2);
model.result('pg7').feature('ann1').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature.duplicate('ann4', 'ann1');
model.result('pg7').feature('ann4').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('ann4').label('150 s');
model.result('pg7').feature('ann4').set('text', '150 s');
model.result('pg7').feature('ann4').set('poszexpr', 0);
model.result('pg7').feature('ann4').set('posxexpr', -0.025);
model.result('pg7').feature.duplicate('ann5', 'ann4');
model.result('pg7').feature('ann5').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('ann5').label('270 s');
model.result('pg7').feature('ann5').set('text', '270 s');
model.result('pg7').feature('ann5').set('rowindex', 1);
model.result('pg7').feature.duplicate('ann6', 'ann5');
model.result('pg7').feature('ann6').set('arraydim', '2');
model.result('pg7').run;
model.result('pg7').feature('ann6').label('410 s');
model.result('pg7').feature('ann6').set('text', '410 s');
model.result('pg7').feature('ann6').set('rowindex', 2);

model.view('view2').set('showgrid', false);
model.view('view2').set('showaxisorientation', false);
model.view('view2').set('locked', true);
model.view('view2').set('totambient', 0.6);
model.view('view2').camera.set('zoomanglefull', 11.93828678131103);
model.view('view2').camera.setIndex('position', -0.464987397193908, 0);
model.view('view2').camera.setIndex('position', -0.459365129470825, 1);
model.view('view2').camera.setIndex('position', 0.0544112473726272, 2);
model.view('view2').camera.setIndex('target', 0.0330199897289276, 0);
model.view('view2').camera.setIndex('target', 0.00635001063346862, 1);
model.view('view2').camera.setIndex('target', 0.0330200009047985, 2);
model.view('view2').camera.setIndex('up', 0.01378076709806919, 0);
model.view('view2').camera.setIndex('up', 0.03116880543529987, 1);
model.view('view2').camera.setIndex('up', 0.999419271945953, 2);
model.view('view2').camera.setIndex('rotationpoint', 0.0330200009047985, 0);
model.view('view2').camera.setIndex('rotationpoint', '0.0063499999232590', 1);
model.view('view2').camera.setIndex('rotationpoint', 0.0330200009047985, 2);
model.view('view2').camera.setIndex('viewoffset', -0.1053793430328369, 0);
model.view('view2').camera.setIndex('viewoffset', 0.00756971013427682, 1);

model.result('pg7').run;
model.result('pg7').set('view', 'view2');
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').run;
model.result('pg8').label('T, Qmass and Q at 150 s');
model.result('pg8').set('data', 'dset3');
model.result('pg8').setIndex('looplevel', 'interp', 0);
model.result('pg8').set('interp', [150]);
model.result('pg8').set('titletype', 'none');
model.result('pg8').set('showlegendsunit', true);
model.result('pg8').set('legendpos', 'rightdouble');
model.result('pg8').set('plotarrayenable', true);
model.result('pg8').set('arrayshape', 'square');
model.result('pg8').set('order', 'columnmajor');
model.result('pg8').create('ann1', 'Annotation');
model.result('pg8').feature('ann1').set('arraydim', '2');
model.result('pg8').feature('ann1').label('Temperature');
model.result('pg8').feature('ann1').set('text', '$T$');
model.result('pg8').feature('ann1').set('latexmarkup', true);
model.result('pg8').feature('ann1').set('showpoint', false);
model.result('pg8').feature('ann1').set('anchorpoint', 'center');
model.result('pg8').feature('ann1').set('manualindexing', true);
model.result('pg8').feature('ann1').set('posxexpr', 0.005);
model.result('pg8').feature('ann1').set('posyexpr', 0.0135);
model.result('pg8').feature.duplicate('ann2', 'ann1');
model.result('pg8').feature('ann2').set('arraydim', '2');
model.result('pg8').run;
model.result('pg8').feature('ann2').label('Mass Source');
model.result('pg8').feature('ann2').set('text', '$Q_{mass}$');
model.result('pg8').feature('ann2').set('rowindex', 1);
model.result('pg8').feature.duplicate('ann3', 'ann2');
model.result('pg8').feature('ann3').set('arraydim', '2');
model.result('pg8').run;
model.result('pg8').feature('ann3').label('Heat Source');
model.result('pg8').feature('ann3').set('text', '$Q$');
model.result('pg8').feature('ann3').set('rowindex', 2);
model.result('pg8').run;
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('arraydim', '2');
model.result('pg8').feature('surf1').label('T');
model.result('pg8').feature('surf1').set('expr', 'T');
model.result('pg8').feature('surf1').set('colortable', 'HeatCamera');
model.result('pg8').feature('surf1').set('colortabletype', 'discrete');
model.result('pg8').feature('surf1').set('manualindexing', true);
model.result('pg8').feature.duplicate('surf2', 'surf1');
model.result('pg8').feature('surf2').set('arraydim', '2');
model.result('pg8').run;
model.result('pg8').feature('surf2').label('dl.Qm');
model.result('pg8').feature('surf2').set('expr', 'dl.Qm');
model.result('pg8').feature('surf2').set('colortable', 'Viridis');
model.result('pg8').feature('surf2').set('rowindex', 1);
model.result('pg8').feature.duplicate('surf3', 'surf2');
model.result('pg8').feature('surf3').set('arraydim', '2');
model.result('pg8').run;
model.result('pg8').feature('surf3').label('Q');
model.result('pg8').feature('surf3').set('expr', 'Q');
model.result('pg8').feature('surf3').set('colortable', 'ThermalWave');
model.result('pg8').feature('surf3').set('rowindex', 2);
model.result('pg8').run;

model.view('view1').set('showgrid', false);

model.result('pg8').run;
model.result('pg8').run;
model.result.duplicate('pg9', 'pg8');
model.result('pg9').run;
model.result('pg9').label('T, Qmass and Q at 270 s');
model.result('pg9').set('interp', [270]);
model.result('pg9').run;
model.result('pg9').run;
model.result.duplicate('pg10', 'pg9');
model.result('pg10').run;
model.result('pg10').label('T, Qmass and Q at 433 s');
model.result('pg10').set('interp', [433]);
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup2D');
model.result('pg11').run;
model.result('pg11').label('Pressure, velocity, porosity, and normalized solid mass at 270 s');
model.result('pg11').set('data', 'dset3');
model.result('pg11').setIndex('looplevel', 'interp', 0);
model.result('pg11').set('interp', [270]);
model.result('pg11').set('titletype', 'none');
model.result('pg11').set('showlegendsunit', true);
model.result('pg11').set('legendpos', 'rightdouble');
model.result('pg11').set('plotarrayenable', true);
model.result('pg11').set('arrayshape', 'square');
model.result('pg11').create('ann1', 'Annotation');
model.result('pg11').feature('ann1').set('arraydim', '2');
model.result('pg11').feature('ann1').label('Relative Pressure');
model.result('pg11').feature('ann1').set('text', '$p/p_{ref}$');
model.result('pg11').feature('ann1').set('latexmarkup', true);
model.result('pg11').feature('ann1').set('posxexpr', 0.005);
model.result('pg11').feature('ann1').set('posyexpr', 0.0135);
model.result('pg11').feature('ann1').set('showpoint', false);
model.result('pg11').feature('ann1').set('anchorpoint', 'center');
model.result('pg11').feature('ann1').set('manualindexing', true);
model.result('pg11').feature.duplicate('ann2', 'ann1');
model.result('pg11').feature('ann2').set('arraydim', '2');
model.result('pg11').run;
model.result('pg11').feature('ann2').label('Total Darcy Velocity Magnitude');
model.result('pg11').feature('ann2').set('text', '$U$');
model.result('pg11').feature('ann2').set('colindex', 1);
model.result('pg11').feature.duplicate('ann3', 'ann2');
model.result('pg11').feature('ann3').set('arraydim', '2');
model.result('pg11').run;
model.result('pg11').feature('ann3').label('Porosity');
model.result('pg11').feature('ann3').set('text', '$\epsilon$');
model.result('pg11').feature('ann3').set('rowindex', 1);
model.result('pg11').feature('ann3').set('colindex', 0);
model.result('pg11').feature.duplicate('ann4', 'ann3');
model.result('pg11').feature('ann4').set('arraydim', '2');
model.result('pg11').run;
model.result('pg11').feature('ann4').label('Normalized Solid Mass');
model.result('pg11').feature('ann4').set('text', '$Y$');
model.result('pg11').feature('ann4').set('colindex', 1);
model.result('pg11').run;
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('arraydim', '2');
model.result('pg11').feature('surf1').label('dl.pA/dl.pref');
model.result('pg11').feature('surf1').set('expr', 'dl.pA/dl.pref');
model.result('pg11').feature('surf1').set('colortable', 'Wave');
model.result('pg11').feature('surf1').set('colortabletype', 'discrete');
model.result('pg11').feature('surf1').set('manualindexing', true);
model.result('pg11').feature.duplicate('surf2', 'surf1');
model.result('pg11').feature('surf2').set('arraydim', '2');
model.result('pg11').run;
model.result('pg11').feature('surf2').label('dl.U');
model.result('pg11').feature('surf2').set('expr', 'dl.U');
model.result('pg11').feature('surf2').set('colortable', 'Traffic');
model.result('pg11').feature('surf2').set('colindex', 1);
model.result('pg11').run;
model.result('pg11').create('arws1', 'ArrowSurface');
model.result('pg11').feature('arws1').set('arraydim', '2');
model.result('pg11').feature('arws1').label('dl.u');
model.result('pg11').feature('arws1').setIndex('expr', 'dl.u', 0);
model.result('pg11').feature('arws1').set('expr', {'dl.u' 'dl.w'});
model.result('pg11').feature('arws1').set('xnumber', 10);
model.result('pg11').feature('arws1').set('ynumber', 10);
model.result('pg11').feature('arws1').set('arrowtype', 'cone');
model.result('pg11').feature('arws1').set('arrowlength', 'normalized');
model.result('pg11').feature('arws1').set('arrowbase', 'center');
model.result('pg11').feature('arws1').set('scaleactive', true);
model.result('pg11').feature('arws1').set('scale', 0.14);
model.result('pg11').feature('arws1').set('color', 'white');
model.result('pg11').feature('arws1').set('manualindexing', true);
model.result('pg11').feature('arws1').set('colindex', 1);
model.result('pg11').feature('surf1').set('arraydim', '2');
model.result('pg11').run;
model.result('pg11').feature.duplicate('surf3', 'surf1');
model.result('pg11').feature('surf3').set('arraydim', '2');
model.result('pg11').run;
model.result('pg11').feature('surf3').label('epsilon');
model.result('pg11').feature('surf3').set('expr', 'epsilon');
model.result('pg11').feature('surf3').set('colortable', 'JupiterAuroraBorealis');
model.result('pg11').feature('surf3').set('rowindex', 1);
model.result('pg11').feature.duplicate('surf4', 'surf3');
model.result('pg11').feature('surf4').set('arraydim', '2');
model.result('pg11').run;
model.result('pg11').feature('surf4').label('Y');
model.result('pg11').feature('surf4').set('expr', 'Y');
model.result('pg11').feature('surf4').set('colortable', 'Cividis');
model.result('pg11').feature('surf4').set('colindex', 1);
model.result('pg11').run;
model.result('pg11').run;
model.result.dataset.duplicate('rev2', 'rev1');
model.result.dataset('rev2').label('Heat Wave');
model.result.dataset('rev2').set('revangle', 230);
model.result.dataset.duplicate('rev3', 'rev2');
model.result.dataset('rev3').label('Sample');
model.result.dataset('rev3').set('revangle', 270);
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').run;
model.result('pg12').set('data', 'rev2');
model.result('pg12').setIndex('looplevel', 'interp', 0);
model.result('pg12').set('interp', [337]);
model.result('pg12').set('showlegends', false);
model.result('pg12').set('titletype', 'none');
model.result('pg12').create('surf1', 'Surface');
model.result('pg12').feature('surf1').label('Wood Shell');
model.result('pg12').feature('surf1').set('expr', '1');
model.result('pg12').feature('surf1').create('mtrl1', 'MaterialAppearance');
model.result('pg12').run;
model.result('pg12').feature('surf1').feature('mtrl1').set('appearance', 'custom');
model.result('pg12').feature('surf1').feature('mtrl1').set('family', 'custom');
model.result('pg12').feature('surf1').feature('mtrl1').set('normalnoisebrush', '3');
model.result('pg12').feature('surf1').feature('mtrl1').set('colornoisebrush', '3');
model.result('pg12').run;
model.result('pg12').set('edges', false);
model.result('pg12').run;
model.result('pg12').feature('surf1').create('sel1', 'Selection');
model.result('pg12').feature('surf1').feature('sel1').selection.set([1]);
model.result('pg12').feature('surf1').feature('sel1').set('evalstartcap', false);
model.result('pg12').feature('surf1').feature('sel1').set('evalendcap', false);
model.result('pg12').run;
model.result('pg12').create('surf2', 'Surface');
model.result('pg12').feature('surf2').label('Internal surface');
model.result('pg12').feature('surf2').set('expr', 'Q');
model.result('pg12').feature('surf2').create('sel1', 'Selection');
model.result('pg12').feature('surf2').feature('sel1').selection.set([1]);
model.result('pg12').feature('surf2').feature('sel1').set('evalmantle', false);
model.result('pg12').run;
model.result('pg12').feature('surf2').set('colortable', 'ThermalDark');
model.result('pg12').run;
model.result('pg12').create('arws1', 'ArrowSurface');
model.result('pg12').feature('arws1').set('revcoordsys', 'cylindrical');
model.result('pg12').feature('arws1').set('plotcomp', 'tangential');
model.result('pg12').feature('arws1').set('scaleactive', true);
model.result('pg12').feature('arws1').set('scale', 0.7);
model.result('pg12').feature('arws1').set('arrowtype', 'arrowhead');
model.result('pg12').feature('arws1').create('sel1', 'Selection');
model.result('pg12').feature('arws1').feature('sel1').selection.set([1]);
model.result('pg12').feature('arws1').feature('sel1').set('evalmantle', false);
model.result('pg12').feature('arws1').feature('sel1').set('evalendcap', false);
model.result('pg12').run;
model.result('pg12').run;
model.result('pg12').label('Heat Wave');

model.view('view4').set('showgrid', false);
model.view('view4').set('showaxisorientation', false);
model.view('view4').set('locked', true);
model.view('view4').set('ssao', true);
model.view('view4').set('flooreffect', true);
model.view('view4').camera.set('zoomanglefull', 14.00493431091308);
model.view('view4').camera.setIndex('position', -0.0135996900498867, 0);
model.view('view4').camera.setIndex('position', -0.18970403075217, 1);
model.view('view4').camera.setIndex('position', '-0.112600877881050', 2);
model.view('view4').camera.setIndex('target', 3.80631536245346E-6, 0);
model.view('view4').camera.setIndex('target', 0.00148434937000274, 1);
model.view('view4').camera.setIndex('target', -2.08616256713866E-7, 2);
model.view('view4').camera.setIndex('up', '0.22215639054775231', 0);
model.view('view4').camera.setIndex('up', -0.5064828991889951, 1);
model.view('view4').camera.setIndex('up', 0.8331348896026611, 2);
model.view('view4').camera.setIndex('rotationpoint', '2.2888602688908571E-4', 0);
model.view('view4').camera.setIndex('rotationpoint', '0.0014847125858068461', 1);
model.view('view4').camera.setIndex('viewoffset', '-0.0036272491152222091', 0);
model.view('view4').camera.setIndex('viewoffset', -0.005267695058137171, 1);
model.view('view4').light('lgt1').set('lightdirection', [2 8 1]);
model.view('view4').light('lgt1').set('intensity', 0.85);
model.view('view4').light('lgt2').set('lightdirection', [-1 -2 -1]);
model.view('view4').light('lgt2').set('intensity', 0.9);
model.view('view4').light('lgt3').set('lightdirection', [-1 -1 0]);
model.view('view4').light('lgt3').set('intensity', 0.5);

model.result('pg12').run;
model.result('pg12').set('view', 'view4');
model.result('pg12').run;
model.result.duplicate('pg13', 'pg12');
model.result('pg13').run;
model.result('pg13').label('Sample');
model.result('pg13').set('data', 'rev3');
model.result('pg13').run;
model.result('pg13').feature.remove('surf2');
model.result('pg13').feature.remove('arws1');
model.result('pg13').run;
model.result('pg13').run;
model.result('pg13').feature('surf1').feature('sel1').set('evalstartcap', true);
model.result('pg13').feature('surf1').feature('sel1').set('evalendcap', true);
model.result('pg13').run;
model.result('pg13').feature('surf1').label('Wood');
model.result('pg13').run;

model.view('view3').set('showgrid', false);
model.view('view3').set('showaxisorientation', false);
model.view('view3').set('locked', true);
model.view('view3').camera.set('zoomanglefull', '9.2877616882324221');
model.view('view3').camera.setIndex('position', '0.118818052113056181', 0);
model.view('view3').camera.setIndex('position', '-0.188543930649757391', 1);
model.view('view3').camera.setIndex('position', '0.060428045690059661', 2);
model.view('view3').camera.setIndex('target', '5.7294964790344241E-6', 0);
model.view('view3').camera.setIndex('target', '-5.7369470596313481E-6', 1);
model.view('view3').camera.setIndex('up', '-0.131228193640708921', 0);
model.view('view3').camera.setIndex('up', '0.226624682545661931', 1);
model.view('view3').camera.setIndex('up', '0.96509963274002081', 2);
model.view('view3').camera.setIndex('rotationpoint', '5.7215802371501921E-6', 0);
model.view('view3').camera.setIndex('rotationpoint', '-5.7215802371501921E-6', 1);
model.view('view3').camera.setIndex('viewoffset', '0.0112896586469944241', 0);
model.view('view3').camera.setIndex('viewoffset', '0.026418391615152361', 1);

model.result('pg13').run;
model.result('pg13').set('view', 'view3');
model.result('pg13').run;
model.result('pg2').set('window', 'window1');
model.result('pg2').run;
model.result.remove('pg2');
model.result('pg3').run;

model.view('view2').set('locked', false);
model.view('view3').set('locked', false);
model.view('view4').set('locked', false);

model.title('Parameter Estimation for Pyrolysis of Wood');

model.description(['The pyrolysis of a centimeter-sized wood particle presents a fully coupled multiphysics problem with mass transfer, fluid flow, and heat transfer.' newline  newline 'This example model consists of two parts. The first part demonstrates how to set up a model describing the pyrolysis of a porous, anisotropic wood sphere. A reaction scheme consisting of five pseudospecies, and five reactions, is used.' newline  newline 'After that, parameter estimation is used to optimize the model using experimental data. The parameters to be estimated are one Arrhenius constant, two reaction heats, and one external heat transfer coefficient.']);

model.label('parameter_estimation_pyrolysis_wood.mph');

model.modelNode.label('Components');

out = model;
