function out = model
%
% zone_electrophoresis.m
%
% Model exported on May 26 2025, 21:27 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Chemical_Reaction_Engineering_Module/Electrokinetic_Effects');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 1);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('el', 'ElectrophoreticTransport', 'geom1');
model.physics('el').model('comp1');

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/el', true);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('initialtime', '0');
model.study('std1').feature('time').set('solnum', 'auto');
model.study('std1').feature('time').set('notsolnum', 'auto');
model.study('std1').feature('time').set('outputmap', {});
model.study('std1').feature('time').setSolveFor('/physics/el', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('L', '20[cm]', 'Interval length');
model.param.set('T', '25[degC]', 'Temperature');
model.param.set('mob_HAC', '4.24e-8[m^2/V/s]/F_const', 'Mobility');
model.param.set('mob_tris', '2.41e-8[m^2/(V*s)]/F_const', 'Mobility');
model.param.set('mob_ani', '3.25e-8[m^2/(V*s)]/F_const', 'Mobility');
model.param.set('mob_pyr', '3.0e-8[m^2/(V*s)]/F_const', 'Mobility');
model.param.set('HAC_c0', '20[mM]', 'Initial concentration');
model.param.set('tris_c0', '12[mM]', 'Initial concentration');
model.param.set('pyr_c0', '1[mM]', 'Initial concentration');
model.param.set('ani_c0', '1[mM]', 'Initial concentration');
model.param.set('pKa_HAC', '4.76', 'Acid constant (logarithmic)');
model.param.set('pKa_tris', '8.3', 'Acid constant (logarithmic)');
model.param.set('pKa_ani', '4.8', 'Acid constant (logarithmic)');
model.param.set('pKa_pyr', '5.18', 'Acid constant (logarithmic)');

model.geom('geom1').create('i1', 'Interval');
model.geom('geom1').feature('i1').setIndex('coord', 'L', 1);
model.geom('geom1').run('i1');
model.geom('geom1').run;

model.physics('el').create('wb1', 'WeakBase', 1);
model.physics('el').feature('wb1').label('Weak Base - tris');
model.physics('el').feature('wb1').set('speciesname', 'tris');
model.physics('el').feature('wb1').set('pKam', 'pKa_tris');
model.physics('el').feature('wb1').set('um', 'mob_tris');
model.physics('el').feature('wb1').feature('initc1').set('initc', 'tris_c0');
model.physics('el').feature('wb1').create('conc1', 'Concentration', 0);
model.physics('el').feature('wb1').feature('conc1').selection.set([1]);
model.physics('el').feature('wb1').feature('conc1').set('c0', 'tris_c0');
model.physics('el').feature('wb1').create('out1', 'Outflow', 0);
model.physics('el').feature('wb1').feature('out1').selection.set([2]);
model.physics('el').create('wa1', 'WeakAcid', 1);
model.physics('el').feature('wa1').label('Weak Acid - HAC');
model.physics('el').feature('wa1').set('speciesname', 'HAC');
model.physics('el').feature('wa1').set('pKam', 'pKa_HAC');
model.physics('el').feature('wa1').set('um', 'mob_HAC');
model.physics('el').feature('wa1').feature('initc1').set('initc', 'HAC_c0');
model.physics('el').feature('wa1').create('conc1', 'Concentration', 0);
model.physics('el').feature('wa1').feature('conc1').selection.set([2]);
model.physics('el').feature('wa1').feature('conc1').set('c0', 'HAC_c0');
model.physics('el').feature('wa1').create('out1', 'Outflow', 0);
model.physics('el').feature('wa1').feature('out1').selection.set([1]);
model.physics('el').feature.duplicate('wb2', 'wb1');
model.physics('el').feature('wb2').label('Weak Base - ani');
model.physics('el').feature('wb2').set('speciesname', 'ani');
model.physics('el').feature('wb2').set('pKam', 'pKa_ani');
model.physics('el').feature('wb2').set('um', 'mob_ani');

model.func.create('rect1', 'Rectangle');
model.func('rect1').model('comp1');
model.func.create('an1', 'Analytic');
model.func('an1').model('comp1');
model.func('an1').label('Sample function');
model.func('an1').set('funcname', 'sample');
model.func('an1').set('expr', 'rect1((x-L*0.0375)/(L*0.025))');
model.func('an1').setIndex('argunit', 'm', 0);
model.func('an1').set('fununit', '1');
model.func('an1').setIndex('plotargs', 'L', 0, 2);

model.physics('el').feature('wb2').feature('initc1').set('initc', 'sample(x)*ani_c0');
model.physics('el').feature('wb2').feature('conc1').set('c0', 0);
model.physics('el').feature.duplicate('wb3', 'wb2');
model.physics('el').feature('wb3').label('Weak Base - pyr');
model.physics('el').feature('wb3').set('speciesname', 'pyr');
model.physics('el').feature('wb3').set('pKam', 'pKa_pyr');
model.physics('el').feature('wb3').set('um', 'mob_pyr');
model.physics('el').feature('wb3').feature('initc1').set('initc', 'sample(x)*pyr_c0');
model.physics('el').create('eip1', 'ElectrolytePotential', 0);
model.physics('el').feature('eip1').selection.set([1]);
model.physics('el').create('icd1', 'ElectrolyteNormalCurrentDensity', 0);
model.physics('el').feature('icd1').selection.set([2]);
model.physics('el').feature('icd1').set('nil', '-2500[A/m^2]');

model.common('cminpt').set('modified', {'temperature' 'T'});

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').set('numelem', 1000);
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tunit', 'min');
model.study('std1').feature('time').set('tlist', 'range(0,0.5,5)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_el_wa1_c').set('scalemethod', 'init');
model.sol('sol1').feature('v1').feature('comp1_el_wb2_c').set('scalemethod', 'init');
model.sol('sol1').feature('v1').feature('comp1_el_wb1_c').set('scalemethod', 'init');
model.sol('sol1').feature('v1').feature('comp1_el_wb3_c').set('scalemethod', 'init');
model.sol('sol1').feature('v1').feature('comp1_el_wa1_c').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_el_wb2_c').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_el_wb1_c').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_el_wb3_c').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_el_wa1_c').set('scalemethod', 'init');
model.sol('sol1').feature('v2').feature('comp1_el_wb2_c').set('scalemethod', 'init');
model.sol('sol1').feature('v2').feature('comp1_el_wb1_c').set('scalemethod', 'init');
model.sol('sol1').feature('v2').feature('comp1_el_wb3_c').set('scalemethod', 'init');
model.sol('sol1').feature('v2').feature('comp1_el_wa1_c').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_el_wb2_c').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_el_wb1_c').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_el_wb3_c').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.5,5)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventout', true);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').create('lngr1', 'LineGraph');
model.result('pg1').feature('lngr1').set('xdata', 'expr');
model.result('pg1').feature('lngr1').set('xdataexpr', 'x');
model.result('pg1').feature('lngr1').selection.geom('geom1', 1);
model.result('pg1').feature('lngr1').selection.set([1]);
model.result('pg1').feature('lngr1').set('expr', {'el.pH'});
model.result('pg1').feature('lngr1').set('legend', true);
model.result('pg1').label('pH (el)');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').set('xdata', 'expr');
model.result('pg2').feature('lngr1').set('xdataexpr', 'x');
model.result('pg2').feature('lngr1').selection.geom('geom1', 1);
model.result('pg2').feature('lngr1').selection.set([1]);
model.result('pg2').feature('lngr1').set('expr', {'el.sigmal'});
model.result('pg2').feature('lngr1').set('legend', true);
model.result('pg2').label('Electrolyte Conductivity (el)');
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('xdata', 'expr');
model.result('pg3').feature('lngr1').set('xdataexpr', 'x');
model.result('pg3').feature('lngr1').selection.geom('geom1', 1);
model.result('pg3').feature('lngr1').selection.set([1]);
model.result('pg3').feature('lngr1').set('expr', {'phil'});
model.result('pg3').feature('lngr1').set('legend', true);
model.result('pg3').label('Electrolyte Potential (el)');
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').set('xdata', 'expr');
model.result('pg4').feature('lngr1').set('xdataexpr', 'x');
model.result('pg4').feature('lngr1').selection.geom('geom1', 1);
model.result('pg4').feature('lngr1').selection.set([1]);
model.result('pg4').feature('lngr1').set('expr', {'el.c_tris'});
model.result('pg4').feature('lngr1').set('legend', true);
model.result('pg4').label('Molar Concentration - tris (el)');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('xdata', 'expr');
model.result('pg5').feature('lngr1').set('xdataexpr', 'x');
model.result('pg5').feature('lngr1').selection.geom('geom1', 1);
model.result('pg5').feature('lngr1').selection.set([1]);
model.result('pg5').feature('lngr1').set('expr', {'el.c_HAC'});
model.result('pg5').feature('lngr1').set('legend', true);
model.result('pg5').label('Molar Concentration - HAC (el)');
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', 'x');
model.result('pg6').feature('lngr1').selection.geom('geom1', 1);
model.result('pg6').feature('lngr1').selection.set([1]);
model.result('pg6').feature('lngr1').set('expr', {'el.c_ani'});
model.result('pg6').feature('lngr1').set('legend', true);
model.result('pg6').label('Molar Concentration - ani (el)');
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('xdata', 'expr');
model.result('pg7').feature('lngr1').set('xdataexpr', 'x');
model.result('pg7').feature('lngr1').selection.geom('geom1', 1);
model.result('pg7').feature('lngr1').selection.set([1]);
model.result('pg7').feature('lngr1').set('expr', {'el.c_pyr'});
model.result('pg7').feature('lngr1').set('legend', true);
model.result('pg7').label('Molar Concentration - pyr (el)');
model.result('pg1').run;
model.result('pg1').set('titletype', 'none');
model.result('pg1').setIndex('looplevelinput', 'manual', 0);
model.result('pg1').setIndex('looplevel', [1 9], 0);
model.result('pg1').run;
model.result('pg1').feature('lngr1').set('linewidth', 2);
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').setIndex('looplevelinput', 'manual', 0);
model.result('pg2').setIndex('looplevel', [1 9], 0);
model.result('pg2').set('titletype', 'label');
model.result('pg2').run;
model.result('pg2').feature('lngr1').set('linewidth', 2);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').setIndex('looplevelinput', 'manual', 0);
model.result('pg3').setIndex('looplevel', [1 9], 0);
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevelinput', 'manual', 0);
model.result('pg4').setIndex('looplevel', [1 9], 0);
model.result('pg4').set('titletype', 'label');
model.result('pg4').run;
model.result('pg4').feature('lngr1').set('linewidth', 2);
model.result('pg4').run;
model.result('pg5').run;
model.result('pg5').setIndex('looplevelinput', 'manual', 0);
model.result('pg5').setIndex('looplevel', [1 9], 0);
model.result('pg5').set('titletype', 'label');
model.result('pg5').run;
model.result('pg5').feature('lngr1').set('linewidth', 2);
model.result('pg5').run;
model.result('pg6').run;
model.result('pg6').setIndex('looplevelinput', 'manual', 0);
model.result('pg6').setIndex('looplevel', [1 9], 0);
model.result('pg6').run;
model.result('pg7').run;
model.result('pg7').setIndex('looplevelinput', 'manual', 0);
model.result('pg7').setIndex('looplevel', [1 9], 0);
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('Sample Concentrations');
model.result('pg8').setIndex('looplevel', [3], 0);
model.result('pg8').set('titletype', 'label');
model.result('pg8').run;
model.result('pg8').feature('lngr1').set('unit', 'mM');
model.result('pg8').feature('lngr1').set('xdataunit', 'cm');
model.result('pg8').feature('lngr1').set('linewidth', 2);
model.result('pg8').feature('lngr1').set('legendmethod', 'manual');
model.result('pg8').feature('lngr1').setIndex('legends', 'Pyridine', 0);
model.result('pg8').feature.duplicate('lngr2', 'lngr1');
model.result('pg8').run;
model.result('pg8').feature('lngr2').set('expr', 'el.c_ani');
model.result('pg8').feature('lngr2').set('descr', 'Concentration');
model.result('pg8').feature('lngr2').setIndex('legends', 'Aniline', 0);
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').setIndex('looplevel', [7], 0);
model.result('pg8').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').set('plotgroup', 'pg8');
model.result.export('anim1').set('framesel', 'all');
model.result.export('anim1').set('frametime', 0.5);
model.result.export('anim1').run;

model.title('Zone Electrophoresis');

model.description(['Zone electrophoresis (ZE) is an electrophoretic separation technique typically used for analyzing proteins, nucleic acids, and biopolymers. During the process, different species in a sample are transported in a continuous electrolyte buffer system, subject to a potential gradient. Due to differences in the mobilities, the species in the samples will eventually separate into different, well-resolved peaks.' newline  newline 'This tutorial introduces the Electrophoretic Transport interface. A buffer system consisting of an acetic acid and tris(tris(hydroxymethyl)aminomethane) is used to separate a sample consisting of pyridine and aniline into two well-resolved peaks.']);

model.label('zone_electrophoresis.mph');

model.modelNode.label('Components');

out = model;
