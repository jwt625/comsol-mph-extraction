function out = model
%
% optimal_cooling.m
%
% Model exported on May 26 2025, 21:27 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Chemical_Reaction_Engineering_Module/Reactors_with_Mass_and_Heat_Transfer');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 1);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('chem', 'Chemistry', 'geom1');
model.physics('chem').model('comp1');
model.physics.create('tds', 'DilutedSpecies', 'geom1', {'cA' 'cB' 'cC'});
model.physics.create('ht', 'HeatTransferInFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics.create('ht2', 'HeatTransferInFluids', 'geom1');
model.physics('ht2').model('comp1');
model.physics('ht2').field('temperature').field('Tj');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/chem', true);
model.study('std1').feature('stat').setSolveFor('/physics/tds', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht2', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('L_r', '2[m]', 'Reactor length');
model.param.set('D', '1e-8[m^2/s]', 'Diffusivity');
model.param.set('u', '0.0042[m/s]', 'Fluid velocity, reactor');
model.param.set('uj', '0.01[m/s]', 'Fluid velocity, jacket');
model.param.set('cA_in', '700[mol/m^3]', 'Inlet concentration A, reactor');
model.param.set('Mn_A', '0.030[kg/mol]', 'Molar mass, A');
model.param.set('Mn_B', '0.048[kg/mol]', 'Molar mass, B');
model.param.set('Mn_C', '0.056[kg/mol]', 'Molar mass, C');
model.param.set('Mn_H2O', '0.018[kg/mol]', 'Molar mass, solvent');
model.param.set('c_solv', '(941[kg/m^3]-cA_in*Mn_A)/Mn_H2O', 'Concentration, solvent');
model.param.set('T_in', '400[K]', 'Inlet temperature, reactor');
model.param.set('Tj_in', '400[K]', 'Inlet temperature, jacket');
model.param.set('UA', '10000[W/m^3/K]', 'Heat transfer coefficient');
model.param.set('H1', '200e3[J/mol]', 'Heat of reaction 1');
model.param.set('H2', '100e3[J/mol]', 'Heat of reaction 2');
model.param.set('Rg', '8.314[J/mol/K]', 'Universal gas constant');
model.param.set('A1', '1.6e8[1/s]', 'Frequency factor, reaction 1');
model.param.set('A2', '1e15[1/s]', 'Frequency factor, reaction 2');
model.param.set('E1', '75e3[J/mol]', 'Activation energy, reaction 1');
model.param.set('E2', '125e3[J/mol]', 'Activation energy, reaction 2');

model.geom('geom1').create('i1', 'Interval');
model.geom('geom1').feature('i1').setIndex('coord', 'L_r', 1);
model.geom('geom1').run('i1');

model.cpl.create('intop1', 'Integration', 'geom1');

model.geom('geom1').run;

model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 0);
model.cpl('intop1').selection.set([2]);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('cB_out', 'intop1(cB)');
model.variable('var1').descr('cB_out', 'Outlet concentration');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat1').label('Water');
model.material('mat1').set('family', 'water');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat1').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat1').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat1').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat1').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').label('Analytic ');
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat1').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');

model.physics('chem').prop('TPFeatureInput').set('T_src', 'root.comp1.T');
model.physics('chem').prop('mixture').set('mixture', 'liquid');
model.physics('chem').create('rch1', 'ReactionChem', 1);
model.physics('chem').feature('rch1').set('formula', 'A=>B');
model.physics('chem').feature('rch1').set('useArrhenius', true);
model.physics('chem').feature('rch1').set('Af', 'A1');
model.physics('chem').feature('rch1').set('Ef', 'E1');
model.physics('chem').feature('rch1').set('ReactionEnthalpy', 'UserDefined');
model.physics('chem').feature('rch1').set('H', 'H1');
model.physics('chem').feature('A').set('M', 'Mn_A');
model.physics('chem').feature('B').set('M', 'Mn_B');
model.physics('chem').create('rch2', 'ReactionChem', 1);
model.physics('chem').feature('rch2').set('formula', 'B=>C');
model.physics('chem').feature('rch2').set('useArrhenius', true);
model.physics('chem').feature('rch2').set('Af', 'A2');
model.physics('chem').feature('rch2').set('Ef', 'E2');
model.physics('chem').feature('rch2').set('ReactionEnthalpy', 'UserDefined');
model.physics('chem').feature('rch2').set('H', 'H2');
model.physics('chem').feature('C').set('enableChemicalFormulaCheckbox', false);
model.physics('chem').feature('C').set('M', 'Mn_C');
model.physics('chem').create('spec1', 'SpeciesChem', 1);
model.physics('chem').feature('spec1').set('specName', 'H2O');
model.physics('chem').feature('H2O').set('sType', 'solvent');
model.physics('chem').feature('H2O').set('M', 'Mn_H2O');
model.physics('chem').prop('ChemistryModelInputParameter').set('MassTransfer', 'tds');
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationInput', 'cA', 0, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationInput', 'cB', 1, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationInput', 'cC', 2, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationInput', 'UserDefined', 3, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationValue', 'c_solv', 3, 0);
model.physics('tds').feature('cdm1').set('u', {'u' '0' '0'});
model.physics('tds').feature('cdm1').set('D_cA', {'D' '0' '0' '0' 'D' '0' '0' '0' 'D'});
model.physics('tds').feature('cdm1').set('D_cB', {'D' '0' '0' '0' 'D' '0' '0' '0' 'D'});
model.physics('tds').feature('cdm1').set('D_cC', {'D' '0' '0' '0' 'D' '0' '0' '0' 'D'});
model.physics('tds').create('in1', 'Inflow', 0);
model.physics('tds').feature('in1').selection.set([1]);
model.physics('tds').feature('in1').setIndex('c0', 'cA_in', 0);
model.physics('tds').create('out1', 'Outflow', 0);
model.physics('tds').feature('out1').selection.set([2]);
model.physics('tds').create('reac1', 'Reactions', 1);
model.physics('tds').feature('reac1').selection.set([1]);
model.physics('tds').feature('reac1').setIndex('R_cA_src', 'root.comp1.chem.R_A', 0);
model.physics('tds').feature('reac1').setIndex('R_cB_src', 'root.comp1.chem.R_B', 0);
model.physics('tds').feature('reac1').setIndex('R_cC_src', 'root.comp1.chem.R_C', 0);
model.physics('ht').label('Heat Transfer in Fluids - Reactor');
model.physics('ht').feature('fluid1').set('u', {'u' '0' '0'});
model.physics('ht').create('temp1', 'TemperatureBoundary', 0);
model.physics('ht').feature('temp1').selection.set([1]);
model.physics('ht').feature('temp1').set('T0', 'T_in');
model.physics('ht').create('ofl1', 'ConvectiveOutflow', 0);
model.physics('ht').feature('ofl1').selection.set([2]);
model.physics('ht').create('hs1', 'HeatSource', 1);
model.physics('ht').feature('hs1').selection.set([1]);
model.physics('ht').feature('hs1').set('Q0', '-UA*(T-Tj)+chem.Qtot');
model.physics('ht2').label('Heat Transfer in Fluids - Cooling jacket');
model.physics('ht2').feature('fluid1').set('u', {'uj' '0' '0'});
model.physics('ht2').create('temp1', 'TemperatureBoundary', 0);
model.physics('ht2').feature('temp1').selection.set([1]);
model.physics('ht2').feature('temp1').set('T0', 'Tj_in');
model.physics('ht2').create('ofl1', 'ConvectiveOutflow', 0);
model.physics('ht2').feature('ofl1').selection.set([2]);
model.physics('ht2').create('hs1', 'HeatSource', 1);
model.physics('ht2').feature('hs1').selection.set([1]);
model.physics('ht2').feature('hs1').set('Q0', 'UA*(T-Tj)');

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('size').set('hauto', 2);
model.mesh('mesh1').run;

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(1);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables (ht) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, concentrations (tds)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, heat transfer variables (ht2)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Concentrations, All Species');
model.result('pg1').label('Concentrations, All Species (tds)');
model.result('pg1').create('lngr1', 'LineGraph');
model.result('pg1').feature('lngr1').set('xdata', 'expr');
model.result('pg1').feature('lngr1').set('xdataexpr', 'x');
model.result('pg1').feature('lngr1').selection.geom('geom1', 1);
model.result('pg1').feature('lngr1').selection.set([1]);
model.result('pg1').feature('lngr1').set('expr', {'cA'});
model.result('pg1').feature('lngr1').label('Species A');
model.result('pg1').feature('lngr1').set('legend', true);
model.result('pg1').feature('lngr1').set('autosolution', false);
model.result('pg1').feature('lngr1').set('autoexpr', false);
model.result('pg1').feature('lngr1').set('autodescr', false);
model.result('pg1').feature('lngr1').set('legendprefix', 'A ');
model.result('pg1').create('lngr2', 'LineGraph');
model.result('pg1').feature('lngr2').set('xdata', 'expr');
model.result('pg1').feature('lngr2').set('xdataexpr', 'x');
model.result('pg1').feature('lngr2').selection.geom('geom1', 1);
model.result('pg1').feature('lngr2').selection.set([1]);
model.result('pg1').feature('lngr2').set('expr', {'cB'});
model.result('pg1').feature('lngr2').label('Species B');
model.result('pg1').feature('lngr2').set('legend', true);
model.result('pg1').feature('lngr2').set('autosolution', false);
model.result('pg1').feature('lngr2').set('autoexpr', false);
model.result('pg1').feature('lngr2').set('autodescr', false);
model.result('pg1').feature('lngr2').set('legendprefix', 'B ');
model.result('pg1').create('lngr3', 'LineGraph');
model.result('pg1').feature('lngr3').set('xdata', 'expr');
model.result('pg1').feature('lngr3').set('xdataexpr', 'x');
model.result('pg1').feature('lngr3').selection.geom('geom1', 1);
model.result('pg1').feature('lngr3').selection.set([1]);
model.result('pg1').feature('lngr3').set('expr', {'cC'});
model.result('pg1').feature('lngr3').label('Species C');
model.result('pg1').feature('lngr3').set('legend', true);
model.result('pg1').feature('lngr3').set('autosolution', false);
model.result('pg1').feature('lngr3').set('autoexpr', false);
model.result('pg1').feature('lngr3').set('autodescr', false);
model.result('pg1').feature('lngr3').set('legendprefix', 'C ');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').label('Concentration, A (tds)');
model.result('pg2').set('titletype', 'custom');
model.result('pg2').set('prefixintitle', 'Species A:');
model.result('pg2').set('expressionintitle', false);
model.result('pg2').set('typeintitle', false);
model.result('pg2').create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').set('xdata', 'expr');
model.result('pg2').feature('lngr1').set('xdataexpr', 'x');
model.result('pg2').feature('lngr1').selection.geom('geom1', 1);
model.result('pg2').feature('lngr1').selection.set([1]);
model.result('pg2').feature('lngr1').set('expr', {'cA'});
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').label('Concentration, B (tds)');
model.result('pg3').set('titletype', 'custom');
model.result('pg3').set('prefixintitle', 'Species B:');
model.result('pg3').set('expressionintitle', false);
model.result('pg3').set('typeintitle', false);
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('xdata', 'expr');
model.result('pg3').feature('lngr1').set('xdataexpr', 'x');
model.result('pg3').feature('lngr1').selection.geom('geom1', 1);
model.result('pg3').feature('lngr1').selection.set([1]);
model.result('pg3').feature('lngr1').set('expr', {'cB'});
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').label('Concentration, C (tds)');
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('prefixintitle', 'Species C:');
model.result('pg4').set('expressionintitle', false);
model.result('pg4').set('typeintitle', false);
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').set('xdata', 'expr');
model.result('pg4').feature('lngr1').set('xdataexpr', 'x');
model.result('pg4').feature('lngr1').selection.geom('geom1', 1);
model.result('pg4').feature('lngr1').selection.set([1]);
model.result('pg4').feature('lngr1').set('expr', {'cC'});
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').label('Temperature (ht)');
model.result('pg5').set('data', 'dset1');
model.result('pg5').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond1/pg1');
model.result('pg5').feature.create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('expr', 'T');
model.result('pg5').feature('lngr1').set('xdata', 'expr');
model.result('pg5').feature('lngr1').set('xdataexpr', 'x');
model.result('pg5').feature('lngr1').set('data', 'parent');
model.result('pg5').feature('lngr1').selection.geom('geom1', 1);
model.result('pg5').feature('lngr1').selection.set([1]);
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').label('Temperature (ht2)');
model.result('pg6').set('data', 'dset1');
model.result('pg6').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond1/pg1');
model.result('pg6').feature.create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('expr', 'Tj');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', 'x');
model.result('pg6').feature('lngr1').set('data', 'parent');
model.result('pg6').feature('lngr1').selection.geom('geom1', 1);
model.result('pg6').feature('lngr1').selection.set([1]);
model.result('pg1').run;

model.sol('sol1').copySolution('sol2');
model.sol('sol2').label('Tj_in=400K');

model.result.configuration.create('gsty1', 'GraphStyle');
model.result.configuration('gsty1').set('linewidth', 2);
model.result.configuration('gsty1').set('linecolor', 'cycle');
model.result.configuration('gsty1').set('autoplotlabel', true);
model.result.configuration('gsty1').set('autopoint', false);
model.result.configuration('gsty1').set('autosolution', false);
model.result.configuration('gsty1').set('autoheaders', false);
model.result('pg1').run;
model.result('pg1').label('Concentrations for Tj_in=400K');
model.result('pg1').set('data', 'dset2');
model.result('pg1').set('xlabelactive', true);
model.result('pg1').set('styleconfig', 'gsty1');
model.result('pg1').set('legendlayout', 'outside');
model.result('pg1').run;
model.result('pg5').run;
model.result('pg5').label('Temperature for Tj_in=400K');
model.result('pg5').set('data', 'dset2');
model.result('pg5').set('styleconfig', 'gsty1');
model.result('pg5').run;
model.result('pg5').feature('lngr1').label('Reactor');
model.result('pg5').feature('lngr1').set('titletype', 'none');
model.result('pg5').feature('lngr1').set('legend', true);
model.result('pg5').feature.duplicate('lngr2', 'lngr1');
model.result('pg5').run;
model.result('pg5').feature('lngr2').label('Cooling jacket');
model.result('pg5').feature('lngr2').set('expr', 'Tj');
model.result('pg5').feature('lngr2').set('descr', 'Temperature');
model.result('pg5').run;
model.result('pg6').run;
model.result('pg6').label('Production Rates for Tj_in=400K');
model.result('pg6').set('data', 'dset2');
model.result('pg6').set('styleconfig', 'gsty1');
model.result('pg6').run;
model.result('pg6').feature('lngr1').label('Reaction 1');
model.result('pg6').feature('lngr1').set('titletype', 'none');
model.result('pg6').feature('lngr1').set('expr', 'chem.r_1');
model.result('pg6').feature('lngr1').set('descr', 'Reaction rate');
model.result('pg6').feature('lngr1').set('legend', true);
model.result('pg6').feature.duplicate('lngr2', 'lngr1');
model.result('pg6').run;
model.result('pg6').feature('lngr2').label('Reaction 2');
model.result('pg6').feature('lngr2').set('expr', 'chem.r_2');
model.result('pg6').feature('lngr2').set('descr', 'Reaction rate');
model.result('pg6').run;

model.study('std1').create('opt', 'Optimization');
model.study('std1').feature('opt').set('optsolver', 'bobyqa');
model.study('std1').feature('opt').setIndex('optobj', 'comp1.cB_out', 0);
model.study('std1').feature('opt').setIndex('descr', 'Outlet concentration', 0);
model.study('std1').feature('opt').set('objectivetype', 'maximization');
model.study('std1').feature('opt').setIndex('pname', 'L_r', 0);
model.study('std1').feature('opt').setIndex('initval', '2[m]', 0);
model.study('std1').feature('opt').setIndex('scale', 1, 0);
model.study('std1').feature('opt').setIndex('lbound', '', 0);
model.study('std1').feature('opt').setIndex('ubound', '', 0);
model.study('std1').feature('opt').setIndex('pname', 'L_r', 0);
model.study('std1').feature('opt').setIndex('initval', '2[m]', 0);
model.study('std1').feature('opt').setIndex('scale', 1, 0);
model.study('std1').feature('opt').setIndex('lbound', '', 0);
model.study('std1').feature('opt').setIndex('ubound', '', 0);
model.study('std1').feature('opt').setIndex('pname', 'Tj_in', 0);
model.study('std1').feature('opt').setIndex('initval', '400[K]', 0);
model.study('std1').feature('opt').setIndex('scale', '400[K]', 0);
model.study('std1').setGenPlots(false);

model.mesh('mesh1').stat.selection.geom(1);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables (ht) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, concentrations (tds)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, heat transfer variables (ht2)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');

model.batch.create('o1', 'Optimization');
model.batch('o1').study('std1');
model.batch('p1').study('std1');
model.batch('o1').attach('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').attach('std1');
model.batch('p1').set('optimization', 'o1');
model.batch('p1').set('err', 'on');
model.batch('p1').set('control', 'opt');
model.batch('o1').set('parametricjobs', {'p1'});

model.sol.create('sol3');
model.sol('sol3').study('std1');
model.sol('sol3').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol3');
model.batch('o1').run('compute');

model.result('pg2').run;

model.study('std1').feature('opt').set('probewindow', '');

model.result('pg1').run;
model.result.duplicate('pg7', 'pg1');
model.result('pg7').run;
model.result('pg7').label('Concentrations for Optimized Tj_in');
model.result('pg7').set('data', 'dset3');
model.result('pg7').run;
model.result('pg5').run;
model.result.duplicate('pg8', 'pg5');
model.result('pg8').run;
model.result('pg8').label('Temperature Tj_in for Optimized Tj_in');
model.result('pg8').set('data', 'dset3');
model.result('pg8').run;
model.result('pg6').run;
model.result.duplicate('pg9', 'pg6');
model.result('pg9').run;
model.result('pg9').label('Production Rates for Optimized Tj_in');
model.result('pg9').set('data', 'dset3');
model.result('pg9').run;
model.result('pg2').run;
model.result.remove('pg2');
model.result.remove('pg3');
model.result.remove('pg4');
model.result('pg5').run;

model.title('Optimal Cooling of a Tubular Reactor');

model.description(['This example examines two consecutive reactions taking place within a nonisothermal tubular reactor. Optimization calculations are made to find the temperature conditions in the reactor that maximize the production of an intermediary reaction product.' newline  newline 'This model requires the Optimization Module.']);

model.label('optimal_cooling.mph');

model.modelNode.label('Components');

out = model;
