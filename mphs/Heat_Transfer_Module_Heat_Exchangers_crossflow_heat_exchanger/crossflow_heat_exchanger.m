function out = model
%
% crossflow_heat_exchanger.m
%
% Model exported on May 26 2025, 21:29 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Heat_Exchangers');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransferInSolidsAndFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics('ht').prop('ShapeProperty').set('order_temperature', '1');
model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'WeaklyCompressible');

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 3);
model.multiphysics('nitf1').set('Fluid_physics', 'spf');
model.multiphysics('nitf1').set('Heat_physics', 'ht');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/nitf1', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', false);
model.study('std1').feature('stat').setSolveFor('/multiphysics/nitf1', false);
model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat2').set('solnum', 'auto');
model.study('std1').feature('stat2').set('notsolnum', 'auto');
model.study('std1').feature('stat2').set('outputmap', {});
model.study('std1').feature('stat2').set('ngenAUX', '1');
model.study('std1').feature('stat2').set('goalngenAUX', '1');
model.study('std1').feature('stat2').set('ngenAUX', '1');
model.study('std1').feature('stat2').set('goalngenAUX', '1');
model.study('std1').feature('stat2').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat2').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat2').setSolveFor('/multiphysics/nitf1', true);
model.study('std1').feature('stat2').setSolveFor('/physics/spf', false);

model.param.set('T_cold', '300[K]');
model.param.descr('T_cold', 'Temperature, cold stream');
model.param.set('T_hot', '330[K]');
model.param.descr('T_hot', 'Temperature, hot stream');
model.param.set('u_avg', '50[mm/s]');
model.param.descr('u_avg', 'Average inlet velocity');

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', [800 800 60]);
model.geom('geom1').run('blk1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', [800 100 40]);
model.geom('geom1').feature('blk2').set('pos', [0 200 0]);
model.geom('geom1').run('blk2');
model.geom('geom1').create('arr1', 'Array');
model.geom('geom1').feature('arr1').selection('input').set({'blk2'});
model.geom('geom1').feature('arr1').set('type', 'linear');
model.geom('geom1').feature('arr1').set('linearsize', 5);
model.geom('geom1').feature('arr1').set('displ', [0 120 0]);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Channels');
model.geom('geom1').feature('arr1').set('contributeto', 'csel1');
model.geom('geom1').run('arr1');
model.geom('geom1').create('rot1', 'Rotate');
model.geom('geom1').feature('rot1').selection('input').set({'arr1' 'blk1'});
model.geom('geom1').feature('rot1').set('rot', 180);
model.geom('geom1').feature('rot1').set('pos', [0 0 60]);
model.geom('geom1').feature('rot1').set('axistype', 'cartesian');
model.geom('geom1').feature('rot1').set('ax3', [1 1 0]);
model.geom('geom1').feature('rot1').set('keep', true);
model.geom('geom1').runPre('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Upper Inlets');
model.selection('sel1').geom(2);
model.selection('sel1').set([41 48 55 62 69]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Lower Inlets');
model.selection('sel2').geom(2);
model.selection('sel2').set([8 14 20 26 32]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Upper Outlets');
model.selection('sel3').geom(2);
model.selection('sel3').set([44 51 58 65 72]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Lower Outlets');
model.selection('sel4').geom(2);
model.selection('sel4').set([77 78 79 80 81]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Symmetry');
model.selection('sel5').geom(2);
model.selection('sel5').set('groupcontang', true);
model.selection('sel5').add([3 7 10 13 16 19 22 25 28 31 34 37 43 46 50 53 57 60 64 67 71 74]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Outlets');
model.selection('uni1').set('entitydim', 2);
model.selection('uni1').set('input', {'sel3' 'sel4'});

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Stainless Steel');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'15'});
model.material('mat1').propertyGroup('def').set('density', {'7800'});
model.material('mat1').propertyGroup('def').set('heatcapacity', {'420'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat2').label('Water, liquid');
model.material('mat2').set('family', 'water');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat2').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat2').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat2').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat2').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat2').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material('mat2').selection.named('geom1_csel1_dom');

model.physics('ht').prop('PhysicalModelProperty').set('Tref', '(T_cold+T_hot)/2');
model.physics('ht').feature('fluid1').selection.named('geom1_csel1_dom');
model.physics('ht').create('ifl1', 'Inflow', 2);
model.physics('ht').feature('ifl1').selection.named('sel1');
model.physics('ht').feature('ifl1').set('Tustr', 'T_hot');
model.physics('ht').create('ifl2', 'Inflow', 2);
model.physics('ht').feature('ifl2').selection.named('sel2');
model.physics('ht').feature('ifl2').set('Tustr', 'T_cold');
model.physics('ht').create('ofl1', 'ConvectiveOutflow', 2);
model.physics('ht').feature('ofl1').selection.named('sel3');
model.physics('ht').create('ofl2', 'ConvectiveOutflow', 2);
model.physics('ht').feature('ofl2').selection.named('sel4');
model.physics('ht').create('sym1', 'Symmetry', 2);
model.physics('ht').feature('sym1').selection.named('sel5');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'Incompressible');
model.physics('spf').selection.named('geom1_csel1_dom');
model.physics('spf').create('inl1', 'InletBoundary', 2);
model.physics('spf').feature('inl1').selection.named('sel1');
model.physics('spf').feature('inl1').set('BoundaryCondition', 'FullyDevelopedFlow');
model.physics('spf').feature('inl1').set('Uavfdf', 'u_avg');
model.physics('spf').create('inl2', 'InletBoundary', 2);
model.physics('spf').feature('inl2').selection.named('sel2');
model.physics('spf').feature('inl2').set('BoundaryCondition', 'FullyDevelopedFlow');
model.physics('spf').feature('inl2').set('Uavfdf', 'u_avg');
model.physics('spf').create('out1', 'OutletBoundary', 2);
model.physics('spf').feature('out1').selection.named('sel3');
model.physics('spf').create('out2', 'OutletBoundary', 2);
model.physics('spf').feature('out2').selection.named('sel4');
model.physics('spf').create('sym1', 'Symmetry', 2);
model.physics('spf').feature('sym1').selection.named('sel5');

model.multiphysics('nitf1').set('BoussinesqApproximation', true);

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').label('Average on Upper Channel Walls');
model.cpl('aveop1').selection.geom('geom1', 2);
model.cpl('aveop1').selection.set([40 42 45 47 49 52 54 56 59 61 63 66 68 70 73]);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 4 5 6 7 8 9 10 11 12]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 4 5 6 7 8 9 10 11 12]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf_sel1' 'comp1_spf_inl1_Pinlfdf_sel2' 'comp1_spf_inl1_Pinlfdf_sel3' 'comp1_spf_inl1_Pinlfdf_sel4' 'comp1_spf_inl1_Pinlfdf_sel5' 'comp1_spf_inl2_Pinlfdf_sel1' 'comp1_spf_inl2_Pinlfdf_sel2' 'comp1_spf_inl2_Pinlfdf_sel3' 'comp1_spf_inl2_Pinlfdf_sel4' 'comp1_spf_inl2_Pinlfdf_sel5'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf_sel1' 'comp1_spf_inl1_Pinlfdf_sel2' 'comp1_spf_inl1_Pinlfdf_sel3' 'comp1_spf_inl1_Pinlfdf_sel4' 'comp1_spf_inl1_Pinlfdf_sel5' 'comp1_spf_inl2_Pinlfdf_sel1' 'comp1_spf_inl2_Pinlfdf_sel2' 'comp1_spf_inl2_Pinlfdf_sel3' 'comp1_spf_inl2_Pinlfdf_sel4' 'comp1_spf_inl2_Pinlfdf_sel5'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat2');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat2');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, heat transfer variables (ht) (nitf1)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, heat transfer variables (ht) (nitf1)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Temperature (ht)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg1').feature.create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('solutionparams', 'parent');
model.result('pg1').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('vol1').set('smooth', 'internal');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('data', 'parent');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (spf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg2').feature.create('slc1', 'Slice');
model.result('pg2').feature('slc1').label('Slice');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('expr', 'spf.U');
model.result('pg2').feature('slc1').set('smooth', 'internal');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([9 11 12 15 17 18 21 23 24 27 29 30 33 35 36 40 42 45 47 49 52 54 56 59 61 63 66 68 70 73]);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Pressure (spf)');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'surf1');
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond2/pcond1/pg4');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'p');
model.result('pg3').feature('surf1').set('colortable', 'Dipole');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature('surf1').feature.create('tran1', 'Transparency');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Temperature and Fluid Flow (nitf1)');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').set('data', 'dset1');
model.result('pg4').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond3/pg1');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Wall Temperature');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('solutionparams', 'parent');
model.result('pg4').feature('surf1').set('expr', 'ht.Tvar');
model.result('pg4').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result('pg4').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg4').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg4').feature('surf1').feature('sel1').selection.set([9 11 12 15 17 18 21 23 24 27 29 30 33 35 36 40 42 45 47 49 52 54 56 59 61 63 66 68 70 73]);
model.result('pg4').feature.create('vol1', 'Volume');
model.result('pg4').feature('vol1').label('Solid Temperature');
model.result('pg4').feature('vol1').set('showsolutionparams', 'on');
model.result('pg4').feature('vol1').set('solutionparams', 'parent');
model.result('pg4').feature('vol1').set('expr', 'nitf1.T');
model.result('pg4').feature('vol1').set('smooth', 'internal');
model.result('pg4').feature('vol1').set('showsolutionparams', 'on');
model.result('pg4').feature('vol1').set('data', 'parent');
model.result('pg4').feature('vol1').feature.create('sel1', 'Selection');
model.result('pg4').feature('vol1').feature('sel1').selection.geom('geom1', 3);
model.result('pg4').feature('vol1').feature('sel1').selection.set([1 2]);
model.result('pg4').feature('vol1').set('inheritplot', 'surf1');
model.result('pg4').feature.create('arwv1', 'ArrowVolume');
model.result('pg4').feature('arwv1').label('Fluid Flow');
model.result('pg4').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg4').feature('arwv1').set('solutionparams', 'parent');
model.result('pg4').feature('arwv1').set('expr', {'nitf1.ux' 'nitf1.uy' 'nitf1.uz'});
model.result('pg4').feature('arwv1').set('xnumber', 30);
model.result('pg4').feature('arwv1').set('ynumber', 30);
model.result('pg4').feature('arwv1').set('znumber', 30);
model.result('pg4').feature('arwv1').set('arrowtype', 'cone');
model.result('pg4').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg4').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg4').feature('arwv1').set('data', 'parent');
model.result('pg4').feature('arwv1').feature.create('col1', 'Color');
model.result('pg4').feature('arwv1').feature('col1').set('showcolordata', 'off');
model.result('pg4').feature('arwv1').feature('col1').set('expr', 'spf.U');
model.result('pg4').feature('arwv1').feature.create('filt1', 'Filter');
model.result('pg4').feature('arwv1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result('pg1').run;
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Isothermal Contours (ht)');
model.result('pg5').set('data', 'dset1');
model.result('pg5').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg3');
model.result('pg5').feature.create('iso1', 'Isosurface');
model.result('pg5').feature('iso1').set('solutionparams', 'parent');
model.result('pg5').feature('iso1').set('number', 10);
model.result('pg5').feature('iso1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('iso1').set('smooth', 'internal');
model.result('pg5').feature('iso1').set('showsolutionparams', 'on');
model.result('pg5').feature('iso1').set('data', 'parent');
model.result('pg5').label('Isothermal Contours (ht)');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('iso1').set('unit', 'degC');
model.result('pg5').run;
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('data', 'surf1');
model.result('pg5').feature('surf1').set('unit', 'degC');
model.result('pg5').feature('surf1').set('inheritplot', 'iso1');
model.result('pg5').run;
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature.remove('slc1');
model.result('pg2').run;
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'spf.U');
model.result('pg2').feature('surf1').set('descr', 'Velocity magnitude');
model.result('pg2').feature('surf1').set('unit', 'mm/s');
model.result('pg2').run;
model.result.dataset.create('surf2', 'Surface');
model.result.dataset('surf2').label('Outlets');
model.result.dataset('surf2').selection.named('uni1');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').run;
model.result('pg6').label('Outlet Temperature');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('data', 'surf2');
model.result('pg6').feature('surf1').set('unit', 'degC');
model.result('pg6').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg6').run;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('Mixing-Cup Temperatures');
model.result.numerical('gev1').set('expr', {'ht.ofl1.Tave'});
model.result.numerical('gev1').set('descr', {'Weighted average temperature'});
model.result.numerical('gev1').set('unit', {'K'});
model.result.numerical('gev1').setIndex('unit', 'degC', 0);
model.result.numerical('gev1').setIndex('descr', 'Weighted average temperature (Upper Outlets)', 0);
model.result.numerical('gev1').setIndex('expr', 'ht.ofl2.Tave', 1);
model.result.numerical('gev1').setIndex('unit', 'degC', 1);
model.result.numerical('gev1').setIndex('descr', 'Weighted average temperature (Lower Outlets)', 1);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Mixing-Cup Temperatures');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result.numerical.create('max1', 'MaxSurface');
model.result.numerical('max1').selection.all;
model.result.numerical('max1').set('expr', {'p'});
model.result.numerical('max1').set('descr', {'Pressure'});
model.result.numerical('max1').set('unit', {'Pa'});
model.result.numerical('max1').label('Maximum Pressure Drop');
model.result.numerical('max1').setIndex('descr', 'Maximum pressure drop', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Maximum Pressure Drop');
model.result.numerical('max1').set('table', 'tbl2');
model.result.numerical('max1').setResult;
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').setIndex('expr', 'aveop1(ht.ntflux)/(T_hot-T_cold)', 0);
model.result.numerical('gev2').setIndex('descr', 'Heat transfer coefficient', 0);
model.result.numerical('gev2').label('Heat Transfer Coefficient');
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').comments('Heat Transfer Coefficient');
model.result.numerical('gev2').set('table', 'tbl3');
model.result.numerical('gev2').setResult;
model.result('pg5').run;

model.title('Cross-Flow Heat Exchanger');

model.description('This example solves the fluid flow and heat transfer in a microscale heat exchanger made of stainless steel. Such heat exchangers are found in lab-on-chip devices and microreactors for fuel cells. The model accounts for heat transferred through both convection and conduction.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('crossflow_heat_exchanger.mph');

model.modelNode.label('Components');

out = model;
