function out = model
%
% passive_pem.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fuel_Cell_and_Electrolyzer_Module/Thermal_Management');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('fc', 'HydrogenFuelCell', 'geom1');
model.physics('fc').model('comp1');
model.physics('fc').prop('H2GasMixture').set('H2O', '1');
model.physics('fc').prop('H2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('O2GasMixture').set('H2O', '1');
model.physics('fc').prop('O2GasMixture').set('N2', '1');
model.physics('fc').prop('O2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('ElectrolyteType', 'ProtonExchange');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('OperationMode', 'FuelCell');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('TRHE', '50[degC]');
model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/fc', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);

model.geom('geom1').insertFile('passive_pem_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Anode Current Collector');
model.selection('sel1').set([1]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Cathode Current Collector');
model.selection('sel2').set([5]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('GDLs');
model.selection('sel3').set([2 4]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Membrane');
model.selection('sel4').set([3]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Cathode - Air Boundary');
model.selection('sel5').geom(2);
model.selection('sel5').set([46 49 56 59 66 69 76 79 86 89 96 99 106 109 116 119 126 129 136 139]);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Anode Current Terminal');
model.selection('sel6').geom(2);
model.selection('sel6').set([1]);
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').label('Cathode Current Terminal');
model.selection('sel7').geom(2);
model.selection('sel7').set([147]);
model.selection.create('sel8', 'Explicit');
model.selection('sel8').model('comp1');
model.selection('sel8').label('Anode GDE');
model.selection('sel8').geom(2);
model.selection('sel8').set([32]);
model.selection.create('sel9', 'Explicit');
model.selection('sel9').model('comp1');
model.selection('sel9').label('Cathode GDE');
model.selection('sel9').geom(2);
model.selection('sel9').set([35]);
model.selection.create('sel10', 'Explicit');
model.selection('sel10').model('comp1');
model.selection('sel10').label('Anode GDL');
model.selection('sel10').set([2]);
model.selection.create('sel11', 'Explicit');
model.selection('sel11').model('comp1');
model.selection('sel11').label('Cathode GDL');
model.selection('sel11').set([4]);
model.selection.create('sel12', 'Explicit');
model.selection('sel12').model('comp1');
model.selection('sel12').label('Current Collectors');
model.selection('sel12').set([1 5]);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('d_gde', '1e-7[m]', 'Thin GDE Thickness');
model.param.set('V_cell', '1[V]', 'Cell voltage');
model.param.set('T_amb', '25[degC]', 'Ambient temperature');
model.param.set('RH_amb', '0.65', 'Relative humidity in cathode');
model.param.set('i0_refa', '1000[A/m^2]', 'Reference exchange current density, anode');
model.param.set('i0_refc', '10[A/m^2]', 'Reference exchange current density, cathode');
model.param.set('Av', '1e7[1/m]', 'Active specific surface area of thin GDEs');
model.param.set('htc', '50[W/m^2/K]', 'Heat transfer coefficient');

model.physics('fc').prop('H2GasMixture').set('H2O', false);
model.physics('fc').prop('O2GasMixture').set('GasPhaseDiffusion', false);
model.physics('fc').create('cc1', 'CurrentCollector', 3);
model.physics('fc').feature('cc1').selection.named('sel12');
model.physics('fc').feature('cc1').set('sigmas_mat', 'from_mat');
model.physics('fc').create('h2gdl1', 'H2GasDiffusionLayer', 3);
model.physics('fc').feature('h2gdl1').selection.named('sel10');
model.physics('fc').feature('h2gdl1').set('sigmas_mat', 'from_mat');
model.physics('fc').create('o2gdl1', 'O2GasDiffusionLayer', 3);
model.physics('fc').feature('o2gdl1').selection.named('sel11');
model.physics('fc').feature('o2gdl1').set('sigmas_mat', 'from_mat');
model.physics('fc').create('mem1', 'Membrane', 3);
model.physics('fc').feature('mem1').selection.named('sel4');
model.physics('fc').create('th2gde1', 'ThinH2GasDiffusionElectrode', 2);
model.physics('fc').feature('th2gde1').selection.named('sel8');
model.physics('fc').feature('th2gde1').set('d_gde', 'd_gde');
model.physics('fc').feature('th2gde1').feature('th2gder1').set('i0_ref', 'i0_refa');
model.physics('fc').feature('th2gde1').feature('th2gder1').set('Av', 'Av');
model.physics('fc').create('to2gde1', 'ThinO2GasDiffusionElectrode', 2);
model.physics('fc').feature('to2gde1').selection.named('sel9');
model.physics('fc').feature('to2gde1').set('d_gde', 'd_gde');
model.physics('fc').feature('to2gde1').feature('to2gder1').set('i0_ref', 'i0_refc');
model.physics('fc').feature('to2gde1').feature('to2gder1').set('Av', 'Av');
model.physics('fc').feature('o2gasph1').set('MixtureSpecification', 'HumidifiedAir');
model.physics('fc').feature('o2gasph1').set('RH_hum', 'RH_amb');
model.physics('fc').feature('o2gasph1').set('T_hum', 'T_amb');
model.physics('fc').feature('icph1').feature('init1').set('initphil', '-0.1[V]');
model.physics('fc').feature('ecph1').create('init2', 'InitialValues', 3);
model.physics('fc').feature('ecph1').feature('init2').selection.set([4 5]);
model.physics('fc').feature('ecph1').feature('init2').set('initphis', 'V_cell');
model.physics('fc').feature('ecph1').create('egnd1', 'ElectricGround', 2);
model.physics('fc').feature('ecph1').feature('egnd1').selection.named('sel6');
model.physics('fc').feature('ecph1').create('pot1', 'ElectricPotential', 2);
model.physics('fc').feature('ecph1').feature('pot1').selection.named('sel7');
model.physics('fc').feature('ecph1').feature('pot1').set('phisbnd', 'V_cell');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 2);
model.physics('ht').feature('hf1').selection.named('sel5');
model.physics('ht').feature('hf1').selection.set([39 46 49 56 59 66 69 76 79 86 89 96 99 106 109 116 119 126 129 136 139]);
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 'htc');
model.physics('ht').feature('hf1').set('Text', 'T_amb');
model.physics('ht').create('sar1', 'SurfaceToAmbientRadiation', 2);
model.physics('ht').feature('sar1').selection.named('sel5');
model.physics('ht').feature('sar1').set('epsilon_rad_mat', 'userdef');
model.physics('ht').feature('sar1').set('epsilon_rad', 0.8);
model.physics('ht').feature('sar1').set('Tamb', 'T_amb');
model.physics('ht').create('sar2', 'SurfaceToAmbientRadiation', 2);
model.physics('ht').feature('sar2').selection.set([39]);
model.physics('ht').feature('sar2').set('epsilon_rad_mat', 'userdef');
model.physics('ht').feature('sar2').set('epsilon_rad', 0.3);
model.physics('ht').feature('sar2').set('Tamb', 'T_amb');

model.multiphysics.create('ech1', 'ElectrochemicalHeating', 'geom1', 3);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat1').label('Copper');
model.material('mat1').set('family', 'copper');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.35');
model.material('mat1').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat1').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat1').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat1').propertyGroup('linzRes').addInput('temperature');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('Steel AISI 4340');
model.material('mat2').set('family', 'steel');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.28');
model.material('mat1').selection.named('sel1');
model.material('mat2').selection.named('sel2');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').selection.named('sel3');
model.material('mat3').propertyGroup('def').set('electricconductivity', {'100'});
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'25'});
model.material('mat3').propertyGroup('def').set('density', {'200'});
model.material('mat3').propertyGroup('def').set('heatcapacity', {'700'});
model.material('mat3').label('GDLs');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').label('Membrane');
model.material('mat4').selection.named('sel4');
model.material('mat4').propertyGroup.create('ElectrolyteConductivity', 'Electrolyte_conductivity');
model.material('mat4').propertyGroup('ElectrolyteConductivity').set('sigmal', {'1'});
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'0.2'});
model.material('mat4').propertyGroup('def').set('density', {'1000'});
model.material('mat4').propertyGroup('def').set('heatcapacity', {'4000'});

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.set([39]);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', '1.5e-3');
model.mesh('mesh1').feature('size').set('hmin', '1e-3');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.named('sel2');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 2);
model.mesh('mesh1').run('swe1');
model.mesh('mesh1').create('ftri2', 'FreeTri');
model.mesh('mesh1').feature('ftri2').selection.named('sel5');
model.mesh('mesh1').run('ftri2');
model.mesh('mesh1').create('ftri3', 'FreeTri');
model.mesh('mesh1').feature('ftri3').selection.set([3]);
model.mesh('mesh1').feature('ftri3').create('size1', 'Size');
model.mesh('mesh1').feature('ftri3').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri3').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri3').feature('size1').set('hmax', '0.9e-3');
model.mesh('mesh1').feature('ftri3').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('ftri3').feature('size1').set('hmin', '0.6e-3');
model.mesh('mesh1').run('ftri3');
model.mesh('mesh1').create('swe2', 'Sweep');
model.mesh('mesh1').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis1').set('numelem', 2);
model.mesh('mesh1').run;

model.probe.create('bnd1', 'Boundary');
model.probe('bnd1').model('comp1');
model.probe('bnd1').set('intsurface', true);
model.probe('bnd1').label('Average Cell Current Density Probe');
model.probe('bnd1').set('probename', 'I_cell');
model.probe('bnd1').selection.named('sel8');
model.probe('bnd1').set('expr', 'fc.iloc_th2gder1');
model.probe('bnd1').set('descr', 'Local current density');
model.probe('bnd1').set('expr', 'fc.iloc_th2gder1*Av*d_gde');
model.probe.create('bnd2', 'Boundary');
model.probe('bnd2').model('comp1');
model.probe('bnd2').set('intsurface', true);
model.probe('bnd2').label('Average Cell Temperature Probe');
model.probe('bnd2').set('probename', 'T_avg');
model.probe('bnd2').selection.named('sel9');
model.probe('bnd2').set('expr', 'T');
model.probe('bnd2').set('unit', 'degC');

model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'L', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'L', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'V_cell', 0);
model.study('std1').feature('stat').setIndex('plistarr', 'range(1,-0.1,0.4)', 0);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 4 5]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_fc_phil' 'comp1_fc_phis'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subjtech', 'onevery');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Hydrogen Fuel Cell');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_T'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol1').feature('s1').create('d2', 'Direct');
model.sol('sol1').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d2').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Temperature');
model.sol('sol1').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i3', 'Iterative');
model.sol('sol1').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i3').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i3').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i3').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i3').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('v1').set('scalemethod', 'init');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subjtech', 'onfirst');

model.study('std1').setGenPlots(false);

model.probe('bnd1').genResult('none');
model.probe('bnd2').genResult('none');

model.sol('sol1').runAll;

model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').run;
model.result('pg2').label('Electric Potential');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'fc.phis');
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('Electrolyte Potential');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Surface Temperature');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', 'T');
model.result('pg4').feature('surf1').set('unit', 'degC');
model.result('pg4').run;
model.result.dataset.create('cpl1', 'CutPlane');
model.result.dataset('cpl1').set('quickplane', 'xy');
model.result.dataset('cpl1').set('quickz', 'H_film+H_GDL+H_membrane/2');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').run;
model.result('pg5').label('Membrane Temperature');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('data', 'cpl1');
model.result('pg5').feature('surf1').set('expr', 'T');
model.result('pg5').feature('surf1').set('unit', 'degC');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').run;
model.result('pg6').label('Membrane Current Density');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('data', 'cpl1');
model.result('pg6').feature('surf1').set('expr', 'fc.Ilz');
model.result('pg6').feature('surf1').set('descr', 'Electrolyte current density vector, z-component');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Polarization Plot');
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', 'Average cell current density (A/m^2)');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Cell voltage (V)');
model.result('pg7').create('glob1', 'Global');
model.result('pg7').feature('glob1').set('markerpos', 'datapoints');
model.result('pg7').feature('glob1').set('linewidth', 'preference');
model.result('pg7').feature('glob1').setIndex('expr', 'V_cell', 0);
model.result('pg7').feature('glob1').setIndex('unit', 'V', 0);
model.result('pg7').feature('glob1').setIndex('descr', 'Cell voltage', 0);
model.result('pg7').feature('glob1').set('xdata', 'expr');
model.result('pg7').feature('glob1').set('xdataexpr', 'I_cell');
model.result('pg7').feature('glob1').set('legend', false);
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Temperature vs. Current Density');
model.result('pg8').set('xlabelactive', true);
model.result('pg8').set('xlabel', 'Average cell current density (A/m^2)');
model.result('pg8').set('ylabelactive', true);
model.result('pg8').set('ylabel', 'Average cathode temperature (K)');
model.result('pg8').create('glob1', 'Global');
model.result('pg8').feature('glob1').set('markerpos', 'datapoints');
model.result('pg8').feature('glob1').set('linewidth', 'preference');
model.result('pg8').feature('glob1').setIndex('expr', 'T_avg', 0);
model.result('pg8').feature('glob1').setIndex('unit', 'degC', 0);
model.result('pg8').feature('glob1').setIndex('descr', 'Average cathode temperature', 0);
model.result('pg8').feature('glob1').set('xdata', 'expr');
model.result('pg8').feature('glob1').set('xdataexpr', 'I_cell');
model.result('pg8').feature('glob1').set('legend', false);
model.result('pg8').run;

model.view('view1').set('showgrid', false);

model.result('pg2').run;
model.result('pg3').run;
model.result('pg4').run;

model.view('view1').set('showgrid', true);

model.result('pg5').run;
model.result('pg6').run;
model.result('pg7').run;
model.result('pg8').run;
model.result('pg4').run;

model.title('Ohmic Losses and Temperature Distribution in a Passive PEM Fuel Cell');

model.description('This example models a small, passively cooled PEM fuel cell for consumer electronics applications. The model includes electrochemical currents and heat transport.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('passive_pem.mph');

model.modelNode.label('Components');

out = model;
