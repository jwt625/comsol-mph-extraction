function out = model
%
% planar_diode.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Particle_Tracing_Module/Charged_Particle_Tracing');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics.create('cpt', 'ChargedParticleTracing', 'geom1');
model.physics('cpt').model('comp1');
model.physics('cpt').prop('ParticleReleaseSpecification').set('ParticleReleaseSpecification', 'SpecifyCurrent');
model.physics('cpt').prop('RelativisticCorrection').set('RelativisticCorrection', '0');
model.physics('cpt').create('ef1', 'ElectricForce');
model.physics('cpt').feature('ef1').selection.all;
model.physics('cpt').feature('ef1').set('SpecifyForceUsing', {'ElectricField'});

model.multiphysics.create('epfi1', 'ElectricParticleFieldInteraction', 'geom1', 3);
model.multiphysics('epfi1').set('ChargeDensitySource_physics', 'cpt');
model.multiphysics('epfi1').set('ChargeDensityDestination_physics', 'es');

model.study.create('std1');
model.study('std1').create('bcpt', 'BidirectionallyCoupledParticleTracing');
model.study('std1').feature('bcpt').setSolveFor('/physics/es', true);
model.study('std1').feature('bcpt').setSolveFor('/physics/cpt', true);
model.study('std1').feature('bcpt').setSolveFor('/multiphysics/epfi1', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('rc', '10[mm]', 'Electrode side length');
model.param.set('d', '1[mm]', 'Distance between electrodes');
model.param.set('Va', '100[V]', 'Anode voltage');
model.param.set('Tc', '2500[K]', 'Cathode temperature');
model.param.set('Phim', '4.5[V]', 'Cathode work function');
model.param.set('A0', '110[A/(K*cm)^2]', 'Effective Richardson constant');
model.param.set('N', '100', 'Number of particle positions');
model.param.set('Nvel', '50', 'Number of particles in velocity space per release position');
model.param.set('Jaref', '-0.25356[A/cm^2]', 'Anode current density, reference');
model.param.set('Iref', 'Jaref*rc^2', 'Anode current, reference');
model.param.set('yref', '11.412[um]', 'Location of the electric potential minimum, reference');
model.param.set('Vref', '-179.37[mV]', 'Electric potential minimum, reference');

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'rc' 'd' 'rc'});
model.geom('geom1').feature('blk1').set('pos', {'-rc/2' '0' '-rc/2'});
model.geom('geom1').feature('blk1').set('layerbottom', false);
model.geom('geom1').feature('blk1').set('layerfront', true);
model.geom('geom1').feature('blk1').setIndex('layer', 'd/20', 0);

model.func.create('int1', 'Interpolation');
model.func('int1').model('comp1');
model.func('int1').set('source', 'file');
model.func('int1').set('filename', 'planar_diode_reference.txt');
model.func('int1').importData;
model.func('int1').set('funcname', 'reference');
model.func('int1').setIndex('argunit', 'um', 0);
model.func('int1').setIndex('fununit', 'mV', 0);

model.cpl.create('minop1', 'Minimum', 'geom1');

model.geom('geom1').run;

model.cpl('minop1').selection.geom('geom1', 1);
model.cpl('minop1').selection.set([4]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Perfect vacuum');
model.material('mat1').propertyGroup('def').set('density', '');
model.material('mat1').propertyGroup('def').set('relpermeability', '');
model.material('mat1').propertyGroup('def').set('relpermittivity', '');
model.material('mat1').propertyGroup('def').set('electricconductivity', '');
model.material('mat1').propertyGroup('def').set('density', '0');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});

model.physics('es').create('gnd1', 'Ground', 2);
model.physics('es').feature('gnd1').selection.set([2]);
model.physics('es').create('pot1', 'ElectricPotential', 2);
model.physics('es').feature('pot1').selection.set([9]);
model.physics('es').feature('pot1').set('V0', 'Va');
model.physics('cpt').create('te1', 'ThermionicEmission', 2);
model.physics('cpt').feature('te1').selection.set([2]);
model.physics('cpt').feature('te1').set('T', 'Tc');
model.physics('cpt').feature('te1').set('Phim', 'Phim');
model.physics('cpt').feature('te1').set('Ath', 'A0');
model.physics('cpt').feature('te1').setIndex('N', 'N', 0);
model.physics('cpt').feature('te1').setIndex('Nvel', 'Nvel', 0);
model.physics('cpt').feature('te1').set('WeightingOfMacroparticles', 'UniformSpeedIntervals');
model.physics('cpt').feature('te1').set('nw', 20);
model.physics('cpt').feature('pp1').set('ParticleSpecies', 'Electron');
model.physics('cpt').create('sym1', 'Symmetry', 2);
model.physics('cpt').feature('sym1').selection.set([1 3 4 5 7 8 10 11]);
model.physics('cpt').create('pcnt1', 'ParticleCounter', 2);
model.physics('cpt').feature('pcnt1').selection.set([9]);
model.physics('cpt').feature('ef1').set('E_src', 'root.comp1.es.Ex');
model.physics('cpt').feature('ef1').set('UsePPR', true);

model.multiphysics('epfi1').set('UseCumulativeSpaceChargeDensity', true);
model.multiphysics('epfi1').set('beta', 0);
model.multiphysics('epfi1').set('WeightsForSubsequentIterations', 'ArithmeticSequence');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.set([2]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 1);
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([1 3 5 14]);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.set([1]);
model.mesh('mesh1').feature('swe1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('swe1').feature('dis1').set('elemcount', 80);
model.mesh('mesh1').feature('swe1').feature('dis1').set('elemratio', 10);
model.mesh('mesh1').feature('swe1').feature('dis1').set('reverse', true);
model.mesh('mesh1').feature('swe1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis2').selection.set([2]);
model.mesh('mesh1').feature('swe1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('swe1').feature('dis2').set('elemcount', 100);
model.mesh('mesh1').feature('swe1').feature('dis2').set('elemratio', 10);
model.mesh('mesh1').run;

model.study('std1').feature('bcpt').set('tunit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 's']);
model.study('std1').feature('bcpt').set('tlist', '0 0.1');
model.study('std1').feature('bcpt').set('iter', 50);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'bcpt');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'bcpt');
model.sol('sol1').create('for1', 'For');
model.sol('sol1').feature('for1').set('control', 'bcpt');
model.sol('sol1').feature('for1').set('iter', '50');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('studystep', 'bcpt');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('control', 'user');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').feature('comp1_cpt_frel').set('solvefor', 'off');
model.sol('sol1').feature('v2').feature('comp1_epfi1_rhos_accum').set('solvefor', 'off');
model.sol('sol1').feature('v2').feature('comp1_epfi1_rhoscum_accum').set('solvefor', 'off');
model.sol('sol1').feature('v2').feature('comp1_qcpt').set('solvefor', 'off');
model.sol('sol1').feature('v2').feature('comp1_V').set('solvefor', 'on');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'cg');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('coarseningmethod', 'classic');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').set('control', 'user');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').feature('comp1_cpt_frel').set('solvefor', 'off');
model.sol('sol1').feature('v3').feature('comp1_epfi1_rhos_accum').set('solvefor', 'off');
model.sol('sol1').feature('v3').feature('comp1_epfi1_rhoscum_accum').set('solvefor', 'on');
model.sol('sol1').feature('v3').feature('comp1_qcpt').set('solvefor', 'off');
model.sol('sol1').feature('v3').feature('comp1_V').set('solvefor', 'off');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('studystep', 'bcpt');
model.sol('sol1').create('v4', 'Variables');
model.sol('sol1').feature('v4').set('control', 'user');
model.sol('sol1').feature('v4').set('notsolmethod', 'sol');
model.sol('sol1').feature('v4').set('notsol', 'sol1');
model.sol('sol1').feature('v4').feature('comp1_cpt_frel').set('solvefor', 'on');
model.sol('sol1').feature('v4').feature('comp1_epfi1_rhos_accum').set('solvefor', 'on');
model.sol('sol1').feature('v4').feature('comp1_epfi1_rhoscum_accum').set('solvefor', 'off');
model.sol('sol1').feature('v4').feature('comp1_qcpt').set('solvefor', 'on');
model.sol('sol1').feature('v4').feature('comp1_V').set('solvefor', 'off');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', '0 0.1');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 1.0E-5);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsgenalpha', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('timemethod', 'genalpha');
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('control', 'bcpt');
model.sol('sol1').feature('t1').create('se1', 'Segregated');
model.sol('sol1').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_cpt_frel' 'comp1_qcpt'});
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').label('Charged Particle Tracing');
model.sol('sol1').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_epfi1_rhos_accum'});
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').label('Electric Particle-Field Interaction 1');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').create('endfor1', 'EndFor');
model.sol('sol1').feature('v4').set('notsolnum', 'auto');
model.sol('sol1').feature('v4').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v3').set('solnum', 'auto');
model.sol('sol1').feature('v3').set('solvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Electric Potential (es)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 2, 0);
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('solutionparams', 'parent');
model.result('pg1').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg1').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg1').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg1').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg1').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg1').feature('mslc1').set('colortable', 'Dipole');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result('pg1').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg1').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg1').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg1').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg1').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg1').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg1').feature('strmsl1').set('titletype', 'none');
model.result('pg1').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg1').feature('strmsl1').set('udist', 0.02);
model.result('pg1').feature('strmsl1').set('maxlen', 0.4);
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('inheritcolor', false);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('data', 'parent');
model.result('pg1').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg1').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg1').feature('strmsl1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg1').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg1').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg1').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Electric Field Norm (es)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 2, 0);
model.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');
model.result('pg2').feature.create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('solutionparams', 'parent');
model.result('pg2').feature('mslc1').set('expr', 'es.normE');
model.result('pg2').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg2').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg2').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg2').feature('mslc1').set('colortable', 'Prism');
model.result('pg2').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg2').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('data', 'parent');
model.result('pg2').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg2').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg2').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg2').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg2').feature('strmsl1').set('titletype', 'none');
model.result('pg2').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg2').feature('strmsl1').set('udist', 0.02);
model.result('pg2').feature('strmsl1').set('maxlen', 0.4);
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('inheritcolor', false);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('data', 'parent');
model.result('pg2').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg2').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg2').feature('strmsl1').feature('col1').set('expr', 'es.normE');
model.result('pg2').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg2').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg2').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg2').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg2').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg2').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.dataset.create('part1', 'Particle');
model.result.dataset('part1').set('solution', 'sol1');
model.result.dataset('part1').set('posdof', {'comp1.qx' 'comp1.qy' 'comp1.qz'});
model.result.dataset('part1').set('geom', 'geom1');
model.result.dataset('part1').set('pgeom', 'pgeom_cpt');
model.result.dataset('part1').set('pgeomspec', 'fromphysics');
model.result.dataset('part1').set('physicsinterface', 'cpt');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'part1');
model.result('pg3').setIndex('looplevel', 2, 0);
model.result('pg3').label('Particle Trajectories (cpt)');
model.result('pg3').create('traj1', 'ParticleTrajectories');
model.result('pg3').feature('traj1').set('pointtype', 'point');
model.result('pg3').feature('traj1').set('linetype', 'none');
model.result('pg3').feature('traj1').create('col1', 'Color');
model.result('pg3').feature('traj1').feature('col1').set('expr', 'cpt.V');
model.result('pg1').run;
model.result.dataset.create('edg1', 'Edge3D');
model.result.dataset('edg1').selection.set([4]);
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Electric Potential Minimum');
model.result('pg4').set('data', 'edg1');
model.result('pg4').setIndex('looplevelinput', 'last', 0);
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'Electric potential (mV)');
model.result('pg4').set('legendpos', 'upperleft');
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg4').feature('lngr1').set('linewidth', 'preference');
model.result('pg4').feature('lngr1').set('unit', 'mV');
model.result('pg4').feature('lngr1').set('xdata', 'expr');
model.result('pg4').feature('lngr1').set('xdataexpr', 'y');
model.result('pg4').feature('lngr1').set('xdataunit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg4').feature('lngr1').set('legendmethod', 'manual');
model.result('pg4').feature('lngr1').set('legend', true);
model.result('pg4').feature('lngr1').setIndex('legends', 'Particle tracing', 0);
model.result('pg4').run;
model.result('pg4').create('lngr2', 'LineGraph');
model.result('pg4').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg4').feature('lngr2').set('linewidth', 'preference');
model.result('pg4').feature('lngr2').set('expr', 'reference(y)');
model.result('pg4').feature('lngr2').set('unit', 'mV');
model.result('pg4').feature('lngr2').set('xdata', 'expr');
model.result('pg4').feature('lngr2').set('xdataexpr', 'y');
model.result('pg4').feature('lngr2').set('xdataunit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg4').feature('lngr2').set('linecolor', 'black');
model.result('pg4').feature('lngr2').set('legend', true);
model.result('pg4').feature('lngr2').set('legendmethod', 'manual');
model.result('pg4').feature('lngr2').setIndex('legends', 'Reference', 0);
model.result('pg4').run;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').set('data', 'part1');
model.result.numerical('gev1').setIndex('looplevelinput', 'last', 0);
model.result.numerical('gev1').setIndex('expr', 'cpt.pcnt1.It', 0);
model.result.numerical('gev1').setIndex('expr', 'minop1(V,y)', 1);
model.result.numerical('gev1').setIndex('unit', 'um', 1);
model.result.numerical('gev1').setIndex('descr', 'Location of the potential minimum', 1);
model.result.numerical('gev1').setIndex('expr', 'minop1(V)', 2);
model.result.numerical('gev1').setIndex('unit', 'mV', 2);
model.result.numerical('gev1').setIndex('descr', 'Potential minimum', 2);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Global Evaluation 1');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').set('data', 'part1');
model.result.numerical('gev2').setIndex('looplevelinput', 'last', 0);
model.result.numerical('gev2').setIndex('expr', 'abs((Iref-cpt.pcnt1.It)/Iref)*100', 0);
model.result.numerical('gev2').setIndex('descr', 'Relative error (%) for the transmitted current', 0);
model.result.numerical('gev2').setIndex('expr', 'abs((yref-minop1(V,y))/yref)*100', 1);
model.result.numerical('gev2').setIndex('descr', 'Relative error (%) for the location of the potential minimum', 1);
model.result.numerical('gev2').setIndex('expr', 'abs((Vref-minop1(V))/Vref)*100', 2);
model.result.numerical('gev2').setIndex('descr', 'Relative error (%) for the potential minimum', 2);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Global Evaluation 2');
model.result.numerical('gev2').set('table', 'tbl2');
model.result.numerical('gev2').setResult;

model.title('Thermionic Emission in a Planar Diode');

model.description(['When electrons are emitted from a heated cathode in a plane parallel vacuum diode, they contribute to the space charge density in the diode, which in turn affects the electric potential distribution. If the potential difference between the cathode and the anode is not sufficiently large, a potential minimum forms between them, repelling electrons of insufficient energy back toward the cathode. Such a diode is said to be operating in the space charge limited regime.' newline  newline 'In this benchmark model, the dedicated Thermionic Emission feature is used to release thermal electrons from a cathode of a specified temperature and work function. The electron trajectories are bidirectionally coupled to the electric potential calculation in the diode using the specialized Electric Particle-Field Interaction multiphysics coupling and Bidirectionally Coupled Particle Tracing study step. The electric potential distribution and the anode current compare favorably to the results of the analytical Langmuir' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Fry model.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('planar_diode.mph');

model.modelNode.label('Components');

out = model;
