function out = model
%
% beam_eigenfrequency_topology_optimization.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Optimization_Module/Topology_Optimization');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');

model.param.set('Lx', '4[m]');
model.param.descr('Lx', 'Beam length');
model.param.set('Lyz', '1[m]');
model.param.descr('Lyz', 'Beam width and height');
model.param.set('L1', '0.1[m]');
model.param.descr('L1', 'Width of added mass');
model.param.set('thk', 'Lyz/10');
model.param.descr('thk', 'Thickness');
model.param.set('meshsz', '5[cm]');
model.param.descr('meshsz', 'Mesh size');
model.param.set('volfrac', '0.4');
model.param.descr('volfrac', 'Maximum volume fraction');
model.param.set('loadFactor', '0.15');
model.param.descr('loadFactor', 'Mass load factor');
model.param.set('Emin', '1e-6');
model.param.descr('Emin', 'Relative minimum Young''s modulus');
model.param.set('rhoMin', '10*Emin');
model.param.descr('rhoMin', 'Relative minimum density');
model.param.set('pSIMP', '3');
model.param.descr('pSIMP', 'SIMP interpolation parameter');
model.param.set('beta', '1');
model.param.descr('beta', 'Projection slope');
model.param.set('Rmin', '2*meshsz');
model.param.descr('Rmin', 'Filter radius');

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'Lx' 'Lyz' 'Lyz'});
model.geom('geom1').feature('blk1').setIndex('layer', 'thk', 0);
model.geom('geom1').feature('blk1').setIndex('layer', 'Lyz/2-2*thk', 1);
model.geom('geom1').feature('blk1').set('layerfront', true);
model.geom('geom1').feature('blk1').set('layerright', true);
model.geom('geom1').feature('blk1').set('layerback', true);
model.geom('geom1').feature('blk1').set('selresult', true);
model.geom('geom1').run('blk1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', {'Lx-thk' 'Lyz-2*thk' '1'});
model.geom('geom1').feature('blk2').setIndex('size', 'Lyz-thk', 2);
model.geom('geom1').feature('blk2').set('pos', {'0' 'thk' '0'});
model.geom('geom1').feature('blk2').set('selresult', true);
model.geom('geom1').run('blk2');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').selection('input').named('blk1');
model.geom('geom1').feature('dif1').selection('input2').named('blk2');
model.geom('geom1').run('dif1');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').set('quickplane', 'zx');
model.geom('geom1').feature('wp1').set('quicky', 'Lyz/2');
model.geom('geom1').run('wp1');
model.geom('geom1').create('par1', 'Partition');
model.geom('geom1').feature('par1').selection('input').named('blk1');
model.geom('geom1').feature('par1').set('partitionwith', 'workplane');
model.geom('geom1').run('par1');
model.geom('geom1').create('boxsel1', 'BoxSelection');
model.geom('geom1').feature('boxsel1').label('Fixed Boundaries');
model.geom('geom1').feature('boxsel1').set('entitydim', 2);
model.geom('geom1').feature('boxsel1').set('xmax', '0.001*Lx');
model.geom('geom1').feature('boxsel1').set('condition', 'inside');
model.geom('geom1').run('boxsel1');
model.geom('geom1').create('boxsel2', 'BoxSelection');
model.geom('geom1').feature('boxsel2').label('Load Boundary');
model.geom('geom1').feature('boxsel2').set('entitydim', 2);
model.geom('geom1').feature('boxsel2').set('xmin', 'Lx-1.001*thk');
model.geom('geom1').feature('boxsel2').set('ymin', 'Lyz/2-thk*1.001');
model.geom('geom1').feature('boxsel2').set('ymax', 'Lyz/2+thk*1.001');
model.geom('geom1').feature('boxsel2').set('zmin', '0.999*Lyz');
model.geom('geom1').feature('boxsel2').set('condition', 'inside');
model.geom('geom1').run('boxsel2');
model.geom('geom1').create('boxsel3', 'BoxSelection');
model.geom('geom1').feature('boxsel3').label('Design Domain');
model.geom('geom1').feature('boxsel3').set('ymax', 'Lyz/1.999');
model.geom('geom1').feature('boxsel3').set('condition', 'inside');
model.geom('geom1').run('boxsel3');
model.geom('geom1').create('comsel1', 'ComplementSelection');
model.geom('geom1').feature('comsel1').label('Mirror Domain');
model.geom('geom1').feature('comsel1').set('input', {'boxsel3'});

model.material.create('mat1', 'Common', '');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('diffuse', 'custom');
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('ambient', 'custom');
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.common.create('dtopo1', 'DensityTopology', 'comp1');
model.common('dtopo1').selection.all;

model.geom('geom1').run;

model.common('dtopo1').selection.named('geom1_boxsel3');
model.common('dtopo1').set('filterLengthType', 'Custom');
model.common('dtopo1').set('L_min', 'Rmin');
model.common('dtopo1').set('projectionType', 'TanhProjection');
model.common('dtopo1').set('beta', 'beta');
model.common('dtopo1').set('simpExponentType', 'Custom');
model.common('dtopo1').set('p_SIMP', 'pSIMP');
model.common('dtopo1').set('discretization', 'constant');
model.common('dtopo1').set('theta_0', 'volfrac');
model.common.create('mtopo1', 'MirrorTopology', 'comp1');
model.common('mtopo1').selection.named('geom1_comsel1');

model.material.create('toplnk1', 'TopologyLink', 'comp1');
model.material('toplnk1').set('topologySource', 'dtopo1');

model.physics('solid').prop('ShapeProperty').set('order_displacement', 1);
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.named('geom1_boxsel1');
model.physics('solid').create('adm1', 'AddedMass2', 2);
model.physics('solid').feature('adm1').selection.named('geom1_boxsel2');
model.physics('solid').feature('adm1').set('MassType', 'mTot');
model.physics('solid').feature('adm1').set('mTot', {'mat1.def.rho*(Lx*Lyz^2-(Lx-thk)*(Lyz-thk)*(Lyz-2*thk))*volfrac*loadFactor' '0' '0' '0' 'mat1.def.rho*(Lx*Lyz^2-(Lx-thk)*(Lyz-thk)*(Lyz-2*thk))*volfrac*loadFactor' '0' '0' '0' 'mat1.def.rho*(Lx*Lyz^2-(Lx-thk)*(Lyz-thk)*(Lyz-2*thk))*volfrac*loadFactor'});

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.named('geom1_boxsel1');
model.mesh('mesh1').feature('size').set('hmax', 'meshsz');
model.mesh('mesh1').feature('size').set('hmin', 'meshsz/2');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').run;

model.study('std1').create('stef', 'StationaryThenEigenfrequency');
model.study('std1').create('topo', 'TopologyOptimization');
model.study('std1').feature('topo').set('mmamaxiter', 50);
model.study('std1').feature('topo').set('movelimitactive', true);
model.study('std1').feature('topo').setIndex('optobj', 'freq', 0);
model.study('std1').feature('topo').set('objectivetype', 'maximization');
model.study('std1').feature('topo').set('objectivesolution', 'min');
model.study('std1').feature('topo').set('objectivescaling', 'init');
model.study('std1').feature('topo').set('constraintExpression', {'comp1.dtopo1.theta_avg'});
model.study('std1').feature('topo').setIndex('constraintUbound', 'volfrac', 0);
model.study('std1').feature('topo').setIndex('constraintLbound', '', 0);
model.study('std1').label('Study 1 - Optimization');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stef');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_dtopo1_theta_f').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_dtopo1_theta_f').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'stef');
model.sol('sol1').create('o1', 'Optimization');
model.sol('sol1').feature('o1').set('control', 'topo');
model.sol('sol1').feature('o1').create('s1', 'StationaryAttrib');
model.sol('sol1').feature('o1').feature('s1').set('solveforvars', {'comp1_dtopo1_theta_f' 'comp1_dtopo1_theta_c'});
model.sol('sol1').feature('o1').create('e1', 'EigenvalueAttrib');
model.sol('sol1').feature('o1').feature('e1').set('solveforvars', {'comp1_dtopo1_theta_c' 'comp1_u'});
model.sol('sol1').feature('o1').feature('e1').set('control', 'stef');
model.sol('sol1').feature('o1').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol1').attach('std1');
model.sol('sol1').runFromTo('st1', 'v1');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('colortable', 'Rainbow');
model.result('pg1').feature('vol1').set('colortabletrans', 'none');
model.result('pg1').feature('vol1').set('colorscalemode', 'linear');
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').set('colortable', 'Prism');
model.result('pg1').feature('vol1').create('def', 'Deform');
model.result('pg1').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('vol1').feature('def').set('descr', 'Displacement field');

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').label('Topology Optimization');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').placeAfter('plotgroup', 'pg1');
model.nodeGroup.move('grp1', 1);

model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Output material volume factor');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Threshold');

model.nodeGroup('grp1').add('plotgroup', 'pg2');
model.nodeGroup('grp1').add('plotgroup', 'pg3');

model.result.dataset.create('filt1', 'Filter');
model.result.dataset('filt1').label('Filter');
model.result.dataset('filt1').set('data', 'dset1');
model.result.dataset('filt1').set('expr', 'dtopo1.theta');
model.result.dataset('filt1').set('lowerexpr', '0.5');
model.result.dataset('filt1').set('smooth', 'none');
model.result.dataset('filt1').set('useder', false);
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('expr', 'dtopo1.theta');
model.result('pg2').feature('mslc1').set('rangecoloractive', true);
model.result('pg2').feature('mslc1').set('rangecolormin', 0);
model.result('pg2').feature('mslc1').set('rangecolormax', 1);
model.result('pg2').feature('mslc1').set('xnumber', '1');
model.result('pg2').feature('mslc1').set('ynumber', '1');
model.result('pg2').feature('mslc1').set('znumber', '1');
model.result('pg3').set('data', 'filt1');
model.result('pg3').create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('expr', '1');
model.result('pg3').feature('vol1').set('coloring', 'uniform');
model.result('pg3').feature('vol1').set('color', 'gray');
model.result('pg3').feature('vol1').set('titletype', 'none');
model.result.export.create('plot1', 'Plot');
model.result.export('plot1').set('plotgroup', 'pg3');
model.result.export('plot1').label('Topology Optimized Geometry (STL)');
model.result.export('plot1').set('exporttype', 'stlbin');
model.result.export('plot1').set('filename', 'comp1_dtopo1.stl');
model.result.export.create('plot2', 'Plot');
model.result.export('plot2').set('plotgroup', 'pg3');
model.result.export('plot2').label('Topology Optimized Geometry (PLY)');
model.result.export('plot2').set('exporttype', 'plybin');
model.result.export('plot2').set('filename', 'comp1_dtopo1.ply');
model.result('pg1').run;

model.sol('sol1').feature('o1').set('gcmma', false);

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'Lx', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'Lx', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'Lyz', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'm', 1);
model.study('std1').feature('param').setIndex('pname', 'Lyz', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'm', 1);
model.study('std1').feature('param').setIndex('pname', 'pSIMP', 0);
model.study('std1').feature('param').setIndex('plistarr', '1 2 3 4 5', 0);
model.study('std1').feature('param').setIndex('pname', 'beta', 1);
model.study('std1').feature('param').setIndex('plistarr', '2 4 8 16 32', 1);
model.study('std1').feature('param').set('reusesol', true);
model.study('std1').feature('topo').set('plot', true);
model.study('std1').feature('topo').set('plotgroup', 'pg3');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'pSIMP' 'beta'});
model.batch('p1').set('plistarr', {'1 2 3 4 5' '2 4 8 16 32'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').setIndex('looplevel', 5, 1);
model.result('pg4').set('defaultPlotID', 'stress');
model.result('pg4').label('Stress (solid) 1');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').create('vol1', 'Volume');
model.result('pg4').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg4').feature('vol1').set('threshold', 'manual');
model.result('pg4').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg4').feature('vol1').set('colortable', 'Rainbow');
model.result('pg4').feature('vol1').set('colortabletrans', 'none');
model.result('pg4').feature('vol1').set('colorscalemode', 'linear');
model.result('pg4').feature('vol1').set('resolution', 'custom');
model.result('pg4').feature('vol1').set('refine', 2);
model.result('pg4').feature('vol1').set('colortable', 'Prism');
model.result('pg4').feature('vol1').create('def', 'Deform');
model.result('pg4').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg4').feature('vol1').feature('def').set('descr', 'Displacement field');

model.nodeGroup.create('grp2', 'Results');
model.nodeGroup('grp2').label('Topology Optimization 1');
model.nodeGroup('grp2').set('type', 'plotgroup');
model.nodeGroup('grp2').placeAfter('plotgroup', 'pg4');
model.nodeGroup.move('grp2', 2);

model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Output material volume factor 1');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Threshold 1');

model.nodeGroup('grp2').add('plotgroup', 'pg5');
model.nodeGroup('grp2').add('plotgroup', 'pg6');

model.result.dataset.create('filt2', 'Filter');
model.result.dataset('filt2').label('Filter 1');
model.result.dataset('filt2').set('data', 'dset2');
model.result.dataset('filt2').set('expr', 'dtopo1.theta');
model.result.dataset('filt2').set('lowerexpr', '0.5');
model.result.dataset('filt2').set('smooth', 'none');
model.result.dataset('filt2').set('useder', false);
model.result('pg5').set('data', 'dset2');
model.result('pg5').create('mslc1', 'Multislice');
model.result('pg5').feature('mslc1').set('expr', 'dtopo1.theta');
model.result('pg5').feature('mslc1').set('rangecoloractive', true);
model.result('pg5').feature('mslc1').set('rangecolormin', 0);
model.result('pg5').feature('mslc1').set('rangecolormax', 1);
model.result('pg5').feature('mslc1').set('xnumber', '1');
model.result('pg5').feature('mslc1').set('ynumber', '1');
model.result('pg5').feature('mslc1').set('znumber', '1');
model.result('pg6').set('data', 'filt2');
model.result('pg6').create('vol1', 'Volume');
model.result('pg6').feature('vol1').set('expr', '1');
model.result('pg6').feature('vol1').set('coloring', 'uniform');
model.result('pg6').feature('vol1').set('color', 'gray');
model.result('pg6').feature('vol1').set('titletype', 'none');
model.result.export.create('plot3', 'Plot');
model.result.export('plot3').set('plotgroup', 'pg6');
model.result.export('plot3').label('Topology Optimized Geometry (STL) 1');
model.result.export('plot3').set('exporttype', 'stlbin');
model.result.export('plot3').set('filename', 'comp1_dtopo1.stl');
model.result.export.create('plot4', 'Plot');
model.result.export('plot4').set('plotgroup', 'pg6');
model.result.export('plot4').label('Topology Optimized Geometry (PLY) 1');
model.result.export('plot4').set('exporttype', 'plybin');
model.result.export('plot4').set('filename', 'comp1_dtopo1.ply');
model.result('pg4').run;

model.study('std1').feature('topo').set('probewindow', '');

model.result('pg3').run;
model.result('pg3').run;

model.nodeGroup('grp2').label('Topology Optimization - Parametric');

model.mesh.duplicate('mesh2', 'mesh1');
model.mesh('mesh2').feature('size').set('hmax', 'meshsz/2');
model.mesh('mesh2').feature('size').set('hmin', 'meshsz/4');

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/solid', false);
model.study('std2').feature('stat').set('useinitsol', true);
model.study('std2').feature('stat').set('initmethod', 'sol');
model.study('std2').feature('stat').set('initstudy', 'std1');
model.study('std2').setGenPlots(false);
model.study('std2').label('Study 2 - Smooth Design (mesh2)');

model.sol.create('sol8');
model.sol('sol8').study('std2');
model.sol('sol8').create('st1', 'StudyStep');
model.sol('sol8').feature('st1').set('study', 'std2');
model.sol('sol8').feature('st1').set('studystep', 'stat');
model.sol('sol8').create('v1', 'Variables');
model.sol('sol8').feature('v1').feature('comp1_dtopo1_theta_f').set('scalemethod', 'manual');
model.sol('sol8').feature('v1').feature('comp1_dtopo1_theta_f').set('scaleval', '1');
model.sol('sol8').feature('v1').set('control', 'stat');
model.sol('sol8').create('s1', 'Stationary');
model.sol('sol8').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol8').feature('s1').create('i1', 'Iterative');
model.sol('sol8').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol8').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with AMG) (opt)');
model.sol('sol8').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol8').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol8').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol8').feature('s1').feature.remove('fcDef');
model.sol('sol8').attach('std2');
model.sol('sol8').runAll;

model.result.dataset('filt1').set('data', 'dset3');
model.result.dataset('filt1').set('expr', 'dtopo1.theta_f');
model.result.dataset('filt1').createMesh('comp2', 'geom2', 'mesh3', 'imp1');

model.mesh('mesh3').feature('imp1').set('facepartition', 'minimal');
model.mesh('mesh3').feature.duplicate('imp2', 'imp1');
model.mesh('mesh3').run('imp1');
model.mesh('mesh3').feature('imp2').create('tr1', 'Transform');
model.mesh('mesh3').feature('imp2').feature('tr1').set('displ', {'0' 'Lyz' '0'});
model.mesh('mesh3').feature('imp2').feature('tr1').set('scaletype', 'anisotropic');
model.mesh('mesh3').feature('imp2').feature('tr1').set('anisotropic', [1 -1 1]);
model.mesh('mesh3').run('imp2');
model.mesh('mesh3').create('uni1', 'Union');
model.mesh('mesh3').run('uni1');
model.mesh('mesh3').create('remf1', 'RemeshFaces');
model.mesh('mesh3').feature('remf1').selection.all;
model.mesh('mesh3').feature('remf1').feature('size').set('hmax', 'meshsz');
model.mesh('mesh3').feature('remf1').feature('size').set('hmin', 'meshsz/2');
model.mesh('mesh3').run('remf1');
model.mesh('mesh3').create('ftet1', 'FreeTet');
model.mesh('mesh3').run;

model.material.create('matlnk1', 'Link', 'comp2');

model.physics.copy('solid2', 'solid', 'comp2');
model.physics('solid2').feature('fix1').selection.named('mesh3_imp1_geom1_boxsel1');
model.physics('solid2').feature.duplicate('fix2', 'fix1');
model.physics('solid2').feature('fix2').selection.named('mesh3_imp2_geom1_boxsel1');
model.physics('solid2').feature('adm1').selection.named('mesh3_imp1_geom1_boxsel2');
model.physics('solid2').feature('adm1').set('mTot', {'0.5*mat1.def.rho*(Lx*Lyz^2-(Lx-thk)*(Lyz-thk)*(Lyz-2*thk))*volfrac*loadFactor' '0' '0' '0' '0.5*mat1.def.rho*(Lx*Lyz^2-(Lx-thk)*(Lyz-thk)*(Lyz-2*thk))*volfrac*loadFactor' '0' '0' '0' '0.5*mat1.def.rho*(Lx*Lyz^2-(Lx-thk)*(Lyz-thk)*(Lyz-2*thk))*volfrac*loadFactor'});
model.physics('solid2').feature.duplicate('adm2', 'adm1');
model.physics('solid2').feature('adm2').selection.named('mesh3_imp2_geom1_boxsel2');

model.study.create('std3');
model.study('std3').create('eig', 'Eigenfrequency');
model.study('std3').feature('eig').set('plotgroup', 'Default');
model.study('std3').feature('eig').set('chkeigregion', true);
model.study('std3').feature('eig').set('conrad', '1');
model.study('std3').feature('eig').set('conradynhm', '1');
model.study('std3').feature('eig').set('storefact', false);
model.study('std3').feature('eig').set('solnum', 'auto');
model.study('std3').feature('eig').set('notsolnum', 'auto');
model.study('std3').feature('eig').set('outputmap', {});
model.study('std3').feature('eig').set('ngenAUX', '1');
model.study('std3').feature('eig').set('goalngenAUX', '1');
model.study('std3').feature('eig').set('ngenAUX', '1');
model.study('std3').feature('eig').set('goalngenAUX', '1');
model.study('std3').feature('eig').setSolveFor('/physics/solid', false);
model.study('std3').feature('eig').setSolveFor('/physics/solid2', true);

model.common.create('mpf1', 'ParticipationFactors', 'comp1');
model.common.create('mpf2', 'ParticipationFactors', 'comp2');

model.study('std1').feature('stef').setEntry('activate', 'solid2', false);
model.study('std2').feature('stat').setEntry('activate', 'solid2', false);
model.study('std3').feature('eig').setEntry('activate', 'comp1:topopt', false);
model.study('std3').label('Study 3 - Verification');

model.sol.create('sol9');
model.sol('sol9').study('std3');
model.sol('sol9').create('st1', 'StudyStep');
model.sol('sol9').feature('st1').set('study', 'std3');
model.sol('sol9').feature('st1').set('studystep', 'eig');
model.sol('sol9').create('v1', 'Variables');
model.sol('sol9').feature('v1').set('control', 'eig');
model.sol('sol9').create('e1', 'Eigenvalue');
model.sol('sol9').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol9').feature('e1').set('eigvfunscaleparam', '4.24E-6');
model.sol('sol9').feature('e1').set('control', 'eig');
model.sol('sol9').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol9').attach('std3');
model.sol('sol9').runAll;

model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset5');
model.result('pg7').setIndex('looplevel', 1, 0);
model.result('pg7').set('defaultPlotID', 'modeShape');
model.result('pg7').label('Mode Shape (solid2)');
model.result('pg7').set('showlegends', false);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'solid2.disp'});
model.result('pg7').feature('surf1').set('threshold', 'manual');
model.result('pg7').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg7').feature('surf1').set('colortable', 'Rainbow');
model.result('pg7').feature('surf1').set('colortabletrans', 'none');
model.result('pg7').feature('surf1').set('colorscalemode', 'linear');
model.result('pg7').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg7').feature('surf1').create('def', 'Deform');
model.result('pg7').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg7').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.evaluationGroup.create('std3EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std3EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_solid2');
model.result.evaluationGroup('std3EvgFrq').set('data', 'dset5');
model.result.evaluationGroup('std3EvgFrq').label('Eigenfrequencies (Study 3 - Verification)');
model.result.evaluationGroup('std3EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std3EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std3EvgFrq').run;

model.nodeGroup.create('grp3', 'Results');
model.nodeGroup('grp3').label('Topology Optimization 1');
model.nodeGroup('grp3').set('type', 'plotgroup');
model.nodeGroup('grp3').placeAfter('plotgroup', 'pg7');
model.nodeGroup.move('grp3', 3);

model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').label('Output material volume factor 2');
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').label('Threshold 2');

model.nodeGroup('grp3').add('plotgroup', 'pg8');
model.nodeGroup('grp3').add('plotgroup', 'pg9');

model.result.dataset.create('filt3', 'Filter');
model.result.dataset('filt3').label('Filter 2');
model.result.dataset('filt3').set('data', 'dset4');
model.result.dataset('filt3').set('expr', 'dtopo1.theta');
model.result.dataset('filt3').set('lowerexpr', '0.5');
model.result.dataset('filt3').set('smooth', 'none');
model.result.dataset('filt3').set('useder', false);
model.result('pg8').set('data', 'dset4');
model.result('pg8').create('mslc1', 'Multislice');
model.result('pg8').feature('mslc1').set('expr', 'dtopo1.theta');
model.result('pg8').feature('mslc1').set('rangecoloractive', true);
model.result('pg8').feature('mslc1').set('rangecolormin', 0);
model.result('pg8').feature('mslc1').set('rangecolormax', 1);
model.result('pg8').feature('mslc1').set('xnumber', '1');
model.result('pg8').feature('mslc1').set('ynumber', '1');
model.result('pg8').feature('mslc1').set('znumber', '1');
model.result('pg9').set('data', 'filt3');
model.result('pg9').create('vol1', 'Volume');
model.result('pg9').feature('vol1').set('expr', '1');
model.result('pg9').feature('vol1').set('coloring', 'uniform');
model.result('pg9').feature('vol1').set('color', 'gray');
model.result('pg9').feature('vol1').set('titletype', 'none');
model.result.export.create('plot5', 'Plot');
model.result.export('plot5').set('plotgroup', 'pg9');
model.result.export('plot5').label('Topology Optimized Geometry (STL) 2');
model.result.export('plot5').set('exporttype', 'stlbin');
model.result.export('plot5').set('filename', 'comp1_dtopo1.stl');
model.result.export.create('plot6', 'Plot');
model.result.export('plot6').set('plotgroup', 'pg9');
model.result.export('plot6').label('Topology Optimized Geometry (PLY) 2');
model.result.export('plot6').set('exporttype', 'plybin');
model.result.export('plot6').set('filename', 'comp1_dtopo1.ply');
model.result.evaluationGroup.create('std3mpf2', 'EvaluationGroup');
model.result.evaluationGroup('std3mpf2').set('data', 'dset5');
model.result.evaluationGroup('std3mpf2').label('Participation Factors (Study 3 - Verification)');
model.result.evaluationGroup('std3mpf2').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('expr', 'mpf2.pfLnormX', 0);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('unit', '1', 0);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('descr', 'Participation factor, normalized, X-translation', 0);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('expr', 'mpf2.pfLnormY', 1);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('descr', 'Participation factor, normalized, Y-translation', 1);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('expr', 'mpf2.pfLnormZ', 2);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('descr', 'Participation factor, normalized, Z-translation', 2);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('expr', 'mpf2.pfRnormX', 3);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('unit', '1', 3);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('descr', 'Participation factor, normalized, X-rotation', 3);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('expr', 'mpf2.pfRnormY', 4);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('unit', '1', 4);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('descr', 'Participation factor, normalized, Y-rotation', 4);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('expr', 'mpf2.pfRnormZ', 5);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('unit', '1', 5);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('descr', 'Participation factor, normalized, Z-rotation', 5);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('expr', 'mpf2.mEffLX', 6);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('unit', 'kg', 6);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('descr', 'Effective modal mass, X-translation', 6);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('expr', 'mpf2.mEffLY', 7);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('unit', 'kg', 7);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('descr', 'Effective modal mass, Y-translation', 7);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('expr', 'mpf2.mEffLZ', 8);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('unit', 'kg', 8);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('descr', 'Effective modal mass, Z-translation', 8);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('expr', 'mpf2.mEffRX', 9);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('unit', 'kg*m^2', 9);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('descr', 'Effective modal mass, X-rotation', 9);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('expr', 'mpf2.mEffRY', 10);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('unit', 'kg*m^2', 10);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('descr', 'Effective modal mass, Y-rotation', 10);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('expr', 'mpf2.mEffRZ', 11);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('unit', 'kg*m^2', 11);
model.result.evaluationGroup('std3mpf2').feature('gev1').setIndex('descr', 'Effective modal mass, Z-rotation', 11);
model.result.evaluationGroup('std3mpf2').run;
model.result('pg7').run;

model.nodeGroup.remove('grp3');

model.result('pg7').run;
model.result('pg7').label('Verification');
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Verification');
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').set('expr', {'dtopo1.theta_avg'});
model.result.evaluationGroup('eg1').feature('gev1').set('descr', {'Average material volume factor'});
model.result.evaluationGroup('eg1').create('int1', 'IntVolume');
model.result.evaluationGroup('eg1').feature('int1').set('data', 'dset5');
model.result.evaluationGroup('eg1').feature('int1').selection.all;
model.result.evaluationGroup('eg1').feature('int1').setIndex('expr', '1/(Lx*Lyz^2-(Lx-thk)*(Lyz-thk)*(Lyz-2*thk))', 0);
model.result.evaluationGroup('eg1').feature('int1').setIndex('descr', 'Volume fraction', 0);
model.result.evaluationGroup('eg1').run;

model.title('Maximizing the Eigenfrequency of a Beam');

model.description('This model demonstrates how to design a beam without low Eigenfrequencies by combining the Density Model feature in the Topology Optimization interface with the Stationary Then Eigenfrequency study step.');

model.mesh('mesh1').clearMesh;
model.mesh('mesh2').clearMesh;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;

model.label('beam_eigenfrequency_topology_optimization.mph');

model.modelNode.label('Components');

out = model;
