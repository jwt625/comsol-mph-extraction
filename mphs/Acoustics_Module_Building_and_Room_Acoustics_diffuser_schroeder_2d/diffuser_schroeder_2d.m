function out = model
%
% diffuser_schroeder_2d.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Building_and_Room_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);

model.modelNode('comp1').label('Single diffuser');

model.geom('geom1').insertFile('diffuser_schroeder_2d_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');

model.modelNode.create('comp2', true);

model.geom.create('geom2', 2);
model.geom('geom2').model('comp2');

model.mesh.create('mesh2', 'geom2');

model.modelNode('comp2').label('5-unit arrangement');

model.geom('geom2').insertFile('diffuser_schroeder_2d_geom_sequence.mph', 'geom2');
model.geom('geom2').run('fin');

model.modelNode.create('comp3', true);

model.geom.create('geom3', 2);
model.geom('geom3').model('comp3');

model.mesh.create('mesh3', 'geom3');

model.modelNode('comp3').label('Infinite arrangement');

model.geom('geom3').insertFile('diffuser_schroeder_2d_geom_sequence.mph', 'geom3');
model.geom('geom3').run('fin');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp2');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat2').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat2').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat2').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat2').label('Air');
model.material('mat2').set('family', 'air');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat2').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat2').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat2').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat2').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat2').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('molarmass', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat2').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material('mat2').propertyGroup('def').addInput('pressure');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat2').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat2').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat2').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat2').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat2').propertyGroup('idealGas').addInput('temperature');
model.material('mat2').propertyGroup('idealGas').addInput('pressure');
model.material('mat2').materialType('nonSolid');
model.material.create('mat3', 'Common', 'comp3');
model.material('mat3').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat3').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat3').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat3').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat3').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat3').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat3').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat3').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat3').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat3').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat3').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat3').label('Air');
model.material('mat3').set('family', 'air');
model.material('mat3').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat3').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat3').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat3').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat3').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat3').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat3').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat3').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat3').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat3').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat3').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat3').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat3').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat3').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat3').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat3').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat3').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat3').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat3').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat3').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat3').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat3').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat3').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat3').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat3').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat3').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat3').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat3').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat3').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat3').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat3').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat3').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat3').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat3').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat3').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat3').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat3').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat3').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat3').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat3').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat3').propertyGroup('def').set('molarmass', '');
model.material('mat3').propertyGroup('def').set('bulkviscosity', '');
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat3').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat3').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat3').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat3').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat3').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat3').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat3').propertyGroup('def').addInput('temperature');
model.material('mat3').propertyGroup('def').addInput('pressure');
model.material('mat3').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat3').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat3').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat3').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat3').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat3').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat3').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat3').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat3').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat3').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat3').propertyGroup('idealGas').addInput('temperature');
model.material('mat3').propertyGroup('idealGas').addInput('pressure');
model.material('mat3').materialType('nonSolid');

model.param.label('Parameters 1 - Geometry');
model.param.create('par2');
model.param('par2').label('Parameters 2 - Physics');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('c0', '343[m/s]', 'Speed of sound');
model.param('par2').set('rho0', '1.225[kg/m^3]', 'Density');
model.param('par2').set('f0', '125[Hz]', 'Frequency parameter');
model.param('par2').set('n', '2', 'Band number');
model.param('par2').set('N', '6', 'Frequencies per band');
model.param('par2').set('f_start', '125[Hz]', 'Center frequency of band 0');
model.param('par2').set('fC', 'f_start*2^n', 'Band center frequency');
model.param('par2').set('fL', 'fC*2^(-1/2)', 'Band lower frequency limit');
model.param('par2').set('fU', 'fC*2^(1/2)', 'Band upper frequency limit');
model.param('par2').set('df_log', '(log10(fU[1/Hz])-log10(fL[1/Hz]))/N', 'Log of frequency steps (in band)');
model.param('par2').set('theta0', '45[deg]', 'Incidence polar angle from normal direction');
model.param('par2').set('x_spec', 'r0*sin(theta0)', 'x-coordinate for specular direction');
model.param('par2').set('y_spec', 'r0*cos(theta0)', 'y-coordinate for specular direction');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 1);
model.cpl('intop1').selection.set([29]);

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('p_inc', '1[Pa]*exp(i*2*pi*freq/c0*(sin(theta0)*x-cos(theta0)*y))', 'Incident plane wave');
model.variable('var1').set('p_inf', '1[Pa]*exp(i*2*pi*freq/c0*(sin(theta0)*x+cos(theta0)*y))', 'Reflected plane wave from infinite baffle');
model.variable('var1').set('p_scat', 'p_inf+acpr.p_s', 'Scattered pressure');
model.variable('var1').set('p_scat_ext', 'p_inf+pext(x,y)', 'Scattered pressure in the exterior field');
model.variable('var1').set('Lp_scat', '20*log10(abs(p_scat)/sqrt(2)/(20e-6[Pa]))[dB]', 'Scattered SPL');
model.variable('var1').set('Lp_ext', '20*log10(abs(p_scat_ext)/sqrt(2)/(20e-6[Pa]))[dB]', 'Scattered SPL in the exterior field');
model.variable('var1').set('Pw_spec', 'r0*abs(exp(i*2*pi*freq/c0*(sin(theta0)*x_spec+cos(theta0)*y_spec))+pext(x_spec,y_spec))^2', 'Scattered power in the specular direction');
model.variable('var1').set('Pw_tot', 'intop1(abs(p_scat_ext)^2)', 'Total scattered power');

model.physics('acpr').create('bpf1', 'BackgroundPressureField', 2);
model.physics('acpr').feature('bpf1').selection.set([1]);
model.physics('acpr').feature('bpf1').set('PressureFieldType', 'UserDefined');
model.physics('acpr').feature('bpf1').set('p', 'p_inc+p_inf');
model.physics('acpr').create('pmb1', 'PerfectlyMatchedBoundary', 1);
model.physics('acpr').feature('pmb1').selection.set([27 28]);
model.physics('acpr').create('efc1', 'ExteriorFieldCalculation', 1);
model.physics('acpr').feature('efc1').selection.set([27 28]);
model.physics('acpr').feature('efc1').setIndex('SymmetryCondition1', 1, 0);

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'c0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm/s', 0);
model.study('std1').feature('param').setIndex('pname', 'c0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm/s', 0);
model.study('std1').feature('param').setIndex('pname', 'n', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(0,1,5)', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('freq').set('plist', '10^{range(log10(fL[1/Hz])+df_log/2,df_log,log10(fU[1/Hz])-df_log/2)}');
model.study('std1').feature('freq').set('useparam', true);
model.study('std1').feature('freq').setIndex('pname_aux', 'c0', 0);
model.study('std1').feature('freq').setIndex('plistarr_aux', '', 0);
model.study('std1').feature('freq').setIndex('punit_aux', 'm/s', 0);
model.study('std1').feature('freq').setIndex('pname_aux', 'c0', 0);
model.study('std1').feature('freq').setIndex('plistarr_aux', '', 0);
model.study('std1').feature('freq').setIndex('punit_aux', 'm/s', 0);
model.study('std1').feature('freq').setIndex('pname_aux', 'theta0', 0);
model.study('std1').feature('freq').setIndex('plistarr_aux', 'range(-80,10,80)', 0);
model.study('std1').feature('freq').setIndex('punit_aux', 'deg', 0);

model.mesh('mesh1').run;

model.physics.create('acpr2', 'PressureAcoustics', 'geom2');
model.physics('acpr2').model('comp2');

model.study('std1').feature('freq').setSolveFor('/physics/acpr2', true);

model.cpl.create('intop2', 'Integration', 'geom2');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').selection.geom('geom2', 1);
model.cpl('intop2').selection.set([125]);

model.variable.create('var2');
model.variable('var2').model('comp2');

% To import content from file, use:
% model.variable('var2').loadFile('FILENAME');
model.variable('var2').set('p_inc', '1[Pa]*exp(i*2*pi*freq/c0*(sin(theta0)*x-cos(theta0)*y))', 'Incident plane wave');
model.variable('var2').set('p_inf', '1[Pa]*exp(i*2*pi*freq/c0*(sin(theta0)*x+cos(theta0)*y))', 'Reflected plane wave from infinite baffle');
model.variable('var2').set('p_scat', 'p_inf+acpr2.p_s', 'Scattered pressure');
model.variable('var2').set('p_scat_ext', 'p_inf+pext(x,y)', 'Scattered pressure in the exterior field');
model.variable('var2').set('Lp_scat', '20*log10(abs(p_scat)/sqrt(2)/(20e-6[Pa]))[dB]', 'Scattered SPL');
model.variable('var2').set('Lp_ext', '20*log10(abs(p_scat_ext)/sqrt(2)/(20e-6[Pa]))[dB]', 'Scattered SPL in the exterior field');
model.variable('var2').set('Pw_spec', 'r0*abs(exp(i*2*pi*freq/c0*(sin(theta0)*x_spec+cos(theta0)*y_spec))+pext(x_spec,y_spec))^2', 'Scattered power in the specular direction');
model.variable('var2').set('Pw_tot', 'intop2(abs(p_scat_ext)^2)', 'Total scattered power');

model.physics('acpr2').create('bpf1', 'BackgroundPressureField', 2);
model.physics('acpr2').feature('bpf1').selection.set([1]);
model.physics('acpr2').feature('bpf1').set('PressureFieldType', 'UserDefined');
model.physics('acpr2').feature('bpf1').set('p', 'p_inc+p_inf');
model.physics('acpr2').create('pmb1', 'PerfectlyMatchedBoundary', 1);
model.physics('acpr2').feature('pmb1').selection.set([123 124]);
model.physics('acpr2').create('efc1', 'ExteriorFieldCalculation', 1);
model.physics('acpr2').feature('efc1').selection.set([123 124]);
model.physics('acpr2').feature('efc1').setIndex('SymmetryCondition1', 1, 0);

model.mesh('mesh2').run;

model.physics.create('acpr3', 'PressureAcoustics', 'geom3');
model.physics('acpr3').model('comp3');

model.study('std1').feature('freq').setSolveFor('/physics/acpr3', true);

model.cpl.create('intop3', 'Integration', 'geom3');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').selection.geom('geom3', 1);
model.cpl('intop3').selection.set([3]);

model.variable.create('var3');
model.variable('var3').model('comp3');

% To import content from file, use:
% model.variable('var3').loadFile('FILENAME');
model.variable('var3').set('p_scat', 'acpr3.p_s', 'Scattered pressure');
model.variable('var3').set('Lp_scat', 'acpr3.Lp_s', 'Scattered SPL');
model.variable('var3').set('I_spec', 'intop3(acpr3.I_sx*sin(theta0)+acpr3.I_sy*cos(theta0))', 'Scattered intensity in the specular direction');
model.variable('var3').set('I_tot', 'intop3(sqrt(acpr3.I_sx^2+acpr3.I_sy^2))', 'Total scattered intensity');

model.physics('acpr3').create('bpf1', 'BackgroundPressureField', 2);
model.physics('acpr3').feature('bpf1').selection.set([1]);
model.physics('acpr3').feature('bpf1').set('pamp', 1);
model.physics('acpr3').feature('bpf1').set('c', 'c0');
model.physics('acpr3').feature('bpf1').set('dir', {'sin(theta0)' '-cos(theta0)' '0'});
model.physics('acpr3').feature('bpf1').set('CalculateIntensity', true);
model.physics('acpr3').feature('bpf1').set('rho', 'rho0');
model.physics('acpr3').create('pmb1', 'PerfectlyMatchedBoundary', 1);
model.physics('acpr3').feature('pmb1').selection.set([3]);
model.physics('acpr3').feature('pmb1').set('directionType', 'normal');
model.physics('acpr3').create('pc1', 'PeriodicCondition', 1);
model.physics('acpr3').feature('pc1').selection.set([1 28]);
model.physics('acpr3').feature('pc1').set('PeriodicType', 'Floquet');
model.physics('acpr3').feature('pc1').set('kFloquet', {'sin(theta0)*acpr3.k' '-cos(theta0)*acpr3.k' '0'});

model.mesh('mesh3').run;

model.result.setOnlyPlotWhenRequested(true);

model.study('std1').feature('freq').setEntry('activate', 'acpr2', false);
model.study('std1').feature('freq').setEntry('activate', 'acpr3', false);
model.study('std1').feature('freq').setEntry('mesh', 'geom2', 'nomesh');
model.study('std1').feature('freq').setEntry('mesh', 'geom3', 'nomesh');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq' 'theta0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz' 'deg'});
model.sol('sol1').feature('s1').feature('p1').set('sweeptype', 'filled');
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'10^{range(log10(fL[1/Hz])+df_log/2,df_log,log10(fU[1/Hz])-df_log/2)}' 'range(-80,10,80)'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pcontinuation', '');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'n'});
model.batch('p1').set('plistarr', {'range(0,1,5)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset4');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset4');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').label('Sound Pressure Level (acpr)');
model.result.create('pg3', 'PolarGroup');
model.result('pg3').set('data', 'dset4');
model.result('pg3').create('rp1', 'RadiationPattern');
model.result('pg3').feature('rp1').set('expr', {'acpr.efc1.Lp_pext'});
model.result('pg3').feature('rp1').set('legend', true);
model.result('pg3').feature('rp1').set('phidisc', 180);
model.result('pg3').label('Exterior-Field Sound Pressure Level (acpr)');
model.result.create('pg4', 'PolarGroup');
model.result('pg4').set('data', 'dset4');
model.result('pg4').create('rp1', 'RadiationPattern');
model.result('pg4').feature('rp1').set('expr', {'acpr.efc1.pext'});
model.result('pg4').feature('rp1').set('legend', true);
model.result('pg4').feature('rp1').set('phidisc', 180);
model.result('pg4').label('Exterior-Field Pressure (acpr)');

model.study('std1').setGenPlots(false);
model.study('std1').feature('freq').setEntry('activate', 'acpr2', true);
model.study('std1').feature('freq').setEntry('activate', 'acpr3', true);
model.study('std1').feature('freq').setEntry('mesh', 'geom2', 'mesh2');
model.study('std1').feature('freq').setEntry('mesh', 'geom3', 'mesh3');

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq' 'theta0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz' 'deg'});
model.sol('sol1').feature('s1').feature('p1').set('sweeptype', 'filled');
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'10^{range(log10(fL[1/Hz])+df_log/2,df_log,log10(fU[1/Hz])-df_log/2)}' 'range(-80,10,80)'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pcontinuation', '');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');

model.batch('p1').feature.remove('so1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').set('pname', {'n'});
model.batch('p1').set('plistarr', {'range(0,1,5)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');
model.batch('p1').run('compute');

model.result.dataset('dset4').label('Study 1/Parametric Solutions 1 (4) - Single diffuser');
model.result.dataset('dset4').selection.geom('geom1', 2);
model.result.dataset('dset4').selection.geom('geom1', 2);
model.result.dataset('dset4').selection.set([1]);
model.result.dataset('dset5').label('Study 1/Parametric Solutions 1 (5) - 5-unit arrangement');
model.result.dataset('dset5').selection.geom('geom2', 2);
model.result.dataset('dset5').selection.geom('geom2', 2);
model.result.dataset('dset5').selection.set([1]);
model.result.dataset('dset6').label('Study 1/Parametric Solutions 1 (6) - Infinite arrangement');
model.result.dataset.create('arr1', 'Array2D');
model.result.dataset('arr1').set('data', 'dset6');
model.result.dataset('arr1').label('Array 2D - 5 periods of the infinite arrangement');
model.result.dataset('arr1').set('fullsize', [5 1]);
model.result.dataset('arr1').set('floquetper', true);
model.result.dataset('arr1').set('wavevector', {'sin(theta0)*2*pi*freq/c0' '0'});
model.result.dataset('arr1').setIndex('wavevector', '-cos(theta0)*2*pi*freq/c0', 1);
model.result('pg1').set('outersolnum', 4);
model.result('pg1').set('solnum', 94);
model.result('pg1').feature('surf1').set('expr', 'p_scat');
model.result('pg1').run;
model.result('pg1').set('data', 'dset5');
model.result('pg1').run;
model.result('pg1').set('data', 'arr1');
model.result('pg1').run;
model.result('pg2').set('outersolnum', 4);
model.result('pg2').set('solnum', 94);
model.result('pg2').feature('surf1').set('expr', 'Lp_scat');
model.result('pg2').run;
model.result('pg2').set('data', 'dset5');
model.result('pg2').run;
model.result('pg2').set('data', 'arr1');
model.result('pg2').run;
model.result('pg3').set('outerinput', 'manual');
model.result('pg3').set('outersolnum', [2]);
model.result('pg3').set('innerinput', 'manualindices');
model.result('pg3').set('solnumindices', 'range(12,17,102)');
model.result('pg3').set('symmetricangle', true);
model.result('pg3').set('zeroangle', 'up');
model.result('pg3').set('legendpos', 'manual');
model.result('pg3').set('legendposx', 0.5);
model.result('pg3').set('legendposy', 0.25);
model.result('pg3').feature('rp1').set('expr', 'Lp_ext');
model.result('pg3').feature('rp1').set('phidisc', 360);
model.result('pg3').feature('rp1').set('anglerestr', 'manual');
model.result('pg3').feature('rp1').set('phimin', -90);
model.result('pg3').feature('rp1').set('phirange', 180);
model.result('pg3').feature('rp1').set('circle', 'manual');
model.result('pg3').feature('rp1').set('radius', 'r0');
model.result('pg3').feature('rp1').set('refdir2', [0 1]);
model.result('pg3').run;
model.result('pg3').set('data', 'dset5');
model.result('pg3').run;
model.result('pg4').set('outerinput', 'manual');
model.result('pg4').set('outersolnum', [2]);
model.result('pg4').set('innerinput', 'manualindices');
model.result('pg4').set('solnumindices', 'range(12,17,102)');
model.result('pg4').set('symmetricangle', true);
model.result('pg4').set('zeroangle', 'up');
model.result('pg4').set('legendpos', 'manual');
model.result('pg4').set('legendposx', 0.5);
model.result('pg4').set('legendposy', 0.25);
model.result('pg4').feature('rp1').set('expr', 'abs(p_scat_ext)^2');
model.result('pg4').feature('rp1').set('phidisc', 360);
model.result('pg4').feature('rp1').set('anglerestr', 'manual');
model.result('pg4').feature('rp1').set('phimin', -90);
model.result('pg4').feature('rp1').set('phirange', 180);
model.result('pg4').feature('rp1').set('circle', 'manual');
model.result('pg4').feature('rp1').set('radius', 'r0');
model.result('pg4').feature('rp1').set('refdir2', [0 1]);
model.result('pg4').run;
model.result('pg4').set('data', 'dset5');
model.result('pg4').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').set('data', 'dset4');
model.result.evaluationGroup('eg1').set('includeparameters', false);
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').set('tablecols', 'outer');
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'fC', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 'Hz', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Band center frequency', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', '1-Pw_spec/Pw_tot', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 1, 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', '', 1);
model.result.evaluationGroup('eg1').feature('gev1').set('dataseries', 'average');
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup.duplicate('eg2', 'eg1');
model.result.evaluationGroup('eg2').set('data', 'dset5');
model.result.evaluationGroup('eg2').run;
model.result.evaluationGroup.duplicate('eg3', 'eg2');
model.result.evaluationGroup('eg3').set('data', 'dset6');
model.result.evaluationGroup('eg3').feature('gev1').setIndex('expr', '1-I_spec/I_tot', 1);
model.result.evaluationGroup('eg3').feature('gev1').setIndex('unit', 1, 1);
model.result.evaluationGroup('eg3').feature('gev1').setIndex('descr', '', 1);
model.result.evaluationGroup('eg3').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').label('Scattering coefficients');
model.result('pg5').set('data', 'none');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'Band center frequency (Hz)');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Scattering coefficient');
model.result('pg5').set('axislimits', true);
model.result('pg5').set('xmin', 125);
model.result('pg5').set('xmax', 4000);
model.result('pg5').set('ymin', 0);
model.result('pg5').set('xlog', true);
model.result('pg5').create('tblp1', 'Table');
model.result('pg5').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg5').feature('tblp1').set('linewidth', 'preference');
model.result('pg5').feature('tblp1').set('source', 'evaluationgroup');
model.result('pg5').feature('tblp1').set('legend', true);
model.result('pg5').feature('tblp1').set('legendmethod', 'manual');
model.result('pg5').feature('tblp1').setIndex('legends', 'Single diffuser', 0);
model.result('pg5').create('tblp2', 'Table');
model.result('pg5').feature('tblp2').set('markerpos', 'datapoints');
model.result('pg5').feature('tblp2').set('linewidth', 'preference');
model.result('pg5').feature('tblp2').set('source', 'evaluationgroup');
model.result('pg5').feature('tblp2').set('evaluationgroup', 'eg2');
model.result('pg5').feature('tblp2').set('legend', true);
model.result('pg5').feature('tblp2').set('legendmethod', 'manual');
model.result('pg5').feature('tblp2').setIndex('legends', '5-unit arrangement', 0);
model.result('pg5').create('tblp3', 'Table');
model.result('pg5').feature('tblp3').set('markerpos', 'datapoints');
model.result('pg5').feature('tblp3').set('linewidth', 'preference');
model.result('pg5').feature('tblp3').set('source', 'evaluationgroup');
model.result('pg5').feature('tblp3').set('evaluationgroup', 'eg3');
model.result('pg5').feature('tblp3').set('legend', true);
model.result('pg5').feature('tblp3').set('legendmethod', 'manual');
model.result('pg5').feature('tblp3').setIndex('legends', 'Infinite arrangement', 0);
model.result('pg5').run;

model.title('Schroeder Diffuser in 2D');

model.description('In this model, the scattering coefficient of a Schroeder diffuser is calculated. This coefficient can then be used as input to express boundary conditions in typical room acoustic simulations. The effect of periodicity is also investigated by studying the responses from different arrangements of the same diffuser.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;

model.label('diffuser_schroeder_2d.mph');

model.modelNode.label('Components');

out = model;
