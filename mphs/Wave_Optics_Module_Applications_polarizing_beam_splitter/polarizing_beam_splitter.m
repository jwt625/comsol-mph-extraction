function out = model
%
% polarizing_beam_splitter.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Wave_Optics_Module/Applications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ewbe', 'ElectromagneticWavesBeamEnvelopes', 'geom1');
model.physics('ewbe').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('solnum', 'auto');
model.study('std1').feature('freq').set('notsolnum', 'auto');
model.study('std1').feature('freq').set('outputmap', {});
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').setSolveFor('/physics/ewbe', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('wl0', '550[nm]', 'Center wavelength');
model.param.set('dWl', '500[nm]', 'Bandwidth');
model.param.set('w0', '20*wl0', 'Spot radius');
model.param.set('nPrism', '1.673', 'Refractive index of the glass prisms');
model.param.set('nHigh', '2.3', 'Refractive index of the high-index materials');
model.param.set('nLow', '1.38', 'Refractive index of the low-index material');
model.param.set('z0', 'pi*nPrism*w0^2/wl0', 'Rayleigh range');
model.param.set('a', '8*w0/sqrt(1-(8*w0/z0)^2)', 'Prism side');
model.param.set('nLayers', '7', 'Number of dielectric layers');
model.param.set('dHigh', 'wl0/4/nHigh/cos(alphaHigh)', 'Thickness of high-index material layers');
model.param.set('dLow', 'wl0/4/nLow/cos(alphaLow)', 'Thickness of low-index material layers');
model.param.set('E0', '1[V/m]', 'Peak incident electric field');
model.param.set('lda0', 'wl0', 'Wavelength in vacuum');
model.param.set('k0', '2*pi/lda0', 'Wave number in vacuum');
model.param.set('kParallel', 'k0*nPrism/sqrt(2)', 'Wave vector component parallel to the boundaries');
model.param.set('kHighNormal', 'k0*sqrt(nHigh^2-nPrism^2/2)', 'Wave vector component in high-index materials in the normal direction');
model.param.set('kLowNormal', 'k0*sqrt(nLow^2-nPrism^2/2)', 'Wave vector component in the normal direction for low-index materials');
model.param.set('dStack', 'floor(nLayers/2)*(dHigh+dLow)+dHigh', 'Thickness of thin-film stack');
model.param.set('wlCount', '11', 'Number of wavelengths in the sweep');
model.param.set('alphaHigh', 'asin(nPrism*sin(pi/4)/nHigh)', 'Angle in high-index material');
model.param.set('alphaLow', 'asin(nPrism*sin(pi/4)/nLow)', 'Angle in low-index material');
model.param.set('xCOGu', '-(a/2+dStack/sqrt(2))/3', 'Center of gravity, upper triangle, x-coordinate');
model.param.set('yCOGu', '-xCOGu', 'Center of gravity, upper triangle, y-coordinate');
model.param.set('xCOGl', '-xCOGu', 'Center of gravity, lower triangle, x-coordinate');
model.param.set('yCOGl', 'xCOGu', 'Center of gravity, lower triangle, y-coordinate');

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom.create('part1', 'Part', 2);
model.geom('part1').label('Thin-Film Stack');
model.geom('part1').inputParam.set('nLayers', '3');
model.geom('part1').inputParam.descr('nLayers', 'Number of layers');
model.geom('part1').inputParam.set('dHigh', '1[um]');
model.geom('part1').inputParam.descr('dHigh', 'Thickness of high-index material');
model.geom('part1').inputParam.set('dLow', '2[um]');
model.geom('part1').inputParam.descr('dLow', 'Thickness of low-index material');
model.geom('part1').inputParam.set('height', '5[um]');
model.geom('part1').inputParam.descr('height', 'Height of layers');
model.geom('part1').create('pch1', 'ParameterCheck');
model.geom('part1').feature('pch1').set('condition', 'nLayers<1');
model.geom('part1').feature('pch1').set('message', 'The number of layers must be a positive odd number');
model.geom('part1').feature.duplicate('pch2', 'pch1');
model.geom('part1').feature('pch2').set('condition', 'mod(nLayers,2)==0');
model.geom('part1').run('pch2');
model.geom('part1').create('r1', 'Rectangle');
model.geom('part1').feature('r1').label('First High-Index Layer');
model.geom('part1').feature('r1').set('size', {'dHigh' 'height'});
model.geom('part1').feature('r1').set('pos', {'-floor(nLayers/2)/2*(dHigh+dLow)-dHigh/2' '0'});
model.geom('part1').feature('r1').setIndex('pos', '-height/2', 1);
model.geom('part1').selection.create('csel1', 'CumulativeSelection');
model.geom('part1').selection('csel1').label('High-Index Material');
model.geom('part1').feature('r1').set('contributeto', 'csel1');
model.geom('part1').run('r1');
model.geom('part1').create('if1', 'If');
model.geom('part1').feature.createAfter('endif1', 'EndIf', 'if1');
model.geom('part1').feature('if1').set('condition', 'nLayers > 1');
model.geom('part1').create('copy1', 'Copy');
model.geom('part1').feature('copy1').label('Last High-Index Layer');
model.geom('part1').feature('copy1').selection('input').set({'r1'});
model.geom('part1').feature('copy1').set('displx', 'floor(nLayers/2)*(dHigh+dLow)');
model.geom('part1').feature('copy1').set('contributeto', 'csel1');
model.geom('part1').feature.duplicate('r2', 'r1');
model.geom('part1').feature('r2').label('First Low-Index Layer');
model.geom('part1').feature('r2').set('size', {'dLow' 'height'});
model.geom('part1').feature('r2').set('pos', {'-floor(nLayers/2)/2*(dHigh+dLow)+dHigh/2' '-height/2'});
model.geom('part1').selection.create('csel2', 'CumulativeSelection');
model.geom('part1').selection('csel2').label('Low-Index Material');
model.geom('part1').feature('r2').set('contributeto', 'csel2');
model.geom('part1').run('r2');
model.geom('part1').create('arr1', 'Array');
model.geom('part1').feature('arr1').selection('input').set({'r1' 'r2'});
model.geom('part1').feature('arr1').set('fullsize', {'floor(nLayers/2)' '1'});
model.geom('part1').feature('arr1').set('displ', {'dHigh+dLow' '0'});
model.geom('part1').selection.create('csel3', 'CumulativeSelection');
model.geom('part1').selection('csel3').label('Thin-Film Stack');
model.geom('part1').run('arr1');
model.geom('part1').create('uni1', 'Union');
model.geom('part1').feature('uni1').selection('input').set({'arr1' 'copy1'});
model.geom('part1').feature('uni1').set('contributeto', 'csel3');
model.geom('part1').feature.move('uni1', 8);
model.geom('part1').run('uni1');
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'nLayers', 'nLayers');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'dHigh', 'dHigh');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'dLow', 'dLow');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'height', 'sqrt(2)*a-dStack');
model.geom('geom1').feature('pi1').set('rot', -45);
model.geom('geom1').feature('pi1').setEntry('selkeepobj', 'pi1_csel1', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetoobj', 'pi1_csel1', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepobj', 'pi1_csel2', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetoobj', 'pi1_csel2', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepobj', 'pi1_csel3', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetoobj', 'pi1_csel3', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_csel1.dom', true);
model.geom('geom1').feature('pi1').setEntry('selshowdom', 'pi1_csel1.dom', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_csel1.dom', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_csel2.dom', true);
model.geom('geom1').feature('pi1').setEntry('selshowdom', 'pi1_csel2.dom', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_csel2.dom', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepdom', 'pi1_csel3.dom', true);
model.geom('geom1').feature('pi1').setEntry('selshowdom', 'pi1_csel3.dom', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_csel3.dom', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel1.bnd', false);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel1.bnd', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel2.bnd', true);
model.geom('geom1').feature('pi1').setEntry('selshowbnd', 'pi1_csel2.bnd', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel2.bnd', 'none');
model.geom('geom1').feature('pi1').setEntry('selkeepbnd', 'pi1_csel3.bnd', true);
model.geom('geom1').feature('pi1').setEntry('selshowbnd', 'pi1_csel3.bnd', true);
model.geom('geom1').feature('pi1').setEntry('selcontributetobnd', 'pi1_csel3.bnd', 'none');
model.geom('geom1').run('pi1');
model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'table');
model.geom('geom1').feature('pol1').setIndex('table', '-a/2', 0, 0);
model.geom('geom1').feature('pol1').setIndex('table', '-a/2+dStack/sqrt(2)', 0, 1);
model.geom('geom1').feature('pol1').setIndex('table', '-dStack/sqrt(2)/2', 1, 0);
model.geom('geom1').feature('pol1').setIndex('table', 'dStack/sqrt(2)/2', 1, 1);
model.geom('geom1').feature('pol1').setIndex('table', 'xCOGu', 2, 0);
model.geom('geom1').feature('pol1').setIndex('table', 'yCOGu', 2, 1);
model.geom('geom1').feature('pol1').setIndex('table', '-a/2', 3, 0);
model.geom('geom1').feature('pol1').setIndex('table', 'dStack/sqrt(2)/2', 3, 1);
model.geom('geom1').feature.duplicate('pol2', 'pol1');
model.geom('geom1').feature('pol2').setIndex('table', 'xCOGu', 0, 0);
model.geom('geom1').feature('pol2').setIndex('table', 'yCOGu', 0, 1);
model.geom('geom1').feature('pol2').setIndex('table', '-a/2', 1, 0);
model.geom('geom1').feature('pol2').setIndex('table', 'dStack/sqrt(2)/2', 1, 1);
model.geom('geom1').feature('pol2').setIndex('table', '-a/2', 2, 0);
model.geom('geom1').feature('pol2').setIndex('table', 'a/2', 2, 1);
model.geom('geom1').feature('pol2').setIndex('table', '-dStack/sqrt(2)/2', 3, 0);
model.geom('geom1').feature('pol2').setIndex('table', 'a/2', 3, 1);
model.geom('geom1').feature.duplicate('pol3', 'pol2');
model.geom('geom1').feature('pol3').setIndex('table', '-dStack/sqrt(2)/2', 0, 0);
model.geom('geom1').feature('pol3').setIndex('table', 'a/2', 0, 1);
model.geom('geom1').feature('pol3').setIndex('table', 'xCOGu', 1, 0);
model.geom('geom1').feature('pol3').setIndex('table', 'yCOGu', 1, 1);
model.geom('geom1').feature('pol3').setIndex('table', '-dStack/sqrt(2)/2', 2, 0);
model.geom('geom1').feature('pol3').setIndex('table', 'dStack/sqrt(2)/2', 2, 1);
model.geom('geom1').feature('pol3').setIndex('table', 'a/2-dStack/sqrt(2)', 3, 0);
model.geom('geom1').feature('pol3').setIndex('table', 'a/2', 3, 1);
model.geom('geom1').run('pol3');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'pol1' 'pol2' 'pol3'});
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Prisms');
model.geom('geom1').feature('uni1').set('contributeto', 'csel1');
model.geom('geom1').run('uni1');
model.geom('geom1').create('rot1', 'Rotate');
model.geom('geom1').feature('rot1').set('keep', true);
model.geom('geom1').feature('rot1').selection('input').set({'uni1'});
model.geom('geom1').feature('rot1').set('rot', 180);
model.geom('geom1').feature('rot1').set('contributeto', 'csel1');
model.geom('geom1').runPre('fin');
model.geom('geom1').run('fin');
model.geom('geom1').create('mce1', 'MeshControlEdges');
model.geom('geom1').feature('mce1').selection('input').set('fin', [5 21 22 25 27 29]);
model.geom('geom1').run('mce1');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Prisms');
model.material('mat1').selection.named('geom1_csel1_dom');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'nPrism'});
model.material('mat1').propertyGroup('RefractiveIndex').set('ki', {'0'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('High-Index Material');
model.material('mat2').selection.named('geom1_pi1_csel1_dom');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'nHigh'});
model.material('mat2').propertyGroup('RefractiveIndex').set('ki', {'0'});
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Low-Index Material');
model.material('mat3').selection.named('geom1_pi1_csel2_dom');
model.material('mat3').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat3').propertyGroup('RefractiveIndex').set('n', {'nLow'});
model.material('mat3').propertyGroup('RefractiveIndex').set('ki', {'0'});
model.material.create('mat4', 'Common', '');
model.material('mat4').propertyGroup.create('DispersionModelSellmeierStandard', 'Sellmeier');
model.material('mat4').propertyGroup.create('ThermoOpticDispersionModelSchott', 'Schott thermo-optic');
model.material('mat4').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat4').propertyGroup.create('InternalTransmittance10', ['Internal transmittance, 10' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'mm sample thickness']);
model.material('mat4').propertyGroup('InternalTransmittance10').func.create('int1', 'Interpolation');
model.material('mat4').propertyGroup.create('InternalTransmittance25', ['Internal transmittance, 25' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'mm sample thickness']);
model.material('mat4').propertyGroup('InternalTransmittance25').func.create('int1', 'Interpolation');
model.material('mat4').label('Schott N-SF5 Glass');
model.material('mat4').propertyGroup('def').set('density', '2.86[g/cm^3]');
model.material('mat4').propertyGroup('def').set('heatcapacity', '0.77[J/(g*K)]');
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'1.0[W/(m*K)]' '0' '0' '0' '1.0[W/(m*K)]' '0' '0' '0' '1.0[W/(m*K)]'});
model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', {'7.94E-6[1/K]' '0' '0' '0' '7.94E-6[1/K]' '0' '0' '0' '7.94E-6[1/K]'});
model.material('mat4').propertyGroup('DispersionModelSellmeierStandard').set('ODsma', {'1.52481889E+00' '1.87085527E-01' '1.42729015E+00' '1.12547560E-02' '5.88995392E-02' '1.29141675E+02'});
model.material('mat4').propertyGroup('DispersionModelSellmeierStandard').set('Trefsma', '22[degC]');
model.material('mat4').propertyGroup('DispersionModelSellmeierStandard').set('Prefsma', '1[atm]');
model.material('mat4').propertyGroup('DispersionModelSellmeierStandard').addInput('frequency');
model.material('mat4').propertyGroup('ThermoOpticDispersionModelSchott').set('TOsco', {'-2.51E-7' '1.07E-8' '-2.4E-11' '7.85E-7' '1.15E-9' '0.278'});
model.material('mat4').propertyGroup('ThermoOpticDispersionModelSchott').set('Trefsco', '20[degC]');
model.material('mat4').propertyGroup('Enu').set('E', '87.0[GPa]');
model.material('mat4').propertyGroup('Enu').set('nu', '0.237');
model.material('mat4').propertyGroup('InternalTransmittance10').func('int1').set('funcname', 'taui10');
model.material('mat4').propertyGroup('InternalTransmittance10').func('int1').set('table', {'2500' '0.758';  ...
'2325' '0.831';  ...
'1970' '0.95';  ...
'1530' '0.99';  ...
'1060' '0.998';  ...
'700' '0.996';  ...
'660' '0.995';  ...
'620' '0.995';  ...
'580' '0.996';  ...
'546' '0.995';  ...
'500' '0.99';  ...
'460' '0.982';  ...
'436' '0.973';  ...
'420' '0.963';  ...
'405' '0.928';  ...
'400' '0.905';  ...
'390' '0.826';  ...
'380' '0.642';  ...
'370' '0.276';  ...
'365' '0.116'});
model.material('mat4').propertyGroup('InternalTransmittance10').func('int1').set('extrap', 'none');
model.material('mat4').propertyGroup('InternalTransmittance10').func('int1').set('fununit', {'1'});
model.material('mat4').propertyGroup('InternalTransmittance10').func('int1').set('argunit', {'nm'});
model.material('mat4').propertyGroup('InternalTransmittance10').set('taui10', 'taui10(c_const/freq)');
model.material('mat4').propertyGroup('InternalTransmittance10').addInput('frequency');
model.material('mat4').propertyGroup('InternalTransmittance25').func('int1').set('funcname', 'taui25');
model.material('mat4').propertyGroup('InternalTransmittance25').func('int1').set('table', {'2500' '0.5';  ...
'2325' '0.63';  ...
'1970' '0.88';  ...
'1530' '0.975';  ...
'1060' '0.994';  ...
'700' '0.989';  ...
'660' '0.987';  ...
'620' '0.988';  ...
'580' '0.991';  ...
'546' '0.988';  ...
'500' '0.976';  ...
'460' '0.956';  ...
'436' '0.935';  ...
'420' '0.91';  ...
'405' '0.83';  ...
'400' '0.78';  ...
'390' '0.62';  ...
'380' '0.33';  ...
'370' '0.04'});
model.material('mat4').propertyGroup('InternalTransmittance25').func('int1').set('extrap', 'none');
model.material('mat4').propertyGroup('InternalTransmittance25').func('int1').set('fununit', {'1'});
model.material('mat4').propertyGroup('InternalTransmittance25').func('int1').set('argunit', {'nm'});
model.material('mat4').propertyGroup('InternalTransmittance25').set('taui25', 'taui25(c_const/freq)');
model.material('mat4').propertyGroup('InternalTransmittance25').addInput('frequency');
model.material.create('mat5', 'Common', '');
model.material('mat5').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat5').propertyGroup('RefractiveIndex').func.create('an1', 'Analytic');
model.material('mat5').label('ZnS (Zinc sulfide) (Debenham 1984: Cubic ZnS; n 0.405-13 um)');
model.material('mat5').propertyGroup('RefractiveIndex').func('an1').set('expr', 'sqrt((8.393)+(0.14383)/(x^2-0.058612410000000004)+(4430.99)/(x^2-1347.6241))');
model.material('mat5').propertyGroup('RefractiveIndex').func('an1').set('fununit', '1');
model.material('mat5').propertyGroup('RefractiveIndex').func('an1').set('argunit', {'um'});
model.material('mat5').propertyGroup('RefractiveIndex').set('n', {'an1(c_const/freq)' '0' '0' '0' 'an1(c_const/freq)' '0' '0' '0' 'an1(c_const/freq)'});
model.material('mat5').propertyGroup('RefractiveIndex').addInput('frequency');
model.material.create('mat6', 'Common', '');
model.material('mat6').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat6').propertyGroup('RefractiveIndex').func.create('an1', 'Analytic');
model.material('mat6').label('MgF2 (Magnesium fluoride) (Li 1980: n(o) 0.14-7.5 um)');
model.material('mat6').propertyGroup('RefractiveIndex').func('an1').set('expr', 'sqrt((1.2762)+(0.60967)*x^2/(x^2-(0.007458049600000001))+(0.0080)*x^2/(x^2-(324.0))+(2.14973)*x^2/(x^2-(625.0)))');
model.material('mat6').propertyGroup('RefractiveIndex').func('an1').set('fununit', '1');
model.material('mat6').propertyGroup('RefractiveIndex').func('an1').set('argunit', {'um'});
model.material('mat6').propertyGroup('RefractiveIndex').set('n', {'an1(c_const/freq)' '0' '0' '0' 'an1(c_const/freq)' '0' '0' '0' 'an1(c_const/freq)'});
model.material('mat6').propertyGroup('RefractiveIndex').addInput('frequency');
model.material.create('matlnk1', 'Link', 'comp1');
model.material('matlnk1').selection.named('geom1_csel1_dom');
model.material('matlnk1').active(false);
model.material.duplicate('matlnk2', 'matlnk1');
model.material('matlnk2').selection.named('geom1_pi1_csel1_dom');
model.material('matlnk2').set('link', 'mat5');
model.material.duplicate('matlnk3', 'matlnk2');
model.material('matlnk3').selection.named('geom1_pi1_csel2_dom');
model.material('matlnk3').set('link', 'mat6');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Positions');
model.variable('var1').set('x0', '-dStack/sqrt(2)');
model.variable('var1').descr('x0', 'Boundary 0');
model.variable('var1').set('x1', 'x0+sqrt(2)*dHigh');
model.variable('var1').descr('x1', 'Boundary 1');
model.variable('var1').set('x2', 'x1+sqrt(2)*dLow');
model.variable('var1').descr('x2', 'Boundary 2');
model.variable('var1').set('x3', 'x2+sqrt(2)*dHigh');
model.variable('var1').descr('x3', 'Boundary 3');
model.variable('var1').set('x4', 'x3+sqrt(2)*dLow');
model.variable('var1').descr('x4', 'Boundary 4');
model.variable('var1').set('x5', 'x4+sqrt(2)*dHigh');
model.variable('var1').descr('x5', 'Boundary 5');
model.variable('var1').set('x6', 'x5+sqrt(2)*dLow');
model.variable('var1').descr('x6', 'Boundary 6');
model.variable('var1').set('x7', 'x6+sqrt(2)*dHigh');
model.variable('var1').descr('x7', 'Boundary 7');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Wave Vector Components');
model.variable('var2').set('k1Prismx', 'k0*nP');
model.variable('var2').descr('k1Prismx', 'Wave vector in prisms, first wave, x-component');
model.variable('var2').set('k1Prismy', '0[1/m]');
model.variable('var2').descr('k1Prismy', 'Wave vector in prisms, first wave, y-component');
model.variable('var2').set('k1Highx', '(kt+kHn)/sqrt(2)');
model.variable('var2').descr('k1Highx', 'Wave vector in high-index materials, first wave, x-component');
model.variable('var2').set('k1Highy', '(kt-kHn)/sqrt(2)');
model.variable('var2').descr('k1Highy', 'Wave vector in high-index materials, first wave, y-component');
model.variable('var2').set('k1Lowx', '(kt+kLn)/sqrt(2)');
model.variable('var2').descr('k1Lowx', 'Wave vector in low-index materials, first wave, x-component');
model.variable('var2').set('k1Lowy', '(kt-kLn)/sqrt(2)');
model.variable('var2').descr('k1Lowy', 'Wave vector in low-index materials, first wave, y-component');
model.variable('var2').set('k2Prismx', 'k1Prismy');
model.variable('var2').descr('k2Prismx', 'Wave vector in prisms, second wave, x-component');
model.variable('var2').set('k2Prismy', 'k1Prismx');
model.variable('var2').descr('k2Prismy', 'Wave vector in prisms, second wave, y-component');
model.variable('var2').set('k2Highx', 'k1Highy');
model.variable('var2').descr('k2Highx', 'Wave vector in high-index materials, second wave, x-component');
model.variable('var2').set('k2Highy', 'k1Highx');
model.variable('var2').descr('k2Highy', 'Wave vector in high-index materials, second wave, y-component');
model.variable('var2').set('k2Lowx', 'k1Lowy');
model.variable('var2').descr('k2Lowx', 'Wave vector in low-index materials, second wave, x-component');
model.variable('var2').set('k2Lowy', 'k1Lowx');
model.variable('var2').descr('k2Lowy', 'Wave vector in low-index materials, second wave, y-component');

model.selection.create('disk1', 'Disk');
model.selection('disk1').model('comp1');
model.selection('disk1').label('First Prism');
model.selection('disk1').set('posx', '-a/4');
model.selection('disk1').set('posy', 'a/4');
model.selection.duplicate('disk2', 'disk1');
model.selection('disk2').label('Second Prism');
model.selection('disk2').set('posx', 'a/4');
model.selection('disk2').set('posy', '-a/4');

model.variable.create('var3');
model.variable('var3').model('comp1');
model.variable('var3').label('Phases in First Prism');
model.variable('var3').selection.geom('geom1', 2);
model.variable('var3').selection.named('disk1');
model.variable('var3').set('phi1', 'k1Prismx*x+k1Prismy*y+phi100');
model.variable('var3').descr('phi1', 'Phase for first wave');
model.variable('var3').set('phi2', 'k2Prismx*x+k2Prismy*y+phi200');
model.variable('var3').descr('phi2', 'Phase for second wave');
model.variable.duplicate('var4', 'var3');
model.variable('var4').label('Phases in First High-Index Layer');
model.variable('var4').selection.set([2]);
model.variable('var4').set('phi1', 'k1Highx*x+k1Highy*y+phi110');
model.variable('var4').set('phi2', 'k2Highx*x+k2Highy*y+phi210');
model.variable.duplicate('var5', 'var4');
model.variable('var5').label('Phases in First Low-Index Layer 1');
model.variable('var5').selection.set([3]);
model.variable('var5').set('phi1', 'k1Lowx*x+k1Lowy*y+phi120');
model.variable('var5').set('phi2', 'k2Lowx*x+k2Lowy*y+phi220');
model.variable.duplicate('var6', 'var4');
model.variable('var6').label('Phases in Second High-Index Layer');
model.variable('var6').selection.set([4]);
model.variable('var6').set('phi1', 'k1Highx*x+k1Highy*y+phi130');
model.variable('var6').set('phi2', 'k2Highx*x+k2Highy*y+phi230');
model.variable('var5').label('Phases in First Low-Index Layer');
model.variable.duplicate('var7', 'var5');
model.variable('var7').label('Phases in Second Low-Index Layer');
model.variable('var7').selection.set([5]);
model.variable('var7').set('phi1', 'k1Lowx*x+k1Lowy*y');
model.variable('var7').set('phi2', 'k2Lowx*x+k2Lowy*y');
model.variable.duplicate('var8', 'var6');
model.variable('var8').label('Phases in Third High-Index Layer');
model.variable('var8').selection.set([6]);
model.variable('var8').set('phi1', 'k1Highx*x+k1Highy*y+phi150');
model.variable('var8').set('phi2', 'k2Highx*x+k2Highy*y+phi250');
model.variable.duplicate('var9', 'var7');
model.variable('var9').label('Phases in Third Low-Index Layer');
model.variable('var9').selection.set([7]);
model.variable('var9').set('phi1', 'k1Lowx*x+k1Lowy*y+phi160');
model.variable('var9').set('phi2', 'k2Lowx*x+k2Lowy*y+phi260');
model.variable.duplicate('var10', 'var8');
model.variable('var10').selection.set([8]);
model.variable('var10').set('phi1', 'k1Highx*x+k1Highy*y+phi170');
model.variable('var10').set('phi2', 'k2Highx*x+k2Highy*y+phi270');
model.variable('var10').label('Phases in Fourth High-Index Layer');
model.variable.duplicate('var11', 'var3');
model.variable('var11').label('Phases in Second Prism');
model.variable('var11').selection.set([]);
model.variable('var11').selection.named('disk2');
model.variable('var11').set('phi1', 'k1Prismx*x+k1Prismy*y+phi180');
model.variable('var11').set('phi2', 'k2Prismx*x+k2Prismy*y+phi280');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').all;
model.selection('sel1').geom('geom1', 2, 1, {'exterior'});
model.selection('sel1').all;
model.selection('sel1').label('Exterior Boundaries');
model.selection.create('int1', 'Intersection');
model.selection('int1').model('comp1');
model.selection('int1').label('Thin-Film Stack Exterior Boundaries');
model.selection('int1').set('entitydim', 1);
model.selection('int1').set('input', {'sel1' 'geom1_pi1_csel3_bnd'});
model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');
model.selection('box1').set('entitydim', 1);
model.selection('box1').set('inputent', 'selections');
model.selection('box1').set('input', {'sel1'});
model.selection('box1').set('xmax', '-a/2+dHigh/2/sqrt(2)');
model.selection('box1').set('ymin', '-a/2');
model.selection('box1').set('ymax', 'a/2');
model.selection('box1').set('condition', 'allvertices');
model.selection('box1').label('Left Boundary');
model.selection.duplicate('box2', 'box1');
model.selection('box2').label('Top Boundary');
model.selection('box2').set('xmin', '-a/2');
model.selection('box2').set('xmax', 'a/2');
model.selection('box2').set('ymin', 'a/2-dHigh/2/sqrt(2)');
model.selection('box2').set('ymax', Inf);
model.selection.duplicate('box3', 'box2');
model.selection('box3').label('Right Boundary');
model.selection('box3').set('xmin', 'a/2-dHigh/2/sqrt(2)');
model.selection('box3').set('xmax', Inf);
model.selection('box3').set('ymin', '-a/2');
model.selection('box3').set('ymax', 'a/2');
model.selection.duplicate('box4', 'box3');
model.selection('box4').label('Bottom Boundary');
model.selection('box4').set('xmin', '-a/2');
model.selection('box4').set('xmax', 'a/2');
model.selection('box4').set('ymin', -Inf);
model.selection('box4').set('ymax', '-a/2+dHigh/2/sqrt(2)');
model.selection.create('box5', 'Box');
model.selection('box5').model('comp1');
model.selection('box5').label('Top-Right Thin-Film Exterior Boundaries');
model.selection('box5').set('entitydim', 1);
model.selection('box5').set('xmin', 0);
model.selection('box5').set('ymin', 0);
model.selection('box5').set('condition', 'inside');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 1);
model.cpl('intop1').selection.named('box1');
model.cpl.duplicate('intop2', 'intop1');
model.cpl('intop2').selection.named('box2');
model.cpl.duplicate('intop3', 'intop2');
model.cpl('intop3').selection.named('box3');
model.cpl.duplicate('intop4', 'intop3');
model.cpl('intop4').selection.named('box4');
model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.named('geom1_csel1_dom');
model.cpl('aveop1').label('Prism Average');
model.cpl.create('aveop2', 'Average', 'geom1');
model.cpl('aveop2').set('axisym', true);
model.cpl('aveop2').selection.named('geom1_pi1_csel1_dom');
model.cpl('aveop2').label('High-Index Average');
model.cpl.create('aveop3', 'Average', 'geom1');
model.cpl('aveop3').set('axisym', true);
model.cpl('aveop3').label('Low-Index Average');
model.cpl('aveop3').selection.named('geom1_pi1_csel2_dom');

model.variable.create('var12');
model.variable('var12').model('comp1');
model.variable('var12').label('Power');
model.variable('var12').set('Pin', '-intop1(ewbe.nPoav)');
model.variable('var12').descr('Pin', 'Input beam power');
model.variable('var12').set('Ptop', 'intop2(ewbe.nPoav)');
model.variable('var12').descr('Ptop', 'Top beam power');
model.variable('var12').set('Pright', 'intop3(ewbe.nPoav)');
model.variable('var12').descr('Pright', 'Right beam power');
model.variable('var12').set('Pbottom', 'intop4(ewbe.nPoav)');
model.variable('var12').descr('Pbottom', 'Bottom beam power');
model.variable.create('var13');
model.variable('var13').model('comp1');
model.variable('var13').label('Refractive Indices and Wave Vector Components');
model.variable('var13').set('nP', 'aveop1(ewbe.nxx)');
model.variable('var13').descr('nP', 'Refractive index, prisms');
model.variable('var13').set('nH', 'aveop2(ewbe.nxx)');
model.variable('var13').descr('nH', 'Refractive index, high-index material');
model.variable('var13').set('nL', 'aveop3(ewbe.nxx)');
model.variable('var13').descr('nL', 'Refractive index, low-index material');
model.variable('var13').set('kt', 'k0*nP/sqrt(2)');
model.variable('var13').descr('kt', 'Tangential wave vector component');
model.variable('var13').set('kHn', 'k0*sqrt(nH^2-nP^2/2)');
model.variable('var13').descr('kHn', 'Normal wave vector component, high-index material');
model.variable('var13').set('kLn', 'k0*sqrt(nL^2-nP^2/2)');
model.variable('var13').descr('kLn', 'Normal wave vector component, low-index material');

model.physics('ewbe').prop('components').set('components', 'outofplane');
model.physics('ewbe').prop('WaveVector').set('PhaseSpec', 'UserDefined');
model.physics('ewbe').prop('WaveVector').set('phase1', 'phi1');
model.physics('ewbe').prop('WaveVector').set('phase2', 'phi2');
model.physics('ewbe').create('mbc1', 'MatchedBoundaryCondition', 1);
model.physics('ewbe').feature('mbc1').selection.named('box1');
model.physics('ewbe').feature('mbc1').set('IncidentField', 'EField');
model.physics('ewbe').feature('mbc1').set('E0i', {'0' '0' 'E0*exp(-(y/w0)^2)'});
model.physics('ewbe').feature('mbc1').set('NoScatteredField', true);
model.physics('ewbe').feature.duplicate('mbc2', 'mbc1');
model.physics('ewbe').feature('mbc2').selection.named('box2');
model.physics('ewbe').feature('mbc2').set('IncidentField', 'NoIncidentField');
model.physics('ewbe').feature('mbc2').set('NoScatteredField', false);
model.physics('ewbe').feature.duplicate('mbc3', 'mbc2');
model.physics('ewbe').feature('mbc3').selection.named('box3');
model.physics('ewbe').feature('mbc3').set('InputWave', 'SecondWave');
model.physics('ewbe').feature.duplicate('mbc4', 'mbc3');
model.physics('ewbe').feature('mbc4').selection.named('box4');
model.physics('ewbe').feature('mbc4').set('NoScatteredField', true);
model.physics('ewbe').create('sctr1', 'Scattering', 1);
model.physics('ewbe').feature('sctr1').selection.named('box5');
model.physics.create('ge', 'GlobalEquations', 'geom1');
model.physics('ge').model('comp1');

model.study('std1').feature('freq').setSolveFor('/physics/ge', true);

model.physics('ge').prop('EquationForm').set('form', 'Automatic');
model.physics('ge').feature('ge1').set('DependentVariableQuantity', 'planeangle');
model.physics('ge').feature('ge1').set('SourceTermQuantity', 'planeangle');
model.physics('ge').feature('ge1').setIndex('name', 'phi100', 0, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k1Prismx*x0+phi100-k1Highx*x0-phi110', 0, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, first wave, layer 0', 0, 0);
model.physics('ge').feature('ge1').setIndex('name', 'phi110', 1, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 1, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 1, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 1, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 1, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k1Highx*x1+phi110-k1Lowx*x1-phi120', 1, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, first wave, layer 1', 1, 0);
model.physics('ge').feature('ge1').setIndex('name', 'phi120', 2, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 2, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 2, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 2, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 2, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k1Lowx*x2+phi120-k1Highx*x2-phi130', 2, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, first wave, layer 2', 2, 0);
model.physics('ge').feature('ge1').setIndex('name', 'phi130', 3, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 3, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 3, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 3, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 3, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k1Highx*x3+phi130-k1Lowx*x3', 3, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, first wave, layer 3', 3, 0);
model.physics('ge').feature('ge1').setIndex('name', 'phi150', 4, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 4, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 4, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 4, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 4, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k1Lowx*x4-k1Highx*x4-phi150', 4, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, first wave, layer 5', 4, 0);
model.physics('ge').feature('ge1').setIndex('name', 'phi160', 5, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 5, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 5, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 5, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 5, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k1Highx*x5+phi150-k1Lowx*x5-phi160', 5, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, first wave, layer 6', 5, 0);
model.physics('ge').feature('ge1').setIndex('name', 'phi170', 6, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 6, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 6, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 6, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 6, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k1Lowx*x6+phi160-k1Highx*x6-phi170', 6, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, first wave, layer 7', 6, 0);
model.physics('ge').feature('ge1').setIndex('name', 'phi180', 7, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 7, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 7, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 7, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 7, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k1Highx*x7+phi170-k1Prismx*x7-phi180', 7, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, first wave, layer 8', 7, 0);
model.physics('ge').feature('ge1').setIndex('name', 'phi200', 8, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 8, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 8, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 8, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 8, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k2Prismy*x7+phi200-k2Highy*x7-phi210', 8, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, second wave, layer 0', 8, 0);
model.physics('ge').feature('ge1').setIndex('name', 'phi210', 9, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 9, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 9, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 9, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 9, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k2Highy*x6+phi210-k2Lowy*x6-phi220', 9, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, second wave, layer 1', 9, 0);
model.physics('ge').feature('ge1').setIndex('name', 'phi220', 10, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 10, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 10, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 10, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 10, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k2Lowy*x5+phi220-k2Highy*x5-phi230', 10, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, second wave, layer 2', 10, 0);
model.physics('ge').feature('ge1').setIndex('name', 'phi230', 11, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 11, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 11, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 11, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 11, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k2Highy*x4+phi230-k2Lowy*x4', 11, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, second wave, layer 3', 11, 0);
model.physics('ge').feature('ge1').setIndex('name', 'phi250', 12, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 12, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 12, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 12, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 12, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k2Lowy*x3-k2Highy*x3-phi250', 12, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, second wave, layer 5', 12, 0);
model.physics('ge').feature('ge1').setIndex('name', 'phi260', 13, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 13, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 13, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 13, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 13, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k2Highy*x2+phi250-k2Lowy*x2-phi260', 13, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, second wave, layer 6', 13, 0);
model.physics('ge').feature('ge1').setIndex('name', 'phi270', 14, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 14, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 14, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 14, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 14, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k2Lowy*x1+phi260-k2Highy*x1-phi270', 14, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, second wave, layer 7', 14, 0);
model.physics('ge').feature('ge1').setIndex('name', 'phi280', 15, 0);
model.physics('ge').feature('ge1').setIndex('equation', '', 15, 0);
model.physics('ge').feature('ge1').setIndex('initialValueU', 0, 15, 0);
model.physics('ge').feature('ge1').setIndex('initialValueUt', 0, 15, 0);
model.physics('ge').feature('ge1').setIndex('description', '', 15, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'k2Highy*x0+phi270-k2Prismy*x0-phi280', 15, 0);
model.physics('ge').feature('ge1').setIndex('description', 'Phase constant, second wave, layer 8', 15, 0);

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.set([3]);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'w0/4');
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.named('geom1_pi1_csel3_dom');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.named('int1');
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 2);
model.mesh('mesh1').create('map2', 'Map');
model.mesh('mesh1').run;

model.study('std1').create('stat', 'Stationary');
model.study('std1').feature.move('stat', 0);
model.study('std1').feature('freq').set('plist', 'c_const/lda0');
model.study('std1').feature('freq').setEntry('activate', 'ge', false);
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'wl0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'wl0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'lda0', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(wl0-dWl/2,(wl0+dWl/2-(wl0-dWl/2))/(wlCount-1),wl0+dWl/2)', 0);
model.study('std1').feature('param').setIndex('punit', 'nm', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'freq');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'freq');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s2').feature('p1').set('plistarr', {'c_const/lda0'});
model.sol('sol1').feature('s2').feature('p1').set('punit', {'THz'});
model.sol('sol1').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s2').feature('p1').set('probes', {});
model.sol('sol1').feature('s2').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s2').set('linpmethod', 'sol');
model.sol('sol1').feature('s2').set('linpsol', 'zero');
model.sol('sol1').feature('s2').set('control', 'freq');
model.sol('sol1').feature('s2').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('s2').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s2').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s2').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'lda0'});
model.batch('p1').set('plistarr', {'range(wl0-dWl/2,(wl0+dWl/2-(wl0-dWl/2))/(wlCount-1),wl0+dWl/2)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol3');
model.sol('sol3').study('std1');
model.sol('sol3').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol3');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Electric Field (ewbe)');
model.result('pg1').set('data', 'dset3');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 11, 1);
model.result('pg1').set('data', 'dset3');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 11, 1);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWavesBeamEnvelopes/phys1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Electric Field');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').set('data', 'dset3');
model.result.numerical('gev1').set('expr', {'phi100' 'phi110' 'phi120' 'phi130' 'phi150' 'phi160' 'phi170' 'phi180' 'phi200' 'phi210'  ...
'phi220' 'phi230' 'phi250' 'phi260' 'phi270' 'phi280'});
model.result.numerical('gev1').set('descr', {'Phase constant, first wave, layer 0' 'Phase constant, first wave, layer 1' 'Phase constant, first wave, layer 2' 'Phase constant, first wave, layer 3' 'Phase constant, first wave, layer 5' 'Phase constant, first wave, layer 6' 'Phase constant, first wave, layer 7' 'Phase constant, first wave, layer 8' 'Phase constant, second wave, layer 0' 'Phase constant, second wave, layer 1'  ...
'Phase constant, second wave, layer 2' 'Phase constant, second wave, layer 3' 'Phase constant, second wave, layer 5' 'Phase constant, second wave, layer 6' 'Phase constant, second wave, layer 7' 'Phase constant, second wave, layer 8'});
model.result('pg1').run;
model.result('pg1').set('looplevel', [1 6]);
model.result('pg1').run;
model.result('pg1').feature('surf1').set('resolution', 'extrafine');
model.result('pg1').run;
model.result('pg1').feature('surf1').set('resolution', 'normal');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').run;
model.result('pg2').set('data', 'dset3');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('linewidth', 'preference');
model.result('pg2').feature('glob1').set('expr', {'Ptop'});
model.result('pg2').feature('glob1').set('descr', {'Top beam power'});
model.result('pg2').feature('glob1').set('unit', {'W/m'});
model.result('pg2').feature('glob1').set('expr', {'Ptop' 'Pright'});
model.result('pg2').feature('glob1').set('descr', {'Top beam power' 'Right beam power'});
model.result('pg2').feature('glob1').setIndex('expr', 'Ptop/Pin', 0);
model.result('pg2').feature('glob1').setIndex('unit', 1, 0);
model.result('pg2').feature('glob1').setIndex('descr', 'R<sub>up</sub>', 0);
model.result('pg2').feature('glob1').setIndex('expr', 'Pright/Pin', 1);
model.result('pg2').feature('glob1').setIndex('unit', 1, 1);
model.result('pg2').feature('glob1').setIndex('descr', 'T', 1);
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'outer');
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').feature('glob1').set('xdataexpr', 'lda0');
model.result('pg2').feature('glob1').set('xdataunit', 'nm');
model.result('pg2').run;
model.result('pg2').feature('glob1').set('legendmethod', 'manual');
model.result('pg2').feature('glob1').setIndex('legends', 'R<sub>up,s</sub>', 0);
model.result('pg2').feature('glob1').setIndex('legends', 'T<sub>s</sub>', 1);
model.result('pg2').run;

model.sol('sol3').copySolution('sol15');

model.physics('ewbe').prop('components').set('components', 'inplane');
model.physics('ewbe').feature('mbc1').set('E0i', {'0' 'E0*exp(-(y/w0)^2)' '0'});

model.sol('sol1').study('std1');
model.sol('sol2').copySolution('sol27');

model.result.dataset('dset2').set('solution', 'none');

model.sol('sol1').feature.remove('s2');
model.sol('sol1').feature.remove('v2');
model.sol('sol1').feature.remove('st2');
model.sol('sol1').feature.remove('su1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol27').copySolution('sol2');
model.sol.remove('sol27');
model.sol('sol2').label('Solution Store 1');

model.result.dataset.remove('dset6');

model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').feature('su1').set('sol', 'sol2');
model.sol('sol1').feature('su1').label('Solution Store 1');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'freq');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'freq');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s2').feature('p1').set('plistarr', {'c_const/lda0'});
model.sol('sol1').feature('s2').feature('p1').set('punit', {'THz'});
model.sol('sol1').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plotgroup', 'pg1');
model.sol('sol1').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s2').feature('p1').set('probes', {});
model.sol('sol1').feature('s2').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s2').set('linpmethod', 'sol');
model.sol('sol1').feature('s2').set('linpsol', 'zero');
model.sol('sol1').feature('s2').set('control', 'freq');
model.sol('sol1').feature('s2').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('s2').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s2').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s2').feature('aDef').set('nullfun', 'auto');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s2').feature.remove('fcDef');

model.result.dataset('dset2').set('solution', 'sol2');

model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');

model.batch('p1').feature.remove('so1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'sol3');
model.batch('p1').set('pname', {'lda0'});
model.batch('p1').set('plistarr', {'range(wl0-dWl/2,(wl0+dWl/2-(wl0-dWl/2))/(wlCount-1),wl0+dWl/2)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');
model.batch('p1').run('compute');

model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').feature('glob1').set('data', 'dset4');
model.result('pg2').feature.duplicate('glob2', 'glob1');
model.result('pg2').run;
model.result('pg2').feature('glob2').set('data', 'dset3');
model.result('pg2').feature('glob2').setIndex('legends', 'R<sub>up,p</sub>', 0);
model.result('pg2').feature('glob2').setIndex('legends', 'T<sub>p</sub>', 1);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Reflectance and transmittance');
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Upward reflectance and straight-through transmittance for s- and p-polarization');
model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').set('data', 'dset3');
model.result.dataset('cln1').setIndex('genpoints', '-dStack', 0, 0);
model.result.dataset('cln1').setIndex('genpoints', 'dStack', 0, 1);
model.result.dataset('cln1').setIndex('genpoints', 'dStack', 1, 0);
model.result.dataset('cln1').setIndex('genpoints', '-dStack', 1, 1);
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').set('data', 'cln1');
model.result('pg3').setIndex('looplevelinput', 'first', 1);
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'Refractive index');
model.result('pg3').set('titletype', 'none');
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg3').feature('lngr1').set('linewidth', 'preference');
model.result('pg3').feature('lngr1').set('expr', 'ewbe.nxx');
model.result('pg3').feature('lngr1').set('xdata', 'expr');
model.result('pg3').feature('lngr1').set('xdataexpr', 'x');
model.result('pg3').feature('lngr1').set('xdataunit', 'nm');

model.common('cminpt').set('modified', {'frequency' 'c_const/lda0'});

model.material('mat4').propertyGroup('InternalTransmittance10').func('int1').set('extrap', 'const');
model.material('mat4').propertyGroup('InternalTransmittance25').func('int1').set('extrap', 'const');
model.material('matlnk1').active(true);

model.physics('ewbe').feature('webe1').set('minput_frequency_src', 'fromCommonDef');

model.material('matlnk1').active(false);

model.title('Polarizing Beam Splitter');

model.description(['A Gaussian beam is incident on a 45-degree thin-film stack embedded in glass material prisms. The thin-film stack is designed from alternating high and low refractive index materials. The wave will be refracted at the Brewster angle at each internal interface. Thus, mainly p-polarized waves (polarization in the plane of incidence) will be transmitted, whereas mainly s-polarized waves (polarization orthogonal to the plane of incidence) will be reflected. Changing the spot radius for the Gaussian beam modifies the polarization discrimination.' newline  newline 'The reflectance and transmittance spectra are calculated for different Gaussian beam spot radii.']);

model.label('polarizing_beam_splitter.mph');

model.setExpectedComputationTime('2 minutes');

model.result.report.create('rpt1', 'Report');
model.result.report('rpt1').label('Polarizing Beam Splitter');
model.result.report('rpt1').set('format', 'docx');
model.result.report('rpt1').set('filename', 'user:///polarizing_beam_splitter');
model.result.report('rpt1').set('imagesize', 'large');
model.result.report('rpt1').feature.create('tp1', 'TitlePage');
model.result.report('rpt1').feature('tp1').set('frontmatterlayout', 'headings');
model.result.report('rpt1').feature.create('toc1', 'TableOfContents');
model.result.report('rpt1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').label('Software Information');
model.result.report('rpt1').feature('sec1').feature.create('root1', 'Model');
model.result.report('rpt1').feature('sec1').feature('root1').label('About the Software');
model.result.report('rpt1').feature('sec1').feature.create('std1', 'Study');
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').label('Input Data');
model.result.report('rpt1').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec1').label('Parameters');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 6, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 12, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 13, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 14, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 15, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 16, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 17, 1);
model.result.report('rpt1').feature('sec2').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec2').label('Geometry');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.create('geom1', 'Geometry');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').set('includestats', false);
model.result.report('rpt1').feature('sec2').feature('sec2').feature('geom1').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec2').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec3').label('Refractive Index Profile');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('pg1').set('noderef', 'pg3');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('pg1').label('Refractive Index Profile');
model.result.report('rpt1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').label('Results');
model.result.report('rpt1').feature('sec3').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').label('Electric Field Norm');
model.result.report('rpt1').feature('sec3').feature('sec1').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('pg1').label('Electric Field Norm');
model.result.report('rpt1').feature('sec3').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec2').label('Reflectance and Transmittance');
model.result.report('rpt1').feature('sec3').feature('sec2').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('pg1').set('noderef', 'pg2');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('pg1').label('Reflectance and Transmittance');

model.title('Polarizing Beam Splitter');

model.description(['A Gaussian beam is incident on a 45-degree thin-film stack embedded in glass material prisms. The thin-film stack is designed from alternating high and low refractive index materials. The wave will be refracted at the Brewster angle at each internal interface. Thus, mainly p-polarized waves (polarization in the plane of incidence) will be transmitted, whereas mainly s-polarized waves (polarization orthogonal to the plane of incidence) will be reflected. Changing the spot radius for the Gaussian beam modifies the polarization discrimination.' newline  newline 'The reflectance and transmittance spectra are calculated for different Gaussian beam spot radii.' newline  newline 'The app automatically calculates the phase expressions necessary for the Electromagnetic Waves, Beam Envelopes interface, when the user changes the design parameters.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;
model.sol('sol20').clearSolutionData;
model.sol('sol21').clearSolutionData;
model.sol('sol22').clearSolutionData;
model.sol('sol23').clearSolutionData;
model.sol('sol24').clearSolutionData;
model.sol('sol25').clearSolutionData;
model.sol('sol26').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol27').clearSolutionData;
model.sol('sol28').clearSolutionData;
model.sol('sol29').clearSolutionData;
model.sol('sol30').clearSolutionData;
model.sol('sol31').clearSolutionData;
model.sol('sol32').clearSolutionData;
model.sol('sol33').clearSolutionData;
model.sol('sol34').clearSolutionData;
model.sol('sol35').clearSolutionData;
model.sol('sol36').clearSolutionData;
model.sol('sol37').clearSolutionData;

model.label('polarizing_beam_splitter.mph');

model.modelNode.label('Components');

out = model;
