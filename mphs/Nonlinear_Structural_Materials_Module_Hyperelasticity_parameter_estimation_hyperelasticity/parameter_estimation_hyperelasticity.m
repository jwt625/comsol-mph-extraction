function out = model
%
% parameter_estimation_hyperelasticity.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Nonlinear_Structural_Materials_Module/Hyperelasticity');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);

model.baseSystem('mpa');

model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').label('Uniaxial Data');
model.result.table('tbl1').importData('parameter_estimation_hyperelasticity_uniaxial.txt');
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').label('Pure Shear Data');
model.result.table('tbl2').importData('parameter_estimation_hyperelasticity_pure_shear.txt');
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').label('Equibiaxial Data');
model.result.table('tbl3').importData('parameter_estimation_hyperelasticity_equibiaxial.txt');
model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').label('Experimental Data');
model.result('pg1').set('titletype', 'label');
model.result('pg1').set('xlabelactive', true);
model.result('pg1').set('xlabel', 'Applied stretch (1)');
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'Nominal stress (MPa)');
model.result('pg1').set('legendpos', 'upperleft');
model.result('pg1').create('tblp1', 'Table');
model.result('pg1').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg1').feature('tblp1').set('linewidth', 'preference');
model.result('pg1').feature('tblp1').label('Uniaxial Data');
model.result('pg1').feature('tblp1').set('linestyle', 'none');
model.result('pg1').feature('tblp1').set('linecolor', 'cyclereset');
model.result('pg1').feature('tblp1').set('linemarker', 'point');
model.result('pg1').feature('tblp1').set('legend', true);
model.result('pg1').feature('tblp1').set('legendmethod', 'manual');
model.result('pg1').feature('tblp1').setIndex('legends', 'Uniaxial data', 0);
model.result('pg1').feature.duplicate('tblp2', 'tblp1');
model.result('pg1').run;
model.result('pg1').feature('tblp2').label('Pure Shear Data');
model.result('pg1').feature('tblp2').set('table', 'tbl2');
model.result('pg1').feature('tblp2').set('linecolor', 'cycle');
model.result('pg1').feature('tblp2').setIndex('legends', 'Pure shear data', 0);
model.result('pg1').feature.duplicate('tblp3', 'tblp2');
model.result('pg1').run;
model.result('pg1').feature('tblp3').label('Equibiaxial Data');
model.result('pg1').feature('tblp3').set('table', 'tbl3');
model.result('pg1').feature('tblp3').setIndex('legends', 'Equibiaxial data', 0);
model.result('pg1').run;

model.param.set('mu1', '200[kPa]');
model.param.descr('mu1', 'Ogden modulus, branch 1');
model.param.set('alpha1', '2.0');
model.param.descr('alpha1', 'Ogden exponent, branch 1');
model.param.set('mu2', '-1.0[kPa]');
model.param.descr('mu2', 'Ogden modulus, branch 2');
model.param.set('alpha2', '-2.0');
model.param.descr('alpha2', 'Ogden exponent, branch 2');
model.param.set('stretch', '1');
model.param.descr('stretch', 'Applied stretch');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').run('blk1');
model.geom('geom1').create('arr1', 'Array');
model.geom('geom1').feature('arr1').selection('input').set({'blk1'});
model.geom('geom1').feature('arr1').set('fullsize', [1 3 1]);
model.geom('geom1').feature('arr1').set('displ', [0 3 0]);
model.geom('geom1').run('fin');

model.physics('solid').prop('StructuralTransientBehavior').set('StructuralTransientBehavior', 'Quasistatic');
model.physics('solid').prop('ShapeProperty').set('order_displacement', 1);
model.physics('solid').create('hmm1', 'HyperelasticModel', 3);
model.physics('solid').feature('hmm1').selection.set([1 2 3]);
model.physics('solid').feature('hmm1').set('MaterialModel', 'Ogden');
model.physics('solid').feature('hmm1').set('Compressibility_Ogden', 'Incompressible');
model.physics('solid').feature('hmm1').setIndex('mup', 0, 1, 0);
model.physics('solid').feature('hmm1').setIndex('alphap', 0, 1, 0);
model.physics('solid').feature('hmm1').setIndex('alphap', 0, 1, 0);
model.physics('solid').feature('hmm1').setIndex('mup', 0, 1, 0);
model.physics('solid').feature('hmm1').setIndex('alphap', 0, 1, 0);
model.physics('solid').feature('hmm1').setIndex('mup', 'mu1', 0, 0);
model.physics('solid').feature('hmm1').setIndex('alphap', 'alpha1', 0, 0);
model.physics('solid').feature('hmm1').setIndex('mup', 'mu2', 1, 0);
model.physics('solid').feature('hmm1').setIndex('alphap', 'alpha2', 1, 0);
model.physics('solid').feature('hmm1').set('reducedIntegration', true);
model.physics('solid').create('roll1', 'Roller', 2);
model.physics('solid').feature('roll1').selection.set([1 2 3 6 7 8 11 12 13]);
model.physics('solid').create('disp1', 'Displacement2', 2);
model.physics('solid').feature('disp1').selection.set([16 17 18]);
model.physics('solid').feature('disp1').setIndex('Direction', 'prescribed', 0);
model.physics('solid').feature('disp1').setIndex('U0', 'stretch-1', 0);
model.physics('solid').create('disp2', 'Displacement2', 2);
model.physics('solid').feature('disp2').selection.set([10]);
model.physics('solid').feature('disp2').setIndex('Direction', 'prescribed', 1);
model.physics('solid').create('disp3', 'Displacement2', 2);
model.physics('solid').feature('disp3').selection.set([15]);
model.physics('solid').feature('disp3').setIndex('Direction', 'prescribed', 1);
model.physics('solid').feature('disp3').setIndex('U0', 'stretch-1', 1);

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.set([1 6 11]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.all;
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 1);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 1);
model.mesh('mesh1').run;

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.set([1]);
model.cpl('aveop1').set('frame', 'material');
model.cpl.duplicate('aveop2', 'aveop1');
model.cpl('aveop2').selection.set([2]);
model.cpl.duplicate('aveop3', 'aveop2');
model.cpl('aveop3').selection.set([3]);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('P_ua', 'aveop1(solid.PxX)');
model.variable('var1').descr('P_ua', 'Uniaxial');
model.variable('var1').set('P_ps', 'aveop2(solid.PxX)');
model.variable('var1').descr('P_ps', 'Pure shear');
model.variable('var1').set('P_eb', 'aveop3(solid.PxX)');
model.variable('var1').descr('P_eb', 'Equibiaxial');

model.study('std1').label('Forward Problem');
model.study('std1').setGenPlots(false);
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'mu1', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'MPa', 0);
model.study('std1').feature('stat').setIndex('pname', 'mu1', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'MPa', 0);
model.study('std1').feature('stat').setIndex('pname', 'stretch', 0);
model.study('std1').feature('stat').setIndex('plistarr', 'range(1.0, 0.05, 2.5)', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d1').set('nliniterrefine', true);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 40);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with SA AMG) (solid)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('v1').feature('comp1_solid_hmm1_pw').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_hmm1_pw').set('scaleval', '10[MPa]');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol1').runAll;

model.result('pg1').run;
model.result.duplicate('pg2', 'pg1');
model.result('pg2').run;
model.result('pg2').label('Initial Model Prediction');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('markerpos', 'datapoints');
model.result('pg2').feature('glob1').set('linewidth', 'preference');
model.result('pg2').feature('glob1').label('Initial Model Prediction');
model.result('pg2').feature('glob1').setIndex('expr', 'P_ua', 0);
model.result('pg2').feature('glob1').setIndex('expr', 'P_ps', 1);
model.result('pg2').feature('glob1').setIndex('expr', 'P_eb', 2);
model.result('pg2').feature('glob1').set('linecolor', 'cyclereset');
model.result('pg2').feature('glob1').set('legendmethod', 'manual');
model.result('pg2').feature('glob1').setIndex('legends', 'Uniaxial model', 0);
model.result('pg2').feature('glob1').setIndex('legends', 'Pure shear model', 1);
model.result('pg2').feature('glob1').setIndex('legends', 'Equibiaxial model', 2);
model.result('pg2').run;

model.common.create('glso1', 'GlobalLeastSquaresObjective', 'comp1');
model.common('glso1').label('Uniaxial Tension Test');
model.common('glso1').set('source', 'resultTable');
model.common('glso1').setEntry('columnType', 'col1', 'param');
model.common('glso1').setEntry('parameterName', 'col1', 'stretch');
model.common('glso1').setEntry('parameterUnit', 'col1', '1');
model.common('glso1').setEntry('modelExpression', 'col2', 'comp1.P_ua');
model.common('glso1').setEntry('variableName', 'col2', 'UA');
model.common('glso1').setEntry('unit', 'col2', 'MPa');
model.common.create('glso2', 'GlobalLeastSquaresObjective', 'comp1');
model.common('glso2').label('Pure Shear Test');
model.common('glso2').set('source', 'resultTable');
model.common('glso2').set('resultTable', 'tbl2');
model.common('glso2').setEntry('columnType', 'col1', 'param');
model.common('glso2').setEntry('parameterName', 'col1', 'stretch');
model.common('glso2').setEntry('parameterUnit', 'col1', '1');
model.common('glso2').setEntry('modelExpression', 'col2', 'comp1.P_ps');
model.common('glso2').setEntry('variableName', 'col2', 'PS');
model.common('glso2').setEntry('unit', 'col2', 'MPa');
model.common.create('glso3', 'GlobalLeastSquaresObjective', 'comp1');
model.common('glso3').label('Equibiaxial Tension Test');
model.common('glso3').set('source', 'resultTable');
model.common('glso3').set('resultTable', 'tbl3');
model.common('glso3').setEntry('columnType', 'col1', 'param');
model.common('glso3').setEntry('parameterName', 'col1', 'stretch');
model.common('glso3').setEntry('parameterUnit', 'col1', '1');
model.common('glso3').setEntry('modelExpression', 'col2', 'comp1.P_eb');
model.common('glso3').setEntry('variableName', 'col2', 'EB');
model.common('glso3').setEntry('unit', 'col2', 'MPa');

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/solid', true);
model.study('std2').label('Parameter Estimation');
model.study('std2').setGenPlots(false);
model.study('std2').create('lsqo', 'LSQOptimization');
model.study('std2').feature('lsqo').setIndex('pname', 'mu1', 0);
model.study('std2').feature('lsqo').setIndex('initval', '200[kPa]', 0);
model.study('std2').feature('lsqo').setIndex('scale', 1, 0);
model.study('std2').feature('lsqo').setIndex('lbound', '', 0);
model.study('std2').feature('lsqo').setIndex('ubound', '', 0);
model.study('std2').feature('lsqo').setIndex('pname', 'mu1', 0);
model.study('std2').feature('lsqo').setIndex('initval', '200[kPa]', 0);
model.study('std2').feature('lsqo').setIndex('scale', 1, 0);
model.study('std2').feature('lsqo').setIndex('lbound', '', 0);
model.study('std2').feature('lsqo').setIndex('ubound', '', 0);
model.study('std2').feature('lsqo').setIndex('pname', 'alpha1', 1);
model.study('std2').feature('lsqo').setIndex('initval', '2.0', 1);
model.study('std2').feature('lsqo').setIndex('scale', 1, 1);
model.study('std2').feature('lsqo').setIndex('lbound', '', 1);
model.study('std2').feature('lsqo').setIndex('ubound', '', 1);
model.study('std2').feature('lsqo').setIndex('pname', 'alpha1', 1);
model.study('std2').feature('lsqo').setIndex('initval', '2.0', 1);
model.study('std2').feature('lsqo').setIndex('scale', 1, 1);
model.study('std2').feature('lsqo').setIndex('lbound', '', 1);
model.study('std2').feature('lsqo').setIndex('ubound', '', 1);
model.study('std2').feature('lsqo').setIndex('pname', 'mu2', 2);
model.study('std2').feature('lsqo').setIndex('initval', '-1.0[kPa]', 2);
model.study('std2').feature('lsqo').setIndex('scale', 1, 2);
model.study('std2').feature('lsqo').setIndex('lbound', '', 2);
model.study('std2').feature('lsqo').setIndex('ubound', '', 2);
model.study('std2').feature('lsqo').setIndex('pname', 'mu2', 2);
model.study('std2').feature('lsqo').setIndex('initval', '-1.0[kPa]', 2);
model.study('std2').feature('lsqo').setIndex('scale', 1, 2);
model.study('std2').feature('lsqo').setIndex('lbound', '', 2);
model.study('std2').feature('lsqo').setIndex('ubound', '', 2);
model.study('std2').feature('lsqo').setIndex('pname', 'alpha2', 3);
model.study('std2').feature('lsqo').setIndex('initval', '-2.0', 3);
model.study('std2').feature('lsqo').setIndex('scale', 1, 3);
model.study('std2').feature('lsqo').setIndex('lbound', '', 3);
model.study('std2').feature('lsqo').setIndex('ubound', '', 3);
model.study('std2').feature('lsqo').setIndex('pname', 'alpha2', 3);
model.study('std2').feature('lsqo').setIndex('initval', '-2.0', 3);
model.study('std2').feature('lsqo').setIndex('scale', 1, 3);
model.study('std2').feature('lsqo').setIndex('lbound', '', 3);
model.study('std2').feature('lsqo').setIndex('ubound', '', 3);
model.study('std2').feature('lsqo').setIndex('pname', 'mu1', 0);
model.study('std2').feature('lsqo').setIndex('scale', '200[kPa]', 0);
model.study('std2').feature('lsqo').setIndex('lbound', 0, 0);
model.study('std2').feature('lsqo').setIndex('pname', 'alpha1', 1);
model.study('std2').feature('lsqo').setIndex('lbound', 0, 1);
model.study('std2').feature('lsqo').setIndex('pname', 'mu2', 2);
model.study('std2').feature('lsqo').setIndex('scale', '1[kPa]', 2);
model.study('std2').feature('lsqo').setIndex('ubound', 0, 2);
model.study('std2').feature('lsqo').setIndex('pname', 'alpha2', 3);
model.study('std2').feature('lsqo').setIndex('ubound', 0, 3);
model.study('std2').feature('stat').set('useparam', true);
model.study('std2').feature('stat').setIndex('pname', 'mu1', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'MPa', 0);
model.study('std2').feature('stat').setIndex('pname', 'mu1', 0);
model.study('std2').feature('stat').setIndex('plistarr', '', 0);
model.study('std2').feature('stat').setIndex('punit', 'MPa', 0);
model.study('std2').feature('stat').setIndex('pname', 'stretch', 0);
model.study('std2').feature('stat').setIndex('plistarr', '1.0 2.5', 0);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('o1', 'Optimization');
model.sol('sol2').feature('o1').set('gradientlm', 'numeric');
model.sol('sol2').feature('o1').set('diffint', 1.0E-6);
model.sol('sol2').feature('o1').set('control', 'lsqo');
model.sol('sol2').feature('o1').create('s1', 'StationaryAttrib');
model.sol('sol2').feature('o1').feature('s1').set('control', 'stat');
model.sol('sol2').feature('o1').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('o1').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('pname', {'stretch'});
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('plistarr', {'1.0 2.5'});
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('punit', {''});
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('sweeptype', 'sparse');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('probesel', 'none');
model.sol('sol2').feature('o1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol2').feature('o1').feature('s1').set('control', 'stat');
model.sol('sol2').feature('o1').feature('s1').create('p2', 'Parametric');
model.sol('sol2').feature('o1').feature('s1').feature('p2').set('control', 'stat');
model.sol('sol2').feature('o1').feature('s1').set('control', 'stat');
model.sol('sol2').feature('o1').feature('s1').feature('p2').set('plistarrlsq', {'1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.9, 1.95, 2.0, 2.05, 2.1, 2.15, 2.2, 2.25, 2.3, 2.35, 2.4, 2.45, 2.5'});
model.sol('sol2').feature('o1').feature('s1').feature('p2').set('lsqparamsout', ['   stretch' newline '      1.00' newline '      1.05' newline '      1.10' newline '      1.15' newline '      1.20' newline '      1.25' newline '      1.30' newline '      1.35' newline '      1.40' newline '      1.45' newline '      1.50' newline '      1.55' newline '      1.60' newline '      1.65' newline '      1.70' newline '      1.75' newline '      1.80' newline '      1.85' newline '      1.90' newline '      1.95' newline '      2.00' newline '      2.05' newline '      2.10' newline '      2.15' newline '      2.20' newline '      2.25' newline '      2.30' newline '      2.35' newline '      2.40' newline '      2.45' newline '      2.50' newline ]);
model.sol('sol2').feature('o1').feature('s1').feature('p2').set('pnamelsq', {'stretch'});
model.sol('sol2').feature('o1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('o1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('o1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('o1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('o1').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('o1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('o1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('o1').feature('s1').feature('d1').set('nliniterrefine', true);
model.sol('sol2').feature('o1').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol2').feature('o1').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('o1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('o1').feature('s1').feature('i1').set('rhob', 40);
model.sol('sol2').feature('o1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('o1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with SA AMG) (solid)');
model.sol('sol2').feature('o1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('o1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('o1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('o1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('o1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('o1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('o1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('o1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('o1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('o1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('o1').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('v1').feature('comp1_solid_hmm1_pw').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_solid_hmm1_pw').set('scaleval', '10[MPa]');
model.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol2').feature('o1').feature('s1').feature('fc1').set('dtech', 'const');

model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Parameter Estimation: Ogden Hyperelasticity');
model.result('pg3').set('data', 'dset2');
model.result('pg3').set('titletype', 'label');
model.result('pg3').set('xlabelactive', true);
model.result('pg3').set('xlabel', 'Applied stretch (1)');
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'Nominal stress (MPa)');
model.result('pg3').set('twoyaxes', true);
model.result('pg3').set('yseclabelactive', true);
model.result('pg3').set('yseclabel', 'Nominal stress (MPa)');
model.result('pg3').set('legendpos', 'upperleft');
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').feature.copy('tblp1', 'pg2/tblp1');
model.result('pg3').feature.copy('tblp2', 'pg2/tblp2');
model.result('pg3').feature.copy('tblp3', 'pg2/tblp3');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature('tblp3').set('plotonsecyaxis', true);
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').label('Uniaxial Model');
model.result('pg3').feature('glob1').setIndex('expr', 'glso1.UA.model', 0);
model.result('pg3').feature('glob1').set('linecolor', 'cyclereset');
model.result('pg3').feature('glob1').set('legendmethod', 'manual');
model.result('pg3').feature('glob1').setIndex('legends', 'Uniaxial model', 0);
model.result('pg3').feature.duplicate('glob2', 'glob1');
model.result('pg3').run;
model.result('pg3').feature('glob2').label('Pure Shear Model');
model.result('pg3').feature('glob2').setIndex('expr', 'glso2.PS.model', 0);
model.result('pg3').feature('glob2').set('linecolor', 'cycle');
model.result('pg3').feature('glob2').setIndex('legends', 'Pure shear model', 0);
model.result('pg3').feature.duplicate('glob3', 'glob2');
model.result('pg3').run;
model.result('pg3').feature('glob3').label('Equibiaxial Model');
model.result('pg3').feature('glob3').set('plotonsecyaxis', true);
model.result('pg3').feature('glob3').setIndex('expr', 'glso3.EB.model', 0);
model.result('pg3').feature('glob3').setIndex('legends', 'Equibiaxial model', 0);
model.result('pg3').run;
model.result('pg3').feature('glob1').create('filt1', 'GlobalFilter');
model.result('pg3').run;
model.result('pg3').feature('glob1').feature('filt1').set('expr', 'stretch<=2');
model.result('pg3').run;
model.result('pg3').feature('glob2').create('filt1', 'GlobalFilter');
model.result('pg3').run;
model.result('pg3').feature('glob2').feature('filt1').set('expr', 'stretch<=1.75');

model.study('std2').feature('lsqo').set('plot', true);
model.study('std2').feature('lsqo').set('plotgroup', 'pg3');
model.study('std2').feature('lsqo').set('showindobj', true);
model.study('std2').feature('lsqo').set('plotobj', true);
model.study('std2').feature('lsqo').set('addconfint', true);

model.sol('sol2').runAll;

model.result('pg3').run;

model.study('std2').feature('lsqo').set('probewindow', '');

model.result.evaluationGroup.create('std2lsqoparam1', 'EvaluationGroup');
model.result.evaluationGroup('std2lsqoparam1').set('defaultPlotID', 'estimatedParameters');
model.result.evaluationGroup('std2lsqoparam1').label('Estimated Parameters (std2) 1');
model.result.evaluationGroup('std2lsqoparam1').set('data', 'dset2');
model.result.evaluationGroup('std2lsqoparam1').setIndex('looplevelinput', 'last', 0);
model.result.evaluationGroup('std2lsqoparam1').set('transpose', true);
model.result.evaluationGroup('std2lsqoparam1').set('includeparameters', false);
model.result.evaluationGroup('std2lsqoparam1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std2lsqoparam1').feature('gev1').setIndex('expr', 'mu1', 0);
model.result.evaluationGroup('std2lsqoparam1').feature('gev1').setIndex('expr', 'alpha1', 1);
model.result.evaluationGroup('std2lsqoparam1').feature('gev1').setIndex('expr', 'mu2', 2);
model.result.evaluationGroup('std2lsqoparam1').feature('gev1').setIndex('expr', 'alpha2', 3);
model.result.evaluationGroup('std2lsqoparam1').run;
model.result.evaluationGroup('std2lsqoparam1').label('Estimated Parameters (std2) 1');
model.result.evaluationGroup('std2lsqoparam1').label('Estimated Parameters');
model.result('pg4').set('window', 'window1');
model.result('pg4').run;
model.result('pg4').label('Objective Function');
model.result('pg4').set('ylog', true);
model.result('pg4').set('legendpos', 'lowerleft');
model.result('pg3').run;

model.title('Parameter Estimation of Hyperelastic Materials');

model.description('This tutorial model demonstrates how to set up a parameter estimation study for fitting the material parameters of an Ogden hyperelastic model to experimental data. The procedure considers multiple load cases under large deformations, which is often necessary to obtain constitutive models with good predictive capabilities.');

model.label('parameter_estimation_hyperelasticity.mph');

model.modelNode.label('Components');

out = model;
